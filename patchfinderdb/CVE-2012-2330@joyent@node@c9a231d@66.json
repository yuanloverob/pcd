{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d2389f8fab22e2ce187551addde3b18730030af5",
      "candidate_info": {
        "commit_hash": "d2389f8fab22e2ce187551addde3b18730030af5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d2389f8fab22e2ce187551addde3b18730030af5",
        "files": [
          "test/simple/test-debugger-repl-utf8.js",
          "test/simple/test-debugger-repl.js"
        ],
        "message": "debug repl tests: Add visibility, remove test that times out\n\nThe 'Can't backtrace now' message takes over 10 seconds to return.\nThat's too much time to have to wait for a test, and when it times\nout, it was causing an orphaned node process.\n\nThis cleans up the node process, and also removes the test that's\ntiming out, so that the case is hit less often.\n\nTodo: Make the backtrace message come back faster.",
        "before_after_code_files": [
          "test/simple/test-debugger-repl-utf8.js||test/simple/test-debugger-repl-utf8.js",
          "test/simple/test-debugger-repl.js||test/simple/test-debugger-repl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-debugger-repl-utf8.js||test/simple/test-debugger-repl-utf8.js": [
          "File: test/simple/test-debugger-repl-utf8.js -> test/simple/test-debugger-repl-utf8.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: var child = spawn(process.execPath, ['debug', '--port=' + port, script]);",
          "34: var buffer = '';",
          "35: child.stdout.setEncoding('utf-8');",
          "36: child.stdout.on('data', function(data) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: console.error('./node', 'debug', '--port=' + port, script);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: var expected = [];",
          "47: child.on('line', function(line) {",
          "48:   assert.ok(expected.length > 0, 'Got unexpected line: ' + line);",
          "50:   var expectedLine = expected[0].lines.shift();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   line = line.replace(/^(debug> )+/, 'debug> ');",
          "51:   console.error('line> ' + line);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:   /\\d/, /\\d/, /\\d/, /\\d/, /\\d/",
          "135: ]);",
          "143: function finish() {",
          "144:   process.exit(0);",
          "145: }",
          "",
          "[Removed Lines]",
          "138: addTest('c, bt', [",
          "139:   /Can't request backtrace now/",
          "140: ]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151: }",
          "153: setTimeout(function() {",
          "154:   var err = 'Timeout';",
          "155:   if (expected.length > 0 && expected[0].lines) {",
          "156:     err = err + '. Expected: ' + expected[0].lines.shift();",
          "157:   }",
          "160: }, 5000);",
          "162: process.once('uncaughtException', function(e) {",
          "163:   quit();",
          "164:   console.error(e.toString());",
          "166:   process.exit(1);",
          "167: });",
          "",
          "[Removed Lines]",
          "159:   throw new Error(err);",
          "165:   child.kill('SIGKILL');",
          "",
          "[Added Lines]",
          "152:   console.error('dying badly');",
          "157:   quit();",
          "158:   child.kill('SIGKILL');",
          "161:   setTimeout(function() {",
          "162:     throw new Error(err);",
          "163:   }, 100);",
          "",
          "---------------"
        ],
        "test/simple/test-debugger-repl.js||test/simple/test-debugger-repl.js": [
          "File: test/simple/test-debugger-repl.js -> test/simple/test-debugger-repl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: var spawn = require('child_process').spawn;",
          "26: var debug = require('_debugger');",
          "28: var script = common.fixturesDir + '/breakpoints.js';",
          "33: var buffer = '';",
          "34: child.stdout.setEncoding('utf-8');",
          "",
          "[Removed Lines]",
          "30: var child = spawn(process.execPath,",
          "31:   ['debug', '--port=' + (common.PORT + 1337), script]);",
          "",
          "[Added Lines]",
          "28: var port = common.PORT + 1337;",
          "32: var child = spawn(process.execPath, ['debug', '--port=' + port, script]);",
          "34: console.error('./node', 'debug', '--port=' + port, script);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: var expected = [];",
          "46: child.on('line', function(line) {",
          "47:   assert.ok(expected.length > 0, 'Got unexpected line: ' + line);",
          "49:   var expectedLine = expected[0].lines.shift();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   line = line.replace(/^(debug> )+/, 'debug> ');",
          "51:   console.error('line> ' + line);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:   /\\d/, /\\d/, /\\d/, /\\d/, /\\d/",
          "139: ]);",
          "147: function finish() {",
          "148:   process.exit(0);",
          "149: }",
          "",
          "[Removed Lines]",
          "142: addTest('c, bt', [",
          "143:   /Can't request backtrace now/",
          "144: ]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:   if (expected.length > 0 && expected[0].lines) {",
          "160:     err = err + '. Expected: ' + expected[0].lines.shift();",
          "161:   }",
          "164: }, 5000);",
          "166: process.once('uncaughtException', function(e) {",
          "",
          "[Removed Lines]",
          "163:   throw new Error(err);",
          "",
          "[Added Lines]",
          "161:   quit();",
          "162:   child.kill('SIGKILL');",
          "165:   setTimeout(function() {",
          "166:     throw new Error(err);",
          "167:   }, 100);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa0650f4444c438d9538135a3707de3f2f313081",
      "candidate_info": {
        "commit_hash": "aa0650f4444c438d9538135a3707de3f2f313081",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/aa0650f4444c438d9538135a3707de3f2f313081",
        "files": [
          "lib/net.js",
          "test/simple/test-cluster-net-listen.js"
        ],
        "message": "cluster: fix libuv assert in net.listen()\n\nProblem: calling `server.listen()` (no port) on a net.Server triggered the\nfollowing libuv assertion:\n\n  node: ../deps/uv/src/unix/stream.c:406: uv__write: Assertion `fd_to_send >= 0'\n  failed.\n\nCause: uv_tcp_t handles are lazily initialized. Omitting the port made the\nhandle get initialized even more lazily. Too lazily - it wasn't initialized\nwhen the handle was sent over to the child process.\n\nSolution: implicitly bind to a random port in listen() when the port number\nis omitted, it forces the handle to initialize. This is not a change in\nbehavior, listen() has always been identical to listen(0).\n\nFixes #3325.",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-cluster-net-listen.js||test/simple/test-cluster-net-listen.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "967:   var TCP = process.binding('tcp_wrap').TCP;",
          "969:   if (arguments.length == 0 || typeof arguments[0] == 'function') {",
          "974:   } else if (arguments[0] && typeof arguments[0] === 'object') {",
          "975:     var h = arguments[0];",
          "",
          "[Removed Lines]",
          "972:     listen(self, null, null, backlog);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-net-listen.js||test/simple/test-cluster-net-listen.js": [
          "File: test/simple/test-cluster-net-listen.js -> test/simple/test-cluster-net-listen.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var cluster = require('cluster');",
          "25: var net = require('net');",
          "27: if (cluster.isMaster) {",
          "29:   var worker = cluster.fork();",
          "30:   worker.on('exit', function(statusCode) {",
          "31:     assert.equal(statusCode, 0);",
          "32:     worker = null;",
          "33:   });",
          "34:   process.on('exit', function() {",
          "35:     assert.equal(worker, null);",
          "36:   });",
          "37: }",
          "38: else {",
          "40:   net.createServer(assert.fail).listen(process.exit);",
          "41: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c07712860398f863670c5b90fb4f4559d299e19",
      "candidate_info": {
        "commit_hash": "2c07712860398f863670c5b90fb4f4559d299e19",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2c07712860398f863670c5b90fb4f4559d299e19",
        "files": [
          "lib/http.js",
          "test/simple/test-http-server-multiheaders.js"
        ],
        "message": "http: allow multiple WWW-Authenticate headers",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "test/simple/test-http-server-multiheaders.js||test/simple/test-http-server-multiheaders.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:     case 'cookie':",
          "295:     case 'pragma':",
          "296:     case 'link':",
          "297:       if (field in dest) {",
          "298:         dest[field] += ', ' + value;",
          "299:       } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-http-server-multiheaders.js||test/simple/test-http-server-multiheaders.js": [
          "File: test/simple/test-http-server-multiheaders.js -> test/simple/test-http-server-multiheaders.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: var srv = http.createServer(function(req, res) {",
          "31:   assert.equal(req.headers.accept, 'abc, def, ghijklmnopqrst');",
          "32:   assert.equal(req.headers.host, 'foo');",
          "33:   assert.equal(req.headers['x-foo'], 'bingo');",
          "34:   assert.equal(req.headers['x-bar'], 'banjo, bango');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:   assert.equal(req.headers['www-authenticate'], 'foo, bar, baz');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:       ['host', 'foo'],",
          "52:       ['Host', 'bar'],",
          "53:       ['hOst', 'baz'],",
          "54:       ['x-foo', 'bingo'],",
          "55:       ['x-bar', 'banjo'],",
          "56:       ['x-bar', 'bango']",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:       ['www-authenticate', 'foo'],",
          "56:       ['WWW-Authenticate', 'bar'],",
          "57:       ['WWW-AUTHENTICATE', 'baz'],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "828bf50a0eec3f5c7b7e86bbd636d78f7e0f15b5",
      "candidate_info": {
        "commit_hash": "828bf50a0eec3f5c7b7e86bbd636d78f7e0f15b5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/828bf50a0eec3f5c7b7e86bbd636d78f7e0f15b5",
        "files": [
          "src/node_isolate.cc",
          "src/node_isolate.h",
          "src/node_vars.cc",
          "src/node_vars.h"
        ],
        "message": "isolates have globals stored in struct globals",
        "before_after_code_files": [
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h",
          "src/node_vars.cc||src/node_vars.cc",
          "src/node_vars.h||src/node_vars.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   assert(isolate_->GetData() == NULL);",
          "48:   isolate_->SetData(this);",
          "49: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   globals_init(&globals_);",
          "51: }",
          "54: struct globals* Isolate::Globals() {",
          "55:   return &globals_;",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"queue.h\"",
          "26: #include \"v8.h\"",
          "27: #include \"uv.h\"",
          "29: #ifdef NDEBUG",
          "30: # define NODE_ISOLATE_CHECK(ptr) ((void) (ptr))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"node_vars.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   void Dispose();",
          "72: private:",
          "73:   Isolate(uv_loop_t* loop);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   struct globals* Globals();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:   SLIST_HEAD(AtExitCallbacks, AtExitCallbackInfo) at_exit_callbacks_;",
          "82:   v8::Isolate* isolate_;",
          "83:   uv_loop_t* loop_;",
          "84: };",
          "86: } // namespace node",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:   struct globals globals_;",
          "",
          "---------------"
        ],
        "src/node_vars.cc||src/node_vars.cc": [
          "File: src/node_vars.cc -> src/node_vars.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <node_vars.h>",
          "2: #if HAVE_OPENSSL",
          "3: # include <node_crypto.h>",
          "4: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #include <node_isolate.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   memset(g, 0, sizeof(struct globals));",
          "18:   g->debug_port = 5858;",
          "",
          "[Removed Lines]",
          "12: static struct globals g_struct;",
          "13: static struct globals* g_ptr;",
          "16: static void globals_init(struct globals* g) {",
          "",
          "[Added Lines]",
          "13: void globals_init(struct globals* g) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31: }",
          "34: struct globals* globals_get() {",
          "35:   if (!g_ptr) {",
          "36:     g_ptr = &g_struct;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #if HAVE_ISOLATES",
          "32: struct globals* globals_get() {",
          "33:   node::Isolate* isolate = node::Isolate::GetCurrent();",
          "34:   return isolate->Globals();",
          "35: }",
          "36: #else",
          "37: static struct globals g_struct;",
          "38: static struct globals* g_ptr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "38:   }",
          "39:   return g_ptr;",
          "40: }",
          "42: }  // namespace node",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #endif  // HAVE_ISOLATES",
          "",
          "---------------"
        ],
        "src/node_vars.h||src/node_vars.h": [
          "File: src/node_vars.h -> src/node_vars.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:   ::ares_channel ares_channel;",
          "184: };",
          "186: struct globals* globals_get();",
          "188: }  // namespace node",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: void globals_init(struct globals*);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3d4c3560ea966149db39a889cb682d0fbf982ca",
      "candidate_info": {
        "commit_hash": "c3d4c3560ea966149db39a889cb682d0fbf982ca",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c3d4c3560ea966149db39a889cb682d0fbf982ca",
        "files": [
          "src/node.h"
        ],
        "message": "node: bump NODE_MODULE_VERSION\n\nBump NODE_MODULE_VERSION so old modules won't load without recompiling when\nthe next major release (v0.10) comes out.\n\nThis is necessary because the ABI changes between major releases.",
        "before_after_code_files": [
          "src/node.h||src/node.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: #define NODE_STANDARD_MODULE_STUFF \\",
          "220:           NODE_MODULE_VERSION,     \\",
          "",
          "[Removed Lines]",
          "217: #define NODE_MODULE_VERSION (1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}