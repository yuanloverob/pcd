{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "289a0c849b7d0a2242089d4a06cfb5a16284a40d",
      "candidate_info": {
        "commit_hash": "289a0c849b7d0a2242089d4a06cfb5a16284a40d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/289a0c849b7d0a2242089d4a06cfb5a16284a40d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c"
        ],
        "message": "Remove more unnecessary sqlite3GetVdbe() calls, replacing them with assert()s.\n\nFossilOrigin-Name: b7dc932197665f0ebde3ffb8f0785c22da07ce307cfd5f0eab69e86e4b38fcde",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 86d3790caf92e9cb7a9aaaa110f309b4b6945ac30cfd53fc3e5aa1ec3075ada5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: static void codeTableLocks(Parse *pParse){",
          "92:   int i;",
          "93:   Vdbe *pVdbe = pParse->pVdbe;",
          "96:   for(i=0; i<pParse->nTableLock; i++){",
          "97:     TableLock *p = &pParse->aTableLock[i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:   assert( pVdbe!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4831: ){",
          "4833:   assert( (errCode&0xff)==SQLITE_CONSTRAINT || pParse->nested );",
          "4834:   if( onError==OE_Abort ){",
          "4835:     sqlite3MayAbort(pParse);",
          "",
          "[Removed Lines]",
          "4832:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "",
          "[Added Lines]",
          "4832:   Vdbe *v;",
          "4833:   assert( pParse->pVdbe!=0 );",
          "4834:   v = sqlite3GetVdbe(pParse);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: ){",
          "33:   Vdbe *v;",
          "34:   assert( !IsVirtual(pTab) );",
          "36:   assert( opcode==OP_OpenWrite || opcode==OP_OpenRead );",
          "37:   sqlite3TableLock(pParse, iDb, pTab->tnum,",
          "38:                    (opcode==OP_OpenWrite)?1:0, pTab->zName);",
          "",
          "[Removed Lines]",
          "35:   v = sqlite3GetVdbe(pParse);",
          "",
          "[Added Lines]",
          "35:   assert( pParse->pVdbe!=0 );",
          "36:   v = pParse->pVdbe;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a23d26cba46693ae634c7c0b1fdda9c0a115946",
      "candidate_info": {
        "commit_hash": "9a23d26cba46693ae634c7c0b1fdda9c0a115946",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a23d26cba46693ae634c7c0b1fdda9c0a115946",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/mem2.c",
          "src/test_malloc.c",
          "test/tester.tcl"
        ],
        "message": "Modifications to test code so that the sqlite3MemdebugHastype() assert() statements are enabled for Tcl tests.\n\nFossilOrigin-Name: e3c423cb1407c06a3806ae6304e4713c37cd446f4cc399731884e3d009938e57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/mem2.c||src/mem2.c",
          "src/test_malloc.c||src/test_malloc.c",
          "test/tester.tcl||test/tester.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 917a479b0d11fb59abf41d0317ffc541eb4b83928df9382b4782953c0035fa3e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/mem2.c||src/mem2.c": [
          "File: src/mem2.c -> src/mem2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "381: void sqlite3MemdebugSetType(void *p, u8 eType){",
          "383:     struct MemBlockHdr *pHdr;",
          "384:     pHdr = sqlite3MemsysGetHeader(p);",
          "385:     assert( pHdr->iForeGuard==FOREGUARD );",
          "",
          "[Removed Lines]",
          "382:   if( p && sqlite3GlobalConfig.m.xMalloc==sqlite3MemMalloc ){",
          "",
          "[Added Lines]",
          "382:   if( p && sqlite3GlobalConfig.m.xFree==sqlite3MemFree ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399: int sqlite3MemdebugHasType(void *p, u8 eType){",
          "400:   int rc = 1;",
          "402:     struct MemBlockHdr *pHdr;",
          "403:     pHdr = sqlite3MemsysGetHeader(p);",
          "",
          "[Removed Lines]",
          "401:   if( p && sqlite3GlobalConfig.m.xMalloc==sqlite3MemMalloc ){",
          "",
          "[Added Lines]",
          "401:   if( p && sqlite3GlobalConfig.m.xFree==sqlite3MemFree ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "421: int sqlite3MemdebugNoType(void *p, u8 eType){",
          "422:   int rc = 1;",
          "424:     struct MemBlockHdr *pHdr;",
          "425:     pHdr = sqlite3MemsysGetHeader(p);",
          "",
          "[Removed Lines]",
          "423:   if( p && sqlite3GlobalConfig.m.xMalloc==sqlite3MemMalloc ){",
          "",
          "[Added Lines]",
          "423:   if( p && sqlite3GlobalConfig.m.xFree==sqlite3MemFree ){",
          "",
          "---------------"
        ],
        "src/test_malloc.c||src/test_malloc.c": [
          "File: src/test_malloc.c -> src/test_malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:   return p;",
          "113: }",
          "",
          "[Removed Lines]",
          "125: static void faultsimFree(void *p){",
          "126:   memfault.m.xFree(p);",
          "127: }",
          "128: static int faultsimSize(void *p){",
          "129:   return memfault.m.xSize(p);",
          "130: }",
          "131: static int faultsimRoundup(int n){",
          "132:   return memfault.m.xRoundup(n);",
          "133: }",
          "134: static int faultsimInit(void *p){",
          "135:   return memfault.m.xInit(memfault.m.pAppData);",
          "136: }",
          "137: static void faultsimShutdown(void *p){",
          "138:   memfault.m.xShutdown(memfault.m.pAppData);",
          "139: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206: static int faultsimInstall(int install){",
          "217:   int rc;",
          "219:   install = (install ? 1 : 0);",
          "",
          "[Removed Lines]",
          "207:   static struct sqlite3_mem_methods m = {",
          "216:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:     rc = sqlite3_config(SQLITE_CONFIG_GETMALLOC, &memfault.m);",
          "228:     assert(memfault.m.xMalloc);",
          "229:     if( rc==SQLITE_OK ){",
          "230:       rc = sqlite3_config(SQLITE_CONFIG_MALLOC, &m);",
          "231:     }",
          "232:     sqlite3_test_control(SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:       sqlite3_mem_methods m = memfault.m;",
          "195:       m.xMalloc = faultsimMalloc;",
          "196:       m.xRealloc = faultsimRealloc;",
          "",
          "---------------"
        ],
        "test/tester.tcl||test/tester.tcl": [
          "File: test/tester.tcl -> test/tester.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:         set ::dbhandle [lindex $args 0]",
          "130:         uplevel #0 $::G(perm:dbconfig)",
          "131:       }",
          "132:       set res",
          "133:     } else {",
          "134:       # This command is not opening a new database connection. Pass the",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:       [lindex $args 0] cache size 3",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "589c7876201f46f60b9a099dfcc1ebf92ef039c8",
      "candidate_info": {
        "commit_hash": "589c7876201f46f60b9a099dfcc1ebf92ef039c8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/589c7876201f46f60b9a099dfcc1ebf92ef039c8",
        "files": [
          "ext/icu/icu.c",
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "test/icu.test",
          "test/like.test",
          "test/like3.test"
        ],
        "message": "Chagnes the ESCAPE clause on the LIKE operator to overwrite wildcard characters, in order ot match the behavior of PosgreSQL.\n\nFossilOrigin-Name: 11e0844f71e8f2d27ce9363fb505e02fd7795c61dae0b3886cf0d8df4484dd97",
        "before_after_code_files": [
          "ext/icu/icu.c||ext/icu/icu.c",
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "test/icu.test||test/icu.test",
          "test/like.test||test/like.test",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/icu/icu.c||ext/icu/icu.c": [
          "File: ext/icu/icu.c -> ext/icu/icu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:       uint8_t c;",
          "",
          "[Removed Lines]",
          "146:     if( !prevEscape && uPattern==MATCH_ALL ){",
          "",
          "[Added Lines]",
          "146:     if( uPattern==MATCH_ALL && !prevEscape && uPattern!=(uint32_t)uEsc ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:       }",
          "170:       return 0;",
          "174:       if( *zString==0 ) return 0;",
          "175:       SQLITE_ICU_SKIP_UTF8(zString);",
          "179:       prevEscape = 1;",
          "",
          "[Removed Lines]",
          "172:     }else if( !prevEscape && uPattern==MATCH_ONE ){",
          "177:     }else if( !prevEscape && uPattern==(uint32_t)uEsc){",
          "",
          "[Added Lines]",
          "172:     }else if( uPattern==MATCH_ONE && !prevEscape && uPattern!=(uint32_t)uEsc ){",
          "177:     }else if( uPattern==(uint32_t)uEsc && !prevEscape ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d64f4a8af81fe1235fffa54884d8f842a48ff6a33d6172f0cd65bf42fe8b2a1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "853:   int nPat;",
          "854:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "855:   struct compareInfo *pInfo = sqlite3_user_data(context);",
          "857: #ifdef SQLITE_LIKE_DOESNT_MATCH_BLOBS",
          "858:   if( sqlite3_value_type(argv[0])==SQLITE_BLOB",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856:   struct compareInfo backupInfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "888:       return;",
          "889:     }",
          "890:     escape = sqlite3Utf8Read(&zEsc);",
          "891:   }else{",
          "892:     escape = pInfo->matchSet;",
          "893:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "892:     if( escape==pInfo->matchAll || escape==pInfo->matchOne ){",
          "893:       memcpy(&backupInfo, pInfo, sizeof(backupInfo));",
          "894:       pInfo = &backupInfo;",
          "895:       if( escape==pInfo->matchAll ) pInfo->matchAll = 0;",
          "896:       if( escape==pInfo->matchOne ) pInfo->matchOne = 0;",
          "897:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1870:   if( NEVER(pDef==0) || (pDef->funcFlags & SQLITE_FUNC_LIKE)==0 ){",
          "1871:     return 0;",
          "1872:   }",
          "1873:   if( nExpr<3 ){",
          "1874:     aWc[3] = 0;",
          "1875:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1885:   memcpy(aWc, pDef->pUserData, 3);",
          "1886:   assert( (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll );",
          "1887:   assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );",
          "1888:   assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1878:     if( pEscape->op!=TK_STRING ) return 0;",
          "1879:     zEscape = pEscape->u.zToken;",
          "1880:     if( zEscape[0]==0 || zEscape[1]!=0 ) return 0;",
          "1881:     aWc[3] = zEscape[0];",
          "1882:   }",
          "1893:   return 1;",
          "1894: }",
          "",
          "[Removed Lines]",
          "1888:   memcpy(aWc, pDef->pUserData, 3);",
          "1889:   assert( (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll );",
          "1890:   assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );",
          "1891:   assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );",
          "",
          "[Added Lines]",
          "1898:     if( zEscape[0]==aWc[0] ) return 0;",
          "1899:     if( zEscape[0]==aWc[1] ) return 0;",
          "",
          "---------------"
        ],
        "test/icu.test||test/icu.test": [
          "File: test/icu.test -> test/icu.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:   }",
          "147: }",
          "149: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: # 2020-03-19",
          "150: # The ESCAPE clause on LIKE takes precedence over wildcards",
          "151: #",
          "152: do_execsql_test idu-6.0 {",
          "153:   DROP TABLE IF EXISTS t1;",
          "154:   CREATE TABLE t1(id INTEGER PRIMARY KEY, x TEXT);",
          "155:   INSERT INTO t1 VALUES",
          "156:     (1,'abcde'),",
          "157:     (2,'abc_'),",
          "158:     (3,'abc__'),",
          "159:     (4,'abc%'),",
          "160:     (5,'abc%%');",
          "161:   SELECT id FROM t1 WHERE x LIKE 'abc%%' ESCAPE '%';",
          "162: } {4}",
          "163: do_execsql_test icu-6.1 {",
          "164:   SELECT id FROM t1 WHERE x LIKE 'abc__' ESCAPE '_';",
          "165: } {2}",
          "",
          "---------------"
        ],
        "test/like.test||test/like.test": [
          "File: test/like.test -> test/like.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1113:   SELECT * FROM t1 WHERE a LIKE ' 1-';",
          "1114: } {{ 1-}}",
          "1116: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1116: # 2020-03-19",
          "1117: # The ESCAPE clause on LIKE takes precedence over wildcards",
          "1118: #",
          "1119: do_execsql_test 17.0 {",
          "1120:   DROP TABLE IF EXISTS t1;",
          "1121:   CREATE TABLE t1(id INTEGER PRIMARY KEY, x TEXT);",
          "1122:   INSERT INTO t1 VALUES",
          "1123:     (1,'abcde'),",
          "1124:     (2,'abc_'),",
          "1125:     (3,'abc__'),",
          "1126:     (4,'abc%'),",
          "1127:     (5,'abc%%');",
          "1128:   SELECT id FROM t1 WHERE x LIKE 'abc%%' ESCAPE '%';",
          "1129: } {4}",
          "1130: do_execsql_test 17.1 {",
          "1131:   SELECT id FROM t1 WHERE x LIKE 'abc__' ESCAPE '_';",
          "1132: } {2}",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   `--SEARCH TABLE t1 USING PRIMARY KEY (path>? AND path<?)",
          "238: }",
          "239: do_eqp_test like3-6.120 {",
          "241: } {",
          "242:   QUERY PLAN",
          "243:   `--SEARCH TABLE t1 USING PRIMARY KEY (path>? AND path<?)",
          "",
          "[Removed Lines]",
          "240:   SELECT * FROM t1 WHERE path LIKE 'a%' ESCAPE '_';",
          "",
          "[Added Lines]",
          "240:   SELECT * FROM t1 WHERE path LIKE 'a%' ESCAPE 'x';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:   `--SEARCH TABLE t2 USING INDEX t2path (path>? AND path<?)",
          "256: }",
          "257: do_eqp_test like3-6.220 {",
          "259: } {",
          "260:   QUERY PLAN",
          "261:   `--SEARCH TABLE t2 USING INDEX t2path (path>? AND path<?)",
          "",
          "[Removed Lines]",
          "258:   SELECT * FROM t2 WHERE path LIKE 'a%' ESCAPE '_';",
          "",
          "[Added Lines]",
          "258:   SELECT * FROM t2 WHERE path LIKE 'a%' ESCAPE '\\';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "268:   `--SEARCH TABLE t2 USING INDEX t2path2 (path>? AND path<?)",
          "269: }",
          "270: do_eqp_test like3-6.240 {",
          "272: } {",
          "273:   QUERY PLAN",
          "274:   `--SEARCH TABLE t2 USING INDEX t2path2 (path>? AND path<?)",
          "",
          "[Removed Lines]",
          "271:   SELECT * FROM t2 WHERE path LIKE 'a%' ESCAPE '_';",
          "",
          "[Added Lines]",
          "271:   SELECT * FROM t2 WHERE path LIKE 'a%' ESCAPE '\\';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41aa442cf4fd66cafbc37f3a1718aeb4c498a96f",
      "candidate_info": {
        "commit_hash": "41aa442cf4fd66cafbc37f3a1718aeb4c498a96f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/41aa442cf4fd66cafbc37f3a1718aeb4c498a96f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/orderby5.test"
        ],
        "message": "When determining whether an == or IS constraint in a WHERE clause makes an ORDER BY term redundant, consider the collation sequence used by the == or IS comparison, not the collation sequence of the comparison expression itself. Possible fix for [fb8c538a8f].\n\nFossilOrigin-Name: 16aed5d0c63dcdc2054dbb8a4b6b992476640433bf81e19301e6db5a3fc82633",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/orderby5.test||test/orderby5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7d8dcfb95cea732e7588e7505bf80a171dd2e371b164c9435c6ac286060df6df",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3752:         if( j>=pLoop->nLTerm ) continue;",
          "3753:       }",
          "3754:       if( (pTerm->eOperator&(WO_EQ|WO_IS))!=0 && pOBExpr->iColumn>=0 ){",
          "3757:           continue;",
          "3758:         }",
          "3759:         testcase( pTerm->pExpr->op==TK_IS );",
          "",
          "[Removed Lines]",
          "3755:         if( sqlite3ExprCollSeqMatch(pWInfo->pParse,",
          "3756:                   pOrderBy->a[i].pExpr, pTerm->pExpr)==0 ){",
          "",
          "[Added Lines]",
          "3755:         Parse *pParse = pWInfo->pParse;",
          "3756:         CollSeq *pColl1 = sqlite3ExprNNCollSeq(pParse, pOrderBy->a[i].pExpr);",
          "3757:         CollSeq *pColl2 = sqlite3ExprCompareCollSeq(pParse, pTerm->pExpr);",
          "3758:         assert( pColl1 && (pParse->nErr || pColl2) );",
          "3759:         if( pColl2==0 || sqlite3StrICmp(pColl1->zName, pColl2->zName) ){",
          "",
          "---------------"
        ],
        "test/orderby5.test||test/orderby5.test": [
          "File: test/orderby5.test -> test/orderby5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   SELECT a FROM t3 WHERE b=2 AND c=3 ORDER BY d DESC, e DESC, b, c, a DESC;",
          "127: } {~/B-TREE/}",
          "130: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: #-------------------------------------------------------------------------",
          "130: do_execsql_test 4.1.0 {",
          "131:   CREATE TABLE t4(b COLLATE nocase);",
          "132:   INSERT INTO t4 VALUES('abc');",
          "133:   INSERT INTO t4 VALUES('ABC');",
          "134:   INSERT INTO t4 VALUES('aBC');",
          "135: }",
          "136: do_execsql_test 4.1.1 {",
          "137:   SELECT * FROM t4 ORDER BY b COLLATE binary",
          "138: } {ABC aBC abc}",
          "139: do_execsql_test 4.1.2 {",
          "140:   SELECT * FROM t4 WHERE b='abc' ORDER BY b COLLATE binary",
          "141: } {ABC aBC abc}",
          "143: do_execsql_test 4.2.1 {",
          "144:   CREATE TABLE Records(typeID INTEGER, key TEXT COLLATE nocase, value TEXT);",
          "145:   CREATE INDEX RecordsIndex ON Records(typeID, key, value);",
          "146: }",
          "147: do_execsql_test 4.2.2 {",
          "148:   explain query plan",
          "149:   SELECT typeID, key, value FROM Records",
          "150:   WHERE typeID = 2 AND key = 'x'",
          "151:   ORDER BY key, value;",
          "152: } {~/TEMP B-TREE/}",
          "153: do_execsql_test 4.2.3 {",
          "154:   explain query plan",
          "155:   SELECT typeID, key, value FROM Records",
          "156:   WHERE typeID = 2 AND (key = 'x' COLLATE binary)",
          "157:   ORDER BY key, value;",
          "158: } {~/TEMP B-TREE/}",
          "159: do_execsql_test 4.2.4 {",
          "160:   explain query plan",
          "161:   SELECT typeID, key, value FROM Records",
          "162:   WHERE typeID = 2",
          "163:   ORDER BY key, value;",
          "164: } {~/TEMP B-TREE/}",
          "166: db collate hello [list string match]",
          "167: do_execsql_test 4.3.1 {",
          "168:   CREATE TABLE t5(a INTEGER PRIMARY KEY, b COLLATE hello, c, d);",
          "169: }",
          "170: db close",
          "171: sqlite3 db test.db",
          "172: do_catchsql_test 4.3.2 {",
          "173:   SELECT a FROM t5 WHERE b='def' ORDER BY b;",
          "174: } {1 {no such collation sequence: hello}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "532b0d23fd80082a8706ec683b1c7afed26ee6c4",
      "candidate_info": {
        "commit_hash": "532b0d23fd80082a8706ec683b1c7afed26ee6c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/532b0d23fd80082a8706ec683b1c7afed26ee6c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/pager.c"
        ],
        "message": "Revise the layout of filenames in the Pager object so that it is unchanged from prior versions.  It turns out that some important 3rd-party software does questionable pointer manipulations on those filenames that depend on that legacy layout.  Technical this is a misuse of SQLite by the 3rd-party software, but we want to avoid unnecessary breakage.\n\nFossilOrigin-Name: 34ab760689fd493eda482e856047708d74e769a01cc90b69da456d79ffe39aea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14331989fcaf6591336290ed1548e9c90f0f153e27f456f4c30c966f9c23aa6e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4243:   return rc;",
          "4244: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4254: static const char *databaseName(const char *zName){",
          "4255:   while( zName[-1]!=0 || zName[-2]!=0 || zName[-3]!=0 || zName[-4]!=0 ){",
          "4256:     zName--;",
          "4257:   }",
          "4258:   return zName;",
          "4259: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4257: const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){",
          "4258:   if( zFilename==0 || zParam==0 ) return 0;",
          "4259:   zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4260:   while( zFilename[0] ){",
          "4261:     int x = strcmp(zFilename, zParam);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4274:   zFilename = databaseName(zFilename);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4272: const char *sqlite3_uri_key(const char *zFilename, int N){",
          "4273:   if( zFilename==0 || N<0 ) return 0;",
          "4274:   zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4275:   while( zFilename[0] && (N--)>0 ){",
          "4276:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4290:   zFilename = databaseName(zFilename);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4304:   return bDflt;",
          "4305: }",
          "",
          "[Removed Lines]",
          "4317: static const char *startOfNameList(const char *zName){",
          "4318:   while( zName[0]!='\\001' || zName[1]!=0 ){",
          "4319:     zName -= 3;",
          "4320:     while( zName[0]!='\\000' ){ zName--; }",
          "4321:     zName++;",
          "4322:   }",
          "4323:   return zName-1;",
          "4324: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4336: const char *sqlite3_filename_database(const char *zFilename){",
          "4337:   return sqlite3_uri_parameter(zFilename - 3, \"\\003\");",
          "4338: }",
          "4339: const char *sqlite3_filename_journal(const char *zFilename){",
          "4342: }",
          "4343: const char *sqlite3_filename_wal(const char *zFilename){",
          "4345: }",
          "",
          "[Removed Lines]",
          "4340:   const char *z = sqlite3_uri_parameter(startOfNameList(zFilename), \"\\001\");",
          "4341:   return ALWAYS(z) && z[0] ? z : 0;",
          "4344:   return sqlite3_uri_parameter(startOfNameList(zFilename), \"\\002\");",
          "",
          "[Added Lines]",
          "4335:   return databaseName(zFilename);",
          "4339:   zFilename = databaseName(zFilename);",
          "4340:   zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4341:   while( zFilename[0] ){",
          "4342:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4343:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4344:   }",
          "4345:   return zFilename + 1;",
          "4348: #ifdef SQLITE_OMIT_WAL",
          "4349:   return 0;",
          "4350: #else",
          "4351:   zFilename = sqlite3_filename_journal(zFilename);",
          "4352:   zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4353:   return zFilename;",
          "4354: #endif",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4875:   pPager->jfd =  (sqlite3_file*)pPtr;     pPtr += journalFileSize;",
          "4876:   assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );",
          "4881:   if( nPathname>0 ){",
          "4882:     pPager->zJournal = (char*)pPtr;",
          "4883:     memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname;",
          "",
          "[Removed Lines]",
          "4880:   pPtr[1] = '\\001';                       pPtr += 3;",
          "",
          "[Added Lines]",
          "4898:   pPager->zFilename = (char*)pPtr;",
          "4899:   if( nPathname>0 ){",
          "4900:     memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname + 1;",
          "4901:     if( zUri ){",
          "4902:       memcpy(pPtr, zUri, nUriByte);       pPtr += nUriByte;",
          "4903:     }else{",
          "4904:                                           pPtr++;",
          "4905:     }",
          "4906:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4888: #endif",
          "4889:   }else{",
          "4890:     pPager->zJournal = 0;",
          "4892:   }",
          "4894: #ifndef SQLITE_OMIT_WAL",
          "4897:   if( nPathname>0 ){",
          "4898:     pPager->zWal = (char*)pPtr;",
          "4899:     memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname;",
          "",
          "[Removed Lines]",
          "4891:     pPtr++;",
          "4896:   pPtr[0] = '\\002'; pPtr[1] = 0;          pPtr += 2;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4904: #endif",
          "4905:   }else{",
          "4906:     pPager->zWal = 0;",
          "4908:   }",
          "4909: #endif",
          "4922:   if( nPathname ) sqlite3DbFree(0, zPathname);",
          "4923:   pPager->pVfs = pVfs;",
          "4924:   pPager->vfsFlags = vfsFlags;",
          "",
          "[Removed Lines]",
          "4907:     pPtr++;",
          "4912:   pPtr[0] = '\\003'; pPtr[1] = 0;          pPtr += 2;",
          "4913:   pPager->zFilename = (char*)pPtr;",
          "4914:   if( nPathname>0 ){",
          "4915:     memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname + 1;",
          "4916:     if( zUri ){",
          "4918:     }",
          "4920:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7040: const char *sqlite3PagerFilename(const Pager *pPager, int nullIfMemDb){",
          "7043: }",
          "",
          "[Removed Lines]",
          "7041:   static const char zFake[] = { 0x00, 0x01, 0x00, 0x00, 0x00 };",
          "7042:   return (nullIfMemDb && pPager->memDb) ? &zFake[3] : pPager->zFilename;",
          "",
          "[Added Lines]",
          "7056:   static const char zFake[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };",
          "7057:   return (nullIfMemDb && pPager->memDb) ? &zFake[4] : pPager->zFilename;",
          "",
          "---------------"
        ]
      }
    }
  ]
}