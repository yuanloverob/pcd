{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "57e141bc28db0ac6fee77e24fadb437758060830",
      "candidate_info": {
        "commit_hash": "57e141bc28db0ac6fee77e24fadb437758060830",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57e141bc28db0ac6fee77e24fadb437758060830",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/dbtotxt.c"
        ],
        "message": "Fix the filename normalization in the dbtotxt utility program.\n\nFossilOrigin-Name: 29a00a05dd40ff59be340969e1aca4fee41e092f2faa1cea85a3448265a83c2c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b0a49d5e6df116bb5eacb60a0bb0f482760aec38bd417d4250d9e57d43bdbb13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:   }",
          "113:   zBaseName = zInputFile;",
          "114:   for(i=0; zInputFile[i]; i++){",
          "116:   }",
          "117:   printf(\"| size %d pagesize %d filename %s\\n\",(int)szFile,pgsz,zBaseName);",
          "118:   for(i=0; i<szFile; i+=16){",
          "",
          "[Removed Lines]",
          "115:     if( zInputFile[i]=='/' && zInputFile[i+1]!=0 ) zBaseName = zInputFile+1;",
          "",
          "[Added Lines]",
          "115:     if( zInputFile[i]=='/' && zInputFile[i+1]!=0 ) zBaseName = zInputFile+i+1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ac0e562a384a45458aa66c8cffeabaf532e111c",
      "candidate_info": {
        "commit_hash": "7ac0e562a384a45458aa66c8cffeabaf532e111c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ac0e562a384a45458aa66c8cffeabaf532e111c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join5.test"
        ],
        "message": "Fix an assert() failure that could occur in a join query if the RHS of an IN() operator is a list containing correlated expressions. This problem was introduced by checkin [e130319317e7611938] which was part of the fix for ticket [787fa716be3a7f650c] - so this commit is part of that ticket's fix too.\n\nFossilOrigin-Name: 778b1224a318d0137c7dab8361128f593506d3677267898119b934b4d66dfe38",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join5.test||test/join5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d91095ba7130e974f0c95334760c679a31479b07a3d458e15994a24eee474752",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2809:       if( addrOnce && !sqlite3ExprIsConstant(pE2) ){",
          "2810:         sqlite3VdbeChangeToNoop(v, addrOnce);",
          "2811:         addrOnce = 0;",
          "2812:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2811:         ExprClearProperty(pExpr, EP_Subrtn);",
          "",
          "---------------"
        ],
        "test/join5.test||test/join5.test": [
          "File: test/join5.test -> test/join5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:   `--SEARCH TABLE t4 USING INDEX t4xz (x=?)",
          "307: }",
          "309: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: reset_db",
          "310: do_execsql_test 8.0 {",
          "311:   CREATE TABLE t0 (c0, c1, PRIMARY KEY (c0, c1));",
          "312:   CREATE TABLE t1 (c0);",
          "314:   INSERT INTO t1 VALUES (2);",
          "316:   INSERT INTO t0 VALUES(0, 10);",
          "317:   INSERT INTO t0 VALUES(1, 10);",
          "318:   INSERT INTO t0 VALUES(2, 10);",
          "319:   INSERT INTO t0 VALUES(3, 10);",
          "320: }",
          "322: do_execsql_test 8.1 {",
          "323:   SELECT * FROM t0, t1",
          "324:   WHERE (t0.c1 >= 1 OR t0.c1 < 1) AND t0.c0 IN (1, t1.c0) ORDER BY 1;",
          "325: } {",
          "326:   1 10 2",
          "327:   2 10 2",
          "328: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9fd04bfd29b9df1c30f2f573c8f339b2d00f4bca",
      "candidate_info": {
        "commit_hash": "9fd04bfd29b9df1c30f2f573c8f339b2d00f4bca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9fd04bfd29b9df1c30f2f573c8f339b2d00f4bca",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: b68d21e93a0839b42f49845918df7738ee7fa2a05c7f4ae2f89fdbb5e47ad8eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 01ba4641ab436c6065c8725908fc0913f2abded4ea62e004b7534e0116b9451a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6df9c4b990059e43845f60752ae18565ddb7d702",
      "candidate_info": {
        "commit_hash": "6df9c4b990059e43845f60752ae18565ddb7d702",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6df9c4b990059e43845f60752ae18565ddb7d702",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/delete.c",
          "src/expr.c",
          "src/pragma.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/update.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "src/wherecode.c"
        ],
        "message": "Claw back some performance from the sqlite3ExprGetColumnOfTable() routine.\n\nFossilOrigin-Name: e8426acb94179ff49549aced6ea3c26c49ba4761c2f414fa1772d6a031edc79d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/delete.c||src/delete.c",
          "src/expr.c||src/expr.c",
          "src/pragma.c||src/pragma.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 447271123e3b467d9271a4c0cf27f47af2f865c9298b8c355d9e766411a1f422",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:     if( pPk ){",
          "476:       for(i=0; i<nPk; i++){",
          "477:         assert( pPk->aiColumn[i]>=0 );",
          "479:                                         pPk->aiColumn[i], iPk+i);",
          "480:       }",
          "481:       iKey = iPk;",
          "482:     }else{",
          "483:       iKey = ++pParse->nMem;",
          "485:     }",
          "487:     if( eOnePass!=ONEPASS_OFF ){",
          "",
          "[Removed Lines]",
          "478:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTabCur,",
          "484:       sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTabCur, -1, iKey);",
          "",
          "[Added Lines]",
          "478:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iTabCur,",
          "484:       sqlite3ExprCodeGetColumnOfTable(v, pTab, iTabCur, -1, iKey);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:       testcase( mask!=0xffffffff && iCol==31 );",
          "738:       testcase( mask!=0xffffffff && iCol==32 );",
          "739:       if( mask==0xffffffff || (iCol<=31 && (mask & MASKBIT32(iCol))!=0) ){",
          "742:       }",
          "743:     }",
          "",
          "[Removed Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, iCol,",
          "741:                                         iOld+iCol+1);",
          "",
          "[Added Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, iCol, iOld+iCol+1);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3365:     sqlite3ExprCodeCopy(pParse, pIdx->aColExpr->a[iIdxCol].pExpr, regOut);",
          "3366:     pParse->iSelfTab = 0;",
          "3367:   }else{",
          "3369:                                     iTabCol, regOut);",
          "3370:   }",
          "3371: }",
          "",
          "[Removed Lines]",
          "3368:     sqlite3ExprCodeGetColumnOfTable(pParse, pIdx->pTable, iTabCur,",
          "",
          "[Added Lines]",
          "3368:     sqlite3ExprCodeGetColumnOfTable(pParse->pVdbe, pIdx->pTable, iTabCur,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3376: void sqlite3ExprCodeGetColumnOfTable(",
          "3382: ){",
          "3384:   Column *pCol;",
          "3385:   assert( v!=0 );",
          "3386:   if( pTab==0 ){",
          "",
          "[Removed Lines]",
          "3383:   Vdbe *v = pParse->pVdbe;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3397:       x = iCol;",
          "3398: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3399:     }else if( (pCol = &pTab->aCol[iCol])->colFlags & COLFLAG_VIRTUAL ){",
          "3400:       if( pCol->colFlags & COLFLAG_BUSY ){",
          "3401:         sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\", pCol->zName);",
          "3402:       }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3399:       Parse *pParse = sqlite3VdbeParser(v);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3417:       op = OP_Column;",
          "3418:     }",
          "3419:     sqlite3VdbeAddOp3(v, op, iTabCur, x, regOut);",
          "3422:     sqlite3ColumnDefault(v, pTab, iCol, regOut);",
          "3423:   }",
          "3424: }",
          "",
          "[Removed Lines]",
          "3420:   }",
          "3421:   if( iCol>=0 ){",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3440: ){",
          "3441:   assert( pParse->pVdbe!=0 );",
          "3443:   if( p5 ){",
          "3444:     sqlite3VdbeChangeP5(pParse->pVdbe, p5);",
          "3445:   }",
          "",
          "[Removed Lines]",
          "3442:   sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTable, iColumn, iReg);",
          "",
          "[Added Lines]",
          "3440:   sqlite3ExprCodeGetColumnOfTable(pParse->pVdbe, pTab, iTable, iColumn, iReg);",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1408:         for(j=0; j<pFK->nCol; j++){",
          "1409:           int iCol = aiCols ? aiCols[j] : pFK->aCol[j].iFrom;",
          "1411:           sqlite3VdbeAddOp2(v, OP_IsNull, regRow+j, addrOk); VdbeCoverage(v);",
          "1412:         }",
          "",
          "[Removed Lines]",
          "1410:           sqlite3ExprCodeGetColumnOfTable(pParse, pTab, 0, iCol, regRow+j);",
          "",
          "[Added Lines]",
          "1410:           sqlite3ExprCodeGetColumnOfTable(v, pTab, 0, iCol, regRow+j);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1595:           int jmp2;",
          "1596:           if( j==pTab->iPKey ) continue;",
          "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
          "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
          "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
          "",
          "[Removed Lines]",
          "1598:           sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, j, 3);",
          "",
          "[Added Lines]",
          "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6417:           struct AggInfo_col *pCol = &sAggInfo.aCol[i];",
          "6418:           if( pCol->iSorterColumn>=j ){",
          "6419:             int r1 = j + regBase;",
          "6421:                                pCol->pTab, pCol->iTable, pCol->iColumn, r1);",
          "6422:             j++;",
          "6423:           }",
          "",
          "[Removed Lines]",
          "6420:             sqlite3ExprCodeGetColumnOfTable(pParse,",
          "",
          "[Added Lines]",
          "6420:             sqlite3ExprCodeGetColumnOfTable(v,",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4078: void sqlite3ExprCodeLoadIndexColumn(Parse*, Index*, int, int, int);",
          "4079: int sqlite3ExprCodeGetColumn(Parse*, Table*, int, int, int, u8);",
          "4081: void sqlite3ExprCodeMove(Parse*, int, int, int);",
          "4082: void sqlite3ExprCode(Parse*, Expr*, int);",
          "4083: void sqlite3ExprCodeCopy(Parse*, Expr*, int);",
          "",
          "[Removed Lines]",
          "4080: void sqlite3ExprCodeGetColumnOfTable(Parse*, Table*, int, int, int);",
          "",
          "[Added Lines]",
          "4080: void sqlite3ExprCodeGetColumnOfTable(Vdbe*, Table*, int, int, int);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "551:     for(i=0; i<nPk; i++){",
          "552:       assert( pPk->aiColumn[i]>=0 );",
          "554:                                       pPk->aiColumn[i], iPk+i);",
          "555:     }",
          "556:     if( eOnePass ){",
          "",
          "[Removed Lines]",
          "553:       sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur,",
          "",
          "[Added Lines]",
          "553:       sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "642:        || (colFlags & COLFLAG_PRIMKEY)!=0",
          "643:       ){",
          "644:         testcase(  oldmask!=0xffffffff && i==31 );",
          "646:       }else{",
          "647:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "648:       }",
          "",
          "[Removed Lines]",
          "645:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "",
          "[Added Lines]",
          "645:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, k);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "686:         testcase( i==31 );",
          "687:         testcase( i==32 );",
          "689:       }else{",
          "690:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "691:       }",
          "",
          "[Removed Lines]",
          "688:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "",
          "[Added Lines]",
          "688:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, k);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "732:       if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "733:         if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ) k--;",
          "734:       }else if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "736:       }",
          "737:     }",
          "738: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "",
          "[Removed Lines]",
          "735:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "",
          "[Added Lines]",
          "735:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, k);",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: Vdbe *sqlite3VdbeCreate(Parse*);",
          "182: int sqlite3VdbeAddOp0(Vdbe*,int);",
          "183: int sqlite3VdbeAddOp1(Vdbe*,int,int);",
          "184: int sqlite3VdbeAddOp2(Vdbe*,int,int,int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182: Parse *sqlite3VdbeParser(Vdbe*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   return p;",
          "43: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: Parse *sqlite3VdbeParser(Vdbe *p){",
          "49:   return p->pParse;",
          "50: }",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2072:           if( (pWInfo->wctrlFlags & WHERE_DUPLICATES_OK)==0 ){",
          "2073:             int iSet = ((ii==pOrWc->nTerm-1)?-1:ii);",
          "2074:             if( HasRowid(pTab) ){",
          "2076:               jmp1 = sqlite3VdbeAddOp4Int(v, OP_RowSetTest, regRowset, 0,",
          "2077:                                           regRowid, iSet);",
          "2078:               VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "2075:               sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iCur, -1, regRowid);",
          "",
          "[Added Lines]",
          "2075:               sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, -1, regRowid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2086:               r = sqlite3GetTempRange(pParse, nPk);",
          "2087:               for(iPk=0; iPk<nPk; iPk++){",
          "2088:                 int iCol = pPk->aiColumn[iPk];",
          "2090:               }",
          "",
          "[Removed Lines]",
          "2089:                 sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iCur, iCol,r+iPk);",
          "",
          "[Added Lines]",
          "2089:                 sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, iCol,r+iPk);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec39707fe669c1b08aff4a5bfdc076dd4ed6f6ee",
      "candidate_info": {
        "commit_hash": "ec39707fe669c1b08aff4a5bfdc076dd4ed6f6ee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec39707fe669c1b08aff4a5bfdc076dd4ed6f6ee",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New dbsqlfuzz cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 49073b7003330027303c4c776e9f85112f8b99b89f848fec3f953eba501d7505",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 322eca7f6ad2234059669015aabb773a790e8bc3da95431c9c851ff5342c969b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}