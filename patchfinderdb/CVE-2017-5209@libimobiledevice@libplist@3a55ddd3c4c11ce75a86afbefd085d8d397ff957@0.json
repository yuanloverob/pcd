{
  "cve_id": "CVE-2017-5209",
  "cve_desc": "The base64decode function in base64.c in libimobiledevice libplist through 1.12 allows attackers to obtain sensitive information from process memory or cause a denial of service (buffer over-read) via split encoded Apple Property List data.",
  "repo": "libimobiledevice/libplist",
  "patch_hash": "3a55ddd3c4c11ce75a86afbefd085d8d397ff957",
  "patch_info": {
    "commit_hash": "3a55ddd3c4c11ce75a86afbefd085d8d397ff957",
    "repo": "libimobiledevice/libplist",
    "commit_url": "https://github.com/libimobiledevice/libplist/commit/3a55ddd3c4c11ce75a86afbefd085d8d397ff957",
    "files": [
      "src/base64.c"
    ],
    "message": "base64: Rework base64decode to handle split encoded data correctly",
    "before_after_code_files": [
      "src/base64.c||src/base64.c"
    ]
  },
  "patch_diff": {
    "src/base64.c||src/base64.c": [
      "File: src/base64.c -> src/base64.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
      "29:  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
      "30:  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,",
      "32:  -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,",
      "33:  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,",
      "34:  -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,",
      "",
      "[Removed Lines]",
      "31:  52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,",
      "",
      "[Added Lines]",
      "31:  52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "71:  return m;",
      "72: }",
      "106: unsigned char *base64decode(const char *buf, size_t *size)",
      "107: {",
      "108:  if (!buf || !size) return NULL;",
      "",
      "[Removed Lines]",
      "74: static int base64decode_block(unsigned char *target, const char *data, size_t data_size)",
      "75: {",
      "76:  int w1,w2,w3,w4;",
      "77:  int i;",
      "78:  size_t n;",
      "80:  if (!data || (data_size <= 0)) {",
      "81:   return 0;",
      "82:  }",
      "84:  n = 0;",
      "85:  i = 0;",
      "86:  while (n < data_size-3) {",
      "87:   w1 = base64_table[(int)data[n]];",
      "88:   w2 = base64_table[(int)data[n+1]];",
      "89:   w3 = base64_table[(int)data[n+2]];",
      "90:   w4 = base64_table[(int)data[n+3]];",
      "92:   if (w2 >= 0) {",
      "93:    target[i++] = (char)((w1*4 + (w2 >> 4)) & 255);",
      "94:   }",
      "95:   if (w3 >= 0) {",
      "96:    target[i++] = (char)((w2*16 + (w3 >> 2)) & 255);",
      "97:   }",
      "98:   if (w4 >= 0) {",
      "99:    target[i++] = (char)((w3*64 + w4) & 255);",
      "100:   }",
      "101:   n+=4;",
      "102:  }",
      "103:  return i;",
      "104: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "111:  unsigned char *outbuf = (unsigned char*)malloc((len/4)*3+3);",
      "112:  const char *ptr = buf;",
      "113:  int p = 0;",
      "116:  do {",
      "118:   if (*ptr == '\\0' || ptr >= buf+len) {",
      "119:    break;",
      "120:   }",
      "127:   }",
      "128:  } while (1);",
      "",
      "[Removed Lines]",
      "114:  size_t l = 0;",
      "117:   ptr += strspn(ptr, \"\\r\\n\\t \");",
      "121:   l = strcspn(ptr, \"\\r\\n\\t \");",
      "122:   if (l > 3 && ptr+l <= buf+len) {",
      "123:    p+=base64decode_block(outbuf+p, ptr, l);",
      "124:    ptr += l;",
      "125:   } else {",
      "126:    break;",
      "",
      "[Added Lines]",
      "82:  int wv, w1, w2, w3, w4;",
      "83:  int tmpval[4];",
      "84:  int tmpcnt = 0;",
      "87:   while (ptr < buf+len && (*ptr == ' ' || *ptr == '\\t' || *ptr == '\\n' || *ptr == '\\r')) {",
      "88:    ptr++;",
      "89:   }",
      "93:   if ((wv = base64_table[(int)(unsigned char)*ptr++]) == -1) {",
      "94:    continue;",
      "95:   }",
      "96:   tmpval[tmpcnt++] = wv;",
      "97:   if (tmpcnt == 4) {",
      "98:    tmpcnt = 0;",
      "99:    w1 = tmpval[0];",
      "100:    w2 = tmpval[1];",
      "101:    w3 = tmpval[2];",
      "102:    w4 = tmpval[3];",
      "104:    if (w2 >= 0) {",
      "105:     outbuf[p++] = (unsigned char)(((w1 << 2) + (w2 >> 4)) & 0xFF);",
      "106:    }",
      "107:    if (w3 >= 0) {",
      "108:     outbuf[p++] = (unsigned char)(((w2 << 4) + (w3 >> 2)) & 0xFF);",
      "109:    }",
      "110:    if (w4 >= 0) {",
      "111:     outbuf[p++] = (unsigned char)(((w3 << 6) + w4) & 0xFF);",
      "112:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ae8b7a0f1a5cf569f52f35fc1f113d0c4f354f6e",
      "candidate_info": {
        "commit_hash": "ae8b7a0f1a5cf569f52f35fc1f113d0c4f354f6e",
        "repo": "libimobiledevice/libplist",
        "commit_url": "https://github.com/libimobiledevice/libplist/commit/ae8b7a0f1a5cf569f52f35fc1f113d0c4f354f6e",
        "files": [
          "src/base64.c"
        ],
        "message": "base64: Prevent use of strlen() in base64decode when input buffer size is known",
        "before_after_code_files": [
          "src/base64.c||src/base64.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/base64.c||src/base64.c"
          ],
          "candidate": [
            "src/base64.c||src/base64.c"
          ]
        }
      },
      "candidate_diff": {
        "src/base64.c||src/base64.c": [
          "File: src/base64.c -> src/base64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: unsigned char *base64decode(const char *buf, size_t *size)",
          "107: {",
          "110:  if (len <= 0) return NULL;",
          "111:  unsigned char *outbuf = (unsigned char*)malloc((len/4)*3+3);",
          "112:  const char *ptr = buf;",
          "113:  int p = 0;",
          "115:  do {",
          "116:   ptr += strspn(ptr, \"\\r\\n\\t \");",
          "118:    break;",
          "119:   }",
          "124:   } else {",
          "125:    break;",
          "126:   }",
          "",
          "[Removed Lines]",
          "108:  if (!buf) return NULL;",
          "109:  size_t len = strlen(buf);",
          "117:   if (*ptr == '\\0') {",
          "120:   len = strcspn(ptr, \"\\r\\n\\t \");",
          "121:   if (len > 3) {",
          "122:    p+=base64decode_block(outbuf+p, ptr, len);",
          "123:    ptr += len;",
          "",
          "[Added Lines]",
          "108:  if (!buf || !size) return NULL;",
          "109:  size_t len = (*size > 0) ? *size : strlen(buf);",
          "114:  size_t l = 0;",
          "118:   if (*ptr == '\\0' || ptr >= buf+len) {",
          "121:   l = strcspn(ptr, \"\\r\\n\\t \");",
          "122:   if (l > 3 && ptr+l <= buf+len) {",
          "123:    p+=base64decode_block(outbuf+p, ptr, l);",
          "124:    ptr += l;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e37ca0090343e0dae97e967d467bab56d502c37a",
      "candidate_info": {
        "commit_hash": "e37ca0090343e0dae97e967d467bab56d502c37a",
        "repo": "libimobiledevice/libplist",
        "commit_url": "https://github.com/libimobiledevice/libplist/commit/e37ca0090343e0dae97e967d467bab56d502c37a",
        "files": [
          "src/base64.c"
        ],
        "message": "base64: Prevent undefined shift when parsing invalid base64 encoded data\n\nCredit to OSS-Fuzz",
        "before_after_code_files": [
          "src/base64.c||src/base64.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/base64.c||src/base64.c"
          ],
          "candidate": [
            "src/base64.c||src/base64.c"
          ]
        }
      },
      "candidate_diff": {
        "src/base64.c||src/base64.c": [
          "File: src/base64.c -> src/base64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:    w3 = tmpval[2];",
          "102:    w4 = tmpval[3];",
          "105:     outbuf[p++] = (unsigned char)(((w1 << 2) + (w2 >> 4)) & 0xFF);",
          "106:    }",
          "108:     outbuf[p++] = (unsigned char)(((w2 << 4) + (w3 >> 2)) & 0xFF);",
          "109:    }",
          "111:     outbuf[p++] = (unsigned char)(((w3 << 6) + w4) & 0xFF);",
          "112:    }",
          "113:   }",
          "",
          "[Removed Lines]",
          "104:    if (w2 >= 0) {",
          "107:    if (w3 >= 0) {",
          "110:    if (w4 >= 0) {",
          "",
          "[Added Lines]",
          "104:    if (w1 >= 0 && w2 >= 0) {",
          "107:    if (w2 >= 0 && w3 >= 0) {",
          "110:    if (w3 >= 0 && w4 >= 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62bac060ed5ee6d64a71edf6cc627cc184ae87e5",
      "candidate_info": {
        "commit_hash": "62bac060ed5ee6d64a71edf6cc627cc184ae87e5",
        "repo": "libimobiledevice/libplist",
        "commit_url": "https://github.com/libimobiledevice/libplist/commit/62bac060ed5ee6d64a71edf6cc627cc184ae87e5",
        "files": [
          "src/base64.c"
        ],
        "message": "base64: Prevent buffer overflow by not decoding blocks with less than 4 chars",
        "before_after_code_files": [
          "src/base64.c||src/base64.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/base64.c||src/base64.c"
          ],
          "candidate": [
            "src/base64.c||src/base64.c"
          ]
        }
      },
      "candidate_diff": {
        "src/base64.c||src/base64.c": [
          "File: src/base64.c -> src/base64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:    break;",
          "119:   }",
          "120:   len = strcspn(ptr, \"\\r\\n\\t \");",
          "122:    p+=base64decode_block(outbuf+p, ptr, len);",
          "123:    ptr += len;",
          "124:   } else {",
          "",
          "[Removed Lines]",
          "121:   if (len > 0) {",
          "",
          "[Added Lines]",
          "121:   if (len > 3) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}