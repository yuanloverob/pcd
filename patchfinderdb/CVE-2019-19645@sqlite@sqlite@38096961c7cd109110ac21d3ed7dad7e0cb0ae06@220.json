{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1af9c603c70535a61b5785a4b29ce9cecc8f78d",
      "candidate_info": {
        "commit_hash": "b1af9c603c70535a61b5785a4b29ce9cecc8f78d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1af9c603c70535a61b5785a4b29ce9cecc8f78d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Progress handler improvements: (1) Invoke the callback after OP_Program opcodes (2) Invoke the callback multiple times in a row to catch up after a long run of no progress checks.\n\nFossilOrigin-Name: 0c5db18d79366d9c23925ce3ed835500311f32a10aa7dbfdd09148b1e8a2507b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fa792714ae62fa980f1767acc6d622a6727ceb677870243c88548423795dcb5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     assert( db->nProgressOps!=0 );",
          "825:     if( db->xProgress(db->pProgressArg) ){",
          "826:       nProgressLimit = 0xffffffff;",
          "827:       rc = SQLITE_INTERRUPT;",
          "",
          "[Removed Lines]",
          "822:   if( nVmStep>=nProgressLimit && db->xProgress!=0 ){",
          "824:     nProgressLimit = nVmStep + db->nProgressOps - (nVmStep%db->nProgressOps);",
          "",
          "[Added Lines]",
          "822:   while( nVmStep>=nProgressLimit && db->xProgress!=0 ){",
          "824:     nProgressLimit += db->nProgressOps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6174:   }",
          "6175: #endif",
          "6176:   pOp = &aOp[-1];",
          "6179: }",
          "",
          "[Removed Lines]",
          "6178:   break;",
          "",
          "[Added Lines]",
          "6177:   goto check_for_interrupt;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7586: vdbe_return:",
          "7587: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "7589:     if( db->xProgress(db->pProgressArg) ){",
          "7590:       nProgressLimit = 0xffffffff;",
          "7591:       rc = SQLITE_INTERRUPT;",
          "",
          "[Removed Lines]",
          "7588:   if( nVmStep>=nProgressLimit && db->xProgress!=0 ){",
          "",
          "[Added Lines]",
          "7587:   while( nVmStep>=nProgressLimit && db->xProgress!=0 ){",
          "7588:     nProgressLimit += db->nProgressOps;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b29ef5ef032e6da71785b49709a967737be352c4",
      "candidate_info": {
        "commit_hash": "b29ef5ef032e6da71785b49709a967737be352c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b29ef5ef032e6da71785b49709a967737be352c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix the OP_SeekRowid opcode so that it works correctly with a Real argument without damaging the value in the register that is the argument. Ticket [b2d4edaffdc156cc].  Test cases in TH3.\n\nFossilOrigin-Name: 3cde82c86b963fa75192907d548febd3882c7d8fc7daf1903fadd5ca46623be1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b73a09270dfafb27f8d1762b547ef8178c9da66f45e7153ff0b76272dfa92f5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4539:   pIn3 = &aMem[pOp->p3];",
          "4540:   testcase( pIn3->flags & MEM_Int );",
          "4541:   testcase( pIn3->flags & MEM_IntReal );",
          "4542:   if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4553:   }",
          "4556:   pIn3 = &aMem[pOp->p3];",
          "4557:   assert( (pIn3->flags & MEM_Int)!=0 || pOp->opcode==OP_SeekRowid );",
          "4558:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "4559:   pC = p->apCsr[pOp->p1];",
          "4560:   assert( pC!=0 );",
          "4561: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "4547:     u16 origFlags = pIn3->flags;",
          "4548:     int isNotInt;",
          "4549:     applyAffinity(pIn3, SQLITE_AFF_NUMERIC, encoding);",
          "4550:     isNotInt = (pIn3->flags & MEM_Int)==0;",
          "4551:     pIn3->flags = origFlags;",
          "4552:     if( isNotInt ) goto jump_to_p2;",
          "",
          "[Added Lines]",
          "4542:   testcase( pIn3->flags & MEM_Real );",
          "4543:   testcase( (pIn3->flags & (MEM_Str|MEM_Int))==MEM_Str );",
          "4550:     Mem x = pIn3[0];",
          "4551:     applyAffinity(&x, SQLITE_AFF_NUMERIC, encoding);",
          "4552:     if( (x.flags & MEM_Int)==0 ) goto jump_to_p2;",
          "4553:     iKey = x.u.i;",
          "4554:     goto notExistsWithKey;",
          "4561:   iKey = pIn3->u.i;",
          "4562: notExistsWithKey:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4566:   pCrsr = pC->uc.pCursor;",
          "4567:   assert( pCrsr!=0 );",
          "4568:   res = 0;",
          "4570:   rc = sqlite3BtreeMovetoUnpacked(pCrsr, 0, iKey, 0, &res);",
          "4571:   assert( rc==SQLITE_OK || res==0 );",
          "",
          "[Removed Lines]",
          "4569:   iKey = pIn3->u.i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f26b1453855dc4d651b59239ef39b43e9447ab15",
      "candidate_info": {
        "commit_hash": "f26b1453855dc4d651b59239ef39b43e9447ab15",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f26b1453855dc4d651b59239ef39b43e9447ab15",
        "files": [
          "ext/fts5/test/fts5aux.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Verify that fts5 auxiliary functions cannot be used in aggregate queries.\n\nFossilOrigin-Name: 122330dba3eb2492875bd02a46442306f73e251408447af5e5914ee0c8d6a110",
        "before_after_code_files": [
          "ext/fts5/test/fts5aux.test||ext/fts5/test/fts5aux.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5aux.test||ext/fts5/test/fts5aux.test": [
          "File: ext/fts5/test/fts5aux.test -> ext/fts5/test/fts5aux.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:   9 10",
          "276: }",
          "280: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278: #-------------------------------------------------------------------------",
          "279: # Test that aux. functions may not be used in aggregate queries.",
          "280: #",
          "281: reset_db",
          "282: do_execsql_test 10.0 {",
          "283:   CREATE VIRTUAL TABLE t1 USING fts5(x, y, z);",
          "284:   INSERT INTO t1 VALUES('a', 'one two', 1);",
          "285:   INSERT INTO t1 VALUES('b', 'two three', 2);",
          "286:   INSERT INTO t1 VALUES('c', 'three four', 1);",
          "287:   INSERT INTO t1 VALUES('d', 'four five', 2);",
          "288:   INSERT INTO t1 VALUES('e', 'five six', 1);",
          "289:   INSERT INTO t1 VALUES('f', 'six seven', 2);",
          "290: }",
          "292: proc firstcol {cmd} { $cmd xColumnText 0 }",
          "293: sqlite3_fts5_create_function db firstcol firstcol",
          "295: do_execsql_test 10.1.1 {",
          "296:   SELECT firstcol(t1) FROM t1",
          "297: } {a b c d e f}",
          "298: do_execsql_test 10.1.2 {",
          "299:   SELECT group_concat(x, '.') FROM t1",
          "300: } {a.b.c.d.e.f}",
          "302: do_catchsql_test 10.1.3 {",
          "303:   SELECT group_concat(firstcol(t1), '.') FROM t1",
          "304: } {1 {unable to use function firstcol in the requested context}}",
          "306: do_catchsql_test 10.1.4 {",
          "307:   SELECT group_concat(firstcol(t1), '.') FROM t1 GROUP BY rowid",
          "308: } {1 {unable to use function firstcol in the requested context}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 29d02bf2fa9ecacbcc3e862ca70382f5875da8c1dc7fd27366190045fcc42b15",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea38f4f4ccd5354fd47f5419c84ddef4d2f0c2c6",
      "candidate_info": {
        "commit_hash": "ea38f4f4ccd5354fd47f5419c84ddef4d2f0c2c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ea38f4f4ccd5354fd47f5419c84ddef4d2f0c2c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a double-quoted string literal used in the \".schema\" command of the CLI.\n\nFossilOrigin-Name: fcd937d9786a82ef4147e657d54ea0beb6ac87e2eb1677186b318493d473077b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee293e5aeac0b05a8b809095610fd8b4fdaf8e68cd368de90ec0d45e3582ffe5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8388:         zDiv = \" UNION ALL \";",
          "8389:         appendText(&sSelect, \"SELECT shell_add_schema(sql,\", 0);",
          "8390:         if( sqlite3_stricmp(zDb, \"main\")!=0 ){",
          "8392:         }else{",
          "8393:           appendText(&sSelect, \"NULL\", 0);",
          "8394:         }",
          "",
          "[Removed Lines]",
          "8391:           appendText(&sSelect, zDb, '\"');",
          "",
          "[Added Lines]",
          "8391:           appendText(&sSelect, zDb, '\\'');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8397:         appendText(&sSelect, \" AS snum, \", 0);",
          "8398:         appendText(&sSelect, zDb, '\\'');",
          "8399:         appendText(&sSelect, \" AS sname FROM \", 0);",
          "8401:         appendText(&sSelect, \".sqlite_master\", 0);",
          "8402:       }",
          "8403:       sqlite3_finalize(pStmt);",
          "",
          "[Removed Lines]",
          "8400:         appendText(&sSelect, zDb, '\"');",
          "",
          "[Added Lines]",
          "8400:         appendText(&sSelect, zDb, quoteChar(zDb));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0578084507ee2d5f951409b61029093e1408ec7b",
      "candidate_info": {
        "commit_hash": "0578084507ee2d5f951409b61029093e1408ec7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0578084507ee2d5f951409b61029093e1408ec7b",
        "files": [
          "ext/fts3/fts3Int.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the assert_fts3_nc() macro so that it works for test builds that omit SQLITE_DEBUG.\n\nFossilOrigin-Name: b10df2b569e356551cf51ca179f307e4f8827413ee9feb886db1f1e0650e6c5f",
        "before_after_code_files": [
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: extern int sqlite3_fts3_may_be_corrupt;",
          "139: # define assert_fts3_nc(x) assert(sqlite3_fts3_may_be_corrupt || (x))",
          "140: #else",
          "",
          "[Removed Lines]",
          "137: #ifdef SQLITE_DEBUG",
          "",
          "[Added Lines]",
          "137: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a82539665718c8183d9d0bb7bcb3adcb1a23294b8c30f364829a982dab89a332",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}