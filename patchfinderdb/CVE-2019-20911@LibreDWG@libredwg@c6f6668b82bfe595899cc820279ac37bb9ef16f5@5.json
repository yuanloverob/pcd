{
  "cve_id": "CVE-2019-20911",
  "cve_desc": "An issue was discovered in GNU LibreDWG through 0.9.3. Crafted input will lead to denial of service in bit_calc_CRC in bits.c, related to a for loop.",
  "repo": "LibreDWG/libredwg",
  "patch_hash": "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
  "patch_info": {
    "commit_hash": "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
    "repo": "LibreDWG/libredwg",
    "commit_url": "https://github.com/LibreDWG/libredwg/commit/c6f6668b82bfe595899cc820279ac37bb9ef16f5",
    "files": [
      "include/dwg.h",
      "src/decode.c",
      "src/encode.c",
      "src/free.c"
    ],
    "message": "cleanup tio.unknown\n\nnot needed anymore, we only have UNKNOWN_OBJ or UNKNOWN_ENT with full common\nentity_data.\nFixes GH #178 heap_overflow2",
    "before_after_code_files": [
      "include/dwg.h||include/dwg.h",
      "src/decode.c||src/decode.c",
      "src/encode.c||src/encode.c",
      "src/free.c||src/free.c"
    ]
  },
  "patch_diff": {
    "include/dwg.h||include/dwg.h": [
      "File: include/dwg.h -> include/dwg.h"
    ],
    "src/decode.c||src/decode.c": [
      "File: src/decode.c -> src/decode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5013:           bit_set_position (dat, restartpos);",
      "5019:           if (i >= 0 && i < (int)dwg->num_classes)",
      "5020:             {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5014:           obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5032:                   LOG_ERROR (\"Invalid class index %d >%d\", i,",
      "5033:                              (int)dwg->num_classes);",
      "5034:                 }",
      "5036:               obj->type = 0;",
      "5038:               return error | DWG_ERR_VALUEOUTOFBOUNDS;",
      "5039:             }",
      "5096:         }",
      "5097:     }",
      "",
      "[Removed Lines]",
      "5035:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5041:           if (klass && !is_entity)",
      "5042:             {",
      "5043:               int err = dwg_decode_UNKNOWN_OBJ (dat, obj);",
      "5044:               error |= err;",
      "5045:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5046:               if (!dat)",
      "5047:                 return error;",
      "5048:               if (err >= DWG_ERR_CRITICAL)",
      "5050:             }",
      "5051:           else if (klass) // is_entity",
      "5052:             {",
      "5053:               int err;",
      "5054: #if 0 && !defined(IS_RELEASE)",
      "5055:               if (strEQc(klass->dxfname, \"MULTILEADER\")) { //debug CED",
      "5056:                 char *mleader = bit_read_TF(dat, obj->size);",
      "5057:                 LOG_INSANE_TF(mleader, (int)obj->size)",
      "5058:                 bit_set_position(dat, restartpos);",
      "5059:                 free (mleader);",
      "5060:               }",
      "5061: #endif",
      "5062:               err = dwg_decode_UNKNOWN_ENT (dat, obj);",
      "5063:               error |= err;",
      "5064:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5065:               if (!dat)",
      "5066:                 return error;",
      "5067:               if (err >= DWG_ERR_CRITICAL)",
      "5069:             }",
      "5070:           else // not a class",
      "5071:             {",
      "5072:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
      "5073:               SINCE (R_2000)",
      "5074:               {",
      "5075:                 obj->bitsize = bit_read_RL (dat);",
      "5076:                 LOG_TRACE (\"bitsize: \" FORMAT_RL \" [RL] @%lu.%u\\n\",",
      "5077:                            obj->bitsize, dat->byte-2, dat->bit);",
      "5078:                 if (obj->bitsize > obj->size * 8)",
      "5079:                   {",
      "5080:                     LOG_ERROR (\"Invalid bitsize \" FORMAT_RL \" => \" FORMAT_RL,",
      "5081:                                obj->bitsize, obj->size * 8);",
      "5082:                     obj->bitsize = obj->size * 8;",
      "5083:                     error |= DWG_ERR_VALUEOUTOFBOUNDS;",
      "5084:                   }",
      "5085:               }",
      "5086:               if (!bit_read_H (dat, &obj->handle))",
      "5087:                 {",
      "5088:                   LOG_TRACE (\"handle: \" FORMAT_H \" [H 5]\\n\",",
      "5089:                              ARGS_H (obj->handle));",
      "5090:                 }",
      "5091:               restartpos = dat->byte;",
      "5092:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5093:               obj->tio.unknown = bit_read_TF (dat, obj->size);",
      "5094:               dat->byte = restartpos;",
      "5095:             }",
      "",
      "[Added Lines]",
      "5037:           if (is_entity)",
      "5038:               error |= dwg_decode_UNKNOWN_ENT (dat, obj);",
      "5039:           else",
      "5040:               error |= dwg_decode_UNKNOWN_OBJ (dat, obj);",
      "5042:           if (!dat)",
      "5043:             return error;",
      "5044:           if (error >= DWG_ERR_CRITICAL)",
      "",
      "---------------"
    ],
    "src/encode.c||src/encode.c": [
      "File: src/encode.c -> src/encode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1970:           else",
      "1971:             is_entity = obj->supertype == DWG_SUPERTYPE_ENTITY;",
      "1976:             error = dwg_encode_UNKNOWN_ENT (dat, obj);",
      "1993:         }",
      "1994:     }",
      "",
      "[Removed Lines]",
      "1973:           if (klass && !is_entity)",
      "1974:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
      "1975:           else if (klass)",
      "1977:           else // not a class",
      "1978:             {",
      "1979:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
      "1980:               error = DWG_ERR_UNHANDLEDCLASS;",
      "1981:               SINCE (R_2000)",
      "1982:               {",
      "1983:                 bit_write_RL (dat, obj->bitsize);",
      "1984:                 LOG_INFO (\"bitsize: \" FORMAT_RL \" [RL] (@%lu.%u)\\n\", obj->bitsize,",
      "1985:                           dat->byte - 4, dat->bit);",
      "1986:               }",
      "1987:               bit_write_H (dat, &obj->handle);",
      "1988:               LOG_INFO (\"handle: \" FORMAT_H \" [H 5]\\n\", ARGS_H (obj->handle));",
      "1991:               bit_write_TF (dat, obj->tio.unknown, obj->size);",
      "1992:             }",
      "",
      "[Added Lines]",
      "1973:           if (is_entity)",
      "1975:           else",
      "1976:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
      "",
      "---------------"
    ],
    "src/free.c||src/free.c": [
      "File: src/free.c -> src/free.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "731:       else if ((error = dwg_free_variable_type (obj->parent, obj))",
      "732:                & DWG_ERR_UNHANDLEDCLASS)",
      "733:         {",
      "738:         unhandled:",
      "753:               dwg_free_UNKNOWN_ENT (dat, obj);",
      "761:               dwg_free_UNKNOWN_OBJ (dat, obj);",
      "771:         }",
      "772:     }",
      "",
      "[Removed Lines]",
      "734:           int is_entity;",
      "735:           int i;",
      "736:           Dwg_Class *klass;",
      "739:           is_entity = 0;",
      "740:           i = obj->type - 500;",
      "741:           klass = NULL;",
      "743:           dwg = obj->parent;",
      "744:           if (dwg->dwg_class && i >= 0 && i < (int)dwg->num_classes)",
      "745:             {",
      "746:               klass = &dwg->dwg_class[i];",
      "747:               is_entity = klass ? dwg_class_is_entity (klass) : 0;",
      "748:             }",
      "750:           if (obj->fixedtype == DWG_TYPE_TABLE)",
      "751:             {",
      "754:             }",
      "755:           else if (obj->fixedtype == DWG_TYPE_DATATABLE)",
      "756:             {",
      "757:               dwg_free_UNKNOWN_OBJ (dat, obj);",
      "758:             }",
      "759:           else if (klass && !is_entity)",
      "760:             {",
      "762:             }",
      "763:           else if (klass && is_entity)",
      "764:             {",
      "765:               dwg_free_UNKNOWN_ENT (dat, obj);",
      "766:             }",
      "767:           else // not a class",
      "768:             {",
      "769:               FREE_IF (obj->tio.unknown);",
      "770:             }",
      "",
      "[Added Lines]",
      "735:           if (obj->fixedtype == DWG_TYPE_UNKNOWN_ENT)",
      "737:           else if (obj->fixedtype == DWG_TYPE_UNKNOWN_OBJ)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d31d1da37bb0fc5508b13ad7477a2b6ff0ffe96a",
      "candidate_info": {
        "commit_hash": "d31d1da37bb0fc5508b13ad7477a2b6ff0ffe96a",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/d31d1da37bb0fc5508b13ad7477a2b6ff0ffe96a",
        "files": [
          "src/dwg.spec",
          "src/free.c",
          "src/print.c"
        ],
        "message": "free: fix -Wshadow for static dat\n\nuse local dat's",
        "before_after_code_files": [
          "src/dwg.spec||src/dwg.spec",
          "src/free.c||src/free.c",
          "src/print.c||src/print.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/free.c||src/free.c"
          ],
          "candidate": [
            "src/free.c||src/free.c"
          ]
        }
      },
      "candidate_diff": {
        "src/dwg.spec||src/dwg.spec": [
          "File: src/dwg.spec -> src/dwg.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "1815: #ifdef IS_ENCODER",
          "1817: #define ENCODE_3DSOLID encode_3dsolid(dat, hdl_dat, obj, (Dwg_Entity_3DSOLID *)_obj);",
          "1820: {",
          "1821:   int error = 0;",
          "",
          "[Removed Lines]",
          "1818: static int encode_3dsolid(Bit_Chain* dat, Bit_Chain* hdl_dat, Dwg_Object* obj,",
          "1819:                           Dwg_Entity_3DSOLID* _obj)",
          "",
          "[Added Lines]",
          "1818: static int encode_3dsolid(Bit_Chain* dat, Bit_Chain* hdl_dat,",
          "1819:                           Dwg_Object *restrict obj,",
          "1820:                           Dwg_Entity_3DSOLID *restrict _obj)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1831: #endif //#if IS_ENCODER",
          "1833: #ifdef IS_FREE",
          "1835: {",
          "1836:   int error = 0;",
          "1837:   BITCODE_BL i;",
          "1838:   BITCODE_BL vcount, rcount1, rcount2;",
          "1840:   for (i=0; i < FIELD_VALUE(num_blocks); i++)",
          "1841:     {",
          "",
          "[Removed Lines]",
          "1834: static int free_3dsolid(Dwg_Object* obj, Dwg_Entity_3DSOLID* _obj)",
          "",
          "[Added Lines]",
          "1835: static int free_3dsolid(Dwg_Object *restrict obj, Dwg_Entity_3DSOLID *restrict _obj)",
          "1840:   Bit_Chain *dat = &pdat;",
          "",
          "---------------"
        ],
        "src/free.c||src/free.c": [
          "File: src/free.c -> src/free.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: static unsigned int cur_ver = 0;",
          "44: static Bit_Chain pdat = {NULL,0,0,0,0,0};",
          "",
          "[Removed Lines]",
          "45: static Bit_Chain *dat = &pdat;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209: #define DWG_ENTITY(token) \\",
          "210: static int \\",
          "212: \\",
          "213: static int \\",
          "215: { \\",
          "216:   int error = 0;            \\",
          "217:   if (obj->tio.entity)      \\",
          "218:     {                       \\",
          "219:       LOG_HANDLE(\"Free entity \" #token \"\\n\") \\",
          "220:       if (obj->tio.entity->tio.token) \\",
          "222:                                                          \\",
          "223:       dwg_free_common_entity_data(obj); \\",
          "224:       dwg_free_eed(obj);    \\",
          "",
          "[Removed Lines]",
          "211: dwg_free_ ##token## _private (Bit_Chain *restrict _dat, Dwg_Object *restrict obj); \\",
          "214: dwg_free_ ##token (Bit_Chain *restrict _dat, Dwg_Object *restrict obj) \\",
          "221:         error = dwg_free_ ##token## _private(_dat, obj); \\",
          "",
          "[Added Lines]",
          "210: dwg_free_ ##token## _private (Bit_Chain *restrict dat, Dwg_Object *restrict obj); \\",
          "213: dwg_free_ ##token (Bit_Chain *restrict dat, Dwg_Object *restrict obj) \\",
          "220:         error = dwg_free_ ##token## _private(dat, obj); \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:   return error;             \\",
          "232: } \\",
          "233: static int \\",
          "235: { \\",
          "236:   BITCODE_BL vcount, rcount1, rcount2, rcount3, rcount4;\\",
          "237:   Dwg_Entity_##token *ent, *_obj;\\",
          "238:   Dwg_Object_Entity *_ent;  \\",
          "241:   Dwg_Data* dwg = obj->parent;\\",
          "242:   int error = 0; \\",
          "243:   _ent = obj->tio.entity; \\",
          "",
          "[Removed Lines]",
          "234: dwg_free_ ##token## _private (Bit_Chain *restrict _dat, Dwg_Object *restrict obj) \\",
          "239:   Bit_Chain *hdl_dat = _dat;\\",
          "240:   Bit_Chain* str_dat = _dat;\\",
          "",
          "[Added Lines]",
          "233: dwg_free_ ##token## _private (Bit_Chain *restrict dat, Dwg_Object *restrict obj) \\",
          "238:   Bit_Chain *hdl_dat = dat;\\",
          "239:   Bit_Chain* str_dat = dat;\\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "250: #define DWG_OBJECT(token) \\",
          "251: static int \\",
          "253: \\",
          "254: static int \\",
          "256: { \\",
          "257:   int error = 0;                                 \\",
          "258:   Dwg_Object_##token *_obj = NULL;               \\",
          "",
          "[Removed Lines]",
          "252: dwg_free_ ##token## _private (Bit_Chain *restrict _dat, Dwg_Object *restrict obj); \\",
          "255: dwg_free_ ##token (Bit_Chain *restrict _dat, Dwg_Object *restrict obj) \\",
          "",
          "[Added Lines]",
          "251: dwg_free_ ##token## _private (Bit_Chain *restrict dat, Dwg_Object *restrict obj); \\",
          "254: dwg_free_ ##token (Bit_Chain *restrict dat, Dwg_Object *restrict obj) \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "262:       LOG_HANDLE(\"Free object \" #token \" %p\\n\", obj) \\",
          "263:       if (strcmp(#token, \"UNKNOWN_OBJ\") && obj->supertype == DWG_SUPERTYPE_UNKNOWN) { \\",
          "264:         _obj = NULL;                             \\",
          "266:       } else {                                   \\",
          "268:       }                                          \\",
          "269:       dwg_free_eed(obj);                         \\",
          "270:       FREE_IF(_obj);                             \\",
          "",
          "[Removed Lines]",
          "265:         error = dwg_free_UNKNOWN_OBJ(_dat, obj); \\",
          "267:         error = dwg_free_ ##token## _private (_dat, obj); \\",
          "",
          "[Added Lines]",
          "264:         error = dwg_free_UNKNOWN_OBJ(dat, obj); \\",
          "266:         error = dwg_free_ ##token## _private (dat, obj); \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "275: } \\",
          "276: \\",
          "277: static int \\",
          "279: { \\",
          "280:   BITCODE_BL vcount, rcount1, rcount2, rcount3, rcount4; \\",
          "281:   Dwg_Object_##token *_obj;                      \\",
          "284:   Dwg_Data* dwg = obj->parent;                   \\",
          "285:   int error = 0;                                 \\",
          "286:   if (!obj->tio.object) return 0;                \\",
          "",
          "[Removed Lines]",
          "278: dwg_free_ ##token## _private (Bit_Chain *restrict _dat, Dwg_Object *restrict obj) \\",
          "282:   Bit_Chain *hdl_dat = _dat;                     \\",
          "283:   Bit_Chain* str_dat = _dat;                     \\",
          "",
          "[Added Lines]",
          "277: dwg_free_ ##token## _private (Bit_Chain *restrict dat, Dwg_Object *restrict obj) \\",
          "281:   Bit_Chain *hdl_dat = dat;                     \\",
          "282:   Bit_Chain* str_dat = dat;                     \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "296: {",
          "298:   Dwg_Data *dwg = obj->parent;",
          "299:   Dwg_Object_Entity *_obj;",
          "300:   BITCODE_BL vcount;",
          "301:   Dwg_Object_Entity *ent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:   Bit_Chain *dat = &pdat;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "315: {",
          "317:   Dwg_Data *dwg = obj->parent;",
          "318:   Dwg_Object_Entity *_obj;",
          "319:   Dwg_Object_Entity *ent;",
          "320:   Bit_Chain *hdl_dat = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:   Bit_Chain *dat = &pdat;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "369: static int",
          "371: {",
          "372:   int i;",
          "373:   int is_entity;",
          "374:   Dwg_Class *klass;",
          "376:   i = obj->type - 500;",
          "377:   if (i < 0 || i > (int)dwg->num_classes)",
          "",
          "[Removed Lines]",
          "370: dwg_free_variable_type(Dwg_Data * dwg, Dwg_Object* obj)",
          "",
          "[Added Lines]",
          "371: dwg_free_variable_type(Dwg_Data *restrict dwg, Dwg_Object *restrict obj)",
          "376:   Bit_Chain *dat = &pdat;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "399:   int error = 0;",
          "400:   long unsigned int j;",
          "401:   Dwg_Data *dwg;",
          "403:   if (obj && obj->parent) {",
          "404:     dwg = obj->parent;",
          "405:     dat->version = dwg->header.version;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:   Bit_Chain *dat = &pdat;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "698: {",
          "699:   Dwg_Header_Variables* _obj = &dwg->header_vars;",
          "700:   Dwg_Object* obj = NULL;",
          "701:   #include \"header_variables.spec\"",
          "702:   return 0;",
          "703: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:   Bit_Chain *dat = &pdat;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "708:   BITCODE_BL i;",
          "709:   if (dwg)",
          "710:     {",
          "711:       if (dwg->opts)",
          "712:         loglevel = dwg->opts & 0xf;",
          "713: #ifdef USE_TRACING",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715:       pdat.version = dwg->header.version;",
          "716:       pdat.from_version = dwg->header.version;",
          "",
          "---------------"
        ],
        "src/print.c||src/print.c": [
          "File: src/print.c -> src/print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:    Dispatches on the variable types.",
          "338: static int",
          "340: {",
          "341:   int i;",
          "342:   int is_entity;",
          "",
          "[Removed Lines]",
          "339: dwg_print_variable_type(Dwg_Data * dwg, Bit_Chain * dat, Dwg_Object* obj)",
          "",
          "[Added Lines]",
          "339: dwg_print_variable_type(Dwg_Data *restrict dwg,",
          "340:                         Bit_Chain *restrict dat,",
          "341:                         Dwg_Object *restrict obj)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:    Dispatches on the fixed types.",
          "363: int",
          "365: {",
          "366:   int error = 0;",
          "",
          "[Removed Lines]",
          "364: dwg_print_object(Bit_Chain* dat, Dwg_Object *obj)",
          "",
          "[Added Lines]",
          "366: dwg_print_object(Bit_Chain *restrict dat, Dwg_Object *restrict obj)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e568b1bde4402475a707beea785fe900ed83534",
      "candidate_info": {
        "commit_hash": "4e568b1bde4402475a707beea785fe900ed83534",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/4e568b1bde4402475a707beea785fe900ed83534",
        "files": [
          "src/decode.c",
          "src/encode.c"
        ],
        "message": "encode: log more fields",
        "before_after_code_files": [
          "src/decode.c||src/decode.c",
          "src/encode.c||src/encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/decode.c||src/decode.c",
            "src/encode.c||src/encode.c"
          ],
          "candidate": [
            "src/decode.c||src/decode.c",
            "src/encode.c||src/encode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3815:             length = rbuf->value.str.size = bit_read_RS (dat);",
          "3816:             rbuf->value.str.codepage = bit_read_RC (dat);",
          "3817:             rbuf->value.str.u.data = bit_read_TF (dat, length);",
          "3820:           }",
          "3821:           LATER_VERSIONS",
          "3822:           {",
          "",
          "[Removed Lines]",
          "3818:             LOG_TRACE (\"xdata[%d]: \\\"%s\\\" [%d]\\n\", num_xdata,",
          "3819:                        rbuf->value.str.u.data, rbuf->type);",
          "",
          "[Added Lines]",
          "3818:             LOG_TRACE (\"xdata[%d]: \\\"%s\\\" [TF %d %d]\\n\", num_xdata,",
          "3819:                        rbuf->value.str.u.data, length, rbuf->type);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3846:           break;",
          "3847:         case VT_REAL:",
          "3848:           rbuf->value.dbl = bit_read_RD (dat);",
          "3850:                      rbuf->type);",
          "3851:           break;",
          "3852:         case VT_BOOL:",
          "3853:         case VT_INT8:",
          "3854:           rbuf->value.i8 = bit_read_RC (dat);",
          "3856:                      rbuf->type);",
          "3857:           break;",
          "3858:         case VT_INT16:",
          "3859:           rbuf->value.i16 = bit_read_RS (dat);",
          "3861:                      rbuf->type);",
          "3862:           break;",
          "3863:         case VT_INT32:",
          "3864:           rbuf->value.i32 = bit_read_RL (dat);",
          "3866:                      rbuf->type);",
          "3867:           break;",
          "3868:         case VT_INT64:",
          "3869:           rbuf->value.i64 = bit_read_BLL (dat);",
          "3871:                      rbuf->type);",
          "3872:           break;",
          "3873:         case VT_POINT3D:",
          "3874:           rbuf->value.pt[0] = bit_read_RD (dat);",
          "3875:           rbuf->value.pt[1] = bit_read_RD (dat);",
          "3876:           rbuf->value.pt[2] = bit_read_RD (dat);",
          "3879:                      rbuf->type);",
          "3880:           break;",
          "3881:         case VT_BINARY:",
          "3882:           rbuf->value.str.size = bit_read_RC (dat);",
          "3883:           rbuf->value.str.u.data = bit_read_TF (dat, rbuf->value.str.size);",
          "3885:           LOG_TRACE_TF (rbuf->value.str.u.data, rbuf->value.str.size);",
          "3886:           break;",
          "3887:         case VT_HANDLE:",
          "3888:         case VT_OBJECTID:",
          "3889:           bit_read_fixed (dat, rbuf->value.hdl, 8);",
          "3891:                      (unsigned)*(uint64_t *)rbuf->value.hdl, rbuf->type);",
          "3892:           break;",
          "3893:         case VT_INVALID:",
          "",
          "[Removed Lines]",
          "3849:           LOG_TRACE (\"xdata[%d]: %f [%d]\\n\", num_xdata, rbuf->value.dbl,",
          "3855:           LOG_TRACE (\"xdata[%d]: %d [%d]\\n\", num_xdata, (int)rbuf->value.i8,",
          "3860:           LOG_TRACE (\"xdata[%d]: %d [%d]\\n\", num_xdata, (int)rbuf->value.i16,",
          "3865:           LOG_TRACE (\"xdata[%d]: %d [%d]\\n\", num_xdata, (int)rbuf->value.i32,",
          "3870:           LOG_TRACE (\"xdata[%d]: \" FORMAT_BLL \" [%d]\\n\", num_xdata, rbuf->value.i64,",
          "3877:           LOG_TRACE (\"xdata[%d]: %f,%f,%f [%d]\\n\", num_xdata,",
          "3878:                      rbuf->value.pt[0], rbuf->value.pt[2], rbuf->value.pt[2],",
          "3884:           LOG_TRACE (\"xdata[%d]: \", num_xdata);",
          "3890:           LOG_TRACE (\"xdata[%d]: %X [HDL %d]\\n\", num_xdata,",
          "",
          "[Added Lines]",
          "3849:           LOG_TRACE (\"xdata[%d]: %f [RD %d]\\n\", num_xdata, rbuf->value.dbl,",
          "3855:           LOG_TRACE (\"xdata[%d]: %d [RC %d]\\n\", num_xdata, (int)rbuf->value.i8,",
          "3860:           LOG_TRACE (\"xdata[%d]: %d [RS %d]\\n\", num_xdata, (int)rbuf->value.i16,",
          "3865:           LOG_TRACE (\"xdata[%d]: %d [RL %d]\\n\", num_xdata, (int)rbuf->value.i32,",
          "3870:           LOG_TRACE (\"xdata[%d]: \" FORMAT_BLL \" [BLL %d]\\n\", num_xdata, rbuf->value.i64,",
          "3877:           LOG_TRACE (\"xdata[%d]: %f,%f,%f [3RD %d]\\n\", num_xdata,",
          "3878:                      rbuf->value.pt[0], rbuf->value.pt[1], rbuf->value.pt[2],",
          "3884:           LOG_TRACE (\"xdata[%d]: [TF %d %d]\", num_xdata, rbuf->value.str.size, rbuf->type);",
          "3890:           LOG_TRACE (\"xdata[%d]: %X [H %d]\\n\", num_xdata,",
          "",
          "---------------"
        ],
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:     error = dwg_encode_object (obj, dat, hdl_dat, str_dat);                   \\",
          "588:     if (error)                                                                \\",
          "589:       return error;                                                           \\",
          "592: #define DWG_OBJECT_END                                                        \\",
          "593:   if (obj->bitsize == 0 && dat->version >= R_13 && dat->version <= R_2007)    \\",
          "",
          "[Removed Lines]",
          "590:     LOG_INFO (\"Object \" #token \" handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle))",
          "",
          "[Added Lines]",
          "590:     LOG_INFO (\"Encode object \" #token \"\\n\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1803:               SINCE (R_2000)",
          "1804:               {",
          "1805:                 bit_write_RL (dat, obj->bitsize);",
          "1808:               }",
          "1813:               bit_write_TF (dat, obj->tio.unknown, obj->size);",
          "",
          "[Removed Lines]",
          "1806:                 LOG_INFO (\"Object bitsize: \" FORMAT_RL \" @%lu.%u\\n\",",
          "1807:                           obj->bitsize, dat->byte, dat->bit);",
          "1809:               bit_write_H (dat, &(obj->handle));",
          "1810:               LOG_INFO (\"Object handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle));",
          "",
          "[Added Lines]",
          "1806:                 LOG_INFO (\"bitsize: \" FORMAT_RL \" (@%lu.%u)\\n\",",
          "1807:                           obj->bitsize, dat->byte - 4, dat->bit);",
          "1809:               bit_write_H (dat, &obj->handle);",
          "1810:               LOG_INFO (\"handle: \" FORMAT_H \" [H 5]\\n\", ARGS_H(obj->handle));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1834:           if (!obj->handlestream_size && obj->bitsize)",
          "1835:             obj->handlestream_size = obj->size * 8 - obj->bitsize;",
          "1836:           bit_write_UMC (dat, obj->handlestream_size);",
          "1838:         }",
          "1840:         {",
          "1845:         }",
          "1846:       bit_set_position (dat, pos);",
          "1847:     }",
          "",
          "[Removed Lines]",
          "1837:           LOG_TRACE (\"handlestream_size: %lu\\n\", obj->handlestream_size);",
          "1839:       if (obj->bitsize_pos && obj->bitsize)",
          "1841:           bit_set_position (dat, obj->bitsize_pos);",
          "1842:           bit_write_RL (dat, obj->bitsize);",
          "1843:           LOG_TRACE (\"bitsize: %u [RL] @%u.%u\\n\", obj->bitsize,",
          "1844:                      pos / 8, pos %8);",
          "",
          "[Added Lines]",
          "1837:           LOG_TRACE (\"handlestream_size: %lu [UMC]\\n\", obj->handlestream_size);",
          "1839:       SINCE (R_2000)",
          "1841:           if (obj->bitsize_pos && obj->bitsize)",
          "1842:             {",
          "1843:               bit_set_position (dat, obj->bitsize_pos);",
          "1844:               bit_write_RL (dat, obj->bitsize);",
          "1845:               LOG_TRACE (\"bitsize: %u [RL] @%lu.%lu\\n\", obj->bitsize,",
          "1846:                          obj->bitsize_pos / 8, obj->bitsize_pos % 8);",
          "1847:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1885: static int",
          "1887: {",
          "1888:   bit_write_RC (dat, data->code);",
          "1889:   switch (data->code)",
          "",
          "[Removed Lines]",
          "1886: dwg_encode_eed_data (Bit_Chain *restrict dat, Dwg_Eed_Data *restrict data)",
          "",
          "[Added Lines]",
          "1889: dwg_encode_eed_data (Bit_Chain *restrict dat, Dwg_Eed_Data *restrict data, int i)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1895:             bit_write_RC (dat, data->u.eed_0.length);",
          "1896:             bit_write_RS_LE (dat, data->u.eed_0.codepage);",
          "1897:             bit_write_TF (dat, data->u.eed_0.string, data->u.eed_0.length);",
          "1898:           }",
          "1899:         LATER_VERSIONS",
          "1900:           {",
          "1901:             BITCODE_RS *s = (BITCODE_RS *)&data->u.eed_0_r2007.string;",
          "1902:             bit_write_RS (dat, data->u.eed_0_r2007.length);",
          "1903:             bit_write_RS_LE (dat, data->u.eed_0.codepage);",
          "1908:           }",
          "1909:       }",
          "1910:       break;",
          "1911:     case 2:",
          "1912:       bit_write_RC (dat, data->u.eed_2.byte);",
          "1913:       break;",
          "1914:     case 3:",
          "1915:       bit_write_RL (dat, data->u.eed_3.layer);",
          "1916:       break;",
          "1917:     case 4:",
          "1918:       bit_write_RC (dat, data->u.eed_4.length);",
          "1919:       bit_write_TF (dat, data->u.eed_4.data, data->u.eed_4.length);",
          "1920:       break;",
          "1921:     case 5:",
          "1922:       bit_write_RLL (dat, data->u.eed_5.entity);",
          "1923:       break;",
          "1924:     case 10:",
          "1925:     case 11:",
          "",
          "[Removed Lines]",
          "1904:             for (int i = 0; i < data->u.eed_0_r2007.length; i++)",
          "1905:               {",
          "1906:                 bit_write_RS (dat, *s++);",
          "1907:               }",
          "",
          "[Added Lines]",
          "1901:             LOG_TRACE (\"eed[%d]: \\\"%s\\\" [TF %d %d]\\n\", i,",
          "1902:                        data->u.eed_0.string, data->u.eed_0.length, data->code);",
          "1909:             for (int j = 0; j < data->u.eed_0_r2007.length; j++)",
          "1910:               bit_write_RS (dat, *s++);",
          "1916:       LOG_TRACE (\"eed[%d]: %d [RC %d]\\n\", i, (int)data->u.eed_2.byte, data->code);",
          "1920:       LOG_TRACE (\"eed[%d]: %d [RL %d]\\n\", i, (int)data->u.eed_3.layer, data->code);",
          "1925:       LOG_TRACE (\"eed[%d]: \\\"%s\\\" [TF %d %d]\\n\", i, data->u.eed_4.data,",
          "1926:                  data->u.eed_4.length, data->code);",
          "1930:       LOG_TRACE (\"eed[%d]: \\\"%ld\\\" [RLL %d]\\n\", i, (long)data->u.eed_5.entity,",
          "1931:                  data->code);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1930:       bit_write_RD (dat, data->u.eed_10.point.x);",
          "1931:       bit_write_RD (dat, data->u.eed_10.point.y);",
          "1932:       bit_write_RD (dat, data->u.eed_10.point.z);",
          "1933:       break;",
          "1934:     case 40:",
          "1935:     case 41:",
          "1936:     case 42:",
          "1937:       bit_write_RD (dat, data->u.eed_40.real);",
          "1938:       break;",
          "1939:     case 70:",
          "1940:       bit_write_RS (dat, data->u.eed_70.rs);",
          "1941:       break;",
          "1942:     case 71:",
          "1943:       bit_write_RL (dat, data->u.eed_71.rl);",
          "1944:       break;",
          "1945:     default:",
          "1946:       LOG_ERROR (\"unknown EED code %d\", data->code);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1942:       LOG_TRACE (\"eed[%d]: (%f, %f, %f) [3RD %d]\\n\", i,",
          "1943:                  data->u.eed_10.point.x, data->u.eed_10.point.y,",
          "1944:                  data->u.eed_10.point.z, data->code);",
          "1950:       LOG_TRACE (\"eed[%d]: %f [RD %d]\\n\", i,",
          "1951:                  data->u.eed_40.real, data->code);",
          "1955:       LOG_TRACE (\"eed[%d]: %d [RS %d]\\n\", i,",
          "1956:                  (int)data->u.eed_70.rs, data->code);",
          "1960:       LOG_TRACE (\"eed[%d]: %ld [RL %d]\\n\", i,",
          "1961:                  (long)data->u.eed_71.rl, data->code);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1971:           if (eed->raw)",
          "1972:             bit_write_TF (dat, eed->raw, size);",
          "1973:           else // indxf",
          "1975:         }",
          "1976:     }",
          "1977:   bit_write_BS (dat, 0);",
          "",
          "[Removed Lines]",
          "1974:             dwg_encode_eed_data (dat, eed->data);",
          "",
          "[Added Lines]",
          "1992:             dwg_encode_eed_data (dat, eed->data, i);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2022:       bit_write_RL (dat, obj->size * 8);",
          "2023:     else",
          "2024:       bit_write_RL (dat, obj->bitsize);",
          "2025:   }",
          "2026:   SINCE (R_2007)",
          "2027:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2043:     LOG_TRACE (\"bitsize: %u [RL] (@%lu.%lu)\\n\", obj->bitsize,",
          "2044:                obj->bitsize_pos / 8, obj->bitsize_pos %8);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2031:     SINCE (R_2010)",
          "2032:     {",
          "2033:       obj->hdlpos += 8;",
          "2036:     }",
          "2038:     error |= obj_string_stream (dat, obj, str_dat);",
          "2039:   }",
          "2041:   bit_write_H (dat, &(obj->handle));",
          "2043:   PRE (R_13) { return DWG_ERR_NOTYETSUPPORTED; }",
          "2045:   error |= dwg_encode_eed (dat, (Dwg_Object_Object *)ent);",
          "",
          "[Removed Lines]",
          "2034:       LOG_HANDLE (\"(bitsize: \" FORMAT_RL \", \", obj->bitsize);",
          "2035:       LOG_HANDLE (\"hdlpos: %lu)\\n\", obj->hdlpos);",
          "2042:   LOG_TRACE (\"handle: \" FORMAT_H \" [5]\\n\", ARGS_H(obj->handle))",
          "",
          "[Added Lines]",
          "2055:       LOG_HANDLE (\"hdlpos: %lu\\n\", obj->hdlpos);",
          "2062:   LOG_TRACE (\"handle: \" FORMAT_H \" [H 5]\\n\", ARGS_H(obj->handle))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2154:     if (!obj->bitsize)",
          "2155:       obj->bitsize = obj->size * 8;",
          "2156:     bit_write_RL (dat, obj->bitsize);",
          "2159:   }",
          "2160:   SINCE (R_2010)",
          "2161:   {",
          "2162:     obj->bitsize = dat->size - 0;",
          "2165:   }",
          "2166:   obj->hdlpos = bit_position (dat) + obj->bitsize; // the handle stream offset",
          "2167:   SINCE (R_2007) { obj_string_stream (dat, obj, str_dat); }",
          "2170:   error |= dwg_encode_eed (dat, ord);",
          "2172:   VERSIONS (R_13, R_14)",
          "",
          "[Removed Lines]",
          "2157:     LOG_INFO (\"Object bitsize: \" FORMAT_RL \" @%lu.%u\\n\", obj->bitsize,",
          "2158:               dat->byte, dat->bit);",
          "2163:     LOG_INFO (\"Object bitsize: \" FORMAT_RL \" @%lu.%u\\n\", obj->bitsize,",
          "2164:               dat->byte, dat->bit);",
          "2169:   bit_write_H (dat, &(obj->handle));",
          "",
          "[Added Lines]",
          "2177:     LOG_INFO (\"bitsize: \" FORMAT_RL \" (@%lu.%u)\\n\", obj->bitsize,",
          "2178:               dat->byte - 4, dat->bit);",
          "2189:   bit_write_H (dat, &obj->handle);",
          "2190:   LOG_TRACE (\"handle: \" FORMAT_H \" [H 5]\\n\", ARGS_H(obj->handle));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2175:     if (!obj->bitsize)",
          "2176:       obj->bitsize = obj->size * 8;",
          "2177:     bit_write_RL (dat, obj->bitsize);",
          "2179:   }",
          "2181:   bit_write_BL (dat, ord->num_reactors);",
          "2184:   return error;",
          "2185: }",
          "",
          "[Removed Lines]",
          "2178:     LOG_TRACE (\"Object bitsize: %u [RL]\\n\", obj->bitsize);",
          "2182:   SINCE (R_2004) { bit_write_B (dat, ord->xdic_missing_flag); }",
          "2183:   SINCE (R_2013) { bit_write_B (dat, ord->has_ds_binary_data); }",
          "",
          "[Added Lines]",
          "2199:     LOG_INFO (\"bitsize: \" FORMAT_RL \" (@%lu.%u)\\n\", obj->bitsize,",
          "2200:               dat->byte - 4, dat->bit);",
          "2204:   LOG_TRACE (\"num_reactors: \" FORMAT_BL \" [BL]\\n\", ord->num_reactors);",
          "2205:   SINCE (R_2004) {",
          "2206:     bit_write_B (dat, ord->xdic_missing_flag);",
          "2207:     LOG_TRACE (\"xdic_missing_flag: \" FORMAT_B \" [B]\\n\", ord->xdic_missing_flag);",
          "2208:   }",
          "2209:   SINCE (R_2013) {",
          "2210:     bit_write_B (dat, ord->has_ds_binary_data);",
          "2211:     LOG_TRACE (\"has_ds_binary_data: \" FORMAT_B \" [B]\\n\", ord->has_ds_binary_data);",
          "2212:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e775c706602cf674962354a763757a5e3bad4650",
      "candidate_info": {
        "commit_hash": "e775c706602cf674962354a763757a5e3bad4650",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/e775c706602cf674962354a763757a5e3bad4650",
        "files": [
          "src/dwg.spec",
          "src/free.c"
        ],
        "message": "free: fail on Wrong DATATABLE.type 529\n\nfor obj [index]: != MULTILEADER.\nwrong class, maybe a dwg_encode_get_class() failure.\nFixes several fuzzing crashes.",
        "before_after_code_files": [
          "src/dwg.spec||src/dwg.spec",
          "src/free.c||src/free.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/free.c||src/free.c"
          ],
          "candidate": [
            "src/free.c||src/free.c"
          ]
        }
      },
      "candidate_diff": {
        "src/dwg.spec||src/dwg.spec": [
          "File: src/dwg.spec -> src/dwg.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "5513:       VALUEOUTOFBOUNDS (class_version, 10)",
          "5514:     }",
          "5515: #if 0",
          "5519: #endif",
          "5521:   FIELD_BL (ctx.num_leaders, 0);",
          "",
          "[Removed Lines]",
          "5516:       FIELD_BS (ctx.class_version, 70); // default 3",
          "5517:       FIELD_B (ctx.has_xdic_file, 0);",
          "5518:       FIELD_B (ctx.is_default, 290);",
          "",
          "[Added Lines]",
          "5516:   FIELD_BS (ctx.class_version, 70); // default 3",
          "5517:   FIELD_B (ctx.has_xdic_file, 0);",
          "5518:   FIELD_B (ctx.is_default, 290);",
          "",
          "---------------"
        ],
        "src/free.c||src/free.c": [
          "File: src/free.c -> src/free.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "424: static int",
          "425: dwg_free_variable_type (Dwg_Data *restrict dwg, Dwg_Object *restrict obj)",
          "426: {",
          "429:   Dwg_Class *klass;",
          "430:   Bit_Chain *dat = &pdat;",
          "433:   if (i < 0 || i >= (int)dwg->num_classes)",
          "434:     return DWG_ERR_INVALIDTYPE;",
          "436:   klass = &dwg->dwg_class[i];",
          "437:   if (!klass || !klass->dxfname)",
          "438:     return DWG_ERR_INTERNALERROR;",
          "446:   #include \"classes.inc\"",
          "",
          "[Removed Lines]",
          "427:   int i;",
          "428:   int is_entity;",
          "432:   i = obj->type - 500;",
          "440:   is_entity = dwg_class_is_entity (klass);",
          "",
          "[Added Lines]",
          "427:   const int i = obj->type - 500;",
          "438:   if (strNE (obj->dxfname, klass->dxfname))",
          "439:     {",
          "440:       LOG_ERROR (\"Wrong %s.type %d for obj [%d]: != %s\",  obj->dxfname, obj->type,",
          "441:                  obj->index, klass->dxfname);",
          "442:       return DWG_ERR_INVALIDTYPE;",
          "443:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "748:               dwg_free_UNKNOWN_ENT (dat, obj);",
          "749:             }",
          "750:           else if (klass && !is_entity)",
          "751:             {",
          "752:               dwg_free_UNKNOWN_OBJ (dat, obj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:           else if (obj->fixedtype == DWG_TYPE_DATATABLE)",
          "755:             {",
          "756:               dwg_free_UNKNOWN_OBJ (dat, obj);",
          "757:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6593776d8e800ea061b19572a222ca7834e8ba77",
      "candidate_info": {
        "commit_hash": "6593776d8e800ea061b19572a222ca7834e8ba77",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/6593776d8e800ea061b19572a222ca7834e8ba77",
        "files": [
          "include/dwg.h",
          "src/dec_macros.h",
          "src/decode.c",
          "src/decode_r2007.c",
          "src/free.c",
          "src/summaryinfo.spec"
        ],
        "message": "free: fix summaryinfo leaks",
        "before_after_code_files": [
          "include/dwg.h||include/dwg.h",
          "src/dec_macros.h||src/dec_macros.h",
          "src/decode.c||src/decode.c",
          "src/decode_r2007.c||src/decode_r2007.c",
          "src/free.c||src/free.c",
          "src/summaryinfo.spec||src/summaryinfo.spec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/dwg.h||include/dwg.h",
            "src/decode.c||src/decode.c",
            "src/free.c||src/free.c"
          ],
          "candidate": [
            "include/dwg.h||include/dwg.h",
            "src/decode.c||src/decode.c",
            "src/free.c||src/free.c"
          ]
        }
      },
      "candidate_diff": {
        "include/dwg.h||include/dwg.h": [
          "File: include/dwg.h -> include/dwg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5676:   struct Dwg_SummaryInfo",
          "5677:   {",
          "5687:     BITCODE_TIMERLL  TDCREATE;",
          "5688:     BITCODE_TIMERLL  TDUPDATE;",
          "5690:     Dwg_SummaryInfo_Property *props;",
          "5693:   } summaryinfo;",
          "5695:   Dwg_Chain thumbnail;",
          "",
          "[Removed Lines]",
          "5678:     BITCODE_TU       TITLE;",
          "5679:     BITCODE_TU       SUBJECT;",
          "5680:     BITCODE_TU       AUTHOR;",
          "5681:     BITCODE_TU       KEYWORDS;",
          "5682:     BITCODE_TU       COMMENTS;",
          "5683:     BITCODE_TU       LASTSAVEDBY;",
          "5684:     BITCODE_TU       REVISIONNUMBER;",
          "5685:     BITCODE_TU       HYPERLINKBASE;",
          "5689:     BITCODE_RS       num_props;",
          "5691:     BITCODE_RL       unknown1;",
          "5692:     BITCODE_RL       unknown2;",
          "",
          "[Added Lines]",
          "5678:     BITCODE_T    TITLE;",
          "5679:     BITCODE_T    SUBJECT;",
          "5680:     BITCODE_T    AUTHOR;",
          "5681:     BITCODE_T    KEYWORDS;",
          "5682:     BITCODE_T    COMMENTS;",
          "5683:     BITCODE_T    LASTSAVEDBY;",
          "5684:     BITCODE_T    REVISIONNUMBER;",
          "5685:     BITCODE_T    HYPERLINKBASE;",
          "5689:     BITCODE_RS   num_props;",
          "5691:     BITCODE_RL   unknown1;",
          "5692:     BITCODE_RL   unknown2;",
          "",
          "---------------"
        ],
        "src/dec_macros.h||src/dec_macros.h": [
          "File: src/dec_macros.h -> src/dec_macros.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "353: #define FIELD_TV(nam, dxf) FIELDG (nam, TV, dxf)",
          "354: #define FIELD_TU(nam, dxf)                                                    \\",
          "355:   {                                                                           \\",
          "357:     LOG_TRACE_TU (#nam, (BITCODE_TU)FIELD_VALUE (nam), dxf);                  \\",
          "358:   }",
          "359: #define FIELD_T(nam, dxf)                                                     \\",
          "",
          "[Removed Lines]",
          "356:     _obj->nam = bit_read_TU (str_dat);                                        \\",
          "",
          "[Added Lines]",
          "356:     _obj->nam = (BITCODE_TU)bit_read_TU (str_dat);                            \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364:       }                                                                       \\",
          "365:     else                                                                      \\",
          "366:       {                                                                       \\",
          "368:           {                                                                   \\",
          "369:            _obj->nam = (BITCODE_T)bit_read_TU (str_dat);                      \\",
          "370:            LOG_TRACE_TU (#nam, (BITCODE_TU)FIELD_VALUE (nam), dxf);           \\",
          "",
          "[Removed Lines]",
          "367:         if (obj->has_strings)                                                 \\",
          "",
          "[Added Lines]",
          "367:        if (!obj || obj->has_strings) /* header_vars */                        \\",
          "",
          "---------------"
        ],
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2446:   #include \"summaryinfo.spec\"",
          "2449:   return error;",
          "2450: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2449:   if (sec_dat.chain)",
          "2450:     free (sec_dat.chain);",
          "",
          "---------------"
        ],
        "src/decode_r2007.c||src/decode_r2007.c": [
          "File: src/decode_r2007.c -> src/decode_r2007.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1668:   #include \"summaryinfo.spec\"",
          "1671:   return error;",
          "1672: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1670:   if (obj_dat.chain)",
          "1671:     free (obj_dat.chain);",
          "",
          "---------------"
        ],
        "src/free.c||src/free.c": [
          "File: src/free.c -> src/free.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: #define FIELD_3BD_1(name, dxf) {}",
          "131: #define FIELD_3DPOINT(name, dxf) {}",
          "132: #define FIELD_TIMEBLL(name, dxf)",
          "133: #define FIELD_CMC(color, dxf1, dxf2)                                    \\",
          "134:   {                                                                     \\",
          "135:     FIELD_T (color.name, 0);                                            \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: #define FIELD_TIMERLL(name, dxf)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "739:   Dwg_Header_Variables *_obj = &dwg->header_vars;",
          "740:   Dwg_Object *obj = NULL;",
          "741:   Bit_Chain *dat = &pdat;",
          "743:   return 0;",
          "744: }",
          "",
          "[Removed Lines]",
          "742: #include \"header_variables.spec\"",
          "",
          "[Added Lines]",
          "743:   #include \"header_variables.spec\"",
          "744:   return 0;",
          "745: }",
          "747: static int",
          "748: dwg_free_summaryinfo (Dwg_Data *dwg)",
          "749: {",
          "750:   struct Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "751:   Dwg_Object *obj = NULL;",
          "752:   Bit_Chain *dat = &pdat;",
          "753:   BITCODE_RL rcount1, rcount2;",
          "754:   #include \"summaryinfo.spec\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "772:         }",
          "773:       FREE_IF (dwg->header.section);",
          "774:       dwg_free_header_vars (dwg);",
          "775:       if (dwg->thumbnail.size && dwg->thumbnail.chain)",
          "776:         FREE_IF (dwg->thumbnail.chain);",
          "777:       if (dwg->header.section_infohdr.num_desc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "787:       dwg_free_summaryinfo (dwg);",
          "",
          "---------------"
        ],
        "src/summaryinfo.spec||src/summaryinfo.spec": [
          "File: src/summaryinfo.spec -> src/summaryinfo.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:       FIELD_VALUE(TDINDWG)    = dwg->header_vars.TDINDWG;",
          "24:       FIELD_VALUE(TDCREATE)   = dwg->header_vars.TDCREATE;",
          "25:       FIELD_VALUE(TDUPDATE)   = dwg->header_vars.TDUPDATE;",
          "27:     }",
          "28:   }",
          "40:   FIELD_TIMERLL (TDINDWG, 0);",
          "41:   FIELD_TIMERLL (TDCREATE, 0);",
          "",
          "[Removed Lines]",
          "26:       FIELD_VALUE(HYPERLINKBASE) = (BITCODE_TU)dwg->header_vars.HYPERLINKBASE;",
          "31:   FIELD_TU (TITLE, 1);",
          "32:   FIELD_TU (SUBJECT, 1);",
          "33:   FIELD_TU (AUTHOR, 1);",
          "34:   FIELD_TU (KEYWORDS, 1);",
          "35:   FIELD_TU (COMMENTS, 1);",
          "36:   FIELD_TU (LASTSAVEDBY, 1);",
          "37:   FIELD_TU (REVISIONNUMBER, 1);",
          "38:   FIELD_TU (HYPERLINKBASE, 1);",
          "",
          "[Added Lines]",
          "26:       FIELD_VALUE(HYPERLINKBASE) = dwg->header_vars.HYPERLINKBASE;",
          "31:   FIELD_T (TITLE, 1);",
          "32:   FIELD_T (SUBJECT, 1);",
          "33:   FIELD_T (AUTHOR, 1);",
          "34:   FIELD_T (KEYWORDS, 1);",
          "35:   FIELD_T (COMMENTS, 1);",
          "36:   FIELD_T (LASTSAVEDBY, 1);",
          "37:   FIELD_T (REVISIONNUMBER, 1);",
          "38:   FIELD_T (HYPERLINKBASE, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:       FIELD_T (props[rcount1].key, 0);",
          "48:       FIELD_T (props[rcount1].value, 0);",
          "49:     }",
          "52:   FIELD_RL (unknown1, 0);",
          "53:   FIELD_RL (unknown2, 0);",
          "",
          "[Removed Lines]",
          "50:   END_REPEAT(texts)",
          "",
          "[Added Lines]",
          "50:   END_REPEAT(props)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92f01cebdf8d5d5f0f9fa50f1e212bdad0b784f5",
      "candidate_info": {
        "commit_hash": "92f01cebdf8d5d5f0f9fa50f1e212bdad0b784f5",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/92f01cebdf8d5d5f0f9fa50f1e212bdad0b784f5",
        "files": [
          "src/encode.c"
        ],
        "message": "encode: patchup obj size and bitsize\n\nfor DXF, to fix overflows.\nMany dxf2dwg dwg's can now be read.",
        "before_after_code_files": [
          "src/encode.c||src/encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/encode.c||src/encode.c"
          ],
          "candidate": [
            "src/encode.c||src/encode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1648:         }",
          "1649:     }",
          "1652:    if (obj->supertype != DWG_SUPERTYPE_UNKNOWN)",
          "1653:    {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1652:   if (!obj->size)",
          "1653:     {",
          "1654:       BITCODE_BL pos = bit_position (dat);",
          "1655:       obj->size = dat->byte - previous_address;",
          "1656:       obj->bitsize = pos - (previous_address * 8);",
          "1658:       bit_set_position (dat, previous_address * 8);",
          "1659:       bit_write_MS (dat, obj->size);",
          "1661:       LOG_TRACE (\"size: %u [MS] @%lu\\n\", obj->size, previous_address);",
          "1662:       SINCE (R_2013)",
          "1663:         {",
          "1664:           if (!obj->handlestream_size && obj->bitsize)",
          "1665:             obj->handlestream_size = obj->size * 8 - obj->bitsize;",
          "1666:           bit_write_UMC (dat, obj->handlestream_size);",
          "1667:           LOG_TRACE (\"handlestream_size: %lu\\n\", obj->handlestream_size);",
          "1668:         }",
          "1669:       bit_set_position (dat, obj->bitsize_pos);",
          "1670:       bit_write_RL (dat, obj->bitsize);",
          "1671:       LOG_TRACE (\"bitsize: %u [RL] @%u.%u\\n\", obj->bitsize,",
          "1672:                  pos / 8, pos %8);",
          "1673:       bit_set_position (dat, pos);",
          "1674:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}