{
  "cve_id": "CVE-2017-2609",
  "cve_desc": "jenkins before versions 2.44, 2.32.2 is vulnerable to an information disclosure vulnerability in search suggestions (SECURITY-385). The autocomplete feature on the search box discloses the names of the views in its suggestions, including the ones for which the current user does not have access to.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "246a0fa90a05b729eaabca6d697016015f622e57",
  "patch_info": {
    "commit_hash": "246a0fa90a05b729eaabca6d697016015f622e57",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/246a0fa90a05b729eaabca6d697016015f622e57",
    "files": [
      "core/src/main/java/jenkins/model/Jenkins.java",
      "test/src/test/java/hudson/search/SearchTest.java"
    ],
    "message": "[FIX SECURITY-385] Only suggest visible views in search",
    "before_after_code_files": [
      "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
      "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
      "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1887:             })",
      "1888:             .add(new CollectionSearchIndex() {// for views",
      "1889:                 protected View get(String key) { return getView(key); }",
      "1891:             });",
      "1892:     }",
      "",
      "[Removed Lines]",
      "1890:                 protected Collection<View> all() { return views; }",
      "",
      "[Added Lines]",
      "1890:                 protected Collection<View> all() { return viewGroupMixIn.getViews(); }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java": [
      "File: test/src/test/java/hudson/search/SearchTest.java -> test/src/test/java/hudson/search/SearchTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: import hudson.model.FreeStyleProject;",
      "33: import hudson.model.ListView;",
      "35: import java.net.URL;",
      "37: import java.util.ArrayList;",
      "38: import java.util.List;",
      "40: import net.sf.json.JSONArray;",
      "41: import net.sf.json.JSONObject;",
      "42: import net.sf.json.JSONSerializer;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: import java.io.IOException;",
      "41: import hudson.model.User;",
      "42: import hudson.model.View;",
      "43: import hudson.security.ACL;",
      "44: import hudson.security.AuthorizationStrategy;",
      "45: import hudson.security.GlobalMatrixAuthorizationStrategy;",
      "46: import jenkins.model.Jenkins;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "379:         assertTrue(suggest(j.jenkins.getSearchIndex(),\"foo\").contains(p));",
      "380:     }",
      "382:     @Test",
      "383:     public void testSearchWithinFolders() throws Exception {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "389:     @Issue(\"SECURITY-385\")",
      "390:     @Test",
      "391:     public void testInaccessibleViews() throws IOException {",
      "392:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
      "393:         GlobalMatrixAuthorizationStrategy strategy = new GlobalMatrixAuthorizationStrategy();",
      "394:         strategy.add(Jenkins.READ, \"alice\");",
      "395:         j.jenkins.setAuthorizationStrategy(strategy);",
      "397:         j.jenkins.addView(new ListView(\"foo\", j.jenkins));",
      "400:         assertEquals(\"two views exist\", 2, Jenkins.getInstance().getViews().size());",
      "401:         List<SearchItem> results = new ArrayList<>();",
      "402:         j.jenkins.getSearchIndex().suggest(\"foo\", results);",
      "403:         assertEquals(\"nonempty results list\", 1, results.size());",
      "407:         assertFalse(\"no permission\", j.jenkins.getView(\"foo\").getACL().hasPermission(User.get(\"alice\").impersonate(), View.READ));",
      "408:         ACL.impersonate(User.get(\"alice\").impersonate(), new Runnable() {",
      "409:             @Override",
      "410:             public void run() {",
      "411:                 assertEquals(\"no visible views\", 0, Jenkins.getInstance().getViews().size());",
      "413:                 List<SearchItem> results = new ArrayList<>();",
      "414:                 j.jenkins.getSearchIndex().suggest(\"foo\", results);",
      "415:                 assertEquals(\"empty results list\", 0, results.size());",
      "416:             }",
      "417:         });",
      "418:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a5a0ac229547057f1a04cb3618c943bfcc8aa0bd",
      "candidate_info": {
        "commit_hash": "a5a0ac229547057f1a04cb3618c943bfcc8aa0bd",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/a5a0ac229547057f1a04cb3618c943bfcc8aa0bd",
        "files": [
          "core/src/main/java/jenkins/model/Jenkins.java",
          "test/src/test/java/hudson/search/SearchTest.java"
        ],
        "message": "Merge branch 'security-stable-2.32' into security-master",
        "before_after_code_files": [
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
          "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
            "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
            "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2259:             })",
          "2260:             .add(new CollectionSearchIndex() {// for views",
          "2261:                 protected View get(String key) { return getView(key); }",
          "2263:             });",
          "2264:     }",
          "",
          "[Removed Lines]",
          "2262:                 protected Collection<View> all() { return views; }",
          "",
          "[Added Lines]",
          "2262:                 protected Collection<View> all() { return viewGroupMixIn.getViews(); }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java": [
          "File: test/src/test/java/hudson/search/SearchTest.java -> test/src/test/java/hudson/search/SearchTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import hudson.model.FreeStyleProject;",
          "33: import hudson.model.ListView;",
          "35: import java.net.URL;",
          "37: import java.util.ArrayList;",
          "38: import java.util.List;",
          "40: import net.sf.json.JSONArray;",
          "41: import net.sf.json.JSONObject;",
          "42: import net.sf.json.JSONSerializer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import java.io.IOException;",
          "39: import java.util.Collections;",
          "42: import hudson.model.User;",
          "43: import hudson.model.View;",
          "44: import hudson.security.ACL;",
          "45: import hudson.security.AuthorizationStrategy;",
          "46: import hudson.security.GlobalMatrixAuthorizationStrategy;",
          "47: import jenkins.model.Jenkins;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:         assertTrue(suggest(j.jenkins.getSearchIndex(),\"foo\").contains(p));",
          "380:     }",
          "382:     @Test",
          "383:     public void testSearchWithinFolders() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:     @Issue(\"SECURITY-385\")",
          "391:     @Test",
          "392:     public void testInaccessibleViews() throws IOException {",
          "393:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
          "394:         GlobalMatrixAuthorizationStrategy strategy = new GlobalMatrixAuthorizationStrategy();",
          "395:         strategy.add(Jenkins.READ, \"alice\");",
          "396:         j.jenkins.setAuthorizationStrategy(strategy);",
          "398:         j.jenkins.addView(new ListView(\"foo\", j.jenkins));",
          "401:         assertEquals(\"two views exist\", 2, Jenkins.getInstance().getViews().size());",
          "402:         List<SearchItem> results = new ArrayList<>();",
          "403:         j.jenkins.getSearchIndex().suggest(\"foo\", results);",
          "404:         assertEquals(\"nonempty results list\", 1, results.size());",
          "408:         assertFalse(\"no permission\", j.jenkins.getView(\"foo\").getACL().hasPermission(User.get(\"alice\").impersonate(), View.READ));",
          "409:         ACL.impersonate(User.get(\"alice\").impersonate(), new Runnable() {",
          "410:             @Override",
          "411:             public void run() {",
          "412:                 assertEquals(\"no visible views\", 0, Jenkins.getInstance().getViews().size());",
          "414:                 List<SearchItem> results = new ArrayList<>();",
          "415:                 j.jenkins.getSearchIndex().suggest(\"foo\", results);",
          "416:                 assertEquals(\"empty results list\", Collections.emptyList(), results);",
          "417:             }",
          "418:         });",
          "419:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16254cb8ba1e3700869f79fb74ef1c79b34d0afc",
      "candidate_info": {
        "commit_hash": "16254cb8ba1e3700869f79fb74ef1c79b34d0afc",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/16254cb8ba1e3700869f79fb74ef1c79b34d0afc",
        "files": [
          "core/src/main/java/hudson/DependencyRunner.java",
          "core/src/main/java/hudson/model/Computer.java",
          "core/src/main/java/hudson/model/DependencyGraph.java",
          "core/src/main/java/hudson/model/Items.java",
          "core/src/main/java/hudson/model/Label.java",
          "core/src/main/java/hudson/model/ListView.java",
          "core/src/main/java/hudson/model/UsageStatistics.java",
          "core/src/main/java/hudson/model/User.java",
          "core/src/main/java/hudson/model/WorkspaceCleanupThread.java",
          "core/src/main/java/hudson/model/listeners/ItemListener.java",
          "core/src/main/java/hudson/scm/AutoBrowserHolder.java",
          "core/src/main/java/hudson/search/CollectionSearchIndex.java",
          "core/src/main/java/hudson/tasks/ArtifactArchiver.java",
          "core/src/main/java/hudson/tasks/BuildTrigger.java",
          "core/src/main/java/hudson/triggers/SCMTrigger.java",
          "core/src/main/java/hudson/triggers/Trigger.java",
          "core/src/main/java/hudson/util/RunList.java",
          "core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java"
        ],
        "message": "[JENKINS-40252] Switch to allItems where traversal order is not important\n\n- Also switch in cases where we have a subset that is likely significantly smaller and hence quicker to sort",
        "before_after_code_files": [
          "core/src/main/java/hudson/DependencyRunner.java||core/src/main/java/hudson/DependencyRunner.java",
          "core/src/main/java/hudson/model/Computer.java||core/src/main/java/hudson/model/Computer.java",
          "core/src/main/java/hudson/model/DependencyGraph.java||core/src/main/java/hudson/model/DependencyGraph.java",
          "core/src/main/java/hudson/model/Items.java||core/src/main/java/hudson/model/Items.java",
          "core/src/main/java/hudson/model/Label.java||core/src/main/java/hudson/model/Label.java",
          "core/src/main/java/hudson/model/ListView.java||core/src/main/java/hudson/model/ListView.java",
          "core/src/main/java/hudson/model/UsageStatistics.java||core/src/main/java/hudson/model/UsageStatistics.java",
          "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java",
          "core/src/main/java/hudson/model/WorkspaceCleanupThread.java||core/src/main/java/hudson/model/WorkspaceCleanupThread.java",
          "core/src/main/java/hudson/model/listeners/ItemListener.java||core/src/main/java/hudson/model/listeners/ItemListener.java",
          "core/src/main/java/hudson/scm/AutoBrowserHolder.java||core/src/main/java/hudson/scm/AutoBrowserHolder.java",
          "core/src/main/java/hudson/search/CollectionSearchIndex.java||core/src/main/java/hudson/search/CollectionSearchIndex.java",
          "core/src/main/java/hudson/tasks/ArtifactArchiver.java||core/src/main/java/hudson/tasks/ArtifactArchiver.java",
          "core/src/main/java/hudson/tasks/BuildTrigger.java||core/src/main/java/hudson/tasks/BuildTrigger.java",
          "core/src/main/java/hudson/triggers/SCMTrigger.java||core/src/main/java/hudson/triggers/SCMTrigger.java",
          "core/src/main/java/hudson/triggers/Trigger.java||core/src/main/java/hudson/triggers/Trigger.java",
          "core/src/main/java/hudson/util/RunList.java||core/src/main/java/hudson/util/RunList.java",
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java||core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/DependencyRunner.java||core/src/main/java/hudson/DependencyRunner.java": [
          "File: core/src/main/java/hudson/DependencyRunner.java -> core/src/main/java/hudson/DependencyRunner.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:             Set<AbstractProject> topLevelProjects = new HashSet<AbstractProject>();",
          "61:             LOGGER.fine(\"assembling top level projects\");",
          "63:                 if (p.getUpstreamProjects().size() == 0) {",
          "64:                     LOGGER.fine(\"adding top level project \" + p.getName());",
          "65:                     topLevelProjects.add(p);",
          "",
          "[Removed Lines]",
          "62:             for (AbstractProject p : Jenkins.getInstance().getAllItems(AbstractProject.class))",
          "",
          "[Added Lines]",
          "62:             for (AbstractProject p : Jenkins.getInstance().allItems(AbstractProject.class))",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/Computer.java||core/src/main/java/hudson/model/Computer.java": [
          "File: core/src/main/java/hudson/model/Computer.java -> core/src/main/java/hudson/model/Computer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:     }",
          "780:     public RunList getBuilds() {",
          "782:     }",
          "",
          "[Removed Lines]",
          "781:      return new RunList(Jenkins.getInstance().getAllItems(Job.class)).node(getNode());",
          "",
          "[Added Lines]",
          "781:         return RunList.fromJobs(Jenkins.getInstance().allItems(Job.class)).node(getNode());",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/DependencyGraph.java||core/src/main/java/hudson/model/DependencyGraph.java": [
          "File: core/src/main/java/hudson/model/DependencyGraph.java -> core/src/main/java/hudson/model/DependencyGraph.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:         SecurityContext saveCtx = ACL.impersonate(ACL.SYSTEM);",
          "92:         try {",
          "93:             this.computationalData = new HashMap<Class<?>, Object>();",
          "95:                 p.buildDependencyGraph(this);",
          "97:             forward = finalize(forward);",
          "",
          "[Removed Lines]",
          "94:             for( AbstractProject p : getAllProjects() )",
          "",
          "[Added Lines]",
          "94:             for( AbstractProject p : Jenkins.getInstance().allItems(AbstractProject.class) )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         topologicallySorted = Collections.unmodifiableList(topologicallySorted);",
          "148:     }",
          "",
          "[Removed Lines]",
          "150:     Collection<AbstractProject> getAllProjects() {",
          "151:         return Jenkins.getInstance().getAllItems(AbstractProject.class);",
          "152:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/Items.java||core/src/main/java/hudson/model/Items.java": [
          "File: core/src/main/java/hudson/model/Items.java -> core/src/main/java/hudson/model/Items.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "466:     public static @CheckForNull <T extends Item> T findNearest(Class<T> type, String name, ItemGroup context) {",
          "471:         }",
          "472:         String nearest = EditDistance.findNearest(name, names);",
          "473:         return Jenkins.getInstance().getItem(nearest, context, type);",
          "",
          "[Removed Lines]",
          "467:         List<T> projects = Jenkins.getInstance().getAllItems(type);",
          "468:         String[] names = new String[projects.size()];",
          "469:         for (int i = 0; i < projects.size(); i++) {",
          "470:             names[i] = projects.get(i).getRelativeNameFrom(context);",
          "",
          "[Added Lines]",
          "467:         List<String> names = new ArrayList<>();",
          "468:         for (T item: Jenkins.getInstance().allItems(type)) {",
          "469:             names.add(item.getRelativeNameFrom(context));",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/Label.java||core/src/main/java/hudson/model/Label.java": [
          "File: core/src/main/java/hudson/model/Label.java -> core/src/main/java/hudson/model/Label.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     @Exported",
          "363:     public List<AbstractProject> getTiedJobs() {",
          "364:         List<AbstractProject> r = new ArrayList<AbstractProject>();",
          "366:             if(p instanceof TopLevelItem && this.equals(p.getAssignedLabel()))",
          "367:                 r.add(p);",
          "368:         }",
          "369:         return r;",
          "370:     }",
          "",
          "[Removed Lines]",
          "365:         for (AbstractProject<?,?> p : Jenkins.getInstance().getAllItems(AbstractProject.class)) {",
          "",
          "[Added Lines]",
          "365:         for (AbstractProject<?,?> p : Jenkins.getInstance().allItems(AbstractProject.class)) {",
          "369:         Collections.sort(r, Items.BY_FULL_NAME);",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/ListView.java||core/src/main/java/hudson/model/ListView.java": [
          "File: core/src/main/java/hudson/model/ListView.java -> core/src/main/java/hudson/model/ListView.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:                     renameViewItem(oldFullName, newFullName, jenkins, (ListView) view);",
          "481:                 }",
          "482:             }",
          "484:                 if (g instanceof ViewGroup) {",
          "485:                     ViewGroup vg = (ViewGroup) g;",
          "486:                     for (View v : vg.getViews()) {",
          "",
          "[Removed Lines]",
          "483:             for (Item g : jenkins.getAllItems()) {",
          "",
          "[Added Lines]",
          "483:             for (Item g : jenkins.allItems()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524:                     deleteViewItem(item, jenkins, (ListView) view);",
          "525:                 }",
          "526:             }",
          "528:                 if (g instanceof ViewGroup) {",
          "529:                     ViewGroup vg = (ViewGroup) g;",
          "530:                     for (View v : vg.getViews()) {",
          "",
          "[Removed Lines]",
          "527:             for (Item g : jenkins.getAllItems()) {",
          "",
          "[Added Lines]",
          "527:             for (Item g : jenkins.allItems()) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/UsageStatistics.java||core/src/main/java/hudson/model/UsageStatistics.java": [
          "File: core/src/main/java/hudson/model/UsageStatistics.java -> core/src/main/java/hudson/model/UsageStatistics.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:         o.put(\"plugins\",plugins);",
          "160:         JSONObject jobs = new JSONObject();",
          "167:             }",
          "169:         }",
          "170:         o.put(\"jobs\",jobs);",
          "",
          "[Removed Lines]",
          "161:         List<TopLevelItem> items = j.getAllItems(TopLevelItem.class);",
          "162:         for (TopLevelItemDescriptor d : Items.all()) {",
          "163:             int cnt=0;",
          "164:             for (TopLevelItem item : items) {",
          "165:                 if(item.getDescriptor()==d)",
          "166:                     cnt++;",
          "168:             jobs.put(d.getJsonSafeClassName(),cnt);",
          "",
          "[Added Lines]",
          "163:         TopLevelItemDescriptor[] descriptors = Items.all().toArray(new TopLevelItemDescriptor[0]);",
          "164:         int counts[] = new int[descriptors.length];",
          "165:         for (TopLevelItem item: j.allItems(TopLevelItem.class)) {",
          "166:             TopLevelItemDescriptor d = item.getDescriptor();",
          "167:             for (int i = 0; i < descriptors.length; i++) {",
          "168:                 if (d == descriptors[i]) {",
          "169:                     counts[i]++;",
          "171:                     break;",
          "172:                 }",
          "174:         }",
          "175:         for (int i = 0; i < descriptors.length; i++) {",
          "176:             jobs.put(descriptors[i].getJsonSafeClassName(), counts[i]);",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
          "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: package hudson.model;",
          "29: import com.google.common.base.Predicate;",
          "30: import com.infradna.tool.bridge_method_injector.WithBridgeMethods;",
          "32: import hudson.model.Descriptor.FormException;",
          "33: import hudson.model.listeners.SaveableListener;",
          "34: import hudson.security.ACL;",
          "",
          "[Removed Lines]",
          "27: import jenkins.security.UserDetailsCache;",
          "28: import jenkins.util.SystemProperties;",
          "31: import hudson.*;",
          "",
          "[Added Lines]",
          "29: import hudson.BulkChange;",
          "30: import hudson.CopyOnWrite;",
          "31: import hudson.Extension;",
          "32: import hudson.ExtensionList;",
          "33: import hudson.ExtensionPoint;",
          "34: import hudson.FeedAdapter;",
          "35: import hudson.Util;",
          "36: import hudson.XmlFile;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import hudson.util.FormValidation;",
          "41: import hudson.util.RunList;",
          "42: import hudson.util.XStream2;",
          "70: import java.io.File;",
          "72: import java.io.FileFilter;",
          "73: import java.util.ArrayList;",
          "74: import java.util.Arrays;",
          "75: import java.util.Collection;",
          "",
          "[Removed Lines]",
          "43: import jenkins.model.IdStrategy;",
          "44: import jenkins.model.Jenkins;",
          "45: import jenkins.model.ModelObjectWithContextMenu;",
          "46: import jenkins.security.ImpersonatingUserDetailsService;",
          "47: import jenkins.security.LastGrantedAuthoritiesProperty;",
          "48: import net.sf.json.JSONObject;",
          "50: import org.acegisecurity.Authentication;",
          "51: import org.acegisecurity.GrantedAuthority;",
          "52: import org.acegisecurity.providers.UsernamePasswordAuthenticationToken;",
          "53: import org.acegisecurity.providers.anonymous.AnonymousAuthenticationToken;",
          "54: import org.acegisecurity.userdetails.UserDetails;",
          "55: import org.acegisecurity.userdetails.UsernameNotFoundException;",
          "56: import org.jenkinsci.Symbol;",
          "57: import org.springframework.dao.DataAccessException;",
          "58: import org.kohsuke.accmod.Restricted;",
          "59: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "60: import org.kohsuke.stapler.StaplerRequest;",
          "61: import org.kohsuke.stapler.StaplerResponse;",
          "62: import org.kohsuke.stapler.export.Exported;",
          "63: import org.kohsuke.stapler.export.ExportedBean;",
          "64: import org.apache.commons.io.filefilter.DirectoryFileFilter;",
          "65: import org.kohsuke.stapler.interceptor.RequirePOST;",
          "67: import javax.annotation.concurrent.GuardedBy;",
          "68: import javax.servlet.ServletException;",
          "69: import javax.servlet.http.HttpServletResponse;",
          "71: import java.io.IOException;",
          "",
          "[Added Lines]",
          "50: import java.io.IOException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91: import javax.annotation.CheckForNull;",
          "92: import javax.annotation.Nonnull;",
          "93: import javax.annotation.Nullable;",
          "94: import org.apache.commons.lang.StringUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: import javax.annotation.concurrent.GuardedBy;",
          "73: import javax.servlet.ServletException;",
          "74: import javax.servlet.http.HttpServletResponse;",
          "75: import jenkins.model.IdStrategy;",
          "76: import jenkins.model.Jenkins;",
          "77: import jenkins.model.ModelObjectWithContextMenu;",
          "78: import jenkins.security.ImpersonatingUserDetailsService;",
          "79: import jenkins.security.LastGrantedAuthoritiesProperty;",
          "80: import jenkins.security.UserDetailsCache;",
          "81: import jenkins.util.SystemProperties;",
          "82: import net.sf.json.JSONObject;",
          "83: import org.acegisecurity.Authentication;",
          "84: import org.acegisecurity.GrantedAuthority;",
          "85: import org.acegisecurity.providers.UsernamePasswordAuthenticationToken;",
          "86: import org.acegisecurity.providers.anonymous.AnonymousAuthenticationToken;",
          "87: import org.acegisecurity.userdetails.UserDetails;",
          "88: import org.acegisecurity.userdetails.UsernameNotFoundException;",
          "89: import org.apache.commons.io.filefilter.DirectoryFileFilter;",
          "91: import org.jenkinsci.Symbol;",
          "92: import org.kohsuke.accmod.Restricted;",
          "93: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "94: import org.kohsuke.stapler.StaplerRequest;",
          "95: import org.kohsuke.stapler.StaplerResponse;",
          "96: import org.kohsuke.stapler.export.Exported;",
          "97: import org.kohsuke.stapler.export.ExportedBean;",
          "98: import org.kohsuke.stapler.interceptor.RequirePOST;",
          "99: import org.springframework.dao.DataAccessException;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "650:     @WithBridgeMethods(List.class)",
          "651:     public @Nonnull RunList getBuilds() {",
          "653:             @Override public boolean apply(Run<?,?> r) {",
          "654:                 return r instanceof AbstractBuild && relatedTo((AbstractBuild<?,?>) r);",
          "655:             }",
          "",
          "[Removed Lines]",
          "652:      return new RunList<Run<?,?>>(Jenkins.getInstance().getAllItems(Job.class)).filter(new Predicate<Run<?,?>>() {",
          "",
          "[Added Lines]",
          "655:     @SuppressWarnings(\"unchecked\")",
          "658:         return RunList.fromJobs(Jenkins.getInstance().allItems(Job.class)).filter(new Predicate<Run<?,?>>() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "663:     public @Nonnull Set<AbstractProject<?,?>> getProjects() {",
          "664:         Set<AbstractProject<?,?>> r = new HashSet<AbstractProject<?,?>>();",
          "666:             if(p.hasParticipant(this))",
          "667:                 r.add(p);",
          "668:         return r;",
          "",
          "[Removed Lines]",
          "665:         for (AbstractProject<?,?> p : Jenkins.getInstance().getAllItems(AbstractProject.class))",
          "",
          "[Added Lines]",
          "671:         for (AbstractProject<?,?> p : Jenkins.getInstance().allItems(AbstractProject.class))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "834:     public void doRssLatest(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {",
          "835:         final List<Run> lastBuilds = new ArrayList<Run>();",
          "837:             for (AbstractBuild<?,?> b = p.getLastBuild(); b != null; b = b.getPreviousBuild()) {",
          "838:                 if (relatedTo(b)) {",
          "839:                     lastBuilds.add(b);",
          "",
          "[Removed Lines]",
          "836:         for (AbstractProject<?,?> p : Jenkins.getInstance().getAllItems(AbstractProject.class)) {",
          "",
          "[Added Lines]",
          "842:         for (AbstractProject<?,?> p : Jenkins.getInstance().allItems(AbstractProject.class)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "841:                 }",
          "842:             }",
          "843:         }",
          "844:         rss(req, rsp, \" latest build\", RunList.fromRuns(lastBuilds), Run.FEED_ADAPTER_LATEST);",
          "845:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:         Collections.sort(lastBuilds, new Comparator<Run>() {",
          "853:             @Override",
          "854:             public int compare(Run o1, Run o2) {",
          "855:                 return Items.BY_FULL_NAME.compare(o1.getParent(), o2.getParent());",
          "856:             }",
          "857:         });",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/WorkspaceCleanupThread.java||core/src/main/java/hudson/model/WorkspaceCleanupThread.java": [
          "File: core/src/main/java/hudson/model/WorkspaceCleanupThread.java -> core/src/main/java/hudson/model/WorkspaceCleanupThread.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         Jenkins j = Jenkins.getInstance();",
          "69:         nodes.add(j);",
          "70:         nodes.addAll(j.getNodes());",
          "72:             if (item instanceof ModifiableTopLevelItemGroup) { // no such thing as TopLevelItemGroup, and ItemGroup offers no access to its type parameter",
          "73:                 continue; // children will typically have their own workspaces as subdirectories; probably no real workspace of its own",
          "74:             }",
          "",
          "[Removed Lines]",
          "71:         for (TopLevelItem item : j.getAllItems(TopLevelItem.class)) {",
          "",
          "[Added Lines]",
          "71:         for (TopLevelItem item : j.allItems(TopLevelItem.class)) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/listeners/ItemListener.java||core/src/main/java/hudson/model/listeners/ItemListener.java": [
          "File: core/src/main/java/hudson/model/listeners/ItemListener.java -> core/src/main/java/hudson/model/listeners/ItemListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:             }",
          "241:         });",
          "242:         if (rootItem instanceof ItemGroup) {",
          "248:                 final String childNew = child.getFullName();",
          "249:                 assert childNew.startsWith(newFullName);",
          "250:                 assert childNew.charAt(newFullName.length()) == '/';",
          "",
          "[Removed Lines]",
          "243:             for (final Item child : ACL.impersonate(ACL.SYSTEM, new NotReallyRoleSensitiveCallable<List<Item>,RuntimeException>() {",
          "244:                 @Override public List<Item> call() {",
          "245:                     return Items.getAllItems((ItemGroup) rootItem, Item.class);",
          "246:                 }",
          "247:             })) {",
          "",
          "[Added Lines]",
          "243:             for (final Item child : Items.allItems(ACL.SYSTEM, (ItemGroup)rootItem, Item.class)) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/scm/AutoBrowserHolder.java||core/src/main/java/hudson/scm/AutoBrowserHolder.java": [
          "File: core/src/main/java/hudson/scm/AutoBrowserHolder.java -> core/src/main/java/hudson/scm/AutoBrowserHolder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     private RepositoryBrowser infer() {",
          "80:             SCM scm = p.getScm();",
          "81:             if (scm!=null && scm.getClass()==owner.getClass() && scm.getBrowser()!=null &&",
          "82:                     ((SCMDescriptor)scm.getDescriptor()).isBrowserReusable(scm,owner)) {",
          "",
          "[Removed Lines]",
          "79:         for( AbstractProject p : Jenkins.getInstance().getAllItems(AbstractProject.class) ) {",
          "",
          "[Added Lines]",
          "79:         for( AbstractProject p : Jenkins.getInstance().allItems(AbstractProject.class) ) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/search/CollectionSearchIndex.java||core/src/main/java/hudson/search/CollectionSearchIndex.java": [
          "File: core/src/main/java/hudson/search/CollectionSearchIndex.java -> core/src/main/java/hudson/search/CollectionSearchIndex.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.search;",
          "26: import java.util.Collection;",
          "27: import java.util.List;",
          "28: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import java.util.Collections;",
          "30: import javax.annotation.Nonnull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     protected abstract Collection<SMT> all();",
          "47:     public void find(String token, List<SearchItem> result) {",
          "48:         SearchItem p = get(token);",
          "49:         if(p!=null)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     @Nonnull",
          "50:     protected Iterable<SMT> allAsIterable() {",
          "51:         Collection<SMT> all = all();",
          "52:         return all == null ? Collections.<SMT>emptySet() : all;",
          "53:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:     }",
          "53:     public void suggest(String token, List<SearchItem> result) {",
          "55:         boolean isCaseSensitive = UserSearchProperty.isCaseInsensitive();",
          "56:         if(isCaseSensitive){",
          "57:           token = token.toLowerCase();",
          "58:         }",
          "61:             String name = getName(o);",
          "62:             if(isCaseSensitive)",
          "63:                 name=name.toLowerCase();",
          "",
          "[Removed Lines]",
          "54:          Collection<SMT> items = all();",
          "59:         if(items==null)     return;",
          "60:         for (SMT o : items) {",
          "",
          "[Added Lines]",
          "66:         for (SMT o : allAsIterable()) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/tasks/ArtifactArchiver.java||core/src/main/java/hudson/tasks/ArtifactArchiver.java": [
          "File: core/src/main/java/hudson/tasks/ArtifactArchiver.java -> core/src/main/java/hudson/tasks/ArtifactArchiver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:     @Extension public static final class Migrator extends ItemListener {",
          "349:         @SuppressWarnings(\"deprecation\")",
          "350:         @Override public void onLoaded() {",
          "352:                 try {",
          "353:                     ArtifactArchiver aa = p.getPublishersList().get(ArtifactArchiver.class);",
          "354:                     if (aa != null && aa.latestOnly != null) {",
          "",
          "[Removed Lines]",
          "351:             for (AbstractProject<?,?> p : Jenkins.getInstance().getAllItems(AbstractProject.class)) {",
          "",
          "[Added Lines]",
          "351:             for (AbstractProject<?,?> p : Jenkins.getInstance().allItems(AbstractProject.class)) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/tasks/BuildTrigger.java||core/src/main/java/hudson/tasks/BuildTrigger.java": [
          "File: core/src/main/java/hudson/tasks/BuildTrigger.java -> core/src/main/java/hudson/tasks/BuildTrigger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:             private void locationChanged(Item item, String oldFullName, String newFullName) {",
          "424:                     BuildTrigger t = p.getPublishersList().get(BuildTrigger.class);",
          "425:                     if(t!=null) {",
          "426:                         String cp2 = Items.computeRelativeNamesAfterRenaming(oldFullName, newFullName, t.childProjects, p.getParent());",
          "",
          "[Removed Lines]",
          "423:                 for( Project<?,?> p : Jenkins.getInstance().getAllItems(Project.class) ) {",
          "",
          "[Added Lines]",
          "423:                 for( Project<?,?> p : Jenkins.getInstance().allItems(Project.class) ) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/triggers/SCMTrigger.java||core/src/main/java/hudson/triggers/SCMTrigger.java": [
          "File: core/src/main/java/hudson/triggers/SCMTrigger.java -> core/src/main/java/hudson/triggers/SCMTrigger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:         @Restricted(NoExternalUse.class)",
          "312:         public boolean isPollingThreadCountOptionVisible() {",
          "319:         }",
          "",
          "[Removed Lines]",
          "317:             return Jenkins.getInstance().getAllItems(AbstractProject.class).size() > 10",
          "318:                     || getPollingThreadCount() != 0;",
          "",
          "[Added Lines]",
          "313:             if (getPollingThreadCount() != 0) {",
          "315:                 return true;",
          "316:             }",
          "320:             int count = 0;",
          "323:             for (Item item: Jenkins.getInstance().allItems(Item.class)) {",
          "324:                 if (item instanceof SCMTriggerItem) {",
          "325:                     if (++count > 10) {",
          "326:                         return true;",
          "327:                     }",
          "328:                 }",
          "329:             }",
          "330:             return false;",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/triggers/Trigger.java||core/src/main/java/hudson/triggers/Trigger.java": [
          "File: core/src/main/java/hudson/triggers/Trigger.java -> core/src/main/java/hudson/triggers/Trigger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:         }",
          "270:             for (Trigger t : p.getTriggers().values()) {",
          "271:                 if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {",
          "272:                     if (t !=null && t.spec != null && t.tabs != null) {",
          "",
          "[Removed Lines]",
          "269:         for (ParameterizedJobMixIn.ParameterizedJob p : inst.getAllItems(ParameterizedJobMixIn.ParameterizedJob.class)) {",
          "",
          "[Added Lines]",
          "269:         for (ParameterizedJobMixIn.ParameterizedJob p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/util/RunList.java||core/src/main/java/hudson/util/RunList.java": [
          "File: core/src/main/java/hudson/util/RunList.java -> core/src/main/java/hudson/util/RunList.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         this.base = combine(runLists);",
          "77:     }",
          "80:         return Iterables.mergeSorted(runLists, new Comparator<R>() {",
          "81:             public int compare(R o1, R o2) {",
          "82:                 long lhs = o1.getTimeInMillis();",
          "",
          "[Removed Lines]",
          "79:     private Iterable<R> combine(Iterable<Iterable<R>> runLists) {",
          "",
          "[Added Lines]",
          "79:     public static <J extends Job<J,R>, R extends Run<J,R>> RunList<R> fromJobs(Iterable<? extends J> jobs) {",
          "80:         List<Iterable<R>> runLists = new ArrayList<>();",
          "81:         for (Job j : jobs)",
          "82:             runLists.add(j.getBuilds());",
          "83:         return new RunList<>(combine(runLists));",
          "84:     }",
          "86:     private static <R extends Run> Iterable<R> combine(Iterable<Iterable<R>> runLists) {",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1753:         return Items.getAllItems(this, type);",
          "1754:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1762:     public <T extends Item> Iterable<T> allItems(Class<T> type) {",
          "1763:         return Items.allItems(this, type);",
          "1764:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1762:         return getAllItems(Item.class);",
          "1763:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1780:     public Iterable<Item> allItems() {",
          "1781:         return allItems(Item.class);",
          "1782:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1782:     public Collection<String> getJobNames() {",
          "1783:         List<String> names = new ArrayList<String>();",
          "1785:             names.add(j.getFullName());",
          "1786:         return names;",
          "1787:     }",
          "",
          "[Removed Lines]",
          "1784:         for (Job j : getAllItems(Job.class))",
          "",
          "[Added Lines]",
          "1803:         for (Job j : allItems(Job.class))",
          "1805:         Collections.sort(names, String.CASE_INSENSITIVE_ORDER);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2248:             .add(new CollectionSearchIndex<TopLevelItem>() {",
          "2249:                 protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }",
          "2250:                 protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }",
          "2251:             })",
          "2252:             .add(getPrimaryView().makeSearchIndex())",
          "2253:             .add(new CollectionSearchIndex() {// for computers",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2271:                 @Nonnull",
          "2272:                 @Override",
          "2273:                 protected Iterable<TopLevelItem> allAsIterable() {",
          "2274:                     return allItems(TopLevelItem.class);",
          "2275:                 }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java||core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java": [
          "File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java -> core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:         private Map<Job,Collection<ReverseBuildTrigger>> calculateCache() {",
          "217:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "218:                 final Map<Job, Collection<ReverseBuildTrigger>> result = new WeakHashMap<>();",
          "220:                     ReverseBuildTrigger trigger =",
          "221:                             ParameterizedJobMixIn.getTrigger(downstream, ReverseBuildTrigger.class);",
          "222:                     if (trigger == null) {",
          "",
          "[Removed Lines]",
          "219:                 for (Job<?, ?> downstream : Jenkins.getInstance().getAllItems(Job.class)) {",
          "",
          "[Added Lines]",
          "219:                 for (Job<?, ?> downstream : Jenkins.getInstance().allItems(Job.class)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:         @Override",
          "277:         public void onLocationChanged(Item item, final String oldFullName, final String newFullName) {",
          "278:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "280:                     ReverseBuildTrigger t = ParameterizedJobMixIn.getTrigger(p, ReverseBuildTrigger.class);",
          "281:                     if (t != null) {",
          "282:                         String revised =",
          "",
          "[Removed Lines]",
          "279:                 for (Job<?, ?> p : Jenkins.getInstance().getAllItems(Job.class)) {",
          "",
          "[Added Lines]",
          "279:                 for (Job<?, ?> p : Jenkins.getInstance().allItems(Job.class)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "250ce5b22a43523a13957b3adf26bbfee23e6cce",
      "candidate_info": {
        "commit_hash": "250ce5b22a43523a13957b3adf26bbfee23e6cce",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/250ce5b22a43523a13957b3adf26bbfee23e6cce",
        "files": [
          "core/src/main/java/jenkins/model/Jenkins.java",
          "test/src/test/java/hudson/search/SearchTest.java"
        ],
        "message": "[FIX JENKINS-7874] Autocomplete admin links only when admin",
        "before_after_code_files": [
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
          "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
            "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
            "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2242:     @Override",
          "2243:     public SearchIndexBuilder makeSearchIndex() {",
          "2270:     }",
          "2272:     public String getUrlChildPrefix() {",
          "",
          "[Removed Lines]",
          "2244:         return super.makeSearchIndex()",
          "2245:             .add(\"configure\", \"config\",\"configure\")",
          "2246:             .add(\"manage\")",
          "2247:             .add(\"log\")",
          "2248:             .add(new CollectionSearchIndex<TopLevelItem>() {",
          "2249:                 protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }",
          "2250:                 protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }",
          "2251:                 @Nonnull",
          "2252:                 @Override",
          "2253:                 protected Iterable<TopLevelItem> allAsIterable() {",
          "2254:                     return allItems(TopLevelItem.class);",
          "2255:                 }",
          "2256:             })",
          "2257:             .add(getPrimaryView().makeSearchIndex())",
          "2258:             .add(new CollectionSearchIndex() {// for computers",
          "2259:                 protected Computer get(String key) { return getComputer(key); }",
          "2260:                 protected Collection<Computer> all() { return computers.values(); }",
          "2261:             })",
          "2262:             .add(new CollectionSearchIndex() {// for users",
          "2263:                 protected User get(String key) { return User.get(key,false); }",
          "2264:                 protected Collection<User> all() { return User.getAll(); }",
          "2265:             })",
          "2266:             .add(new CollectionSearchIndex() {// for views",
          "2267:                 protected View get(String key) { return getView(key); }",
          "2268:                 protected Collection<View> all() { return views; }",
          "2269:             });",
          "",
          "[Added Lines]",
          "2244:         SearchIndexBuilder builder = super.makeSearchIndex();",
          "2245:         if (hasPermission(ADMINISTER)) {",
          "2246:                 builder.add(\"configure\", \"config\", \"configure\")",
          "2247:                     .add(\"manage\")",
          "2248:                     .add(\"log\");",
          "2249:         }",
          "2250:         builder.add(new CollectionSearchIndex<TopLevelItem>() {",
          "2251:                     protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }",
          "2252:                     protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }",
          "2253:                     @Nonnull",
          "2254:                     @Override",
          "2255:                     protected Iterable<TopLevelItem> allAsIterable() {",
          "2256:                         return allItems(TopLevelItem.class);",
          "2257:                     }",
          "2258:                 })",
          "2259:                 .add(getPrimaryView().makeSearchIndex())",
          "2260:                 .add(new CollectionSearchIndex() {// for computers",
          "2261:                     protected Computer get(String key) { return getComputer(key); }",
          "2262:                     protected Collection<Computer> all() { return computers.values(); }",
          "2263:                 })",
          "2264:                 .add(new CollectionSearchIndex() {// for users",
          "2265:                     protected User get(String key) { return User.get(key,false); }",
          "2266:                     protected Collection<User> all() { return User.getAll(); }",
          "2267:                 })",
          "2268:                 .add(new CollectionSearchIndex() {// for views",
          "2269:                     protected View get(String key) { return getView(key); }",
          "2270:                     protected Collection<View> all() { return views; }",
          "2271:                 });",
          "2272:         return builder;",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java": [
          "File: test/src/test/java/hudson/search/SearchTest.java -> test/src/test/java/hudson/search/SearchTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import java.util.ArrayList;",
          "38: import java.util.List;",
          "40: import net.sf.json.JSONArray;",
          "41: import net.sf.json.JSONObject;",
          "42: import net.sf.json.JSONSerializer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import hudson.model.User;",
          "41: import hudson.security.ACL;",
          "42: import hudson.security.ACLContext;",
          "43: import jenkins.model.Jenkins;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.jvnet.hudson.test.Issue;",
          "47: import org.jvnet.hudson.test.JenkinsRule;",
          "48: import org.jvnet.hudson.test.JenkinsRule.WebClient;",
          "49: import org.jvnet.hudson.test.MockFolder;",
          "51: import com.gargoylesoftware.htmlunit.AlertHandler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: import org.jvnet.hudson.test.MockAuthorizationStrategy;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390:         assertTrue(suggest.contains(p2));",
          "391:     }",
          "393:     private List<SearchItem> suggest(SearchIndex index, String term) {",
          "394:         List<SearchItem> result = new ArrayList<SearchItem>();",
          "395:         index.suggest(term, result);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:     @Test",
          "400:     @Issue(\"JENKINS-7874\")",
          "401:     public void adminOnlyLinksNotShownToRegularUser() {",
          "402:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
          "403:         MockAuthorizationStrategy mas = new MockAuthorizationStrategy();",
          "404:         mas.grant(Jenkins.READ).onRoot().toEveryone();",
          "405:         j.jenkins.setAuthorizationStrategy(mas);",
          "407:         try(ACLContext _ = ACL.as(User.get(\"alice\"))) {",
          "408:             List<SearchItem> results = new ArrayList<>();",
          "409:             j.jenkins.getSearchIndex().find(\"config\", results);",
          "410:             j.jenkins.getSearchIndex().find(\"manage\", results);",
          "411:             j.jenkins.getSearchIndex().find(\"log\", results);",
          "412:             assertEquals(\"empty results list\", 0, results.size());",
          "413:         }",
          "414:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e45a703665c728fcaf46246838b757b546988955",
      "candidate_info": {
        "commit_hash": "e45a703665c728fcaf46246838b757b546988955",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/e45a703665c728fcaf46246838b757b546988955",
        "files": [
          "test/src/test/java/hudson/search/SearchTest.java"
        ],
        "message": "[SECURITY-385] Minor test improvement",
        "before_after_code_files": [
          "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java": [
          "File: test/src/test/java/hudson/search/SearchTest.java -> test/src/test/java/hudson/search/SearchTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import java.net.URL;",
          "38: import java.util.ArrayList;",
          "39: import java.util.List;",
          "41: import hudson.model.User;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413:                 List<SearchItem> results = new ArrayList<>();",
          "414:                 j.jenkins.getSearchIndex().suggest(\"foo\", results);",
          "416:             }",
          "417:         });",
          "418:     }",
          "",
          "[Removed Lines]",
          "415:                 assertEquals(\"empty results list\", 0, results.size());",
          "",
          "[Added Lines]",
          "416:                 assertEquals(\"empty results list\", Collections.emptyList(), results);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7dee930f339f7092361e631bf8af1e4ced631180",
      "candidate_info": {
        "commit_hash": "7dee930f339f7092361e631bf8af1e4ced631180",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/7dee930f339f7092361e631bf8af1e4ced631180",
        "files": [
          "core/src/main/java/hudson/model/Fingerprint.java",
          "core/src/main/java/hudson/model/Node.java",
          "core/src/main/java/hudson/security/AccessControlled.java",
          "core/src/main/java/hudson/tasks/BuildTrigger.java",
          "core/src/main/resources/META-INF/upgrade/AccessControlled.hint",
          "test/src/test/java/hudson/search/SearchTest.java",
          "test/src/test/java/jenkins/model/JenkinsTest.java"
        ],
        "message": "Introducing AccessController.hasPermission(Authentication, Permission).",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java",
          "core/src/main/java/hudson/model/Node.java||core/src/main/java/hudson/model/Node.java",
          "core/src/main/java/hudson/security/AccessControlled.java||core/src/main/java/hudson/security/AccessControlled.java",
          "core/src/main/java/hudson/tasks/BuildTrigger.java||core/src/main/java/hudson/tasks/BuildTrigger.java",
          "core/src/main/resources/META-INF/upgrade/AccessControlled.hint||core/src/main/resources/META-INF/upgrade/AccessControlled.hint",
          "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java",
          "test/src/test/java/jenkins/model/JenkinsTest.java||test/src/test/java/jenkins/model/JenkinsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java": [
          "File: core/src/main/java/hudson/model/Fingerprint.java -> core/src/main/java/hudson/model/Fingerprint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1447:             if (canDiscoverTheItem) {",
          "1448:                 ItemGroup<?> current = itemBySystemUser.getParent();",
          "1449:                 do {",
          "1450:                     if (current instanceof Item) {",
          "1451:                         final Item i = (Item) current;",
          "1452:                         current = i.getParent();",
          "1454:                             canDiscoverTheItem = false;",
          "1455:                         }",
          "1456:                     } else {",
          "",
          "[Removed Lines]",
          "1446:             boolean canDiscoverTheItem = itemBySystemUser.getACL().hasPermission(userAuth, Item.DISCOVER);",
          "1453:                         if (!i.getACL().hasPermission(userAuth, Item.READ)) {",
          "",
          "[Added Lines]",
          "1446:             boolean canDiscoverTheItem = itemBySystemUser.hasPermission(userAuth, Item.DISCOVER);",
          "1453:                         if (!i.hasPermission(userAuth, Item.READ)) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/Node.java||core/src/main/java/hudson/model/Node.java": [
          "File: core/src/main/java/hudson/model/Node.java -> core/src/main/java/hudson/model/Node.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:         }",
          "396:         Authentication identity = item.authenticate();",
          "399:             return CauseOfBlockage.fromMessage(Messages._Node_LackingBuildPermission(identity.getName(), getDisplayName()));",
          "400:         }",
          "",
          "[Removed Lines]",
          "397:         if (!getACL().hasPermission(identity,Computer.BUILD)) {",
          "",
          "[Added Lines]",
          "397:         if (!hasPermission(identity,Computer.BUILD)) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/security/AccessControlled.java||core/src/main/java/hudson/security/AccessControlled.java": [
          "File: core/src/main/java/hudson/security/AccessControlled.java -> core/src/main/java/hudson/security/AccessControlled.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import javax.annotation.Nonnull;",
          "27: import org.acegisecurity.AccessDeniedException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.acegisecurity.Authentication;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:         return getACL().hasPermission(permission);",
          "54:     }",
          "56: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     default boolean hasPermission(@Nonnull Authentication a, @Nonnull Permission permission) {",
          "62:         return getACL().hasPermission(a, permission);",
          "63:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/tasks/BuildTrigger.java||core/src/main/java/hudson/tasks/BuildTrigger.java": [
          "File: core/src/main/java/hudson/tasks/BuildTrigger.java -> core/src/main/java/hudson/tasks/BuildTrigger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:                         return FormValidation.error(Messages.BuildTrigger_NotBuildable(projectName));",
          "412:                     Authentication auth = Tasks.getAuthenticationOf(project);",
          "414:                         return FormValidation.error(Messages.BuildTrigger_you_have_no_permission_to_build_(projectName));",
          "415:                     }",
          "416:                     hasProjects = true;",
          "",
          "[Removed Lines]",
          "413:                     if (!item.getACL().hasPermission(auth, Item.BUILD)) {",
          "",
          "[Added Lines]",
          "413:                     if (!item.hasPermission(auth, Item.BUILD)) {",
          "",
          "---------------"
        ],
        "core/src/main/resources/META-INF/upgrade/AccessControlled.hint||core/src/main/resources/META-INF/upgrade/AccessControlled.hint": [
          "File: core/src/main/resources/META-INF/upgrade/AccessControlled.hint -> core/src/main/resources/META-INF/upgrade/AccessControlled.hint",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: $ac.getACL().hasPermission($a, $p) :: $ac instanceof hudson.security.AccessControlled && $a instanceof org.acegisecurity.Authentication && $p instanceof hudson.security.Permission => $ac.hasPermission($a, $p);;",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java": [
          "File: test/src/test/java/hudson/search/SearchTest.java -> test/src/test/java/hudson/search/SearchTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:         ACL.impersonate(User.get(\"alice\").impersonate(), new Runnable() {",
          "412:             @Override",
          "413:             public void run() {",
          "",
          "[Removed Lines]",
          "410:         assertFalse(\"no permission\", j.jenkins.getView(\"foo\").getACL().hasPermission(User.get(\"alice\").impersonate(), View.READ));",
          "",
          "[Added Lines]",
          "410:         assertFalse(\"no permission\", j.jenkins.getView(\"foo\").hasPermission(User.get(\"alice\").impersonate(), View.READ));",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/model/JenkinsTest.java||test/src/test/java/jenkins/model/JenkinsTest.java": [
          "File: test/src/test/java/jenkins/model/JenkinsTest.java -> test/src/test/java/jenkins/model/JenkinsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "416:         j.jenkins.setAuthorizationStrategy(auth);",
          "421:         WebClient wc = j.createWebClient();",
          "422:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "",
          "[Removed Lines]",
          "419:         assertTrue(!Jenkins.getInstance().getACL().hasPermission(Jenkins.ANONYMOUS,Jenkins.READ));",
          "",
          "[Added Lines]",
          "419:         assertTrue(!Jenkins.getInstance().hasPermission(Jenkins.ANONYMOUS,Jenkins.READ));",
          "",
          "---------------"
        ]
      }
    }
  ]
}