{
  "cve_id": "CVE-2014-0236",
  "cve_desc": "file before 5.18, as used in the Fileinfo component in PHP before 5.6.0, allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a zero root_storage value in a CDF file, related to cdf.c and readcdf.c.",
  "repo": "php/php-src",
  "patch_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
  "patch_info": {
    "commit_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "files": [
      "NEWS",
      "ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c"
    ],
    "message": "Fixed bug #67329 fileinfo: NULL pointer deference flaw by processing certain CDF files",
    "before_after_code_files": [
      "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c"
    ]
  },
  "patch_diff": {
    "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c": [
      "File: ext/fileinfo/libmagic/cdf.c -> ext/fileinfo/libmagic/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "689: int",
      "690: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
      "692: {",
      "693:  size_t i;",
      "694:  const cdf_directory_t *d;",
      "696:  for (i = 0; i < dir->dir_len; i++)",
      "697:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
      "698:    break;",
      "",
      "[Removed Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
      "",
      "[Added Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
      "692:     const cdf_directory_t **root)",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h": [
      "File: ext/fileinfo/libmagic/cdf.h -> ext/fileinfo/libmagic/cdf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
      "301:     cdf_sat_t *);",
      "302: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
      "304: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
      "305:     cdf_property_info_t **, size_t *, size_t *);",
      "306: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
      "",
      "[Removed Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
      "",
      "[Added Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
      "304:     const cdf_directory_t **);",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c": [
      "File: ext/fileinfo/libmagic/readcdf.c -> ext/fileinfo/libmagic/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <stdlib.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: # define strcasestr strstr",
      "78: #endif",
      "80: private const char *",
      "81: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
      "82: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: static const struct cv {",
      "81:  uint64_t clsid[2];",
      "82:  const char *mime;",
      "83: } clsid2mime[] = {",
      "84:  {",
      "85: #ifdef PHP_WIN32",
      "86:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "87: #else",
      "88:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "89: #endif",
      "90:   \"x-msi\",",
      "91:  }",
      "92: }, clsid2desc[] = {",
      "93:  {",
      "94: #ifdef PHP_WIN32",
      "95:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "96: #else",
      "97:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "98: #endif",
      "99:   \"MSI Installer\",",
      "100:  },",
      "101: };",
      "103: private const char *",
      "104: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
      "105: {",
      "106:  size_t i;",
      "107:  for (i = 0; cv[i].mime != NULL; i++) {",
      "108:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
      "109:    return cv[i].mime;",
      "110:  }",
      "111:  return NULL;",
      "112: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96: private int",
      "97: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "99: {",
      "100:         size_t i;",
      "101:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "98:     size_t count)",
      "",
      "[Added Lines]",
      "132:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:  memset(&ts, 0, sizeof(ts));",
      "110:         for (i = 0; i < count; i++) {",
      "111:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "112:                 switch (info[i].pi_type) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:         if (!NOTMIME(ms) && root_storage)",
      "145:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "163:                                                     buf, vbuf) == -1)",
      "164:                                                         return -1;",
      "165:                                         }",
      "167:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
      "168:      str = cdf_app_to_mime(vbuf, app2mime);",
      "169:     }",
      "",
      "[Removed Lines]",
      "166:                                 } else if (info[i].pi_id ==",
      "",
      "[Added Lines]",
      "203:                                 } else if (str == NULL && info[i].pi_id ==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "218: private int",
      "219: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "221: {",
      "222:         cdf_summary_info_header_t si;",
      "223:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "220:     const cdf_stream_t *sst)",
      "",
      "[Added Lines]",
      "257:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "228:                 return -1;",
      "230:         if (NOTMIME(ms)) {",
      "231:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
      "232:       == -1)",
      "233:                         return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268:   const char *str;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:                                 return -2;",
      "256:                         break;",
      "257:                 }",
      "261:         free(info);",
      "263:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "258:         }",
      "260:         m = cdf_file_property_info(ms, info, count);",
      "",
      "[Added Lines]",
      "297:   if (root_storage) {",
      "298:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "299:    if (str)",
      "300:     if (file_printf(ms, \", %s\", str) == -1)",
      "301:      return -2;",
      "302:    }",
      "303:   }",
      "305:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "275:         int i;",
      "276:         const char *expn = \"\";",
      "277:         const char *corrupt = \"corrupt: \";",
      "279:         info.i_fd = fd;",
      "280:         info.i_buf = buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:         const cdf_directory_t *root_storage;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "308:                 goto out2;",
      "309:         }",
      "312:                 expn = \"Cannot read short stream\";",
      "313:                 goto out3;",
      "314:         }",
      "",
      "[Removed Lines]",
      "311:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
      "",
      "[Added Lines]",
      "357:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
      "358:      &root_storage)) == -1) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "329: #ifdef CDF_DEBUG",
      "330:         cdf_dump_summary_info(&h, &scn);",
      "331: #endif",
      "334:  if (i == 0) {",
      "335:   const char *str = NULL;",
      "336:   cdf_directory_t *d;",
      "337:   char name[__arraycount(d->d_name)];",
      "338:   size_t j, k;",
      "340:    d = &dir.dir_tab[j];",
      "341:    for (k = 0; k < sizeof(name); k++)",
      "342:     name[k] = (char)cdf_tole2(d->d_name[k]);",
      "349:   }",
      "350:   if (NOTMIME(ms)) {",
      "351:    if (str != NULL) {",
      "",
      "[Removed Lines]",
      "332:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
      "333:                 expn = \"Can't expand summary_info\";",
      "339:   for (j = 0; j < dir.dir_len; j++) {",
      "343:    if (NOTMIME(ms))",
      "344:     str = cdf_app_to_mime(name, name2desc);",
      "345:    else",
      "346:     str = cdf_app_to_mime(name, name2mime);",
      "347:    if (str != NULL)",
      "348:     break;",
      "",
      "[Added Lines]",
      "379:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "380:             expn = \"Can't expand summary_info\";",
      "388:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
      "392:    str = cdf_app_to_mime(name,",
      "393:        NOTMIME(ms) ? name2desc : name2mime);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "04c6a5b3773548388dec178058f270f30fc0c4de",
      "candidate_info": {
        "commit_hash": "04c6a5b3773548388dec178058f270f30fc0c4de",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/04c6a5b3773548388dec178058f270f30fc0c4de",
        "files": [
          "main/php_content_types.c"
        ],
        "message": "fix length overflow of HTTP_RAW_POST_DATA",
        "before_after_code_files": [
          "main/php_content_types.c||main/php_content_types.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/php_content_types.c||main/php_content_types.c": [
          "File: main/php_content_types.c -> main/php_content_types.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:    length = php_stream_copy_to_mem(SG(request_info).request_body, &data, PHP_STREAM_COPY_ALL, 0);",
          "65:    php_stream_rewind(SG(request_info).request_body);",
          "67:    SET_VAR_STRINGL(\"HTTP_RAW_POST_DATA\", data, length);",
          "69:    sapi_module.sapi_error(E_DEPRECATED,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:    if (length > INT_MAX) {",
          "68:     sapi_module.sapi_error(E_WARNING,",
          "69:      \"HTTP_RAW_POST_DATA truncated from %lu to %d bytes\",",
          "70:      (unsigned long) length, INT_MAX);",
          "71:     length = INT_MAX;",
          "72:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c18ae51aebfcdf4564aa87d4d24c3046bbe9ade6",
      "candidate_info": {
        "commit_hash": "c18ae51aebfcdf4564aa87d4d24c3046bbe9ade6",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/c18ae51aebfcdf4564aa87d4d24c3046bbe9ade6",
        "files": [
          "NEWS",
          "ext/gmp/gmp.c"
        ],
        "message": "Fix crashes in GMP serialize/unserialize",
        "before_after_code_files": [
          "ext/gmp/gmp.c||ext/gmp/gmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/gmp/gmp.c||ext/gmp/gmp.c": [
          "File: ext/gmp/gmp.c -> ext/gmp/gmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "575:  mpz_ptr gmpnum = GET_GMP_FROM_ZVAL(object);",
          "576:  smart_str buf = {0};",
          "577:  zval zv, *zv_ptr = &zv;",
          "582:  INIT_PZVAL(zv_ptr);",
          "584:  gmp_strval(zv_ptr, gmpnum, 10);",
          "586:  zval_dtor(zv_ptr);",
          "588:  Z_ARRVAL_P(zv_ptr) = zend_std_get_properties(object TSRMLS_CC);",
          "589:  Z_TYPE_P(zv_ptr) = IS_ARRAY;",
          "",
          "[Removed Lines]",
          "578:  php_serialize_data_t *serialize_data = (php_serialize_data_t *) data;",
          "580:  PHP_VAR_SERIALIZE_INIT(*serialize_data);",
          "585:  php_var_serialize(&buf, &zv_ptr, serialize_data TSRMLS_CC);",
          "590:  php_var_serialize(&buf, &zv_ptr, serialize_data TSRMLS_CC);",
          "592:  PHP_VAR_SERIALIZE_DESTROY(*serialize_data);",
          "",
          "[Added Lines]",
          "578:  php_serialize_data_t serialize_data = (php_serialize_data_t) data;",
          "580:  PHP_VAR_SERIALIZE_INIT(serialize_data);",
          "584:  php_var_serialize(&buf, &zv_ptr, &serialize_data TSRMLS_CC);",
          "589:  php_var_serialize(&buf, &zv_ptr, &serialize_data TSRMLS_CC);",
          "591:  PHP_VAR_SERIALIZE_DESTROY(serialize_data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "604:  const unsigned char *p, *max;",
          "605:  zval zv, *zv_ptr = &zv;",
          "606:  int retval = FAILURE;",
          "611:  gmp_create_ex(*object, &gmpnum TSRMLS_CC);",
          "613:  p = buf;",
          "614:  max = buf + buf_len;",
          "616:  INIT_ZVAL(zv);",
          "618:   || Z_TYPE_P(zv_ptr) != IS_STRING",
          "619:   || convert_to_gmp(gmpnum, zv_ptr, 10 TSRMLS_CC) == FAILURE",
          "620:  ) {",
          "",
          "[Removed Lines]",
          "607:  php_unserialize_data_t *unserialize_data = (php_unserialize_data_t *) data;",
          "609:  PHP_VAR_UNSERIALIZE_INIT(*unserialize_data);",
          "617:  if (!php_var_unserialize(&zv_ptr, &p, max, unserialize_data TSRMLS_CC)",
          "",
          "[Added Lines]",
          "605:  php_unserialize_data_t unserialize_data = (php_unserialize_data_t) data;",
          "607:  PHP_VAR_UNSERIALIZE_INIT(unserialize_data);",
          "614:  if (!php_var_unserialize(&zv_ptr, &p, max, &unserialize_data TSRMLS_CC)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "624:  zval_dtor(&zv);",
          "626:  INIT_ZVAL(zv);",
          "628:   || Z_TYPE_P(zv_ptr) != IS_ARRAY",
          "629:  ) {",
          "630:   zend_throw_exception(NULL, \"Could not unserialize properties\", 0 TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "627:  if (!php_var_unserialize(&zv_ptr, &p, max, unserialize_data TSRMLS_CC)",
          "",
          "[Added Lines]",
          "624:  if (!php_var_unserialize(&zv_ptr, &p, max, &unserialize_data TSRMLS_CC)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "641:  retval = SUCCESS;",
          "642: exit:",
          "643:  zval_dtor(&zv);",
          "645:  return retval;",
          "646: }",
          "",
          "[Removed Lines]",
          "644:  PHP_VAR_UNSERIALIZE_DESTROY(*unserialize_data);",
          "",
          "[Added Lines]",
          "641:  PHP_VAR_UNSERIALIZE_DESTROY(unserialize_data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fff53fc5790918bea9a8c04a04a9d8c79ebdbf6",
      "candidate_info": {
        "commit_hash": "3fff53fc5790918bea9a8c04a04a9d8c79ebdbf6",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/3fff53fc5790918bea9a8c04a04a9d8c79ebdbf6",
        "files": [
          "ext/opcache/Optimizer/pass1_5.c",
          "ext/opcache/Optimizer/pass3.c",
          "ext/opcache/ZendAccelerator.h"
        ],
        "message": "Optimize ZEND_POW (Rouven We\u00dfling)",
        "before_after_code_files": [
          "ext/opcache/Optimizer/pass1_5.c||ext/opcache/Optimizer/pass1_5.c",
          "ext/opcache/Optimizer/pass3.c||ext/opcache/Optimizer/pass3.c",
          "ext/opcache/ZendAccelerator.h||ext/opcache/ZendAccelerator.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/opcache/Optimizer/pass1_5.c||ext/opcache/Optimizer/pass1_5.c": [
          "File: ext/opcache/Optimizer/pass1_5.c -> ext/opcache/Optimizer/pass1_5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   case ZEND_MUL:",
          "26:   case ZEND_DIV:",
          "27:   case ZEND_MOD:",
          "28:   case ZEND_SL:",
          "29:   case ZEND_SR:",
          "30:   case ZEND_CONCAT:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #if ZEND_EXTENSION_API_NO >= PHP_5_6_X_API_NO",
          "29:   case ZEND_POW:",
          "30: #endif",
          "",
          "---------------"
        ],
        "ext/opcache/Optimizer/pass3.c||ext/opcache/Optimizer/pass3.c": [
          "File: ext/opcache/Optimizer/pass3.c -> ext/opcache/Optimizer/pass3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:    case ZEND_MUL:",
          "46:    case ZEND_DIV:",
          "47:    case ZEND_MOD:",
          "48:    case ZEND_CONCAT:",
          "49:    case ZEND_SL:",
          "50:    case ZEND_SR:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #if ZEND_EXTENSION_API_NO >= PHP_5_6_X_API_NO",
          "49:    case ZEND_POW:",
          "50: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:        case ZEND_MOD:",
          "105:         opline->opcode = ZEND_ASSIGN_MOD;",
          "106:         break;",
          "107:        case ZEND_CONCAT:",
          "108:         opline->opcode = ZEND_ASSIGN_CONCAT;",
          "109:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: #if ZEND_EXTENSION_API_NO >= PHP_5_6_X_API_NO",
          "111:        case ZEND_POW:",
          "112:         opline->opcode = ZEND_ASSIGN_POW;",
          "113:         break;",
          "114: #endif",
          "",
          "---------------"
        ],
        "ext/opcache/ZendAccelerator.h||ext/opcache/ZendAccelerator.h": [
          "File: ext/opcache/ZendAccelerator.h -> ext/opcache/ZendAccelerator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: #define PHP_5_3_X_API_NO  220090626",
          "94: #define PHP_5_4_X_API_NO  220100525",
          "95: #define PHP_5_5_X_API_NO  220121212",
          "98: #ifndef ZEND_WIN32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: #define PHP_5_6_X_API_NO  220131226",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4350c894285449ff4b6ba9c26d60988b1a22cadf",
      "candidate_info": {
        "commit_hash": "4350c894285449ff4b6ba9c26d60988b1a22cadf",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/4350c894285449ff4b6ba9c26d60988b1a22cadf",
        "files": [
          "config.w32"
        ],
        "message": "fix CFLAGS_PHPDBGS and some formatting",
        "before_after_code_files": [
          "config.w32||config.w32"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "config.w32||config.w32": [
          "File: config.w32 -> config.w32",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: PHPDBG_EXE='phpdbg.exe';",
          "8: if (PHP_PHPDBG == \"yes\") {",
          "11:  DEFINE(\"CFLAGS\", configure_subst.item(\"CFLAGS\") + \" /EHa\");",
          "12:  ADD_FLAG(\"CFLAGS_PHPDBG\", \"/D YY_NO_UNISTD_H\");",
          "13: }",
          "",
          "[Removed Lines]",
          "9:     SAPI('phpdbg', PHPDBG_SOURCES, PHPDBG_EXE);",
          "10:     ADD_FLAG(\"LIBS_PHPDBG\", \"ws2_32.lib user32.lib\");",
          "",
          "[Added Lines]",
          "9:  SAPI('phpdbg', PHPDBG_SOURCES, PHPDBG_EXE);",
          "10:  ADD_FLAG(\"LIBS_PHPDBG\", \"ws2_32.lib user32.lib\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:  SAPI('phpdbgs', PHPDBG_SOURCES, PHPDBG_DLL, '/D PHP_PHPDBG_EXPORTS /I win32');",
          "17:  ADD_FLAG(\"LIBS_PHPDBGS\", \"ws2_32.lib user32.lib\");",
          "18:  DEFINE(\"CFLAGS\", configure_subst.item(\"CFLAGS\") + \" /EHa\");",
          "20: }",
          "",
          "[Removed Lines]",
          "19:  ADD_FLAG(\"CFLAGS_PHPDBG\", \"/D YY_NO_UNISTD_H\");",
          "",
          "[Added Lines]",
          "19:  ADD_FLAG(\"CFLAGS_PHPDBGS\", \"/D YY_NO_UNISTD_H\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5da403264f6210784206c42ce0727b1073b3706f",
      "candidate_info": {
        "commit_hash": "5da403264f6210784206c42ce0727b1073b3706f",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/5da403264f6210784206c42ce0727b1073b3706f",
        "files": [
          "config.w32"
        ],
        "message": "prepare config.w32",
        "before_after_code_files": [
          "config.w32||config.w32"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "config.w32||config.w32": [
          "File: config.w32 -> config.w32",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: ARG_ENABLE('phpdbg', 'Build phpdbg', 'no');",
          "2: ARG_ENABLE('phpdbgs', 'Build phpdbg shared', 'no');",
          "5: PHPDBG_DLL='php' + PHP_VERSION + 'phpdbg.dll';",
          "6: PHPDBG_EXE='phpdbg.exe';",
          "",
          "[Removed Lines]",
          "4: PHPDBG_SOURCES='phpdbg.c phpdbg_prompt.c phpdbg_cmd.c phpdbg_info.c phpdbg_help.c phpdbg_break.c phpdbg_print.c phpdbg_bp.c phpdbg_opcode.c phpdbg_list.c phpdbg_utils.c phpdbg_set.c phpdbg_frame.c phpdbg_watch.c phpdbg_win.c phpdbg_btree.c';",
          "",
          "[Added Lines]",
          "4: PHPDBG_SOURCES='phpdbg.c phpdbg_prompt.c phpdbg_cmd.c phpdbg_info.c phpdbg_help.c phpdbg_break.c phpdbg_print.c phpdbg_bp.c phpdbg_opcode.c phpdbg_list.c phpdbg_utils.c phpdbg_set.c phpdbg_frame.c phpdbg_watch.c phpdbg_win.c phpdbg_btree.c phpdbg_parser.c phpdbg_lexer.c';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9:     SAPI('phpdbg', PHPDBG_SOURCES, PHPDBG_EXE);",
          "10:     ADD_FLAG(\"LIBS_PHPDBG\", \"ws2_32.lib user32.lib\");",
          "11:  DEFINE(\"CFLAGS\", configure_subst.item(\"CFLAGS\") + \" /EHa\");",
          "12: }",
          "14: if (PHP_PHPDBGS == \"yes\") {",
          "15:  SAPI('phpdbgs', PHPDBG_SOURCES, PHPDBG_DLL, '/D PHP_PHPDBG_EXPORTS /I win32');",
          "16:  ADD_FLAG(\"LIBS_PHPDBGS\", \"ws2_32.lib user32.lib\");",
          "17:  DEFINE(\"CFLAGS\", configure_subst.item(\"CFLAGS\") + \" /EHa\");",
          "18: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  ADD_FLAG(\"CFLAGS_PHPDBG\", \"/D YY_NO_UNISTD_H\");",
          "19:  ADD_FLAG(\"CFLAGS_PHPDBG\", \"/D YY_NO_UNISTD_H\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}