{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c72f2fb7feff582444b8ffdc6c900c69847ce8a9",
      "candidate_info": {
        "commit_hash": "c72f2fb7feff582444b8ffdc6c900c69847ce8a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c72f2fb7feff582444b8ffdc6c900c69847ce8a9",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "More improvements to shadow table corruption detection in FTS3.\n\nFossilOrigin-Name: 51525f9c3235967bc00a090e84c70a6400698c897aa4742e817121c725b8c99d",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1486:   fts3DatabasePageSize(&rc, p);",
          "1487:   p->nNodeSize = p->nPgsz-35;",
          "1490:   fts3DeclareVtab(&rc, p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1489: #if defined(SQLITE_DEBUG)||defined(SQLITE_TEST)",
          "1490:   p->nMergeCount = FTS3_MERGE_COUNT;",
          "1491: #endif",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   int bNoIncrDoclist;",
          "304: #endif",
          "305: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:   int nMergeCount;",
          "311: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "312: # define MergeCount(P) ((P)->nMergeCount)",
          "313: #else",
          "314: # define MergeCount(P) FTS3_MERGE_COUNT",
          "315: #endif",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157:       fts3LogMerge(16, getAbsoluteLevel(p, iLangid, iIndex, iLevel));",
          "1158:       rc = fts3SegmentMerge(p, iLangid, iIndex, iLevel);",
          "",
          "[Removed Lines]",
          "1156:     if( iNext>=FTS3_MERGE_COUNT ){",
          "",
          "[Added Lines]",
          "1156:     if( iNext>=MergeCount(p) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4280:       int i;",
          "4281:       int nHeight = (int)aRoot[0];",
          "4282:       NodeWriter *pNode;",
          "4284:       pWriter->nLeafEst = (int)((iEnd - iStart) + 1)/FTS_MAX_APPENDABLE_HEIGHT;",
          "4285:       pWriter->iStart = iStart;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4283:       if( nHeight<1 || nHeight>FTS_MAX_APPENDABLE_HEIGHT ){",
          "4284:         sqlite3_reset(pSelect);",
          "4285:         return FTS_CORRUPT_VTAB;",
          "4286:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5049: ){",
          "5050:   int rc;",
          "5052:   int nMerge = 0;",
          "5053:   const char *z = zParam;",
          "",
          "[Removed Lines]",
          "5051:   int nMin = (FTS3_MERGE_COUNT / 2);",
          "",
          "[Added Lines]",
          "5055:   int nMin = (MergeCount(p) / 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5093:   int rc = SQLITE_OK;",
          "5094:   sqlite3_stmt *pStmt = 0;",
          "5095:   p->nAutoincrmerge = fts3Getint(&zParam);",
          "5097:     p->nAutoincrmerge = 8;",
          "5098:   }",
          "5099:   if( !p->bHasStat ){",
          "",
          "[Removed Lines]",
          "5096:   if( p->nAutoincrmerge==1 || p->nAutoincrmerge>FTS3_MERGE_COUNT ){",
          "",
          "[Added Lines]",
          "5100:   if( p->nAutoincrmerge==1 || p->nAutoincrmerge>MergeCount(p) ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5384:     }else if( nVal>21 && 0==sqlite3_strnicmp(zVal,\"test-no-incr-doclist=\",21) ){",
          "5385:       p->bNoIncrDoclist = atoi(&zVal[21]);",
          "5386:       rc = SQLITE_OK;",
          "5387:     }",
          "5388: #endif",
          "5389:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5391:     }else if( nVal>11 && 0==sqlite3_strnicmp(zVal,\"mergecount=\",11) ){",
          "5392:       v = atoi(&zVal[11]);",
          "5393:       if( v>=4 && v<=FTS3_MERGE_COUNT && (v&1)==0 ) p->nMergeCount = v;",
          "5394:       rc = SQLITE_OK;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 04b2873be5aedeb1c4325cf36c4b5d180f929a641caf1e3829c03778adb29c8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b70b0df8eb8cea79074289826079699a00a0aef4",
      "candidate_info": {
        "commit_hash": "b70b0df8eb8cea79074289826079699a00a0aef4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b70b0df8eb8cea79074289826079699a00a0aef4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Slightly smaller and faster implementation of the OP_MakeRecord opcode.\n\nFossilOrigin-Name: 3bdce7ef1a6bb03affe978243fec603d5a55c071aa6d87c469a3c199d23f3b5e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a27b0b880d76c6838c0365f66bcd69b1b49b7594470993b608f4e490cbdc4882",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2933:       goto no_mem;",
          "2934:     }",
          "2935:   }",
          "2941:   assert( pData0<=pLast );",
          "2942:   pRec = pData0;",
          "2943:   do{",
          "2944:     serial_type = pRec->uTemp;",
          "2951:   }while( (++pRec)<=pLast );",
          "2955:   assert( pOp->p3>0 && pOp->p3<=(p->nMem+1 - p->nCursor) );",
          "2962:   REGISTER_TRACE(pOp->p3, pOut);",
          "2964:   break;",
          "2965: }",
          "",
          "[Removed Lines]",
          "2936:   zNewRecord = (u8 *)pOut->z;",
          "2939:   i = putVarint32(zNewRecord, nHdr);",
          "2940:   j = nHdr;",
          "2952:   assert( i==nHdr );",
          "2953:   assert( j==nByte );",
          "2956:   pOut->n = (int)nByte;",
          "2957:   pOut->flags = MEM_Blob;",
          "2958:   if( nZero ){",
          "2959:     pOut->u.nZero = nZero;",
          "2960:     pOut->flags |= MEM_Zero;",
          "2961:   }",
          "2963:   UPDATE_MAX_BLOBSIZE(pOut);",
          "",
          "[Added Lines]",
          "2935:   pOut->n = (int)nByte;",
          "2936:   pOut->flags = MEM_Blob;",
          "2937:   if( nZero ){",
          "2938:     pOut->u.nZero = nZero;",
          "2939:     pOut->flags |= MEM_Zero;",
          "2940:   }",
          "2941:   UPDATE_MAX_BLOBSIZE(pOut);",
          "2942:   zHdr = (u8 *)pOut->z;",
          "2943:   zPayload = zHdr + nHdr;",
          "2946:   zHdr += putVarint32(zHdr, nHdr);",
          "2958:   assert( nHdr==(int)(zHdr - (u8*)pOut->z) );",
          "2959:   assert( nByte==(int)(zPayload - (u8*)pOut->z) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f6a4ea2e2b5a12bc425615a8a01af920c1bc65d",
      "candidate_info": {
        "commit_hash": "5f6a4ea2e2b5a12bc425615a8a01af920c1bc65d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f6a4ea2e2b5a12bc425615a8a01af920c1bc65d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Additional simplifications of the WHERE loop code generator logic for NULLS LAST.\n\nFossilOrigin-Name: 1383680d927d7d703933be7653c0019199845e7f7e82bcc76d9ca3808093e9d8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e3ed2f496f51234a8f81d90d47ba603b06dbed38b8bd8f1934294379cde74d3a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1708:       assert( bSeekPastNull==0 || bStopAtNull==0 );",
          "1709:       if( regBignull ){",
          "1710:         assert( bSeekPastNull==1 || bStopAtNull==1 );",
          "1711:         assert( bStopAtNull==startEq );",
          "1712:         sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1713:         op = aStartOp[(nConstraint>1)*4 + 2 + bRev];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1711:         assert( bSeekPastNull==!bStopAtNull );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1778:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1779:     }",
          "1780:     if( regBignull ){",
          "1781:       sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1782:       VdbeComment((v, \"If NULL-scan pending\"));",
          "1783:       VdbeCoverage(v);",
          "1798:     }",
          "1800:     if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "",
          "[Removed Lines]",
          "1784:       if( bStopAtNull ){",
          "1785:         op = aEndOp[bRev*2 + 0];",
          "1786:         assert( op==OP_IdxGE || op==OP_IdxLE );",
          "1787:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1788:         testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1789:         testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1790:       }else{",
          "1791:         op = aEndOp[bRev*2 + endEq];",
          "1792:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint+1);",
          "1793:         testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "1794:         testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1795:         testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1796:         testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1797:       }",
          "",
          "[Added Lines]",
          "1785:       assert( bSeekPastNull==!bStopAtNull );",
          "1786:       assert( bSeekPastNull+bStopAtNull==1 );",
          "1787:       assert( nConstraint+bSeekPastNull>0 );",
          "1791:       op = aEndOp[bRev*2 + bSeekPastNull];",
          "1792:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase,",
          "1793:                            nConstraint+bSeekPastNull);",
          "1794:       testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "1795:       testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1796:       testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1797:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ed6c068f556dd45f705355c3454c1f8af1047d4",
      "candidate_info": {
        "commit_hash": "7ed6c068f556dd45f705355c3454c1f8af1047d4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ed6c068f556dd45f705355c3454c1f8af1047d4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/vdbeaux.c",
          "test/indexexpr2.test"
        ],
        "message": "Fix a problem in [b5ca442a] causing an assert() to fail in REINDEX commands.\n\nFossilOrigin-Name: a3e77c7776ab01dadb9d30d6067ac97e9d4b09ec54834558a5fa1ffed7b52c72",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b8071d10cba8f6c19fb8d5df3877f72567dc6d6a94744a39cbc1f58b2e2f343b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "648:       break;",
          "649:     }",
          "650:     if( opcode==OP_CreateBtree && pOp->p3==BTREE_INTKEY ) hasCreateTable = 1;",
          "652:     if( opcode==OP_InitCoroutine ) hasInitCoroutine = 1;",
          "653: #ifndef SQLITE_OMIT_FOREIGN_KEY",
          "654:     if( opcode==OP_FkCounter && pOp->p1==0 && pOp->p2==1 ){",
          "",
          "[Removed Lines]",
          "651:     if( opcode==OP_CreateBtree && pOp->p3==BTREE_BLOBKEY ) hasCreateIndex = 1;",
          "",
          "[Added Lines]",
          "651:     if( mayAbort ){",
          "656:       if( opcode==OP_CreateBtree && pOp->p3==BTREE_BLOBKEY ) hasCreateIndex = 1;",
          "657:       if( opcode==OP_Clear ) hasCreateIndex = 1;",
          "658:     }",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:   SELECT sql FROM sqlite_master WHERE tbl_name = 't0';",
          "292:   CREATE INDEX i0 ON t0(c0);",
          "293: } {{CREATE TABLE t0(c0)}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294: do_execsql_test 7.3 {",
          "295:   REINDEX;",
          "296: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a2782293c37d360382296558c358d60929d0744",
      "candidate_info": {
        "commit_hash": "9a2782293c37d360382296558c358d60929d0744",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a2782293c37d360382296558c358d60929d0744",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/date.c",
          "src/func.c",
          "src/util.c",
          "src/vdbe.c",
          "src/vdbemem.c",
          "test/cast.test",
          "test/e_expr.test",
          "test/tkt-a8a0d2996a.test"
        ],
        "message": "When casting string values into numeric and the string has a prefix that looks like a number but total string is not a well-formed number, then take extra care that the result is either integer or real depending on what the prefix looks like.  Fix for tickets [e8bedb2a184001] and [4c2d7639f076aa].\n\nFossilOrigin-Name: 67a68af5578f08d2be2e48cf4fd12a6cf35a09c47d259deda81950f7ee1f02f7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/date.c||src/date.c",
          "src/func.c||src/func.c",
          "src/util.c||src/util.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test",
          "test/e_expr.test||test/e_expr.test",
          "test/tkt-a8a0d2996a.test||test/tkt-a8a0d2996a.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: efbf31b82e6e16fda88d8cea54202a8593ff52f2267a44dba828704818162e66",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/date.c||src/date.c": [
          "File: src/date.c -> src/date.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:     return 0;",
          "389:   }else if( sqlite3StrICmp(zDate,\"now\")==0 && sqlite3NotPureFunc(context) ){",
          "390:     return setDateTimeToCurrent(context, p);",
          "392:     setRawDateNumber(p, r);",
          "393:     return 0;",
          "394:   }",
          "",
          "[Removed Lines]",
          "391:   }else if( sqlite3AtoF(zDate, &r, sqlite3Strlen30(zDate), SQLITE_UTF8) ){",
          "",
          "[Added Lines]",
          "391:   }else if( sqlite3AtoF(zDate, &r, sqlite3Strlen30(zDate), SQLITE_UTF8)>0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "724:       if( sqlite3_strnicmp(z, \"weekday \", 8)==0",
          "726:                && (n=(int)r)==r && n>=0 && r<7 ){",
          "727:         sqlite3_int64 Z;",
          "728:         computeYMD_HMS(p);",
          "",
          "[Removed Lines]",
          "725:                && sqlite3AtoF(&z[8], &r, sqlite3Strlen30(&z[8]), SQLITE_UTF8)",
          "",
          "[Added Lines]",
          "725:                && sqlite3AtoF(&z[8], &r, sqlite3Strlen30(&z[8]), SQLITE_UTF8)>0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "781:       double rRounder;",
          "782:       int i;",
          "783:       for(n=1; z[n] && z[n]!=':' && !sqlite3Isspace(z[n]); n++){}",
          "785:         rc = 1;",
          "786:         break;",
          "787:       }",
          "",
          "[Removed Lines]",
          "784:       if( !sqlite3AtoF(z, &r, n, SQLITE_UTF8) ){",
          "",
          "[Added Lines]",
          "784:       if( sqlite3AtoF(z, &r, n, SQLITE_UTF8)<=0 ){",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:       sqlite3_result_error_nomem(context);",
          "398:       return;",
          "399:     }",
          "401:       assert( sqlite3_strglob(\"*Inf\", zBuf)==0 );",
          "402:       r = zBuf[0]=='-' ? -HUGE_VAL : +HUGE_VAL;",
          "403:     }",
          "",
          "[Removed Lines]",
          "400:     if( !sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8) ){",
          "",
          "[Added Lines]",
          "400:     if( sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8)<=0 ){",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "560: #else",
          "561:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "",
          "[Removed Lines]",
          "559:   return z==zEnd && nDigit>0 && eValid && eType>0 ? eType : 0;",
          "",
          "[Added Lines]",
          "561:   if( z==zEnd && nDigit>0 && eValid && eType>0 ){",
          "562:     return eType;",
          "563:   }else if( eType>=2 && (eType==3 || eValid) ){",
          "564:     return -1;",
          "565:   }else{",
          "566:     return 0;",
          "567:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "659:   }",
          "660:   rc = 0;",
          "664:     rc = 1;",
          "666:     int jj = i;",
          "",
          "[Removed Lines]",
          "663:   ){",
          "",
          "[Added Lines]",
          "671:     rc = -1;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:   int rc;",
          "322:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real|MEM_IntReal))==MEM_Str );",
          "323:   rc = sqlite3AtoF(pRec->z, &rValue, pRec->n, enc);",
          "325:   if( rc==1 && alsoAnInt(pRec, rValue, &pRec->u.i) ){",
          "326:     pRec->flags |= MEM_Int;",
          "327:   }else{",
          "",
          "[Removed Lines]",
          "324:   if( rc==0 ) return;",
          "",
          "[Added Lines]",
          "324:   if( rc<=0 ) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424: static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){",
          "425:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal))==0 );",
          "426:   assert( (pMem->flags & (MEM_Str|MEM_Blob))!=0 );",
          "427:   ExpandBlob(pMem);",
          "432:     return MEM_Int;",
          "433:   }",
          "434:   return MEM_Real;",
          "",
          "[Removed Lines]",
          "428:   if( sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc)==0 ){",
          "429:     return 0;",
          "430:   }",
          "431:   if( sqlite3Atoi64(pMem->z, &pMem->u.i, pMem->n, pMem->enc)==0 ){",
          "",
          "[Added Lines]",
          "425:   int rc;",
          "426:   sqlite3_int64 ix;",
          "430:   rc = sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "431:   if( rc<=0 ){",
          "432:     if( rc==0 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1 ){",
          "433:       pMem->u.i = ix;",
          "434:       return MEM_Int;",
          "435:     }else{",
          "436:       return MEM_Real;",
          "437:     }",
          "438:   }else if( rc==1 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)==0 ){",
          "439:     pMem->u.i = ix;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1608:   if( (type1 & type2 & MEM_Int)!=0 ){",
          "1609:     iA = pIn1->u.i;",
          "1610:     iB = pIn2->u.i;",
          "1612:     switch( pOp->opcode ){",
          "1613:       case OP_Add:       if( sqlite3AddInt64(&iB,iA) ) goto fp_math;  break;",
          "1614:       case OP_Subtract:  if( sqlite3SubInt64(&iB,iA) ) goto fp_math;  break;",
          "",
          "[Removed Lines]",
          "1611:     bIntint = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1631:   }else if( (flags & MEM_Null)!=0 ){",
          "1632:     goto arithmetic_result_is_null;",
          "1633:   }else{",
          "1635: fp_math:",
          "1636:     rA = sqlite3VdbeRealValue(pIn1);",
          "1637:     rB = sqlite3VdbeRealValue(pIn2);",
          "",
          "[Removed Lines]",
          "1634:     bIntint = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1663:     }",
          "1664:     pOut->u.r = rB;",
          "1665:     MemSetTypeFlag(pOut, MEM_Real);",
          "1669: #endif",
          "1670:   }",
          "1671:   break;",
          "",
          "[Removed Lines]",
          "1666:     if( ((type1|type2)&(MEM_Real|MEM_IntReal))==0 && !bIntint ){",
          "1667:       sqlite3VdbeIntegerAffinity(pOut);",
          "1668:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:   testcase( pMem->flags & MEM_Null );",
          "718:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))==0 ){",
          "719:     int rc;",
          "720:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "721:     assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "730:         MemSetTypeFlag(pMem, MEM_Int);",
          "731:       }else{",
          "732:         MemSetTypeFlag(pMem, MEM_Real);",
          "733:       }",
          "734:     }",
          "735:   }",
          "736:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))!=0 );",
          "",
          "[Removed Lines]",
          "722:     rc = sqlite3Atoi64(pMem->z, &pMem->u.i, pMem->n, pMem->enc);",
          "723:     if( rc==0 ){",
          "724:       MemSetTypeFlag(pMem, MEM_Int);",
          "725:     }else{",
          "726:       i64 i = pMem->u.i;",
          "727:       sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "728:       if( rc==1 && sqlite3RealSameAsInt(pMem->u.r, i) ){",
          "729:         pMem->u.i = i;",
          "",
          "[Added Lines]",
          "720:     sqlite3_int64 ix;",
          "723:     rc = sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "724:     if( rc<=0 ){",
          "725:       if( rc==0 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1 ){",
          "726:         pMem->u.i = ix;",
          "731:     }else if( rc==1 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)==0 ){",
          "732:       pMem->u.i = ix;",
          "733:       MemSetTypeFlag(pMem, MEM_Int);",
          "734:     }else{",
          "735:       MemSetTypeFlag(pMem, MEM_Real);",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:   SELECT * FROM t1;",
          "389: } {9000000000000000001 9000000000000000001 9000000000000000001 9000000000000000001}",
          "391: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391: # 2019-06-07",
          "392: # https://www.sqlite.org/src/info/4c2d7639f076aa7c",
          "393: do_execsql_test case-7.1 {",
          "394:   SELECT CAST('-' AS NUMERIC);",
          "395: } {0}",
          "396: do_execsql_test case-7.2 {",
          "397:   SELECT CAST('-0' AS NUMERIC);",
          "398: } {0}",
          "399: do_execsql_test case-7.3 {",
          "400:   SELECT CAST('+' AS NUMERIC);",
          "401: } {0}",
          "402: do_execsql_test case-7.4 {",
          "403:   SELECT CAST('/' AS NUMERIC);",
          "404: } {0}",
          "406: # 2019-06-07",
          "407: # https://www.sqlite.org/src/info/e8bedb2a184001bb",
          "408: do_execsql_test case-7.10 {",
          "409:   SELECT '' - 2851427734582196970;",
          "410: } {-2851427734582196970}",
          "411: do_execsql_test case-7.11 {",
          "412:   SELECT 0 - 2851427734582196970;",
          "413: } {-2851427734582196970}",
          "414: do_execsql_test case-7.12 {",
          "415:   SELECT '' - 1;",
          "416: } {-1}",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1650: # is lossless and reversible.",
          "1651: #",
          "1652: do_expr_test e_expr-32.1.1 { CAST('45'   AS NUMERIC)  } integer 45",
          "1654: do_expr_test e_expr-32.1.3 { CAST('45.2' AS NUMERIC)  } real 45.2",
          "1655: do_expr_test e_expr-32.1.4 { CAST('11abc' AS NUMERIC) } integer 11",
          "1656: do_expr_test e_expr-32.1.5 { CAST('11.1abc' AS NUMERIC) } real 11.1",
          "",
          "[Removed Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } integer 45",
          "",
          "[Added Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } real 45.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1701:  integer 9000000000000000001 \\",
          "1702:  integer 9000000000000000001 \\",
          "1703:  integer 9000000000000000001 \\",
          "1705:  integer 9223372036854775807 \\",
          "1706:  integer 9223372036854775807 \\",
          "1707:  integer 9223372036854775807 \\",
          "1708:  real 9.22337203685478e+18 \\",
          "1709:  real 9.22337203685478e+18 \\",
          "1714: ]",
          "1716: # EVIDENCE-OF: R-64550-29191 Note that the result from casting any",
          "",
          "[Removed Lines]",
          "1704:  integer 9000000000000000001 \\",
          "1710:  integer 9223372036854775807 \\",
          "1711:  integer 9223372036854775807 \\",
          "1712:  integer -5 \\",
          "1713:  integer -5 \\",
          "",
          "[Added Lines]",
          "1704:  real 9.0e+18 \\",
          "1710:  real 9.22337203685478e+18 \\",
          "1711:  real 9.22337203685478e+18 \\",
          "1712:  real -5.0 \\",
          "1713:  real -5.0 \\",
          "",
          "---------------"
        ],
        "test/tkt-a8a0d2996a.test||test/tkt-a8a0d2996a.test": [
          "File: test/tkt-a8a0d2996a.test -> test/tkt-a8a0d2996a.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: } {104.5}",
          "85: do_execsql_test 4.4 {",
          "86:   SELECT '-9223372036854775807x'-'1x';",
          "88: do_execsql_test 4.5 {",
          "89:   SELECT '9223372036854775806x'+'1x';",
          "91: do_execsql_test 4.6 {",
          "95: finish_test",
          "",
          "[Removed Lines]",
          "87: } {-9.22337203685478e+18}",
          "90: } {9.22337203685478e+18}",
          "92:   SELECT '1234x'/'10y';",
          "93: } {123.4}",
          "",
          "[Added Lines]",
          "87: } {-9223372036854775808}",
          "90: } {9223372036854775807}",
          "92:   SELECT '1234x'/'10y', '1234x'/'10.y', '1234x'/'1e1y';",
          "93: } {123 123.4 123.4}",
          "",
          "---------------"
        ]
      }
    }
  ]
}