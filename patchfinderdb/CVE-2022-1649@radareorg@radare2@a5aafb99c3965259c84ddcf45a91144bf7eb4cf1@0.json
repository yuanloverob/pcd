{
  "cve_id": "CVE-2022-1649",
  "cve_desc": "Null pointer dereference in libr/bin/format/mach0/mach0.c in radareorg/radare2 in GitHub repository radareorg/radare2 prior to 5.7.0. It is likely to be exploitable. For more general description of heap buffer overflow, see [CWE](https://cwe.mitre.org/data/definitions/476.html).",
  "repo": "radareorg/radare2",
  "patch_hash": "a5aafb99c3965259c84ddcf45a91144bf7eb4cf1",
  "patch_info": {
    "commit_hash": "a5aafb99c3965259c84ddcf45a91144bf7eb4cf1",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/a5aafb99c3965259c84ddcf45a91144bf7eb4cf1",
    "files": [
      "libr/bin/format/mach0/mach0.c"
    ],
    "message": "Fix null deref in macho parser ##crash\n\n* Reported by Han0nly via huntrdev\n* BountyID: c07e4918-cf86-4d2e-8969-5fb63575b449\n* Reproducer: machonull",
    "before_after_code_files": [
      "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c"
    ]
  },
  "patch_diff": {
    "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c": [
      "File: libr/bin/format/mach0/mach0.c -> libr/bin/format/mach0/mach0.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4580:     if (page_idx >= bin->chained_starts[i]->page_count) {",
      "4581:      break;",
      "4582:     }",
      "4583:     ut16 page_start = bin->chained_starts[i]->page_start[page_idx];",
      "4584:     if (page_start == DYLD_CHAINED_PTR_START_NONE) {",
      "4585:      continue;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4583:     if (!bin->chained_starts[i]->page_start) {",
      "4584:      break;",
      "4585:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0960ef4586b5c1f97e8aba3c6e236202a8032936",
      "candidate_info": {
        "commit_hash": "0960ef4586b5c1f97e8aba3c6e236202a8032936",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/0960ef4586b5c1f97e8aba3c6e236202a8032936",
        "files": [
          "libr/bin/format/mach0/mach0.c",
          "libr/bin/format/mach0/mach0.h",
          "libr/bin/p/bin_mach0.c",
          "test/db/anal/classes"
        ],
        "message": "Expose the macho reloc fixups and use internal buffer for parsing ##bin\n\n* 7x faster, remove 4 globals, fix uaf, stack exhaustion and race condition bugs",
        "before_after_code_files": [
          "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c",
          "libr/bin/format/mach0/mach0.h||libr/bin/format/mach0/mach0.h",
          "libr/bin/p/bin_mach0.c||libr/bin/p/bin_mach0.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c"
          ],
          "candidate": [
            "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c": [
          "File: libr/bin/format/mach0/mach0.c -> libr/bin/format/mach0/mach0.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4622:  return macho_hdr;",
          "4623: }",
          "4626:  int i = 0;",
          "4629:    continue;",
          "4630:   }",
          "4632:   if (page_size < 1) {",
          "4633:    page_size = 4096;",
          "4634:   }",
          "4637:   if (end >= limit_start && start <= limit_end) {",
          "4638:    ut64 page_idx = (R_MAX (start, limit_start) - start) / page_size;",
          "4639:    ut64 page_end_idx = (R_MIN (limit_end, end) - start) / page_size;",
          "4640:    for (; page_idx <= page_end_idx; page_idx++) {",
          "4642:      break;",
          "4643:     }",
          "4645:      break;",
          "4646:     }",
          "4648:     if (page_start == DYLD_CHAINED_PTR_START_NONE) {",
          "4649:      continue;",
          "4650:     }",
          "4651:     ut64 cursor = start + page_idx * page_size + page_start;",
          "4652:     while (cursor < limit_end && cursor < end) {",
          "4653:      ut8 tmp[8];",
          "4658:       break;",
          "4659:      }",
          "4661:      ut64 raw_ptr = r_read_le64 (tmp);",
          "4662:      ut64 ptr_value = raw_ptr;",
          "4663:      ut64 delta, stride, addend;",
          "4665:      RFixupEvent event = R_FIXUP_EVENT_NONE;",
          "4666:      ut8 key = 0, addr_div = 0;",
          "4667:      ut16 diversity = 0;",
          "",
          "[Removed Lines]",
          "4625: void MACH0_(iterate_chained_fixups)(struct MACH0_(obj_t) *bin, ut64 limit_start, ut64 limit_end, ut32 event_mask, RFixupCallback callback, void * context) {",
          "4627:  for (; i < bin->nsegs && i < bin->segs_count; i++) {",
          "4628:   if (!bin->chained_starts[i]) {",
          "4631:   int page_size = bin->chained_starts[i]->page_size;",
          "4635:   ut64 start = bin->segs[i].fileoff;",
          "4636:   ut64 end = start + bin->segs[i].filesize;",
          "4641:     if (page_idx >= bin->chained_starts[i]->page_count) {",
          "4644:     if (!bin->chained_starts[i]->page_start) {",
          "4647:     ut16 page_start = bin->chained_starts[i]->page_start[page_idx];",
          "4654:      bool previous_rebasing = bin->rebasing_buffer;",
          "4655:      bin->rebasing_buffer = true;",
          "4656:      if (r_buf_read_at (bin->b, cursor, tmp, 8) != 8) {",
          "4657:       bin->rebasing_buffer = previous_rebasing;",
          "4660:      bin->rebasing_buffer = previous_rebasing;",
          "4664:      ut16 pointer_format = bin->chained_starts[i]->pointer_format;",
          "",
          "[Added Lines]",
          "4625: void MACH0_(iterate_chained_fixups)(struct MACH0_(obj_t) *mo, ut64 limit_start, ut64 limit_end, ut32 event_mask, RFixupCallback callback, void * context) {",
          "4627:  for (; i < mo->nsegs && i < mo->segs_count; i++) {",
          "4628:   if (!mo->chained_starts[i]) {",
          "4631:   int page_size = mo->chained_starts[i]->page_size;",
          "4635:   ut64 start = mo->segs[i].fileoff;",
          "4636:   ut64 end = start + mo->segs[i].filesize;",
          "4641:     if (page_idx >= mo->chained_starts[i]->page_count) {",
          "4644:     if (!mo->chained_starts[i]->page_start) {",
          "4647:     ut16 page_start = mo->chained_starts[i]->page_start[page_idx];",
          "4654:      bool previous_rebasing = mo->rebasing_buffer;",
          "4655:      mo->rebasing_buffer = true;",
          "4656:      if (r_buf_read_at (mo->b, cursor, tmp, 8) != 8) {",
          "4657:       mo->rebasing_buffer = previous_rebasing;",
          "4660:      mo->rebasing_buffer = previous_rebasing;",
          "4664:      ut16 pointer_format = mo->chained_starts[i]->pointer_format;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4693:          (struct dyld_chained_ptr_arm64e_auth_rebase *) &raw_ptr;",
          "4694:        event = R_FIXUP_EVENT_REBASE_AUTH;",
          "4695:        delta = p->next;",
          "4697:        key = p->key;",
          "4698:        addr_div = p->addrDiv;",
          "4699:        diversity = p->diversity;",
          "",
          "[Removed Lines]",
          "4696:        ptr_value = p->target + bin->baddr;",
          "",
          "[Added Lines]",
          "4696:        ptr_value = p->target + mo->baddr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4732:           (struct dyld_chained_ptr_arm64e_auth_rebase *) &raw_ptr;",
          "4733:         event = R_FIXUP_EVENT_REBASE_AUTH;",
          "4734:         delta = p->next;",
          "4736:         key = p->key;",
          "4737:         addr_div = p->addrDiv;",
          "4738:         diversity = p->diversity;",
          "",
          "[Removed Lines]",
          "4735:         ptr_value = p->target + bin->baddr;",
          "",
          "[Added Lines]",
          "4735:         ptr_value = p->target + mo->baddr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4741:          (struct dyld_chained_ptr_arm64e_rebase *) &raw_ptr;",
          "4742:         event = R_FIXUP_EVENT_REBASE;",
          "4743:         delta = p->next;",
          "4745:        }",
          "4746:       }",
          "4747:       }",
          "",
          "[Removed Lines]",
          "4744:         ptr_value = bin->baddr + (((ut64)p->high8 << 56) | p->target);",
          "",
          "[Added Lines]",
          "4744:         ptr_value = mo->baddr + (((ut64)p->high8 << 56) | p->target);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4764:        delta = p->next;",
          "4765:        ptr_value = ((ut64)p->high8 << 56) | p->target;",
          "4766:        if (pointer_format == DYLD_CHAINED_PTR_64_OFFSET) {",
          "4768:        }",
          "4769:       }",
          "4770:       }",
          "",
          "[Removed Lines]",
          "4767:         ptr_value += bin->baddr;",
          "",
          "[Added Lines]",
          "4767:         ptr_value += mo->baddr;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4780:        RFixupBindEventDetails event_details;",
          "4782:        event_details.type = event;",
          "4784:        event_details.offset = cursor;",
          "4785:        event_details.raw_ptr = raw_ptr;",
          "4786:        event_details.ordinal = ordinal;",
          "",
          "[Removed Lines]",
          "4783:        event_details.bin = bin;",
          "",
          "[Added Lines]",
          "4783:        event_details.bin = mo;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4793:        RFixupBindAuthEventDetails event_details;",
          "4795:        event_details.type = event;",
          "4797:        event_details.offset = cursor;",
          "4798:        event_details.raw_ptr = raw_ptr;",
          "4799:        event_details.ordinal = ordinal;",
          "",
          "[Removed Lines]",
          "4796:        event_details.bin = bin;",
          "",
          "[Added Lines]",
          "4796:        event_details.bin = mo;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4808:        RFixupRebaseEventDetails event_details;",
          "4810:        event_details.type = event;",
          "4812:        event_details.offset = cursor;",
          "4813:        event_details.raw_ptr = raw_ptr;",
          "4814:        event_details.ptr_value = ptr_value;",
          "",
          "[Removed Lines]",
          "4811:        event_details.bin = bin;",
          "",
          "[Added Lines]",
          "4811:        event_details.bin = mo;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4820:        RFixupRebaseAuthEventDetails event_details;",
          "4822:        event_details.type = event;",
          "4824:        event_details.offset = cursor;",
          "4825:        event_details.raw_ptr = raw_ptr;",
          "4826:        event_details.ptr_value = ptr_value;",
          "",
          "[Removed Lines]",
          "4823:        event_details.bin = bin;",
          "",
          "[Added Lines]",
          "4823:        event_details.bin = mo;",
          "",
          "---------------"
        ],
        "libr/bin/format/mach0/mach0.h||libr/bin/format/mach0/mach0.h": [
          "File: libr/bin/format/mach0/mach0.h -> libr/bin/format/mach0/mach0.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:  bool rebasing_buffer;",
          "200:  RList *symbols_cache;",
          "201:  RList *sections_cache;",
          "202:  ut8 *internal_buffer;",
          "203:  int internal_buffer_size;",
          "204: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:  RList *reloc_fixups;",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_mach0.c||libr/bin/p/bin_mach0.c": [
          "File: libr/bin/p/bin_mach0.c -> libr/bin/p/bin_mach0.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  ut8 *buf;",
          "12:  int count;",
          "13:  ut64 off;",
          "14: } RFixupRebaseContext;",
          "18: extern RBinWrite r_bin_write_mach0;",
          "20: static RBinInfo *info(RBinFile *bf);",
          "30: #define IS_PTR_AUTH(x) ((x & (1ULL << 63)) != 0)",
          "31: #define IS_PTR_BIND(x) ((x & (1ULL << 62)) != 0)",
          "",
          "[Removed Lines]",
          "21: static void swizzle_io_read(struct MACH0_(obj_t) *obj, RIO *io);",
          "22: static int rebasing_and_stripping_io_read(RIO *io, RIODesc *fd, ut8 *buf, int count);",
          "23: static void rebase_buffer(struct MACH0_(obj_t) *obj, ut64 off, RIODesc *fd, ut8 *buf, int count);",
          "26: static R_TH_LOCAL void *Gorigread = NULL;",
          "27: static R_TH_LOCAL int Gorigdesc = 0;",
          "28: static R_TH_LOCAL RIOPlugin *Gorigplugin = NULL;",
          "29: static R_TH_LOCAL RIOPlugin *Gheapplugin = NULL;",
          "",
          "[Added Lines]",
          "14:  RIO *io;",
          "15:  struct MACH0_(obj_t) *obj;",
          "20: static bool rebase_buffer_callback2(void * context, RFixupEventDetails * event_details);",
          "22: static RBuffer *swizzle_io_read(struct MACH0_(obj_t) *obj, RIO *io);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:  if (res) {",
          "60:   if (res->chained_starts) {",
          "61:    RIO *io = bf->rbin->iob.io;",
          "63:   }",
          "64:   sdb_ns_set (sdb, \"info\", res->kv);",
          "",
          "[Removed Lines]",
          "62:    swizzle_io_read (res, io);",
          "",
          "[Added Lines]",
          "56:    bf->buf = swizzle_io_read (res, io);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69: }",
          "71: static void destroy(RBinFile *bf) {",
          "82:  MACH0_(mach0_free) (bf->o->bin_obj);",
          "83: }",
          "",
          "[Removed Lines]",
          "72:  if (Gorigplugin) {",
          "73:   RIOBind *iob = &bf->rbin->iob;",
          "74:   RIO *io = iob->io;",
          "75:   RIODesc *desc = iob->desc_get (io, Gorigdesc);",
          "76:   if (desc) {",
          "77:    desc->plugin = Gorigplugin;",
          "78:   }",
          "79:   Gorigplugin = NULL;",
          "80:   R_FREE (Gheapplugin);",
          "81:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "623:  RList *ret = NULL;",
          "624:  RIO *io = NULL;",
          "625:  RBinObject *obj = NULL;",
          "627:  RIOMap *g = NULL;",
          "628:  HtUU *relocs_by_sym = NULL;",
          "629:  RIODesc *gotr2desc = NULL;",
          "",
          "[Removed Lines]",
          "626:  struct MACH0_(obj_t) *bin = NULL;",
          "",
          "[Added Lines]",
          "610:  struct MACH0_(obj_t) *mo = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "638:  if (!obj) {",
          "639:   return NULL;",
          "640:  }",
          "644:  if (!all_relocs) {",
          "645:   return NULL;",
          "646:  }",
          "",
          "[Removed Lines]",
          "641:  bin = obj->bin_obj;",
          "643:  RSkipList * all_relocs = MACH0_(get_relocs)(bin);",
          "",
          "[Added Lines]",
          "625:  mo = obj->bin_obj;",
          "627:  RSkipList * all_relocs = MACH0_(get_relocs)(mo);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "649:   goto beach;",
          "650:  }",
          "651:  RSkipListNode *it;",
          "653:  r_skiplist_foreach (all_relocs, it, reloc) {",
          "654:   if (!reloc->external) {",
          "655:    continue;",
          "656:   }",
          "657:   r_list_append (ext_relocs, reloc);",
          "658:  }",
          "659:  ut64 num_ext_relocs = r_list_length (ext_relocs);",
          "660:  if (!num_ext_relocs) {",
          "661:   goto beach;",
          "662:  }",
          "664:  if (!io->cached) {",
          "666:   goto beach;",
          "667:  }",
          "",
          "[Removed Lines]",
          "652:  struct reloc_t * reloc;",
          "665:   eprintf (\"Warning: run r2 with -e bin.cache=true to fix relocations in disassembly\\n\");",
          "",
          "[Added Lines]",
          "636:  struct reloc_t *reloc;",
          "643:  RBinReloc *r;",
          "644:  RListIter *iter2;",
          "646:  r_list_foreach (mo->reloc_fixups, iter2, r) {",
          "647:   ut64 paddr = r->paddr + mo->baddr;",
          "648:   ut8 buf[8], obuf[8];",
          "649:   r_write_ble64 (buf, r->vaddr, false);",
          "650:   r_io_read_at (io, paddr, obuf, 8);",
          "651:   if (memcmp (buf, obuf, 8)) {",
          "652:    r_io_write_at (io, paddr, buf, 8);",
          "653:   }",
          "654:  }",
          "661:   R_LOG_WARN (\"run r2 with -e bin.cache=true to fix relocations in disassembly\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "713:    ht_uu_insert (relocs_by_sym, reloc->ord, vaddr);",
          "714:    vaddr += cdsz;",
          "715:   }",
          "717:    continue;",
          "718:   }",
          "719:   RBinReloc *ptr = NULL;",
          "",
          "[Removed Lines]",
          "716:   if (!_patch_reloc (bin, &b->iob, reloc, sym_addr)) {",
          "",
          "[Added Lines]",
          "712:   if (!_patch_reloc (mo, &b->iob, reloc, sym_addr)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "722:   }",
          "723:   ptr->type = reloc->type;",
          "724:   ptr->additive = 0;",
          "727:    R_FREE (ptr);",
          "728:    goto beach;",
          "729:   }",
          "",
          "[Removed Lines]",
          "725:   RBinImport *imp;",
          "726:   if (!(imp = import_from_name (b, (char*) reloc->name, bin->imports_by_name))) {",
          "",
          "[Added Lines]",
          "721:   RBinImport *imp = import_from_name (b, (char*) reloc->name, mo->imports_by_name);",
          "722:   if (!imp) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "748:  return NULL;",
          "749: }",
          "769: }",
          "820:  }",
          "828: }",
          "831:  RFixupRebaseContext *ctx = context;",
          "833:  ut64 in_buf = event_details->offset - ctx->off;",
          "834:  switch (event_details->type) {",
          "835:  case R_FIXUP_EVENT_BIND:",
          "836:  case R_FIXUP_EVENT_BIND_AUTH:",
          "838:   break;",
          "839:  case R_FIXUP_EVENT_REBASE:",
          "840:  case R_FIXUP_EVENT_REBASE_AUTH:",
          "842:   break;",
          "843:  default:",
          "844:   R_LOG_ERROR (\"Unexpected event while rebasing buffer\");",
          "",
          "[Removed Lines]",
          "751: static void swizzle_io_read(struct MACH0_(obj_t) *obj, RIO *io) {",
          "752:  r_return_if_fail (io && io->desc && io->desc->plugin);",
          "753:  RIOPlugin *plugin = R_NEW0 (RIOPlugin);",
          "754:  if (Gheapplugin) {",
          "755:   R_LOG_WARN (\"Here be dragons\");",
          "756:   return;",
          "757:  } else {",
          "758:   Gorigplugin = io->desc->plugin;",
          "759:   Gorigdesc = io->desc->fd;",
          "760:  }",
          "761:  memcpy (plugin, Gorigplugin, sizeof (RIOPlugin));",
          "762:  io->desc->plugin = plugin;",
          "763:  obj->original_io_read = plugin->read;",
          "764:  if (Gorigread == NULL) {",
          "765:   Gorigread = plugin->read;",
          "766:  }",
          "767:  plugin->read = &rebasing_and_stripping_io_read;",
          "768:  Gheapplugin = plugin;",
          "771: static int rebasing_and_stripping_io_read(RIO *io, RIODesc *fd, ut8 *buf, int count) {",
          "772:  r_return_val_if_fail (io, -1);",
          "773:  RCore *core = (RCore*) io->coreb.core;",
          "774:  if (!core || !core->bin || !core->bin->binfiles) {",
          "775:   return -1;",
          "776:  }",
          "777:  struct MACH0_(obj_t) *obj = NULL;",
          "778:  RListIter *iter;",
          "779:  RBinFile *bf;",
          "780:  r_list_foreach (core->bin->binfiles, iter, bf) {",
          "781:   if (bf->fd == fd->fd) {",
          "788:    if (bf->o) {",
          "789:     ut32 *magic = bf->o->bin_obj;",
          "790:     if (magic && (*magic == MH_MAGIC ||",
          "794:      obj = bf->o->bin_obj;",
          "795:     }",
          "796:    }",
          "797:    break;",
          "798:   }",
          "799:  }",
          "800:  if (!obj || !obj->original_io_read) {",
          "801:   if (fd->plugin->read == &rebasing_and_stripping_io_read) {",
          "802:    return -1;",
          "803:   }",
          "804:   return fd->plugin->read (io, fd, buf, count);",
          "805:  }",
          "806:  if (!obj->original_io_read) {",
          "807:   return -1;",
          "808:  }",
          "809:  if (obj->rebasing_buffer) {",
          "810:   return obj->original_io_read (io, fd, buf, count);",
          "811:  }",
          "812:  if (count > obj->internal_buffer_size) {",
          "813:   R_FREE (obj->internal_buffer);",
          "814:   obj->internal_buffer_size = R_MAX (count, 8);",
          "815:   obj->internal_buffer = (ut8 *) calloc (1, obj->internal_buffer_size);",
          "816:   if (!obj->internal_buffer) {",
          "817:    obj->internal_buffer_size = 0;",
          "818:    return -1;",
          "819:   }",
          "821:  ut64 io_off = io->off;",
          "822:  int result = obj->original_io_read (io, fd, obj->internal_buffer, count);",
          "823:  if (result == count) {",
          "824:   rebase_buffer (obj, io_off - bf->o->boffset, fd, obj->internal_buffer, obj->internal_buffer_size);",
          "825:   memcpy (buf, obj->internal_buffer, result);",
          "826:  }",
          "827:  return result;",
          "830: static bool rebase_buffer_callback(void * context, RFixupEventDetails * event_details) {",
          "837:   r_write_le64 (&ctx->buf[in_buf], 0);",
          "841:   r_write_le64 (&ctx->buf[in_buf], ((RFixupRebaseEventDetails *) event_details)->ptr_value);",
          "",
          "[Added Lines]",
          "747: static RBuffer *swizzle_io_read(struct MACH0_(obj_t) *obj, RIO *io) {",
          "748:  r_return_val_if_fail (io && io->desc && io->desc->plugin, NULL);",
          "749:  RFixupRebaseContext ctx = {0};",
          "750:  RBuffer *nb = r_buf_new_with_buf (obj->b);",
          "751:  RBuffer *ob = obj->b;",
          "752:  obj->b = nb;",
          "753:  ut64 count = r_buf_size (obj->b);",
          "754:  ctx.io = io;",
          "755:  ctx.obj = obj;",
          "756:  ut64 off = 0;",
          "757:  ctx.off = off;",
          "758:  MACH0_(iterate_chained_fixups) (obj, off, off + count, R_FIXUP_EVENT_MASK_ALL, &rebase_buffer_callback2, &ctx);",
          "759:  obj->b = ob;",
          "760:  return nb;",
          "763: static void add_fixup(RList *list, ut64 addr, ut64 value) {",
          "764:  RBinReloc *r = R_NEW0 (RBinReloc);",
          "765:  if (r) {",
          "766:   r->vaddr = value;",
          "767:   r->paddr = addr;",
          "768:   r_list_append (list, r);",
          "771: static bool rebase_buffer_callback2(void *context, RFixupEventDetails * event_details) {",
          "774:  RList *rflist = ctx->obj->reloc_fixups;",
          "776:  if (!rflist) {",
          "777:   rflist = r_list_newf (free);",
          "778:   ctx->obj->reloc_fixups = rflist;",
          "779:  }",
          "783:   r_buf_write_at (ctx->obj->b, in_buf, (const ut8*)\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", 8);",
          "784:   ut8 data[8] = {0};",
          "785:   r_buf_read_at (ctx->obj->b, in_buf, data, 8);",
          "786:   add_fixup (rflist, in_buf, 0);",
          "787:   if (data[0]) {",
          "788:    eprintf (\"DATA0 write has failed\\n\");",
          "789:   }",
          "793:   {",
          "794:    ut8 data[8] = {0};",
          "795:    ut64 v = ((RFixupRebaseEventDetails *) event_details)->ptr_value;",
          "796:    add_fixup (rflist, in_buf, v);",
          "797:    memcpy (&data, &v, sizeof (data));",
          "798:    r_buf_write_at (ctx->obj->b, in_buf, data, 8);",
          "799:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "848:  return true;",
          "849: }",
          "867: static RList *classes(RBinFile *bf) {",
          "868:  return MACH0_(parse_classes) (bf, NULL);",
          "869: }",
          "",
          "[Removed Lines]",
          "851: static void rebase_buffer(struct MACH0_(obj_t) *obj, ut64 off, RIODesc *fd, ut8 *buf, int count) {",
          "852:  if (obj->rebasing_buffer) {",
          "853:   return;",
          "854:  }",
          "855:  obj->rebasing_buffer = true;",
          "857:  RFixupRebaseContext ctx;",
          "859:  ctx.buf = buf;",
          "860:  ctx.count = count;",
          "861:  ctx.off = off;",
          "863:  MACH0_(iterate_chained_fixups) (obj, off, off + count, R_FIXUP_EVENT_MASK_ALL, &rebase_buffer_callback, &ctx);",
          "864:  obj->rebasing_buffer = false;",
          "865: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}