{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de7109e61b4ff3b632250cdcd962a1a440609549",
      "candidate_info": {
        "commit_hash": "de7109e61b4ff3b632250cdcd962a1a440609549",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/de7109e61b4ff3b632250cdcd962a1a440609549",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h",
          "src/vdbeapi.c",
          "test/index.test"
        ],
        "message": "Ensure that the typeof() function always returns SQLITE_FLOAT for floating point values even when the value is stored as an integer to save space.\n\nFossilOrigin-Name: 48889530a9de22fee536edfd1627be62396ed18d842d5fd6d91e010b4337be95",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeapi.c||src/vdbeapi.c",
          "test/index.test||test/index.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 005a169406ccea6e3cc42271620870d985e8bada1ad49a63656003db4911cb51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:   };",
          "270:   return aType[pVal->flags&MEM_AffMask];",
          "271: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302: #ifdef SQLITE_DEBUG",
          "303:   {",
          "304:     int eType = SQLITE_BLOB;",
          "305:     if( pVal->flags & MEM_Null ){",
          "306:       eType = SQLITE_NULL;",
          "307:     }else if( pVal->flags & MEM_Int ){",
          "308:       eType = (pVal->flags & MEM_IntReal) ? SQLITE_FLOAT : SQLITE_INTEGER;",
          "309:     }else if( pVal->flags & MEM_Real ){",
          "310:       eType = SQLITE_FLOAT;",
          "311:     }else if( pVal->flags & MEM_Str ){",
          "312:       eType = SQLITE_TEXT;",
          "313:     }",
          "314:     assert( eType == aType[pVal->flags&MEM_AffMask] );",
          "315:   }",
          "316: #endif",
          "",
          "---------------"
        ],
        "test/index.test||test/index.test": [
          "File: test/index.test -> test/index.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "757:   SELECT * FROM t1;",
          "758:   REINDEX;",
          "759: } {0.0 1.0 1.0 1.0}",
          "761: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760: do_execsql_test index-23.1 {",
          "761:   DROP TABLE t1;",
          "762:   CREATE TABLE t1(a REAL);",
          "763:   CREATE UNIQUE INDEX index_0 ON t1(TYPEOF(a));",
          "764:   INSERT OR IGNORE INTO t1(a) VALUES (0.1),(FALSE);",
          "765:   SELECT * FROM t1;",
          "766:   REINDEX;",
          "767: } {0.1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8625221444d4f70965d41d241ed7fecc2d8bf7bc",
      "candidate_info": {
        "commit_hash": "8625221444d4f70965d41d241ed7fecc2d8bf7bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8625221444d4f70965d41d241ed7fecc2d8bf7bc",
        "files": [
          "ext/misc/csv.c",
          "manifest",
          "manifest.uuid",
          "test/csv01.test"
        ],
        "message": "Fix a problem with the CSV extension when it uses the \"header\" option on a real file.\n\nFossilOrigin-Name: 7acaed08f946633fca3ab8434dd6349ea6f1bac4fd9ec21f476db013ee06de30",
        "before_after_code_files": [
          "ext/misc/csv.c||ext/misc/csv.c",
          "manifest.uuid||manifest.uuid",
          "test/csv01.test||test/csv01.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/csv.c||ext/misc/csv.c": [
          "File: ext/misc/csv.c -> ext/misc/csv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:   }else if( pNew->zData ){",
          "622:     pNew->iStart = (int)sRdr.iIn;",
          "623:   }else{",
          "625:   }",
          "626:   csv_reader_reset(&sRdr);",
          "627:   rc = sqlite3_declare_vtab(db, CSV_SCHEMA);",
          "",
          "[Removed Lines]",
          "624:     pNew->iStart = ftell(sRdr.in);",
          "",
          "[Added Lines]",
          "624:     pNew->iStart = ftell(sRdr.in) - sRdr.nIn + sRdr.iIn;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1f50d57ce76f6c08a0ddbdd3c3fe2732d0e57dda14cb9aa3da00a14ceb4bc44",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/csv01.test||test/csv01.test": [
          "File: test/csv01.test -> test/csv01.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   SELECT * FROM trent;",
          "215: } {1}",
          "217: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217: # 2018-12-26",
          "218: # Bug report on the mailing list",
          "219: #",
          "220: forcedelete csv01.csv",
          "221: set fd [open csv01.csv w]",
          "222: puts $fd \"a,b,c,d\\r\\n1,2,3,4\\r\\none,two,three,four\\r\\n5,6,7,8\"",
          "223: close $fd",
          "224: do_execsql_test 5.1 {",
          "225:   CREATE VIRTUAL TABLE t5_1 USING csv(filename='csv01.csv');",
          "226:   SELECT name FROM temp.pragma_table_info('t5_1');",
          "227: } {c0 c1 c2 c3}",
          "228: do_execsql_test 5.2 {",
          "229:   SELECT *, '|' FROM t5_1;",
          "230: } {a b c d | 1 2 3 4 | one two three four | 5 6 7 8 |}",
          "231: do_execsql_test 5.3 {",
          "232:   DROP TABLE t5_1;",
          "233:   CREATE VIRTUAL TABLE t5_1 USING csv(filename='csv01.csv', header);",
          "234:   SELECT name FROM temp.pragma_table_info('t5_1');",
          "235: } {a b c d}",
          "236: do_execsql_test 5.4 {",
          "237:   SELECT *, '|' FROM t5_1;",
          "238: } {1 2 3 4 | one two three four | 5 6 7 8 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb077f3c50ee657fac6545567f323ba970776d1e",
      "candidate_info": {
        "commit_hash": "fb077f3c50ee657fac6545567f323ba970776d1e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb077f3c50ee657fac6545567f323ba970776d1e",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtreefuzz001.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Prevent an infinite loop in rtree that can result from a corrupt shadow table.\n\nFossilOrigin-Name: 085667180b230587abb82abfdd14da8859e23620994d5cf152236b64c756dd04",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtreefuzz001.test||ext/rtree/rtreefuzz001.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: #ifdef SQLITE_DEBUG",
          "133: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187: # define RTREE_ZERO 0.0",
          "188: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: #ifdef SQLITE_DEBUG",
          "197: # define RTREE_IS_CORRUPT(X) ((X)->bCorrupt = 1)",
          "198: #else",
          "199: # define RTREE_IS_CORRUPT(X)",
          "200: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "675:   }else if( pRtree->iNodeSize==sqlite3_blob_bytes(pRtree->pNodeBlob) ){",
          "676:     pNode = (RtreeNode *)sqlite3_malloc(sizeof(RtreeNode)+pRtree->iNodeSize);",
          "677:     if( !pNode ){",
          "",
          "[Removed Lines]",
          "674:     if( rc==SQLITE_ERROR ) rc = SQLITE_CORRUPT_VTAB;",
          "",
          "[Added Lines]",
          "686:     if( rc==SQLITE_ERROR ){",
          "687:       rc = SQLITE_CORRUPT_VTAB;",
          "688:       RTREE_IS_CORRUPT(pRtree);",
          "689:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "700:     pRtree->iDepth = readInt16(pNode->zData);",
          "701:     if( pRtree->iDepth>RTREE_MAX_DEPTH ){",
          "702:       rc = SQLITE_CORRUPT_VTAB;",
          "703:     }",
          "704:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:       RTREE_IS_CORRUPT(pRtree);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "710:   if( pNode && rc==SQLITE_OK ){",
          "711:     if( NCELL(pNode)>((pRtree->iNodeSize-4)/pRtree->nBytesPerCell) ){",
          "712:       rc = SQLITE_CORRUPT_VTAB;",
          "713:     }",
          "714:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "729:       RTREE_IS_CORRUPT(pRtree);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "718:       nodeHashInsert(pRtree, pNode);",
          "719:     }else{",
          "720:       rc = SQLITE_CORRUPT_VTAB;",
          "721:     }",
          "723:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:       RTREE_IS_CORRUPT(pRtree);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "943:     pRtree->inWrTrans = 0;",
          "944:     assert( pRtree->nCursor==0 );",
          "945:     nodeBlobReset(pRtree);",
          "947:     sqlite3_finalize(pRtree->pWriteNode);",
          "948:     sqlite3_finalize(pRtree->pDeleteNode);",
          "949:     sqlite3_finalize(pRtree->pReadRowid);",
          "",
          "[Removed Lines]",
          "946:     assert( pRtree->nNodeRef==0 );",
          "",
          "[Added Lines]",
          "964:     assert( pRtree->nNodeRef==0 || pRtree->bCorrupt );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1275:       return SQLITE_OK;",
          "1276:     }",
          "1277:   }",
          "1278:   return SQLITE_CORRUPT_VTAB;",
          "1279: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1296:   RTREE_IS_CORRUPT(pRtree);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2138: ){",
          "2139:   RtreeNode *p = pNode;",
          "2140:   while( p->pParent ){",
          "2141:     RtreeNode *pParent = p->pParent;",
          "2142:     RtreeCell cell;",
          "2143:     int iCell;",
          "2146:       return SQLITE_CORRUPT_VTAB;",
          "2147:     }",
          "",
          "[Removed Lines]",
          "2145:     if( nodeParentIndex(pRtree, p, &iCell) ){",
          "",
          "[Added Lines]",
          "2159:   int cnt = 0;",
          "2165:     if( (++cnt)>1000 || nodeParentIndex(pRtree, p, &iCell)  ){",
          "2166:       RTREE_IS_CORRUPT(pRtree);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2610:     }",
          "2611:     rc = sqlite3_reset(pRtree->pReadParent);",
          "2612:     if( rc==SQLITE_OK ) rc = rc2;",
          "2614:     pChild = pChild->pParent;",
          "2615:   }",
          "2616:   return rc;",
          "",
          "[Removed Lines]",
          "2613:     if( rc==SQLITE_OK && !pChild->pParent ) rc = SQLITE_CORRUPT_VTAB;",
          "",
          "[Added Lines]",
          "2634:     if( rc==SQLITE_OK && !pChild->pParent ){",
          "2635:       RTREE_IS_CORRUPT(pRtree);",
          "2636:       rc = SQLITE_CORRUPT_VTAB;",
          "2637:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3560:     }else if( pRtree->iNodeSize<(512-64) ){",
          "3561:       rc = SQLITE_CORRUPT_VTAB;",
          "3563:                                pRtree->zName);",
          "3564:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3586:       RTREE_IS_CORRUPT(pRtree);",
          "",
          "---------------"
        ],
        "ext/rtree/rtreefuzz001.test||ext/rtree/rtreefuzz001.test": [
          "File: ext/rtree/rtreefuzz001.test -> ext/rtree/rtreefuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: }",
          "23: database_may_be_corrupt",
          "28: do_test rtreefuzz001-100 {",
          "29:   sqlite3 db {}",
          "30:   db deserialize [decode_hexdb {",
          "",
          "[Removed Lines]",
          "25: # In the following database file, there is 384 bytes of free space",
          "26: # on page 8 that does not appear on the freeblock list.",
          "27: #",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "472:   }",
          "473: } {1 {SQL logic error}}",
          "475: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472: do_test rtreefuzz001-200 {",
          "473:   sqlite3 db {}",
          "474:   db deserialize [decode_hexdb {",
          "475: .open --hexdb",
          "476: | size 16384 pagesize 4096 filename c3.db",
          "477: | page 1 offset 0",
          "478: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "479: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 04   .....@  ........",
          "480: |     32: 00 00 00 00 01 00 00 00 00 00 00 04 00 00 00 04   ................",
          "481: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "482: |     96: 00 00 00 00 0d 00 00 00 04 0e 9c 00 0f ad 0f 4f   ...............O",
          "483: |    112: 0e fc 0e 9c 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "484: |   3728: 00 00 00 00 00 00 00 00 00 00 00 00 5e 04 07 17   ............^...",
          "485: |   3744: 1f 1f 01 81 0b 74 61 62 6c 65 74 31 5f 70 61 72   .....tablet1_par",
          "486: |   3760: 65 6e 74 74 31 5f 70 61 72 65 6e 74 04 43 52 45   entt1_parent.CRE",
          "487: |   3776: 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 70 61   ATE TABLE \"t1_pa",
          "488: |   3792: 72 65 6e 74 22 28 6e 6f 64 65 6e 6f 20 49 4e 54   rent\"(nodeno INT",
          "489: |   3808: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "490: |   3824: 2c 70 61 72 65 6e 74 6e 6f 64 65 29 51 03 06 17   ,parentnode)Q...",
          "491: |   3840: 1b 1b 01 7b 74 61 62 6c 65 74 31 5f 6e 6f 64 65   ....tablet1_node",
          "492: |   3856: 74 31 5f 6e 6f 64 65 03 43 52 45 41 54 45 20 54   t1_node.CREATE T",
          "493: |   3872: 41 42 4c 45 20 22 74 31 5f 6e 6f 64 65 22 28 6e   ABLE \"t1_node\"(n",
          "494: |   3888: 6f 64 65 6e 6f 20 49 4e 54 45 47 45 52 20 50 52   odeno INTEGER PR",
          "495: |   3904: 49 4d 41 52 59 20 4b 45 59 2c 64 61 74 61 29 5c   IMARY KEY,data)\\",
          "496: |   3920: 02 07 17 1d 1d 01 81 0b 74 61 62 6c 65 74 31 5f   ........tablet1_",
          "497: |   3936: 72 6f 77 69 64 74 31 5f 72 6f 77 69 64 02 43 52   rowidt1_rowid.CR",
          "498: |   3952: 45 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 72   EATE TABLE \"t1_r",
          "499: |   3968: 6f 77 69 64 22 28 72 6f 77 69 64 20 49 4e 54 45   owid\"(rowid INTE",
          "500: |   3984: 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c   GER PRIMARY KEY,",
          "501: |   4000: 6e 6f 64 65 6e 6f 2c 61 30 2c 61 31 29 51 01 07   nodeno,a0,a1)Q..",
          "502: |   4016: 17 11 11 08 81 0f 74 61 62 6c 65 74 31 74 31 43   ......tablet1t1C",
          "503: |   4032: 52 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41   REATE VIRTUAL TA",
          "504: |   4048: 42 4c 45 20 74 31 20 55 53 49 4e 47 20 72 74 72   BLE t1 USING rtr",
          "505: |   4064: 65 65 28 69 64 2c 78 30 2c 78 31 2c 79 30 2c 79   ee(id,x0,x1,y0,y",
          "506: |   4080: 31 2c 2b 6c 61 62 65 6c 2c 2b 6f 74 68 65 72 29   1,+label,+other)",
          "507: | page 2 offset 4096",
          "508: |      0: 0d 00 00 00 0e 0e f7 00 0f e8 0f d0 0f b7 0f 9e   ................",
          "509: |     16: 0f 91 0f 81 0f 70 0f 5e 0f 4f 0f 39 0f 29 0f 18   .....p.^.O.9.)..",
          "510: |     32: 0f 06 0e f7 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "511: |   3824: 00 00 00 00 00 00 00 0d 0e 05 00 09 1d 00 74 6f   ..............to",
          "512: |   3840: 70 20 68 61 6c 66 10 0d 05 00 09 23 00 62 6f 74   p half.....#.bot",
          "513: |   3856: 74 6f 6d 20 68 61 6c 66 0f 0c 05 00 09 21 00 72   tom half.....!.r",
          "514: |   3872: 69 67 68 74 20 68 61 6c 66 0e 0b 05 00 09 1f 00   ight half.......",
          "515: |   3888: 6c 65 66 74 20 68 61 6c 66 14 0a 05 00 09 2b 00   left half.....+.",
          "516: |   3904: 74 68 65 20 77 68 6f 6c 65 20 74 68 69 6e 67 0d   the whole thing.",
          "517: |   3920: 09 05 00 09 1d 00 74 6f 70 20 65 64 67 65 10 08   ......top edge..",
          "518: |   3936: 05 00 09 23 00 62 6f 74 74 6f 6d 20 65 64 67 65   ...#.bottom edge",
          "519: |   3952: 0f 07 05 00 09 21 00 72 69 67 68 74 20 65 64 67   .....!.right edg",
          "520: |   3968: 65 0e 06 05 00 09 1f 00 6c 65 66 74 20 65 64 67   e.......left edg",
          "521: |   3984: 65 0b 05 05 00 09 19 00 63 65 6e 74 65 72 17 04   e.......center..",
          "522: |   4000: 05 00 09 31 00 75 70 70 65 72 2d 72 69 67 68 74   ...1.upper-right",
          "523: |   4016: 20 63 6f 72 6e 65 72 17 03 05 00 09 31 00 6c 6f    corner.....1.lo",
          "524: |   4032: 77 65 72 2d 72 69 67 68 74 27 60 f6 32 6e 65 72   wer-right'`.2ner",
          "525: |   4048: 16 02 05 00 09 2f 00 75 70 70 65 72 2d 6c 65 66   ...../.upper-lef",
          "526: |   4064: 74 20 63 6f 72 6e 65 72 16 01 05 00 09 2f 00 6c   t corner...../.l",
          "527: |   4080: 6f 77 65 72 2d 6c 65 66 74 20 63 6f 72 6e 65 72   ower-left corner",
          "528: | page 3 offset 8192",
          "529: |      0: 0d 00 00 00 02 0b 2d 00 0b 2d 00 00 00 00 00 00   ......-..-......",
          "530: |   2848: 00 00 00 00 00 00 00 00 00 00 00 00 00 89 50 01   ..............P.",
          "531: |   2864: 04 00 93 24 00 00 00 0e 00 00 00 00 00 00 00 01   ...$............",
          "532: |   2880: 00 00 00 00 41 20 00 00 00 00 00 00 41 20 01 00   ....A ......A ..",
          "533: |   2896: 00 00 00 00 00 00 00 02 00 00 00 00 41 00 00 04   ............A...",
          "534: |   2912: 2b 40 00 0c 42 c8 00 00 00 00 00 00 00 00 00 03   +@..B...........",
          "535: |   2928: 42 b4 00 00 42 c8 00 00 00 00 00 00 41 20 00 00   B...B.......A ..",
          "536: |   2944: 00 00 00 00 00 00 00 04 42 b4 00 00 42 c8 00 00   ........B...B...",
          "537: |   2960: 42 b4 00 00 42 c8 00 00 00 00 00 00 00 00 00 05   B...B...........",
          "538: |   2976: 42 20 00 00 42 70 00 00 42 20 00 00 42 70 00 00   B ..Bp..B ..Bp..",
          "539: |   2992: 00 00 00 00 00 00 00 60 00 00 00 04 0a 00 00 00   .......`........",
          "540: |   3008: 00 00 00 42 c8 00 00 00 00 00 00 00 00 00 07 42   ...B...........B",
          "541: |   3024: be 00 00 42 c8 00 00 00 00 00 00 42 c8 00 00 00   ...B.......B....",
          "542: |   3040: 00 00 00 00 00 00 08 00 00 00 00 42 c8 00 00 00   ...........B....",
          "543: |   3056: 00 00 00 40 a0 00 00 00 00 00 00 00 00 00 09 00   ...@............",
          "544: |   3072: 00 00 00 42 c8 00 00 42 be 00 00 42 c8 00 00 00   ...B...B...B....",
          "545: |   3088: 00 00 00 00 00 00 0a 00 00 00 00 42 c8 00 00 00   ...........B....",
          "546: |   3104: 00 00 00 42 c8 00 00 00 00 00 00 00 00 00 0b 00   ...B............",
          "547: |   3120: 00 00 00 42 48 00 00 00 00 00 04 2c 80 00 00 00   ...BH......,....",
          "548: |   3136: 00 00 00 00 00 00 c4 24 c0 00 04 2c 80 00 00 00   .......$...,....",
          "549: |   3152: 00 00 04 2c 80 00 00 00 00 00 00 00 00 00 d0 00   ...,............",
          "550: |   3168: 00 00 04 2c 80 00 00 00 00 00 04 24 80 00 00 00   ...,.......$....",
          "551: |   3184: 00 00 00 00 00 00 e0 00 00 00 04 2c 80 00 04 24   ...........,...$",
          "552: |   3200: c0 00 04 2c 00 00 00 00 00 00 00 00 00 00 00 00   ...,............",
          "553: | page 4 offset 12288",
          "554: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "555: | end c3.db",
          "556:   }]",
          "557:   catchsql {",
          "558:     WITH RECURSIVE",
          "559:       c1(x) AS (VALUES(0) UNION ALL SELECT x+1 FROM c1 WHERE x<99),",
          "560:       c2(y) AS (VALUES(0) UNION ALL SELECT y+1 FROM c2 WHERE y<99)",
          "561:     INSERT INTO t1(id, x0,x1,y0,y1,label)",
          "562:       SELECT 1000+x+y*100, x, x+1, y, y+1, printf('box-%d,%d',x,y) FROM c1, c2;",
          "563:   }",
          "564: } {1 {malformed database schema (?)}}",
          "565: do_test rtreefuzz001-210 {",
          "566:   catchsql {",
          "567:     SELECT rtreecheck('t1');",
          "568:   }",
          "569: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ed8531e57596f0d5911a05a26d5ae61e1eccfaadee49219d7f6e212cac288238",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39b30a7d6bfcf46cd24688006b1106c6ea313da2",
      "candidate_info": {
        "commit_hash": "39b30a7d6bfcf46cd24688006b1106c6ea313da2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39b30a7d6bfcf46cd24688006b1106c6ea313da2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/delete.c",
          "test/index6.test"
        ],
        "message": "In sqlite3GenerateIndexKey(), do not attempt to reuse column values from the previous index if the current index is a partial index as the partial index test may have corrupted those values.  Ticket [a9efb42811fa41ee]\n\nFossilOrigin-Name: 17e9f65814264de9c35bc5ba94e0a66fbbf1200c00d33ab9a19a0b6f92bc685a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/delete.c||src/delete.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28b8f1036d569bccce56b4e7042348024b5dd1ffa04850cbeddab1e35c49e5b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "918:       sqlite3ExprIfFalseDup(pParse, pIdx->pPartIdxWhere, *piPartIdxLabel,",
          "919:                             SQLITE_JUMPIFNULL);",
          "920:       pParse->iSelfTab = 0;",
          "921:     }else{",
          "923:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "921:       pPrior = 0; /* Ticket a9efb42811fa41ee 2019-11-02;",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:   SELECT 3 FROM t0 WHERE c1 <= c0;",
          "479: } {3}",
          "484: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481: # 2019-11-02",
          "482: # Ticket https://sqlite.org/src/tktview/a9efb42811fa41ee286e8",
          "483: db close",
          "484: sqlite3 db :memory:",
          "485: do_execsql_test index6-17.1 {",
          "486:   CREATE TABLE t0(c0);",
          "487:   CREATE INDEX i0 ON t0(0) WHERE c0 GLOB c0;",
          "488:   INSERT INTO t0 VALUES (0);",
          "489:   CREATE UNIQUE INDEX i1 ON t0(0);",
          "490:   PRAGMA integrity_check;",
          "491: } {ok}",
          "492: do_execsql_test index6-17.2 {",
          "493:   CREATE UNIQUE INDEX i2 ON t0(0);",
          "494:   REPLACE INTO t0 VALUES(0);",
          "495:   PRAGMA integrity_check;",
          "496: } {ok}",
          "497: do_execsql_test index6-17.3 {",
          "498:   SELECT COUNT(*) FROM t0 WHERE t0.c0 GLOB t0.c0;",
          "499: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94f0a8342106b4e1af85bf658bdf1c12ed010c73",
      "candidate_info": {
        "commit_hash": "94f0a8342106b4e1af85bf658bdf1c12ed010c73",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94f0a8342106b4e1af85bf658bdf1c12ed010c73",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/memdb.c"
        ],
        "message": "Fix the xFetch method of the \"memdb\" VFS (used by deserialize) so that it is robust against corrupt database file.\n\nFossilOrigin-Name: 2c1ef40e787a6bc355b50168527a47eb09acd30d0d88cff8336a434ad554115d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e6f7c2aced49824a38b3494b796a8ec73aa7a90b51159f670596df15ed1c5ab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   void **pp",
          "311: ){",
          "312:   MemFile *p = (MemFile *)pFile;",
          "315:   return SQLITE_OK;",
          "316: }",
          "",
          "[Removed Lines]",
          "313:   p->nMmap++;",
          "",
          "[Added Lines]",
          "313:   if( iOfst+iAmt>p->sz ){",
          "314:     assert( CORRUPT_DB );",
          "316:   }else{",
          "317:     p->nMmap++;",
          "319:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}