{
  "cve_id": "CVE-2011-4634",
  "cve_desc": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 3.4.x before 3.4.8 allow remote attackers to inject arbitrary web script or HTML via (1) a crafted database name, related to the Database Synchronize panel; (2) a crafted database name, related to the Database rename panel; (3) a crafted SQL query, related to the table overview panel; (4) a crafted SQL query, related to the view creation dialog; (5) a crafted column type, related to the table search dialog; or (6) a crafted column type, related to the create index dialog.",
  "repo": "phpmyadmin/phpmyadmin",
  "patch_hash": "077c10020e349e8c1beb46309098992fde616913",
  "patch_info": {
    "commit_hash": "077c10020e349e8c1beb46309098992fde616913",
    "repo": "phpmyadmin/phpmyadmin",
    "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/077c10020e349e8c1beb46309098992fde616913",
    "files": [
      "ChangeLog",
      "libraries/common.lib.php"
    ],
    "message": "[security] Self-XSS on invalid query (table overview), see PMASA-2011-18",
    "before_after_code_files": [
      "libraries/common.lib.php||libraries/common.lib.php"
    ]
  },
  "patch_diff": {
    "libraries/common.lib.php||libraries/common.lib.php": [
      "File: libraries/common.lib.php -> libraries/common.lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1059:         } else {",
      "1061:             $parsed_sql = PMA_SQP_parse($query_base);",
      "1065:         }",
      "1069:             $analyzed_display_query = PMA_SQP_analyze($parsed_sql);",
      "",
      "[Removed Lines]",
      "1062:             if (PMA_SQP_isError()) {",
      "1063:                 unset($parsed_sql);",
      "1064:             }",
      "1068:         if (isset($parsed_sql)) {",
      "",
      "[Added Lines]",
      "1065:         if (isset($parsed_sql) && ! PMA_SQP_isError()) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d165fe8e18cc2395b78a01d2280a2bab95e3e570",
      "candidate_info": {
        "commit_hash": "d165fe8e18cc2395b78a01d2280a2bab95e3e570",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/d165fe8e18cc2395b78a01d2280a2bab95e3e570",
        "files": [
          "libraries/common.lib.php"
        ],
        "message": "PMA_showMessage(): cleanup",
        "before_after_code_files": [
          "libraries/common.lib.php||libraries/common.lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/common.lib.php||libraries/common.lib.php"
          ],
          "candidate": [
            "libraries/common.lib.php||libraries/common.lib.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/common.lib.php||libraries/common.lib.php": [
          "File: libraries/common.lib.php -> libraries/common.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "958: function PMA_showMessage($message, $sql_query = null, $type = 'notice')",
          "959: {",
          "960:     global $cfg;",
          "963:     if (null === $sql_query) {",
          "964:         if (! empty($GLOBALS['display_query'])) {",
          "",
          "[Removed Lines]",
          "961:     $query_too_big = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1026:     }",
          "1028:     if ($cfg['ShowSQL'] == true && ! empty($sql_query)) {",
          "1039:             $new_line = '\\'<br />' . \"\\n\" . '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;. \\' ';",
          "1043:             $query_base = PMA_sqlAddslashes(htmlspecialchars($sql_query), false, false, true);",
          "1045:             $query_base = preg_replace(\"@((\\015\\012)|(\\015)|(\\012))+@\", $new_line, $query_base);",
          "1046:         } else {",
          "1047:             $query_base = $sql_query;",
          "1048:         }",
          "1050:         if (strlen($query_base) > $cfg['MaxCharactersInDisplayedSQL']) {",
          "1051:             $query_too_big = true;",
          "1052:             $query_base = nl2br(htmlspecialchars($sql_query));",
          "1060:             $parsed_sql = $GLOBALS['parsed_sql'];",
          "1061:         } else {",
          "1067:         }",
          "1070:         if (isset($parsed_sql)) {",
          "1071:             $analyzed_display_query = PMA_SQP_analyze($parsed_sql);",
          "1072:         }",
          "1094:             $query_base = '$sql  = \\'' . $query_base;",
          "1096:             $query_base = PMA_validateSQL($query_base);",
          "1101:         }",
          "1116:             } else {",
          "1118:             }",
          "1125:         } else {",
          "1127:         }",
          "1142:             }",
          "1149:             if (preg_match('@^SELECT[[:space:]]+@i', $sql_query)) {",
          "1151:                 $_message = $GLOBALS['strExplain'];",
          "1152:             } elseif (preg_match('@^EXPLAIN[[:space:]]+SELECT[[:space:]]+@i', $sql_query)) {",
          "1154:                 $_message = $GLOBALS['strNoExplain'];",
          "1157:             }",
          "1159:                 $explain_link = ' [' . PMA_linkOrButton($explain_link, $_message) . ']';",
          "1160:             }",
          "1161:         } else {",
          "1162:             $explain_link = '';",
          "1163:         } //show explain",
          "1178:                 $_message = $GLOBALS['strNoPhp'];",
          "1179:             } else {",
          "1181:                 $_message = $GLOBALS['strPhp'];",
          "1182:             }",
          "1183:             $php_link = ' [' . PMA_linkOrButton($php_link, $_message) . ']';",
          "1185:             if (isset($GLOBALS['show_as_php'])) {",
          "1191:                 $php_link .= ' [' . PMA_linkOrButton($runquery_link, $GLOBALS['strRunQuery']) . ']';",
          "1192:             }",
          "1194:         } else {",
          "1195:             $php_link = '';",
          "1196:         } //show as php",
          "1207:             $refresh_link = ' [' . PMA_linkOrButton($refresh_link, $GLOBALS['strRefresh']) . ']';",
          "1208:         } else {",
          "1209:             $refresh_link = '';",
          "1210:         } //show as php",
          "1221:             if (!empty($GLOBALS['validatequery'])) {",
          "1223:                 $validate_message = $GLOBALS['strNoValidateSQL'] ;",
          "1224:             } else {",
          "1226:                 $validate_message = $GLOBALS['strValidateSQL'] ;",
          "1227:             }",
          "1228:             $validate_link = ' [' . PMA_linkOrButton($validate_link, $validate_message) . ']';",
          "1229:         } else {",
          "1230:             $validate_link = '';",
          "1231:         } //validator",
          "1237:         echo '<fieldset class=\"\">' . \"\\n\";",
          "1238:         echo '    <legend>' . $GLOBALS['strSQLQuery'] . ':</legend>';",
          "1239:         echo '    <div>';",
          "1243:         if ($query_too_big) {",
          "1244:             echo '    ' . substr($query_base, 0, $cfg['MaxCharactersInDisplayedSQL']) . '[...]';",
          "1245:         } else {",
          "",
          "[Removed Lines]",
          "1030:         $url_qpart = '?' . PMA_generate_common_url($GLOBALS['db'], $GLOBALS['table']);",
          "1038:         if (!empty($GLOBALS['show_as_php'])) {",
          "1040:         }",
          "1041:         if (isset($new_line)) {",
          "1053:             unset($GLOBALS['parsed_sql']);",
          "1054:         }",
          "1059:         if (! empty($GLOBALS['parsed_sql']) && $query_base == $GLOBALS['parsed_sql']['raw']) {",
          "1064:             if (! $query_too_big) {",
          "1065:                 $parsed_sql = PMA_SQP_parse($query_base);",
          "1066:             }",
          "1086:         if (isset($analyzed_display_query[0]['queryflags']['select_from'])",
          "1087:          && isset($GLOBALS['sql_limit_to_append'])) {",
          "1088:             $query_base  = $analyzed_display_query[0]['section_before_limit'] . \"\\n\" . $GLOBALS['sql_limit_to_append'] . $analyzed_display_query[0]['section_after_limit'];",
          "1090:             $parsed_sql = PMA_SQP_parse($query_base);",
          "1091:         }",
          "1093:         if (!empty($GLOBALS['show_as_php'])) {",
          "1095:         } elseif (!empty($GLOBALS['validatequery'])) {",
          "1097:         } else {",
          "1098:             if (isset($parsed_sql)) {",
          "1099:                 $query_base = PMA_formatSql($parsed_sql, $query_base);",
          "1100:             }",
          "1107:         $edit_target = strlen($GLOBALS['db']) ? (strlen($GLOBALS['table']) ? 'tbl_sql.php' : 'db_sql.php') : 'server_sql.php';",
          "1109:         if (isset($cfg['SQLQuery']['Edit'])",
          "1110:             && ($cfg['SQLQuery']['Edit'] == true)",
          "1111:             && (!empty($edit_target))",
          "1112:             && ! $query_too_big) {",
          "1114:             if ($cfg['EditInWindow'] == true) {",
          "1115:                 $onclick = 'window.parent.focus_querywindow(\\'' . PMA_jsFormat($sql_query, false) . '\\'); return false;';",
          "1117:                 $onclick = '';",
          "1120:             $edit_link = $edit_target",
          "1121:                        . $url_qpart",
          "1122:                        . '&amp;sql_query=' . urlencode($sql_query)",
          "1123:                        . '&amp;show_query=1#querybox';",
          "1124:             $edit_link = ' [' . PMA_linkOrButton($edit_link, $GLOBALS['strEdit'], array('onclick' => $onclick)) . ']';",
          "1126:             $edit_link = '';",
          "1132:         if (isset($cfg['SQLQuery']['Explain'])",
          "1133:             && $cfg['SQLQuery']['Explain'] == true",
          "1134:             && ! $query_too_big) {",
          "1138:             if (!empty($GLOBALS['validatequery'])) {",
          "1139:                 $explain_link_validate = '&amp;validatequery=1';",
          "1140:             } else {",
          "1141:                 $explain_link_validate = '';",
          "1144:             $explain_link = 'import.php'",
          "1145:                           . $url_qpart",
          "1146:                           . $explain_link_validate",
          "1147:                           . '&amp;sql_query=';",
          "1150:                 $explain_link .= urlencode('EXPLAIN ' . $sql_query);",
          "1153:                 $explain_link .= urlencode(substr($sql_query, 8));",
          "1155:             } else {",
          "1156:                 $explain_link = '';",
          "1158:             if (!empty($explain_link)) {",
          "1167:         if (isset($cfg['SQLQuery']['ShowAsPHP'])",
          "1168:             && $cfg['SQLQuery']['ShowAsPHP'] == true",
          "1169:             && ! $query_too_big) {",
          "1170:             $php_link = 'import.php'",
          "1171:                       . $url_qpart",
          "1172:                       . '&amp;show_query=1'",
          "1173:                       . '&amp;sql_query=' . urlencode($sql_query)",
          "1174:                       . '&amp;show_as_php=';",
          "1176:             if (!empty($GLOBALS['show_as_php'])) {",
          "1177:                 $php_link .= '0';",
          "1180:                 $php_link .= '1';",
          "1186:                 $runquery_link",
          "1187:                      = 'import.php'",
          "1188:                      . $url_qpart",
          "1189:                      . '&amp;show_query=1'",
          "1190:                      . '&amp;sql_query=' . urlencode($sql_query);",
          "1199:         if (isset($cfg['SQLQuery']['Refresh'])",
          "1200:             && $cfg['SQLQuery']['Refresh']",
          "1201:             && preg_match('@^(SELECT|SHOW)[[:space:]]+@i', $sql_query)) {",
          "1203:             $refresh_link = 'import.php'",
          "1204:                       . $url_qpart",
          "1205:                       . '&amp;show_query=1'",
          "1206:                       . '&amp;sql_query=' . urlencode($sql_query);",
          "1212:         if (isset($cfg['SQLValidator']['use'])",
          "1213:             && $cfg['SQLValidator']['use'] == true",
          "1214:             && isset($cfg['SQLQuery']['Validate'])",
          "1215:             && $cfg['SQLQuery']['Validate'] == true) {",
          "1216:             $validate_link = 'import.php'",
          "1217:                            . $url_qpart",
          "1218:                            . '&amp;show_query=1'",
          "1219:                            . '&amp;sql_query=' . urlencode($sql_query)",
          "1220:                            . '&amp;validatequery=';",
          "1222:                 $validate_link .= '0';",
          "1225:                 $validate_link .= '1';",
          "",
          "[Added Lines]",
          "1032:         if (! empty($GLOBALS['show_as_php'])) {",
          "1042:         $query_too_big = false;",
          "1049:         } elseif (! empty($GLOBALS['parsed_sql'])",
          "1050:          && $query_base == $GLOBALS['parsed_sql']['raw']) {",
          "1056:             $parsed_sql = PMA_SQP_parse($query_base);",
          "1074:             if (isset($analyzed_display_query[0]['queryflags']['select_from'])",
          "1075:              && isset($GLOBALS['sql_limit_to_append'])) {",
          "1076:                 $query_base = $analyzed_display_query[0]['section_before_limit']",
          "1077:                     . \"\\n\" . $GLOBALS['sql_limit_to_append']",
          "1078:                     . $analyzed_display_query[0]['section_after_limit'];",
          "1080:                 $parsed_sql = PMA_SQP_parse($query_base);",
          "1081:             }",
          "1084:         if (! empty($GLOBALS['show_as_php'])) {",
          "1086:         } elseif (! empty($GLOBALS['validatequery'])) {",
          "1088:         } elseif (isset($parsed_sql)) {",
          "1089:             $query_base = PMA_formatSql($parsed_sql, $query_base);",
          "1097:         $url_params = array();",
          "1098:         if (strlen($GLOBALS['db'])) {",
          "1099:             $url_params['db'] = $GLOBALS['db'];",
          "1100:             if (strlen($GLOBALS['table'])) {",
          "1101:                 $url_params['table'] = $GLOBALS['table'];",
          "1102:                 $edit_link = 'tbl_sql.php';",
          "1104:                 $edit_link = 'db_sql.php';",
          "1107:             $edit_link = 'server_sql.php';",
          "1113:         if (! empty($cfg['SQLQuery']['Explain']) && ! $query_too_big) {",
          "1114:             $explain_params = $url_params;",
          "1117:             if (! empty($GLOBALS['validatequery'])) {",
          "1118:                 $explain_params['validatequery'] = 1;",
          "1122:                 $explain_params['sql_query'] = 'EXPLAIN ' . $sql_query;",
          "1125:                 $explain_params['sql_query'] = substr($sql_query, 8);",
          "1128:             if (isset($explain_params['validatequery'])) {",
          "1129:                 $explain_link = 'import.php' . PMA_generate_common_url($explain_params);",
          "1136:         $url_params['sql_query']  = $sql_query;",
          "1137:         $url_params['show_query'] = 1;",
          "1139:         if (! empty($cfg['SQLQuery']['Edit']) && ! $query_too_big) {",
          "1140:             if ($cfg['EditInWindow'] == true) {",
          "1141:                 $onclick = 'window.parent.focus_querywindow(\\'' . PMA_jsFormat($sql_query, false) . '\\'); return false;';",
          "1142:             } else {",
          "1143:                 $onclick = '';",
          "1144:             }",
          "1146:             $edit_link .= PMA_generate_common_url($url_params) . '#querybox';",
          "1147:             $edit_link = ' [' . PMA_linkOrButton($edit_link, $GLOBALS['strEdit'], array('onclick' => $onclick)) . ']';",
          "1148:         } else {",
          "1149:             $edit_link = '';",
          "1150:         }",
          "1152:         $url_qpart = PMA_generate_common_url($url_params);",
          "1156:         if (! empty($cfg['SQLQuery']['ShowAsPHP']) && ! $query_too_big) {",
          "1157:             $php_params = $url_params;",
          "1159:             if (! empty($GLOBALS['show_as_php'])) {",
          "1162:                 $php_params['show_as_php'] = 1;",
          "1166:             $php_link = 'import.php' . PMA_generate_common_url($php_params);",
          "1170:                 $runquery_link = 'import.php' . PMA_generate_common_url($url_params);",
          "1178:         if (! empty($cfg['SQLQuery']['Refresh'])",
          "1179:          && preg_match('@^(SELECT|SHOW)[[:space:]]+@i', $sql_query)) {",
          "1180:             $refresh_link = 'import.php' . PMA_generate_common_url($url_params);",
          "1186:         if (! empty($cfg['SQLValidator']['use'])",
          "1187:          && ! empty($cfg['SQLQuery']['Validate'])) {",
          "1188:             $validate_params = $url_params;",
          "1192:                 $validate_params['validatequery'] = 1;",
          "1196:             $validate_link = 'import.php' . PMA_generate_common_url($validate_params);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1247:         }",
          "1251:             echo '\\';';",
          "1252:         }",
          "1253:         echo '    </div>';",
          "1254:         echo '</fieldset>' . \"\\n\";",
          "1262:     }",
          "1263:     echo '</div><br />' . \"\\n\";",
          "1264: } // end of the 'PMA_showMessage()' function",
          "",
          "[Removed Lines]",
          "1250:         if (!empty($GLOBALS['show_as_php'])) {",
          "1256:         if (!empty($edit_target)) {",
          "1257:             echo '<fieldset class=\"tblFooters\">';",
          "1258:             PMA_profilingCheckbox($sql_query);",
          "1259:             echo $edit_link . $explain_link . $php_link . $refresh_link . $validate_link;",
          "1260:             echo '</fieldset>';",
          "1261:         }",
          "",
          "[Added Lines]",
          "1213:         if (! empty($GLOBALS['show_as_php'])) {",
          "1219:         echo '<fieldset class=\"tblFooters\">';",
          "1220:         PMA_profilingCheckbox($sql_query);",
          "1221:         echo $edit_link . $explain_link . $php_link . $refresh_link . $validate_link;",
          "1222:         echo '</fieldset>';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8dfb964cdf892f52b50f65d271b5b48d75457f68",
      "candidate_info": {
        "commit_hash": "8dfb964cdf892f52b50f65d271b5b48d75457f68",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/8dfb964cdf892f52b50f65d271b5b48d75457f68",
        "files": [
          "libraries/common.lib.php",
          "libraries/core.lib.php"
        ],
        "message": "Introduce PMA_CommonFunctions class",
        "before_after_code_files": [
          "libraries/common.lib.php||libraries/common.lib.php",
          "libraries/core.lib.php||libraries/core.lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/common.lib.php||libraries/common.lib.php"
          ],
          "candidate": [
            "libraries/common.lib.php||libraries/common.lib.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/common.lib.php||libraries/common.lib.php": [
          "File: libraries/common.lib.php -> libraries/common.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "39: {",
          "44:     }",
          "140:         }",
          "159:         }",
          "167:         }",
          "168:     }",
          "263:     }",
          "334:             );",
          "336:         }",
          "374:         } else {",
          "376:         }",
          "446:     }",
          "493:             } else {",
          "497:             }",
          "498:         }",
          "613:         } else {",
          "615:         }",
          "616:     }",
          "629:         }",
          "654:             }",
          "659:         } // end if",
          "710:         }",
          "754:         }",
          "791:             }",
          "792:         }",
          "833:                 }",
          "842:             }",
          "980:     }",
          "1016:         }",
          "1060:         }",
          "1076:         } else {",
          "1078:         }",
          "1097:         } else {",
          "1100:         }",
          "1123:             }",
          "1139:             ) {",
          "1145:             }",
          "1146:         }",
          "1160:         }",
          "1178:             }",
          "1179:         } else {",
          "1194:             }",
          "1222:             } else {",
          "1224:             }",
          "1243:             } else {",
          "1246:             }",
          "1281:             }",
          "1548:         }",
          "1580:     }",
          "1601:     }",
          "1610:         );",
          "1641:     }",
          "1762:         }",
          "1785:         }",
          "1890:         }",
          "1929:                 }",
          "1930:             }",
          "1931:         }",
          "1973:         }",
          "1988:         }",
          "2039:     }",
          "2094:         }",
          "2134:         }",
          "2143:         }",
          "2199:                         break;",
          "2202:             }",
          "2203:         }",
          "2239:         } else {",
          "2282:             } else {",
          "2297:             }",
          "2408:     }",
          "2458:         }",
          "2483:         }",
          "2493:         }",
          "2499:     }",
          "2506:         }",
          "2509:     }",
          "2610:             }",
          "2615:         }",
          "2620:         }",
          "2805:         }",
          "2955:     }",
          "2960:     }",
          "2977:     }",
          "2994:     }",
          "3014:     }",
          "3126:             }",
          "3156:         }",
          "3164:     }",
          "3169:     }",
          "3172:     }",
          "3175:     }",
          "3184:     }",
          "3192:     }",
          "3223:     }",
          "3260:     }",
          "3269:     }",
          "3289:     }",
          "3345:     }",
          "3354:     }",
          "3378:         }",
          "3379:     }",
          "3384:     }",
          "3396:             }",
          "3397:         }",
          "3400:     }",
          "3424:     }",
          "3463:         }",
          "3465:     }",
          "3494:     }",
          "3558:                         $retval .= sprintf(",
          "3559:                             '<option selected=\"selected\" title=\"%s\">%s</option>',",
          "3562:                         );",
          "3567:                     } else {",
          "3568:                         $retval .= sprintf(",
          "3569:                             '<option title=\"%s\">%s</option>',",
          "3572:                         );",
          "3573:                     }",
          "3574:                 }",
          "3593:             }",
          "3604:                     }",
          "3605:                 }",
          "3610:             }",
          "3612:         }",
          "3654:         }",
          "3655:     }",
          "3678:     }",
          "3753:             $funcs[] = array('display' => '--------');",
          "3754:         }",
          "3775:         }",
          "3779:         }",
          "3788:     }",
          "3819:         }",
          "3895:     }",
          "3905:         }",
          "3909:         }",
          "3975:             sprintf(",
          "3976:                 $query,",
          "3978:                 $username,",
          "3981:             )",
          "3982:         );",
          "3984:             return true;",
          "3985:         }",
          "3989:         return false;",
          "3990:     }",
          "4009:         }",
          "4010:     }",
          "4033:     }",
          "4129:             $values[] = $buffer;",
          "4133:         }",
          "4140:     }",
          "4143: }",
          "4145: ?>",
          "",
          "[Removed Lines]",
          "14: function PMA_detectPow()",
          "15: {",
          "16:     if (function_exists('bcpow')) {",
          "18:         return 'bcpow';",
          "19:     } elseif (function_exists('gmp_pow')) {",
          "21:         return 'gmp_pow';",
          "22:     } else {",
          "24:         return 'pow';",
          "25:     }",
          "26: }",
          "38: function PMA_pow($base, $exp, $use_function = false)",
          "40:     static $pow_function = null;",
          "42:     if ($pow_function == null) {",
          "43:         $pow_function = PMA_detectPow();",
          "46:     if (! $use_function) {",
          "47:         $use_function = $pow_function;",
          "48:     }",
          "50:     if (($exp < 0) && ($use_function != 'pow')) {",
          "51:         return false;",
          "52:     }",
          "54:     switch ($use_function) {",
          "55:     case 'bcpow' :",
          "57:         bcscale(10);",
          "58:         $pow = bcpow($base, $exp);",
          "59:         break;",
          "60:     case 'gmp_pow' :",
          "61:          $pow = gmp_strval(gmp_pow($base, $exp));",
          "62:         break;",
          "63:     case 'pow' :",
          "64:         $base = (float) $base;",
          "65:         $exp = (int) $exp;",
          "66:         $pow = pow($base, $exp);",
          "67:         break;",
          "68:     default:",
          "69:         $pow = $use_function($base, $exp);",
          "70:     }",
          "72:     return $pow;",
          "73: }",
          "88: function PMA_getIcon($icon, $alternate = '', $force_text = false)",
          "89: {",
          "91:     $include_icon = ($GLOBALS['cfg']['PropertiesIconic'] !== false);",
          "94:     $include_text = ($force_text || ($GLOBALS['cfg']['PropertiesIconic'] !== true));",
          "97:     $button = '<span class=\"nowrap\">';",
          "98:     if ($include_icon) {",
          "99:         $button .= PMA_getImage($icon, $alternate);",
          "100:     }",
          "101:     if ($include_icon && $include_text) {",
          "102:         $button .= ' ';",
          "103:     }",
          "104:     if ($include_text) {",
          "105:         $button .= $alternate;",
          "106:     }",
          "107:     $button .= '</span>';",
          "109:     return $button;",
          "110: }",
          "123: function PMA_getImage($image, $alternate = '', $attributes = array())",
          "124: {",
          "125:     static $sprites; // cached list of available sprites (if any)",
          "127:     $url       = '';",
          "128:     $is_sprite = false;",
          "129:     $alternate = htmlspecialchars($alternate);",
          "132:     if (! isset($sprites)) {",
          "134:         if (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {",
          "135:             include_once $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';",
          "136:             $sprites = PMA_sprites();",
          "137:         } else {",
          "139:             $sprites = array();",
          "141:     }",
          "145:     $class = str_replace(array('.gif','.png'), '', $image);",
          "146:     if (array_key_exists($class, $sprites)) {",
          "147:         $is_sprite = true;",
          "148:         $url = (defined('PMA_TEST_THEME') ? '../' : '') . 'themes/dot.gif';",
          "149:     } else {",
          "150:         $url = $GLOBALS['pmaThemeImage'] . $image;",
          "151:     }",
          "154:     if ($is_sprite) {",
          "155:         if (isset($attributes['class'])) {",
          "156:             $attributes['class'] = \"icon ic_$class \" . $attributes['class'];",
          "157:         } else {",
          "158:             $attributes['class'] = \"icon ic_$class\";",
          "160:     }",
          "163:     $attr_str = '';",
          "164:     foreach ($attributes as $key => $value) {",
          "165:         if (! in_array($key, array('alt', 'title'))) {",
          "166:             $attr_str .= \" $key=\\\"$value\\\"\";",
          "171:     if (isset($attributes['alt'])) {",
          "172:         $alt = $attributes['alt'];",
          "173:     } else {",
          "174:         $alt = $alternate;",
          "175:     }",
          "178:     if (isset($attributes['title'])) {",
          "179:         $title = $attributes['title'];",
          "180:     } else {",
          "181:         $title = $alternate;",
          "182:     }",
          "185:     $template = '<img src=\"%s\" title=\"%s\" alt=\"%s\"%s />';",
          "186:     $retval = sprintf($template, $url, $title, $alt, $attr_str);",
          "188:     return $retval;",
          "189: }",
          "201: function PMA_getFormattedMaximumUploadSize($max_upload_size)",
          "202: {",
          "205:     list($max_size, $max_unit) = PMA_formatByteDown($max_upload_size, 4);",
          "206:     return '(' . sprintf(__('Max: %s%s'), $max_size, $max_unit) . ')';",
          "207: }",
          "220: function PMA_generateHiddenMaxFileSize($max_size)",
          "221: {",
          "222:     return '<input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"' .$max_size . '\" />';",
          "223: }",
          "242: function PMA_sqlAddSlashes(",
          "243:     $a_string = '', $is_like = false, $crlf = false, $php_code = false",
          "244: ) {",
          "246:     if ($is_like) {",
          "247:         $a_string = str_replace('\\\\', '\\\\\\\\\\\\\\\\', $a_string);",
          "248:     } else {",
          "249:         $a_string = str_replace('\\\\', '\\\\\\\\', $a_string);",
          "250:     }",
          "252:     if ($crlf) {",
          "253:         $a_string = strtr(",
          "254:             $a_string,",
          "255:             array(\"\\n\" => '\\n', \"\\r\" => '\\r', \"\\t\" => '\\t')",
          "256:         );",
          "257:     }",
          "259:     if ($php_code) {",
          "260:         $a_string = str_replace('\\'', '\\\\\\'', $a_string);",
          "261:     } else {",
          "262:         $a_string = str_replace('\\'', '\\'\\'', $a_string);",
          "265:     return $a_string;",
          "266: } // end of the 'PMA_sqlAddSlashes()' function",
          "280: function PMA_escapeMysqlWildcards($name)",
          "281: {",
          "282:     return strtr($name, array('_' => '\\\\_', '%' => '\\\\%'));",
          "283: } // end of the 'PMA_escapeMysqlWildcards()' function",
          "296: function PMA_unescapeMysqlWildcards($name)",
          "297: {",
          "298:     return strtr($name, array('\\\\_' => '_', '\\\\%' => '%'));",
          "299: } // end of the 'PMA_unescapeMysqlWildcards()' function",
          "312: function PMA_unQuote($quoted_string, $quote = null)",
          "313: {",
          "314:     $quotes = array();",
          "316:     if ($quote === null) {",
          "317:         $quotes[] = '`';",
          "318:         $quotes[] = '\"';",
          "319:         $quotes[] = \"'\";",
          "320:     } else {",
          "321:         $quotes[] = $quote;",
          "322:     }",
          "324:     foreach ($quotes as $quote) {",
          "325:         if (substr($quoted_string, 0, 1) === $quote",
          "326:             && substr($quoted_string, -1, 1) === $quote",
          "327:         ) {",
          "328:             $unquoted_string = substr($quoted_string, 1, -1);",
          "330:             $unquoted_string = str_replace(",
          "331:                 $quote . $quote,",
          "332:                 $quote,",
          "333:                 $unquoted_string",
          "335:             return $unquoted_string;",
          "337:     }",
          "339:     return $quoted_string;",
          "340: }",
          "357: function PMA_formatSql($parsed_sql, $unparsed_sql = '')",
          "358: {",
          "359:     global $cfg;",
          "364:     if (PMA_SQP_isError()) {",
          "365:         return htmlspecialchars($parsed_sql['raw']);",
          "366:     }",
          "368:     if (! is_array($parsed_sql)) {",
          "371:         $formatted_sql = \"<pre>\\n\";",
          "372:         if (($cfg['SQP']['fmtType'] == 'none') && ($unparsed_sql != '')) {",
          "373:             $formatted_sql .= $unparsed_sql;",
          "375:             $formatted_sql .= $parsed_sql;",
          "377:         $formatted_sql .= \"\\n</pre>\";",
          "378:         return $formatted_sql;",
          "379:     }",
          "381:     $formatted_sql = '';",
          "383:     switch ($cfg['SQP']['fmtType']) {",
          "384:     case 'none':",
          "385:         if ($unparsed_sql != '') {",
          "386:             $formatted_sql = '<span class=\"inner_sql\"><pre>' . \"\\n\"",
          "387:                 . PMA_SQP_formatNone(array('raw' => $unparsed_sql)) . \"\\n\"",
          "388:                 . '</pre></span>';",
          "389:         } else {",
          "390:             $formatted_sql = PMA_SQP_formatNone($parsed_sql);",
          "391:         }",
          "392:         break;",
          "393:     case 'html':",
          "394:         $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'color');",
          "395:         break;",
          "396:     case 'text':",
          "397:         $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'text');",
          "398:         break;",
          "399:     default:",
          "400:         break;",
          "401:     } // end switch",
          "403:     return $formatted_sql;",
          "404: } // end of the \"PMA_formatSql()\" function",
          "417: function PMA_showDocLink($link, $target = 'documentation')",
          "418: {",
          "419:     return '<a href=\"' . $link . '\" target=\"' . $target . '\">'",
          "420:         . PMA_getImage('b_help.png', __('Documentation'))",
          "421:         . '</a>';",
          "422: } // end of the 'PMA_showDocLink()' function",
          "438: function PMA_showMySQLDocu(",
          "439:     $chapter, $link, $big_icon = false, $anchor = '', $just_open = false",
          "440: ) {",
          "442:     global $cfg;",
          "444:     if (($cfg['MySQLManualType'] == 'none') || empty($cfg['MySQLManualBase'])) {",
          "445:         return '';",
          "449:     $chapter = str_replace('_', '-', strtolower($chapter));",
          "450:     $link = str_replace('_', '-', strtolower($link));",
          "452:     switch ($cfg['MySQLManualType']) {",
          "453:     case 'chapters':",
          "454:         if (empty($chapter)) {",
          "455:             $chapter = 'index';",
          "456:         }",
          "457:         if (empty($anchor)) {",
          "458:             $anchor = $link;",
          "459:         }",
          "460:         $url = $cfg['MySQLManualBase'] . '/' . $chapter . '.html#' . $anchor;",
          "461:         break;",
          "462:     case 'big':",
          "463:         if (empty($anchor)) {",
          "464:             $anchor = $link;",
          "465:         }",
          "466:         $url = $cfg['MySQLManualBase'] . '#' . $anchor;",
          "467:         break;",
          "468:     case 'searchable':",
          "469:         if (empty($link)) {",
          "470:             $link = 'index';",
          "471:         }",
          "472:         $url = $cfg['MySQLManualBase'] . '/' . $link . '.html';",
          "473:         if (! empty($anchor)) {",
          "474:             $url .= '#' . $anchor;",
          "475:         }",
          "476:         break;",
          "477:     case 'viewable':",
          "478:     default:",
          "479:         if (empty($link)) {",
          "480:             $link = 'index';",
          "481:         }",
          "482:         $mysql = '5.0';",
          "483:         $lang = 'en';",
          "484:         if (defined('PMA_MYSQL_INT_VERSION')) {",
          "485:             if (PMA_MYSQL_INT_VERSION >= 50500) {",
          "486:                 $mysql = '5.5';",
          "488:                 $lang = _pgettext('MySQL 5.5 documentation language', 'en');",
          "489:             } else if (PMA_MYSQL_INT_VERSION >= 50100) {",
          "490:                 $mysql = '5.1';",
          "492:                 $lang = _pgettext('MySQL 5.1 documentation language', 'en');",
          "494:                 $mysql = '5.0';",
          "496:                 $lang = _pgettext('MySQL 5.0 documentation language', 'en');",
          "499:         $url = $cfg['MySQLManualBase']",
          "500:             . '/' . $mysql . '/' . $lang . '/' . $link . '.html';",
          "501:         if (! empty($anchor)) {",
          "502:             $url .= '#' . $anchor;",
          "503:         }",
          "504:         break;",
          "505:     }",
          "507:     $open_link = '<a href=\"' . PMA_linkURL($url) . '\" target=\"mysql_doc\">';",
          "508:     if ($just_open) {",
          "509:         return $open_link;",
          "510:     } elseif ($big_icon) {",
          "511:         return $open_link",
          "512:             . PMA_getImage('b_sqlhelp.png', __('Documentation')) . '</a>';",
          "513:     } else {",
          "514:         return PMA_showDocLink(PMA_linkURL($url), 'mysql_doc');",
          "515:     }",
          "517: } // end of the 'PMA_showMySQLDocu()' function",
          "529: function PMA_showDocu($anchor)",
          "530: {",
          "531:     return PMA_showDocLink('Documentation.html#' . $anchor);",
          "532: } // end of the 'PMA_showDocu()' function",
          "544: function PMA_showPHPDocu($target)",
          "545: {",
          "546:     $url = PMA_getPHPDocLink($target);",
          "548:     return PMA_showDocLink($url);",
          "549: } // end of the 'PMA_showPHPDocu()' function",
          "561: function PMA_showHint($message)",
          "562: {",
          "563:     return '<span class=\"pma_hint\">'",
          "564:         . PMA_getImage('b_help.png')",
          "565:         . '<span class=\"hide\">' . $message . '</span>'",
          "566:         . '</span>';",
          "567: }",
          "586: function PMA_mysqlDie(",
          "587:     $error_message = '', $the_query = '',",
          "588:     $is_modify_link = true, $back_url = '', $exit = true",
          "589: ) {",
          "591:     global $table, $db;",
          "593:     $error_msg = '';",
          "595:     if (! $error_message) {",
          "596:         $error_message = PMA_DBI_getError();",
          "597:     }",
          "598:     if (! $the_query && ! empty($GLOBALS['sql_query'])) {",
          "599:         $the_query = $GLOBALS['sql_query'];",
          "600:     }",
          "603:     if (! function_exists('PMA_SQP_isError') || PMA_SQP_isError()) {",
          "604:         $formatted_sql = htmlspecialchars($the_query);",
          "605:     } elseif (empty($the_query) || (trim($the_query) == '')) {",
          "606:         $formatted_sql = '';",
          "607:     } else {",
          "608:         if (strlen($the_query) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {",
          "609:             $formatted_sql = htmlspecialchars(",
          "610:                 substr($the_query, 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'])",
          "611:             )",
          "612:             . '[...]';",
          "614:             $formatted_sql = PMA_formatSql(PMA_SQP_parse($the_query), $the_query);",
          "618:     $error_msg .= \"\\n\" . '<!-- PMA-SQL-ERROR -->' . \"\\n\";",
          "619:     $error_msg .= '    <div class=\"error\"><h1>' . __('Error')",
          "620:         . '</h1>' . \"\\n\";",
          "624:     if (! empty($the_query) && ! strstr($the_query, 'connect')) {",
          "626:         if (function_exists('PMA_SQP_isError') && PMA_SQP_isError()) {",
          "627:             $error_msg .= PMA_SQP_getErrorString() . \"\\n\";",
          "628:             $error_msg .= '<br />' . \"\\n\";",
          "632:         $error_msg .= '<p><strong>' . __('SQL query') . ':</strong>' . \"\\n\";",
          "633:         if (strstr(strtolower($formatted_sql), 'select')) {",
          "635:             $error_msg .= PMA_showMySQLDocu('SQL-Syntax', 'SELECT');",
          "636:         }",
          "637:         if ($is_modify_link) {",
          "638:             $_url_params = array(",
          "639:                 'sql_query' => $the_query,",
          "640:                 'show_query' => 1,",
          "641:             );",
          "642:             if (strlen($table)) {",
          "643:                 $_url_params['db'] = $db;",
          "644:                 $_url_params['table'] = $table;",
          "645:                 $doedit_goto = '<a href=\"tbl_sql.php'",
          "646:                     . PMA_generate_common_url($_url_params) . '\">';",
          "647:             } elseif (strlen($db)) {",
          "648:                 $_url_params['db'] = $db;",
          "649:                 $doedit_goto = '<a href=\"db_sql.php'",
          "650:                     . PMA_generate_common_url($_url_params) . '\">';",
          "651:             } else {",
          "652:                 $doedit_goto = '<a href=\"server_sql.php'",
          "653:                     . PMA_generate_common_url($_url_params) . '\">';",
          "656:             $error_msg .= $doedit_goto",
          "657:                . PMA_getIcon('b_edit.png', __('Edit'))",
          "658:                . '</a>';",
          "660:         $error_msg .= '    </p>' . \"\\n\"",
          "661:             .'<p>' . \"\\n\"",
          "662:             . $formatted_sql . \"\\n\"",
          "663:             . '</p>' . \"\\n\";",
          "664:     } // end if",
          "666:     if (! empty($error_message)) {",
          "667:         $error_message = preg_replace(",
          "668:             \"@((\\015\\012)|(\\015)|(\\012)){3,}@\",",
          "669:             \"\\n\\n\",",
          "670:             $error_message",
          "671:         );",
          "672:     }",
          "675:     $error_msg .= '<p>' . \"\\n\"",
          "676:         . '    <strong>' . __('MySQL said: ') . '</strong>'",
          "677:         . PMA_showMySQLDocu('Error-messages-server', 'Error-messages-server')",
          "678:         . \"\\n\"",
          "679:         . '</p>' . \"\\n\";",
          "686:     $error_message = str_replace('  ', '&nbsp;&nbsp;', $error_message);",
          "688:     $error_message = str_replace(\"\\t\", '&nbsp;&nbsp;&nbsp;&nbsp;', $error_message);",
          "690:     $error_message = nl2br($error_message);",
          "692:     $error_msg .= '<code>' . \"\\n\"",
          "693:         . $error_message . \"\\n\"",
          "694:         . '</code><br />' . \"\\n\";",
          "695:     $error_msg .= '</div>';",
          "697:     $_SESSION['Import_message']['message'] = $error_msg;",
          "699:     if ($exit) {",
          "705:         if ($GLOBALS['is_ajax_request'] == true) {",
          "706:             $response = PMA_Response::getInstance();",
          "707:             $response->isSuccess(false);",
          "708:             $response->addJSON('message', $error_msg);",
          "709:             exit;",
          "711:         if (! empty($back_url)) {",
          "712:             if (strstr($back_url, '?')) {",
          "713:                 $back_url .= '&amp;no_history=true';",
          "714:             } else {",
          "715:                 $back_url .= '?no_history=true';",
          "716:             }",
          "718:             $_SESSION['Import_message']['go_back_url'] = $back_url;",
          "720:             $error_msg .= '<fieldset class=\"tblFooters\">';",
          "721:             $error_msg .= '[ <a href=\"' . $back_url . '\">' . __('Back') . '</a> ]';",
          "722:             $error_msg .= '</fieldset>' . \"\\n\\n\";",
          "723:         }",
          "725:         echo $error_msg;",
          "726:         exit;",
          "727:     } else {",
          "728:         echo $error_msg;",
          "729:     }",
          "730: } // end of the 'PMA_mysqlDie()' function",
          "743: function PMA_getTableList($db, $tables = null, $limit_offset = 0,",
          "744:     $limit_count = false",
          "745: ) {",
          "746:     $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];",
          "748:     if ($tables === null) {",
          "749:         $tables = PMA_DBI_get_tables_full(",
          "750:             $db, false, false, null, $limit_offset, $limit_count",
          "751:         );",
          "752:         if ($GLOBALS['cfg']['NaturalOrder']) {",
          "753:             uksort($tables, 'strnatcasecmp');",
          "755:     }",
          "757:     if (count($tables) < 1) {",
          "758:         return $tables;",
          "759:     }",
          "761:     $default = array(",
          "762:         'Name'      => '',",
          "763:         'Rows'      => 0,",
          "764:         'Comment'   => '',",
          "765:         'disp_name' => '',",
          "766:     );",
          "768:     $table_groups = array();",
          "770:     foreach ($tables as $table_name => $table) {",
          "772:         if ($table['Rows'] === null) {",
          "782:             $tbl_is_view = $table['TABLE_TYPE'] == 'VIEW';",
          "784:             if ($tbl_is_view || PMA_is_system_schema($db)) {",
          "785:                 $table['Rows'] = PMA_Table::countRecords(",
          "786:                     $db,",
          "787:                     $table['Name'],",
          "788:                     false,",
          "789:                     true",
          "790:                 );",
          "796:         if ($GLOBALS['cfg']['LeftFrameDBTree']",
          "797:             && $sep && strstr($table_name, $sep)",
          "798:         ) {",
          "800:             $parts = explode($sep, $table_name);",
          "802:             $group =& $table_groups;",
          "803:             $i = 0;",
          "804:             $group_name_full = '';",
          "805:             $parts_cnt = count($parts) - 1;",
          "807:             while (($i < $parts_cnt)",
          "808:                 && ($i < $GLOBALS['cfg']['LeftFrameTableLevel'])",
          "809:             ) {",
          "811:                 $group_name = $parts[$i] . $sep;",
          "812:                 $group_name_full .= $group_name;",
          "814:                 if (! isset($group[$group_name])) {",
          "816:                     $group[$group_name] = array();",
          "817:                     $group[$group_name]['is' . $sep . 'group'] = true;",
          "818:                     $group[$group_name]['tab' . $sep . 'count'] = 1;",
          "819:                     $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;",
          "821:                 } elseif (! isset($group[$group_name]['is' . $sep . 'group'])) {",
          "823:                     $table = $group[$group_name];",
          "824:                     $group[$group_name] = array();",
          "825:                     $group[$group_name][$group_name] = $table;",
          "826:                     unset($table);",
          "827:                     $group[$group_name]['is' . $sep . 'group'] = true;",
          "828:                     $group[$group_name]['tab' . $sep . 'count'] = 1;",
          "829:                     $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;",
          "831:                 } else {",
          "832:                     $group[$group_name]['tab' . $sep . 'count']++;",
          "835:                 $group =& $group[$group_name];",
          "836:                 $i++;",
          "837:             }",
          "839:         } else {",
          "840:             if (! isset($table_groups[$table_name])) {",
          "841:                 $table_groups[$table_name] = array();",
          "843:             $group =& $table_groups;",
          "844:         }",
          "847:         if ($GLOBALS['cfg']['ShowTooltipAliasTB']",
          "848:             && $GLOBALS['cfg']['ShowTooltipAliasTB'] !== 'nested'",
          "849:             && $table['Comment'] // do not switch if the comment is empty",
          "850:             && $table['Comment'] != 'VIEW' // happens in MySQL 5.1",
          "851:         ) {",
          "853:             $table['disp_name'] = $table['Comment'];",
          "854:             $table['Comment'] = $table['Name'];",
          "855:         } else {",
          "856:             $table['disp_name'] = $table['Name'];",
          "857:         }",
          "859:         $group[$table_name] = array_merge($default, $table);",
          "860:     }",
          "862:     return $table_groups;",
          "863: }",
          "888: function PMA_backquote($a_name, $do_it = true)",
          "889: {",
          "891:     if (is_array($a_name)) {",
          "892:         foreach ($a_name as &$data) {",
          "893:             $data = PMA_backquote($data, $do_it);",
          "894:         }",
          "895:         return $a_name;",
          "896:     }",
          "898:     if (! $do_it) {",
          "899:         global $PMA_SQPdata_forbidden_word;",
          "901:         if (! in_array(strtoupper($a_name), $PMA_SQPdata_forbidden_word)) {",
          "902:             return $a_name;",
          "903:         }",
          "904:     }",
          "907:     if (strlen($a_name) && $a_name !== '*') {",
          "908:         return '`' . str_replace('`', '``', $a_name) . '`';",
          "909:     } else {",
          "910:         return $a_name;",
          "911:     }",
          "913: } // end of the 'PMA_backquote()' function",
          "923: function PMA_whichCrlf()",
          "924: {",
          "927:     if (PMA_USR_OS == 'Win') {",
          "928:         $the_crlf = \"\\r\\n\";",
          "929:     } else {",
          "931:         $the_crlf = \"\\n\";",
          "932:     }",
          "934:     return $the_crlf;",
          "935: } // end of the 'PMA_whichCrlf()' function",
          "947: function PMA_getReloadNavigationScript($jsonly = false)",
          "948: {",
          "949:     $retval = '';",
          "951:     if (isset($GLOBALS['reload']) && $GLOBALS['reload']) {",
          "956:         unset($_SESSION['tmp_user_values']['table_limit_offset']);",
          "957:         $reload_url = './navigation.php?' . PMA_generate_common_url(",
          "958:             $GLOBALS['db'],",
          "959:             '',",
          "960:             '&'",
          "961:         );",
          "963:         if (! $jsonly) {",
          "964:             $retval .= '<script type=\"text/javascript\">' . PHP_EOL;",
          "965:         }",
          "966:         $retval .= '//<![CDATA[' . PHP_EOL;",
          "967:         $retval .= 'if (typeof(window.parent) != \"undefined\"' . PHP_EOL;",
          "968:         $retval .= '    && typeof(window.parent.frame_navigation) != \"undefined\"'",
          "969:              . PHP_EOL;",
          "970:         $retval .= '    && window.parent.goTo) {' . PHP_EOL;",
          "971:         $retval .= '    window.parent.goTo(\"' . $reload_url . '\");' . PHP_EOL;",
          "972:         $retval .= '}' . PHP_EOL;",
          "973:         $retval .= '//]]>' . PHP_EOL;",
          "975:         if (! $jsonly) {",
          "976:             $retval .= '</script>' . PHP_EOL;",
          "977:         }",
          "979:         unset($GLOBALS['reload']);",
          "981:     return $retval;",
          "982: }",
          "998: function PMA_getMessage(",
          "999:     $message, $sql_query = null, $type = 'notice', $is_view = false",
          "1000: ) {",
          "1002:     global $cfg;",
          "1003:     $retval = '';",
          "1005:     if (null === $sql_query) {",
          "1006:         if (! empty($GLOBALS['display_query'])) {",
          "1007:             $sql_query = $GLOBALS['display_query'];",
          "1008:         } elseif ($cfg['SQP']['fmtType'] == 'none'",
          "1009:             && ! empty($GLOBALS['unparsed_sql'])",
          "1010:         ) {",
          "1011:             $sql_query = $GLOBALS['unparsed_sql'];",
          "1012:         } elseif (! empty($GLOBALS['sql_query'])) {",
          "1013:             $sql_query = $GLOBALS['sql_query'];",
          "1014:         } else {",
          "1015:             $sql_query = '';",
          "1017:     }",
          "1019:     if (isset($GLOBALS['using_bookmark_message'])) {",
          "1020:         $retval .= $GLOBALS['using_bookmark_message']->getDisplay();",
          "1021:         unset($GLOBALS['using_bookmark_message']);",
          "1022:     }",
          "1026:     if (! $is_view && strlen($GLOBALS['table']) && $cfg['ShowTooltip']) {",
          "1027:         $tooltip = PMA_Table::sGetToolTip($GLOBALS['db'], $GLOBALS['table']);",
          "1028:         $uni_tbl = PMA_jsFormat($GLOBALS['db'] . '.' . $GLOBALS['table'], false);",
          "1029:         $retval .= \"\\n\";",
          "1030:         $retval .= '<script type=\"text/javascript\">' . \"\\n\";",
          "1031:         $retval .= '//<![CDATA[' . \"\\n\";",
          "1032:         $retval .= 'if (window.parent.updateTableTitle) {' . \"\\n\";",
          "1033:         $retval .= \"    window.parent.updateTableTitle('\"",
          "1034:             . $uni_tbl . \"', '\" . PMA_jsFormat($tooltip, false) . \"');\" . \"\\n\";",
          "1035:         $retval .= '}' . \"\\n\";",
          "1036:         $retval .= '//]]>' . \"\\n\";",
          "1037:         $retval .= '</script>' . \"\\n\";",
          "1038:     } // end if ... elseif",
          "1042:     $retval .= '<div id=\"result_query\"'",
          "1043:         . ( isset($GLOBALS['cell_align_left'])",
          "1044:             ? ' style=\"text-align: ' . $GLOBALS['cell_align_left'] . '\"'",
          "1045:             : '' )",
          "1046:         . '>' . \"\\n\";",
          "1048:     if ($message instanceof PMA_Message) {",
          "1049:         if (isset($GLOBALS['special_message'])) {",
          "1050:             $message->addMessage($GLOBALS['special_message']);",
          "1051:             unset($GLOBALS['special_message']);",
          "1052:         }",
          "1053:         $retval .= $message->getDisplay();",
          "1054:     } else {",
          "1055:         $retval .= '<div class=\"' . $type . '\">';",
          "1056:         $retval .= PMA_sanitize($message);",
          "1057:         if (isset($GLOBALS['special_message'])) {",
          "1058:             $retval .= PMA_sanitize($GLOBALS['special_message']);",
          "1059:             unset($GLOBALS['special_message']);",
          "1061:         $retval .= '</div>';",
          "1062:     }",
          "1064:     if ($cfg['ShowSQL'] == true && ! empty($sql_query)) {",
          "1069:         if (! empty($GLOBALS['show_as_php'])) {",
          "1070:             $new_line = '\\\\n\"<br />' . \"\\n\"",
          "1071:                 . '&nbsp;&nbsp;&nbsp;&nbsp;. \"';",
          "1072:             $query_base = htmlspecialchars(addslashes($sql_query));",
          "1073:             $query_base = preg_replace(",
          "1074:                 '/((\\015\\012)|(\\015)|(\\012))/', $new_line, $query_base",
          "1075:             );",
          "1077:             $query_base = $sql_query;",
          "1080:         $query_too_big = false;",
          "1082:         if (strlen($query_base) > $cfg['MaxCharactersInDisplayedSQL']) {",
          "1085:             $query_too_big = true;",
          "1086:             $shortened_query_base = nl2br(",
          "1087:                 htmlspecialchars(",
          "1088:                     substr($sql_query, 0, $cfg['MaxCharactersInDisplayedSQL'])",
          "1089:                     . '[...]'",
          "1090:                 )",
          "1091:             );",
          "1092:         } elseif (! empty($GLOBALS['parsed_sql'])",
          "1093:          && $query_base == $GLOBALS['parsed_sql']['raw']) {",
          "1096:             $parsed_sql = $GLOBALS['parsed_sql'];",
          "1099:             $parsed_sql = PMA_SQP_parse($query_base);",
          "1103:         if (isset($parsed_sql) && ! PMA_SQP_isError()) {",
          "1104:             $analyzed_display_query = PMA_SQP_analyze($parsed_sql);",
          "1107:             if ($GLOBALS['cfg']['RememberSorting']",
          "1108:                 && isset($analyzed_display_query[0]['queryflags']['select_from'])",
          "1109:                 && isset($GLOBALS['sql_order_to_append'])",
          "1110:             ) {",
          "1111:                 $query_base = $analyzed_display_query[0]['section_before_limit']",
          "1112:                     . \"\\n\" . $GLOBALS['sql_order_to_append']",
          "1113:                     . $analyzed_display_query[0]['limit_clause'] . ' '",
          "1114:                     . $analyzed_display_query[0]['section_after_limit'];",
          "1117:                 $parsed_sql = PMA_SQP_parse($query_base);",
          "1119:                 $analyzed_display_query[0]['section_before_limit']",
          "1120:                     .= $GLOBALS['sql_order_to_append'];",
          "1121:                 $analyzed_display_query[0]['order_by_clause']",
          "1122:                     = $GLOBALS['sorted_col'];",
          "1137:             if (isset($analyzed_display_query[0]['queryflags']['select_from'])",
          "1138:                 && isset($GLOBALS['sql_limit_to_append'])",
          "1140:                 $query_base = $analyzed_display_query[0]['section_before_limit']",
          "1141:                     . \"\\n\" . $GLOBALS['sql_limit_to_append']",
          "1142:                     . $analyzed_display_query[0]['section_after_limit'];",
          "1144:                 $parsed_sql = PMA_SQP_parse($query_base);",
          "1148:         if (! empty($GLOBALS['show_as_php'])) {",
          "1149:             $query_base = '$sql  = \"' . $query_base;",
          "1150:         } elseif (! empty($GLOBALS['validatequery'])) {",
          "1151:             try {",
          "1152:                 $query_base = PMA_validateSQL($query_base);",
          "1153:             } catch (Exception $e) {",
          "1154:                 $retval .= PMA_Message::error(",
          "1155:                     __('Failed to connect to SQL validator!')",
          "1156:                 )->getDisplay();",
          "1157:             }",
          "1158:         } elseif (isset($parsed_sql)) {",
          "1159:             $query_base = PMA_formatSql($parsed_sql, $query_base);",
          "1167:         $url_params = array();",
          "1168:         if (! isset($GLOBALS['db'])) {",
          "1169:             $GLOBALS['db'] = '';",
          "1170:         }",
          "1171:         if (strlen($GLOBALS['db'])) {",
          "1172:             $url_params['db'] = $GLOBALS['db'];",
          "1173:             if (strlen($GLOBALS['table'])) {",
          "1174:                 $url_params['table'] = $GLOBALS['table'];",
          "1175:                 $edit_link = 'tbl_sql.php';",
          "1176:             } else {",
          "1177:                 $edit_link = 'db_sql.php';",
          "1180:             $edit_link = 'server_sql.php';",
          "1181:         }",
          "1186:         $explain_link = '';",
          "1187:         $is_select = false;",
          "1188:         if (! empty($cfg['SQLQuery']['Explain']) && ! $query_too_big) {",
          "1189:             $explain_params = $url_params;",
          "1192:             if (! empty($GLOBALS['validatequery'])) {",
          "1193:                 $explain_params['validatequery'] = 1;",
          "1195:             if (preg_match('@^SELECT[[:space:]]+@i', $sql_query)) {",
          "1196:                 $explain_params['sql_query'] = 'EXPLAIN ' . $sql_query;",
          "1197:                 $_message = __('Explain SQL');",
          "1198:                 $is_select = true;",
          "1199:             } elseif (",
          "1200:                 preg_match('@^EXPLAIN[[:space:]]+SELECT[[:space:]]+@i', $sql_query)",
          "1201:             ) {",
          "1202:                 $explain_params['sql_query'] = substr($sql_query, 8);",
          "1203:                 $_message = __('Skip Explain SQL');",
          "1204:             }",
          "1205:             if (isset($explain_params['sql_query'])) {",
          "1206:                 $explain_link = 'import.php'",
          "1207:                     . PMA_generate_common_url($explain_params);",
          "1208:                 $explain_link = ' ['",
          "1209:                     . PMA_linkOrButton($explain_link, $_message) . ']';",
          "1210:             }",
          "1211:         } //show explain",
          "1213:         $url_params['sql_query']  = $sql_query;",
          "1214:         $url_params['show_query'] = 1;",
          "1218:         if (! empty($cfg['SQLQuery']['Edit'])) {",
          "1219:             if ($cfg['EditInWindow'] == true) {",
          "1220:                 $onclick = 'window.parent.focus_querywindow(\\''",
          "1221:                     . PMA_jsFormat($sql_query, false) . '\\'); return false;';",
          "1223:                 $onclick = '';",
          "1226:             $edit_link .= PMA_generate_common_url($url_params) . '#querybox';",
          "1227:             $edit_link = ' ['",
          "1228:                 . PMA_linkOrButton(",
          "1229:                     $edit_link, __('Edit'), array('onclick' => $onclick)",
          "1230:                 )",
          "1231:                 . ']';",
          "1232:         } else {",
          "1233:             $edit_link = '';",
          "1234:         }",
          "1238:         if (! empty($cfg['SQLQuery']['ShowAsPHP']) && ! $query_too_big) {",
          "1239:             $php_params = $url_params;",
          "1241:             if (! empty($GLOBALS['show_as_php'])) {",
          "1242:                 $_message = __('Without PHP Code');",
          "1244:                 $php_params['show_as_php'] = 1;",
          "1245:                 $_message = __('Create PHP Code');",
          "1248:             $php_link = 'import.php' . PMA_generate_common_url($php_params);",
          "1249:             $php_link = ' [' . PMA_linkOrButton($php_link, $_message) . ']';",
          "1251:             if (isset($GLOBALS['show_as_php'])) {",
          "1252:                 $runquery_link = 'import.php' . PMA_generate_common_url($url_params);",
          "1253:                 $php_link .= ' ['",
          "1254:                     . PMA_linkOrButton($runquery_link, __('Submit Query')) . ']';",
          "1255:             }",
          "1256:         } else {",
          "1257:             $php_link = '';",
          "1258:         } //show as php",
          "1261:         if (! empty($cfg['SQLQuery']['Refresh'])",
          "1262:             && ! isset($GLOBALS['show_as_php']) // 'Submit query' does the same",
          "1263:             && preg_match('@^(SELECT|SHOW)[[:space:]]+@i', $sql_query)",
          "1264:         ) {",
          "1265:             $refresh_link = 'import.php' . PMA_generate_common_url($url_params);",
          "1266:             $refresh_link = ' ['",
          "1267:                 . PMA_linkOrButton($refresh_link, __('Refresh')) . ']';",
          "1268:         } else {",
          "1269:             $refresh_link = '';",
          "1270:         } //refresh",
          "1272:         if (! empty($cfg['SQLValidator']['use'])",
          "1273:             && ! empty($cfg['SQLQuery']['Validate'])",
          "1274:         ) {",
          "1275:             $validate_params = $url_params;",
          "1276:             if (! empty($GLOBALS['validatequery'])) {",
          "1277:                 $validate_message = __('Skip Validate SQL');",
          "1278:             } else {",
          "1279:                 $validate_params['validatequery'] = 1;",
          "1280:                 $validate_message = __('Validate SQL');",
          "1283:             $validate_link = 'import.php'",
          "1284:                 . PMA_generate_common_url($validate_params);",
          "1285:             $validate_link = ' ['",
          "1286:                 . PMA_linkOrButton($validate_link, $validate_message) . ']';",
          "1287:         } else {",
          "1288:             $validate_link = '';",
          "1289:         } //validator",
          "1291:         if (! empty($GLOBALS['validatequery'])) {",
          "1292:             $retval .= '<div class=\"sqlvalidate\">';",
          "1293:         } else {",
          "1294:             $retval .= '<code class=\"sql\">';",
          "1295:         }",
          "1296:         if ($query_too_big) {",
          "1297:             $retval .= $shortened_query_base;",
          "1298:         } else {",
          "1299:             $retval .= $query_base;",
          "1300:         }",
          "1303:         if (! empty($GLOBALS['show_as_php'])) {",
          "1304:             $retval .= '\";';",
          "1305:         }",
          "1306:         if (! empty($GLOBALS['validatequery'])) {",
          "1307:             $retval .= '</div>';",
          "1308:         } else {",
          "1309:             $retval .= '</code>';",
          "1310:         }",
          "1312:         $retval .= '<div class=\"tools\">';",
          "1315:         if (! empty($refresh_link)) {",
          "1316:             $retval .= PMA_getProfilingForm($sql_query);",
          "1317:         }",
          "1321:         if (empty($refresh_link) || ! PMA_profilingSupported()) {",
          "1322:             $retval .= '<form action=\"sql.php\" method=\"post\">';",
          "1323:             $retval .= PMA_generate_common_hidden_inputs(",
          "1324:                 $GLOBALS['db'], $GLOBALS['table']",
          "1325:             );",
          "1326:             $retval .= '<input type=\"hidden\" name=\"sql_query\" value=\"'",
          "1327:                 . htmlspecialchars($sql_query) . '\" />';",
          "1328:             $retval .= '</form>';",
          "1329:         }",
          "1334:         if ($is_select || ($GLOBALS['is_ajax_request'] === false)",
          "1335:             && ! $query_too_big",
          "1336:         ) {",
          "1339:             $retval .= \"<script type=\\\"text/javascript\\\">\\n\" .",
          "1340:                 \"//<![CDATA[\\n\" .",
          "1341:                 \"$('.tools form').last().after('[ <a href=\\\"#\\\" title=\\\"\" .",
          "1342:                 PMA_escapeJsString(__('Inline edit of this query')) .",
          "1343:                 \"\\\" class=\\\"inline_edit_sql\\\">\" .",
          "1344:                 PMA_escapeJsString(_pgettext('Inline edit query', 'Inline')) .",
          "1345:                 \"</a> ]');\\n\" .",
          "1346:                 \"//]]>\\n\" .",
          "1347:                 \"</script>\";",
          "1348:         }",
          "1349:         $retval .= $edit_link . $explain_link . $php_link",
          "1350:             . $refresh_link . $validate_link;",
          "1351:         $retval .= '</div>';",
          "1352:     }",
          "1354:     $retval .= '</div>';",
          "1355:     if ($GLOBALS['is_ajax_request'] === false) {",
          "1356:         $retval .= '<br class=\"clearfloat\" />';",
          "1357:     }",
          "1359:     return $retval;",
          "1361: } // end of the 'PMA_getMessage()' function",
          "1371: function PMA_profilingSupported()",
          "1372: {",
          "1373:     if (! PMA_cacheExists('profiling_supported', true)) {",
          "1377:         if (defined('PMA_MYSQL_INT_VERSION')",
          "1378:             && (PMA_MYSQL_INT_VERSION >= 50037)",
          "1379:             && PMA_DBI_fetch_value(\"SHOW VARIABLES LIKE 'profiling'\")",
          "1380:         ) {",
          "1381:             PMA_cacheSet('profiling_supported', true, true);",
          "1382:         } else {",
          "1383:             PMA_cacheSet('profiling_supported', false, true);",
          "1384:         }",
          "1385:     }",
          "1387:     return PMA_cacheGet('profiling_supported', true);",
          "1388: }",
          "1400: function PMA_getProfilingForm($sql_query)",
          "1401: {",
          "1402:     $retval = '';",
          "1403:     if (PMA_profilingSupported()) {",
          "1405:         $retval .= '<form action=\"sql.php\" method=\"post\">' . \"\\n\";",
          "1406:         $retval .= PMA_generate_common_hidden_inputs(",
          "1407:             $GLOBALS['db'], $GLOBALS['table']",
          "1408:         );",
          "1410:         $retval .= '<input type=\"hidden\" name=\"sql_query\" value=\"'",
          "1411:             . htmlspecialchars($sql_query) . '\" />' . \"\\n\"",
          "1412:             . '<input type=\"hidden\" name=\"profiling_form\" value=\"1\" />' . \"\\n\";",
          "1414:         $retval .= PMA_getCheckbox(",
          "1415:             'profiling', __('Profiling'), isset($_SESSION['profiling']), true",
          "1416:         );",
          "1417:         $retval .= ' </form>' . \"\\n\";",
          "1419:     }",
          "1420:     return $retval;",
          "1421: }",
          "1435: function PMA_formatByteDown($value, $limes = 6, $comma = 0)",
          "1436: {",
          "1437:     if ($value === null) {",
          "1438:         return null;",
          "1439:     }",
          "1441:     $byteUnits = array(",
          "1443:         __('B'),",
          "1445:         __('KiB'),",
          "1447:         __('MiB'),",
          "1449:         __('GiB'),",
          "1451:         __('TiB'),",
          "1453:         __('PiB'),",
          "1455:         __('EiB')",
          "1456:     );",
          "1458:     $dh   = PMA_pow(10, $comma);",
          "1459:     $li   = PMA_pow(10, $limes);",
          "1460:     $unit = $byteUnits[0];",
          "1462:     for ($d = 6, $ex = 15; $d >= 1; $d--, $ex-=3) {",
          "1463:         if (isset($byteUnits[$d]) && ($value >= $li * PMA_pow(10, $ex))) {",
          "1465:             $value = round($value / (PMA_pow(1024, $d) / $dh)) /$dh;",
          "1466:             $unit = $byteUnits[$d];",
          "1467:             break 1;",
          "1468:         } // end if",
          "1469:     } // end for",
          "1471:     if ($unit != $byteUnits[0]) {",
          "1475:         $return_value = PMA_formatNumber($value, 5, $comma, true);",
          "1476:     } else {",
          "1478:         $return_value = PMA_formatNumber($value, 0);",
          "1479:     }",
          "1481:     return array(trim($return_value), $unit);",
          "1482: } // end of the 'PMA_formatByteDown' function",
          "1492: function PMA_localizeNumber($value)",
          "1493: {",
          "1494:     return str_replace(",
          "1495:         array(',', '.'),",
          "1496:         array(",
          "1498:             __(','),",
          "1500:             __('.'),",
          "1501:         ),",
          "1502:         $value",
          "1503:     );",
          "1504: }",
          "1533: function PMA_formatNumber(",
          "1534:     $value, $digits_left = 3, $digits_right = 0,",
          "1535:     $only_down = false, $noTrailingZero = true",
          "1536: ) {",
          "1538:     if ($value == 0) {",
          "1539:         return '0';",
          "1540:     }",
          "1542:     $originalValue = $value;",
          "1544:     if ($digits_left === 0) {",
          "1545:         $value = number_format($value, $digits_right);",
          "1546:         if (($originalValue != 0) && (floatval($value) == 0)) {",
          "1547:             $value = ' <' . (1 / PMA_pow(10, $digits_right));",
          "1550:         return PMA_localizeNumber($value);",
          "1551:     }",
          "1554:     $units = array(",
          "1555:         -8 => 'y',",
          "1556:         -7 => 'z',",
          "1557:         -6 => 'a',",
          "1558:         -5 => 'f',",
          "1559:         -4 => 'p',",
          "1560:         -3 => 'n',",
          "1561:         -2 => '&micro;',",
          "1562:         -1 => 'm',",
          "1563:         0 => ' ',",
          "1564:         1 => 'k',",
          "1565:         2 => 'M',",
          "1566:         3 => 'G',",
          "1567:         4 => 'T',",
          "1568:         5 => 'P',",
          "1569:         6 => 'E',",
          "1570:         7 => 'Z',",
          "1571:         8 => 'Y'",
          "1572:     );",
          "1575:     if ($value < 0) {",
          "1576:         $sign = '-';",
          "1577:         $value = abs($value);",
          "1578:     } else {",
          "1579:         $sign = '';",
          "1582:     $dh = PMA_pow(10, $digits_right);",
          "1588:     $d = floor(log10($value) / 3);",
          "1594:     $cur_digits = floor(log10($value / PMA_pow(1000, $d, 'pow'))+1);",
          "1595:     if ($digits_left > $cur_digits) {",
          "1596:         $d -= floor(($digits_left - $cur_digits)/3);",
          "1597:     }",
          "1599:     if ($d < 0 && $only_down) {",
          "1600:         $d = 0;",
          "1603:     $value = round($value / (PMA_pow(1000, $d, 'pow') / $dh)) /$dh;",
          "1604:     $unit = $units[$d];",
          "1607:     if ($noTrailingZero) {",
          "1608:         $value = PMA_localizeNumber(",
          "1609:             preg_replace('/(?<=\\d)(?=(\\d{3})+(?!\\d))/', ',', $value)",
          "1611:     } else {",
          "1613:         $value = PMA_localizeNumber(number_format($value, $digits_right));",
          "1614:     }",
          "1616:     if ($originalValue != 0 && floatval($value) == 0) {",
          "1617:         return ' <' . (1 / PMA_pow(10, $digits_right)) . ' ' . $unit;",
          "1618:     }",
          "1620:     return $sign . $value . ' ' . $unit;",
          "1621: } // end of the 'PMA_formatNumber' function",
          "1631: function PMA_extractValueFromFormattedSize($formatted_size)",
          "1632: {",
          "1633:     $return_value = -1;",
          "1635:     if (preg_match('/^[0-9]+GB$/', $formatted_size)) {",
          "1636:         $return_value = substr($formatted_size, 0, -2) * PMA_pow(1024, 3);",
          "1637:     } elseif (preg_match('/^[0-9]+MB$/', $formatted_size)) {",
          "1638:         $return_value = substr($formatted_size, 0, -2) * PMA_pow(1024, 2);",
          "1639:     } elseif (preg_match('/^[0-9]+K$/', $formatted_size)) {",
          "1640:         $return_value = substr($formatted_size, 0, -1) * PMA_pow(1024, 1);",
          "1642:     return $return_value;",
          "1643: }// end of the 'PMA_extractValueFromFormattedSize' function",
          "1656: function PMA_localisedDate($timestamp = -1, $format = '')",
          "1657: {",
          "1658:     $month = array(",
          "1660:         __('Jan'),",
          "1662:         __('Feb'),",
          "1664:         __('Mar'),",
          "1666:         __('Apr'),",
          "1668:         _pgettext('Short month name', 'May'),",
          "1670:         __('Jun'),",
          "1672:         __('Jul'),",
          "1674:         __('Aug'),",
          "1676:         __('Sep'),",
          "1678:         __('Oct'),",
          "1680:         __('Nov'),",
          "1682:         __('Dec'));",
          "1683:     $day_of_week = array(",
          "1685:         _pgettext('Short week day name', 'Sun'),",
          "1687:         __('Mon'),",
          "1689:         __('Tue'),",
          "1691:         __('Wed'),",
          "1693:         __('Thu'),",
          "1695:         __('Fri'),",
          "1697:         __('Sat'));",
          "1699:     if ($format == '') {",
          "1701:         $format = __('%B %d, %Y at %I:%M %p');",
          "1702:     }",
          "1704:     if ($timestamp == -1) {",
          "1705:         $timestamp = time();",
          "1706:     }",
          "1708:     $date = preg_replace(",
          "1709:         '@%[aA]@',",
          "1710:         $day_of_week[(int)strftime('%w', $timestamp)],",
          "1711:         $format",
          "1712:     );",
          "1713:     $date = preg_replace(",
          "1714:         '@%[bB]@',",
          "1715:         $month[(int)strftime('%m', $timestamp)-1],",
          "1716:         $date",
          "1717:     );",
          "1719:     return strftime($date, $timestamp);",
          "1720: } // end of the 'PMA_localisedDate()' function",
          "1734: function PMA_generateHtmlTab($tab, $url_params = array())",
          "1735: {",
          "1737:     $defaults = array(",
          "1738:         'text'      => '',",
          "1739:         'class'     => '',",
          "1740:         'active'    => null,",
          "1741:         'link'      => '',",
          "1742:         'sep'       => '?',",
          "1743:         'attr'      => '',",
          "1744:         'args'      => '',",
          "1745:         'warning'   => '',",
          "1746:         'fragment'  => '',",
          "1747:         'id'        => '',",
          "1748:     );",
          "1750:     $tab = array_merge($defaults, $tab);",
          "1753:     if (empty($tab['class'])) {",
          "1754:         if (! empty($tab['active'])",
          "1755:             || PMA_isValid($GLOBALS['active_page'], 'identical', $tab['link'])",
          "1756:         ) {",
          "1757:             $tab['class'] = 'active';",
          "1758:         } elseif (is_null($tab['active']) && empty($GLOBALS['active_page'])",
          "1759:           && (basename($GLOBALS['PMA_PHP_SELF']) == $tab['link'])",
          "1760:           && empty($tab['warning'])) {",
          "1761:             $tab['class'] = 'active';",
          "1763:     }",
          "1765:     if (! empty($tab['warning'])) {",
          "1766:         $tab['class'] .= ' error';",
          "1767:         $tab['attr'] .= ' title=\"' . htmlspecialchars($tab['warning']) . '\"';",
          "1768:     }",
          "1772:     if (! empty($tab['url_params']) && is_array($tab['url_params'])) {",
          "1773:         $url_params = array_merge($url_params, $tab['url_params']);",
          "1774:     }",
          "1777:     if (! empty($tab['link'])) {",
          "1778:         $tab['link'] = htmlentities($tab['link']);",
          "1779:         $tab['link'] = $tab['link'] . PMA_generate_common_url($url_params);",
          "1780:         if (! empty($tab['args'])) {",
          "1781:             foreach ($tab['args'] as $param => $value) {",
          "1782:                 $tab['link'] .= PMA_get_arg_separator('html') . urlencode($param)",
          "1783:                     . '=' . urlencode($value);",
          "1784:             }",
          "1786:     }",
          "1788:     if (! empty($tab['fragment'])) {",
          "1789:         $tab['link'] .= $tab['fragment'];",
          "1790:     }",
          "1793:     if (isset($tab['icon'])",
          "1794:     ) {",
          "1798:         $tab['text'] = PMA_getImage(htmlentities($tab['icon'])) . $tab['text'];",
          "1800:     } elseif (empty($tab['text'])) {",
          "1802:         $tab['text'] = '?';",
          "1803:         trigger_error(",
          "1804:             'empty linktext in function ' . __FUNCTION__ . '()',",
          "1805:             E_USER_NOTICE",
          "1806:         );",
          "1807:     }",
          "1810:     $id_string = ( empty($tab['id']) ? '' : ' id=\"'.$tab['id'].'\" ' );",
          "1811:     $out = '<li' . ($tab['class'] == 'active' ? ' class=\"active\"' : '') . '>';",
          "1813:     if (! empty($tab['link'])) {",
          "1814:         $out .= '<a class=\"tab' . htmlentities($tab['class']) . '\"'",
          "1815:             .$id_string",
          "1816:             .' href=\"' . $tab['link'] . '\" ' . $tab['attr'] . '>'",
          "1817:             . $tab['text'] . '</a>';",
          "1818:     } else {",
          "1819:         $out .= '<span class=\"tab' . htmlentities($tab['class']) . '\"'.$id_string.'>'",
          "1820:             . $tab['text'] . '</span>';",
          "1821:     }",
          "1823:     $out .= '</li>';",
          "1824:     return $out;",
          "1825: } // end of the 'PMA_generateHtmlTab()' function",
          "1837: function PMA_generateHtmlTabs($tabs, $url_params, $menu_id = 'topmenu')",
          "1838: {",
          "1839:     $tab_navigation = '<div id=\"' . htmlentities($menu_id)",
          "1840:         . 'container\" class=\"menucontainer\">'",
          "1841:         .'<ul id=\"' . htmlentities($menu_id) . '\">';",
          "1843:     foreach ($tabs as $tab) {",
          "1844:         $tab_navigation .= PMA_generateHtmlTab($tab, $url_params);",
          "1845:     }",
          "1847:     $tab_navigation .=",
          "1848:          '</ul>' . \"\\n\"",
          "1849:         .'<div class=\"clearfloat\"></div>'",
          "1850:         .'</div>' . \"\\n\";",
          "1852:     return $tab_navigation;",
          "1853: }",
          "1871: function PMA_linkOrButton(",
          "1872:     $url, $message, $tag_params = array(),",
          "1873:     $new_form = true, $strip_img = false, $target = ''",
          "1874: ) {",
          "1876:     $url_length = strlen($url);",
          "1879:     if ($url_length > $GLOBALS['cfg']['LinkLengthLimit'] * 100) {",
          "1880:         return '';",
          "1881:     }",
          "1884:     if (! is_array($tag_params)) {",
          "1885:         $tmp = $tag_params;",
          "1886:         $tag_params = array();",
          "1887:         if (! empty($tmp)) {",
          "1888:             $tag_params['onclick'] = 'return confirmLink(this, \\''",
          "1889:                 . PMA_escapeJsString($tmp) . '\\')';",
          "1891:         unset($tmp);",
          "1892:     }",
          "1893:     if (! empty($target)) {",
          "1894:         $tag_params['target'] = htmlentities($target);",
          "1895:     }",
          "1897:     $tag_params_strings = array();",
          "1898:     foreach ($tag_params as $par_name => $par_value) {",
          "1900:         $par_value = substr($par_name, 0, 2) == 'on'",
          "1901:             ? $par_value",
          "1902:             : htmlspecialchars($par_value);",
          "1903:         $tag_params_strings[] = $par_name . '=\"' . $par_value . '\"';",
          "1904:     }",
          "1906:     $displayed_message = '';",
          "1908:     if (stristr($message, '<img')",
          "1909:         && (! $strip_img || ($GLOBALS['cfg']['PropertiesIconic'] === true))",
          "1910:         && (strip_tags($message) == $message)",
          "1911:     ) {",
          "1912:         $displayed_message = '<span>'",
          "1913:             . htmlspecialchars(",
          "1914:                 preg_replace('/^.*\\salt=\"([^\"]*)\".*$/si', '\\1', $message)",
          "1915:             )",
          "1916:             . '</span>';",
          "1917:     }",
          "1920:     $in_suhosin_limits = true;",
          "1921:     if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit']) {",
          "1922:         if ($suhosin_get_MaxValueLength = ini_get('suhosin.get.max_value_length')) {",
          "1923:             $query_parts = PMA_splitURLQuery($url);",
          "1924:             foreach ($query_parts as $query_pair) {",
          "1925:                 list($eachvar, $eachval) = explode('=', $query_pair);",
          "1926:                 if (strlen($eachval) > $suhosin_get_MaxValueLength) {",
          "1927:                     $in_suhosin_limits = false;",
          "1928:                     break;",
          "1932:     }",
          "1934:     if (($url_length <= $GLOBALS['cfg']['LinkLengthLimit']) && $in_suhosin_limits) {",
          "1937:         $ret = \"\\n\" . '<a href=\"' . $url . '\" '",
          "1938:             . implode(' ', $tag_params_strings) . '>'",
          "1939:             . $message . $displayed_message . '</a>' . \"\\n\";",
          "1941:     } else {",
          "1948:         if (empty($tag_params['class'])) {",
          "1949:             $tag_params['class'] = 'link';",
          "1950:         }",
          "1952:         if (! isset($query_parts)) {",
          "1953:             $query_parts = PMA_splitURLQuery($url);",
          "1954:         }",
          "1955:         $url_parts   = parse_url($url);",
          "1957:         if ($new_form) {",
          "1958:             $ret = '<form action=\"' . $url_parts['path'] . '\" class=\"link\"'",
          "1959:                  . ' method=\"post\"' . $target . ' style=\"display: inline;\">';",
          "1960:             $subname_open   = '';",
          "1961:             $subname_close  = '';",
          "1962:             $submit_link    = '#';",
          "1963:         } else {",
          "1964:             $query_parts[] = 'redirect=' . $url_parts['path'];",
          "1965:             if (empty($GLOBALS['subform_counter'])) {",
          "1966:                 $GLOBALS['subform_counter'] = 0;",
          "1967:             }",
          "1968:             $GLOBALS['subform_counter']++;",
          "1969:             $ret            = '';",
          "1970:             $subname_open   = 'subform[' . $GLOBALS['subform_counter'] . '][';",
          "1971:             $subname_close  = ']';",
          "1972:             $submit_link    = '#usesubform[' . $GLOBALS['subform_counter'] . ']=1';",
          "1975:         foreach ($query_parts as $query_pair) {",
          "1976:             list($eachvar, $eachval) = explode('=', $query_pair);",
          "1977:             $ret .= '<input type=\"hidden\" name=\"' . $subname_open . $eachvar",
          "1978:                 . $subname_close . '\" value=\"'",
          "1979:                 . htmlspecialchars(urldecode($eachval)) . '\" />';",
          "1980:         } // end while",
          "1982:         $ret .= \"\\n\" . '<a href=\"' . $submit_link . '\" class=\"formLinkSubmit\" '",
          "1983:             . implode(' ', $tag_params_strings) . '>'",
          "1984:             . $message . ' ' . $displayed_message . '</a>' . \"\\n\";",
          "1986:         if ($new_form) {",
          "1987:             $ret .= '</form>';",
          "1989:     } // end if... else...",
          "1991:     return $ret;",
          "1992: } // end of the 'PMA_linkOrButton()' function",
          "2002: function PMA_splitURLQuery($url)",
          "2003: {",
          "2005:     $separator = PMA_get_arg_separator();",
          "2007:     if ($separator !== '&') {",
          "2009:         $url = str_replace(htmlentities('&'), $separator, $url);",
          "2010:         $url = str_replace('&', $separator, $url);",
          "2011:     }",
          "2013:     $url = str_replace(htmlentities($separator), $separator, $url);",
          "2016:     $url_parts = parse_url($url);",
          "2018:     return explode($separator, $url_parts['query']);",
          "2019: }",
          "2029: function PMA_timespanFormat($seconds)",
          "2030: {",
          "2031:     $days = floor($seconds / 86400);",
          "2032:     if ($days > 0) {",
          "2033:         $seconds -= $days * 86400;",
          "2034:     }",
          "2036:     $hours = floor($seconds / 3600);",
          "2037:     if ($days > 0 || $hours > 0) {",
          "2038:         $seconds -= $hours * 3600;",
          "2041:     $minutes = floor($seconds / 60);",
          "2042:     if ($days > 0 || $hours > 0 || $minutes > 0) {",
          "2043:         $seconds -= $minutes * 60;",
          "2044:     }",
          "2046:     return sprintf(",
          "2047:         __('%s days, %s hours, %s minutes and %s seconds'),",
          "2048:         (string)$days, (string)$hours, (string)$minutes, (string)$seconds",
          "2049:     );",
          "2050: }",
          "2068: function PMA_flipstring($string, $Separator = \"<br />\\n\")",
          "2069: {",
          "2070:     $format_string = '';",
          "2071:     $charbuff = false;",
          "2073:     for ($i = 0, $str_len = strlen($string); $i < $str_len; $i++) {",
          "2074:         $char = $string{$i};",
          "2075:         $append = false;",
          "2077:         if ($char == '&') {",
          "2078:             $format_string .= $charbuff;",
          "2079:             $charbuff = $char;",
          "2080:         } elseif ($char == ';' && ! empty($charbuff)) {",
          "2081:             $format_string .= $charbuff . $char;",
          "2082:             $charbuff = false;",
          "2083:             $append = true;",
          "2084:         } elseif (! empty($charbuff)) {",
          "2085:             $charbuff .= $char;",
          "2086:         } else {",
          "2087:             $format_string .= $char;",
          "2088:             $append = true;",
          "2089:         }",
          "2092:         if ($append && ($i != $str_len - 1)) {",
          "2093:             $format_string .= $Separator;",
          "2095:     }",
          "2097:     return $format_string;",
          "2098: }",
          "2119: function PMA_checkParameters($params, $request = true)",
          "2120: {",
          "2121:     global $checked_special;",
          "2123:     if (! isset($checked_special)) {",
          "2124:         $checked_special = false;",
          "2125:     }",
          "2127:     $reported_script_name = basename($GLOBALS['PMA_PHP_SELF']);",
          "2128:     $found_error = false;",
          "2129:     $error_message = '';",
          "2131:     foreach ($params as $param) {",
          "2132:         if ($request && ($param != 'db') && ($param != 'table')) {",
          "2133:             $checked_special = true;",
          "2136:         if (! isset($GLOBALS[$param])) {",
          "2137:             $error_message .= $reported_script_name",
          "2138:                 . ': ' . __('Missing parameter:') . ' '",
          "2139:                 . $param",
          "2140:                 . PMA_showDocu('faqmissingparameters')",
          "2141:                 . '<br />';",
          "2142:             $found_error = true;",
          "2144:     }",
          "2145:     if ($found_error) {",
          "2146:         PMA_fatalError($error_message, null, false);",
          "2147:     }",
          "2148: } // end function",
          "2164: function PMA_getUniqueCondition($handle, $fields_cnt, $fields_meta, $row,",
          "2165:     $force_unique = false",
          "2166: ) {",
          "2168:     $primary_key          = '';",
          "2169:     $unique_key           = '';",
          "2170:     $nonprimary_condition = '';",
          "2171:     $preferred_condition = '';",
          "2172:     $primary_key_array    = array();",
          "2173:     $unique_key_array     = array();",
          "2174:     $nonprimary_condition_array = array();",
          "2175:     $condition_array = array();",
          "2177:     for ($i = 0; $i < $fields_cnt; ++$i) {",
          "2179:         $condition   = '';",
          "2180:         $con_key     = '';",
          "2181:         $con_val     = '';",
          "2182:         $field_flags = PMA_DBI_field_flags($handle, $i);",
          "2183:         $meta        = $fields_meta[$i];",
          "2186:         if (! isset($meta->orgname) || ! strlen($meta->orgname)) {",
          "2187:             $meta->orgname = $meta->name;",
          "2189:             if (isset($GLOBALS['analyzed_sql'][0]['select_expr'])",
          "2190:                 && is_array($GLOBALS['analyzed_sql'][0]['select_expr'])",
          "2191:             ) {",
          "2192:                 foreach (",
          "2193:                     $GLOBALS['analyzed_sql'][0]['select_expr'] as $select_expr",
          "2194:                 ) {",
          "2197:                     if ((string) $select_expr['alias'] === (string) $meta->name) {",
          "2198:                         $meta->orgname = $select_expr['column'];",
          "2200:                     } // end if",
          "2201:                 } // end foreach",
          "2216:         if (isset($meta->orgtable)",
          "2217:             && ($meta->table != $meta->orgtable)",
          "2218:             && ! PMA_Table::isView($GLOBALS['db'], $meta->table)",
          "2219:         ) {",
          "2220:             $meta->table = $meta->orgtable;",
          "2221:         }",
          "2228:         if ($meta->type == 'real') {",
          "2229:             $con_key = 'CONCAT(' . PMA_backquote($meta->table) . '.'",
          "2230:                 . PMA_backquote($meta->orgname) . ')';",
          "2231:         } else {",
          "2232:             $con_key = PMA_backquote($meta->table) . '.'",
          "2233:                 . PMA_backquote($meta->orgname);",
          "2234:         } // end if... else...",
          "2235:         $condition = ' ' . $con_key . ' ';",
          "2237:         if (! isset($row[$i]) || is_null($row[$i])) {",
          "2238:             $con_val = 'IS NULL';",
          "2243:             if ($meta->numeric",
          "2244:                 && ($meta->type != 'timestamp')",
          "2245:                 && ($meta->type != 'real')",
          "2246:             ) {",
          "2248:                 $con_val = '= ' . $row[$i];",
          "2250:             } elseif ((($meta->type == 'blob') || ($meta->type == 'string'))",
          "2252:                     && stristr($field_flags, 'BINARY')",
          "2253:                     && ! empty($row[$i])",
          "2254:             ) {",
          "2257:                 if (strlen($row[$i]) < 1000) {",
          "2260:                     $con_val = '= CAST(0x' . bin2hex($row[$i]) . ' AS BINARY)';",
          "2261:                 } else {",
          "2263:                     $con_val = null;",
          "2264:                 }",
          "2266:             } elseif (in_array($meta->type, PMA_getGISDatatypes())",
          "2267:                 && ! empty($row[$i])",
          "2268:             ) {",
          "2271:                 if (strlen($row[$i]) < 5000) {",
          "2272:                     $condition .= '=0x' . bin2hex($row[$i]) . ' AND';",
          "2273:                 } else {",
          "2274:                     $condition = '';",
          "2275:                 }",
          "2277:             } elseif ($meta->type == 'bit') {",
          "2279:                 $con_val = \"= b'\"",
          "2280:                     . PMA_printableBitValue($row[$i], $meta->length) . \"'\";",
          "2283:                 $con_val = '= \\'' . PMA_sqlAddSlashes($row[$i], false, true) . '\\'';",
          "2284:             }",
          "2285:         }",
          "2287:         if ($con_val != null) {",
          "2289:             $condition .= $con_val . ' AND';",
          "2291:             if ($meta->primary_key > 0) {",
          "2292:                 $primary_key .= $condition;",
          "2293:                 $primary_key_array[$con_key] = $con_val;",
          "2294:             } elseif ($meta->unique_key > 0) {",
          "2295:                 $unique_key  .= $condition;",
          "2296:                 $unique_key_array[$con_key] = $con_val;",
          "2299:             $nonprimary_condition .= $condition;",
          "2300:             $nonprimary_condition_array[$con_key] = $con_val;",
          "2301:         }",
          "2302:     } // end for",
          "2307:     $clause_is_unique = true;",
          "2309:     if ($primary_key) {",
          "2310:         $preferred_condition = $primary_key;",
          "2311:         $condition_array = $primary_key_array;",
          "2313:     } elseif ($unique_key) {",
          "2314:         $preferred_condition = $unique_key;",
          "2315:         $condition_array = $unique_key_array;",
          "2317:     } elseif (! $force_unique) {",
          "2318:         $preferred_condition = $nonprimary_condition;",
          "2319:         $condition_array = $nonprimary_condition_array;",
          "2320:         $clause_is_unique = false;",
          "2321:     }",
          "2323:     $where_clause = trim(preg_replace('|\\s?AND$|', '', $preferred_condition));",
          "2324:     return(array($where_clause, $clause_is_unique, $condition_array));",
          "2325: } // end function",
          "2342: function PMA_getButtonOrImage(",
          "2343:     $button_name, $button_class, $image_name, $text, $image, $value = ''",
          "2344: ) {",
          "2346:     if ($value == '') {",
          "2347:         $value = $text;",
          "2348:     }",
          "2350:     if ($GLOBALS['cfg']['PropertiesIconic'] === false) {",
          "2351:         return ' <input type=\"submit\" name=\"' . $button_name . '\"'",
          "2352:             .' value=\"' . htmlspecialchars($value) . '\"'",
          "2353:             .' title=\"' . htmlspecialchars($text) . '\" />' . \"\\n\";",
          "2354:     }",
          "2358:     if (PMA_USR_BROWSER_AGENT != 'IE') {",
          "2359:         return '<button class=\"' . $button_class . '\" type=\"submit\"'",
          "2360:             .' name=\"' . $button_name . '\" value=\"' . htmlspecialchars($value) . '\"'",
          "2361:             .' title=\"' . htmlspecialchars($text) . '\">' . \"\\n\"",
          "2362:             . PMA_getIcon($image, $text)",
          "2363:             .'</button>' . \"\\n\";",
          "2364:     } else {",
          "2365:         return '<input type=\"image\" name=\"' . $image_name",
          "2366:             . '\" value=\"' . htmlspecialchars($value)",
          "2367:             . '\" title=\"' . htmlspecialchars($text)",
          "2368:             . '\" src=\"' . $GLOBALS['pmaThemeImage']. $image . '\" />'",
          "2369:             . ($GLOBALS['cfg']['PropertiesIconic'] === 'both'",
          "2370:                 ? '&nbsp;' . htmlspecialchars($text)",
          "2371:                 : '') . \"\\n\";",
          "2372:     }",
          "2373: } // end function",
          "2396: function PMA_pageselector(",
          "2397:     $rows, $pageNow = 1, $nbTotalPage = 1, $showAll = 200, $sliceStart = 5,",
          "2398:     $sliceEnd = 5, $percent = 20, $range = 10, $prompt = ''",
          "2399: ) {",
          "2401:     $increment = floor($nbTotalPage / $percent);",
          "2402:     $pageNowMinusRange = ($pageNow - $range);",
          "2403:     $pageNowPlusRange = ($pageNow + $range);",
          "2405:     $gotopage = $prompt . ' <select id=\"pageselector\" ';",
          "2406:     if ($GLOBALS['cfg']['AjaxEnable']) {",
          "2407:         $gotopage .= ' class=\"ajax\"';",
          "2410:     $gotopage .= ' name=\"pos\" >' . \"\\n\";",
          "2411:     if ($nbTotalPage < $showAll) {",
          "2412:         $pages = range(1, $nbTotalPage);",
          "2414:     } else {",
          "2416:         $pages = array();",
          "2419:         for ($i = 1; $i <= $sliceStart; $i++) {",
          "2420:             $pages[] = $i;",
          "2421:         }",
          "2424:         for ($i = $nbTotalPage - $sliceEnd; $i <= $nbTotalPage; $i++) {",
          "2425:             $pages[] = $i;",
          "2426:         }",
          "2434:         $i = $sliceStart;",
          "2435:         $x = $nbTotalPage - $sliceEnd;",
          "2436:         $met_boundary = false;",
          "2438:         while ($i <= $x) {",
          "2439:             if ($i >= $pageNowMinusRange && $i <= $pageNowPlusRange) {",
          "2442:                 $i++;",
          "2443:                 $met_boundary = true;",
          "2444:             } else {",
          "2447:                 $i += $increment;",
          "2450:                 if ($i > $pageNowMinusRange && ! $met_boundary) {",
          "2451:                     $i = $pageNowMinusRange;",
          "2452:                 }",
          "2453:             }",
          "2455:             if ($i > 0 && $i <= $x) {",
          "2456:                 $pages[] = $i;",
          "2457:             }",
          "2461:         Add page numbers with \"geometrically increasing\" distances.",
          "2463:         This helps me a lot when navigating through giant tables.",
          "2465:         Test case: table with 2.28 million sets, 76190 pages. Page of interest",
          "2466:         is between 72376 and 76190.",
          "2467:         Selecting page 72376.",
          "2468:         Now, old version enumerated only +/- 10 pages around 72376 and the",
          "2469:         percentage increment produced steps of about 3000.",
          "2471:         The following code adds page numbers +/- 2,4,8,16,32,64,128,256 etc.",
          "2472:         around the current page.",
          "2475:         $i = $pageNow;",
          "2476:         $dist = 1;",
          "2477:         while ($i < $x) {",
          "2478:             $dist = 2 * $dist;",
          "2479:             $i = $pageNow + $dist;",
          "2480:             if ($i > 0 && $i <= $x) {",
          "2481:                 $pages[] = $i;",
          "2482:             }",
          "2485:         $i = $pageNow;",
          "2486:         $dist = 1;",
          "2487:         while ($i >0) {",
          "2488:             $dist = 2 * $dist;",
          "2489:             $i = $pageNow - $dist;",
          "2490:             if ($i > 0 && $i <= $x) {",
          "2491:                 $pages[] = $i;",
          "2492:             }",
          "2497:         sort($pages);",
          "2498:         $pages = array_unique($pages);",
          "2501:     foreach ($pages as $i) {",
          "2502:         if ($i == $pageNow) {",
          "2503:             $selected = 'selected=\"selected\" style=\"font-weight: bold\"';",
          "2504:         } else {",
          "2505:             $selected = '';",
          "2507:         $gotopage .= '                <option ' . $selected",
          "2508:             . ' value=\"' . (($i - 1) * $rows) . '\">' . $i . '</option>' . \"\\n\";",
          "2511:     $gotopage .= ' </select>';",
          "2513:     return $gotopage;",
          "2514: } // end function",
          "2533: function PMA_getListNavigator(",
          "2534:     $count, $pos, $_url_params, $script, $frame, $max_count",
          "2535: ) {",
          "2537:     $list_navigator_html = '';",
          "2539:     if ($max_count < $count) {",
          "2541:         $list_navigator_html .= ($frame == 'frame_navigation')",
          "2542:             ? '<div id=\"navidbpageselector\">' . \"\\n\"",
          "2543:             : '';",
          "2545:         $list_navigator_html .= __('Page number:');",
          "2547:         $list_navigator_html .= ($frame == 'frame_navigation') ? '<br />' : ' ';",
          "2550:         if ($pos > 0) {",
          "2553:             if ($GLOBALS['cfg']['NavigationBarIconic']) {",
          "2554:                 $caption1 = '&lt;&lt;';",
          "2555:                 $caption2 = ' &lt; ';",
          "2556:                 $title1   = ' title=\"' . _pgettext('First page', 'Begin') . '\"';",
          "2557:                 $title2   = ' title=\"'",
          "2558:                     . _pgettext('Previous page', 'Previous') . '\"';",
          "2559:             } else {",
          "2560:                 $caption1 = _pgettext('First page', 'Begin') . ' &lt;&lt;';",
          "2561:                 $caption2 = _pgettext('Previous page', 'Previous') . ' &lt;';",
          "2562:                 $title1   = '';",
          "2563:                 $title2   = '';",
          "2564:             } // end if... else...",
          "2566:             $_url_params['pos'] = 0;",
          "2567:             $list_navigator_html .= '<a' . $title1 . ' href=\"' . $script",
          "2568:                 . PMA_generate_common_url($_url_params) . '\" target=\"'",
          "2569:                 . $frame . '\">' . $caption1 . '</a>';",
          "2571:             $_url_params['pos'] = $pos - $max_count;",
          "2572:             $list_navigator_html .= '<a' . $title2 . ' href=\"' . $script",
          "2573:                 . PMA_generate_common_url($_url_params) . '\" target=\"'",
          "2574:                 . $frame . '\">' . $caption2 . '</a>';",
          "2575:         }",
          "2577:         $list_navigator_html .= \"\\n\" . '<form action=\"' . basename($script).",
          "2578:             '\" method=\"post\" target=\"' . $frame . '\">' . \"\\n\";",
          "2580:         $list_navigator_html .= PMA_generate_common_hidden_inputs($_url_params);",
          "2581:         $list_navigator_html .= PMA_pageselector(",
          "2582:             $max_count,",
          "2583:             floor(($pos + 1) / $max_count) + 1,",
          "2584:             ceil($count / $max_count)",
          "2585:         );",
          "2586:         $list_navigator_html .= '</form>';",
          "2588:         if ($pos + $max_count < $count) {",
          "2590:             if ($GLOBALS['cfg']['NavigationBarIconic']) {",
          "2591:                 $caption3 = ' &gt; ';",
          "2592:                 $caption4 = '&gt;&gt;';",
          "2593:                 $title3   = ' title=\"' . _pgettext('Next page', 'Next') . '\"';",
          "2594:                 $title4   = ' title=\"' . _pgettext('Last page', 'End') . '\"';",
          "2595:             } else {",
          "2596:                 $caption3 = '&gt; ' . _pgettext('Next page', 'Next');",
          "2597:                 $caption4 = '&gt;&gt; ' . _pgettext('Last page', 'End');",
          "2598:                 $title3   = '';",
          "2599:                 $title4   = '';",
          "2600:             } // end if... else...",
          "2602:             $_url_params['pos'] = $pos + $max_count;",
          "2603:             $list_navigator_html .= '<a' . $title3 . ' href=\"' . $script",
          "2604:                 . PMA_generate_common_url($_url_params) . '\" target=\"'",
          "2605:                 . $frame . '\">' . $caption3 . '</a>';",
          "2607:             $_url_params['pos'] = floor($count / $max_count) * $max_count;",
          "2608:             if ($_url_params['pos'] == $count) {",
          "2609:                 $_url_params['pos'] = $count - $max_count;",
          "2612:             $list_navigator_html .= '<a' . $title4 . ' href=\"' . $script",
          "2613:                 . PMA_generate_common_url($_url_params) . '\" target=\"'",
          "2614:                 . $frame . '\">' . $caption4 . '</a>';",
          "2617:         $list_navigator_html .= \"\\n\";",
          "2618:         if ('frame_navigation' == $frame) {",
          "2619:             $list_navigator_html .= '</div>' . \"\\n\";",
          "2621:     }",
          "2623:     return $list_navigator_html;",
          "2625: }",
          "2641: function PMA_userDir($dir)",
          "2642: {",
          "2644:     if (substr($dir, -1) != '/') {",
          "2645:         $dir .= '/';",
          "2646:     }",
          "2648:     return str_replace('%u', $GLOBALS['cfg']['Server']['user'], $dir);",
          "2649: }",
          "2659: function PMA_getDbLink($database = null)",
          "2660: {",
          "2661:     if (! strlen($database)) {",
          "2662:         if (! strlen($GLOBALS['db'])) {",
          "2663:             return '';",
          "2664:         }",
          "2665:         $database = $GLOBALS['db'];",
          "2666:     } else {",
          "2667:         $database = PMA_unescapeMysqlWildcards($database);",
          "2668:     }",
          "2670:     return '<a href=\"' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?'",
          "2671:         . PMA_generate_common_url($database) . '\" title=\"'",
          "2672:         . sprintf(",
          "2673:             __('Jump to database &quot;%s&quot;.'),",
          "2674:             htmlspecialchars($database)",
          "2675:         )",
          "2676:         . '\">' . htmlspecialchars($database) . '</a>';",
          "2677: }",
          "2691: function PMA_getExternalBug($functionality, $component, $minimum_version, $bugref)",
          "2692: {",
          "2693:     $ext_but_html = '';",
          "2694:     if (($component == 'mysql') && (PMA_MYSQL_INT_VERSION < $minimum_version)) {",
          "2695:         $ext_but_html .= PMA_showHint(",
          "2696:             sprintf(",
          "2697:                 __('The %s functionality is affected by a known bug, see %s'),",
          "2698:                 $functionality,",
          "2699:                 PMA_linkURL('http://bugs.mysql.com/') . $bugref",
          "2700:             )",
          "2701:         );",
          "2702:     }",
          "2703:     return $ext_but_html;",
          "2704: }",
          "2717: function PMA_getCheckbox($html_field_name, $label, $checked, $onclick)",
          "2718: {",
          "2719:     return '<input type=\"checkbox\" name=\"' . $html_field_name . '\" id=\"'",
          "2720:         . $html_field_name . '\"' . ($checked ? ' checked=\"checked\"' : '')",
          "2721:         . ($onclick ? ' class=\"autosubmit\"' : '') . ' /><label for=\"'",
          "2722:         . $html_field_name . '\">' . $label . '</label>';",
          "2723: }",
          "2738: function PMA_getRadioFields($html_field_name, $choices, $checked_choice = '',",
          "2739:     $line_break = true, $escape_label = true, $class=''",
          "2740: ) {",
          "2742:     $radio_html = '';",
          "2744:     foreach ($choices as $choice_value => $choice_label) {",
          "2746:         if (! empty($class)) {",
          "2747:             $radio_html .= '<div class=\"' . $class . '\">';",
          "2748:         }",
          "2750:         $html_field_id = $html_field_name . '_' . $choice_value;",
          "2751:         $radio_html .= '<input type=\"radio\" name=\"' . $html_field_name . '\" id=\"'",
          "2752:                     . $html_field_id . '\" value=\"'",
          "2753:                     . htmlspecialchars($choice_value) . '\"';",
          "2755:         if ($choice_value == $checked_choice) {",
          "2756:             $radio_html .= ' checked=\"checked\"';",
          "2757:         }",
          "2759:         $radio_html .= ' />' . \"\\n\"",
          "2760:                     . '<label for=\"' . $html_field_id . '\">'",
          "2761:                     . ($escape_label",
          "2762:                     ? htmlspecialchars($choice_label)",
          "2763:                     : $choice_label)",
          "2764:                     . '</label>';",
          "2766:         if ($line_break) {",
          "2767:             $radio_html .= '<br />';",
          "2768:         }",
          "2770:         if (! empty($class)) {",
          "2771:             $radio_html .= '</div>';",
          "2772:         }",
          "2773:         $radio_html .= \"\\n\";",
          "2774:     }",
          "2776:     return $radio_html;",
          "2778: }",
          "2795: function PMA_getDropdown($select_name, $choices, $active_choice, $id)",
          "2796: {",
          "2797:     $result = '<select name=\"' . htmlspecialchars($select_name) . '\" id=\"'",
          "2798:         . htmlspecialchars($id) . '\">';",
          "2800:     foreach ($choices as $one_choice_value => $one_choice_label) {",
          "2801:         $result .= '<option value=\"' . htmlspecialchars($one_choice_value) . '\"';",
          "2803:         if ($one_choice_value == $active_choice) {",
          "2804:             $result .= ' selected=\"selected\"';",
          "2806:         $result .= '>' . htmlspecialchars($one_choice_label) . '</option>';",
          "2807:     }",
          "2808:     $result .= '</select>';",
          "2810:     return $result;",
          "2811: }",
          "2826: function PMA_getDivForSliderEffect($id, $message)",
          "2827: {",
          "2828:     if ($GLOBALS['cfg']['InitialSlidersState'] == 'disabled') {",
          "2829:         return '<div id=\"' . $id . '\">';",
          "2830:     }",
          "2840:     return '<div id=\"' . $id . '\"'",
          "2841:         . (($GLOBALS['cfg']['InitialSlidersState'] == 'closed')",
          "2842:             ? ' style=\"display: none; overflow:auto;\"'",
          "2843:             : '')",
          "2844:         . ' class=\"pma_auto_slider\" title=\"' . htmlspecialchars($message) . '\">';",
          "2846: }",
          "2861: function PMA_toggleButton($action, $select_name, $options, $callback)",
          "2862: {",
          "2864:     $link = \"$action&amp;\" . urlencode($select_name) . \"=\";",
          "2865:     $link_on = $link . urlencode($options[1]['value']);",
          "2866:     $link_off = $link . urlencode($options[0]['value']);",
          "2868:     if ($options[1]['selected'] == true) {",
          "2869:         $state = 'on';",
          "2870:     } else if ($options[0]['selected'] == true) {",
          "2871:         $state = 'off';",
          "2872:     } else {",
          "2873:         $state = 'on';",
          "2874:     }",
          "2877:     return \"<!-- TOGGLE START -->\\n\"",
          "2878:         . \"<div class='wrapper toggleAjax hide'>\\n\"",
          "2879:         . \"    <div class='toggleButton'>\\n\"",
          "2880:         . \"        <div title='\" . __('Click to toggle')",
          "2881:         . \"' class='container $state'>\\n\"",
          "2882:         . \"           <img src='\" . htmlspecialchars($GLOBALS['pmaThemeImage'])",
          "2883:         . \"toggle-\" . htmlspecialchars($GLOBALS['text_dir']) . \".png'\\n\"",
          "2884:         . \"                 alt='' />\\n\"",
          "2885:         . \"            <table class='nospacing nopadding'>\\n\"",
          "2886:         . \"                <tbody>\\n\"",
          "2887:         . \"                <tr>\\n\"",
          "2888:         . \"                <td class='toggleOn'>\\n\"",
          "2889:         . \"                    <span class='hide'>$link_on</span>\\n\"",
          "2890:         . \"                    <div>\"",
          "2891:         . str_replace(' ', '&nbsp;', htmlspecialchars($options[1]['label']))",
          "2892:         . \"\\n\" . \"                    </div>\\n\"",
          "2893:         . \"                </td>\\n\"",
          "2894:         . \"                <td><div>&nbsp;</div></td>\\n\"",
          "2895:         . \"                <td class='toggleOff'>\\n\"",
          "2896:         . \"                    <span class='hide'>$link_off</span>\\n\"",
          "2897:         . \"                    <div>\"",
          "2898:         . str_replace(' ', '&nbsp;', htmlspecialchars($options[0]['label']))",
          "2899:         . \"\\n\" . \"                    </div>\\n\"",
          "2900:         . \"                </tr>\\n\"",
          "2901:         . \"                </tbody>\\n\"",
          "2902:         . \"            </table>\\n\"",
          "2903:         . \"            <span class='hide callback'>\"",
          "2904:         . htmlspecialchars($callback) . \"</span>\\n\"",
          "2905:         . \"            <span class='hide text_direction'>\"",
          "2906:         . htmlspecialchars($GLOBALS['text_dir']) . \"</span>\\n\"",
          "2907:         . \"        </div>\\n\"",
          "2908:         . \"    </div>\\n\"",
          "2909:         . \"</div>\\n\"",
          "2910:         . \"<!-- TOGGLE END -->\";",
          "2912: } // end PMA_toggleButton()",
          "2920: function PMA_clearUserCache()",
          "2921: {",
          "2922:     PMA_cacheUnset('is_superuser', true);",
          "2923: }",
          "2934: function PMA_cacheExists($var, $server = 0)",
          "2935: {",
          "2936:     if (true === $server) {",
          "2937:         $server = $GLOBALS['server'];",
          "2938:     }",
          "2939:     return isset($_SESSION['cache']['server_' . $server][$var]);",
          "2940: }",
          "2951: function PMA_cacheGet($var, $server = 0)",
          "2952: {",
          "2953:     if (true === $server) {",
          "2954:         $server = $GLOBALS['server'];",
          "2956:     if (isset($_SESSION['cache']['server_' . $server][$var])) {",
          "2957:         return $_SESSION['cache']['server_' . $server][$var];",
          "2958:     } else {",
          "2959:         return null;",
          "2961: }",
          "2973: function PMA_cacheSet($var, $val = null, $server = 0)",
          "2974: {",
          "2975:     if (true === $server) {",
          "2976:         $server = $GLOBALS['server'];",
          "2978:     $_SESSION['cache']['server_' . $server][$var] = $val;",
          "2979: }",
          "2990: function PMA_cacheUnset($var, $server = 0)",
          "2991: {",
          "2992:     if ($server === true) {",
          "2993:         $server = $GLOBALS['server'];",
          "2995:     unset($_SESSION['cache']['server_' . $server][$var]);",
          "2996: }",
          "3009: function PMA_printableBitValue($value, $length)",
          "3010: {",
          "3011:     $printable = '';",
          "3012:     for ($i = 0, $len_ceiled = ceil($length / 8); $i < $len_ceiled; $i++) {",
          "3013:         $printable .= sprintf('%08d', decbin(ord(substr($value, $i, 1))));",
          "3015:     $printable = substr($printable, -$length);",
          "3016:     return $printable;",
          "3017: }",
          "3027: function PMA_containsNonPrintableAscii($value)",
          "3028: {",
          "3029:     return preg_match('@[^[:print:]]@', $value);",
          "3030: }",
          "3041: function PMA_convertBitDefaultValue($bit_default_value)",
          "3042: {",
          "3043:     return strtr($bit_default_value, array(\"b\" => \"\", \"'\" => \"\"));",
          "3044: }",
          "3055: function PMA_extractColumnSpec($columnspec)",
          "3056: {",
          "3057:     $first_bracket_pos = strpos($columnspec, '(');",
          "3058:     if ($first_bracket_pos) {",
          "3059:         $spec_in_brackets = chop(",
          "3060:             substr(",
          "3061:                 $columnspec,",
          "3062:                 $first_bracket_pos + 1,",
          "3063:                 (strrpos($columnspec, ')') - $first_bracket_pos - 1)",
          "3064:             )",
          "3065:         );",
          "3067:         $type = strtolower(chop(substr($columnspec, 0, $first_bracket_pos)));",
          "3068:     } else {",
          "3069:         $type = strtolower($columnspec);",
          "3070:         $spec_in_brackets = '';",
          "3071:     }",
          "3073:     if ('enum' == $type || 'set' == $type) {",
          "3076:         $enum_set_values = array();",
          "3077:         $working = \"\";",
          "3078:         $in_string = false;",
          "3079:         $index = 0;",
          "3082:         while (isset($columnspec[$index])) {",
          "3085:             $char = $columnspec[$index];",
          "3088:             if ($char == \"'\") {",
          "3091:                 if (! $in_string) {",
          "3092:                     $in_string = true;",
          "3093:                     $working = \"\";",
          "3094:                 } else {",
          "3098:                     $has_next = isset($columnspec[$index + 1]);",
          "3099:                     $next = $has_next ? $columnspec[$index + 1] : null;",
          "3103:                     if (! $has_next || $next != \"'\") {",
          "3104:                         $enum_set_values[] = $working;",
          "3105:                         $in_string = false;",
          "3107:                     } elseif ($next == \"'\") {",
          "3110:                         $working .= \"'\";",
          "3112:                         $index++;",
          "3113:                     }",
          "3114:                 }",
          "3116:             } elseif ('\\\\' == $char",
          "3117:                 && isset($columnspec[$index + 1])",
          "3118:                 && \"'\" == $columnspec[$index + 1]",
          "3119:             ) {",
          "3121:                 $working .= \"'\";",
          "3122:                 $index++;",
          "3123:             } else {",
          "3125:                 $working .= $char;",
          "3129:             $index++;",
          "3130:         } // end while",
          "3132:         $printtype = $type",
          "3133:             . '(' .  str_replace(\"','\", \"', '\", $spec_in_brackets) . ')';",
          "3134:         $binary = false;",
          "3135:         $unsigned = false;",
          "3136:         $zerofill = false;",
          "3138:     } else {",
          "3140:         $enum_set_values = array();",
          "3143:         $printtype = strtolower($columnspec);",
          "3149:         if (preg_match('@binary@', $printtype)",
          "3150:             && ! preg_match('@binary[\\(]@', $printtype)",
          "3151:         ) {",
          "3152:             $printtype = preg_replace('@binary@', '', $printtype);",
          "3153:             $binary = true;",
          "3154:         } else {",
          "3155:             $binary = false;",
          "3158:         $printtype = preg_replace('@zerofill@', '', $printtype, -1, $zerofill_cnt);",
          "3159:         $zerofill = ($zerofill_cnt > 0);",
          "3160:         $printtype = preg_replace('@unsigned@', '', $printtype, -1, $unsigned_cnt);",
          "3161:         $unsigned = ($unsigned_cnt > 0);",
          "3162:         $printtype = trim($printtype);",
          "3166:     $attribute     = ' ';",
          "3167:     if ($binary) {",
          "3168:         $attribute = 'BINARY';",
          "3170:     if ($unsigned) {",
          "3171:         $attribute = 'UNSIGNED';",
          "3173:     if ($zerofill) {",
          "3174:         $attribute = 'UNSIGNED ZEROFILL';",
          "3177:     $can_contain_collation = false;",
          "3178:     if (! $binary",
          "3179:         && preg_match(",
          "3180:             \"@^(char|varchar|text|tinytext|mediumtext|longtext|set|enum)@\", $type",
          "3181:         )",
          "3182:     ) {",
          "3183:         $can_contain_collation = true;",
          "3187:     $displayed_type = htmlspecialchars($printtype);",
          "3188:     if (strlen($printtype) > $GLOBALS['cfg']['LimitChars']) {",
          "3189:         $displayed_type  = '<abbr title=\"' . $printtype . '\">';",
          "3190:         $displayed_type .= substr($printtype, 0, $GLOBALS['cfg']['LimitChars']);",
          "3191:         $displayed_type .= '</abbr>';",
          "3194:     return array(",
          "3195:         'type' => $type,",
          "3196:         'spec_in_brackets' => $spec_in_brackets,",
          "3197:         'enum_set_values'  => $enum_set_values,",
          "3198:         'print_type' => $printtype,",
          "3199:         'binary' => $binary,",
          "3200:         'unsigned' => $unsigned,",
          "3201:         'zerofill' => $zerofill,",
          "3202:         'attribute' => $attribute,",
          "3203:         'can_contain_collation' => $can_contain_collation,",
          "3204:         'displayed_type' => $displayed_type",
          "3205:     );",
          "3206: }",
          "3216: function PMA_isForeignKeySupported($engine)",
          "3217: {",
          "3218:     $engine = strtoupper($engine);",
          "3219:     if (($engine == 'INNODB') || ($engine == 'PBXT')) {",
          "3220:         return true;",
          "3221:     } else {",
          "3222:         return false;",
          "3224: }",
          "3234: function PMA_replaceBinaryContents($content)",
          "3235: {",
          "3236:     $result = str_replace(\"\\x00\", '\\0', $content);",
          "3237:     $result = str_replace(\"\\x08\", '\\b', $result);",
          "3238:     $result = str_replace(\"\\x0a\", '\\n', $result);",
          "3239:     $result = str_replace(\"\\x0d\", '\\r', $result);",
          "3240:     $result = str_replace(\"\\x1a\", '\\Z', $result);",
          "3241:     return $result;",
          "3242: }",
          "3253: function PMA_asWKT($data, $includeSRID = false)",
          "3254: {",
          "3256:     $hex = bin2hex($data);",
          "3257:     $wktsql     = \"SELECT ASTEXT(x'\" . $hex . \"')\";",
          "3258:     if ($includeSRID) {",
          "3259:         $wktsql .= \", SRID(x'\" . $hex . \"')\";",
          "3262:     $wktresult  = PMA_DBI_try_query($wktsql, null, PMA_DBI_QUERY_STORE);",
          "3263:     $wktarr     = PMA_DBI_fetch_row($wktresult, 0);",
          "3264:     $wktval     = $wktarr[0];",
          "3266:     if ($includeSRID) {",
          "3267:         $srid = $wktarr[1];",
          "3268:         $wktval = \"'\" . $wktval . \"',\" . $srid;",
          "3270:     @PMA_DBI_free_result($wktresult);",
          "3272:     return $wktval;",
          "3273: }",
          "3284: function PMA_duplicateFirstNewline($string)",
          "3285: {",
          "3286:     $first_occurence = strpos($string, \"\\r\\n\");",
          "3287:     if ($first_occurence === 0) {",
          "3288:         $string = \"\\n\" . $string;",
          "3290:     return $string;",
          "3291: }",
          "3303: function PMA_getTitleForTarget($target)",
          "3304: {",
          "3305:     $mapping = array(",
          "3307:         'tbl_structure.php' =>  __('Structure'),",
          "3308:         'tbl_sql.php' => __('SQL'),",
          "3309:         'tbl_select.php' =>__('Search'),",
          "3310:         'tbl_change.php' =>__('Insert'),",
          "3311:         'sql.php' => __('Browse'),",
          "3314:         'db_structure.php' => __('Structure'),",
          "3315:         'db_sql.php' => __('SQL'),",
          "3316:         'db_search.php' => __('Search'),",
          "3317:         'db_operations.php' => __('Operations'),",
          "3318:     );",
          "3319:     return $mapping[$target];",
          "3320: }",
          "3334: function PMA_expandUserString($string, $escape = null, $updates = array())",
          "3335: {",
          "3337:     $vars['http_host'] = PMA_getenv('HTTP_HOST');",
          "3338:     $vars['server_name'] = $GLOBALS['cfg']['Server']['host'];",
          "3339:     $vars['server_verbose'] = $GLOBALS['cfg']['Server']['verbose'];",
          "3341:     if (empty($GLOBALS['cfg']['Server']['verbose'])) {",
          "3342:         $vars['server_verbose_or_name'] = $GLOBALS['cfg']['Server']['host'];",
          "3343:     } else {",
          "3344:         $vars['server_verbose_or_name'] = $GLOBALS['cfg']['Server']['verbose'];",
          "3347:     $vars['database'] = $GLOBALS['db'];",
          "3348:     $vars['table'] = $GLOBALS['table'];",
          "3349:     $vars['phpmyadmin_version'] = 'phpMyAdmin ' . PMA_VERSION;",
          "3352:     foreach ($updates as $key => $val) {",
          "3353:         $vars[$key] = $val;",
          "3361:     $replace = array(",
          "3362:         '@HTTP_HOST@' => $vars['http_host'],",
          "3363:         '@SERVER@' => $vars['server_name'],",
          "3364:         '__SERVER__' => $vars['server_name'],",
          "3365:         '@VERBOSE@' => $vars['server_verbose'],",
          "3366:         '@VSERVER@' => $vars['server_verbose_or_name'],",
          "3367:         '@DATABASE@' => $vars['database'],",
          "3368:         '__DB__' => $vars['database'],",
          "3369:         '@TABLE@' => $vars['table'],",
          "3370:         '__TABLE__' => $vars['table'],",
          "3371:         '@PHPMYADMIN@' => $vars['phpmyadmin_version'],",
          "3372:         );",
          "3375:     if (! is_null($escape)) {",
          "3376:         foreach ($replace as $key => $val) {",
          "3377:             $replace[$key] = $escape($val);",
          "3382:     if (strpos($string, '@FIELDS@') !== false) {",
          "3383:         $string = strtr($string, array('@FIELDS@' => '@COLUMNS@'));",
          "3387:     if (strpos($string, '@COLUMNS@') !== false) {",
          "3388:         $columns_list = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);",
          "3390:         $column_names = array();",
          "3391:         foreach ($columns_list as $column) {",
          "3392:             if (! is_null($escape)) {",
          "3393:                 $column_names[] = $escape($column['Field']);",
          "3394:             } else {",
          "3395:                 $column_names[] = $column['Field'];",
          "3399:         $replace['@COLUMNS@'] = implode(',', $column_names);",
          "3403:     return strtr(strftime($string), $replace);",
          "3404: }",
          "3415: function PMA_getBrowseUploadFileBlock($max_upload_size)",
          "3416: {",
          "3418:     $block_html = '';",
          "3420:     if ($GLOBALS['is_upload'] && ! empty($GLOBALS['cfg']['UploadDir'])) {",
          "3421:         $block_html .= '<label for=\"radio_import_file\">';",
          "3422:     } else {",
          "3423:         $block_html .= '<label for=\"input_import_file\">';",
          "3426:     $block_html .= __(\"Browse your computer:\") . '</label>'",
          "3427:         . '<div id=\"upload_form_status\" style=\"display: none;\"></div>'",
          "3428:         . '<div id=\"upload_form_status_info\" style=\"display: none;\"></div>'",
          "3429:         . '<input type=\"file\" name=\"import_file\" id=\"input_import_file\" />'",
          "3430:         . PMA_getFormattedMaximumUploadSize($max_upload_size) . \"\\n\"",
          "3432:         . PMA_generateHiddenMaxFileSize($max_upload_size) . \"\\n\";",
          "3434:     return $block_html;",
          "3435: }",
          "3447: function PMA_getSelectUploadFileBlock($import_list, $uploaddir)",
          "3448: {",
          "3450:     $block_html = '';",
          "3452:     $block_html .= '<label for=\"radio_local_import_file\">'",
          "3453:         . sprintf(",
          "3454:             __(\"Select from the web server upload directory <b>%s</b>:\"),",
          "3455:             htmlspecialchars(PMA_userDir($uploaddir))",
          "3456:         )",
          "3457:         . '</label>';",
          "3459:     $extensions = '';",
          "3460:     foreach ($import_list as $val) {",
          "3461:         if (! empty($extensions)) {",
          "3462:             $extensions .= '|';",
          "3464:         $extensions .= $val['extension'];",
          "3467:     $matcher = '@\\.(' . $extensions . ')(\\.('",
          "3468:         . PMA_supportedDecompressions() . '))?$@';",
          "3470:     $active = (isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed']",
          "3471:         && isset($local_import_file))",
          "3472:         ? $local_import_file",
          "3473:         : '';",
          "3475:     $files = PMA_getFileSelectOptions(",
          "3476:         PMA_userDir($uploaddir),",
          "3477:         $matcher,",
          "3478:         $active",
          "3479:     );",
          "3481:     if ($files === false) {",
          "3482:         PMA_Message::error(",
          "3483:             __('The directory you set for upload work cannot be reached')",
          "3484:         )->display();",
          "3485:     } elseif (! empty($files)) {",
          "3486:         $block_html .= \"\\n\"",
          "3487:             . '    <select style=\"margin: 5px\" size=\"1\" name=\"local_import_file\" '",
          "3488:             .'id=\"select_local_import_file\">' . \"\\n\"",
          "3489:             . '        <option value=\"\">&nbsp;</option>' . \"\\n\"",
          "3490:             . $files",
          "3491:             . '    </select>' . \"\\n\";",
          "3492:     } elseif (empty ($files)) {",
          "3493:         $block_html .= '<i>' . __('There are no files to upload') . '</i>';",
          "3496:     return $block_html;",
          "3498: }",
          "3506: function PMA_buildActionTitles()",
          "3507: {",
          "3508:     $titles = array();",
          "3510:     $titles['Browse']     = PMA_getIcon('b_browse.png', __('Browse'));",
          "3511:     $titles['NoBrowse']   = PMA_getIcon('bd_browse.png', __('Browse'));",
          "3512:     $titles['Search']     = PMA_getIcon('b_select.png', __('Search'));",
          "3513:     $titles['NoSearch']   = PMA_getIcon('bd_select.png', __('Search'));",
          "3514:     $titles['Insert']     = PMA_getIcon('b_insrow.png', __('Insert'));",
          "3515:     $titles['NoInsert']   = PMA_getIcon('bd_insrow.png', __('Insert'));",
          "3516:     $titles['Structure']  = PMA_getIcon('b_props.png', __('Structure'));",
          "3517:     $titles['Drop']       = PMA_getIcon('b_drop.png', __('Drop'));",
          "3518:     $titles['NoDrop']     = PMA_getIcon('bd_drop.png', __('Drop'));",
          "3519:     $titles['Empty']      = PMA_getIcon('b_empty.png', __('Empty'));",
          "3520:     $titles['NoEmpty']    = PMA_getIcon('bd_empty.png', __('Empty'));",
          "3521:     $titles['Edit']       = PMA_getIcon('b_edit.png', __('Edit'));",
          "3522:     $titles['NoEdit']     = PMA_getIcon('bd_edit.png', __('Edit'));",
          "3523:     $titles['Export']     = PMA_getIcon('b_export.png', __('Export'));",
          "3524:     $titles['NoExport']   = PMA_getIcon('bd_export.png', __('Export'));",
          "3525:     $titles['Execute']    = PMA_getIcon('b_nextpage.png', __('Execute'));",
          "3526:     $titles['NoExecute']  = PMA_getIcon('bd_nextpage.png', __('Execute'));",
          "3528:     return $titles;",
          "3529: }",
          "3543: function PMA_getSupportedDatatypes($html = false, $selected = '')",
          "3544: {",
          "3545:     if ($html) {",
          "3548:         $retval = '';",
          "3550:         foreach ($GLOBALS['PMA_Types']->getColumns() as $key => $value) {",
          "3552:             if (is_array($value)) {",
          "3554:                 $retval .= \"<optgroup label='\" . htmlspecialchars($key) . \"'>\";",
          "3555:                 foreach ($value as $subvalue) {",
          "3557:                     if ($subvalue == $selected) {",
          "3560:                             $GLOBALS['PMA_Types']->getTypeDescription($subvalue),",
          "3561:                             $subvalue",
          "3563:                     } else if ($subvalue === '-') {",
          "3564:                         $retval .= '<option disabled=\"disabled\">';",
          "3565:                         $retval .= $subvalue;",
          "3566:                         $retval .= '</option>';",
          "3570:                             $GLOBALS['PMA_Types']->getTypeDescription($subvalue),",
          "3571:                             $subvalue",
          "3575:                 $retval .= '</optgroup>';",
          "3577:             } else {",
          "3579:                 if ($selected == $value) {",
          "3580:                     $retval .= sprintf(",
          "3581:                         '<option selected=\"selected\" title=\"%s\">%s</option>',",
          "3582:                         $GLOBALS['PMA_Types']->getTypeDescription($value),",
          "3583:                         $value",
          "3584:                     );",
          "3585:                 } else {",
          "3586:                     $retval .= sprintf(",
          "3587:                         '<option title=\"%s\">%s</option>',",
          "3588:                         $GLOBALS['PMA_Types']->getTypeDescription($value),",
          "3589:                         $value",
          "3590:                     );",
          "3591:                 }",
          "3594:         }",
          "3596:     } else {",
          "3597:         $retval = array();",
          "3598:         foreach ($GLOBALS['PMA_Types']->getColumns() as $value) {",
          "3600:             if (is_array($value)) {",
          "3601:                 foreach ($value as $subvalue) {",
          "3602:                     if ($subvalue !== '-') {",
          "3603:                         $retval[] = $subvalue;",
          "3606:             } else {",
          "3607:                 if ($value !== '-') {",
          "3608:                     $retval[] = $value;",
          "3609:                 }",
          "3613:     }",
          "3615:     return $retval;",
          "3616: } // end PMA_getSupportedDatatypes()",
          "3625: function PMA_unsupportedDatatypes()",
          "3626: {",
          "3627:     $no_support_types = array();",
          "3628:     return $no_support_types;",
          "3629: }",
          "3639: function PMA_getGISDatatypes($upper_case = false)",
          "3640: {",
          "3641:     $gis_data_types = array(",
          "3642:         'geometry',",
          "3643:         'point',",
          "3644:         'linestring',",
          "3645:         'polygon',",
          "3646:         'multipoint',",
          "3647:         'multilinestring',",
          "3648:         'multipolygon',",
          "3649:         'geometrycollection'",
          "3650:     );",
          "3651:     if ($upper_case) {",
          "3652:         for ($i = 0; $i < count($gis_data_types); $i++) {",
          "3653:             $gis_data_types[$i] = strtoupper($gis_data_types[$i]);",
          "3656:     return $gis_data_types;",
          "3657: }",
          "3667: function PMA_createGISData($gis_string)",
          "3668: {",
          "3669:     $gis_string = trim($gis_string);",
          "3670:     $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|'",
          "3671:         . 'POLYGON|MULTIPOLYGON|GEOMETRYCOLLECTION)';",
          "3672:     if (preg_match(\"/^'\" . $geom_types . \"\\(.*\\)',[0-9]*$/i\", $gis_string)) {",
          "3673:         return 'GeomFromText(' . $gis_string . ')';",
          "3674:     } elseif (preg_match(\"/^\" . $geom_types . \"\\(.*\\)$/i\", $gis_string)) {",
          "3675:         return \"GeomFromText('\" . $gis_string . \"')\";",
          "3676:     } else {",
          "3677:         return $gis_string;",
          "3679: }",
          "3696: function PMA_getGISFunctions($geom_type = null, $binary = true, $display = false)",
          "3697: {",
          "3698:     $funcs = array();",
          "3699:     if ($display) {",
          "3700:         $funcs[] = array('display' => ' ');",
          "3701:     }",
          "3704:     $funcs['Dimension']    = array('params' => 1, 'type' => 'int');",
          "3705:     $funcs['Envelope']     = array('params' => 1, 'type' => 'Polygon');",
          "3706:     $funcs['GeometryType'] = array('params' => 1, 'type' => 'text');",
          "3707:     $funcs['SRID']         = array('params' => 1, 'type' => 'int');",
          "3708:     $funcs['IsEmpty']      = array('params' => 1, 'type' => 'int');",
          "3709:     $funcs['IsSimple']     = array('params' => 1, 'type' => 'int');",
          "3711:     $geom_type = trim(strtolower($geom_type));",
          "3712:     if ($display && $geom_type != 'geometry' && $geom_type != 'multipoint') {",
          "3713:         $funcs[] = array('display' => '--------');",
          "3714:     }",
          "3717:     if ($geom_type == 'point') {",
          "3718:         $funcs['X'] = array('params' => 1, 'type' => 'float');",
          "3719:         $funcs['Y'] = array('params' => 1, 'type' => 'float');",
          "3721:     } elseif ($geom_type == 'multipoint') {",
          "3723:     } elseif ($geom_type == 'linestring') {",
          "3724:         $funcs['EndPoint']   = array('params' => 1, 'type' => 'point');",
          "3725:         $funcs['GLength']    = array('params' => 1, 'type' => 'float');",
          "3726:         $funcs['NumPoints']  = array('params' => 1, 'type' => 'int');",
          "3727:         $funcs['StartPoint'] = array('params' => 1, 'type' => 'point');",
          "3728:         $funcs['IsRing']     = array('params' => 1, 'type' => 'int');",
          "3730:     } elseif ($geom_type == 'multilinestring') {",
          "3731:         $funcs['GLength']  = array('params' => 1, 'type' => 'float');",
          "3732:         $funcs['IsClosed'] = array('params' => 1, 'type' => 'int');",
          "3734:     } elseif ($geom_type == 'polygon') {",
          "3735:         $funcs['Area']             = array('params' => 1, 'type' => 'float');",
          "3736:         $funcs['ExteriorRing']     = array('params' => 1, 'type' => 'linestring');",
          "3737:         $funcs['NumInteriorRings'] = array('params' => 1, 'type' => 'int');",
          "3739:     } elseif ($geom_type == 'multipolygon') {",
          "3740:         $funcs['Area']     = array('params' => 1, 'type' => 'float');",
          "3741:         $funcs['Centroid'] = array('params' => 1, 'type' => 'point');",
          "3745:     } elseif ($geom_type == 'geometrycollection') {",
          "3746:         $funcs['NumGeometries'] = array('params' => 1, 'type' => 'int');",
          "3747:     }",
          "3750:     if ($binary) {",
          "3752:         if ($display) {",
          "3756:         if (PMA_MYSQL_INT_VERSION < 50601) {",
          "3757:             $funcs['Crosses']    = array('params' => 2, 'type' => 'int');",
          "3758:             $funcs['Contains']   = array('params' => 2, 'type' => 'int');",
          "3759:             $funcs['Disjoint']   = array('params' => 2, 'type' => 'int');",
          "3760:             $funcs['Equals']     = array('params' => 2, 'type' => 'int');",
          "3761:             $funcs['Intersects'] = array('params' => 2, 'type' => 'int');",
          "3762:             $funcs['Overlaps']   = array('params' => 2, 'type' => 'int');",
          "3763:             $funcs['Touches']    = array('params' => 2, 'type' => 'int');",
          "3764:             $funcs['Within']     = array('params' => 2, 'type' => 'int');",
          "3765:         } else {",
          "3767:             $funcs['ST_Crosses']    = array('params' => 2, 'type' => 'int');",
          "3768:             $funcs['ST_Contains']   = array('params' => 2, 'type' => 'int');",
          "3769:             $funcs['ST_Disjoint']   = array('params' => 2, 'type' => 'int');",
          "3770:             $funcs['ST_Equals']     = array('params' => 2, 'type' => 'int');",
          "3771:             $funcs['ST_Intersects'] = array('params' => 2, 'type' => 'int');",
          "3772:             $funcs['ST_Overlaps']   = array('params' => 2, 'type' => 'int');",
          "3773:             $funcs['ST_Touches']    = array('params' => 2, 'type' => 'int');",
          "3774:             $funcs['ST_Within']     = array('params' => 2, 'type' => 'int');",
          "3777:         if ($display) {",
          "3778:             $funcs[] = array('display' => '--------');",
          "3781:         $funcs['MBRContains']   = array('params' => 2, 'type' => 'int');",
          "3782:         $funcs['MBRDisjoint']   = array('params' => 2, 'type' => 'int');",
          "3783:         $funcs['MBREquals']     = array('params' => 2, 'type' => 'int');",
          "3784:         $funcs['MBRIntersects'] = array('params' => 2, 'type' => 'int');",
          "3785:         $funcs['MBROverlaps']   = array('params' => 2, 'type' => 'int');",
          "3786:         $funcs['MBRTouches']    = array('params' => 2, 'type' => 'int');",
          "3787:         $funcs['MBRWithin']     = array('params' => 2, 'type' => 'int');",
          "3789:     return $funcs;",
          "3790: }",
          "3808: function PMA_getDefaultFunctionForField($field, $insert_mode)",
          "3809: {",
          "3810:     global $cfg, $analyzed_sql, $data;",
          "3812:     $default_function   = '';",
          "3815:     $current_class = $GLOBALS['PMA_Types']->getTypeClass($field['True_Type']);",
          "3816:     if (! empty($current_class)) {",
          "3817:         if (isset($cfg['DefaultFunctions']['FUNC_' . $current_class])) {",
          "3818:             $default_function   = $cfg['DefaultFunctions']['FUNC_' . $current_class];",
          "3820:     }",
          "3822:     $analyzed_sql_field_array = $analyzed_sql[0]['create_table_fields']",
          "3823:         [$field['Field']];",
          "3830:     if (($field['True_Type'] == 'timestamp')",
          "3831:         && empty($field['Default'])",
          "3832:         && empty($data)",
          "3833:         && ! isset($analyzed_sql_field_array['on_update_current_timestamp'])",
          "3834:         && ($analyzed_sql_field_array['default_value'] != 'NULL')",
          "3835:     ) {",
          "3836:         $default_function = $cfg['DefaultFunctions']['first_timestamp'];",
          "3837:     }",
          "3840:     if ($field['first_timestamp']) {",
          "3841:         $default_function = $cfg['DefaultFunctions']['first_timestamp'];",
          "3842:     }",
          "3847:     if ($insert_mode",
          "3848:         && $field['Key'] == 'PRI'",
          "3849:         && ($field['Type'] == 'char(36)' || $field['Type'] == 'varchar(36)')",
          "3850:     ) {",
          "3851:          $default_function = $cfg['DefaultFunctions']['FUNC_UUID'];",
          "3852:     }",
          "3855:     if (isset($field['display_binary_as_hex'])) {",
          "3856:         $default_function = 'UNHEX';",
          "3857:     }",
          "3859:     return $default_function;",
          "3860: }",
          "3873: function PMA_getFunctionsForField($field, $insert_mode)",
          "3874: {",
          "3875:     $default_function = PMA_getDefaultFunctionForField($field, $insert_mode);",
          "3876:     $dropdown_built = array();",
          "3879:     $retval = '<option></option>' . \"\\n\";",
          "3882:     $functions = $GLOBALS['PMA_Types']->getFunctions($field['True_Type']);",
          "3883:     foreach ($functions as $function) {",
          "3884:         $retval .= '<option';",
          "3885:         if ($default_function === $function) {",
          "3886:             $retval .= ' selected=\"selected\"';",
          "3887:         }",
          "3888:         $retval .= '>' . $function . '</option>' . \"\\n\";",
          "3889:         $dropdown_built[$function] = true;",
          "3890:     }",
          "3893:     if (count($functions) > 0) {",
          "3894:         $retval .= '<option value=\"\" disabled=\"disabled\">--------</option>' . \"\\n\";",
          "3900:     $functions = $GLOBALS['PMA_Types']->getAllFunctions();",
          "3901:     foreach ($functions as $function) {",
          "3903:         if (isset($dropdown_built[$function])) {",
          "3904:             continue;",
          "3906:         $retval .= '<option';",
          "3907:         if ($default_function === $function) {",
          "3908:             $retval .= ' selected=\"selected\"';",
          "3910:         $retval .= '>' . $function . '</option>' . \"\\n\";",
          "3911:     } // end for",
          "3913:     return $retval;",
          "3914: } // end PMA_getFunctionsForField()",
          "3936: function PMA_currentUserHasPrivilege($priv, $db = null, $tbl = null)",
          "3937: {",
          "3940:     $user = PMA_DBI_fetch_value(\"SELECT CURRENT_USER();\");",
          "3941:     if ($user === false) {",
          "3942:         return false;",
          "3943:     }",
          "3945:     $user = explode('@', $user);",
          "3946:     $username  = \"''\";",
          "3947:     $username .= str_replace(\"'\", \"''\", $user[0]);",
          "3948:     $username .= \"''@''\";",
          "3949:     $username .= str_replace(\"'\", \"''\", $user[1]);",
          "3950:     $username .= \"''\";",
          "3953:     $query = \"SELECT `PRIVILEGE_TYPE` FROM `INFORMATION_SCHEMA`.`%s` \"",
          "3954:            . \"WHERE GRANTEE='%s' AND PRIVILEGE_TYPE='%s'\";",
          "3957:     $user_privileges = PMA_DBI_fetch_value(",
          "3958:         sprintf(",
          "3959:             $query,",
          "3960:             'USER_PRIVILEGES',",
          "3961:             $username,",
          "3962:             $priv",
          "3963:         )",
          "3964:     );",
          "3965:     if ($user_privileges) {",
          "3966:         return true;",
          "3967:     }",
          "3970:     if ($db !== null) {",
          "3972:         $db = str_replace(array('%', '_'), array('\\%', '\\_'), $db);",
          "3973:         $query .= \" AND TABLE_SCHEMA='%s'\";",
          "3974:         $schema_privileges = PMA_DBI_fetch_value(",
          "3977:                 'SCHEMA_PRIVILEGES',",
          "3979:                 $priv,",
          "3980:                 PMA_sqlAddSlashes($db)",
          "3983:         if ($schema_privileges) {",
          "3986:     } else {",
          "3993:     if ($tbl !== null) {",
          "3995:         $tbl = str_replace(array('%', '_'), array('\\%', '\\_'), $tbl);",
          "3996:         $query .= \" AND TABLE_NAME='%s'\";",
          "3997:         $table_privileges = PMA_DBI_fetch_value(",
          "3998:             sprintf(",
          "3999:                 $query,",
          "4000:                 'TABLE_PRIVILEGES',",
          "4001:                 $username,",
          "4002:                 $priv,",
          "4003:                 PMA_sqlAddSlashes($db),",
          "4004:                 PMA_sqlAddSlashes($tbl)",
          "4005:             )",
          "4006:         );",
          "4007:         if ($table_privileges) {",
          "4008:             return true;",
          "4013:     return false;",
          "4014: }",
          "4024: function PMA_getServerType()",
          "4025: {",
          "4026:     $server_type = 'MySQL';",
          "4027:     if (PMA_DRIZZLE) {",
          "4028:         $server_type = 'Drizzle';",
          "4029:     } else if (strpos(PMA_MYSQL_STR_VERSION, 'mariadb') !== false) {",
          "4030:         $server_type = 'MariaDB';",
          "4031:     } else if (stripos(PMA_MYSQL_VERSION_COMMENT, 'percona') !== false) {",
          "4032:         $server_type = 'Percona Server';",
          "4034:     return $server_type;",
          "4035: }",
          "4045: function PMA_analyzeLimitClause($limit_clause)",
          "4046: {",
          "4047:     $start_and_length = explode(',', str_ireplace('LIMIT', '', $limit_clause));",
          "4048:     return array(",
          "4049:         'start'  => trim($start_and_length[0]),",
          "4050:         'length' => trim($start_and_length[1])",
          "4051:     );",
          "4052: }",
          "4060: function PMA_getButton()",
          "4061: {",
          "4062:     return '<p class=\"print_ignore\">'",
          "4063:         . '<input type=\"button\" class=\"button\" id=\"print\" value=\"'",
          "4064:         . __('Print') . '\" />'",
          "4065:         . '</p>';",
          "4066: }",
          "4082: function PMA_mimeDefaultFunction($buffer)",
          "4083: {",
          "4084:     $buffer = htmlspecialchars($buffer);",
          "4085:     $buffer = str_replace(",
          "4086:         \"\\011\",",
          "4087:         ' &nbsp;&nbsp;&nbsp;',",
          "4088:         str_replace('  ', ' &nbsp;', $buffer)",
          "4089:     );",
          "4090:     $buffer = preg_replace(\"@((\\015\\012)|(\\015)|(\\012))@\", '<br />', $buffer);",
          "4092:     return $buffer;",
          "4093: }",
          "4104: function PMA_parseEnumSetValues($definition)",
          "4105: {",
          "4106:     $values_string = htmlentities($definition);",
          "4110:     $values = array();",
          "4111:     $in_string = false;",
          "4112:     $buffer = '';",
          "4114:     for ($i=0; $i<strlen($values_string); $i++) {",
          "4116:         $curr = $values_string[$i];",
          "4117:         $next = $i == strlen($values_string)-1 ? '' : $values_string[$i+1];",
          "4119:         if (! $in_string && $curr == \"'\") {",
          "4120:             $in_string = true;",
          "4121:         } else if ($in_string && $curr == \"\\\\\" && $next == \"\\\\\") {",
          "4122:             $buffer .= \"&#92;\";",
          "4123:             $i++;",
          "4124:         } else if ($in_string && $next == \"'\" && ($curr == \"'\" || $curr == \"\\\\\")) {",
          "4125:             $buffer .= \"&#39;\";",
          "4126:             $i++;",
          "4127:         } else if ($in_string && $curr == \"'\") {",
          "4128:             $in_string = false;",
          "4130:             $buffer = '';",
          "4131:         } else if ($in_string) {",
          "4132:              $buffer .= $curr;",
          "4135:     }",
          "4137:     if (strlen($buffer) > 0) {",
          "4139:         $values[] = $buffer;",
          "4142:     return $values;",
          "",
          "[Added Lines]",
          "15: class PMA_CommonFunctions",
          "23:     private function PMA_detectPow()",
          "24:     {",
          "25:         if (function_exists('bcpow')) {",
          "27:             return 'bcpow';",
          "28:         } elseif (function_exists('gmp_pow')) {",
          "30:             return 'gmp_pow';",
          "31:         } else {",
          "33:             return 'pow';",
          "34:         }",
          "47:     public function PMA_pow($base, $exp, $use_function = false)",
          "48:     {",
          "49:         static $pow_function = null;",
          "51:         if ($pow_function == null) {",
          "52:             $pow_function = $this->PMA_detectPow();",
          "53:         }",
          "55:         if (! $use_function) {",
          "56:             $use_function = $pow_function;",
          "57:         }",
          "59:         if (($exp < 0) && ($use_function != 'pow')) {",
          "60:             return false;",
          "61:         }",
          "63:         switch ($use_function) {",
          "64:         case 'bcpow' :",
          "66:             bcscale(10);",
          "67:             $pow = bcpow($base, $exp);",
          "68:             break;",
          "69:         case 'gmp_pow' :",
          "70:              $pow = gmp_strval(gmp_pow($base, $exp));",
          "71:             break;",
          "72:         case 'pow' :",
          "73:             $base = (float) $base;",
          "74:             $exp = (int) $exp;",
          "75:             $pow = pow($base, $exp);",
          "76:             break;",
          "77:         default:",
          "78:             $pow = $use_function($base, $exp);",
          "79:         }",
          "81:         return $pow;",
          "82:     }",
          "97:     public function PMA_getIcon($icon, $alternate = '', $force_text = false)",
          "98:     {",
          "100:         $include_icon = ($GLOBALS['cfg']['PropertiesIconic'] !== false);",
          "103:         $include_text = ($force_text || ($GLOBALS['cfg']['PropertiesIconic'] !== true));",
          "106:         $button = '<span class=\"nowrap\">';",
          "107:         if ($include_icon) {",
          "108:             $button .= $this->PMA_getImage($icon, $alternate);",
          "110:         if ($include_icon && $include_text) {",
          "111:             $button .= ' ';",
          "113:         if ($include_text) {",
          "114:             $button .= $alternate;",
          "116:         $button .= '</span>';",
          "118:         return $button;",
          "132:     public function PMA_getImage($image, $alternate = '', $attributes = array())",
          "133:     {",
          "134:         static $sprites; // cached list of available sprites (if any)",
          "136:         $url       = '';",
          "137:         $is_sprite = false;",
          "138:         $alternate = htmlspecialchars($alternate);",
          "141:         if (! isset($sprites)) {",
          "143:             if (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {",
          "144:                 include_once $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';",
          "145:                 $sprites = PMA_sprites();",
          "146:             } else {",
          "148:                 $sprites = array();",
          "149:             }",
          "150:         }",
          "154:         $class = str_replace(array('.gif','.png'), '', $image);",
          "155:         if (array_key_exists($class, $sprites)) {",
          "156:             $is_sprite = true;",
          "157:             $url = (defined('PMA_TEST_THEME') ? '../' : '') . 'themes/dot.gif';",
          "158:         } else {",
          "159:             $url = $GLOBALS['pmaThemeImage'] . $image;",
          "160:         }",
          "163:         if ($is_sprite) {",
          "164:             if (isset($attributes['class'])) {",
          "165:                 $attributes['class'] = \"icon ic_$class \" . $attributes['class'];",
          "166:             } else {",
          "167:                 $attributes['class'] = \"icon ic_$class\";",
          "168:             }",
          "169:         }",
          "172:         $attr_str = '';",
          "173:         foreach ($attributes as $key => $value) {",
          "174:             if (! in_array($key, array('alt', 'title'))) {",
          "175:                 $attr_str .= \" $key=\\\"$value\\\"\";",
          "176:             }",
          "177:         }",
          "180:         if (isset($attributes['alt'])) {",
          "181:             $alt = $attributes['alt'];",
          "182:         } else {",
          "183:             $alt = $alternate;",
          "184:         }",
          "187:         if (isset($attributes['title'])) {",
          "188:             $title = $attributes['title'];",
          "189:         } else {",
          "190:             $title = $alternate;",
          "191:         }",
          "194:         $template = '<img src=\"%s\" title=\"%s\" alt=\"%s\"%s />';",
          "195:         $retval = sprintf($template, $url, $title, $alt, $attr_str);",
          "197:         return $retval;",
          "210:     public function PMA_getFormattedMaximumUploadSize($max_upload_size)",
          "211:     {",
          "214:         list($max_size, $max_unit) = $this->PMA_formatByteDown($max_upload_size, 4);",
          "215:         return '(' . sprintf(__('Max: %s%s'), $max_size, $max_unit) . ')';",
          "216:     }",
          "229:     public function PMA_generateHiddenMaxFileSize($max_size)",
          "230:     {",
          "231:         return '<input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"' .$max_size . '\" />';",
          "232:     }",
          "251:     public function PMA_sqlAddSlashes(",
          "252:         $a_string = '', $is_like = false, $crlf = false, $php_code = false",
          "253:     ) {",
          "255:         if ($is_like) {",
          "256:             $a_string = str_replace('\\\\', '\\\\\\\\\\\\\\\\', $a_string);",
          "257:         } else {",
          "258:             $a_string = str_replace('\\\\', '\\\\\\\\', $a_string);",
          "259:         }",
          "261:         if ($crlf) {",
          "262:             $a_string = strtr(",
          "263:                 $a_string,",
          "264:                 array(\"\\n\" => '\\n', \"\\r\" => '\\r', \"\\t\" => '\\t')",
          "268:         if ($php_code) {",
          "269:             $a_string = str_replace('\\'', '\\\\\\'', $a_string);",
          "271:             $a_string = str_replace('\\'', '\\'\\'', $a_string);",
          "274:         return $a_string;",
          "275:     } // end of the 'PMA_sqlAddSlashes()' function",
          "289:     public function PMA_escapeMysqlWildcards($name)",
          "290:     {",
          "291:         return strtr($name, array('_' => '\\\\_', '%' => '\\\\%'));",
          "292:     } // end of the 'PMA_escapeMysqlWildcards()' function",
          "305:     public function PMA_unescapeMysqlWildcards($name)",
          "306:     {",
          "307:         return strtr($name, array('\\\\_' => '_', '\\\\%' => '%'));",
          "308:     } // end of the 'PMA_unescapeMysqlWildcards()' function",
          "321:     public function PMA_unQuote($quoted_string, $quote = null)",
          "322:     {",
          "323:         $quotes = array();",
          "325:         if ($quote === null) {",
          "326:             $quotes[] = '`';",
          "327:             $quotes[] = '\"';",
          "328:             $quotes[] = \"'\";",
          "329:         } else {",
          "330:             $quotes[] = $quote;",
          "331:         }",
          "333:         foreach ($quotes as $quote) {",
          "334:             if (substr($quoted_string, 0, 1) === $quote",
          "335:                 && substr($quoted_string, -1, 1) === $quote",
          "336:             ) {",
          "337:                 $unquoted_string = substr($quoted_string, 1, -1);",
          "339:                 $unquoted_string = str_replace(",
          "340:                     $quote . $quote,",
          "341:                     $quote,",
          "342:                     $unquoted_string",
          "343:                 );",
          "344:                 return $unquoted_string;",
          "345:             }",
          "346:         }",
          "348:         return $quoted_string;",
          "366:     public function PMA_formatSql($parsed_sql, $unparsed_sql = '')",
          "367:     {",
          "368:         global $cfg;",
          "373:         if (PMA_SQP_isError()) {",
          "374:             return htmlspecialchars($parsed_sql['raw']);",
          "375:         }",
          "377:         if (! is_array($parsed_sql)) {",
          "380:             $formatted_sql = \"<pre>\\n\";",
          "381:             if (($cfg['SQP']['fmtType'] == 'none') && ($unparsed_sql != '')) {",
          "382:                 $formatted_sql .= $unparsed_sql;",
          "384:                 $formatted_sql .= $parsed_sql;",
          "386:             $formatted_sql .= \"\\n</pre>\";",
          "387:             return $formatted_sql;",
          "390:         $formatted_sql = '';",
          "392:         switch ($cfg['SQP']['fmtType']) {",
          "393:         case 'none':",
          "394:             if ($unparsed_sql != '') {",
          "395:                 $formatted_sql = '<span class=\"inner_sql\"><pre>' . \"\\n\"",
          "396:                     . PMA_SQP_formatNone(array('raw' => $unparsed_sql)) . \"\\n\"",
          "397:                     . '</pre></span>';",
          "398:             } else {",
          "399:                 $formatted_sql = PMA_SQP_formatNone($parsed_sql);",
          "400:             }",
          "401:             break;",
          "402:         case 'html':",
          "403:             $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'color');",
          "404:             break;",
          "405:         case 'text':",
          "406:             $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'text');",
          "407:             break;",
          "408:         default:",
          "409:             break;",
          "410:         } // end switch",
          "412:         return $formatted_sql;",
          "413:     } // end of the \"PMA_formatSql()\" function",
          "426:     public function PMA_showDocLink($link, $target = 'documentation')",
          "427:     {",
          "428:         return '<a href=\"' . $link . '\" target=\"' . $target . '\">'",
          "429:             . $this->PMA_getImage('b_help.png', __('Documentation'))",
          "430:             . '</a>';",
          "431:     } // end of the 'PMA_showDocLink()' function",
          "447:     public function PMA_showMySQLDocu(",
          "448:         $chapter, $link, $big_icon = false, $anchor = '', $just_open = false",
          "449:     ) {",
          "451:         global $cfg;",
          "453:         if (($cfg['MySQLManualType'] == 'none') || empty($cfg['MySQLManualBase'])) {",
          "454:             return '';",
          "455:         }",
          "458:         $chapter = str_replace('_', '-', strtolower($chapter));",
          "459:         $link = str_replace('_', '-', strtolower($link));",
          "461:         switch ($cfg['MySQLManualType']) {",
          "462:         case 'chapters':",
          "463:             if (empty($chapter)) {",
          "464:                 $chapter = 'index';",
          "465:             }",
          "466:             if (empty($anchor)) {",
          "467:                 $anchor = $link;",
          "468:             }",
          "469:             $url = $cfg['MySQLManualBase'] . '/' . $chapter . '.html#' . $anchor;",
          "470:             break;",
          "471:         case 'big':",
          "472:             if (empty($anchor)) {",
          "473:                 $anchor = $link;",
          "474:             }",
          "475:             $url = $cfg['MySQLManualBase'] . '#' . $anchor;",
          "476:             break;",
          "477:         case 'searchable':",
          "478:             if (empty($link)) {",
          "479:                 $link = 'index';",
          "480:             }",
          "481:             $url = $cfg['MySQLManualBase'] . '/' . $link . '.html';",
          "482:             if (! empty($anchor)) {",
          "483:                 $url .= '#' . $anchor;",
          "484:             }",
          "485:             break;",
          "486:         case 'viewable':",
          "487:         default:",
          "488:             if (empty($link)) {",
          "489:                 $link = 'index';",
          "490:             }",
          "491:             $mysql = '5.0';",
          "492:             $lang = 'en';",
          "493:             if (defined('PMA_MYSQL_INT_VERSION')) {",
          "494:                 if (PMA_MYSQL_INT_VERSION >= 50500) {",
          "495:                     $mysql = '5.5';",
          "497:                     $lang = _pgettext('MySQL 5.5 documentation language', 'en');",
          "498:                 } else if (PMA_MYSQL_INT_VERSION >= 50100) {",
          "499:                     $mysql = '5.1';",
          "501:                     $lang = _pgettext('MySQL 5.1 documentation language', 'en');",
          "502:                 } else {",
          "503:                     $mysql = '5.0';",
          "505:                     $lang = _pgettext('MySQL 5.0 documentation language', 'en');",
          "506:                 }",
          "507:             }",
          "508:             $url = $cfg['MySQLManualBase']",
          "509:                 . '/' . $mysql . '/' . $lang . '/' . $link . '.html';",
          "510:             if (! empty($anchor)) {",
          "511:                 $url .= '#' . $anchor;",
          "512:             }",
          "513:             break;",
          "514:         }",
          "516:         $open_link = '<a href=\"' . PMA_linkURL($url) . '\" target=\"mysql_doc\">';",
          "517:         if ($just_open) {",
          "518:             return $open_link;",
          "519:         } elseif ($big_icon) {",
          "520:             return $open_link",
          "521:                 . $this->PMA_getImage('b_sqlhelp.png', __('Documentation')) . '</a>';",
          "523:             return $this->PMA_showDocLink(PMA_linkURL($url), 'mysql_doc');",
          "526:     } // end of the 'PMA_showMySQLDocu()' function",
          "538:     public function PMA_showDocu($anchor)",
          "539:     {",
          "540:         return $this->PMA_showDocLink('Documentation.html#' . $anchor);",
          "541:     } // end of the 'PMA_showDocu()' function",
          "553:     public function PMA_showPHPDocu($target)",
          "554:     {",
          "555:         $url = PMA_getPHPDocLink($target);",
          "557:         return $this->PMA_showDocLink($url);",
          "558:     } // end of the 'PMA_showPHPDocu()' function",
          "570:     public function PMA_showHint($message)",
          "571:     {",
          "572:         return '<span class=\"pma_hint\">'",
          "573:             . $this->PMA_getImage('b_help.png')",
          "574:             . '<span class=\"hide\">' . $message . '</span>'",
          "575:             . '</span>';",
          "595:     public function PMA_mysqlDie(",
          "596:         $error_message = '', $the_query = '',",
          "597:         $is_modify_link = true, $back_url = '', $exit = true",
          "598:     ) {",
          "600:         global $table, $db;",
          "602:         $error_msg = '';",
          "604:         if (! $error_message) {",
          "605:             $error_message = PMA_DBI_getError();",
          "606:         }",
          "607:         if (! $the_query && ! empty($GLOBALS['sql_query'])) {",
          "608:             $the_query = $GLOBALS['sql_query'];",
          "609:         }",
          "612:         if (! function_exists('PMA_SQP_isError') || PMA_SQP_isError()) {",
          "613:             $formatted_sql = htmlspecialchars($the_query);",
          "614:         } elseif (empty($the_query) || (trim($the_query) == '')) {",
          "615:             $formatted_sql = '';",
          "616:         } else {",
          "617:             if (strlen($the_query) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {",
          "618:                 $formatted_sql = htmlspecialchars(",
          "619:                     substr($the_query, 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'])",
          "620:                 )",
          "621:                 . '[...]';",
          "622:             } else {",
          "623:                 $formatted_sql = $this->PMA_formatSql(PMA_SQP_parse($the_query), $the_query);",
          "624:             }",
          "627:         $error_msg .= \"\\n\" . '<!-- PMA-SQL-ERROR -->' . \"\\n\";",
          "628:         $error_msg .= '    <div class=\"error\"><h1>' . __('Error')",
          "629:             . '</h1>' . \"\\n\";",
          "633:         if (! empty($the_query) && ! strstr($the_query, 'connect')) {",
          "635:             if (function_exists('PMA_SQP_isError') && PMA_SQP_isError()) {",
          "636:                 $error_msg .= PMA_SQP_getErrorString() . \"\\n\";",
          "637:                 $error_msg .= '<br />' . \"\\n\";",
          "638:             }",
          "641:             $error_msg .= '<p><strong>' . __('SQL query') . ':</strong>' . \"\\n\";",
          "642:             if (strstr(strtolower($formatted_sql), 'select')) {",
          "644:                 $error_msg .= $this->PMA_showMySQLDocu('SQL-Syntax', 'SELECT');",
          "646:             if ($is_modify_link) {",
          "647:                 $_url_params = array(",
          "648:                     'sql_query' => $the_query,",
          "649:                     'show_query' => 1,",
          "650:                 );",
          "651:                 if (strlen($table)) {",
          "652:                     $_url_params['db'] = $db;",
          "653:                     $_url_params['table'] = $table;",
          "654:                     $doedit_goto = '<a href=\"tbl_sql.php'",
          "655:                         . PMA_generate_common_url($_url_params) . '\">';",
          "656:                 } elseif (strlen($db)) {",
          "657:                     $_url_params['db'] = $db;",
          "658:                     $doedit_goto = '<a href=\"db_sql.php'",
          "659:                         . PMA_generate_common_url($_url_params) . '\">';",
          "660:                 } else {",
          "661:                     $doedit_goto = '<a href=\"server_sql.php'",
          "662:                         . PMA_generate_common_url($_url_params) . '\">';",
          "663:                 }",
          "665:                 $error_msg .= $doedit_goto",
          "666:                    . $this->PMA_getIcon('b_edit.png', __('Edit'))",
          "667:                    . '</a>';",
          "668:             } // end if",
          "669:             $error_msg .= '    </p>' . \"\\n\"",
          "670:                 .'<p>' . \"\\n\"",
          "671:                 . $formatted_sql . \"\\n\"",
          "672:                 . '</p>' . \"\\n\";",
          "675:         if (! empty($error_message)) {",
          "676:             $error_message = preg_replace(",
          "677:                 \"@((\\015\\012)|(\\015)|(\\012)){3,}@\",",
          "678:                 \"\\n\\n\",",
          "679:                 $error_message",
          "680:             );",
          "684:         $error_msg .= '<p>' . \"\\n\"",
          "685:             . '    <strong>' . __('MySQL said: ') . '</strong>'",
          "686:             . $this->PMA_showMySQLDocu('Error-messages-server', 'Error-messages-server')",
          "687:             . \"\\n\"",
          "688:             . '</p>' . \"\\n\";",
          "695:         $error_message = str_replace('  ', '&nbsp;&nbsp;', $error_message);",
          "697:         $error_message = str_replace(\"\\t\", '&nbsp;&nbsp;&nbsp;&nbsp;', $error_message);",
          "699:         $error_message = nl2br($error_message);",
          "701:         $error_msg .= '<code>' . \"\\n\"",
          "702:             . $error_message . \"\\n\"",
          "703:             . '</code><br />' . \"\\n\";",
          "704:         $error_msg .= '</div>';",
          "706:         $_SESSION['Import_message']['message'] = $error_msg;",
          "708:         if ($exit) {",
          "714:             if ($GLOBALS['is_ajax_request'] == true) {",
          "715:                 $response = PMA_Response::getInstance();",
          "716:                 $response->isSuccess(false);",
          "717:                 $response->addJSON('message', $error_msg);",
          "718:                 exit;",
          "719:             }",
          "720:             if (! empty($back_url)) {",
          "721:                 if (strstr($back_url, '?')) {",
          "722:                     $back_url .= '&amp;no_history=true';",
          "723:                 } else {",
          "724:                     $back_url .= '?no_history=true';",
          "725:                 }",
          "727:                 $_SESSION['Import_message']['go_back_url'] = $back_url;",
          "729:                 $error_msg .= '<fieldset class=\"tblFooters\">';",
          "730:                 $error_msg .= '[ <a href=\"' . $back_url . '\">' . __('Back') . '</a> ]';",
          "731:                 $error_msg .= '</fieldset>' . \"\\n\\n\";",
          "732:             }",
          "734:             echo $error_msg;",
          "735:             exit;",
          "736:         } else {",
          "737:             echo $error_msg;",
          "739:     } // end of the 'PMA_mysqlDie()' function",
          "752:     public function PMA_getTableList($db, $tables = null, $limit_offset = 0,",
          "753:         $limit_count = false",
          "754:     ) {",
          "755:         $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];",
          "757:         if ($tables === null) {",
          "758:             $tables = PMA_DBI_get_tables_full(",
          "759:                 $db, false, false, null, $limit_offset, $limit_count",
          "760:             );",
          "761:             if ($GLOBALS['cfg']['NaturalOrder']) {",
          "762:                 uksort($tables, 'strnatcasecmp');",
          "766:         if (count($tables) < 1) {",
          "767:             return $tables;",
          "768:         }",
          "770:         $default = array(",
          "771:             'Name'      => '',",
          "772:             'Rows'      => 0,",
          "773:             'Comment'   => '',",
          "774:             'disp_name' => '',",
          "775:         );",
          "777:         $table_groups = array();",
          "779:         foreach ($tables as $table_name => $table) {",
          "781:             if ($table['Rows'] === null) {",
          "791:                 $tbl_is_view = $table['TABLE_TYPE'] == 'VIEW';",
          "793:                 if ($tbl_is_view || PMA_is_system_schema($db)) {",
          "794:                     $table['Rows'] = PMA_Table::countRecords(",
          "795:                         $db,",
          "796:                         $table['Name'],",
          "797:                         false,",
          "798:                         true",
          "799:                     );",
          "805:             if ($GLOBALS['cfg']['LeftFrameDBTree']",
          "806:                 && $sep && strstr($table_name, $sep)",
          "807:             ) {",
          "809:                 $parts = explode($sep, $table_name);",
          "811:                 $group =& $table_groups;",
          "812:                 $i = 0;",
          "813:                 $group_name_full = '';",
          "814:                 $parts_cnt = count($parts) - 1;",
          "816:                 while (($i < $parts_cnt)",
          "817:                     && ($i < $GLOBALS['cfg']['LeftFrameTableLevel'])",
          "818:                 ) {",
          "820:                     $group_name = $parts[$i] . $sep;",
          "821:                     $group_name_full .= $group_name;",
          "823:                     if (! isset($group[$group_name])) {",
          "825:                         $group[$group_name] = array();",
          "826:                         $group[$group_name]['is' . $sep . 'group'] = true;",
          "827:                         $group[$group_name]['tab' . $sep . 'count'] = 1;",
          "828:                         $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;",
          "830:                     } elseif (! isset($group[$group_name]['is' . $sep . 'group'])) {",
          "832:                         $table = $group[$group_name];",
          "833:                         $group[$group_name] = array();",
          "834:                         $group[$group_name][$group_name] = $table;",
          "835:                         unset($table);",
          "836:                         $group[$group_name]['is' . $sep . 'group'] = true;",
          "837:                         $group[$group_name]['tab' . $sep . 'count'] = 1;",
          "838:                         $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;",
          "840:                     } else {",
          "841:                         $group[$group_name]['tab' . $sep . 'count']++;",
          "842:                     }",
          "844:                     $group =& $group[$group_name];",
          "845:                     $i++;",
          "846:                 }",
          "848:             } else {",
          "849:                 if (! isset($table_groups[$table_name])) {",
          "850:                     $table_groups[$table_name] = array();",
          "851:                 }",
          "852:                 $group =& $table_groups;",
          "853:             }",
          "856:             if ($GLOBALS['cfg']['ShowTooltipAliasTB']",
          "857:                 && $GLOBALS['cfg']['ShowTooltipAliasTB'] !== 'nested'",
          "858:                 && $table['Comment'] // do not switch if the comment is empty",
          "859:                 && $table['Comment'] != 'VIEW' // happens in MySQL 5.1",
          "860:             ) {",
          "862:                 $table['disp_name'] = $table['Comment'];",
          "863:                 $table['Comment'] = $table['Name'];",
          "864:             } else {",
          "865:                 $table['disp_name'] = $table['Name'];",
          "866:             }",
          "868:             $group[$table_name] = array_merge($default, $table);",
          "869:         }",
          "871:         return $table_groups;",
          "897:     public function PMA_backquote($a_name, $do_it = true)",
          "898:     {",
          "900:         if (is_array($a_name)) {",
          "901:             foreach ($a_name as &$data) {",
          "902:                 $data = $this->PMA_backquote($data, $do_it);",
          "903:             }",
          "904:             return $a_name;",
          "907:         if (! $do_it) {",
          "908:             global $PMA_SQPdata_forbidden_word;",
          "910:             if (! in_array(strtoupper($a_name), $PMA_SQPdata_forbidden_word)) {",
          "911:                 return $a_name;",
          "912:             }",
          "916:         if (strlen($a_name) && $a_name !== '*') {",
          "917:             return '`' . str_replace('`', '``', $a_name) . '`';",
          "919:             return $a_name;",
          "922:     } // end of the 'PMA_backquote()' function",
          "932:     public function PMA_whichCrlf()",
          "933:     {",
          "936:         if (PMA_USR_OS == 'Win') {",
          "937:             $the_crlf = \"\\r\\n\";",
          "940:             $the_crlf = \"\\n\";",
          "943:         return $the_crlf;",
          "944:     } // end of the 'PMA_whichCrlf()' function",
          "956:     public function PMA_getReloadNavigationScript($jsonly = false)",
          "957:     {",
          "958:         $retval = '';",
          "960:         if (isset($GLOBALS['reload']) && $GLOBALS['reload']) {",
          "965:             unset($_SESSION['tmp_user_values']['table_limit_offset']);",
          "966:             $reload_url = './navigation.php?' . PMA_generate_common_url(",
          "967:                 $GLOBALS['db'],",
          "968:                 '',",
          "969:                 '&'",
          "970:             );",
          "972:             if (! $jsonly) {",
          "973:                 $retval .= '<script type=\"text/javascript\">' . PHP_EOL;",
          "974:             }",
          "975:             $retval .= '//<![CDATA[' . PHP_EOL;",
          "976:             $retval .= 'if (typeof(window.parent) != \"undefined\"' . PHP_EOL;",
          "977:             $retval .= '    && typeof(window.parent.frame_navigation) != \"undefined\"'",
          "978:                  . PHP_EOL;",
          "979:             $retval .= '    && window.parent.goTo) {' . PHP_EOL;",
          "980:             $retval .= '    window.parent.goTo(\"' . $reload_url . '\");' . PHP_EOL;",
          "981:             $retval .= '}' . PHP_EOL;",
          "982:             $retval .= '//]]>' . PHP_EOL;",
          "984:             if (! $jsonly) {",
          "985:                 $retval .= '</script>' . PHP_EOL;",
          "988:             unset($GLOBALS['reload']);",
          "989:         }",
          "990:         return $retval;",
          "991:     }",
          "1007:     public function PMA_getMessage(",
          "1008:         $message, $sql_query = null, $type = 'notice', $is_view = false",
          "1009:     ) {",
          "1011:         global $cfg;",
          "1012:         $retval = '';",
          "1014:         if (null === $sql_query) {",
          "1015:             if (! empty($GLOBALS['display_query'])) {",
          "1016:                 $sql_query = $GLOBALS['display_query'];",
          "1017:             } elseif ($cfg['SQP']['fmtType'] == 'none'",
          "1018:                 && ! empty($GLOBALS['unparsed_sql'])",
          "1020:                 $sql_query = $GLOBALS['unparsed_sql'];",
          "1021:             } elseif (! empty($GLOBALS['sql_query'])) {",
          "1022:                 $sql_query = $GLOBALS['sql_query'];",
          "1023:             } else {",
          "1024:                 $sql_query = '';",
          "1028:         if (isset($GLOBALS['using_bookmark_message'])) {",
          "1029:             $retval .= $GLOBALS['using_bookmark_message']->getDisplay();",
          "1030:             unset($GLOBALS['using_bookmark_message']);",
          "1035:         if (! $is_view && strlen($GLOBALS['table']) && $cfg['ShowTooltip']) {",
          "1036:             $tooltip = PMA_Table::sGetToolTip($GLOBALS['db'], $GLOBALS['table']);",
          "1037:             $uni_tbl = PMA_jsFormat($GLOBALS['db'] . '.' . $GLOBALS['table'], false);",
          "1038:             $retval .= \"\\n\";",
          "1039:             $retval .= '<script type=\"text/javascript\">' . \"\\n\";",
          "1040:             $retval .= '//<![CDATA[' . \"\\n\";",
          "1041:             $retval .= 'if (window.parent.updateTableTitle) {' . \"\\n\";",
          "1042:             $retval .= \"    window.parent.updateTableTitle('\"",
          "1043:                 . $uni_tbl . \"', '\" . PMA_jsFormat($tooltip, false) . \"');\" . \"\\n\";",
          "1044:             $retval .= '}' . \"\\n\";",
          "1045:             $retval .= '//]]>' . \"\\n\";",
          "1046:             $retval .= '</script>' . \"\\n\";",
          "1047:         } // end if ... elseif",
          "1051:         $retval .= '<div id=\"result_query\"'",
          "1052:             . ( isset($GLOBALS['cell_align_left'])",
          "1053:                 ? ' style=\"text-align: ' . $GLOBALS['cell_align_left'] . '\"'",
          "1054:                 : '' )",
          "1055:             . '>' . \"\\n\";",
          "1057:         if ($message instanceof PMA_Message) {",
          "1058:             if (isset($GLOBALS['special_message'])) {",
          "1059:                 $message->addMessage($GLOBALS['special_message']);",
          "1060:                 unset($GLOBALS['special_message']);",
          "1062:             $retval .= $message->getDisplay();",
          "1064:             $retval .= '<div class=\"' . $type . '\">';",
          "1065:             $retval .= PMA_sanitize($message);",
          "1066:             if (isset($GLOBALS['special_message'])) {",
          "1067:                 $retval .= PMA_sanitize($GLOBALS['special_message']);",
          "1068:                 unset($GLOBALS['special_message']);",
          "1070:             $retval .= '</div>';",
          "1071:         }",
          "1073:         if ($cfg['ShowSQL'] == true && ! empty($sql_query)) {",
          "1078:             if (! empty($GLOBALS['show_as_php'])) {",
          "1079:                 $new_line = '\\\\n\"<br />' . \"\\n\"",
          "1080:                     . '&nbsp;&nbsp;&nbsp;&nbsp;. \"';",
          "1081:                 $query_base = htmlspecialchars(addslashes($sql_query));",
          "1082:                 $query_base = preg_replace(",
          "1083:                     '/((\\015\\012)|(\\015)|(\\012))/', $new_line, $query_base",
          "1084:                 );",
          "1086:                 $query_base = $sql_query;",
          "1089:             $query_too_big = false;",
          "1091:             if (strlen($query_base) > $cfg['MaxCharactersInDisplayedSQL']) {",
          "1094:                 $query_too_big = true;",
          "1095:                 $shortened_query_base = nl2br(",
          "1096:                     htmlspecialchars(",
          "1097:                         substr($sql_query, 0, $cfg['MaxCharactersInDisplayedSQL'])",
          "1098:                         . '[...]'",
          "1099:                     )",
          "1100:                 );",
          "1101:             } elseif (! empty($GLOBALS['parsed_sql'])",
          "1102:              && $query_base == $GLOBALS['parsed_sql']['raw']) {",
          "1105:                 $parsed_sql = $GLOBALS['parsed_sql'];",
          "1108:                 $parsed_sql = PMA_SQP_parse($query_base);",
          "1112:             if (isset($parsed_sql) && ! PMA_SQP_isError()) {",
          "1113:                 $analyzed_display_query = PMA_SQP_analyze($parsed_sql);",
          "1116:                 if ($GLOBALS['cfg']['RememberSorting']",
          "1117:                     && isset($analyzed_display_query[0]['queryflags']['select_from'])",
          "1118:                     && isset($GLOBALS['sql_order_to_append'])",
          "1119:                 ) {",
          "1120:                     $query_base = $analyzed_display_query[0]['section_before_limit']",
          "1121:                         . \"\\n\" . $GLOBALS['sql_order_to_append']",
          "1122:                         . $analyzed_display_query[0]['limit_clause'] . ' '",
          "1123:                         . $analyzed_display_query[0]['section_after_limit'];",
          "1126:                     $parsed_sql = PMA_SQP_parse($query_base);",
          "1128:                     $analyzed_display_query[0]['section_before_limit']",
          "1129:                         .= $GLOBALS['sql_order_to_append'];",
          "1130:                     $analyzed_display_query[0]['order_by_clause']",
          "1131:                         = $GLOBALS['sorted_col'];",
          "1132:                 }",
          "1146:                 if (isset($analyzed_display_query[0]['queryflags']['select_from'])",
          "1147:                     && isset($GLOBALS['sql_limit_to_append'])",
          "1148:                 ) {",
          "1149:                     $query_base = $analyzed_display_query[0]['section_before_limit']",
          "1150:                         . \"\\n\" . $GLOBALS['sql_limit_to_append']",
          "1151:                         . $analyzed_display_query[0]['section_after_limit'];",
          "1153:                     $parsed_sql = PMA_SQP_parse($query_base);",
          "1154:                 }",
          "1157:             if (! empty($GLOBALS['show_as_php'])) {",
          "1158:                 $query_base = '$sql  = \"' . $query_base;",
          "1159:             } elseif (! empty($GLOBALS['validatequery'])) {",
          "1160:                 try {",
          "1161:                     $query_base = PMA_validateSQL($query_base);",
          "1162:                 } catch (Exception $e) {",
          "1163:                     $retval .= PMA_Message::error(",
          "1164:                         __('Failed to connect to SQL validator!')",
          "1165:                     )->getDisplay();",
          "1166:                 }",
          "1167:             } elseif (isset($parsed_sql)) {",
          "1168:                 $query_base = $this->PMA_formatSql($parsed_sql, $query_base);",
          "1169:             }",
          "1176:             $url_params = array();",
          "1177:             if (! isset($GLOBALS['db'])) {",
          "1178:                 $GLOBALS['db'] = '';",
          "1179:             }",
          "1180:             if (strlen($GLOBALS['db'])) {",
          "1181:                 $url_params['db'] = $GLOBALS['db'];",
          "1182:                 if (strlen($GLOBALS['table'])) {",
          "1183:                     $url_params['table'] = $GLOBALS['table'];",
          "1184:                     $edit_link = 'tbl_sql.php';",
          "1185:                 } else {",
          "1186:                     $edit_link = 'db_sql.php';",
          "1187:                 }",
          "1188:             } else {",
          "1189:                 $edit_link = 'server_sql.php';",
          "1190:             }",
          "1195:             $explain_link = '';",
          "1196:             $is_select = false;",
          "1197:             if (! empty($cfg['SQLQuery']['Explain']) && ! $query_too_big) {",
          "1198:                 $explain_params = $url_params;",
          "1201:                 if (! empty($GLOBALS['validatequery'])) {",
          "1202:                     $explain_params['validatequery'] = 1;",
          "1203:                 }",
          "1204:                 if (preg_match('@^SELECT[[:space:]]+@i', $sql_query)) {",
          "1205:                     $explain_params['sql_query'] = 'EXPLAIN ' . $sql_query;",
          "1206:                     $_message = __('Explain SQL');",
          "1207:                     $is_select = true;",
          "1208:                 } elseif (",
          "1209:                     preg_match('@^EXPLAIN[[:space:]]+SELECT[[:space:]]+@i', $sql_query)",
          "1210:                 ) {",
          "1211:                     $explain_params['sql_query'] = substr($sql_query, 8);",
          "1212:                     $_message = __('Skip Explain SQL');",
          "1213:                 }",
          "1214:                 if (isset($explain_params['sql_query'])) {",
          "1215:                     $explain_link = 'import.php'",
          "1216:                         . PMA_generate_common_url($explain_params);",
          "1217:                     $explain_link = ' ['",
          "1218:                         . $this->PMA_linkOrButton($explain_link, $_message) . ']';",
          "1219:                 }",
          "1220:             } //show explain",
          "1222:             $url_params['sql_query']  = $sql_query;",
          "1223:             $url_params['show_query'] = 1;",
          "1227:             if (! empty($cfg['SQLQuery']['Edit'])) {",
          "1228:                 if ($cfg['EditInWindow'] == true) {",
          "1229:                     $onclick = 'window.parent.focus_querywindow(\\''",
          "1230:                         . PMA_jsFormat($sql_query, false) . '\\'); return false;';",
          "1231:                 } else {",
          "1232:                     $onclick = '';",
          "1233:                 }",
          "1235:                 $edit_link .= PMA_generate_common_url($url_params) . '#querybox';",
          "1236:                 $edit_link = ' ['",
          "1237:                     . $this->PMA_linkOrButton(",
          "1238:                         $edit_link, __('Edit'), array('onclick' => $onclick)",
          "1239:                     )",
          "1240:                     . ']';",
          "1241:             } else {",
          "1242:                 $edit_link = '';",
          "1243:             }",
          "1247:             if (! empty($cfg['SQLQuery']['ShowAsPHP']) && ! $query_too_big) {",
          "1248:                 $php_params = $url_params;",
          "1250:                 if (! empty($GLOBALS['show_as_php'])) {",
          "1251:                     $_message = __('Without PHP Code');",
          "1252:                 } else {",
          "1253:                     $php_params['show_as_php'] = 1;",
          "1254:                     $_message = __('Create PHP Code');",
          "1255:                 }",
          "1257:                 $php_link = 'import.php' . PMA_generate_common_url($php_params);",
          "1258:                 $php_link = ' [' . $this->PMA_linkOrButton($php_link, $_message) . ']';",
          "1260:                 if (isset($GLOBALS['show_as_php'])) {",
          "1261:                     $runquery_link = 'import.php' . PMA_generate_common_url($url_params);",
          "1262:                     $php_link .= ' ['",
          "1263:                         . $this->PMA_linkOrButton($runquery_link, __('Submit Query')) . ']';",
          "1264:                 }",
          "1265:             } else {",
          "1266:                 $php_link = '';",
          "1267:             } //show as php",
          "1270:             if (! empty($cfg['SQLQuery']['Refresh'])",
          "1271:                 && ! isset($GLOBALS['show_as_php']) // 'Submit query' does the same",
          "1272:                 && preg_match('@^(SELECT|SHOW)[[:space:]]+@i', $sql_query)",
          "1273:             ) {",
          "1274:                 $refresh_link = 'import.php' . PMA_generate_common_url($url_params);",
          "1275:                 $refresh_link = ' ['",
          "1276:                     . $this->PMA_linkOrButton($refresh_link, __('Refresh')) . ']';",
          "1277:             } else {",
          "1278:                 $refresh_link = '';",
          "1279:             } //refresh",
          "1281:             if (! empty($cfg['SQLValidator']['use'])",
          "1282:                 && ! empty($cfg['SQLQuery']['Validate'])",
          "1283:             ) {",
          "1284:                 $validate_params = $url_params;",
          "1285:                 if (! empty($GLOBALS['validatequery'])) {",
          "1286:                     $validate_message = __('Skip Validate SQL');",
          "1287:                 } else {",
          "1288:                     $validate_params['validatequery'] = 1;",
          "1289:                     $validate_message = __('Validate SQL');",
          "1290:                 }",
          "1292:                 $validate_link = 'import.php'",
          "1293:                     . PMA_generate_common_url($validate_params);",
          "1294:                 $validate_link = ' ['",
          "1295:                     . $this->PMA_linkOrButton($validate_link, $validate_message) . ']';",
          "1296:             } else {",
          "1297:                 $validate_link = '';",
          "1298:             } //validator",
          "1300:             if (! empty($GLOBALS['validatequery'])) {",
          "1301:                 $retval .= '<div class=\"sqlvalidate\">';",
          "1302:             } else {",
          "1303:                 $retval .= '<code class=\"sql\">';",
          "1304:             }",
          "1305:             if ($query_too_big) {",
          "1306:                 $retval .= $shortened_query_base;",
          "1307:             } else {",
          "1308:                 $retval .= $query_base;",
          "1309:             }",
          "1312:             if (! empty($GLOBALS['show_as_php'])) {",
          "1313:                 $retval .= '\";';",
          "1314:             }",
          "1315:             if (! empty($GLOBALS['validatequery'])) {",
          "1316:                 $retval .= '</div>';",
          "1317:             } else {",
          "1318:                 $retval .= '</code>';",
          "1319:             }",
          "1321:             $retval .= '<div class=\"tools\">';",
          "1324:             if (! empty($refresh_link)) {",
          "1325:                 $retval .= $this->PMA_getProfilingForm($sql_query);",
          "1326:             }",
          "1330:             if (empty($refresh_link) || !$this->PMA_profilingSupported()) {",
          "1331:                 $retval .= '<form action=\"sql.php\" method=\"post\">';",
          "1332:                 $retval .= PMA_generate_common_hidden_inputs(",
          "1333:                     $GLOBALS['db'], $GLOBALS['table']",
          "1334:                 );",
          "1335:                 $retval .= '<input type=\"hidden\" name=\"sql_query\" value=\"'",
          "1336:                     . htmlspecialchars($sql_query) . '\" />';",
          "1337:                 $retval .= '</form>';",
          "1338:             }",
          "1343:             if ($is_select || ($GLOBALS['is_ajax_request'] === false)",
          "1344:                 && ! $query_too_big",
          "1345:             ) {",
          "1348:                 $retval .= \"<script type=\\\"text/javascript\\\">\\n\" .",
          "1349:                     \"//<![CDATA[\\n\" .",
          "1350:                     \"$('.tools form').last().after('[ <a href=\\\"#\\\" title=\\\"\" .",
          "1351:                     PMA_escapeJsString(__('Inline edit of this query')) .",
          "1352:                     \"\\\" class=\\\"inline_edit_sql\\\">\" .",
          "1353:                     PMA_escapeJsString(_pgettext('Inline edit query', 'Inline')) .",
          "1354:                     \"</a> ]');\\n\" .",
          "1355:                     \"//]]>\\n\" .",
          "1356:                     \"</script>\";",
          "1357:             }",
          "1358:             $retval .= $edit_link . $explain_link . $php_link",
          "1359:                 . $refresh_link . $validate_link;",
          "1360:             $retval .= '</div>';",
          "1361:         }",
          "1363:         $retval .= '</div>';",
          "1364:         if ($GLOBALS['is_ajax_request'] === false) {",
          "1365:             $retval .= '<br class=\"clearfloat\" />';",
          "1366:         }",
          "1368:         return $retval;",
          "1370:     } // end of the 'PMA_getMessage()' function",
          "1380:     public function PMA_profilingSupported()",
          "1381:     {",
          "1382:         if (!$this->PMA_cacheExists('profiling_supported', true)) {",
          "1386:             if (defined('PMA_MYSQL_INT_VERSION')",
          "1387:                 && (PMA_MYSQL_INT_VERSION >= 50037)",
          "1388:                 && PMA_DBI_fetch_value(\"SHOW VARIABLES LIKE 'profiling'\")",
          "1389:             ) {",
          "1390:                 $this->PMA_cacheSet('profiling_supported', true, true);",
          "1391:             } else {",
          "1392:                 $this->PMA_cacheSet('profiling_supported', false, true);",
          "1393:             }",
          "1396:         return $this->PMA_cacheGet('profiling_supported', true);",
          "1409:     public function PMA_getProfilingForm($sql_query)",
          "1410:     {",
          "1411:         $retval = '';",
          "1412:         if ($this->PMA_profilingSupported()) {",
          "1414:             $retval .= '<form action=\"sql.php\" method=\"post\">' . \"\\n\";",
          "1415:             $retval .= PMA_generate_common_hidden_inputs(",
          "1416:                 $GLOBALS['db'], $GLOBALS['table']",
          "1417:             );",
          "1419:             $retval .= '<input type=\"hidden\" name=\"sql_query\" value=\"'",
          "1420:                 . htmlspecialchars($sql_query) . '\" />' . \"\\n\"",
          "1421:                 . '<input type=\"hidden\" name=\"profiling_form\" value=\"1\" />' . \"\\n\";",
          "1423:             $retval .= $this->PMA_getCheckbox(",
          "1424:                 'profiling', __('Profiling'), isset($_SESSION['profiling']), true",
          "1425:             );",
          "1426:             $retval .= ' </form>' . \"\\n\";",
          "1428:         }",
          "1429:         return $retval;",
          "1444:     public function PMA_formatByteDown($value, $limes = 6, $comma = 0)",
          "1445:     {",
          "1446:         if ($value === null) {",
          "1447:             return null;",
          "1448:         }",
          "1450:         $byteUnits = array(",
          "1452:             __('B'),",
          "1454:             __('KiB'),",
          "1456:             __('MiB'),",
          "1458:             __('GiB'),",
          "1460:             __('TiB'),",
          "1462:             __('PiB'),",
          "1464:             __('EiB')",
          "1467:         $dh   = $this->PMA_pow(10, $comma);",
          "1468:         $li   = $this->PMA_pow(10, $limes);",
          "1469:         $unit = $byteUnits[0];",
          "1471:         for ($d = 6, $ex = 15; $d >= 1; $d--, $ex-=3) {",
          "1472:             if (isset($byteUnits[$d]) && ($value >= $li * $this->PMA_pow(10, $ex))) {",
          "1474:                 $value = round($value / ($this->PMA_pow(1024, $d) / $dh)) /$dh;",
          "1475:                 $unit = $byteUnits[$d];",
          "1476:                 break 1;",
          "1477:             } // end if",
          "1478:         } // end for",
          "1480:         if ($unit != $byteUnits[0]) {",
          "1484:             $return_value = $this->PMA_formatNumber($value, 5, $comma, true);",
          "1485:         } else {",
          "1487:             $return_value = $this->PMA_formatNumber($value, 0);",
          "1488:         }",
          "1490:         return array(trim($return_value), $unit);",
          "1491:     } // end of the 'PMA_formatByteDown' function",
          "1501:     public function PMA_localizeNumber($value)",
          "1502:     {",
          "1503:         return str_replace(",
          "1504:             array(',', '.'),",
          "1505:             array(",
          "1507:                 __(','),",
          "1509:                 __('.'),",
          "1510:             ),",
          "1511:             $value",
          "1512:         );",
          "1542:     public function PMA_formatNumber(",
          "1543:         $value, $digits_left = 3, $digits_right = 0,",
          "1544:         $only_down = false, $noTrailingZero = true",
          "1545:     ) {",
          "1547:         if ($value == 0) {",
          "1548:             return '0';",
          "1549:         }",
          "1551:         $originalValue = $value;",
          "1553:         if ($digits_left === 0) {",
          "1554:             $value = number_format($value, $digits_right);",
          "1555:             if (($originalValue != 0) && (floatval($value) == 0)) {",
          "1556:                 $value = ' <' . (1 / $this->PMA_pow(10, $digits_right));",
          "1557:             }",
          "1559:             return $this->PMA_localizeNumber($value);",
          "1560:         }",
          "1563:         $units = array(",
          "1564:             -8 => 'y',",
          "1565:             -7 => 'z',",
          "1566:             -6 => 'a',",
          "1567:             -5 => 'f',",
          "1568:             -4 => 'p',",
          "1569:             -3 => 'n',",
          "1570:             -2 => '&micro;',",
          "1571:             -1 => 'm',",
          "1572:             0 => ' ',",
          "1573:             1 => 'k',",
          "1574:             2 => 'M',",
          "1575:             3 => 'G',",
          "1576:             4 => 'T',",
          "1577:             5 => 'P',",
          "1578:             6 => 'E',",
          "1579:             7 => 'Z',",
          "1580:             8 => 'Y'",
          "1581:         );",
          "1584:         if ($value < 0) {",
          "1585:             $sign = '-';",
          "1586:             $value = abs($value);",
          "1587:         } else {",
          "1588:             $sign = '';",
          "1591:         $dh = $this->PMA_pow(10, $digits_right);",
          "1597:         $d = floor(log10($value) / 3);",
          "1603:         $cur_digits = floor(log10($value / $this->PMA_pow(1000, $d, 'pow'))+1);",
          "1604:         if ($digits_left > $cur_digits) {",
          "1605:             $d -= floor(($digits_left - $cur_digits)/3);",
          "1606:         }",
          "1608:         if ($d < 0 && $only_down) {",
          "1609:             $d = 0;",
          "1612:         $value = round($value / ($this->PMA_pow(1000, $d, 'pow') / $dh)) /$dh;",
          "1613:         $unit = $units[$d];",
          "1616:         if ($noTrailingZero) {",
          "1617:             $value = $this->PMA_localizeNumber(",
          "1618:                 preg_replace('/(?<=\\d)(?=(\\d{3})+(?!\\d))/', ',', $value)",
          "1619:             );",
          "1620:         } else {",
          "1622:             $value = $this->PMA_localizeNumber(number_format($value, $digits_right));",
          "1623:         }",
          "1625:         if ($originalValue != 0 && floatval($value) == 0) {",
          "1626:             return ' <' . (1 / $this->PMA_pow(10, $digits_right)) . ' ' . $unit;",
          "1627:         }",
          "1629:         return $sign . $value . ' ' . $unit;",
          "1630:     } // end of the 'PMA_formatNumber' function",
          "1640:     public function PMA_extractValueFromFormattedSize($formatted_size)",
          "1641:     {",
          "1642:         $return_value = -1;",
          "1644:         if (preg_match('/^[0-9]+GB$/', $formatted_size)) {",
          "1645:             $return_value = substr($formatted_size, 0, -2) * $this->PMA_pow(1024, 3);",
          "1646:         } elseif (preg_match('/^[0-9]+MB$/', $formatted_size)) {",
          "1647:             $return_value = substr($formatted_size, 0, -2) * $this->PMA_pow(1024, 2);",
          "1648:         } elseif (preg_match('/^[0-9]+K$/', $formatted_size)) {",
          "1649:             $return_value = substr($formatted_size, 0, -1) * $this->PMA_pow(1024, 1);",
          "1650:         }",
          "1651:         return $return_value;",
          "1652:     }// end of the 'PMA_extractValueFromFormattedSize' function",
          "1665:     public function PMA_localisedDate($timestamp = -1, $format = '')",
          "1666:     {",
          "1667:         $month = array(",
          "1669:             __('Jan'),",
          "1671:             __('Feb'),",
          "1673:             __('Mar'),",
          "1675:             __('Apr'),",
          "1677:             _pgettext('Short month name', 'May'),",
          "1679:             __('Jun'),",
          "1681:             __('Jul'),",
          "1683:             __('Aug'),",
          "1685:             __('Sep'),",
          "1687:             __('Oct'),",
          "1689:             __('Nov'),",
          "1691:             __('Dec'));",
          "1692:         $day_of_week = array(",
          "1694:             _pgettext('Short week day name', 'Sun'),",
          "1696:             __('Mon'),",
          "1698:             __('Tue'),",
          "1700:             __('Wed'),",
          "1702:             __('Thu'),",
          "1704:             __('Fri'),",
          "1706:             __('Sat'));",
          "1708:         if ($format == '') {",
          "1710:             $format = __('%B %d, %Y at %I:%M %p');",
          "1711:         }",
          "1713:         if ($timestamp == -1) {",
          "1714:             $timestamp = time();",
          "1715:         }",
          "1717:         $date = preg_replace(",
          "1718:             '@%[aA]@',",
          "1719:             $day_of_week[(int)strftime('%w', $timestamp)],",
          "1720:             $format",
          "1721:         );",
          "1722:         $date = preg_replace(",
          "1723:             '@%[bB]@',",
          "1724:             $month[(int)strftime('%m', $timestamp)-1],",
          "1725:             $date",
          "1726:         );",
          "1728:         return strftime($date, $timestamp);",
          "1729:     } // end of the 'PMA_localisedDate()' function",
          "1743:     public function PMA_generateHtmlTab($tab, $url_params = array())",
          "1744:     {",
          "1746:         $defaults = array(",
          "1747:             'text'      => '',",
          "1748:             'class'     => '',",
          "1749:             'active'    => null,",
          "1750:             'link'      => '',",
          "1751:             'sep'       => '?',",
          "1752:             'attr'      => '',",
          "1753:             'args'      => '',",
          "1754:             'warning'   => '',",
          "1755:             'fragment'  => '',",
          "1756:             'id'        => '',",
          "1757:         );",
          "1759:         $tab = array_merge($defaults, $tab);",
          "1762:         if (empty($tab['class'])) {",
          "1763:             if (! empty($tab['active'])",
          "1764:                 || PMA_isValid($GLOBALS['active_page'], 'identical', $tab['link'])",
          "1765:             ) {",
          "1766:                 $tab['class'] = 'active';",
          "1767:             } elseif (is_null($tab['active']) && empty($GLOBALS['active_page'])",
          "1768:               && (basename($GLOBALS['PMA_PHP_SELF']) == $tab['link'])",
          "1769:               && empty($tab['warning'])) {",
          "1770:                 $tab['class'] = 'active';",
          "1771:             }",
          "1774:         if (! empty($tab['warning'])) {",
          "1775:             $tab['class'] .= ' error';",
          "1776:             $tab['attr'] .= ' title=\"' . htmlspecialchars($tab['warning']) . '\"';",
          "1777:         }",
          "1781:         if (! empty($tab['url_params']) && is_array($tab['url_params'])) {",
          "1782:             $url_params = array_merge($url_params, $tab['url_params']);",
          "1783:         }",
          "1786:         if (! empty($tab['link'])) {",
          "1787:             $tab['link'] = htmlentities($tab['link']);",
          "1788:             $tab['link'] = $tab['link'] . PMA_generate_common_url($url_params);",
          "1789:             if (! empty($tab['args'])) {",
          "1790:                 foreach ($tab['args'] as $param => $value) {",
          "1791:                     $tab['link'] .= PMA_get_arg_separator('html') . urlencode($param)",
          "1792:                         . '=' . urlencode($value);",
          "1797:         if (! empty($tab['fragment'])) {",
          "1798:             $tab['link'] .= $tab['fragment'];",
          "1799:         }",
          "1802:         if (isset($tab['icon'])",
          "1803:         ) {",
          "1807:             $tab['text'] = $this->PMA_getImage(htmlentities($tab['icon'])) . $tab['text'];",
          "1809:         } elseif (empty($tab['text'])) {",
          "1811:             $tab['text'] = '?';",
          "1812:             trigger_error(",
          "1813:                 'empty linktext in function ' . __FUNCTION__ . '()',",
          "1814:                 E_USER_NOTICE",
          "1815:             );",
          "1819:         $id_string = ( empty($tab['id']) ? '' : ' id=\"'.$tab['id'].'\" ' );",
          "1820:         $out = '<li' . ($tab['class'] == 'active' ? ' class=\"active\"' : '') . '>';",
          "1822:         if (! empty($tab['link'])) {",
          "1823:             $out .= '<a class=\"tab' . htmlentities($tab['class']) . '\"'",
          "1824:                 .$id_string",
          "1825:                 .' href=\"' . $tab['link'] . '\" ' . $tab['attr'] . '>'",
          "1826:                 . $tab['text'] . '</a>';",
          "1827:         } else {",
          "1828:             $out .= '<span class=\"tab' . htmlentities($tab['class']) . '\"'.$id_string.'>'",
          "1829:                 . $tab['text'] . '</span>';",
          "1832:         $out .= '</li>';",
          "1833:         return $out;",
          "1834:     } // end of the 'PMA_generateHtmlTab()' function",
          "1846:     public function PMA_generateHtmlTabs($tabs, $url_params, $menu_id = 'topmenu')",
          "1847:     {",
          "1848:         $tab_navigation = '<div id=\"' . htmlentities($menu_id)",
          "1849:             . 'container\" class=\"menucontainer\">'",
          "1850:             .'<ul id=\"' . htmlentities($menu_id) . '\">';",
          "1852:         foreach ($tabs as $tab) {",
          "1853:             $tab_navigation .= $this->PMA_generateHtmlTab($tab, $url_params);",
          "1854:         }",
          "1856:         $tab_navigation .=",
          "1857:              '</ul>' . \"\\n\"",
          "1858:             .'<div class=\"clearfloat\"></div>'",
          "1859:             .'</div>' . \"\\n\";",
          "1861:         return $tab_navigation;",
          "1880:     public function PMA_linkOrButton(",
          "1881:         $url, $message, $tag_params = array(),",
          "1882:         $new_form = true, $strip_img = false, $target = ''",
          "1883:     ) {",
          "1885:         $url_length = strlen($url);",
          "1888:         if ($url_length > $GLOBALS['cfg']['LinkLengthLimit'] * 100) {",
          "1889:             return '';",
          "1893:         if (! is_array($tag_params)) {",
          "1894:             $tmp = $tag_params;",
          "1895:             $tag_params = array();",
          "1896:             if (! empty($tmp)) {",
          "1897:                 $tag_params['onclick'] = 'return confirmLink(this, \\''",
          "1898:                     . PMA_escapeJsString($tmp) . '\\')';",
          "1899:             }",
          "1900:             unset($tmp);",
          "1901:         }",
          "1902:         if (! empty($target)) {",
          "1903:             $tag_params['target'] = htmlentities($target);",
          "1906:         $tag_params_strings = array();",
          "1907:         foreach ($tag_params as $par_name => $par_value) {",
          "1909:             $par_value = substr($par_name, 0, 2) == 'on'",
          "1910:                 ? $par_value",
          "1911:                 : htmlspecialchars($par_value);",
          "1912:             $tag_params_strings[] = $par_name . '=\"' . $par_value . '\"';",
          "1915:         $displayed_message = '';",
          "1917:         if (stristr($message, '<img')",
          "1918:             && (! $strip_img || ($GLOBALS['cfg']['PropertiesIconic'] === true))",
          "1919:             && (strip_tags($message) == $message)",
          "1920:         ) {",
          "1921:             $displayed_message = '<span>'",
          "1922:                 . htmlspecialchars(",
          "1923:                     preg_replace('/^.*\\salt=\"([^\"]*)\".*$/si', '\\1', $message)",
          "1924:                 )",
          "1925:                 . '</span>';",
          "1926:         }",
          "1929:         $in_suhosin_limits = true;",
          "1930:         if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit']) {",
          "1931:             if ($suhosin_get_MaxValueLength = ini_get('suhosin.get.max_value_length')) {",
          "1932:                 $query_parts = $this->PMA_splitURLQuery($url);",
          "1933:                 foreach ($query_parts as $query_pair) {",
          "1934:                     list($eachvar, $eachval) = explode('=', $query_pair);",
          "1935:                     if (strlen($eachval) > $suhosin_get_MaxValueLength) {",
          "1936:                         $in_suhosin_limits = false;",
          "1938:                     }",
          "1939:                 }",
          "1943:         if (($url_length <= $GLOBALS['cfg']['LinkLengthLimit']) && $in_suhosin_limits) {",
          "1946:             $ret = \"\\n\" . '<a href=\"' . $url . '\" '",
          "1947:                 . implode(' ', $tag_params_strings) . '>'",
          "1948:                 . $message . $displayed_message . '</a>' . \"\\n\";",
          "1957:             if (empty($tag_params['class'])) {",
          "1958:                 $tag_params['class'] = 'link';",
          "1959:             }",
          "1961:             if (! isset($query_parts)) {",
          "1962:                 $query_parts = $this->PMA_splitURLQuery($url);",
          "1963:             }",
          "1964:             $url_parts   = parse_url($url);",
          "1966:             if ($new_form) {",
          "1967:                 $ret = '<form action=\"' . $url_parts['path'] . '\" class=\"link\"'",
          "1968:                      . ' method=\"post\"' . $target . ' style=\"display: inline;\">';",
          "1969:                 $subname_open   = '';",
          "1970:                 $subname_close  = '';",
          "1971:                 $submit_link    = '#';",
          "1973:                 $query_parts[] = 'redirect=' . $url_parts['path'];",
          "1974:                 if (empty($GLOBALS['subform_counter'])) {",
          "1975:                     $GLOBALS['subform_counter'] = 0;",
          "1976:                 }",
          "1977:                 $GLOBALS['subform_counter']++;",
          "1978:                 $ret            = '';",
          "1979:                 $subname_open   = 'subform[' . $GLOBALS['subform_counter'] . '][';",
          "1980:                 $subname_close  = ']';",
          "1981:                 $submit_link    = '#usesubform[' . $GLOBALS['subform_counter'] . ']=1';",
          "1984:             foreach ($query_parts as $query_pair) {",
          "1985:                 list($eachvar, $eachval) = explode('=', $query_pair);",
          "1986:                 $ret .= '<input type=\"hidden\" name=\"' . $subname_open . $eachvar",
          "1987:                     . $subname_close . '\" value=\"'",
          "1988:                     . htmlspecialchars(urldecode($eachval)) . '\" />';",
          "1989:             } // end while",
          "1991:             $ret .= \"\\n\" . '<a href=\"' . $submit_link . '\" class=\"formLinkSubmit\" '",
          "1992:                 . implode(' ', $tag_params_strings) . '>'",
          "1993:                 . $message . ' ' . $displayed_message . '</a>' . \"\\n\";",
          "1995:             if ($new_form) {",
          "1996:                 $ret .= '</form>';",
          "1997:             }",
          "1998:         } // end if... else...",
          "2000:         return $ret;",
          "2001:     } // end of the 'PMA_linkOrButton()' function",
          "2011:     public function PMA_splitURLQuery($url)",
          "2012:     {",
          "2014:         $separator = PMA_get_arg_separator();",
          "2016:         if ($separator !== '&') {",
          "2018:             $url = str_replace(htmlentities('&'), $separator, $url);",
          "2019:             $url = str_replace('&', $separator, $url);",
          "2020:         }",
          "2022:         $url = str_replace(htmlentities($separator), $separator, $url);",
          "2025:         $url_parts = parse_url($url);",
          "2027:         return explode($separator, $url_parts['query']);",
          "2038:     public function PMA_timespanFormat($seconds)",
          "2039:     {",
          "2040:         $days = floor($seconds / 86400);",
          "2041:         if ($days > 0) {",
          "2042:             $seconds -= $days * 86400;",
          "2045:         $hours = floor($seconds / 3600);",
          "2046:         if ($days > 0 || $hours > 0) {",
          "2047:             $seconds -= $hours * 3600;",
          "2050:         $minutes = floor($seconds / 60);",
          "2051:         if ($days > 0 || $hours > 0 || $minutes > 0) {",
          "2052:             $seconds -= $minutes * 60;",
          "2055:         return sprintf(",
          "2056:             __('%s days, %s hours, %s minutes and %s seconds'),",
          "2057:             (string)$days, (string)$hours, (string)$minutes, (string)$seconds",
          "2058:         );",
          "2077:     public function PMA_flipstring($string, $Separator = \"<br />\\n\")",
          "2078:     {",
          "2079:         $format_string = '';",
          "2080:         $charbuff = false;",
          "2082:         for ($i = 0, $str_len = strlen($string); $i < $str_len; $i++) {",
          "2083:             $char = $string{$i};",
          "2084:             $append = false;",
          "2086:             if ($char == '&') {",
          "2087:                 $format_string .= $charbuff;",
          "2088:                 $charbuff = $char;",
          "2089:             } elseif ($char == ';' && ! empty($charbuff)) {",
          "2090:                 $format_string .= $charbuff . $char;",
          "2091:                 $charbuff = false;",
          "2092:                 $append = true;",
          "2093:             } elseif (! empty($charbuff)) {",
          "2094:                 $charbuff .= $char;",
          "2095:             } else {",
          "2096:                 $format_string .= $char;",
          "2097:                 $append = true;",
          "2098:             }",
          "2101:             if ($append && ($i != $str_len - 1)) {",
          "2102:                 $format_string .= $Separator;",
          "2103:             }",
          "2106:         return $format_string;",
          "2128:     public function PMA_checkParameters($params, $request = true)",
          "2129:     {",
          "2130:         global $checked_special;",
          "2132:         if (! isset($checked_special)) {",
          "2133:             $checked_special = false;",
          "2134:         }",
          "2136:         $reported_script_name = basename($GLOBALS['PMA_PHP_SELF']);",
          "2137:         $found_error = false;",
          "2138:         $error_message = '';",
          "2140:         foreach ($params as $param) {",
          "2141:             if ($request && ($param != 'db') && ($param != 'table')) {",
          "2142:                 $checked_special = true;",
          "2143:             }",
          "2145:             if (! isset($GLOBALS[$param])) {",
          "2146:                 $error_message .= $reported_script_name",
          "2147:                     . ': ' . __('Missing parameter:') . ' '",
          "2148:                     . $param",
          "2149:                     . $this->PMA_showDocu('faqmissingparameters')",
          "2150:                     . '<br />';",
          "2151:                 $found_error = true;",
          "2154:         if ($found_error) {",
          "2155:             PMA_fatalError($error_message, null, false);",
          "2157:     } // end function",
          "2173:     public function PMA_getUniqueCondition($handle, $fields_cnt, $fields_meta, $row,",
          "2174:         $force_unique = false",
          "2175:     ) {",
          "2177:         $primary_key          = '';",
          "2178:         $unique_key           = '';",
          "2179:         $nonprimary_condition = '';",
          "2180:         $preferred_condition = '';",
          "2181:         $primary_key_array    = array();",
          "2182:         $unique_key_array     = array();",
          "2183:         $nonprimary_condition_array = array();",
          "2184:         $condition_array = array();",
          "2186:         for ($i = 0; $i < $fields_cnt; ++$i) {",
          "2188:             $condition   = '';",
          "2189:             $con_key     = '';",
          "2190:             $con_val     = '';",
          "2191:             $field_flags = PMA_DBI_field_flags($handle, $i);",
          "2192:             $meta        = $fields_meta[$i];",
          "2195:             if (! isset($meta->orgname) || ! strlen($meta->orgname)) {",
          "2196:                 $meta->orgname = $meta->name;",
          "2198:                 if (isset($GLOBALS['analyzed_sql'][0]['select_expr'])",
          "2199:                     && is_array($GLOBALS['analyzed_sql'][0]['select_expr'])",
          "2200:                 ) {",
          "2201:                     foreach (",
          "2202:                         $GLOBALS['analyzed_sql'][0]['select_expr'] as $select_expr",
          "2203:                     ) {",
          "2206:                         if ((string) $select_expr['alias'] === (string) $meta->name) {",
          "2207:                             $meta->orgname = $select_expr['column'];",
          "2208:                             break;",
          "2209:                         } // end if",
          "2210:                     } // end foreach",
          "2211:                 }",
          "2212:             }",
          "2225:             if (isset($meta->orgtable)",
          "2226:                 && ($meta->table != $meta->orgtable)",
          "2227:                 && ! PMA_Table::isView($GLOBALS['db'], $meta->table)",
          "2228:             ) {",
          "2229:                 $meta->table = $meta->orgtable;",
          "2230:             }",
          "2237:             if ($meta->type == 'real') {",
          "2238:                 $con_key = 'CONCAT(' . $this->PMA_backquote($meta->table) . '.'",
          "2239:                     . $this->PMA_backquote($meta->orgname) . ')';",
          "2240:             } else {",
          "2241:                 $con_key = $this->PMA_backquote($meta->table) . '.'",
          "2242:                     . $this->PMA_backquote($meta->orgname);",
          "2243:             } // end if... else...",
          "2244:             $condition = ' ' . $con_key . ' ';",
          "2246:             if (! isset($row[$i]) || is_null($row[$i])) {",
          "2247:                 $con_val = 'IS NULL';",
          "2248:             } else {",
          "2252:                 if ($meta->numeric",
          "2253:                     && ($meta->type != 'timestamp')",
          "2254:                     && ($meta->type != 'real')",
          "2255:                 ) {",
          "2257:                     $con_val = '= ' . $row[$i];",
          "2259:                 } elseif ((($meta->type == 'blob') || ($meta->type == 'string'))",
          "2261:                         && stristr($field_flags, 'BINARY')",
          "2262:                         && ! empty($row[$i])",
          "2263:                 ) {",
          "2266:                     if (strlen($row[$i]) < 1000) {",
          "2269:                         $con_val = '= CAST(0x' . bin2hex($row[$i]) . ' AS BINARY)';",
          "2270:                     } else {",
          "2272:                         $con_val = null;",
          "2273:                     }",
          "2275:                 } elseif (in_array($meta->type, $this->PMA_getGISDatatypes())",
          "2276:                     && ! empty($row[$i])",
          "2277:                 ) {",
          "2280:                     if (strlen($row[$i]) < 5000) {",
          "2281:                         $condition .= '=0x' . bin2hex($row[$i]) . ' AND';",
          "2282:                     } else {",
          "2283:                         $condition = '';",
          "2284:                     }",
          "2286:                 } elseif ($meta->type == 'bit') {",
          "2288:                     $con_val = \"= b'\"",
          "2289:                         . $this->PMA_printableBitValue($row[$i], $meta->length) . \"'\";",
          "2291:                 } else {",
          "2292:                     $con_val = '= \\'' . $this->PMA_sqlAddSlashes($row[$i], false, true) . '\\'';",
          "2293:                 }",
          "2294:             }",
          "2296:             if ($con_val != null) {",
          "2298:                 $condition .= $con_val . ' AND';",
          "2300:                 if ($meta->primary_key > 0) {",
          "2301:                     $primary_key .= $condition;",
          "2302:                     $primary_key_array[$con_key] = $con_val;",
          "2303:                 } elseif ($meta->unique_key > 0) {",
          "2304:                     $unique_key  .= $condition;",
          "2305:                     $unique_key_array[$con_key] = $con_val;",
          "2306:                 }",
          "2308:                 $nonprimary_condition .= $condition;",
          "2309:                 $nonprimary_condition_array[$con_key] = $con_val;",
          "2310:             }",
          "2311:         } // end for",
          "2316:         $clause_is_unique = true;",
          "2318:         if ($primary_key) {",
          "2319:             $preferred_condition = $primary_key;",
          "2320:             $condition_array = $primary_key_array;",
          "2322:         } elseif ($unique_key) {",
          "2323:             $preferred_condition = $unique_key;",
          "2324:             $condition_array = $unique_key_array;",
          "2326:         } elseif (! $force_unique) {",
          "2327:             $preferred_condition = $nonprimary_condition;",
          "2328:             $condition_array = $nonprimary_condition_array;",
          "2329:             $clause_is_unique = false;",
          "2332:         $where_clause = trim(preg_replace('|\\s?AND$|', '', $preferred_condition));",
          "2333:         return(array($where_clause, $clause_is_unique, $condition_array));",
          "2334:     } // end function",
          "2351:     public function PMA_getButtonOrImage(",
          "2352:         $button_name, $button_class, $image_name, $text, $image, $value = ''",
          "2353:     ) {",
          "2355:         if ($value == '') {",
          "2356:             $value = $text;",
          "2357:         }",
          "2359:         if ($GLOBALS['cfg']['PropertiesIconic'] === false) {",
          "2360:             return ' <input type=\"submit\" name=\"' . $button_name . '\"'",
          "2361:                 .' value=\"' . htmlspecialchars($value) . '\"'",
          "2362:                 .' title=\"' . htmlspecialchars($text) . '\" />' . \"\\n\";",
          "2363:         }",
          "2367:         if (PMA_USR_BROWSER_AGENT != 'IE') {",
          "2368:             return '<button class=\"' . $button_class . '\" type=\"submit\"'",
          "2369:                 .' name=\"' . $button_name . '\" value=\"' . htmlspecialchars($value) . '\"'",
          "2370:                 .' title=\"' . htmlspecialchars($text) . '\">' . \"\\n\"",
          "2371:                 . $this->PMA_getIcon($image, $text)",
          "2372:                 .'</button>' . \"\\n\";",
          "2373:         } else {",
          "2374:             return '<input type=\"image\" name=\"' . $image_name",
          "2375:                 . '\" value=\"' . htmlspecialchars($value)",
          "2376:                 . '\" title=\"' . htmlspecialchars($text)",
          "2377:                 . '\" src=\"' . $GLOBALS['pmaThemeImage']. $image . '\" />'",
          "2378:                 . ($GLOBALS['cfg']['PropertiesIconic'] === 'both'",
          "2379:                     ? '&nbsp;' . htmlspecialchars($text)",
          "2380:                     : '') . \"\\n\";",
          "2381:         }",
          "2382:     } // end function",
          "2405:     public function PMA_pageselector(",
          "2406:         $rows, $pageNow = 1, $nbTotalPage = 1, $showAll = 200, $sliceStart = 5,",
          "2407:         $sliceEnd = 5, $percent = 20, $range = 10, $prompt = ''",
          "2408:     ) {",
          "2410:         $increment = floor($nbTotalPage / $percent);",
          "2411:         $pageNowMinusRange = ($pageNow - $range);",
          "2412:         $pageNowPlusRange = ($pageNow + $range);",
          "2414:         $gotopage = $prompt . ' <select id=\"pageselector\" ';",
          "2415:         if ($GLOBALS['cfg']['AjaxEnable']) {",
          "2416:             $gotopage .= ' class=\"ajax\"';",
          "2417:         }",
          "2419:         $gotopage .= ' name=\"pos\" >' . \"\\n\";",
          "2420:         if ($nbTotalPage < $showAll) {",
          "2421:             $pages = range(1, $nbTotalPage);",
          "2423:         } else {",
          "2425:             $pages = array();",
          "2428:             for ($i = 1; $i <= $sliceStart; $i++) {",
          "2429:                 $pages[] = $i;",
          "2430:             }",
          "2433:             for ($i = $nbTotalPage - $sliceEnd; $i <= $nbTotalPage; $i++) {",
          "2434:                 $pages[] = $i;",
          "2435:             }",
          "2443:             $i = $sliceStart;",
          "2444:             $x = $nbTotalPage - $sliceEnd;",
          "2445:             $met_boundary = false;",
          "2447:             while ($i <= $x) {",
          "2448:                 if ($i >= $pageNowMinusRange && $i <= $pageNowPlusRange) {",
          "2451:                     $i++;",
          "2452:                     $met_boundary = true;",
          "2453:                 } else {",
          "2456:                     $i += $increment;",
          "2459:                     if ($i > $pageNowMinusRange && ! $met_boundary) {",
          "2460:                         $i = $pageNowMinusRange;",
          "2461:                     }",
          "2462:                 }",
          "2464:                 if ($i > 0 && $i <= $x) {",
          "2465:                     $pages[] = $i;",
          "2466:                 }",
          "2467:             }",
          "2470:             Add page numbers with \"geometrically increasing\" distances.",
          "2472:             This helps me a lot when navigating through giant tables.",
          "2474:             Test case: table with 2.28 million sets, 76190 pages. Page of interest",
          "2475:             is between 72376 and 76190.",
          "2476:             Selecting page 72376.",
          "2477:             Now, old version enumerated only +/- 10 pages around 72376 and the",
          "2478:             percentage increment produced steps of about 3000.",
          "2480:             The following code adds page numbers +/- 2,4,8,16,32,64,128,256 etc.",
          "2481:             around the current page.",
          "2484:             $i = $pageNow;",
          "2485:             $dist = 1;",
          "2486:             while ($i < $x) {",
          "2487:                 $dist = 2 * $dist;",
          "2488:                 $i = $pageNow + $dist;",
          "2489:                 if ($i > 0 && $i <= $x) {",
          "2490:                     $pages[] = $i;",
          "2491:                 }",
          "2492:             }",
          "2494:             $i = $pageNow;",
          "2495:             $dist = 1;",
          "2496:             while ($i >0) {",
          "2497:                 $dist = 2 * $dist;",
          "2498:                 $i = $pageNow - $dist;",
          "2499:                 if ($i > 0 && $i <= $x) {",
          "2500:                     $pages[] = $i;",
          "2501:                 }",
          "2502:             }",
          "2506:             sort($pages);",
          "2507:             $pages = array_unique($pages);",
          "2508:         }",
          "2510:         foreach ($pages as $i) {",
          "2511:             if ($i == $pageNow) {",
          "2512:                 $selected = 'selected=\"selected\" style=\"font-weight: bold\"';",
          "2513:             } else {",
          "2514:                 $selected = '';",
          "2515:             }",
          "2516:             $gotopage .= '                <option ' . $selected",
          "2517:                 . ' value=\"' . (($i - 1) * $rows) . '\">' . $i . '</option>' . \"\\n\";",
          "2518:         }",
          "2520:         $gotopage .= ' </select>';",
          "2522:         return $gotopage;",
          "2523:     } // end function",
          "2542:     public function PMA_getListNavigator(",
          "2543:         $count, $pos, $_url_params, $script, $frame, $max_count",
          "2544:     ) {",
          "2546:         $list_navigator_html = '';",
          "2548:         if ($max_count < $count) {",
          "2550:             $list_navigator_html .= ($frame == 'frame_navigation')",
          "2551:                 ? '<div id=\"navidbpageselector\">' . \"\\n\"",
          "2552:                 : '';",
          "2554:             $list_navigator_html .= __('Page number:');",
          "2556:             $list_navigator_html .= ($frame == 'frame_navigation') ? '<br />' : ' ';",
          "2559:             if ($pos > 0) {",
          "2562:                 if ($GLOBALS['cfg']['NavigationBarIconic']) {",
          "2563:                     $caption1 = '&lt;&lt;';",
          "2564:                     $caption2 = ' &lt; ';",
          "2565:                     $title1   = ' title=\"' . _pgettext('First page', 'Begin') . '\"';",
          "2566:                     $title2   = ' title=\"'",
          "2567:                         . _pgettext('Previous page', 'Previous') . '\"';",
          "2568:                 } else {",
          "2569:                     $caption1 = _pgettext('First page', 'Begin') . ' &lt;&lt;';",
          "2570:                     $caption2 = _pgettext('Previous page', 'Previous') . ' &lt;';",
          "2571:                     $title1   = '';",
          "2572:                     $title2   = '';",
          "2573:                 } // end if... else...",
          "2575:                 $_url_params['pos'] = 0;",
          "2576:                 $list_navigator_html .= '<a' . $title1 . ' href=\"' . $script",
          "2577:                     . PMA_generate_common_url($_url_params) . '\" target=\"'",
          "2578:                     . $frame . '\">' . $caption1 . '</a>';",
          "2580:                 $_url_params['pos'] = $pos - $max_count;",
          "2581:                 $list_navigator_html .= '<a' . $title2 . ' href=\"' . $script",
          "2582:                     . PMA_generate_common_url($_url_params) . '\" target=\"'",
          "2583:                     . $frame . '\">' . $caption2 . '</a>';",
          "2584:             }",
          "2586:             $list_navigator_html .= \"\\n\" . '<form action=\"' . basename($script).",
          "2587:                 '\" method=\"post\" target=\"' . $frame . '\">' . \"\\n\";",
          "2589:             $list_navigator_html .= PMA_generate_common_hidden_inputs($_url_params);",
          "2590:             $list_navigator_html .= $this->PMA_pageselector(",
          "2591:                 $max_count,",
          "2592:                 floor(($pos + 1) / $max_count) + 1,",
          "2593:                 ceil($count / $max_count)",
          "2594:             );",
          "2595:             $list_navigator_html .= '</form>';",
          "2597:             if ($pos + $max_count < $count) {",
          "2599:                 if ($GLOBALS['cfg']['NavigationBarIconic']) {",
          "2600:                     $caption3 = ' &gt; ';",
          "2601:                     $caption4 = '&gt;&gt;';",
          "2602:                     $title3   = ' title=\"' . _pgettext('Next page', 'Next') . '\"';",
          "2603:                     $title4   = ' title=\"' . _pgettext('Last page', 'End') . '\"';",
          "2604:                 } else {",
          "2605:                     $caption3 = '&gt; ' . _pgettext('Next page', 'Next');",
          "2606:                     $caption4 = '&gt;&gt; ' . _pgettext('Last page', 'End');",
          "2607:                     $title3   = '';",
          "2608:                     $title4   = '';",
          "2609:                 } // end if... else...",
          "2611:                 $_url_params['pos'] = $pos + $max_count;",
          "2612:                 $list_navigator_html .= '<a' . $title3 . ' href=\"' . $script",
          "2613:                     . PMA_generate_common_url($_url_params) . '\" target=\"'",
          "2614:                     . $frame . '\">' . $caption3 . '</a>';",
          "2616:                 $_url_params['pos'] = floor($count / $max_count) * $max_count;",
          "2617:                 if ($_url_params['pos'] == $count) {",
          "2618:                     $_url_params['pos'] = $count - $max_count;",
          "2619:                 }",
          "2621:                 $list_navigator_html .= '<a' . $title4 . ' href=\"' . $script",
          "2622:                     . PMA_generate_common_url($_url_params) . '\" target=\"'",
          "2623:                     . $frame . '\">' . $caption4 . '</a>';",
          "2624:             }",
          "2626:             $list_navigator_html .= \"\\n\";",
          "2627:             if ('frame_navigation' == $frame) {",
          "2628:                 $list_navigator_html .= '</div>' . \"\\n\";",
          "2629:             }",
          "2630:         }",
          "2632:         return $list_navigator_html;",
          "2650:     public function PMA_userDir($dir)",
          "2651:     {",
          "2653:         if (substr($dir, -1) != '/') {",
          "2654:             $dir .= '/';",
          "2655:         }",
          "2657:         return str_replace('%u', $GLOBALS['cfg']['Server']['user'], $dir);",
          "2668:     public function PMA_getDbLink($database = null)",
          "2669:     {",
          "2670:         if (! strlen($database)) {",
          "2671:             if (! strlen($GLOBALS['db'])) {",
          "2672:                 return '';",
          "2673:             }",
          "2674:             $database = $GLOBALS['db'];",
          "2675:         } else {",
          "2676:             $database = $this->PMA_unescapeMysqlWildcards($database);",
          "2677:         }",
          "2679:         return '<a href=\"' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?'",
          "2680:             . PMA_generate_common_url($database) . '\" title=\"'",
          "2681:             . sprintf(",
          "2682:                 __('Jump to database &quot;%s&quot;.'),",
          "2683:                 htmlspecialchars($database)",
          "2684:             )",
          "2685:             . '\">' . htmlspecialchars($database) . '</a>';",
          "2700:     public function PMA_getExternalBug($functionality, $component, $minimum_version, $bugref)",
          "2701:     {",
          "2702:         $ext_but_html = '';",
          "2703:         if (($component == 'mysql') && (PMA_MYSQL_INT_VERSION < $minimum_version)) {",
          "2704:             $ext_but_html .= $this->PMA_showHint(",
          "2705:                 sprintf(",
          "2706:                     __('The %s functionality is affected by a known bug, see %s'),",
          "2707:                     $functionality,",
          "2708:                     PMA_linkURL('http://bugs.mysql.com/') . $bugref",
          "2709:                 )",
          "2710:             );",
          "2711:         }",
          "2712:         return $ext_but_html;",
          "2726:     public function PMA_getCheckbox($html_field_name, $label, $checked, $onclick)",
          "2727:     {",
          "2728:         return '<input type=\"checkbox\" name=\"' . $html_field_name . '\" id=\"'",
          "2729:             . $html_field_name . '\"' . ($checked ? ' checked=\"checked\"' : '')",
          "2730:             . ($onclick ? ' class=\"autosubmit\"' : '') . ' /><label for=\"'",
          "2731:             . $html_field_name . '\">' . $label . '</label>';",
          "2747:     public function PMA_getRadioFields($html_field_name, $choices, $checked_choice = '',",
          "2748:         $line_break = true, $escape_label = true, $class=''",
          "2749:     ) {",
          "2751:         $radio_html = '';",
          "2753:         foreach ($choices as $choice_value => $choice_label) {",
          "2755:             if (! empty($class)) {",
          "2756:                 $radio_html .= '<div class=\"' . $class . '\">';",
          "2757:             }",
          "2759:             $html_field_id = $html_field_name . '_' . $choice_value;",
          "2760:             $radio_html .= '<input type=\"radio\" name=\"' . $html_field_name . '\" id=\"'",
          "2761:                         . $html_field_id . '\" value=\"'",
          "2762:                         . htmlspecialchars($choice_value) . '\"';",
          "2764:             if ($choice_value == $checked_choice) {",
          "2765:                 $radio_html .= ' checked=\"checked\"';",
          "2768:             $radio_html .= ' />' . \"\\n\"",
          "2769:                         . '<label for=\"' . $html_field_id . '\">'",
          "2770:                         . ($escape_label",
          "2771:                         ? htmlspecialchars($choice_label)",
          "2772:                         : $choice_label)",
          "2773:                         . '</label>';",
          "2775:             if ($line_break) {",
          "2776:                 $radio_html .= '<br />';",
          "2777:             }",
          "2779:             if (! empty($class)) {",
          "2780:                 $radio_html .= '</div>';",
          "2781:             }",
          "2782:             $radio_html .= \"\\n\";",
          "2785:         return $radio_html;",
          "2804:     public function PMA_getDropdown($select_name, $choices, $active_choice, $id)",
          "2805:     {",
          "2806:         $result = '<select name=\"' . htmlspecialchars($select_name) . '\" id=\"'",
          "2807:             . htmlspecialchars($id) . '\">';",
          "2809:         foreach ($choices as $one_choice_value => $one_choice_label) {",
          "2810:             $result .= '<option value=\"' . htmlspecialchars($one_choice_value) . '\"';",
          "2812:             if ($one_choice_value == $active_choice) {",
          "2813:                 $result .= ' selected=\"selected\"';",
          "2814:             }",
          "2815:             $result .= '>' . htmlspecialchars($one_choice_label) . '</option>';",
          "2816:         }",
          "2817:         $result .= '</select>';",
          "2819:         return $result;",
          "2835:     public function PMA_getDivForSliderEffect($id, $message)",
          "2836:     {",
          "2837:         if ($GLOBALS['cfg']['InitialSlidersState'] == 'disabled') {",
          "2838:             return '<div id=\"' . $id . '\">';",
          "2839:         }",
          "2849:         return '<div id=\"' . $id . '\"'",
          "2850:             . (($GLOBALS['cfg']['InitialSlidersState'] == 'closed')",
          "2851:                 ? ' style=\"display: none; overflow:auto;\"'",
          "2852:                 : '')",
          "2853:             . ' class=\"pma_auto_slider\" title=\"' . htmlspecialchars($message) . '\">';",
          "2870:     public function PMA_toggleButton($action, $select_name, $options, $callback)",
          "2871:     {",
          "2873:         $link = \"$action&amp;\" . urlencode($select_name) . \"=\";",
          "2874:         $link_on = $link . urlencode($options[1]['value']);",
          "2875:         $link_off = $link . urlencode($options[0]['value']);",
          "2877:         if ($options[1]['selected'] == true) {",
          "2878:             $state = 'on';",
          "2879:         } else if ($options[0]['selected'] == true) {",
          "2880:             $state = 'off';",
          "2881:         } else {",
          "2882:             $state = 'on';",
          "2883:         }",
          "2886:         return \"<!-- TOGGLE START -->\\n\"",
          "2887:             . \"<div class='wrapper toggleAjax hide'>\\n\"",
          "2888:             . \"    <div class='toggleButton'>\\n\"",
          "2889:             . \"        <div title='\" . __('Click to toggle')",
          "2890:             . \"' class='container $state'>\\n\"",
          "2891:             . \"           <img src='\" . htmlspecialchars($GLOBALS['pmaThemeImage'])",
          "2892:             . \"toggle-\" . htmlspecialchars($GLOBALS['text_dir']) . \".png'\\n\"",
          "2893:             . \"                 alt='' />\\n\"",
          "2894:             . \"            <table class='nospacing nopadding'>\\n\"",
          "2895:             . \"                <tbody>\\n\"",
          "2896:             . \"                <tr>\\n\"",
          "2897:             . \"                <td class='toggleOn'>\\n\"",
          "2898:             . \"                    <span class='hide'>$link_on</span>\\n\"",
          "2899:             . \"                    <div>\"",
          "2900:             . str_replace(' ', '&nbsp;', htmlspecialchars($options[1]['label']))",
          "2901:             . \"\\n\" . \"                    </div>\\n\"",
          "2902:             . \"                </td>\\n\"",
          "2903:             . \"                <td><div>&nbsp;</div></td>\\n\"",
          "2904:             . \"                <td class='toggleOff'>\\n\"",
          "2905:             . \"                    <span class='hide'>$link_off</span>\\n\"",
          "2906:             . \"                    <div>\"",
          "2907:             . str_replace(' ', '&nbsp;', htmlspecialchars($options[0]['label']))",
          "2908:             . \"\\n\" . \"                    </div>\\n\"",
          "2909:             . \"                </tr>\\n\"",
          "2910:             . \"                </tbody>\\n\"",
          "2911:             . \"            </table>\\n\"",
          "2912:             . \"            <span class='hide callback'>\"",
          "2913:             . htmlspecialchars($callback) . \"</span>\\n\"",
          "2914:             . \"            <span class='hide text_direction'>\"",
          "2915:             . htmlspecialchars($GLOBALS['text_dir']) . \"</span>\\n\"",
          "2916:             . \"        </div>\\n\"",
          "2917:             . \"    </div>\\n\"",
          "2918:             . \"</div>\\n\"",
          "2919:             . \"<!-- TOGGLE END -->\";",
          "2921:     } // end PMA_toggleButton()",
          "2929:     public function PMA_clearUserCache()",
          "2930:     {",
          "2931:         $this->PMA_cacheUnset('is_superuser', true);",
          "2943:     public function PMA_cacheExists($var, $server = 0)",
          "2944:     {",
          "2945:         if (true === $server) {",
          "2946:             $server = $GLOBALS['server'];",
          "2947:         }",
          "2948:         return isset($_SESSION['cache']['server_' . $server][$var]);",
          "2960:     public function PMA_cacheGet($var, $server = 0)",
          "2961:     {",
          "2962:         if (true === $server) {",
          "2963:             $server = $GLOBALS['server'];",
          "2964:         }",
          "2965:         if (isset($_SESSION['cache']['server_' . $server][$var])) {",
          "2966:             return $_SESSION['cache']['server_' . $server][$var];",
          "2967:         } else {",
          "2968:             return null;",
          "2969:         }",
          "2982:     public function PMA_cacheSet($var, $val = null, $server = 0)",
          "2983:     {",
          "2984:         if (true === $server) {",
          "2985:             $server = $GLOBALS['server'];",
          "2986:         }",
          "2987:         $_SESSION['cache']['server_' . $server][$var] = $val;",
          "2988:     }",
          "2999:     public function PMA_cacheUnset($var, $server = 0)",
          "3000:     {",
          "3001:         if ($server === true) {",
          "3002:             $server = $GLOBALS['server'];",
          "3003:         }",
          "3004:         unset($_SESSION['cache']['server_' . $server][$var]);",
          "3018:     public function PMA_printableBitValue($value, $length)",
          "3019:     {",
          "3020:         $printable = '';",
          "3021:         for ($i = 0, $len_ceiled = ceil($length / 8); $i < $len_ceiled; $i++) {",
          "3022:             $printable .= sprintf('%08d', decbin(ord(substr($value, $i, 1))));",
          "3023:         }",
          "3024:         $printable = substr($printable, -$length);",
          "3025:         return $printable;",
          "3026:     }",
          "3036:     public function PMA_containsNonPrintableAscii($value)",
          "3037:     {",
          "3038:         return preg_match('@[^[:print:]]@', $value);",
          "3050:     public function PMA_convertBitDefaultValue($bit_default_value)",
          "3051:     {",
          "3052:         return strtr($bit_default_value, array(\"b\" => \"\", \"'\" => \"\"));",
          "3064:     public function PMA_extractColumnSpec($columnspec)",
          "3065:     {",
          "3066:         $first_bracket_pos = strpos($columnspec, '(');",
          "3067:         if ($first_bracket_pos) {",
          "3068:             $spec_in_brackets = chop(",
          "3069:                 substr(",
          "3070:                     $columnspec,",
          "3071:                     $first_bracket_pos + 1,",
          "3072:                     (strrpos($columnspec, ')') - $first_bracket_pos - 1)",
          "3073:                 )",
          "3074:             );",
          "3076:             $type = strtolower(chop(substr($columnspec, 0, $first_bracket_pos)));",
          "3077:         } else {",
          "3078:             $type = strtolower($columnspec);",
          "3079:             $spec_in_brackets = '';",
          "3080:         }",
          "3082:         if ('enum' == $type || 'set' == $type) {",
          "3085:             $enum_set_values = array();",
          "3086:             $working = \"\";",
          "3087:             $in_string = false;",
          "3088:             $index = 0;",
          "3091:             while (isset($columnspec[$index])) {",
          "3094:                 $char = $columnspec[$index];",
          "3097:                 if ($char == \"'\") {",
          "3100:                     if (! $in_string) {",
          "3101:                         $in_string = true;",
          "3102:                         $working = \"\";",
          "3103:                     } else {",
          "3107:                         $has_next = isset($columnspec[$index + 1]);",
          "3108:                         $next = $has_next ? $columnspec[$index + 1] : null;",
          "3112:                         if (! $has_next || $next != \"'\") {",
          "3113:                             $enum_set_values[] = $working;",
          "3114:                             $in_string = false;",
          "3116:                         } elseif ($next == \"'\") {",
          "3119:                             $working .= \"'\";",
          "3121:                             $index++;",
          "3122:                         }",
          "3123:                     }",
          "3125:                 } elseif ('\\\\' == $char",
          "3126:                     && isset($columnspec[$index + 1])",
          "3127:                     && \"'\" == $columnspec[$index + 1]",
          "3128:                 ) {",
          "3130:                     $working .= \"'\";",
          "3131:                     $index++;",
          "3132:                 } else {",
          "3134:                     $working .= $char;",
          "3135:                 }",
          "3138:                 $index++;",
          "3139:             } // end while",
          "3141:             $printtype = $type",
          "3142:                 . '(' .  str_replace(\"','\", \"', '\", $spec_in_brackets) . ')';",
          "3143:             $binary = false;",
          "3144:             $unsigned = false;",
          "3145:             $zerofill = false;",
          "3147:         } else {",
          "3149:             $enum_set_values = array();",
          "3152:             $printtype = strtolower($columnspec);",
          "3158:             if (preg_match('@binary@', $printtype)",
          "3159:                 && ! preg_match('@binary[\\(]@', $printtype)",
          "3160:             ) {",
          "3161:                 $printtype = preg_replace('@binary@', '', $printtype);",
          "3162:                 $binary = true;",
          "3163:             } else {",
          "3164:                 $binary = false;",
          "3165:             }",
          "3167:             $printtype = preg_replace('@zerofill@', '', $printtype, -1, $zerofill_cnt);",
          "3168:             $zerofill = ($zerofill_cnt > 0);",
          "3169:             $printtype = preg_replace('@unsigned@', '', $printtype, -1, $unsigned_cnt);",
          "3170:             $unsigned = ($unsigned_cnt > 0);",
          "3171:             $printtype = trim($printtype);",
          "3173:         }",
          "3175:         $attribute     = ' ';",
          "3176:         if ($binary) {",
          "3177:             $attribute = 'BINARY';",
          "3178:         }",
          "3179:         if ($unsigned) {",
          "3180:             $attribute = 'UNSIGNED';",
          "3181:         }",
          "3182:         if ($zerofill) {",
          "3183:             $attribute = 'UNSIGNED ZEROFILL';",
          "3184:         }",
          "3186:         $can_contain_collation = false;",
          "3187:         if (! $binary",
          "3188:             && preg_match(",
          "3189:                 \"@^(char|varchar|text|tinytext|mediumtext|longtext|set|enum)@\", $type",
          "3190:             )",
          "3191:         ) {",
          "3192:             $can_contain_collation = true;",
          "3193:         }",
          "3196:         $displayed_type = htmlspecialchars($printtype);",
          "3197:         if (strlen($printtype) > $GLOBALS['cfg']['LimitChars']) {",
          "3198:             $displayed_type  = '<abbr title=\"' . $printtype . '\">';",
          "3199:             $displayed_type .= substr($printtype, 0, $GLOBALS['cfg']['LimitChars']);",
          "3200:             $displayed_type .= '</abbr>';",
          "3201:         }",
          "3203:         return array(",
          "3204:             'type' => $type,",
          "3205:             'spec_in_brackets' => $spec_in_brackets,",
          "3206:             'enum_set_values'  => $enum_set_values,",
          "3207:             'print_type' => $printtype,",
          "3208:             'binary' => $binary,",
          "3209:             'unsigned' => $unsigned,",
          "3210:             'zerofill' => $zerofill,",
          "3211:             'attribute' => $attribute,",
          "3212:             'can_contain_collation' => $can_contain_collation,",
          "3213:             'displayed_type' => $displayed_type",
          "3214:         );",
          "3225:     public function PMA_isForeignKeySupported($engine)",
          "3226:     {",
          "3227:         $engine = strtoupper($engine);",
          "3228:         if (($engine == 'INNODB') || ($engine == 'PBXT')) {",
          "3229:             return true;",
          "3230:         } else {",
          "3231:             return false;",
          "3232:         }",
          "3233:     }",
          "3243:     public function PMA_replaceBinaryContents($content)",
          "3244:     {",
          "3245:         $result = str_replace(\"\\x00\", '\\0', $content);",
          "3246:         $result = str_replace(\"\\x08\", '\\b', $result);",
          "3247:         $result = str_replace(\"\\x0a\", '\\n', $result);",
          "3248:         $result = str_replace(\"\\x0d\", '\\r', $result);",
          "3249:         $result = str_replace(\"\\x1a\", '\\Z', $result);",
          "3250:         return $result;",
          "3262:     public function PMA_asWKT($data, $includeSRID = false)",
          "3263:     {",
          "3265:         $hex = bin2hex($data);",
          "3266:         $wktsql     = \"SELECT ASTEXT(x'\" . $hex . \"')\";",
          "3267:         if ($includeSRID) {",
          "3268:             $wktsql .= \", SRID(x'\" . $hex . \"')\";",
          "3269:         }",
          "3271:         $wktresult  = PMA_DBI_try_query($wktsql, null, PMA_DBI_QUERY_STORE);",
          "3272:         $wktarr     = PMA_DBI_fetch_row($wktresult, 0);",
          "3273:         $wktval     = $wktarr[0];",
          "3275:         if ($includeSRID) {",
          "3276:             $srid = $wktarr[1];",
          "3277:             $wktval = \"'\" . $wktval . \"',\" . $srid;",
          "3278:         }",
          "3279:         @PMA_DBI_free_result($wktresult);",
          "3281:         return $wktval;",
          "3293:     public function PMA_duplicateFirstNewline($string)",
          "3294:     {",
          "3295:         $first_occurence = strpos($string, \"\\r\\n\");",
          "3296:         if ($first_occurence === 0) {",
          "3297:             $string = \"\\n\" . $string;",
          "3299:         return $string;",
          "3312:     public function PMA_getTitleForTarget($target)",
          "3313:     {",
          "3314:         $mapping = array(",
          "3316:             'tbl_structure.php' =>  __('Structure'),",
          "3317:             'tbl_sql.php' => __('SQL'),",
          "3318:             'tbl_select.php' =>__('Search'),",
          "3319:             'tbl_change.php' =>__('Insert'),",
          "3320:             'sql.php' => __('Browse'),",
          "3323:             'db_structure.php' => __('Structure'),",
          "3324:             'db_sql.php' => __('SQL'),",
          "3325:             'db_search.php' => __('Search'),",
          "3326:             'db_operations.php' => __('Operations'),",
          "3327:         );",
          "3328:         return $mapping[$target];",
          "3343:     public function PMA_expandUserString($string, $escape = null, $updates = array())",
          "3344:     {",
          "3346:         $vars['http_host'] = PMA_getenv('HTTP_HOST');",
          "3347:         $vars['server_name'] = $GLOBALS['cfg']['Server']['host'];",
          "3348:         $vars['server_verbose'] = $GLOBALS['cfg']['Server']['verbose'];",
          "3350:         if (empty($GLOBALS['cfg']['Server']['verbose'])) {",
          "3351:             $vars['server_verbose_or_name'] = $GLOBALS['cfg']['Server']['host'];",
          "3352:         } else {",
          "3353:             $vars['server_verbose_or_name'] = $GLOBALS['cfg']['Server']['verbose'];",
          "3354:         }",
          "3356:         $vars['database'] = $GLOBALS['db'];",
          "3357:         $vars['table'] = $GLOBALS['table'];",
          "3358:         $vars['phpmyadmin_version'] = 'phpMyAdmin ' . PMA_VERSION;",
          "3361:         foreach ($updates as $key => $val) {",
          "3362:             $vars[$key] = $val;",
          "3363:         }",
          "3370:         $replace = array(",
          "3371:             '@HTTP_HOST@' => $vars['http_host'],",
          "3372:             '@SERVER@' => $vars['server_name'],",
          "3373:             '__SERVER__' => $vars['server_name'],",
          "3374:             '@VERBOSE@' => $vars['server_verbose'],",
          "3375:             '@VSERVER@' => $vars['server_verbose_or_name'],",
          "3376:             '@DATABASE@' => $vars['database'],",
          "3377:             '__DB__' => $vars['database'],",
          "3378:             '@TABLE@' => $vars['table'],",
          "3379:             '__TABLE__' => $vars['table'],",
          "3380:             '@PHPMYADMIN@' => $vars['phpmyadmin_version'],",
          "3381:             );",
          "3384:         if (! is_null($escape)) {",
          "3385:             foreach ($replace as $key => $val) {",
          "3386:                 $replace[$key] = $escape($val);",
          "3391:         if (strpos($string, '@FIELDS@') !== false) {",
          "3392:             $string = strtr($string, array('@FIELDS@' => '@COLUMNS@'));",
          "3393:         }",
          "3396:         if (strpos($string, '@COLUMNS@') !== false) {",
          "3397:             $columns_list = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);",
          "3399:             $column_names = array();",
          "3400:             foreach ($columns_list as $column) {",
          "3401:                 if (! is_null($escape)) {",
          "3402:                     $column_names[] = $escape($column['Field']);",
          "3403:                 } else {",
          "3404:                     $column_names[] = $column['Field'];",
          "3405:                 }",
          "3406:             }",
          "3408:             $replace['@COLUMNS@'] = implode(',', $column_names);",
          "3409:         }",
          "3412:         return strtr(strftime($string), $replace);",
          "3424:     public function PMA_getBrowseUploadFileBlock($max_upload_size)",
          "3425:     {",
          "3427:         $block_html = '';",
          "3429:         if ($GLOBALS['is_upload'] && ! empty($GLOBALS['cfg']['UploadDir'])) {",
          "3430:             $block_html .= '<label for=\"radio_import_file\">';",
          "3431:         } else {",
          "3432:             $block_html .= '<label for=\"input_import_file\">';",
          "3433:         }",
          "3435:         $block_html .= __(\"Browse your computer:\") . '</label>'",
          "3436:             . '<div id=\"upload_form_status\" style=\"display: none;\"></div>'",
          "3437:             . '<div id=\"upload_form_status_info\" style=\"display: none;\"></div>'",
          "3438:             . '<input type=\"file\" name=\"import_file\" id=\"input_import_file\" />'",
          "3439:             . $this->PMA_getFormattedMaximumUploadSize($max_upload_size) . \"\\n\"",
          "3441:             . $this->PMA_generateHiddenMaxFileSize($max_upload_size) . \"\\n\";",
          "3443:         return $block_html;",
          "3456:     public function PMA_getSelectUploadFileBlock($import_list, $uploaddir)",
          "3457:     {",
          "3459:         $block_html = '';",
          "3461:         $block_html .= '<label for=\"radio_local_import_file\">'",
          "3462:             . sprintf(",
          "3463:                 __(\"Select from the web server upload directory <b>%s</b>:\"),",
          "3464:                 htmlspecialchars($this->PMA_userDir($uploaddir))",
          "3465:             )",
          "3466:             . '</label>';",
          "3468:         $extensions = '';",
          "3469:         foreach ($import_list as $val) {",
          "3470:             if (! empty($extensions)) {",
          "3471:                 $extensions .= '|';",
          "3472:             }",
          "3473:             $extensions .= $val['extension'];",
          "3474:         }",
          "3476:         $matcher = '@\\.(' . $extensions . ')(\\.('",
          "3477:             . PMA_supportedDecompressions() . '))?$@';",
          "3479:         $active = (isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed']",
          "3480:             && isset($local_import_file))",
          "3481:             ? $local_import_file",
          "3482:             : '';",
          "3484:         $files = PMA_getFileSelectOptions(",
          "3485:             $this->PMA_userDir($uploaddir),",
          "3486:             $matcher,",
          "3487:             $active",
          "3488:         );",
          "3490:         if ($files === false) {",
          "3491:             PMA_Message::error(",
          "3492:                 __('The directory you set for upload work cannot be reached')",
          "3493:             )->display();",
          "3494:         } elseif (! empty($files)) {",
          "3495:             $block_html .= \"\\n\"",
          "3496:                 . '    <select style=\"margin: 5px\" size=\"1\" name=\"local_import_file\" '",
          "3497:                 .'id=\"select_local_import_file\">' . \"\\n\"",
          "3498:                 . '        <option value=\"\">&nbsp;</option>' . \"\\n\"",
          "3499:                 . $files",
          "3500:                 . '    </select>' . \"\\n\";",
          "3501:         } elseif (empty ($files)) {",
          "3502:             $block_html .= '<i>' . __('There are no files to upload') . '</i>';",
          "3505:         return $block_html;",
          "3515:     public function PMA_buildActionTitles()",
          "3516:     {",
          "3517:         $titles = array();",
          "3519:         $titles['Browse']     = $this->PMA_getIcon('b_browse.png', __('Browse'));",
          "3520:         $titles['NoBrowse']   = $this->PMA_getIcon('bd_browse.png', __('Browse'));",
          "3521:         $titles['Search']     = $this->PMA_getIcon('b_select.png', __('Search'));",
          "3522:         $titles['NoSearch']   = $this->PMA_getIcon('bd_select.png', __('Search'));",
          "3523:         $titles['Insert']     = $this->PMA_getIcon('b_insrow.png', __('Insert'));",
          "3524:         $titles['NoInsert']   = $this->PMA_getIcon('bd_insrow.png', __('Insert'));",
          "3525:         $titles['Structure']  = $this->PMA_getIcon('b_props.png', __('Structure'));",
          "3526:         $titles['Drop']       = $this->PMA_getIcon('b_drop.png', __('Drop'));",
          "3527:         $titles['NoDrop']     = $this->PMA_getIcon('bd_drop.png', __('Drop'));",
          "3528:         $titles['Empty']      = $this->PMA_getIcon('b_empty.png', __('Empty'));",
          "3529:         $titles['NoEmpty']    = $this->PMA_getIcon('bd_empty.png', __('Empty'));",
          "3530:         $titles['Edit']       = $this->PMA_getIcon('b_edit.png', __('Edit'));",
          "3531:         $titles['NoEdit']     = $this->PMA_getIcon('bd_edit.png', __('Edit'));",
          "3532:         $titles['Export']     = $this->PMA_getIcon('b_export.png', __('Export'));",
          "3533:         $titles['NoExport']   = $this->PMA_getIcon('bd_export.png', __('Export'));",
          "3534:         $titles['Execute']    = $this->PMA_getIcon('b_nextpage.png', __('Execute'));",
          "3535:         $titles['NoExecute']  = $this->PMA_getIcon('bd_nextpage.png', __('Execute'));",
          "3537:         return $titles;",
          "3552:     public function PMA_getSupportedDatatypes($html = false, $selected = '')",
          "3553:     {",
          "3554:         if ($html) {",
          "3557:             $retval = '';",
          "3559:             foreach ($GLOBALS['PMA_Types']->getColumns() as $key => $value) {",
          "3561:                 if (is_array($value)) {",
          "3563:                     $retval .= \"<optgroup label='\" . htmlspecialchars($key) . \"'>\";",
          "3564:                     foreach ($value as $subvalue) {",
          "3566:                         if ($subvalue == $selected) {",
          "3567:                             $retval .= sprintf(",
          "3568:                                 '<option selected=\"selected\" title=\"%s\">%s</option>',",
          "3569:                                 $GLOBALS['PMA_Types']->getTypeDescription($subvalue),",
          "3570:                                 $subvalue",
          "3571:                             );",
          "3572:                         } else if ($subvalue === '-') {",
          "3573:                             $retval .= '<option disabled=\"disabled\">';",
          "3574:                             $retval .= $subvalue;",
          "3575:                             $retval .= '</option>';",
          "3576:                         } else {",
          "3577:                             $retval .= sprintf(",
          "3578:                                 '<option title=\"%s\">%s</option>',",
          "3579:                                 $GLOBALS['PMA_Types']->getTypeDescription($subvalue),",
          "3580:                                 $subvalue",
          "3581:                             );",
          "3582:                         }",
          "3583:                     }",
          "3584:                     $retval .= '</optgroup>';",
          "3586:                 } else {",
          "3588:                     if ($selected == $value) {",
          "3591:                             $GLOBALS['PMA_Types']->getTypeDescription($value),",
          "3592:                             $value",
          "3597:                             $GLOBALS['PMA_Types']->getTypeDescription($value),",
          "3598:                             $value",
          "3605:         } else {",
          "3606:             $retval = array();",
          "3607:             foreach ($GLOBALS['PMA_Types']->getColumns() as $value) {",
          "3609:                 if (is_array($value)) {",
          "3610:                     foreach ($value as $subvalue) {",
          "3611:                         if ($subvalue !== '-') {",
          "3612:                             $retval[] = $subvalue;",
          "3613:                         }",
          "3614:                     }",
          "3615:                 } else {",
          "3616:                     if ($value !== '-') {",
          "3617:                         $retval[] = $value;",
          "3624:         return $retval;",
          "3625:     } // end PMA_getSupportedDatatypes()",
          "3634:     public function PMA_unsupportedDatatypes()",
          "3635:     {",
          "3636:         $no_support_types = array();",
          "3637:         return $no_support_types;",
          "3638:     }",
          "3648:     public function PMA_getGISDatatypes($upper_case = false)",
          "3649:     {",
          "3650:         $gis_data_types = array(",
          "3651:             'geometry',",
          "3652:             'point',",
          "3653:             'linestring',",
          "3654:             'polygon',",
          "3655:             'multipoint',",
          "3656:             'multilinestring',",
          "3657:             'multipolygon',",
          "3658:             'geometrycollection'",
          "3659:         );",
          "3660:         if ($upper_case) {",
          "3661:             for ($i = 0; $i < count($gis_data_types); $i++) {",
          "3662:                 $gis_data_types[$i] = strtoupper($gis_data_types[$i]);",
          "3663:             }",
          "3665:         return $gis_data_types;",
          "3676:     public function PMA_createGISData($gis_string)",
          "3677:     {",
          "3678:         $gis_string = trim($gis_string);",
          "3679:         $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|'",
          "3680:             . 'POLYGON|MULTIPOLYGON|GEOMETRYCOLLECTION)';",
          "3681:         if (preg_match(\"/^'\" . $geom_types . \"\\(.*\\)',[0-9]*$/i\", $gis_string)) {",
          "3682:             return 'GeomFromText(' . $gis_string . ')';",
          "3683:         } elseif (preg_match(\"/^\" . $geom_types . \"\\(.*\\)$/i\", $gis_string)) {",
          "3684:             return \"GeomFromText('\" . $gis_string . \"')\";",
          "3685:         } else {",
          "3686:             return $gis_string;",
          "3687:         }",
          "3705:     public function PMA_getGISFunctions($geom_type = null, $binary = true, $display = false)",
          "3706:     {",
          "3707:         $funcs = array();",
          "3708:         if ($display) {",
          "3709:             $funcs[] = array('display' => ' ');",
          "3710:         }",
          "3713:         $funcs['Dimension']    = array('params' => 1, 'type' => 'int');",
          "3714:         $funcs['Envelope']     = array('params' => 1, 'type' => 'Polygon');",
          "3715:         $funcs['GeometryType'] = array('params' => 1, 'type' => 'text');",
          "3716:         $funcs['SRID']         = array('params' => 1, 'type' => 'int');",
          "3717:         $funcs['IsEmpty']      = array('params' => 1, 'type' => 'int');",
          "3718:         $funcs['IsSimple']     = array('params' => 1, 'type' => 'int');",
          "3720:         $geom_type = trim(strtolower($geom_type));",
          "3721:         if ($display && $geom_type != 'geometry' && $geom_type != 'multipoint') {",
          "3726:         if ($geom_type == 'point') {",
          "3727:             $funcs['X'] = array('params' => 1, 'type' => 'float');",
          "3728:             $funcs['Y'] = array('params' => 1, 'type' => 'float');",
          "3730:         } elseif ($geom_type == 'multipoint') {",
          "3732:         } elseif ($geom_type == 'linestring') {",
          "3733:             $funcs['EndPoint']   = array('params' => 1, 'type' => 'point');",
          "3734:             $funcs['GLength']    = array('params' => 1, 'type' => 'float');",
          "3735:             $funcs['NumPoints']  = array('params' => 1, 'type' => 'int');",
          "3736:             $funcs['StartPoint'] = array('params' => 1, 'type' => 'point');",
          "3737:             $funcs['IsRing']     = array('params' => 1, 'type' => 'int');",
          "3739:         } elseif ($geom_type == 'multilinestring') {",
          "3740:             $funcs['GLength']  = array('params' => 1, 'type' => 'float');",
          "3741:             $funcs['IsClosed'] = array('params' => 1, 'type' => 'int');",
          "3743:         } elseif ($geom_type == 'polygon') {",
          "3744:             $funcs['Area']             = array('params' => 1, 'type' => 'float');",
          "3745:             $funcs['ExteriorRing']     = array('params' => 1, 'type' => 'linestring');",
          "3746:             $funcs['NumInteriorRings'] = array('params' => 1, 'type' => 'int');",
          "3748:         } elseif ($geom_type == 'multipolygon') {",
          "3749:             $funcs['Area']     = array('params' => 1, 'type' => 'float');",
          "3750:             $funcs['Centroid'] = array('params' => 1, 'type' => 'point');",
          "3754:         } elseif ($geom_type == 'geometrycollection') {",
          "3755:             $funcs['NumGeometries'] = array('params' => 1, 'type' => 'int');",
          "3759:         if ($binary) {",
          "3761:             if ($display) {",
          "3762:                 $funcs[] = array('display' => '--------');",
          "3763:             }",
          "3765:             if (PMA_MYSQL_INT_VERSION < 50601) {",
          "3766:                 $funcs['Crosses']    = array('params' => 2, 'type' => 'int');",
          "3767:                 $funcs['Contains']   = array('params' => 2, 'type' => 'int');",
          "3768:                 $funcs['Disjoint']   = array('params' => 2, 'type' => 'int');",
          "3769:                 $funcs['Equals']     = array('params' => 2, 'type' => 'int');",
          "3770:                 $funcs['Intersects'] = array('params' => 2, 'type' => 'int');",
          "3771:                 $funcs['Overlaps']   = array('params' => 2, 'type' => 'int');",
          "3772:                 $funcs['Touches']    = array('params' => 2, 'type' => 'int');",
          "3773:                 $funcs['Within']     = array('params' => 2, 'type' => 'int');",
          "3774:             } else {",
          "3776:                 $funcs['ST_Crosses']    = array('params' => 2, 'type' => 'int');",
          "3777:                 $funcs['ST_Contains']   = array('params' => 2, 'type' => 'int');",
          "3778:                 $funcs['ST_Disjoint']   = array('params' => 2, 'type' => 'int');",
          "3779:                 $funcs['ST_Equals']     = array('params' => 2, 'type' => 'int');",
          "3780:                 $funcs['ST_Intersects'] = array('params' => 2, 'type' => 'int');",
          "3781:                 $funcs['ST_Overlaps']   = array('params' => 2, 'type' => 'int');",
          "3782:                 $funcs['ST_Touches']    = array('params' => 2, 'type' => 'int');",
          "3783:                 $funcs['ST_Within']     = array('params' => 2, 'type' => 'int');",
          "3784:             }",
          "3786:             if ($display) {",
          "3787:                 $funcs[] = array('display' => '--------');",
          "3788:             }",
          "3790:             $funcs['MBRContains']   = array('params' => 2, 'type' => 'int');",
          "3791:             $funcs['MBRDisjoint']   = array('params' => 2, 'type' => 'int');",
          "3792:             $funcs['MBREquals']     = array('params' => 2, 'type' => 'int');",
          "3793:             $funcs['MBRIntersects'] = array('params' => 2, 'type' => 'int');",
          "3794:             $funcs['MBROverlaps']   = array('params' => 2, 'type' => 'int');",
          "3795:             $funcs['MBRTouches']    = array('params' => 2, 'type' => 'int');",
          "3796:             $funcs['MBRWithin']     = array('params' => 2, 'type' => 'int');",
          "3798:         return $funcs;",
          "3817:     public function PMA_getDefaultFunctionForField($field, $insert_mode)",
          "3818:     {",
          "3819:         global $cfg, $analyzed_sql, $data;",
          "3821:         $default_function   = '';",
          "3824:         $current_class = $GLOBALS['PMA_Types']->getTypeClass($field['True_Type']);",
          "3825:         if (! empty($current_class)) {",
          "3826:             if (isset($cfg['DefaultFunctions']['FUNC_' . $current_class])) {",
          "3827:                 $default_function   = $cfg['DefaultFunctions']['FUNC_' . $current_class];",
          "3828:             }",
          "3831:         $analyzed_sql_field_array = $analyzed_sql[0]['create_table_fields']",
          "3832:             [$field['Field']];",
          "3839:         if (($field['True_Type'] == 'timestamp')",
          "3840:             && empty($field['Default'])",
          "3841:             && empty($data)",
          "3842:             && ! isset($analyzed_sql_field_array['on_update_current_timestamp'])",
          "3843:             && ($analyzed_sql_field_array['default_value'] != 'NULL')",
          "3844:         ) {",
          "3845:             $default_function = $cfg['DefaultFunctions']['first_timestamp'];",
          "3846:         }",
          "3849:         if ($field['first_timestamp']) {",
          "3850:             $default_function = $cfg['DefaultFunctions']['first_timestamp'];",
          "3851:         }",
          "3856:         if ($insert_mode",
          "3857:             && $field['Key'] == 'PRI'",
          "3858:             && ($field['Type'] == 'char(36)' || $field['Type'] == 'varchar(36)')",
          "3859:         ) {",
          "3860:              $default_function = $cfg['DefaultFunctions']['FUNC_UUID'];",
          "3861:         }",
          "3864:         if (isset($field['display_binary_as_hex'])) {",
          "3865:             $default_function = 'UNHEX';",
          "3866:         }",
          "3868:         return $default_function;",
          "3882:     public function PMA_getFunctionsForField($field, $insert_mode)",
          "3883:     {",
          "3884:         $default_function = $this->PMA_getDefaultFunctionForField($field, $insert_mode);",
          "3885:         $dropdown_built = array();",
          "3888:         $retval = '<option></option>' . \"\\n\";",
          "3891:         $functions = $GLOBALS['PMA_Types']->getFunctions($field['True_Type']);",
          "3892:         foreach ($functions as $function) {",
          "3893:             $retval .= '<option';",
          "3894:             if ($default_function === $function) {",
          "3895:                 $retval .= ' selected=\"selected\"';",
          "3896:             }",
          "3897:             $retval .= '>' . $function . '</option>' . \"\\n\";",
          "3898:             $dropdown_built[$function] = true;",
          "3902:         if (count($functions) > 0) {",
          "3903:             $retval .= '<option value=\"\" disabled=\"disabled\">--------</option>' . \"\\n\";",
          "3909:         $functions = $GLOBALS['PMA_Types']->getAllFunctions();",
          "3910:         foreach ($functions as $function) {",
          "3912:             if (isset($dropdown_built[$function])) {",
          "3913:                 continue;",
          "3914:             }",
          "3915:             $retval .= '<option';",
          "3916:             if ($default_function === $function) {",
          "3917:                 $retval .= ' selected=\"selected\"';",
          "3918:             }",
          "3919:             $retval .= '>' . $function . '</option>' . \"\\n\";",
          "3920:         } // end for",
          "3922:         return $retval;",
          "3923:     } // end PMA_getFunctionsForField()",
          "3945:     public function PMA_currentUserHasPrivilege($priv, $db = null, $tbl = null)",
          "3946:     {",
          "3949:         $user = PMA_DBI_fetch_value(\"SELECT CURRENT_USER();\");",
          "3950:         if ($user === false) {",
          "3951:             return false;",
          "3952:         }",
          "3954:         $user = explode('@', $user);",
          "3955:         $username  = \"''\";",
          "3956:         $username .= str_replace(\"'\", \"''\", $user[0]);",
          "3957:         $username .= \"''@''\";",
          "3958:         $username .= str_replace(\"'\", \"''\", $user[1]);",
          "3959:         $username .= \"''\";",
          "3962:         $query = \"SELECT `PRIVILEGE_TYPE` FROM `INFORMATION_SCHEMA`.`%s` \"",
          "3963:                . \"WHERE GRANTEE='%s' AND PRIVILEGE_TYPE='%s'\";",
          "3966:         $user_privileges = PMA_DBI_fetch_value(",
          "3969:                 'USER_PRIVILEGES',",
          "3971:                 $priv",
          "3974:         if ($user_privileges) {",
          "3979:         if ($db !== null) {",
          "3981:             $db = str_replace(array('%', '_'), array('\\%', '\\_'), $db);",
          "3982:             $query .= \" AND TABLE_SCHEMA='%s'\";",
          "3983:             $schema_privileges = PMA_DBI_fetch_value(",
          "3984:                 sprintf(",
          "3985:                     $query,",
          "3986:                     'SCHEMA_PRIVILEGES',",
          "3987:                     $username,",
          "3988:                     $priv,",
          "3989:                     $this->PMA_sqlAddSlashes($db)",
          "3990:                 )",
          "3991:             );",
          "3992:             if ($schema_privileges) {",
          "3993:                 return true;",
          "3994:             }",
          "3995:         } else {",
          "3998:             return false;",
          "3999:         }",
          "4002:         if ($tbl !== null) {",
          "4004:             $tbl = str_replace(array('%', '_'), array('\\%', '\\_'), $tbl);",
          "4005:             $query .= \" AND TABLE_NAME='%s'\";",
          "4006:             $table_privileges = PMA_DBI_fetch_value(",
          "4007:                 sprintf(",
          "4008:                     $query,",
          "4009:                     'TABLE_PRIVILEGES',",
          "4010:                     $username,",
          "4011:                     $priv,",
          "4012:                     $this->PMA_sqlAddSlashes($db),",
          "4013:                     $this->PMA_sqlAddSlashes($tbl)",
          "4014:                 )",
          "4015:             );",
          "4016:             if ($table_privileges) {",
          "4017:                 return true;",
          "4018:             }",
          "4019:         }",
          "4033:     public function PMA_getServerType()",
          "4034:     {",
          "4035:         $server_type = 'MySQL';",
          "4036:         if (PMA_DRIZZLE) {",
          "4037:             $server_type = 'Drizzle';",
          "4038:         } else if (strpos(PMA_MYSQL_STR_VERSION, 'mariadb') !== false) {",
          "4039:             $server_type = 'MariaDB';",
          "4040:         } else if (stripos(PMA_MYSQL_VERSION_COMMENT, 'percona') !== false) {",
          "4041:             $server_type = 'Percona Server';",
          "4043:         return $server_type;",
          "4054:     public function PMA_analyzeLimitClause($limit_clause)",
          "4055:     {",
          "4056:         $start_and_length = explode(',', str_ireplace('LIMIT', '', $limit_clause));",
          "4057:         return array(",
          "4058:             'start'  => trim($start_and_length[0]),",
          "4059:             'length' => trim($start_and_length[1])",
          "4060:         );",
          "4069:     public function PMA_getButton()",
          "4070:     {",
          "4071:         return '<p class=\"print_ignore\">'",
          "4072:             . '<input type=\"button\" class=\"button\" id=\"print\" value=\"'",
          "4073:             . __('Print') . '\" />'",
          "4074:             . '</p>';",
          "4075:     }",
          "4086:     public function PMA_parseEnumSetValues($definition)",
          "4087:     {",
          "4088:         $values_string = htmlentities($definition);",
          "4092:         $values = array();",
          "4093:         $in_string = false;",
          "4094:         $buffer = '';",
          "4096:         for ($i=0; $i<strlen($values_string); $i++) {",
          "4098:             $curr = $values_string[$i];",
          "4099:             $next = $i == strlen($values_string)-1 ? '' : $values_string[$i+1];",
          "4101:             if (! $in_string && $curr == \"'\") {",
          "4102:                 $in_string = true;",
          "4103:             } else if ($in_string && $curr == \"\\\\\" && $next == \"\\\\\") {",
          "4104:                 $buffer .= \"&#92;\";",
          "4105:                 $i++;",
          "4106:             } else if ($in_string && $next == \"'\" && ($curr == \"'\" || $curr == \"\\\\\")) {",
          "4107:                 $buffer .= \"&#39;\";",
          "4108:                 $i++;",
          "4109:             } else if ($in_string && $curr == \"'\") {",
          "4110:                 $in_string = false;",
          "4111:                 $values[] = $buffer;",
          "4112:                 $buffer = '';",
          "4113:             } else if ($in_string) {",
          "4114:                  $buffer .= $curr;",
          "4115:             }",
          "4117:         }",
          "4119:         if (strlen($buffer) > 0) {",
          "4124:         return $values;",
          "",
          "---------------"
        ],
        "libraries/core.lib.php||libraries/core.lib.php": [
          "File: libraries/core.lib.php -> libraries/core.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "774:     PMA_addJSCode(PMA_getJsValue($key, $value, $escape));",
          "775: }",
          "777: ?>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "791: function PMA_mimeDefaultFunction($buffer)",
          "792: {",
          "793:     $buffer = htmlspecialchars($buffer);",
          "794:     $buffer = str_replace(",
          "795:         \"\\011\",",
          "796:         ' &nbsp;&nbsp;&nbsp;',",
          "797:         str_replace('  ', ' &nbsp;', $buffer)",
          "798:     );",
          "799:     $buffer = preg_replace(\"@((\\015\\012)|(\\015)|(\\012))@\", '<br />', $buffer);",
          "801:     return $buffer;",
          "802: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b214b9807b4c050d64ae3135d5dd2b77f4f5b631",
      "candidate_info": {
        "commit_hash": "b214b9807b4c050d64ae3135d5dd2b77f4f5b631",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/b214b9807b4c050d64ae3135d5dd2b77f4f5b631",
        "files": [
          "libraries/common.lib.php"
        ],
        "message": "Renamed all the function names with by PMA_ phrase",
        "before_after_code_files": [
          "libraries/common.lib.php||libraries/common.lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/common.lib.php||libraries/common.lib.php"
          ],
          "candidate": [
            "libraries/common.lib.php||libraries/common.lib.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/common.lib.php||libraries/common.lib.php": [
          "File: libraries/common.lib.php -> libraries/common.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: {",
          "24:     {",
          "25:         if (function_exists('bcpow')) {",
          "",
          "[Removed Lines]",
          "23:     private function PMA_detectPow()",
          "",
          "[Added Lines]",
          "23:     private function _detectPow()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     {",
          "49:         static $pow_function = null;",
          "51:         if ($pow_function == null) {",
          "53:         }",
          "55:         if (! $use_function) {",
          "",
          "[Removed Lines]",
          "47:     public function PMA_pow($base, $exp, $use_function = false)",
          "52:             $pow_function = $this->PMA_detectPow();",
          "",
          "[Added Lines]",
          "47:     public function pow($base, $exp, $use_function = false)",
          "52:             $pow_function = $this->_detectPow();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:     {",
          "100:         $include_icon = ($GLOBALS['cfg']['PropertiesIconic'] !== false);",
          "",
          "[Removed Lines]",
          "97:     public function PMA_getIcon($icon, $alternate = '', $force_text = false)",
          "",
          "[Added Lines]",
          "97:     public function getIcon($icon, $alternate = '', $force_text = false)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:         $button = '<span class=\"nowrap\">';",
          "107:         if ($include_icon) {",
          "109:         }",
          "110:         if ($include_icon && $include_text) {",
          "111:             $button .= ' ';",
          "",
          "[Removed Lines]",
          "108:             $button .= $this->PMA_getImage($icon, $alternate);",
          "",
          "[Added Lines]",
          "108:             $button .= $this->getImage($icon, $alternate);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:     {",
          "134:         static $sprites; // cached list of available sprites (if any)",
          "",
          "[Removed Lines]",
          "132:     public function PMA_getImage($image, $alternate = '', $attributes = array())",
          "",
          "[Added Lines]",
          "132:     public function getImage($image, $alternate = '', $attributes = array())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "211:     {",
          "215:         return '(' . sprintf(__('Max: %s%s'), $max_size, $max_unit) . ')';",
          "216:     }",
          "",
          "[Removed Lines]",
          "210:     public function PMA_getFormattedMaximumUploadSize($max_upload_size)",
          "214:         list($max_size, $max_unit) = $this->PMA_formatByteDown($max_upload_size, 4);",
          "",
          "[Added Lines]",
          "210:     public function getFormattedMaximumUploadSize($max_upload_size)",
          "214:         list($max_size, $max_unit) = $this->formatByteDown($max_upload_size, 4);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "230:     {",
          "231:         return '<input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"' .$max_size . '\" />';",
          "232:     }",
          "",
          "[Removed Lines]",
          "229:     public function PMA_generateHiddenMaxFileSize($max_size)",
          "",
          "[Added Lines]",
          "229:     public function generateHiddenMaxFileSize($max_size)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "252:         $a_string = '', $is_like = false, $crlf = false, $php_code = false",
          "253:     ) {",
          "",
          "[Removed Lines]",
          "251:     public function PMA_sqlAddSlashes(",
          "",
          "[Added Lines]",
          "251:     public function sqlAddSlashes(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "272:         }",
          "274:         return $a_string;",
          "",
          "[Removed Lines]",
          "275:     } // end of the 'PMA_sqlAddSlashes()' function",
          "",
          "[Added Lines]",
          "275:     } // end of the 'sqlAddSlashes()' function",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "290:     {",
          "291:         return strtr($name, array('_' => '\\\\_', '%' => '\\\\%'));",
          "",
          "[Removed Lines]",
          "289:     public function PMA_escapeMysqlWildcards($name)",
          "292:     } // end of the 'PMA_escapeMysqlWildcards()' function",
          "",
          "[Added Lines]",
          "289:     public function escapeMysqlWildcards($name)",
          "292:     } // end of the 'escapeMysqlWildcards()' function",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "306:     {",
          "307:         return strtr($name, array('\\\\_' => '_', '\\\\%' => '%'));",
          "",
          "[Removed Lines]",
          "305:     public function PMA_unescapeMysqlWildcards($name)",
          "308:     } // end of the 'PMA_unescapeMysqlWildcards()' function",
          "",
          "[Added Lines]",
          "305:     public function unescapeMysqlWildcards($name)",
          "308:     } // end of the 'unescapeMysqlWildcards()' function",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "322:     {",
          "323:         $quotes = array();",
          "",
          "[Removed Lines]",
          "321:     public function PMA_unQuote($quoted_string, $quote = null)",
          "",
          "[Added Lines]",
          "321:     public function unQuote($quoted_string, $quote = null)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "367:     {",
          "368:         global $cfg;",
          "",
          "[Removed Lines]",
          "366:     public function PMA_formatSql($parsed_sql, $unparsed_sql = '')",
          "",
          "[Added Lines]",
          "366:     public function formatSql($parsed_sql, $unparsed_sql = '')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "410:         } // end switch",
          "412:         return $formatted_sql;",
          "",
          "[Removed Lines]",
          "413:     } // end of the \"PMA_formatSql()\" function",
          "",
          "[Added Lines]",
          "413:     } // end of the \"formatSql()\" function",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "427:     {",
          "428:         return '<a href=\"' . $link . '\" target=\"' . $target . '\">'",
          "430:             . '</a>';",
          "",
          "[Removed Lines]",
          "426:     public function PMA_showDocLink($link, $target = 'documentation')",
          "429:             . $this->PMA_getImage('b_help.png', __('Documentation'))",
          "431:     } // end of the 'PMA_showDocLink()' function",
          "",
          "[Added Lines]",
          "426:     public function showDocLink($link, $target = 'documentation')",
          "429:             . $this->getImage('b_help.png', __('Documentation'))",
          "431:     } // end of the 'showDocLink()' function",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "448:         $chapter, $link, $big_icon = false, $anchor = '', $just_open = false",
          "449:     ) {",
          "",
          "[Removed Lines]",
          "447:     public function PMA_showMySQLDocu(",
          "",
          "[Added Lines]",
          "447:     public function showMySQLDocu(",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "518:             return $open_link;",
          "519:         } elseif ($big_icon) {",
          "520:             return $open_link",
          "522:         } else {",
          "524:         }",
          "",
          "[Removed Lines]",
          "521:                 . $this->PMA_getImage('b_sqlhelp.png', __('Documentation')) . '</a>';",
          "523:             return $this->PMA_showDocLink(PMA_linkURL($url), 'mysql_doc');",
          "526:     } // end of the 'PMA_showMySQLDocu()' function",
          "",
          "[Added Lines]",
          "521:                 . $this->getImage('b_sqlhelp.png', __('Documentation')) . '</a>';",
          "523:             return $this->showDocLink(PMA_linkURL($url), 'mysql_doc');",
          "526:     } // end of the 'showMySQLDocu()' function",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "539:     {",
          "",
          "[Removed Lines]",
          "538:     public function PMA_showDocu($anchor)",
          "540:         return $this->PMA_showDocLink('Documentation.html#' . $anchor);",
          "541:     } // end of the 'PMA_showDocu()' function",
          "",
          "[Added Lines]",
          "538:     public function showDocu($anchor)",
          "540:         return $this->showDocLink('Documentation.html#' . $anchor);",
          "541:     } // end of the 'showDocu()' function",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "554:     {",
          "555:         $url = PMA_getPHPDocLink($target);",
          "",
          "[Removed Lines]",
          "553:     public function PMA_showPHPDocu($target)",
          "557:         return $this->PMA_showDocLink($url);",
          "558:     } // end of the 'PMA_showPHPDocu()' function",
          "",
          "[Added Lines]",
          "553:     public function showPHPDocu($target)",
          "557:         return $this->showDocLink($url);",
          "558:     } // end of the 'showPHPDocu()' function",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "571:     {",
          "572:         return '<span class=\"pma_hint\">'",
          "574:             . '<span class=\"hide\">' . $message . '</span>'",
          "575:             . '</span>';",
          "576:     }",
          "",
          "[Removed Lines]",
          "570:     public function PMA_showHint($message)",
          "573:             . $this->PMA_getImage('b_help.png')",
          "",
          "[Added Lines]",
          "570:     public function showHint($message)",
          "573:             . $this->getImage('b_help.png')",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "596:         $error_message = '', $the_query = '',",
          "597:         $is_modify_link = true, $back_url = '', $exit = true",
          "598:     ) {",
          "",
          "[Removed Lines]",
          "595:     public function PMA_mysqlDie(",
          "",
          "[Added Lines]",
          "595:     public function mysqlDie(",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "620:                 )",
          "621:                 . '[...]';",
          "622:             } else {",
          "624:             }",
          "625:         }",
          "",
          "[Removed Lines]",
          "623:                 $formatted_sql = $this->PMA_formatSql(PMA_SQP_parse($the_query), $the_query);",
          "",
          "[Added Lines]",
          "623:                 $formatted_sql = $this->formatSql(PMA_SQP_parse($the_query), $the_query);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "641:             $error_msg .= '<p><strong>' . __('SQL query') . ':</strong>' . \"\\n\";",
          "642:             if (strstr(strtolower($formatted_sql), 'select')) {",
          "645:             }",
          "646:             if ($is_modify_link) {",
          "647:                 $_url_params = array(",
          "",
          "[Removed Lines]",
          "644:                 $error_msg .= $this->PMA_showMySQLDocu('SQL-Syntax', 'SELECT');",
          "",
          "[Added Lines]",
          "644:                 $error_msg .= $this->showMySQLDocu('SQL-Syntax', 'SELECT');",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "663:                 }",
          "665:                 $error_msg .= $doedit_goto",
          "667:                    . '</a>';",
          "668:             } // end if",
          "669:             $error_msg .= '    </p>' . \"\\n\"",
          "",
          "[Removed Lines]",
          "666:                    . $this->PMA_getIcon('b_edit.png', __('Edit'))",
          "",
          "[Added Lines]",
          "666:                    . $this->getIcon('b_edit.png', __('Edit'))",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "684:         $error_msg .= '<p>' . \"\\n\"",
          "685:             . '    <strong>' . __('MySQL said: ') . '</strong>'",
          "687:             . \"\\n\"",
          "688:             . '</p>' . \"\\n\";",
          "",
          "[Removed Lines]",
          "686:             . $this->PMA_showMySQLDocu('Error-messages-server', 'Error-messages-server')",
          "",
          "[Added Lines]",
          "686:             . $this->showMySQLDocu('Error-messages-server', 'Error-messages-server')",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "736:         } else {",
          "737:             echo $error_msg;",
          "738:         }",
          "",
          "[Removed Lines]",
          "739:     } // end of the 'PMA_mysqlDie()' function",
          "",
          "[Added Lines]",
          "739:     } // end of the 'mysqlDie()' function",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "753:         $limit_count = false",
          "754:     ) {",
          "755:         $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];",
          "",
          "[Removed Lines]",
          "752:     public function PMA_getTableList($db, $tables = null, $limit_offset = 0,",
          "",
          "[Added Lines]",
          "752:     public function getTableList($db, $tables = null, $limit_offset = 0,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "898:     {",
          "900:         if (is_array($a_name)) {",
          "901:             foreach ($a_name as &$data) {",
          "903:             }",
          "904:             return $a_name;",
          "905:         }",
          "",
          "[Removed Lines]",
          "897:     public function PMA_backquote($a_name, $do_it = true)",
          "902:                 $data = $this->PMA_backquote($data, $do_it);",
          "",
          "[Added Lines]",
          "897:     public function backquote($a_name, $do_it = true)",
          "902:                 $data = $this->backquote($data, $do_it);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "919:             return $a_name;",
          "920:         }",
          "",
          "[Removed Lines]",
          "922:     } // end of the 'PMA_backquote()' function",
          "",
          "[Added Lines]",
          "922:     } // end of the 'backquote()' function",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "933:     {",
          "",
          "[Removed Lines]",
          "932:     public function PMA_whichCrlf()",
          "",
          "[Added Lines]",
          "932:     public function whichCrlf()",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "941:         }",
          "943:         return $the_crlf;",
          "",
          "[Removed Lines]",
          "944:     } // end of the 'PMA_whichCrlf()' function",
          "",
          "[Added Lines]",
          "944:     } // end of the 'whichCrlf()' function",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "957:     {",
          "958:         $retval = '';",
          "",
          "[Removed Lines]",
          "956:     public function PMA_getReloadNavigationScript($jsonly = false)",
          "",
          "[Added Lines]",
          "956:     public function getReloadNavigationScript($jsonly = false)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1008:         $message, $sql_query = null, $type = 'notice', $is_view = false",
          "1009:     ) {",
          "",
          "[Removed Lines]",
          "1007:     public function PMA_getMessage(",
          "",
          "[Added Lines]",
          "1007:     public function getMessage(",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1165:                     )->getDisplay();",
          "1166:                 }",
          "1167:             } elseif (isset($parsed_sql)) {",
          "1169:             }",
          "",
          "[Removed Lines]",
          "1168:                 $query_base = $this->PMA_formatSql($parsed_sql, $query_base);",
          "",
          "[Added Lines]",
          "1168:                 $query_base = $this->formatSql($parsed_sql, $query_base);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1215:                     $explain_link = 'import.php'",
          "1216:                         . PMA_generate_common_url($explain_params);",
          "1217:                     $explain_link = ' ['",
          "1219:                 }",
          "1220:             } //show explain",
          "",
          "[Removed Lines]",
          "1218:                         . $this->PMA_linkOrButton($explain_link, $_message) . ']';",
          "",
          "[Added Lines]",
          "1218:                         . $this->linkOrButton($explain_link, $_message) . ']';",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1235:                 $edit_link .= PMA_generate_common_url($url_params) . '#querybox';",
          "1236:                 $edit_link = ' ['",
          "1238:                         $edit_link, __('Edit'), array('onclick' => $onclick)",
          "1239:                     )",
          "1240:                     . ']';",
          "",
          "[Removed Lines]",
          "1237:                     . $this->PMA_linkOrButton(",
          "",
          "[Added Lines]",
          "1237:                     . $this->linkOrButton(",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1255:                 }",
          "1257:                 $php_link = 'import.php' . PMA_generate_common_url($php_params);",
          "1260:                 if (isset($GLOBALS['show_as_php'])) {",
          "1261:                     $runquery_link = 'import.php' . PMA_generate_common_url($url_params);",
          "1262:                     $php_link .= ' ['",
          "1264:                 }",
          "1265:             } else {",
          "1266:                 $php_link = '';",
          "",
          "[Removed Lines]",
          "1258:                 $php_link = ' [' . $this->PMA_linkOrButton($php_link, $_message) . ']';",
          "1263:                         . $this->PMA_linkOrButton($runquery_link, __('Submit Query')) . ']';",
          "",
          "[Added Lines]",
          "1258:                 $php_link = ' [' . $this->linkOrButton($php_link, $_message) . ']';",
          "1263:                         . $this->linkOrButton($runquery_link, __('Submit Query')) . ']';",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1273:             ) {",
          "1274:                 $refresh_link = 'import.php' . PMA_generate_common_url($url_params);",
          "1275:                 $refresh_link = ' ['",
          "1277:             } else {",
          "1278:                 $refresh_link = '';",
          "1279:             } //refresh",
          "",
          "[Removed Lines]",
          "1276:                     . $this->PMA_linkOrButton($refresh_link, __('Refresh')) . ']';",
          "",
          "[Added Lines]",
          "1276:                     . $this->linkOrButton($refresh_link, __('Refresh')) . ']';",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1292:                 $validate_link = 'import.php'",
          "1293:                     . PMA_generate_common_url($validate_params);",
          "1294:                 $validate_link = ' ['",
          "1296:             } else {",
          "1297:                 $validate_link = '';",
          "1298:             } //validator",
          "",
          "[Removed Lines]",
          "1295:                     . $this->PMA_linkOrButton($validate_link, $validate_message) . ']';",
          "",
          "[Added Lines]",
          "1295:                     . $this->linkOrButton($validate_link, $validate_message) . ']';",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1324:             if (! empty($refresh_link)) {",
          "1326:             }",
          "1331:                 $retval .= '<form action=\"sql.php\" method=\"post\">';",
          "1332:                 $retval .= PMA_generate_common_hidden_inputs(",
          "1333:                     $GLOBALS['db'], $GLOBALS['table']",
          "",
          "[Removed Lines]",
          "1325:                 $retval .= $this->PMA_getProfilingForm($sql_query);",
          "1330:             if (empty($refresh_link) || !$this->PMA_profilingSupported()) {",
          "",
          "[Added Lines]",
          "1325:                 $retval .= $this->getProfilingForm($sql_query);",
          "1330:             if (empty($refresh_link) || !$this->profilingSupported()) {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1368:         return $retval;",
          "",
          "[Removed Lines]",
          "1370:     } // end of the 'PMA_getMessage()' function",
          "",
          "[Added Lines]",
          "1370:     } // end of the 'getMessage()' function",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1381:     {",
          "",
          "[Removed Lines]",
          "1380:     public function PMA_profilingSupported()",
          "1382:         if (!$this->PMA_cacheExists('profiling_supported', true)) {",
          "",
          "[Added Lines]",
          "1380:     public function profilingSupported()",
          "1382:         if (!$this->cacheExists('profiling_supported', true)) {",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1387:                 && (PMA_MYSQL_INT_VERSION >= 50037)",
          "1388:                 && PMA_DBI_fetch_value(\"SHOW VARIABLES LIKE 'profiling'\")",
          "1389:             ) {",
          "1391:             } else {",
          "1393:             }",
          "1394:         }",
          "1397:     }",
          "",
          "[Removed Lines]",
          "1390:                 $this->PMA_cacheSet('profiling_supported', true, true);",
          "1392:                 $this->PMA_cacheSet('profiling_supported', false, true);",
          "1396:         return $this->PMA_cacheGet('profiling_supported', true);",
          "",
          "[Added Lines]",
          "1390:                 $this->cacheSet('profiling_supported', true, true);",
          "1392:                 $this->cacheSet('profiling_supported', false, true);",
          "1396:         return $this->cacheGet('profiling_supported', true);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1410:     {",
          "1411:         $retval = '';",
          "1414:             $retval .= '<form action=\"sql.php\" method=\"post\">' . \"\\n\";",
          "1415:             $retval .= PMA_generate_common_hidden_inputs(",
          "",
          "[Removed Lines]",
          "1409:     public function PMA_getProfilingForm($sql_query)",
          "1412:         if ($this->PMA_profilingSupported()) {",
          "",
          "[Added Lines]",
          "1409:     public function getProfilingForm($sql_query)",
          "1412:         if ($this->profilingSupported()) {",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1420:                 . htmlspecialchars($sql_query) . '\" />' . \"\\n\"",
          "1421:                 . '<input type=\"hidden\" name=\"profiling_form\" value=\"1\" />' . \"\\n\";",
          "1424:                 'profiling', __('Profiling'), isset($_SESSION['profiling']), true",
          "1425:             );",
          "1426:             $retval .= ' </form>' . \"\\n\";",
          "",
          "[Removed Lines]",
          "1423:             $retval .= $this->PMA_getCheckbox(",
          "",
          "[Added Lines]",
          "1423:             $retval .= $this->getCheckbox(",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1445:     {",
          "1446:         if ($value === null) {",
          "1447:             return null;",
          "",
          "[Removed Lines]",
          "1444:     public function PMA_formatByteDown($value, $limes = 6, $comma = 0)",
          "",
          "[Added Lines]",
          "1444:     public function formatByteDown($value, $limes = 6, $comma = 0)",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1464:             __('EiB')",
          "1465:         );",
          "1469:         $unit = $byteUnits[0];",
          "1471:         for ($d = 6, $ex = 15; $d >= 1; $d--, $ex-=3) {",
          "1475:                 $unit = $byteUnits[$d];",
          "1476:                 break 1;",
          "1477:             } // end if",
          "",
          "[Removed Lines]",
          "1467:         $dh   = $this->PMA_pow(10, $comma);",
          "1468:         $li   = $this->PMA_pow(10, $limes);",
          "1472:             if (isset($byteUnits[$d]) && ($value >= $li * $this->PMA_pow(10, $ex))) {",
          "1474:                 $value = round($value / ($this->PMA_pow(1024, $d) / $dh)) /$dh;",
          "",
          "[Added Lines]",
          "1467:         $dh   = $this->pow(10, $comma);",
          "1468:         $li   = $this->pow(10, $limes);",
          "1472:             if (isset($byteUnits[$d]) && ($value >= $li * $this->pow(10, $ex))) {",
          "1474:                 $value = round($value / ($this->pow(1024, $d) / $dh)) /$dh;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1485:         } else {",
          "1488:         }",
          "1490:         return array(trim($return_value), $unit);",
          "",
          "[Removed Lines]",
          "1484:             $return_value = $this->PMA_formatNumber($value, 5, $comma, true);",
          "1487:             $return_value = $this->PMA_formatNumber($value, 0);",
          "1491:     } // end of the 'PMA_formatByteDown' function",
          "",
          "[Added Lines]",
          "1484:             $return_value = $this->formatNumber($value, 5, $comma, true);",
          "1487:             $return_value = $this->formatNumber($value, 0);",
          "1491:     } // end of the 'formatByteDown' function",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1502:     {",
          "1503:         return str_replace(",
          "1504:             array(',', '.'),",
          "",
          "[Removed Lines]",
          "1501:     public function PMA_localizeNumber($value)",
          "",
          "[Added Lines]",
          "1501:     public function localizeNumber($value)",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1543:         $value, $digits_left = 3, $digits_right = 0,",
          "1544:         $only_down = false, $noTrailingZero = true",
          "1545:     ) {",
          "",
          "[Removed Lines]",
          "1542:     public function PMA_formatNumber(",
          "",
          "[Added Lines]",
          "1542:     public function formatNumber(",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1553:         if ($digits_left === 0) {",
          "1554:             $value = number_format($value, $digits_right);",
          "1555:             if (($originalValue != 0) && (floatval($value) == 0)) {",
          "1557:             }",
          "1560:         }",
          "",
          "[Removed Lines]",
          "1556:                 $value = ' <' . (1 / $this->PMA_pow(10, $digits_right));",
          "1559:             return $this->PMA_localizeNumber($value);",
          "",
          "[Added Lines]",
          "1556:                 $value = ' <' . (1 / $this->pow(10, $digits_right));",
          "1559:             return $this->localizeNumber($value);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1588:             $sign = '';",
          "1589:         }",
          "",
          "[Removed Lines]",
          "1591:         $dh = $this->PMA_pow(10, $digits_right);",
          "",
          "[Added Lines]",
          "1591:         $dh = $this->pow(10, $digits_right);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1604:         if ($digits_left > $cur_digits) {",
          "1605:             $d -= floor(($digits_left - $cur_digits)/3);",
          "1606:         }",
          "",
          "[Removed Lines]",
          "1603:         $cur_digits = floor(log10($value / $this->PMA_pow(1000, $d, 'pow'))+1);",
          "",
          "[Added Lines]",
          "1603:         $cur_digits = floor(log10($value / $this->pow(1000, $d, 'pow'))+1);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1609:             $d = 0;",
          "1610:         }",
          "1613:         $unit = $units[$d];",
          "1616:         if ($noTrailingZero) {",
          "1618:                 preg_replace('/(?<=\\d)(?=(\\d{3})+(?!\\d))/', ',', $value)",
          "1619:             );",
          "1620:         } else {",
          "1623:         }",
          "1625:         if ($originalValue != 0 && floatval($value) == 0) {",
          "1627:         }",
          "1629:         return $sign . $value . ' ' . $unit;",
          "",
          "[Removed Lines]",
          "1612:         $value = round($value / ($this->PMA_pow(1000, $d, 'pow') / $dh)) /$dh;",
          "1617:             $value = $this->PMA_localizeNumber(",
          "1622:             $value = $this->PMA_localizeNumber(number_format($value, $digits_right));",
          "1626:             return ' <' . (1 / $this->PMA_pow(10, $digits_right)) . ' ' . $unit;",
          "1630:     } // end of the 'PMA_formatNumber' function",
          "",
          "[Added Lines]",
          "1612:         $value = round($value / ($this->pow(1000, $d, 'pow') / $dh)) /$dh;",
          "1617:             $value = $this->localizeNumber(",
          "1622:             $value = $this->localizeNumber(number_format($value, $digits_right));",
          "1626:             return ' <' . (1 / $this->pow(10, $digits_right)) . ' ' . $unit;",
          "1630:     } // end of the 'formatNumber' function",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1641:     {",
          "1642:         $return_value = -1;",
          "1644:         if (preg_match('/^[0-9]+GB$/', $formatted_size)) {",
          "1646:         } elseif (preg_match('/^[0-9]+MB$/', $formatted_size)) {",
          "1648:         } elseif (preg_match('/^[0-9]+K$/', $formatted_size)) {",
          "1650:         }",
          "1651:         return $return_value;",
          "",
          "[Removed Lines]",
          "1640:     public function PMA_extractValueFromFormattedSize($formatted_size)",
          "1645:             $return_value = substr($formatted_size, 0, -2) * $this->PMA_pow(1024, 3);",
          "1647:             $return_value = substr($formatted_size, 0, -2) * $this->PMA_pow(1024, 2);",
          "1649:             $return_value = substr($formatted_size, 0, -1) * $this->PMA_pow(1024, 1);",
          "1652:     }// end of the 'PMA_extractValueFromFormattedSize' function",
          "",
          "[Added Lines]",
          "1640:     public function extractValueFromFormattedSize($formatted_size)",
          "1645:             $return_value = substr($formatted_size, 0, -2) * $this->pow(1024, 3);",
          "1647:             $return_value = substr($formatted_size, 0, -2) * $this->pow(1024, 2);",
          "1649:             $return_value = substr($formatted_size, 0, -1) * $this->pow(1024, 1);",
          "1652:     }// end of the 'extractValueFromFormattedSize' function",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1666:     {",
          "1667:         $month = array(",
          "",
          "[Removed Lines]",
          "1665:     public function PMA_localisedDate($timestamp = -1, $format = '')",
          "",
          "[Added Lines]",
          "1665:     public function localisedDate($timestamp = -1, $format = '')",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1726:         );",
          "1728:         return strftime($date, $timestamp);",
          "",
          "[Removed Lines]",
          "1729:     } // end of the 'PMA_localisedDate()' function",
          "",
          "[Added Lines]",
          "1729:     } // end of the 'localisedDate()' function",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1744:     {",
          "1746:         $defaults = array(",
          "",
          "[Removed Lines]",
          "1743:     public function PMA_generateHtmlTab($tab, $url_params = array())",
          "",
          "[Added Lines]",
          "1743:     public function generateHtmlTab($tab, $url_params = array())",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1809:         } elseif (empty($tab['text'])) {",
          "",
          "[Removed Lines]",
          "1807:             $tab['text'] = $this->PMA_getImage(htmlentities($tab['icon'])) . $tab['text'];",
          "",
          "[Added Lines]",
          "1807:             $tab['text'] = $this->getImage(htmlentities($tab['icon'])) . $tab['text'];",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1832:         $out .= '</li>';",
          "1833:         return $out;",
          "",
          "[Removed Lines]",
          "1834:     } // end of the 'PMA_generateHtmlTab()' function",
          "",
          "[Added Lines]",
          "1834:     } // end of the 'generateHtmlTab()' function",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1847:     {",
          "1848:         $tab_navigation = '<div id=\"' . htmlentities($menu_id)",
          "1849:             . 'container\" class=\"menucontainer\">'",
          "1850:             .'<ul id=\"' . htmlentities($menu_id) . '\">';",
          "1852:         foreach ($tabs as $tab) {",
          "1854:         }",
          "1856:         $tab_navigation .=",
          "",
          "[Removed Lines]",
          "1846:     public function PMA_generateHtmlTabs($tabs, $url_params, $menu_id = 'topmenu')",
          "1853:             $tab_navigation .= $this->PMA_generateHtmlTab($tab, $url_params);",
          "",
          "[Added Lines]",
          "1846:     public function generateHtmlTabs($tabs, $url_params, $menu_id = 'topmenu')",
          "1853:             $tab_navigation .= $this->generateHtmlTab($tab, $url_params);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1881:         $url, $message, $tag_params = array(),",
          "1882:         $new_form = true, $strip_img = false, $target = ''",
          "1883:     ) {",
          "",
          "[Removed Lines]",
          "1880:     public function PMA_linkOrButton(",
          "",
          "[Added Lines]",
          "1880:     public function linkOrButton(",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1929:         $in_suhosin_limits = true;",
          "1930:         if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit']) {",
          "1931:             if ($suhosin_get_MaxValueLength = ini_get('suhosin.get.max_value_length')) {",
          "1933:                 foreach ($query_parts as $query_pair) {",
          "1934:                     list($eachvar, $eachval) = explode('=', $query_pair);",
          "1935:                     if (strlen($eachval) > $suhosin_get_MaxValueLength) {",
          "",
          "[Removed Lines]",
          "1932:                 $query_parts = $this->PMA_splitURLQuery($url);",
          "",
          "[Added Lines]",
          "1932:                 $query_parts = $this->splitURLQuery($url);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1959:             }",
          "1961:             if (! isset($query_parts)) {",
          "1963:             }",
          "1964:             $url_parts   = parse_url($url);",
          "",
          "[Removed Lines]",
          "1962:                 $query_parts = $this->PMA_splitURLQuery($url);",
          "",
          "[Added Lines]",
          "1962:                 $query_parts = $this->splitURLQuery($url);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1998:         } // end if... else...",
          "2000:         return $ret;",
          "",
          "[Removed Lines]",
          "2001:     } // end of the 'PMA_linkOrButton()' function",
          "",
          "[Added Lines]",
          "2001:     } // end of the 'linkOrButton()' function",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2012:     {",
          "2014:         $separator = PMA_get_arg_separator();",
          "",
          "[Removed Lines]",
          "2011:     public function PMA_splitURLQuery($url)",
          "",
          "[Added Lines]",
          "2011:     public function splitURLQuery($url)",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2039:     {",
          "2040:         $days = floor($seconds / 86400);",
          "2041:         if ($days > 0) {",
          "",
          "[Removed Lines]",
          "2038:     public function PMA_timespanFormat($seconds)",
          "",
          "[Added Lines]",
          "2038:     public function timespanFormat($seconds)",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2078:     {",
          "2079:         $format_string = '';",
          "2080:         $charbuff = false;",
          "",
          "[Removed Lines]",
          "2077:     public function PMA_flipstring($string, $Separator = \"<br />\\n\")",
          "",
          "[Added Lines]",
          "2077:     public function flipstring($string, $Separator = \"<br />\\n\")",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2129:     {",
          "2130:         global $checked_special;",
          "",
          "[Removed Lines]",
          "2128:     public function PMA_checkParameters($params, $request = true)",
          "",
          "[Added Lines]",
          "2128:     public function checkParameters($params, $request = true)",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2146:                 $error_message .= $reported_script_name",
          "2147:                     . ': ' . __('Missing parameter:') . ' '",
          "2148:                     . $param",
          "2150:                     . '<br />';",
          "2151:                 $found_error = true;",
          "2152:             }",
          "",
          "[Removed Lines]",
          "2149:                     . $this->PMA_showDocu('faqmissingparameters')",
          "",
          "[Added Lines]",
          "2149:                     . $this->showDocu('faqmissingparameters')",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2174:         $force_unique = false",
          "2175:     ) {",
          "",
          "[Removed Lines]",
          "2173:     public function PMA_getUniqueCondition($handle, $fields_cnt, $fields_meta, $row,",
          "",
          "[Added Lines]",
          "2173:     public function getUniqueCondition($handle, $fields_cnt, $fields_meta, $row,",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2237:             if ($meta->type == 'real') {",
          "2240:             } else {",
          "2243:             } // end if... else...",
          "2244:             $condition = ' ' . $con_key . ' ';",
          "",
          "[Removed Lines]",
          "2238:                 $con_key = 'CONCAT(' . $this->PMA_backquote($meta->table) . '.'",
          "2239:                     . $this->PMA_backquote($meta->orgname) . ')';",
          "2241:                 $con_key = $this->PMA_backquote($meta->table) . '.'",
          "2242:                     . $this->PMA_backquote($meta->orgname);",
          "",
          "[Added Lines]",
          "2238:                 $con_key = 'CONCAT(' . $this->backquote($meta->table) . '.'",
          "2239:                     . $this->backquote($meta->orgname) . ')';",
          "2241:                 $con_key = $this->backquote($meta->table) . '.'",
          "2242:                     . $this->backquote($meta->orgname);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2272:                         $con_val = null;",
          "2273:                     }",
          "2276:                     && ! empty($row[$i])",
          "2277:                 ) {",
          "",
          "[Removed Lines]",
          "2275:                 } elseif (in_array($meta->type, $this->PMA_getGISDatatypes())",
          "",
          "[Added Lines]",
          "2275:                 } elseif (in_array($meta->type, $this->getGISDatatypes())",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2286:                 } elseif ($meta->type == 'bit') {",
          "2288:                     $con_val = \"= b'\"",
          "2291:                 } else {",
          "2293:                 }",
          "2294:             }",
          "",
          "[Removed Lines]",
          "2289:                         . $this->PMA_printableBitValue($row[$i], $meta->length) . \"'\";",
          "2292:                     $con_val = '= \\'' . $this->PMA_sqlAddSlashes($row[$i], false, true) . '\\'';",
          "",
          "[Added Lines]",
          "2289:                         . $this->printableBitValue($row[$i], $meta->length) . \"'\";",
          "2292:                     $con_val = '= \\'' . $this->sqlAddSlashes($row[$i], false, true) . '\\'';",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2352:         $button_name, $button_class, $image_name, $text, $image, $value = ''",
          "2353:     ) {",
          "",
          "[Removed Lines]",
          "2351:     public function PMA_getButtonOrImage(",
          "",
          "[Added Lines]",
          "2351:     public function getButtonOrImage(",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2368:             return '<button class=\"' . $button_class . '\" type=\"submit\"'",
          "2369:                 .' name=\"' . $button_name . '\" value=\"' . htmlspecialchars($value) . '\"'",
          "2370:                 .' title=\"' . htmlspecialchars($text) . '\">' . \"\\n\"",
          "2372:                 .'</button>' . \"\\n\";",
          "2373:         } else {",
          "2374:             return '<input type=\"image\" name=\"' . $image_name",
          "",
          "[Removed Lines]",
          "2371:                 . $this->PMA_getIcon($image, $text)",
          "",
          "[Added Lines]",
          "2371:                 . $this->getIcon($image, $text)",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2406:         $rows, $pageNow = 1, $nbTotalPage = 1, $showAll = 200, $sliceStart = 5,",
          "2407:         $sliceEnd = 5, $percent = 20, $range = 10, $prompt = ''",
          "2408:     ) {",
          "",
          "[Removed Lines]",
          "2405:     public function PMA_pageselector(",
          "",
          "[Added Lines]",
          "2405:     public function pageselector(",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2543:         $count, $pos, $_url_params, $script, $frame, $max_count",
          "2544:     ) {",
          "",
          "[Removed Lines]",
          "2542:     public function PMA_getListNavigator(",
          "",
          "[Added Lines]",
          "2542:     public function getListNavigator(",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2587:                 '\" method=\"post\" target=\"' . $frame . '\">' . \"\\n\";",
          "2589:             $list_navigator_html .= PMA_generate_common_hidden_inputs($_url_params);",
          "2591:                 $max_count,",
          "2592:                 floor(($pos + 1) / $max_count) + 1,",
          "2593:                 ceil($count / $max_count)",
          "",
          "[Removed Lines]",
          "2590:             $list_navigator_html .= $this->PMA_pageselector(",
          "",
          "[Added Lines]",
          "2590:             $list_navigator_html .= $this->pageselector(",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2651:     {",
          "2653:         if (substr($dir, -1) != '/') {",
          "",
          "[Removed Lines]",
          "2650:     public function PMA_userDir($dir)",
          "",
          "[Added Lines]",
          "2650:     public function userDir($dir)",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2669:     {",
          "2670:         if (! strlen($database)) {",
          "2671:             if (! strlen($GLOBALS['db'])) {",
          "",
          "[Removed Lines]",
          "2668:     public function PMA_getDbLink($database = null)",
          "",
          "[Added Lines]",
          "2668:     public function getDbLink($database = null)",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2673:             }",
          "2674:             $database = $GLOBALS['db'];",
          "2675:         } else {",
          "2677:         }",
          "2679:         return '<a href=\"' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?'",
          "",
          "[Removed Lines]",
          "2676:             $database = $this->PMA_unescapeMysqlWildcards($database);",
          "",
          "[Added Lines]",
          "2676:             $database = $this->unescapeMysqlWildcards($database);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2701:     {",
          "2702:         $ext_but_html = '';",
          "2703:         if (($component == 'mysql') && (PMA_MYSQL_INT_VERSION < $minimum_version)) {",
          "2705:                 sprintf(",
          "2706:                     __('The %s functionality is affected by a known bug, see %s'),",
          "2707:                     $functionality,",
          "",
          "[Removed Lines]",
          "2700:     public function PMA_getExternalBug($functionality, $component, $minimum_version, $bugref)",
          "2704:             $ext_but_html .= $this->PMA_showHint(",
          "",
          "[Added Lines]",
          "2700:     public function getExternalBug($functionality, $component, $minimum_version, $bugref)",
          "2704:             $ext_but_html .= $this->showHint(",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2727:     {",
          "2728:         return '<input type=\"checkbox\" name=\"' . $html_field_name . '\" id=\"'",
          "2729:             . $html_field_name . '\"' . ($checked ? ' checked=\"checked\"' : '')",
          "",
          "[Removed Lines]",
          "2726:     public function PMA_getCheckbox($html_field_name, $label, $checked, $onclick)",
          "",
          "[Added Lines]",
          "2726:     public function getCheckbox($html_field_name, $label, $checked, $onclick)",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2748:         $line_break = true, $escape_label = true, $class=''",
          "2749:     ) {",
          "",
          "[Removed Lines]",
          "2747:     public function PMA_getRadioFields($html_field_name, $choices, $checked_choice = '',",
          "",
          "[Added Lines]",
          "2747:     public function getRadioFields($html_field_name, $choices, $checked_choice = '',",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2805:     {",
          "2806:         $result = '<select name=\"' . htmlspecialchars($select_name) . '\" id=\"'",
          "2807:             . htmlspecialchars($id) . '\">';",
          "",
          "[Removed Lines]",
          "2804:     public function PMA_getDropdown($select_name, $choices, $active_choice, $id)",
          "",
          "[Added Lines]",
          "2804:     public function getDropdown($select_name, $choices, $active_choice, $id)",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2836:     {",
          "2837:         if ($GLOBALS['cfg']['InitialSlidersState'] == 'disabled') {",
          "2838:             return '<div id=\"' . $id . '\">';",
          "",
          "[Removed Lines]",
          "2835:     public function PMA_getDivForSliderEffect($id, $message)",
          "",
          "[Added Lines]",
          "2835:     public function getDivForSliderEffect($id, $message)",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2871:     {",
          "2873:         $link = \"$action&amp;\" . urlencode($select_name) . \"=\";",
          "",
          "[Removed Lines]",
          "2870:     public function PMA_toggleButton($action, $select_name, $options, $callback)",
          "",
          "[Added Lines]",
          "2870:     public function toggleButton($action, $select_name, $options, $callback)",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "2918:             . \"</div>\\n\"",
          "2919:             . \"<!-- TOGGLE END -->\";",
          "",
          "[Removed Lines]",
          "2921:     } // end PMA_toggleButton()",
          "",
          "[Added Lines]",
          "2921:     } // end toggleButton()",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "2930:     {",
          "2932:     }",
          "",
          "[Removed Lines]",
          "2929:     public function PMA_clearUserCache()",
          "2931:         $this->PMA_cacheUnset('is_superuser', true);",
          "",
          "[Added Lines]",
          "2929:     public function clearUserCache()",
          "2931:         $this->cacheUnset('is_superuser', true);",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "2944:     {",
          "2945:         if (true === $server) {",
          "2946:             $server = $GLOBALS['server'];",
          "",
          "[Removed Lines]",
          "2943:     public function PMA_cacheExists($var, $server = 0)",
          "",
          "[Added Lines]",
          "2943:     public function cacheExists($var, $server = 0)",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "2961:     {",
          "2962:         if (true === $server) {",
          "2963:             $server = $GLOBALS['server'];",
          "",
          "[Removed Lines]",
          "2960:     public function PMA_cacheGet($var, $server = 0)",
          "",
          "[Added Lines]",
          "2960:     public function cacheGet($var, $server = 0)",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "2983:     {",
          "2984:         if (true === $server) {",
          "2985:             $server = $GLOBALS['server'];",
          "",
          "[Removed Lines]",
          "2982:     public function PMA_cacheSet($var, $val = null, $server = 0)",
          "",
          "[Added Lines]",
          "2982:     public function cacheSet($var, $val = null, $server = 0)",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3000:     {",
          "3001:         if ($server === true) {",
          "3002:             $server = $GLOBALS['server'];",
          "",
          "[Removed Lines]",
          "2999:     public function PMA_cacheUnset($var, $server = 0)",
          "",
          "[Added Lines]",
          "2999:     public function cacheUnset($var, $server = 0)",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3019:     {",
          "3020:         $printable = '';",
          "3021:         for ($i = 0, $len_ceiled = ceil($length / 8); $i < $len_ceiled; $i++) {",
          "",
          "[Removed Lines]",
          "3018:     public function PMA_printableBitValue($value, $length)",
          "",
          "[Added Lines]",
          "3018:     public function printableBitValue($value, $length)",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3037:     {",
          "3038:         return preg_match('@[^[:print:]]@', $value);",
          "3039:     }",
          "",
          "[Removed Lines]",
          "3036:     public function PMA_containsNonPrintableAscii($value)",
          "",
          "[Added Lines]",
          "3036:     public function containsNonPrintableAscii($value)",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "3051:     {",
          "3052:         return strtr($bit_default_value, array(\"b\" => \"\", \"'\" => \"\"));",
          "3053:     }",
          "",
          "[Removed Lines]",
          "3050:     public function PMA_convertBitDefaultValue($bit_default_value)",
          "",
          "[Added Lines]",
          "3050:     public function convertBitDefaultValue($bit_default_value)",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "3065:     {",
          "3066:         $first_bracket_pos = strpos($columnspec, '(');",
          "3067:         if ($first_bracket_pos) {",
          "",
          "[Removed Lines]",
          "3064:     public function PMA_extractColumnSpec($columnspec)",
          "",
          "[Added Lines]",
          "3064:     public function extractColumnSpec($columnspec)",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "3226:     {",
          "3227:         $engine = strtoupper($engine);",
          "3228:         if (($engine == 'INNODB') || ($engine == 'PBXT')) {",
          "",
          "[Removed Lines]",
          "3225:     public function PMA_isForeignKeySupported($engine)",
          "",
          "[Added Lines]",
          "3225:     public function isForeignKeySupported($engine)",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "3244:     {",
          "3245:         $result = str_replace(\"\\x00\", '\\0', $content);",
          "3246:         $result = str_replace(\"\\x08\", '\\b', $result);",
          "",
          "[Removed Lines]",
          "3243:     public function PMA_replaceBinaryContents($content)",
          "",
          "[Added Lines]",
          "3243:     public function replaceBinaryContents($content)",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "3263:     {",
          "3265:         $hex = bin2hex($data);",
          "",
          "[Removed Lines]",
          "3262:     public function PMA_asWKT($data, $includeSRID = false)",
          "",
          "[Added Lines]",
          "3262:     public function asWKT($data, $includeSRID = false)",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "3294:     {",
          "3295:         $first_occurence = strpos($string, \"\\r\\n\");",
          "3296:         if ($first_occurence === 0) {",
          "",
          "[Removed Lines]",
          "3293:     public function PMA_duplicateFirstNewline($string)",
          "",
          "[Added Lines]",
          "3293:     public function duplicateFirstNewline($string)",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "3313:     {",
          "3314:         $mapping = array(",
          "",
          "[Removed Lines]",
          "3312:     public function PMA_getTitleForTarget($target)",
          "",
          "[Added Lines]",
          "3312:     public function getTitleForTarget($target)",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "3344:     {",
          "3346:         $vars['http_host'] = PMA_getenv('HTTP_HOST');",
          "",
          "[Removed Lines]",
          "3343:     public function PMA_expandUserString($string, $escape = null, $updates = array())",
          "",
          "[Added Lines]",
          "3343:     public function expandUserString($string, $escape = null, $updates = array())",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "3425:     {",
          "3427:         $block_html = '';",
          "",
          "[Removed Lines]",
          "3424:     public function PMA_getBrowseUploadFileBlock($max_upload_size)",
          "",
          "[Added Lines]",
          "3424:     public function getBrowseUploadFileBlock($max_upload_size)",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "3436:             . '<div id=\"upload_form_status\" style=\"display: none;\"></div>'",
          "3437:             . '<div id=\"upload_form_status_info\" style=\"display: none;\"></div>'",
          "3438:             . '<input type=\"file\" name=\"import_file\" id=\"input_import_file\" />'",
          "3443:         return $block_html;",
          "3444:     }",
          "",
          "[Removed Lines]",
          "3439:             . $this->PMA_getFormattedMaximumUploadSize($max_upload_size) . \"\\n\"",
          "3441:             . $this->PMA_generateHiddenMaxFileSize($max_upload_size) . \"\\n\";",
          "",
          "[Added Lines]",
          "3439:             . $this->getFormattedMaximumUploadSize($max_upload_size) . \"\\n\"",
          "3441:             . $this->generateHiddenMaxFileSize($max_upload_size) . \"\\n\";",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "3457:     {",
          "3459:         $block_html = '';",
          "",
          "[Removed Lines]",
          "3456:     public function PMA_getSelectUploadFileBlock($import_list, $uploaddir)",
          "",
          "[Added Lines]",
          "3456:     public function getSelectUploadFileBlock($import_list, $uploaddir)",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "3461:         $block_html .= '<label for=\"radio_local_import_file\">'",
          "3462:             . sprintf(",
          "3463:                 __(\"Select from the web server upload directory <b>%s</b>:\"),",
          "3465:             )",
          "3466:             . '</label>';",
          "",
          "[Removed Lines]",
          "3464:                 htmlspecialchars($this->PMA_userDir($uploaddir))",
          "",
          "[Added Lines]",
          "3464:                 htmlspecialchars($this->userDir($uploaddir))",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "3482:             : '';",
          "3484:         $files = PMA_getFileSelectOptions(",
          "3486:             $matcher,",
          "3487:             $active",
          "3488:         );",
          "",
          "[Removed Lines]",
          "3485:             $this->PMA_userDir($uploaddir),",
          "",
          "[Added Lines]",
          "3485:             $this->userDir($uploaddir),",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "3516:     {",
          "3517:         $titles = array();",
          "3537:         return $titles;",
          "3538:     }",
          "",
          "[Removed Lines]",
          "3515:     public function PMA_buildActionTitles()",
          "3519:         $titles['Browse']     = $this->PMA_getIcon('b_browse.png', __('Browse'));",
          "3520:         $titles['NoBrowse']   = $this->PMA_getIcon('bd_browse.png', __('Browse'));",
          "3521:         $titles['Search']     = $this->PMA_getIcon('b_select.png', __('Search'));",
          "3522:         $titles['NoSearch']   = $this->PMA_getIcon('bd_select.png', __('Search'));",
          "3523:         $titles['Insert']     = $this->PMA_getIcon('b_insrow.png', __('Insert'));",
          "3524:         $titles['NoInsert']   = $this->PMA_getIcon('bd_insrow.png', __('Insert'));",
          "3525:         $titles['Structure']  = $this->PMA_getIcon('b_props.png', __('Structure'));",
          "3526:         $titles['Drop']       = $this->PMA_getIcon('b_drop.png', __('Drop'));",
          "3527:         $titles['NoDrop']     = $this->PMA_getIcon('bd_drop.png', __('Drop'));",
          "3528:         $titles['Empty']      = $this->PMA_getIcon('b_empty.png', __('Empty'));",
          "3529:         $titles['NoEmpty']    = $this->PMA_getIcon('bd_empty.png', __('Empty'));",
          "3530:         $titles['Edit']       = $this->PMA_getIcon('b_edit.png', __('Edit'));",
          "3531:         $titles['NoEdit']     = $this->PMA_getIcon('bd_edit.png', __('Edit'));",
          "3532:         $titles['Export']     = $this->PMA_getIcon('b_export.png', __('Export'));",
          "3533:         $titles['NoExport']   = $this->PMA_getIcon('bd_export.png', __('Export'));",
          "3534:         $titles['Execute']    = $this->PMA_getIcon('b_nextpage.png', __('Execute'));",
          "3535:         $titles['NoExecute']  = $this->PMA_getIcon('bd_nextpage.png', __('Execute'));",
          "",
          "[Added Lines]",
          "3515:     public function buildActionTitles()",
          "3519:         $titles['Browse']     = $this->getIcon('b_browse.png', __('Browse'));",
          "3520:         $titles['NoBrowse']   = $this->getIcon('bd_browse.png', __('Browse'));",
          "3521:         $titles['Search']     = $this->getIcon('b_select.png', __('Search'));",
          "3522:         $titles['NoSearch']   = $this->getIcon('bd_select.png', __('Search'));",
          "3523:         $titles['Insert']     = $this->getIcon('b_insrow.png', __('Insert'));",
          "3524:         $titles['NoInsert']   = $this->getIcon('bd_insrow.png', __('Insert'));",
          "3525:         $titles['Structure']  = $this->getIcon('b_props.png', __('Structure'));",
          "3526:         $titles['Drop']       = $this->getIcon('b_drop.png', __('Drop'));",
          "3527:         $titles['NoDrop']     = $this->getIcon('bd_drop.png', __('Drop'));",
          "3528:         $titles['Empty']      = $this->getIcon('b_empty.png', __('Empty'));",
          "3529:         $titles['NoEmpty']    = $this->getIcon('bd_empty.png', __('Empty'));",
          "3530:         $titles['Edit']       = $this->getIcon('b_edit.png', __('Edit'));",
          "3531:         $titles['NoEdit']     = $this->getIcon('bd_edit.png', __('Edit'));",
          "3532:         $titles['Export']     = $this->getIcon('b_export.png', __('Export'));",
          "3533:         $titles['NoExport']   = $this->getIcon('bd_export.png', __('Export'));",
          "3534:         $titles['Execute']    = $this->getIcon('b_nextpage.png', __('Execute'));",
          "3535:         $titles['NoExecute']  = $this->getIcon('bd_nextpage.png', __('Execute'));",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "3553:     {",
          "3554:         if ($html) {",
          "",
          "[Removed Lines]",
          "3552:     public function PMA_getSupportedDatatypes($html = false, $selected = '')",
          "",
          "[Added Lines]",
          "3552:     public function getSupportedDatatypes($html = false, $selected = '')",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "3622:         }",
          "3624:         return $retval;",
          "",
          "[Removed Lines]",
          "3625:     } // end PMA_getSupportedDatatypes()",
          "",
          "[Added Lines]",
          "3625:     } // end getSupportedDatatypes()",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "3635:     {",
          "3636:         $no_support_types = array();",
          "3637:         return $no_support_types;",
          "",
          "[Removed Lines]",
          "3634:     public function PMA_unsupportedDatatypes()",
          "",
          "[Added Lines]",
          "3634:     public function unsupportedDatatypes()",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "3649:     {",
          "3650:         $gis_data_types = array(",
          "3651:             'geometry',",
          "",
          "[Removed Lines]",
          "3648:     public function PMA_getGISDatatypes($upper_case = false)",
          "",
          "[Added Lines]",
          "3648:     public function getGISDatatypes($upper_case = false)",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "3677:     {",
          "3678:         $gis_string = trim($gis_string);",
          "3679:         $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|'",
          "",
          "[Removed Lines]",
          "3676:     public function PMA_createGISData($gis_string)",
          "",
          "[Added Lines]",
          "3676:     public function createGISData($gis_string)",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "3706:     {",
          "3707:         $funcs = array();",
          "3708:         if ($display) {",
          "",
          "[Removed Lines]",
          "3705:     public function PMA_getGISFunctions($geom_type = null, $binary = true, $display = false)",
          "",
          "[Added Lines]",
          "3705:     public function getGISFunctions($geom_type = null, $binary = true, $display = false)",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "3818:     {",
          "3819:         global $cfg, $analyzed_sql, $data;",
          "",
          "[Removed Lines]",
          "3817:     public function PMA_getDefaultFunctionForField($field, $insert_mode)",
          "",
          "[Added Lines]",
          "3817:     public function getDefaultFunctionForField($field, $insert_mode)",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "3883:     {",
          "3885:         $dropdown_built = array();",
          "",
          "[Removed Lines]",
          "3882:     public function PMA_getFunctionsForField($field, $insert_mode)",
          "3884:         $default_function = $this->PMA_getDefaultFunctionForField($field, $insert_mode);",
          "",
          "[Added Lines]",
          "3882:     public function getFunctionsForField($field, $insert_mode)",
          "3884:         $default_function = $this->getDefaultFunctionForField($field, $insert_mode);",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "3920:         } // end for",
          "3922:         return $retval;",
          "",
          "[Removed Lines]",
          "3923:     } // end PMA_getFunctionsForField()",
          "",
          "[Added Lines]",
          "3923:     } // end getFunctionsForField()",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "3946:     {",
          "",
          "[Removed Lines]",
          "3945:     public function PMA_currentUserHasPrivilege($priv, $db = null, $tbl = null)",
          "",
          "[Added Lines]",
          "3945:     public function currentUserHasPrivilege($priv, $db = null, $tbl = null)",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "3986:                     'SCHEMA_PRIVILEGES',",
          "3987:                     $username,",
          "3988:                     $priv,",
          "3990:                 )",
          "3991:             );",
          "3992:             if ($schema_privileges) {",
          "",
          "[Removed Lines]",
          "3989:                     $this->PMA_sqlAddSlashes($db)",
          "",
          "[Added Lines]",
          "3989:                     $this->sqlAddSlashes($db)",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "4009:                     'TABLE_PRIVILEGES',",
          "4010:                     $username,",
          "4011:                     $priv,",
          "4014:                 )",
          "4015:             );",
          "4016:             if ($table_privileges) {",
          "",
          "[Removed Lines]",
          "4012:                     $this->PMA_sqlAddSlashes($db),",
          "4013:                     $this->PMA_sqlAddSlashes($tbl)",
          "",
          "[Added Lines]",
          "4012:                     $this->sqlAddSlashes($db),",
          "4013:                     $this->sqlAddSlashes($tbl)",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "4034:     {",
          "4035:         $server_type = 'MySQL';",
          "4036:         if (PMA_DRIZZLE) {",
          "",
          "[Removed Lines]",
          "4033:     public function PMA_getServerType()",
          "",
          "[Added Lines]",
          "4033:     public function getServerType()",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "4055:     {",
          "4056:         $start_and_length = explode(',', str_ireplace('LIMIT', '', $limit_clause));",
          "4057:         return array(",
          "",
          "[Removed Lines]",
          "4054:     public function PMA_analyzeLimitClause($limit_clause)",
          "",
          "[Added Lines]",
          "4054:     public function analyzeLimitClause($limit_clause)",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "4070:     {",
          "4071:         return '<p class=\"print_ignore\">'",
          "4072:             . '<input type=\"button\" class=\"button\" id=\"print\" value=\"'",
          "",
          "[Removed Lines]",
          "4069:     public function PMA_getButton()",
          "",
          "[Added Lines]",
          "4069:     public function getButton()",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "4087:     {",
          "4088:         $values_string = htmlentities($definition);",
          "",
          "[Removed Lines]",
          "4086:     public function PMA_parseEnumSetValues($definition)",
          "",
          "[Added Lines]",
          "4086:     public function parseEnumSetValues($definition)",
          "",
          "---------------"
        ]
      }
    }
  ]
}