{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "189d4e0906551429dd177af658b5ee37aac2dad3",
      "candidate_info": {
        "commit_hash": "189d4e0906551429dd177af658b5ee37aac2dad3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/189d4e0906551429dd177af658b5ee37aac2dad3",
        "files": [
          "test/ct_test.c"
        ],
        "message": "Construct SCT from base64 in ct_test\n\nThis gives better code coverage and is more representative of how a\nuser would likely construct an SCT (using the base64 returned by a CT log).\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1548)\n(cherry picked from commit f7a39a5a3f7f91e0d1ba0030323eef26bc8ccddf)",
        "before_after_code_files": [
          "test/ct_test.c||test/ct_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/ct_test.c||test/ct_test.c": [
          "File: test/ct_test.c -> test/ct_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "511: static int test_encode_tls_sct()",
          "512: {",
          "523:     SETUP_CT_TEST_FIXTURE();",
          "525:     STACK_OF(SCT) *sct_list = sk_SCT_new_null();",
          "543:     }",
          "546:     fixture.sct_list = sct_list;",
          "547:     fixture.sct_dir = ct_dir;",
          "548:     fixture.sct_text_file = \"tls1.sct\";",
          "",
          "[Removed Lines]",
          "513:     const unsigned char log_id[] = \"\\xDF\\x1C\\x2E\\xC1\\x15\\x00\\x94\\x52\\x47\\xA9\"",
          "514:             \"\\x61\\x68\\x32\\x5D\\xDC\\x5C\\x79\\x59\\xE8\\xF7\\xC6\\xD3\\x88\\xFC\\x00\\x2E\"",
          "515:             \"\\x0B\\xBD\\x3F\\x74\\xD7\\x64\";",
          "517:     const unsigned char signature[] = \"\\x45\\x02\\x20\\x48\\x2F\\x67\\x51\\xAF\\x35\"",
          "518:             \"\\xDB\\xA6\\x54\\x36\\xBE\\x1F\\xD6\\x64\\x0F\\x3D\\xBF\\x9A\\x41\\x42\\x94\\x95\"",
          "519:             \"\\x92\\x45\\x30\\x28\\x8F\\xA3\\xE5\\xE2\\x3E\\x06\\x02\\x21\\x00\\xE4\\xED\\xC0\"",
          "520:             \"\\xDB\\x3A\\xC5\\x72\\xB1\\xE2\\xF5\\xE8\\xAB\\x6A\\x68\\x06\\x53\\x98\\x7D\\xCF\"",
          "521:             \"\\x41\\x02\\x7D\\xFE\\xFF\\xA1\\x05\\x51\\x9D\\x89\\xED\\xBF\\x08\";",
          "526:     SCT *sct = SCT_new();",
          "527:     if (!SCT_set_version(sct, SCT_VERSION_V1)) {",
          "528:         fprintf(stderr, \"Failed to set SCT version\\n\");",
          "529:         return 1;",
          "530:     }",
          "531:     if (!SCT_set1_log_id(sct, log_id, 32)) {",
          "532:         fprintf(stderr, \"Failed to set SCT log ID\\n\");",
          "533:         return 1;",
          "534:     }",
          "535:     SCT_set_timestamp(sct, 1);",
          "536:     if (!SCT_set_signature_nid(sct, NID_ecdsa_with_SHA256)) {",
          "537:         fprintf(stderr, \"Failed to set SCT signature NID\\n\");",
          "538:         return 1;",
          "539:     }",
          "540:     if (!SCT_set1_signature(sct, signature, 71)) {",
          "541:         fprintf(stderr, \"Failed to set SCT signature\\n\");",
          "542:         return 1;",
          "544:     sk_SCT_push(sct_list, sct);",
          "",
          "[Added Lines]",
          "513:     const char log_id[] = \"3xwuwRUAlFJHqWFoMl3cXHlZ6PfG04j8AC4LvT9012Q=\";",
          "514:     const uint64_t timestamp = 1;",
          "515:     const char extensions[] = \"\";",
          "516:     const char signature[] = \"RQIgSC9nUa8126ZUNr4f1mQPPb+aQUKUlZJFMCiPo+XiPgY\"",
          "517:         \"CIQDk7cDbOsVyseL16KtqaAZTmH3PQQJ9/v+hBVGdie2/CA==\";",
          "522:     SCT *sct = SCT_new_from_base64(SCT_VERSION_V1, log_id,",
          "523:                                    CT_LOG_ENTRY_TYPE_X509, timestamp,",
          "524:                                    extensions, signature);",
          "526:     if (sct == NULL) {",
          "527:         fprintf(stderr, \"Failed to create SCT from base64-encoded test data\\n\");",
          "528:         return 0;",
          "531:     sk_SCT_push(sct_list, sct);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9c0fa9f5feb3b3687f34681d0f7618f496ce41f",
      "candidate_info": {
        "commit_hash": "e9c0fa9f5feb3b3687f34681d0f7618f496ce41f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e9c0fa9f5feb3b3687f34681d0f7618f496ce41f",
        "files": [
          "crypto/rand/randfile.c"
        ],
        "message": "fix undoes errors introduced by https://github.com/openssl/openssl/commit/fc6076ca272f74eb1364c29e6974ad5da5ef9777?diff=split#diff-1014acebaa2c13d44ca196b9a433ef2eR184\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\nCLA: trivial\n(cherry picked from commit 8bd62abe00b893573920a7a12769fb00bd8da234)",
        "before_after_code_files": [
          "crypto/rand/randfile.c||crypto/rand/randfile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rand/randfile.c||crypto/rand/randfile.c": [
          "File: crypto/rand/randfile.c -> crypto/rand/randfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:             return 1;",
          "210:         }",
          "212:     }",
          "213: #endif",
          "215: #if defined(O_CREAT) && !defined(OPENSSL_NO_POSIX_IO) && \\",
          "216:     !defined(OPENSSL_SYS_VMS) && !defined(OPENSSL_SYS_WINDOWS)",
          "",
          "[Removed Lines]",
          "211: # endif",
          "",
          "[Added Lines]",
          "213: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17f4d2598412780f60a849968dedabab79ec714d",
      "candidate_info": {
        "commit_hash": "17f4d2598412780f60a849968dedabab79ec714d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/17f4d2598412780f60a849968dedabab79ec714d",
        "files": [
          "crypto/asn1/p5_pbev2.c",
          "crypto/asn1/p5_scrypt.c"
        ],
        "message": "Clean one unused variable, plus an useless one.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1906)\n(cherry picked from commit 2191dc846a85ce82925cb06b4dd8649da7fc403c)",
        "before_after_code_files": [
          "crypto/asn1/p5_pbev2.c||crypto/asn1/p5_pbev2.c",
          "crypto/asn1/p5_scrypt.c||crypto/asn1/p5_scrypt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/p5_pbev2.c||crypto/asn1/p5_pbev2.c": [
          "File: crypto/asn1/p5_pbev2.c -> crypto/asn1/p5_pbev2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:                               unsigned char *salt, int saltlen,",
          "42:                               unsigned char *aiv, int prf_nid)",
          "43: {",
          "45:     int alg_nid, keylen;",
          "46:     EVP_CIPHER_CTX *ctx = NULL;",
          "47:     unsigned char iv[EVP_MAX_IV_LENGTH];",
          "48:     PBE2PARAM *pbe2 = NULL;",
          "51:     alg_nid = EVP_CIPHER_type(cipher);",
          "52:     if (alg_nid == NID_undef) {",
          "",
          "[Removed Lines]",
          "44:     X509_ALGOR *scheme = NULL, *kalg = NULL, *ret = NULL;",
          "49:     ASN1_OBJECT *obj;",
          "",
          "[Added Lines]",
          "44:     X509_ALGOR *scheme = NULL, *ret = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:                 ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER);",
          "55:         goto err;",
          "56:     }",
          "59:     if ((pbe2 = PBE2PARAM_new()) == NULL)",
          "60:         goto merr;",
          "63:     scheme = pbe2->encryption;",
          "65:     if ((scheme->parameter = ASN1_TYPE_new()) == NULL)",
          "66:         goto merr;",
          "",
          "[Removed Lines]",
          "57:     obj = OBJ_nid2obj(alg_nid);",
          "64:     scheme->algorithm = obj;",
          "",
          "[Added Lines]",
          "62:     scheme->algorithm = OBJ_nid2obj(alg_nid);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:     EVP_CIPHER_CTX_free(ctx);",
          "138:     PBE2PARAM_free(pbe2);",
          "141:     X509_ALGOR_free(ret);",
          "143:     return NULL;",
          "145: }",
          "147: X509_ALGOR *PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter,",
          "",
          "[Removed Lines]",
          "140:     X509_ALGOR_free(kalg);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/asn1/p5_scrypt.c||crypto/asn1/p5_scrypt.c": [
          "File: crypto/asn1/p5_scrypt.c -> crypto/asn1/p5_scrypt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:                                   unsigned char *aiv, uint64_t N, uint64_t r,",
          "51:                                   uint64_t p)",
          "52: {",
          "54:     int alg_nid;",
          "55:     size_t keylen = 0;",
          "56:     EVP_CIPHER_CTX *ctx = NULL;",
          "57:     unsigned char iv[EVP_MAX_IV_LENGTH];",
          "58:     PBE2PARAM *pbe2 = NULL;",
          "61:     if (!cipher) {",
          "62:         ASN1err(ASN1_F_PKCS5_PBE2_SET_SCRYPT, ERR_R_PASSED_NULL_PARAMETER);",
          "",
          "[Removed Lines]",
          "53:     X509_ALGOR *scheme = NULL, *kalg = NULL, *ret = NULL;",
          "59:     ASN1_OBJECT *obj;",
          "",
          "[Added Lines]",
          "53:     X509_ALGOR *scheme = NULL, *ret = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:                 ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER);",
          "76:         goto err;",
          "77:     }",
          "79:     pbe2 = PBE2PARAM_new();",
          "80:     if (pbe2 == NULL)",
          "81:         goto merr;",
          "",
          "[Removed Lines]",
          "78:     obj = OBJ_nid2obj(alg_nid);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:     scheme = pbe2->encryption;",
          "87:     scheme->parameter = ASN1_TYPE_new();",
          "88:     if (scheme->parameter == NULL)",
          "89:         goto merr;",
          "",
          "[Removed Lines]",
          "86:     scheme->algorithm = obj;",
          "",
          "[Added Lines]",
          "85:     scheme->algorithm = OBJ_nid2obj(alg_nid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:  err:",
          "151:     PBE2PARAM_free(pbe2);",
          "153:     X509_ALGOR_free(ret);",
          "154:     EVP_CIPHER_CTX_free(ctx);",
          "156:     return NULL;",
          "158: }",
          "160: static X509_ALGOR *pkcs5_scrypt_set(const unsigned char *salt, size_t saltlen,",
          "",
          "[Removed Lines]",
          "152:     X509_ALGOR_free(kalg);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:                                     uint64_t p)",
          "163: {",
          "164:     X509_ALGOR *keyfunc = NULL;",
          "168:     if (sparam == NULL)",
          "169:         goto merr;",
          "",
          "[Removed Lines]",
          "165:     SCRYPT_PARAMS *sparam = NULL;",
          "167:     sparam = SCRYPT_PARAMS_new();",
          "",
          "[Added Lines]",
          "162:     SCRYPT_PARAMS *sparam = SCRYPT_PARAMS_new();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b97324dbcb12e8b509d513ded9ba3f71c14547d8",
      "candidate_info": {
        "commit_hash": "b97324dbcb12e8b509d513ded9ba3f71c14547d8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b97324dbcb12e8b509d513ded9ba3f71c14547d8",
        "files": [
          "apps/enc.c"
        ],
        "message": "Limit the output of the enc -ciphers command\n\nto just the ciphers enc can\nprocess.  This means no AEAD ciphers and no XTS mode.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2876)\n(cherry picked from commit 777f1708a88f85569304caeca197c96ef912b236)",
        "before_after_code_files": [
          "apps/enc.c||apps/enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/enc.c||apps/enc.c": [
          "File: apps/enc.c -> apps/enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "563: {",
          "564:     BIO *bio = bio_;",
          "565:     static int n;",
          "567:     if (!islower((unsigned char)*name->name))",
          "568:         return;",
          "570:     BIO_printf(bio, \"-%-25s\", name->name);",
          "571:     if (++n == 3) {",
          "572:         BIO_printf(bio, \"\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566:     const EVP_CIPHER *cipher;",
          "572:     cipher = EVP_get_cipherbyname(name->name);",
          "573:     if (cipher == NULL ||",
          "574:             (EVP_CIPHER_flags(cipher) & EVP_CIPH_FLAG_AEAD_CIPHER) != 0 ||",
          "575:             EVP_CIPHER_mode(cipher) == EVP_CIPH_XTS_MODE)",
          "576:         return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c8e02af7e8d789d2b3dd6efe937b8c64784643f",
      "candidate_info": {
        "commit_hash": "6c8e02af7e8d789d2b3dd6efe937b8c64784643f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6c8e02af7e8d789d2b3dd6efe937b8c64784643f",
        "files": [
          "engines/afalg/e_afalg.c"
        ],
        "message": "e_afalg: Don't warn about kernel version when pedantic\n\nWhen built with --strict-warnings and the Linux kernel headers don't\nmatch the kernel version, the preprocessor warnings in\nengines/afalg/e_afalg.c cause compilation errors.  Use the macro\nPEDANTIC to avoid those warnings in that case.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2095)\n(cherry picked from commit 97043e46aa7083c787a1efd72ac31ca97ed41610)",
        "before_after_code_files": [
          "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c": [
          "File: engines/afalg/e_afalg.c -> engines/afalg/e_afalg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #define K_MIN2  0",
          "27: #if LINUX_VERSION_CODE <= KERNEL_VERSION(K_MAJ, K_MIN1, K_MIN2) || \\",
          "28:     !defined(AF_ALG)",
          "31: void engine_load_afalg_int(void);",
          "32: void engine_load_afalg_int(void)",
          "33: {",
          "",
          "[Removed Lines]",
          "29: # warning \"AFALG ENGINE requires Kernel Headers >= 4.1.0\"",
          "30: # warning \"Skipping Compilation of AFALG engine\"",
          "",
          "[Added Lines]",
          "29: # ifndef PEDANTIC",
          "30: #  warning \"AFALG ENGINE requires Kernel Headers >= 4.1.0\"",
          "31: #  warning \"Skipping Compilation of AFALG engine\"",
          "32: # endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}