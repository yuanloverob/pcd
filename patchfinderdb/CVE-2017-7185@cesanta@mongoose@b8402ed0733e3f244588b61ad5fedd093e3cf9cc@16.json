{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb04203b721f0f6eefb3b054396a115e05d71195",
      "candidate_info": {
        "commit_hash": "fb04203b721f0f6eefb3b054396a115e05d71195",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/fb04203b721f0f6eefb3b054396a115e05d71195",
        "files": [
          "mongoose.c"
        ],
        "message": "Fix eintr, zombie\n\nPUBLISHED_FROM=f6d7d0f9c6de8ffeeb3bcd8aace6c1434281ddf7",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3582:   (void) iface;",
          "3583:   DBG((\"%p using select()\", iface->mgr));",
          "3584: #if MG_ENABLE_BROADCAST",
          "3588: #endif",
          "3589: }",
          "",
          "[Removed Lines]",
          "3585:   do {",
          "3586:     mg_socketpair(iface->mgr->ctl, SOCK_DGRAM);",
          "3587:   } while (iface->mgr->ctl[0] == INVALID_SOCKET);",
          "",
          "[Added Lines]",
          "3585:   mg_socketpair(iface->mgr->ctl, SOCK_DGRAM);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3742: }",
          "3744: #if MG_ENABLE_BROADCAST",
          "3745: int mg_socketpair(sock_t sp[2], int sock_type) {",
          "3746:   union socket_address sa;",
          "3747:   sock_t sock;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3743: MG_INTERNAL void mg_socketpair_close(sock_t *sock) {",
          "3744:   while (1) {",
          "3745:     if (closesocket(*sock) == -1 && errno == EINTR)",
          "3746:       continue;",
          "3747:     break;",
          "3748:   }",
          "3750: }",
          "3752: MG_INTERNAL sock_t mg_socketpair_accept(sock_t sock,",
          "3753:                                      union socket_address *sa,",
          "3754:                                      socklen_t sa_len) {",
          "3755:   sock_t rc;",
          "3756:   while(1) {",
          "3757:     if ((rc = accept(sock, &sa->sa, &sa_len)) == INVALID_SOCKET && errno == EINTR)",
          "3758:         continue;",
          "3759:     break;",
          "3760:   }",
          "3761:   return rc;",
          "3762: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3765:              (getsockname(sp[0], &sa.sa, &len) != 0 ||",
          "3766:               connect(sock, &sa.sa, len) != 0)) {",
          "3767:   } else if ((sp[1] = (sock_type == SOCK_DGRAM ? sock",
          "3769:              INVALID_SOCKET) {",
          "3770:   } else {",
          "3771:     mg_set_close_on_exec(sp[0]);",
          "3772:     mg_set_close_on_exec(sp[1]);",
          "3774:     ret = 1;",
          "3775:   }",
          "3777:   if (!ret) {",
          "3782:   }",
          "3784:   return ret;",
          "",
          "[Removed Lines]",
          "3768:                                                : accept(sock, &sa.sa, &len))) ==",
          "3773:     if (sock_type == SOCK_STREAM) closesocket(sock);",
          "3778:     if (sp[0] != INVALID_SOCKET) closesocket(sp[0]);",
          "3779:     if (sp[1] != INVALID_SOCKET) closesocket(sp[1]);",
          "3780:     if (sock != INVALID_SOCKET) closesocket(sock);",
          "3781:     sock = sp[0] = sp[1] = INVALID_SOCKET;",
          "",
          "[Added Lines]",
          "3787:                                                : mg_socketpair_accept(sock, &sa, len))) ==",
          "3792:     if (sock_type == SOCK_STREAM) mg_socketpair_close(&sock);",
          "3797:     if (sp[0] != INVALID_SOCKET) mg_socketpair_close(&sp[0]);",
          "3798:     if (sp[1] != INVALID_SOCKET) mg_socketpair_close(&sp[1]);",
          "3799:     if (sock != INVALID_SOCKET) mg_socketpair_close(&sock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7932: #if MG_ENABLE_HTTP && MG_ENABLE_HTTP_CGI",
          "7934: #ifndef MG_MAX_CGI_ENVIR_VARS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7950: #ifndef _WIN32",
          "7951: #include <signal.h>",
          "7952: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8379:     prog = p + 1;",
          "8380:   }",
          "8391:   if (mg_start_process(opts->cgi_interpreter, prog, blk.buf, blk.vars, dir,",
          "8392:                        fds[1]) != 0) {",
          "",
          "[Removed Lines]",
          "8387:   do {",
          "8388:     mg_socketpair(fds, SOCK_STREAM);",
          "8389:   } while (fds[0] == INVALID_SOCKET);",
          "",
          "[Added Lines]",
          "8404:   if (!mg_socketpair(fds, SOCK_STREAM)) {",
          "8405:     nc->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "8406:     return;",
          "8407:   }",
          "8409: #ifndef _WIN32",
          "8410:   struct sigaction sa;",
          "8412:   sigemptyset(&sa.sa_mask);",
          "8413:   sa.sa_handler = SIG_IGN;",
          "8414:   sa.sa_flags = 0;",
          "8415:   sigaction(SIGCHLD, &sa, NULL);",
          "8416: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38efe632aeac2ba367f410adc0bda0f102018f0a",
      "candidate_info": {
        "commit_hash": "38efe632aeac2ba367f410adc0bda0f102018f0a",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/38efe632aeac2ba367f410adc0bda0f102018f0a",
        "files": [
          "mongoose.c"
        ],
        "message": "Squash warning\n\nPUBLISHED_FROM=72d80f8ed2c10866b44d56d8133c76b22bc105b0",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "275: #include <stdarg.h>",
          "276: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: #include <string.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "380e87ddfac09c59fddb48a300227c1f4ffe6ee0",
      "candidate_info": {
        "commit_hash": "380e87ddfac09c59fddb48a300227c1f4ffe6ee0",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/380e87ddfac09c59fddb48a300227c1f4ffe6ee0",
        "files": [
          "docs/c-api/net.h/struct_mg_connect_opts.md",
          "docs/c-api/net.h/struct_mg_mgr.md",
          "docs/c-api/net.h/struct_mg_mgr_init_opts.md",
          "docs/c-api/resolv.h/intro.md",
          "docs/c-api/resolv.h/mg_set_nameserver.md",
          "docs/c-api/resolv.h/struct_mg_resolve_async_opts.md",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Honor DNS server from DHCP\n\nPUBLISHED_FROM=10772301ef115c31ada3521ff4235c33a421b782",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2173:       m->ifaces[i]->vtable->init(m->ifaces[i]);",
          "2174:     }",
          "2175:   }",
          "2176:   DBG((\"==================================\"));",
          "2177:   DBG((\"init mgr=%p\", m));",
          "2178: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2176:   if (opts.nameserver != NULL) {",
          "2177:     m->nameserver = strdup(opts.nameserver);",
          "2178:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2230:     }",
          "2231:     MG_FREE(m->ifaces);",
          "2232:   }",
          "2233: }",
          "2235: time_t mg_mgr_poll(struct mg_mgr *m, int timeout_ms) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2237:   MG_FREE((char *) m->nameserver);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2742:     struct mg_resolve_async_opts o;",
          "2743:     memset(&o, 0, sizeof(o));",
          "2744:     o.dns_conn = &dns_conn;",
          "2745:     if (mg_resolve_async_opt(nc->mgr, host, MG_DNS_A_RECORD, resolve_cb, nc,",
          "2746:                              o) != 0) {",
          "2747:       MG_SET_PTRPTR(opts.error_string, \"cannot schedule DNS lookup\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2750:     o.nameserver = opts.nameserver;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10692: #define MG_DEFAULT_NAMESERVER \"8.8.8.8\"",
          "10693: #endif",
          "10699: struct mg_resolve_async_request {",
          "10700:   char name[1024];",
          "10701:   int query;",
          "",
          "[Removed Lines]",
          "10695: static const char *mg_default_dns_server = \"udp://\" MG_DEFAULT_NAMESERVER \":53\";",
          "10697: MG_INTERNAL char mg_dns_server[256];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "10755:         if (comma != NULL) {",
          "10757:         }",
          "10759:         ret = 0;",
          "10760:         RegCloseKey(hSub);",
          "10761:         break;",
          "",
          "[Removed Lines]",
          "10758:         snprintf(name, name_len, \"udp://%S:53\", value);",
          "",
          "[Added Lines]",
          "10761:         snprintf(name, name_len, \"%S\", value);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "10774:     for (ret = -1; fgets(line, sizeof(line), fp) != NULL;) {",
          "10775:       unsigned int a, b, c, d;",
          "10776:       if (sscanf(line, \"nameserver %u.%u.%u.%u\", &a, &b, &c, &d) == 4) {",
          "10778:         ret = 0;",
          "10779:         break;",
          "10780:       }",
          "",
          "[Removed Lines]",
          "10777:         snprintf(name, name_len, \"udp://%u.%u.%u.%u:53\", a, b, c, d);",
          "",
          "[Added Lines]",
          "10780:         snprintf(name, name_len, \"%u.%u.%u.%u\", a, b, c, d);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "10782:     (void) fclose(fp);",
          "10783:   }",
          "10784: #else",
          "10788:   return ret;",
          "",
          "[Removed Lines]",
          "10785:   snprintf(name, name_len, \"%s\", mg_default_dns_server);",
          "",
          "[Added Lines]",
          "10788:   snprintf(name, name_len, \"%s\", MG_DEFAULT_NAMESERVER);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10910:                          struct mg_resolve_async_opts opts) {",
          "10911:   struct mg_resolve_async_request *req;",
          "10912:   struct mg_connection *dns_nc;",
          "10915:   DBG((\"%s %d %p\", name, query, opts.dns_conn));",
          "",
          "[Removed Lines]",
          "10913:   const char *nameserver = opts.nameserver_url;",
          "",
          "[Added Lines]",
          "10916:   const char *nameserver = opts.nameserver;",
          "10917:   char dns_server_buff[17], nameserver_url[26];",
          "10919:   if (nameserver == NULL) {",
          "10920:     nameserver = mgr->nameserver;",
          "10921:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "10929:   req->timeout = opts.timeout ? opts.timeout : 5;",
          "10938:   if (nameserver == NULL) {",
          "10940:   }",
          "10943:   if (dns_nc == NULL) {",
          "10944:     free(req);",
          "10945:     return -1;",
          "",
          "[Removed Lines]",
          "10932:   if (nameserver == NULL && mg_dns_server[0] == '\\0' &&",
          "10933:       mg_get_ip_address_of_nameserver(mg_dns_server, sizeof(mg_dns_server)) ==",
          "10934:           -1) {",
          "10935:     strncpy(mg_dns_server, mg_default_dns_server, sizeof(mg_dns_server));",
          "10936:   }",
          "10939:     nameserver = mg_dns_server;",
          "10942:   dns_nc = mg_connect(mgr, nameserver, MG_CB(mg_resolve_async_eh, NULL));",
          "",
          "[Added Lines]",
          "10941:     if (mg_get_ip_address_of_nameserver(dns_server_buff,",
          "10942:                                         sizeof(dns_server_buff)) != -1) {",
          "10943:       nameserver = dns_server_buff;",
          "10944:     } else {",
          "10945:       nameserver = MG_DEFAULT_NAMESERVER;",
          "10946:     }",
          "10949:   snprintf(nameserver_url, sizeof(nameserver_url), \"udp://%s:53\", nameserver);",
          "10951:   dns_nc = mg_connect(mgr, nameserver_url, MG_CB(mg_resolve_async_eh, NULL));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "10952:   return 0;",
          "10953: }",
          "10956: #ifdef MG_MODULE_LINES",
          "10957: #line 1 \"mongoose/src/coap.c\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10964: void mg_set_nameserver(struct mg_mgr *mgr, const char *nameserver) {",
          "10965:   free((char *) mgr->nameserver);",
          "10966:   if (nameserver != NULL) {",
          "10967:     mgr->nameserver = strdup(nameserver);",
          "10968:   }",
          "10969: }",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3368:   const struct mg_iface_vtable *main_iface;",
          "3369:   int num_ifaces;",
          "3370:   const struct mg_iface_vtable **ifaces;",
          "3371: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3372:   const char *nameserver;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5611: struct mg_resolve_async_opts {",
          "",
          "[Removed Lines]",
          "5612:   const char *nameserver_url;",
          "",
          "[Added Lines]",
          "5615:   const char *nameserver;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5621: int mg_resolve_async(struct mg_mgr *mgr, const char *name, int query,",
          "5622:                      mg_resolve_callback_t cb, void *data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5628: void mg_set_nameserver(struct mg_mgr *mgr, const char *nameserver);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a35e5bd966031f0a76e264fdb387283c2cf46094",
      "candidate_info": {
        "commit_hash": "a35e5bd966031f0a76e264fdb387283c2cf46094",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/a35e5bd966031f0a76e264fdb387283c2cf46094",
        "files": [
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "A function to make a NUL-terminated copy of mg_str\n\nPUBLISHED_FROM=c1310b7d62f3ad6e2f24fea9f5229588c56b0bbe",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1389:   return r;",
          "1390: }",
          "1394:   struct mg_str r = {NULL, 0};",
          "1395:   if (s.len > 0 && s.p != NULL) {",
          "1399:       r.len = s.len;",
          "1400:     }",
          "1401:   }",
          "1402:   return r;",
          "1403: }",
          "1405: int mg_strcmp(const struct mg_str str1, const struct mg_str str2) WEAK;",
          "1406: int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {",
          "1407:   size_t i = 0;",
          "",
          "[Removed Lines]",
          "1392: struct mg_str mg_strdup(const struct mg_str s) WEAK;",
          "1393: struct mg_str mg_strdup(const struct mg_str s) {",
          "1396:     r.p = (char *) MG_MALLOC(s.len);",
          "1397:     if (r.p != NULL) {",
          "1398:       memcpy((char *) r.p, s.p, s.len);",
          "",
          "[Added Lines]",
          "1392: static struct mg_str mg_strdup_common(const struct mg_str s,",
          "1393:                                       int nul_terminate) {",
          "1396:     char *sc = (char *) MG_MALLOC(s.len + (nul_terminate ? 1 : 0));",
          "1397:     if (sc != NULL) {",
          "1398:       memcpy(sc, s.p, s.len);",
          "1399:       if (nul_terminate) sc[s.len] = '\\0';",
          "1400:       r.p = sc;",
          "1407: struct mg_str mg_strdup(const struct mg_str s) WEAK;",
          "1408: struct mg_str mg_strdup(const struct mg_str s) {",
          "1409:   return mg_strdup_common(s, 1 /* NUL-terminate */);",
          "1410: }",
          "1412: struct mg_str mg_strdup_nul(const struct mg_str s) WEAK;",
          "1413: struct mg_str mg_strdup_nul(const struct mg_str s) {",
          "1414:   return mg_strdup_common(s, 0 /* NUL-terminate */);",
          "1415: }",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1790: int mg_vcasecmp(const struct mg_str *str2, const char *str1);",
          "1792: struct mg_str mg_strdup(const struct mg_str s);",
          "1793: int mg_strcmp(const struct mg_str str1, const struct mg_str str2);",
          "1794: int mg_strncmp(const struct mg_str str1, const struct mg_str str2, size_t n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1799: struct mg_str mg_strdup_nul(const struct mg_str s);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5dd54a404dccd4f80811368a52d46996aed058d",
      "candidate_info": {
        "commit_hash": "b5dd54a404dccd4f80811368a52d46996aed058d",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/b5dd54a404dccd4f80811368a52d46996aed058d",
        "files": [
          "docs/c-api/coap.h/mg_coap_free_options.md",
          "docs/c-api/dns.h/mg_dns_encode_record.md",
          "docs/c-api/http_server.h/mg_http_send_redirect.md",
          "docs/c-api/http_server.h/mg_send_response_line.md",
          "docs/c-api/net.h/mg_bind_opt.md",
          "docs/c-api/net.h/mg_check_ip_acl.md",
          "docs/http/ssi.md",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Fix doc typos\n\nPUBLISHED_FROM=1bdacf793b35ebe70d0a3a9d64260dd2bd135c73",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h"
        ]
      }
    }
  ]
}