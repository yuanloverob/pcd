{
  "cve_id": "CVE-2017-0196",
  "cve_desc": "An information disclosure vulnerability in Microsoft scripting engine allows remote attackers to obtain sensitive information from process memory via a crafted web site, aka \"Microsoft Browser Information Disclosure Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
  "patch_info": {
    "commit_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/065b7978c40ded35c356ced6cd922a40156c9c46",
    "files": [
      "lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js"
    ],
    "message": "[CVE-2017-0196] Fixing an heap overread during slice.\n\nThe MissingItem check is happening on the array in a loop. It is possible that we get called into script and that mutates the array. So the Array's head is newly created with length.\nHowever the loop is still performing over the old length.\nFixed this by checking the length In IsMissingItem function.\nAdded a unittest.",
    "before_after_code_files": [
      "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
    ]
  },
  "patch_diff": {
    "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
      "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "478:     bool JavascriptArray::IsMissingItem(uint32 index)",
      "479:     {",
      "480:         bool isIntArray = false, isFloatArray = false;",
      "481:         this->GetArrayTypeAndConvert(&isIntArray, &isFloatArray);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:         if (this->length <= index)",
      "481:         {",
      "482:             return false;",
      "483:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5768:         if (!pArr->HasNoMissingValues())",
      "5769:         {",
      "5771:             {",
      "",
      "[Removed Lines]",
      "5770:             for (uint32 i = 0; i < newLen; i++)",
      "",
      "[Added Lines]",
      "5775:             for (uint32 i = 0; i < newLen && (i + start) < pArr->length; i++)",
      "",
      "---------------"
    ],
    "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js": [
      "File: test/Array/Array_TypeConfusion_bugs.js -> test/Array/Array_TypeConfusion_bugs.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "593:             assert.areEqual(101, arr.length);",
      "594:         }",
      "595:     },",
      "596: ];",
      "597: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "596:     {",
      "597:         name: \"Heap overread when splice mutates the array when executing slice\",",
      "598:         body: function ()",
      "599:         {",
      "600:             var getterCalled = false;",
      "601:             var a = [1, 2];",
      "602:             for (var i = 0; i < 100 * 1024; i++) {",
      "603:                 a.push(i);",
      "604:             }",
      "605:             delete a[0]; // Make a missing item",
      "606:             var protoObj = [11];",
      "607:             Object.defineProperty(protoObj, '0', {",
      "608:                 get : function () {",
      "609:                     getterCalled = true;",
      "610:                     Object.setPrototypeOf(a, Array.prototype);",
      "611:                     a.splice(0); // head seg is now length=0",
      "612:                     return 42;",
      "613:                 },",
      "614:                 configurable : true",
      "615:             });",
      "616:             Object.setPrototypeOf(a, protoObj);",
      "617:             var b = a.slice();",
      "618:             assert.isTrue(getterCalled);",
      "619:             assert.areEqual(0, a.length, \"Getter will splice the array to zero length\");",
      "620:             assert.areEqual(100 * 1024 + 2, b.length, \"Validating that slice will return the full array even though splice is deleting the whole array\");",
      "621:         }",
      "622:     },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b36412f18ae00d8c89c56f6aa21e854b188452c5",
      "candidate_info": {
        "commit_hash": "b36412f18ae00d8c89c56f6aa21e854b188452c5",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/b36412f18ae00d8c89c56f6aa21e854b188452c5",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h",
          "test/Array/CopyOnAccessArray_bugs.baseline",
          "test/Array/CopyOnAccessArray_bugs.js"
        ],
        "message": "[1.4>master] [MERGE #2456 @MikeHolman] add missing copy on access conversion for GetItemSetter\n\nMerge pull request #2456 from MikeHolman:copyonaccessreflectset",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h",
          "test/Array/CopyOnAccessArray_bugs.baseline||test/Array/CopyOnAccessArray_bugs.baseline",
          "test/Array/CopyOnAccessArray_bugs.js||test/Array/CopyOnAccessArray_bugs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2828:         return GetType()->GetLibrary()->GetUndefined();",
          "2829:     }",
          "2831:     Var JavascriptNativeFloatArray::DirectGetItem(uint32 index)",
          "2832:     {",
          "2833:         SparseArraySegment<double> *seg = (SparseArraySegment<double>*)this->GetLastUsedSegment();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2831:     DescriptorFlags JavascriptNativeIntArray::GetItemSetter(uint32 index, Var* setterValue, ScriptContext* requestContext)",
          "2832:     {",
          "2833: #if ENABLE_COPYONACCESS_ARRAY",
          "2834:         JavascriptLibrary::CheckAndConvertCopyOnAccessNativeIntArray<Var>(this);",
          "2835: #endif",
          "2836:         int32 value = 0;",
          "2837:         return this->DirectGetItemAt(index, &value) ? WritableData : None;",
          "2838:     }",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h": [
          "File: lib/Runtime/Library/JavascriptArray.h -> lib/Runtime/Library/JavascriptArray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "996:         virtual BOOL DirectGetVarItemAt(uint index, Var* outval, ScriptContext *scriptContext);",
          "997:         virtual BOOL DirectGetItemAtFull(uint index, Var* outVal);",
          "998:         virtual Var DirectGetItem(uint32 index);",
          "1005:         virtual BOOL SetItem(uint32 index, Var value, PropertyOperationFlags flags) override;",
          "1006:         virtual BOOL DeleteItem(uint32 index, PropertyOperationFlags flags) override;",
          "",
          "[Removed Lines]",
          "999:         virtual DescriptorFlags GetItemSetter(uint32 index, Var* setterValue, ScriptContext* requestContext) override",
          "1000:         {",
          "1001:             int32 value = 0;",
          "1002:             return this->DirectGetItemAt(index, &value) ? WritableData : None;",
          "1003:         }",
          "",
          "[Added Lines]",
          "999:         virtual DescriptorFlags GetItemSetter(uint32 index, Var* setterValue, ScriptContext* requestContext) override;",
          "",
          "---------------"
        ],
        "test/Array/CopyOnAccessArray_bugs.baseline||test/Array/CopyOnAccessArray_bugs.baseline": [
          "File: test/Array/CopyOnAccessArray_bugs.baseline -> test/Array/CopyOnAccessArray_bugs.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: PASSED",
          "32: PASSED",
          "34: PASSED",
          "",
          "[Removed Lines]",
          "35: Summary of tests: total executed: 13; passed: 13; failed: 0",
          "",
          "[Added Lines]",
          "36: PASSED",
          "37: Summary of tests: total executed: 14; passed: 14; failed: 0",
          "",
          "---------------"
        ],
        "test/Array/CopyOnAccessArray_bugs.js||test/Array/CopyOnAccessArray_bugs.js": [
          "File: test/Array/CopyOnAccessArray_bugs.js -> test/Array/CopyOnAccessArray_bugs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:             assert.areEqual(b.length, 0, \"Setting length property to 0\");",
          "129:         }",
          "130:     },",
          "131:     {",
          "132:         name: \"Array.of\",",
          "133:         body: function ()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     {",
          "132:         name: \"Reflect.set\",",
          "133:         body: function ()",
          "134:         {",
          "135:             assert.isTrue(Reflect.set([1950, 1960, 1970, 1980, 1990], \"0\", 1), \"Should be able to set property on int array\");",
          "136:             assert.isTrue(Reflect.set([1950, 1960.1, 1970, 1980, 1990], \"0\", 1), \"Should be able to set property on float array\");",
          "137:         }",
          "138:     },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82b961167fc32f749b5cff4913f5d3e3ee674732",
      "candidate_info": {
        "commit_hash": "82b961167fc32f749b5cff4913f5d3e3ee674732",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/82b961167fc32f749b5cff4913f5d3e3ee674732",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptString.cpp",
          "test/es7/arraybuffer_constructor.js",
          "test/es7/arraybuffer_transfer.js",
          "test/es7/rlexe.xml"
        ],
        "message": "Fix build break",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptString.cpp||lib/Runtime/Library/JavascriptString.cpp",
          "test/es7/arraybuffer_constructor.js||test/es7/arraybuffer_constructor.js",
          "test/es7/arraybuffer_transfer.js||test/es7/arraybuffer_transfer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3137:                 JavascriptNativeIntArray *pIntItemArray = JavascriptOperators::TryFromVar<JavascriptNativeIntArray>(aItem);",
          "3138:                 if (pIntItemArray)",
          "3139:                 {",
          "3141:                     idxDest = idxDest + pIntItemArray->length;",
          "3142:                 }",
          "3143:                 else",
          "",
          "[Removed Lines]",
          "3140:                     JS_REENTRANT_NO_MUTATE(jsReentLock, CopyNativeIntArrayElementsToVar(pDestArray, BigIndex(idxDest).GetSmallIndex(), pItemArray));",
          "",
          "[Added Lines]",
          "3140:                     JS_REENTRANT_NO_MUTATE(jsReentLock, CopyNativeIntArrayElementsToVar(pDestArray, BigIndex(idxDest).GetSmallIndex(), pIntItemArray));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3145:                     JavascriptNativeFloatArray *pFloatItemArray = JavascriptOperators::TryFromVar<JavascriptNativeFloatArray>(aItem);",
          "3146:                     if (pFloatItemArray)",
          "3147:                     {",
          "3149:                         idxDest = idxDest + pFloatItemArray->length;",
          "3150:                     }",
          "3151:                     else",
          "",
          "[Removed Lines]",
          "3148:                         JS_REENTRANT_NO_MUTATE(jsReentLock, CopyNativeFloatArrayElementsToVar(pDestArray, BigIndex(idxDest).GetSmallIndex(), pItemArray));",
          "",
          "[Added Lines]",
          "3148:                         JS_REENTRANT_NO_MUTATE(jsReentLock, CopyNativeFloatArrayElementsToVar(pDestArray, BigIndex(idxDest).GetSmallIndex(), pFloatItemArray));",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptString.cpp||lib/Runtime/Library/JavascriptString.cpp": [
          "File: lib/Runtime/Library/JavascriptString.cpp -> lib/Runtime/Library/JavascriptString.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3340:         using namespace PlatformAgnostic::UnicodeText;",
          "3341:         JavascriptString * resultString = nullptr;",
          "3342:         ENTER_PINNED_SCOPE(JavascriptString, pThis);",
          "3345:         if (!pThis)",
          "3346:         {",
          "",
          "[Removed Lines]",
          "3343:         JavascriptString * pThis = JavascriptOperators::TryFromVar<JavascriptString>(thisObj);",
          "",
          "[Added Lines]",
          "3343:         pThis = JavascriptOperators::TryFromVar<JavascriptString>(thisObj);",
          "",
          "---------------"
        ],
        "test/es7/arraybuffer_constructor.js||test/es7/arraybuffer_constructor.js": [
          "File: test/es7/arraybuffer_constructor.js -> test/es7/arraybuffer_constructor.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: function assertEquals(expected, actual) {",
          "7:     if (expected != actual) {",
          "8:         throw `Expected ${expected}, received ${actual}`;",
          "9:     }",
          "10: }",
          "12: function arrayBufferAlloc() {",
          "14:     const UNDER_1GB = 0x3FFF0000;",
          "15:     let buffers = [];",
          "16:     const n = 10;",
          "18:     for (let i = 0; i < n; i++) {",
          "19:         try {",
          "20:             const b = new ArrayBuffer(UNDER_1GB);",
          "21:             buffers.push(b);",
          "22:         } catch (e) {",
          "23:             return e;",
          "24:         }",
          "25:     }",
          "27:     return new Error('OOM Expected');",
          "28: }",
          "30: let {name, message } = arrayBufferAlloc();",
          "31: assertEquals(\"Invalid function argument\", message); //message check comes first to render test failures more intuitive",
          "32: assertEquals(\"RangeError\", name);",
          "33: print (\"PASSED\");",
          "",
          "---------------"
        ],
        "test/es7/arraybuffer_transfer.js||test/es7/arraybuffer_transfer.js": [
          "File: test/es7/arraybuffer_transfer.js -> test/es7/arraybuffer_transfer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: function assertEquals(expected, actual) {",
          "7:     if (expected != actual) {",
          "8:         throw `Expected ${expected}, received ${actual}`;",
          "9:     }",
          "10: }",
          "12: function arrayBufferAllocAndTransfer(initSize) {",
          "14:     const UNDER_1GB = 0x3FFF0000;",
          "15:     let buffers = [];",
          "16:     const n = 10;",
          "18:     for (let i = 0; i < n; i++) {",
          "19:         try {",
          "20:             const b = new Uint8Array(initSize);",
          "21:             ArrayBuffer.transfer(b.buffer, UNDER_1GB);",
          "22:             buffers.push(b);",
          "23:         } catch (e) {",
          "24:             return e;",
          "25:         }",
          "26:     }",
          "28:     return new Error('OOM Expected');",
          "29: }",
          "31: assertEquals(1, WScript.Arguments.length);",
          "32: const INITIAL_SIZE = parseInt(WScript.Arguments[0]);",
          "34: let {name, message } = arrayBufferAllocAndTransfer(INITIAL_SIZE);",
          "35: assertEquals(\"Out of memory\", message); //message check comes first to render test failures more intuitive",
          "36: assertEquals(\"Error\", name);",
          "37: print (\"PASSED\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "320547aabee3866c01c1cf9139eb1b264e3b9ad6",
      "candidate_info": {
        "commit_hash": "320547aabee3866c01c1cf9139eb1b264e3b9ad6",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/320547aabee3866c01c1cf9139eb1b264e3b9ad6",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h",
          "lib/Runtime/Library/JavascriptArray.inl"
        ],
        "message": "[CVE-2017-0228] Reallocate the last segment of a sparse array as a non-leaf, if necessary, before attempting to reverse the segment linked list",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h",
          "lib/Runtime/Library/JavascriptArray.inl||lib/Runtime/Library/JavascriptArray.inl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5254:         if (hasInlineSegment)",
          "5255:         {",
          "5266:         }",
          "5267:     }",
          "",
          "[Removed Lines]",
          "5256:             SparseArraySegmentBase* headSegBase = array->head;",
          "5257:             SparseArraySegment<T>* headSeg = (SparseArraySegment<T>*)headSegBase;",
          "5259:             AnalysisAssert(headSeg);",
          "5260:             SparseArraySegment<T>* newHeadSeg = SparseArraySegment<T>::template AllocateSegmentImpl<false>(recycler,",
          "5261:                 headSeg->left, headSeg->length, headSeg->size, headSeg->next);",
          "5263:             newHeadSeg = SparseArraySegment<T>::CopySegment(recycler, newHeadSeg, headSeg->left, headSeg, headSeg->left, headSeg->length);",
          "5264:             newHeadSeg->next = headSeg->next;",
          "5265:             array->head = newHeadSeg;",
          "",
          "[Added Lines]",
          "5256:             SparseArraySegment<T>* newHeadSeg = array->ReallocNonLeafSegment((SparseArraySegment<T>*)PointerValue(array->head), array->head->next);",
          "5257:             array->head = newHeadSeg;",
          "5258:         }",
          "5259:     }",
          "5261:     template <typename T>",
          "5262:     void JavascriptArray::ReallocateNonLeafLastSegmentIfLeaf(JavascriptArray * arr, Recycler * recycler)",
          "5263:     {",
          "5264:         Assert(arr->head && arr->head->next); // Doesn't make sense to reallocate a leaf last segment as a non-leaf if its not going to point to any other segments.",
          "5267:         SparseArraySegmentBase *lastSeg = nullptr;",
          "5268:         SparseArraySegmentBase *seg = arr->head;",
          "5269:         while (seg)",
          "5270:         {",
          "5271:             lastSeg = seg;",
          "5272:             seg = seg->next;",
          "5273:         }",
          "5275:         if (SparseArraySegmentBase::IsLeafSegment(lastSeg, recycler))",
          "5276:         {",
          "5277:             arr->ReallocNonLeafSegment((SparseArraySegment<T>*)lastSeg, lastSeg->next, true /*forceNonLeaf*/);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5369:             bool isIntArray = false;",
          "5370:             bool isFloatArray = false;",
          "5372:             if (JavascriptNativeIntArray::Is(pArr))",
          "5373:             {",
          "5374:                 isIntArray = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5384:             pArr->ClearSegmentMap(); // Just dump the segment map on reverse",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5386:                 if (isIntArray)",
          "5387:                 {",
          "5388:                     CopyHeadIfInlinedHeadSegment<int32>(pArr, recycler);",
          "5389:                 }",
          "5390:                 else if (isFloatArray)",
          "5391:                 {",
          "5392:                     CopyHeadIfInlinedHeadSegment<double>(pArr, recycler);",
          "5393:                 }",
          "5394:                 else",
          "5395:                 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5403:                     ReallocateNonLeafLastSegmentIfLeaf<int32>(pArr, recycler);",
          "5408:                     ReallocateNonLeafLastSegmentIfLeaf<double>(pArr, recycler);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5437:             }",
          "5439:             pArr->head = prevSeg;",
          "5444:             if (isIntArray)",
          "5445:             {",
          "5450:                 pArr->EnsureHeadStartsFromZero<int32>(recycler);",
          "5451:             }",
          "5452:             else if (isFloatArray)",
          "5453:             {",
          "5458:                 pArr->EnsureHeadStartsFromZero<double>(recycler);",
          "5459:             }",
          "5460:             else",
          "",
          "[Removed Lines]",
          "5442:             pArr->ClearSegmentMap();",
          "5446:                 if (pArr->head && pArr->head->next && SparseArraySegmentBase::IsLeafSegment(pArr->head, recycler))",
          "5447:                 {",
          "5448:                     pArr->ReallocNonLeafSegment(SparseArraySegment<int32>::From(pArr->head), pArr->head->next);",
          "5449:                 }",
          "5454:                 if (pArr->head && pArr->head->next && SparseArraySegmentBase::IsLeafSegment(pArr->head, recycler))",
          "5455:                 {",
          "5456:                     pArr->ReallocNonLeafSegment(SparseArraySegment<double>::From(pArr->head), pArr->head->next);",
          "5457:                 }",
          "",
          "[Added Lines]",
          "5456:             pArr->InvalidateLastUsedSegment(); // lastUsedSegment might be 0-length and discarded above",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5462:                 pArr->EnsureHeadStartsFromZero<Var>(recycler);",
          "5463:             }",
          "5467: #ifdef VALIDATE_ARRAY",
          "5468:             pArr->ValidateArray();",
          "5469: #endif",
          "",
          "[Removed Lines]",
          "5465:             pArr->InvalidateLastUsedSegment(); // lastUsedSegment might be 0-length and discarded above",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h": [
          "File: lib/Runtime/Library/JavascriptArray.h -> lib/Runtime/Library/JavascriptArray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:         JavascriptArray(JavascriptArray * instance, bool boxHead);",
          "419:         template<typename T> inline void LinkSegments(SparseArraySegment<T>* prev, SparseArraySegment<T>* current);",
          "421:         void TryAddToSegmentMap(Recycler* recycler, SparseArraySegmentBase* seg);",
          "423:     private:",
          "",
          "[Removed Lines]",
          "420:         template<typename T> inline SparseArraySegment<T>* ReallocNonLeafSegment(SparseArraySegment<T>* seg, SparseArraySegmentBase* nextSeg);",
          "",
          "[Added Lines]",
          "420:         template<typename T> inline SparseArraySegment<T>* ReallocNonLeafSegment(SparseArraySegment<T>* seg, SparseArraySegmentBase* nextSeg, bool forceNonLeaf = false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "576:         template<typename T>",
          "577:         static void CopyHeadIfInlinedHeadSegment(JavascriptArray *array, Recycler *recycler);",
          "579:         template<typename T>",
          "580:         static void ArraySpliceHelper(JavascriptArray* pNewArr, JavascriptArray* pArr, uint32 start, uint32 deleteLen,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:         template<typename T>",
          "579:         static void ReallocateNonLeafLastSegmentIfLeaf(JavascriptArray * arr, Recycler * recycler);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.inl||lib/Runtime/Library/JavascriptArray.inl": [
          "File: lib/Runtime/Library/JavascriptArray.inl -> lib/Runtime/Library/JavascriptArray.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     }",
          "97:     template<typename T>",
          "99:     {",
          "101:         SparseArraySegmentBase *prior = nullptr;",
          "",
          "[Removed Lines]",
          "98:     inline SparseArraySegment<T>* JavascriptArray::ReallocNonLeafSegment(SparseArraySegment<T> *seg, SparseArraySegmentBase* nextSeg)",
          "",
          "[Added Lines]",
          "98:     inline SparseArraySegment<T>* JavascriptArray::ReallocNonLeafSegment(SparseArraySegment<T> *seg, SparseArraySegmentBase* nextSeg, bool forceNonLeaf)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:                 Assert(prior->next);",
          "107:             }",
          "108:         }",
          "109:         Recycler *recycler = this->GetScriptContext()->GetRecycler();",
          "111:         CopyArray(newSeg->elements, seg->length, seg->elements, seg->length);",
          "113:         LinkSegmentsCommon(prior, newSeg);",
          "",
          "[Removed Lines]",
          "110:         SparseArraySegment<T> *newSeg = SparseArraySegment<T>::AllocateSegment(recycler, seg->left, seg->length, nextSeg);",
          "",
          "[Added Lines]",
          "109:         SparseArraySegment<T> *newSeg = nullptr;",
          "111:         if (forceNonLeaf)",
          "112:         {",
          "113:             newSeg = SparseArraySegment<T>::AllocateSegmentImpl<false /*isLeaf*/>(recycler, seg->left, seg->length, nextSeg);",
          "114:         }",
          "115:         else",
          "116:         {",
          "117:             newSeg = SparseArraySegment<T>::AllocateSegment(recycler, seg->left, seg->length, nextSeg);",
          "118:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2dfbbb8b5507dc8da52a6ce02abeceea614d4ed1",
      "candidate_info": {
        "commit_hash": "2dfbbb8b5507dc8da52a6ce02abeceea614d4ed1",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/2dfbbb8b5507dc8da52a6ce02abeceea614d4ed1",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp"
        ],
        "message": "better optimization for typed arrays",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9057:         Assert(args.Info.Count > 0);",
          "9059:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "9060:         int64 fromVal = 0;",
          "9061:         int64 toVal = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9059:         bool isTypedArrayEntryPoint = typedArrayBase != nullptr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9097:         Assert(count > 0);",
          "9099:         int direction;",
          "9101:         if (fromVal < toVal && toVal < (fromVal + count))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9103:         if (isTypedArrayEntryPoint)",
          "9104:         {",
          "9105:             Assert(typedArrayBase);",
          "9106:             Assert(length == typedArrayBase->GetLength());",
          "9108:             uint32 bytesPerElement = typedArrayBase->GetBytesPerElement();",
          "9109:             byte *buffer = typedArrayBase->GetByteBuffer();",
          "9110:             size_t fromByteIndex = static_cast<size_t>(fromVal) * bytesPerElement;",
          "9111:             size_t toByteIndex = static_cast<size_t>(toVal) * bytesPerElement;",
          "9112:             size_t byteCount = static_cast<size_t>(count) * bytesPerElement;",
          "9114:             Assert(fromByteIndex + byteCount <= typedArrayBase->GetByteLength());",
          "9115:             Assert(toByteIndex + byteCount <= typedArrayBase->GetByteLength());",
          "9117:             memmove(&buffer[toByteIndex], &buffer[fromByteIndex], byteCount);",
          "9119:             return obj;",
          "9120:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9152:             uint32 fromIndex = static_cast<uint32>(fromVal);",
          "9153:             uint32 toIndex = static_cast<uint32>(toVal);",
          "9172:             {",
          "9174:                 {",
          "9177:                     {",
          "9196:                         {",
          "9201:                         }",
          "9202:                     }",
          "9203:                     else",
          "9204:                     {",
          "9206:                     }",
          "9211:                 }",
          "9212:             }",
          "9213:         }",
          "",
          "[Removed Lines]",
          "9155:             if (typedArrayBase && length <= typedArrayBase->GetLength())",
          "9156:             {",
          "9160:                 while (count > 0)",
          "9161:                 {",
          "9162:                     Var val = typedArrayBase->DirectGetItem(fromIndex);",
          "9164:                     JS_REENTRANT(jsReentLock, typedArrayBase->DirectSetItem(toIndex, val));",
          "9166:                     fromIndex += direction;",
          "9167:                     toIndex += direction;",
          "9168:                     count--;",
          "9169:                 }",
          "9170:             }",
          "9171:             else",
          "9173:                 while (count > 0)",
          "9175:                     JS_REENTRANT(jsReentLock, BOOL hasItem = JavascriptOperators::HasItem(obj, fromIndex));",
          "9176:                     if (hasItem)",
          "9178:                         if (typedArrayBase)",
          "9179:                         {",
          "9180:                             Var val = typedArrayBase->DirectGetItem(fromIndex);",
          "9182:                             JS_REENTRANT(jsReentLock, typedArrayBase->DirectSetItem(toIndex, val));",
          "9183:                         }",
          "9184:                         else if (pArr)",
          "9185:                         {",
          "9186:                             JS_REENTRANT(jsReentLock, Var val = pArr->DirectGetItem(fromIndex));",
          "9187:                             pArr->SetItem(toIndex, val, Js::PropertyOperation_ThrowIfNotExtensible);",
          "9189:                             if (!JavascriptArray::Is(obj))",
          "9190:                             {",
          "9191:                                 AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9192:                                 pArr = nullptr;",
          "9193:                             }",
          "9194:                         }",
          "9195:                         else",
          "9197:                             Var val = nullptr;",
          "9198:                             JS_REENTRANT(jsReentLock,",
          "9199:                                 val = JavascriptOperators::OP_GetElementI_UInt32(obj, fromIndex, scriptContext),",
          "9200:                                 JavascriptOperators::OP_SetElementI_UInt32(obj, toIndex, val, scriptContext, PropertyOperation_ThrowIfNotExtensible));",
          "9205:                         JS_REENTRANT(jsReentLock, obj->DeleteItem(toIndex, PropertyOperation_ThrowOnDeleteIfNotConfig));",
          "9208:                     fromIndex += direction;",
          "9209:                     toIndex += direction;",
          "9210:                     count--;",
          "",
          "[Added Lines]",
          "9178:             while (count > 0)",
          "9180:                 JS_REENTRANT(jsReentLock, BOOL hasItem = JavascriptOperators::HasItem(obj, fromIndex));",
          "9181:                 if (hasItem)",
          "9183:                     if (typedArrayBase)",
          "9185:                         Var val = typedArrayBase->DirectGetItem(fromIndex);",
          "9187:                         JS_REENTRANT(jsReentLock, typedArrayBase->DirectSetItem(toIndex, val));",
          "9188:                     }",
          "9189:                     else if (pArr)",
          "9190:                     {",
          "9191:                         JS_REENTRANT(jsReentLock, Var val = pArr->DirectGetItem(fromIndex));",
          "9192:                         pArr->SetItem(toIndex, val, Js::PropertyOperation_ThrowIfNotExtensible);",
          "9194:                         if (!JavascriptArray::Is(obj))",
          "9196:                             AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9197:                             pArr = nullptr;",
          "9202:                         Var val = nullptr;",
          "9203:                         JS_REENTRANT(jsReentLock,",
          "9204:                             val = JavascriptOperators::OP_GetElementI_UInt32(obj, fromIndex, scriptContext),",
          "9205:                             JavascriptOperators::OP_SetElementI_UInt32(obj, toIndex, val, scriptContext, PropertyOperation_ThrowIfNotExtensible));",
          "9208:                 else",
          "9209:                 {",
          "9210:                     JS_REENTRANT(jsReentLock, obj->DeleteItem(toIndex, PropertyOperation_ThrowOnDeleteIfNotConfig));",
          "9211:                 }",
          "9213:                 fromIndex += direction;",
          "9214:                 toIndex += direction;",
          "9215:                 count--;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83d7637c205eae53a2c6110223c94cc7aeffd87c",
      "candidate_info": {
        "commit_hash": "83d7637c205eae53a2c6110223c94cc7aeffd87c",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/83d7637c205eae53a2c6110223c94cc7aeffd87c",
        "files": [
          "lib/Common/DataStructures/Chakra.Common.DataStructures.vcxproj",
          "lib/Common/DataStructures/QuickSort.h",
          "lib/Common/Memory/RecyclerPointers.h",
          "lib/Runtime/Library/JavascriptArray.cpp"
        ],
        "message": "[swb] bring back quick sort\n\nwe need this when sorting an array from write barrier memory",
        "before_after_code_files": [
          "lib/Common/DataStructures/Chakra.Common.DataStructures.vcxproj||lib/Common/DataStructures/Chakra.Common.DataStructures.vcxproj",
          "lib/Common/DataStructures/QuickSort.h||lib/Common/DataStructures/QuickSort.h",
          "lib/Common/Memory/RecyclerPointers.h||lib/Common/Memory/RecyclerPointers.h",
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Common/DataStructures/Chakra.Common.DataStructures.vcxproj||lib/Common/DataStructures/Chakra.Common.DataStructures.vcxproj": [
          "File: lib/Common/DataStructures/Chakra.Common.DataStructures.vcxproj -> lib/Common/DataStructures/Chakra.Common.DataStructures.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     <ClInclude Include=\"PageStack.h\" />",
          "65:     <ClInclude Include=\"Pair.h\" />",
          "66:     <ClInclude Include=\"Queue.h\" />",
          "67:     <ClInclude Include=\"RegexKey.h\" />",
          "68:     <ClInclude Include=\"SizePolicy.h\" />",
          "69:     <ClInclude Include=\"InternalString.h\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     <ClInclude Include=\"QuickSort.h\" />",
          "",
          "---------------"
        ],
        "lib/Common/DataStructures/QuickSort.h||lib/Common/DataStructures/QuickSort.h": [
          "File: lib/Common/DataStructures/QuickSort.h -> lib/Common/DataStructures/QuickSort.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #pragma once",
          "7: namespace JsUtil",
          "8: {",
          "9:     template <class T, typename Comparer>",
          "10:     class QuickSort",
          "11:     {",
          "12:     public:",
          "13:         static void Sort(T* low, T* high, Comparer comparer, void* context)",
          "14:         {",
          "15:             if ((low == NULL)||(high == NULL))",
          "16:             {",
          "17:                 return;",
          "18:             }",
          "19:             if (high > low)",
          "20:             {",
          "21:                 T* pivot = Partition(low, high, comparer, context);",
          "22:                 Sort(low, pivot-1, comparer, context);",
          "23:                 Sort(pivot+1, high, comparer, context);",
          "24:             }",
          "25:         }",
          "27:     private:",
          "28:         static T* Partition(T* l, T* r, Comparer comparer, void* context)",
          "29:         {",
          "30:             T* i = l-1;",
          "31:             T* j = r;",
          "32:             for (;;)",
          "33:             {",
          "34:                 while (comparer(context, ++i, r) < 0) ;",
          "35:                 while (comparer(context, r, --j) < 0) if (j == l) break;",
          "36:                 if (i >= j) break;",
          "37:                 swap(*i, *j);",
          "38:             }",
          "39:             swap(*i, *r);",
          "40:             return i;",
          "41:         }",
          "43:         inline static void swap(T& x, T& y)",
          "44:         {",
          "45:             T temp = x;",
          "46:             x = y;",
          "47:             y = temp;",
          "48:         }",
          "49:     };",
          "50: }",
          "",
          "---------------"
        ],
        "lib/Common/Memory/RecyclerPointers.h||lib/Common/Memory/RecyclerPointers.h": [
          "File: lib/Common/Memory/RecyclerPointers.h -> lib/Common/Memory/RecyclerPointers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:         return result;",
          "376:     }",
          "378:     static void MoveArray(WriteBarrierPtr * dst, WriteBarrierPtr * src, size_t count)",
          "379:     {",
          "380:         memmove((void *)dst, src, sizeof(WriteBarrierPtr) * count);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "378:     WriteBarrierPtr& operator--()  // prefix --",
          "379:     {",
          "380:         --ptr;",
          "381: #ifdef RECYCLER_WRITE_BARRIER",
          "382:         RecyclerWriteBarrierManager::WriteBarrier(this);",
          "383: #endif",
          "384:         return *this;",
          "385:     }",
          "387:     WriteBarrierPtr operator--(int)  // postfix --",
          "388:     {",
          "389:         WriteBarrierPtr result(*this);",
          "390:         --(*this);",
          "391:         return result;",
          "392:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452: template<class T> inline",
          "453: const T& max(const NoWriteBarrierField<T>& a, const NoWriteBarrierField<T>& b) { return a > b ? a : b; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471: template<typename T, typename Comparer>",
          "472: void qsort_s(Memory::WriteBarrierPtr<T>* _Base, size_t _NumOfElements, size_t _SizeOfElements, Comparer comparer, void* _Context)",
          "473: {",
          "474:     JsUtil::QuickSort<Memory::WriteBarrierPtr<T>, Comparer>::Sort(_Base, _Base + _NumOfElements - 1, comparer, _Context);",
          "475: }",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include \"RuntimeLibraryPch.h\"",
          "7: #include \"Types/PathTypeHandler.h\"",
          "8: #include \"Types/SpreadArgument.h\"",
          "10: namespace Js",
          "11: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include \"DataStructures/QuickSort.h\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}