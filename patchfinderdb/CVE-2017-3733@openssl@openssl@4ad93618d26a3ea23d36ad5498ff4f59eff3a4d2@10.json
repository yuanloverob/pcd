{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ac162301b45a7458ced227437922141c692383ae",
      "candidate_info": {
        "commit_hash": "ac162301b45a7458ced227437922141c692383ae",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ac162301b45a7458ced227437922141c692383ae",
        "files": [
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c"
        ],
        "message": "Majority rules, use session_ctx vs initial_ctx\n\nsession_ctx and initial_ctx are aliases of each other, and with the\nopaque data structures, there's no need to keep both around. Since\nthere were more references of session_ctx, replace all instances of\ninitial_ctx with session_ctx.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2340)",
        "before_after_code_files": [
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "600:     s->tlsext_ocsp_resp = NULL;",
          "601:     s->tlsext_ocsp_resplen = -1;",
          "602:     SSL_CTX_up_ref(ctx);",
          "604: #ifndef OPENSSL_NO_EC",
          "605:     if (ctx->tlsext_ecpointformatlist) {",
          "606:         s->tlsext_ecpointformatlist =",
          "",
          "[Removed Lines]",
          "603:     s->initial_ctx = ctx;",
          "",
          "[Added Lines]",
          "603:     s->session_ctx = ctx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1001:     OPENSSL_free(s->tlsext_hostname);",
          "1003: #ifndef OPENSSL_NO_EC",
          "1004:     OPENSSL_free(s->tlsext_ecpointformatlist);",
          "1005:     OPENSSL_free(s->tlsext_ellipticcurvelist);",
          "",
          "[Removed Lines]",
          "1002:     SSL_CTX_free(s->initial_ctx);",
          "",
          "[Added Lines]",
          "1002:     SSL_CTX_free(s->session_ctx);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3380:     if (ssl->ctx == ctx)",
          "3381:         return ssl->ctx;",
          "3382:     if (ctx == NULL)",
          "3384:     new_cert = ssl_cert_dup(ctx->cert);",
          "3385:     if (new_cert == NULL) {",
          "3386:         return NULL;",
          "",
          "[Removed Lines]",
          "3383:         ctx = ssl->initial_ctx;",
          "",
          "[Added Lines]",
          "3383:         ctx = ssl->session_ctx;",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1089:     unsigned char *next_proto_negotiated;",
          "1090:     unsigned char next_proto_negotiated_len;",
          "1091: # endif",
          "1094:     STACK_OF(SRTP_PROTECTION_PROFILE) *srtp_profiles;",
          "",
          "[Removed Lines]",
          "1092: # define session_ctx initial_ctx",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2992:     int len, slen_full, slen;",
          "2993:     SSL_SESSION *sess;",
          "2994:     unsigned int hlen;",
          "2996:     unsigned char iv[EVP_MAX_IV_LENGTH];",
          "2997:     unsigned char key_name[TLSEXT_KEYNAME_LENGTH];",
          "2998:     int iv_len;",
          "",
          "[Removed Lines]",
          "2995:     SSL_CTX *tctx = s->initial_ctx;",
          "",
          "[Added Lines]",
          "2995:     SSL_CTX *tctx = s->session_ctx;",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2684:         ret =",
          "2685:             s->ctx->tlsext_servername_callback(s, &al,",
          "2686:                                                s->ctx->tlsext_servername_arg);",
          "2689:         ret =",
          "2691:                                                        s->",
          "2694:     switch (ret) {",
          "2695:     case SSL_TLSEXT_ERR_ALERT_FATAL:",
          "",
          "[Removed Lines]",
          "2687:     else if (s->initial_ctx != NULL",
          "2688:              && s->initial_ctx->tlsext_servername_callback != 0)",
          "2690:             s->initial_ctx->tlsext_servername_callback(s, &al,",
          "2692:                                                        initial_ctx->tlsext_servername_arg);",
          "",
          "[Added Lines]",
          "2687:     else if (s->session_ctx != NULL",
          "2688:              && s->session_ctx->tlsext_servername_callback != 0)",
          "2690:             s->session_ctx->tlsext_servername_callback(s, &al,",
          "2692:                                                        session_ctx->tlsext_servername_arg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2863:         ret =",
          "2864:             s->ctx->tlsext_servername_callback(s, &al,",
          "2865:                                                s->ctx->tlsext_servername_arg);",
          "2868:         ret =",
          "2870:                                                        s->",
          "",
          "[Removed Lines]",
          "2866:     else if (s->initial_ctx != NULL",
          "2867:              && s->initial_ctx->tlsext_servername_callback != 0)",
          "2869:             s->initial_ctx->tlsext_servername_callback(s, &al,",
          "2871:                                                        initial_ctx->tlsext_servername_arg);",
          "",
          "[Added Lines]",
          "2866:     else if (s->session_ctx != NULL",
          "2867:              && s->session_ctx->tlsext_servername_callback != 0)",
          "2869:             s->session_ctx->tlsext_servername_callback(s, &al,",
          "2871:                                                        session_ctx->tlsext_servername_arg);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3084:     unsigned char tick_hmac[EVP_MAX_MD_SIZE];",
          "3085:     HMAC_CTX *hctx = NULL;",
          "3086:     EVP_CIPHER_CTX *ctx;",
          "3090:     hctx = HMAC_CTX_new();",
          "",
          "[Removed Lines]",
          "3087:     SSL_CTX *tctx = s->initial_ctx;",
          "",
          "[Added Lines]",
          "3087:     SSL_CTX *tctx = s->session_ctx;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "150fe6b6ea2c67b24ec7b5d8da33a8452e4a125f",
      "candidate_info": {
        "commit_hash": "150fe6b6ea2c67b24ec7b5d8da33a8452e4a125f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/150fe6b6ea2c67b24ec7b5d8da33a8452e4a125f",
        "files": [
          "crypto/asn1/a_int.c",
          "crypto/asn1/asn1_locl.h",
          "crypto/asn1/build.info",
          "crypto/asn1/x_int64.c",
          "include/internal/asn1t.h",
          "util/mkdef.pl"
        ],
        "message": "Implement internal ASN.1 types INT32, UINT32, INT64, UINT64\n\nAlso Z varieties.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3120)",
        "before_after_code_files": [
          "crypto/asn1/a_int.c||crypto/asn1/a_int.c",
          "crypto/asn1/asn1_locl.h||crypto/asn1/asn1_locl.h",
          "crypto/asn1/build.info||crypto/asn1/build.info",
          "crypto/asn1/x_int64.c||crypto/asn1/x_int64.c",
          "include/internal/asn1t.h||include/internal/asn1t.h",
          "util/mkdef.pl||util/mkdef.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_int.c||crypto/asn1/a_int.c": [
          "File: crypto/asn1/a_int.c -> crypto/asn1/a_int.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "622: {",
          "623:     return asn1_string_to_bn(ai, bn, V_ASN1_ENUMERATED);",
          "624: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "627: int c2i_uint64_int(uint64_t *ret, int *neg, const unsigned char **pp, long len)",
          "628: {",
          "629:     unsigned char buf[sizeof(uint64_t)];",
          "630:     size_t buflen;",
          "632:     buflen = c2i_ibuf(NULL, NULL, *pp, len);",
          "633:     if (buflen == 0)",
          "634:         return 0;",
          "635:     if (buflen > sizeof(uint64_t)) {",
          "636:         ASN1err(ASN1_F_C2I_UINT64_INT, ASN1_R_TOO_LARGE);",
          "637:         return 0;",
          "638:     }",
          "639:     (void)c2i_ibuf(buf, neg, *pp, len);",
          "640:     return asn1_get_uint64(ret, buf, buflen);",
          "641: }",
          "643: int i2c_uint64_int(unsigned char *p, uint64_t r, int neg)",
          "644: {",
          "645:     unsigned char buf[sizeof(uint64_t)];",
          "646:     size_t buflen;",
          "648:     buflen = asn1_put_uint64(buf, r);",
          "649:     if (p == NULL)",
          "650:         return i2c_ibuf(buf, buflen, neg, NULL);",
          "651:     return i2c_ibuf(buf, buflen, neg, &p);",
          "652: }",
          "",
          "---------------"
        ],
        "crypto/asn1/asn1_locl.h||crypto/asn1/asn1_locl.h": [
          "File: crypto/asn1/asn1_locl.h -> crypto/asn1/asn1_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: int i2c_ASN1_INTEGER(ASN1_INTEGER *a, unsigned char **pp);",
          "77: ASN1_INTEGER *c2i_ASN1_INTEGER(ASN1_INTEGER **a, const unsigned char **pp,",
          "78:                                long length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: int c2i_uint64_int(uint64_t *ret, int *neg, const unsigned char **pp, long len);",
          "82: int i2c_uint64_int(unsigned char *p, uint64_t r, int neg);",
          "",
          "---------------"
        ],
        "crypto/asn1/build.info||crypto/asn1/build.info": [
          "File: crypto/asn1/build.info -> crypto/asn1/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:         a_print.c a_type.c a_dup.c a_d2i_fp.c a_i2d_fp.c \\",
          "5:         a_utf8.c a_sign.c a_digest.c a_verify.c a_mbstr.c a_strex.c \\",
          "6:         x_algor.c x_val.c x_sig.c x_bignum.c \\",
          "8:         d2i_pu.c d2i_pr.c i2d_pu.c i2d_pr.c\\",
          "9:         t_pkey.c t_spki.c t_bitst.c \\",
          "10:         tasn_new.c tasn_fre.c tasn_enc.c tasn_dec.c tasn_utl.c tasn_typ.c \\",
          "",
          "[Removed Lines]",
          "7:         x_long.c x_info.c x_spki.c nsseq.c \\",
          "",
          "[Added Lines]",
          "7:         x_long.c x_int64.c x_info.c x_spki.c nsseq.c \\",
          "",
          "---------------"
        ],
        "crypto/asn1/x_int64.c||crypto/asn1/x_int64.c": [
          "File: crypto/asn1/x_int64.c -> crypto/asn1/x_int64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <stdio.h>",
          "11: #include \"internal/cryptlib.h\"",
          "12: #include \"internal/asn1t.h\"",
          "13: #include \"internal/numbers.h\"",
          "14: #include <openssl/bn.h>",
          "15: #include \"asn1_locl.h\"",
          "26: #define INTxx_FLAG_ZERO_DEFAULT (1<<0)",
          "27: #define INTxx_FLAG_SIGNED       (1<<1)",
          "29: static int uint64_new(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "30: {",
          "32:     return 1;",
          "33: }",
          "35: static void uint64_free(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "36: {",
          "38: }",
          "40: static int uint64_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype,",
          "41:                     const ASN1_ITEM *it)",
          "42: {",
          "43:     uint64_t utmp;",
          "44:     int neg = 0;",
          "46:     char *cp = (char *)pval;",
          "49:     memcpy(&utmp, cp, sizeof(utmp));",
          "51:     if ((it->size & INTxx_FLAG_ZERO_DEFAULT) == INTxx_FLAG_ZERO_DEFAULT",
          "52:         && utmp == 0)",
          "53:         return -1;",
          "54:     if ((it->size & INTxx_FLAG_SIGNED) == INTxx_FLAG_SIGNED",
          "55:         && (int64_t)utmp < 0)",
          "56:         neg = 1;",
          "58:     return i2c_uint64_int(cont, utmp, neg);",
          "59: }",
          "61: static int uint64_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len,",
          "62:                     int utype, char *free_cont, const ASN1_ITEM *it)",
          "63: {",
          "64:     uint64_t utmp = 0;",
          "65:     char *cp = (char *)pval;",
          "66:     int neg = 0;",
          "68:     if (!c2i_uint64_int(&utmp, &neg, &cont, len))",
          "69:         return 0;",
          "70:     if ((it->size & INTxx_FLAG_SIGNED) == 0 && neg) {",
          "71:         ASN1err(ASN1_F_UINT64_C2I, ASN1_R_ILLEGAL_NEGATIVE_VALUE);",
          "72:         return 0;",
          "73:     }",
          "74:     memcpy(cp, &utmp, sizeof(utmp));",
          "75:     return 1;",
          "76: }",
          "78: static int uint64_print(BIO *out, ASN1_VALUE **pval, const ASN1_ITEM *it,",
          "79:                         int indent, const ASN1_PCTX *pctx)",
          "80: {",
          "81:     if ((it->size & INTxx_FLAG_SIGNED) == INTxx_FLAG_SIGNED)",
          "82:         return BIO_printf(out, \"%jd\\n\", *(int64_t *)pval);",
          "83:     return BIO_printf(out, \"%ju\\n\", *(uint64_t *)pval);",
          "84: }",
          "88: static int uint32_new(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "89: {",
          "91:     return 1;",
          "92: }",
          "94: static void uint32_free(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "95: {",
          "97: }",
          "99: static int uint32_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype,",
          "100:                     const ASN1_ITEM *it)",
          "101: {",
          "102:     uint32_t utmp;",
          "103:     int neg = 0;",
          "105:     char *cp = (char *)pval;",
          "108:     memcpy(&utmp, cp, sizeof(utmp));",
          "110:     if ((it->size & INTxx_FLAG_ZERO_DEFAULT) == INTxx_FLAG_ZERO_DEFAULT",
          "111:         && utmp == 0)",
          "112:         return -1;",
          "113:     if ((it->size & INTxx_FLAG_SIGNED) == INTxx_FLAG_SIGNED",
          "114:         && (int32_t)utmp < 0)",
          "115:         neg = 1;",
          "117:     return i2c_uint64_int(cont, (uint64_t)utmp, neg);",
          "118: }",
          "120: static int uint32_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len,",
          "121:                     int utype, char *free_cont, const ASN1_ITEM *it)",
          "122: {",
          "123:     uint64_t utmp = 0;",
          "124:     uint32_t utmp2 = 0;",
          "125:     char *cp = (char *)pval;",
          "126:     int neg = 0;",
          "128:     if (!c2i_uint64_int(&utmp, &neg, &cont, len))",
          "129:         return 0;",
          "130:     if ((it->size & INTxx_FLAG_SIGNED) == 0 && neg) {",
          "131:         ASN1err(ASN1_F_UINT32_C2I, ASN1_R_ILLEGAL_NEGATIVE_VALUE);",
          "132:         return 0;",
          "133:     }",
          "134:     utmp2 = (uint32_t)utmp;",
          "135:     if (utmp != utmp2",
          "136:         || ((it->size & INTxx_FLAG_SIGNED) == INTxx_FLAG_SIGNED",
          "137:             && !neg && utmp2 > INT32_MAX)) {",
          "138:         ASN1err(ASN1_F_UINT32_C2I, ASN1_R_TOO_LARGE);",
          "139:         return 0;",
          "140:     }",
          "141:     memcpy(cp, &utmp2, sizeof(utmp2));",
          "142:     return 1;",
          "143: }",
          "145: static int uint32_print(BIO *out, ASN1_VALUE **pval, const ASN1_ITEM *it,",
          "146:                         int indent, const ASN1_PCTX *pctx)",
          "147: {",
          "148:     if ((it->size & INTxx_FLAG_SIGNED) == INTxx_FLAG_SIGNED)",
          "149:         return BIO_printf(out, \"%d\\n\", *(int32_t *)pval);",
          "150:     return BIO_printf(out, \"%u\\n\", *(uint32_t *)pval);",
          "151: }",
          "156: static ASN1_PRIMITIVE_FUNCS uint32_pf = {",
          "157:     NULL, 0,",
          "158:     uint32_new,",
          "159:     uint32_free,",
          "161:     uint32_c2i,",
          "162:     uint32_i2c,",
          "163:     uint32_print",
          "164: };",
          "166: static ASN1_PRIMITIVE_FUNCS uint64_pf = {",
          "167:     NULL, 0,",
          "168:     uint64_new,",
          "169:     uint64_free,",
          "171:     uint64_c2i,",
          "172:     uint64_i2c,",
          "173:     uint64_print",
          "174: };",
          "176: ASN1_ITEM_start(INT32)",
          "177:     ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &uint32_pf,",
          "178:     INTxx_FLAG_SIGNED, \"INT32\"",
          "179: ASN1_ITEM_end(INT32)",
          "181: ASN1_ITEM_start(UINT32)",
          "182:     ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &uint32_pf, 0, \"UINT32\"",
          "183: ASN1_ITEM_end(UINT32)",
          "185: ASN1_ITEM_start(INT64)",
          "186:     ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &uint64_pf,",
          "187:     INTxx_FLAG_SIGNED, \"INT64\"",
          "188: ASN1_ITEM_end(INT64)",
          "190: ASN1_ITEM_start(UINT64)",
          "191:     ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &uint64_pf, 0, \"UINT64\"",
          "192: ASN1_ITEM_end(UINT64)",
          "194: ASN1_ITEM_start(ZINT32)",
          "195:     ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &uint32_pf,",
          "196:     INTxx_FLAG_ZERO_DEFAULT|INTxx_FLAG_SIGNED, \"ZINT32\"",
          "197: ASN1_ITEM_end(ZINT32)",
          "199: ASN1_ITEM_start(ZUINT32)",
          "200:     ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &uint32_pf,",
          "201:     INTxx_FLAG_ZERO_DEFAULT, \"ZUINT32\"",
          "202: ASN1_ITEM_end(ZUINT32)",
          "204: ASN1_ITEM_start(ZINT64)",
          "205:     ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &uint64_pf,",
          "206:     INTxx_FLAG_ZERO_DEFAULT|INTxx_FLAG_SIGNED, \"ZINT64\"",
          "207: ASN1_ITEM_end(ZINT64)",
          "209: ASN1_ITEM_start(ZUINT64)",
          "210:     ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &uint64_pf,",
          "211:     INTxx_FLAG_ZERO_DEFAULT, \"ZUINT64\"",
          "212: ASN1_ITEM_end(ZUINT64)",
          "",
          "---------------"
        ],
        "include/internal/asn1t.h||include/internal/asn1t.h": [
          "File: include/internal/asn1t.h -> include/internal/asn1t.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <openssl/asn1t.h>",
          "12: DECLARE_ASN1_ITEM(INT32)",
          "13: DECLARE_ASN1_ITEM(ZINT32)",
          "14: DECLARE_ASN1_ITEM(UINT32)",
          "15: DECLARE_ASN1_ITEM(ZUINT32)",
          "16: DECLARE_ASN1_ITEM(INT64)",
          "17: DECLARE_ASN1_ITEM(ZINT64)",
          "18: DECLARE_ASN1_ITEM(UINT64)",
          "19: DECLARE_ASN1_ITEM(ZUINT64)",
          "",
          "---------------"
        ],
        "util/mkdef.pl||util/mkdef.pl": [
          "File: util/mkdef.pl -> util/mkdef.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: $crypto.=\" include/internal/o_dir.h\";",
          "239: $crypto.=\" include/internal/o_str.h\";",
          "240: $crypto.=\" include/internal/err.h\";",
          "241: $crypto.=\" include/openssl/des.h\" ; # unless $no_des;",
          "242: $crypto.=\" include/openssl/idea.h\" ; # unless $no_idea;",
          "243: $crypto.=\" include/openssl/rc4.h\" ; # unless $no_rc4;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: $crypto.=\" include/internal/asn1t.h\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bc3bcb34946933bf14c7d8df3cc646f5f977160",
      "candidate_info": {
        "commit_hash": "6bc3bcb34946933bf14c7d8df3cc646f5f977160",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6bc3bcb34946933bf14c7d8df3cc646f5f977160",
        "files": [
          "util/TLSProxy/Message.pm"
        ],
        "message": "Fix a bug in TLSProxy where zero length messages were not being recorded\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1983)",
        "before_after_code_files": [
          "util/TLSProxy/Message.pm||util/TLSProxy/Message.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "util/TLSProxy/Message.pm||util/TLSProxy/Message.pm": [
          "File: util/TLSProxy/Message.pm -> util/TLSProxy/Message.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:                 $recoffset += 4;",
          "172:                 $payload = \"\";",
          "175:                     #Some payload data is present in this record",
          "176:                     if ($record->decrypt_len - $recoffset >= $messlen) {",
          "177:                         #We can complete the message with this record",
          "",
          "[Removed Lines]",
          "174:                 if ($recoffset < $record->decrypt_len) {",
          "",
          "[Added Lines]",
          "174:                 if ($recoffset <= $record->decrypt_len) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "695fea206b30d3c195dc95f8c1f8c5e29fc07113",
      "candidate_info": {
        "commit_hash": "695fea206b30d3c195dc95f8c1f8c5e29fc07113",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/695fea206b30d3c195dc95f8c1f8c5e29fc07113",
        "files": [
          "test/evp_test.c",
          "test/evptests.txt"
        ],
        "message": "Add function and reason checking to evp_test\n\nAdd options to check the function and reason code matches expected values.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 99f2f1dc3e5c95961f57ca41e9fbb76863e69e46)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:     const char *err, *aux_err;",
          "212:     char *expected_err;",
          "214:     int ntests;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:     char *func;",
          "216:     char *reason;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296: {",
          "297:     OPENSSL_free(t->expected_err);",
          "298:     t->expected_err = NULL;",
          "299:     OPENSSL_free(t->out_expected);",
          "300:     OPENSSL_free(t->out_received);",
          "301:     t->out_expected = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:     OPENSSL_free(t->func);",
          "304:     t->func = NULL;",
          "305:     OPENSSL_free(t->reason);",
          "306:     t->reason = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318: static int check_test_error(struct evp_test *t)",
          "319: {",
          "320:     if (!t->err && !t->expected_err)",
          "321:         return 1;",
          "322:     if (t->err && !t->expected_err) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:     unsigned long err;",
          "329:     const char *func;",
          "330:     const char *reason;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "335:                 t->start_line, t->expected_err);",
          "336:         return 0;",
          "337:     }",
          "339:         return 1;",
          "343:     return 0;",
          "344: }",
          "",
          "[Removed Lines]",
          "338:     if (strcmp(t->err, t->expected_err) == 0)",
          "341:     fprintf(stderr, \"Test line %d: expecting %s got %s\\n\",",
          "342:             t->start_line, t->expected_err, t->err);",
          "",
          "[Added Lines]",
          "350:     if (strcmp(t->err, t->expected_err) != 0) {",
          "351:         fprintf(stderr, \"Test line %d: expecting %s got %s\\n\",",
          "352:                 t->start_line, t->expected_err, t->err);",
          "353:         return 0;",
          "354:     }",
          "356:     if (t->func == NULL && t->reason == NULL)",
          "357:         return 1;",
          "359:     if (t->func == NULL || t->reason == NULL) {",
          "360:         fprintf(stderr, \"Test line %d: missing function or reason code\\n\",",
          "361:                 t->start_line);",
          "362:         return 0;",
          "363:     }",
          "365:     err = ERR_peek_error();",
          "366:     if (err == 0) {",
          "367:         fprintf(stderr, \"Test line %d, expected error \\\"%s:%s\\\" not set\\n\",",
          "368:                 t->start_line, t->func, t->reason);",
          "369:         return 0;",
          "370:     }",
          "372:     func = ERR_func_error_string(err);",
          "373:     reason = ERR_reason_error_string(err);",
          "375:     if (strcmp(func, t->func) == 0 && strcmp(reason, t->reason) == 0)",
          "378:     fprintf(stderr, \"Test line %d: expected error \\\"%s:%s\\\", got \\\"%s:%s\\\"\\n\",",
          "379:             t->start_line, t->func, t->reason, func, reason);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "494:             return 0;",
          "495:         }",
          "496:         t->expected_err = OPENSSL_strdup(value);",
          "498:             return 0;",
          "499:     } else {",
          "",
          "[Removed Lines]",
          "497:         if (!t->expected_err)",
          "",
          "[Added Lines]",
          "535:         if (t->expected_err == NULL)",
          "536:             return 0;",
          "537:     } else if (strcmp(keyword, \"Function\") == 0) {",
          "538:         if (t->func != NULL) {",
          "539:             fprintf(stderr, \"Line %d: multiple function lines\\n\", t->line);",
          "540:             return 0;",
          "541:         }",
          "542:         t->func = OPENSSL_strdup(value);",
          "543:         if (t->func == NULL)",
          "544:             return 0;",
          "545:     } else if (strcmp(keyword, \"Reason\") == 0) {",
          "546:         if (t->reason != NULL) {",
          "547:             fprintf(stderr, \"Line %d: multiple reason lines\\n\", t->line);",
          "548:             return 0;",
          "549:         }",
          "550:         t->reason = OPENSSL_strdup(value);",
          "551:         if (t->reason == NULL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79037e85140887276476e03ce941b1ff0382543d",
      "candidate_info": {
        "commit_hash": "79037e85140887276476e03ce941b1ff0382543d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/79037e85140887276476e03ce941b1ff0382543d",
        "files": [
          "apps/s_server.c"
        ],
        "message": "Fix no-dtls builds\n\nCommits f2ff1432f in master and 14d4d7eda in 1.1.0 broke the no-dtls build\nby moving the position of a \"#endif\" for OPENSSL_NO_DTLS in a change\nwhich is otherwise unrelated to DTLS. This puts it back to where it was.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2974)\n(cherry picked from commit 9998b32cb63b0bdd3d014abfa1d70e9a2c20a283)",
        "before_after_code_files": [
          "apps/s_server.c||apps/s_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: #ifndef OPENSSL_NO_DTLS",
          "138: static int enable_timeouts = 0;",
          "139: static long socket_mtu;",
          "141: #endif",
          "143: #ifndef OPENSSL_NO_PSK",
          "144: static const char psk_identity[] = \"Client_identity\";",
          "",
          "[Removed Lines]",
          "140: static int dtlslisten = 0;",
          "",
          "[Added Lines]",
          "146: static int dtlslisten = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}