{
  "cve_id": "CVE-2016-7125",
  "cve_desc": "ext/session/session.c in PHP before 5.6.25 and 7.x before 7.0.10 skips invalid session names in a way that triggers incorrect parsing, which allows remote attackers to inject arbitrary-type session data by leveraging control of a session name, as demonstrated by object injection.",
  "repo": "php/php-src",
  "patch_hash": "8763c6090d627d8bb0ee1d030c30e58f406be9ce",
  "patch_info": {
    "commit_hash": "8763c6090d627d8bb0ee1d030c30e58f406be9ce",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/8763c6090d627d8bb0ee1d030c30e58f406be9ce",
    "files": [
      "ext/session/session.c",
      "ext/session/tests/bug72681.phpt"
    ],
    "message": "Fix bug #72681 - consume data even if we're not storing them",
    "before_after_code_files": [
      "ext/session/session.c||ext/session/session.c",
      "ext/session/tests/bug72681.phpt||ext/session/tests/bug72681.phpt"
    ]
  },
  "patch_diff": {
    "ext/session/session.c||ext/session/session.c": [
      "File: ext/session/session.c -> ext/session/session.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "924:  int namelen;",
      "925:  int has_value;",
      "926:  php_unserialize_data_t var_hash;",
      "928:  PHP_VAR_UNSERIALIZE_INIT(var_hash);",
      "930:  for (p = val; p < endptr; ) {",
      "931:   zval **tmp;",
      "932:   namelen = ((unsigned char)(*p)) & (~PS_BIN_UNDEF);",
      "934:   if (namelen < 0 || namelen > PS_BIN_MAX || (p + namelen) >= endptr) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "927:  int skip = 0;",
      "933:   skip = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "945:   if (zend_hash_find(&EG(symbol_table), name, namelen + 1, (void **) &tmp) == SUCCESS) {",
      "946:    if ((Z_TYPE_PP(tmp) == IS_ARRAY && Z_ARRVAL_PP(tmp) == &EG(symbol_table)) || *tmp == PS(http_session_vars)) {",
      "949:    }",
      "950:   }",
      "952:   if (has_value) {",
      "953:    ALLOC_INIT_ZVAL(current);",
      "954:    if (php_var_unserialize(&current, (const unsigned char **) &p, (const unsigned char *) endptr, &var_hash TSRMLS_CC)) {",
      "956:    } else {",
      "957:     PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
      "958:     return FAILURE;",
      "959:    }",
      "960:    var_push_dtor_no_addref(&var_hash, &current);",
      "961:   }",
      "963:   efree(name);",
      "964:  }",
      "",
      "[Removed Lines]",
      "947:     efree(name);",
      "948:     continue;",
      "955:     php_set_session_var(name, namelen, current, &var_hash  TSRMLS_CC);",
      "962:   PS_ADD_VARL(name, namelen);",
      "",
      "[Added Lines]",
      "949:     skip = 1;",
      "956:     if (!skip) {",
      "957:      php_set_session_var(name, namelen, current, &var_hash  TSRMLS_CC);",
      "958:     }",
      "965:   if (!skip) {",
      "966:    PS_ADD_VARL(name, namelen);",
      "967:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1016:  int namelen;",
      "1017:  int has_value;",
      "1018:  php_unserialize_data_t var_hash;",
      "1020:  PHP_VAR_UNSERIALIZE_INIT(var_hash);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1024:  int skip = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1024:  while (p < endptr) {",
      "1025:   zval **tmp;",
      "1026:   q = p;",
      "1027:   while (*q != PS_DELIMITER) {",
      "1028:    if (++q >= endptr) goto break_outer_loop;",
      "1029:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1033:   skip = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1041:   if (zend_hash_find(&EG(symbol_table), name, namelen + 1, (void **) &tmp) == SUCCESS) {",
      "1042:    if ((Z_TYPE_PP(tmp) == IS_ARRAY && Z_ARRVAL_PP(tmp) == &EG(symbol_table)) || *tmp == PS(http_session_vars)) {",
      "1044:    }",
      "1045:   }",
      "1047:   if (has_value) {",
      "1048:    ALLOC_INIT_ZVAL(current);",
      "1049:    if (php_var_unserialize(&current, (const unsigned char **) &q, (const unsigned char *) endptr, &var_hash TSRMLS_CC)) {",
      "1051:    } else {",
      "1052:     var_push_dtor_no_addref(&var_hash, &current);",
      "1053:     efree(name);",
      "",
      "[Removed Lines]",
      "1043:     goto skip;",
      "1050:     php_set_session_var(name, namelen, current, &var_hash  TSRMLS_CC);",
      "",
      "[Added Lines]",
      "1050:     skip = 1;",
      "1057:     if (!skip) {",
      "1058:      php_set_session_var(name, namelen, current, &var_hash  TSRMLS_CC);",
      "1059:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1056:    }",
      "1057:    var_push_dtor_no_addref(&var_hash, &current);",
      "1058:   }",
      "1060: skip:",
      "1061:   efree(name);",
      "",
      "[Removed Lines]",
      "1059:   PS_ADD_VARL(name, namelen);",
      "",
      "[Added Lines]",
      "1068:   if (!skip) {",
      "1069:    PS_ADD_VARL(name, namelen);",
      "1070:   }",
      "",
      "---------------"
    ],
    "ext/session/tests/bug72681.phpt||ext/session/tests/bug72681.phpt": [
      "File: ext/session/tests/bug72681.phpt -> ext/session/tests/bug72681.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: --TEST--",
      "2: Bug #72681: PHP Session Data Injection Vulnerability",
      "3: --SKIPIF--",
      "4: <?php include('skipif.inc'); ?>",
      "5: --FILE--",
      "6: <?php",
      "7: ini_set('session.serialize_handler', 'php');",
      "8: session_start();",
      "9: $_SESSION['_SESSION'] = 'ryat|O:8:\"stdClass\":0:{}';",
      "10: session_write_close();",
      "11: session_start();",
      "12: var_dump($_SESSION);",
      "13: ?>",
      "14: --EXPECT--",
      "15: array(0) {",
      "16: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1eb4851fa2b8f5dccfc81a254d345e160dbfa921",
      "candidate_info": {
        "commit_hash": "1eb4851fa2b8f5dccfc81a254d345e160dbfa921",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/1eb4851fa2b8f5dccfc81a254d345e160dbfa921",
        "files": [
          "ext/session/session.c"
        ],
        "message": "Remove leftover of previous change",
        "before_after_code_files": [
          "ext/session/session.c||ext/session/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/session/session.c||ext/session/session.c"
          ],
          "candidate": [
            "ext/session/session.c||ext/session/session.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/session.c||ext/session/session.c": [
          "File: ext/session/session.c -> ext/session/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "830:  int namelen;",
          "831:  zend_string *name;",
          "832:  php_unserialize_data_t var_hash;",
          "835:  PHP_VAR_UNSERIALIZE_INIT(var_hash);",
          "837:  for (p = val; p < endptr; ) {",
          "839:   namelen = ((unsigned char)(*p)) & (~PS_BIN_UNDEF);",
          "841:   if (namelen < 0 || namelen > PS_BIN_MAX || (p + namelen) >= endptr) {",
          "",
          "[Removed Lines]",
          "833:  int skip = 0;",
          "838:   skip = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "854:    current = var_tmp_var(&var_hash);",
          "855:    if (php_var_unserialize(current, (const unsigned char **) &p, (const unsigned char *) endptr, &var_hash)) {",
          "856:     ZVAL_PTR(&rv, current);",
          "860:    } else {",
          "861:     zend_string_release(name);",
          "862:     php_session_normalize_vars();",
          "",
          "[Removed Lines]",
          "857:     if (!skip) {",
          "858:      php_set_session_var(name, &rv, &var_hash);",
          "859:     }",
          "",
          "[Added Lines]",
          "855:     php_set_session_var(name, &rv, &var_hash);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "918:  zend_string *name;",
          "919:  int has_value, retval = SUCCESS;",
          "920:  php_unserialize_data_t var_hash;",
          "923:  PHP_VAR_UNSERIALIZE_INIT(var_hash);",
          "",
          "[Removed Lines]",
          "921:  int skip = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "927:  while (p < endptr) {",
          "928:   q = p;",
          "930:   while (*q != PS_DELIMITER) {",
          "931:    if (++q >= endptr) goto break_outer_loop;",
          "932:   }",
          "",
          "[Removed Lines]",
          "929:   skip = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "946:    current = var_tmp_var(&var_hash);",
          "947:    if (php_var_unserialize(current, (const unsigned char **)&q, (const unsigned char *)endptr, &var_hash)) {",
          "948:     ZVAL_PTR(&rv, current);",
          "952:    } else {",
          "953:     zend_string_release(name);",
          "954:     retval = FAILURE;",
          "955:     goto break_outer_loop;",
          "956:    }",
          "957:   } else {",
          "961:   }",
          "962:   zend_string_release(name);",
          "",
          "[Removed Lines]",
          "949:     if (!skip) {",
          "950:      php_set_session_var(name, &rv, &var_hash);",
          "951:     }",
          "958:    if(!skip) {",
          "959:     PS_ADD_VARL(name);",
          "960:    }",
          "",
          "[Added Lines]",
          "943:     php_set_session_var(name, &rv, &var_hash);",
          "950:    PS_ADD_VARL(name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45a72785b5adb86d4891bf7e221da81e779139d0",
      "candidate_info": {
        "commit_hash": "45a72785b5adb86d4891bf7e221da81e779139d0",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/45a72785b5adb86d4891bf7e221da81e779139d0",
        "files": [
          "ext/session/session.c"
        ],
        "message": "fix leak",
        "before_after_code_files": [
          "ext/session/session.c||ext/session/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/session/session.c||ext/session/session.c"
          ],
          "candidate": [
            "ext/session/session.c||ext/session/session.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/session.c||ext/session/session.c": [
          "File: ext/session/session.c -> ext/session/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "954:     var_replace(&var_hash, &current, zv);",
          "955:    } else {",
          "956:     zval_ptr_dtor(&current);",
          "957:     PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "958:     return FAILURE;",
          "959:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "957:     zend_string_release(name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9bca5039be162bd056909ce9c21f6fd96e5204a",
      "candidate_info": {
        "commit_hash": "c9bca5039be162bd056909ce9c21f6fd96e5204a",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/c9bca5039be162bd056909ce9c21f6fd96e5204a",
        "files": [
          "Zend/zend_API.h",
          "ext/session/mod_user_class.c",
          "ext/session/php_session.h",
          "ext/session/session.c"
        ],
        "message": "Refactor session (incompleted)",
        "before_after_code_files": [
          "Zend/zend_API.h||Zend/zend_API.h",
          "ext/session/mod_user_class.c||ext/session/mod_user_class.c",
          "ext/session/php_session.h||ext/session/php_session.h",
          "ext/session/session.c||ext/session/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/session/session.c||ext/session/session.c"
          ],
          "candidate": [
            "ext/session/session.c||ext/session/session.c"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_API.h||Zend/zend_API.h": [
          "File: Zend/zend_API.h -> Zend/zend_API.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "704: #define ZEND_SET_GLOBAL_VAR(name, var)    \\",
          "707: #define ZEND_SET_GLOBAL_VAR_WITH_LENGTH(name, name_length, var, _refcount, _is_ref) \\",
          "710: #define ZEND_DEFINE_PROPERTY(class_ptr, name, value, mask)       \\",
          "711: {                     \\",
          "",
          "[Removed Lines]",
          "705:  ZEND_SET_SYMBOL(&EG(symbol_table), name, var)",
          "708:  ZEND_SET_SYMBOL_WITH_LENGTH(&EG(symbol_table), name, name_length, var, _refcount, _is_ref)",
          "",
          "[Added Lines]",
          "705:  ZEND_SET_SYMBOL(&EG(symbol_table).ht, name, var)",
          "708:  ZEND_SET_SYMBOL_WITH_LENGTH(&EG(symbol_table).ht, name, name_length, var, _refcount, _is_ref)",
          "",
          "---------------"
        ],
        "ext/session/mod_user_class.c||ext/session/mod_user_class.c": [
          "File: ext/session/mod_user_class.c -> ext/session/mod_user_class.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   return;",
          "86:  }",
          "90:  return;",
          "91: }",
          "",
          "[Removed Lines]",
          "88:  RETVAL_STRINGL(val, val_len, 1);",
          "89:  str_efree(val);",
          "",
          "[Added Lines]",
          "88:  RETVAL_STRINGL(val, val_len);",
          "89:  efree(val);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:  id = PS(default_mod)->s_create_sid(&PS(mod_data), NULL TSRMLS_CC);",
          "158: }",
          "",
          "[Removed Lines]",
          "157:  RETURN_STRING(id, 0);",
          "",
          "[Added Lines]",
          "158:  RETVAL_STRING(id);",
          "159:  efree(id);",
          "",
          "---------------"
        ],
        "ext/session/php_session.h||ext/session/php_session.h": [
          "File: ext/session/php_session.h -> ext/session/php_session.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define PS_OPEN_ARGS void **mod_data, const char *save_path, const char *session_name TSRMLS_DC",
          "36: #define PS_CLOSE_ARGS void **mod_data TSRMLS_DC",
          "40: #define PS_GC_ARGS void **mod_data, int maxlifetime, int *nrdels TSRMLS_DC",
          "46: typedef struct ps_module_struct {",
          "47:  const char *s_name;",
          "",
          "[Removed Lines]",
          "37: #define PS_READ_ARGS void **mod_data, const char *key, char **val, int *vallen TSRMLS_DC",
          "38: #define PS_WRITE_ARGS void **mod_data, const char *key, const char *val, const int vallen TSRMLS_DC",
          "39: #define PS_DESTROY_ARGS void **mod_data, const char *key TSRMLS_DC",
          "41: #define PS_CREATE_SID_ARGS void **mod_data, int *newlen TSRMLS_DC",
          "44: PHPAPI char *php_session_create_id(PS_CREATE_SID_ARGS);",
          "",
          "[Added Lines]",
          "37: #define PS_READ_ARGS void **mod_data, const zend_string *key, char **val, int *vallen TSRMLS_DC",
          "38: #define PS_WRITE_ARGS void **mod_data, const zend_string *key, const char *val, const int vallen TSRMLS_DC",
          "39: #define PS_DESTROY_ARGS void **mod_data, const zend_string *key TSRMLS_DC",
          "41: #define PS_CREATE_SID_ARGS void **mod_data TSRMLS_DC",
          "44: PHPAPI zend_string *php_session_create_id(PS_CREATE_SID_ARGS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:  int (*s_write)(PS_WRITE_ARGS);",
          "52:  int (*s_destroy)(PS_DESTROY_ARGS);",
          "53:  int (*s_gc)(PS_GC_ARGS);",
          "55: } ps_module;",
          "57: #define PS_GET_MOD_DATA() *mod_data",
          "",
          "[Removed Lines]",
          "54:  char *(*s_create_sid)(PS_CREATE_SID_ARGS);",
          "",
          "[Added Lines]",
          "54:  zend_string *(*s_create_sid)(PS_CREATE_SID_ARGS);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: #define PS_WRITE_FUNC(x)  int ps_write_##x(PS_WRITE_ARGS)",
          "64: #define PS_DESTROY_FUNC(x)  int ps_delete_##x(PS_DESTROY_ARGS)",
          "65: #define PS_GC_FUNC(x)   int ps_gc_##x(PS_GC_ARGS)",
          "68: #define PS_FUNCS(x) \\",
          "69:  PS_OPEN_FUNC(x); \\",
          "",
          "[Removed Lines]",
          "66: #define PS_CREATE_SID_FUNC(x) char *ps_create_sid_##x(PS_CREATE_SID_ARGS)",
          "",
          "[Added Lines]",
          "66: #define PS_CREATE_SID_FUNC(x) zend_string *ps_create_sid_##x(PS_CREATE_SID_ARGS)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:  zend_bool apply_trans_sid;",
          "112:  size_t    content_length;",
          "119: } php_session_rfc1867_progress;",
          "121: typedef struct _php_ps_globals {",
          "122:  char *save_path;",
          "123:  char *session_name;",
          "125:  char *extern_referer_chk;",
          "126:  char *entropy_file;",
          "127:  char *cache_limiter;",
          "",
          "[Removed Lines]",
          "118:  zval      *current_file_bytes_processed;",
          "124:  char *id;",
          "",
          "[Added Lines]",
          "118:  zval      current_file_bytes_processed;",
          "124:  zend_string *id;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141:  int module_number;",
          "142:  long cache_expire;",
          "143:  union {",
          "145:   struct {",
          "153:   } name;",
          "154:  } mod_user_names;",
          "155:  int mod_user_implemented;",
          "156:  int mod_user_is_open;",
          "157:  const struct ps_serializer_struct *serializer;",
          "159:  zend_bool auto_start;",
          "160:  zend_bool use_cookies;",
          "161:  zend_bool use_only_cookies;",
          "",
          "[Removed Lines]",
          "144:   zval *names[7];",
          "146:    zval *ps_open;",
          "147:    zval *ps_close;",
          "148:    zval *ps_read;",
          "149:    zval *ps_write;",
          "150:    zval *ps_destroy;",
          "151:    zval *ps_gc;",
          "152:    zval *ps_create_sid;",
          "158:  zval *http_session_vars;",
          "",
          "[Added Lines]",
          "144:   zval names[7];",
          "146:    zval ps_open;",
          "147:    zval ps_close;",
          "148:    zval ps_read;",
          "149:    zval ps_write;",
          "150:    zval ps_destroy;",
          "151:    zval ps_gc;",
          "152:    zval ps_create_sid;",
          "158:  zval http_session_vars;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "194: #define PS(v) (ps_globals.v)",
          "195: #endif",
          "198: #define PS_SERIALIZER_DECODE_ARGS const char *val, int vallen TSRMLS_DC",
          "200: typedef struct ps_serializer_struct {",
          "201:  const char *name;",
          "203:  int (*decode)(PS_SERIALIZER_DECODE_ARGS);",
          "204: } ps_serializer;",
          "",
          "[Removed Lines]",
          "197: #define PS_SERIALIZER_ENCODE_ARGS char **newstr, int *newlen TSRMLS_DC",
          "202:  int (*encode)(PS_SERIALIZER_ENCODE_ARGS);",
          "",
          "[Added Lines]",
          "197: #define PS_SERIALIZER_ENCODE_ARGS TSRMLS_D",
          "202:  zend_string *(*encode)(PS_SERIALIZER_ENCODE_ARGS);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "207: #define PS_SERIALIZER_DECODE_NAME(x) ps_srlzr_decode_##x",
          "209: #define PS_SERIALIZER_ENCODE_FUNC(x) \\",
          "211: #define PS_SERIALIZER_DECODE_FUNC(x) \\",
          "212:  int PS_SERIALIZER_DECODE_NAME(x)(PS_SERIALIZER_DECODE_ARGS)",
          "",
          "[Removed Lines]",
          "210:  int PS_SERIALIZER_ENCODE_NAME(x)(PS_SERIALIZER_ENCODE_ARGS)",
          "",
          "[Added Lines]",
          "210:  zend_string *PS_SERIALIZER_ENCODE_NAME(x)(PS_SERIALIZER_ENCODE_ARGS)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "223: PHPAPI void php_add_session_var(char *name, size_t namelen TSRMLS_DC);",
          "224: PHPAPI void php_set_session_var(char *name, size_t namelen, zval *state_val, php_unserialize_data_t *var_hash TSRMLS_DC);",
          "227: PHPAPI int php_session_register_module(ps_module *);",
          "229: PHPAPI int php_session_register_serializer(const char *name,",
          "231:          int (*decode)(PS_SERIALIZER_DECODE_ARGS));",
          "233: PHPAPI void php_session_set_id(char *id TSRMLS_DC);",
          "",
          "[Removed Lines]",
          "225: PHPAPI int php_get_session_var(char *name, size_t namelen, zval ***state_var TSRMLS_DC);",
          "230:          int (*encode)(PS_SERIALIZER_ENCODE_ARGS),",
          "",
          "[Added Lines]",
          "225: PHPAPI zval *php_get_session_var(char *name, size_t namelen TSRMLS_DC);",
          "230:          zend_string *(*encode)(PS_SERIALIZER_ENCODE_ARGS),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "255: #define PS_ENCODE_VARS            \\",
          "258:  ulong num_key;            \\",
          "261: #define PS_ENCODE_LOOP(code) do {         \\",
          "263:   int key_type;            \\",
          "264:                  \\",
          "265:   for (zend_hash_internal_pointer_reset(_ht);     \\",
          "267:      zend_hash_move_forward(_ht)) {     \\",
          "268:    if (key_type == HASH_KEY_IS_LONG) {      \\",
          "269:     php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Skipping numeric key %ld\", num_key); \\",
          "270:     continue;           \\",
          "271:    }              \\",
          "274:     code;             \\",
          "275:    }               \\",
          "276:   }               \\",
          "",
          "[Removed Lines]",
          "256:  char *key;             \\",
          "257:  uint key_length;           \\",
          "259:  zval **struc;",
          "262:   HashTable *_ht = Z_ARRVAL_P(PS(http_session_vars));   \\",
          "266:     (key_type = zend_hash_get_current_key_ex(_ht, &key, &key_length, &num_key, 0, NULL)) != HASH_KEY_NON_EXISTENT; \\",
          "272:    key_length--;           \\",
          "273:    if (php_get_session_var(key, key_length, &struc TSRMLS_CC) == SUCCESS) { \\",
          "",
          "[Added Lines]",
          "256:  zend_string *key;           \\",
          "258:  zval *struc;",
          "261:   HashTable *_ht = Z_ARRVAL(PS(http_session_vars));   \\",
          "265:     (key_type = zend_hash_get_current_key_ex(_ht, &key, &num_key, 0, NULL)) != HASH_KEY_NON_EXISTENT; \\",
          "271:    if ((struc = php_get_session_var(key->val, key->len TSRMLS_CC))) { \\",
          "",
          "---------------"
        ],
        "ext/session/session.c||ext/session/session.c": [
          "File: ext/session/session.c -> ext/session/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: #define IF_SESSION_VARS() \\",
          "83: #define SESSION_CHECK_ACTIVE_STATE \\",
          "84:  if (PS(session_status) == php_session_active) { \\",
          "",
          "[Removed Lines]",
          "81:  if (PS(http_session_vars) && PS(http_session_vars)->type == IS_ARRAY)",
          "",
          "[Added Lines]",
          "81:  if (Z_TYPE(PS(http_session_vars)) == IS_ARRAY)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:  PS(mod_data) = NULL;",
          "97:  PS(mod_user_is_open) = 0;",
          "100: }",
          "105: {",
          "107:   zval_ptr_dtor(&PS(http_session_vars));",
          "109:  }",
          "111:  if (PS(mod_data) || PS(mod_user_implemented)) {",
          "",
          "[Removed Lines]",
          "99:  PS(http_session_vars) = NULL;",
          "106:  if (PS(http_session_vars)) {",
          "108:   PS(http_session_vars) = NULL;",
          "",
          "[Added Lines]",
          "99:  ZVAL_UNDEF(&PS(http_session_vars));",
          "106:  if (!ZVAL_IS_UNDEF(&PS(http_session_vars))) {",
          "108:   ZVAL_UNDEF(&PS(http_session_vars));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:   } zend_end_try();",
          "115:  }",
          "116:  if (PS(id)) {",
          "118:  }",
          "119: }",
          "",
          "[Removed Lines]",
          "117:   efree(PS(id));",
          "",
          "[Added Lines]",
          "117:   STR_RELEASE(PS(id));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144: {",
          "147:  IF_SESSION_VARS() {",
          "149:  } else {",
          "150:   return;",
          "151:  }",
          "153:  if (sym_track == NULL) {",
          "158:  }",
          "159: }",
          "",
          "[Removed Lines]",
          "145:  zval **sym_track = NULL;",
          "148:   zend_hash_find(Z_ARRVAL_P(PS(http_session_vars)), name, namelen + 1, (void *) &sym_track);",
          "154:   zval *empty_var;",
          "156:   ALLOC_INIT_ZVAL(empty_var);",
          "157:   ZEND_SET_SYMBOL_WITH_LENGTH(Z_ARRVAL_P(PS(http_session_vars)), name, namelen+1, empty_var, 1, 0);",
          "",
          "[Added Lines]",
          "145:  zval *sym_track = NULL;",
          "148:   sym_track = zend_hash_str_find(Z_ARRVAL(PS(http_session_vars)), name, namelen);",
          "154:   zval empty_var;",
          "156:   ZVAL_NULL(&empty_var);",
          "157:   ZEND_SET_SYMBOL_WITH_LENGTH(Z_ARRVAL(PS(http_session_vars)), name, namelen, &empty_var, 1, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "163: {",
          "164:  IF_SESSION_VARS() {",
          "166:  }",
          "167: }",
          "171: {",
          "174:  IF_SESSION_VARS() {",
          "176:  }",
          "178: }",
          "182: {",
          "189:   zval_ptr_dtor(&PS(http_session_vars));",
          "190:  }",
          "197: }",
          "201: {",
          "204:  IF_SESSION_VARS() {",
          "205:   if (!PS(serializer)) {",
          "206:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Unknown session.serialize_handler. Failed to encode session object\");",
          "211:  } else {",
          "212:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Cannot encode non-existent session\");",
          "213:  }",
          "215: }",
          "",
          "[Removed Lines]",
          "165:   zend_set_hash_symbol(state_val, name, namelen, PZVAL_IS_REF(state_val), 1, Z_ARRVAL_P(PS(http_session_vars)));",
          "172:  int ret = FAILURE;",
          "175:   ret = zend_hash_find(Z_ARRVAL_P(PS(http_session_vars)), name, namelen + 1, (void **) state_var);",
          "177:  return ret;",
          "183:  zval *session_vars = NULL;",
          "186:  zend_delete_global_variable(\"_SESSION\", sizeof(\"_SESSION\")-1 TSRMLS_CC);",
          "188:  if (PS(http_session_vars)) {",
          "192:  MAKE_STD_ZVAL(session_vars);",
          "193:  array_init(session_vars);",
          "194:  PS(http_session_vars) = session_vars;",
          "196:  ZEND_SET_GLOBAL_VAR_WITH_LENGTH(\"_SESSION\", sizeof(\"_SESSION\"), PS(http_session_vars), 2, 1);",
          "202:  char *ret = NULL;",
          "207:    ret = NULL;",
          "208:   } else if (PS(serializer)->encode(&ret, newlen TSRMLS_CC) == FAILURE) {",
          "209:    ret = NULL;",
          "210:   }",
          "214:  return ret;",
          "",
          "[Added Lines]",
          "165:   zend_set_hash_symbol(state_val, name, namelen, Z_ISREF_P(state_val), 1, Z_ARRVAL(PS(http_session_vars)));",
          "173:   return zend_hash_str_find(Z_ARRVAL(PS(http_session_vars)), name, namelen);",
          "175:  return NULL;",
          "181:  zend_string *var_name = STR_INIT(\"_SESSION\", sizeof(\"_SESSION\") - 1, 0);",
          "183:  zend_delete_global_variable(var_name TSRMLS_CC);",
          "184:  STR_RELEASE(var_name);",
          "186:  if (!ZVAL_IS_UNDEF(&PS(http_session_vars))) {",
          "190:  array_init(&PS(http_session_vars));",
          "192:  ZEND_SET_GLOBAL_VAR_WITH_LENGTH(\"_SESSION\", sizeof(\"_SESSION\") - 1, &PS(http_session_vars), 2, 1);",
          "201:    return NULL;",
          "202:   }",
          "203:   return PS(serializer)->encode(TSRMLS_C);",
          "207:  return NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "250:  int mask;",
          "251:  int have;",
          "254:  q = (unsigned char *)in + inlen;",
          "256:  w = 0;",
          "",
          "[Removed Lines]",
          "253:  p = (unsigned char *) in;",
          "",
          "[Added Lines]",
          "246:  p = (unsigned char *)in;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "290: #endif",
          "291:  unsigned char *digest;",
          "292:  int digest_len;",
          "295:  struct timeval tv;",
          "298:  char *remote_addr = NULL;",
          "300:  gettimeofday(&tv, NULL);",
          "305:  ) {",
          "307:  }",
          "",
          "[Removed Lines]",
          "293:  int j;",
          "294:  char *buf, *outid;",
          "296:  zval **array;",
          "297:  zval **token;",
          "302:  if (zend_hash_find(&EG(symbol_table), \"_SERVER\", sizeof(\"_SERVER\"), (void **) &array) == SUCCESS &&",
          "303:   Z_TYPE_PP(array) == IS_ARRAY &&",
          "304:   zend_hash_find(Z_ARRVAL_PP(array), \"REMOTE_ADDR\", sizeof(\"REMOTE_ADDR\"), (void **) &token) == SUCCESS",
          "306:   remote_addr = Z_STRVAL_PP(token);",
          "",
          "[Added Lines]",
          "286:  char *buf;",
          "288:  zval *array;",
          "289:  zval *token;",
          "290:  zend_string *outid;",
          "295:  if ((array = zend_hash_str_find(&EG(symbol_table).ht, \"_SERVER\", sizeof(\"_SERVER\") - 1)) &&",
          "296:   Z_TYPE_P(array) == IS_ARRAY &&",
          "297:   (token = zend_hash_str_find(Z_ARRVAL_P(array), \"REMOTE_ADDR\", sizeof(\"REMOTE_ADDR\") - 1))",
          "299:   remote_addr = Z_STRVAL_P(token);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "418:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"The ini setting hash_bits_per_character is out of range (should be 4, 5, or 6) - using 4 for now\");",
          "419:  }",
          "423:  efree(digest);",
          "429:  return outid;",
          "430: }",
          "",
          "[Removed Lines]",
          "421:  outid = emalloc((size_t)((digest_len + 2) * ((8.0f / PS(hash_bits_per_character)) + 0.5)));",
          "422:  j = (int) (bin_to_readable((char *)digest, digest_len, outid, (char)PS(hash_bits_per_character)) - outid);",
          "425:  if (newlen) {",
          "427:  }",
          "",
          "[Added Lines]",
          "414:  outid = STR_ALLOC((digest_len + 2) * ((8.0f / PS(hash_bits_per_character) + 0.5)), 0);",
          "415:  outid->len = (int)(bin_to_readable((char *)digest, digest_len, outid->val, (char)PS(hash_bits_per_character)) - (char *)&outid->val);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "484:  if (!PS(id)) {",
          "486:   if (!PS(id)) {",
          "487:    php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Failed to create session ID: %s (path: %s)\", PS(mod)->s_name, PS(save_path));",
          "488:    return;",
          "",
          "[Removed Lines]",
          "485:   PS(id) = PS(mod)->s_create_sid(&PS(mod_data), NULL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "474:   PS(id) = PS(mod)->s_create_sid(&PS(mod_data) TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "521:   PHP_MD5Final(PS(session_data_hash), &context);",
          "523:   php_session_decode(val, vallen TSRMLS_CC);",
          "525:  } else {",
          "526:   memset(PS(session_data_hash),'\\0', 16);",
          "527:  }",
          "",
          "[Removed Lines]",
          "524:   str_efree(val);",
          "",
          "[Added Lines]",
          "513:   efree(val);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "542:  IF_SESSION_VARS() {",
          "543:    if (PS(mod_data) || PS(mod_user_implemented)) {",
          "548:    if (val) {",
          "549:     PHP_MD5_CTX context;",
          "550:     unsigned char digest[16];",
          "553:     PHP_MD5Init(&context);",
          "555:     PHP_MD5Final(digest, &context);",
          "557:     if (memcmp(digest, PS(session_data_hash), 16)) {",
          "559:     } else {",
          "560:      ret = SUCCESS;",
          "561:     }",
          "563:    } else {",
          "564:     ret = PS(mod)->s_write(&PS(mod_data), PS(id), \"\", 0 TSRMLS_CC);",
          "565:    }",
          "",
          "[Removed Lines]",
          "544:    char *val;",
          "545:    int vallen;",
          "547:    val = php_session_encode(&vallen TSRMLS_CC);",
          "554:     PHP_MD5Update(&context, val, vallen);",
          "558:      ret = PS(mod)->s_write(&PS(mod_data), PS(id), val, vallen TSRMLS_CC);",
          "562:     efree(val);",
          "",
          "[Added Lines]",
          "533:    zend_string *val;",
          "535:    val = php_session_encode(TSRMLS_C);",
          "542:     PHP_MD5Update(&context, val->val, val->len);",
          "546:      ret = PS(mod)->s_write(&PS(mod_data), PS(id), val->val, val->len TSRMLS_CC);",
          "550:     STR_RELEASE(val);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "864:  PHP_VAR_SERIALIZE_INIT(var_hash);",
          "865:  php_var_serialize(&buf, &PS(http_session_vars), &var_hash TSRMLS_CC);",
          "866:  PHP_VAR_SERIALIZE_DESTROY(var_hash);",
          "873: }",
          "877: {",
          "878:  const char *endptr = val + vallen;",
          "880:  php_unserialize_data_t var_hash;",
          "882:  PHP_VAR_UNSERIALIZE_INIT(var_hash);",
          "884:  php_var_unserialize(&session_vars, &val, endptr, &var_hash TSRMLS_CC);",
          "885:  PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "887:   zval_ptr_dtor(&PS(http_session_vars));",
          "888:  }",
          "891:  }",
          "894:  return SUCCESS;",
          "895: }",
          "",
          "[Removed Lines]",
          "867:  if (newlen) {",
          "869:  }",
          "870:  smart_str_0(&buf);",
          "872:  return SUCCESS;",
          "879:  zval *session_vars;",
          "883:  ALLOC_INIT_ZVAL(session_vars);",
          "886:  if (PS(http_session_vars)) {",
          "889:  if (Z_TYPE_P(session_vars) == IS_NULL) {",
          "890:   array_init(session_vars);",
          "892:  PS(http_session_vars) = session_vars;",
          "893:  ZEND_SET_GLOBAL_VAR_WITH_LENGTH(\"_SESSION\", sizeof(\"_SESSION\"), PS(http_session_vars), 2, 1);",
          "",
          "[Added Lines]",
          "855:  return buf.s;",
          "862:  zval session_vars;",
          "868:  if (!ZVAL_IS_UNDEF(&PS(http_session_vars))) {",
          "871:  if (Z_TYPE(session_vars) == IS_NULL) {",
          "872:   array_init(&PS(http_session_vars));",
          "873:  } else {",
          "874:   ZVAL_COPY_VALUE(&PS(http_session_vars), &session_vars);",
          "876:  ZEND_SET_GLOBAL_VAR_WITH_LENGTH(\"_SESSION\", sizeof(\"_SESSION\") - 1, &PS(http_session_vars), 2, 1);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "908:  PHP_VAR_SERIALIZE_INIT(var_hash);",
          "910:  PS_ENCODE_LOOP(",
          "914:    php_var_serialize(&buf, struc, &var_hash TSRMLS_CC);",
          "915:   } else {",
          "919:  );",
          "924:  smart_str_0(&buf);",
          "926:  PHP_VAR_SERIALIZE_DESTROY(var_hash);",
          "929: }",
          "",
          "[Removed Lines]",
          "911:    if (key_length > PS_BIN_MAX) continue;",
          "912:    smart_str_appendc(&buf, (unsigned char) key_length);",
          "913:    smart_str_appendl(&buf, key, key_length);",
          "916:    if (key_length > PS_BIN_MAX) continue;",
          "917:    smart_str_appendc(&buf, (unsigned char) (key_length & PS_BIN_UNDEF));",
          "918:    smart_str_appendl(&buf, key, key_length);",
          "921:  if (newlen) {",
          "923:  }",
          "928:  return SUCCESS;",
          "",
          "[Added Lines]",
          "894:    if (key->len > PS_BIN_MAX) continue;",
          "895:    smart_str_appendc(&buf, (unsigned char)key->len);",
          "896:    smart_str_appendl(&buf, key->val, key->len);",
          "899:    if (key->len > PS_BIN_MAX) continue;",
          "900:    smart_str_appendc(&buf, (unsigned char) (key->len & PS_BIN_UNDEF));",
          "901:    smart_str_appendl(&buf, key->val, key->len);",
          "907:  return buf.s;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "934:  const char *p;",
          "935:  char *name;",
          "936:  const char *endptr = val + vallen;",
          "938:  int namelen;",
          "939:  int has_value;",
          "940:  php_unserialize_data_t var_hash;",
          "",
          "[Removed Lines]",
          "937:  zval *current;",
          "",
          "[Added Lines]",
          "916:  zval current;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "942:  PHP_VAR_UNSERIALIZE_INIT(var_hash);",
          "944:  for (p = val; p < endptr; ) {",
          "946:   namelen = ((unsigned char)(*p)) & (~PS_BIN_UNDEF);",
          "948:   if (namelen < 0 || namelen > PS_BIN_MAX || (p + namelen) >= endptr) {",
          "",
          "[Removed Lines]",
          "945:   zval **tmp;",
          "",
          "[Added Lines]",
          "924:   zval *tmp;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "956:   p += namelen + 1;",
          "960:     efree(name);",
          "961:     continue;",
          "962:    }",
          "963:   }",
          "965:   if (has_value) {",
          "967:    if (php_var_unserialize(&current, (const unsigned char **) &p, (const unsigned char *) endptr, &var_hash TSRMLS_CC)) {",
          "969:    }",
          "970:    zval_ptr_dtor(&current);",
          "971:   }",
          "",
          "[Removed Lines]",
          "958:   if (zend_hash_find(&EG(symbol_table), name, namelen + 1, (void **) &tmp) == SUCCESS) {",
          "959:    if ((Z_TYPE_PP(tmp) == IS_ARRAY && Z_ARRVAL_PP(tmp) == &EG(symbol_table)) || *tmp == PS(http_session_vars)) {",
          "966:    ALLOC_INIT_ZVAL(current);",
          "968:     php_set_session_var(name, namelen, current, &var_hash  TSRMLS_CC);",
          "",
          "[Added Lines]",
          "937:   if ((tmp = zend_hash_str_find(&EG(symbol_table).ht, name, namelen))) {",
          "938:    if ((Z_TYPE_P(tmp) == IS_ARRAY && Z_ARRVAL_P(tmp) == &EG(symbol_table).ht) || tmp == &PS(http_session_vars)) {",
          "946:     php_set_session_var(name, namelen, &current, &var_hash  TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "991:  PHP_VAR_SERIALIZE_INIT(var_hash);",
          "993:  PS_ENCODE_LOOP(",
          "996:     PHP_VAR_SERIALIZE_DESTROY(var_hash);",
          "997:     smart_str_free(&buf);",
          "999:    }",
          "1000:    smart_str_appendc(&buf, PS_DELIMITER);",
          "1002:    php_var_serialize(&buf, struc, &var_hash TSRMLS_CC);",
          "1003:   } else {",
          "1004:    smart_str_appendc(&buf, PS_UNDEF_MARKER);",
          "1006:    smart_str_appendc(&buf, PS_DELIMITER);",
          "1007:  );",
          "1012:  smart_str_0(&buf);",
          "1015:  PHP_VAR_SERIALIZE_DESTROY(var_hash);",
          "1017: }",
          "",
          "[Removed Lines]",
          "994:    smart_str_appendl(&buf, key, key_length);",
          "995:    if (memchr(key, PS_DELIMITER, key_length) || memchr(key, PS_UNDEF_MARKER, key_length)) {",
          "998:     return FAILURE;",
          "1005:    smart_str_appendl(&buf, key, key_length);",
          "1009:  if (newlen) {",
          "1011:  }",
          "1016:  return SUCCESS;",
          "",
          "[Added Lines]",
          "972:    smart_str_appendl(&buf, key->val, key->len);",
          "973:    if (memchr(key->val, PS_DELIMITER, key->len) || memchr(key->val, PS_UNDEF_MARKER, key->len)) {",
          "976:     return NULL;",
          "983:    smart_str_appendl(&buf, key->val, key->len);",
          "990:  return buf.s;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1022:  const char *p, *q;",
          "1023:  char *name;",
          "1024:  const char *endptr = val + vallen;",
          "1026:  int namelen;",
          "1027:  int has_value;",
          "1028:  php_unserialize_data_t var_hash;",
          "",
          "[Removed Lines]",
          "1025:  zval *current;",
          "",
          "[Added Lines]",
          "999:  zval current;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1032:  p = val;",
          "1034:  while (p < endptr) {",
          "1036:   q = p;",
          "1037:   while (*q != PS_DELIMITER) {",
          "1038:    if (++q >= endptr) goto break_outer_loop;",
          "",
          "[Removed Lines]",
          "1035:   zval **tmp;",
          "",
          "[Added Lines]",
          "1009:   zval *tmp;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1048:   name = estrndup(p, namelen);",
          "1049:   q++;",
          "1053:     goto skip;",
          "1054:    }",
          "1055:   }",
          "1057:   if (has_value) {",
          "1059:    if (php_var_unserialize(&current, (const unsigned char **) &q, (const unsigned char *) endptr, &var_hash TSRMLS_CC)) {",
          "1061:    }",
          "1062:    zval_ptr_dtor(&current);",
          "1063:   }",
          "",
          "[Removed Lines]",
          "1051:   if (zend_hash_find(&EG(symbol_table), name, namelen + 1, (void **) &tmp) == SUCCESS) {",
          "1052:    if ((Z_TYPE_PP(tmp) == IS_ARRAY && Z_ARRVAL_PP(tmp) == &EG(symbol_table)) || *tmp == PS(http_session_vars)) {",
          "1058:    ALLOC_INIT_ZVAL(current);",
          "1060:     php_set_session_var(name, namelen, current, &var_hash  TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1025:   if ((tmp = zend_hash_str_find(&EG(symbol_table).ht, name, namelen))) {",
          "1026:    if ((Z_TYPE_P(tmp) == IS_ARRAY && Z_ARRVAL_P(tmp) == &EG(symbol_table).ht) || tmp == &PS(http_session_vars)) {",
          "1033:     php_set_session_var(name, namelen, &current, &var_hash  TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1301: {",
          "1302:  smart_str ncookie = {0};",
          "1306:  if (SG(headers_sent)) {",
          "1307:   const char *output_start_filename = php_output_get_start_filename(TSRMLS_C);",
          "",
          "[Removed Lines]",
          "1303:  char *date_fmt = NULL;",
          "1304:  char *e_session_name, *e_id;",
          "",
          "[Added Lines]",
          "1276:  zend_string *date_fmt = NULL;",
          "1277:  zend_string *e_session_name, *e_id;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1316:  }",
          "1322:  smart_str_appends(&ncookie, COOKIE_SET_COOKIE);",
          "1324:  smart_str_appendc(&ncookie, '=');",
          "1330:  if (PS(cookie_lifetime) > 0) {",
          "1331:   struct timeval tv;",
          "",
          "[Removed Lines]",
          "1319:  e_session_name = php_url_encode(PS(session_name), strlen(PS(session_name)), NULL);",
          "1320:  e_id = php_url_encode(PS(id), strlen(PS(id)), NULL);",
          "1323:  smart_str_appends(&ncookie, e_session_name);",
          "1325:  smart_str_appends(&ncookie, e_id);",
          "1327:  efree(e_session_name);",
          "1328:  efree(e_id);",
          "",
          "[Added Lines]",
          "1292:  e_session_name = php_url_encode(PS(session_name), strlen(PS(session_name)));",
          "1293:  e_id = php_url_encode(PS(id)->val, PS(id)->len);",
          "1296:  smart_str_appendl(&ncookie, e_session_name->val, e_session_name->len);",
          "1298:  smart_str_appendl(&ncookie, e_id->val, e_id->len);",
          "1300:  STR_RELEASE(e_session_name);",
          "1301:  STR_RELEASE(e_id);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1337:   if (t > 0) {",
          "1338:    date_fmt = php_format_date(\"D, d-M-Y H:i:s T\", sizeof(\"D, d-M-Y H:i:s T\")-1, t, 0 TSRMLS_CC);",
          "1339:    smart_str_appends(&ncookie, COOKIE_EXPIRES);",
          "1343:    smart_str_appends(&ncookie, COOKIE_MAX_AGE);",
          "1344:    smart_str_append_long(&ncookie, PS(cookie_lifetime));",
          "",
          "[Removed Lines]",
          "1340:    smart_str_appends(&ncookie, date_fmt);",
          "1341:    efree(date_fmt);",
          "",
          "[Added Lines]",
          "1313:    smart_str_appendl(&ncookie, date_fmt->val, date_fmt->len);",
          "1314:    STR_RELEASE(date_fmt);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1371: }",
          "",
          "[Removed Lines]",
          "1370:  sapi_add_header_ex(ncookie.c, ncookie.len, 0, 0 TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1343:  sapi_add_header_ex(ncookie.s->val, ncookie.s->len, 0, 0 TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1405: #define PPID2SID \\",
          "1410: {",
          "",
          "[Removed Lines]",
          "1406:   convert_to_string((*ppid)); \\",
          "1407:   PS(id) = estrndup(Z_STRVAL_PP(ppid), Z_STRLEN_PP(ppid))",
          "",
          "[Added Lines]",
          "1379:   convert_to_string((ppid)); \\",
          "1380:   PS(id) = STR_INIT(Z_STRVAL_P(ppid), Z_STRLEN_P(ppid), 0)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1421:  }",
          "1426:  if (PS(define_sid)) {",
          "1427:   smart_str var = {0};",
          "1429:   smart_str_appends(&var, PS(session_name));",
          "1430:   smart_str_appendc(&var, '=');",
          "1432:   smart_str_0(&var);",
          "1434:  } else {",
          "1436:  }",
          "1438:  if (PS(apply_trans_sid)) {",
          "1439:   php_url_scanner_reset_vars(TSRMLS_C);",
          "1441:  }",
          "1442: }",
          "1446: {",
          "1449:  char *p, *value;",
          "1450:  int nrand;",
          "1451:  int lensess;",
          "",
          "[Removed Lines]",
          "1424:  zend_hash_del(EG(zend_constants), \"sid\", sizeof(\"sid\"));",
          "1431:   smart_str_appends(&var, PS(id));",
          "1433:   REGISTER_STRINGL_CONSTANT(\"SID\", var.c, var.len, 0);",
          "1435:   REGISTER_STRINGL_CONSTANT(\"SID\", STR_EMPTY_ALLOC(), 0, 0);",
          "1440:   php_url_scanner_add_var(PS(session_name), strlen(PS(session_name)), PS(id), strlen(PS(id)), 1 TSRMLS_CC);",
          "1447:  zval **ppid;",
          "1448:  zval **data;",
          "",
          "[Added Lines]",
          "1397:  zend_hash_str_del(EG(zend_constants), \"sid\", sizeof(\"sid\") - 1);",
          "1404:   smart_str_appends(&var, PS(id)->val);",
          "1406:   REGISTER_STRINGL_CONSTANT(\"SID\", var.s->val, var.s->len, 0);",
          "1408:   REGISTER_STRINGL_CONSTANT(\"SID\", \"\", 0, 0);",
          "1413:   php_url_scanner_add_var(PS(session_name), strlen(PS(session_name)), PS(id)->val, PS(id)->len, 1 TSRMLS_CC);",
          "1420:  zval *ppid;",
          "1421:  zval *data;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1463:    break;",
          "1465:   case php_session_disabled:",
          "1467:    if (!PS(mod) && value) {",
          "1468:     PS(mod) = _php_find_ps_module(value TSRMLS_CC);",
          "1469:     if (!PS(mod)) {",
          "",
          "[Removed Lines]",
          "1466:    value = zend_ini_string(\"session.save_handler\", sizeof(\"session.save_handler\"), 0);",
          "",
          "[Added Lines]",
          "1439:    value = zend_ini_string(\"session.save_handler\", sizeof(\"session.save_handler\") - 1, 0);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1471:      return;",
          "1472:     }",
          "1473:    }",
          "1475:    if (!PS(serializer) && value) {",
          "1476:     PS(serializer) = _php_find_ps_serializer(value TSRMLS_CC);",
          "1477:     if (!PS(serializer)) {",
          "",
          "[Removed Lines]",
          "1474:    value = zend_ini_string(\"session.serialize_handler\", sizeof(\"session.serialize_handler\"), 0);",
          "",
          "[Added Lines]",
          "1447:    value = zend_ini_string(\"session.serialize_handler\", sizeof(\"session.serialize_handler\") - 1, 0);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1496:  if (!PS(id)) {",
          "1500:   ) {",
          "1501:    PPID2SID;",
          "1502:    PS(apply_trans_sid) = 0;",
          "",
          "[Removed Lines]",
          "1497:   if (PS(use_cookies) && zend_hash_find(&EG(symbol_table), \"_COOKIE\", sizeof(\"_COOKIE\"), (void **) &data) == SUCCESS &&",
          "1498:     Z_TYPE_PP(data) == IS_ARRAY &&",
          "1499:     zend_hash_find(Z_ARRVAL_PP(data), PS(session_name), lensess + 1, (void **) &ppid) == SUCCESS",
          "",
          "[Added Lines]",
          "1470:   if (PS(use_cookies) && (data = zend_hash_str_find(&EG(symbol_table).ht, \"_COOKIE\", sizeof(\"_COOKIE\") - 1)) &&",
          "1471:     Z_TYPE_P(data) == IS_ARRAY &&",
          "1472:     (ppid = zend_hash_str_find(Z_ARRVAL_P(data), PS(session_name), lensess))",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1505:   }",
          "1507:   if (!PS(use_only_cookies) && !PS(id) &&",
          "1511:   ) {",
          "1512:    PPID2SID;",
          "1513:    PS(send_cookie) = 0;",
          "1514:   }",
          "1516:   if (!PS(use_only_cookies) && !PS(id) &&",
          "1520:   ) {",
          "1521:    PPID2SID;",
          "1522:    PS(send_cookie) = 0;",
          "",
          "[Removed Lines]",
          "1508:     zend_hash_find(&EG(symbol_table), \"_GET\", sizeof(\"_GET\"), (void **) &data) == SUCCESS &&",
          "1509:     Z_TYPE_PP(data) == IS_ARRAY &&",
          "1510:     zend_hash_find(Z_ARRVAL_PP(data), PS(session_name), lensess + 1, (void **) &ppid) == SUCCESS",
          "1517:     zend_hash_find(&EG(symbol_table), \"_POST\", sizeof(\"_POST\"), (void **) &data) == SUCCESS &&",
          "1518:     Z_TYPE_PP(data) == IS_ARRAY &&",
          "1519:     zend_hash_find(Z_ARRVAL_PP(data), PS(session_name), lensess + 1, (void **) &ppid) == SUCCESS",
          "",
          "[Added Lines]",
          "1481:     (data = zend_hash_str_find(&EG(symbol_table).ht, \"_GET\", sizeof(\"_GET\") - 1)) &&",
          "1482:     Z_TYPE_P(data) == IS_ARRAY &&",
          "1483:     (ppid = zend_hash_str_find(Z_ARRVAL_P(data), PS(session_name), lensess))",
          "1490:     (data = zend_hash_str_find(&EG(symbol_table).ht, \"_POST\", sizeof(\"_POST\") - 1)) &&",
          "1491:     Z_TYPE_P(data) == IS_ARRAY &&",
          "1492:     (ppid = zend_hash_str_find(Z_ARRVAL_P(data), PS(session_name), lensess))",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1534:    p[lensess] == '='",
          "1535:  ) {",
          "1536:   char *q;",
          "1538:   p += lensess + 1;",
          "1539:   if ((q = strpbrk(p, \"/?\\\\\"))) {",
          "1541:    PS(send_cookie) = 0;",
          "1542:   }",
          "1543:  }",
          "",
          "[Removed Lines]",
          "1530:  if (!PS(use_only_cookies) && !PS(id) && PG(http_globals)[TRACK_VARS_SERVER] &&",
          "1531:    zend_hash_find(Z_ARRVAL_P(PG(http_globals)[TRACK_VARS_SERVER]), \"REQUEST_URI\", sizeof(\"REQUEST_URI\"), (void **) &data) == SUCCESS &&",
          "1532:    Z_TYPE_PP(data) == IS_STRING &&",
          "1533:    (p = strstr(Z_STRVAL_PP(data), PS(session_name))) &&",
          "1540:    PS(id) = estrndup(p, q - p);",
          "",
          "[Added Lines]",
          "1503:  if (!PS(use_only_cookies) && !PS(id) && !ZVAL_IS_UNDEF(&PG(http_globals)[TRACK_VARS_SERVER]) &&",
          "1504:    (data = zend_hash_str_find(Z_ARRVAL(PG(http_globals)[TRACK_VARS_SERVER]), \"REQUEST_URI\", sizeof(\"REQUEST_URI\") - 1)) &&",
          "1505:    Z_TYPE_P(data) == IS_STRING &&",
          "1506:    (p = strstr(Z_STRVAL_P(data), PS(session_name))) &&",
          "1513:    PS(id) = STR_INIT(p, q - p, 0);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1548:  if (PS(id) &&",
          "1549:    PS(extern_referer_chk)[0] != '\\0' &&",
          "1555:  ) {",
          "1557:   PS(id) = NULL;",
          "1558:   PS(send_cookie) = 1;",
          "1559:   if (PS(use_trans_sid) && !PS(use_only_cookies)) {",
          "",
          "[Removed Lines]",
          "1550:    PG(http_globals)[TRACK_VARS_SERVER] &&",
          "1551:    zend_hash_find(Z_ARRVAL_P(PG(http_globals)[TRACK_VARS_SERVER]), \"HTTP_REFERER\", sizeof(\"HTTP_REFERER\"), (void **) &data) == SUCCESS &&",
          "1552:    Z_TYPE_PP(data) == IS_STRING &&",
          "1553:    Z_STRLEN_PP(data) != 0 &&",
          "1554:    strstr(Z_STRVAL_PP(data), PS(extern_referer_chk)) == NULL",
          "1556:   efree(PS(id));",
          "",
          "[Added Lines]",
          "1523:    !ZVAL_IS_UNDEF(&PG(http_globals)[TRACK_VARS_SERVER]) &&",
          "1524:    (data = zend_hash_str_find(Z_ARRVAL(PG(http_globals)[TRACK_VARS_SERVER]), \"HTTP_REFERER\", sizeof(\"HTTP_REFERER\") - 1)) &&",
          "1525:    Z_TYPE_P(data) == IS_STRING &&",
          "1526:    Z_STRLEN_P(data) != 0 &&",
          "1527:    strstr(Z_STRVAL_P(data), PS(extern_referer_chk)) == NULL",
          "1529:   STR_RELEASE(PS(id));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1568:   PS(id) = NULL;",
          "1569:  }",
          "",
          "[Removed Lines]",
          "1566:  if (PS(id) && strpbrk(PS(id), \"\\r\\n\\t <>'\\\"\\\\\")) {",
          "1567:   efree(PS(id));",
          "",
          "[Added Lines]",
          "1539:  if (PS(id) && strpbrk(PS(id)->val, \"\\r\\n\\t <>'\\\"\\\\\")) {",
          "1540:   STR_RELEASE(PS(id));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1633: static PHP_FUNCTION(session_set_cookie_params)",
          "1634: {",
          "1636:  char *path = NULL, *domain = NULL;",
          "1637:  int path_len, domain_len, argc = ZEND_NUM_ARGS();",
          "1638:  zend_bool secure = 0, httponly = 0;",
          "1640:  if (!PS(use_cookies) ||",
          "1642:   return;",
          "1643:  }",
          "1645:  convert_to_string_ex(lifetime);",
          "1649:  if (path) {",
          "1651:  }",
          "1652:  if (domain) {",
          "1654:  }",
          "1656:  if (argc > 3) {",
          "1658:  }",
          "1659:  if (argc > 4) {",
          "1661:  }",
          "1662: }",
          "",
          "[Removed Lines]",
          "1635:  zval **lifetime = NULL;",
          "1641:   zend_parse_parameters(argc TSRMLS_CC, \"Z|ssbb\", &lifetime, &path, &path_len, &domain, &domain_len, &secure, &httponly) == FAILURE) {",
          "1647:  zend_alter_ini_entry(\"session.cookie_lifetime\", sizeof(\"session.cookie_lifetime\"), Z_STRVAL_PP(lifetime), Z_STRLEN_PP(lifetime), PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1650:   zend_alter_ini_entry(\"session.cookie_path\", sizeof(\"session.cookie_path\"), path, path_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1653:   zend_alter_ini_entry(\"session.cookie_domain\", sizeof(\"session.cookie_domain\"), domain, domain_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1657:   zend_alter_ini_entry(\"session.cookie_secure\", sizeof(\"session.cookie_secure\"), secure ? \"1\" : \"0\", 1, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1660:   zend_alter_ini_entry(\"session.cookie_httponly\", sizeof(\"session.cookie_httponly\"), httponly ? \"1\" : \"0\", 1, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "",
          "[Added Lines]",
          "1608:  zval *lifetime;",
          "1612:  zend_string *ini_name;",
          "1615:   zend_parse_parameters(argc TSRMLS_CC, \"z|ssbb\", &lifetime, &path, &path_len, &domain, &domain_len, &secure, &httponly) == FAILURE) {",
          "1621:  ini_name = STR_INIT(\"session.cookie_lifetime\", sizeof(\"session.cookie_lifetime\") - 1, 0);",
          "1622:  zend_alter_ini_entry(ini_name,  Z_STRVAL_P(lifetime), Z_STRLEN_P(lifetime), PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1623:  STR_RELEASE(ini_name);",
          "1626:   ini_name = STR_INIT(\"session.cookie_path\", sizeof(\"session.cookie_path\") - 1, 0);",
          "1627:   zend_alter_ini_entry(ini_name, path, path_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1628:   STR_RELEASE(ini_name);",
          "1631:   ini_name = STR_INIT(\"session.cookie_domain\", sizeof(\"session.cookie_domain\") - 1, 0);",
          "1632:   zend_alter_ini_entry(ini_name, domain, domain_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1633:   STR_RELEASE(ini_name);",
          "1637:   ini_name = STR_INIT(\"session.cookie_secure\", sizeof(\"session.cookie_secure\") - 1, 0);",
          "1638:   zend_alter_ini_entry(ini_name, secure ? \"1\" : \"0\", 1, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1639:   STR_RELEASE(ini_name);",
          "1642:   ini_name = STR_INIT(\"session.cookie_httponly\", sizeof(\"session.cookie_httponly\") - 1, 0);",
          "1643:   zend_alter_ini_entry(ini_name, httponly ? \"1\" : \"0\", 1, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1644:   STR_RELEASE(ini_name);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1686: {",
          "1687:  char *name = NULL;",
          "1688:  int name_len;",
          "1690:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|s\", &name, &name_len) == FAILURE) {",
          "1691:   return;",
          "1692:  }",
          "1696:  if (name) {",
          "1698:  }",
          "1699: }",
          "",
          "[Removed Lines]",
          "1694:  RETVAL_STRING(PS(session_name), 1);",
          "1697:   zend_alter_ini_entry(\"session.name\", sizeof(\"session.name\"), name, name_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "",
          "[Added Lines]",
          "1673:  zend_string *ini_name;",
          "1679:  RETVAL_STRING(PS(session_name));",
          "1682:   ini_name = STR_INIT(\"session.name\", sizeof(\"session.name\") - 1, 0);",
          "1683:   zend_alter_ini_entry(ini_name, name, name_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1684:   STR_RELEASE(ini_name);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1705: {",
          "1706:  char *name = NULL;",
          "1707:  int name_len;",
          "1709:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|s\", &name, &name_len) == FAILURE) {",
          "1710:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1695:  zend_string *ini_name;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1714:  if (PS(mod) && PS(mod)->s_name) {",
          "1716:  } else {",
          "1717:   RETVAL_EMPTY_STRING();",
          "1718:  }",
          "",
          "[Removed Lines]",
          "1715:   RETVAL_STRING(safe_estrdup(PS(mod)->s_name), 0);",
          "",
          "[Added Lines]",
          "1703:   RETVAL_STRING(PS(mod)->s_name);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1729:   }",
          "1730:   PS(mod_data) = NULL;",
          "1733:  }",
          "1734: }",
          "",
          "[Removed Lines]",
          "1732:   zend_alter_ini_entry(\"session.save_handler\", sizeof(\"session.save_handler\"), name, name_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "",
          "[Added Lines]",
          "1720:   ini_name = STR_INIT(\"session.save_handler\", sizeof(\"session.save_handler\") - 1, 0);",
          "1721:   zend_alter_ini_entry(ini_name, name, name_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1722:   STR_RELEASE(ini_name);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1740: {",
          "1741:  char *name = NULL;",
          "1742:  int name_len;",
          "1744:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|s\", &name, &name_len) == FAILURE) {",
          "1745:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1733:  zend_string *ini_name;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1749:  if (!name) {",
          "1751:  }",
          "1756:  } else {",
          "1758:  }",
          "1759: }",
          "",
          "[Removed Lines]",
          "1750:   RETURN_STRING(zend_ini_string(\"session.serialize_handler\", sizeof(\"session.serialize_handler\"), 0), 1);",
          "1754:  if (zend_alter_ini_entry(\"session.serialize_handler\", sizeof(\"session.serialize_handler\"), name, name_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME) == SUCCESS) {",
          "1755:   RETURN_TRUE;",
          "1757:   RETURN_FALSE;",
          "",
          "[Added Lines]",
          "1741:   RETURN_STRING(zend_ini_string(\"session.serialize_handler\", sizeof(\"session.serialize_handler\") - 1, 0));",
          "1744:  ini_name = STR_INIT(\"session.serialize_handler\", sizeof(\"session.serialize_handler\") - 1, 0);",
          "1746:  if (zend_alter_ini_entry(ini_name, name, name_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME) == SUCCESS) {",
          "1747:   RETVAL_TRUE;",
          "1749:   RETVAL_FALSE;",
          "1751:  STR_RELEASE(ini_name);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1764: static PHP_FUNCTION(session_set_save_handler)",
          "1765: {",
          "1767:  int i, num_args, argc = ZEND_NUM_ARGS();",
          "1770:  if (PS(session_status) != php_session_none) {",
          "1771:   RETURN_FALSE;",
          "1772:  }",
          "1774:  if (argc > 0 && argc <= 2) {",
          "1778:   HashPosition pos;",
          "1779:   zend_function *default_mptr, *current_mptr;",
          "1780:   ulong func_index;",
          "",
          "[Removed Lines]",
          "1766:  zval ***args = NULL;",
          "1768:  char *name;",
          "1775:   zval *obj = NULL, *callback = NULL;",
          "1776:   zend_uint func_name_len;",
          "1777:   char *func_name;",
          "",
          "[Added Lines]",
          "1759:  zval *args = NULL;",
          "1761:  zend_string *name;",
          "1762:  zend_string *ini_name;",
          "1769:   zval *obj = NULL;",
          "1770:   zend_string *func_name;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1789:   zend_hash_internal_pointer_reset_ex(&php_session_iface_entry->function_table, &pos);",
          "1790:   i = 0;",
          "1796:      zval_ptr_dtor(&PS(mod_user_names).names[i]);",
          "1797:     }",
          "1801:     Z_ADDREF_P(obj);",
          "1805:    } else {",
          "1806:     php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Session handler's function table is corrupt\");",
          "1807:     RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1791:   while (zend_hash_get_current_data_ex(&php_session_iface_entry->function_table, (void **) &default_mptr, &pos) == SUCCESS) {",
          "1792:    zend_hash_get_current_key_ex(&php_session_iface_entry->function_table, &func_name, &func_name_len, &func_index, 0, &pos);",
          "1794:    if (zend_hash_find(&Z_OBJCE_P(obj)->function_table, func_name, func_name_len, (void **)&current_mptr) == SUCCESS) {",
          "1795:     if (PS(mod_user_names).names[i] != NULL) {",
          "1799:     MAKE_STD_ZVAL(callback);",
          "1800:     array_init_size(callback, 2);",
          "1802:     add_next_index_zval(callback, obj);",
          "1803:     add_next_index_stringl(callback, func_name, func_name_len - 1, 1);",
          "1804:     PS(mod_user_names).names[i] = callback;",
          "",
          "[Added Lines]",
          "1784:   while ((default_mptr = zend_hash_get_current_data_ptr_ex(&php_session_iface_entry->function_table, &pos))) {",
          "1785:    zend_hash_get_current_key_ex(&php_session_iface_entry->function_table, &func_name, &func_index, 0, &pos);",
          "1787:    if ((current_mptr = zend_hash_find_ptr(&Z_OBJCE_P(obj)->function_table, func_name))) {",
          "1788:     if (!ZVAL_IS_UNDEF(&PS(mod_user_names).names[i])) {",
          "1792:     array_init_size(&PS(mod_user_names).names[i], 2);",
          "1794:     add_next_index_zval(&PS(mod_user_names).names[i], obj);",
          "1795:     add_next_index_str(&PS(mod_user_names).names[i], func_name);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1815:   zend_hash_internal_pointer_reset_ex(&php_session_id_iface_entry->function_table, &pos);",
          "1821:      zval_ptr_dtor(&PS(mod_user_names).names[i]);",
          "1822:     }",
          "1826:     Z_ADDREF_P(obj);",
          "1830:    }",
          "1832:    zend_hash_move_forward_ex(&php_session_id_iface_entry->function_table, &pos);",
          "",
          "[Removed Lines]",
          "1816:   while (zend_hash_get_current_data_ex(&php_session_id_iface_entry->function_table, (void **) &default_mptr, &pos) == SUCCESS) {",
          "1817:    zend_hash_get_current_key_ex(&php_session_id_iface_entry->function_table, &func_name, &func_name_len, &func_index, 0, &pos);",
          "1819:    if (zend_hash_find(&Z_OBJCE_P(obj)->function_table, func_name, func_name_len, (void **)&current_mptr) == SUCCESS) {",
          "1820:     if (PS(mod_user_names).names[i] != NULL) {",
          "1824:     MAKE_STD_ZVAL(callback);",
          "1825:     array_init_size(callback, 2);",
          "1827:     add_next_index_zval(callback, obj);",
          "1828:     add_next_index_stringl(callback, func_name, func_name_len - 1, 1);",
          "1829:     PS(mod_user_names).names[i] = callback;",
          "",
          "[Added Lines]",
          "1807:   while ((default_mptr = zend_hash_get_current_data_ptr_ex(&php_session_id_iface_entry->function_table, &pos))) {",
          "1808:    zend_hash_get_current_key_ex(&php_session_id_iface_entry->function_table, &func_name, &func_index, 0, &pos);",
          "1810:    if ((current_mptr = zend_hash_find_ptr(&Z_OBJCE_P(obj)->function_table, func_name))) {",
          "1811:     if (!ZVAL_IS_UNDEF(&PS(mod_user_names).names[i])) {",
          "1815:     array_init_size(&PS(mod_user_names).names[i], 2);",
          "1817:     add_next_index_zval(&PS(mod_user_names).names[i], obj);",
          "1818:     add_next_index_str(&PS(mod_user_names).names[i], func_name);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1836:   if (register_shutdown) {",
          "1838:    shutdown_function_entry.arg_count = 1;",
          "1848:     efree(shutdown_function_entry.arguments);",
          "1849:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Unable to register session shutdown function\");",
          "1850:     RETURN_FALSE;",
          "1851:    }",
          "1852:   } else {",
          "1855:   }",
          "1857:   if (PS(mod) && PS(session_status) == php_session_none && PS(mod) != &ps_mod_user) {",
          "1859:   }",
          "1861:   RETURN_TRUE;",
          "",
          "[Removed Lines]",
          "1839:    shutdown_function_entry.arguments = (zval **) safe_emalloc(sizeof(zval *), 1, 0);",
          "1841:    MAKE_STD_ZVAL(callback);",
          "1842:    ZVAL_STRING(callback, \"session_register_shutdown\", 1);",
          "1843:    shutdown_function_entry.arguments[0] = callback;",
          "1846:    if (!register_user_shutdown_function(\"session_shutdown\", sizeof(\"session_shutdown\"), &shutdown_function_entry TSRMLS_CC)) {",
          "1847:     zval_ptr_dtor(&callback);",
          "1854:    remove_user_shutdown_function(\"session_shutdown\", sizeof(\"session_shutdown\") TSRMLS_CC);",
          "1858:    zend_alter_ini_entry(\"session.save_handler\", sizeof(\"session.save_handler\"), \"user\", sizeof(\"user\")-1, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "",
          "[Added Lines]",
          "1828:    shutdown_function_entry.arguments = (zval *) safe_emalloc(sizeof(zval), 1, 0);",
          "1830:    ZVAL_STRING(&shutdown_function_entry.arguments[0], \"session_register_shutdown\");",
          "1833:    if (!register_user_shutdown_function(\"session_shutdown\", sizeof(\"session_shutdown\") - 1, &shutdown_function_entry TSRMLS_CC)) {",
          "1834:     zval_ptr_dtor(&shutdown_function_entry.arguments[0]);",
          "1841:    remove_user_shutdown_function(\"session_shutdown\", sizeof(\"session_shutdown\") - 1 TSRMLS_CC);",
          "1845:    ini_name = STR_INIT(\"session.save_handler\", sizeof(\"session.save_handler\") - 1, 0);",
          "1846:    zend_alter_ini_entry(ini_name, \"user\", sizeof(\"user\") - 1, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1847:    STR_RELEASE(ini_name);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1870:  }",
          "1876:  for (i = 0; i < argc; i++) {",
          "1878:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Argument %d is not a valid callback\", i+1);",
          "1880:    RETURN_FALSE;",
          "1881:   }",
          "1883:  }",
          "1885:  if (PS(mod) && PS(mod) != &ps_mod_user) {",
          "1887:  }",
          "1889:  for (i = 0; i < argc; i++) {",
          "1891:    zval_ptr_dtor(&PS(mod_user_names).names[i]);",
          "1892:   }",
          "1895:  }",
          "1897:  RETURN_TRUE;",
          "",
          "[Removed Lines]",
          "1873:  remove_user_shutdown_function(\"session_shutdown\", sizeof(\"session_shutdown\") TSRMLS_CC);",
          "1877:   if (!zend_is_callable(*args[i], 0, &name TSRMLS_CC)) {",
          "1879:    efree(name);",
          "1882:   efree(name);",
          "1886:   zend_alter_ini_entry(\"session.save_handler\", sizeof(\"session.save_handler\"), \"user\", sizeof(\"user\")-1, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1890:   if (PS(mod_user_names).names[i] != NULL) {",
          "1893:   Z_ADDREF_PP(args[i]);",
          "1894:   PS(mod_user_names).names[i] = *args[i];",
          "",
          "[Added Lines]",
          "1862:  remove_user_shutdown_function(\"session_shutdown\", sizeof(\"session_shutdown\") - 1 TSRMLS_CC);",
          "1866:   if (!zend_is_callable(&args[i], 0, &name TSRMLS_CC)) {",
          "1868:    STR_RELEASE(name);",
          "1871:   STR_RELEASE(name);",
          "1875:   ini_name = STR_INIT(\"session.save_handler\", sizeof(\"session.save_handler\") - 1, 0);",
          "1876:   zend_alter_ini_entry(ini_name, \"user\", sizeof(\"user\")-1, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1877:   STR_RELEASE(ini_name);",
          "1881:   if (!ZVAL_IS_UNDEF(&PS(mod_user_names).names[i])) {",
          "1884:   ZVAL_COPY(&PS(mod_user_names).names[i], &args[i]);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1904: {",
          "1905:  char *name = NULL;",
          "1906:  int name_len;",
          "1908:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|s\", &name, &name_len) == FAILURE) {",
          "1909:   return;",
          "1910:  }",
          "1914:  if (name) {",
          "1915:   if (memchr(name, '\\0', name_len) != NULL) {",
          "",
          "[Removed Lines]",
          "1912:  RETVAL_STRING(PS(save_path), 1);",
          "",
          "[Added Lines]",
          "1897:  zend_string *ini_name;",
          "1903:  RETVAL_STRING(PS(save_path));",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1917:    zval_dtor(return_value);",
          "1918:    RETURN_FALSE;",
          "1919:   }",
          "1921:  }",
          "1922: }",
          "",
          "[Removed Lines]",
          "1920:   zend_alter_ini_entry(\"session.save_path\", sizeof(\"session.save_path\"), name, name_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "",
          "[Added Lines]",
          "1911:   ini_name = STR_INIT(\"session.save_path\", sizeof(\"session.save_path\") - 1, 0);",
          "1912:   zend_alter_ini_entry(ini_name, name, name_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1913:   STR_RELEASE(ini_name);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1934:  }",
          "1936:  if (PS(id)) {",
          "1938:  } else {",
          "1939:   RETVAL_EMPTY_STRING();",
          "1940:  }",
          "1942:  if (name) {",
          "1943:   if (PS(id)) {",
          "1945:   }",
          "1947:  }",
          "1948: }",
          "",
          "[Removed Lines]",
          "1937:   RETVAL_STRING(PS(id), 1);",
          "1944:    efree(PS(id));",
          "1946:   PS(id) = estrndup(name, name_len);",
          "",
          "[Added Lines]",
          "1930:   RETVAL_STR(STR_COPY(PS(id)));",
          "1937:    STR_RELEASE(PS(id));",
          "1939:   PS(id) = STR_INIT(name, name_len, 0);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1969:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Session object destruction failed\");",
          "1970:     RETURN_FALSE;",
          "1971:    }",
          "1973:    PS(id) = NULL;",
          "1974:   }",
          "1977:   if (PS(id)) {",
          "1978:    PS(send_cookie) = 1;",
          "1979:    php_session_reset_id(TSRMLS_C);",
          "",
          "[Removed Lines]",
          "1972:    efree(PS(id));",
          "1976:   PS(id) = PS(mod)->s_create_sid(&PS(mod_data), NULL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1965:    STR_RELEASE(PS(id));",
          "1969:   PS(id) = PS(mod)->s_create_sid(&PS(mod_data) TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1992: {",
          "1993:  char *limiter = NULL;",
          "1994:  int limiter_len;",
          "1996:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|s\", &limiter, &limiter_len) == FAILURE) {",
          "1997:   return;",
          "1998:  }",
          "2002:  if (limiter) {",
          "2004:  }",
          "2005: }",
          "",
          "[Removed Lines]",
          "2000:  RETVAL_STRING(PS(cache_limiter), 1);",
          "2003:   zend_alter_ini_entry(\"session.cache_limiter\", sizeof(\"session.cache_limiter\"), limiter, limiter_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "",
          "[Added Lines]",
          "1988:  zend_string *ini_name;",
          "1994:  RETVAL_STRING(PS(cache_limiter));",
          "1997:   ini_name = STR_INIT(\"session.cache_limiter\", sizeof(\"session.cache_limiter\") - 1, 0);",
          "1998:   zend_alter_ini_entry(ini_name, limiter, limiter_len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
          "1999:   STR_RELEASE(ini_name);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2010: static PHP_FUNCTION(session_cache_expire)",
          "2011: {",
          "2016:   return;",
          "2017:  }",
          "2019:  RETVAL_LONG(PS(cache_expire));",
          "2022:   convert_to_string_ex(expires);",
          "2024:  }",
          "2025: }",
          "",
          "[Removed Lines]",
          "2012:  zval **expires = NULL;",
          "2013:  int argc = ZEND_NUM_ARGS();",
          "2015:  if (zend_parse_parameters(argc TSRMLS_CC, \"|Z\", &expires) == FAILURE) {",
          "2021:  if (argc == 1) {",
          "2023:   zend_alter_ini_entry(\"session.cache_expire\", sizeof(\"session.cache_expire\"), Z_STRVAL_PP(expires), Z_STRLEN_PP(expires), ZEND_INI_USER, ZEND_INI_STAGE_RUNTIME);",
          "",
          "[Added Lines]",
          "2008:  zval *expires = NULL;",
          "2009:  zend_string *ini_name;",
          "2011:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|z\", &expires) == FAILURE) {",
          "2017:  if (expires) {",
          "2019:   ini_name = STR_INIT(\"session.cache_expire\", sizeof(\"session.cache_expire\") - 1, 0);",
          "2020:   zend_alter_ini_entry(ini_name, Z_STRVAL_P(expires), Z_STRLEN_P(expires), ZEND_INI_USER, ZEND_INI_STAGE_RUNTIME);",
          "2021:   STR_RELEASE(ini_name);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2030: static PHP_FUNCTION(session_encode)",
          "2031: {",
          "2035:  if (zend_parse_parameters_none() == FAILURE) {",
          "2036:   return;",
          "2037:  }",
          "2040:  if (enc == NULL) {",
          "2041:   RETURN_FALSE;",
          "2042:  }",
          "2045: }",
          "",
          "[Removed Lines]",
          "2032:  int len;",
          "2033:  char *enc;",
          "2039:  enc = php_session_encode(&len TSRMLS_CC);",
          "2044:  RETVAL_STRINGL(enc, len, 0);",
          "",
          "[Added Lines]",
          "2030:  zend_string *enc;",
          "2036:  enc = php_session_encode(TSRMLS_C);",
          "2041:  RETURN_STR(enc);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2104:   HashTable *ht_sess_var;",
          "2106:   SEPARATE_ZVAL_IF_NOT_REF(&PS(http_session_vars));",
          "2110:   zend_hash_clean(ht_sess_var);",
          "",
          "[Removed Lines]",
          "2107:   ht_sess_var = Z_ARRVAL_P(PS(http_session_vars));",
          "",
          "[Added Lines]",
          "2104:   ht_sess_var = Z_ARRVAL(PS(http_session_vars));",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2186: static PHP_FUNCTION(session_register_shutdown)",
          "2187: {",
          "2188:  php_shutdown_function_entry shutdown_function_entry;",
          "",
          "[Removed Lines]",
          "2189:  zval *callback;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2198:  shutdown_function_entry.arg_count = 1;",
          "2205:  if (!append_user_shutdown_function(shutdown_function_entry TSRMLS_CC)) {",
          "2207:   efree(shutdown_function_entry.arguments);",
          "",
          "[Removed Lines]",
          "2199:  shutdown_function_entry.arguments = (zval **) safe_emalloc(sizeof(zval *), 1, 0);",
          "2201:  MAKE_STD_ZVAL(callback);",
          "2202:  ZVAL_STRING(callback, \"session_write_close\", 1);",
          "2203:  shutdown_function_entry.arguments[0] = callback;",
          "2206:   zval_ptr_dtor(&callback);",
          "",
          "[Added Lines]",
          "2195:  shutdown_function_entry.arguments = (zval *) safe_emalloc(sizeof(zval), 1, 0);",
          "2197:  ZVAL_STRING(&shutdown_function_entry.arguments[0], \"session_write_close\");",
          "2200:   zval_ptr_dtor(&shutdown_function_entry.arguments[0]);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2385:  if (PS(mod) == NULL) {",
          "2386:   char *value;",
          "2389:   if (value) {",
          "2390:    PS(mod) = _php_find_ps_module(value TSRMLS_CC);",
          "2391:   }",
          "",
          "[Removed Lines]",
          "2388:   value = zend_ini_string(\"session.save_handler\", sizeof(\"session.save_handler\"), 0);",
          "",
          "[Added Lines]",
          "2382:   value = zend_ini_string(\"session.save_handler\", sizeof(\"session.save_handler\") - 1, 0);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2394:  if (PS(serializer) == NULL) {",
          "2395:   char *value;",
          "2398:   if (value) {",
          "2399:    PS(serializer) = _php_find_ps_serializer(value TSRMLS_CC);",
          "2400:   }",
          "",
          "[Removed Lines]",
          "2397:   value = zend_ini_string(\"session.serialize_handler\", sizeof(\"session.serialize_handler\"), 0);",
          "",
          "[Added Lines]",
          "2391:   value = zend_ini_string(\"session.serialize_handler\", sizeof(\"session.serialize_handler\") - 1, 0);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2432:  for (i = 0; i < 7; i++) {",
          "2434:    zval_ptr_dtor(&PS(mod_user_names).names[i]);",
          "2436:   }",
          "2437:  }",
          "",
          "[Removed Lines]",
          "2433:   if (PS(mod_user_names).names[i] != NULL) {",
          "2435:    PS(mod_user_names).names[i] = NULL;",
          "",
          "[Added Lines]",
          "2427:   if (!ZVAL_IS_UNDEF(&PS(mod_user_names).names[i])) {",
          "2429:    ZVAL_UNDEF(&PS(mod_user_names).names[i]);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2455:  ps_globals->mod_user_implemented = 0;",
          "2456:  ps_globals->mod_user_is_open = 0;",
          "2457:  for (i = 0; i < 7; i++) {",
          "2459:  }",
          "2461: }",
          "",
          "[Removed Lines]",
          "2458:   ps_globals->mod_user_names.names[i] = NULL;",
          "2460:  ps_globals->http_session_vars = NULL;",
          "",
          "[Added Lines]",
          "2452:   ZVAL_UNDEF(&ps_globals->mod_user_names.names[i]);",
          "2454:  ZVAL_UNDEF(&ps_globals->http_session_vars);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2465: {",
          "2466:  zend_class_entry ce;",
          "",
          "[Removed Lines]",
          "2468:  zend_register_auto_global(\"_SESSION\", sizeof(\"_SESSION\")-1, 0, NULL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2462:  zend_string *sess_var = STR_INIT(\"_SESSION\", sizeof(\"_SESSION\") - 1, 0);",
          "2463:  zend_register_auto_global(sess_var, 0, NULL TSRMLS_CC);",
          "2464:  STR_RELEASE(sess_var);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2549:  php_info_print_table_start();",
          "2550:  php_info_print_table_row(2, \"Session Support\", \"enabled\" );",
          "2553:   smart_str_0(&save_handlers);",
          "2555:   smart_str_free(&save_handlers);",
          "2556:  } else {",
          "2557:   php_info_print_table_row(2, \"Registered save handlers\", \"none\");",
          "2558:  }",
          "2561:   smart_str_0(&ser_handlers);",
          "2563:   smart_str_free(&ser_handlers);",
          "2564:  } else {",
          "2565:   php_info_print_table_row(2, \"Registered serializer handlers\", \"none\");",
          "",
          "[Removed Lines]",
          "2552:  if (save_handlers.c) {",
          "2554:   php_info_print_table_row(2, \"Registered save handlers\", save_handlers.c);",
          "2560:  if (ser_handlers.c) {",
          "2562:   php_info_print_table_row(2, \"Registered serializer handlers\", ser_handlers.c);",
          "",
          "[Added Lines]",
          "2548:  if (save_handlers.s) {",
          "2550:   php_info_print_table_row(2, \"Registered save handlers\", save_handlers.s->val);",
          "2556:  if (ser_handlers.s) {",
          "2558:   php_info_print_table_row(2, \"Registered serializer handlers\", ser_handlers.s->val);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2586: {",
          "2590:   return 0;",
          "2591:  }",
          "2595:   zval_dtor(dest);",
          "2597:   return 1;",
          "2598:  }",
          "",
          "[Removed Lines]",
          "2587:  zval **ppid;",
          "2589:  if (!PG(http_globals)[where]) {",
          "2593:  if (zend_hash_find(Z_ARRVAL_P(PG(http_globals)[where]), PS(session_name), progress->sname_len+1, (void **)&ppid) == SUCCESS",
          "2594:    && Z_TYPE_PP(ppid) == IS_STRING) {",
          "2596:   ZVAL_ZVAL(dest, *ppid, 1, 0);",
          "",
          "[Added Lines]",
          "2583:  zval *ppid;",
          "2585:  if (ZVAL_IS_UNDEF(&PG(http_globals)[where])) {",
          "2589:  if ((ppid = zend_hash_str_find(Z_ARRVAL(PG(http_globals)[where]), PS(session_name), progress->sname_len))",
          "2590:    && Z_TYPE_P(ppid) == IS_STRING) {",
          "2592:   ZVAL_ZVAL(dest, ppid, 1, 0);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2621: {",
          "2625:   return 0;",
          "2626:  }",
          "2628:   return 0;",
          "2629:  }",
          "2631:   return 0;",
          "2632:  }",
          "2637: {",
          "2638:  if (!force_update) {",
          "2640:    return;",
          "2641:   }",
          "2642: #ifdef HAVE_GETTIMEOFDAY",
          "",
          "[Removed Lines]",
          "2622:  zval **progress_ary, **cancel_upload;",
          "2624:  if (zend_symtable_find(Z_ARRVAL_P(PS(http_session_vars)), progress->key.c, progress->key.len+1, (void**)&progress_ary) != SUCCESS) {",
          "2627:  if (Z_TYPE_PP(progress_ary) != IS_ARRAY) {",
          "2630:  if (zend_hash_find(Z_ARRVAL_PP(progress_ary), \"cancel_upload\", sizeof(\"cancel_upload\"), (void**)&cancel_upload) != SUCCESS) {",
          "2633:  return Z_TYPE_PP(cancel_upload) == IS_BOOL && Z_LVAL_PP(cancel_upload);",
          "2639:   if (Z_LVAL_P(progress->post_bytes_processed) < progress->next_update) {",
          "",
          "[Added Lines]",
          "2618:  zval *progress_ary, *cancel_upload;",
          "2620:  if ((progress_ary = zend_symtable_find(Z_ARRVAL(PS(http_session_vars)), progress->key.s)) == NULL) {",
          "2623:  if (Z_TYPE_P(progress_ary) != IS_ARRAY) {",
          "2626:  if ((cancel_upload = zend_hash_str_find(Z_ARRVAL_P(progress_ary), \"cancel_upload\", sizeof(\"cancel_upload\") - 1)) == NULL) {",
          "2629:  return Z_TYPE_P(cancel_upload) == IS_BOOL && Z_LVAL_P(cancel_upload);",
          "2635:   if (Z_LVAL(progress->post_bytes_processed) < progress->next_update) {",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2651:    progress->next_update_time = dtv + PS(rfc1867_min_freq);",
          "2652:   }",
          "2653: #endif",
          "2655:  }",
          "2657:  php_session_initialize(TSRMLS_C);",
          "2658:  PS(session_status) = php_session_active;",
          "2659:  IF_SESSION_VARS() {",
          "2660:   progress->cancel_upload |= php_check_cancel_upload(progress TSRMLS_CC);",
          "2662:  }",
          "2663:  php_session_flush(TSRMLS_C);",
          "",
          "[Removed Lines]",
          "2654:   progress->next_update = Z_LVAL_P(progress->post_bytes_processed) + progress->update_step;",
          "2661:   ZEND_SET_SYMBOL_WITH_LENGTH(Z_ARRVAL_P(PS(http_session_vars)), progress->key.c, progress->key.len+1, progress->data, 2, 0);",
          "",
          "[Added Lines]",
          "2650:   progress->next_update = Z_LVAL(progress->post_bytes_processed) + progress->update_step;",
          "2657:   ZEND_SET_SYMBOL_WITH_LENGTH(Z_ARRVAL(PS(http_session_vars)), progress->key.s->val, progress->key.s->len, &progress->data, 2, 0);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2668:  php_session_initialize(TSRMLS_C);",
          "2669:  PS(session_status) = php_session_active;",
          "2670:  IF_SESSION_VARS() {",
          "2672:  }",
          "2673:  php_session_flush(TSRMLS_C);",
          "",
          "[Removed Lines]",
          "2671:   zend_hash_del(Z_ARRVAL_P(PS(http_session_vars)), progress->key.c, progress->key.len+1);",
          "",
          "[Added Lines]",
          "2667:   zend_hash_del(Z_ARRVAL(PS(http_session_vars)), progress->key.s);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2700:    multipart_event_formdata *data = (multipart_event_formdata *) event_data;",
          "2701:    size_t value_len;",
          "2704:     break;",
          "2705:    }",
          "",
          "[Removed Lines]",
          "2703:    if (Z_TYPE(progress->sid) && progress->key.c) {",
          "",
          "[Added Lines]",
          "2699:    if (Z_TYPE(progress->sid) && progress->key.s) {",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2717:     if (name_len == progress->sname_len && memcmp(data->name, PS(session_name), name_len) == 0) {",
          "2718:      zval_dtor(&progress->sid);",
          "2722:      smart_str_free(&progress->key);",
          "2724:      smart_str_appendl(&progress->key, *data->value, value_len);",
          "2725:      smart_str_0(&progress->key);",
          "",
          "[Removed Lines]",
          "2719:      ZVAL_STRINGL(&progress->sid, (*data->value), value_len, 1);",
          "2721:     } else if (name_len == PS(rfc1867_name).len && memcmp(data->name, PS(rfc1867_name).c, name_len) == 0) {",
          "2723:      smart_str_appendl(&progress->key, PS(rfc1867_prefix).c, PS(rfc1867_prefix).len);",
          "",
          "[Added Lines]",
          "2715:      ZVAL_STRINGL(&progress->sid, (*data->value), value_len);",
          "2716:     } else if (name_len == PS(rfc1867_name).s->len && memcmp(data->name, PS(rfc1867_name).s->val, name_len) == 0) {",
          "2718:      smart_str_appendl(&progress->key, PS(rfc1867_prefix).s->val, PS(rfc1867_prefix).s->len);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2739:     break;",
          "2740:    }",
          "2745:     if (PS(rfc1867_freq) >= 0) {",
          "2746:      progress->update_step = PS(rfc1867_freq);",
          "",
          "[Removed Lines]",
          "2738:    if (!Z_TYPE(progress->sid) || !progress->key.c) {",
          "2743:    if (!progress->data) {",
          "",
          "[Added Lines]",
          "2733:    if (!Z_TYPE(progress->sid) || !progress->key.s) {",
          "2738:    if (ZVAL_IS_NULL(&progress->data)) {",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2750:     progress->next_update = 0;",
          "2751:     progress->next_update_time = 0.0;",
          "2768:     php_rinit_session(0 TSRMLS_CC);",
          "2770:     PS(apply_trans_sid) = progress->apply_trans_sid;",
          "2771:     PS(send_cookie) = 0;",
          "2772:    }",
          "2794:    php_session_rfc1867_update(progress, 0 TSRMLS_CC);",
          "2795:   }",
          "",
          "[Removed Lines]",
          "2753:     ALLOC_INIT_ZVAL(progress->data);",
          "2754:     array_init(progress->data);",
          "2756:     ALLOC_INIT_ZVAL(progress->post_bytes_processed);",
          "2757:     ZVAL_LONG(progress->post_bytes_processed, data->post_bytes_processed);",
          "2759:     ALLOC_INIT_ZVAL(progress->files);",
          "2760:     array_init(progress->files);",
          "2762:     add_assoc_long_ex(progress->data, \"start_time\",      sizeof(\"start_time\"),      (long)sapi_get_request_time(TSRMLS_C));",
          "2763:     add_assoc_long_ex(progress->data, \"content_length\",  sizeof(\"content_length\"),  progress->content_length);",
          "2764:     add_assoc_zval_ex(progress->data, \"bytes_processed\", sizeof(\"bytes_processed\"), progress->post_bytes_processed);",
          "2765:     add_assoc_bool_ex(progress->data, \"done\",            sizeof(\"done\"),            0);",
          "2766:     add_assoc_zval_ex(progress->data, \"files\",           sizeof(\"files\"),           progress->files);",
          "2769:     PS(id) = estrndup(Z_STRVAL(progress->sid), Z_STRLEN(progress->sid));",
          "2774:    ALLOC_INIT_ZVAL(progress->current_file);",
          "2775:    array_init(progress->current_file);",
          "2777:    ALLOC_INIT_ZVAL(progress->current_file_bytes_processed);",
          "2778:    ZVAL_LONG(progress->current_file_bytes_processed, 0);",
          "2781:    add_assoc_string_ex(progress->current_file, \"field_name\",    sizeof(\"field_name\"),      data->name, 1);",
          "2782:    add_assoc_string_ex(progress->current_file, \"name\",          sizeof(\"name\"),            *data->filename, 1);",
          "2783:    add_assoc_null_ex(progress->current_file, \"tmp_name\",        sizeof(\"tmp_name\"));",
          "2784:    add_assoc_long_ex(progress->current_file, \"error\",           sizeof(\"error\"),           0);",
          "2786:    add_assoc_bool_ex(progress->current_file, \"done\",            sizeof(\"done\"),            0);",
          "2787:    add_assoc_long_ex(progress->current_file, \"start_time\",      sizeof(\"start_time\"),      (long)time(NULL));",
          "2788:    add_assoc_zval_ex(progress->current_file, \"bytes_processed\", sizeof(\"bytes_processed\"), progress->current_file_bytes_processed);",
          "2790:    add_next_index_zval(progress->files, progress->current_file);",
          "2792:    Z_LVAL_P(progress->post_bytes_processed) = data->post_bytes_processed;",
          "",
          "[Added Lines]",
          "2748:     array_init(&progress->data);",
          "2750:     ZVAL_LONG(&progress->post_bytes_processed, data->post_bytes_processed);",
          "2752:     array_init(&progress->files);",
          "2754:     add_assoc_long_ex(&progress->data, \"start_time\", sizeof(\"start_time\") - 1, (long)sapi_get_request_time(TSRMLS_C));",
          "2755:     add_assoc_long_ex(&progress->data, \"content_length\",  sizeof(\"content_length\"), progress->content_length);",
          "2756:     add_assoc_zval_ex(&progress->data, \"bytes_processed\", sizeof(\"bytes_processed\") - 1, &progress->post_bytes_processed);",
          "2757:     add_assoc_bool_ex(&progress->data, \"done\", sizeof(\"done\") - 1, 0);",
          "2758:     add_assoc_zval_ex(&progress->data, \"files\", sizeof(\"files\") - 1, &progress->files);",
          "2761:     PS(id) = STR_INIT(Z_STRVAL(progress->sid), Z_STRLEN(progress->sid), 0);",
          "2766:    array_init(&progress->current_file);",
          "2767:    ZVAL_LONG(&progress->current_file_bytes_processed, 0);",
          "2770:    add_assoc_string_ex(&progress->current_file, \"field_name\", sizeof(\"field_name\") - 1, data->name, 1);",
          "2771:    add_assoc_string_ex(&progress->current_file, \"name\", sizeof(\"name\") - 1, *data->filename, 1);",
          "2772:    add_assoc_null_ex(&progress->current_file, \"tmp_name\", sizeof(\"tmp_name\") - 1);",
          "2773:    add_assoc_long_ex(&progress->current_file, \"error\", sizeof(\"error\") - 1, 0);",
          "2775:    add_assoc_bool_ex(&progress->current_file, \"done\", sizeof(\"done\") - 1, 0);",
          "2776:    add_assoc_long_ex(&progress->current_file, \"start_time\", sizeof(\"start_time\") - 1, (long)time(NULL));",
          "2777:    add_assoc_zval_ex(&progress->current_file, \"bytes_processed\", sizeof(\"bytes_processed\") - 1, &progress->current_file_bytes_processed);",
          "2779:    add_next_index_zval(&progress->files, &progress->current_file);",
          "2781:    Z_LVAL(progress->post_bytes_processed) = data->post_bytes_processed;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2797:   case MULTIPART_EVENT_FILE_DATA: {",
          "2798:    multipart_event_file_data *data = (multipart_event_file_data *) event_data;",
          "2801:     break;",
          "2802:    }",
          "2807:    php_session_rfc1867_update(progress, 0 TSRMLS_CC);",
          "2808:   }",
          "",
          "[Removed Lines]",
          "2800:    if (!Z_TYPE(progress->sid) || !progress->key.c) {",
          "2804:    Z_LVAL_P(progress->current_file_bytes_processed) = data->offset + data->length;",
          "2805:    Z_LVAL_P(progress->post_bytes_processed) = data->post_bytes_processed;",
          "",
          "[Added Lines]",
          "2789:    if (!Z_TYPE(progress->sid) || !progress->key.s) {",
          "2793:    Z_LVAL(progress->current_file_bytes_processed) = data->offset + data->length;",
          "2794:    Z_LVAL(progress->post_bytes_processed) = data->post_bytes_processed;",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2810:   case MULTIPART_EVENT_FILE_END: {",
          "2811:    multipart_event_file_end *data = (multipart_event_file_end *) event_data;",
          "2814:     break;",
          "2815:    }",
          "2817:    if (data->temp_filename) {",
          "2819:    }",
          "2825:    php_session_rfc1867_update(progress, 0 TSRMLS_CC);",
          "2826:   }",
          "",
          "[Removed Lines]",
          "2813:    if (!Z_TYPE(progress->sid) || !progress->key.c) {",
          "2818:     add_assoc_string_ex(progress->current_file, \"tmp_name\",  sizeof(\"tmp_name\"), data->temp_filename, 1);",
          "2820:    add_assoc_long_ex(progress->current_file, \"error\", sizeof(\"error\"), data->cancel_upload);",
          "2821:    add_assoc_bool_ex(progress->current_file, \"done\",  sizeof(\"done\"),  1);",
          "2823:    Z_LVAL_P(progress->post_bytes_processed) = data->post_bytes_processed;",
          "",
          "[Added Lines]",
          "2802:    if (!Z_TYPE(progress->sid) || !progress->key.s) {",
          "2807:     add_assoc_string_ex(&progress->current_file, \"tmp_name\",  sizeof(\"tmp_name\") - 1, data->temp_filename, 1);",
          "2809:    add_assoc_long_ex(&progress->current_file, \"error\", sizeof(\"error\") - 1, data->cancel_upload);",
          "2810:    add_assoc_bool_ex(&progress->current_file, \"done\", sizeof(\"done\") - 1,  1);",
          "2812:    Z_LVAL(progress->post_bytes_processed) = data->post_bytes_processed;",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2828:   case MULTIPART_EVENT_END: {",
          "2829:    multipart_event_end *data = (multipart_event_end *) event_data;",
          "2832:     if (PS(rfc1867_cleanup)) {",
          "2833:      php_session_rfc1867_cleanup(progress TSRMLS_CC);",
          "2834:     } else {",
          "2837:      php_session_rfc1867_update(progress, 1 TSRMLS_CC);",
          "2838:     }",
          "2839:     php_rshutdown_session_globals(TSRMLS_C);",
          "2840:    }",
          "2843:     zval_ptr_dtor(&progress->data);",
          "2844:    }",
          "2846:    smart_str_free(&progress->key);",
          "2847:    efree(progress);",
          "2848:    progress = NULL;",
          "",
          "[Removed Lines]",
          "2831:    if (Z_TYPE(progress->sid) && progress->key.c) {",
          "2835:      add_assoc_bool_ex(progress->data, \"done\", sizeof(\"done\"), 1);",
          "2836:      Z_LVAL_P(progress->post_bytes_processed) = data->post_bytes_processed;",
          "2842:    if (progress->data) {",
          "2845:    zval_dtor(&progress->sid);",
          "",
          "[Added Lines]",
          "2820:    if (Z_TYPE(progress->sid) && progress->key.s) {",
          "2824:      add_assoc_bool_ex(&progress->data, \"done\", sizeof(\"done\") - 1, 1);",
          "2825:      Z_LVAL(progress->post_bytes_processed) = data->post_bytes_processed;",
          "2831:    if (!ZVAL_IS_UNDEF(&progress->data)) {",
          "2834:    zval_ptr_dtor(&progress->sid);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61156f0d68704df748b5cbf08c77582c208db8c9",
      "candidate_info": {
        "commit_hash": "61156f0d68704df748b5cbf08c77582c208db8c9",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/61156f0d68704df748b5cbf08c77582c208db8c9",
        "files": [
          "ext/session/session.c",
          "ext/session/tests/bug72681.phpt"
        ],
        "message": "Fix bug #72681 - consume data even if we're not storing them",
        "before_after_code_files": [
          "ext/session/session.c||ext/session/session.c",
          "ext/session/tests/bug72681.phpt||ext/session/tests/bug72681.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ext/session/session.c||ext/session/session.c",
            "ext/session/tests/bug72681.phpt||ext/session/tests/bug72681.phpt"
          ],
          "candidate": [
            "ext/session/session.c||ext/session/session.c",
            "ext/session/tests/bug72681.phpt||ext/session/tests/bug72681.phpt"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/session.c||ext/session/session.c": [
          "File: ext/session/session.c -> ext/session/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "924:  int namelen;",
          "925:  int has_value;",
          "926:  php_unserialize_data_t var_hash;",
          "928:  PHP_VAR_UNSERIALIZE_INIT(var_hash);",
          "930:  for (p = val; p < endptr; ) {",
          "931:   zval **tmp;",
          "932:   namelen = ((unsigned char)(*p)) & (~PS_BIN_UNDEF);",
          "934:   if (namelen < 0 || namelen > PS_BIN_MAX || (p + namelen) >= endptr) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927:  int skip = 0;",
          "933:   skip = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "945:   if (zend_hash_find(&EG(symbol_table), name, namelen + 1, (void **) &tmp) == SUCCESS) {",
          "946:    if ((Z_TYPE_PP(tmp) == IS_ARRAY && Z_ARRVAL_PP(tmp) == &EG(symbol_table)) || *tmp == PS(http_session_vars)) {",
          "949:    }",
          "950:   }",
          "952:   if (has_value) {",
          "953:    ALLOC_INIT_ZVAL(current);",
          "954:    if (php_var_unserialize(&current, (const unsigned char **) &p, (const unsigned char *) endptr, &var_hash TSRMLS_CC)) {",
          "956:    } else {",
          "957:     PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "958:     return FAILURE;",
          "959:    }",
          "960:    var_push_dtor_no_addref(&var_hash, &current);",
          "961:   }",
          "963:   efree(name);",
          "964:  }",
          "",
          "[Removed Lines]",
          "947:     efree(name);",
          "948:     continue;",
          "955:     php_set_session_var(name, namelen, current, &var_hash  TSRMLS_CC);",
          "962:   PS_ADD_VARL(name, namelen);",
          "",
          "[Added Lines]",
          "949:     skip = 1;",
          "956:     if (!skip) {",
          "957:      php_set_session_var(name, namelen, current, &var_hash  TSRMLS_CC);",
          "958:     }",
          "965:   if (!skip) {",
          "966:    PS_ADD_VARL(name, namelen);",
          "967:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1016:  int namelen;",
          "1017:  int has_value;",
          "1018:  php_unserialize_data_t var_hash;",
          "1020:  PHP_VAR_UNSERIALIZE_INIT(var_hash);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1024:  int skip = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1024:  while (p < endptr) {",
          "1025:   zval **tmp;",
          "1026:   q = p;",
          "1027:   while (*q != PS_DELIMITER) {",
          "1028:    if (++q >= endptr) goto break_outer_loop;",
          "1029:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1033:   skip = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1041:   if (zend_hash_find(&EG(symbol_table), name, namelen + 1, (void **) &tmp) == SUCCESS) {",
          "1042:    if ((Z_TYPE_PP(tmp) == IS_ARRAY && Z_ARRVAL_PP(tmp) == &EG(symbol_table)) || *tmp == PS(http_session_vars)) {",
          "1044:    }",
          "1045:   }",
          "1047:   if (has_value) {",
          "1048:    ALLOC_INIT_ZVAL(current);",
          "1049:    if (php_var_unserialize(&current, (const unsigned char **) &q, (const unsigned char *) endptr, &var_hash TSRMLS_CC)) {",
          "1051:    } else {",
          "1052:     var_push_dtor_no_addref(&var_hash, &current);",
          "1053:     efree(name);",
          "",
          "[Removed Lines]",
          "1043:     goto skip;",
          "1050:     php_set_session_var(name, namelen, current, &var_hash  TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1050:     skip = 1;",
          "1057:     if (!skip) {",
          "1058:      php_set_session_var(name, namelen, current, &var_hash  TSRMLS_CC);",
          "1059:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1056:    }",
          "1057:    var_push_dtor_no_addref(&var_hash, &current);",
          "1058:   }",
          "1060: skip:",
          "1061:   efree(name);",
          "",
          "[Removed Lines]",
          "1059:   PS_ADD_VARL(name, namelen);",
          "",
          "[Added Lines]",
          "1068:   if (!skip) {",
          "1069:    PS_ADD_VARL(name, namelen);",
          "1070:   }",
          "",
          "---------------"
        ],
        "ext/session/tests/bug72681.phpt||ext/session/tests/bug72681.phpt": [
          "File: ext/session/tests/bug72681.phpt -> ext/session/tests/bug72681.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72681: PHP Session Data Injection Vulnerability",
          "3: --SKIPIF--",
          "4: <?php include('skipif.inc'); ?>",
          "5: --FILE--",
          "6: <?php",
          "7: ini_set('session.serialize_handler', 'php');",
          "8: session_start();",
          "9: $_SESSION['_SESSION'] = 'ryat|O:8:\"stdClass\":0:{}';",
          "10: session_write_close();",
          "11: session_start();",
          "12: var_dump($_SESSION);",
          "13: ?>",
          "14: --EXPECT--",
          "15: array(0) {",
          "16: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}