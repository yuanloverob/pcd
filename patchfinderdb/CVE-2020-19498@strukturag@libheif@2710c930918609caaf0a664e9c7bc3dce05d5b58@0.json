{
  "cve_id": "CVE-2020-19498",
  "cve_desc": "Floating point exception in function Fraction in libheif 1.4.0, allows attackers to cause a Denial of Service or possibly other unspecified impacts.",
  "repo": "strukturag/libheif",
  "patch_hash": "2710c930918609caaf0a664e9c7bc3dce05d5b58",
  "patch_info": {
    "commit_hash": "2710c930918609caaf0a664e9c7bc3dce05d5b58",
    "repo": "strukturag/libheif",
    "commit_url": "https://github.com/strukturag/libheif/commit/2710c930918609caaf0a664e9c7bc3dce05d5b58",
    "files": [
      "libheif/box.cc",
      "libheif/heif_limits.h"
    ],
    "message": "force fraction to a limited resolution to finally solve those pesky numerical edge cases",
    "before_after_code_files": [
      "libheif/box.cc||libheif/box.cc",
      "libheif/heif_limits.h||libheif/heif_limits.h"
    ]
  },
  "patch_diff": {
    "libheif/box.cc||libheif/box.cc": [
      "File: libheif/box.cc -> libheif/box.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "64: Fraction::Fraction(int32_t num,int32_t den)",
      "65: {",
      "91:   }",
      "92: }",
      "",
      "[Removed Lines]",
      "43: static int32_t gcd(int a, int b)",
      "44: {",
      "45:   if (a == 0 && b == 0) {",
      "46:     return 1;",
      "47:   }",
      "49:   if (a == 0) return b;",
      "50:   if (b == 0) return a;",
      "52:   int32_t h;",
      "54:   do {",
      "55:     h = a % b;",
      "56:     a = b;",
      "57:     b = h;",
      "58:   } while (b != 0);",
      "60:   return a;",
      "61: }",
      "66:   int32_t g = gcd(num, den);",
      "71:   if (num == std::numeric_limits<int32_t>::min() && g == -1) {",
      "72:     num++;",
      "73:   }",
      "75:   if (den == std::numeric_limits<int32_t>::min() && g == -1) {",
      "76:     den++;",
      "77:   }",
      "80:   numerator = num / g;",
      "81:   denominator = den / g;",
      "88:   while (denominator > MAX_FRACTION_DENOMINATOR) {",
      "89:     numerator >>= 1;",
      "90:     denominator >>= 1;",
      "",
      "[Added Lines]",
      "49:   while (denominator > MAX_FRACTION_VALUE || denominator < -MAX_FRACTION_VALUE) {",
      "50:     numerator /= 2;",
      "51:     denominator /= 2;",
      "52:   }",
      "54:   while (numerator > MAX_FRACTION_VALUE || numerator < -MAX_FRACTION_VALUE) {",
      "55:     numerator /= 2;",
      "56:     denominator /= 2;",
      "",
      "---------------"
    ],
    "libheif/heif_limits.h||libheif/heif_limits.h": [
      "File: libheif/heif_limits.h -> libheif/heif_limits.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "47: static const int MAX_BOX_SIZE = 0x7FFFFFFF; // 2 GB",
      "48: static const int64_t MAX_LARGE_BOX_SIZE = 0x0FFFFFFFFFFFFFFF;",
      "49: static const int64_t MAX_FILE_POS = 0x007FFFFFFFFFFFFFLL; // maximum file position",
      "52: #endif  // LIBHEIF_HEIF_LIMITS_H",
      "",
      "[Removed Lines]",
      "50: static const int MAX_FRACTION_DENOMINATOR = 0x10000;",
      "",
      "[Added Lines]",
      "50: static const int MAX_FRACTION_VALUE = 0x10000;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c95d019ff813aa48c267326dca5f51c0f7ad3ab7",
      "candidate_info": {
        "commit_hash": "c95d019ff813aa48c267326dca5f51c0f7ad3ab7",
        "repo": "strukturag/libheif",
        "commit_url": "https://github.com/strukturag/libheif/commit/c95d019ff813aa48c267326dca5f51c0f7ad3ab7",
        "files": [
          "libheif/box.cc",
          "libheif/box.h",
          "libheif/heif_limits.h"
        ],
        "message": "Fix oss-fuzz issue 13627. Limit resolution of fractions, otherwise leading to an integer overflow.",
        "before_after_code_files": [
          "libheif/box.cc||libheif/box.cc",
          "libheif/box.h||libheif/box.h",
          "libheif/heif_limits.h||libheif/heif_limits.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libheif/box.cc||libheif/box.cc",
            "libheif/heif_limits.h||libheif/heif_limits.h"
          ],
          "candidate": [
            "libheif/box.cc||libheif/box.cc",
            "libheif/heif_limits.h||libheif/heif_limits.h"
          ]
        }
      },
      "candidate_diff": {
        "libheif/box.cc||libheif/box.cc": [
          "File: libheif/box.cc -> libheif/box.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: Fraction Fraction::operator+(const Fraction& b) const",
          "44: {",
          "45:   if (denominator == b.denominator) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: static int gcd(int a, int b)",
          "44: {",
          "45:   int h;",
          "46:   if (a == 0) return b;",
          "47:   if (b == 0) return a;",
          "49:   do {",
          "50:     h = a % b;",
          "51:     a = b;",
          "52:     b = h;",
          "53:   } while (b != 0);",
          "55:   return a;",
          "56: }",
          "59: Fraction::Fraction(int num,int den)",
          "60: {",
          "61:   int g = gcd(num, den);",
          "62:   numerator = num / g;",
          "63:   denominator = den / g;",
          "70:   while (denominator > MAX_FRACTION_DENOMINATOR) {",
          "71:     numerator >>= 1;",
          "72:     denominator >>= 1;",
          "73:   }",
          "74: }",
          "",
          "---------------"
        ],
        "libheif/box.h||libheif/box.h": [
          "File: libheif/box.h -> libheif/box.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   class Fraction {",
          "67:   public:",
          "68:     Fraction() { }",
          "71:     Fraction operator+(const Fraction&) const;",
          "72:     Fraction operator-(const Fraction&) const;",
          "",
          "[Removed Lines]",
          "69:   Fraction(int num,int den) : numerator(num), denominator(den) { }",
          "",
          "[Added Lines]",
          "69:     Fraction(int num,int den);",
          "",
          "---------------"
        ],
        "libheif/heif_limits.h||libheif/heif_limits.h": [
          "File: libheif/heif_limits.h -> libheif/heif_limits.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: static const int MAX_BOX_SIZE = 0x7FFFFFFF; // 2 GB",
          "48: static const int64_t MAX_LARGE_BOX_SIZE = 0x0FFFFFFFFFFFFFFF;",
          "49: static const int64_t MAX_FILE_POS = 0x007FFFFFFFFFFFFFLL; // maximum file position",
          "51: #endif  // LIBHEIF_HEIF_LIMITS_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: static const int MAX_FRACTION_DENOMINATOR = 0x10000;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c3dff7cdeff48d7fdeb33c3f563e69e5bc8c363",
      "candidate_info": {
        "commit_hash": "5c3dff7cdeff48d7fdeb33c3f563e69e5bc8c363",
        "repo": "strukturag/libheif",
        "commit_url": "https://github.com/strukturag/libheif/commit/5c3dff7cdeff48d7fdeb33c3f563e69e5bc8c363",
        "files": [
          "libheif/box.cc",
          "libheif/box.h"
        ],
        "message": "fix division of smallest possible negative number by -1",
        "before_after_code_files": [
          "libheif/box.cc||libheif/box.cc",
          "libheif/box.h||libheif/box.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libheif/box.cc||libheif/box.cc"
          ],
          "candidate": [
            "libheif/box.cc||libheif/box.cc"
          ]
        }
      },
      "candidate_diff": {
        "libheif/box.cc||libheif/box.cc": [
          "File: libheif/box.cc -> libheif/box.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: {",
          "46:   if (a == 0) return b;",
          "47:   if (b == 0) return a;",
          "49:   do {",
          "50:     h = a % b;",
          "51:     a = b;",
          "",
          "[Removed Lines]",
          "43: static int gcd(int a, int b)",
          "45:   int h;",
          "",
          "[Added Lines]",
          "43: static int32_t gcd(int a, int b)",
          "45:   if (a == 0 && b == 0) {",
          "46:     return 1;",
          "47:   }",
          "52:   int32_t h;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: }",
          "60: {",
          "62:   numerator = num / g;",
          "63:   denominator = den / g;",
          "",
          "[Removed Lines]",
          "59: Fraction::Fraction(int num,int den)",
          "61:   int g = gcd(num, den);",
          "",
          "[Added Lines]",
          "64: Fraction::Fraction(int32_t num,int32_t den)",
          "66:   int32_t g = gcd(num, den);",
          "71:   if (num == std::numeric_limits<int32_t>::min() && g == -1) {",
          "72:     num++;",
          "73:   }",
          "75:   if (den == std::numeric_limits<int32_t>::min() && g == -1) {",
          "76:     den++;",
          "77:   }",
          "",
          "---------------"
        ],
        "libheif/box.h||libheif/box.h": [
          "File: libheif/box.h -> libheif/box.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   class Fraction {",
          "67:   public:",
          "68:     Fraction() { }",
          "71:     Fraction operator+(const Fraction&) const;",
          "72:     Fraction operator-(const Fraction&) const;",
          "73:     Fraction operator-(int) const;",
          "74:     Fraction operator/(int) const;",
          "80:     bool is_valid() const;",
          "84:   };",
          "",
          "[Removed Lines]",
          "69:     Fraction(int num,int den);",
          "76:     int round_down() const;",
          "77:     int round_up() const;",
          "78:     int round() const;",
          "82:     int numerator = 0;",
          "83:     int denominator = 1;",
          "",
          "[Added Lines]",
          "69:     Fraction(int32_t num,int32_t den);",
          "76:     int32_t round_down() const;",
          "77:     int32_t round_up() const;",
          "78:     int32_t round() const;",
          "82:     int32_t numerator = 0;",
          "83:     int32_t denominator = 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}