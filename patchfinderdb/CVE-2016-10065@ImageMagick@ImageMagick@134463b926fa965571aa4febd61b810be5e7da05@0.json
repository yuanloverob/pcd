{
  "cve_id": "CVE-2016-10065",
  "cve_desc": "The ReadVIFFImage function in coders/viff.c in ImageMagick before 7.0.1-0 allows remote attackers to cause a denial of service (application crash) or have other unspecified impact via a crafted file.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "134463b926fa965571aa4febd61b810be5e7da05",
  "patch_info": {
    "commit_hash": "134463b926fa965571aa4febd61b810be5e7da05",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/134463b926fa965571aa4febd61b810be5e7da05",
    "files": [
      "MagickCore/memory.c",
      "MagickCore/quantum-import.c",
      "coders/viff.c"
    ],
    "message": "https://github.com/ImageMagick/ImageMagick/issues/129",
    "before_after_code_files": [
      "MagickCore/memory.c||MagickCore/memory.c",
      "MagickCore/quantum-import.c||MagickCore/quantum-import.c",
      "coders/viff.c||coders/viff.c"
    ]
  },
  "patch_diff": {
    "MagickCore/memory.c||MagickCore/memory.c": [
      "File: MagickCore/memory.c -> MagickCore/memory.c"
    ],
    "MagickCore/quantum-import.c||MagickCore/quantum-import.c": [
      "File: MagickCore/quantum-import.c -> MagickCore/quantum-import.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2024:   unsigned int",
      "2025:     pixel;",
      "2027:   assert(image != (Image *) NULL);",
      "2028:   assert(image->signature == MagickCoreSignature);",
      "2029:   switch (quantum_info->depth)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2027:   assert(image != (Image *) NULL);",
      "",
      "---------------"
    ],
    "coders/viff.c||coders/viff.c": [
      "File: coders/viff.c -> coders/viff.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "137: %      the image cannot be read.",
      "138: %",
      "139: %    o image_info: the image info.",
      "140: %",
      "141: %    o exception: return any errors or warnings in this structure.",
      "142: %",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "141: %    o exception: return any errors or warnings in this structure.",
      "142: %",
      "145: static MagickBooleanType CheckMemoryOverflow(const size_t count,",
      "146:   const size_t quantum)",
      "147: {",
      "148:   size_t",
      "149:     size;",
      "151:   size=count*quantum;",
      "152:   if ((count == 0) || (quantum != (size/count)))",
      "153:     {",
      "154:       errno=ENOMEM;",
      "155:       return(MagickTrue);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "475:       }",
      "476:       default:",
      "477:         ThrowReaderException(CoderError,\"ColormapTypeNotSupported\");",
      "480:       Initialize image structure.",
      "",
      "[Removed Lines]",
      "478:     }",
      "",
      "[Added Lines]",
      "494:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "499:       case VFF_TYP_2_BYTE: bytes_per_pixel=2; break;",
      "500:       case VFF_TYP_4_BYTE: bytes_per_pixel=4; break;",
      "501:       case VFF_TYP_FLOAT: bytes_per_pixel=4; break;",
      "503:       default: bytes_per_pixel=1; break;",
      "505:     if (viff_info.data_storage_type == VFF_TYP_BIT)",
      "506:       max_packets=((image->columns+7UL) >> 3UL)*image->rows;",
      "507:     else",
      "",
      "[Removed Lines]",
      "502:       case VFF_TYP_DOUBLE: bytes_per_pixel=8; break;",
      "504:     }",
      "",
      "[Added Lines]",
      "518:       case VFF_TYP_DOUBLE: bytes_per_pixel=8; break;",
      "519:       default: bytes_per_pixel=1; break;",
      "520:     }",
      "521:     if (viff_info.data_storage_type == VFF_TYP_BIT)",
      "522:       {",
      "524:           ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
      "525:         max_packets=((image->columns+7UL) >> 3UL)*image->rows;",
      "526:       }",
      "527:     else",
      "528:       {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e45e48b881038487d0bc94d92a16c1537616cc0a",
      "candidate_info": {
        "commit_hash": "e45e48b881038487d0bc94d92a16c1537616cc0a",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/e45e48b881038487d0bc94d92a16c1537616cc0a",
        "files": [
          "MagickCore/Makefile.am",
          "MagickCore/exception.c",
          "MagickCore/memory-private.h",
          "MagickCore/memory.c",
          "Makefile.in",
          "coders/label.c",
          "coders/viff.c",
          "configure"
        ],
        "message": "Suspend exception processing if too many exceptions",
        "before_after_code_files": [
          "MagickCore/Makefile.am||MagickCore/Makefile.am",
          "MagickCore/exception.c||MagickCore/exception.c",
          "MagickCore/memory-private.h||MagickCore/memory-private.h",
          "MagickCore/memory.c||MagickCore/memory.c",
          "Makefile.in||Makefile.in",
          "coders/label.c||coders/label.c",
          "coders/viff.c||coders/viff.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/memory.c||MagickCore/memory.c",
            "coders/viff.c||coders/viff.c"
          ],
          "candidate": [
            "MagickCore/memory.c||MagickCore/memory.c",
            "coders/viff.c||coders/viff.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/Makefile.am||MagickCore/Makefile.am": [
          "File: MagickCore/Makefile.am -> MagickCore/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: MAGICKCORE_BASE_SRCS = \\",
          "66:  MagickCore/MagickCore.h \\",
          "67:  MagickCore/accelerate.c \\",
          "69:  MagickCore/accelerate-private.h \\",
          "70:  MagickCore/animate.c \\",
          "71:  MagickCore/animate.h \\",
          "",
          "[Removed Lines]",
          "68:  MagickCore/accelerate.h \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314: MAGICKCORE_INCLUDE_HDRS = \\",
          "315:  MagickCore/MagickCore.h \\",
          "317:  MagickCore/animate.h \\",
          "318:  MagickCore/annotate.h \\",
          "319:  MagickCore/artifact.h \\",
          "",
          "[Removed Lines]",
          "316:  MagickCore/accelerate.h \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MagickCore/exception.c||MagickCore/exception.c": [
          "File: MagickCore/exception.c -> MagickCore/exception.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: #endif",
          "76:   Global declarations.",
          "78: static ErrorHandler",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:   Global declarations.",
          "78: #define MaxExceptions  128",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194: %",
          "195: %    o exception: the exception info.",
          "196: %",
          "198: MagickExport void CatchException(ExceptionInfo *exception)",
          "199: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202: %",
          "204: MagickExport void CatchException(ExceptionInfo *exception)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:   assert(exception != (ExceptionInfo *) NULL);",
          "204:   assert(exception->signature == MagickCoreSignature);",
          "206:     return;",
          "211:   while (p != (const ExceptionInfo *) NULL)",
          "212:   {",
          "213:     if ((p->severity >= WarningException) && (p->severity < ErrorException))",
          "",
          "[Removed Lines]",
          "205:   if (exception->exceptions  == (void *) NULL)",
          "207:   LockSemaphoreInfo(exception->semaphore);",
          "208:   ResetLinkedListIterator((LinkedListInfo *) exception->exceptions);",
          "209:   p=(const ExceptionInfo *) GetNextValueInLinkedList((LinkedListInfo *)",
          "210:     exception->exceptions);",
          "",
          "[Added Lines]",
          "213:   assert(exception->signature == MagickCoreSignature);",
          "215:     return;",
          "216:   LockSemaphoreInfo(exception->semaphore);",
          "217:   ResetLinkedListIterator((LinkedListInfo *) exception->exceptions);",
          "218:   p=(const ExceptionInfo *) GetNextValueInLinkedList((LinkedListInfo *)",
          "219:     exception->exceptions);",
          "220:   for (i=0; p != (const ExceptionInfo *) NULL; i++)",
          "221:   {",
          "222:     if (i < MaxExceptions)",
          "223:       {",
          "224:         if ((p->severity >= WarningException) && (p->severity < ErrorException))",
          "225:           MagickWarning(p->severity,p->reason,p->description);",
          "226:         if ((p->severity >= ErrorException) &&",
          "",
          "---------------"
        ],
        "MagickCore/memory-private.h||MagickCore/memory-private.h": [
          "File: MagickCore/memory-private.h -> MagickCore/memory-private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #define MagickAssumeAligned(address)  (address)",
          "43: #endif",
          "45: #if defined(__cplusplus) || defined(c_plusplus)",
          "46: }",
          "47: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: MagickExport MagickBooleanType",
          "46:   HeapOverflowSanityCheck(const size_t,const size_t) magick_alloc_sizes(1,2);",
          "",
          "---------------"
        ],
        "MagickCore/memory.c||MagickCore/memory.c": [
          "File: MagickCore/memory.c -> MagickCore/memory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: %      void *AcquireAlignedMemory(const size_t count,const size_t quantum)",
          "234: %",
          "235: %  A description of each parameter follows:",
          "236: %",
          "252:       errno=ENOMEM;",
          "253:       return(MagickTrue);",
          "254:     }",
          "",
          "[Removed Lines]",
          "237: %    o count: the number of quantum elements to allocate.",
          "238: %",
          "239: %    o quantum: the number of bytes in each quantum.",
          "240: %",
          "243: static MagickBooleanType CheckMemoryOverflow(const size_t count,",
          "244:   const size_t quantum)",
          "245: {",
          "246:   size_t",
          "247:     size;",
          "249:   size=count*quantum;",
          "250:   if ((count == 0) || (quantum != (size/count)))",
          "251:     {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:   size_t",
          "264:     alignment,",
          "266:     size;",
          "268:   void",
          "",
          "[Removed Lines]",
          "265:     extent,",
          "",
          "[Added Lines]",
          "249:     extent,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "543: %  A description of each parameter follows:",
          "544: %",
          "545: %    o count: the number of quantum elements to allocate.",
          "547: %    o quantum: the number of bytes in each quantum.",
          "548: %",
          "",
          "[Removed Lines]",
          "546: %",
          "",
          "[Added Lines]",
          "530: %",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "583: %",
          "584: %    o quantum: the number of bytes in each quantum.",
          "585: %",
          "587: MagickExport MemoryInfo *AcquireVirtualMemory(const size_t count,",
          "588:   const size_t quantum)",
          "589: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "916: %      void *GetVirtualMemoryBlob(const MemoryInfo *memory_info)",
          "917: %",
          "918: %  A description of each parameter follows:",
          "919: %",
          "920: %    o memory_info: The MemoryInfo structure.",
          "922: MagickExport void *GetVirtualMemoryBlob(const MemoryInfo *memory_info)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903: %",
          "904: %    o memory_info: The MemoryInfo structure.",
          "906: MagickExport void *GetVirtualMemoryBlob(const MemoryInfo *memory_info)",
          "907: {",
          "908:   assert(memory_info != (const MemoryInfo *) NULL);",
          "909:   assert(memory_info->signature == MagickCoreSignature);",
          "910:   return(memory_info->blob);",
          "911: }",
          "915: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "916: %                                                                             %",
          "917: %                                                                             %",
          "918: %                                                                             %",
          "919: +   H e a p O v e r f l o w S a n i t y C h e c k                             %",
          "920: %                                                                             %",
          "921: %                                                                             %",
          "922: %                                                                             %",
          "923: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "924: %",
          "925: %  HeapOverflowSanityCheck() returns MagickTrue if the heap allocation request",
          "926: %  does not exceed the maximum limits of a size_t otherwise MagickFalse.",
          "927: %",
          "928: %  The format of the HeapOverflowSanityCheck method is:",
          "929: %",
          "930: %      MagickBooleanType HeapOverflowSanityCheck(const size_t count,",
          "931: %        const size_t quantum)",
          "932: %",
          "933: %  A description of each parameter follows:",
          "934: %",
          "935: %    o size: the size of the memory in bytes we require.",
          "936: %",
          "938: MagickExport MagickBooleanType HeapOverflowSanityCheck(const size_t count,",
          "939:   const size_t quantum)",
          "940: {",
          "941:   size_t",
          "942:     size;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1221: %  ResizeQuantumMemory() changes the size of the memory and returns a pointer",
          "1222: %  to the (possibly moved) block.  The contents will be unchanged up to the",
          "1223: %  lesser of the new and old sizes.",
          "1225: %  The format of the ResizeQuantumMemory method is:",
          "1226: %",
          "1227: %      void *ResizeQuantumMemory(void *memory,const size_t count,",
          "",
          "[Removed Lines]",
          "1224: %",
          "",
          "[Added Lines]",
          "1247: %  lesser of the new and old sizes.",
          "",
          "---------------"
        ],
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "391: am__DEPENDENCIES_1 =",
          "392: am__MagickCore_libMagickCore_@MAGICK_MAJOR_VERSION@_@MAGICK_ABI_SUFFIX@_la_SOURCES_DIST =  \\",
          "393:  MagickCore/MagickCore.h MagickCore/accelerate.c \\",
          "423:  MagickCore/distribute-cache-private.h MagickCore/draw.c \\",
          "424:  MagickCore/draw.h MagickCore/draw-private.h \\",
          "425:  MagickCore/effect.c MagickCore/effect.h MagickCore/enhance.c \\",
          "",
          "[Removed Lines]",
          "394:  MagickCore/accelerate.h MagickCore/accelerate-private.h \\",
          "395:  MagickCore/animate.c MagickCore/animate.h \\",
          "396:  MagickCore/animate-private.h MagickCore/annotate.c \\",
          "397:  MagickCore/annotate.h MagickCore/artifact.c \\",
          "398:  MagickCore/artifact.h MagickCore/attribute.c \\",
          "399:  MagickCore/attribute.h MagickCore/blob.c MagickCore/blob.h \\",
          "400:  MagickCore/blob-private.h MagickCore/cache.c \\",
          "401:  MagickCore/cache.h MagickCore/cache-private.h \\",
          "402:  MagickCore/cache-view.c MagickCore/cache-view.h \\",
          "403:  MagickCore/channel.c MagickCore/channel.h MagickCore/cipher.c \\",
          "404:  MagickCore/cipher.h MagickCore/client.c MagickCore/client.h \\",
          "405:  MagickCore/coder.c MagickCore/coder.h MagickCore/color.c \\",
          "406:  MagickCore/color.h MagickCore/color-private.h \\",
          "407:  MagickCore/colormap.c MagickCore/colormap.h \\",
          "408:  MagickCore/colormap-private.h MagickCore/colorspace.c \\",
          "409:  MagickCore/colorspace.h MagickCore/colorspace-private.h \\",
          "410:  MagickCore/compare.c MagickCore/compare.h \\",
          "411:  MagickCore/composite.c MagickCore/composite.h \\",
          "412:  MagickCore/composite-private.h MagickCore/compress.c \\",
          "413:  MagickCore/compress.h MagickCore/configure.c \\",
          "414:  MagickCore/configure.h MagickCore/constitute.c \\",
          "415:  MagickCore/constitute.h MagickCore/decorate.c \\",
          "416:  MagickCore/decorate.h MagickCore/delegate.c \\",
          "417:  MagickCore/delegate.h MagickCore/delegate-private.h \\",
          "418:  MagickCore/deprecate.c MagickCore/deprecate.h \\",
          "419:  MagickCore/display.c MagickCore/display.h \\",
          "420:  MagickCore/display-private.h MagickCore/distort.c \\",
          "421:  MagickCore/distort.h MagickCore/distribute-cache.c \\",
          "422:  MagickCore/distribute-cache.h \\",
          "",
          "[Added Lines]",
          "394:  MagickCore/accelerate-private.h MagickCore/animate.c \\",
          "395:  MagickCore/animate.h MagickCore/animate-private.h \\",
          "396:  MagickCore/annotate.c MagickCore/annotate.h \\",
          "397:  MagickCore/artifact.c MagickCore/artifact.h \\",
          "398:  MagickCore/attribute.c MagickCore/attribute.h \\",
          "399:  MagickCore/blob.c MagickCore/blob.h MagickCore/blob-private.h \\",
          "400:  MagickCore/cache.c MagickCore/cache.h \\",
          "401:  MagickCore/cache-private.h MagickCore/cache-view.c \\",
          "402:  MagickCore/cache-view.h MagickCore/channel.c \\",
          "403:  MagickCore/channel.h MagickCore/cipher.c MagickCore/cipher.h \\",
          "404:  MagickCore/client.c MagickCore/client.h MagickCore/coder.c \\",
          "405:  MagickCore/coder.h MagickCore/color.c MagickCore/color.h \\",
          "406:  MagickCore/color-private.h MagickCore/colormap.c \\",
          "407:  MagickCore/colormap.h MagickCore/colormap-private.h \\",
          "408:  MagickCore/colorspace.c MagickCore/colorspace.h \\",
          "409:  MagickCore/colorspace-private.h MagickCore/compare.c \\",
          "410:  MagickCore/compare.h MagickCore/composite.c \\",
          "411:  MagickCore/composite.h MagickCore/composite-private.h \\",
          "412:  MagickCore/compress.c MagickCore/compress.h \\",
          "413:  MagickCore/configure.c MagickCore/configure.h \\",
          "414:  MagickCore/constitute.c MagickCore/constitute.h \\",
          "415:  MagickCore/decorate.c MagickCore/decorate.h \\",
          "416:  MagickCore/delegate.c MagickCore/delegate.h \\",
          "417:  MagickCore/delegate-private.h MagickCore/deprecate.c \\",
          "418:  MagickCore/deprecate.h MagickCore/display.c \\",
          "419:  MagickCore/display.h MagickCore/display-private.h \\",
          "420:  MagickCore/distort.c MagickCore/distort.h \\",
          "421:  MagickCore/distribute-cache.c MagickCore/distribute-cache.h \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4141: MAGICKCORE_BASE_SRCS = \\",
          "4142:  MagickCore/MagickCore.h \\",
          "4143:  MagickCore/accelerate.c \\",
          "4145:  MagickCore/accelerate-private.h \\",
          "4146:  MagickCore/animate.c \\",
          "4147:  MagickCore/animate.h \\",
          "",
          "[Removed Lines]",
          "4144:  MagickCore/accelerate.h \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4385: MAGICKCORE_INCLUDE_HDRS = \\",
          "4386:  MagickCore/MagickCore.h \\",
          "4388:  MagickCore/animate.h \\",
          "4389:  MagickCore/annotate.h \\",
          "4390:  MagickCore/artifact.h \\",
          "",
          "[Removed Lines]",
          "4387:  MagickCore/accelerate.h \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "coders/label.c||coders/label.c": [
          "File: coders/label.c -> coders/label.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   metrics.width=0;",
          "137:   metrics.ascent=0.0;",
          "138:   status=GetMultilineTypeMetrics(image,draw_info,&metrics,exception);",
          "140:     {",
          "141:       image->columns=(size_t) (metrics.width+draw_info->stroke_width+0.5);",
          "142:       image->rows=(size_t) floor(metrics.height+draw_info->stroke_width+0.5);",
          "",
          "[Removed Lines]",
          "139:   if ((image->columns == 0) && (image->rows == 0))",
          "",
          "[Added Lines]",
          "139:   if ((image->columns == 0) && (image->rows == 0))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:       draw_info=DestroyDrawInfo(draw_info);",
          "205:        image=DestroyImageList(image);",
          "206:        return((Image *) NULL);",
          "208:   if (image->columns == 0)",
          "210:   if (image->columns == 0)",
          "212:   if (image->rows == 0)",
          "213:     image->rows=(size_t) (metrics.ascent-metrics.descent+",
          "215:   if (image->rows == 0)",
          "216:     image->rows=(size_t) (draw_info->pointsize+draw_info->stroke_width+0.5);",
          "217:   status=SetImageExtent(image,image->columns,image->rows,exception);",
          "",
          "[Removed Lines]",
          "207:      }",
          "209:     image->columns=(size_t) (metrics.width+draw_info->stroke_width+0.5);",
          "211:     image->columns=(size_t) (draw_info->pointsize+draw_info->stroke_width+0.5);",
          "214:       draw_info->stroke_width+0.5);",
          "",
          "[Added Lines]",
          "207:      }",
          "209:     image->columns=(size_t) floor(metrics.width+draw_info->stroke_width+0.5);",
          "210:   if (image->columns == 0)",
          "212:       0.5);",
          "215:       draw_info->stroke_width+0.5);",
          "216:   if (image->rows == 0)",
          "",
          "---------------"
        ],
        "coders/viff.c||coders/viff.c": [
          "File: coders/viff.c -> coders/viff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: %      the image cannot be read.",
          "138: %",
          "139: %    o image_info: the image info.",
          "140: %",
          "156:     }",
          "157:   return(MagickFalse);",
          "158: }",
          "",
          "[Removed Lines]",
          "141: %    o exception: return any errors or warnings in this structure.",
          "142: %",
          "145: static MagickBooleanType CheckMemoryOverflow(const size_t count,",
          "146:   const size_t quantum)",
          "147: {",
          "148:   size_t",
          "149:     size;",
          "151:   size=count*quantum;",
          "152:   if ((count == 0) || (quantum != (size/count)))",
          "153:     {",
          "154:       errno=ENOMEM;",
          "155:       return(MagickTrue);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "516:       case VFF_TYP_4_BYTE: bytes_per_pixel=4; break;",
          "517:       case VFF_TYP_FLOAT: bytes_per_pixel=4; break;",
          "518:       case VFF_TYP_DOUBLE: bytes_per_pixel=8; break;",
          "520:     }",
          "521:     if (viff_info.data_storage_type == VFF_TYP_BIT)",
          "522:       {",
          "523:         if (CheckMemoryOverflow((image->columns+7UL) >> 3UL,image->rows) != MagickFalse)",
          "524:           ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "526:       }",
          "527:     else",
          "528:       {",
          "",
          "[Removed Lines]",
          "519:       default: bytes_per_pixel=1; break;",
          "525:         max_packets=((image->columns+7UL) >> 3UL)*image->rows;",
          "",
          "[Added Lines]",
          "503:       default: bytes_per_pixel=1; break;",
          "509:         max_packets=((image->columns+7UL) >> 3UL)*image->rows;",
          "",
          "---------------"
        ]
      }
    }
  ]
}