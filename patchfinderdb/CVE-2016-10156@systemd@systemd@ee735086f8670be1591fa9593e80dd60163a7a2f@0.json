{
  "cve_id": "CVE-2016-10156",
  "cve_desc": "A flaw in systemd v228 in /src/basic/fs-util.c caused world writable suid files to be created when using the systemd timers features, allowing local attackers to escalate their privileges to root. This is fixed in v229.",
  "repo": "systemd/systemd",
  "patch_hash": "ee735086f8670be1591fa9593e80dd60163a7a2f",
  "patch_info": {
    "commit_hash": "ee735086f8670be1591fa9593e80dd60163a7a2f",
    "repo": "systemd/systemd",
    "commit_url": "https://github.com/systemd/systemd/commit/ee735086f8670be1591fa9593e80dd60163a7a2f",
    "files": [
      "src/basic/fs-util.c",
      "src/core/timer.c",
      "src/test/test-conf-files.c"
    ],
    "message": "util-lib: use MODE_INVALID as invalid value for mode_t everywhere",
    "before_after_code_files": [
      "src/basic/fs-util.c||src/basic/fs-util.c",
      "src/core/timer.c||src/core/timer.c",
      "src/test/test-conf-files.c||src/test/test-conf-files.c"
    ]
  },
  "patch_diff": {
    "src/basic/fs-util.c||src/basic/fs-util.c": [
      "File: src/basic/fs-util.c -> src/basic/fs-util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "311:         if (fd < 0)",
      "312:                 return -errno;",
      "315:                 r = fchmod(fd, mode);",
      "316:                 if (r < 0)",
      "317:                         return -errno;",
      "",
      "[Removed Lines]",
      "314:         if (mode > 0) {",
      "",
      "[Added Lines]",
      "314:         if (mode != MODE_INVALID) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "338: }",
      "340: int touch(const char *path) {",
      "342: }",
      "344: int symlink_idempotent(const char *from, const char *to) {",
      "",
      "[Removed Lines]",
      "341:         return touch_file(path, false, USEC_INFINITY, UID_INVALID, GID_INVALID, 0);",
      "",
      "[Added Lines]",
      "341:         return touch_file(path, false, USEC_INFINITY, UID_INVALID, GID_INVALID, MODE_INVALID);",
      "",
      "---------------"
    ],
    "src/core/timer.c||src/core/timer.c": [
      "File: src/core/timer.c -> src/core/timer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "519:         dual_timestamp_get(&t->last_trigger);",
      "521:         if (t->stamp_path)",
      "524:         timer_set_state(t, TIMER_RUNNING);",
      "525:         return;",
      "",
      "[Removed Lines]",
      "522:                 touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, 0);",
      "",
      "[Added Lines]",
      "522:                 touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, MODE_INVALID);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "559:         }",
      "561:         t->result = TIMER_SUCCESS;",
      "",
      "[Removed Lines]",
      "558:                         touch_file(t->stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0);",
      "",
      "[Added Lines]",
      "558:                         touch_file(t->stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, MODE_INVALID);",
      "",
      "---------------"
    ],
    "src/test/test-conf-files.c||src/test/test-conf-files.c": [
      "File: src/test/test-conf-files.c -> src/test/test-conf-files.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"conf-files.h\"",
      "27: #include \"fs-util.h\"",
      "28: #include \"macro.h\"",
      "29: #include \"rm-rf.h\"",
      "30: #include \"string-util.h\"",
      "31: #include \"strv.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #include \"parse-util.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:         va_start(ap, files);",
      "41:         while (files != NULL) {",
      "42:                 _cleanup_free_ char *path = strappend(tmp_dir, files);",
      "44:                 files = va_arg(ap, const char *);",
      "45:         }",
      "46:         va_end(ap);",
      "",
      "[Removed Lines]",
      "43:                 assert_se(touch_file(path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0) == 0);",
      "",
      "[Added Lines]",
      "44:                 assert_se(touch_file(path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, MODE_INVALID) == 0);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c9ea260aeaff2e837f543e3c42d2e7102af1137",
      "candidate_info": {
        "commit_hash": "4c9ea260aeaff2e837f543e3c42d2e7102af1137",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/4c9ea260aeaff2e837f543e3c42d2e7102af1137",
        "files": [
          "src/core/automount.c",
          "src/core/mount.c",
          "src/core/path.c",
          "src/core/scope.c",
          "src/core/slice.c",
          "src/core/socket.c",
          "src/core/swap.c",
          "src/core/timer.c"
        ],
        "message": "core: simplify things a bit by checking default_dependencies boolean in callee, not caller\n\nIt's nicer to hide the check away in the various\nxyz_add_default_dependencies() calls, rather than making it explicit in\nthe caller, and thus require deeper nesing.",
        "before_after_code_files": [
          "src/core/automount.c||src/core/automount.c",
          "src/core/mount.c||src/core/mount.c",
          "src/core/path.c||src/core/path.c",
          "src/core/scope.c||src/core/scope.c",
          "src/core/slice.c||src/core/slice.c",
          "src/core/socket.c||src/core/socket.c",
          "src/core/swap.c||src/core/swap.c",
          "src/core/timer.c||src/core/timer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/1854"
        ],
        "olp_code_files": {
          "patch": [
            "src/core/timer.c||src/core/timer.c"
          ],
          "candidate": [
            "src/core/timer.c||src/core/timer.c"
          ]
        }
      },
      "candidate_diff": {
        "src/core/automount.c||src/core/automount.c": [
          "File: src/core/automount.c -> src/core/automount.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         assert(a);",
          "151:         if (UNIT(a)->manager->running_as != MANAGER_SYSTEM)",
          "152:                 return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:         if (!UNIT(a)->default_dependencies)",
          "152:                 return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:                 if (r < 0)",
          "220:                         return r;",
          "227:         }",
          "229:         return automount_verify(a);",
          "",
          "[Removed Lines]",
          "222:                 if (UNIT(a)->default_dependencies) {",
          "223:                         r = automount_add_default_dependencies(a);",
          "224:                         if (r < 0)",
          "225:                                 return r;",
          "226:                 }",
          "",
          "[Added Lines]",
          "225:                 r = automount_add_default_dependencies(a);",
          "226:                 if (r < 0)",
          "227:                         return r;",
          "",
          "---------------"
        ],
        "src/core/mount.c||src/core/mount.c": [
          "File: src/core/mount.c -> src/core/mount.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:         assert(m);",
          "396:         if (UNIT(m)->manager->running_as != MANAGER_SYSTEM)",
          "397:                 return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396:         if (!UNIT(m)->default_dependencies)",
          "397:                 return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "533:         if (r < 0)",
          "534:                 return r;",
          "542:         return 0;",
          "543: }",
          "",
          "[Removed Lines]",
          "536:         if (u->default_dependencies) {",
          "537:                 r = mount_add_default_dependencies(m);",
          "538:                 if (r < 0)",
          "539:                         return r;",
          "540:         }",
          "",
          "[Added Lines]",
          "539:         r = mount_add_default_dependencies(m);",
          "540:         if (r < 0)",
          "541:                 return r;",
          "",
          "---------------"
        ],
        "src/core/path.c||src/core/path.c": [
          "File: src/core/path.c -> src/core/path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:         assert(p);",
          "320:         if (r < 0)",
          "321:                 return r;",
          "323:         if (UNIT(p)->manager->running_as == MANAGER_SYSTEM) {",
          "326:                 if (r < 0)",
          "327:                         return r;",
          "328:         }",
          "332: }",
          "334: static int path_load(Unit *u) {",
          "",
          "[Removed Lines]",
          "318:         r = unit_add_dependency_by_name(UNIT(p), UNIT_BEFORE,",
          "319:                                         SPECIAL_PATHS_TARGET, NULL, true);",
          "324:                 r = unit_add_two_dependencies_by_name(UNIT(p), UNIT_AFTER, UNIT_REQUIRES,",
          "325:                                                       SPECIAL_SYSINIT_TARGET, NULL, true);",
          "330:         return unit_add_two_dependencies_by_name(UNIT(p), UNIT_BEFORE, UNIT_CONFLICTS,",
          "331:                                                  SPECIAL_SHUTDOWN_TARGET, NULL, true);",
          "",
          "[Added Lines]",
          "318:         if (!UNIT(p)->default_dependencies)",
          "319:                 return 0;",
          "321:         r = unit_add_dependency_by_name(UNIT(p), UNIT_BEFORE, SPECIAL_PATHS_TARGET, NULL, true);",
          "326:                 r = unit_add_two_dependencies_by_name(UNIT(p), UNIT_AFTER, UNIT_REQUIRES, SPECIAL_SYSINIT_TARGET, NULL, true);",
          "331:         return unit_add_two_dependencies_by_name(UNIT(p), UNIT_BEFORE, UNIT_CONFLICTS, SPECIAL_SHUTDOWN_TARGET, NULL, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:                 if (r < 0)",
          "361:                         return r;",
          "368:         }",
          "370:         return path_verify(p);",
          "",
          "[Removed Lines]",
          "363:                 if (UNIT(p)->default_dependencies) {",
          "364:                         r = path_add_default_dependencies(p);",
          "365:                         if (r < 0)",
          "366:                                 return r;",
          "367:                 }",
          "",
          "[Added Lines]",
          "363:                 r = path_add_default_dependencies(p);",
          "364:                 if (r < 0)",
          "365:                         return r;",
          "",
          "---------------"
        ],
        "src/core/scope.c||src/core/scope.c": [
          "File: src/core/scope.c -> src/core/scope.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         assert(s);",
          "126:         r = unit_add_two_dependencies_by_name(",
          "127:                         UNIT(s),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:         if (!UNIT(s)->default_dependencies)",
          "126:                 return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:         if (r < 0)",
          "174:                 return r;",
          "182:         return scope_verify(s);",
          "183: }",
          "",
          "[Removed Lines]",
          "176:         if (u->default_dependencies) {",
          "177:                 r = scope_add_default_dependencies(s);",
          "178:                 if (r < 0)",
          "179:                         return r;",
          "180:         }",
          "",
          "[Added Lines]",
          "179:         r = scope_add_default_dependencies(s);",
          "180:         if (r < 0)",
          "181:                 return r;",
          "",
          "---------------"
        ],
        "src/core/slice.c||src/core/slice.c": [
          "File: src/core/slice.c -> src/core/slice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:         assert(s);",
          "89:         r = unit_add_two_dependencies_by_name(",
          "90:                         UNIT(s),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:         if (!UNIT(s)->default_dependencies)",
          "89:                 return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:                 if (r < 0)",
          "145:                         return r;",
          "152:         }",
          "154:         return slice_verify(s);",
          "",
          "[Removed Lines]",
          "147:                 if (u->default_dependencies) {",
          "148:                         r = slice_add_default_dependencies(s);",
          "149:                         if (r < 0)",
          "150:                                 return r;",
          "151:                 }",
          "",
          "[Added Lines]",
          "149:                 r = slice_add_default_dependencies(s);",
          "150:                 if (r < 0)",
          "151:                         return r;",
          "",
          "---------------"
        ],
        "src/core/socket.c||src/core/socket.c": [
          "File: src/core/socket.c -> src/core/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:         int r;",
          "297:         assert(s);",
          "299:         r = unit_add_dependency_by_name(UNIT(s), UNIT_BEFORE, SPECIAL_SOCKETS_TARGET, NULL, true);",
          "300:         if (r < 0)",
          "301:                 return r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:         if (!UNIT(s)->default_dependencies)",
          "300:                 return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "365:                         return r;",
          "366:         }",
          "374:         return 0;",
          "375: }",
          "",
          "[Removed Lines]",
          "368:         if (u->default_dependencies) {",
          "369:                 r = socket_add_default_dependencies(s);",
          "370:                 if (r < 0)",
          "371:                         return r;",
          "372:         }",
          "",
          "[Added Lines]",
          "371:         r = socket_add_default_dependencies(s);",
          "372:         if (r < 0)",
          "373:                 return r;",
          "",
          "---------------"
        ],
        "src/core/swap.c||src/core/swap.c": [
          "File: src/core/swap.c -> src/core/swap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: static int swap_add_default_dependencies(Swap *s) {",
          "214:         assert(s);",
          "216:         if (UNIT(s)->manager->running_as != MANAGER_SYSTEM)",
          "217:                 return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:         if (!UNIT(s)->default_dependencies)",
          "217:                 return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:                 if (r < 0)",
          "332:                         return r;",
          "339:         }",
          "341:         return swap_verify(s);",
          "",
          "[Removed Lines]",
          "334:                 if (UNIT(s)->default_dependencies) {",
          "335:                         r = swap_add_default_dependencies(s);",
          "336:                         if (r < 0)",
          "337:                                 return r;",
          "338:                 }",
          "",
          "[Added Lines]",
          "337:                 r = swap_add_default_dependencies(s);",
          "338:                 if (r < 0)",
          "339:                         return r;",
          "",
          "---------------"
        ],
        "src/core/timer.c||src/core/timer.c": [
          "File: src/core/timer.c -> src/core/timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:         assert(t);",
          "105:         r = unit_add_dependency_by_name(UNIT(t), UNIT_BEFORE, SPECIAL_TIMERS_TARGET, NULL, true);",
          "106:         if (r < 0)",
          "107:                 return r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:         if (!UNIT(t)->default_dependencies)",
          "106:                 return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:                 if (r < 0)",
          "193:                         return r;",
          "200:         }",
          "202:         return timer_verify(t);",
          "",
          "[Removed Lines]",
          "195:                 if (u->default_dependencies) {",
          "196:                         r = timer_add_default_dependencies(t);",
          "197:                         if (r < 0)",
          "198:                                 return r;",
          "199:                 }",
          "",
          "[Added Lines]",
          "198:                 r = timer_add_default_dependencies(t);",
          "199:                 if (r < 0)",
          "200:                         return r;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c89f52ac6938374972253d8752ed65f3af0b3ef4",
      "candidate_info": {
        "commit_hash": "c89f52ac6938374972253d8752ed65f3af0b3ef4",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/c89f52ac6938374972253d8752ed65f3af0b3ef4",
        "files": [
          "src/basic/extract-word.c",
          "src/basic/extract-word.h",
          "src/core/load-fragment.c",
          "src/test/test-extract-word.c"
        ],
        "message": "core: fix dependency parsing\n\n3d793d29059a7ddf5282efa6b32b953c183d7a4d broke parsing of unit file\nnames that include backslashes, as extract_first_word() strips those.\nFix this, by introducing a new EXTRACT_RETAIN_ESCAPE flag which disables\nlooking at any flags, thus being compatible with the classic\nFOREACH_WORD() behaviour.",
        "before_after_code_files": [
          "src/basic/extract-word.c||src/basic/extract-word.c",
          "src/basic/extract-word.h||src/basic/extract-word.h",
          "src/core/load-fragment.c||src/core/load-fragment.c",
          "src/test/test-extract-word.c||src/test/test-extract-word.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/1854"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/basic/extract-word.c||src/basic/extract-word.c": [
          "File: src/basic/extract-word.c -> src/basic/extract-word.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:                                         quote = 0;",
          "130:                                         break;",
          "132:                                         backslash = true;",
          "133:                                         break;",
          "134:                                 } else {",
          "",
          "[Removed Lines]",
          "131:                                 } else if (c == '\\\\') {",
          "",
          "[Added Lines]",
          "131:                                 } else if (c == '\\\\' && !(flags & EXTRACT_RETAIN_ESCAPE)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:                                 else if ((c == '\\'' || c == '\"') && (flags & EXTRACT_QUOTES)) {",
          "147:                                         quote = c;",
          "148:                                         break;",
          "150:                                         backslash = true;",
          "151:                                         break;",
          "152:                                 } else if (strchr(separators, c)) {",
          "",
          "[Removed Lines]",
          "149:                                 } else if (c == '\\\\') {",
          "",
          "[Added Lines]",
          "149:                                 } else if (c == '\\\\' && !(flags & EXTRACT_RETAIN_ESCAPE)) {",
          "",
          "---------------"
        ],
        "src/basic/extract-word.h||src/basic/extract-word.h": [
          "File: src/basic/extract-word.h -> src/basic/extract-word.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"macro.h\"",
          "26: typedef enum ExtractFlags {",
          "31:         EXTRACT_DONT_COALESCE_SEPARATORS = 16,",
          "32: } ExtractFlags;",
          "34: int extract_first_word(const char **p, char **ret, const char *separators, ExtractFlags flags);",
          "",
          "[Removed Lines]",
          "27:         EXTRACT_RELAX           = 1,",
          "28:         EXTRACT_CUNESCAPE       = 2,",
          "29:         EXTRACT_CUNESCAPE_RELAX = 4,",
          "30:         EXTRACT_QUOTES          = 8,",
          "",
          "[Added Lines]",
          "27:         EXTRACT_RELAX                    = 1,",
          "28:         EXTRACT_CUNESCAPE                = 2,",
          "29:         EXTRACT_CUNESCAPE_RELAX          = 4,",
          "30:         EXTRACT_QUOTES                   = 8,",
          "32:         EXTRACT_RETAIN_ESCAPE            = 32,",
          "",
          "---------------"
        ],
        "src/core/load-fragment.c||src/core/load-fragment.c": [
          "File: src/core/load-fragment.c -> src/core/load-fragment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:                 _cleanup_free_ char *word = NULL, *k = NULL;",
          "123:                 int r;",
          "126:                 if (r == 0)",
          "127:                         break;",
          "128:                 if (r == -ENOMEM)",
          "",
          "[Removed Lines]",
          "125:                 r = extract_first_word(&p, &word, NULL, 0);",
          "",
          "[Added Lines]",
          "125:                 r = extract_first_word(&p, &word, NULL, EXTRACT_RETAIN_ESCAPE);",
          "",
          "---------------"
        ],
        "src/test/test-extract-word.c||src/test/test-extract-word.c": [
          "File: src/test/test-extract-word.c -> src/test/test-extract-word.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:         assert_se(extract_first_word(&p, &t, \":\", EXTRACT_DONT_COALESCE_SEPARATORS) == 0);",
          "326:         assert_se(!t);",
          "327:         assert_se(!p);",
          "328: }",
          "330: static void test_extract_first_word_and_warn(void) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:         p = \"foo\\\\xbar\";",
          "330:         assert_se(extract_first_word(&p, &t, NULL, 0) > 0);",
          "331:         assert_se(streq(t, \"fooxbar\"));",
          "332:         free(t);",
          "333:         assert_se(p == NULL);",
          "335:         p = \"foo\\\\xbar\";",
          "336:         assert_se(extract_first_word(&p, &t, NULL, EXTRACT_RETAIN_ESCAPE) > 0);",
          "337:         assert_se(streq(t, \"foo\\\\xbar\"));",
          "338:         free(t);",
          "339:         assert_se(p == NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85ae4be4f12973a1930e3f95781d9af98322af00",
      "candidate_info": {
        "commit_hash": "85ae4be4f12973a1930e3f95781d9af98322af00",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/85ae4be4f12973a1930e3f95781d9af98322af00",
        "files": [
          "units/system.slice"
        ],
        "message": "units: fix system.slice to require -.slice, instead of just want it",
        "before_after_code_files": [
          "units/system.slice||units/system.slice"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/1854"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "units/system.slice||units/system.slice": [
          "File: units/system.slice -> units/system.slice",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: Documentation=man:systemd.special(7)",
          "11: DefaultDependencies=no",
          "12: Before=slices.target",
          "14: After=-.slice",
          "",
          "[Removed Lines]",
          "13: Wants=-.slice",
          "",
          "[Added Lines]",
          "13: Requires=-.slice",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb4c247d48fc195e64dd895a4e9dc8162ae62b23",
      "candidate_info": {
        "commit_hash": "cb4c247d48fc195e64dd895a4e9dc8162ae62b23",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/cb4c247d48fc195e64dd895a4e9dc8162ae62b23",
        "files": [
          "src/core/service.c"
        ],
        "message": "core: change default deps of services to require sysinit.target instead of basic.target\n\nWith this change services by default will no longer require\nbasic.target, but instead only after it it via After=basic.target.\nHowever, they will still Require= on sysinit.target.\n\nThis has the benefit that when booting into emergency mode it is\nrelatively safe to actviate individual services, as this will not pull\nthe entirety of basic.target anymore, thus avoid everything listed in\nsockets.target and suchlike. However, during the usual boot no change\nshould be noticed.",
        "before_after_code_files": [
          "src/core/service.c||src/core/service.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/1854"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/core/service.c||src/core/service.c": [
          "File: src/core/service.c -> src/core/service.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:         if (r < 0)",
          "524:                 return r;",
          "527:         return unit_add_two_dependencies_by_name(UNIT(s), UNIT_BEFORE, UNIT_CONFLICTS, SPECIAL_SHUTDOWN_TARGET, NULL, true);",
          "528: }",
          "",
          "[Removed Lines]",
          "522:         r = unit_add_two_dependencies_by_name(UNIT(s), UNIT_AFTER, UNIT_REQUIRES, SPECIAL_BASIC_TARGET, NULL, true);",
          "",
          "[Added Lines]",
          "521:         if (UNIT(s)->manager->running_as == MANAGER_SYSTEM) {",
          "526:                 r = unit_add_two_dependencies_by_name(UNIT(s), UNIT_AFTER, UNIT_REQUIRES, SPECIAL_SYSINIT_TARGET, NULL, true);",
          "527:                 if (r < 0)",
          "528:                         return r;",
          "529:         } else {",
          "534:                 r = unit_add_dependency_by_name(UNIT(s), UNIT_REQUIRES, SPECIAL_BASIC_TARGET, NULL, true);",
          "535:                 if (r < 0)",
          "536:                         return r;",
          "537:         }",
          "542:         r = unit_add_dependency_by_name(UNIT(s), UNIT_AFTER, SPECIAL_BASIC_TARGET, NULL, true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a020b3b3321c2d19263ac6e163a5a5787501d823",
      "candidate_info": {
        "commit_hash": "a020b3b3321c2d19263ac6e163a5a5787501d823",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/a020b3b3321c2d19263ac6e163a5a5787501d823",
        "files": [
          "src/journal/journalctl.c"
        ],
        "message": "journalctl: change repeated if checks into switch blocks\n\nNo functional changes.",
        "before_after_code_files": [
          "src/journal/journalctl.c||src/journal/journalctl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/1854"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/journal/journalctl.c||src/journal/journalctl.c": [
          "File: src/journal/journalctl.c -> src/journal/journalctl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:         ACTION_UPDATE_CATALOG,",
          "134:         ACTION_LIST_BOOTS,",
          "135:         ACTION_FLUSH,",
          "136:         ACTION_ROTATE,",
          "137:         ACTION_VACUUM,",
          "139: } arg_action = ACTION_SHOW;",
          "141: typedef struct BootId {",
          "",
          "[Removed Lines]",
          "138:         ACTION_SYNC,",
          "",
          "[Added Lines]",
          "136:         ACTION_SYNC,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1946:         setrlimit_closest(RLIMIT_NOFILE, &RLIMIT_MAKE_CONST(16384));",
          "1965:                 goto finish;",
          "1969:                 r = setup_keys();",
          "1970:                 goto finish;",
          "1977:                 _cleanup_free_ char *database;",
          "1979:                 database = path_join(arg_root, CATALOG_DATABASE, NULL);",
          "",
          "[Removed Lines]",
          "1948:         if (arg_action == ACTION_NEW_ID128) {",
          "1949:                 r = generate_new_id128();",
          "1950:                 goto finish;",
          "1951:         }",
          "1953:         if (arg_action == ACTION_FLUSH) {",
          "1954:                 r = flush_to_var();",
          "1955:                 goto finish;",
          "1956:         }",
          "1958:         if (arg_action == ACTION_SYNC) {",
          "1959:                 r = sync_journal();",
          "1960:                 goto finish;",
          "1961:         }",
          "1963:         if (arg_action == ACTION_ROTATE) {",
          "1964:                 r = rotate();",
          "1966:         }",
          "1968:         if (arg_action == ACTION_SETUP_KEYS) {",
          "1971:         }",
          "1973:         if (arg_action == ACTION_UPDATE_CATALOG ||",
          "1974:             arg_action == ACTION_LIST_CATALOG ||",
          "1975:             arg_action == ACTION_DUMP_CATALOG) {",
          "",
          "[Added Lines]",
          "1948:         switch (arg_action) {",
          "1950:         case ACTION_NEW_ID128:",
          "1951:                 r = generate_new_id128();",
          "1954:         case ACTION_SETUP_KEYS:",
          "1958:         case ACTION_LIST_CATALOG:",
          "1959:         case ACTION_DUMP_CATALOG:",
          "1960:         case ACTION_UPDATE_CATALOG: {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1990:                         bool oneline = arg_action == ACTION_LIST_CATALOG;",
          "1992:                         pager_open_if_enabled();",
          "1993:                         if (optind < argc)",
          "1996:                         else",
          "1997:                                 r = catalog_list(stdout, database, oneline);",
          "1998:                         if (r < 0)",
          "",
          "[Removed Lines]",
          "1994:                                 r = catalog_list_items(stdout, database,",
          "1995:                                                        oneline, argv + optind);",
          "",
          "[Added Lines]",
          "1979:                                 r = catalog_list_items(stdout, database, oneline, argv + optind);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2002:                 goto finish;",
          "2003:         }",
          "2005:         if (arg_directory)",
          "2006:                 r = sd_journal_open_directory(&j, arg_directory, arg_journal_type);",
          "2007:         else if (arg_file)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1989:         case ACTION_FLUSH:",
          "1990:                 r = flush_to_var();",
          "1991:                 goto finish;",
          "1993:         case ACTION_SYNC:",
          "1994:                 r = sync_journal();",
          "1995:                 goto finish;",
          "1997:         case ACTION_ROTATE:",
          "1998:                 r = rotate();",
          "1999:                 goto finish;",
          "2001:         case ACTION_SHOW:",
          "2002:         case ACTION_PRINT_HEADER:",
          "2003:         case ACTION_VERIFY:",
          "2004:         case ACTION_DISK_USAGE:",
          "2005:         case ACTION_LIST_BOOTS:",
          "2006:         case ACTION_VACUUM:",
          "2008:                 break;",
          "2010:         default:",
          "2011:                 assert_not_reached(\"Unknown action\");",
          "2012:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2011:         else",
          "2012:                 r = sd_journal_open(&j, !arg_merge*SD_JOURNAL_LOCAL_ONLY + arg_journal_type);",
          "2013:         if (r < 0) {",
          "2016:                 goto finish;",
          "2017:         }",
          "",
          "[Removed Lines]",
          "2014:                 log_error_errno(r, \"Failed to open %s: %m\",",
          "2015:                                 arg_directory ? arg_directory : arg_file ? \"files\" : \"journal\");",
          "",
          "[Added Lines]",
          "2023:                 log_error_errno(r, \"Failed to open %s: %m\", arg_directory ?: arg_file ? \"files\" : \"journal\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2020:         if (r < 0)",
          "2021:                 goto finish;",
          "2029:                 journal_print_header(j);",
          "2030:                 r = 0;",
          "2031:                 goto finish;",
          "2035:                 uint64_t bytes = 0;",
          "2036:                 char sbytes[FORMAT_BYTES_MAX];",
          "",
          "[Removed Lines]",
          "2023:         if (arg_action == ACTION_VERIFY) {",
          "2024:                 r = verify(j);",
          "2025:                 goto finish;",
          "2026:         }",
          "2028:         if (arg_action == ACTION_PRINT_HEADER) {",
          "2032:         }",
          "2034:         if (arg_action == ACTION_DISK_USAGE) {",
          "",
          "[Added Lines]",
          "2031:         switch (arg_action) {",
          "2033:         case ACTION_NEW_ID128:",
          "2034:         case ACTION_SETUP_KEYS:",
          "2035:         case ACTION_LIST_CATALOG:",
          "2036:         case ACTION_DUMP_CATALOG:",
          "2037:         case ACTION_UPDATE_CATALOG:",
          "2038:         case ACTION_FLUSH:",
          "2039:         case ACTION_SYNC:",
          "2040:         case ACTION_ROTATE:",
          "2041:                 assert_not_reached(\"Unexpected action.\");",
          "2043:         case ACTION_PRINT_HEADER:",
          "2048:         case ACTION_VERIFY:",
          "2049:                 r = verify(j);",
          "2050:                 goto finish;",
          "2052:         case ACTION_DISK_USAGE: {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2044:                 goto finish;",
          "2045:         }",
          "2048:                 Directory *d;",
          "2049:                 Iterator i;",
          "",
          "[Removed Lines]",
          "2047:         if (arg_action == ACTION_VACUUM) {",
          "",
          "[Added Lines]",
          "2065:         case ACTION_LIST_BOOTS:",
          "2066:                 r = list_boots(j);",
          "2067:                 goto finish;",
          "2069:         case ACTION_VACUUM: {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2064:                 goto finish;",
          "2065:         }",
          "2070:         }",
          "",
          "[Removed Lines]",
          "2067:         if (arg_action == ACTION_LIST_BOOTS) {",
          "2068:                 r = list_boots(j);",
          "2069:                 goto finish;",
          "",
          "[Added Lines]",
          "2089:         case ACTION_SHOW:",
          "2090:                 break;",
          "2092:         default:",
          "2093:                 assert_not_reached(\"Unknown action\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}