{
  "cve_id": "CVE-2017-7471",
  "cve_desc": "Quick Emulator (Qemu) built with the VirtFS, host directory sharing via Plan 9 File System (9pfs) support, is vulnerable to an improper access control issue. It could occur while accessing files on a shared host directory. A privileged user inside guest could use this flaw to access host file system beyond the shared folder and potentially escalating their privileges on a host.",
  "repo": "qemu/qemu",
  "patch_hash": "9c6b899f7a46893ab3b671e341a2234e9c0c060e",
  "patch_info": {
    "commit_hash": "9c6b899f7a46893ab3b671e341a2234e9c0c060e",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/9c6b899f7a46893ab3b671e341a2234e9c0c060e",
    "files": [
      "hw/9pfs/9p-local.c"
    ],
    "message": "9pfs: local: set the path of the export root to \".\"\n\nThe local backend was recently converted to using \"at*()\" syscalls in order\nto ensure all accesses happen below the shared directory. This requires that\nwe only pass relative paths, otherwise the dirfd argument to the \"at*()\"\nsyscalls is ignored and the path is treated as an absolute path in the host.\nThis is actually the case for paths in all fids, with the notable exception\nof the root fid, whose path is \"/\". This causes the following backend ops to\nact on the \"/\" directory of the host instead of the virtfs shared directory\nwhen the export root is involved:\n- lstat\n- chmod\n- chown\n- utimensat\n\nie, chmod /9p_mount_point in the guest will be converted to chmod / in the\nhost for example. This could cause security issues with a privileged QEMU.\n\nAll \"*at()\" syscalls are being passed an open file descriptor. In the case\nof the export root, this file descriptor points to the path in the host that\nwas passed to -fsdev.\n\nThe fix is thus as simple as changing the path of the export root fid to be\n\".\" instead of \"/\".\n\nThis is CVE-2017-7471.\n\nCc: qemu-stable@nongnu.org\nReported-by: L\u00e9o Gaspard <leo@gaspard.io>\nSigned-off-by: Greg Kurz <groug@kaod.org>\nReviewed-by: Eric Blake <eblake@redhat.com>\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>",
    "before_after_code_files": [
      "hw/9pfs/9p-local.c||hw/9pfs/9p-local.c"
    ]
  },
  "patch_diff": {
    "hw/9pfs/9p-local.c||hw/9pfs/9p-local.c": [
      "File: hw/9pfs/9p-local.c -> hw/9pfs/9p-local.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1098: {",
      "1099:     if (dir_path) {",
      "1100:         v9fs_path_sprintf(target, \"%s/%s\", dir_path->data, name);",
      "1102:         v9fs_path_sprintf(target, \"%s\", name);",
      "1103:     }",
      "1104:     return 0;",
      "1105: }",
      "",
      "[Removed Lines]",
      "1101:     } else {",
      "",
      "[Added Lines]",
      "1101:     } else if (strcmp(name, \"/\")) {",
      "1103:     } else {",
      "1107:         v9fs_path_sprintf(target, \"%s\", \".\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "96bae145e27d4df62671b4eebd6c735f412016cf",
      "candidate_info": {
        "commit_hash": "96bae145e27d4df62671b4eebd6c735f412016cf",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/96bae145e27d4df62671b4eebd6c735f412016cf",
        "files": [
          "hw/9pfs/9p-local.c"
        ],
        "message": "9pfs: local: set the path of the export root to \".\"\n\nThe local backend was recently converted to using \"at*()\" syscalls in order\nto ensure all accesses happen below the shared directory. This requires that\nwe only pass relative paths, otherwise the dirfd argument to the \"at*()\"\nsyscalls is ignored and the path is treated as an absolute path in the host.\nThis is actually the case for paths in all fids, with the notable exception\nof the root fid, whose path is \"/\". This causes the following backend ops to\nact on the \"/\" directory of the host instead of the virtfs shared directory\nwhen the export root is involved:\n- lstat\n- chmod\n- chown\n- utimensat\n\nie, chmod /9p_mount_point in the guest will be converted to chmod / in the\nhost for example. This could cause security issues with a privileged QEMU.\n\nAll \"*at()\" syscalls are being passed an open file descriptor. In the case\nof the export root, this file descriptor points to the path in the host that\nwas passed to -fsdev.\n\nThe fix is thus as simple as changing the path of the export root fid to be\n\".\" instead of \"/\".\n\nThis is CVE-2017-7471.\n\nCc: qemu-stable@nongnu.org\nReported-by: L\u00e9o Gaspard <leo@gaspard.io>\nSigned-off-by: Greg Kurz <groug@kaod.org>\nReviewed-by: Eric Blake <eblake@redhat.com>\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>\n(cherry picked from commit 9c6b899f7a46893ab3b671e341a2234e9c0c060e)\nSigned-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>",
        "before_after_code_files": [
          "hw/9pfs/9p-local.c||hw/9pfs/9p-local.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hw/9pfs/9p-local.c||hw/9pfs/9p-local.c"
          ],
          "candidate": [
            "hw/9pfs/9p-local.c||hw/9pfs/9p-local.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/9pfs/9p-local.c||hw/9pfs/9p-local.c": [
          "File: hw/9pfs/9p-local.c -> hw/9pfs/9p-local.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1099: {",
          "1100:     if (dir_path) {",
          "1101:         v9fs_path_sprintf(target, \"%s/%s\", dir_path->data, name);",
          "1103:         v9fs_path_sprintf(target, \"%s\", name);",
          "1104:     }",
          "1105:     return 0;",
          "1106: }",
          "",
          "[Removed Lines]",
          "1102:     } else {",
          "",
          "[Added Lines]",
          "1102:     } else if (strcmp(name, \"/\")) {",
          "1104:     } else {",
          "1108:         v9fs_path_sprintf(target, \"%s\", \".\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f57f5878578af19f72344439154234c6d6ba8ccc",
      "candidate_info": {
        "commit_hash": "f57f5878578af19f72344439154234c6d6ba8ccc",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/f57f5878578af19f72344439154234c6d6ba8ccc",
        "files": [
          "hw/9pfs/9p-local.c"
        ],
        "message": "9pfs: local: resolve special directories in paths\n\nWhen using the mapped-file security mode, the creds of a path /foo/bar\nare stored in the /foo/.virtfs_metadata/bar file. This is okay for all\npaths unless they end with '.' or '..', because we cannot create the\ncorresponding file in the metadata directory.\n\nThis patch ensures that '.' and '..' are resolved in all paths.\n\nThe core code only passes path elements (no '/') to the backend, with\nthe notable exception of the '/' path, which refers to the virtfs root.\nThis patch preserves the current behavior of converting it to '.' so\nthat it can be passed to \"*at()\" syscalls ('/' would mean the host root).\n\nSigned-off-by: Greg Kurz <groug@kaod.org>\nReviewed-by: Eric Blake <eblake@redhat.com>",
        "before_after_code_files": [
          "hw/9pfs/9p-local.c||hw/9pfs/9p-local.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/9pfs/9p-local.c||hw/9pfs/9p-local.c"
          ],
          "candidate": [
            "hw/9pfs/9p-local.c||hw/9pfs/9p-local.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/9pfs/9p-local.c||hw/9pfs/9p-local.c": [
          "File: hw/9pfs/9p-local.c -> hw/9pfs/9p-local.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1134:     }",
          "1136:     if (dir_path) {",
          "1140:     } else {",
          "1145:     }",
          "1146:     return 0;",
          "1147: }",
          "",
          "[Removed Lines]",
          "1137:         v9fs_path_sprintf(target, \"%s/%s\", dir_path->data, name);",
          "1138:     } else if (strcmp(name, \"/\")) {",
          "1139:         v9fs_path_sprintf(target, \"%s\", name);",
          "1144:         v9fs_path_sprintf(target, \"%s\", \".\");",
          "",
          "[Added Lines]",
          "1137:         if (!strcmp(name, \".\")) {",
          "1139:             v9fs_path_copy(target, dir_path);",
          "1140:         } else if (!strcmp(name, \"..\")) {",
          "1141:             if (!strcmp(dir_path->data, \".\")) {",
          "1143:                 v9fs_path_sprintf(target, \".\");",
          "1144:             } else {",
          "1145:                 char *tmp = g_path_get_dirname(dir_path->data);",
          "1149:                 v9fs_path_sprintf(target, \"%s\", tmp);",
          "1150:                 g_free(tmp);",
          "1151:             }",
          "1152:         } else {",
          "1153:             assert(!strchr(name, '/'));",
          "1154:             v9fs_path_sprintf(target, \"%s/%s\", dir_path->data, name);",
          "1155:         }",
          "1156:     } else if (!strcmp(name, \"/\") || !strcmp(name, \".\") ||",
          "1157:                !strcmp(name, \"..\")) {",
          "1159:         v9fs_path_sprintf(target, \".\");",
          "1161:         assert(!strchr(name, '/'));",
          "1162:         v9fs_path_sprintf(target, \"./%s\", name);",
          "",
          "---------------"
        ]
      }
    }
  ]
}