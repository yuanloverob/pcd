{
  "cve_id": "CVE-2018-19044",
  "cve_desc": "keepalived 2.0.8 didn't check for pathnames with symlinks when writing data to a temporary file upon a call to PrintData or PrintStats. This allowed local users to overwrite arbitrary files if fs.protected_symlinks is set to 0, as demonstrated by a symlink from /tmp/keepalived.data or /tmp/keepalived.stats to /etc/passwd.",
  "repo": "acassen/keepalived",
  "patch_hash": "04f2d32871bb3b11d7dc024039952f2fe2750306",
  "patch_info": {
    "commit_hash": "04f2d32871bb3b11d7dc024039952f2fe2750306",
    "repo": "acassen/keepalived",
    "commit_url": "https://github.com/acassen/keepalived/commit/04f2d32871bb3b11d7dc024039952f2fe2750306",
    "files": [
      "keepalived/core/main.c",
      "keepalived/core/pidfile.c",
      "keepalived/core/smtp.c",
      "keepalived/vrrp/vrrp_dbus.c",
      "keepalived/vrrp/vrrp_json.c",
      "keepalived/vrrp/vrrp_parser.c",
      "keepalived/vrrp/vrrp_print.c",
      "keepalived/vrrp/vrrp_scheduler.c",
      "lib/logger.c",
      "lib/memory.c",
      "lib/notify.c",
      "lib/parser.c",
      "lib/utils.c",
      "lib/utils.h"
    ],
    "message": "When opening files for write, ensure they aren't symbolic links\n\nIssue #1048 identified that if, for example, a non privileged user\ncreated a symbolic link from /etc/keepalvied.data to /etc/passwd,\nwriting to /etc/keepalived.data (which could be invoked via DBus)\nwould cause /etc/passwd to be overwritten.\n\nThis commit stops keepalived writing to pathnames where the ultimate\ncomponent is a symbolic link, by setting O_NOFOLLOW whenever opening\na file for writing.\n\nThis might break some setups, where, for example, /etc/keepalived.data\nwas a symbolic link to /home/fred/keepalived.data. If this was the case,\ninstead create a symbolic link from /home/fred/keepalived.data to\n/tmp/keepalived.data, so that the file is still accessible via\n/home/fred/keepalived.data.\n\nThere doesn't appear to be a way around this backward incompatibility,\nsince even checking if the pathname is a symbolic link prior to opening\nfor writing would create a race condition.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
    "before_after_code_files": [
      "keepalived/core/main.c||keepalived/core/main.c",
      "keepalived/core/pidfile.c||keepalived/core/pidfile.c",
      "keepalived/core/smtp.c||keepalived/core/smtp.c",
      "keepalived/vrrp/vrrp_dbus.c||keepalived/vrrp/vrrp_dbus.c",
      "keepalived/vrrp/vrrp_json.c||keepalived/vrrp/vrrp_json.c",
      "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c",
      "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c",
      "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c",
      "lib/logger.c||lib/logger.c",
      "lib/memory.c||lib/memory.c",
      "lib/notify.c||lib/notify.c",
      "lib/parser.c||lib/parser.c",
      "lib/utils.c||lib/utils.c",
      "lib/utils.h||lib/utils.h"
    ]
  },
  "patch_diff": {
    "keepalived/core/main.c||keepalived/core/main.c": [
      "File: keepalived/core/main.c -> keepalived/core/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1399:    __set_bit(DONT_FORK_BIT, &debug);",
      "1400:    __set_bit(NO_SYSLOG_BIT, &debug);",
      "1401:    if (optarg && optarg[0]) {",
      "1403:     if (fd == -1) {",
      "1404:      fprintf(stderr, \"Unable to open config-test log file %s\\n\", optarg);",
      "1405:      exit(EXIT_FAILURE);",
      "",
      "[Removed Lines]",
      "1402:     int fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
      "",
      "[Added Lines]",
      "1402:     int fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT | O_NOFOLLOW, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
      "",
      "---------------"
    ],
    "keepalived/core/pidfile.c||keepalived/core/pidfile.c": [
      "File: keepalived/core/pidfile.c -> keepalived/core/pidfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "60: pidfile_write(const char *pid_file, int pid)",
      "61: {",
      "62:  FILE *pidfile = NULL;",
      "65:  if (pidfd != -1) pidfile = fdopen(pidfd, \"w\");",
      "",
      "[Removed Lines]",
      "63:  int pidfd = creat(pid_file, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
      "",
      "[Added Lines]",
      "63:  int pidfd = open(pid_file, O_NOFOLLOW | O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
      "",
      "---------------"
    ],
    "keepalived/core/smtp.c||keepalived/core/smtp.c": [
      "File: keepalived/core/smtp.c -> keepalived/core/smtp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "570: static void",
      "571: smtp_log_to_file(smtp_t *smtp)",
      "572: {",
      "574:  time_t now;",
      "575:  struct tm tm;",
      "576:  char time_buf[25];",
      "",
      "[Removed Lines]",
      "573:  FILE *fp = fopen(\"/tmp/smtp-alert.log\", \"a\");",
      "",
      "[Added Lines]",
      "573:  FILE *fp = fopen_safe(\"/tmp/smtp-alert.log\", \"a\");",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_dbus.c||keepalived/vrrp/vrrp_dbus.c": [
      "File: keepalived/vrrp/vrrp_dbus.c -> keepalived/vrrp/vrrp_dbus.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "594:  size_t length;",
      "595:  gchar *ret = NULL;",
      "598:  if (f) {",
      "599:   fseek(f, 0, SEEK_END);",
      "600:   length = (size_t)ftell(f);",
      "",
      "[Removed Lines]",
      "597:  f = fopen(filepath, \"rb\");",
      "",
      "[Added Lines]",
      "597:  f = fopen(filepath, \"r\");",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_json.c||keepalived/vrrp/vrrp_json.c": [
      "File: keepalived/vrrp/vrrp_json.c -> keepalived/vrrp/vrrp_json.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: #include \"vrrp_iprule.h\"",
      "38: #include \"logger.h\"",
      "39: #include \"timer.h\"",
      "41: static inline double",
      "42: timeval_to_double(const timeval_t *t)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: #include \"utils.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55:  if (LIST_ISEMPTY(vrrp_data->vrrp))",
      "56:   return;",
      "59:  if (!file) {",
      "60:   log_message(LOG_INFO, \"Can't open /tmp/keepalived.json (%d: %s)\",",
      "61:    errno, strerror(errno));",
      "",
      "[Removed Lines]",
      "58:  file = fopen (\"/tmp/keepalived.json\",\"w\");",
      "",
      "[Added Lines]",
      "59:  file = fopen_safe(\"/tmp/keepalived.json\", \"w\");",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c": [
      "File: keepalived/vrrp/vrrp_parser.c -> keepalived/vrrp/vrrp_parser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1206:  if (!__test_bit(CONFIG_TEST_BIT, &debug)) {",
      "1209:    fprintf(tf, \"%d\\n\", track_file_init_value);",
      "1210:    fclose(tf);",
      "1211:   }",
      "",
      "[Removed Lines]",
      "1208:   if ((tf = fopen(tfile->file_path, \"w\"))) {",
      "",
      "[Added Lines]",
      "1208:   if ((tf = fopen_safe(tfile->file_path, \"w\"))) {",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c": [
      "File: keepalived/vrrp/vrrp_print.c -> keepalived/vrrp/vrrp_print.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"vrrp.h\"",
      "33: #include \"vrrp_data.h\"",
      "34: #include \"vrrp_print.h\"",
      "36: static const char *dump_file = \"/tmp/keepalived.data\";",
      "37: static const char *stats_file = \"/tmp/keepalived.stats\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: #include \"utils.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39: void",
      "40: vrrp_print_data(void)",
      "41: {",
      "44:  if (!file) {",
      "45:   log_message(LOG_INFO, \"Can't open %s (%d: %s)\",",
      "",
      "[Removed Lines]",
      "42:  FILE *file = fopen (dump_file, \"w\");",
      "",
      "[Added Lines]",
      "43:  FILE *file = fopen_safe(dump_file, \"w\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55: void",
      "56: vrrp_print_stats(void)",
      "57: {",
      "61:  if (!file) {",
      "62:   log_message(LOG_INFO, \"Can't open %s (%d: %s)\",",
      "",
      "[Removed Lines]",
      "58:  FILE *file;",
      "59:  file = fopen (stats_file, \"w\");",
      "",
      "[Added Lines]",
      "59:  FILE *file = fopen_safe(stats_file, \"w\");",
      "60:  element e;",
      "61:  vrrp_t *vrrp;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "64:   return;",
      "65:  }",
      "73:   fprintf(file, \"VRRP Instance: %s\\n\", vrrp->iname);",
      "74:   fprintf(file, \"  Advertisements:\\n\");",
      "75:   fprintf(file, \"    Received: %\" PRIu64 \"\\n\", vrrp->stats->advert_rcvd);",
      "76:   fprintf(file, \"    Sent: %d\\n\", vrrp->stats->advert_sent);",
      "77:   fprintf(file, \"  Became master: %d\\n\", vrrp->stats->become_master);",
      "80:   fprintf(file, \"  Packet Errors:\\n\");",
      "81:   fprintf(file, \"    Length: %\" PRIu64 \"\\n\", vrrp->stats->packet_len_err);",
      "82:   fprintf(file, \"    TTL: %\" PRIu64 \"\\n\", vrrp->stats->ip_ttl_err);",
      "",
      "[Removed Lines]",
      "67:  list l = vrrp_data->vrrp;",
      "68:  element e;",
      "69:  vrrp_t *vrrp;",
      "71:  for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {",
      "72:   vrrp = ELEMENT_DATA(e);",
      "78:   fprintf(file, \"  Released master: %d\\n\",",
      "79:    vrrp->stats->release_master);",
      "",
      "[Added Lines]",
      "70:  LIST_FOREACH(vrrp_data->vrrp, vrrp, e) {",
      "76:   fprintf(file, \"  Released master: %d\\n\", vrrp->stats->release_master);",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c": [
      "File: keepalived/vrrp/vrrp_scheduler.c -> keepalived/vrrp/vrrp_scheduler.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1134:      NULL,",
      "1135: #endif",
      "1136:      global_data->instance_name);",
      "1138:  FREE(file_name);",
      "1140:  set_time_now();",
      "",
      "[Removed Lines]",
      "1137:  fp = fopen(file_name, \"a\");",
      "",
      "[Added Lines]",
      "1137:  fp = fopen_safe(file_name, \"a\");",
      "",
      "---------------"
    ],
    "lib/logger.c||lib/logger.c": [
      "File: lib/logger.c -> lib/logger.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:  file_name = make_file_name(name, prog, namespace, instance);",
      "82:  if (log_file) {",
      "83:   int n = fileno(log_file);",
      "84:   fcntl(n, F_SETFD, FD_CLOEXEC | fcntl(n, F_GETFD));",
      "",
      "[Removed Lines]",
      "81:  log_file = fopen(file_name, \"a\");",
      "",
      "[Added Lines]",
      "81:  log_file = fopen_safe(file_name, \"a\");",
      "",
      "---------------"
    ],
    "lib/memory.c||lib/memory.c": [
      "File: lib/memory.c -> lib/memory.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "621:  }",
      "623:  snprintf(log_name, log_name_len, \"/tmp/%s_mem.%d.log\", prog_name, getpid());",
      "625:  if (log_op == NULL) {",
      "626:   log_message(LOG_INFO, \"Unable to open %s for appending\", log_name);",
      "627:   log_op = stderr;",
      "",
      "[Removed Lines]",
      "624:  log_op = fopen(log_name, \"a\");",
      "",
      "[Added Lines]",
      "624:  log_op = fopen_safe(log_name, \"a\");",
      "",
      "---------------"
    ],
    "lib/notify.c||lib/notify.c": [
      "File: lib/notify.c -> lib/notify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "236:     notify_fifo_exec(master, script_exit, fifo, fifo->script);",
      "240:     log_message(LOG_INFO, \"Unable to open %snotify fifo %s - errno %d\", type, fifo->name, errno);",
      "241:     if (fifo->created_fifo) {",
      "242:      unlink(fifo->name);",
      "",
      "[Removed Lines]",
      "239:    if ((fifo->fd = open(fifo->name, O_RDWR | O_CLOEXEC | O_NONBLOCK)) == -1) {",
      "",
      "[Added Lines]",
      "239:    if ((fifo->fd = open(fifo->name, O_RDWR | O_CLOEXEC | O_NONBLOCK | O_NOFOLLOW)) == -1) {",
      "",
      "---------------"
    ],
    "lib/parser.c||lib/parser.c": [
      "File: lib/parser.c -> lib/parser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "455: {",
      "456:  unsigned int i;",
      "457:  keyword_t *keyword_vec;",
      "460:  if (!level) {",
      "461:   snprintf(file_name, sizeof(file_name), \"/tmp/keywords.%d\", getpid());",
      "463:   if (!fp)",
      "464:    return;",
      "465:  }",
      "",
      "[Removed Lines]",
      "458:  char file_name[21];",
      "462:   fp = fopen(file_name, \"w\");",
      "",
      "[Added Lines]",
      "458:  char file_name[22];",
      "462:   fp = fopen_safe(file_name, \"w\");",
      "",
      "---------------"
    ],
    "lib/utils.c||lib/utils.c": [
      "File: lib/utils.c -> lib/utils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:  nptrs = backtrace(buffer, 100);",
      "125:  if (file_name) {",
      "127:   if (str)",
      "128:    dprintf(fd, \"%s\\n\", str);",
      "129:   backtrace_symbols_fd(buffer, nptrs, fd);",
      "",
      "[Removed Lines]",
      "126:   fd = open(file_name, O_WRONLY | O_APPEND | O_CREAT, 0644);",
      "",
      "[Added Lines]",
      "126:   fd = open(file_name, O_WRONLY | O_APPEND | O_CREAT | O_NOFOLLOW, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "788:  return !strcmp(str1, str2);",
      "789: }",
      "791: void",
      "792: set_std_fd(bool force)",
      "793: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "793: FILE *fopen_safe(const char *path, const char *mode)",
      "794: {",
      "795:  int fd;",
      "796:  FILE *file;",
      "797:  int flags = O_NOFOLLOW | O_CREAT;",
      "799:  if (mode[0] == 'r')",
      "800:   return fopen(path, mode);",
      "802:  if (mode[0] != 'a' && mode[0] != 'w')",
      "803:   return NULL;",
      "805:  if (mode[1] &&",
      "806:      (mode[1] != '+' || mode[2]))",
      "807:   return NULL;",
      "809:  if (mode[0] == 'w')",
      "810:   flags |= O_TRUNC;",
      "811:  else",
      "812:   flags |= O_APPEND;",
      "814:  if (mode[1])",
      "815:   flags |= O_RDWR;",
      "816:  else",
      "817:   flags |= O_WRONLY;",
      "819:  fd = open(path, flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);",
      "820:  if (fd == -1)",
      "821:   return NULL;",
      "823:  file = fdopen (fd, \"w\");",
      "824:  if (!file) {",
      "825:   close(fd);",
      "826:   return NULL;",
      "827:  }",
      "829:  return file;",
      "830: }",
      "",
      "---------------"
    ],
    "lib/utils.h||lib/utils.h": [
      "File: lib/utils.h -> lib/utils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "182: extern int inet_sockaddrcmp(const struct sockaddr_storage *, const struct sockaddr_storage *);",
      "183: extern char *get_local_name(void);",
      "184: extern bool string_equal(const char *, const char *);",
      "185: extern void set_std_fd(bool);",
      "186: extern void close_std_fd(void);",
      "187: #if !defined _HAVE_LIBIPTC_ || defined _LIBIPTC_DYNAMIC_",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "185: extern FILE *fopen_safe(const char *, const char *);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bc78156f7786c24267978f061433f3abf9d12c44",
      "candidate_info": {
        "commit_hash": "bc78156f7786c24267978f061433f3abf9d12c44",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/bc78156f7786c24267978f061433f3abf9d12c44",
        "files": [
          "configure.ac",
          "keepalived/include/vrrp_ipaddress.h",
          "keepalived/vrrp/vrrp_ipaddress.c",
          "keepalived/vrrp/vrrp_json.c",
          "lib/Makefile.am",
          "lib/json_writer.c",
          "lib/json_writer.h"
        ],
        "message": "vrrp: Rewrote JSON code\n\nRemove dependency to json-c extralib by using a simple streaming JSON writter.\nRefactored code to make it simple to maintain.",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "keepalived/include/vrrp_ipaddress.h||keepalived/include/vrrp_ipaddress.h",
          "keepalived/vrrp/vrrp_ipaddress.c||keepalived/vrrp/vrrp_ipaddress.c",
          "keepalived/vrrp/vrrp_json.c||keepalived/vrrp/vrrp_json.c",
          "lib/Makefile.am||lib/Makefile.am",
          "lib/json_writer.c||lib/json_writer.c",
          "lib/json_writer.h||lib/json_writer.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "keepalived/vrrp/vrrp_json.c||keepalived/vrrp/vrrp_json.c"
          ],
          "candidate": [
            "keepalived/vrrp/vrrp_json.c||keepalived/vrrp/vrrp_json.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "1558:   fi",
          "1559:   CPPFLAGS=\"$SAV_CPPFLAGS\"",
          "1562:   if test \"${enable_json}\" = yes; then",
          "1570:     ENABLE_JSON=Yes",
          "1571:     add_config_opt([JSON])",
          "1572:   fi",
          "",
          "[Removed Lines]",
          "1561:   dnl ----[ Json output or not ? ]----",
          "1563:     JSON_HEADERS=$($PKG_CONFIG --cflags-only-I json-c)",
          "1564:     SAV_CPPFLAGS=\"$CPPFLAGS\"",
          "1565:     CPPFLAGS=\"$CPPFLAGS $JSON_HEADERS\"",
          "1566:     AC_CHECK_HEADERS(json.h,,AC_MSG_ERROR([unable to find json.h]))",
          "1567:     CPPFLAGS=\"$SAV_CPPFLAGS\"",
          "1568:     AC_DEFINE([_WITH_JSON_], [ 1 ], [Define to 1 to build with json output support])",
          "1569:     add_pkg_config([json-c])",
          "",
          "[Added Lines]",
          "1561:   dnl ----[ JSON output or not ? ]----",
          "1564:     AC_DEFINE([_WITH_JSON_], [ 1 ], [Define to 1 to build with JSON output support])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2286:   echo \"DBUS create instance     : ${DBUS_CREATE_INSTANCE}\"",
          "2287: fi",
          "2288: echo \"SHA1 support             : ${SHA1_SUPPORT}\"",
          "2290: echo \"libnl version            : ${NETLINK_VER}\"",
          "2291: echo \"Use IPv4 devconf         : ${IPV4_DEVCONF}\"",
          "2292: echo \"Use iptables             : ${USE_IPTABLES}\"",
          "",
          "[Removed Lines]",
          "2289: echo \"Use Json output          : ${ENABLE_JSON}\"",
          "",
          "[Added Lines]",
          "2283: echo \"Use JSON output          : ${ENABLE_JSON}\"",
          "",
          "---------------"
        ],
        "keepalived/include/vrrp_ipaddress.h||keepalived/include/vrrp_ipaddress.h": [
          "File: keepalived/include/vrrp_ipaddress.h -> keepalived/include/vrrp_ipaddress.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: extern int netlink_ipaddress(ip_address_t *, int);",
          "115: extern bool netlink_iplist(list, int, bool);",
          "116: extern void free_ipaddress(void *);",
          "117: extern void dump_ipaddress(FILE *, void *);",
          "118: extern ip_address_t *parse_ipaddress(ip_address_t *, char *, bool);",
          "119: extern ip_address_t *parse_route(char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: extern void format_ipaddress(ip_address_t *, char *, size_t);",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_ipaddress.c||keepalived/vrrp/vrrp_ipaddress.c": [
          "File: keepalived/vrrp/vrrp_ipaddress.c -> keepalived/vrrp/vrrp_ipaddress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:  FREE(ipaddr);",
          "234: }",
          "237: format_ipaddress(ip_address_t *ipaddr, char *buf, size_t buf_len)",
          "238: {",
          "239:  char peer[INET6_ADDRSTRLEN];",
          "",
          "[Removed Lines]",
          "236: static void",
          "",
          "[Added Lines]",
          "236: void",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_json.c||keepalived/vrrp/vrrp_json.c": [
          "File: keepalived/vrrp/vrrp_json.c -> keepalived/vrrp/vrrp_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <errno.h>",
          "29: #include <stdio.h>",
          "32: #include \"vrrp.h\"",
          "33: #include \"vrrp_track.h\"",
          "34: #include \"list.h\"",
          "35: #include \"vrrp_data.h\"",
          "36: #include \"vrrp_iproute.h\"",
          "37: #include \"vrrp_iprule.h\"",
          "38: #include \"logger.h\"",
          "39: #include \"timer.h\"",
          "40: #include \"utils.h\"",
          "42: static inline double",
          "43: timeval_to_double(const timeval_t *t)",
          "",
          "[Removed Lines]",
          "30: #include <json.h>",
          "",
          "[Added Lines]",
          "35: #include \"vrrp_ipaddress.h\"",
          "41: #include \"json_writer.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:  return (double)t->tv_sec + (double)t->tv_usec / TIMER_HZ_FLOAT;",
          "47: }",
          "51: {",
          "53:  element e;",
          "64:  }",
          "98: #ifdef _HAVE_VRRP_VMAC_",
          "101: #endif",
          "213: #ifdef _WITH_FIREWALL_",
          "263: #endif",
          "286: #ifdef _WITH_VRRP_AUTH_",
          "291: #endif",
          "304:  }",
          "307: }",
          "",
          "[Removed Lines]",
          "49: void",
          "50: vrrp_print_json(void)",
          "52:  FILE *file;",
          "54:  struct json_object *array;",
          "56:  if (LIST_ISEMPTY(vrrp_data->vrrp))",
          "57:   return;",
          "59:  file = fopen_safe(\"/tmp/keepalived.json\", \"w\");",
          "60:  if (!file) {",
          "61:   log_message(LOG_INFO, \"Can't open /tmp/keepalived.json (%d: %s)\",",
          "62:    errno, strerror(errno));",
          "63:   return;",
          "66:  array = json_object_new_array();",
          "68:  for (e = LIST_HEAD(vrrp_data->vrrp); e; ELEMENT_NEXT(e)) {",
          "69:   struct json_object *instance_json, *json_stats, *json_data,",
          "71: #ifdef _HAVE_FIB_ROUTING_",
          "72:   struct json_object *vroutes, *vrules;",
          "73: #endif",
          "74:   element f;",
          "76:   vrrp_t *vrrp = ELEMENT_DATA(e);",
          "77:   instance_json = json_object_new_object();",
          "78:   json_stats = json_object_new_object();",
          "79:   json_data = json_object_new_object();",
          "80:   vips = json_object_new_array();",
          "81:   evips = json_object_new_array();",
          "82:   track_ifp = json_object_new_array();",
          "83:   track_script = json_object_new_array();",
          "84: #ifdef _HAVE_FIB_ROUTING_",
          "85:   vroutes = json_object_new_array();",
          "86:   vrules = json_object_new_array();",
          "87: #endif",
          "90:   json_object_object_add(json_data, \"iname\",",
          "91:    json_object_new_string(vrrp->iname));",
          "92:   json_object_object_add(json_data, \"dont_track_primary\",",
          "93:    json_object_new_int(vrrp->dont_track_primary));",
          "94:   json_object_object_add(json_data, \"skip_check_adv_addr\",",
          "95:    json_object_new_int(vrrp->skip_check_adv_addr));",
          "96:   json_object_object_add(json_data, \"strict_mode\",",
          "97:    json_object_new_int((int)vrrp->strict_mode));",
          "99:   json_object_object_add(json_data, \"vmac_ifname\",",
          "100:    json_object_new_string(vrrp->vmac_ifname));",
          "103:   if (!LIST_ISEMPTY(vrrp->track_ifp)) {",
          "104:    for (f = LIST_HEAD(vrrp->track_ifp); f; ELEMENT_NEXT(f)) {",
          "105:     interface_t *ifp = ELEMENT_DATA(f);",
          "106:     json_object_array_add(track_ifp,",
          "107:      json_object_new_string(ifp->ifname));",
          "108:    }",
          "109:   }",
          "110:   json_object_object_add(json_data, \"track_ifp\", track_ifp);",
          "113:   if (!LIST_ISEMPTY(vrrp->track_script)) {",
          "114:    for (f = LIST_HEAD(vrrp->track_script); f; ELEMENT_NEXT(f)) {",
          "115:     tracked_sc_t *tsc = ELEMENT_DATA(f);",
          "116:     vrrp_script_t *vscript = tsc->scr;",
          "117:     json_object_array_add(track_script,",
          "118:      json_object_new_string(cmd_str(&vscript->script)));",
          "119:    }",
          "120:   }",
          "121:   json_object_object_add(json_data, \"track_script\", track_script);",
          "123:   json_object_object_add(json_data, \"ifp_ifname\",",
          "124:    json_object_new_string(vrrp->ifp->ifname));",
          "125:   json_object_object_add(json_data, \"master_priority\",",
          "126:    json_object_new_int(vrrp->master_priority));",
          "127:   json_object_object_add(json_data, \"last_transition\",",
          "128:    json_object_new_double(timeval_to_double(&vrrp->last_transition)));",
          "129:   json_object_object_add(json_data, \"garp_delay\",",
          "130:    json_object_new_double(vrrp->garp_delay / TIMER_HZ_FLOAT));",
          "131:   json_object_object_add(json_data, \"garp_refresh\",",
          "132:    json_object_new_int((int)vrrp->garp_refresh.tv_sec));",
          "133:   json_object_object_add(json_data, \"garp_rep\",",
          "134:    json_object_new_int((int)vrrp->garp_rep));",
          "135:   json_object_object_add(json_data, \"garp_refresh_rep\",",
          "136:    json_object_new_int((int)vrrp->garp_refresh_rep));",
          "137:   json_object_object_add(json_data, \"garp_lower_prio_delay\",",
          "138:    json_object_new_int((int)(vrrp->garp_lower_prio_delay / TIMER_HZ)));",
          "139:   json_object_object_add(json_data, \"garp_lower_prio_rep\",",
          "140:    json_object_new_int((int)vrrp->garp_lower_prio_rep));",
          "141:   json_object_object_add(json_data, \"lower_prio_no_advert\",",
          "142:    json_object_new_int((int)vrrp->lower_prio_no_advert));",
          "143:   json_object_object_add(json_data, \"higher_prio_send_advert\",",
          "144:    json_object_new_int((int)vrrp->higher_prio_send_advert));",
          "145:   json_object_object_add(json_data, \"vrid\",",
          "146:    json_object_new_int(vrrp->vrid));",
          "147:   json_object_object_add(json_data, \"base_priority\",",
          "148:    json_object_new_int(vrrp->base_priority));",
          "149:   json_object_object_add(json_data, \"effective_priority\",",
          "150:    json_object_new_int(vrrp->effective_priority));",
          "151:   json_object_object_add(json_data, \"vipset\",",
          "152:    json_object_new_boolean(vrrp->vipset));",
          "155:   if (!LIST_ISEMPTY(vrrp->vip)) {",
          "156:    for (f = LIST_HEAD(vrrp->vip); f; ELEMENT_NEXT(f)) {",
          "157:     ip_address_t *vip = ELEMENT_DATA(f);",
          "158:     char ipaddr[INET6_ADDRSTRLEN];",
          "159:     inet_ntop(vrrp->family, &(vip->u.sin.sin_addr.s_addr),",
          "160:      ipaddr, INET6_ADDRSTRLEN);",
          "161:     json_object_array_add(vips,",
          "162:      json_object_new_string(ipaddr));",
          "163:    }",
          "164:   }",
          "165:   json_object_object_add(json_data, \"vips\", vips);",
          "168:   if (!LIST_ISEMPTY(vrrp->evip)) {",
          "169:    for (f = LIST_HEAD(vrrp->evip); f; ELEMENT_NEXT(f)) {",
          "170:     ip_address_t *evip = ELEMENT_DATA(f);",
          "171:     char ipaddr[INET6_ADDRSTRLEN];",
          "172:     inet_ntop(vrrp->family, &(evip->u.sin.sin_addr.s_addr),",
          "173:      ipaddr, INET6_ADDRSTRLEN);",
          "174:     json_object_array_add(evips,",
          "175:      json_object_new_string(ipaddr));",
          "176:    }",
          "177:   }",
          "178:   json_object_object_add(json_data, \"evips\", evips);",
          "180:   json_object_object_add(json_data, \"promote_secondaries\",",
          "181:    json_object_new_boolean(vrrp->promote_secondaries));",
          "183: #ifdef _HAVE_FIB_ROUTING_",
          "185:   if (!LIST_ISEMPTY(vrrp->vroutes)) {",
          "186:    for (f = LIST_HEAD(vrrp->vroutes); f; ELEMENT_NEXT(f)) {",
          "187:     ip_route_t *route = ELEMENT_DATA(f);",
          "188:     char *buf = MALLOC(ROUTE_BUF_SIZE);",
          "189:     format_iproute(route, buf, ROUTE_BUF_SIZE);",
          "190:     json_object_array_add(vroutes,",
          "191:      json_object_new_string(buf));",
          "192:    }",
          "193:   }",
          "194:   json_object_object_add(json_data, \"vroutes\", vroutes);",
          "197:   if (!LIST_ISEMPTY(vrrp->vrules)) {",
          "198:    for (f = LIST_HEAD(vrrp->vrules); f; ELEMENT_NEXT(f)) {",
          "199:     ip_rule_t *rule = ELEMENT_DATA(f);",
          "200:     char *buf = MALLOC(RULE_BUF_SIZE);",
          "201:     format_iprule(rule, buf, RULE_BUF_SIZE);",
          "202:     json_object_array_add(vrules,",
          "203:      json_object_new_string(buf));",
          "204:    }",
          "205:   }",
          "206:   json_object_object_add(json_data, \"vrules\", vrules);",
          "207: #endif",
          "209:   json_object_object_add(json_data, \"adver_int\",",
          "210:    json_object_new_double(vrrp->adver_int / TIMER_HZ_FLOAT));",
          "211:   json_object_object_add(json_data, \"master_adver_int\",",
          "212:    json_object_new_double(vrrp->master_adver_int / TIMER_HZ_FLOAT));",
          "214:   json_object_object_add(json_data, \"accept\",",
          "215:    json_object_new_int((int)vrrp->accept));",
          "216: #endif",
          "217:   json_object_object_add(json_data, \"nopreempt\",",
          "218:    json_object_new_boolean(vrrp->nopreempt));",
          "219:   json_object_object_add(json_data, \"preempt_delay\",",
          "220:    json_object_new_int((int)(vrrp->preempt_delay / TIMER_HZ)));",
          "221:   json_object_object_add(json_data, \"state\",",
          "222:    json_object_new_int(vrrp->state));",
          "223:   json_object_object_add(json_data, \"wantstate\",",
          "224:    json_object_new_int(vrrp->wantstate));",
          "225:   json_object_object_add(json_data, \"version\",",
          "226:    json_object_new_int(vrrp->version));",
          "227:   if (vrrp->script_backup)",
          "228:    json_object_object_add(json_data, \"script_backup\",",
          "229:     json_object_new_string(cmd_str(vrrp->script_backup)));",
          "230:   if (vrrp->script_master)",
          "231:    json_object_object_add(json_data, \"script_master\",",
          "232:     json_object_new_string(cmd_str(vrrp->script_master)));",
          "233:   if (vrrp->script_fault)",
          "234:    json_object_object_add(json_data, \"script_fault\",",
          "235:     json_object_new_string(cmd_str(vrrp->script_fault)));",
          "236:   if (vrrp->script_stop)",
          "237:    json_object_object_add(json_data, \"script_stop\",",
          "238:     json_object_new_string(cmd_str(vrrp->script_stop)));",
          "239:   if (vrrp->script)",
          "240:    json_object_object_add(json_data, \"script\",",
          "241:     json_object_new_string(cmd_str(vrrp->script)));",
          "242:   if (vrrp->script_master_rx_lower_pri)",
          "243:    json_object_object_add(json_data, \"script_master_rx_lower_pri\",",
          "244:     json_object_new_string(cmd_str(vrrp->script_master_rx_lower_pri)));",
          "245:   json_object_object_add(json_data, \"smtp_alert\",",
          "246:    json_object_new_boolean(vrrp->smtp_alert));",
          "247: #ifdef _WITH_VRRP_AUTH_",
          "248:   if (vrrp->auth_type) {",
          "249:    json_object_object_add(json_data, \"auth_type\",",
          "250:     json_object_new_int(vrrp->auth_type));",
          "252:    if (vrrp->auth_type != VRRP_AUTH_AH) {",
          "253:     char auth_data[sizeof(vrrp->auth_data) + 1];",
          "254:     memcpy(auth_data, vrrp->auth_data, sizeof(vrrp->auth_data));",
          "255:     auth_data[sizeof(vrrp->auth_data)] = '\\0';",
          "256:     json_object_object_add(json_data, \"auth_data\",",
          "257:      json_object_new_string(auth_data));",
          "258:    }",
          "259:   }",
          "260:   else",
          "261:    json_object_object_add(json_data, \"auth_type\",",
          "262:     json_object_new_int(0));",
          "266:   json_object_object_add(json_stats, \"advert_rcvd\",",
          "267:    json_object_new_int64((int64_t)vrrp->stats->advert_rcvd));",
          "268:   json_object_object_add(json_stats, \"advert_sent\",",
          "269:    json_object_new_int64(vrrp->stats->advert_sent));",
          "270:   json_object_object_add(json_stats, \"become_master\",",
          "271:    json_object_new_int64(vrrp->stats->become_master));",
          "272:   json_object_object_add(json_stats, \"release_master\",",
          "273:    json_object_new_int64(vrrp->stats->release_master));",
          "274:   json_object_object_add(json_stats, \"packet_len_err\",",
          "275:    json_object_new_int64((int64_t)vrrp->stats->packet_len_err));",
          "276:   json_object_object_add(json_stats, \"advert_interval_err\",",
          "277:    json_object_new_int64((int64_t)vrrp->stats->advert_interval_err));",
          "278:   json_object_object_add(json_stats, \"ip_ttl_err\",",
          "279:    json_object_new_int64((int64_t)vrrp->stats->ip_ttl_err));",
          "280:   json_object_object_add(json_stats, \"invalid_type_rcvd\",",
          "281:    json_object_new_int64((int64_t)vrrp->stats->invalid_type_rcvd));",
          "282:   json_object_object_add(json_stats, \"addr_list_err\",",
          "283:    json_object_new_int64((int64_t)vrrp->stats->addr_list_err));",
          "284:   json_object_object_add(json_stats, \"invalid_authtype\",",
          "285:    json_object_new_int64(vrrp->stats->invalid_authtype));",
          "287:   json_object_object_add(json_stats, \"authtype_mismatch\",",
          "288:    json_object_new_int64(vrrp->stats->authtype_mismatch));",
          "289:   json_object_object_add(json_stats, \"auth_failure\",",
          "290:    json_object_new_int64(vrrp->stats->auth_failure));",
          "292:   json_object_object_add(json_stats, \"pri_zero_rcvd\",",
          "293:    json_object_new_int64((int64_t)vrrp->stats->pri_zero_rcvd));",
          "294:   json_object_object_add(json_stats, \"pri_zero_sent\",",
          "295:    json_object_new_int64((int64_t)vrrp->stats->pri_zero_sent));",
          "298:   json_object_object_add(instance_json, \"data\", json_data);",
          "299:   json_object_object_add(instance_json, \"stats\", json_stats);",
          "302:   json_object_array_add(array, instance_json);",
          "305:  fprintf(file, \"%s\", json_object_to_json_string(array));",
          "306:  fclose(file);",
          "",
          "[Added Lines]",
          "50: static int",
          "51: vrrp_json_stats_dump(json_writer_t *wr, vrrp_t *vrrp)",
          "52: {",
          "53:  vrrp_stats *stats = vrrp->stats;",
          "55:  if (!stats)",
          "56:   return -1;",
          "59:  jsonw_name(wr, \"stats\");",
          "60:  jsonw_start_object(wr);",
          "61:  jsonw_uint_field(wr, \"advert_rcvd\", stats->advert_rcvd);",
          "62:  jsonw_uint_field(wr, \"advert_sent\", stats->advert_sent);",
          "63:  jsonw_uint_field(wr, \"become_master\", stats->become_master);",
          "64:  jsonw_uint_field(wr, \"release_master\", stats->release_master);",
          "65:  jsonw_uint_field(wr, \"packet_len_err\", stats->packet_len_err);",
          "66:  jsonw_uint_field(wr, \"advert_interval_err\", stats->advert_interval_err);",
          "67:  jsonw_uint_field(wr, \"ip_ttl_err\", stats->ip_ttl_err);",
          "68:  jsonw_uint_field(wr, \"invalid_type_rcvd\", stats->invalid_type_rcvd);",
          "69:  jsonw_uint_field(wr, \"addr_list_err\", stats->addr_list_err);",
          "70:  jsonw_uint_field(wr, \"invalid_authtype\", stats->invalid_authtype);",
          "71: #ifdef _WITH_VRRP_AUTH_",
          "72:  jsonw_uint_field(wr, \"authtype_mismatch\", stats->authtype_mismatch);",
          "73:  jsonw_uint_field(wr, \"auth_failure\", stats->auth_failure);",
          "74: #endif",
          "75:  jsonw_uint_field(wr, \"pri_zero_rcvd\", stats->pri_zero_rcvd);",
          "76:  jsonw_uint_field(wr, \"pri_zero_sent\", stats->pri_zero_sent);",
          "77:  jsonw_end_object(wr);",
          "78:  return 0;",
          "79: }",
          "82: static int",
          "83: vrrp_json_script_dump(json_writer_t *wr, char *prop, notify_script_t *script)",
          "84: {",
          "85:  if (!script)",
          "86:   return -1;",
          "88:  jsonw_string_field(wr, prop, cmd_str(script));",
          "89:  return 0;",
          "90: }",
          "92: static int",
          "93: vrrp_json_ip_dump(json_writer_t *wr, void *data)",
          "94: {",
          "95:  ip_address_t *ipaddr = data;",
          "96:  char buf[256];",
          "98:  format_ipaddress(ipaddr, buf, sizeof(buf));",
          "99:  jsonw_string(wr, buf);",
          "100:  return 0;",
          "101: }",
          "103: static int",
          "104: vrrp_json_vroute_dump(json_writer_t *wr, void *data)",
          "106:  ip_route_t *iproute = data;",
          "107:  char buf[256];",
          "109:  format_iproute(iproute, buf, sizeof(buf));",
          "110:  jsonw_string(wr, buf);",
          "111:  return 0;",
          "112: }",
          "114: static int",
          "115: vrrp_json_vrule_dump(json_writer_t *wr, void *data)",
          "116: {",
          "117:  ip_rule_t *iprule = data;",
          "118:  char buf[256];",
          "120:  format_iprule(iprule, buf, sizeof(buf));",
          "121:  jsonw_string(wr, buf);",
          "122:  return 0;",
          "123: }",
          "125: static int",
          "126: vrrp_json_track_ifp_dump(json_writer_t *wr, void *data)",
          "127: {",
          "128:  interface_t *ifp = data;",
          "130:  jsonw_string(wr, ifp->ifname);",
          "131:  return 0;",
          "132: }",
          "134: static int",
          "135: vrrp_json_track_script_dump(json_writer_t *wr, void *data)",
          "136: {",
          "137:  tracked_sc_t *tsc = data;",
          "138:  vrrp_script_t *vscript = tsc->scr;",
          "140:  jsonw_string(wr, cmd_str(&vscript->script));",
          "141:  return 0;",
          "142: }",
          "144: static int",
          "145: vrrp_json_array_dump(json_writer_t *wr, char *prop, list l,",
          "146:        int (*func) (json_writer_t *, void *))",
          "147: {",
          "148:  void *data;",
          "151:  if (LIST_ISEMPTY(l))",
          "152:   return -1;",
          "154:  jsonw_name(wr, prop);",
          "155:  jsonw_start_array(wr);",
          "156:  LIST_FOREACH(l, data, e) {",
          "157:   (*func) (wr, data);",
          "159:  jsonw_end_array(wr);",
          "160:  return 0;",
          "161: }",
          "163: static int",
          "164: vrrp_json_auth_dump(json_writer_t *wr, char *prop, vrrp_t *vrrp)",
          "165: {",
          "166:  char buf[256];",
          "168:  if (!vrrp->auth_type)",
          "169:   return -1;",
          "171:  memcpy(buf, vrrp->auth_data, sizeof(vrrp->auth_data));",
          "172:  buf[sizeof(vrrp->auth_data)] = 0;",
          "173:  jsonw_string_field(wr, prop, buf);",
          "174:  return 0;",
          "175: }",
          "177: static int",
          "178: vrrp_json_data_dump(json_writer_t *wr, vrrp_t *vrrp)",
          "179: {",
          "181:  jsonw_name(wr, \"data\");",
          "182:  jsonw_start_object(wr);",
          "185:  jsonw_string_field(wr, \"iname\", vrrp->iname);",
          "186:  jsonw_uint_field(wr, \"dont_track_primary\", vrrp->dont_track_primary);",
          "187:  jsonw_uint_field(wr, \"skip_check_adv_addr\", vrrp->skip_check_adv_addr);",
          "188:  jsonw_uint_field(wr, \"strict_mode\", vrrp->strict_mode);",
          "190:  jsonw_string_field(wr, \"vmac_ifname\", vrrp->vmac_ifname);",
          "192:  jsonw_string_field(wr, \"ifp_ifname\", vrrp->ifp->ifname);",
          "193:  jsonw_uint_field(wr, \"master_priority\", vrrp->master_priority);",
          "194:  jsonw_float_field(wr, \"last_transition\", timeval_to_double(&vrrp->last_transition));",
          "195:  jsonw_float_field(wr, \"garp_delay\", vrrp->garp_delay / TIMER_HZ_FLOAT);",
          "196:  jsonw_uint_field(wr, \"garp_refresh\", vrrp->garp_refresh.tv_sec);",
          "197:  jsonw_uint_field(wr, \"garp_rep\", vrrp->garp_rep);",
          "198:  jsonw_uint_field(wr, \"garp_refresh_rep\", vrrp->garp_refresh_rep);",
          "199:  jsonw_uint_field(wr, \"garp_lower_prio_delay\", vrrp->garp_lower_prio_delay / TIMER_HZ);",
          "200:  jsonw_uint_field(wr, \"garp_lower_prio_rep\", vrrp->garp_lower_prio_rep);",
          "201:  jsonw_uint_field(wr, \"lower_prio_no_advert\", vrrp->lower_prio_no_advert);",
          "202:  jsonw_uint_field(wr, \"higher_prio_send_advert\", vrrp->higher_prio_send_advert);",
          "203:  jsonw_uint_field(wr, \"vrid\", vrrp->vrid);",
          "204:  jsonw_uint_field(wr, \"base_priority\", vrrp->base_priority);",
          "205:  jsonw_uint_field(wr, \"effective_priority\", vrrp->effective_priority);",
          "206:  jsonw_bool_field(wr, \"vipset\", vrrp->vipset);",
          "207:  jsonw_bool_field(wr, \"promote_secondaries\", vrrp->promote_secondaries);",
          "208:  jsonw_float_field(wr, \"adver_int\", vrrp->adver_int / TIMER_HZ_FLOAT);",
          "209:  jsonw_float_field(wr, \"master_adver_int\", vrrp->master_adver_int / TIMER_HZ_FLOAT);",
          "211:  jsonw_uint_field(wr, \"accept\", vrrp->accept);",
          "213:  jsonw_bool_field(wr, \"nopreempt\", vrrp->nopreempt);",
          "214:  jsonw_uint_field(wr, \"preempt_delay\", vrrp->preempt_delay / TIMER_HZ);",
          "215:  jsonw_uint_field(wr, \"state\", vrrp->state);",
          "216:  jsonw_uint_field(wr, \"wantstate\", vrrp->wantstate);",
          "217:  jsonw_uint_field(wr, \"version\", vrrp->version);",
          "218:  jsonw_bool_field(wr, \"smtp_alert\", vrrp->smtp_alert);",
          "221:  vrrp_json_script_dump(wr, \"script_backup\", vrrp->script_backup);",
          "222:  vrrp_json_script_dump(wr, \"script_master\", vrrp->script_master);",
          "223:  vrrp_json_script_dump(wr, \"script_fault\", vrrp->script_fault);",
          "224:  vrrp_json_script_dump(wr, \"script_stop\", vrrp->script_stop);",
          "225:  vrrp_json_script_dump(wr, \"script\", vrrp->script);",
          "226:  vrrp_json_script_dump(wr, \"script_master_rx_lower_pri\"",
          "227:     , vrrp->script_master_rx_lower_pri);",
          "230:  vrrp_json_array_dump(wr, \"vips\", vrrp->vip, vrrp_json_ip_dump);",
          "231:  vrrp_json_array_dump(wr, \"evips\", vrrp->evip, vrrp_json_ip_dump);",
          "232:  vrrp_json_array_dump(wr, \"vroutes\", vrrp->vroutes, vrrp_json_vroute_dump);",
          "233:  vrrp_json_array_dump(wr, \"vrules\", vrrp->vrules, vrrp_json_vrule_dump);",
          "236:  vrrp_json_array_dump(wr, \"track_ifp\", vrrp->track_ifp, vrrp_json_track_ifp_dump);",
          "237:  vrrp_json_array_dump(wr, \"track_script\", vrrp->track_script, vrrp_json_track_script_dump);",
          "240:  jsonw_uint_field(wr, \"auth_type\", vrrp->auth_type);",
          "241:  vrrp_json_auth_dump(wr, \"auth_data\", vrrp);",
          "244:  jsonw_end_object(wr);",
          "245:  return 0;",
          "246: }",
          "253: int",
          "254: vrrp_json_dump(FILE *fp)",
          "255: {",
          "256:  json_writer_t *wr;",
          "257:  vrrp_t *vrrp;",
          "258:  element e;",
          "260:  wr = jsonw_new(fp);",
          "261:  jsonw_start_array(wr);",
          "263:  LIST_FOREACH(vrrp_data->vrrp, vrrp, e) {",
          "264:   jsonw_start_object(wr);",
          "265:   vrrp_json_data_dump(wr, vrrp);",
          "266:   vrrp_json_stats_dump(wr, vrrp);",
          "267:   jsonw_end_object(wr);",
          "270:  jsonw_end_array(wr);",
          "271:  jsonw_destroy(&wr);",
          "272:  return 0;",
          "273: }",
          "275: void",
          "276: vrrp_print_json(void)",
          "277: {",
          "278:  FILE *fp;",
          "280:  if (LIST_ISEMPTY(vrrp_data->vrrp))",
          "281:   return;",
          "283:  fp = fopen_safe(\"/tmp/keepalived.json\", \"w\");",
          "284:  if (!fp) {",
          "285:   log_message(LOG_INFO, \"Can't open /tmp/keepalived.json (%d: %m)\", errno);",
          "286:   return;",
          "287:  }",
          "289:  vrrp_json_dump(fp);",
          "290:  fclose(fp);",
          "",
          "---------------"
        ],
        "lib/Makefile.am||lib/Makefile.am": [
          "File: lib/Makefile.am -> lib/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: noinst_LIBRARIES = liblib.a",
          "18: liblib_a_SOURCES = memory.c utils.c notify.c timer.c scheduler.c \\",
          "26: liblib_a_LIBADD  =",
          "27: EXTRA_liblib_a_SOURCES =",
          "",
          "[Removed Lines]",
          "19:  vector.c list.c html.c parser.c signals.c logger.c \\",
          "20:  list_head.c rbtree.c process.c \\",
          "21:  bitops.h timer.h scheduler.h vector.h parser.h \\",
          "22:  signals.h notify.h logger.h list.h memory.h html.h utils.h \\",
          "23:  keepalived_magic.h list_head.h rbtree.h process.h \\",
          "24:  rbtree_augmented.h assert_debug.h",
          "",
          "[Added Lines]",
          "19:      vector.c list.c html.c parser.c signals.c logger.c \\",
          "20:      list_head.c rbtree.c process.c json_writer.c \\",
          "21:      bitops.h timer.h scheduler.h vector.h parser.h \\",
          "22:      signals.h notify.h logger.h list.h memory.h html.h utils.h \\",
          "23:      keepalived_magic.h list_head.h rbtree.h process.h \\",
          "24:      rbtree_augmented.h assert_debug.h json_writer.h",
          "",
          "---------------"
        ],
        "lib/json_writer.c||lib/json_writer.c": [
          "File: lib/json_writer.c -> lib/json_writer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <stdio.h>",
          "16: #include <stdbool.h>",
          "17: #include <stdarg.h>",
          "18: #include <assert.h>",
          "19: #include <malloc.h>",
          "20: #include <inttypes.h>",
          "21: #include <stdint.h>",
          "23: #include \"memory.h\"",
          "24: #include \"json_writer.h\"",
          "26: struct json_writer {",
          "31: };",
          "34: static void jsonw_indent(json_writer_t *self)",
          "35: {",
          "36:  unsigned i;",
          "37:  for (i = 0; i < self->depth; ++i)",
          "38:   fputs(\"    \", self->out);",
          "39: }",
          "42: static void jsonw_eol(json_writer_t *self)",
          "43: {",
          "44:  if (!self->pretty)",
          "45:   return;",
          "47:  putc('\\n', self->out);",
          "48:  jsonw_indent(self);",
          "49: }",
          "52: static void jsonw_eor(json_writer_t *self)",
          "53: {",
          "54:  if (self->sep != '\\0')",
          "55:   putc(self->sep, self->out);",
          "56:  self->sep = ',';",
          "57: }",
          "62: static void jsonw_puts(json_writer_t *self, const char *str)",
          "63: {",
          "64:  putc('\"', self->out);",
          "65:  for (; *str; ++str)",
          "66:   switch (*str) {",
          "67:   case '\\t':",
          "68:    fputs(\"\\\\t\", self->out);",
          "69:    break;",
          "70:   case '\\n':",
          "71:    fputs(\"\\\\n\", self->out);",
          "72:    break;",
          "73:   case '\\r':",
          "74:    fputs(\"\\\\r\", self->out);",
          "75:    break;",
          "76:   case '\\f':",
          "77:    fputs(\"\\\\f\", self->out);",
          "78:    break;",
          "79:   case '\\b':",
          "80:    fputs(\"\\\\b\", self->out);",
          "81:    break;",
          "82:   case '\\\\':",
          "83:    fputs(\"\\\\n\", self->out);",
          "84:    break;",
          "85:   case '\"':",
          "86:    fputs(\"\\\\\\\"\", self->out);",
          "87:    break;",
          "88:   case '\\'':",
          "89:    fputs(\"\\\\\\'\", self->out);",
          "90:    break;",
          "91:   default:",
          "92:    putc(*str, self->out);",
          "93:   }",
          "94:  putc('\"', self->out);",
          "95: }",
          "98: json_writer_t *jsonw_new(FILE *f)",
          "99: {",
          "100:  json_writer_t *self = MALLOC(sizeof(*self));",
          "101:  if (self) {",
          "102:   self->out = f;",
          "103:   self->depth = 0;",
          "104:   self->pretty = false;",
          "105:   self->sep = '\\0';",
          "106:  }",
          "107:  return self;",
          "108: }",
          "111: void jsonw_destroy(json_writer_t **self_p)",
          "112: {",
          "113:  json_writer_t *self = *self_p;",
          "115:  assert(self->depth == 0);",
          "116:  fputs(\"\\n\", self->out);",
          "117:  fflush(self->out);",
          "118:  FREE(self);",
          "120: }",
          "122: void jsonw_pretty(json_writer_t *self, bool on)",
          "123: {",
          "124:  self->pretty = on;",
          "125: }",
          "128: static void jsonw_begin(json_writer_t *self, int c)",
          "129: {",
          "130:  jsonw_eor(self);",
          "131:  putc(c, self->out);",
          "132:  ++self->depth;",
          "133:  self->sep = '\\0';",
          "134: }",
          "136: static void jsonw_end(json_writer_t *self, int c)",
          "137: {",
          "138:  assert(self->depth > 0);",
          "140:  --self->depth;",
          "141:  if (self->sep != '\\0')",
          "142:   jsonw_eol(self);",
          "143:  putc(c, self->out);",
          "144:  self->sep = ',';",
          "145: }",
          "149: void jsonw_name(json_writer_t *self, const char *name)",
          "150: {",
          "151:  jsonw_eor(self);",
          "152:  jsonw_eol(self);",
          "153:  self->sep = '\\0';",
          "154:  jsonw_puts(self, name);",
          "155:  putc(':', self->out);",
          "156:  if (self->pretty)",
          "157:   putc(' ', self->out);",
          "158: }",
          "160: void jsonw_vprintf_enquote(json_writer_t *self, const char *fmt, va_list ap)",
          "161: {",
          "162:  jsonw_eor(self);",
          "163:  putc('\"', self->out);",
          "164:  vfprintf(self->out, fmt, ap);",
          "165:  putc('\"', self->out);",
          "166: }",
          "168: void jsonw_printf(json_writer_t *self, const char *fmt, ...)",
          "169: {",
          "170:  va_list ap;",
          "172:  va_start(ap, fmt);",
          "173:  jsonw_eor(self);",
          "174:  vfprintf(self->out, fmt, ap);",
          "175:  va_end(ap);",
          "176: }",
          "179: void jsonw_start_object(json_writer_t *self)",
          "180: {",
          "181:  jsonw_begin(self, '{');",
          "182: }",
          "184: void jsonw_end_object(json_writer_t *self)",
          "185: {",
          "186:  jsonw_end(self, '}');",
          "187: }",
          "189: void jsonw_start_array(json_writer_t *self)",
          "190: {",
          "191:  jsonw_begin(self, '[');",
          "192: }",
          "194: void jsonw_end_array(json_writer_t *self)",
          "195: {",
          "196:  jsonw_end(self, ']');",
          "197: }",
          "200: void jsonw_string(json_writer_t *self, const char *value)",
          "201: {",
          "202:  jsonw_eor(self);",
          "203:  jsonw_puts(self, value);",
          "204: }",
          "206: void jsonw_bool(json_writer_t *self, bool val)",
          "207: {",
          "208:  jsonw_printf(self, \"%s\", val ? \"true\" : \"false\");",
          "209: }",
          "211: void jsonw_null(json_writer_t *self)",
          "212: {",
          "213:  jsonw_printf(self, \"null\");",
          "214: }",
          "216: void jsonw_float_fmt(json_writer_t *self, const char *fmt, double num)",
          "217: {",
          "218:  jsonw_printf(self, fmt, num);",
          "219: }",
          "221: void jsonw_float(json_writer_t *self, double num)",
          "222: {",
          "223:  jsonw_printf(self, \"%g\", num);",
          "224: }",
          "226: void jsonw_hu(json_writer_t *self, unsigned short num)",
          "227: {",
          "228:  jsonw_printf(self, \"%hu\", num);",
          "229: }",
          "231: void jsonw_uint(json_writer_t *self, uint64_t num)",
          "232: {",
          "233:  jsonw_printf(self, \"%\"PRIu64, num);",
          "234: }",
          "236: void jsonw_lluint(json_writer_t *self, unsigned long long int num)",
          "237: {",
          "238:  jsonw_printf(self, \"%llu\", num);",
          "239: }",
          "241: void jsonw_int(json_writer_t *self, int64_t num)",
          "242: {",
          "243:  jsonw_printf(self, \"%\"PRId64, num);",
          "244: }",
          "247: void jsonw_string_field(json_writer_t *self, const char *prop, const char *val)",
          "248: {",
          "249:  jsonw_name(self, prop);",
          "250:  jsonw_string(self, val);",
          "251: }",
          "253: void jsonw_bool_field(json_writer_t *self, const char *prop, bool val)",
          "254: {",
          "255:  jsonw_name(self, prop);",
          "256:  jsonw_bool(self, val);",
          "257: }",
          "259: void jsonw_float_field(json_writer_t *self, const char *prop, double val)",
          "260: {",
          "261:  jsonw_name(self, prop);",
          "262:  jsonw_float(self, val);",
          "263: }",
          "265: void jsonw_float_field_fmt(json_writer_t *self,",
          "266:       const char *prop,",
          "267:       const char *fmt,",
          "268:       double val)",
          "269: {",
          "270:  jsonw_name(self, prop);",
          "271:  jsonw_float_fmt(self, fmt, val);",
          "272: }",
          "274: void jsonw_uint_field(json_writer_t *self, const char *prop, uint64_t num)",
          "275: {",
          "276:  jsonw_name(self, prop);",
          "277:  jsonw_uint(self, num);",
          "278: }",
          "280: void jsonw_hu_field(json_writer_t *self, const char *prop, unsigned short num)",
          "281: {",
          "282:  jsonw_name(self, prop);",
          "283:  jsonw_hu(self, num);",
          "284: }",
          "286: void jsonw_lluint_field(json_writer_t *self,",
          "287:    const char *prop,",
          "288:    unsigned long long int num)",
          "289: {",
          "290:  jsonw_name(self, prop);",
          "291:  jsonw_lluint(self, num);",
          "292: }",
          "294: void jsonw_int_field(json_writer_t *self, const char *prop, int64_t num)",
          "295: {",
          "296:  jsonw_name(self, prop);",
          "297:  jsonw_int(self, num);",
          "298: }",
          "300: void jsonw_null_field(json_writer_t *self, const char *prop)",
          "301: {",
          "302:  jsonw_name(self, prop);",
          "303:  jsonw_null(self);",
          "304: }",
          "",
          "---------------"
        ],
        "lib/json_writer.h||lib/json_writer.h": [
          "File: lib/json_writer.h -> lib/json_writer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #ifndef _JSON_WRITER_H_",
          "16: #define _JSON_WRITER_H_",
          "18: #include <stdbool.h>",
          "19: #include <stdint.h>",
          "20: #include <stdarg.h>",
          "23: typedef struct json_writer json_writer_t;",
          "26: json_writer_t *jsonw_new(FILE *f);",
          "28: void jsonw_destroy(json_writer_t **self_p);",
          "31: void jsonw_pretty(json_writer_t *self, bool on);",
          "34: void jsonw_name(json_writer_t *self, const char *name);",
          "37: void jsonw_vprintf_enquote(json_writer_t *self, const char *fmt, va_list ap);",
          "38: void jsonw_printf(json_writer_t *self, const char *fmt, ...);",
          "39: void jsonw_string(json_writer_t *self, const char *value);",
          "40: void jsonw_bool(json_writer_t *self, bool value);",
          "41: void jsonw_float(json_writer_t *self, double number);",
          "42: void jsonw_float_fmt(json_writer_t *self, const char *fmt, double num);",
          "43: void jsonw_uint(json_writer_t *self, uint64_t number);",
          "44: void jsonw_hu(json_writer_t *self, unsigned short number);",
          "45: void jsonw_int(json_writer_t *self, int64_t number);",
          "46: void jsonw_null(json_writer_t *self);",
          "47: void jsonw_lluint(json_writer_t *self, unsigned long long int num);",
          "50: void jsonw_string_field(json_writer_t *self, const char *prop, const char *val);",
          "51: void jsonw_bool_field(json_writer_t *self, const char *prop, bool value);",
          "52: void jsonw_float_field(json_writer_t *self, const char *prop, double num);",
          "53: void jsonw_uint_field(json_writer_t *self, const char *prop, uint64_t num);",
          "54: void jsonw_hu_field(json_writer_t *self, const char *prop, unsigned short num);",
          "55: void jsonw_int_field(json_writer_t *self, const char *prop, int64_t num);",
          "56: void jsonw_null_field(json_writer_t *self, const char *prop);",
          "57: void jsonw_lluint_field(json_writer_t *self, const char *prop,",
          "58:    unsigned long long int num);",
          "59: void jsonw_float_field_fmt(json_writer_t *self, const char *prop,",
          "60:       const char *fmt, double val);",
          "63: void jsonw_start_object(json_writer_t *self);",
          "64: void jsonw_end_object(json_writer_t *self);",
          "66: void jsonw_start_array(json_writer_t *self);",
          "67: void jsonw_end_array(json_writer_t *self);",
          "70: typedef void (jsonw_err_handler_fn)(const char *);",
          "72: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f6ac49700084ddad5d4b1551770a80751b357c1",
      "candidate_info": {
        "commit_hash": "8f6ac49700084ddad5d4b1551770a80751b357c1",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/8f6ac49700084ddad5d4b1551770a80751b357c1",
        "files": [
          "doc/man/man8/keepalived.8",
          "keepalived/check/check_data.c",
          "keepalived/core/keepalived_netlink.c",
          "keepalived/core/main.c",
          "keepalived/include/keepalived_netlink.h",
          "keepalived/vrrp/vrrp.c",
          "keepalived/vrrp/vrrp_daemon.c",
          "lib/parser.h",
          "lib/scheduler.c",
          "lib/scheduler.h"
        ],
        "message": "Some fixes for config-test\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "keepalived/check/check_data.c||keepalived/check/check_data.c",
          "keepalived/core/keepalived_netlink.c||keepalived/core/keepalived_netlink.c",
          "keepalived/core/main.c||keepalived/core/main.c",
          "keepalived/include/keepalived_netlink.h||keepalived/include/keepalived_netlink.h",
          "keepalived/vrrp/vrrp.c||keepalived/vrrp/vrrp.c",
          "keepalived/vrrp/vrrp_daemon.c||keepalived/vrrp/vrrp_daemon.c",
          "lib/parser.h||liparser.h",
          "lib/scheduler.c||lischeduler.c",
          "lib/scheduler.h||lischeduler.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "keepalived/core/main.c||keepalived/core/main.c"
          ],
          "candidate": [
            "keepalived/core/main.c||keepalived/core/main.c"
          ]
        }
      },
      "candidate_diff": {
        "keepalived/check/check_data.c||keepalived/check/check_data.c": [
          "File: keepalived/check/check_data.c -> keepalived/check/check_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "651:   script_flags |= check_notify_script_secure(&global_data->lvs_notify_fifo.script, magic);",
          "653:  if (!script_security && script_flags & SC_ISSCRIPT) {",
          "655:     script_flags & SC_INSECURE ? \" There are insecure scripts.\" : \"\");",
          "656:  }",
          "",
          "[Removed Lines]",
          "654:   log_message(LOG_INFO, \"SECURITY VIOLATION - check scripts are being executed but script_security not enabled.%s\",",
          "",
          "[Added Lines]",
          "654:   ka_config_error(CONFIG_SECURITY_ERROR, \"SECURITY VIOLATION - check scripts are being executed but script_security not enabled.%s\",",
          "",
          "---------------"
        ],
        "keepalived/core/keepalived_netlink.c||keepalived/core/keepalived_netlink.c": [
          "File: keepalived/core/keepalived_netlink.c -> keepalived/core/keepalived_netlink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2246:  netlink_address_lookup();",
          "2249:  if (prog_type == PROG_TYPE_CHECKER)",
          "2250:   kernel_netlink_close_cmd();",
          "2251: #endif",
          "2252: }",
          "2254: #ifdef _TIMER_DEBUG_",
          "2255: void",
          "2256: print_vrrp_netlink_addresses(void)",
          "",
          "[Removed Lines]",
          "2248: #if !defined _DEBUG_ && defined _WITH_CHECKER_",
          "",
          "[Added Lines]",
          "2237: #if !defined _DEBUG_ && defined _WITH_LVS_",
          "2243: #if defined _WITH_VRRP_ || defined _WITH_LVS_",
          "2244: void",
          "2245: kernel_netlink_read_interfaces(void)",
          "2246: {",
          "2247: #ifdef _WITH_VRRP_",
          "2248:  netlink_socket(&nl_cmd, global_data->vrrp_netlink_cmd_rcv_bufs, global_data->vrrp_netlink_cmd_rcv_bufs_force, 0, 0);",
          "2249: #else",
          "2250:  netlink_socket(&nl_cmd, global_data->lvs_netlink_cmd_rcv_bufs, global_data->lvs_netlink_cmd_rcv_bufs_force, 0, 0);",
          "2251: #endif",
          "2253:  if (nl_cmd.fd > 0)",
          "2254:   log_message(LOG_INFO, \"Registering Kernel netlink command channel\");",
          "2255:  else",
          "2256:   log_message(LOG_INFO, \"Error while registering Kernel netlink cmd channel\");",
          "2257:  init_interface_queue();",
          "2258:  kernel_netlink_close_cmd();",
          "2259: }",
          "2260: #endif",
          "",
          "---------------"
        ],
        "keepalived/core/main.c||keepalived/core/main.c": [
          "File: keepalived/core/main.c -> keepalived/core/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "491: static void",
          "492: validate_config(void)",
          "493: {",
          "494: #ifdef _WITH_LVS_",
          "496:  check_validate_config();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494: #if defined _WITH_VRRP_ || defined _WITH_LVS_",
          "495:  kernel_netlink_read_interfaces();",
          "496: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "513:  switch (config_err) {",
          "514:  case CONFIG_OK:",
          "516:  case CONFIG_FILE_NOT_FOUND:",
          "517:  case CONFIG_BAD_IF:",
          "518:  case CONFIG_FATAL:",
          "520:  default:",
          "522:  }",
          "523: }",
          "",
          "[Removed Lines]",
          "515:   exit(0);",
          "519:   exit(1);",
          "521:   exit(2);",
          "",
          "[Added Lines]",
          "519:   exit(KEEPALIVED_EXIT_OK);",
          "523:   exit(KEEPALIVED_EXIT_CONFIG);",
          "524:  case CONFIG_SECURITY_ERROR:",
          "525:   exit(KEEPALIVED_EXIT_CONFIG_TEST_SECURITY);",
          "527:   exit(KEEPALIVED_EXIT_CONFIG_TEST);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "957:         \", JSON\"",
          "958: #endif",
          "959:         \"\\n\");",
          "961:  fprintf(stderr, \"  -v, --version                Display the version number\\n\");",
          "962:  fprintf(stderr, \"  -h, --help                   Display this help message\\n\");",
          "963: }",
          "",
          "[Removed Lines]",
          "960:  fprintf(stderr, \"  -t, --config-test            Check the configuration for obvious errors. Output will be written to stderr.\\n\");",
          "",
          "[Added Lines]",
          "966:  fprintf(stderr, \"  -t, --config-test[=LOG_FILE] Check the configuration for obvious errors, output to\\n\"",
          "967:    \"                                stderr by default\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1025: #endif",
          "1026:   {\"config-id\",  required_argument, NULL, 'i'},",
          "1027:   {\"signum\",  required_argument, NULL,  4 },",
          "1029:   {\"version\",  no_argument,  NULL, 'v'},",
          "1030:   {\"help\",  no_argument,  NULL, 'h'},",
          "",
          "[Removed Lines]",
          "1028:   {\"config-test\",  no_argument,  NULL, 't'},",
          "",
          "[Added Lines]",
          "1035:   {\"config-test\",  optional_argument, NULL, 't'},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1143:    __set_bit(DONT_RESPAWN_BIT, &debug);",
          "1144:    __set_bit(DONT_FORK_BIT, &debug);",
          "1145:    __set_bit(NO_SYSLOG_BIT, &debug);",
          "1146:    break;",
          "1147:   case 'f':",
          "1148:    conf_file = optarg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1153:    if (optarg && optarg[0]) {",
          "1154:     int fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
          "1155:     if (fd == -1) {",
          "1156:      fprintf(stderr, \"Unable to open config-test log file %s\\n\", optarg);",
          "1157:      exit(EXIT_FAILURE);",
          "1158:     }",
          "1159:     dup2(fd, STDERR_FILENO);",
          "1160:     close(fd);",
          "1161:    }",
          "",
          "---------------"
        ],
        "keepalived/include/keepalived_netlink.h||keepalived/include/keepalived_netlink.h": [
          "File: keepalived/include/keepalived_netlink.h -> keepalived/include/keepalived_netlink.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "100: extern void set_extra_netlink_monitoring(bool, bool, bool, bool);",
          "101: #endif",
          "102: extern void kernel_netlink_init(void);",
          "103: extern void kernel_netlink_close(void);",
          "104: extern void kernel_netlink_close_monitor(void);",
          "105: extern void kernel_netlink_close_cmd(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: #if defined _WITH_VRRP_ || defined _WITH_LVS_",
          "104: extern void kernel_netlink_read_interfaces(void);",
          "105: #endif",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp.c||keepalived/vrrp/vrrp.c": [
          "File: keepalived/vrrp/vrrp.c -> keepalived/vrrp/vrrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:   script_flags |= check_notify_script_secure(&global_data->vrrp_notify_fifo.script, magic);",
          "296:  if (!script_security && script_flags & SC_ISSCRIPT) {",
          "298:     script_flags & SC_INSECURE ? \" There are insecure scripts.\" : \"\");",
          "299:  }",
          "",
          "[Removed Lines]",
          "297:   ka_config_error(CONFIG_GENERAL_ERROR, \"SECURITY VIOLATION - scripts are being executed but script_security not enabled.%s\",",
          "",
          "[Added Lines]",
          "297:   ka_config_error(CONFIG_SECURITY_ERROR, \"SECURITY VIOLATION - scripts are being executed but script_security not enabled.%s\",",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_daemon.c||keepalived/vrrp/vrrp_daemon.c": [
          "File: keepalived/vrrp/vrrp_daemon.c -> keepalived/vrrp/vrrp_daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:  clear_summary_flags();",
          "311:  if (reload)",
          "312:   global_data = alloc_global_data();",
          "",
          "[Removed Lines]",
          "309:  kernel_netlink_init();",
          "",
          "[Added Lines]",
          "309:  if (!__test_bit(CONFIG_TEST_BIT, &debug))",
          "310:   kernel_netlink_init();",
          "",
          "---------------"
        ],
        "lib/parser.h||liparser.h": [
          "File: lib/parser.h -> liparser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #define MAXBUF 1024",
          "39: typedef enum {",
          "40:  CONFIG_OK,",
          "41:  CONFIG_FILE_NOT_FOUND,",
          "42:  CONFIG_BAD_IF,",
          "43:  CONFIG_FATAL,",
          "44:  CONFIG_MULTIPLE_FILES,",
          "45:  CONFIG_UNKNOWN_KEYWORD,",
          "48:  CONFIG_UNMATCHED_QUOTE,",
          "49:  CONFIG_MISSING_PARAMETER,",
          "51: } config_err_t;",
          "",
          "[Removed Lines]",
          "50:  CONFIG_GENERAL_ERROR",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/scheduler.c||lischeduler.c": [
          "File: lib/scheduler.c -> lischeduler.c"
        ],
        "lib/scheduler.h||lischeduler.h": [
          "File: lib/scheduler.h -> lischeduler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: #define KEEPALIVED_EXIT_OK   EXIT_SUCCESS",
          "125: #define KEEPALIVED_EXIT_FATAL   (EXIT_FAILURE+1)",
          "126: #define KEEPALIVED_EXIT_CONFIG   (EXIT_FAILURE+2)",
          "128: #define DEFAULT_CHILD_FINDER ((void *)1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e66341048571d99984a1c3f5fe17358c800fdab9",
      "candidate_info": {
        "commit_hash": "e66341048571d99984a1c3f5fe17358c800fdab9",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/e66341048571d99984a1c3f5fe17358c800fdab9",
        "files": [
          "keepalived/vrrp/vrrp_print.c"
        ],
        "message": "Add newlines to the keepalived.stats output for better readability.",
        "before_after_code_files": [
          "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c"
          ],
          "candidate": [
            "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c"
          ]
        }
      },
      "candidate_diff": {
        "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c": [
          "File: keepalived/vrrp/vrrp_print.c -> keepalived/vrrp/vrrp_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {",
          "72:   vrrp = ELEMENT_DATA(e);",
          "79:    vrrp->stats->release_master);",
          "84:    vrrp->stats->invalid_type_rcvd);",
          "86:    vrrp->stats->advert_interval_err);",
          "88:    vrrp->stats->addr_list_err);",
          "91:    vrrp->stats->invalid_authtype);",
          "92: #ifdef _WITH_VRRP_AUTH_",
          "94:    vrrp->stats->authtype_mismatch);",
          "96:    vrrp->stats->auth_failure);",
          "97: #endif",
          "101:  }",
          "102:  fclose(file);",
          "103: }",
          "",
          "[Removed Lines]",
          "73:   fprintf(file, \"VRRP Instance: %s\", vrrp->iname);",
          "74:   fprintf(file, \"  Advertisements:\");",
          "75:   fprintf(file, \"    Received: %\" PRIu64 \"\", vrrp->stats->advert_rcvd);",
          "76:   fprintf(file, \"    Sent: %d\", vrrp->stats->advert_sent);",
          "77:   fprintf(file, \"  Became master: %d\", vrrp->stats->become_master);",
          "78:   fprintf(file, \"  Released master: %d\",",
          "80:   fprintf(file, \"  Packet Errors:\");",
          "81:   fprintf(file, \"    Length: %\" PRIu64 \"\", vrrp->stats->packet_len_err);",
          "82:   fprintf(file, \"    TTL: %\" PRIu64 \"\", vrrp->stats->ip_ttl_err);",
          "83:   fprintf(file, \"    Invalid Type: %\" PRIu64 \"\",",
          "85:   fprintf(file, \"    Advertisement Interval: %\" PRIu64 \"\",",
          "87:   fprintf(file, \"    Address List: %\" PRIu64 \"\",",
          "89:   fprintf(file, \"  Authentication Errors:\");",
          "90:   fprintf(file, \"    Invalid Type: %d\",",
          "93:   fprintf(file, \"    Type Mismatch: %d\",",
          "95:   fprintf(file, \"    Failure: %d\",",
          "98:   fprintf(file, \"  Priority Zero:\");",
          "99:   fprintf(file, \"    Received: %\" PRIu64 \"\", vrrp->stats->pri_zero_rcvd);",
          "100:   fprintf(file, \"    Sent: %\" PRIu64 \"\", vrrp->stats->pri_zero_sent);",
          "",
          "[Added Lines]",
          "73:   fprintf(file, \"VRRP Instance: %s\\n\", vrrp->iname);",
          "74:   fprintf(file, \"  Advertisements:\\n\");",
          "75:   fprintf(file, \"    Received: %\" PRIu64 \"\\n\", vrrp->stats->advert_rcvd);",
          "76:   fprintf(file, \"    Sent: %d\\n\", vrrp->stats->advert_sent);",
          "77:   fprintf(file, \"  Became master: %d\\n\", vrrp->stats->become_master);",
          "78:   fprintf(file, \"  Released master: %d\\n\",",
          "80:   fprintf(file, \"  Packet Errors:\\n\");",
          "81:   fprintf(file, \"    Length: %\" PRIu64 \"\\n\", vrrp->stats->packet_len_err);",
          "82:   fprintf(file, \"    TTL: %\" PRIu64 \"\\n\", vrrp->stats->ip_ttl_err);",
          "83:   fprintf(file, \"    Invalid Type: %\" PRIu64 \"\\n\",",
          "85:   fprintf(file, \"    Advertisement Interval: %\" PRIu64 \"\\n\",",
          "87:   fprintf(file, \"    Address List: %\" PRIu64 \"\\n\",",
          "89:   fprintf(file, \"  Authentication Errors:\\n\");",
          "90:   fprintf(file, \"    Invalid Type: %d\\n\",",
          "93:   fprintf(file, \"    Type Mismatch: %d\\n\",",
          "95:   fprintf(file, \"    Failure: %d\\n\",",
          "98:   fprintf(file, \"  Priority Zero:\\n\");",
          "99:   fprintf(file, \"    Received: %\" PRIu64 \"\\n\", vrrp->stats->pri_zero_rcvd);",
          "100:   fprintf(file, \"    Sent: %\" PRIu64 \"\\n\", vrrp->stats->pri_zero_sent);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17f944144b3d9c5131569b1cc988cc90fd676671",
      "candidate_info": {
        "commit_hash": "17f944144b3d9c5131569b1cc988cc90fd676671",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/17f944144b3d9c5131569b1cc988cc90fd676671",
        "files": [
          "lib/utils.c"
        ],
        "message": "Make sure a non privileged user cannot read keepalived file output\n\nEnsure that when a file such as /tmp/keepalived.data is wriiten,\nno non privileged can have a previous version of that file already\nopen, thereby allowing them to read the data.\n\nThis should fully resolve CVE-2018-19046.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "lib/utils.c||lib/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/utils.c||lib/utils.c"
          ],
          "candidate": [
            "lib/utils.c||lib/utils.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/utils.c||lib/utils.c": [
          "File: lib/utils.c -> lib/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "793: {",
          "794:  int fd;",
          "795:  FILE *file;",
          "797:  int sav_errno;",
          "799:  if (mode[0] == 'r')",
          "800:   return fopen(path, mode);",
          "",
          "[Removed Lines]",
          "796:  int flags = O_NOFOLLOW | O_CREAT;",
          "",
          "[Added Lines]",
          "796:  int flags = O_NOFOLLOW | O_CREAT | O_CLOEXEC;",
          "798:  char file_tmp_name[] = \"/tmp/keepalivedXXXXXX\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "806:   return NULL;",
          "807:  }",
          "819:  if (mode[0] == 'w') {",
          "832: #ifndef ENABLE_LOG_FILE_APPEND",
          "833:   log_message(LOG_INFO, \"BUG - shouldn't be opening file for append with current build options\");",
          "834:   errno = EINVAL;",
          "835:   return NULL;",
          "836: #endif",
          "837:  }",
          "841:   return NULL;",
          "845:   sav_errno = errno;",
          "846:   log_message(LOG_INFO, \"Unable to change file ownership of %s- errno %d (%m)\", path, errno);",
          "847:   close(fd);",
          "848:   errno = sav_errno;",
          "849:   return NULL;",
          "850:  }",
          "853:  if (fchmod(fd, S_IRUSR | S_IWUSR)) {",
          "",
          "[Removed Lines]",
          "809:  if (mode[0] == 'w')",
          "810:   flags |= O_TRUNC;",
          "811:  else",
          "812:   flags |= O_APPEND;",
          "814:  if (mode[1])",
          "815:   flags |= O_RDWR;",
          "816:  else",
          "817:   flags |= O_WRONLY;",
          "822:   if (unlink(path) && errno != ENOENT) {",
          "823:    log_message(LOG_INFO, \"Failed to remove existing file '%s' prior to write\", path);",
          "824:    return NULL;",
          "825:   }",
          "826:  }",
          "827:  else {",
          "839:  fd = open(path, flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);",
          "840:  if (fd == -1)",
          "844:  if (fchown(fd, 0, 0)) {",
          "",
          "[Added Lines]",
          "823:   fd = mkostemp(file_tmp_name, O_CLOEXEC);",
          "824:  } else {",
          "833: #else",
          "834:   flags = O_NOFOLLOW | O_CREAT | O_CLOEXEC | O_APPEND;",
          "836:   if (mode[1])",
          "837:    flags |= O_RDWR;",
          "838:   else",
          "839:    flags |= O_WRONLY;",
          "841:   fd = open(path, flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);",
          "845:  if (fd == -1) {",
          "846:   sav_errno = errno;",
          "847:   log_message(LOG_INFO, \"Unable to open '%s' - errno %d (%m)\", path, errno);",
          "848:   errno = sav_errno;",
          "850:  }",
          "852: #ifndef ENABLE_LOG_FILE_APPEND",
          "854:  if (mode[0] == 'a' && fchown(fd, 0, 0)) {",
          "861: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "858:   return NULL;",
          "859:  }",
          "861:  file = fdopen (fd, \"w\");",
          "862:  if (!file) {",
          "863:   sav_errno = errno;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872:  if (mode[0] == 'w') {",
          "874:   if (rename(file_tmp_name, path)) {",
          "875:    sav_errno = errno;",
          "876:    log_message(LOG_INFO, \"Failed to rename %s to %s - errno %d (%m)\", file_tmp_name, path, errno);",
          "877:    close(fd);",
          "878:    errno = sav_errno;",
          "879:    return NULL;",
          "880:   }",
          "881:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0fa2d6d661b150ef62c2c5e079791ab08cd5caf",
      "candidate_info": {
        "commit_hash": "d0fa2d6d661b150ef62c2c5e079791ab08cd5caf",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/d0fa2d6d661b150ef62c2c5e079791ab08cd5caf",
        "files": [
          "doc/keepalived.conf.SYNOPSIS",
          "doc/man/man5/keepalived.conf.5",
          "keepalived/vrrp/vrrp_parser.c"
        ],
        "message": "Add vrrp_track_file init_file option\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c"
          ],
          "candidate": [
            "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c"
          ]
        }
      },
      "candidate_diff": {
        "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c": [
          "File: keepalived/vrrp/vrrp_parser.c -> keepalived/vrrp/vrrp_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <string.h>",
          "29: #include <stdint.h>",
          "30: #include <net/if_arp.h>",
          "32: #include \"vrrp_parser.h\"",
          "33: #include \"logger.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include <sys/types.h>",
          "32: #include <sys/stat.h>",
          "34: #include <stdio.h>",
          "35: #include <ctype.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: #include \"check_parser.h\"",
          "53: #endif",
          "55: static bool script_user_set;",
          "56: static bool remove_script;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: enum {  TRACK_FILE_NO_INIT,",
          "62:  TRACK_FILE_CREATE,",
          "63:  TRACK_FILE_INIT,",
          "64: } track_file_init;",
          "65: int track_file_init_weight;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "837: vrrp_tfile_handler(vector_t *strvec)",
          "838: {",
          "839:  alloc_vrrp_file(strvec_slot(strvec, 1));",
          "840: }",
          "841: static void",
          "842: vrrp_tfile_file_handler(vector_t *strvec)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:  track_file_init = TRACK_FILE_NO_INIT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "863:   return;",
          "864:  }",
          "867:  if (weight < -254 || weight > 254) {",
          "868:   log_message(LOG_INFO, \"Weight for %s must be between \"",
          "869:      \"[-254..254] inclusive. Ignoring...\", tfile->fname);",
          "",
          "[Removed Lines]",
          "866:  weight = atoi(strvec_slot(strvec, 2));",
          "",
          "[Added Lines]",
          "880:  weight = atoi(strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "873:  tfile->weight = weight;",
          "874: }",
          "875: static void",
          "876: vrrp_tfile_end_handler(void)",
          "877: {",
          "878:  vrrp_tracked_file_t *tfile = LIST_TAIL_DATA(vrrp_data->vrrp_track_files);",
          "880:  if (!tfile->file_path) {",
          "881:   log_message(LOG_INFO, \"No file set for track_file %s - removing\", tfile->fname);",
          "882:   free_list_element(vrrp_data->vrrp_track_files, vrrp_data->vrrp_track_files->tail);",
          "883:  }",
          "884: }",
          "885: static void",
          "886: vrrp_vscript_init_fail_handler(__attribute__((unused)) vector_t *strvec)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "890: vrrp_tfile_init_handler(vector_t *strvec)",
          "891: {",
          "892:  unsigned i;",
          "893:  char *word;",
          "894:  char *endptr;",
          "895:  vrrp_tracked_file_t *tfile = LIST_TAIL_DATA(vrrp_data->vrrp_track_files);",
          "897:  track_file_init = TRACK_FILE_CREATE;",
          "898:  track_file_init_weight = 0;",
          "900:  for (i = 1; i < vector_size(strvec); i++) {",
          "901:   word = strvec_slot(strvec, i);",
          "902:   if (isdigit(word[0])) {",
          "903:    track_file_init_weight = strtol(word, &endptr, 0);",
          "904:    if (*endptr) {",
          "906:     log_message(LOG_INFO, \"Track file %s init weight %s is invalid\", tfile->fname, word);",
          "907:     track_file_init_weight = 0;",
          "908:    }",
          "909:   }",
          "910:   else if (!strcmp(word, \"overwrite\"))",
          "911:    track_file_init = TRACK_FILE_INIT;",
          "912:   else",
          "913:    log_message(LOG_INFO, \"Unknown track file init option %s\", word);",
          "914:  }",
          "915: }",
          "916: static void",
          "920:  struct stat statb;",
          "921:  FILE *tf;",
          "922:  int ret;",
          "929:  if (track_file_init == TRACK_FILE_NO_INIT)",
          "930:   return;",
          "932:  ret = stat(tfile->file_path, &statb);",
          "933:  if (!ret) {",
          "934:          if (track_file_init == TRACK_FILE_CREATE) {",
          "936:    return;",
          "937:   }",
          "938:   if ((statb.st_mode & S_IFMT) != S_IFREG) {",
          "940:    log_message(LOG_INFO, \"Cannot initialise track file %s - it is not a regular file\", tfile->fname);",
          "941:    return;",
          "942:   }",
          "943:  }",
          "946:  if ((tf = fopen(tfile->file_path, \"w\"))) {",
          "947:   fprintf(tf, \"%d\\n\", track_file_init_weight);",
          "948:   fclose(tf);",
          "949:  }",
          "950:  else",
          "951:   log_message(LOG_INFO, \"Unable to initialise track file %s\", tfile->fname);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1130:  install_keyword_root(\"vrrp_track_file\", &vrrp_tfile_handler, active);",
          "1131:  install_keyword(\"file\", &vrrp_tfile_file_handler);",
          "1132:  install_keyword(\"weight\", &vrrp_tfile_weight_handler);",
          "1133:  install_sublevel_end_handler(&vrrp_tfile_end_handler);",
          "1134: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1201:  install_keyword(\"init_file\", &vrrp_tfile_init_handler);",
          "",
          "---------------"
        ]
      }
    }
  ]
}