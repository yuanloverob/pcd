{
  "cve_id": "CVE-2014-9621",
  "cve_desc": "The ELF parser in file 5.16 through 5.21 allows remote attackers to cause a denial of service via a long string.",
  "repo": "file/file",
  "patch_hash": "65437cee25199dbd385fb35901bc0011e164276c",
  "patch_info": {
    "commit_hash": "65437cee25199dbd385fb35901bc0011e164276c",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/65437cee25199dbd385fb35901bc0011e164276c",
    "files": [
      "src/readelf.c"
    ],
    "message": "Limit string printing to 100 chars, and add flags I forgot in the previous commit.",
    "before_after_code_files": [
      "src/readelf.c||src/readelf.c"
    ]
  },
  "patch_diff": {
    "src/readelf.c||src/readelf.c": [
      "File: src/readelf.c -> src/readelf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "31: #endif",
      "33: #ifdef BUILTIN_ELF",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.115 2014/12/16 20:53:05 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.116 2014/12/16 23:18:40 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "900:  }",
      "902:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
      "903:   switch (xnh_type) {",
      "904:       case NT_NETBSD_VERSION:",
      "905:    return size;",
      "906:   case NT_NETBSD_MARCH:",
      "907:    if (*flags & FLAGS_DID_NETBSD_MARCH)",
      "908:     return size;",
      "911:     return size;",
      "912:    break;",
      "913:   case NT_NETBSD_CMODEL:",
      "914:    if (*flags & FLAGS_DID_NETBSD_CMODEL)",
      "915:     return size;",
      "916:    if (file_printf(ms, \", compiler model: %.*s\",",
      "917:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
      "918:     return size;",
      "",
      "[Removed Lines]",
      "909:    if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,",
      "910:        (const char *)&nbuf[doff]) == -1)",
      "",
      "[Added Lines]",
      "903:   if (descsz > 100)",
      "904:    descsz = 100;",
      "912:    if (file_printf(ms, \", compiled for: %.*s\",",
      "913:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "39c7ac1106be844a5296d3eb5971946cc09ffda0",
      "candidate_info": {
        "commit_hash": "39c7ac1106be844a5296d3eb5971946cc09ffda0",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/39c7ac1106be844a5296d3eb5971946cc09ffda0",
        "files": [
          "ChangeLog",
          "src/readelf.c"
        ],
        "message": "Fix note bounds reading, Francisco Alonso / Red Hat",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.102 2014/03/11 21:00:13 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.103 2014/05/02 02:25:10 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:  uint32_t namesz, descsz;",
          "478:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
          "480:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
          "481:  offset += xnh_sizeof;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480:  if (xnh_sizeof + offset > size) {",
          "484:   return xnh_sizeof + offset;",
          "485:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "618b5513a757358bbc0a1725e4369eb915824de7",
      "candidate_info": {
        "commit_hash": "618b5513a757358bbc0a1725e4369eb915824de7",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/618b5513a757358bbc0a1725e4369eb915824de7",
        "files": [
          "src/readelf.c"
        ],
        "message": "Return the offset not size, so that we can process more notes. Noted by Jan Kaluza.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.121 2015/07/11 14:41:37 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.122 2015/09/10 13:59:32 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "879:  if ((*flags & FLAGS_DID_OS_NOTE) == 0) {",
          "880:   if (do_os_note(ms, nbuf, xnh_type, swap,",
          "881:       namesz, descsz, noff, doff, flags))",
          "883:  }",
          "885:  if ((*flags & FLAGS_DID_BUILD_ID) == 0) {",
          "886:   if (do_bid_note(ms, nbuf, xnh_type, swap,",
          "887:       namesz, descsz, noff, doff, flags))",
          "889:  }",
          "891:  if ((*flags & FLAGS_DID_NETBSD_PAX) == 0) {",
          "892:   if (do_pax_note(ms, nbuf, xnh_type, swap,",
          "893:       namesz, descsz, noff, doff, flags))",
          "895:  }",
          "897:  if ((*flags & FLAGS_DID_CORE) == 0) {",
          "898:   if (do_core_note(ms, nbuf, xnh_type, swap,",
          "899:       namesz, descsz, noff, doff, flags, size, clazz))",
          "901:  }",
          "903:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
          "",
          "[Removed Lines]",
          "882:    return size;",
          "888:    return size;",
          "894:    return size;",
          "900:    return size;",
          "",
          "[Added Lines]",
          "882:    return offset;",
          "888:    return offset;",
          "894:    return offset;",
          "900:    return offset;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "905:    descsz = 100;",
          "906:   switch (xnh_type) {",
          "907:       case NT_NETBSD_VERSION:",
          "909:   case NT_NETBSD_MARCH:",
          "910:    if (*flags & FLAGS_DID_NETBSD_MARCH)",
          "913:    if (file_printf(ms, \", compiled for: %.*s\",",
          "914:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "916:    break;",
          "917:   case NT_NETBSD_CMODEL:",
          "918:    if (*flags & FLAGS_DID_NETBSD_CMODEL)",
          "921:    if (file_printf(ms, \", compiler model: %.*s\",",
          "922:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "924:    break;",
          "925:   default:",
          "926:    if (*flags & FLAGS_DID_NETBSD_UNKNOWN)",
          "929:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
          "931:    break;",
          "932:   }",
          "934:  }",
          "936:  return offset;",
          "",
          "[Removed Lines]",
          "908:    return size;",
          "911:     return size;",
          "915:     return size;",
          "919:     return size;",
          "923:     return size;",
          "927:     return size;",
          "930:     return size;",
          "933:   return size;",
          "",
          "[Added Lines]",
          "908:    return offset;",
          "911:     return offset;",
          "915:     return offset;",
          "919:     return offset;",
          "923:     return offset;",
          "927:     return offset;",
          "930:     return offset;",
          "933:   return offset;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b13be14bb0287ade1b244ff4a1b5dffa3a249b3e",
      "candidate_info": {
        "commit_hash": "b13be14bb0287ade1b244ff4a1b5dffa3a249b3e",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/b13be14bb0287ade1b244ff4a1b5dffa3a249b3e",
        "files": [
          "src/readelf.c",
          "src/readelf.h"
        ],
        "message": "add AUXV section processing (Jan Kaluza)",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c",
          "src/readelf.h||src/readelf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.122 2015/09/10 13:59:32 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.123 2015/10/09 14:38:47 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: private int doshn(struct magic_set *, int, int, int, off_t, int, size_t,",
          "51:     off_t, int, int, int *, uint16_t *);",
          "52: private size_t donote(struct magic_set *, void *, size_t, size_t, int,",
          "55: #define ELF_ALIGN(a) ((((a) + align - 1) / align) * align)",
          "",
          "[Removed Lines]",
          "53:     int, size_t, int *, uint16_t *);",
          "",
          "[Added Lines]",
          "53:     int, size_t, int *, uint16_t *, int, off_t, int, off_t);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:        elf_getu32(swap, ph32.p_align) : 4) \\",
          "178:     : (off_t) (ph64.p_align ?  \\",
          "179:        elf_getu64(swap, ph64.p_align) : 4)))",
          "180: #define xph_filesz (size_t)((clazz == ELFCLASS32  \\",
          "181:     ? elf_getu32(swap, ph32.p_filesz) \\",
          "182:     : elf_getu64(swap, ph64.p_filesz)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180: #define xph_vaddr (size_t)((clazz == ELFCLASS32  \\",
          "181:     ? (off_t) (ph32.p_vaddr ?   \\",
          "182:        elf_getu32(swap, ph32.p_vaddr) : 4) \\",
          "183:     : (off_t) (ph64.p_vaddr ?  \\",
          "184:        elf_getu64(swap, ph64.p_vaddr) : 4)))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:     ? elf_getu32(swap, ph32.p_memsz) \\",
          "188:     : elf_getu64(swap, ph64.p_memsz)))",
          "189: #define xnh_sizeof (clazz == ELFCLASS32   \\",
          "192: #define xnh_type (clazz == ELFCLASS32   \\",
          "193:     ? elf_getu32(swap, nh32.n_type) \\",
          "194:     : elf_getu32(swap, nh64.n_type))",
          "",
          "[Removed Lines]",
          "190:     ? sizeof nh32    \\",
          "191:     : sizeof nh64)",
          "",
          "[Added Lines]",
          "195:     ? sizeof(nh32)    \\",
          "196:     : sizeof(nh64))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213: #define xcap_val (clazz == ELFCLASS32   \\",
          "214:     ? elf_getu32(swap, cap32.c_un.c_val) \\",
          "215:     : elf_getu64(swap, cap64.c_un.c_val))",
          "217: #ifdef ELFCORE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: #define xauxv_addr (clazz == ELFCLASS32   \\",
          "222:     ? (void *)&auxv32   \\",
          "223:     : (void *)&auxv64)",
          "224: #define xauxv_sizeof (clazz == ELFCLASS32   \\",
          "225:     ? sizeof(auxv32)   \\",
          "226:     : sizeof(auxv64))",
          "227: #define xauxv_type (clazz == ELFCLASS32   \\",
          "228:     ? elf_getu32(swap, auxv32.a_type) \\",
          "229:     : elf_getu64(swap, auxv64.a_type))",
          "230: #define xauxv_val (clazz == ELFCLASS32   \\",
          "231:     ? elf_getu32(swap, auxv32.a_v)  \\",
          "232:     : elf_getu64(swap, auxv64.a_v))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "302: #define FLAGS_DID_NETBSD_CMODEL  0x040",
          "303: #define FLAGS_DID_NETBSD_UNKNOWN 0x080",
          "304: #define FLAGS_IS_CORE   0x100",
          "306: private int",
          "307: dophn_core(struct magic_set *ms, int clazz, int swap, int fd, off_t off,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322: #define FLAGS_DID_AUXV   0x200",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "312:  size_t offset, len;",
          "313:  unsigned char nbuf[BUFSIZ];",
          "314:  ssize_t bufsize;",
          "316:  if (size != xph_sizeof) {",
          "317:   if (file_printf(ms, \", corrupted program header size\") == -1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333:  off_t ph_off = off;",
          "334:  int ph_num = num;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "351:    if (offset >= (size_t)bufsize)",
          "352:     break;",
          "353:    offset = donote(ms, nbuf, offset, (size_t)bufsize,",
          "355:    if (offset == 0)",
          "356:     break;",
          "",
          "[Removed Lines]",
          "354:        clazz, swap, 4, flags, notecount);",
          "",
          "[Added Lines]",
          "374:        clazz, swap, 4, flags, notecount, fd, ph_off,",
          "375:        ph_num, fsize);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "813:  return 0;",
          "814: }",
          "816: private size_t",
          "817: donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
          "819: {",
          "820:  Elf32_Nhdr nh32;",
          "821:  Elf64_Nhdr nh64;",
          "",
          "[Removed Lines]",
          "818:     int clazz, int swap, size_t align, int *flags, uint16_t *notecount)",
          "",
          "[Added Lines]",
          "837: private off_t",
          "838: get_offset_from_virtaddr(struct magic_set *ms, int swap, int clazz, int fd,",
          "839:     off_t off, int num, off_t fsize, uint64_t virtaddr)",
          "840: {",
          "841:  Elf32_Phdr ph32;",
          "842:  Elf64_Phdr ph64;",
          "843:  size_t prev_vaddr = 0;",
          "844:  size_t prev_off = 0;",
          "850:  for ( ; num; num--) {",
          "851:   if (pread(fd, xph_addr, xph_sizeof, off) < (ssize_t)xph_sizeof) {",
          "852:    file_badread(ms);",
          "853:    return -1;",
          "854:   }",
          "855:   off += xph_sizeof;",
          "857:   if (fsize != SIZE_UNKNOWN && xph_offset > fsize) {",
          "859:    continue;",
          "860:   }",
          "862:   if (virtaddr >= prev_vaddr && virtaddr < xph_vaddr) {",
          "867:    return prev_off + (virtaddr - prev_vaddr);",
          "868:   }",
          "870:   prev_vaddr = xph_vaddr;",
          "871:   prev_off = xph_offset;",
          "873:  }",
          "874:  return 0;",
          "875: }",
          "877: private size_t",
          "878: get_string_on_virtaddr(struct magic_set *ms,",
          "879:     int swap, int clazz, int fd, off_t ph_off, int ph_num,",
          "880:     off_t fsize, uint64_t virtaddr, char *buf, ssize_t buflen)",
          "881: {",
          "882:  char *bptr;",
          "883:  off_t offset;",
          "885:  if (buflen == 0)",
          "886:   return 0;",
          "888:  offset = get_offset_from_virtaddr(ms, swap, clazz, fd, ph_off, ph_num,",
          "889:      fsize, virtaddr);",
          "890:  if (pread(fd, buf, buflen, offset) != buflen) {",
          "891:   file_badread(ms);",
          "892:   return 0;",
          "893:  }",
          "895:  buf[buflen - 1] = '\\0';",
          "899:  for (bptr = buf; *bptr && isprint((unsigned char)*bptr); bptr++)",
          "900:   continue;",
          "901:  if (*bptr != '\\0')",
          "902:   return 0;",
          "904:  return bptr - buf;",
          "905: }",
          "908: private int",
          "909: do_auxv_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
          "910:     int swap, uint32_t namesz __attribute__((__unused__)),",
          "911:     uint32_t descsz __attribute__((__unused__)),",
          "912:     size_t noff __attribute__((__unused__)), size_t doff,",
          "913:     int *flags, size_t size __attribute__((__unused__)), int clazz,",
          "914:     int fd, off_t ph_off, int ph_num, off_t fsize)",
          "915: {",
          "916: #ifdef ELFCORE",
          "917:  Aux32Info auxv32;",
          "918:  Aux64Info auxv64;",
          "919:  size_t elsize = xauxv_sizeof;",
          "920:  const char *tag;",
          "921:  int is_string;",
          "922:  uint32_t val[30];",
          "923:  size_t nval;",
          "925:  if (type != NT_AUXV || (*flags & FLAGS_IS_CORE) == 0)",
          "926:   return 0;",
          "930:  nval = 0;",
          "931:  for (size_t off = 0; off + elsize <= descsz; off += elsize) {",
          "932:   (void)memcpy(xauxv_addr, &nbuf[doff + off], xauxv_sizeof);",
          "933:   for (size_t i = 0; i < nval; i++)",
          "934:    if (val[i] == (uint32_t)xauxv_type) {",
          "935:     file_error(ms, 0, \"Repeated ELF Auxv type %u\",",
          "936:         val[i]);",
          "937:     return 1;",
          "938:    }",
          "939:   if (nval >= __arraycount(val)) {",
          "940:    file_error(ms, 0, \"Too many ELF Auxv elements\");",
          "941:    return 1;",
          "942:   }",
          "943:   val[nval++] = (uint32_t)xauxv_type;",
          "945:   switch(xauxv_type) {",
          "946:   case AT_LINUX_EXECFN:",
          "947:    is_string = 1;",
          "948:    tag = \"from\";",
          "949:    break;",
          "950:   case AT_LINUX_PLATFORM:",
          "951:    is_string = 1;",
          "952:    tag = \"platform\";",
          "953:    break;",
          "954:   case AT_LINUX_UID:",
          "955:    is_string = 0;",
          "956:    tag = \"real uid\";",
          "957:    break;",
          "958:   case AT_LINUX_GID:",
          "959:    is_string = 0;",
          "960:    tag = \"real gid\";",
          "961:    break;",
          "962:   case AT_LINUX_EUID:",
          "963:    is_string = 0;",
          "964:    tag = \"effective uid\";",
          "965:    break;",
          "966:   case AT_LINUX_EGID:",
          "967:    is_string = 0;",
          "968:    tag = \"effective gid\";",
          "969:    break;",
          "970:   default:",
          "971:    is_string = 0;",
          "972:    tag = NULL;",
          "973:    break;",
          "974:   }",
          "976:   if (tag == NULL)",
          "977:    continue;",
          "979:   if (is_string) {",
          "980:    char buf[256];",
          "981:    ssize_t buflen;",
          "982:    buflen = get_string_on_virtaddr(ms, swap, clazz, fd,",
          "983:        ph_off, ph_num, fsize, xauxv_val, buf, sizeof(buf));",
          "985:    if (buflen == 0)",
          "986:     continue;",
          "988:    if (file_printf(ms, \", %s: '%s'\", tag, buf) == -1)",
          "989:     return 0;",
          "990:   } else {",
          "991:    if (file_printf(ms, \", %s: %d\", tag, (int) xauxv_val)",
          "992:        == -1)",
          "993:     return 0;",
          "994:   }",
          "995:  }",
          "996:  return 1;",
          "997: #else",
          "998:  return 0;",
          "999: #endif",
          "1000: }",
          "1004:     int clazz, int swap, size_t align, int *flags, uint16_t *notecount,",
          "1005:     int fd, off_t ph_off, int ph_num, off_t fsize)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "900:    return offset;",
          "901:  }",
          "903:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
          "904:   if (descsz > 100)",
          "905:    descsz = 100;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1091:  if ((*flags & FLAGS_DID_AUXV) == 0) {",
          "1092:   if (do_auxv_note(ms, nbuf, xnh_type, swap,",
          "1093:    namesz, descsz, noff, doff, flags, size, clazz,",
          "1094:    fd, ph_off, ph_num, fsize))",
          "1095:    return offset;",
          "1096:  }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1080:     if (noff >= (off_t)xsh_size)",
          "1081:      break;",
          "1082:     noff = donote(ms, nbuf, (size_t)noff,",
          "1084:     if (noff == 0)",
          "1085:      break;",
          "1086:    }",
          "",
          "[Removed Lines]",
          "1083:         xsh_size, clazz, swap, 4, flags, notecount);",
          "",
          "[Added Lines]",
          "1278:         xsh_size, clazz, swap, 4, flags, notecount,",
          "1279:         fd, 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1329:      break;",
          "1330:     offset = donote(ms, nbuf, offset,",
          "1331:         (size_t)bufsize, clazz, swap, align,",
          "1333:     if (offset == 0)",
          "1334:      break;",
          "1335:    }",
          "",
          "[Removed Lines]",
          "1332:         flags, notecount);",
          "",
          "[Added Lines]",
          "1528:         flags, notecount, fd, 0, 0, 0);",
          "",
          "---------------"
        ],
        "src/readelf.h||src/readelf.h": [
          "File: src/readelf.h -> src/readelf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #define EI_NIDENT 16",
          "56: typedef struct {",
          "57:     Elf32_Char e_ident[EI_NIDENT];",
          "58:     Elf32_Half e_type;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: typedef struct {",
          "59: } Aux32Info;",
          "61: typedef struct {",
          "64: } Aux64Info;",
          "86: #define AT_LINUX_BASE_PLATFORM 24     /* string identifying real platform, may",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7cdad007c507e6c79f51f058dd77fab70ceb9f6",
      "candidate_info": {
        "commit_hash": "d7cdad007c507e6c79f51f058dd77fab70ceb9f6",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/d7cdad007c507e6c79f51f058dd77fab70ceb9f6",
        "files": [
          "src/readelf.c"
        ],
        "message": "Stop reporting bad capabilities after the first few.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.104 2014/10/17 15:49:00 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.105 2014/11/22 16:04:29 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "919:  Elf32_Shdr sh32;",
          "920:  Elf64_Shdr sh64;",
          "921:  int stripped = 1;",
          "922:  void *nbuf;",
          "923:  off_t noff, coff, name_off;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "922:  size_t nbadcap = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1007:     goto skip;",
          "1008:    }",
          "1010:    if (lseek(fd, xsh_offset, SEEK_SET) == (off_t)-1) {",
          "1011:     file_badseek(ms);",
          "1012:     return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:    if (nbadcap > 5)",
          "1012:     break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1072:          (unsigned long long)xcap_tag,",
          "1073:          (unsigned long long)xcap_val) == -1)",
          "1074:       return -1;",
          "1075:      break;",
          "1076:     }",
          "1077:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:      if (nbadcap++ > 2)",
          "1079:       coff = xsh_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "477c444748faf4875fa522220a1792c635927c9e",
      "candidate_info": {
        "commit_hash": "477c444748faf4875fa522220a1792c635927c9e",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/477c444748faf4875fa522220a1792c635927c9e",
        "files": [
          "src/readelf.c"
        ],
        "message": "Complain if alignments are < 4 and repair.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.105 2014/11/22 16:04:29 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.106 2014/11/22 23:57:44 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1201:   switch (xph_type) {",
          "1202:   case PT_NOTE:",
          "1204:     if (file_printf(ms,",
          "1205:         \", invalid note alignment 0x%lx\",",
          "1206:         (unsigned long)align) == -1)",
          "",
          "[Removed Lines]",
          "1203:    if ((align = xph_align) & 0x80000000UL) {",
          "",
          "[Added Lines]",
          "1203:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1204:        align < 4) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}