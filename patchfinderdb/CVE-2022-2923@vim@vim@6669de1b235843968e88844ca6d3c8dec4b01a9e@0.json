{
  "cve_id": "CVE-2022-2923",
  "cve_desc": "NULL Pointer Dereference in GitHub repository vim/vim prior to 9.0.0240.",
  "repo": "vim/vim",
  "patch_hash": "6669de1b235843968e88844ca6d3c8dec4b01a9e",
  "patch_info": {
    "commit_hash": "6669de1b235843968e88844ca6d3c8dec4b01a9e",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/6669de1b235843968e88844ca6d3c8dec4b01a9e",
    "files": [
      "src/spellfile.c",
      "src/testdir/test_spellfile.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.0240: crash when using \":mkspell\" with an empty .dic file\n\nProblem:    Crash when using \":mkspell\" with an empty .dic file.\nSolution:   Check for an empty word tree.",
    "before_after_code_files": [
      "src/spellfile.c||src/spellfile.c",
      "src/testdir/test_spellfile.vim||src/testdir/test_spellfile.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/spellfile.c||src/spellfile.c": [
      "File: src/spellfile.c -> src/spellfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5590:     byts = slang->sl_fbyts;",
      "5591:     idxs = slang->sl_fidxs;",
      "5593:     arridx[0] = 0;",
      "5594:     curi[0] = 1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5592:     if (byts == NULL || idxs == NULL)",
      "5593:  return FAIL;",
      "",
      "---------------"
    ],
    "src/testdir/test_spellfile.vim||src/testdir/test_spellfile.vim": [
      "File: src/testdir/test_spellfile.vim -> src/testdir/test_spellfile.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1168:   delete('Xtest', 'rf')",
      "1169: enddef",
      "1171: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1171: \" this was using a NULL pointer",
      "1172: func Test_mkspell_empty_dic()",
      "1173:   call writefile(['1'], 'XtestEmpty.dic')",
      "1174:   call writefile(['SOFOFROM abcd', 'SOFOTO ABCD', 'SAL CIA X'], 'XtestEmpty.aff')",
      "1175:   mkspell! XtestEmpty.spl XtestEmpty",
      "1177:   call delete('XtestEmpty.dic')",
      "1178:   call delete('XtestEmpty.aff')",
      "1179:   call delete('XtestEmpty.spl')",
      "1180: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "732: static int included_patches[] =",
      "735:     239,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "735:     240,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "56564964e6d0956c29687e8a10cb94fe42f5c097",
      "candidate_info": {
        "commit_hash": "56564964e6d0956c29687e8a10cb94fe42f5c097",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/56564964e6d0956c29687e8a10cb94fe42f5c097",
        "files": [
          "src/testdir/test_scriptnames.vim",
          "src/testdir/test_search.vim",
          "src/testdir/test_search_stat.vim",
          "src/testdir/test_shell.vim",
          "src/testdir/test_shortpathname.vim",
          "src/testdir/test_signals.vim",
          "src/testdir/test_signs.vim",
          "src/testdir/test_sort.vim",
          "src/testdir/test_source.vim",
          "src/testdir/test_source_utf8.vim",
          "src/testdir/test_spell.vim",
          "src/testdir/test_spell_utf8.vim",
          "src/testdir/test_spellfile.vim",
          "src/testdir/test_startup.vim",
          "src/testdir/test_startup_utf8.vim",
          "src/testdir/test_stat.vim",
          "src/testdir/test_statusline.vim",
          "src/testdir/test_substitute.vim",
          "src/testdir/test_swap.vim",
          "src/testdir/test_syntax.vim",
          "src/testdir/test_system.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0719: too many delete() calls in tests\n\nProblem:    Too many delete() calls in tests.\nSolution:   Use deferred delete where possible.",
        "before_after_code_files": [
          "src/testdir/test_scriptnames.vim||src/testdir/test_scriptnames.vim",
          "src/testdir/test_search.vim||src/testdir/test_search.vim",
          "src/testdir/test_search_stat.vim||src/testdir/test_search_stat.vim",
          "src/testdir/test_shell.vim||src/testdir/test_shell.vim",
          "src/testdir/test_shortpathname.vim||src/testdir/test_shortpathname.vim",
          "src/testdir/test_signals.vim||src/testdir/test_signals.vim",
          "src/testdir/test_signs.vim||src/testdir/test_signs.vim",
          "src/testdir/test_sort.vim||src/testdir/test_sort.vim",
          "src/testdir/test_source.vim||src/testdir/test_source.vim",
          "src/testdir/test_source_utf8.vim||src/testdir/test_source_utf8.vim",
          "src/testdir/test_spell.vim||src/testdir/test_spell.vim",
          "src/testdir/test_spell_utf8.vim||src/testdir/test_spell_utf8.vim",
          "src/testdir/test_spellfile.vim||src/testdir/test_spellfile.vim",
          "src/testdir/test_startup.vim||src/testdir/test_startup.vim",
          "src/testdir/test_startup_utf8.vim||src/testdir/test_startup_utf8.vim",
          "src/testdir/test_stat.vim||src/testdir/test_stat.vim",
          "src/testdir/test_statusline.vim||src/testdir/test_statusline.vim",
          "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
          "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
          "src/testdir/test_syntax.vim||src/testdir/test_syntax.vim",
          "src/testdir/test_system.vim||src/testdir/test_system.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_spellfile.vim||src/testdir/test_spellfile.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_spellfile.vim||src/testdir/test_spellfile.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_scriptnames.vim||src/testdir/test_scriptnames.vim": [
          "File: src/testdir/test_scriptnames.vim -> src/testdir/test_scriptnames.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \" Test for the :scriptnames command",
          "3: func Test_scriptnames()",
          "5:   source Xscripting",
          "6:   call assert_equal(123, g:did_load_script)",
          "",
          "[Removed Lines]",
          "4:   call writefile(['let did_load_script = 123'], 'Xscripting')",
          "",
          "[Added Lines]",
          "4:   call writefile(['let did_load_script = 123'], 'Xscripting', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:   call assert_equal('Xscripting', expand('%:t'))",
          "24:   bwipe",
          "27:   let msgs = execute('messages')",
          "28:   scriptnames",
          "",
          "[Removed Lines]",
          "25:   call delete('Xscripting')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     def Xscript_def_func2()",
          "48:     enddef",
          "49:   END",
          "51:   source X22script91",
          "52:   let l = getscriptinfo()",
          "53:   call assert_match('X22script91$', l[-1].name)",
          "",
          "[Removed Lines]",
          "50:   call writefile(lines, 'X22script91')",
          "",
          "[Added Lines]",
          "49:   call writefile(lines, 'X22script91', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:   call assert_fails(\"echo getscriptinfo('foobar')\", 'E1206:')",
          "94:   call assert_fails(\"echo getscriptinfo({'sid': []})\", 'E745:')",
          "97: endfunc",
          "99: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "96:   call delete('X22script91')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_search.vim||src/testdir/test_search.vim": [
          "File: src/testdir/test_search.vim -> src/testdir/test_search.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:   endif",
          "725:   \" Prepare buffer text",
          "726:   let lines = ['abb vim vim vi', 'vimvivim']",
          "728:   let buf = term_start([GetVimProg(), '--clean', '-c', 'set noswapfile', 'Xsearch.txt'], {'term_rows': 3})",
          "730:   call WaitForAssert({-> assert_equal(lines, [term_getline(buf, 1), term_getline(buf, 2)])})",
          "",
          "[Removed Lines]",
          "727:   call writefile(lines, 'Xsearch.txt')",
          "",
          "[Added Lines]",
          "727:   call writefile(lines, 'Xsearch.txt', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "743:   call assert_notequal(a1, a2)",
          "744:   call assert_equal(a0, a2)",
          "745:   call assert_equal(a1, a3)",
          "749:   bwipe!",
          "750: endfunc",
          "",
          "[Removed Lines]",
          "746:   \" clean up",
          "747:   call delete('Xsearch.txt')",
          "",
          "[Added Lines]",
          "747:   \" clean up",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "860:   \" Prepare buffer text",
          "861:   let lines = ['abb vim vim vi', 'vimvivim']",
          "863:   let buf = term_start([GetVimProg(), '--clean', '-c', 'set noswapfile', 'Xsearch.txt'], {'term_rows': 3})",
          "865:   call WaitForAssert({-> assert_equal(lines, [term_getline(buf, 1), term_getline(buf, 2)])})",
          "",
          "[Removed Lines]",
          "862:   call writefile(lines, 'Xsearch.txt')",
          "",
          "[Added Lines]",
          "861:   call writefile(lines, 'Xsearch.txt', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "928:   let attr_line2 = [a0,a0,a0,a0,a0,a0,a0,a0]",
          "929:   call assert_equal(attr_line1, map(term_scrape(buf, 1)[:len(attr_line1)-1], 'v:val.attr'))",
          "930:   call assert_equal(attr_line2, map(term_scrape(buf, 2)[:len(attr_line2)-1], 'v:val.attr'))",
          "934:   bwipe!",
          "935: endfunc",
          "",
          "[Removed Lines]",
          "931:   call delete('Xsearch.txt')",
          "933:   call delete('Xsearch.txt')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "956:  \\ 'call setline(1, [dots, dots, dots, \"\", \"target\", dots, dots])',",
          "957:  \\ 'normal gg',",
          "958:  \\ 'redraw',",
          "960:   let buf = RunVimInTerminal('-S Xscript', {'rows': 9, 'cols': 70})",
          "961:   \" Need to send one key at a time to force a redraw",
          "962:   call term_sendkeys(buf, '/')",
          "",
          "[Removed Lines]",
          "959:  \\ ], 'Xscript')",
          "",
          "[Added Lines]",
          "956:  \\ ], 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "973:   call term_sendkeys(buf, \"\\<Esc>\")",
          "974:   call StopVimInTerminal(buf)",
          "976: endfunc",
          "978: func Test_incsearch_search_dump()",
          "",
          "[Removed Lines]",
          "975:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "985:  \\ '  call setline(n, \"foo \" . n)',",
          "986:  \\ 'endfor',",
          "987:  \\ '3',",
          "989:   let buf = RunVimInTerminal('-S Xis_search_script', {'rows': 9, 'cols': 70})",
          "990:   \" Give Vim a chance to redraw to get rid of the spaces in line 2 caused by",
          "991:   \" the 'ambiwidth' check.",
          "",
          "[Removed Lines]",
          "988:  \\ ], 'Xis_search_script')",
          "",
          "[Added Lines]",
          "984:  \\ ], 'Xis_search_script', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1002:   call term_sendkeys(buf, \"\\<Esc>\")",
          "1004:   call StopVimInTerminal(buf)",
          "1006: endfunc",
          "1008: func Test_hlsearch_dump()",
          "",
          "[Removed Lines]",
          "1005:   call delete('Xis_search_script')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1014:         \\ 'call setline(1, [\"xxx\", \"xxx\", \"xxx\"])',",
          "1015:  \\ '/.*',",
          "1016:  \\ '2',",
          "1018:   let buf = RunVimInTerminal('-S Xhlsearch_script', {'rows': 6, 'cols': 50})",
          "1019:   call VerifyScreenDump(buf, 'Test_hlsearch_1', {})",
          "",
          "[Removed Lines]",
          "1017:  \\ ], 'Xhlsearch_script')",
          "",
          "[Added Lines]",
          "1012:  \\ ], 'Xhlsearch_script', 'D')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1022:   call VerifyScreenDump(buf, 'Test_hlsearch_2', {})",
          "1024:   call StopVimInTerminal(buf)",
          "1026: endfunc",
          "1028: func Test_hlsearch_and_visual()",
          "",
          "[Removed Lines]",
          "1025:   call delete('Xhlsearch_script')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1035:         \\ 'hi Search cterm=bold',",
          "1036:  \\ '/yyy',",
          "1037:  \\ 'call cursor(1, 6)',",
          "1039:   let buf = RunVimInTerminal('-S Xhlvisual_script', {'rows': 6, 'cols': 40})",
          "1040:   call term_sendkeys(buf, \"vjj\")",
          "1041:   call VerifyScreenDump(buf, 'Test_hlsearch_visual_1', {})",
          "1042:   call term_sendkeys(buf, \"\\<Esc>\")",
          "1044:   call StopVimInTerminal(buf)",
          "1046: endfunc",
          "1048: func Test_hlsearch_block_visual_match()",
          "",
          "[Removed Lines]",
          "1038:  \\ ], 'Xhlvisual_script')",
          "1045:   call delete('Xhlvisual_script')",
          "",
          "[Added Lines]",
          "1032:  \\ ], 'Xhlvisual_script', 'D')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1052:     set hlsearch",
          "1053:     call setline(1, ['aa', 'bbbb', 'cccccc'])",
          "1054:   END",
          "1056:   let buf = RunVimInTerminal('-S Xhlsearch_block', {'rows': 9, 'cols': 60})",
          "1058:   call term_sendkeys(buf, \"G\\<C-V>$kk\\<Esc>\")",
          "",
          "[Removed Lines]",
          "1055:   call writefile(lines, 'Xhlsearch_block')",
          "",
          "[Added Lines]",
          "1048:   call writefile(lines, 'Xhlsearch_block', 'D')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1062:   call VerifyScreenDump(buf, 'Test_hlsearch_block_visual_match', {})",
          "1064:   call StopVimInTerminal(buf)",
          "1066: endfunc",
          "1068: func Test_incsearch_substitute()",
          "",
          "[Removed Lines]",
          "1065:   call delete('Xhlsearch_block')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1108:     hi Search ctermbg=yellow",
          "1109:     hi CurSearch ctermbg=blue",
          "1110:   END",
          "1112:   let buf = RunVimInTerminal('-S Xhlsearch_cursearch', {'rows': 9, 'cols': 60})",
          "1114:   call term_sendkeys(buf, \"gg/foo\\<CR>\")",
          "",
          "[Removed Lines]",
          "1111:   call writefile(lines, 'Xhlsearch_cursearch')",
          "",
          "[Added Lines]",
          "1103:   call writefile(lines, 'Xhlsearch_cursearch', 'D')",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1146:   call VerifyScreenDump(buf, 'Test_hlsearch_cursearch_changed_1', {})",
          "1148:   call StopVimInTerminal(buf)",
          "1150: endfunc",
          "1152: \" Similar to Test_incsearch_substitute() but with a screendump halfway.",
          "",
          "[Removed Lines]",
          "1149:   call delete('Xhlsearch_cursearch')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1161:  \\ 'endfor',",
          "1162:  \\ 'call setline(11, \"bar 11\")',",
          "1163:  \\ '3',",
          "1165:   let buf = RunVimInTerminal('-S Xis_subst_script', {'rows': 9, 'cols': 70})",
          "1166:   \" Give Vim a chance to redraw to get rid of the spaces in line 2 caused by",
          "1167:   \" the 'ambiwidth' check.",
          "",
          "[Removed Lines]",
          "1164:  \\ ], 'Xis_subst_script')",
          "",
          "[Added Lines]",
          "1155:  \\ ], 'Xis_subst_script', 'D')",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1256:   call term_sendkeys(buf, \"<Esc>\")",
          "1258:   call StopVimInTerminal(buf)",
          "1260: endfunc",
          "1262: func Test_incsearch_highlighting()",
          "",
          "[Removed Lines]",
          "1259:   call delete('Xis_subst_script')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1266:   call writefile([",
          "1267:  \\ 'set incsearch hlsearch',",
          "1268:  \\ 'call setline(1, \"hello/there\")',",
          "1270:   let buf = RunVimInTerminal('-S Xis_subst_hl_script', {'rows': 4, 'cols': 20})",
          "1271:   \" Give Vim a chance to redraw to get rid of the spaces in line 2 caused by",
          "1272:   \" the 'ambiwidth' check.",
          "",
          "[Removed Lines]",
          "1269:  \\ ], 'Xis_subst_hl_script')",
          "",
          "[Added Lines]",
          "1259:  \\ ], 'Xis_subst_hl_script', 'D')",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1279:   call term_sendkeys(buf, \"<Esc>\")",
          "1281:   call StopVimInTerminal(buf)",
          "1283: endfunc",
          "1285: func Test_incsearch_with_change()",
          "",
          "[Removed Lines]",
          "1282:   call delete('Xis_subst_hl_script')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1291:  \\ 'set incsearch hlsearch scrolloff=0',",
          "1292:  \\ 'call setline(1, [\"one\", \"two ------ X\", \"three\"])',",
          "1293:  \\ 'call timer_start(200, { _ -> setline(2, \"x\")})',",
          "1295:   let buf = RunVimInTerminal('-S Xis_change_script', {'rows': 9, 'cols': 70})",
          "1296:   \" Give Vim a chance to redraw to get rid of the spaces in line 2 caused by",
          "1297:   \" the 'ambiwidth' check.",
          "",
          "[Removed Lines]",
          "1294:  \\ ], 'Xis_change_script')",
          "",
          "[Added Lines]",
          "1283:  \\ ], 'Xis_change_script', 'D')",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1303:   call term_sendkeys(buf, \"\\<Esc>\")",
          "1305:   call StopVimInTerminal(buf)",
          "1307: endfunc",
          "1309: \" Similar to Test_incsearch_substitute_dump() for :sort",
          "",
          "[Removed Lines]",
          "1306:   call delete('Xis_change_script')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1314:   call writefile([",
          "1315:  \\ 'set incsearch hlsearch scrolloff=0',",
          "1316:  \\ 'call setline(1, [\"another one 2\", \"that one 3\", \"the one 1\"])',",
          "1318:   let buf = RunVimInTerminal('-S Xis_sort_script', {'rows': 9, 'cols': 70})",
          "1319:   \" Give Vim a chance to redraw to get rid of the spaces in line 2 caused by",
          "1320:   \" the 'ambiwidth' check.",
          "",
          "[Removed Lines]",
          "1317:  \\ ], 'Xis_sort_script')",
          "",
          "[Added Lines]",
          "1305:  \\ ], 'Xis_sort_script', 'D')",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1329:   call term_sendkeys(buf, \"\\<Esc>\")",
          "1331:   call StopVimInTerminal(buf)",
          "1333: endfunc",
          "1335: \" Similar to Test_incsearch_substitute_dump() for :vimgrep famiry",
          "",
          "[Removed Lines]",
          "1332:   call delete('Xis_sort_script')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1340:   call writefile([",
          "1341:  \\ 'set incsearch hlsearch scrolloff=0',",
          "1342:  \\ 'call setline(1, [\"another one 2\", \"that one 3\", \"the one 1\"])',",
          "1344:   let buf = RunVimInTerminal('-S Xis_vimgrep_script', {'rows': 9, 'cols': 70})",
          "1345:   \" Give Vim a chance to redraw to get rid of the spaces in line 2 caused by",
          "1346:   \" the 'ambiwidth' check.",
          "",
          "[Removed Lines]",
          "1343:  \\ ], 'Xis_vimgrep_script')",
          "",
          "[Added Lines]",
          "1330:  \\ ], 'Xis_vimgrep_script', 'D')",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1368:   call term_sendkeys(buf, \"\\<Esc>\")",
          "1370:   call StopVimInTerminal(buf)",
          "1372: endfunc",
          "1374: func Test_keep_last_search_pattern()",
          "",
          "[Removed Lines]",
          "1371:   call delete('Xis_vimgrep_script')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1492: func Test_no_last_substitute_pat()",
          "1493:   \" Use viminfo to set the last search pattern to a string and make the last",
          "1494:   \" substitute pattern the most recent used and make it empty (NULL).",
          "1496:   rviminfo! Xviminfo",
          "1497:   call assert_fails('normal n', 'E35:')",
          "1500: endfunc",
          "1502: func Test_search_Ctrl_L_combining()",
          "",
          "[Removed Lines]",
          "1495:   call writefile(['~MSle0/bar', '~MSle0~&'], 'Xviminfo')",
          "1499:   call delete('Xviminfo')",
          "",
          "[Added Lines]",
          "1481:   call writefile(['~MSle0/bar', '~MSle0~&'], 'Xviminfo', 'D')",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1739:     call writefile(v:errors, 'Xresult')",
          "1740:     qall!",
          "1741:   [SCRIPT]",
          "1744:   if RunVim([], [], '--clean -S Xscript')",
          "1745:     call assert_equal([], readfile('Xresult'))",
          "1746:   endif",
          "1748:   call delete('Xresult')",
          "1749: endfunc",
          "",
          "[Removed Lines]",
          "1742:   call writefile(lines, 'Xscript')",
          "1747:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "1726:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1762:     call writefile(v:errors, 'Xresult')",
          "1763:     qall!",
          "1764:   [SCRIPT]",
          "1766:   if RunVim([], [], '--clean -S Xscript')",
          "1767:     call assert_equal([], readfile('Xresult'))",
          "1768:   endif",
          "1770:   call delete('Xresult')",
          "1771: endfunc",
          "",
          "[Removed Lines]",
          "1765:   call writefile(lines, 'Xscript')",
          "1769:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "1748:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2012:     set incsearch nohls",
          "2013:     call setline(1, ['test', 'xxx'])",
          "2014:   [CODE]",
          "2016:   let buf = RunVimInTerminal('-S Xincsearch_nl', {'rows': 5, 'cols': 10})",
          "2017:   call term_sendkeys(buf, '/test')",
          "2018:   call VerifyScreenDump(buf, 'Test_incsearch_newline1', {})",
          "",
          "[Removed Lines]",
          "2015:   call writefile(commands, 'Xincsearch_nl')",
          "",
          "[Added Lines]",
          "1997:   call writefile(commands, 'Xincsearch_nl', 'D')",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2028:   call StopVimInTerminal(buf)",
          "2030:   \" clean up",
          "2032:   call test_override(\"char_avail\", 0)",
          "2033:   bw",
          "2034: endfunc",
          "",
          "[Removed Lines]",
          "2031:   call delete('Xincsearch_nl')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2044:  \\ 'endfor',",
          "2045:  \\ 'call setline(5, \"abc|def\")',",
          "2046:  \\ '3',",
          "2048:   let buf = RunVimInTerminal('-S Xis_subst_script2', {'rows': 9, 'cols': 70})",
          "2050:   call term_sendkeys(buf, ':%s/\\vabc|')",
          "",
          "[Removed Lines]",
          "2047:  \\ ], 'Xis_subst_script2')",
          "",
          "[Added Lines]",
          "2028:  \\ ], 'Xis_subst_script2', 'D')",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2061:   call StopVimInTerminal(buf)",
          "2063: endfunc",
          "2065: func Test_pattern_is_uppercase_smartcase()",
          "",
          "[Removed Lines]",
          "2062:   call delete('Xis_subst_script2')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2146:     5/",
          "2147:     c",
          "2148:   END",
          "2150:   source Xrangesearch",
          "2152:   bwipe!",
          "2154: endfunc",
          "",
          "[Removed Lines]",
          "2149:   call writefile(lines, 'Xrangesearch')",
          "2153:   call delete('Xrangesearch')",
          "",
          "[Added Lines]",
          "2129:   call writefile(lines, 'Xrangesearch', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_search_stat.vim||src/testdir/test_search_stat.vim": [
          "File: src/testdir/test_search_stat.vim -> src/testdir/test_search_stat.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:     set hlsearch",
          "288:     set laststatus=2 statusline+=%{TestSearchCount()}",
          "289:   END",
          "291:   let buf = RunVimInTerminal('-S Xsearchstatusline', #{rows: 10})",
          "292:   call TermWait(buf)",
          "293:   call term_sendkeys(buf, \"/something\")",
          "",
          "[Removed Lines]",
          "290:   call writefile(lines, 'Xsearchstatusline')",
          "",
          "[Added Lines]",
          "290:   call writefile(lines, 'Xsearchstatusline', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:   call term_sendkeys(buf, \"\\<Esc>\")",
          "297:   call StopVimInTerminal(buf)",
          "299: endfunc",
          "301: func Test_search_stat_foldopen()",
          "",
          "[Removed Lines]",
          "298:   call delete('Xsearchstatusline')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309:     call cursor(1,1)",
          "310:     norm n",
          "311:   END",
          "314:   let buf = RunVimInTerminal('-S Xsearchstat1', #{rows: 10})",
          "315:   call VerifyScreenDump(buf, 'Test_searchstat_3', {})",
          "",
          "[Removed Lines]",
          "312:   call writefile(lines, 'Xsearchstat1')",
          "",
          "[Added Lines]",
          "311:   call writefile(lines, 'Xsearchstat1', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321:   call VerifyScreenDump(buf, 'Test_searchstat_3', {})",
          "323:   call StopVimInTerminal(buf)",
          "325: endfunc",
          "327: func! Test_search_stat_screendump()",
          "",
          "[Removed Lines]",
          "324:   call delete('Xsearchstat1')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "338:     call cursor(1,1)",
          "339:     norm n",
          "340:   END",
          "342:   let buf = RunVimInTerminal('-S Xsearchstat', #{rows: 10})",
          "343:   call VerifyScreenDump(buf, 'Test_searchstat_1', {})",
          "",
          "[Removed Lines]",
          "341:   call writefile(lines, 'Xsearchstat')",
          "",
          "[Added Lines]",
          "339:   call writefile(lines, 'Xsearchstat', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "347:   call VerifyScreenDump(buf, 'Test_searchstat_2', {})",
          "349:   call StopVimInTerminal(buf)",
          "351: endfunc",
          "353: func Test_search_stat_then_gd()",
          "",
          "[Removed Lines]",
          "350:   call delete('Xsearchstat')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "358:     set shortmess-=S",
          "359:     set hlsearch",
          "360:   END",
          "363:   let buf = RunVimInTerminal('-S Xsearchstatgd', #{rows: 10})",
          "364:   call term_sendkeys(buf, \"/dog\\<CR>\")",
          "",
          "[Removed Lines]",
          "361:   call writefile(lines, 'Xsearchstatgd')",
          "",
          "[Added Lines]",
          "358:   call writefile(lines, 'Xsearchstatgd', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "368:   call VerifyScreenDump(buf, 'Test_searchstatgd_2', {})",
          "370:   call StopVimInTerminal(buf)",
          "372: endfunc",
          "374: func Test_search_stat_and_incsearch()",
          "",
          "[Removed Lines]",
          "371:   call delete('Xsearchstatgd')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "393:     set tabline=%!MyTabLine()",
          "394:   END",
          "397:   let buf = RunVimInTerminal('-S Xsearchstat_inc', #{rows: 10})",
          "398:   call term_sendkeys(buf, \"/abc\")",
          "",
          "[Removed Lines]",
          "395:   call writefile(lines, 'Xsearchstat_inc')",
          "",
          "[Added Lines]",
          "391:   call writefile(lines, 'Xsearchstat_inc', 'D')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "411:   call TermWait(buf)",
          "413:   call StopVimInTerminal(buf)",
          "415: endfunc",
          "",
          "[Removed Lines]",
          "414:   call delete('Xsearchstat_inc')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_shell.vim||src/testdir/test_shell.vim": [
          "File: src/testdir/test_shell.vim -> src/testdir/test_shell.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:   let save_sxq = &shellxquote",
          "203:   let save_sxe = &shellxescape",
          "206:   call setfperm('Xtestshell', \"r-x------\")",
          "207:   set shell=./Xtestshell",
          "",
          "[Removed Lines]",
          "205:   call writefile(['#!/bin/sh', 'echo \"Cmd: [$*]\" > Xlog'], 'Xtestshell')",
          "",
          "[Added Lines]",
          "205:   call writefile(['#!/bin/sh', 'echo \"Cmd: [$*]\" > Xlog'], 'Xtestshell', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:   let &shell = save_shell",
          "227:   let &shellxquote = save_sxq",
          "228:   let &shellxescape = save_sxe",
          "230:   call delete('Xlog')",
          "231: endfunc",
          "",
          "[Removed Lines]",
          "229:   call delete('Xtestshell')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_shortpathname.vim||src/testdir/test_shortpathname.vim": [
          "File: src/testdir/test_shortpathname.vim -> src/testdir/test_shortpathname.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   let file2 = dir2 . '/z.txt'",
          "43:   let nofile2 = dir2 . '/zz.txt'",
          "46:   let resdir1 = substitute(fnamemodify(dir1, ':p:8'), '/$', '', '')",
          "47:   call assert_match('\\V\\^c:/XX\\x\\x\\x\\x~1.Y\\$', resdir1)",
          "",
          "[Removed Lines]",
          "45:   call mkdir(dir1)",
          "",
          "[Added Lines]",
          "45:   call mkdir(dir1, 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   let resfile2 = resdir2 . '/z.txt'",
          "53:   let resnofile2 = resdir2 . '/zz.txt'",
          "59:   call TestIt(file1, ':p:8', resfile1)",
          "60:   call TestIt(nofile1, ':p:8', resnofile1)",
          "",
          "[Removed Lines]",
          "55:   call mkdir(dir2)",
          "56:   call writefile([], file1)",
          "57:   call writefile([], file2)",
          "",
          "[Added Lines]",
          "55:   call mkdir(dir2, 'D')",
          "56:   call writefile([], file1, 'D')",
          "57:   call writefile([], file2, 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:   call TestIt(nofile2, ':~:8', '~' . strpart(resnofile2, strlen(resdir1)))",
          "75:   cd c:/",
          "81:   call chdir(save_dir)",
          "82: endfunc",
          "",
          "[Removed Lines]",
          "76:   call delete(file2)",
          "77:   call delete(file1)",
          "78:   call delete(dir2, 'd')",
          "79:   call delete(dir1, 'd')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:   let file = dir . '/\u65e5\u672c\u8a9e\u306e\u30d5\u30a1\u30a4\u30eb.txt'",
          "92:   let sfile = fnamemodify(file, ':8')",
          "94:   call assert_notequal(file, sfile)",
          "95:   call assert_match('\\~', sfile)",
          "99: endfunc",
          "101: func Test_ColonEight_notexists()",
          "",
          "[Removed Lines]",
          "89:   call mkdir(dir)",
          "90:   call writefile([], file)",
          "97:   call delete(file)",
          "98:   call delete(dir, 'd')",
          "",
          "[Added Lines]",
          "85:   call mkdir(dir, 'D')",
          "86:   call writefile([], file, 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_signals.vim||src/testdir/test_signals.vim": [
          "File: src/testdir/test_signals.vim -> src/testdir/test_signals.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     au VimSuspend * call writefile([\"VimSuspend triggered\"], \"XautoOut1\", \"as\")",
          "118:     au VimResume * call writefile([\"VimResume triggered\"], \"XautoOut2\", \"as\")",
          "119:   END",
          "122:   let buf = RunVimInTerminal('-S XsetupAucmd Xsig_TERM', {'rows': 6})",
          "123:   let pid_vim = term_getjob(buf)->job_info().process",
          "",
          "[Removed Lines]",
          "120:   call writefile(lines, 'XsetupAucmd')",
          "",
          "[Added Lines]",
          "120:   call writefile(lines, 'XsetupAucmd', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:   %bwipe!",
          "149:   call delete('.Xsig_TERM.swp')",
          "151:   call delete('XautoOut1')",
          "152:   call delete('XautoOut2')",
          "153: endfunc",
          "",
          "[Removed Lines]",
          "150:   call delete('XsetupAucmd')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:     au VimLeave * call writefile([\"VimLeave triggered\"], \"XautoOut\", \"as\")",
          "177:     au VimLeavePre * call writefile([\"VimLeavePre triggered\"], \"XautoOut\", \"as\")",
          "178:   END",
          "181:   let buf = RunVimInTerminal('-S XsetupAucmd Xsig_TERM', {'rows': 6})",
          "182:   let pid_vim = term_getjob(buf)->job_info().process",
          "",
          "[Removed Lines]",
          "179:   call writefile(lines, 'XsetupAucmd')",
          "",
          "[Added Lines]",
          "178:   call writefile(lines, 'XsetupAucmd', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:   %bwipe!",
          "202:   call delete('.Xsig_TERM.swp')",
          "204:   call delete('XautoOut')",
          "205: endfunc",
          "",
          "[Removed Lines]",
          "203:   call delete('XsetupAucmd')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_signs.vim||src/testdir/test_signs.vim": [
          "File: src/testdir/test_signs.vim -> src/testdir/test_signs.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:                 \\ 'SpellLocal SpellRare', @:)",
          "249:   endfor",
          "253:   call feedkeys(\":sign define Sign icon=Xsig\\<C-A>\\<C-B>\\\"\\<CR>\", 'tx')",
          "254:   call assert_equal('\"sign define Sign icon=XsignOne XsignTwo', @:)",
          "",
          "[Removed Lines]",
          "251:   call writefile(repeat([\"Sun is shining\"], 30), \"XsignOne\")",
          "252:   call writefile(repeat([\"Sky is blue\"], 30), \"XsignTwo\")",
          "",
          "[Added Lines]",
          "251:   call writefile(repeat([\"Sun is shining\"], 30), \"XsignOne\", 'D')",
          "252:   call writefile(repeat([\"Sky is blue\"], 30), \"XsignTwo\", 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:   sign undefine Sign1",
          "327:   sign undefine Sign2",
          "328:   enew",
          "331: endfunc",
          "333: func Test_sign_invalid_commands()",
          "",
          "[Removed Lines]",
          "329:   call delete('XsignOne')",
          "330:   call delete('XsignTwo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "470:   call assert_fails('call sign_getdefined({})', 'E731:')",
          "472:   \" Tests for sign_place()",
          "474:   edit Xsign",
          "476:   call assert_equal(10, sign_place(10, '', 'sign1', 'Xsign',",
          "",
          "[Removed Lines]",
          "473:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign\")",
          "",
          "[Added Lines]",
          "471:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign\", 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "576:        \\ 'priority' : 10}]}],",
          "577:        \\ sign_getplaced('%', {'lnum' : 22}))",
          "580:   call sign_unplace('*')",
          "581:   call sign_undefine()",
          "582:   enew | only",
          "",
          "[Removed Lines]",
          "579:   call delete(\"Xsign\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "589:   call sign_unplace('*')",
          "590:   call sign_undefine()",
          "594:   let attr = {'text' : '=>', 'linehl' : 'Search', 'texthl' : 'Error'}",
          "595:   call assert_equal(0, sign_define(\"sign1\", attr))",
          "",
          "[Removed Lines]",
          "592:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign\")",
          "",
          "[Added Lines]",
          "589:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign\", 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "829:   \" Error cases",
          "830:   call assert_fails(\"sign place 3 group= name=sign1 buffer=\" . bnum, 'E474:')",
          "833:   call sign_unplace('*')",
          "834:   call sign_undefine()",
          "835:   enew | only",
          "",
          "[Removed Lines]",
          "832:   call delete(\"Xsign\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "872:   call sign_undefine()",
          "874:   \" Create two files and define signs",
          "878:   let attr = {'text' : '=>', 'linehl' : 'Search', 'texthl' : 'Error'}",
          "879:   call sign_define(\"sign1\", attr)",
          "",
          "[Removed Lines]",
          "875:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign1\")",
          "876:   call writefile(repeat([\"It is beautiful\"], 30), \"Xsign2\")",
          "",
          "[Added Lines]",
          "871:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign1\", 'D')",
          "872:   call writefile(repeat([\"It is beautiful\"], 30), \"Xsign2\", 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1182:   call sign_unplace('*')",
          "1183:   call sign_undefine()",
          "1184:   enew | only",
          "1187: endfunc",
          "1189: \" Tests for auto-generating the sign identifier.",
          "",
          "[Removed Lines]",
          "1185:   call delete(\"Xsign1\")",
          "1186:   call delete(\"Xsign2\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1195:   let attr = {'text' : '=>', 'linehl' : 'Search', 'texthl' : 'Error'}",
          "1196:   call assert_equal(0, sign_define(\"sign1\", attr))",
          "1199:   edit Xsign",
          "1201:   call assert_equal(1, sign_place(0, '', 'sign1', 'Xsign',",
          "",
          "[Removed Lines]",
          "1198:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign\")",
          "",
          "[Added Lines]",
          "1192:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign\", 'D')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1217:   call assert_equal(10,",
          "1218:        \\ sign_getplaced('Xsign', {'id' : 1})[0].signs[0].lnum)",
          "1221:   call sign_unplace('*')",
          "1222:   call sign_undefine()",
          "1223:   enew | only",
          "",
          "[Removed Lines]",
          "1220:   call delete(\"Xsign\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1235:   call sign_define(\"sign3\", attr)",
          "1237:   \" Place three signs with different priority in the same line",
          "1239:   edit Xsign",
          "1241:   call sign_place(1, 'g1', 'sign1', 'Xsign',",
          "",
          "[Removed Lines]",
          "1238:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign\")",
          "",
          "[Added Lines]",
          "1231:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign\", 'D')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1590:   call sign_unplace('*')",
          "1591:   call sign_undefine()",
          "1592:   enew | only",
          "1594: endfunc",
          "1596: \" Tests for memory allocation failures in sign functions",
          "1597: func Test_sign_memfailures()",
          "1599:   edit Xsign",
          "1601:   call test_alloc_fail(GetAllocId('sign_getdefined'), 0, 0)",
          "",
          "[Removed Lines]",
          "1593:   call delete(\"Xsign\")",
          "1598:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign\")",
          "",
          "[Added Lines]",
          "1590:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign\", 'D')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1632:   call sign_unplace('*')",
          "1633:   call sign_undefine()",
          "1634:   enew | only",
          "1636: endfunc",
          "1638: \" Test for auto-adjusting the line number of a placed sign.",
          "",
          "[Removed Lines]",
          "1635:   call delete(\"Xsign\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1789:  redraw",
          "1790:     sign place 10 line=2 name=s1",
          "1791:   END",
          "1793:   let buf = RunVimInTerminal('-S XtestSigncolumn', {'rows': 6})",
          "1794:   call VerifyScreenDump(buf, 'Test_sign_cursor_1', {})",
          "",
          "[Removed Lines]",
          "1792:   call writefile(lines, 'XtestSigncolumn')",
          "",
          "[Added Lines]",
          "1783:   call writefile(lines, 'XtestSigncolumn', 'D')",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1824:   \" clean up",
          "1825:   call StopVimInTerminal(buf)",
          "1827: endfunc",
          "1829: \" Return the 'len' characters in screen starting from (row,col)",
          "",
          "[Removed Lines]",
          "1826:   call delete('XtestSigncolumn')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1943: \" Test for managing multiple signs using the sign functions",
          "1944: func Test_sign_funcs_multi()",
          "1946:   edit Xsign",
          "1947:   let bnum = bufnr('')",
          "",
          "[Removed Lines]",
          "1945:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign\")",
          "",
          "[Added Lines]",
          "1935:   call writefile(repeat([\"Sun is shining\"], 30), \"Xsign\", 'D')",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2054:   call sign_unplace('*')",
          "2055:   call sign_undefine()",
          "2056:   enew!",
          "2058: endfunc",
          "2060: func Test_sign_null_list()",
          "",
          "[Removed Lines]",
          "2057:   call delete(\"Xsign\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_sort.vim||src/testdir/test_sort.vim": [
          "File: src/testdir/test_sort.vim -> src/testdir/test_sort.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:     call writefile(v:errors, 'Xresult')",
          "1521:     qall!",
          "1522:   [SCRIPT]",
          "1524:   if RunVim([], [], '--clean -S Xscript')",
          "1525:     call assert_equal([], readfile('Xresult'))",
          "1526:   endif",
          "1528:   call delete('Xresult')",
          "1529: endfunc",
          "",
          "[Removed Lines]",
          "1523:   call writefile(lines, 'Xscript')",
          "1527:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "1523:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_source.vim||src/testdir/test_source.vim": [
          "File: src/testdir/test_source.vim -> src/testdir/test_source.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: \" When deleting a file and immediately creating a new one the inode may be",
          "52: \" recycled.  Vim should not recognize it as the same script.",
          "53: func Test_different_script()",
          "55:   source XoneScript",
          "58:   call assert_fails('source XtwoScript', 'E121:')",
          "60: endfunc",
          "62: \" When sourcing a vim script, shebang should be ignored.",
          "",
          "[Removed Lines]",
          "54:   call writefile(['let s:var = \"asdf\"'], 'XoneScript')",
          "56:   call delete('XoneScript')",
          "57:   call writefile(['let g:var = s:var'], 'XtwoScript')",
          "59:   call delete('XtwoScript')",
          "",
          "[Added Lines]",
          "54:   call writefile(['let s:var = \"asdf\"'], 'XoneScript', 'D')",
          "56:   call writefile(['let g:var = s:var'], 'XtwoScript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_source_utf8.vim||src/testdir/test_source_utf8.vim": [
          "File: src/testdir/test_source_utf8.vim -> src/testdir/test_source_utf8.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:         \\ \"map __3 asd\\<C-V>\\<C-V>\",",
          "44:         \\ \"map __4 asd\\<C-V>\\<C-V>\\<C-V>\",",
          "45:         \\ \"map __5 asd\\<C-V>\\<C-V>\\<C-V>\",",
          "47:   source Xtestfile",
          "48:   enew!",
          "49:   exe \"normal __1\\<Esc>\\<Esc>__2\\<Esc>__3\\<Esc>\\<Esc>__4\\<Esc>__5\\<Esc>\"",
          "",
          "[Removed Lines]",
          "46:         \\ ], 'Xtestfile')",
          "",
          "[Added Lines]",
          "46:         \\ ], 'Xtestfile', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:         \\ getline(1, 2))",
          "55:   enew!",
          "57:   unmap __1",
          "58:   unmap __2",
          "59:   unmap __3",
          "",
          "[Removed Lines]",
          "56:   call delete('Xtestfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_spell.vim||src/testdir/test_spell.vim": [
          "File: src/testdir/test_spell.vim -> src/testdir/test_spell.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "763: \"Test with SAL instead of SOFO items; test automatic reloading",
          "764: func Test_zz_sal_and_addition()",
          "767:   call writefile(g:test_data_dic1, \"Xtest.dic\")",
          "768:   call writefile(g:test_data_aff_sal, \"Xtest.aff\")",
          "769:   mkspell! Xtest Xtest",
          "",
          "[Removed Lines]",
          "765:   set enc=latin1",
          "766:   set spellfile=",
          "",
          "[Added Lines]",
          "765:   set enc=latin1",
          "766:   set spellfile=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:   call assert_equal('kbltykk', soundfold('goobledygoook'))",
          "772:   call assert_equal('kprnfn', soundfold('k\ufffdop\ufffdr\ufffdn\ufffdven'))",
          "773:   call assert_equal('*fls kswts tl', soundfold('oeverloos gezwets edale'))",
          "775:   \"also use an addition file",
          "776:   call writefile([\"/regions=usgbnz\", \"elequint/2\", \"elekwint/3\"], \"Xtest.latin1.add\")",
          "777:   mkspell! Xtest.latin1.add.spl Xtest.latin1.add",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "808:   set spellfile=Xdir/Xtest.utf-8.add,Xtest_other.add",
          "809: endfunc",
          "812:   messages clear",
          "813:   call writefile([\"/regions=usgbnz\", \"elequint/0\"], \"Xtest.latin1.add\")",
          "815:   call assert_match('Invalid region nr in Xtest.latin1.add line 2: 0', execute('messages'))",
          "816:   call delete('Xtest.latin1.add')",
          "817:   call delete('Xtest.latin1.add.spl')",
          "",
          "[Removed Lines]",
          "811: func Test_region_error()",
          "814:   mkspell! Xtest.latin1.add.spl Xtest.latin1.add",
          "",
          "[Added Lines]",
          "811: func Test_region_error()",
          "",
          "---------------"
        ],
        "src/testdir/test_spell_utf8.vim||src/testdir/test_spell_utf8.vim": [
          "File: src/testdir/test_spell_utf8.vim -> src/testdir/test_spell_utf8.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "726: \" Test with SAL instead of SOFO items; test automatic reloading",
          "727: func Test_spell_sal_and_addition()",
          "728:   set spellfile=",
          "731:   mkspell! Xtest Xtest",
          "732:   set spl=Xtest.utf-8.spl spell",
          "733:   call assert_equal('kbltykk', soundfold('goobledygoook'))",
          "",
          "[Removed Lines]",
          "729:   call writefile(g:test_data_dic1, \"Xtest.dic\")",
          "730:   call writefile(g:test_data_aff_sal, \"Xtest.aff\")",
          "",
          "[Added Lines]",
          "729:   call writefile(g:test_data_dic1, \"Xtest.dic\", 'D')",
          "730:   call writefile(g:test_data_aff_sal, \"Xtest.aff\", 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "735:   call assert_equal('*fls kswts tl', soundfold('oeverloos gezwets edale'))",
          "737:   \"also use an addition file",
          "739:   mkspell! Xtest.utf-8.add.spl Xtest.utf-8.add",
          "741:   bwipe!",
          "",
          "[Removed Lines]",
          "738:   call writefile([\"/regions=usgbnz\", \"elequint/2\", \"elekwint/3\"], \"Xtest.utf-8.add\")",
          "",
          "[Added Lines]",
          "738:   call writefile([\"/regions=usgbnz\", \"elequint/2\", \"elekwint/3\"], \"Xtest.utf-8.add\", 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_spellfile.vim||src/testdir/test_spellfile.vim": [
          "File: src/testdir/test_spellfile.vim -> src/testdir/test_spellfile.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: \" The spell file format is described in spellfile.c",
          "213: func Test_spellfile_format_error()",
          "214:   let save_rtp = &rtp",
          "216:   let splfile = './Xtest/spell/Xtest.utf-8.spl'",
          "218:   \" empty spell file",
          "",
          "[Removed Lines]",
          "215:   call mkdir('Xtest/spell', 'p')",
          "",
          "[Added Lines]",
          "215:   call mkdir('Xtest/spell', 'pR')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "384:   call Spellfile_Test(0zFF00000000000000000000000201010000, 'E759:')",
          "386:   let &rtp = save_rtp",
          "388: endfunc",
          "390: \" Test for format errors in suggest file",
          "391: func Test_sugfile_format_error()",
          "392:   let save_rtp = &rtp",
          "394:   let splfile = './Xtest/spell/Xtest.utf-8.spl'",
          "395:   let sugfile = './Xtest/spell/Xtest.utf-8.sug'",
          "",
          "[Removed Lines]",
          "387:   call delete('Xtest', 'rf')",
          "393:   call mkdir('Xtest/spell', 'p')",
          "",
          "[Added Lines]",
          "392:   call mkdir('Xtest/spell', 'pR')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "473:   set nospell spelllang&",
          "475:   let &rtp = save_rtp",
          "477: endfunc",
          "479: \" Test for using :mkspell to create a spell file from a list of words",
          "",
          "[Removed Lines]",
          "476:   call delete('Xtest', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "486:     /encoding=latin1",
          "487:     example",
          "488:   [END]",
          "490:   let output = execute('mkspell Xwordlist.spl Xwordlist.dic')",
          "491:   call assert_match('Duplicate /encoding= line ignored in Xwordlist.dic line 4: /encoding=latin1', output)",
          "",
          "[Removed Lines]",
          "489:   call writefile(lines, 'Xwordlist.dic')",
          "",
          "[Added Lines]",
          "487:   call writefile(lines, 'Xwordlist.dic', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "559:   call assert_match('Compressed keep-case:', output)",
          "561:   call delete('Xwordlist.spl')",
          "563: endfunc",
          "565: \" Test for the :mkspell command",
          "",
          "[Removed Lines]",
          "562:   call delete('Xwordlist.dic')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "600:   CheckNotMSWindows",
          "602:   \" No word count in .dic file",
          "605:   call assert_fails('mkspell! Xtest.spl Xtest', 'E760:')",
          "607:   \" create a .dic file for the tests below",
          "",
          "[Removed Lines]",
          "603:   call writefile([], 'Xtest.dic')",
          "604:   call writefile([], 'Xtest.aff')",
          "",
          "[Added Lines]",
          "600:   call writefile([], 'Xtest.dic', 'D')",
          "601:   call writefile([], 'Xtest.aff', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "823:   \" use multiple .aff files with different values for COMPOUNDWORDMAX and",
          "824:   \" MIDWORD (number and string)",
          "829:   let output = execute('mkspell! Xtest.spl Xtest_US Xtest_CA')",
          "830:   call assert_match('COMPOUNDWORDMAX value differs from what is used in another .aff file', output)",
          "831:   call assert_match('MIDWORD value differs from what is used in another .aff file', output)",
          "839:   call delete('Xtest.spl')",
          "840:   call delete('Xtest.sug')",
          "841: endfunc",
          "",
          "[Removed Lines]",
          "825:   call writefile(['1', 'world'], 'Xtest_US.dic')",
          "826:   call writefile(['1', 'world'], 'Xtest_CA.dic')",
          "827:   call writefile([\"COMPOUNDWORDMAX 3\", \"MIDWORD '-\"], 'Xtest_US.aff')",
          "828:   call writefile([\"COMPOUNDWORDMAX 4\", \"MIDWORD '=\"], 'Xtest_CA.aff')",
          "832:   call delete('Xtest_US.dic')",
          "833:   call delete('Xtest_CA.dic')",
          "834:   call delete('Xtest_US.aff')",
          "835:   call delete('Xtest_CA.aff')",
          "837:   call delete('Xtest.dic')",
          "838:   call delete('Xtest.aff')",
          "",
          "[Added Lines]",
          "822:   call writefile(['1', 'world'], 'Xtest_US.dic', 'D')",
          "823:   call writefile(['1', 'world'], 'Xtest_CA.dic', 'D')",
          "824:   call writefile([\"COMPOUNDWORDMAX 3\", \"MIDWORD '-\"], 'Xtest_US.aff', 'D')",
          "825:   call writefile([\"COMPOUNDWORDMAX 4\", \"MIDWORD '=\"], 'Xtest_CA.aff', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "855: endfunc",
          "857: func Test_spellfile_verbose()",
          "860:   mkspell! XtestVerbose-utf8.spl XtestVerbose",
          "861:   set spell",
          "",
          "[Removed Lines]",
          "858:   call writefile(['1', 'one'], 'XtestVerbose.dic')",
          "859:   call writefile([], 'XtestVerbose.aff')",
          "",
          "[Added Lines]",
          "849:   call writefile(['1', 'one'], 'XtestVerbose.dic', 'D')",
          "850:   call writefile([], 'XtestVerbose.aff', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "869:   call assert_notmatch('Reading spell file \"XtestVerbose-utf8.spl\"', a)",
          "871:   set spell& spelllang&",
          "874:   call delete('XtestVerbose-utf8.spl')",
          "875: endfunc",
          "877: \" Test NOBREAK (see :help spell-NOBREAK)",
          "878: func Test_NOBREAK()",
          "882:   mkspell! XtestNOBREAK-utf8.spl XtestNOBREAK",
          "883:   set spell spelllang=XtestNOBREAK-utf8.spl",
          "",
          "[Removed Lines]",
          "872:   call delete('XtestVerbose.dic')",
          "873:   call delete('XtestVerbose.aff')",
          "879:   call writefile(['3', 'one', 'two', 'three' ], 'XtestNOBREAK.dic')",
          "880:   call writefile(['NOBREAK' ], 'XtestNOBREAK.aff')",
          "",
          "[Added Lines]",
          "868:   call writefile(['3', 'one', 'two', 'three' ], 'XtestNOBREAK.dic', 'D')",
          "869:   call writefile(['NOBREAK' ], 'XtestNOBREAK.aff', 'D')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "900:   bw!",
          "901:   set spell& spelllang&",
          "904:   call delete('XtestNOBREAK-utf8.spl')",
          "905: endfunc",
          "",
          "[Removed Lines]",
          "902:   call delete('XtestNOBREAK.dic')",
          "903:   call delete('XtestNOBREAK.aff')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "910:         \\         'one/c',",
          "911:         \\         'two/c',",
          "912:         \\         'three/c',",
          "914:   \" Forbid compound words where first word ends with 'wo' and second starts with 'on'.",
          "915:   call writefile(['CHECKCOMPOUNDPATTERN 1',",
          "916:         \\         'CHECKCOMPOUNDPATTERN wo on',",
          "919:   mkspell! XtestCHECKCOMPOUNDPATTERN-utf8.spl XtestCHECKCOMPOUNDPATTERN",
          "920:   set spell spelllang=XtestCHECKCOMPOUNDPATTERN-utf8.spl",
          "",
          "[Removed Lines]",
          "913:         \\         'four'], 'XtestCHECKCOMPOUNDPATTERN.dic')",
          "917:         \\         'COMPOUNDFLAG c'], 'XtestCHECKCOMPOUNDPATTERN.aff')",
          "",
          "[Added Lines]",
          "900:         \\         'four'], 'XtestCHECKCOMPOUNDPATTERN.dic', 'D')",
          "904:         \\         'COMPOUNDFLAG c'], 'XtestCHECKCOMPOUNDPATTERN.aff', 'D')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "938:   endfor",
          "940:   set spell& spelllang&",
          "943:   call delete('XtestCHECKCOMPOUNDPATTERN-utf8.spl')",
          "944: endfunc",
          "",
          "[Removed Lines]",
          "941:   call delete('XtestCHECKCOMPOUNDPATTERN.dic')",
          "942:   call delete('XtestCHECKCOMPOUNDPATTERN.aff')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "948:   call writefile(['3',",
          "949:         \\         'one/c',",
          "950:         \\         'two/c',",
          "953:   \" pass 0 tests without NOCOMPOUNDSUGS, pass 1 tests with NOCOMPOUNDSUGS",
          "954:   for pass in [0, 1]",
          "955:     if pass == 0",
          "957:     else",
          "958:       call writefile(['NOCOMPOUNDSUGS',",
          "960:     endif",
          "962:     mkspell! XtestNOCOMPOUNDSUGS-utf8.spl XtestNOCOMPOUNDSUGS",
          "",
          "[Removed Lines]",
          "951:         \\         'three/c'], 'XtestNOCOMPOUNDSUGS.dic')",
          "956:       call writefile(['COMPOUNDFLAG c'], 'XtestNOCOMPOUNDSUGS.aff')",
          "959:           \\           'COMPOUNDFLAG c'], 'XtestNOCOMPOUNDSUGS.aff')",
          "",
          "[Added Lines]",
          "936:         \\         'three/c'], 'XtestNOCOMPOUNDSUGS.dic', 'D')",
          "941:       call writefile(['COMPOUNDFLAG c'], 'XtestNOCOMPOUNDSUGS.aff', 'D')",
          "944:           \\           'COMPOUNDFLAG c'], 'XtestNOCOMPOUNDSUGS.aff', 'D')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "984:   endfor",
          "986:   set spell& spelllang&",
          "989:   call delete('XtestNOCOMPOUNDSUGS-utf8.spl')",
          "990: endfunc",
          "",
          "[Removed Lines]",
          "987:   call delete('XtestNOCOMPOUNDSUGS.dic')",
          "988:   call delete('XtestNOCOMPOUNDSUGS.aff')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "998:         \\         'any',",
          "999:         \\         'tee',",
          "1000:         \\         'the',",
          "1004:   mkspell! XtestCOMMON-utf8.spl XtestCOMMON",
          "1005:   set spell spelllang=XtestCOMMON-utf8.spl",
          "",
          "[Removed Lines]",
          "1001:         \\         'ted'], 'XtestCOMMON.dic')",
          "1002:   call writefile(['COMMON the and'], 'XtestCOMMON.aff')",
          "",
          "[Added Lines]",
          "984:         \\         'ted'], 'XtestCOMMON.dic', 'D')",
          "985:   call writefile(['COMMON the and'], 'XtestCOMMON.aff', 'D')",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1011:   call assert_equal(['the', 'tee'], spellsuggest('dhe', 2))",
          "1013:   set spell& spelllang&",
          "1016:   call delete('XtestCOMMON-utf8.spl')",
          "1017: endfunc",
          "1019: \" Test NOSUGGEST (see :help spell-COMMON)",
          "1020: func Test_spellfile_NOSUGGEST()",
          "1024:   mkspell! XtestNOSUGGEST-utf8.spl XtestNOSUGGEST",
          "1025:   set spell spelllang=XtestNOSUGGEST-utf8.spl",
          "",
          "[Removed Lines]",
          "1014:   call delete('XtestCOMMON.dic')",
          "1015:   call delete('XtestCOMMON.aff')",
          "1021:   call writefile(['2', 'foo/X', 'fog'], 'XtestNOSUGGEST.dic')",
          "1022:   call writefile(['NOSUGGEST X'], 'XtestNOSUGGEST.aff')",
          "",
          "[Added Lines]",
          "1002:   call writefile(['2', 'foo/X', 'fog'], 'XtestNOSUGGEST.dic', 'D')",
          "1003:   call writefile(['NOSUGGEST X'], 'XtestNOSUGGEST.aff', 'D')",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1037:   call assert_equal(['fog'], spellsuggest('fogg', 1))",
          "1039:   set spell& spelllang&",
          "1042:   call delete('XtestNOSUGGEST-utf8.spl')",
          "1043: endfunc",
          "",
          "[Removed Lines]",
          "1040:   call delete('XtestNOSUGGEST.dic')",
          "1041:   call delete('XtestNOSUGGEST.aff')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1047: func Test_spellfile_CIRCUMFIX()",
          "1048:   \" Example taken verbatim from https://github.com/hunspell/hunspell/tree/master/tests",
          "1049:   call writefile(['1',",
          "1051:   call writefile(['# circumfixes: ~ obligate prefix/suffix combinations',",
          "1052:         \\         '# superlative in Hungarian: leg- (prefix) AND -bb (suffix)',",
          "1053:         \\         '',",
          "",
          "[Removed Lines]",
          "1050:         \\         'nagy/C po:adj'], 'XtestCIRCUMFIX.dic')",
          "",
          "[Added Lines]",
          "1029:         \\         'nagy/C po:adj'], 'XtestCIRCUMFIX.dic', 'D')",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1062:         \\         'SFX C Y 3',",
          "1063:         \\         'SFX C 0 obb . is:COMPARATIVE',",
          "1064:         \\         'SFX C 0 obb/AX . is:SUPERLATIVE',",
          "1067:   mkspell! XtestCIRCUMFIX-utf8.spl XtestCIRCUMFIX",
          "1068:   set spell spelllang=XtestCIRCUMFIX-utf8.spl",
          "",
          "[Removed Lines]",
          "1065:         \\         'SFX C 0 obb/BX . is:SUPERSUPERLATIVE'], 'XtestCIRCUMFIX.aff')",
          "",
          "[Added Lines]",
          "1044:         \\         'SFX C 0 obb/BX . is:SUPERSUPERLATIVE'], 'XtestCIRCUMFIX.aff', 'D')",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1081:   endfor",
          "1083:   set spell& spelllang&",
          "1086:   call delete('XtestCIRCUMFIX-utf8.spl')",
          "1087: endfunc",
          "",
          "[Removed Lines]",
          "1084:   call delete('XtestCIRCUMFIX.dic')",
          "1085:   call delete('XtestCIRCUMFIX.aff')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1094:         \\         'SFX A are hiamo [cg]are',",
          "1095:         \\         'SFX A re mo iare',",
          "1096:         \\         'SFX A re vamo are'],",
          "1098:   \" Examples of Italian verbs:",
          "1099:   \" - cantare = to sing",
          "1100:   \" - cercare = to search",
          "1101:   \" - odiare = to hate",
          "1104:   mkspell! XtestSFX-utf8.spl XtestSFX",
          "1105:   set spell spelllang=XtestSFX-utf8.spl",
          "",
          "[Removed Lines]",
          "1097:         \\         'XtestSFX.aff')",
          "1102:   call writefile(['3', 'cantare/A', 'cercare/A', 'odiare/A'], 'XtestSFX.dic')",
          "",
          "[Added Lines]",
          "1074:         \\         'XtestSFX.aff', 'D')",
          "1079:   call writefile(['3', 'cantare/A', 'cercare/A', 'odiare/A'], 'XtestSFX.dic', 'D')",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1123:   call assert_equal(['odiamo'],    spellsuggest('odiiamo', 1))",
          "1125:   set spell& spelllang&",
          "1128:   call delete('XtestSFX-utf8.spl')",
          "1129: endfunc",
          "",
          "[Removed Lines]",
          "1126:   call delete('XtestSFX.dic')",
          "1127:   call delete('XtestSFX.aff')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1133: func Test_init_spellfile()",
          "1134:   let save_rtp = &rtp",
          "1135:   let save_encoding = &encoding",
          "1137:   call writefile(['vim'], 'Xrtp/spell/Xtest.dic')",
          "1138:   silent mkspell Xrtp/spell/Xtest.utf-8.spl Xrtp/spell/Xtest.dic",
          "1139:   set runtimepath=./Xrtp",
          "",
          "[Removed Lines]",
          "1136:   call mkdir('Xrtp/spell', 'p')",
          "",
          "[Added Lines]",
          "1111:   call mkdir('Xrtp/spell', 'pR')",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1143:   call assert_equal('./Xrtp/spell/Xtest.utf-8.add', &spellfile)",
          "1144:   call assert_equal(['abc'], readfile('Xrtp/spell/Xtest.utf-8.add'))",
          "1145:   call assert_true(filereadable('Xrtp/spell/Xtest.utf-8.spl'))",
          "1146:   set spell& spelllang& spellfile&",
          "1148:   let &encoding = save_encoding",
          "1149:   let &rtp = save_rtp",
          "1150:   %bw!",
          "",
          "[Removed Lines]",
          "1147:   call delete('Xrtp', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1171: \" this was using a NULL pointer",
          "1172: func Test_mkspell_empty_dic()",
          "1175:   mkspell! XtestEmpty.spl XtestEmpty",
          "1179:   call delete('XtestEmpty.spl')",
          "1180: endfunc",
          "",
          "[Removed Lines]",
          "1173:   call writefile(['1'], 'XtestEmpty.dic')",
          "1174:   call writefile(['SOFOFROM abcd', 'SOFOTO ABCD', 'SAL CIA X'], 'XtestEmpty.aff')",
          "1177:   call delete('XtestEmpty.dic')",
          "1178:   call delete('XtestEmpty.aff')",
          "",
          "[Added Lines]",
          "1148:   call writefile(['1'], 'XtestEmpty.dic', 'D')",
          "1149:   call writefile(['SOFOFROM abcd', 'SOFOTO ABCD', 'SAL CIA X'], 'XtestEmpty.aff', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_startup.vim||src/testdir/test_startup.vim": [
          "File: src/testdir/test_startup.vim -> src/testdir/test_startup.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     quit",
          "44:   [CODE]",
          "47:   call writefile(['let g:sequence .= \"here \"'], 'Xhere/plugin/here.vim')",
          "49:   call writefile(['let g:sequence .= \"another \"'], 'Xanother/plugin/another.vim')",
          "50:   call mkdir('Xhere/pack/foo/start/foobar/plugin', 'p')",
          "51:   call writefile(['let g:sequence .= \"pack \"'], 'Xhere/pack/foo/start/foobar/plugin/foo.vim')",
          "54:   call writefile(['let g:sequence .= \"after \"'], 'Xafter/plugin/later.vim')",
          "56:   if RunVim(before, after, '')",
          "",
          "[Removed Lines]",
          "46:   call mkdir('Xhere/plugin', 'p')",
          "48:   call mkdir('Xanother/plugin', 'p')",
          "53:   call mkdir('Xafter/plugin', 'p')",
          "",
          "[Added Lines]",
          "46:   call mkdir('Xhere/plugin', 'pR')",
          "48:   call mkdir('Xanother/plugin', 'pR')",
          "53:   call mkdir('Xafter/plugin', 'pR')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   call delete('Xtestout')",
          "74:   call delete('Xsequence')",
          "78: endfunc",
          "80: func Test_pack_in_rtp_when_plugins_run()",
          "",
          "[Removed Lines]",
          "75:   call delete('Xhere', 'rf')",
          "76:   call delete('Xanother', 'rf')",
          "77:   call delete('Xafter', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   let after = [",
          "93:  \\ 'quit',",
          "94:  \\ ]",
          "96:   call writefile(['redir! > Xtestout', 'silent set runtimepath?', 'silent! call foo#Trigger()', 'redir END'], 'Xhere/plugin/here.vim')",
          "97:   call mkdir('Xhere/pack/foo/start/foobar/autoload', 'p')",
          "98:   call writefile(['function! foo#Trigger()', 'echo \"autoloaded foo\"', 'endfunction'], 'Xhere/pack/foo/start/foobar/autoload/foo.vim')",
          "",
          "[Removed Lines]",
          "95:   call mkdir('Xhere/plugin', 'p')",
          "",
          "[Added Lines]",
          "92:   call mkdir('Xhere/plugin', 'pR')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:   endif",
          "107:   call delete('Xtestout')",
          "109: endfunc",
          "111: func Test_help_arg()",
          "",
          "[Removed Lines]",
          "108:   call delete('Xhere', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "303:       return 666",
          "304:     }",
          "305:   END",
          "308:   let after =<< trim [CODE]",
          "309:     call writefile([&errorfile, string(getpos(\".\"))], \"XtestoutQarg\")",
          "",
          "[Removed Lines]",
          "306:   call writefile(lines, 'Xbadfile.c')",
          "",
          "[Added Lines]",
          "301:   call writefile(lines, 'Xbadfile.c', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "315:   \" Test with default argument '-q'.",
          "316:   call assert_equal('errors.err', &errorfile)",
          "318:   if RunVim([], after, '-q')",
          "319:     let lines = readfile('XtestoutQarg')",
          "320:     call assert_equal(['errors.err',",
          "",
          "[Removed Lines]",
          "317:   call writefile([\"Xbadfile.c:4:12: error: expected ';' before '}' token\"], 'errors.err')",
          "",
          "[Added Lines]",
          "312:   call writefile([\"Xbadfile.c:4:12: error: expected ';' before '}' token\"], 'errors.err', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "323:  \\             lines)",
          "324:   endif",
          "325:   call delete('XtestoutQarg')",
          "328:   \" Test with explicit argument '-q XerrorsQarg' (with space).",
          "330:   if RunVim([], after, '-q XerrorsQarg')",
          "331:     let lines = readfile('XtestoutQarg')",
          "332:     call assert_equal(['XerrorsQarg',",
          "",
          "[Removed Lines]",
          "326:   call delete('errors.err')",
          "329:   call writefile([\"Xbadfile.c:4:12: error: expected ';' before '}' token\"], 'XerrorsQarg')",
          "",
          "[Added Lines]",
          "323:   call writefile([\"Xbadfile.c:4:12: error: expected ';' before '}' token\"], 'XerrorsQarg', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "349:   let out = system(GetVimCommand() .. ' -q xyz.err')",
          "350:   call assert_equal(3, v:shell_error)",
          "353:   call delete('XtestoutQarg')",
          "355: endfunc",
          "357: \" Test the -V[N]{filename} argument to set the 'verbose' option to N",
          "",
          "[Removed Lines]",
          "352:   call delete('Xbadfile.c')",
          "354:   call delete('XerrorsQarg')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "400: \" Test the -A, -F and -H arguments (Arabic, Farsi and Hebrew modes).",
          "401: func Test_A_F_H_arg()",
          "402:   let after =<< trim [CODE]",
          "404:     qall",
          "405:   [CODE]",
          "",
          "[Removed Lines]",
          "403:     call writefile([&rightleft, &arabic, &fkmap, &hkmap], \"Xtestout\")",
          "",
          "[Added Lines]",
          "395:     call writefile([&rightleft, &arabic, &fkmap, &hkmap], \"Xtestout\", 'D')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "420:     let lines = readfile('Xtestout')",
          "421:     call assert_equal(['1', '0', '0', '1'], lines)",
          "422:   endif",
          "425: endfunc",
          "427: \" Test the --echo-wid argument (for GTK GUI only).",
          "",
          "[Removed Lines]",
          "424:   call delete('Xtestout')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "800: func Test_zzz_startinsert()",
          "801:   \" Test :startinsert",
          "803:   let after =<< trim [CODE]",
          "804:     :startinsert",
          "805:     call feedkeys(\"foobar\\<c-o>:wq\\<cr>\",\"t\")",
          "",
          "[Removed Lines]",
          "802:   call writefile(['123456'], 'Xtestout')",
          "",
          "[Added Lines]",
          "792:   call writefile(['123456'], 'Xtestout', 'D')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "820:     let lines = readfile('Xtestout')",
          "821:     call assert_equal(['123456foobar'], lines)",
          "822:   endif",
          "824: endfunc",
          "826: func Test_issue_3969()",
          "",
          "[Removed Lines]",
          "823:   call delete('Xtestout')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "898:         \\ \"first\\tXfile1\\t/^    \\\\zsfirst$/\",",
          "899:         \\ \"second\\tXfile1\\t/^    \\\\zssecond$/\",",
          "900:         \\ \"third\\tXfile1\\t/^    \\\\zsthird$/\"],",
          "904:   for t_arg in ['-t second', '-tsecond']",
          "905:     if RunVim(before, after, t_arg)",
          "",
          "[Removed Lines]",
          "901:         \\ 'Xtags')",
          "902:   call writefile(['    first', '    second', '    third'], 'Xfile1')",
          "",
          "[Added Lines]",
          "890:         \\ 'Xtags', 'D')",
          "891:   call writefile(['    first', '    second', '    third'], 'Xfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "907:       call delete('Xtestout')",
          "908:     endif",
          "909:   endfor",
          "913: endfunc",
          "915: \" Test the '-T' argument which sets the 'term' option.",
          "",
          "[Removed Lines]",
          "911:   call delete('Xtags')",
          "912:   call delete('Xfile1')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1006:     call assert_match('^E282:', v:errmsg)",
          "1007:     call writefile(v:errors, 'Xtestout')",
          "1008:   [CODE]",
          "1011:   let cmd = GetVimCommandCleanTerm() . ' -u Xvimrc_missing -S Xafter'",
          "1012:   let buf = term_start(cmd, {'term_rows' : 10})",
          "",
          "[Removed Lines]",
          "1009:   call writefile(after, 'Xafter')",
          "",
          "[Added Lines]",
          "995:   call writefile(after, 'Xafter', 'D')",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1017:   call WaitForAssert({-> assert_match(':', term_getline(buf, 10))})",
          "1018:   call StopVimInTerminal(buf)",
          "1019:   call assert_equal([], readfile('Xtestout'))",
          "1021:   call delete('Xtestout')",
          "1022: endfunc",
          "",
          "[Removed Lines]",
          "1020:   call delete('Xafter')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1029:     call writefile(v:errors, 'Xtestout')",
          "1030:     qall",
          "1031:   [CODE]",
          "1033:   let cmd = GetVimProg() . ' --not-a-term -S Xafter --cmd \"set enc=utf8\"'",
          "1034:   call setenv('VIMINIT', 'let viminit_found=\"yes\"')",
          "1035:   exe \"silent !\" . cmd",
          "1036:   call assert_equal([], readfile('Xtestout'))",
          "1037:   call delete('Xtestout')",
          "1039: endfunc",
          "1041: \" Test for using the $EXINIT environment variable",
          "",
          "[Removed Lines]",
          "1032:   call writefile(after, 'Xafter')",
          "1038:   call delete('Xafter')",
          "",
          "[Added Lines]",
          "1018:   call writefile(after, 'Xafter', 'D')",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1046:     call writefile(v:errors, 'Xtestout')",
          "1047:     qall",
          "1048:   [CODE]",
          "1050:   let cmd = GetVimProg() . ' --not-a-term -S Xafter --cmd \"set enc=utf8\"'",
          "1051:   call setenv('EXINIT', 'let exinit_found=\"yes\"')",
          "1052:   exe \"silent !\" . cmd",
          "1053:   call assert_equal([], readfile('Xtestout'))",
          "1054:   call delete('Xtestout')",
          "1056: endfunc",
          "1058: \" Test for using the 'exrc' option",
          "",
          "[Removed Lines]",
          "1049:   call writefile(after, 'Xafter')",
          "1055:   call delete('Xafter')",
          "",
          "[Added Lines]",
          "1035:   call writefile(after, 'Xafter', 'D')",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1064:     call writefile(v:errors, 'Xtestout')",
          "1065:     qall",
          "1066:   [CODE]",
          "1068:   call writefile(['let exrc_found=37'], 'Xrcdir/.exrc')",
          "1069:   call writefile(after, 'Xrcdir/Xafter')",
          "1070:   let cmd = GetVimProg() . ' --not-a-term -S Xafter --cmd \"cd Xrcdir\" --cmd \"set enc=utf8 exrc secure\"'",
          "1071:   exe \"silent !\" . cmd",
          "1072:   call assert_equal([], readfile('Xrcdir/Xtestout'))",
          "1074: endfunc",
          "1076: \" Test for starting Vim with a non-terminal as input/output",
          "",
          "[Removed Lines]",
          "1067:   call mkdir('Xrcdir')",
          "1073:   call delete('Xrcdir', 'rf')",
          "",
          "[Added Lines]",
          "1053:   call mkdir('Xrcdir', 'R')",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1138:   \" Can't catch the output of gvim.",
          "1139:   CheckNotGui",
          "1142:   if RunVim([], [], '-s Xscriptin -w Xscriptout')",
          "1143:     call assert_equal([\"iVim Editor\\e:q!\\r\"], readfile('Xscriptout'))",
          "1144:     call delete('Xscriptout')",
          "",
          "[Removed Lines]",
          "1141:   call writefile([\"iVim Editor\\<Esc>:q!\\<CR>\"], 'Xscriptin', 'b')",
          "",
          "[Added Lines]",
          "1126:   call writefile([\"iVim Editor\\<Esc>:q!\\<CR>\"], 'Xscriptin', 'bD')",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1162:       call delete('Xresult')",
          "1163:     endif",
          "1164:   endfor",
          "1166: endfunc",
          "1168: \" Test for the \"-s scriptin\" argument",
          "",
          "[Removed Lines]",
          "1165:   call delete('Xscriptin')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1174:   let m = system(GetVimCommand() .. \" -s abcxyz\")",
          "1175:   call assert_equal(\"Cannot open for reading: \\\"abcxyz\\\"\\n\", m)",
          "1178:   let m = system(GetVimCommand() .. \" -s Xinput -s Xinput\")",
          "1179:   call assert_equal(\"Attempt to open script file again: \\\"-s Xinput\\\"\\n\", m)",
          "1181: endfunc",
          "1183: \" Test for the \"-n\" (no swap file) argument",
          "",
          "[Removed Lines]",
          "1177:   call writefile([], 'Xinput')",
          "1180:   call delete('Xinput')",
          "",
          "[Added Lines]",
          "1161:   call writefile([], 'Xinput', 'D')",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1252: func Test_progname()",
          "1253:   CheckUnix",
          "1256:   call writefile(['silent !date',",
          "1257:   \\               'call writefile([mode(1), '",
          "1258:   \\               .. '&insertmode, &diff, &readonly, &updatecount, '",
          "",
          "[Removed Lines]",
          "1255:   call mkdir('Xprogname', 'p')",
          "",
          "[Added Lines]",
          "1238:   call mkdir('Xprogname', 'pD')",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1324:   endfor",
          "1326:   call delete('Xprogname_after')",
          "1328: endfunc",
          "1330: \" Test for doing a write from .vimrc",
          "1331: func Test_write_in_vimrc()",
          "1333:   let after =<< trim [CODE]",
          "1334:     call assert_match('E32: ', v:errmsg)",
          "1335:     call writefile(v:errors, 'Xtestout')",
          "",
          "[Removed Lines]",
          "1327:   call delete('Xprogname', 'd')",
          "1332:   call writefile(['silent! write'], 'Xvimrc')",
          "",
          "[Added Lines]",
          "1314:   call writefile(['silent! write'], 'Xvimrc', 'D')",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1339:     call assert_equal([], readfile('Xtestout'))",
          "1340:     call delete('Xtestout')",
          "1341:   endif",
          "1343: endfunc",
          "1345: func Test_echo_true_in_cmd()",
          "",
          "[Removed Lines]",
          "1342:   call delete('Xvimrc')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1350:       call writefile(['done'], 'Xresult')",
          "1351:       quit",
          "1352:   END",
          "1354:   if RunVim([], [], '--cmd \"source Xscript\"')",
          "1355:     call assert_equal(['done'], readfile('Xresult'))",
          "1356:   endif",
          "1358:   call delete('Xresult')",
          "1359: endfunc",
          "",
          "[Removed Lines]",
          "1353:   call writefile(lines, 'Xscript')",
          "1357:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "1334:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1365:       call writefile(['done'], 'Xresult')",
          "1366:       qa!",
          "1367:   END",
          "1369:   if RunVim([], [], \"--clean -e -s --cmd 'file x|new|file x' --cmd 'so Xscript'\")",
          "1370:     call assert_equal(['done'], readfile('Xresult'))",
          "1371:   endif",
          "1373:   call delete('Xresult')",
          "1374: endfunc",
          "",
          "[Removed Lines]",
          "1368:   call writefile(lines, 'Xscript')",
          "1372:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "1349:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_startup_utf8.vim||src/testdir/test_startup_utf8.vim": [
          "File: src/testdir/test_startup_utf8.vim -> src/testdir/test_startup_utf8.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: func Test_read_stdin_utf8()",
          "8:   let linesin = ['\u30c6\u30b9\u30c8', '\u20ac\u00c0\u00c8\u00cc\u00d2\u00d9']",
          "10:   let before = [",
          "11:  \\ 'set enc=utf-8',",
          "12:  \\ 'set fencs=cp932,utf-8',",
          "",
          "[Removed Lines]",
          "9:   call writefile(linesin, 'Xtestin')",
          "",
          "[Added Lines]",
          "9:   call writefile(linesin, 'Xtestin', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:   else",
          "27:     call assert_equal('', 'RunVimPiped failed.')",
          "28:   endif",
          "29:   call delete('Xtestout')",
          "31: endfunc",
          "33: func Test_read_fifo_utf8()",
          "",
          "[Removed Lines]",
          "30:   call delete('Xtestin')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     throw 'Skipped: bash or zsh is required'",
          "42:   endif",
          "43:   let linesin = ['\u30c6\u30b9\u30c8', '\u20ac\u00c0\u00c8\u00cc\u00d2\u00d9']",
          "45:   let before = [",
          "46:  \\ 'set enc=utf-8',",
          "47:  \\ 'set fencs=cp932,utf-8',",
          "",
          "[Removed Lines]",
          "44:   call writefile(linesin, 'Xtestin')",
          "",
          "[Added Lines]",
          "44:   call writefile(linesin, 'Xtestin', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "56:   else",
          "57:     call assert_equal('', 'RunVim failed.')",
          "58:   endif",
          "59:   call delete('Xtestout')",
          "61: endfunc",
          "63: func Test_detect_ambiwidth()",
          "",
          "[Removed Lines]",
          "60:   call delete('Xtestin')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "69:  \\ 'set ambiwidth=double',",
          "70:  \\ 'call test_option_not_set(\"ambiwidth\")',",
          "71:  \\ 'redraw',",
          "73:   let buf = RunVimInTerminal('-S Xscript', #{keep_t_u7: 1})",
          "74:   call TermWait(buf)",
          "75:   call term_sendkeys(buf, \"S\\<C-R>=&ambiwidth\\<CR>\\<Esc>\")",
          "76:   call WaitForAssert({-> assert_match('single', term_getline(buf, 1))})",
          "78:   call StopVimInTerminal(buf)",
          "80: endfunc",
          "82: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "72:  \\ ], 'Xscript')",
          "79:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "72:  \\ ], 'Xscript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_stat.vim||src/testdir/test_stat.vim": [
          "File: src/testdir/test_stat.vim -> src/testdir/test_stat.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   let fname = 'Xtest.tmp'",
          "65:   let fl = ['Hello World!']",
          "67:   set autoread",
          "68:   exec 'e' fname",
          "69:   call SleepForTimestamp()",
          "",
          "[Removed Lines]",
          "66:   call writefile(fl, fname)",
          "",
          "[Added Lines]",
          "66:   call writefile(fl, fname, 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   call writefile(fl, fname)",
          "73:   checktime",
          "74:   call assert_equal(fl[0], getline(1))",
          "77: endfunc",
          "79: func Test_checktime_fast()",
          "",
          "[Removed Lines]",
          "76:   call delete(fname)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:   let fname = 'Xtest.tmp'",
          "84:   let fl = ['Hello World!']",
          "86:   set autoread",
          "87:   exec 'e' fname",
          "88:   let fl = readfile(fname)",
          "",
          "[Removed Lines]",
          "85:   call writefile(fl, fname)",
          "",
          "[Added Lines]",
          "83:   call writefile(fl, fname, 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:   call writefile(fl, fname)",
          "91:   checktime",
          "92:   call assert_equal(fl[0], getline(1))",
          "95: endfunc",
          "97: func Test_autoread_fast()",
          "",
          "[Removed Lines]",
          "94:   call delete(fname)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "105:   call setline(1, 'foo')",
          "106:   w!",
          "107:   sleep 10m",
          "109:   sleep 10m",
          "110:   checktime",
          "111:   call assert_equal('bar', trim(getline(1)))",
          "114: endfunc",
          "116: func Test_autoread_file_deleted()",
          "",
          "[Removed Lines]",
          "108:   call writefile(['bar'], 'Xautoread')",
          "113:   call delete('Xautoread')",
          "",
          "[Added Lines]",
          "104:   call writefile(['bar'], 'Xautoread', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_statusline.vim||src/testdir/test_statusline.vim": [
          "File: src/testdir/test_statusline.vim -> src/testdir/test_statusline.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "470:     set laststatus=2",
          "471:     let &statusline = '%#StatColorHi2#%(\u2713%#StatColorHi2#%) Q\u2261'",
          "472:   END",
          "475:   let buf = RunVimInTerminal('-S XTest_statusline', {'rows': 10, 'cols': 50})",
          "476:   call VerifyScreenDump(buf, 'Test_statusline_1', {})",
          "478:   \" clean up",
          "479:   call StopVimInTerminal(buf)",
          "481: endfunc",
          "483: func Test_statusline_using_mode()",
          "",
          "[Removed Lines]",
          "473:   call writefile(lines, 'XTest_statusline')",
          "480:   call delete('XTest_statusline')",
          "",
          "[Added Lines]",
          "473:   call writefile(lines, 'XTest_statusline', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "488:     split",
          "489:     setlocal statusline=+%{mode()}+",
          "490:   END",
          "493:   let buf = RunVimInTerminal('-S XTest_statusline', {'rows': 7, 'cols': 50})",
          "494:   call VerifyScreenDump(buf, 'Test_statusline_mode_1', {})",
          "",
          "[Removed Lines]",
          "491:   call writefile(lines, 'XTest_statusline')",
          "",
          "[Added Lines]",
          "490:   call writefile(lines, 'XTest_statusline', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "499:   \" clean up",
          "500:   call term_sendkeys(buf, \"close\\<CR>\")",
          "501:   call StopVimInTerminal(buf)",
          "503: endfunc",
          "505: func Test_statusline_after_split_vsplit()",
          "",
          "[Removed Lines]",
          "502:   call delete('XTest_statusline')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "552:     hi! link User2 ErrorMsg",
          "553:     set statusline=%.5(%1*ABC%2*DEF%1*GHI%)",
          "554:   END",
          "557:   let buf = RunVimInTerminal('-S XTest_statusline', {'rows': 6})",
          "558:   call VerifyScreenDump(buf, 'Test_statusline_hl', {})",
          "560:   call StopVimInTerminal(buf)",
          "562: endfunc",
          "564: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "555:   call writefile(lines, 'XTest_statusline')",
          "561:   call delete('XTest_statusline')",
          "",
          "[Added Lines]",
          "553:   call writefile(lines, 'XTest_statusline', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim": [
          "File: src/testdir/test_substitute.vim -> src/testdir/test_substitute.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "860:     call writefile(v:errors, 'Xresult')",
          "861:     qall!",
          "862:   [SCRIPT]",
          "864:   if RunVim([], [], '--clean -S Xscript')",
          "865:     call assert_equal([], readfile('Xresult'))",
          "866:   endif",
          "",
          "[Removed Lines]",
          "863:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "863:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "876:     call assert_equal([], readfile('Xresult'))",
          "877:   endif",
          "880:   call delete('Xresult')",
          "881: endfunc",
          "",
          "[Removed Lines]",
          "879:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1075:     redir END",
          "1076:     qall!",
          "1077:   [SCRIPT]",
          "1079:   if RunVim([], [], '-u NONE -S Xscript')",
          "1080:     call assert_match('E565: Not allowed to change text or change window',",
          "1081:           \\ readfile('Xresult')->join('XX'))",
          "1082:   endif",
          "1085:   call delete('Xresult')",
          "1086: endfunc",
          "",
          "[Removed Lines]",
          "1078:   call writefile(lines, 'Xscript')",
          "1084:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "1077:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_swap.vim||src/testdir/test_swap.vim": [
          "File: src/testdir/test_swap.vim -> src/testdir/test_swap.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:        \\ 'line 2 Abcdefghij',",
          "17:        \\ 'line 3 Abcdefghij',",
          "18:        \\ 'end of testfile']",
          "21:   \"  '.', swap file in the same directory as file",
          "22:   set dir=.,~",
          "",
          "[Removed Lines]",
          "19:   call writefile(content, 'Xtest1')",
          "",
          "[Added Lines]",
          "19:   call writefile(content, 'Xtest1', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   \" './dir', swap file in a directory relative to the file",
          "31:   set dir=./Xtest2,.,~",
          "34:   edit Xtest1",
          "35:   call assert_equal([], glob(swfname, 1, 1, 1))",
          "36:   let swfname = \"Xtest2/Xtest1.swp\"",
          "",
          "[Removed Lines]",
          "33:   call mkdir(\"Xtest2\")",
          "",
          "[Added Lines]",
          "33:   call mkdir(\"Xtest2\", 'R')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:   \" 'dir', swap file in directory relative to the current dir",
          "41:   set dir=Xtest.je,~",
          "44:   call writefile(content, 'Xtest2/Xtest3')",
          "45:   edit Xtest2/Xtest3",
          "46:   call assert_equal([\"Xtest2/Xtest3\"], glob(\"Xtest2/*\", 1, 1, 1))",
          "",
          "[Removed Lines]",
          "43:   call mkdir(\"Xtest.je\")",
          "",
          "[Added Lines]",
          "43:   call mkdir(\"Xtest.je\", 'R')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "49:   call assert_equal([swfname], glob(\"Xtest.je/*\", 1, 1, 1))",
          "51:   set dir&",
          "55: endfunc",
          "57: func Test_swap_group()",
          "",
          "[Removed Lines]",
          "52:   call delete(\"Xtest1\")",
          "53:   call delete(\"Xtest2\", \"rf\")",
          "54:   call delete(\"Xtest.je\", \"rf\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:   let info = swapinfo('doesnotexist')",
          "136:   call assert_equal('Cannot open file', info.error)",
          "139:   let info = swapinfo('Xnotaswapfile')",
          "140:   call assert_equal('Cannot read file', info.error)",
          "141:   call delete('Xnotaswapfile')",
          "",
          "[Removed Lines]",
          "138:   call writefile(['burp'], 'Xnotaswapfile')",
          "",
          "[Added Lines]",
          "135:   call writefile(['burp'], 'Xnotaswapfile', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "143:   call writefile([repeat('x', 10000)], 'Xnotaswapfile')",
          "144:   let info = swapinfo('Xnotaswapfile')",
          "145:   call assert_equal('Not a swap file', info.error)",
          "147: endfunc",
          "149: func Test_swapname()",
          "",
          "[Removed Lines]",
          "146:   call delete('Xnotaswapfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "191:   \" Close the file and recreate the swap file.",
          "192:   \" Now editing the file will run into the process still existing",
          "193:   quit",
          "195:   let s:swap_choice = 'e'",
          "196:   let s:swapname = ''",
          "197:   split XswapfileText",
          "",
          "[Removed Lines]",
          "194:   call writefile(swapfile_bytes, swapfile_name)",
          "",
          "[Added Lines]",
          "190:   call writefile(swapfile_bytes, swapfile_name, 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "219:   call assert_equal(fnamemodify(swapfile_name, ':t'), fnamemodify(s:swapname, ':t'))",
          "221:   call delete('XswapfileText')",
          "223:   augroup test_swapfile_delete",
          "224:     autocmd!",
          "225:   augroup END",
          "",
          "[Removed Lines]",
          "222:   call delete(swapfile_name)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "233:     autocmd SwapExists * let v:swapchoice = 'r'",
          "234:   augroup END",
          "237:   let $Xswap = 'foo'  \" Check for issue #4369.",
          "238:   set dir=Xswap//",
          "239:   \" Create a valid swapfile by editing a file.",
          "",
          "[Removed Lines]",
          "236:   call mkdir('Xswap')",
          "",
          "[Added Lines]",
          "231:   call mkdir('Xswap', 'R')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "247:   \" Close the file and recreate the swap file.",
          "248:   quit",
          "250:   \" Edit the file again. This triggers recovery.",
          "251:   try",
          "252:     split Xswap/text",
          "",
          "[Removed Lines]",
          "249:   call writefile(swapfile_bytes, swapfile_name)",
          "",
          "[Added Lines]",
          "244:   call writefile(swapfile_bytes, swapfile_name, 'D')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "258:   call assert_equal(['one', 'two', 'three'], getline(1, 3))",
          "259:   quit!",
          "264:   unlet $Xswap",
          "265:   set dir&",
          "266:   augroup test_swap_recover",
          "",
          "[Removed Lines]",
          "261:   call delete('Xswap/text')",
          "262:   call delete(swapfile_name)",
          "263:   call delete('Xswap', 'd')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "288:   \" Close and delete the file and recreate the swap file.",
          "289:   quit",
          "290:   call delete('Xtest.scr')",
          "292:   \" Edit the file again. This triggers recovery.",
          "293:   try",
          "294:     split Xtest.scr",
          "",
          "[Removed Lines]",
          "291:   call writefile(swapfile_bytes, swapfile_name)",
          "",
          "[Added Lines]",
          "283:   call writefile(swapfile_bytes, swapfile_name, 'D')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "301:   quit!",
          "303:   call delete('Xtest.scr')",
          "305:   augroup test_swap_recover_ext",
          "306:     autocmd!",
          "307:   augroup END",
          "",
          "[Removed Lines]",
          "304:   call delete(swapfile_name)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "329:   \" Close and delete the file and recreate the swap file.",
          "330:   quit",
          "331:   call delete('Xtest.scr')",
          "333:   \" Split edit the file again. This should fail to open the window",
          "334:   try",
          "335:     split Xtest.scr",
          "",
          "[Removed Lines]",
          "332:   call writefile(swapfile_bytes, swapfile_name)",
          "",
          "[Added Lines]",
          "323:   call writefile(swapfile_bytes, swapfile_name, 'D')",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "340:   call assert_equal(1, winnr('$'))",
          "342:   call delete('Xtest.scr')",
          "345:   augroup test_swap_splitwin",
          "346:       autocmd!",
          "",
          "[Removed Lines]",
          "343:   call delete(swapfile_name)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "352: func Test_swap_prompt_splitwin()",
          "353:   CheckRunVimInTerminal",
          "356:   edit Xfile1",
          "357:   preserve  \" should help to make sure the swap file exists",
          "",
          "[Removed Lines]",
          "355:   call writefile(['foo bar'], 'Xfile1')",
          "",
          "[Added Lines]",
          "345:   call writefile(['foo bar'], 'Xfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "387:   call StopVimInTerminal(buf)",
          "389:   %bwipe!",
          "391: endfunc",
          "393: func Test_swap_symlink()",
          "394:   CheckUnix",
          "397:   silent !ln -s -f Xtestfile Xtestlink",
          "399:   set dir=.",
          "",
          "[Removed Lines]",
          "390:   call delete('Xfile1')",
          "396:   call writefile(['text'], 'Xtestfile')",
          "",
          "[Added Lines]",
          "385:   call writefile(['text'], 'Xtestfile', 'D')",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "404:   call assert_match('Xtestfile\\.swp$', s:swapname())",
          "405:   bwipe!",
          "408:   exe 'set dir=' . getcwd() . '/Xswapdir//'",
          "410:   \" Check that this also works when 'directory' ends with '//'",
          "",
          "[Removed Lines]",
          "407:   call mkdir('Xswapdir')",
          "",
          "[Added Lines]",
          "396:   call mkdir('Xswapdir', 'R')",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "413:   bwipe!",
          "415:   set dir&",
          "417:   call delete('Xtestlink')",
          "419: endfunc",
          "421: func s:get_unused_pid(base)",
          "",
          "[Removed Lines]",
          "416:   call delete('Xtestfile')",
          "418:   call delete('Xswapdir', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "467:   \" Change the process ID to avoid the \"still running\" warning.",
          "468:   let swapfile_bytes[24:27] = s:pid_to_blob(s:get_unused_pid(",
          "469:         \\ s:blob_to_pid(swapfile_bytes[24:27])))",
          "471:   edit Xtest.scr",
          "472:   \" will end up using the same swap file after deleting the existing one",
          "473:   call assert_equal(swapfile_name, swapname('%'))",
          "",
          "[Removed Lines]",
          "470:   call writefile(swapfile_bytes, swapfile_name)",
          "",
          "[Added Lines]",
          "457:   call writefile(swapfile_bytes, swapfile_name, 'D')",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "491:   bwipe!",
          "493:   call delete('Xtest.scr')",
          "495:   augroup test_swap_recover_ext",
          "496:     autocmd!",
          "497:   augroup END",
          "",
          "[Removed Lines]",
          "494:   call delete(swapfile_name)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "521: \" Test for the v:swapchoice variable",
          "522: func Test_swapchoice()",
          "524:   edit Xfile5",
          "525:   preserve",
          "526:   let swapfname = swapname('')",
          "527:   let b = readblob(swapfname)",
          "528:   bw!",
          "531:   autocmd! SwapExists",
          "",
          "[Removed Lines]",
          "523:   call writefile(['aaa', 'bbb'], 'Xfile5')",
          "529:   call writefile(b, swapfname)",
          "",
          "[Added Lines]",
          "509:   call writefile(['aaa', 'bbb'], 'Xfile5', 'D')",
          "515:   call writefile(b, swapfname, 'D')",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "565:   %bw!",
          "566:   call assert_false(filereadable(swapfname))",
          "569:   call delete(swapfname)",
          "570:   augroup test_swapchoice",
          "571:     autocmd!",
          "",
          "[Removed Lines]",
          "568:   call delete('Xfile5')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_syntax.vim||src/testdir/test_syntax.vim": [
          "File: src/testdir/test_syntax.vim -> src/testdir/test_syntax.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "652:  \\ \"\\t}\",",
          "653:  \\ \"\\tNote: asdf\",",
          "654:  \\ '}',",
          "657:   \" This makes the default for 'background' use \"dark\", check that the",
          "658:   \" response to t_RB corrects it to \"light\".",
          "",
          "[Removed Lines]",
          "655:  \\ ], 'Xtest.c')",
          "",
          "[Added Lines]",
          "655:  \\ ], 'Xtest.c', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670:   call StopVimInTerminal(buf)",
          "672:   let $COLORFGBG = ''",
          "674: endfun",
          "676: \" Test \\z(...) along with \\z1",
          "",
          "[Removed Lines]",
          "673:   call delete('Xtest.c')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "704: endfunc",
          "706: func Test_syntax_after_bufdo()",
          "712:   let bnr = bufnr('%')",
          "713:   new Xaaa.c",
          "",
          "[Removed Lines]",
          "707:   call writefile(['/* aaa comment */'], 'Xaaa.c')",
          "708:   call writefile(['/* bbb comment */'], 'Xbbb.c')",
          "709:   call writefile(['/* ccc comment */'], 'Xccc.c')",
          "710:   call writefile(['/* ddd comment */'], 'Xddd.c')",
          "",
          "[Added Lines]",
          "706:   call writefile(['/* aaa comment */'], 'Xaaa.c', 'D')",
          "707:   call writefile(['/* bbb comment */'], 'Xbbb.c', 'D')",
          "708:   call writefile(['/* ccc comment */'], 'Xccc.c', 'D')",
          "709:   call writefile(['/* ddd comment */'], 'Xddd.c', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "735:   bwipe! Xccc.c",
          "736:   bwipe! Xddd.c",
          "737:   syntax off",
          "742: endfunc",
          "744: func Test_syntax_foldlevel()",
          "",
          "[Removed Lines]",
          "738:   call delete('Xaaa.c')",
          "739:   call delete('Xbbb.c')",
          "740:   call delete('Xccc.c')",
          "741:   call delete('Xddd.c')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_system.vim||src/testdir/test_system.vim": [
          "File: src/testdir/test_system.vim -> src/testdir/test_system.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     let cmd = ' -es -c \"source Xscript\" +q; echo \"result=$?\"'",
          "56:     \" Need to put this in a script, \"catch\" isn't found after an unknown",
          "57:     \" function.",
          "59:     let a = system(GetVimCommand() . cmd)",
          "60:     call assert_match('result=0', a)",
          "61:     call assert_equal(0, v:shell_error)",
          "",
          "[Removed Lines]",
          "58:     call writefile(['try', 'call doesnotexist()', 'catch', 'endtry'], 'Xscript')",
          "",
          "[Added Lines]",
          "58:     call writefile(['try', 'call doesnotexist()', 'catch', 'endtry'], 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   let cmd = ' -es -c \"source Xscript\" +q'",
          "72:   let a = system(GetVimCommand() . cmd)",
          "73:   call assert_notequal(0, v:shell_error)",
          "76:   if has('unix') \" echo $? only works on Unix",
          "77:     let cmd = ' -es -c \"call doesnotexist()\" +q; echo $?'",
          "",
          "[Removed Lines]",
          "74:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     718,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     719,",
          "",
          "---------------"
        ]
      }
    }
  ]
}