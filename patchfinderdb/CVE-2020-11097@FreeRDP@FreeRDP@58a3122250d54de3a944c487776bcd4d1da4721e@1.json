{
  "cve_id": "CVE-2020-11097",
  "cve_desc": "In FreeRDP before version 2.1.2, an out of bounds read occurs resulting in accessing a memory location that is outside of the boundaries of the static array PRIMARY_DRAWING_ORDER_FIELD_BYTES. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "58a3122250d54de3a944c487776bcd4d1da4721e",
  "patch_info": {
    "commit_hash": "58a3122250d54de3a944c487776bcd4d1da4721e",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/58a3122250d54de3a944c487776bcd4d1da4721e",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c"
    ],
    "message": "Fixed OOB read in ntlm_av_pair_get\n\nCVE-2020-11097 thanks to @antonio-morales for finding this.",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c -> winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: #include \"../../log.h\"",
      "40: #define TAG WINPR_TAG(\"sspi.NTLM\")",
      "49: static NTLM_AV_PAIR* ntlm_av_pair_next(NTLM_AV_PAIR* pAvPairList, size_t* pcbAvPairList);",
      "51: static INLINE void ntlm_av_pair_set_id(NTLM_AV_PAIR* pAvPair, UINT16 id)",
      "",
      "[Removed Lines]",
      "42: static const char* const AV_PAIR_STRINGS[] = {",
      "43:  \"MsvAvEOL\",           \"MsvAvNbComputerName\", \"MsvAvNbDomainName\", \"MsvAvDnsComputerName\",",
      "44:  \"MsvAvDnsDomainName\", \"MsvAvDnsTreeName\",    \"MsvAvFlags\",        \"MsvAvTimestamp\",",
      "45:  \"MsvAvRestrictions\",  \"MsvAvTargetName\",     \"MsvChannelBindings\"",
      "46: };",
      "48: static BOOL ntlm_av_pair_check(NTLM_AV_PAIR* pAvPair, size_t cbAvPair);",
      "",
      "[Added Lines]",
      "42: static BOOL ntlm_av_pair_get_next_offset(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pOffset);",
      "44: static BOOL ntlm_av_pair_check_data(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair, size_t size)",
      "45: {",
      "46:  size_t offset;",
      "47:  if (!pAvPair || cbAvPair < sizeof(NTLM_AV_PAIR) + size)",
      "48:   return FALSE;",
      "49:  if (!ntlm_av_pair_get_next_offset(pAvPair, cbAvPair, &offset))",
      "50:   return FALSE;",
      "51:  return cbAvPair >= offset;",
      "52: }",
      "54: static const char* get_av_pair_string(UINT16 pair)",
      "55: {",
      "56:  switch (pair)",
      "57:  {",
      "58:   case MsvAvEOL:",
      "59:    return \"MsvAvEOL\";",
      "60:   case MsvAvNbComputerName:",
      "61:    return \"MsvAvNbComputerName\";",
      "62:   case MsvAvNbDomainName:",
      "63:    return \"MsvAvNbDomainName\";",
      "64:   case MsvAvDnsComputerName:",
      "65:    return \"MsvAvDnsComputerName\";",
      "66:   case MsvAvDnsDomainName:",
      "67:    return \"MsvAvDnsDomainName\";",
      "68:   case MsvAvDnsTreeName:",
      "69:    return \"MsvAvDnsTreeName\";",
      "70:   case MsvAvFlags:",
      "71:    return \"MsvAvFlags\";",
      "72:   case MsvAvTimestamp:",
      "73:    return \"MsvAvTimestamp\";",
      "74:   case MsvAvSingleHost:",
      "75:    return \"MsvAvSingleHost\";",
      "76:   case MsvAvTargetName:",
      "77:    return \"MsvAvTargetName\";",
      "78:   case MsvChannelBindings:",
      "79:    return \"MsvChannelBindings\";",
      "80:   default:",
      "81:    return \"UNKNOWN\";",
      "82:  }",
      "83: }",
      "85: static BOOL ntlm_av_pair_check(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "70:  return TRUE;",
      "71: }",
      "74: {",
      "75:  UINT16 AvId;",
      "77:  Data_Read_UINT16(&pAvPair->AvId, AvId);",
      "80: }",
      "82: ULONG ntlm_av_pair_list_length(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)",
      "",
      "[Removed Lines]",
      "73: static INLINE UINT16 ntlm_av_pair_get_id(const NTLM_AV_PAIR* pAvPair)",
      "79:  return AvId;",
      "",
      "[Added Lines]",
      "110: static INLINE BOOL ntlm_av_pair_get_id(const NTLM_AV_PAIR* pAvPair, size_t size, UINT16* pair)",
      "113:  if (!pAvPair || !pair)",
      "114:   return FALSE;",
      "116:  if (size < sizeof(NTLM_AV_PAIR))",
      "117:   return FALSE;",
      "122:  return TRUE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:  return ((PBYTE)pAvPair - (PBYTE)pAvPairList) + sizeof(NTLM_AV_PAIR);",
      "92: }",
      "95: {",
      "96:  UINT16 AvLen;",
      "98:  Data_Read_UINT16(&pAvPair->AvLen, AvLen);",
      "101: }",
      "103: void ntlm_print_av_pair_list(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)",
      "104: {",
      "105:  size_t cbAvPair = cbAvPairList;",
      "106:  NTLM_AV_PAIR* pAvPair = pAvPairList;",
      "",
      "[Removed Lines]",
      "94: static INLINE SIZE_T ntlm_av_pair_get_len(const NTLM_AV_PAIR* pAvPair)",
      "100:  return AvLen;",
      "",
      "[Added Lines]",
      "137: static INLINE BOOL ntlm_av_pair_get_len(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pAvLen)",
      "140:  if (!pAvPair)",
      "141:   return FALSE;",
      "143:  if (size < sizeof(NTLM_AV_PAIR))",
      "144:   return FALSE;",
      "149:  return TRUE;",
      "154:  UINT16 pair;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "111:  WLog_INFO(TAG, \"AV_PAIRs =\");",
      "114:  {",
      "121:   pAvPair = ntlm_av_pair_next(pAvPair, &cbAvPair);",
      "122:  }",
      "",
      "[Removed Lines]",
      "113:  while (pAvPair && ntlm_av_pair_get_id(pAvPair) != MsvAvEOL)",
      "115:   WLog_INFO(TAG, \"\\t%s AvId: %\" PRIu16 \" AvLen: %\" PRIu16 \"\",",
      "116:             AV_PAIR_STRINGS[ntlm_av_pair_get_id(pAvPair)], ntlm_av_pair_get_id(pAvPair),",
      "117:             ntlm_av_pair_get_len(pAvPair));",
      "118:   winpr_HexDump(TAG, WLOG_INFO, ntlm_av_pair_get_value_pointer(pAvPair),",
      "119:                 ntlm_av_pair_get_len(pAvPair));",
      "",
      "[Added Lines]",
      "163:  while (pAvPair && ntlm_av_pair_get_id(pAvPair, cbAvPair, &pair) && (pair != MsvAvEOL))",
      "165:   size_t cbLen = 0;",
      "166:   ntlm_av_pair_get_len(pAvPair, cbAvPair, &cbLen);",
      "168:   WLog_INFO(TAG, \"\\t%s AvId: %\" PRIu16 \" AvLen: %\" PRIu16 \"\", get_av_pair_string(pair), pair);",
      "169:   winpr_HexDump(TAG, WLOG_INFO, ntlm_av_pair_get_value_pointer(pAvPair), cbLen);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "133:  return (PBYTE)pAvPair + sizeof(NTLM_AV_PAIR);",
      "134: }",
      "137: {",
      "139: }",
      "142: {",
      "146: }",
      "148: static NTLM_AV_PAIR* ntlm_av_pair_next(NTLM_AV_PAIR* pAvPair, size_t* pcbAvPair)",
      "",
      "[Removed Lines]",
      "136: static size_t ntlm_av_pair_get_next_offset(NTLM_AV_PAIR* pAvPair)",
      "138:  return ntlm_av_pair_get_len(pAvPair) + sizeof(NTLM_AV_PAIR);",
      "141: static BOOL ntlm_av_pair_check(NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
      "143:  if (!pAvPair || cbAvPair < sizeof(NTLM_AV_PAIR))",
      "144:   return FALSE;",
      "145:  return cbAvPair >= ntlm_av_pair_get_next_offset(pAvPair);",
      "",
      "[Added Lines]",
      "186: static BOOL ntlm_av_pair_get_next_offset(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pOffset)",
      "188:  size_t avLen;",
      "189:  if (!pOffset)",
      "190:   return FALSE;",
      "192:  if (!ntlm_av_pair_get_len(pAvPair, size, &avLen))",
      "193:   return FALSE;",
      "195:  return TRUE;",
      "198: static BOOL ntlm_av_pair_check(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
      "200:  return ntlm_av_pair_check_data(pAvPair, cbAvPair, 0);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "154:  if (!ntlm_av_pair_check(pAvPair, *pcbAvPair))",
      "155:   return NULL;",
      "159:  return (NTLM_AV_PAIR*)((PBYTE)pAvPair + offset);",
      "160: }",
      "",
      "[Removed Lines]",
      "157:  offset = ntlm_av_pair_get_next_offset(pAvPair);",
      "",
      "[Added Lines]",
      "212:  if (!ntlm_av_pair_get_next_offset(pAvPair, *pcbAvPair, &offset))",
      "213:   return NULL;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "162: NTLM_AV_PAIR* ntlm_av_pair_get(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList, NTLM_AV_ID AvId,",
      "163:                                size_t* pcbAvPairListRemaining)",
      "164: {",
      "165:  size_t cbAvPair = cbAvPairList;",
      "166:  NTLM_AV_PAIR* pAvPair = pAvPairList;",
      "168:  if (!ntlm_av_pair_check(pAvPair, cbAvPair))",
      "169:   pAvPair = NULL;",
      "172:  {",
      "175:   if (id == AvId)",
      "176:    break;",
      "177:   if (id == MsvAvEOL)",
      "",
      "[Removed Lines]",
      "171:  while (pAvPair)",
      "173:   UINT16 id = ntlm_av_pair_get_id(pAvPair);",
      "",
      "[Added Lines]",
      "222:  UINT16 id;",
      "229:  while (pAvPair && ntlm_av_pair_get_id(pAvPair, cbAvPair, &id))",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "218: static BOOL ntlm_av_pair_add_copy(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList,",
      "219:                                   NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
      "220: {",
      "221:  if (!ntlm_av_pair_check(pAvPair, cbAvPair))",
      "222:   return FALSE;",
      "226: }",
      "228: static int ntlm_get_target_computer_name(PUNICODE_STRING pName, COMPUTER_NAME_FORMAT type)",
      "",
      "[Removed Lines]",
      "224:  return ntlm_av_pair_add(pAvPairList, cbAvPairList, ntlm_av_pair_get_id(pAvPair),",
      "225:                          ntlm_av_pair_get_value_pointer(pAvPair), ntlm_av_pair_get_len(pAvPair));",
      "",
      "[Added Lines]",
      "277:  UINT16 pair;",
      "278:  size_t avLen;",
      "283:  if (!ntlm_av_pair_get_id(pAvPair, cbAvPair, &pair))",
      "284:   return FALSE;",
      "286:  if (!ntlm_av_pair_get_len(pAvPair, cbAvPair, &avLen))",
      "287:   return FALSE;",
      "289:  return ntlm_av_pair_add(pAvPairList, cbAvPairList, pair,",
      "290:                          ntlm_av_pair_get_value_pointer(pAvPair), avLen);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "501:  if (AvNbDomainName)",
      "502:  {",
      "505:  }",
      "507:  if (AvNbComputerName)",
      "508:  {",
      "511:  }",
      "513:  if (AvDnsDomainName)",
      "514:  {",
      "517:  }",
      "519:  if (AvDnsComputerName)",
      "520:  {",
      "523:  }",
      "525:  if (AvDnsTreeName)",
      "526:  {",
      "529:  }",
      "",
      "[Removed Lines]",
      "504:   AvPairsValueLength += ntlm_av_pair_get_len(AvNbDomainName);",
      "510:   AvPairsValueLength += ntlm_av_pair_get_len(AvNbComputerName);",
      "516:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsDomainName);",
      "522:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsComputerName);",
      "528:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsTreeName);",
      "",
      "[Added Lines]",
      "568:   size_t avLen;",
      "569:   if (!ntlm_av_pair_get_len(AvNbDomainName, cbAvNbDomainName, &avLen))",
      "570:    goto fail;",
      "572:   AvPairsValueLength += avLen;",
      "577:   size_t avLen;",
      "578:   if (!ntlm_av_pair_get_len(AvNbComputerName, cbAvNbComputerName, &avLen))",
      "579:    goto fail;",
      "581:   AvPairsValueLength += avLen;",
      "586:   size_t avLen;",
      "587:   if (!ntlm_av_pair_get_len(AvDnsDomainName, cbAvDnsDomainName, &avLen))",
      "588:    goto fail;",
      "590:   AvPairsValueLength += avLen;",
      "595:   size_t avLen;",
      "596:   if (!ntlm_av_pair_get_len(AvDnsComputerName, cbAvDnsComputerName, &avLen))",
      "597:    goto fail;",
      "599:   AvPairsValueLength += avLen;",
      "604:   size_t avLen;",
      "605:   if (!ntlm_av_pair_get_len(AvDnsTreeName, cbAvDnsTreeName, &avLen))",
      "606:    goto fail;",
      "608:   AvPairsValueLength += avLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "36478d3d0b3d7fa378a875f60170a08e94747226",
      "candidate_info": {
        "commit_hash": "36478d3d0b3d7fa378a875f60170a08e94747226",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/36478d3d0b3d7fa378a875f60170a08e94747226",
        "files": [
          "channels/rdpdr/client/rdpdr_main.c",
          "client/X11/xf_client.c",
          "winpr/libwinpr/sspicli/sspicli.c"
        ],
        "message": "Replaced getlogin with getlogin_r",
        "before_after_code_files": [
          "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c",
          "client/X11/xf_client.c||client/X11/xf_client.c",
          "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c": [
          "File: channels/rdpdr/client/rdpdr_main.c -> channels/rdpdr/client/rdpdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:  size_t x;",
          "599:  char buffer[MAX_PATH];",
          "600:  uid_t uid = getuid();",
          "603:  if (!path)",
          "604:   return FALSE;",
          "",
          "[Removed Lines]",
          "601:  const char* uname = getlogin();",
          "",
          "[Added Lines]",
          "601:  const char uname[MAX_PATH] = { 0 };",
          "603:  if (getlogin_r(uname, sizeof(uname)) != 0)",
          "604:   return FALSE;",
          "",
          "---------------"
        ],
        "client/X11/xf_client.c||client/X11/xf_client.c": [
          "File: client/X11/xf_client.c -> client/X11/xf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1182:  if (!settings->Username && !settings->CredentialsFromStdin && !settings->SmartcardLogon)",
          "1183:  {",
          "1187:   {",
          "1188:    settings->Username = _strdup(login_name);",
          "",
          "[Removed Lines]",
          "1184:   char* login_name = getlogin();",
          "1186:   if (login_name)",
          "",
          "[Added Lines]",
          "1184:   char login_name[MAX_PATH] = { 0 };",
          "1186:   if (getlogin_r(login_name, sizeof(login_name)) == 0)",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c": [
          "File: winpr/libwinpr/sspicli/sspicli.c -> winpr/libwinpr/sspicli/sspicli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: BOOL GetUserNameExA(EXTENDED_NAME_FORMAT NameFormat, LPSTR lpNameBuffer, PULONG nSize)",
          "202: {",
          "203:  size_t length;",
          "206:  switch (NameFormat)",
          "207:  {",
          "208:   case NameSamCompatible:",
          "210:    length = strlen(login);",
          "212:    if (*nSize >= length)",
          "213:    {",
          "214:     CopyMemory(lpNameBuffer, login, length + 1);",
          "216:    }",
          "217:    else",
          "218:    {",
          "",
          "[Removed Lines]",
          "204:  char* login;",
          "209:    login = getlogin();",
          "215:     return 1;",
          "",
          "[Added Lines]",
          "204:  char login[MAX_PATH];",
          "209:    if (getlogin_r(login, sizeof(login)) != 0)",
          "210:     return FALSE;",
          "216:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:    break;",
          "236:  }",
          "239: }",
          "241: BOOL GetUserNameExW(EXTENDED_NAME_FORMAT NameFormat, LPWSTR lpNameBuffer, PULONG nSize)",
          "",
          "[Removed Lines]",
          "238:  return 0;",
          "",
          "[Added Lines]",
          "239:  return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05cd9ea2290d23931f615c1b004d4b2e69074e27",
      "candidate_info": {
        "commit_hash": "05cd9ea2290d23931f615c1b004d4b2e69074e27",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/05cd9ea2290d23931f615c1b004d4b2e69074e27",
        "files": [
          "winpr/libwinpr/utils/trio/trio.c",
          "winpr/libwinpr/utils/trio/triostr.c"
        ],
        "message": "Fixed TrioParse and trio_length limts.\n\nCVE-2020-4030 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "winpr/libwinpr/utils/trio/trio.c||winpr/libwinpr/utils/trio/trio.c",
          "winpr/libwinpr/utils/trio/triostr.c||winpr/libwinpr/utils/trio/triostr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/trio/trio.c||winpr/libwinpr/utils/trio/trio.c": [
          "File: winpr/libwinpr/utils/trio/trio.c -> winpr/libwinpr/utils/trio/trio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2729:                                              trio_class_t* self, TRIO_CONST char* string,",
          "2730:                                              trio_flags_t flags, int width, int precision)",
          "2731: {",
          "2733:  int ch;",
          "2735:  assert(VALID(self));",
          "",
          "[Removed Lines]",
          "2732:  int length;",
          "",
          "[Added Lines]",
          "2732:  int length = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2747:  }",
          "2748:  else",
          "2749:  {",
          "2751:   {",
          "2752:    length = trio_length(string);",
          "2753:   }",
          "",
          "[Removed Lines]",
          "2750:   if (precision == 0)",
          "",
          "[Added Lines]",
          "2750:   if (precision <= 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4754:   }",
          "4758:    return NULL;",
          "",
          "[Removed Lines]",
          "4757:   if (trio_length(name) >= MAX_USER_NAME)",
          "",
          "[Added Lines]",
          "4757:   if (trio_length_max(name, MAX_USER_NAME) >= MAX_USER_NAME)",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/trio/triostr.c||winpr/libwinpr/utils/trio/triostr.c": [
          "File: winpr/libwinpr/utils/trio/triostr.c -> winpr/libwinpr/utils/trio/triostr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <assert.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "28: #include <ctype.h>",
          "29: #include \"triodef.h\"",
          "30: #include \"triostr.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329: TRIO_PUBLIC_STRING size_t trio_length TRIO_ARGS1((string), TRIO_CONST char* string)",
          "330: {",
          "332: }",
          "334: #endif",
          "",
          "[Removed Lines]",
          "331:  return strlen(string);",
          "",
          "[Added Lines]",
          "332:  return trio_length_max(string, INT_MAX);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "240fdd07b123594a1f7a460de7e6877b1963d09e",
      "candidate_info": {
        "commit_hash": "240fdd07b123594a1f7a460de7e6877b1963d09e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/240fdd07b123594a1f7a460de7e6877b1963d09e",
        "files": [
          "channels/printer/client/cups/printer_cups.c",
          "channels/printer/client/win/printer_win.c",
          "winpr/libwinpr/sysinfo/sysinfo.c",
          "winpr/libwinpr/timezone/timezone.c"
        ],
        "message": "Replaced localtime with localtime_r",
        "before_after_code_files": [
          "channels/printer/client/cups/printer_cups.c||channels/printer/client/cups/printer_cups.c",
          "channels/printer/client/win/printer_win.c||channels/printer/client/win/printer_win.c",
          "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c",
          "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/printer/client/cups/printer_cups.c||channels/printer/client/cups/printer_cups.c": [
          "File: channels/printer/client/cups/printer_cups.c -> channels/printer/client/cups/printer_cups.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: static void printer_cups_get_printjob_name(char* buf, size_t size, size_t id)",
          "70: {",
          "71:  time_t tt;",
          "72:  struct tm* t;",
          "74:  tt = time(NULL);",
          "76:  sprintf_s(buf, size - 1, \"FreeRDP Print %04d-%02d-%02d %02d-%02d-%02d - Job %\" PRIdz,",
          "77:            t->tm_year + 1900, t->tm_mon + 1, t->tm_mday, t->tm_hour, t->tm_min, t->tm_sec, id);",
          "78: }",
          "",
          "[Removed Lines]",
          "75:  t = localtime(&tt);",
          "",
          "[Added Lines]",
          "72:  struct tm tres;",
          "76:  t = localtime_r(&tt, &tres);",
          "",
          "---------------"
        ],
        "channels/printer/client/win/printer_win.c||channels/printer/client/win/printer_win.c": [
          "File: channels/printer/client/win/printer_win.c -> channels/printer/client/win/printer_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: static WCHAR* printer_win_get_printjob_name(size_t id)",
          "79: {",
          "80:  time_t tt;",
          "81:  struct tm* t;",
          "82:  WCHAR* str;",
          "83:  size_t len = 1024;",
          "84:  int rc;",
          "86:  tt = time(NULL);",
          "89:  str = calloc(len, sizeof(WCHAR));",
          "90:  if (!str)",
          "",
          "[Removed Lines]",
          "87:  t = localtime(&tt);",
          "",
          "[Added Lines]",
          "81:  struct tm tres;",
          "88:  t = localtime_r(&tt, &tres);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c": [
          "File: winpr/libwinpr/sysinfo/sysinfo.c -> winpr/libwinpr/sysinfo/sysinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242: VOID GetLocalTime(LPSYSTEMTIME lpSystemTime)",
          "243: {",
          "244:  time_t ct = 0;",
          "245:  struct tm* ltm = NULL;",
          "246:  WORD wMilliseconds = 0;",
          "247:  ct = time(NULL);",
          "248:  wMilliseconds = (WORD)(GetTickCount() % 1000);",
          "250:  ZeroMemory(lpSystemTime, sizeof(SYSTEMTIME));",
          "252:  if (ltm)",
          "",
          "[Removed Lines]",
          "249:  ltm = localtime(&ct);",
          "",
          "[Added Lines]",
          "245:  struct tm tres;",
          "250:  ltm = localtime_r(&ct, &tres);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c": [
          "File: winpr/libwinpr/timezone/timezone.c -> winpr/libwinpr/timezone/timezone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: DWORD GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)",
          "340: {",
          "341:  time_t t;",
          "342:  struct tm* local_time;",
          "343:  TIME_ZONE_ENTRY* dtz;",
          "344:  LPTIME_ZONE_INFORMATION tz = lpTimeZoneInformation;",
          "345:  lpTimeZoneInformation->StandardBias = 0;",
          "346:  time(&t);",
          "348:  memset(tz, 0, sizeof(TIME_ZONE_INFORMATION));",
          "349: #ifdef HAVE_TM_GMTOFF",
          "350:  {",
          "",
          "[Removed Lines]",
          "347:  local_time = localtime(&t);",
          "",
          "[Added Lines]",
          "342:  struct tm tres;",
          "343:  ;",
          "349:  local_time = localtime_r(&t, &tres);",
          "350:  if (!local_time)",
          "351:   goto out_error;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "308c2c3544763873a5bea4d18c72c9f62e1584cb",
      "candidate_info": {
        "commit_hash": "308c2c3544763873a5bea4d18c72c9f62e1584cb",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/308c2c3544763873a5bea4d18c72c9f62e1584cb",
        "files": [
          "winpr/libwinpr/timezone/timezone.c"
        ],
        "message": "Removed duplicate semicolon",
        "before_after_code_files": [
          "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c": [
          "File: winpr/libwinpr/timezone/timezone.c -> winpr/libwinpr/timezone/timezone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340: {",
          "341:  time_t t;",
          "342:  struct tm tres;",
          "344:  struct tm* local_time;",
          "345:  TIME_ZONE_ENTRY* dtz;",
          "346:  LPTIME_ZONE_INFORMATION tz = lpTimeZoneInformation;",
          "",
          "[Removed Lines]",
          "343:  ;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
      "candidate_info": {
        "commit_hash": "6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
        "files": [
          "server/shadow/shadow_server.c"
        ],
        "message": "Fixed double free",
        "before_after_code_files": [
          "server/shadow/shadow_server.c||server/shadow/shadow_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/shadow/shadow_server.c||server/shadow/shadow_server.c": [
          "File: server/shadow/shadow_server.c -> server/shadow/shadow_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:   char** list = CommandLineParseCommaSeparatedValuesEx(NULL, server->ipcSocket, &count);",
          "587:   if (!list || (count <= 1))",
          "588:   {",
          "590:    if (server->ipcSocket == NULL)",
          "591:    {",
          "592:     if (!open_port(server, NULL))",
          "593:      return -1;",
          "594:    }",
          "595:    else",
          "596:     return -1;",
          "597:   }",
          "599:   for (x = 1; x < count; x++)",
          "",
          "[Removed Lines]",
          "589:    free(list);",
          "",
          "[Added Lines]",
          "592:     {",
          "593:      free(list);",
          "595:     }",
          "598:    {",
          "599:     free(list);",
          "601:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}