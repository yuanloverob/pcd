{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
      "candidate_info": {
        "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
        "files": [
          "include/openssl/ssl3.h",
          "ssl/record/rec_layer_s3.c",
          "ssl/record/ssl3_record.c",
          "ssl/ssl_locl.h",
          "ssl/t1_enc.c",
          "ssl/t1_lib.c"
        ],
        "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl3.h||include/openssl/ssl3.h",
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/t1_enc.c||ssl/t1_enc.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/ssl3.h||include/openssl/ssl3.h": [
          "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
          "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
          "272: # define SSL3_MT_HELLO_REQUEST                   0",
          "273: # define SSL3_MT_CLIENT_HELLO                    1",
          "274: # define SSL3_MT_SERVER_HELLO                    2",
          "",
          "[Removed Lines]",
          "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
          "",
          "[Added Lines]",
          "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
          "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
          "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
          "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
          "397:         s->compress == NULL && s->msg_callback == NULL &&",
          "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
          "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
          "401:         unsigned char aad[13];",
          "",
          "[Removed Lines]",
          "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
          "",
          "[Added Lines]",
          "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
          "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
          "797:                                          1) < 0)",
          "",
          "[Removed Lines]",
          "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
          "",
          "[Added Lines]",
          "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "814:         goto err;",
          "816:     for (j = 0; j < numpipes; j++) {",
          "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
          "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
          "820:                 goto err;",
          "",
          "[Removed Lines]",
          "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
          "",
          "[Added Lines]",
          "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:         unsigned char *mac;",
          "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
          "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
          "",
          "[Removed Lines]",
          "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
          "",
          "[Added Lines]",
          "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:     if ((sess != NULL) &&",
          "395:         (s->enc_read_ctx != NULL) &&",
          "398:         unsigned char *mac = NULL;",
          "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
          "",
          "[Removed Lines]",
          "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
          "",
          "[Added Lines]",
          "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "823:         }",
          "825:         ret = 1;",
          "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
          "828:         if ((bs != 1) && !send) {",
          "829:             int tmpret;",
          "",
          "[Removed Lines]",
          "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
          "",
          "[Added Lines]",
          "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "997:     header[11] = (rec->length) >> 8;",
          "998:     header[12] = (rec->length) & 0xff;",
          "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
          "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
          "",
          "[Removed Lines]",
          "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
          "",
          "[Added Lines]",
          "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1022:             EVP_MD_CTX_free(hmac);",
          "1023:             return -1;",
          "1024:         }",
          "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
          "1027:                                        mac_ctx, rec->input,",
          "1028:                                        rec->length, rec->orig_len)) {",
          "",
          "[Removed Lines]",
          "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
          "",
          "[Added Lines]",
          "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
          "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
          "384: # define SSL_PKEY_RSA_ENC        0",
          "",
          "[Removed Lines]",
          "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
          "",
          "[Added Lines]",
          "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
          "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1111:     unsigned char *alpn_client_proto_list;",
          "1112:     unsigned alpn_client_proto_list_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1116:     int tlsext_use_etm;",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: #endif",
          "132:     if (which & SSL3_CC_READ) {",
          "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
          "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
          "135:         else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:         if (s->tlsext_use_etm)",
          "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
          "135:         else",
          "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
          "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
          "170:     } else {",
          "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
          "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
          "173:         else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:         if (s->tlsext_use_etm)",
          "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
          "178:         else",
          "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "367:     if (s->s3->tmp.key_block_length != 0)",
          "368:         return (1);",
          "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
          "374:         return (0);",
          "375:     }",
          "",
          "[Removed Lines]",
          "370:     if (!ssl_cipher_get_evp",
          "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
          "372:          SSL_USE_ETM(s))) {",
          "",
          "[Added Lines]",
          "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
          "381:                             &comp, s->tlsext_use_etm)) {",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1674: #endif",
          "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
          "1676:         return NULL;",
          "",
          "[Removed Lines]",
          "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
          "",
          "[Added Lines]",
          "1677:     if (s->tlsext_use_etm) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
          "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
          "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
          "1687:         else {",
          "",
          "[Removed Lines]",
          "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "1686:             s->tlsext_use_etm = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
          "1918:     s->s3->tmp.peer_sigalgs = NULL;",
          "1921: #ifndef OPENSSL_NO_SRP",
          "1922:     OPENSSL_free(s->srp_ctx.login);",
          "",
          "[Removed Lines]",
          "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "1919:     s->tlsext_use_etm = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2264:         }",
          "2265: #endif",
          "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
          "",
          "[Removed Lines]",
          "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "2267:             s->tlsext_use_etm = 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
          "2367: #endif",
          "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
          "",
          "[Removed Lines]",
          "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "2369:     s->tlsext_use_etm = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
          "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
          "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
          "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
          "2591:             if (!s->hit)",
          "",
          "[Removed Lines]",
          "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "2588:                 s->tlsext_use_etm = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1142556755beae2d87c80702158fee50ad29fb48",
      "candidate_info": {
        "commit_hash": "1142556755beae2d87c80702158fee50ad29fb48",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1142556755beae2d87c80702158fee50ad29fb48",
        "files": [
          "apps/dsa.c"
        ],
        "message": "Make MSBLOB format work with dsa utility.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit b3795987477f1d478fd8bd20efb812e71b190e8b)",
        "before_after_code_files": [
          "apps/dsa.c||apps/dsa.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/dsa.c||apps/dsa.c": [
          "File: apps/dsa.c -> apps/dsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: OPTIONS dsa_options[] = {",
          "38:     {\"help\", OPT_HELP, '-', \"Display this summary\"},",
          "39:     {\"inform\", OPT_INFORM, 'f', \"Input format, DER PEM PVK\"},",
          "41:     {\"in\", OPT_IN, 's', \"Input key\"},",
          "42:     {\"out\", OPT_OUT, '>', \"Output file\"},",
          "43:     {\"noout\", OPT_NOOUT, '-', \"Don't print key out\"},",
          "",
          "[Removed Lines]",
          "40:     {\"outform\", OPT_OUTFORM, 'F', \"Output format, DER PEM PVK\"},",
          "",
          "[Added Lines]",
          "40:     {\"outform\", OPT_OUTFORM, 'f', \"Output format, DER PEM PVK\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:             infile = opt_arg();",
          "97:             break;",
          "98:         case OPT_OUTFORM:",
          "101:                 goto opthelp;",
          "102:             break;",
          "103:         case OPT_OUT:",
          "",
          "[Removed Lines]",
          "99:             if (!opt_format",
          "100:                 (opt_arg(), OPT_FMT_PEMDER | OPT_FMT_PVK, &outformat))",
          "",
          "[Added Lines]",
          "99:             if (!opt_format(opt_arg(), OPT_FMT_ANY, &outformat))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c78765f2dcc0d30bcc1ac279cc03cb388808c95",
      "candidate_info": {
        "commit_hash": "1c78765f2dcc0d30bcc1ac279cc03cb388808c95",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1c78765f2dcc0d30bcc1ac279cc03cb388808c95",
        "files": [
          "crypto/o_time.c"
        ],
        "message": "VMS: compensate for gmtime_r() parameter pointer size\n\nWith VMS C, the second parameter takes a 32-bit pointer.  When\nbuilding with 64-bit pointer size default, we must compensate.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2811)\n(cherry picked from commit 48ce800aa5a2ccee204ad3960a20c4ca14acb3a1)",
        "before_after_code_files": [
          "crypto/o_time.c||crypto/o_time.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/o_time.c||crypto/o_time.c": [
          "File: crypto/o_time.c -> crypto/o_time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: {",
          "16:     struct tm *ts = NULL;",
          "19:     if (gmtime_r(timer, result) == NULL)",
          "20:         return NULL;",
          "21:     ts = result;",
          "",
          "[Removed Lines]",
          "18: #if defined(OPENSSL_THREADS) && !defined(OPENSSL_SYS_WIN32) && !defined(OPENSSL_SYS_MACOSX)",
          "",
          "[Added Lines]",
          "18: #if defined(OPENSSL_THREADS) && defined(OPENSSL_SYS_VMS)",
          "19:     {",
          "27: #if defined(OPENSSL_SYS_VMS) && __INITIAL_POINTER_SIZE",
          "28: # pragma pointer_size save",
          "29: # pragma pointer_size 32",
          "30: #endif",
          "31:         struct tm data, *ts2 = &data;",
          "32: #if defined OPENSSL_SYS_VMS && __INITIAL_POINTER_SIZE",
          "33: # pragma pointer_size restore",
          "34: #endif",
          "35:         if (gmtime_r(timer, ts2) == NULL)",
          "36:             return NULL;",
          "37:         memcpy(result, ts2, sizeof(struct tm));",
          "38:         ts = result;",
          "39:     }",
          "40: #elif defined(OPENSSL_THREADS) && !defined(OPENSSL_SYS_WIN32) && !defined(OPENSSL_SYS_MACOSX)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da16752b4a7f75cd1db50fd6f2ef96e27918fbcd",
      "candidate_info": {
        "commit_hash": "da16752b4a7f75cd1db50fd6f2ef96e27918fbcd",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/da16752b4a7f75cd1db50fd6f2ef96e27918fbcd",
        "files": [
          "crypto/rand/randfile.c"
        ],
        "message": "updated macro spacing for styling purposes\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\nCLA: trivial\n(cherry picked from commit 6974fca49d9d0b110c02c83a7bbe01907472ac5e)",
        "before_after_code_files": [
          "crypto/rand/randfile.c||crypto/rand/randfile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rand/randfile.c||crypto/rand/randfile.c": [
          "File: crypto/rand/randfile.c -> crypto/rand/randfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:             return 1;",
          "210:         }",
          "211:     }",
          "213: #endif",
          "215: #if defined(O_CREAT) && !defined(OPENSSL_NO_POSIX_IO) && \\",
          "",
          "[Removed Lines]",
          "212: #endif",
          "",
          "[Added Lines]",
          "212: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b74b511131cf6703c82c25656bac7058d8ebe2f",
      "candidate_info": {
        "commit_hash": "4b74b511131cf6703c82c25656bac7058d8ebe2f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4b74b511131cf6703c82c25656bac7058d8ebe2f",
        "files": [
          "test/recipes/15-test_rsa.t"
        ],
        "message": "Don't run MSBLOB conversion tests when RSA or DSA are disabled\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2174)\n(cherry picked from commit d8594555ffaf98ada08b26ce3d1138f16bc029c5)",
        "before_after_code_files": [
          "test/recipes/15-test_rsa.t||test/recipes/15-test_rsa.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/15-test_rsa.t||test/recipes/15-test_rsa.t": [
          "File: test/recipes/15-test_rsa.t -> test/recipes/15-test_rsa.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:      subtest 'rsa conversions -- private key PKCS#8' => sub {",
          "35:   tconversion(\"rsa\", srctop_file(\"test\",\"testrsa.pem\"), \"pkey\");",
          "36:      };",
          "37:      subtest 'rsa conversions -- public key' => sub {",
          "38:   tconversion(\"msb\", srctop_file(\"test\",\"testrsapub.pem\"), \"rsa\",",
          "39:        \"-pubin\", \"-pubout\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: }",
          "39:  SKIP: {",
          "40:      skip \"Skipping msblob conversion test\", 1",
          "41:   if disabled(\"rsa\") || disabled(\"dsa\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}