{
  "cve_id": "CVE-2020-12066",
  "cve_desc": "CServer::SendMsg in engine/server/server.cpp in Teeworlds 0.7.x before 0.7.5 allows remote attackers to shut down the server.",
  "repo": "teeworlds/teeworlds",
  "patch_hash": "c68402fa7e279d42886d5951d1ea8ac2facc1ea5",
  "patch_info": {
    "commit_hash": "c68402fa7e279d42886d5951d1ea8ac2facc1ea5",
    "repo": "teeworlds/teeworlds",
    "commit_url": "https://github.com/teeworlds/teeworlds/commit/c68402fa7e279d42886d5951d1ea8ac2facc1ea5",
    "files": [
      "src/engine/server/server.cpp"
    ],
    "message": "changed a check",
    "before_after_code_files": [
      "src/engine/server/server.cpp||src/engine/server/server.cpp"
    ]
  },
  "patch_diff": {
    "src/engine/server/server.cpp||src/engine/server/server.cpp": [
      "File: src/engine/server/server.cpp -> src/engine/server/server.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "496:  if(!pMsg)",
      "497:   return -1;",
      "501:   return 0;",
      "503:  mem_zero(&Packet, sizeof(CNetChunk));",
      "",
      "[Removed Lines]",
      "500:  if(0 <= ClientID && ClientID < MAX_CLIENTS && GameServer()->IsClientBot(ClientID))",
      "",
      "[Added Lines]",
      "500:  if(ClientID != -1 && (ClientID < 0 || ClientID >= MAX_CLIENTS || m_aClients[ClientID].m_State == CClient::STATE_EMPTY || m_aClients[ClientID].m_Quitting))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ab3fa2548d175477fb9045d36a461c73dd34d4f",
      "candidate_info": {
        "commit_hash": "4ab3fa2548d175477fb9045d36a461c73dd34d4f",
        "repo": "teeworlds/teeworlds",
        "commit_url": "https://github.com/teeworlds/teeworlds/commit/4ab3fa2548d175477fb9045d36a461c73dd34d4f",
        "files": [
          "src/engine/server.h",
          "src/engine/server/server.cpp",
          "src/game/server/gamecontext.cpp",
          "src/game/server/gamecontext.h"
        ],
        "message": "add knowledge about bot into engine\n\n- drop packet to bots\n- remove dummy when connecting on its slot\n\nfix #2491",
        "before_after_code_files": [
          "src/engine/server.h||src/engine/server.h",
          "src/engine/server/server.cpp||src/engine/server/server.cpp",
          "src/game/server/gamecontext.cpp||src/game/server/gamecontext.cpp",
          "src/game/server/gamecontext.h||src/game/server/gamecontext.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/engine/server/server.cpp||src/engine/server/server.cpp"
          ],
          "candidate": [
            "src/engine/server/server.cpp||src/engine/server/server.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/engine/server.h||src/engine/server.h": [
          "File: src/engine/server.h -> src/engine/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:  virtual void OnClientDirectInput(int ClientID, void *pInput) = 0;",
          "92:  virtual void OnClientPredictedInput(int ClientID, void *pInput) = 0;",
          "94:  virtual bool IsClientReady(int ClientID) const = 0;",
          "95:  virtual bool IsClientPlayer(int ClientID) const = 0;",
          "96:  virtual bool IsClientSpectator(int ClientID) const = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:  virtual bool IsClientBot(int ClientID) const = 0;",
          "",
          "---------------"
        ],
        "src/engine/server/server.cpp||src/engine/server/server.cpp": [
          "File: src/engine/server/server.cpp -> src/engine/server/server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:  if(!pMsg)",
          "497:   return -1;",
          "499:  mem_zero(&Packet, sizeof(CNetChunk));",
          "500:  Packet.m_ClientID = ClientID;",
          "501:  Packet.m_pData = pMsg->Data();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500:  if(0 <= ClientID && ClientID < MAX_CLIENTS && GameServer()->IsClientBot(ClientID))",
          "501:   return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "665: int CServer::NewClientCallback(int ClientID, void *pUser)",
          "666: {",
          "667:  CServer *pThis = (CServer *)pUser;",
          "668:  pThis->m_aClients[ClientID].m_State = CClient::STATE_AUTH;",
          "669:  pThis->m_aClients[ClientID].m_aName[0] = 0;",
          "670:  pThis->m_aClients[ClientID].m_aClan[0] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "674:  if(pThis->GameServer()->IsClientBot(ClientID))",
          "675:  {",
          "676:   pThis->GameServer()->OnClientDrop(ClientID, \"removing dummy\");",
          "677:  }",
          "",
          "---------------"
        ],
        "src/game/server/gamecontext.cpp||src/game/server/gamecontext.cpp": [
          "File: src/game/server/gamecontext.cpp -> src/game/server/gamecontext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "701: void CGameContext::OnClientConnected(int ClientID, bool Dummy, bool AsSpec)",
          "702: {",
          "709:  m_apPlayers[ClientID] = new(ClientID) CPlayer(this, ClientID, Dummy, AsSpec);",
          "",
          "[Removed Lines]",
          "703:  if(m_apPlayers[ClientID])",
          "704:  {",
          "705:   dbg_assert(m_apPlayers[ClientID]->IsDummy(), \"invalid clientID\");",
          "706:   OnClientDrop(ClientID, \"removing dummy\");",
          "707:  }",
          "",
          "[Added Lines]",
          "703:  dbg_assert(!m_apPlayers[ClientID], \"non-free player slot\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "742:  m_pController->OnPlayerDisconnect(m_apPlayers[ClientID]);",
          "746:  {",
          "747:   if(Server()->DemoRecorder_IsRecording())",
          "748:   {",
          "",
          "[Removed Lines]",
          "745:  if(Server()->ClientIngame(ClientID))",
          "",
          "[Added Lines]",
          "741:  if(Server()->ClientIngame(ClientID) || IsClientBot(ClientID))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1660:  m_Events.Clear();",
          "1661: }",
          "1663: bool CGameContext::IsClientReady(int ClientID) const",
          "1664: {",
          "1665:  return m_apPlayers[ClientID] && m_apPlayers[ClientID]->m_IsReadyToEnter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1659: bool CGameContext::IsClientBot(int ClientID) const",
          "1660: {",
          "1661:  return m_apPlayers[ClientID] && m_apPlayers[ClientID]->IsDummy();",
          "1662: }",
          "",
          "---------------"
        ],
        "src/game/server/gamecontext.h||src/game/server/gamecontext.h": [
          "File: src/game/server/gamecontext.h -> src/game/server/gamecontext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:  virtual void OnClientDirectInput(int ClientID, void *pInput);",
          "189:  virtual void OnClientPredictedInput(int ClientID, void *pInput);",
          "191:  virtual bool IsClientReady(int ClientID) const;",
          "192:  virtual bool IsClientPlayer(int ClientID) const;",
          "193:  virtual bool IsClientSpectator(int ClientID) const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:  virtual bool IsClientBot(int ClientID) const;",
          "",
          "---------------"
        ]
      }
    }
  ]
}