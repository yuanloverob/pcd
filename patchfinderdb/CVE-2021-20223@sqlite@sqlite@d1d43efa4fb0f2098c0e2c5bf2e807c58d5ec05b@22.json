{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2d99f9572180c67786357883ecffaceca596e33b",
      "candidate_info": {
        "commit_hash": "2d99f9572180c67786357883ecffaceca596e33b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d99f9572180c67786357883ecffaceca596e33b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/expr.c"
        ],
        "message": "The ALTER TABLE fix of check-in [7e5ad8e0ab7ee91a] is no longer needed due to the changes at check-in [4cf8721f5ceb1fda].  But, we keep the defense in place as an assert() for extra safety.\n\nFossilOrigin-Name: 230556e859536bbadf0daf8133a9a01ef4f03148b3296723e37bad66e3fc3d82",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c95c4cda4640f05d61b13b4e60494dec07d4483734fc41ffcce73fb5163cbb0d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698:   RenameToken *pNew;",
          "699:   assert( pPtr || pParse->db->mallocFailed );",
          "700:   renameTokenCheckAll(pParse, pPtr);",
          "702:     pNew = sqlite3DbMallocZero(pParse->db, sizeof(RenameToken));",
          "703:     if( pNew ){",
          "704:       pNew->p = pPtr;",
          "",
          "[Removed Lines]",
          "701:   if( pParse->eParseMode!=PARSE_MODE_UNMAP ){",
          "",
          "[Added Lines]",
          "701:   if( ALWAYS(pParse->eParseMode!=PARSE_MODE_UNMAP) ){",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1788: ){",
          "1789:   assert( pList!=0 || pParse->db->mallocFailed!=0 );",
          "1790:   if( pList ){",
          "1791:     struct ExprList_item *pItem;",
          "1792:     assert( pList->nExpr>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1790:   assert( pParse->eParseMode!=PARSE_MODE_UNMAP || dequote==0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39c7125a97bedcfa152aef8451dd2e6d258b6508",
      "candidate_info": {
        "commit_hash": "39c7125a97bedcfa152aef8451dd2e6d258b6508",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39c7125a97bedcfa152aef8451dd2e6d258b6508",
        "files": [
          "ext/expert/expert1.test",
          "ext/expert/sqlite3expert.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem in sqlite-expert causing it to ignore equality constraints on the second or subsequent columns of a multi-column PRIMARY KEY.\n\nFossilOrigin-Name: c666c85a433fbc83edef4dbfb0399672e570f5d7979ab61cb39ff5488595d822",
        "before_after_code_files": [
          "ext/expert/expert1.test||ext/expert/expert1.test",
          "ext/expert/sqlite3expert.c||ext/expert/sqlite3expert.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/expert/expert1.test||ext/expert/expert1.test": [
          "File: ext/expert/expert1.test -> ext/expert/expert1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:   SCAN TABLE t1",
          "327: }",
          "329: }",
          "331: proc do_candidates_test {tn sql res} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: do_setup_rec_test $tn.17.1 {",
          "330:   CREATE TABLE example (A INTEGER, B INTEGER, C INTEGER, PRIMARY KEY (A,B));",
          "331: } {",
          "332:   SELECT * FROM example WHERE a=?",
          "333: } {",
          "334:   (no new indexes)",
          "335:   SEARCH TABLE example USING INDEX sqlite_autoindex_example_1 (A=?)",
          "336: }",
          "337: do_setup_rec_test $tn.17.2 {",
          "338:   CREATE TABLE example (A INTEGER, B INTEGER, C INTEGER, PRIMARY KEY (A,B));",
          "339: } {",
          "340:   SELECT * FROM example WHERE b=?",
          "341: } {",
          "342:   CREATE INDEX example_idx_00000042 ON example(B);",
          "343:   SEARCH TABLE example USING INDEX example_idx_00000042 (B=?)",
          "344: }",
          "345: do_setup_rec_test $tn.17.3 {",
          "346:   CREATE TABLE example (A INTEGER, B INTEGER, C INTEGER, PRIMARY KEY (A,B));",
          "347: } {",
          "348:   SELECT * FROM example WHERE a=? AND b=?",
          "349: } {",
          "350:   (no new indexes)",
          "351:   SEARCH TABLE example USING INDEX sqlite_autoindex_example_1 (A=? AND B=?)",
          "352: }",
          "353: do_setup_rec_test $tn.17.4 {",
          "354:   CREATE TABLE example (A INTEGER, B INTEGER, C INTEGER, PRIMARY KEY (A,B));",
          "355: } {",
          "356:   SELECT * FROM example WHERE a=? AND b>?",
          "357: } {",
          "358:   (no new indexes)",
          "359:   SEARCH TABLE example USING INDEX sqlite_autoindex_example_1 (A=? AND B>?)",
          "360: }",
          "361: do_setup_rec_test $tn.17.5 {",
          "362:   CREATE TABLE example (A INTEGER, B INTEGER, C INTEGER, PRIMARY KEY (A,B));",
          "363: } {",
          "364:   SELECT * FROM example WHERE a>? AND b=?",
          "365: } {",
          "366:   CREATE INDEX example_idx_0000cb3f ON example(B, A);",
          "367:   SEARCH TABLE example USING INDEX example_idx_0000cb3f (B=? AND A>?)",
          "368: }",
          "",
          "---------------"
        ],
        "ext/expert/sqlite3expert.c||ext/expert/sqlite3expert.c": [
          "File: ext/expert/sqlite3expert.c -> ext/expert/sqlite3expert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "685:   IdxTable *pNew = 0;",
          "686:   int rc, rc2;",
          "687:   char *pCsr = 0;",
          "689:   rc = idxPrintfPrepareStmt(db, &p1, pzErrmsg, \"PRAGMA table_info=%Q\", zTab);",
          "690:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(p1) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "688:   int nPk = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "695:     );",
          "696:     nByte += 1 + STRLEN(zCol);",
          "697:     nCol++;",
          "698:   }",
          "699:   rc2 = sqlite3_reset(p1);",
          "700:   if( rc==SQLITE_OK ) rc = rc2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699:     nPk += (sqlite3_column_int(p1, 5)>0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "714:     const char *zCol = (const char*)sqlite3_column_text(p1, 1);",
          "715:     int nCopy = STRLEN(zCol) + 1;",
          "716:     pNew->aCol[nCol].zName = pCsr;",
          "718:     memcpy(pCsr, zCol, nCopy);",
          "719:     pCsr += nCopy;",
          "",
          "[Removed Lines]",
          "717:     pNew->aCol[nCol].iPk = sqlite3_column_int(p1, 5);",
          "",
          "[Added Lines]",
          "719:     pNew->aCol[nCol].iPk = (sqlite3_column_int(p1, 5)==1 && nPk==1);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9a55601d072bcd1ac0f6f1633216c7c8b3ff3e037451e2cfd285cbe19b60b9fc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2add24c0d4b467edd0a449c90d305e46dfd6d7a6",
      "candidate_info": {
        "commit_hash": "2add24c0d4b467edd0a449c90d305e46dfd6d7a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2add24c0d4b467edd0a449c90d305e46dfd6d7a6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "An ORDER BY clause can slip into an SRT_Upfrom query via the query flattener, even without the SQLITE_ENABLE_UPDATE_DELETE_LIMIT compile-time option.  So always enable the code to deal with that case.\n\nFossilOrigin-Name: 6a3111cd0693bb51191d55a32ecd436341638d54ecb2df0778de681b4969241b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28515bbbae4fbc260457dea7a0f7414be1837d6db27fec5514f8da358bfc1f0c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1129:     }",
          "1131:     case SRT_Upfrom: {",
          "1133:       if( pSort ){",
          "1134:         pushOntoSorter(",
          "1135:             pParse, pSort, p, regResult, regOrig, nResultCol, nPrefixReg);",
          "1139:         int i2 = pDest->iSDParm2;",
          "1140:         int r1 = sqlite3GetTempReg(pParse);",
          "",
          "[Removed Lines]",
          "1132: #ifdef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "1136:       }else",
          "1137: #endif",
          "1138:       {",
          "",
          "[Added Lines]",
          "1135:       }else{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1587:       break;",
          "1588:     }",
          "1589: #endif",
          "1591:     case SRT_Upfrom: {",
          "1592:       int i2 = pDest->iSDParm2;",
          "1593:       int r1 = sqlite3GetTempReg(pParse);",
          "",
          "[Removed Lines]",
          "1590: #ifdef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1599:       }",
          "1600:       break;",
          "1601:     }",
          "1603:     default: {",
          "1604:       assert( eDest==SRT_Output || eDest==SRT_Coroutine );",
          "1605:       testcase( eDest==SRT_Output );",
          "",
          "[Removed Lines]",
          "1602: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e490c4ca6b43a9cf8637d695907888349f69bec",
      "candidate_info": {
        "commit_hash": "1e490c4ca6b43a9cf8637d695907888349f69bec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e490c4ca6b43a9cf8637d695907888349f69bec",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/zipfile.test"
        ],
        "message": "Test case for the zipfile-extension bug fix of the previous check-in.\n\nFossilOrigin-Name: bc8bfc7fcdf33f6855584e10e9260073430517ff3268cf0c7988dcc4cd785391",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/zipfile.test||test/zipfile.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc0fb00a128fd0773db5ff7891f7aa577a3671d570166d2cbb30df922344adcf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/zipfile.test||test/zipfile.test": [
          "File: test/zipfile.test -> test/zipfile.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "808:          quote(data),quote(method) FROM t1;",
          "809: } {'' 10 10 2 X'3130' X'3130' 0}",
          "812: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811: # 2019-12-23 Yongheng and Rui fuzzer",
          "812: # Run using valgrind to see the problem.",
          "813: #",
          "814: do_execsql_test 14.10 {",
          "815:   DROP TABLE t1;",
          "816:   CREATE TABLE t1(x char);",
          "817:   INSERT INTO t1(x) VALUES('1');",
          "818:   INSERT INTO t1(x) SELECT zipfile(x, 'xyz') FROM t1;",
          "819:   INSERT INTO t1(x) SELECT zipfile(x, 'uvw') FROM t1;",
          "820:   SELECT count(*) FROM t1;",
          "821:   PRAGMA integrity_check;",
          "822: } {3 ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5be1b20aec9151af799d1294fc8328c8aaa17bd8",
      "candidate_info": {
        "commit_hash": "5be1b20aec9151af799d1294fc8328c8aaa17bd8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5be1b20aec9151af799d1294fc8328c8aaa17bd8",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix problems in fts3 with processing corrupt records and undefined integer overflows.\n\nFossilOrigin-Name: 3b873029ef1903f76442445343af3786cd59ee66b0e5e0e6b76a0b6b1b5eb88a",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:   SQLITE_EXTENSION_INIT1",
          "309: #endif",
          "323: static int fts3EvalNext(Fts3Cursor *pCsr);",
          "324: static int fts3EvalStart(Fts3Cursor *pCsr);",
          "325: static int fts3TermSegReaderCursor(",
          "",
          "[Removed Lines]",
          "318: #ifndef SQLITE_AMALGAMATION",
          "319: # define LARGEST_INT64  (0xffffffff|(((sqlite3_int64)0x7fffffff)<<32))",
          "320: # define SMALLEST_INT64 (((sqlite3_int64)-1) - LARGEST_INT64)",
          "321: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364:   v = (*ptr++);                                               \\",
          "365:   if( (v & mask2)==0 ){ var = v; return ret; }",
          "373:   const unsigned char *p = (const unsigned char*)pBuf;",
          "374:   const unsigned char *pStart = p;",
          "375:   u32 a;",
          "",
          "[Removed Lines]",
          "372: int sqlite3Fts3GetVarint(const char *pBuf, sqlite_int64 *v){",
          "",
          "[Added Lines]",
          "355: int sqlite3Fts3GetVarintU(const char *pBuf, sqlite_uint64 *v){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:   return (int)(p - pStart);",
          "392: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382: int sqlite3Fts3GetVarint(const char *pBuf, sqlite_int64 *v){",
          "383:   return sqlite3Fts3GetVarintU(pBuf, (sqlite3_uint64*)v);",
          "384: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2496:   if( *pp>=pEnd ){",
          "2498:   }else{",
          "2501:     if( bDescIdx ){",
          "2503:     }else{",
          "2505:     }",
          "2506:   }",
          "2507: }",
          "",
          "[Removed Lines]",
          "2499:     sqlite3_int64 iVal;",
          "",
          "[Added Lines]",
          "2491:     u64 iVal;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2531:   sqlite3_uint64 iWrite;",
          "2532:   if( bDescIdx==0 || *pbFirst==0 ){",
          "2533:     assert_fts3_nc( *pbFirst==0 || iVal>=*piPrev );",
          "2535:   }else{",
          "2536:     assert_fts3_nc( *piPrev>=iVal );",
          "2538:   }",
          "2539:   assert( *pbFirst || *piPrev==0 );",
          "2540:   assert_fts3_nc( *pbFirst==0 || iWrite>0 );",
          "",
          "[Removed Lines]",
          "2534:     iWrite = iVal - *piPrev;",
          "2537:     iWrite = *piPrev - iVal;",
          "",
          "[Added Lines]",
          "2526:     iWrite = (u64)iVal - (u64)*piPrev;",
          "2529:     iWrite = (u64)*piPrev - (u64)iVal;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2556: #define DOCID_CMP(i1, i2) ((bDescDoclist?-1:1) * (i1-i2))",
          "",
          "[Added Lines]",
          "2549: #define DOCID_CMP(i1, i2) ((bDescDoclist?-1:1) * (i1>i2?1:((i1==i2)?0:-1)))",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "196: # define TESTONLY(X)",
          "197: #endif",
          "201: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199: #define LARGEST_INT64  (0xffffffff|(((i64)0x7fffffff)<<32))",
          "200: #define SMALLEST_INT64 (((i64)-1) - LARGEST_INT64)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "578: void sqlite3Fts3ErrMsg(char**,const char*,...);",
          "579: int sqlite3Fts3PutVarint(char *, sqlite3_int64);",
          "580: int sqlite3Fts3GetVarint(const char *, sqlite_int64 *);",
          "581: int sqlite3Fts3GetVarintBounded(const char*,const char*,sqlite3_int64*);",
          "582: int sqlite3Fts3GetVarint32(const char *, int *);",
          "583: int sqlite3Fts3VarintLen(sqlite3_uint64);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584: int sqlite3Fts3GetVarintU(const char *, sqlite_uint64 *);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "696:   assert( !p || p->iLastDocid<=iDocid );",
          "698:   if( !p || p->iLastDocid!=iDocid ){",
          "700:     if( p ){",
          "701:       assert( p->nData<p->nSpace );",
          "702:       assert( p->aData[p->nData]==0 );",
          "",
          "[Removed Lines]",
          "699:     sqlite3_int64 iDelta = iDocid - (p ? p->iLastDocid : 0);",
          "",
          "[Added Lines]",
          "699:     u64 iDelta = (u64)iDocid - (u64)(p ? p->iLastDocid : 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1531:     }else{",
          "1532:       rc = fts3SegReaderRequire(pReader, p, FTS3_VARINT_MAX);",
          "1533:       if( rc==SQLITE_OK ){",
          "1536:         if( pTab->bDescIdx ){",
          "1538:         }else{",
          "1540:         }",
          "1541:       }",
          "1542:     }",
          "1543:   }",
          "1546: }",
          "",
          "[Removed Lines]",
          "1534:         sqlite3_int64 iDelta;",
          "1535:         pReader->pOffsetList = p + sqlite3Fts3GetVarint(p, &iDelta);",
          "1537:           pReader->iDocid -= iDelta;",
          "1539:           pReader->iDocid += iDelta;",
          "1545:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "1534:         u64 iDelta;",
          "1535:         pReader->pOffsetList = p + sqlite3Fts3GetVarintU(p, &iDelta);",
          "1537:           pReader->iDocid = (i64)((u64)pReader->iDocid - iDelta);",
          "1539:           pReader->iDocid = (i64)((u64)pReader->iDocid + iDelta);",
          "1545:   return rc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2281:     int rc;",
          "2284:     rc = fts3WriteSegment(p, pWriter->iFree++, pWriter->aData, nData);",
          "2285:     if( rc!=SQLITE_OK ) return rc;",
          "2286:     p->nLeafAdd++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2284:     if( pWriter->iFree==LARGEST_INT64 ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2978:           sqlite3_int64 iDelta;",
          "2979:           if( p->bDescIdx && nDoclist>0 ){",
          "2980:             if( iPrev<=iDocid ) return FTS_CORRUPT_VTAB;",
          "2982:           }else{",
          "2983:             if( nDoclist>0 && iPrev>=iDocid ) return FTS_CORRUPT_VTAB;",
          "2985:           }",
          "2987:           nByte = sqlite3Fts3VarintLen(iDelta) + (isRequirePos?nList+1:0);",
          "",
          "[Removed Lines]",
          "2981:             iDelta = iPrev - iDocid;",
          "2984:             iDelta = iDocid - iPrev;",
          "",
          "[Added Lines]",
          "2982:             iDelta = (i64)((u64)iPrev - (u64)iDocid);",
          "2985:             iDelta = (i64)((u64)iDocid - (u64)iPrev);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3264:         csr.zTerm, csr.nTerm, csr.aDoclist, csr.nDoclist);",
          "3265:   }",
          "3266:   if( rc!=SQLITE_OK ) goto finished;",
          "3269:   if( iLevel!=FTS3_SEGCURSOR_PENDING ){",
          "3270:     rc = fts3DeleteSegdir(",
          "",
          "[Removed Lines]",
          "3267:   assert( pWriter || bIgnoreEmpty );",
          "",
          "[Added Lines]",
          "3268:   assert_fts3_nc( pWriter || bIgnoreEmpty );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5191:       i64 iDocid = 0;",
          "5192:       i64 iCol = 0;",
          "5195:       pCsr += sqlite3Fts3GetVarint(pCsr, &iDocid);",
          "5196:       while( pCsr<pEnd ){",
          "5199:         if( pCsr<pEnd ){",
          "5200:           if( iVal==0 || iVal==1 ){",
          "5201:             iCol = 0;",
          "",
          "[Removed Lines]",
          "5193:       i64 iPos = 0;",
          "5197:         i64 iVal = 0;",
          "5198:         pCsr += sqlite3Fts3GetVarint(pCsr, &iVal);",
          "",
          "[Added Lines]",
          "5194:       u64 iPos = 0;",
          "5198:         u64 iVal = 0;",
          "5199:         pCsr += sqlite3Fts3GetVarintU(pCsr, &iVal);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5203:             if( iVal ){",
          "5204:               pCsr += sqlite3Fts3GetVarint(pCsr, &iCol);",
          "5205:             }else{",
          "5207:               if( p->bDescIdx ){",
          "5209:               }else{",
          "5211:               }",
          "5212:             }",
          "5213:           }else{",
          "",
          "[Removed Lines]",
          "5206:               pCsr += sqlite3Fts3GetVarint(pCsr, &iVal);",
          "5208:                 iDocid -= iVal;",
          "5210:                 iDocid += iVal;",
          "",
          "[Added Lines]",
          "5207:               pCsr += sqlite3Fts3GetVarintU(pCsr, &iVal);",
          "5209:                 iDocid = (i64)((u64)iDocid - iVal);",
          "5211:                 iDocid = (i64)((u64)iDocid + iVal);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 052fdf5e58b41ccadaa5aac293ceb4d309ced661d46f3a52be9eb8d01d347a82",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5759: | end crash-74fdbc96edbc04.db",
          "5760: }]} {}",
          "5763:   UPDATE t1 SET b=quote(zeroblob(6.51158946e+5)) WHERE a MATCH '*t*';",
          "5768: } {1 {database disk image is malformed}}",
          "5770: #-------------------------------------------------------------------------",
          "5771: #",
          "5772: reset_db",
          "5774:   CREATE VIRTUAL TABLE f USING fts3(a,b,tokenize=icu);",
          "5775:   CREATE TABLE 'f_docsize'(docid INTEGER PRIMARY KEY, size BLOB);",
          "5776:   CREATE TABLE 'f_stat'(id INTEGER PRIMARY KEY, value BLOB);",
          "",
          "[Removed Lines]",
          "5762: do_execsql_test 32.1 {",
          "5764: } {}",
          "5766: do_catchsql_test 32.2 {",
          "5767:   UPDATE t1 SET b=((- '' )) WHERE a MATCH '0*t';",
          "5773: do_catchsql_test 32.0 {",
          "",
          "[Added Lines]",
          "5762: do_catchsql_test 32.1 {",
          "5766: #do_catchsql_test 32.2 {",
          "5767: #  UPDATE t1 SET b=((- '' )) WHERE a MATCH '0*t';",
          "5768: #} {1 {database disk image is malformed}}",
          "5773: do_catchsql_test 33.0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5779:   INSERT INTO f(f) VALUES ('merge=198,49');",
          "5780: } {1 {database disk image is malformed}}",
          "5783: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5782: #-------------------------------------------------------------------------",
          "5783: #",
          "5784: reset_db",
          "5785: do_execsql_test 34.0 {",
          "5786:   CREATE VIRTUAL TABLE f USING fts3(a,b);",
          "5787:   INSERT INTO f VALUES (1, '1234');",
          "5788:   INSERT INTO f_segdir VALUES (1,255,0,0,'1 255',x'00');",
          "5789:   UPDATE f_segdir SET level = 0 WHERE level IN (",
          "5790:     SELECT level FROM f_segdir LIMIT 1 OFFSET 1",
          "5791:   );",
          "5792:   INSERT INTO f_segdir VALUES (255,249,0,121,'0 0',x'00');",
          "5793:   INSERT INTO f_content VALUES (255,0,x'ff');",
          "5794:   INSERT INTO f_segdir VALUES (1,255,16,0,'1 255',x'00');",
          "5795: }",
          "5797: do_catchsql_test 34.1 {",
          "5798:   UPDATE f SET b = x'00' WHERE b IN (SELECT b FROM f LIMIT 1 OFFSET 0);",
          "5799: } {1 {database disk image is malformed}}",
          "5801: #-------------------------------------------------------------------------",
          "5802: #",
          "5803: reset_db",
          "5804: do_execsql_test 35.0 {",
          "5805:   CREATE VIRTUAL TABLE f USING fts3(a,b);",
          "5806:   INSERT INTO f_segdir VALUES (1,255,0,0,'1 255',x'0001ff000001ff000001ff000001ff000001ff00c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5bec5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5');",
          "5807: }",
          "5809: do_catchsql_test 35.1 {",
          "5810:   INSERT INTO f(f) VALUES ('integrity-check');",
          "5811: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}