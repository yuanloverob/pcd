{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "203b1ea0f5d6bb7b8b1c68bcb7e4563a233df872",
      "candidate_info": {
        "commit_hash": "203b1ea0f5d6bb7b8b1c68bcb7e4563a233df872",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/203b1ea0f5d6bb7b8b1c68bcb7e4563a233df872",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Detect when an attempt is made to write to a pointer map page that is also being used as a btree page and report corruption.\n\nFossilOrigin-Name: 3036fd71ac7063359b04a0ed54a6c63a380eb7ff75cd29ed27486d4259066aee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e0994e99955cf11f23dba029b5ed7f150f467887558848d5f03510e2fb5855f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:     return;",
          "994:   }",
          "995:   offset = PTRMAP_PTROFFSET(iPtrmap, key);",
          "996:   if( offset<0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "995:   if( ((char*)sqlite3PagerGetExtra(pDbPage))[0]!=0 ){",
          "1000:     goto ptrmap_exit;",
          "1001:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88862d49a675b4f95374fb4ff612f2920ed94e69",
      "candidate_info": {
        "commit_hash": "88862d49a675b4f95374fb4ff612f2920ed94e69",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/88862d49a675b4f95374fb4ff612f2920ed94e69",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Enhance dbfuzz2 so that with the -v option it shows the return code and error message for any failing SQL statements.\n\nFossilOrigin-Name: 3a127ef9f7feafe6ba8c75e4eb29e28aa61a30249082cc8767ada1ec0cc0b7f1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a16ffb5a4b30f1ac4a8384fccde0a0f69e49545b6f9be9267928609328c4a151",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   int rc;",
          "83:   int i;",
          "84:   sqlite3_int64 x;",
          "86:   if( eVerbosity>=1 ){",
          "87:     printf(\"************** nByte=%d ***************\\n\", (int)nByte);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:   char *zErr = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:       printf(\"%s\\n\", azSql[i]);",
          "107:       fflush(stdout);",
          "108:     }",
          "110:   }",
          "111:   rc = sqlite3_close(db);",
          "112:   if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "109:     sqlite3_exec(db, azSql[i], 0, 0, 0);",
          "",
          "[Added Lines]",
          "110:     zErr = 0;",
          "111:     rc = sqlite3_exec(db, azSql[i], 0, 0, &zErr);",
          "112:     if( rc && eVerbosity>=1 ){",
          "113:       printf(\"-- rc=%d zErr=%s\\n\", rc, zErr);",
          "114:     }",
          "115:     sqlite3_free(zErr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5198ff5767c4367124c3aecbb483c209c2f0b17b",
      "candidate_info": {
        "commit_hash": "5198ff5767c4367124c3aecbb483c209c2f0b17b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5198ff5767c4367124c3aecbb483c209c2f0b17b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/autoindex1.test",
          "test/eqp.test",
          "test/rowvalue4.test"
        ],
        "message": "Do not generate subroutines for non-static SELECT and EXISTS expressions. Fix up some test cases to account for the minor changes in EXPLAIN QUERY PLAN output.\n\nFossilOrigin-Name: 06de44ec9e173992ca9afb89dd2b4e40d2a7e35512c7959603cdceb606f5dfbd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/autoindex1.test||test/autoindex1.test",
          "test/eqp.test||test/eqp.test",
          "test/rowvalue4.test||test/rowvalue4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b24d3fb94e787d25e49501714780dfb0c0c99077102056aa68445f4808cdd57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2865:   Vdbe *v = pParse->pVdbe;",
          "2866:   assert( v!=0 );",
          "",
          "[Removed Lines]",
          "2869:   if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2870:     sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn, pExpr->y.sub.iAddr);",
          "2871:     return pExpr->iTable;",
          "2872:   }",
          "2875:   ExprSetProperty(pExpr, EP_Subrtn);",
          "2876:   pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2877:   pExpr->y.sub.iAddr =",
          "2878:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2879:   VdbeComment((v, \"return address\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2891:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2892:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "2893:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2881:     if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2882:       sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn,",
          "2883:                         pExpr->y.sub.iAddr);",
          "2884:       return pExpr->iTable;",
          "2885:     }",
          "2888:     ExprSetProperty(pExpr, EP_Subrtn);",
          "2889:     pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2890:     pExpr->y.sub.iAddr =",
          "2891:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2892:     VdbeComment((v, \"return address\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2939:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "2940:   if( addrOnce ){",
          "2941:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2948:   return rReg;",
          "2949: }",
          "",
          "[Removed Lines]",
          "2942:   }",
          "2945:   sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2946:   sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "[Added Lines]",
          "2946:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2947:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "2948:   }",
          "",
          "---------------"
        ],
        "test/autoindex1.test||test/autoindex1.test": [
          "File: test/autoindex1.test -> test/autoindex1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: } {",
          "185:   QUERY PLAN",
          "186:   |--SEARCH TABLE t501 USING INTEGER PRIMARY KEY (rowid=?)",
          "188:      `--SCAN TABLE t502",
          "189: }",
          "190: do_eqp_test autoindex1-501 {",
          "",
          "[Removed Lines]",
          "187:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "187:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: } {",
          "194:   QUERY PLAN",
          "195:   |--SCAN TABLE t501",
          "197:      `--SEARCH TABLE t502 USING AUTOMATIC COVERING INDEX (y=?)",
          "198: }",
          "199: do_eqp_test autoindex1-502 {",
          "",
          "[Removed Lines]",
          "196:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "196:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203: } {",
          "204:   QUERY PLAN",
          "205:   |--SEARCH TABLE t501 USING INTEGER PRIMARY KEY (rowid=?)",
          "207:      `--SCAN TABLE t502",
          "208: }",
          "",
          "[Removed Lines]",
          "206:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "206:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ],
        "test/eqp.test||test/eqp.test": [
          "File: test/eqp.test -> test/eqp.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: } {",
          "287:   QUERY PLAN",
          "288:   |--SCAN TABLE t1",
          "290:      `--SCAN TABLE t2",
          "291: }",
          "292: det 3.3.2 {",
          "",
          "[Removed Lines]",
          "289:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "289:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294: } {",
          "295:   QUERY PLAN",
          "296:   |--SCAN TABLE t1",
          "298:      `--SCAN TABLE t2",
          "299: }",
          "300: det 3.3.3 {",
          "",
          "[Removed Lines]",
          "297:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "297:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ],
        "test/rowvalue4.test||test/rowvalue4.test": [
          "File: test/rowvalue4.test -> test/rowvalue4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "235: } {",
          "236:   QUERY PLAN",
          "237:   |--SEARCH TABLE d2 USING INDEX d2ab (a=? AND b=?)",
          "239:   |  `--SCAN TABLE d1",
          "241:      `--SCAN TABLE d1",
          "242: }",
          "",
          "[Removed Lines]",
          "238:   |--LIST SUBQUERY",
          "240:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "238:   |--LIST SUBQUERY xxxxxx",
          "240:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a6c2b1d383009aeb306f53f1915a443ab79de0f",
      "candidate_info": {
        "commit_hash": "1a6c2b1d383009aeb306f53f1915a443ab79de0f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a6c2b1d383009aeb306f53f1915a443ab79de0f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/tokenize.c",
          "src/vdbeapi.c",
          "src/vdbeaux.c"
        ],
        "message": "Further refinements to the sqlite3_normalized_sql() interface.  TH3 now gives 100% MC/DC on that interface.\n\nFossilOrigin-Name: c96bf6cca220e363b099455ce35195ce7e89d374a52dc787f56e7b11e587bced",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tokenize.c||src/tokenize.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 06e955e5d2b857b9ce94a73fb174b620c101bdb160842f9a0e958bdb48e8c987",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:       sqlite3_log(SQLITE_WARNING,",
          "492:         \"double-quoted string literal: \\\"%w\\\"\", zCol);",
          "493: #ifdef SQLITE_ENABLE_NORMALIZE",
          "495: #endif",
          "496:       pExpr->op = TK_STRING;",
          "497:       pExpr->y.pTab = 0;",
          "",
          "[Removed Lines]",
          "494:       sqlite3VdbeAddDblquoteStr(db,pParse->pVdbe, zCol);",
          "",
          "[Added Lines]",
          "494:       sqlite3VdbeAddDblquoteStr(db, pParse->pVdbe, zCol);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4413: int sqlite3TransferBindings(sqlite3_stmt *, sqlite3_stmt *);",
          "4414: void sqlite3ParserReset(Parse*);",
          "4415: #ifdef SQLITE_ENABLE_NORMALIZE",
          "4417: #endif",
          "4418: int sqlite3Reprepare(Vdbe*);",
          "4419: void sqlite3ExprListCheckLength(Parse*, ExprList*, const char*);",
          "",
          "[Removed Lines]",
          "4416: char *sqlite3Normalize(Vdbe*, const char*, int);",
          "",
          "[Added Lines]",
          "4416: char *sqlite3Normalize(Vdbe*, const char*);",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:   db = sqlite3VdbeDb(pVdbe);",
          "753:   tokenType = -1;",
          "754:   nParen = iStartIN = nParenAtIN = 0;",
          "755:   pStr = sqlite3_str_new(db);",
          "757:     if( tokenType!=TK_SPACE ){",
          "758:       prevType = tokenType;",
          "759:     }",
          "",
          "[Removed Lines]",
          "751:   if( zSql==0 || nSql==0 ) return 0;",
          "756:   for(i=0; i<nSql && pStr->accError==0; i+=n){",
          "",
          "[Added Lines]",
          "755:   for(i=0; zSql[i] && pStr->accError==0; i+=n){",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1713: const char *sqlite3_normalized_sql(sqlite3_stmt *pStmt){",
          "1714:   Vdbe *p = (Vdbe *)pStmt;",
          "1715:   if( p==0 ) return 0;",
          "1717:     sqlite3_mutex_enter(p->db->mutex);",
          "1719:     sqlite3_mutex_leave(p->db->mutex);",
          "1720:   }",
          "1721:   return p->zNormSql;",
          "",
          "[Removed Lines]",
          "1716:   if( p->zNormSql==0 && p->zSql!=0 ){",
          "1718:     p->zNormSql = sqlite3Normalize(p, p->zSql, sqlite3Strlen30(p->zSql));",
          "",
          "[Added Lines]",
          "1716:   if( p->zNormSql==0 && ALWAYS(p->zSql!=0) ){",
          "1718:     p->zNormSql = sqlite3Normalize(p, p->zSql);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   }",
          "65:   assert( p->zSql==0 );",
          "66:   p->zSql = sqlite3DbStrNDup(p->db, z, n);",
          "74: }",
          "76: #ifdef SQLITE_ENABLE_NORMALIZE",
          "",
          "[Removed Lines]",
          "67: #ifdef SQLITE_ENABLE_NORMALIZE",
          "68:   assert( p->zNormSql==0 );",
          "69:   if( p->zSql && (prepFlags & SQLITE_PREPARE_NORMALIZE)!=0 ){",
          "70:     p->zNormSql = sqlite3Normalize(p, p->zSql, n);",
          "71:     assert( p->zNormSql!=0 || p->db->mallocFailed );",
          "72:   }",
          "73: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9101623a320a83ed5bcbc3086b6f4b3517d5a70",
      "candidate_info": {
        "commit_hash": "f9101623a320a83ed5bcbc3086b6f4b3517d5a70",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f9101623a320a83ed5bcbc3086b6f4b3517d5a70",
        "files": [
          "ext/misc/vfsstat.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Register the \"vfsstat\" virtual table immediately when loading the vfsstat.c extension.\n\nFossilOrigin-Name: 9bd92afd0cb0a958441e861c7006b77027125b1ceea0868958ec948b6b3c7bc9",
        "before_after_code_files": [
          "ext/misc/vfsstat.c||ext/misc/vfsstat.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/vfsstat.c||ext/misc/vfsstat.c": [
          "File: ext/misc/vfsstat.c -> ext/misc/vfsstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "784: static int vstatRegister(",
          "785:   sqlite3 *db,",
          "788: ){",
          "789:   return sqlite3_create_module(db, \"vfsstat\", &VfsStatModule, 0);",
          "790: }",
          "",
          "[Removed Lines]",
          "786:   const char **pzErrMsg,",
          "787:   const struct sqlite3_api_routines *pThunk",
          "",
          "[Added Lines]",
          "786:   char **pzErrMsg,",
          "787:   const sqlite3_api_routines *pThunk",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "809:   vstat_vfs.base.szOsFile = sizeof(VStatFile) + vstat_vfs.pVfs->szOsFile;",
          "810:   rc = sqlite3_vfs_register(&vstat_vfs.base, 1);",
          "811:   if( rc==SQLITE_OK ){",
          "813:   }",
          "814:   if( rc==SQLITE_OK ) rc = SQLITE_OK_LOAD_PERMANENTLY;",
          "815:   return rc;",
          "",
          "[Removed Lines]",
          "812:     rc = sqlite3_auto_extension(vstatRegister);",
          "",
          "[Added Lines]",
          "812:     rc = vstatRegister(db, pzErrMsg, pApi);",
          "813:     if( rc==SQLITE_OK ){",
          "814:       rc = sqlite3_auto_extension(vstatRegister);",
          "815:     }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ab2356f580384e4b40d128fc04fd6bc4dfcf50109df77d05d59adcc20f339066",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}