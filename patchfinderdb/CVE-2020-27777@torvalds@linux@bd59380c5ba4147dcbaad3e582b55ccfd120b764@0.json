{
  "cve_id": "CVE-2020-27777",
  "cve_desc": "A flaw was found in the way RTAS handled memory accesses in userspace to kernel communication. On a locked down (usually due to Secure Boot) guest system running on top of PowerVM or KVM hypervisors (pseries platform) a root like local user could use this flaw to further increase their privileges to that of a running kernel.",
  "repo": "torvalds/linux",
  "patch_hash": "bd59380c5ba4147dcbaad3e582b55ccfd120b764",
  "patch_info": {
    "commit_hash": "bd59380c5ba4147dcbaad3e582b55ccfd120b764",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/bd59380c5ba4147dcbaad3e582b55ccfd120b764",
    "files": [
      "arch/powerpc/Kconfig",
      "arch/powerpc/kernel/rtas.c"
    ],
    "message": "powerpc/rtas: Restrict RTAS requests from userspace\n\nA number of userspace utilities depend on making calls to RTAS to retrieve\ninformation and update various things.\n\nThe existing API through which we expose RTAS to userspace exposes more\nRTAS functionality than we actually need, through the sys_rtas syscall,\nwhich allows root (or anyone with CAP_SYS_ADMIN) to make any RTAS call they\nwant with arbitrary arguments.\n\nMany RTAS calls take the address of a buffer as an argument, and it's up to\nthe caller to specify the physical address of the buffer as an argument. We\nallocate a buffer (the \"RMO buffer\") in the Real Memory Area that RTAS can\naccess, and then expose the physical address and size of this buffer in\n/proc/powerpc/rtas/rmo_buffer. Userspace is expected to read this address,\npoke at the buffer using /dev/mem, and pass an address in the RMO buffer to\nthe RTAS call.\n\nHowever, there's nothing stopping the caller from specifying whatever\naddress they want in the RTAS call, and it's easy to construct a series of\nRTAS calls that can overwrite arbitrary bytes (even without /dev/mem\naccess).\n\nAdditionally, there are some RTAS calls that do potentially dangerous\nthings and for which there are no legitimate userspace use cases.\n\nIn the past, this would not have been a particularly big deal as it was\nassumed that root could modify all system state freely, but with Secure\nBoot and lockdown we need to care about this.\n\nWe can't fundamentally change the ABI at this point, however we can address\nthis by implementing a filter that checks RTAS calls against a list\nof permitted calls and forces the caller to use addresses within the RMO\nbuffer.\n\nThe list is based off the list of calls that are used by the librtas\nuserspace library, and has been tested with a number of existing userspace\nRTAS utilities. For compatibility with any applications we are not aware of\nthat require other calls, the filter can be turned off at build time.\n\nCc: stable@vger.kernel.org\nReported-by: Daniel Axtens <dja@axtens.net>\nSigned-off-by: Andrew Donnellan <ajd@linux.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20200820044512.7543-1-ajd@linux.ibm.com",
    "before_after_code_files": [
      "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c"
    ]
  },
  "patch_diff": {
    "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c": [
      "File: arch/powerpc/kernel/rtas.c -> arch/powerpc/kernel/rtas.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "992:  return NULL;",
      "993: }",
      "996: SYSCALL_DEFINE1(rtas, struct rtas_args __user *, uargs)",
      "997: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "995: #ifdef CONFIG_PPC_RTAS_FILTER",
      "1014: struct rtas_filter {",
      "1015:  const char *name;",
      "1016:  int token;",
      "1018:  int buf_idx1;",
      "1019:  int size_idx1;",
      "1020:  int buf_idx2;",
      "1021:  int size_idx2;",
      "1023:  int fixed_size;",
      "1024: };",
      "1026: static struct rtas_filter rtas_filters[] __ro_after_init = {",
      "1027:  { \"ibm,activate-firmware\", -1, -1, -1, -1, -1 },",
      "1029:  { \"display-character\", -1, -1, -1, -1, -1 },",
      "1030:  { \"ibm,display-message\", -1, 0, -1, -1, -1 },",
      "1031:  { \"ibm,errinjct\", -1, 2, -1, -1, -1, 1024 },",
      "1032:  { \"ibm,close-errinjct\", -1, -1, -1, -1, -1 },",
      "1033:  { \"ibm,open-errinct\", -1, -1, -1, -1, -1 },",
      "1034:  { \"ibm,get-config-addr-info2\", -1, -1, -1, -1, -1 },",
      "1035:  { \"ibm,get-dynamic-sensor-state\", -1, 1, -1, -1, -1 },",
      "1036:  { \"ibm,get-indices\", -1, 2, 3, -1, -1 },",
      "1037:  { \"get-power-level\", -1, -1, -1, -1, -1 },",
      "1038:  { \"get-sensor-state\", -1, -1, -1, -1, -1 },",
      "1039:  { \"ibm,get-system-parameter\", -1, 1, 2, -1, -1 },",
      "1040:  { \"get-time-of-day\", -1, -1, -1, -1, -1 },",
      "1041:  { \"ibm,get-vpd\", -1, 0, -1, 1, 2 },",
      "1042:  { \"ibm,lpar-perftools\", -1, 2, 3, -1, -1 },",
      "1043:  { \"ibm,platform-dump\", -1, 4, 5, -1, -1 },",
      "1044:  { \"ibm,read-slot-reset-state\", -1, -1, -1, -1, -1 },",
      "1045:  { \"ibm,scan-log-dump\", -1, 0, 1, -1, -1 },",
      "1046:  { \"ibm,set-dynamic-indicator\", -1, 2, -1, -1, -1 },",
      "1047:  { \"ibm,set-eeh-option\", -1, -1, -1, -1, -1 },",
      "1048:  { \"set-indicator\", -1, -1, -1, -1, -1 },",
      "1049:  { \"set-power-level\", -1, -1, -1, -1, -1 },",
      "1050:  { \"set-time-for-power-on\", -1, -1, -1, -1, -1 },",
      "1051:  { \"ibm,set-system-parameter\", -1, 1, -1, -1, -1 },",
      "1052:  { \"set-time-of-day\", -1, -1, -1, -1, -1 },",
      "1053:  { \"ibm,suspend-me\", -1, -1, -1, -1, -1 },",
      "1054:  { \"ibm,update-nodes\", -1, 0, -1, -1, -1, 4096 },",
      "1055:  { \"ibm,update-properties\", -1, 0, -1, -1, -1, 4096 },",
      "1056:  { \"ibm,physical-attestation\", -1, 0, 1, -1, -1 },",
      "1057: };",
      "1059: static bool in_rmo_buf(u32 base, u32 end)",
      "1060: {",
      "1061:  return base >= rtas_rmo_buf &&",
      "1062:   base < (rtas_rmo_buf + RTAS_RMOBUF_MAX) &&",
      "1063:   base <= end &&",
      "1064:   end >= rtas_rmo_buf &&",
      "1065:   end < (rtas_rmo_buf + RTAS_RMOBUF_MAX);",
      "1066: }",
      "1068: static bool block_rtas_call(int token, int nargs,",
      "1069:        struct rtas_args *args)",
      "1070: {",
      "1071:  int i;",
      "1073:  for (i = 0; i < ARRAY_SIZE(rtas_filters); i++) {",
      "1074:   struct rtas_filter *f = &rtas_filters[i];",
      "1075:   u32 base, size, end;",
      "1077:   if (token != f->token)",
      "1078:    continue;",
      "1080:   if (f->buf_idx1 != -1) {",
      "1081:    base = be32_to_cpu(args->args[f->buf_idx1]);",
      "1082:    if (f->size_idx1 != -1)",
      "1083:     size = be32_to_cpu(args->args[f->size_idx1]);",
      "1084:    else if (f->fixed_size)",
      "1085:     size = f->fixed_size;",
      "1086:    else",
      "1087:     size = 1;",
      "1089:    end = base + size - 1;",
      "1090:    if (!in_rmo_buf(base, end))",
      "1091:     goto err;",
      "1092:   }",
      "1094:   if (f->buf_idx2 != -1) {",
      "1095:    base = be32_to_cpu(args->args[f->buf_idx2]);",
      "1096:    if (f->size_idx2 != -1)",
      "1097:     size = be32_to_cpu(args->args[f->size_idx2]);",
      "1098:    else if (f->fixed_size)",
      "1099:     size = f->fixed_size;",
      "1100:    else",
      "1101:     size = 1;",
      "1102:    end = base + size - 1;",
      "1108:    if (!strcmp(f->name, \"ibm,configure-connector\") &&",
      "1109:        base == 0)",
      "1110:     return false;",
      "1112:    if (!in_rmo_buf(base, end))",
      "1113:     goto err;",
      "1114:   }",
      "1116:   return false;",
      "1117:  }",
      "1119: err:",
      "1120:  pr_err_ratelimited(\"sys_rtas: RTAS call blocked - exploit attempt?\\n\");",
      "1121:  pr_err_ratelimited(\"sys_rtas: token=0x%x, nargs=%d (called by %s)\\n\",",
      "1122:       token, nargs, current->comm);",
      "1123:  return true;",
      "1124: }",
      "1126: #else",
      "1128: static bool block_rtas_call(int token, int nargs,",
      "1129:        struct rtas_args *args)",
      "1130: {",
      "1131:  return false;",
      "1132: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1029:  args.rets = &args.args[nargs];",
      "1030:  memset(args.rets, 0, nret * sizeof(rtas_arg_t));",
      "1033:  if (token == ibm_suspend_me_token) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1173:  if (block_rtas_call(token, nargs, &args))",
      "1174:   return -EINVAL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1090:  unsigned long rtas_region = RTAS_INSTANTIATE_MAX;",
      "1091:  u32 base, size, entry;",
      "1092:  int no_base, no_size, no_entry;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1237: #ifdef CONFIG_PPC_RTAS_FILTER",
      "1238:  int i;",
      "1239: #endif",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1129: #ifdef CONFIG_RTAS_ERROR_LOGGING",
      "1130:  rtas_last_error_token = rtas_token(\"rtas-last-error\");",
      "1131: #endif",
      "1132: }",
      "1134: int __init early_init_dt_scan_rtas(unsigned long node,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1280: #ifdef CONFIG_PPC_RTAS_FILTER",
      "1281:  for (i = 0; i < ARRAY_SIZE(rtas_filters); i++) {",
      "1282:   rtas_filters[i].token = rtas_token(rtas_filters[i].name);",
      "1283:  }",
      "1284: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e5d56763525e65417dad0d46572b234fa0008e40",
      "candidate_info": {
        "commit_hash": "e5d56763525e65417dad0d46572b234fa0008e40",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e5d56763525e65417dad0d46572b234fa0008e40",
        "files": [
          "arch/powerpc/include/asm/rtas.h",
          "arch/powerpc/kernel/rtas-proc.c",
          "arch/powerpc/kernel/rtas.c"
        ],
        "message": "powerpc/rtas: rename RTAS_RMOBUF_MAX to RTAS_USER_REGION_SIZE\n\nRTAS_RMOBUF_MAX doesn't actually describe a \"maximum\" value in any\nsense. It represents the size of an area of memory set aside for user\nspace to use as work areas for certain RTAS calls.\n\nRename it to RTAS_USER_REGION_SIZE.\n\nSigned-off-by: Nathan Lynch <nathanl@linux.ibm.com>\nReviewed-by: Andrew Donnellan <ajd@linux.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20210408140630.205502-6-nathanl@linux.ibm.com",
        "before_after_code_files": [
          "arch/powerpc/include/asm/rtas.h||arch/powerpc/include/asm/rtas.h",
          "arch/powerpc/kernel/rtas-proc.c||arch/powerpc/kernel/rtas-proc.c",
          "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c"
          ],
          "candidate": [
            "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/include/asm/rtas.h||arch/powerpc/include/asm/rtas.h": [
          "File: arch/powerpc/include/asm/rtas.h -> arch/powerpc/include/asm/rtas.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #define RTAS_UNKNOWN_SERVICE (-1)",
          "",
          "[Removed Lines]",
          "23: #define RTAS_RMOBUF_MAX (64 * 1024)",
          "",
          "[Added Lines]",
          "23: #define RTAS_USER_REGION_SIZE (64 * 1024)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357: static inline int page_is_rtas_user_buf(unsigned long pfn)",
          "358: {",
          "359:  unsigned long paddr = (pfn << PAGE_SHIFT);",
          "361:   return 1;",
          "362:  return 0;",
          "363: }",
          "",
          "[Removed Lines]",
          "360:  if (paddr >= rtas_rmo_buf && paddr < (rtas_rmo_buf + RTAS_RMOBUF_MAX))",
          "",
          "[Added Lines]",
          "360:  if (paddr >= rtas_rmo_buf && paddr < (rtas_rmo_buf + RTAS_USER_REGION_SIZE))",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/rtas-proc.c||arch/powerpc/kernel/rtas-proc.c": [
          "File: arch/powerpc/kernel/rtas-proc.c -> arch/powerpc/kernel/rtas-proc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "768: static int ppc_rtas_rmo_buf_show(struct seq_file *m, void *v)",
          "769: {",
          "771:  return 0;",
          "772: }",
          "",
          "[Removed Lines]",
          "770:  seq_printf(m, \"%016lx %x\\n\", rtas_rmo_buf, RTAS_RMOBUF_MAX);",
          "",
          "[Added Lines]",
          "770:  seq_printf(m, \"%016lx %x\\n\", rtas_rmo_buf, RTAS_USER_REGION_SIZE);",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c": [
          "File: arch/powerpc/kernel/rtas.c -> arch/powerpc/kernel/rtas.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "987: static bool in_rmo_buf(u32 base, u32 end)",
          "988: {",
          "989:  return base >= rtas_rmo_buf &&",
          "991:   base <= end &&",
          "992:   end >= rtas_rmo_buf &&",
          "994: }",
          "996: static bool block_rtas_call(int token, int nargs,",
          "",
          "[Removed Lines]",
          "990:   base < (rtas_rmo_buf + RTAS_RMOBUF_MAX) &&",
          "993:   end < (rtas_rmo_buf + RTAS_RMOBUF_MAX);",
          "",
          "[Added Lines]",
          "990:   base < (rtas_rmo_buf + RTAS_USER_REGION_SIZE) &&",
          "993:   end < (rtas_rmo_buf + RTAS_USER_REGION_SIZE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1202:  if (firmware_has_feature(FW_FEATURE_LPAR))",
          "1203:   rtas_region = min(ppc64_rma_size, RTAS_INSTANTIATE_MAX);",
          "1204: #endif",
          "1206:        0, rtas_region);",
          "1207:  if (!rtas_rmo_buf)",
          "1208:   panic(\"ERROR: RTAS: Failed to allocate %lx bytes below %pa\\n\",",
          "",
          "[Removed Lines]",
          "1205:  rtas_rmo_buf = memblock_phys_alloc_range(RTAS_RMOBUF_MAX, PAGE_SIZE,",
          "",
          "[Added Lines]",
          "1205:  rtas_rmo_buf = memblock_phys_alloc_range(RTAS_USER_REGION_SIZE, PAGE_SIZE,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0649cdc8237943c15fc977e96033dc8ae28cc2bd",
      "candidate_info": {
        "commit_hash": "0649cdc8237943c15fc977e96033dc8ae28cc2bd",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0649cdc8237943c15fc977e96033dc8ae28cc2bd",
        "files": [
          "arch/powerpc/kernel/rtas.c"
        ],
        "message": "powerpc/rtas: move syscall filter setup into separate function\n\nReduce conditionally compiled sections within rtas_initialize() by\nmoving the filter table initialization into its own function already\nguarded by CONFIG_PPC_RTAS_FILTER. No behavior change intended.\n\nSigned-off-by: Nathan Lynch <nathanl@linux.ibm.com>\nReviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>\nAcked-by: Andrew Donnellan <ajd@linux.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20210408140630.205502-5-nathanl@linux.ibm.com",
        "before_after_code_files": [
          "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c"
          ],
          "candidate": [
            "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c": [
          "File: arch/powerpc/kernel/rtas.c -> arch/powerpc/kernel/rtas.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1051:  return true;",
          "1052: }",
          "1054: #else",
          "1056: static bool block_rtas_call(int token, int nargs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1054: static void __init rtas_syscall_filter_init(void)",
          "1055: {",
          "1056:  unsigned int i;",
          "1058:  for (i = 0; i < ARRAY_SIZE(rtas_filters); i++)",
          "1059:   rtas_filters[i].token = rtas_token(rtas_filters[i].name);",
          "1060: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1059:  return false;",
          "1060: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1070: static void __init rtas_syscall_filter_init(void)",
          "1071: {",
          "1072: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1162:  unsigned long rtas_region = RTAS_INSTANTIATE_MAX;",
          "1163:  u32 base, size, entry;",
          "1164:  int no_base, no_size, no_entry;",
          "",
          "[Removed Lines]",
          "1165: #ifdef CONFIG_PPC_RTAS_FILTER",
          "1166:  int i;",
          "1167: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1203:  rtas_last_error_token = rtas_token(\"rtas-last-error\");",
          "1204: #endif",
          "1211: }",
          "1213: int __init early_init_dt_scan_rtas(unsigned long node,",
          "",
          "[Removed Lines]",
          "1206: #ifdef CONFIG_PPC_RTAS_FILTER",
          "1207:  for (i = 0; i < ARRAY_SIZE(rtas_filters); i++) {",
          "1208:   rtas_filters[i].token = rtas_token(rtas_filters[i].name);",
          "1209:  }",
          "1210: #endif",
          "",
          "[Added Lines]",
          "1215:  rtas_syscall_filter_init();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f10881a46f8914428110d110140a455c66bdf27b",
      "candidate_info": {
        "commit_hash": "f10881a46f8914428110d110140a455c66bdf27b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f10881a46f8914428110d110140a455c66bdf27b",
        "files": [
          "arch/powerpc/kernel/rtas.c"
        ],
        "message": "powerpc/rtas: Fix typo of ibm,open-errinjct in RTAS filter\n\nCommit bd59380c5ba4 (\"powerpc/rtas: Restrict RTAS requests from userspace\")\nintroduced the following error when invoking the errinjct userspace\ntool:\n\n  [root@ltcalpine2-lp5 librtas]# errinjct open\n  [327884.071171] sys_rtas: RTAS call blocked - exploit attempt?\n  [327884.071186] sys_rtas: token=0x26, nargs=0 (called by errinjct)\n  errinjct: Could not open RTAS error injection facility\n  errinjct: librtas: open: Unexpected I/O error\n\nThe entry for ibm,open-errinjct in rtas_filter array has a typo where\nthe \"j\" is omitted in the rtas call name. After fixing this typo the\nerrinjct tool functions again as expected.\n\n  [root@ltcalpine2-lp5 linux]# errinjct open\n  RTAS error injection facility open, token = 1\n\nFixes: bd59380c5ba4 (\"powerpc/rtas: Restrict RTAS requests from userspace\")\nCc: stable@vger.kernel.org\nSigned-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20201208195434.8289-1-tyreld@linux.ibm.com",
        "before_after_code_files": [
          "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c"
          ],
          "candidate": [
            "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/kernel/rtas.c||arch/powerpc/kernel/rtas.c": [
          "File: arch/powerpc/kernel/rtas.c -> arch/powerpc/kernel/rtas.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "957:  { \"ibm,display-message\", -1, 0, -1, -1, -1 },",
          "958:  { \"ibm,errinjct\", -1, 2, -1, -1, -1, 1024 },",
          "959:  { \"ibm,close-errinjct\", -1, -1, -1, -1, -1 },",
          "961:  { \"ibm,get-config-addr-info2\", -1, -1, -1, -1, -1 },",
          "962:  { \"ibm,get-dynamic-sensor-state\", -1, 1, -1, -1, -1 },",
          "963:  { \"ibm,get-indices\", -1, 2, 3, -1, -1 },",
          "",
          "[Removed Lines]",
          "960:  { \"ibm,open-errinct\", -1, -1, -1, -1, -1 },",
          "",
          "[Added Lines]",
          "960:  { \"ibm,open-errinjct\", -1, -1, -1, -1, -1 },",
          "",
          "---------------"
        ]
      }
    }
  ]
}