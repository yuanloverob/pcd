{
  "cve_id": "CVE-2016-7124",
  "cve_desc": "ext/standard/var_unserializer.c in PHP before 5.6.25 and 7.x before 7.0.10 mishandles certain invalid objects, which allows remote attackers to cause a denial of service or possibly have unspecified other impact via crafted serialized data that leads to a (1) __destruct call or (2) magic method call.",
  "repo": "php/php-src",
  "patch_hash": "448c9be157f4147e121f1a2a524536c75c9c6059",
  "patch_info": {
    "commit_hash": "448c9be157f4147e121f1a2a524536c75c9c6059",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/448c9be157f4147e121f1a2a524536c75c9c6059",
    "files": [
      "ext/standard/tests/strings/bug72663.phpt",
      "ext/standard/tests/strings/bug72663_2.phpt",
      "ext/standard/var_unserializer.c",
      "ext/standard/var_unserializer.re"
    ],
    "message": "Fix bug #72663 - destroy broken object when unserializing",
    "before_after_code_files": [
      "ext/standard/tests/strings/bug72663.phpt||ext/standard/tests/strings/bug72663.phpt",
      "ext/standard/tests/strings/bug72663_2.phpt||ext/standard/tests/strings/bug72663_2.phpt",
      "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
      "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
    ]
  },
  "patch_diff": {
    "ext/standard/tests/strings/bug72663.phpt||ext/standard/tests/strings/bug72663.phpt": [
      "File: ext/standard/tests/strings/bug72663.phpt -> ext/standard/tests/strings/bug72663.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: --TEST--",
      "2: Bug #72663: Create an Unexpected Object and Don't Invoke __wakeup() in Deserialization",
      "3: --FILE--",
      "4: <?php",
      "5: class obj implements Serializable {",
      "6:     var $data;",
      "7:     function serialize() {",
      "8:         return serialize($this->data);",
      "9:     }",
      "10:     function unserialize($data) {",
      "11:         $this->data = unserialize($data);",
      "12:     }",
      "13: }",
      "15: $inner = 'a:1:{i:0;O:9:\"Exception\":2:{s:7:\"'.\"\\0\".'*'.\"\\0\".'file\";R:4;}';",
      "16: $exploit = 'a:2:{i:0;C:3:\"obj\":'.strlen($inner).':{'.$inner.'}i:1;R:4;}';",
      "18: $data = unserialize($exploit);",
      "19: echo $data[1];",
      "20: ?>",
      "21: DONE",
      "22: --EXPECTF--",
      "23: Notice: unserialize(): Unexpected end of serialized data in %sbug72663.php on line %d",
      "25: Notice: unserialize(): Error at offset 46 of 47 bytes in %sbug72663.php on line %d",
      "26: DONE",
      "",
      "---------------"
    ],
    "ext/standard/tests/strings/bug72663_2.phpt||ext/standard/tests/strings/bug72663_2.phpt": [
      "File: ext/standard/tests/strings/bug72663_2.phpt -> ext/standard/tests/strings/bug72663_2.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: --TEST--",
      "2: Bug #72663: Create an Unexpected Object and Don't Invoke __wakeup() in Deserialization",
      "3: --FILE--",
      "4: <?php",
      "6: ini_set('session.serialize_handler', 'php_serialize');",
      "7: session_start();",
      "8: $sess = 'O:9:\"Exception\":2:{s:7:\"'.\"\\0\".'*'.\"\\0\".'file\";R:1;}';",
      "9: session_decode($sess);",
      "10: var_dump($_SESSION);",
      "11: ?>",
      "12: DONE",
      "13: --EXPECTF--",
      "14: Notice: session_decode(): Unexpected end of serialized data in %sbug72663_2.php on line %d",
      "15: array(0) {",
      "16: }",
      "17: DONE",
      "",
      "---------------"
    ],
    "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
      "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "434:  }",
      "436:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_OBJPROP_PP(rval), elements, 1)) {",
      "437:   return 0;",
      "438:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "438:      zend_hash_clean(Z_OBJPROP_PP(rval));",
      "439:      ZVAL_NULL(*rval);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "486: {",
      "487:  YYCTYPE yych;",
      "488:  static const unsigned char yybm[] = {",
      "",
      "[Removed Lines]",
      "485: #line 486 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "488: #line 489 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "542:  yych = *(YYMARKER = ++YYCURSOR);",
      "543:  if (yych == ':') goto yy95;",
      "544: yy3:",
      "546:  { return 0; }",
      "548: yy4:",
      "549:  yych = *(YYMARKER = ++YYCURSOR);",
      "550:  if (yych == ':') goto yy89;",
      "",
      "[Removed Lines]",
      "545: #line 851 \"ext/standard/var_unserializer.re\"",
      "547: #line 548 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "548: #line 854 \"ext/standard/var_unserializer.re\"",
      "550: #line 551 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "587:  goto yy3;",
      "588: yy14:",
      "589:  ++YYCURSOR;",
      "591:  {",
      "593:  php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Unexpected end of serialized data\");",
      "595: }",
      "597: yy16:",
      "598:  yych = *++YYCURSOR;",
      "599:  goto yy3;",
      "",
      "[Removed Lines]",
      "590: #line 845 \"ext/standard/var_unserializer.re\"",
      "596: #line 597 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "593: #line 848 \"ext/standard/var_unserializer.re\"",
      "599: #line 600 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "619:  if (yybm[0+yych] & 128) {",
      "620:   goto yy20;",
      "621:  }",
      "623:  yych = *++YYCURSOR;",
      "624:  if (yych != '\"') goto yy18;",
      "625:  ++YYCURSOR;",
      "627:  {",
      "628:  size_t len, len2, len3, maxlen;",
      "629:  long elements;",
      "",
      "[Removed Lines]",
      "622:  if (yych != ':') goto yy18;",
      "626: #line 698 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "625:  if (yych <= '/') goto yy18;",
      "626:  if (yych >= ';') goto yy18;",
      "630: #line 701 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "771:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
      "772: }",
      "774: yy25:",
      "775:  yych = *++YYCURSOR;",
      "776:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "773: #line 774 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "777: #line 778 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "795:  yych = *++YYCURSOR;",
      "796:  if (yych != '\"') goto yy18;",
      "797:  ++YYCURSOR;",
      "799:  {",
      "800:     if (!var_hash) return 0;",
      "",
      "[Removed Lines]",
      "798: #line 689 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "802: #line 692 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "804:  return object_common2(UNSERIALIZE_PASSTHRU,",
      "805:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
      "806: }",
      "808: yy32:",
      "809:  yych = *++YYCURSOR;",
      "810:  if (yych == '+') goto yy33;",
      "",
      "[Removed Lines]",
      "807: #line 808 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "811: #line 812 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "825:  yych = *++YYCURSOR;",
      "826:  if (yych != '{') goto yy18;",
      "827:  ++YYCURSOR;",
      "829:  {",
      "830:  long elements = parse_iv(start + 2);",
      "",
      "[Removed Lines]",
      "828: #line 668 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "832: #line 671 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "847:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
      "848: }",
      "850: yy39:",
      "851:  yych = *++YYCURSOR;",
      "852:  if (yych == '+') goto yy40;",
      "",
      "[Removed Lines]",
      "849: #line 850 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "853: #line 854 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "867:  yych = *++YYCURSOR;",
      "868:  if (yych != '\"') goto yy18;",
      "869:  ++YYCURSOR;",
      "871:  {",
      "872:  size_t len, maxlen;",
      "873:  char *str;",
      "",
      "[Removed Lines]",
      "870: #line 633 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "874: #line 636 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "902:  ZVAL_STRINGL(*rval, str, len, 0);",
      "903:  return 1;",
      "904: }",
      "906: yy46:",
      "907:  yych = *++YYCURSOR;",
      "908:  if (yych == '+') goto yy47;",
      "",
      "[Removed Lines]",
      "905: #line 906 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "909: #line 910 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "923:  yych = *++YYCURSOR;",
      "924:  if (yych != '\"') goto yy18;",
      "925:  ++YYCURSOR;",
      "927:  {",
      "928:  size_t len, maxlen;",
      "929:  char *str;",
      "",
      "[Removed Lines]",
      "926: #line 600 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "930: #line 603 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "956:  ZVAL_STRINGL(*rval, str, len, 1);",
      "957:  return 1;",
      "958: }",
      "960: yy53:",
      "961:  yych = *++YYCURSOR;",
      "962:  if (yych <= '/') {",
      "",
      "[Removed Lines]",
      "959: #line 960 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "963: #line 964 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1044:  }",
      "1045: yy63:",
      "1046:  ++YYCURSOR;",
      "1048:  {",
      "1049: #if SIZEOF_LONG == 4",
      "1050: use_double:",
      "",
      "[Removed Lines]",
      "1047: #line 590 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1051: #line 593 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1054:  ZVAL_DOUBLE(*rval, zend_strtod((const char *)start + 2, NULL));",
      "1055:  return 1;",
      "1056: }",
      "1058: yy65:",
      "1059:  yych = *++YYCURSOR;",
      "1060:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "1057: #line 1058 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1061: #line 1062 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1113:  yych = *++YYCURSOR;",
      "1114:  if (yych != ';') goto yy18;",
      "1115:  ++YYCURSOR;",
      "1117:  {",
      "1119:  INIT_PZVAL(*rval);",
      "",
      "[Removed Lines]",
      "1116: #line 575 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1120: #line 578 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1129:  return 1;",
      "1130: }",
      "1132: yy76:",
      "1133:  yych = *++YYCURSOR;",
      "1134:  if (yych == 'N') goto yy73;",
      "",
      "[Removed Lines]",
      "1131: #line 1132 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1135: #line 1136 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1155:  if (yych <= '9') goto yy79;",
      "1156:  if (yych != ';') goto yy18;",
      "1157:  ++YYCURSOR;",
      "1159:  {",
      "1160: #if SIZEOF_LONG == 4",
      "1161:  int digits = YYCURSOR - start - 3;",
      "",
      "[Removed Lines]",
      "1158: #line 548 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1162: #line 551 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1182:  ZVAL_LONG(*rval, parse_iv(start + 2));",
      "1183:  return 1;",
      "1184: }",
      "1186: yy83:",
      "1187:  yych = *++YYCURSOR;",
      "1188:  if (yych <= '/') goto yy18;",
      "",
      "[Removed Lines]",
      "1185: #line 1186 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1189: #line 1190 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1190:  yych = *++YYCURSOR;",
      "1191:  if (yych != ';') goto yy18;",
      "1192:  ++YYCURSOR;",
      "1194:  {",
      "1196:  INIT_PZVAL(*rval);",
      "1197:  ZVAL_BOOL(*rval, parse_iv(start + 2));",
      "1198:  return 1;",
      "1199: }",
      "1201: yy87:",
      "1202:  ++YYCURSOR;",
      "1204:  {",
      "1206:  INIT_PZVAL(*rval);",
      "1207:  ZVAL_NULL(*rval);",
      "1208:  return 1;",
      "1209: }",
      "1211: yy89:",
      "1212:  yych = *++YYCURSOR;",
      "1213:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "1193: #line 541 \"ext/standard/var_unserializer.re\"",
      "1200: #line 1201 \"ext/standard/var_unserializer.c\"",
      "1203: #line 534 \"ext/standard/var_unserializer.re\"",
      "1210: #line 1211 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1197: #line 544 \"ext/standard/var_unserializer.re\"",
      "1204: #line 1205 \"ext/standard/var_unserializer.c\"",
      "1207: #line 537 \"ext/standard/var_unserializer.re\"",
      "1214: #line 1215 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1230:  if (yych <= '9') goto yy91;",
      "1231:  if (yych != ';') goto yy18;",
      "1232:  ++YYCURSOR;",
      "1234:  {",
      "1235:  long id;",
      "",
      "[Removed Lines]",
      "1233: #line 511 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1237: #line 514 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1254:  return 1;",
      "1255: }",
      "1257: yy95:",
      "1258:  yych = *++YYCURSOR;",
      "1259:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "1256: #line 1257 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1260: #line 1261 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1276:  if (yych <= '9') goto yy97;",
      "1277:  if (yych != ';') goto yy18;",
      "1278:  ++YYCURSOR;",
      "1280:  {",
      "1281:  long id;",
      "",
      "[Removed Lines]",
      "1279: #line 490 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1283: #line 493 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1298:  return 1;",
      "1299: }",
      "1301: }",
      "1305:  return 0;",
      "",
      "[Removed Lines]",
      "1300: #line 1301 \"ext/standard/var_unserializer.c\"",
      "1302: #line 853 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1304: #line 1305 \"ext/standard/var_unserializer.c\"",
      "1306: #line 856 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------"
    ],
    "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
      "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
      "--- Hunk 1 ---",
      "[Context before]",
      "438:  }",
      "440:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_OBJPROP_PP(rval), elements, 1)) {",
      "441:   return 0;",
      "442:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "442:      zend_hash_clean(Z_OBJPROP_PP(rval));",
      "443:      ZVAL_NULL(*rval);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f7caa2bd8e72d51201b90158c34219d6feefb4ff",
      "candidate_info": {
        "commit_hash": "f7caa2bd8e72d51201b90158c34219d6feefb4ff",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/f7caa2bd8e72d51201b90158c34219d6feefb4ff",
        "files": [
          "ext/standard/php_var.h",
          "ext/standard/var.c",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "Hide (un)serialize data from ABI\n\nThe (UN)SERIALIZE_INIT/DESTROY macros now go through non-inlined\nfunctions, so any changes to them will apply to extensions without\nrebuilds.\n\nAdditionally, the (un)serialize_data structures are now no longer\nexported.\n\nThis means that we are allowed to change these structures in patch\nreleases without breaking the ABI.",
        "before_after_code_files": [
          "ext/standard/php_var.h||ext/standard/php_var.h",
          "ext/standard/var.c||ext/standard/var.c",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/php_var.h||ext/standard/php_var.h": [
          "File: ext/standard/php_var.h -> ext/standard/php_var.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: PHPAPI void php_debug_zval_dump(zval *struc, int level);",
          "53: typedef struct php_serialize_data *php_serialize_data_t;",
          "54: typedef struct php_unserialize_data *php_unserialize_data_t;",
          "",
          "[Removed Lines]",
          "41: struct php_serialize_data {",
          "42:  HashTable ht;",
          "43:  uint32_t n;",
          "44: };",
          "46: struct php_unserialize_data {",
          "47:  void *first;",
          "48:  void *last;",
          "49:  void *first_dtor;",
          "50:  void *last_dtor;",
          "51: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: PHPAPI int php_var_unserialize_intern(zval *rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash);",
          "60: PHPAPI int php_var_unserialize_ex(zval *rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash, HashTable *classes);",
          "62: #define PHP_VAR_SERIALIZE_INIT(d) \\",
          "79: #define PHP_VAR_SERIALIZE_DESTROY(d) \\",
          "91: #define PHP_VAR_UNSERIALIZE_INIT(d) \\",
          "106: #define PHP_VAR_UNSERIALIZE_DESTROY(d) \\",
          "118: PHPAPI void var_replace(php_unserialize_data_t *var_hash, zval *ozval, zval *nzval);",
          "119: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hash, zval *val);",
          "",
          "[Removed Lines]",
          "63: do  { \\",
          "65:  if (BG(serialize_lock) || !BG(serialize).level) { \\",
          "66:   (d) = (php_serialize_data_t) emalloc(sizeof(struct php_serialize_data)); \\",
          "67:   zend_hash_init(&(d)->ht, 16, NULL, ZVAL_PTR_DTOR, 0); \\",
          "68:   (d)->n = 0; \\",
          "69:   if (!BG(serialize_lock)) { \\",
          "70:    BG(serialize).data = d; \\",
          "71:    BG(serialize).level = 1; \\",
          "72:   } \\",
          "73:  } else { \\",
          "74:   (d) = BG(serialize).data; \\",
          "75:   ++BG(serialize).level; \\",
          "76:  } \\",
          "77: } while(0)",
          "80: do { \\",
          "82:  if (BG(serialize_lock) || BG(serialize).level == 1) { \\",
          "83:   zend_hash_destroy(&(d)->ht); \\",
          "84:   efree((d)); \\",
          "85:  } \\",
          "86:  if (!BG(serialize_lock) && !--BG(serialize).level) { \\",
          "87:   BG(serialize).data = NULL; \\",
          "88:  } \\",
          "89: } while (0)",
          "92: do { \\",
          "94:  if (BG(serialize_lock) || !BG(unserialize).level) { \\",
          "95:   (d) = (php_unserialize_data_t)ecalloc(1, sizeof(struct php_unserialize_data)); \\",
          "96:   if (!BG(serialize_lock)) { \\",
          "97:    BG(unserialize).data = (d); \\",
          "98:    BG(unserialize).level = 1; \\",
          "99:   } \\",
          "100:  } else { \\",
          "101:   (d) = BG(unserialize).data; \\",
          "102:   ++BG(unserialize).level; \\",
          "103:  } \\",
          "104: } while (0)",
          "107: do { \\",
          "109:  if (BG(serialize_lock) || BG(unserialize).level == 1) { \\",
          "110:   var_destroy(&(d)); \\",
          "111:   efree((d)); \\",
          "112:  } \\",
          "113:  if (!BG(serialize_lock) && !--BG(unserialize).level) { \\",
          "114:   BG(unserialize).data = NULL; \\",
          "115:  } \\",
          "116: } while (0)",
          "",
          "[Added Lines]",
          "50: PHPAPI php_serialize_data_t php_var_serialize_init(void);",
          "51: PHPAPI void php_var_serialize_destroy(php_serialize_data_t d);",
          "52: PHPAPI php_unserialize_data_t php_var_unserialize_init(void);",
          "53: PHPAPI void php_var_unserialize_destroy(php_unserialize_data_t d);",
          "56:  (d) = php_var_serialize_init()",
          "59:  php_var_serialize_destroy(d)",
          "62:  (d) = php_var_unserialize_init()",
          "65:  php_var_unserialize_destroy(d)",
          "",
          "---------------"
        ],
        "ext/standard/var.c||ext/standard/var.c": [
          "File: ext/standard/var.c -> ext/standard/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"php_incomplete_class.h\"",
          "36: #define COMMON (is_ref ? \"&\" : \"\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: struct php_serialize_data {",
          "37:  HashTable ht;",
          "38:  uint32_t n;",
          "39: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993: }",
          "998: PHP_FUNCTION(serialize)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1001: PHPAPI php_serialize_data_t php_var_serialize_init() {",
          "1002:  struct php_serialize_data *d;",
          "1004:  if (BG(serialize_lock) || !BG(serialize).level) {",
          "1005:   d = emalloc(sizeof(struct php_serialize_data));",
          "1006:   zend_hash_init(&d->ht, 16, NULL, ZVAL_PTR_DTOR, 0);",
          "1007:   d->n = 0;",
          "1008:   if (!BG(serialize_lock)) {",
          "1009:    BG(serialize).data = d;",
          "1010:    BG(serialize).level = 1;",
          "1011:   }",
          "1012:  } else {",
          "1013:   d = BG(serialize).data;",
          "1014:   ++BG(serialize).level;",
          "1015:  }",
          "1016:  return d;",
          "1017: }",
          "1019: PHPAPI void php_var_serialize_destroy(php_serialize_data_t d) {",
          "1021:  if (BG(serialize_lock) || BG(serialize).level == 1) {",
          "1022:   zend_hash_destroy(&d->ht);",
          "1023:   efree(d);",
          "1024:  }",
          "1025:  if (!BG(serialize_lock) && !--BG(serialize).level) {",
          "1026:   BG(serialize).data = NULL;",
          "1027:  }",
          "1028: }",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"ext/standard/php_var.h\"",
          "25: #include \"php_incomplete_class.h\"",
          "28: #define VAR_ENTRIES_MAX 1024",
          "29: #define VAR_ENTRIES_DBG 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: struct php_unserialize_data {",
          "28:  void *first;",
          "29:  void *last;",
          "30:  void *first_dtor;",
          "31:  void *last_dtor;",
          "32: };",
          "34: PHPAPI php_unserialize_data_t php_var_unserialize_init() {",
          "35:  php_unserialize_data_t d;",
          "37:  if (BG(serialize_lock) || !BG(unserialize).level) {",
          "38:   d = ecalloc(1, sizeof(struct php_unserialize_data));",
          "39:   if (!BG(serialize_lock)) {",
          "40:    BG(unserialize).data = d;",
          "41:    BG(unserialize).level = 1;",
          "42:   }",
          "43:  } else {",
          "44:   d = BG(unserialize).data;",
          "45:   ++BG(unserialize).level;",
          "46:  }",
          "47:  return d;",
          "48: }",
          "50: PHPAPI void php_var_unserialize_destroy(php_unserialize_data_t d) {",
          "52:  if (BG(serialize_lock) || BG(unserialize).level == 1) {",
          "53:   var_destroy(&d);",
          "54:   efree(d);",
          "55:  }",
          "56:  if (!BG(serialize_lock) && !--BG(unserialize).level) {",
          "57:   BG(unserialize).data = NULL;",
          "58:  }",
          "59: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238: #define YYMARKER marker",
          "",
          "[Removed Lines]",
          "241: #line 246 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "276: #line 281 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "514:  start = cursor;",
          "518: {",
          "519:  YYCTYPE yych;",
          "520:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "517: #line 518 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "552: #line 553 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "551:     0,   0,   0,   0,   0,   0,   0,   0,",
          "552:     0,   0,   0,   0,   0,   0,   0,   0,",
          "553:  };",
          "555:  if ((YYLIMIT - YYCURSOR) < 7) YYFILL(7);",
          "556:  yych = *YYCURSOR;",
          "557:  switch (yych) {",
          "558:  case 'C':",
          "560:  case 'N': goto yy5;",
          "567:  case 'o': goto yy12;",
          "572:  }",
          "573: yy2:",
          "576: yy3:",
          "578:  { return 0; }",
          "580: yy4:",
          "581:  yych = *(YYMARKER = ++YYCURSOR);",
          "583:  goto yy3;",
          "584: yy5:",
          "585:  yych = *++YYCURSOR;",
          "587:  goto yy3;",
          "588: yy6:",
          "589:  yych = *(YYMARKER = ++YYCURSOR);",
          "591:  goto yy3;",
          "592: yy7:",
          "593:  yych = *(YYMARKER = ++YYCURSOR);",
          "595:  goto yy3;",
          "596: yy8:",
          "597:  yych = *(YYMARKER = ++YYCURSOR);",
          "599:  goto yy3;",
          "600: yy9:",
          "601:  yych = *(YYMARKER = ++YYCURSOR);",
          "603:  goto yy3;",
          "604: yy10:",
          "605:  yych = *(YYMARKER = ++YYCURSOR);",
          "607:  goto yy3;",
          "608: yy11:",
          "609:  yych = *(YYMARKER = ++YYCURSOR);",
          "611:  goto yy3;",
          "612: yy12:",
          "613:  yych = *(YYMARKER = ++YYCURSOR);",
          "615:  goto yy3;",
          "616: yy13:",
          "617:  yych = *(YYMARKER = ++YYCURSOR);",
          "619:  goto yy3;",
          "620: yy14:",
          "621:  ++YYCURSOR;",
          "623:  {",
          "625:  php_error_docref(NULL, E_NOTICE, \"Unexpected end of serialized data\");",
          "627: }",
          "632: yy17:",
          "633:  yych = *++YYCURSOR;",
          "634:  if (yybm[0+yych] & 128) {",
          "636:  }",
          "638: yy18:",
          "639:  YYCURSOR = YYMARKER;",
          "640:  goto yy3;",
          "641: yy19:",
          "642:  yych = *++YYCURSOR;",
          "645:  }",
          "646:  goto yy18;",
          "655:  yych = *++YYCURSOR;",
          "773:   }",
          "789:   }",
          "792:  }",
          "798:  }",
          "805:  yych = *++YYCURSOR;",
          "806:  if (yych <= ',') {",
          "808:  } else {",
          "810:   if (yych <= '/') goto yy18;",
          "812:   goto yy18;",
          "813:  }",
          "815:  yych = *++YYCURSOR;",
          "816:  if (yych <= '/') goto yy18;",
          "819:  ++YYCURSOR;",
          "820:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "821:  yych = *YYCURSOR;",
          "822:  if (yych <= '/') goto yy18;",
          "825:  yych = *++YYCURSOR;",
          "827:  ++YYCURSOR;",
          "839:  if (yych <= '/') goto yy18;",
          "840:  if (yych <= '9') goto yy34;",
          "841:  goto yy18;",
          "843:  yych = *++YYCURSOR;",
          "844:  if (yych <= '/') goto yy18;",
          "845:  if (yych >= ':') goto yy18;",
          "847:  ++YYCURSOR;",
          "848:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "849:  yych = *YYCURSOR;",
          "850:  if (yych <= '/') goto yy18;",
          "853:  yych = *++YYCURSOR;",
          "855:  ++YYCURSOR;",
          "872:  }",
          "876:  }",
          "882:  yych = *++YYCURSOR;",
          "884:  if (yych <= '/') goto yy18;",
          "886:  goto yy18;",
          "888:  yych = *++YYCURSOR;",
          "889:  if (yych <= '/') goto yy18;",
          "890:  if (yych >= ':') goto yy18;",
          "892:  ++YYCURSOR;",
          "893:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "894:  yych = *YYCURSOR;",
          "895:  if (yych <= '/') goto yy18;",
          "898:  yych = *++YYCURSOR;",
          "900:  ++YYCURSOR;",
          "939:  if (yych <= '/') goto yy18;",
          "941:  goto yy18;",
          "943:  yych = *++YYCURSOR;",
          "944:  if (yych <= '/') goto yy18;",
          "945:  if (yych >= ':') goto yy18;",
          "947:  ++YYCURSOR;",
          "948:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "949:  yych = *YYCURSOR;",
          "950:  if (yych <= '/') goto yy18;",
          "953:  yych = *++YYCURSOR;",
          "955:  ++YYCURSOR;",
          "957:  {",
          "974:   return 0;",
          "975:  }",
          "980:  }",
          "986:  return 1;",
          "987: }",
          "1009:  yych = *++YYCURSOR;",
          "1011:  goto yy18;",
          "1022:  yych = *++YYCURSOR;",
          "1024:  goto yy18;",
          "1031:  ++YYCURSOR;",
          "1058:  ++YYCURSOR;",
          "1059:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1060:  yych = *YYCURSOR;",
          "1061:  if (yych <= ';') {",
          "1062:   if (yych <= '/') goto yy18;",
          "1064:   if (yych <= ':') goto yy18;",
          "1065:  } else {",
          "1066:   if (yych <= 'E') {",
          "1067:    if (yych <= 'D') goto yy18;",
          "1069:   } else {",
          "1071:    goto yy18;",
          "1072:   }",
          "1073:  }",
          "1075:  ++YYCURSOR;",
          "1077:  {",
          "1078: #if SIZEOF_ZEND_LONG == 4",
          "1079: use_double:",
          "",
          "[Removed Lines]",
          "559:  case 'O': goto yy13;",
          "561:  case 'R': goto yy2;",
          "562:  case 'S': goto yy10;",
          "563:  case 'a': goto yy11;",
          "564:  case 'b': goto yy6;",
          "565:  case 'd': goto yy8;",
          "566:  case 'i': goto yy7;",
          "568:  case 'r': goto yy4;",
          "569:  case 's': goto yy9;",
          "570:  case '}': goto yy14;",
          "571:  default: goto yy16;",
          "574:  yych = *(YYMARKER = ++YYCURSOR);",
          "575:  if (yych == ':') goto yy95;",
          "577: #line 884 \"ext/standard/var_unserializer.re\"",
          "579: #line 580 \"ext/standard/var_unserializer.c\"",
          "582:  if (yych == ':') goto yy89;",
          "586:  if (yych == ';') goto yy87;",
          "590:  if (yych == ':') goto yy83;",
          "594:  if (yych == ':') goto yy77;",
          "598:  if (yych == ':') goto yy53;",
          "602:  if (yych == ':') goto yy46;",
          "606:  if (yych == ':') goto yy39;",
          "610:  if (yych == ':') goto yy32;",
          "614:  if (yych == ':') goto yy25;",
          "618:  if (yych == ':') goto yy17;",
          "622: #line 878 \"ext/standard/var_unserializer.re\"",
          "628: #line 629 \"ext/standard/var_unserializer.c\"",
          "629: yy16:",
          "630:  yych = *++YYCURSOR;",
          "631:  goto yy3;",
          "635:   goto yy20;",
          "637:  if (yych == '+') goto yy19;",
          "643:  if (yybm[0+yych] & 128) {",
          "644:   goto yy20;",
          "647: yy20:",
          "648:  ++YYCURSOR;",
          "649:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "650:  yych = *YYCURSOR;",
          "651:  if (yybm[0+yych] & 128) {",
          "652:   goto yy20;",
          "653:  }",
          "654:  if (yych != ':') goto yy18;",
          "656:  if (yych != '\"') goto yy18;",
          "657:  ++YYCURSOR;",
          "658: #line 733 \"ext/standard/var_unserializer.re\"",
          "659:  {",
          "660:  size_t len, len2, len3, maxlen;",
          "661:  zend_long elements;",
          "662:  char *str;",
          "663:  zend_string *class_name;",
          "664:  zend_class_entry *ce;",
          "665:  int incomplete_class = 0;",
          "667:  int custom_object = 0;",
          "669:  zval user_func;",
          "670:  zval retval;",
          "671:  zval args[1];",
          "673:     if (!var_hash) return 0;",
          "674:  if (*start == 'C') {",
          "675:   custom_object = 1;",
          "676:  }",
          "678:  len2 = len = parse_uiv(start + 2);",
          "679:  maxlen = max - YYCURSOR;",
          "680:  if (maxlen < len || len == 0) {",
          "682:   return 0;",
          "683:  }",
          "685:  str = (char*)YYCURSOR;",
          "687:  YYCURSOR += len;",
          "689:  if (*(YYCURSOR) != '\"') {",
          "691:   return 0;",
          "692:  }",
          "693:  if (*(YYCURSOR+1) != ':') {",
          "695:   return 0;",
          "696:  }",
          "698:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "699:  if (len3 != len)",
          "700:  {",
          "702:   return 0;",
          "703:  }",
          "705:  class_name = zend_string_init(str, len, 0);",
          "707:  do {",
          "708:   if(!unserialize_allowed_class(class_name, classes)) {",
          "709:    incomplete_class = 1;",
          "710:    ce = PHP_IC_ENTRY;",
          "711:    break;",
          "712:   }",
          "715:   BG(serialize_lock)++;",
          "716:   ce = zend_lookup_class(class_name);",
          "717:   if (ce) {",
          "718:    BG(serialize_lock)--;",
          "719:    if (EG(exception)) {",
          "720:     zend_string_release(class_name);",
          "721:     return 0;",
          "722:    }",
          "723:    break;",
          "724:   }",
          "725:   BG(serialize_lock)--;",
          "727:   if (EG(exception)) {",
          "728:    zend_string_release(class_name);",
          "729:    return 0;",
          "730:   }",
          "733:   if ((PG(unserialize_callback_func) == NULL) || (PG(unserialize_callback_func)[0] == '\\0')) {",
          "734:    incomplete_class = 1;",
          "735:    ce = PHP_IC_ENTRY;",
          "736:    break;",
          "737:   }",
          "740:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "742:   ZVAL_STR_COPY(&args[0], class_name);",
          "743:   BG(serialize_lock)++;",
          "744:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL) != SUCCESS) {",
          "745:    BG(serialize_lock)--;",
          "746:    if (EG(exception)) {",
          "747:     zend_string_release(class_name);",
          "748:     zval_ptr_dtor(&user_func);",
          "749:     zval_ptr_dtor(&args[0]);",
          "750:     return 0;",
          "751:    }",
          "752:    php_error_docref(NULL, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "753:    incomplete_class = 1;",
          "754:    ce = PHP_IC_ENTRY;",
          "755:    zval_ptr_dtor(&user_func);",
          "756:    zval_ptr_dtor(&args[0]);",
          "757:    break;",
          "758:   }",
          "759:   BG(serialize_lock)--;",
          "760:   zval_ptr_dtor(&retval);",
          "761:   if (EG(exception)) {",
          "762:    zend_string_release(class_name);",
          "763:    zval_ptr_dtor(&user_func);",
          "764:    zval_ptr_dtor(&args[0]);",
          "765:    return 0;",
          "766:   }",
          "769:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "770:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "771:    incomplete_class = 1;",
          "772:    ce = PHP_IC_ENTRY;",
          "775:   zval_ptr_dtor(&user_func);",
          "776:   zval_ptr_dtor(&args[0]);",
          "777:   break;",
          "778:  } while (1);",
          "782:  if (custom_object) {",
          "783:   int ret;",
          "785:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "787:   if (ret && incomplete_class) {",
          "788:    php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "790:   zend_string_release(class_name);",
          "791:   return ret;",
          "794:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "796:  if (incomplete_class) {",
          "797:   php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "799:  zend_string_release(class_name);",
          "801:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "802: }",
          "803: #line 804 \"ext/standard/var_unserializer.c\"",
          "804: yy25:",
          "807:   if (yych != '+') goto yy18;",
          "809:   if (yych <= '-') goto yy26;",
          "811:   if (yych <= '9') goto yy27;",
          "814: yy26:",
          "817:  if (yych >= ':') goto yy18;",
          "818: yy27:",
          "823:  if (yych <= '9') goto yy27;",
          "824:  if (yych >= ';') goto yy18;",
          "826:  if (yych != '\"') goto yy18;",
          "828: #line 726 \"ext/standard/var_unserializer.re\"",
          "829:  {",
          "830:     if (!var_hash) return 0;",
          "832:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "833:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "834: }",
          "835: #line 836 \"ext/standard/var_unserializer.c\"",
          "836: yy32:",
          "837:  yych = *++YYCURSOR;",
          "838:  if (yych == '+') goto yy33;",
          "842: yy33:",
          "846: yy34:",
          "851:  if (yych <= '9') goto yy34;",
          "852:  if (yych >= ';') goto yy18;",
          "854:  if (yych != '{') goto yy18;",
          "856: #line 702 \"ext/standard/var_unserializer.re\"",
          "857:  {",
          "858:  zend_long elements = parse_iv(start + 2);",
          "861:     if (!var_hash) return 0;",
          "863:  if (elements < 0) {",
          "864:   return 0;",
          "865:  }",
          "867:  array_init_size(rval, elements);",
          "868:  if (elements) {",
          "871:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "874:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "875:   return 0;",
          "878:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "879: }",
          "880: #line 881 \"ext/standard/var_unserializer.c\"",
          "881: yy39:",
          "883:  if (yych == '+') goto yy40;",
          "885:  if (yych <= '9') goto yy41;",
          "887: yy40:",
          "891: yy41:",
          "896:  if (yych <= '9') goto yy41;",
          "897:  if (yych >= ';') goto yy18;",
          "899:  if (yych != '\"') goto yy18;",
          "901: #line 668 \"ext/standard/var_unserializer.re\"",
          "902:  {",
          "903:  size_t len, maxlen;",
          "904:  zend_string *str;",
          "906:  len = parse_uiv(start + 2);",
          "907:  maxlen = max - YYCURSOR;",
          "908:  if (maxlen < len) {",
          "910:   return 0;",
          "911:  }",
          "913:  if ((str = unserialize_str(&YYCURSOR, len, maxlen)) == NULL) {",
          "914:   return 0;",
          "915:  }",
          "917:  if (*(YYCURSOR) != '\"') {",
          "918:   zend_string_free(str);",
          "920:   return 0;",
          "921:  }",
          "923:  if (*(YYCURSOR + 1) != ';') {",
          "924:   efree(str);",
          "926:   return 0;",
          "927:  }",
          "929:  YYCURSOR += 2;",
          "932:  ZVAL_STR(rval, str);",
          "933:  return 1;",
          "934: }",
          "935: #line 936 \"ext/standard/var_unserializer.c\"",
          "936: yy46:",
          "937:  yych = *++YYCURSOR;",
          "938:  if (yych == '+') goto yy47;",
          "940:  if (yych <= '9') goto yy48;",
          "942: yy47:",
          "946: yy48:",
          "951:  if (yych <= '9') goto yy48;",
          "952:  if (yych >= ';') goto yy18;",
          "954:  if (yych != '\"') goto yy18;",
          "956: #line 636 \"ext/standard/var_unserializer.re\"",
          "958:  size_t len, maxlen;",
          "959:  char *str;",
          "961:  len = parse_uiv(start + 2);",
          "962:  maxlen = max - YYCURSOR;",
          "963:  if (maxlen < len) {",
          "965:   return 0;",
          "966:  }",
          "968:  str = (char*)YYCURSOR;",
          "970:  YYCURSOR += len;",
          "972:  if (*(YYCURSOR) != '\"') {",
          "977:  if (*(YYCURSOR + 1) != ';') {",
          "979:   return 0;",
          "982:  YYCURSOR += 2;",
          "985:  ZVAL_STRINGL(rval, str, len);",
          "988: #line 989 \"ext/standard/var_unserializer.c\"",
          "989: yy53:",
          "990:  yych = *++YYCURSOR;",
          "991:  if (yych <= '/') {",
          "992:   if (yych <= ',') {",
          "993:    if (yych == '+') goto yy57;",
          "994:    goto yy18;",
          "995:   } else {",
          "996:    if (yych <= '-') goto yy55;",
          "997:    if (yych <= '.') goto yy60;",
          "998:    goto yy18;",
          "999:   }",
          "1000:  } else {",
          "1001:   if (yych <= 'I') {",
          "1002:    if (yych <= '9') goto yy58;",
          "1003:    if (yych <= 'H') goto yy18;",
          "1004:    goto yy56;",
          "1005:   } else {",
          "1006:    if (yych != 'N') goto yy18;",
          "1007:   }",
          "1008:  }",
          "1010:  if (yych == 'A') goto yy76;",
          "1012: yy55:",
          "1013:  yych = *++YYCURSOR;",
          "1014:  if (yych <= '/') {",
          "1015:   if (yych == '.') goto yy60;",
          "1016:   goto yy18;",
          "1017:  } else {",
          "1018:   if (yych <= '9') goto yy58;",
          "1019:   if (yych != 'I') goto yy18;",
          "1020:  }",
          "1021: yy56:",
          "1023:  if (yych == 'N') goto yy72;",
          "1025: yy57:",
          "1026:  yych = *++YYCURSOR;",
          "1027:  if (yych == '.') goto yy60;",
          "1028:  if (yych <= '/') goto yy18;",
          "1029:  if (yych >= ':') goto yy18;",
          "1030: yy58:",
          "1032:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1033:  yych = *YYCURSOR;",
          "1034:  if (yych <= ':') {",
          "1035:   if (yych <= '.') {",
          "1036:    if (yych <= '-') goto yy18;",
          "1037:    goto yy70;",
          "1038:   } else {",
          "1039:    if (yych <= '/') goto yy18;",
          "1040:    if (yych <= '9') goto yy58;",
          "1041:    goto yy18;",
          "1042:   }",
          "1043:  } else {",
          "1044:   if (yych <= 'E') {",
          "1045:    if (yych <= ';') goto yy63;",
          "1046:    if (yych <= 'D') goto yy18;",
          "1047:    goto yy65;",
          "1048:   } else {",
          "1049:    if (yych == 'e') goto yy65;",
          "1050:    goto yy18;",
          "1051:   }",
          "1052:  }",
          "1053: yy60:",
          "1054:  yych = *++YYCURSOR;",
          "1055:  if (yych <= '/') goto yy18;",
          "1056:  if (yych >= ':') goto yy18;",
          "1057: yy61:",
          "1063:   if (yych <= '9') goto yy61;",
          "1068:    goto yy65;",
          "1070:    if (yych == 'e') goto yy65;",
          "1074: yy63:",
          "1076: #line 627 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "593:  case 'O': goto yy4;",
          "595:  case 'R': goto yy6;",
          "596:  case 'S': goto yy7;",
          "597:  case 'a': goto yy8;",
          "598:  case 'b': goto yy9;",
          "599:  case 'd': goto yy10;",
          "600:  case 'i': goto yy11;",
          "602:  case 'r': goto yy13;",
          "603:  case 's': goto yy14;",
          "604:  case '}': goto yy15;",
          "605:  default: goto yy2;",
          "608:  ++YYCURSOR;",
          "610: #line 919 \"ext/standard/var_unserializer.re\"",
          "612: #line 613 \"ext/standard/var_unserializer.c\"",
          "615:  if (yych == ':') goto yy17;",
          "619:  if (yych == ';') goto yy19;",
          "623:  if (yych == ':') goto yy21;",
          "627:  if (yych == ':') goto yy22;",
          "631:  if (yych == ':') goto yy23;",
          "635:  if (yych == ':') goto yy24;",
          "639:  if (yych == ':') goto yy25;",
          "643:  if (yych == ':') goto yy26;",
          "647:  if (yych == ':') goto yy27;",
          "651:  if (yych == ':') goto yy28;",
          "654:  yych = *(YYMARKER = ++YYCURSOR);",
          "655:  if (yych == ':') goto yy29;",
          "656:  goto yy3;",
          "657: yy15:",
          "659: #line 913 \"ext/standard/var_unserializer.re\"",
          "665: #line 666 \"ext/standard/var_unserializer.c\"",
          "669:   goto yy31;",
          "671:  if (yych == '+') goto yy30;",
          "676:  ++YYCURSOR;",
          "677: #line 608 \"ext/standard/var_unserializer.re\"",
          "678:  {",
          "680:  ZVAL_NULL(rval);",
          "681:  return 1;",
          "682: }",
          "683: #line 684 \"ext/standard/var_unserializer.c\"",
          "684: yy21:",
          "686:  if (yych <= ',') {",
          "687:   if (yych == '+') goto yy33;",
          "688:   goto yy18;",
          "689:  } else {",
          "690:   if (yych <= '-') goto yy33;",
          "691:   if (yych <= '/') goto yy18;",
          "692:   if (yych <= '9') goto yy34;",
          "693:   goto yy18;",
          "695: yy22:",
          "696:  yych = *++YYCURSOR;",
          "697:  if (yych == '+') goto yy36;",
          "698:  if (yych <= '/') goto yy18;",
          "699:  if (yych <= '9') goto yy37;",
          "701: yy23:",
          "703:  if (yych == '+') goto yy39;",
          "704:  if (yych <= '/') goto yy18;",
          "705:  if (yych <= '9') goto yy40;",
          "706:  goto yy18;",
          "707: yy24:",
          "708:  yych = *++YYCURSOR;",
          "709:  if (yych <= '/') goto yy18;",
          "710:  if (yych <= '1') goto yy42;",
          "711:  goto yy18;",
          "712: yy25:",
          "713:  yych = *++YYCURSOR;",
          "714:  if (yych <= '/') {",
          "715:   if (yych <= ',') {",
          "716:    if (yych == '+') goto yy43;",
          "717:    goto yy18;",
          "718:   } else {",
          "719:    if (yych <= '-') goto yy44;",
          "720:    if (yych <= '.') goto yy45;",
          "721:    goto yy18;",
          "723:  } else {",
          "724:   if (yych <= 'I') {",
          "725:    if (yych <= '9') goto yy46;",
          "726:    if (yych <= 'H') goto yy18;",
          "727:    goto yy48;",
          "728:   } else {",
          "729:    if (yych == 'N') goto yy49;",
          "730:    goto yy18;",
          "733: yy26:",
          "734:  yych = *++YYCURSOR;",
          "735:  if (yych <= ',') {",
          "736:   if (yych == '+') goto yy50;",
          "737:   goto yy18;",
          "738:  } else {",
          "739:   if (yych <= '-') goto yy50;",
          "740:   if (yych <= '/') goto yy18;",
          "741:   if (yych <= '9') goto yy51;",
          "742:   goto yy18;",
          "744: yy27:",
          "745:  yych = *++YYCURSOR;",
          "746:  if (yych <= ',') {",
          "747:   if (yych == '+') goto yy53;",
          "748:   goto yy18;",
          "749:  } else {",
          "750:   if (yych <= '-') goto yy53;",
          "751:   if (yych <= '/') goto yy18;",
          "752:   if (yych <= '9') goto yy54;",
          "753:   goto yy18;",
          "754:  }",
          "755: yy28:",
          "758:   if (yych == '+') goto yy56;",
          "759:   goto yy18;",
          "761:   if (yych <= '-') goto yy56;",
          "763:   if (yych <= '9') goto yy57;",
          "766: yy29:",
          "768:  if (yych == '+') goto yy59;",
          "770:  if (yych <= '9') goto yy60;",
          "771:  goto yy18;",
          "772: yy30:",
          "773:  yych = *++YYCURSOR;",
          "774:  if (yybm[0+yych] & 128) {",
          "775:   goto yy31;",
          "776:  }",
          "777:  goto yy18;",
          "778: yy31:",
          "782:  if (yybm[0+yych] & 128) {",
          "783:   goto yy31;",
          "784:  }",
          "786:  if (yych <= ':') goto yy62;",
          "787:  goto yy18;",
          "788: yy33:",
          "790:  if (yych <= '/') goto yy18;",
          "791:  if (yych >= ':') goto yy18;",
          "792: yy34:",
          "794:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "795:  yych = *YYCURSOR;",
          "798:  if (yych == ';') goto yy63;",
          "800: yy36:",
          "804: yy37:",
          "809:  if (yych <= '9') goto yy37;",
          "810:  if (yych <= ':') goto yy65;",
          "811:  goto yy18;",
          "812: yy39:",
          "814:  if (yych <= '/') goto yy18;",
          "815:  if (yych >= ':') goto yy18;",
          "816: yy40:",
          "818:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "819:  yych = *YYCURSOR;",
          "820:  if (yych <= '/') goto yy18;",
          "821:  if (yych <= '9') goto yy40;",
          "822:  if (yych <= ':') goto yy66;",
          "823:  goto yy18;",
          "824: yy42:",
          "825:  yych = *++YYCURSOR;",
          "826:  if (yych == ';') goto yy67;",
          "827:  goto yy18;",
          "828: yy43:",
          "829:  yych = *++YYCURSOR;",
          "830:  if (yych == '.') goto yy45;",
          "831:  if (yych <= '/') goto yy18;",
          "832:  if (yych <= '9') goto yy46;",
          "833:  goto yy18;",
          "834: yy44:",
          "835:  yych = *++YYCURSOR;",
          "836:  if (yych <= '/') {",
          "837:   if (yych != '.') goto yy18;",
          "838:  } else {",
          "839:   if (yych <= '9') goto yy46;",
          "840:   if (yych == 'I') goto yy48;",
          "841:   goto yy18;",
          "843: yy45:",
          "844:  yych = *++YYCURSOR;",
          "845:  if (yych <= '/') goto yy18;",
          "846:  if (yych <= '9') goto yy69;",
          "847:  goto yy18;",
          "848: yy46:",
          "849:  ++YYCURSOR;",
          "850:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "851:  yych = *YYCURSOR;",
          "852:  if (yych <= ':') {",
          "853:   if (yych <= '.') {",
          "854:    if (yych <= '-') goto yy18;",
          "855:    goto yy69;",
          "856:   } else {",
          "857:    if (yych <= '/') goto yy18;",
          "858:    if (yych <= '9') goto yy46;",
          "859:    goto yy18;",
          "860:   }",
          "861:  } else {",
          "862:   if (yych <= 'E') {",
          "863:    if (yych <= ';') goto yy71;",
          "864:    if (yych <= 'D') goto yy18;",
          "865:    goto yy73;",
          "866:   } else {",
          "867:    if (yych == 'e') goto yy73;",
          "868:    goto yy18;",
          "869:   }",
          "871: yy48:",
          "873:  if (yych == 'N') goto yy74;",
          "874:  goto yy18;",
          "875: yy49:",
          "876:  yych = *++YYCURSOR;",
          "877:  if (yych == 'A') goto yy75;",
          "878:  goto yy18;",
          "879: yy50:",
          "880:  yych = *++YYCURSOR;",
          "881:  if (yych <= '/') goto yy18;",
          "882:  if (yych >= ':') goto yy18;",
          "883: yy51:",
          "884:  ++YYCURSOR;",
          "885:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "886:  yych = *YYCURSOR;",
          "888:  if (yych <= '9') goto yy51;",
          "889:  if (yych == ';') goto yy76;",
          "891: yy53:",
          "895: yy54:",
          "900:  if (yych <= '9') goto yy54;",
          "901:  if (yych <= ':') goto yy78;",
          "902:  goto yy18;",
          "903: yy56:",
          "905:  if (yych <= '/') goto yy18;",
          "906:  if (yych >= ':') goto yy18;",
          "907: yy57:",
          "909:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "910:  yych = *YYCURSOR;",
          "912:  if (yych <= '9') goto yy57;",
          "913:  if (yych == ';') goto yy79;",
          "915: yy59:",
          "919: yy60:",
          "924:  if (yych <= '9') goto yy60;",
          "925:  if (yych <= ':') goto yy81;",
          "926:  goto yy18;",
          "927: yy62:",
          "929:  if (yych == '\"') goto yy82;",
          "930:  goto yy18;",
          "931: yy63:",
          "933: #line 557 \"ext/standard/var_unserializer.re\"",
          "935:  zend_long id;",
          "938:  if (!var_hash) return 0;",
          "940:  id = parse_iv(start + 2) - 1;",
          "941:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "945:  zval_ptr_dtor(rval);",
          "946:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "947:   ZVAL_UNDEF(rval);",
          "948:   return 1;",
          "949:  }",
          "950:  if (Z_ISREF_P(rval_ref)) {",
          "951:   ZVAL_COPY(rval, rval_ref);",
          "952:  } else {",
          "953:   ZVAL_NEW_REF(rval_ref, rval_ref);",
          "954:   ZVAL_COPY(rval, rval_ref);",
          "959: #line 960 \"ext/standard/var_unserializer.c\"",
          "960: yy65:",
          "962:  if (yych == '\"') goto yy84;",
          "964: yy66:",
          "966:  if (yych == '{') goto yy86;",
          "968: yy67:",
          "970: #line 614 \"ext/standard/var_unserializer.re\"",
          "971:  {",
          "973:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "974:  return 1;",
          "975: }",
          "976: #line 977 \"ext/standard/var_unserializer.c\"",
          "977: yy69:",
          "983:   if (yych <= '9') goto yy69;",
          "988:    goto yy73;",
          "990:    if (yych == 'e') goto yy73;",
          "994: yy71:",
          "996: #line 662 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1082:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "1083:  return 1;",
          "1084: }",
          "1087:  yych = *++YYCURSOR;",
          "1088:  if (yych <= ',') {",
          "1090:  } else {",
          "1092:   if (yych <= '/') goto yy18;",
          "1094:   goto yy18;",
          "1095:  }",
          "1097:  yych = *++YYCURSOR;",
          "1113:  goto yy18;",
          "1115:  yych = *++YYCURSOR;",
          "1118:  goto yy18;",
          "1120:  ++YYCURSOR;",
          "1132:   } else {",
          "1135:   }",
          "1136:  }",
          "1141:  yych = *++YYCURSOR;",
          "1143:  ++YYCURSOR;",
          "1145:  {",
          "1156:  }",
          "1158:  return 1;",
          "1159: }",
          "1162:  yych = *++YYCURSOR;",
          "1164:  goto yy18;",
          "1186:  ++YYCURSOR;",
          "1188:  {",
          "1194:  }",
          "1203:    }",
          "1206:   }",
          "1212: }",
          "1220:  ++YYCURSOR;",
          "1222:  {",
          "1225:  return 1;",
          "1226: }",
          "1229:  ++YYCURSOR;",
          "1231:  {",
          "1235: }",
          "1238:  yych = *++YYCURSOR;",
          "1239:  if (yych <= ',') {",
          "1241:  } else {",
          "1243:   if (yych <= '/') goto yy18;",
          "1246:  }",
          "1252:  ++YYCURSOR;",
          "1253:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1254:  yych = *YYCURSOR;",
          "1255:  if (yych <= '/') goto yy18;",
          "1258:  ++YYCURSOR;",
          "1260:  {",
          "1268:   return 0;",
          "1269:  }",
          "1272:   return 0;",
          "1273:  }",
          "1278:  }",
          "1282:  return 1;",
          "1283: }",
          "1295: yy96:",
          "1296:  yych = *++YYCURSOR;",
          "1297:  if (yych <= '/') goto yy18;",
          "1299: yy97:",
          "1300:  ++YYCURSOR;",
          "1308:  {",
          "1326:  } else {",
          "1329:  }",
          "1331:  return 1;",
          "1332: }",
          "1334: }",
          "1338:  return 0;",
          "",
          "[Removed Lines]",
          "1085: #line 1086 \"ext/standard/var_unserializer.c\"",
          "1086: yy65:",
          "1089:   if (yych != '+') goto yy18;",
          "1091:   if (yych <= '-') goto yy66;",
          "1093:   if (yych <= '9') goto yy67;",
          "1096: yy66:",
          "1098:  if (yych <= ',') {",
          "1099:   if (yych == '+') goto yy69;",
          "1100:   goto yy18;",
          "1101:  } else {",
          "1102:   if (yych <= '-') goto yy69;",
          "1103:   if (yych <= '/') goto yy18;",
          "1104:   if (yych >= ':') goto yy18;",
          "1105:  }",
          "1106: yy67:",
          "1107:  ++YYCURSOR;",
          "1108:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1109:  yych = *YYCURSOR;",
          "1110:  if (yych <= '/') goto yy18;",
          "1111:  if (yych <= '9') goto yy67;",
          "1112:  if (yych == ';') goto yy63;",
          "1114: yy69:",
          "1116:  if (yych <= '/') goto yy18;",
          "1117:  if (yych <= '9') goto yy67;",
          "1119: yy70:",
          "1121:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1122:  yych = *YYCURSOR;",
          "1123:  if (yych <= ';') {",
          "1124:   if (yych <= '/') goto yy18;",
          "1125:   if (yych <= '9') goto yy70;",
          "1126:   if (yych <= ':') goto yy18;",
          "1127:   goto yy63;",
          "1128:  } else {",
          "1129:   if (yych <= 'E') {",
          "1130:    if (yych <= 'D') goto yy18;",
          "1131:    goto yy65;",
          "1133:    if (yych == 'e') goto yy65;",
          "1134:    goto yy18;",
          "1137: yy72:",
          "1138:  yych = *++YYCURSOR;",
          "1139:  if (yych != 'F') goto yy18;",
          "1140: yy73:",
          "1142:  if (yych != ';') goto yy18;",
          "1144: #line 611 \"ext/standard/var_unserializer.re\"",
          "1148:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1149:   ZVAL_DOUBLE(rval, php_get_nan());",
          "1150:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1151:   ZVAL_DOUBLE(rval, php_get_inf());",
          "1152:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1153:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "1154:  } else {",
          "1155:   ZVAL_NULL(rval);",
          "1160: #line 1161 \"ext/standard/var_unserializer.c\"",
          "1161: yy76:",
          "1163:  if (yych == 'N') goto yy73;",
          "1165: yy77:",
          "1166:  yych = *++YYCURSOR;",
          "1167:  if (yych <= ',') {",
          "1168:   if (yych != '+') goto yy18;",
          "1169:  } else {",
          "1170:   if (yych <= '-') goto yy78;",
          "1171:   if (yych <= '/') goto yy18;",
          "1172:   if (yych <= '9') goto yy79;",
          "1173:   goto yy18;",
          "1174:  }",
          "1175: yy78:",
          "1176:  yych = *++YYCURSOR;",
          "1177:  if (yych <= '/') goto yy18;",
          "1178:  if (yych >= ':') goto yy18;",
          "1179: yy79:",
          "1180:  ++YYCURSOR;",
          "1181:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1182:  yych = *YYCURSOR;",
          "1183:  if (yych <= '/') goto yy18;",
          "1184:  if (yych <= '9') goto yy79;",
          "1185:  if (yych != ';') goto yy18;",
          "1187: #line 585 \"ext/standard/var_unserializer.re\"",
          "1189: #if SIZEOF_ZEND_LONG == 4",
          "1190:  int digits = YYCURSOR - start - 3;",
          "1192:  if (start[2] == '-' || start[2] == '+') {",
          "1193:   digits--;",
          "1197:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1198:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1199:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "1201:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1202:     goto use_double;",
          "1204:   } else {",
          "1205:    goto use_double;",
          "1207:  }",
          "1208: #endif",
          "1210:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1211:  return 1;",
          "1213: #line 1214 \"ext/standard/var_unserializer.c\"",
          "1214: yy83:",
          "1215:  yych = *++YYCURSOR;",
          "1216:  if (yych <= '/') goto yy18;",
          "1217:  if (yych >= '2') goto yy18;",
          "1218:  yych = *++YYCURSOR;",
          "1219:  if (yych != ';') goto yy18;",
          "1221: #line 579 \"ext/standard/var_unserializer.re\"",
          "1224:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1227: #line 1228 \"ext/standard/var_unserializer.c\"",
          "1228: yy87:",
          "1230: #line 573 \"ext/standard/var_unserializer.re\"",
          "1233:  ZVAL_NULL(rval);",
          "1234:  return 1;",
          "1236: #line 1237 \"ext/standard/var_unserializer.c\"",
          "1237: yy89:",
          "1240:   if (yych != '+') goto yy18;",
          "1242:   if (yych <= '-') goto yy90;",
          "1244:   if (yych <= '9') goto yy91;",
          "1245:   goto yy18;",
          "1247: yy90:",
          "1248:  yych = *++YYCURSOR;",
          "1249:  if (yych <= '/') goto yy18;",
          "1250:  if (yych >= ':') goto yy18;",
          "1251: yy91:",
          "1256:  if (yych <= '9') goto yy91;",
          "1257:  if (yych != ';') goto yy18;",
          "1259: #line 548 \"ext/standard/var_unserializer.re\"",
          "1261:  zend_long id;",
          "1264:  if (!var_hash) return 0;",
          "1266:  id = parse_iv(start + 2) - 1;",
          "1267:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1271:  if (rval_ref == rval) {",
          "1275:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1276:   ZVAL_UNDEF(rval);",
          "1277:   return 1;",
          "1280:  ZVAL_COPY(rval, rval_ref);",
          "1284: #line 1285 \"ext/standard/var_unserializer.c\"",
          "1285: yy95:",
          "1286:  yych = *++YYCURSOR;",
          "1287:  if (yych <= ',') {",
          "1288:   if (yych != '+') goto yy18;",
          "1289:  } else {",
          "1290:   if (yych <= '-') goto yy96;",
          "1291:   if (yych <= '/') goto yy18;",
          "1292:   if (yych <= '9') goto yy97;",
          "1293:   goto yy18;",
          "1294:  }",
          "1298:  if (yych >= ':') goto yy18;",
          "1301:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1302:  yych = *YYCURSOR;",
          "1303:  if (yych <= '/') goto yy18;",
          "1304:  if (yych <= '9') goto yy97;",
          "1305:  if (yych != ';') goto yy18;",
          "1306:  ++YYCURSOR;",
          "1307: #line 522 \"ext/standard/var_unserializer.re\"",
          "1309:  zend_long id;",
          "1312:  if (!var_hash) return 0;",
          "1314:  id = parse_iv(start + 2) - 1;",
          "1315:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1316:   return 0;",
          "1317:  }",
          "1319:  zval_ptr_dtor(rval);",
          "1320:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1321:   ZVAL_UNDEF(rval);",
          "1322:   return 1;",
          "1323:  }",
          "1324:  if (Z_ISREF_P(rval_ref)) {",
          "1325:   ZVAL_COPY(rval, rval_ref);",
          "1327:   ZVAL_NEW_REF(rval_ref, rval_ref);",
          "1328:   ZVAL_COPY(rval, rval_ref);",
          "1333: #line 1334 \"ext/standard/var_unserializer.c\"",
          "1335: #line 886 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1005: #line 1006 \"ext/standard/var_unserializer.c\"",
          "1006: yy73:",
          "1009:   if (yych == '+') goto yy88;",
          "1010:   goto yy18;",
          "1012:   if (yych <= '-') goto yy88;",
          "1014:   if (yych <= '9') goto yy89;",
          "1017: yy74:",
          "1019:  if (yych == 'F') goto yy91;",
          "1021: yy75:",
          "1023:  if (yych == 'N') goto yy91;",
          "1025: yy76:",
          "1027: #line 620 \"ext/standard/var_unserializer.re\"",
          "1028:  {",
          "1029: #if SIZEOF_ZEND_LONG == 4",
          "1030:  int digits = YYCURSOR - start - 3;",
          "1032:  if (start[2] == '-' || start[2] == '+') {",
          "1033:   digits--;",
          "1034:  }",
          "1037:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1038:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1039:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "1041:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1042:     goto use_double;",
          "1043:    }",
          "1045:    goto use_double;",
          "1048: #endif",
          "1050:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1051:  return 1;",
          "1052: }",
          "1053: #line 1054 \"ext/standard/var_unserializer.c\"",
          "1054: yy78:",
          "1056:  if (yych == '\"') goto yy92;",
          "1057:  goto yy18;",
          "1058: yy79:",
          "1060: #line 583 \"ext/standard/var_unserializer.re\"",
          "1062:  zend_long id;",
          "1065:  if (!var_hash) return 0;",
          "1067:  id = parse_iv(start + 2) - 1;",
          "1068:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1069:   return 0;",
          "1070:  }",
          "1072:  if (rval_ref == rval) {",
          "1073:   return 0;",
          "1074:  }",
          "1076:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1077:   ZVAL_UNDEF(rval);",
          "1078:   return 1;",
          "1081:  ZVAL_COPY(rval, rval_ref);",
          "1085: #line 1086 \"ext/standard/var_unserializer.c\"",
          "1086: yy81:",
          "1088:  if (yych == '\"') goto yy94;",
          "1090: yy82:",
          "1092: #line 768 \"ext/standard/var_unserializer.re\"",
          "1094:  size_t len, len2, len3, maxlen;",
          "1095:  zend_long elements;",
          "1096:  char *str;",
          "1097:  zend_string *class_name;",
          "1098:  zend_class_entry *ce;",
          "1099:  int incomplete_class = 0;",
          "1101:  int custom_object = 0;",
          "1103:  zval user_func;",
          "1104:  zval retval;",
          "1105:  zval args[1];",
          "1107:     if (!var_hash) return 0;",
          "1108:  if (*start == 'C') {",
          "1109:   custom_object = 1;",
          "1112:  len2 = len = parse_uiv(start + 2);",
          "1113:  maxlen = max - YYCURSOR;",
          "1114:  if (maxlen < len || len == 0) {",
          "1116:   return 0;",
          "1117:  }",
          "1119:  str = (char*)YYCURSOR;",
          "1121:  YYCURSOR += len;",
          "1123:  if (*(YYCURSOR) != '\"') {",
          "1125:   return 0;",
          "1126:  }",
          "1127:  if (*(YYCURSOR+1) != ':') {",
          "1129:   return 0;",
          "1130:  }",
          "1132:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "1133:  if (len3 != len)",
          "1134:  {",
          "1136:   return 0;",
          "1137:  }",
          "1139:  class_name = zend_string_init(str, len, 0);",
          "1141:  do {",
          "1142:   if(!unserialize_allowed_class(class_name, classes)) {",
          "1143:    incomplete_class = 1;",
          "1144:    ce = PHP_IC_ENTRY;",
          "1145:    break;",
          "1146:   }",
          "1149:   BG(serialize_lock)++;",
          "1150:   ce = zend_lookup_class(class_name);",
          "1151:   if (ce) {",
          "1152:    BG(serialize_lock)--;",
          "1153:    if (EG(exception)) {",
          "1154:     zend_string_release(class_name);",
          "1155:     return 0;",
          "1157:    break;",
          "1159:   BG(serialize_lock)--;",
          "1161:   if (EG(exception)) {",
          "1162:    zend_string_release(class_name);",
          "1163:    return 0;",
          "1164:   }",
          "1167:   if ((PG(unserialize_callback_func) == NULL) || (PG(unserialize_callback_func)[0] == '\\0')) {",
          "1168:    incomplete_class = 1;",
          "1169:    ce = PHP_IC_ENTRY;",
          "1170:    break;",
          "1171:   }",
          "1174:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "1176:   ZVAL_STR_COPY(&args[0], class_name);",
          "1177:   BG(serialize_lock)++;",
          "1178:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL) != SUCCESS) {",
          "1179:    BG(serialize_lock)--;",
          "1180:    if (EG(exception)) {",
          "1181:     zend_string_release(class_name);",
          "1182:     zval_ptr_dtor(&user_func);",
          "1183:     zval_ptr_dtor(&args[0]);",
          "1184:     return 0;",
          "1185:    }",
          "1186:    php_error_docref(NULL, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "1187:    incomplete_class = 1;",
          "1188:    ce = PHP_IC_ENTRY;",
          "1189:    zval_ptr_dtor(&user_func);",
          "1190:    zval_ptr_dtor(&args[0]);",
          "1191:    break;",
          "1192:   }",
          "1193:   BG(serialize_lock)--;",
          "1194:   zval_ptr_dtor(&retval);",
          "1195:   if (EG(exception)) {",
          "1196:    zend_string_release(class_name);",
          "1197:    zval_ptr_dtor(&user_func);",
          "1198:    zval_ptr_dtor(&args[0]);",
          "1199:    return 0;",
          "1200:   }",
          "1203:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "1204:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "1205:    incomplete_class = 1;",
          "1206:    ce = PHP_IC_ENTRY;",
          "1207:   }",
          "1209:   zval_ptr_dtor(&user_func);",
          "1210:   zval_ptr_dtor(&args[0]);",
          "1211:   break;",
          "1212:  } while (1);",
          "1216:  if (custom_object) {",
          "1217:   int ret;",
          "1219:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "1221:   if (ret && incomplete_class) {",
          "1222:    php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "1223:   }",
          "1224:   zend_string_release(class_name);",
          "1225:   return ret;",
          "1226:  }",
          "1228:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "1230:  if (incomplete_class) {",
          "1231:   php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "1232:  }",
          "1233:  zend_string_release(class_name);",
          "1235:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "1237: #line 1238 \"ext/standard/var_unserializer.c\"",
          "1238: yy84:",
          "1240: #line 703 \"ext/standard/var_unserializer.re\"",
          "1242:  size_t len, maxlen;",
          "1243:  zend_string *str;",
          "1245:  len = parse_uiv(start + 2);",
          "1246:  maxlen = max - YYCURSOR;",
          "1247:  if (maxlen < len) {",
          "1249:   return 0;",
          "1250:  }",
          "1252:  if ((str = unserialize_str(&YYCURSOR, len, maxlen)) == NULL) {",
          "1253:   return 0;",
          "1254:  }",
          "1256:  if (*(YYCURSOR) != '\"') {",
          "1257:   zend_string_free(str);",
          "1259:   return 0;",
          "1260:  }",
          "1262:  if (*(YYCURSOR + 1) != ';') {",
          "1263:   efree(str);",
          "1265:   return 0;",
          "1266:  }",
          "1268:  YYCURSOR += 2;",
          "1271:  ZVAL_STR(rval, str);",
          "1274: #line 1275 \"ext/standard/var_unserializer.c\"",
          "1275: yy86:",
          "1277: #line 737 \"ext/standard/var_unserializer.re\"",
          "1279:  zend_long elements = parse_iv(start + 2);",
          "1282:     if (!var_hash) return 0;",
          "1284:  if (elements < 0) {",
          "1285:   return 0;",
          "1286:  }",
          "1288:  array_init_size(rval, elements);",
          "1289:  if (elements) {",
          "1292:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "1293:  }",
          "1295:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "1296:   return 0;",
          "1297:  }",
          "1299:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "1301: #line 1302 \"ext/standard/var_unserializer.c\"",
          "1302: yy88:",
          "1305:   if (yych == '+') goto yy96;",
          "1306:   goto yy18;",
          "1308:   if (yych <= '-') goto yy96;",
          "1310:   if (yych >= ':') goto yy18;",
          "1312: yy89:",
          "1317:  if (yych <= '9') goto yy89;",
          "1318:  if (yych == ';') goto yy71;",
          "1319:  goto yy18;",
          "1320: yy91:",
          "1321:  yych = *++YYCURSOR;",
          "1322:  if (yych == ';') goto yy97;",
          "1323:  goto yy18;",
          "1324: yy92:",
          "1326: #line 761 \"ext/standard/var_unserializer.re\"",
          "1328:     if (!var_hash) return 0;",
          "1330:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "1331:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "1332: }",
          "1333: #line 1334 \"ext/standard/var_unserializer.c\"",
          "1334: yy94:",
          "1335:  ++YYCURSOR;",
          "1336: #line 671 \"ext/standard/var_unserializer.re\"",
          "1337:  {",
          "1338:  size_t len, maxlen;",
          "1339:  char *str;",
          "1341:  len = parse_uiv(start + 2);",
          "1342:  maxlen = max - YYCURSOR;",
          "1343:  if (maxlen < len) {",
          "1348:  str = (char*)YYCURSOR;",
          "1350:  YYCURSOR += len;",
          "1352:  if (*(YYCURSOR) != '\"') {",
          "1357:  if (*(YYCURSOR + 1) != ';') {",
          "1359:   return 0;",
          "1362:  YYCURSOR += 2;",
          "1365:  ZVAL_STRINGL(rval, str, len);",
          "1368: #line 1369 \"ext/standard/var_unserializer.c\"",
          "1372:  if (yych <= '9') goto yy89;",
          "1373:  goto yy18;",
          "1376: #line 646 \"ext/standard/var_unserializer.re\"",
          "1380:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1381:   ZVAL_DOUBLE(rval, php_get_nan());",
          "1382:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1383:   ZVAL_DOUBLE(rval, php_get_inf());",
          "1384:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1385:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "1387:   ZVAL_NULL(rval);",
          "1392: #line 1393 \"ext/standard/var_unserializer.c\"",
          "1394: #line 921 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"ext/standard/php_var.h\"",
          "23: #include \"php_incomplete_class.h\"",
          "26: #define VAR_ENTRIES_MAX 1024",
          "27: #define VAR_ENTRIES_DBG 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: struct php_unserialize_data {",
          "26:  void *first;",
          "27:  void *last;",
          "28:  void *first_dtor;",
          "29:  void *last_dtor;",
          "30: };",
          "32: PHPAPI php_unserialize_data_t php_var_unserialize_init() {",
          "33:  php_unserialize_data_t d;",
          "35:  if (BG(serialize_lock) || !BG(unserialize).level) {",
          "36:   d = ecalloc(1, sizeof(struct php_unserialize_data));",
          "37:   if (!BG(serialize_lock)) {",
          "38:    BG(unserialize).data = d;",
          "39:    BG(unserialize).level = 1;",
          "40:   }",
          "41:  } else {",
          "42:   d = BG(unserialize).data;",
          "43:   ++BG(unserialize).level;",
          "44:  }",
          "45:  return d;",
          "46: }",
          "48: PHPAPI void php_var_unserialize_destroy(php_unserialize_data_t d) {",
          "50:  if (BG(serialize_lock) || BG(unserialize).level == 1) {",
          "51:   var_destroy(&d);",
          "52:   efree(d);",
          "53:  }",
          "54:  if (!BG(serialize_lock) && !--BG(unserialize).level) {",
          "55:   BG(unserialize).data = NULL;",
          "56:  }",
          "57: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7052ef16dccd5858626bb7899193cdc16853861",
      "candidate_info": {
        "commit_hash": "b7052ef16dccd5858626bb7899193cdc16853861",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/b7052ef16dccd5858626bb7899193cdc16853861",
        "files": [
          "ext/standard/php_var.h",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "Revert \"Fixed unserialize implementation (it's complicated, this issue took me 4 hours :<, need some review)\"\n\nThis reverts commit 80a178015d6b162ff0ba7a8e8f5a08c88829cc3c.",
        "before_after_code_files": [
          "ext/standard/php_var.h||ext/standard/php_var.h",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/php_var.h||ext/standard/php_var.h": [
          "File: ext/standard/php_var.h -> ext/standard/php_var.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:  } \\",
          "114: } while (0)",
          "116: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hash, zval *val);",
          "117: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval *rval);",
          "118: PHPAPI void var_destroy(php_unserialize_data_t *var_hash);",
          "120: PHPAPI zend_class_entry *php_create_empty_class(char *class_name, int len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: PHPAPI void var_replace(php_unserialize_data_t *var_hash, zval *ozval, zval *nzval);",
          "121: #define PHP_VAR_UNSERIALIZE_ZVAL_CHANGED(var_hash, ozval, nzval) \\",
          "122:  var_replace((var_hash), (ozval), &(nzval))",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define VAR_ENTRIES_DBG 0",
          "31: typedef struct {",
          "33:  long used_slots;",
          "34:  void *next;",
          "35: } var_entries;",
          "",
          "[Removed Lines]",
          "32:  zval data[VAR_ENTRIES_MAX];",
          "",
          "[Added Lines]",
          "32:  zval *data[VAR_ENTRIES_MAX];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   (*var_hashx)->last = var_hash;",
          "56:  }",
          "60: }",
          "62: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "[Removed Lines]",
          "58:  ZVAL_COPY_VALUE(&var_hash->data[var_hash->used_slots], rval);",
          "59:  var_hash->used_slots++;",
          "",
          "[Added Lines]",
          "58:  var_hash->data[var_hash->used_slots++] = rval;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:   (*var_hashx)->last_dtor = var_hash;",
          "81:  }",
          "85: }",
          "87: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "[Removed Lines]",
          "83:  ZVAL_COPY(&var_hash->data[var_hash->used_slots], rval);",
          "84:  var_hash->used_slots++;",
          "",
          "[Added Lines]",
          "82:  Z_ADDREF_P(rval);",
          "83:  var_hash->data[var_hash->used_slots++] = rval;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:   (*var_hashx)->last_dtor = var_hash;",
          "106:  }",
          "110: }",
          "112: static int var_access(php_unserialize_data_t *var_hashx, long id, zval **store)",
          "",
          "[Removed Lines]",
          "108:  ZVAL_COPY_VALUE(&var_hash->data[var_hash->used_slots], rval);",
          "109:  var_hash->used_slots++;",
          "",
          "[Added Lines]",
          "107:  var_hash->data[var_hash->used_slots++] = rval;",
          "108: }",
          "110: PHPAPI void var_replace(php_unserialize_data_t *var_hashx, zval *ozval, zval *nzval)",
          "111: {",
          "112:  long i;",
          "113:  var_entries *var_hash = (*var_hashx)->first;",
          "114: #if VAR_ENTRIES_DBG",
          "115:  fprintf(stderr, \"var_replace(%ld): %d\\n\", var_hash?var_hash->used_slots:-1L, Z_TYPE_PP(nzval));",
          "116: #endif",
          "118:  while (var_hash) {",
          "119:   for (i = 0; i < var_hash->used_slots; i++) {",
          "120:    if (var_hash->data[i] == ozval) {",
          "121:     var_hash->data[i] = nzval;",
          "123:    }",
          "124:   }",
          "125:   var_hash = var_hash->next;",
          "126:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:  while (var_hash) {",
          "151:   for (i = 0; i < var_hash->used_slots; i++) {",
          "153:   }",
          "154:   next = var_hash->next;",
          "155:   efree(var_hash);",
          "",
          "[Removed Lines]",
          "152:    zval_ptr_dtor(&var_hash->data[i]);",
          "",
          "[Added Lines]",
          "169:    zval_ptr_dtor(var_hash->data[i]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "209: #define YYMARKER marker",
          "",
          "[Removed Lines]",
          "212: #line 217 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "229: #line 234 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "282:    return 0;",
          "283:   }",
          "290:   if (Z_TYPE(key) != IS_LONG && Z_TYPE(key) != IS_STRING) {",
          "291:    zval_dtor(&key);",
          "292:    return 0;",
          "",
          "[Removed Lines]",
          "285:   if (var_hash && !Z_ISREF(key)) {",
          "286:    var_push(var_hash, &key);",
          "287:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "298:    return 0;",
          "299:   }",
          "305:   if (!objprops) {",
          "306:    switch (Z_TYPE(key)) {",
          "307:    case IS_LONG:",
          "",
          "[Removed Lines]",
          "301:   if (var_hash && !Z_ISREF(data)) {",
          "302:    var_push(var_hash, &data);",
          "303:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "428:   return 0;",
          "429:  }",
          "431:  start = cursor;",
          "437: {",
          "438:  YYCTYPE yych;",
          "439:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "436: #line 437 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "439:  if (var_hash && cursor[0] != 'R') {",
          "440:   var_push(var_hash, rval);",
          "441:  }",
          "448: #line 449 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "493:  yych = *(YYMARKER = ++YYCURSOR);",
          "494:  if (yych == ':') goto yy95;",
          "495: yy3:",
          "497:  { return 0; }",
          "499: yy4:",
          "500:  yych = *(YYMARKER = ++YYCURSOR);",
          "501:  if (yych == ':') goto yy89;",
          "",
          "[Removed Lines]",
          "496: #line 774 \"ext/standard/var_unserializer.re\"",
          "498: #line 499 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "508: #line 786 \"ext/standard/var_unserializer.re\"",
          "510: #line 511 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "538:  goto yy3;",
          "539: yy14:",
          "540:  ++YYCURSOR;",
          "542:  {",
          "544:  php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Unexpected end of serialized data\");",
          "546: }",
          "548: yy16:",
          "549:  yych = *++YYCURSOR;",
          "550:  goto yy3;",
          "",
          "[Removed Lines]",
          "541: #line 768 \"ext/standard/var_unserializer.re\"",
          "547: #line 548 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "553: #line 780 \"ext/standard/var_unserializer.re\"",
          "559: #line 560 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "574:  yych = *++YYCURSOR;",
          "575:  if (yych != '\"') goto yy18;",
          "576:  ++YYCURSOR;",
          "578:  {",
          "579:  size_t len, len2, len3, maxlen;",
          "580:  long elements;",
          "",
          "[Removed Lines]",
          "577: #line 629 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "589: #line 641 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "714:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "715: }",
          "717: yy25:",
          "718:  yych = *++YYCURSOR;",
          "719:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "716: #line 717 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "728: #line 729 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "738:  yych = *++YYCURSOR;",
          "739:  if (yych != '\"') goto yy18;",
          "740:  ++YYCURSOR;",
          "742:  {",
          "",
          "[Removed Lines]",
          "741: #line 621 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "753: #line 633 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "746:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "747:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "748: }",
          "750: yy32:",
          "751:  yych = *++YYCURSOR;",
          "752:  if (yych == '+') goto yy33;",
          "",
          "[Removed Lines]",
          "749: #line 750 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "761: #line 762 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "767:  yych = *++YYCURSOR;",
          "768:  if (yych != '{') goto yy18;",
          "769:  ++YYCURSOR;",
          "771:  {",
          "772:  long elements = parse_iv(start + 2);",
          "",
          "[Removed Lines]",
          "770: #line 603 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "782: #line 615 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "786:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "787: }",
          "789: yy39:",
          "790:  yych = *++YYCURSOR;",
          "791:  if (yych == '+') goto yy40;",
          "",
          "[Removed Lines]",
          "788: #line 789 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "800: #line 801 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "806:  yych = *++YYCURSOR;",
          "807:  if (yych != '\"') goto yy18;",
          "808:  ++YYCURSOR;",
          "810:  {",
          "811:  size_t len, maxlen;",
          "812:  char *str;",
          "",
          "[Removed Lines]",
          "809: #line 574 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "821: #line 586 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "835:  ZVAL_STRINGL(rval, str, len);",
          "836:  return 1;",
          "837: }",
          "839: yy46:",
          "840:  yych = *++YYCURSOR;",
          "841:  if (yych == '+') goto yy47;",
          "",
          "[Removed Lines]",
          "838: #line 839 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "850: #line 851 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "856:  yych = *++YYCURSOR;",
          "857:  if (yych != '\"') goto yy18;",
          "858:  ++YYCURSOR;",
          "860:  {",
          "861:  size_t len, maxlen;",
          "862:  char *str;",
          "",
          "[Removed Lines]",
          "859: #line 547 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "871: #line 559 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "883:  ZVAL_STRINGL(rval, str, len);",
          "884:  return 1;",
          "885: }",
          "887: yy53:",
          "888:  yych = *++YYCURSOR;",
          "889:  if (yych <= '/') {",
          "",
          "[Removed Lines]",
          "886: #line 887 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "898: #line 899 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "971:  }",
          "972: yy63:",
          "973:  ++YYCURSOR;",
          "975:  {",
          "976: #if SIZEOF_LONG == 4",
          "977: use_double:",
          "",
          "[Removed Lines]",
          "974: #line 538 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "986: #line 550 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "980:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "981:  return 1;",
          "982: }",
          "984: yy65:",
          "985:  yych = *++YYCURSOR;",
          "986:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "983: #line 984 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "995: #line 996 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1039:  yych = *++YYCURSOR;",
          "1040:  if (yych != ';') goto yy18;",
          "1041:  ++YYCURSOR;",
          "1043:  {",
          "",
          "[Removed Lines]",
          "1042: #line 522 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1054: #line 534 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1056:  return 1;",
          "1057: }",
          "1059: yy76:",
          "1060:  yych = *++YYCURSOR;",
          "1061:  if (yych == 'N') goto yy73;",
          "",
          "[Removed Lines]",
          "1058: #line 1059 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1070: #line 1071 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1082:  if (yych <= '9') goto yy79;",
          "1083:  if (yych != ';') goto yy18;",
          "1084:  ++YYCURSOR;",
          "1086:  {",
          "1087: #if SIZEOF_LONG == 4",
          "1088:  int digits = YYCURSOR - start - 3;",
          "",
          "[Removed Lines]",
          "1085: #line 496 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1097: #line 508 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1108:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1109:  return 1;",
          "1110: }",
          "1112: yy83:",
          "1113:  yych = *++YYCURSOR;",
          "1114:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1111: #line 1112 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1123: #line 1124 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1116:  yych = *++YYCURSOR;",
          "1117:  if (yych != ';') goto yy18;",
          "1118:  ++YYCURSOR;",
          "1120:  {",
          "1122:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1123:  return 1;",
          "1124: }",
          "1126: yy87:",
          "1127:  ++YYCURSOR;",
          "1129:  {",
          "1131:  ZVAL_NULL(rval);",
          "1132:  return 1;",
          "1133: }",
          "1135: yy89:",
          "1136:  yych = *++YYCURSOR;",
          "1137:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1119: #line 490 \"ext/standard/var_unserializer.re\"",
          "1125: #line 1126 \"ext/standard/var_unserializer.c\"",
          "1128: #line 484 \"ext/standard/var_unserializer.re\"",
          "1134: #line 1135 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1131: #line 502 \"ext/standard/var_unserializer.re\"",
          "1137: #line 1138 \"ext/standard/var_unserializer.c\"",
          "1140: #line 496 \"ext/standard/var_unserializer.re\"",
          "1146: #line 1147 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1154:  if (yych <= '9') goto yy91;",
          "1155:  if (yych != ';') goto yy18;",
          "1156:  ++YYCURSOR;",
          "1158:  {",
          "1159:  long id;",
          "",
          "[Removed Lines]",
          "1157: #line 461 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1169: #line 473 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1178:  return 1;",
          "1179: }",
          "1181: yy95:",
          "1182:  yych = *++YYCURSOR;",
          "1183:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1180: #line 1181 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1192: #line 1193 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1200:  if (yych <= '9') goto yy97;",
          "1201:  if (yych != ';') goto yy18;",
          "1202:  ++YYCURSOR;",
          "1204:  {",
          "1205:  long id;",
          "",
          "[Removed Lines]",
          "1203: #line 441 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1215: #line 453 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1221:  return 1;",
          "1222: }",
          "1224: }",
          "1228:  return 0;",
          "",
          "[Removed Lines]",
          "1223: #line 1224 \"ext/standard/var_unserializer.c\"",
          "1225: #line 776 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1235: #line 1236 \"ext/standard/var_unserializer.c\"",
          "1237: #line 788 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #define VAR_ENTRIES_DBG 0",
          "29: typedef struct {",
          "31:  long used_slots;",
          "32:  void *next;",
          "33: } var_entries;",
          "",
          "[Removed Lines]",
          "30:  zval data[VAR_ENTRIES_MAX];",
          "",
          "[Added Lines]",
          "30:  zval *data[VAR_ENTRIES_MAX];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   (*var_hashx)->last = var_hash;",
          "54:  }",
          "58: }",
          "60: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "[Removed Lines]",
          "56:  ZVAL_COPY_VALUE(&var_hash->data[var_hash->used_slots], rval);",
          "57:  var_hash->used_slots++;",
          "",
          "[Added Lines]",
          "56:  var_hash->data[var_hash->used_slots++] = rval;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:   (*var_hashx)->last_dtor = var_hash;",
          "79:  }",
          "83: }",
          "85: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "[Removed Lines]",
          "81:  ZVAL_COPY(&var_hash->data[var_hash->used_slots], rval);",
          "82:  var_hash->used_slots++;",
          "",
          "[Added Lines]",
          "80:  Z_ADDREF_P(rval);",
          "81:  var_hash->data[var_hash->used_slots++] = rval;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:   (*var_hashx)->last_dtor = var_hash;",
          "104:  }",
          "108: }",
          "110: static int var_access(php_unserialize_data_t *var_hashx, long id, zval **store)",
          "",
          "[Removed Lines]",
          "106:  ZVAL_COPY_VALUE(&var_hash->data[var_hash->used_slots], rval);",
          "107:  var_hash->used_slots++;",
          "",
          "[Added Lines]",
          "105:  var_hash->data[var_hash->used_slots++] = rval;",
          "106: }",
          "108: PHPAPI void var_replace(php_unserialize_data_t *var_hashx, zval *ozval, zval *nzval)",
          "109: {",
          "110:  long i;",
          "111:  var_entries *var_hash = (*var_hashx)->first;",
          "112: #if VAR_ENTRIES_DBG",
          "113:  fprintf(stderr, \"var_replace(%ld): %d\\n\", var_hash?var_hash->used_slots:-1L, Z_TYPE_PP(nzval));",
          "114: #endif",
          "116:  while (var_hash) {",
          "117:   for (i = 0; i < var_hash->used_slots; i++) {",
          "118:    if (var_hash->data[i] == ozval) {",
          "119:     var_hash->data[i] = nzval;",
          "121:    }",
          "122:   }",
          "123:   var_hash = var_hash->next;",
          "124:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:  while (var_hash) {",
          "149:   for (i = 0; i < var_hash->used_slots; i++) {",
          "151:   }",
          "152:   next = var_hash->next;",
          "153:   efree(var_hash);",
          "",
          "[Removed Lines]",
          "150:    zval_ptr_dtor(&var_hash->data[i]);",
          "",
          "[Added Lines]",
          "167:    zval_ptr_dtor(var_hash->data[i]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "286:    return 0;",
          "287:   }",
          "294:   if (Z_TYPE(key) != IS_LONG && Z_TYPE(key) != IS_STRING) {",
          "295:    zval_dtor(&key);",
          "296:    return 0;",
          "",
          "[Removed Lines]",
          "289:   if (var_hash && !Z_ISREF(key)) {",
          "290:    var_push(var_hash, &key);",
          "291:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "302:    return 0;",
          "303:   }",
          "309:   if (!objprops) {",
          "310:    switch (Z_TYPE(key)) {",
          "311:    case IS_LONG:",
          "",
          "[Removed Lines]",
          "305:   if (var_hash && !Z_ISREF(data)) {",
          "306:    var_push(var_hash, &data);",
          "307:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "432:   return 0;",
          "433:  }",
          "435:  start = cursor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:  if (var_hash && cursor[0] != 'R') {",
          "444:   var_push(var_hash, rval);",
          "445:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2135fdef9b588a34f8805b2bbf10704e36163d5a",
      "candidate_info": {
        "commit_hash": "2135fdef9b588a34f8805b2bbf10704e36163d5a",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/2135fdef9b588a34f8805b2bbf10704e36163d5a",
        "files": [
          "ext/standard/tests/serialize/bug72663.phpt",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "Bug #72663 - part 1\n\nDon't call __destruct() on an unserialized object that has a\n__wakeup() method if either\na) unserialization of its properties fails or\nb) the __wakeup() call fails (e.g. by throwing).\n\nThis basically treats __wakeup() as a form of constructor and\naligns us with the usual behavior that if the constructor call\nfails the destructor should not be called.\n\nThe security aspect here is that people use __wakeup() to prevent\nunserialization of objects with dangerous __destruct() methods,\nbut this is ineffective if __destruct() can still be called while\n__wakeup() was skipped.",
        "before_after_code_files": [
          "ext/standard/tests/serialize/bug72663.phpt||ext/standard/tests/serialize/bug72663.phpt",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/tests/serialize/bug72663.phpt||ext/standard/tests/serialize/bug72663.phpt": [
          "File: ext/standard/tests/serialize/bug72663.phpt -> ext/standard/tests/serialize/bug72663.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72663 (1): Don't call __destruct if __wakeup not called or fails",
          "3: --FILE--",
          "4: <?php",
          "6: class Test1 {",
          "7:     public function __wakeup() {",
          "8:         echo \"Wakeup\\n\";",
          "9:     }",
          "10:     public function __destruct() {",
          "11:         echo \"Dtor\\n\";",
          "12:     }",
          "13: }",
          "15: class Test2 {",
          "16:     public function __wakeup() {",
          "17:         throw new Exception('Unserialization forbidden');",
          "18:     }",
          "19:     public function __destruct() {",
          "20:         echo \"Dtor\\n\";",
          "21:     }",
          "22: }",
          "25: $s = 'O:5:\"Test1\":1:{s:10:\"\";}';",
          "26: var_dump(unserialize($s));",
          "29: $s = 'O:5:\"Test1\":2:{i:0;R:1;s:10:\"\";}';",
          "30: var_dump(unserialize($s));",
          "33: $s = 'O:5:\"Test2\":0:{}';",
          "34: try {",
          "35:     var_dump(unserialize($s));",
          "36: } catch (Exception $e) {",
          "37:     echo \"Caught\\n\";",
          "38: }",
          "41: $s = 'O:5:\"Test2\":1:{i:0;R:1;}';",
          "42: try {",
          "43:     var_dump(unserialize($s));",
          "44: } catch (Exception $e) {",
          "45:     echo \"Caught\\n\";",
          "46: }",
          "48: ?>",
          "49: --EXPECTF--",
          "50: Notice: unserialize(): Error at offset 17 of 24 bytes in %s on line %d",
          "51: bool(false)",
          "53: Notice: unserialize(): Error at offset 25 of 32 bytes in %s on line %d",
          "54: bool(false)",
          "55: Caught",
          "56: Caught",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:  zval retval;",
          "456:  zval fname;",
          "457:  HashTable *ht;",
          "459:  if (Z_TYPE_P(rval) != IS_OBJECT) {",
          "460:   return 0;",
          "461:  }",
          "463:  ht = Z_OBJPROP_P(rval);",
          "464:  zend_hash_extend(ht, zend_hash_num_elements(ht) + elements, (ht->u.flags & HASH_FLAG_PACKED));",
          "465:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, ht, elements, 1)) {",
          "466:   return 0;",
          "467:  }",
          "469:  ZVAL_DEREF(rval);",
          "472:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1);",
          "473:   BG(serialize_lock)++;",
          "475:   BG(serialize_lock)--;",
          "476:   zval_dtor(&fname);",
          "477:   zval_dtor(&retval);",
          "",
          "[Removed Lines]",
          "470:  if (Z_OBJCE_P(rval) != PHP_IC_ENTRY &&",
          "471:   zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1)) {",
          "474:   call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL);",
          "",
          "[Added Lines]",
          "458:  zend_bool has_wakeup;",
          "464:  has_wakeup = Z_OBJCE_P(rval) != PHP_IC_ENTRY",
          "465:   && zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1);",
          "470:   if (has_wakeup) {",
          "471:    ZVAL_DEREF(rval);",
          "472:    GC_FLAGS(Z_OBJ_P(rval)) |= IS_OBJ_DESTRUCTOR_CALLED;",
          "473:   }",
          "478:  if (has_wakeup) {",
          "481:   if (call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL) == FAILURE || Z_ISUNDEF(retval)) {",
          "482:    GC_FLAGS(Z_OBJ_P(rval)) |= IS_OBJ_DESTRUCTOR_CALLED;",
          "483:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "514:  start = cursor;",
          "518: {",
          "519:  YYCTYPE yych;",
          "520:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "517: #line 518 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "525: #line 526 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:  zval retval;",
          "460:  zval fname;",
          "461:  HashTable *ht;",
          "463:  if (Z_TYPE_P(rval) != IS_OBJECT) {",
          "464:   return 0;",
          "465:  }",
          "467:  ht = Z_OBJPROP_P(rval);",
          "468:  zend_hash_extend(ht, zend_hash_num_elements(ht) + elements, (ht->u.flags & HASH_FLAG_PACKED));",
          "469:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, ht, elements, 1)) {",
          "470:   return 0;",
          "471:  }",
          "473:  ZVAL_DEREF(rval);",
          "476:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1);",
          "477:   BG(serialize_lock)++;",
          "479:   BG(serialize_lock)--;",
          "480:   zval_dtor(&fname);",
          "481:   zval_dtor(&retval);",
          "",
          "[Removed Lines]",
          "474:  if (Z_OBJCE_P(rval) != PHP_IC_ENTRY &&",
          "475:   zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1)) {",
          "478:   call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL);",
          "",
          "[Added Lines]",
          "462:  zend_bool has_wakeup;",
          "468:  has_wakeup = Z_OBJCE_P(rval) != PHP_IC_ENTRY",
          "469:   && zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1);",
          "474:   if (has_wakeup) {",
          "475:    ZVAL_DEREF(rval);",
          "476:    GC_FLAGS(Z_OBJ_P(rval)) |= IS_OBJ_DESTRUCTOR_CALLED;",
          "477:   }",
          "482:  if (has_wakeup) {",
          "485:   if (call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL) == FAILURE || Z_ISUNDEF(retval)) {",
          "486:    GC_FLAGS(Z_OBJ_P(rval)) |= IS_OBJ_DESTRUCTOR_CALLED;",
          "487:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "398256e5fe098bbc39579a2fd0b3782646cade0c",
      "candidate_info": {
        "commit_hash": "398256e5fe098bbc39579a2fd0b3782646cade0c",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/398256e5fe098bbc39579a2fd0b3782646cade0c",
        "files": [
          "Zend/zend_API.h",
          "ext/standard/filters.c",
          "ext/standard/http.c",
          "ext/standard/password.c",
          "ext/standard/php_var.h",
          "ext/standard/proc_open.c",
          "ext/standard/proc_open.h",
          "ext/standard/streamsfuncs.c",
          "ext/standard/user_filters.c",
          "ext/standard/uuencode.c",
          "ext/standard/var.c",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re",
          "main/streams/php_stream_context.h"
        ],
        "message": "Use better data structures (incomplete)",
        "before_after_code_files": [
          "Zend/zend_API.h||Zend/zend_API.h",
          "ext/standard/filters.c||ext/standard/filters.c",
          "ext/standard/http.c||ext/standard/http.c",
          "ext/standard/password.c||ext/standard/password.c",
          "ext/standard/php_var.h||ext/standard/php_var.h",
          "ext/standard/proc_open.c||ext/standard/proc_open.c",
          "ext/standard/proc_open.h||ext/standard/proc_open.h",
          "ext/standard/streamsfuncs.c||ext/standard/streamsfuncs.c",
          "ext/standard/user_filters.c||ext/standard/user_filters.c",
          "ext/standard/uuencode.c||ext/standard/uuencode.c",
          "ext/standard/var.c||ext/standard/var.c",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re",
          "main/streams/php_stream_context.h||main/streams/php_stream_context.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_API.h||Zend/zend_API.h": [
          "File: Zend/zend_API.h -> Zend/zend_API.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "604: #define RETVAL_STRING(s)     ZVAL_STRING(return_value, s)",
          "605: #define RETVAL_STRINGL(s, l)    ZVAL_STRINGL(return_value, s, l)",
          "606: #define RETVAL_EMPTY_STRING()    ZVAL_EMPTY_STRING(return_value)",
          "607: #define RETVAL_ZVAL(zv, copy, dtor)  ZVAL_ZVAL(return_value, zv, copy, dtor)",
          "608: #define RETVAL_FALSE       ZVAL_BOOL(return_value, 0)",
          "609: #define RETVAL_TRUE        ZVAL_BOOL(return_value, 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "607: #define RETVAL_RES(r)      ZVAL_RES(return_value, r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "616: #define RETURN_STRING(s)     { RETVAL_STRING(s); return; }",
          "617: #define RETURN_STRINGL(s, l)    { RETVAL_STRINGL(s, l); return; }",
          "618: #define RETURN_EMPTY_STRING()    { RETVAL_EMPTY_STRING(); return; }",
          "619: #define RETURN_ZVAL(zv, copy, dtor)  { RETVAL_ZVAL(zv, copy, dtor); return; }",
          "620: #define RETURN_FALSE       { RETVAL_FALSE; return; }",
          "621: #define RETURN_TRUE        { RETVAL_TRUE; return; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620: #define RETURN_RES(r)      { RETVAL_RES(r); return; }",
          "",
          "---------------"
        ],
        "ext/standard/filters.c||ext/standard/filters.c": [
          "File: ext/standard/filters.c -> ext/standard/filters.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:  if (filterparams != NULL) {",
          "260:   if (Z_TYPE_P(filterparams) == IS_ARRAY) {",
          "261:    HashPosition pos;",
          "264:    zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(filterparams), &pos);",
          "266:     convert_to_string_ex(tmp);",
          "267:     smart_str_appendc(&tags_ss, '<');",
          "269:     smart_str_appendc(&tags_ss, '>');",
          "270:     zend_hash_move_forward_ex(Z_ARRVAL_P(filterparams), &pos);",
          "271:    }",
          "272:    smart_str_0(&tags_ss);",
          "273:   } else {",
          "277:    tags_ss.c = Z_STRVAL_P(filterparams);",
          "278:    tags_ss.len = Z_STRLEN_P(filterparams);",
          "",
          "[Removed Lines]",
          "262:    zval **tmp;",
          "265:    while (zend_hash_get_current_data_ex(Z_ARRVAL_P(filterparams), (void **) &tmp, &pos) == SUCCESS) {",
          "268:     smart_str_appendl(&tags_ss, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "275:    convert_to_string_ex(&filterparams);",
          "",
          "[Added Lines]",
          "262:    zval *tmp;",
          "265:    while ((tmp = zend_hash_get_current_data_ex(Z_ARRVAL_P(filterparams), &pos)) != NULL) {",
          "268:     smart_str_appendl(&tags_ss, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "275:    convert_to_string_ex(filterparams);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:  if (php_strip_tags_filter_ctor(inst, tags_ss.c, tags_ss.len, persistent) != SUCCESS) {",
          "284:   if (tags_ss.a != 0) {",
          "286:   }",
          "287:   pefree(inst, persistent);",
          "288:   return NULL;",
          "289:  }",
          "291:  if (tags_ss.a != 0) {",
          "293:  }",
          "295:  return php_stream_filter_alloc(&strfilter_strip_tags_ops, inst, persistent);",
          "",
          "[Removed Lines]",
          "285:    STR_FREE(tags_ss.c);",
          "292:   STR_FREE(tags_ss.c);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1221: static php_conv_err_t php_conv_get_string_prop_ex(const HashTable *ht, char **pretval, size_t *pretval_len, char *field_name, size_t field_name_len, int persistent)",
          "1222: {",
          "1232:    convert_to_string(&zt);",
          "1234:    if (NULL == (*pretval = pemalloc(Z_STRLEN(zt) + 1, persistent))) {",
          "",
          "[Removed Lines]",
          "1223:  zval **tmpval;",
          "1228:  if (zend_hash_find((HashTable *)ht, field_name, field_name_len, (void **)&tmpval) == SUCCESS) {",
          "1229:   if (Z_TYPE_PP(tmpval) != IS_STRING) {",
          "1230:    zval zt = **tmpval;",
          "",
          "[Added Lines]",
          "1223:  zval *tmpval;",
          "1228:  if ((tmpval = zend_hash_str_find((HashTable *)ht, field_name, field_name_len-1)) != NULL) {",
          "1229:   if (Z_TYPE_P(tmpval) != IS_STRING) {",
          "1230:    zval zt;",
          "1232:    ZVAL_COPY_VALUE(&zt, tmpval);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1239:    memcpy(*pretval, Z_STRVAL(zt), Z_STRLEN(zt) + 1);",
          "1240:    zval_dtor(&zt);",
          "1241:   } else {",
          "1243:     return PHP_CONV_ERR_ALLOC;",
          "1244:    }",
          "1247:   }",
          "1248:  } else {",
          "1249:   return PHP_CONV_ERR_NOT_FOUND;",
          "",
          "[Removed Lines]",
          "1242:    if (NULL == (*pretval = pemalloc(Z_STRLEN_PP(tmpval) + 1, persistent))) {",
          "1246:    memcpy(*pretval, Z_STRVAL_PP(tmpval), Z_STRLEN_PP(tmpval) + 1);",
          "",
          "[Added Lines]",
          "1243:    if (NULL == (*pretval = pemalloc(Z_STRLEN_P(tmpval) + 1, persistent))) {",
          "1247:    memcpy(*pretval, Z_STRVAL_P(tmpval), Z_STRLEN_P(tmpval) + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1278: static php_conv_err_t php_conv_get_ulong_prop_ex(const HashTable *ht, unsigned long *pretval, char *field_name, size_t field_name_len)",
          "1279: {",
          "1290:    convert_to_long(&tmp);",
          "1292:   }",
          "1295:   } else {",
          "1297:   }",
          "1298:  } else {",
          "1299:   return PHP_CONV_ERR_NOT_FOUND;",
          "",
          "[Removed Lines]",
          "1280:  zval **tmpval;",
          "1284:  if (zend_hash_find((HashTable *)ht, field_name, field_name_len, (void **)&tmpval) == SUCCESS) {",
          "1285:   zval tmp, *ztval = *tmpval;",
          "1287:   if (Z_TYPE_PP(tmpval) != IS_LONG) {",
          "1288:    tmp = *ztval;",
          "1289:    zval_copy_ctor(&tmp);",
          "1291:    ztval = &tmp;",
          "1293:   if (Z_LVAL_P(ztval) < 0) {",
          "",
          "[Added Lines]",
          "1281:  zval *tmpval;",
          "1285:  if ((tmpval = zend_hash_str_find((HashTable *)ht, field_name, field_name_len-1)) != NULL) {",
          "1286:   zval tmp;",
          "1288:   if (Z_TYPE_P(tmpval) != IS_LONG) {",
          "1289:    ZVAL_DUP(&tmp, tmpval);;",
          "1291:    tmpval = &tmp;",
          "1293:   if (Z_LVAL_P(tmpval) < 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1304: static php_conv_err_t php_conv_get_bool_prop_ex(const HashTable *ht, int *pretval, char *field_name, size_t field_name_len)",
          "1305: {",
          "1315:    zval_copy_ctor(&tmp);",
          "1316:    convert_to_boolean(&tmp);",
          "1318:   }",
          "1320:  } else {",
          "1321:   return PHP_CONV_ERR_NOT_FOUND;",
          "1322:  }",
          "",
          "[Removed Lines]",
          "1306:  zval **tmpval;",
          "1310:  if (zend_hash_find((HashTable *)ht, field_name, field_name_len, (void **)&tmpval) == SUCCESS) {",
          "1311:   zval tmp, *ztval = *tmpval;",
          "1313:   if (Z_TYPE_PP(tmpval) != IS_BOOL) {",
          "1314:    tmp = *ztval;",
          "1317:    ztval = &tmp;",
          "",
          "[Added Lines]",
          "1306:  zval *tmpval;",
          "1310:  if ((tmpval = zend_hash_str_find((HashTable *)ht, field_name, field_name_len-1)) != NULL) {",
          "1311:   zval tmp;",
          "1313:   if (Z_TYPE_P(tmpval) != IS_BOOL) {",
          "1314:    ZVAL_DUP(&tmp, tmpval);",
          "1317:    tmpval = &tmp;",
          "",
          "---------------"
        ],
        "ext/standard/http.c||ext/standard/http.c": [
          "File: ext/standard/http.c -> ext/standard/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     const char *key_suffix, int key_suffix_len,",
          "32:      zval *type, char *arg_sep, int enc_type TSRMLS_DC)",
          "33: {",
          "38:  ulong idx;",
          "41:  if (!ht) {",
          "42:   return FAILURE;",
          "",
          "[Removed Lines]",
          "34:  char *key = NULL;",
          "35:  char *ekey, *newprefix, *p;",
          "36:  int arg_sep_len, ekey_len, key_type, newprefix_len;",
          "37:  uint key_len;",
          "39:  zval **zdata = NULL, *copyzval;",
          "",
          "[Added Lines]",
          "34:  zend_string *key = NULL;",
          "35:  char *ekey, *newprefix, *p, *prop_name;",
          "36:  int arg_sep_len, ekey_len, key_type, newprefix_len, prop_len;",
          "38:  zval *zdata = NULL, copyzval;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  arg_sep_len = strlen(arg_sep);",
          "58:  for (zend_hash_internal_pointer_reset(ht);",
          "60:   zend_hash_move_forward(ht)",
          "61:  ) {",
          "74:     continue;",
          "75:    }",
          "77:   }",
          "80:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Error traversing form data array\");",
          "81:    return FAILURE;",
          "82:   }",
          "84:    if (key_type == HASH_KEY_IS_STRING) {",
          "85:     if (enc_type == PHP_QUERY_RFC3986) {",
          "87:     } else {",
          "89:     }",
          "90:     newprefix_len = key_suffix_len + ekey_len + key_prefix_len + 3 /* %5B */;",
          "91:     newprefix = emalloc(newprefix_len + 1);",
          "",
          "[Removed Lines]",
          "59:   (key_type = zend_hash_get_current_key_ex(ht, &key, &key_len, &idx, 0, NULL)) != HASH_KEY_NON_EXISTENT;",
          "62:   if (key_type == HASH_KEY_IS_STRING && key_len && key[key_len-1] == '\\0') {",
          "64:    key_len -= 1;",
          "65:   }",
          "68:   if (key && *key == '\\0' && type != NULL) {",
          "69:    const char *tmp;",
          "71:    zend_object *zobj = zend_objects_get_address(type TSRMLS_CC);",
          "72:    if (zend_check_property_access(zobj, key, key_len TSRMLS_CC) != SUCCESS) {",
          "76:    zend_unmangle_property_name_ex(key, key_len, &tmp, (const char**)&key, &key_len);",
          "79:   if (zend_hash_get_current_data_ex(ht, (void **)&zdata, NULL) == FAILURE || !zdata || !(*zdata)) {",
          "83:   if (Z_TYPE_PP(zdata) == IS_ARRAY || Z_TYPE_PP(zdata) == IS_OBJECT) {",
          "86:      ekey = php_raw_url_encode(key, key_len, &ekey_len);",
          "88:      ekey = php_url_encode(key, key_len, &ekey_len);",
          "",
          "[Added Lines]",
          "58:   (key_type = zend_hash_get_current_key_ex(ht, &key, &idx, 0, NULL)) != HASH_KEY_NON_EXISTENT;",
          "62:   prop_name = key->val;",
          "63:   prop_len = key->len;",
          "64:   if (key && key->val[0] == '\\0' && type != NULL) {",
          "65:    const char *tmp, *prop_name;",
          "66:    int prop_len;",
          "68:    zend_object *zobj = Z_OBJ_P(type);",
          "69:    if (zend_check_property_access(zobj, key TSRMLS_CC) != SUCCESS) {",
          "73:    zend_unmangle_property_name_ex(key->val, key->len, &tmp, &prop_name, &prop_len);",
          "76:   if ((zdata = zend_hash_get_current_data_ex(ht, NULL)) == NULL) {",
          "80:   if (Z_TYPE_P(zdata) == IS_ARRAY || Z_TYPE_P(zdata) == IS_OBJECT) {",
          "83:      ekey = php_raw_url_encode(prop_name, prop_len, &ekey_len);",
          "85:      ekey = php_url_encode(prop_name, prop_len, &ekey_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:    }",
          "139:    ht->nApplyCount++;",
          "141:    ht->nApplyCount--;",
          "142:    efree(newprefix);",
          "145:    continue;",
          "146:   } else {",
          "",
          "[Removed Lines]",
          "140:    php_url_encode_hash_ex(HASH_OF(*zdata), formstr, NULL, 0, newprefix, newprefix_len, \"%5D\", 3, (Z_TYPE_PP(zdata) == IS_OBJECT ? *zdata : NULL), arg_sep, enc_type TSRMLS_CC);",
          "143:   } else if (Z_TYPE_PP(zdata) == IS_NULL || Z_TYPE_PP(zdata) == IS_RESOURCE) {",
          "",
          "[Added Lines]",
          "137:    php_url_encode_hash_ex(HASH_OF(zdata), formstr, NULL, 0, newprefix, newprefix_len, \"%5D\", 3, (Z_TYPE_P(zdata) == IS_OBJECT ? zdata : NULL), arg_sep, enc_type TSRMLS_CC);",
          "140:   } else if (Z_TYPE_P(zdata) == IS_NULL || Z_TYPE_P(zdata) == IS_RESOURCE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151:    smart_str_appendl(formstr, key_prefix, key_prefix_len);",
          "152:    if (key_type == HASH_KEY_IS_STRING) {",
          "153:     if (enc_type == PHP_QUERY_RFC3986) {",
          "155:     } else {",
          "157:     }",
          "158:     smart_str_appendl(formstr, ekey, ekey_len);",
          "159:     efree(ekey);",
          "",
          "[Removed Lines]",
          "154:      ekey = php_raw_url_encode(key, key_len, &ekey_len);",
          "156:      ekey = php_url_encode(key, key_len, &ekey_len);",
          "",
          "[Added Lines]",
          "151:      ekey = php_raw_url_encode(prop_name, prop_len, &ekey_len);",
          "153:      ekey = php_url_encode(prop_name, prop_len, &ekey_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "168:    }",
          "169:    smart_str_appendl(formstr, key_suffix, key_suffix_len);",
          "170:    smart_str_appendl(formstr, \"=\", 1);",
          "172:     case IS_STRING:",
          "173:      if (enc_type == PHP_QUERY_RFC3986) {",
          "175:      } else {",
          "177:      }",
          "178:      break;",
          "179:     case IS_LONG:",
          "180:     case IS_BOOL:",
          "182:      break;",
          "183:     case IS_DOUBLE:",
          "185:      break;",
          "186:     default:",
          "191:      convert_to_string_ex(&copyzval);",
          "192:      if (enc_type == PHP_QUERY_RFC3986) {",
          "194:      } else {",
          "196:      }",
          "197:      zval_ptr_dtor(&copyzval);",
          "198:    }",
          "",
          "[Removed Lines]",
          "171:    switch (Z_TYPE_PP(zdata)) {",
          "174:       ekey = php_raw_url_encode(Z_STRVAL_PP(zdata), Z_STRLEN_PP(zdata), &ekey_len);",
          "176:       ekey = php_url_encode(Z_STRVAL_PP(zdata), Z_STRLEN_PP(zdata), &ekey_len);",
          "181:      ekey_len = spprintf(&ekey, 0, \"%ld\", Z_LVAL_PP(zdata));",
          "184:      ekey_len = spprintf(&ekey, 0, \"%.*G\", (int) EG(precision), Z_DVAL_PP(zdata));",
          "188:      MAKE_STD_ZVAL(copyzval);",
          "190:      zval_copy_ctor(copyzval);",
          "193:       ekey = php_raw_url_encode(Z_STRVAL_P(copyzval), Z_STRLEN_P(copyzval), &ekey_len);",
          "195:       ekey = php_url_encode(Z_STRVAL_P(copyzval), Z_STRLEN_P(copyzval), &ekey_len);",
          "",
          "[Added Lines]",
          "168:    switch (Z_TYPE_P(zdata)) {",
          "171:       ekey = php_raw_url_encode(Z_STRVAL_P(zdata), Z_STRLEN_P(zdata), &ekey_len);",
          "173:       ekey = php_url_encode(Z_STRVAL_P(zdata), Z_STRLEN_P(zdata), &ekey_len);",
          "178:      ekey_len = spprintf(&ekey, 0, \"%ld\", Z_LVAL_P(zdata));",
          "181:      ekey_len = spprintf(&ekey, 0, \"%.*G\", (int) EG(precision), Z_DVAL_P(zdata));",
          "185:      ZVAL_DUP(&copyzval, zdata);",
          "188:       ekey = php_raw_url_encode(Z_STRVAL(copyzval), Z_STRLEN(copyzval), &ekey_len);",
          "190:       ekey = php_url_encode(Z_STRVAL(copyzval), Z_STRLEN(copyzval), &ekey_len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "238:  smart_str_0(&formstr);",
          "241: }",
          "",
          "[Removed Lines]",
          "240:  RETURN_STRINGL(formstr.c, formstr.len, 0);",
          "",
          "[Added Lines]",
          "236:  RETURN_STRINGL(formstr.c, formstr.len);",
          "",
          "---------------"
        ],
        "ext/standard/password.c||ext/standard/password.c": [
          "File: ext/standard/password.c -> ext/standard/password.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:  php_password_algo algo;",
          "178:  int hash_len;",
          "179:  char *hash, *algo_name;",
          "182:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &hash, &hash_len) == FAILURE) {",
          "183:   return;",
          "",
          "[Removed Lines]",
          "180:  zval *options;",
          "",
          "[Added Lines]",
          "180:  zval options;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:   RETURN_FALSE;",
          "189:  }",
          "194:  algo = php_password_determine_algo(hash, (size_t) hash_len);",
          "195:  algo_name = php_password_get_algo_name(algo);",
          "",
          "[Removed Lines]",
          "191:  ALLOC_INIT_ZVAL(options);",
          "192:  array_init(options);",
          "",
          "[Added Lines]",
          "191:  array_init(&options);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:    {",
          "200:     long cost = PHP_PASSWORD_BCRYPT_COST;",
          "201:     sscanf(hash, \"$2y$%ld$\", &cost);",
          "203:    }",
          "204:    break;",
          "205:   case PHP_PASSWORD_UNKNOWN:",
          "",
          "[Removed Lines]",
          "202:     add_assoc_long(options, \"cost\", cost);",
          "",
          "[Added Lines]",
          "201:     add_assoc_long(&options, \"cost\", cost);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:  add_assoc_long(return_value, \"algo\", algo);",
          "213:  add_assoc_string(return_value, \"algoName\", algo_name, 1);",
          "215: }",
          "217: PHP_FUNCTION(password_needs_rehash)",
          "",
          "[Removed Lines]",
          "214:  add_assoc_zval(return_value, \"options\", options);",
          "",
          "[Added Lines]",
          "213:  add_assoc_zval(return_value, \"options\", &options);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "221:  int hash_len;",
          "222:  char *hash;",
          "223:  HashTable *options = 0;",
          "226:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sl|H\", &hash, &hash_len, &new_algo, &options) == FAILURE) {",
          "227:   return;",
          "",
          "[Removed Lines]",
          "224:  zval **option_buffer;",
          "",
          "[Added Lines]",
          "223:  zval *option_buffer;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "243:    {",
          "244:     long new_cost = PHP_PASSWORD_BCRYPT_COST, cost = 0;",
          "248:       zval cast_option_buffer;",
          "250:       convert_to_long(&cast_option_buffer);",
          "251:       new_cost = Z_LVAL(cast_option_buffer);",
          "252:       zval_dtor(&cast_option_buffer);",
          "253:      } else {",
          "255:      }",
          "256:     }",
          "",
          "[Removed Lines]",
          "246:     if (options && zend_symtable_find(options, \"cost\", sizeof(\"cost\"), (void **) &option_buffer) == SUCCESS) {",
          "247:      if (Z_TYPE_PP(option_buffer) != IS_LONG) {",
          "249:       MAKE_COPY_ZVAL(option_buffer, &cast_option_buffer);",
          "254:       new_cost = Z_LVAL_PP(option_buffer);",
          "",
          "[Added Lines]",
          "245:     if (options && (option_buffer = zend_symtable_str_find(options, \"cost\", sizeof(\"cost\")-1)) != NULL) {",
          "246:      if (Z_TYPE_P(option_buffer) != IS_LONG) {",
          "248:       ZVAL_DUP(&cast_option_buffer, option_buffer);",
          "253:       new_cost = Z_LVAL_P(option_buffer);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "312:  int password_len = 0, hash_len;",
          "313:  size_t salt_len = 0, required_salt_len = 0, hash_format_len;",
          "314:  HashTable *options = 0;",
          "317:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sl|H\", &password, &password_len, &algo, &options) == FAILURE) {",
          "318:   return;",
          "",
          "[Removed Lines]",
          "315:  zval **option_buffer;",
          "",
          "[Added Lines]",
          "314:  zval *option_buffer;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "323:   {",
          "324:    long cost = PHP_PASSWORD_BCRYPT_COST;",
          "328:      zval cast_option_buffer;",
          "330:      convert_to_long(&cast_option_buffer);",
          "331:      cost = Z_LVAL(cast_option_buffer);",
          "332:      zval_dtor(&cast_option_buffer);",
          "333:     } else {",
          "335:     }",
          "336:    }",
          "",
          "[Removed Lines]",
          "326:    if (options && zend_symtable_find(options, \"cost\", 5, (void **) &option_buffer) == SUCCESS) {",
          "327:     if (Z_TYPE_PP(option_buffer) != IS_LONG) {",
          "329:      MAKE_COPY_ZVAL(option_buffer, &cast_option_buffer);",
          "334:      cost = Z_LVAL_PP(option_buffer);",
          "",
          "[Added Lines]",
          "325:    if (options && (option_buffer = zend_symtable_str_find(options, \"cost\", sizeof(\"cost\")-1)) != NULL) {",
          "326:     if (Z_TYPE_P(option_buffer) != IS_LONG) {",
          "328:      ZVAL_DUP(&cast_option_buffer, option_buffer);",
          "333:      cost = Z_LVAL_P(option_buffer);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "352:    RETURN_NULL();",
          "353:  }",
          "356:   char *buffer;",
          "357:   int buffer_len_int = 0;",
          "358:   size_t buffer_len;",
          "360:    case IS_STRING:",
          "363:     break;",
          "364:    case IS_LONG:",
          "365:    case IS_DOUBLE:",
          "366:    case IS_OBJECT: {",
          "367:     zval cast_option_buffer;",
          "369:     convert_to_string(&cast_option_buffer);",
          "370:     if (Z_TYPE(cast_option_buffer) == IS_STRING) {",
          "371:      buffer = estrndup(Z_STRVAL(cast_option_buffer), Z_STRLEN(cast_option_buffer));",
          "",
          "[Removed Lines]",
          "355:  if (options && zend_symtable_find(options, \"salt\", 5, (void**) &option_buffer) == SUCCESS) {",
          "359:   switch (Z_TYPE_PP(option_buffer)) {",
          "361:     buffer = estrndup(Z_STRVAL_PP(option_buffer), Z_STRLEN_PP(option_buffer));",
          "362:     buffer_len_int = Z_STRLEN_PP(option_buffer);",
          "368:     MAKE_COPY_ZVAL(option_buffer, &cast_option_buffer);",
          "",
          "[Added Lines]",
          "354:  if (options && (option_buffer = zend_symtable_str_find(options, \"salt\", sizeof(\"salt\")-1)) != NULL) {",
          "358:   switch (Z_TYPE_P(option_buffer)) {",
          "360:     buffer = estrndup(Z_STRVAL_P(option_buffer), Z_STRLEN_P(option_buffer));",
          "361:     buffer_len_int = Z_STRLEN_P(option_buffer);",
          "368:     ZVAL_DUP(&cast_option_buffer, option_buffer);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "445:   RETURN_FALSE;",
          "446:  }",
          "449: }",
          "",
          "[Removed Lines]",
          "448:  RETURN_STRING(result, 0);",
          "",
          "[Added Lines]",
          "449:  RETURN_STRING(result);",
          "",
          "---------------"
        ],
        "ext/standard/php_var.h||ext/standard/php_var.h": [
          "File: ext/standard/php_var.h -> ext/standard/php_var.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: typedef struct php_unserialize_data* php_unserialize_data_t;",
          "55: #define PHP_VAR_SERIALIZE_INIT(var_hash_ptr) \\",
          "56: do  { \\",
          "",
          "[Removed Lines]",
          "52: PHPAPI void php_var_serialize(smart_str *buf, zval **struc, php_serialize_data_t *var_hash TSRMLS_DC);",
          "53: PHPAPI int php_var_unserialize(zval **rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash TSRMLS_DC);",
          "",
          "[Added Lines]",
          "52: PHPAPI void php_var_serialize(smart_str *buf, zval *struc, php_serialize_data_t *var_hash TSRMLS_DC);",
          "53: PHPAPI int php_var_unserialize(zval *rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:  } \\",
          "114: } while (0)",
          "119: PHPAPI void var_destroy(php_unserialize_data_t *var_hash);",
          "121: #define PHP_VAR_UNSERIALIZE_ZVAL_CHANGED(var_hash, ozval, nzval) \\",
          "",
          "[Removed Lines]",
          "116: PHPAPI void var_replace(php_unserialize_data_t *var_hash, zval *ozval, zval **nzval);",
          "117: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hash, zval **val);",
          "118: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval **rval);",
          "",
          "[Added Lines]",
          "116: PHPAPI void var_replace(php_unserialize_data_t *var_hash, zval *ozval, zval *nzval);",
          "117: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hash, zval *val);",
          "118: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval *rval);",
          "",
          "---------------"
        ],
        "ext/standard/proc_open.c||ext/standard/proc_open.c": [
          "File: ext/standard/proc_open.c -> ext/standard/proc_open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: static php_process_env_t _php_array_to_envp(zval *environment, int is_persistent TSRMLS_DC)",
          "76: {",
          "78:  php_process_env_t env;",
          "80: #ifndef PHP_WIN32",
          "81:  char **ep;",
          "82: #endif",
          "83:  char *p;",
          "85:  ulong num_key;",
          "86:  HashTable *target_hash;",
          "87:  HashPosition pos;",
          "",
          "[Removed Lines]",
          "77:  zval **element;",
          "79:  char *string_key, *data;",
          "84:  uint string_length, cnt, l, sizeenv=0, el_len;",
          "",
          "[Added Lines]",
          "77:  zval *element;",
          "79:  zend_string *string_key;",
          "80:  char *data;",
          "85:  uint cnt, l, sizeenv=0, el_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:  for (zend_hash_internal_pointer_reset_ex(target_hash, &pos);",
          "113:    zend_hash_move_forward_ex(target_hash, &pos)) {",
          "115:   convert_to_string_ex(element);",
          "117:   if (el_len == 0) {",
          "118:    continue;",
          "119:   }",
          "121:   sizeenv += el_len+1;",
          "124:    case HASH_KEY_IS_STRING:",
          "126:      continue;",
          "127:     }",
          "129:     break;",
          "130:   }",
          "131:  }",
          "",
          "[Removed Lines]",
          "112:    zend_hash_get_current_data_ex(target_hash, (void **) &element, &pos) == SUCCESS;",
          "116:   el_len = Z_STRLEN_PP(element);",
          "123:   switch (zend_hash_get_current_key_ex(target_hash, &string_key, &string_length, &num_key, 0, &pos)) {",
          "125:     if (string_length == 0) {",
          "128:     sizeenv += string_length+1;",
          "",
          "[Added Lines]",
          "113:    (element = zend_hash_get_current_data_ex(target_hash, &pos)) != NULL;",
          "117:   el_len = Z_STRLEN_P(element);",
          "124:   switch (zend_hash_get_current_key_ex(target_hash, &string_key, &num_key, 0, &pos)) {",
          "126:     if (string_key->len == 0) {",
          "129:     sizeenv += string_key->len + 2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:  p = env.envp = (char *) pecalloc(sizeenv + 4, 1, is_persistent);",
          "138:  for (zend_hash_internal_pointer_reset_ex(target_hash, &pos);",
          "140:    zend_hash_move_forward_ex(target_hash, &pos)) {",
          "142:   convert_to_string_ex(element);",
          "145:   if (el_len == 0) {",
          "146:    continue;",
          "147:   }",
          "151:    case HASH_KEY_IS_STRING:",
          "153:      continue;",
          "154:     }",
          "158:     strncat(p, \"=\", 1);",
          "159:     strncat(p, data, el_len);",
          "",
          "[Removed Lines]",
          "139:    zend_hash_get_current_data_ex(target_hash, (void **) &element, &pos) == SUCCESS;",
          "143:   el_len = Z_STRLEN_PP(element);",
          "149:   data = Z_STRVAL_PP(element);",
          "150:   switch (zend_hash_get_current_key_ex(target_hash, &string_key, &string_length, &num_key, 0, &pos)) {",
          "152:     if (string_length == 0) {",
          "156:     l = string_length + el_len + 1;",
          "157:     memcpy(p, string_key, string_length);",
          "",
          "[Added Lines]",
          "140:    (element = zend_hash_get_current_data_ex(target_hash, &pos)) != NULL;",
          "144:   el_len = Z_STRLEN_P(element);",
          "150:   data = Z_STRVAL_P(element);",
          "151:   switch (zend_hash_get_current_key_ex(target_hash, &string_key, &num_key, 0, &pos)) {",
          "153:     if (string_key->len == 0) {",
          "157:     l = string_key->len + el_len + 2;",
          "158:     memcpy(p, string_key->val, string_key->len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "204: {",
          "205:  struct php_process_handle *proc = (struct php_process_handle*)rsrc->ptr;",
          "206:  int i;",
          "",
          "[Removed Lines]",
          "203: static void proc_open_rsrc_dtor(zend_rsrc_list_entry *rsrc TSRMLS_DC)",
          "",
          "[Added Lines]",
          "204: static void proc_open_rsrc_dtor(zend_resource *rsrc TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "279:   RETURN_FALSE;",
          "280:  }",
          "284: #ifdef PHP_WIN32",
          "285:  if (TerminateProcess(proc->childHandle, 255)) {",
          "",
          "[Removed Lines]",
          "282:  ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, &zproc, -1, \"process\", le_proc_open);",
          "",
          "[Added Lines]",
          "283:  ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, zproc, -1, \"process\", le_proc_open);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "308:   RETURN_FALSE;",
          "309:  }",
          "313:  FG(pclose_wait) = 1;",
          "315:  FG(pclose_wait) = 0;",
          "316:  RETURN_LONG(FG(pclose_ret));",
          "317: }",
          "",
          "[Removed Lines]",
          "311:  ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, &zproc, -1, \"process\", le_proc_open);",
          "314:  zend_list_delete(Z_LVAL_P(zproc));",
          "",
          "[Added Lines]",
          "312:  ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, zproc, -1, \"process\", le_proc_open);",
          "315:  zend_list_delete(Z_RES_P(zproc));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "336:   RETURN_FALSE;",
          "337:  }",
          "341:  array_init(return_value);",
          "",
          "[Removed Lines]",
          "339:  ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, &zproc, -1, \"process\", le_proc_open);",
          "",
          "[Added Lines]",
          "340:  ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, zproc, -1, \"process\", le_proc_open);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "438:  php_process_env_t env;",
          "439:  int ndesc = 0;",
          "440:  int i;",
          "442:  HashPosition pos;",
          "443:  struct php_proc_open_descriptor_item descriptors[PHP_PROC_OPEN_MAX_DESCRIPTORS];",
          "444: #ifdef PHP_WIN32",
          "",
          "[Removed Lines]",
          "441:  zval **descitem = NULL;",
          "",
          "[Added Lines]",
          "442:  zval *descitem = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "519:  zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(descriptorspec), &pos);",
          "522:   ulong nindex;",
          "525:   str_index = NULL;",
          "528:   if (str_index) {",
          "529:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"descriptor spec must be an integer indexed array\");",
          "",
          "[Removed Lines]",
          "520:  while (zend_hash_get_current_data_ex(Z_ARRVAL_P(descriptorspec), (void **)&descitem, &pos) == SUCCESS) {",
          "521:   char *str_index;",
          "523:   zval **ztype;",
          "526:   zend_hash_get_current_key_ex(Z_ARRVAL_P(descriptorspec), &str_index, NULL, &nindex, 0, &pos);",
          "",
          "[Added Lines]",
          "521:  while ((descitem = zend_hash_get_current_data_ex(Z_ARRVAL_P(descriptorspec), &pos)) != NULL) {",
          "522:   zend_string *str_index;",
          "524:   zval *ztype;",
          "527:   zend_hash_get_current_key_ex(Z_ARRVAL_P(descriptorspec), &str_index, &nindex, 0, &pos);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "533:   descriptors[ndesc].index = nindex;",
          "537:    php_stream *stream;",
          "538:    int fd;",
          "",
          "[Removed Lines]",
          "535:   if (Z_TYPE_PP(descitem) == IS_RESOURCE) {",
          "",
          "[Added Lines]",
          "536:   if (Z_TYPE_P(descitem) == IS_RESOURCE) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "558: #endif",
          "559:    descriptors[ndesc].mode = DESC_FILE;",
          "562:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Descriptor item must be either an array or a File-Handle\");",
          "563:    goto exit_fail;",
          "564:   } else {",
          "567:     convert_to_string_ex(ztype);",
          "568:    } else {",
          "569:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing handle qualifier in array\");",
          "570:     goto exit_fail;",
          "571:    }",
          "574:     php_file_descriptor_t newpipe[2];",
          "578:      convert_to_string_ex(zmode);",
          "579:     } else {",
          "580:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing mode parameter for 'pipe'\");",
          "",
          "[Removed Lines]",
          "561:   } else if (Z_TYPE_PP(descitem) != IS_ARRAY) {",
          "566:    if (zend_hash_index_find(Z_ARRVAL_PP(descitem), 0, (void **)&ztype) == SUCCESS) {",
          "573:    if (strcmp(Z_STRVAL_PP(ztype), \"pipe\") == 0) {",
          "575:     zval **zmode;",
          "577:     if (zend_hash_index_find(Z_ARRVAL_PP(descitem), 1, (void **)&zmode) == SUCCESS) {",
          "",
          "[Added Lines]",
          "562:   } else if (Z_TYPE_P(descitem) != IS_ARRAY) {",
          "567:    if ((ztype = zend_hash_index_find(Z_ARRVAL_P(descitem), 0)) != NULL) {",
          "574:    if (strcmp(Z_STRVAL_P(ztype), \"pipe\") == 0) {",
          "576:     zval *zmode;",
          "578:     if ((zmode = zend_hash_index_find(Z_ARRVAL_P(descitem), 1)) != NULL) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "588:      goto exit_fail;",
          "589:     }",
          "592:      descriptors[ndesc].parentend = newpipe[1];",
          "593:      descriptors[ndesc].childend = newpipe[0];",
          "594:      descriptors[ndesc].mode |= DESC_PARENT_MODE_WRITE;",
          "",
          "[Removed Lines]",
          "591:     if (strncmp(Z_STRVAL_PP(zmode), \"w\", 1) != 0) {",
          "",
          "[Added Lines]",
          "592:     if (strncmp(Z_STRVAL_P(zmode), \"w\", 1) != 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "602: #endif",
          "603:     descriptors[ndesc].mode_flags = descriptors[ndesc].mode & DESC_PARENT_MODE_WRITE ? O_WRONLY : O_RDONLY;",
          "604: #ifdef PHP_WIN32",
          "606:      descriptors[ndesc].mode_flags |= O_BINARY;",
          "607: #endif",
          "611:     int fd;",
          "612:     php_stream *stream;",
          "614:     descriptors[ndesc].mode = DESC_FILE;",
          "617:      convert_to_string_ex(zfile);",
          "618:     } else {",
          "619:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing file name parameter for 'file'\");",
          "620:      goto exit_fail;",
          "621:     }",
          "624:      convert_to_string_ex(zmode);",
          "625:     } else {",
          "626:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing mode parameter for 'file'\");",
          "",
          "[Removed Lines]",
          "605:     if (Z_STRLEN_PP(zmode) >= 2 && Z_STRVAL_PP(zmode)[1] == 'b')",
          "609:    } else if (strcmp(Z_STRVAL_PP(ztype), \"file\") == 0) {",
          "610:     zval **zfile, **zmode;",
          "616:     if (zend_hash_index_find(Z_ARRVAL_PP(descitem), 1, (void **)&zfile) == SUCCESS) {",
          "623:     if (zend_hash_index_find(Z_ARRVAL_PP(descitem), 2, (void **)&zmode) == SUCCESS) {",
          "",
          "[Added Lines]",
          "606:     if (Z_STRLEN_P(zmode) >= 2 && Z_STRVAL_P(zmode)[1] == 'b')",
          "610:    } else if (strcmp(Z_STRVAL_P(ztype), \"file\") == 0) {",
          "611:     zval *zfile, *zmode;",
          "617:     if ((zfile = zend_hash_index_find(Z_ARRVAL_P(descitem), 1)) != NULL) {",
          "624:     if ((zmode = zend_hash_index_find(Z_ARRVAL_P(descitem), 2)) != NULL) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "628:     }",
          "632:       REPORT_ERRORS|STREAM_WILL_CAST, NULL);",
          "",
          "[Removed Lines]",
          "631:     stream = php_stream_open_wrapper(Z_STRVAL_PP(zfile), Z_STRVAL_PP(zmode),",
          "",
          "[Added Lines]",
          "632:     stream = php_stream_open_wrapper(Z_STRVAL_P(zfile), Z_STRVAL_P(zmode),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "650: #else",
          "651:     descriptors[ndesc].childend = fd;",
          "652: #endif",
          "654: #if PHP_CAN_DO_PTS",
          "655:     if (dev_ptmx == -1) {",
          "",
          "[Removed Lines]",
          "653:    } else if (strcmp(Z_STRVAL_PP(ztype), \"pty\") == 0) {",
          "",
          "[Added Lines]",
          "654:    } else if (strcmp(Z_STRVAL_P(ztype), \"pty\") == 0) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "677:     goto exit_fail;",
          "678: #endif",
          "679:    } else {",
          "681:     goto exit_fail;",
          "682:    }",
          "683:   }",
          "",
          "[Removed Lines]",
          "680:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"%s is not a valid descriptor spec/mode\", Z_STRVAL_PP(ztype));",
          "",
          "[Added Lines]",
          "681:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"%s is not a valid descriptor spec/mode\", Z_STRVAL_P(ztype));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "947: # endif",
          "948: #endif",
          "949:     if (stream) {",
          "953:      stream->flags |= PHP_STREAM_FLAG_NO_SEEK;",
          "960:     }",
          "961:     break;",
          "962:    default:",
          "964:   }",
          "965:  }",
          "",
          "[Removed Lines]",
          "950:      zval *retfp;",
          "955:      MAKE_STD_ZVAL(retfp);",
          "956:      php_stream_to_zval(stream, retfp);",
          "957:      add_index_zval(pipes, descriptors[i].index, retfp);",
          "959:      proc->pipes[i] = Z_LVAL_P(retfp);",
          "963:     proc->pipes[i] = 0;",
          "",
          "[Added Lines]",
          "951:      zval retfp;",
          "956:      php_stream_to_zval(stream, &retfp);",
          "957:      add_index_zval(pipes, descriptors[i].index, &retfp);",
          "959:      proc->pipes[i] = Z_RES_P(&retfp);",
          "963:     proc->pipes[i] = NULL;",
          "",
          "---------------"
        ],
        "ext/standard/proc_open.h||ext/standard/proc_open.h": [
          "File: ext/standard/proc_open.h -> ext/standard/proc_open.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  HANDLE childHandle;",
          "45: #endif",
          "46:  int npipes;",
          "48:  char *command;",
          "49:  int is_persistent;",
          "50:  php_process_env_t env;",
          "",
          "[Removed Lines]",
          "47:  long pipes[PHP_PROC_OPEN_MAX_DESCRIPTORS];",
          "",
          "[Added Lines]",
          "47:  zend_resource *pipes[PHP_PROC_OPEN_MAX_DESCRIPTORS];",
          "",
          "---------------"
        ],
        "ext/standard/streamsfuncs.c||ext/standard/streamsfuncs.c": [
          "File: ext/standard/streamsfuncs.c -> ext/standard/streamsfuncs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:  php_stream_auto_cleanup(s1);",
          "76:  php_stream_auto_cleanup(s2);",
          "80: }",
          "82: #endif",
          "",
          "[Removed Lines]",
          "78:  add_next_index_resource(return_value, php_stream_get_resource_id(s1));",
          "79:  add_next_index_resource(return_value, php_stream_get_resource_id(s2));",
          "",
          "[Added Lines]",
          "78:  add_next_index_resource(return_value, s1->res);",
          "79:  add_next_index_resource(return_value, s2->res);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:  }",
          "126:  if (zerrstr) {",
          "127:   zval_dtor(zerrstr);",
          "129:  }",
          "131:  stream = php_stream_xport_create(host, host_len, REPORT_ERRORS,",
          "",
          "[Removed Lines]",
          "128:   ZVAL_STRING(zerrstr, \"\", 1);",
          "",
          "[Added Lines]",
          "128:   ZVAL_EMPTY_STRING(zerrstr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:   if (zerrstr && errstr) {",
          "156:    zval_dtor(zerrstr);",
          "158:   } else if (errstr) {",
          "159:    efree(errstr);",
          "160:   }",
          "",
          "[Removed Lines]",
          "157:    ZVAL_STRING(zerrstr, errstr, 0);",
          "",
          "[Added Lines]",
          "158:    ZVAL_STRING(zerrstr, errstr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "192:  context = php_stream_context_from_zval(zcontext, flags & PHP_FILE_NO_DEFAULT_CONTEXT);",
          "194:  if (context) {",
          "196:  }",
          "198:  if (zerrno) {",
          "",
          "[Removed Lines]",
          "195:   zend_list_addref(context->rsrc_id);",
          "",
          "[Added Lines]",
          "196:   context->res->gc.refcount++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "201:  }",
          "202:  if (zerrstr) {",
          "203:   zval_dtor(zerrstr);",
          "205:  }",
          "207:  stream = php_stream_xport_create(host, host_len, REPORT_ERRORS,",
          "",
          "[Removed Lines]",
          "204:   ZVAL_STRING(zerrstr, \"\", 1);",
          "",
          "[Added Lines]",
          "205:   ZVAL_EMPTY_STRING(zerrstr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "220:   if (zerrstr && errstr) {",
          "222:    zval_dtor(zerrstr);",
          "224:   } else if (errstr) {",
          "225:    efree(errstr);",
          "226:   }",
          "",
          "[Removed Lines]",
          "223:    ZVAL_STRING(zerrstr, errstr, 0);",
          "",
          "[Added Lines]",
          "225:    ZVAL_STRING(zerrstr, errstr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "254:   RETURN_FALSE;",
          "255:  }",
          "260:  conv = (php_timeout_ull) (timeout * 1000000.0);",
          "",
          "[Removed Lines]",
          "257:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "259:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278:     TSRMLS_CC) && clistream) {",
          "280:   if (peername) {",
          "282:   }",
          "283:   php_stream_to_zval(clistream, return_value);",
          "284:  } else {",
          "",
          "[Removed Lines]",
          "281:    ZVAL_STRINGL(zpeername, peername, peername_len, 0);",
          "",
          "[Added Lines]",
          "284:    ZVAL_STRINGL(zpeername, peername, peername_len);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "306:   RETURN_FALSE;",
          "307:  }",
          "311:  if (0 != php_stream_xport_get_name(stream, want_peer,",
          "312:     &name,",
          "",
          "[Removed Lines]",
          "309:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "312:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "316:   RETURN_FALSE;",
          "317:  }",
          "320: }",
          "",
          "[Removed Lines]",
          "319:  RETURN_STRINGL(name, name_len, 0);",
          "",
          "[Added Lines]",
          "323:  RETURN_STRINGL(name, name_len);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "335:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"rs|ls\", &zstream, &data, &datalen, &flags, &target_addr, &target_addr_len) == FAILURE) {",
          "336:   RETURN_FALSE;",
          "337:  }",
          "340:  if (target_addr_len) {",
          "",
          "[Removed Lines]",
          "338:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "342:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "358:  char *remote_addr = NULL;",
          "359:  int remote_addr_len;",
          "360:  long to_read = 0;",
          "362:  long flags = 0;",
          "363:  int recvd;",
          "",
          "[Removed Lines]",
          "361:  char *read_buf;",
          "",
          "[Added Lines]",
          "365:  zend_string *read_buf;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "366:   RETURN_FALSE;",
          "367:  }",
          "371:  if (zremote) {",
          "372:   zval_dtor(zremote);",
          "",
          "[Removed Lines]",
          "369:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "373:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "378:   RETURN_FALSE;",
          "379:  }",
          "384:    zremote ? &remote_addr : NULL,",
          "385:    zremote ? &remote_addr_len : NULL",
          "386:    TSRMLS_CC);",
          "388:  if (recvd >= 0) {",
          "389:   if (zremote) {",
          "391:   }",
          "395:  }",
          "398:  RETURN_FALSE;",
          "399: }",
          "",
          "[Removed Lines]",
          "381:  read_buf = safe_emalloc(1, to_read, 1);",
          "383:  recvd = php_stream_xport_recvfrom(stream, read_buf, to_read, flags, NULL, NULL,",
          "390:    ZVAL_STRINGL(zremote, remote_addr, remote_addr_len, 0);",
          "392:   read_buf[recvd] = '\\0';",
          "394:   RETURN_STRINGL(read_buf, recvd, 0);",
          "397:  efree(read_buf);",
          "",
          "[Added Lines]",
          "385:  read_buf = STR_ALLOC(to_read, 0);",
          "387:  recvd = php_stream_xport_recvfrom(stream, read_buf->val, to_read, flags, NULL, NULL,",
          "395:    ZVAL_STRINGL(zremote, remote_addr, remote_addr_len);",
          "397:   read_buf->val[recvd] = '\\0';",
          "398:   read_buf->len = recvd;",
          "399:   RETURN_STR(read_buf);",
          "402:  STR_FREE(read_buf);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "414:   RETURN_FALSE;",
          "415:  }",
          "419:  if (desiredpos >= 0) {",
          "420:   int  seek_res = 0;",
          "",
          "[Removed Lines]",
          "417:  php_stream_from_zval(stream, &zsrc);",
          "",
          "[Added Lines]",
          "422:  php_stream_from_zval(stream, zsrc);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "439:  len = php_stream_copy_to_mem(stream, &contents, maxlen, 0);",
          "441:  if (contents) {",
          "443:  } else {",
          "444:   RETVAL_EMPTY_STRING();",
          "445:  }",
          "",
          "[Removed Lines]",
          "442:   RETVAL_STRINGL(contents, len, 0);",
          "",
          "[Added Lines]",
          "448:   RETVAL_STRINGL(contents, len);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "460:   RETURN_FALSE;",
          "461:  }",
          "466:  if (pos > 0 && php_stream_seek(src, pos, SEEK_SET) < 0) {",
          "467:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Failed to seek to position %ld in the stream\", pos);",
          "",
          "[Removed Lines]",
          "463:  php_stream_from_zval(src, &zsrc);",
          "464:  php_stream_from_zval(dest, &zdest);",
          "",
          "[Added Lines]",
          "469:  php_stream_from_zval(src, zsrc);",
          "470:  php_stream_from_zval(dest, zdest);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "483: {",
          "484:  zval *arg1;",
          "485:  php_stream *stream;",
          "488:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r\", &arg1) == FAILURE) {",
          "489:   return;",
          "490:  }",
          "493:  array_init(return_value);",
          "500:  }",
          "501:  if (stream->wrapper) {",
          "502:   add_assoc_string(return_value, \"wrapper_type\", (char *)stream->wrapper->wops->label, 1);",
          "",
          "[Removed Lines]",
          "486:  zval *newval;",
          "491:  php_stream_from_zval(stream, &arg1);",
          "495:  if (stream->wrapperdata) {",
          "496:   MAKE_STD_ZVAL(newval);",
          "497:   MAKE_COPY_ZVAL(&stream->wrapperdata, newval);",
          "499:   add_assoc_zval(return_value, \"wrapper_data\", newval);",
          "",
          "[Added Lines]",
          "496:  php_stream_from_zval(stream, arg1);",
          "500:  if (Z_TYPE(stream->wrapperdata) != IS_NULL) {",
          "501:   add_assoc_zval(return_value, \"wrapper_data\", &stream->wrapperdata);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "541: PHP_FUNCTION(stream_get_transports)",
          "542: {",
          "543:  HashTable *stream_xport_hash;",
          "546:  ulong num_key;",
          "548:  if (zend_parse_parameters_none() == FAILURE) {",
          "",
          "[Removed Lines]",
          "544:  char *stream_xport;",
          "545:  uint stream_xport_len;",
          "",
          "[Added Lines]",
          "546:  zend_string *stream_xport;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "554:   array_init(return_value);",
          "555:   zend_hash_internal_pointer_reset_ex(stream_xport_hash, &pos);",
          "556:   while (zend_hash_get_current_key_ex(stream_xport_hash,",
          "560:    zend_hash_move_forward_ex(stream_xport_hash, &pos);",
          "561:   }",
          "562:  } else {",
          "",
          "[Removed Lines]",
          "557:      &stream_xport, &stream_xport_len,",
          "558:      &num_key, 0, &pos) == HASH_KEY_IS_STRING) {",
          "559:    add_next_index_stringl(return_value, stream_xport, stream_xport_len - 1, 1);",
          "",
          "[Added Lines]",
          "558:      &stream_xport, &num_key, 0, &pos) == HASH_KEY_IS_STRING) {",
          "560:    add_next_index_stringl(return_value, stream_xport->val, stream_xport->len, 1);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "570: PHP_FUNCTION(stream_get_wrappers)",
          "571: {",
          "572:  HashTable *url_stream_wrappers_hash;",
          "574:  int key_flags;",
          "576:  ulong num_key;",
          "578:  if (zend_parse_parameters_none() == FAILURE) {",
          "",
          "[Removed Lines]",
          "573:  char *stream_protocol;",
          "575:  uint stream_protocol_len = 0;",
          "",
          "[Added Lines]",
          "574:  zend_string *stream_protocol;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "583:   HashPosition pos;",
          "584:   array_init(return_value);",
          "585:   for (zend_hash_internal_pointer_reset_ex(url_stream_wrappers_hash, &pos);",
          "587:    zend_hash_move_forward_ex(url_stream_wrappers_hash, &pos)) {",
          "588:     if (key_flags == HASH_KEY_IS_STRING) {",
          "590:     }",
          "591:   }",
          "592:  } else {",
          "",
          "[Removed Lines]",
          "586:    (key_flags = zend_hash_get_current_key_ex(url_stream_wrappers_hash, &stream_protocol, &stream_protocol_len, &num_key, 0, &pos)) != HASH_KEY_NON_EXISTENT;",
          "589:      add_next_index_stringl(return_value, stream_protocol, stream_protocol_len - 1, 1);",
          "",
          "[Added Lines]",
          "586:    (key_flags = zend_hash_get_current_key_ex(url_stream_wrappers_hash, &stream_protocol, &num_key, 0, &pos)) != HASH_KEY_NON_EXISTENT;",
          "590:      add_next_index_stringl(return_value, stream_protocol->val, stream_protocol->len, 1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "600: static int stream_array_to_fd_set(zval *stream_array, fd_set *fds, php_socket_t *max_fd TSRMLS_DC)",
          "601: {",
          "603:  php_stream *stream;",
          "604:  int cnt = 0;",
          "",
          "[Removed Lines]",
          "602:  zval **elem;",
          "",
          "[Added Lines]",
          "603:  zval *elem;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "607:   return 0;",
          "608:  }",
          "609:  for (zend_hash_internal_pointer_reset(Z_ARRVAL_P(stream_array));",
          "611:    zend_hash_move_forward(Z_ARRVAL_P(stream_array))) {",
          "",
          "[Removed Lines]",
          "610:    zend_hash_get_current_data(Z_ARRVAL_P(stream_array), (void **) &elem) == SUCCESS;",
          "",
          "[Added Lines]",
          "611:    (elem = zend_hash_get_current_data(Z_ARRVAL_P(stream_array))) != NULL;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "642: static int stream_array_from_fd_set(zval *stream_array, fd_set *fds TSRMLS_DC)",
          "643: {",
          "645:  php_stream *stream;",
          "647:  int ret = 0;",
          "649:  if (Z_TYPE_P(stream_array) != IS_ARRAY) {",
          "650:   return 0;",
          "651:  }",
          "655:  for (zend_hash_internal_pointer_reset(Z_ARRVAL_P(stream_array));",
          "656:    zend_hash_has_more_elements(Z_ARRVAL_P(stream_array)) == SUCCESS;",
          "657:    zend_hash_move_forward(Z_ARRVAL_P(stream_array))) {",
          "659:   int type;",
          "662:   ulong num_ind;",
          "664:    would eventually bring a wrong result on x64. php_stream_cast() casts to int internally, and this will leave",
          "",
          "[Removed Lines]",
          "644:  zval **elem, **dest_elem;",
          "646:  HashTable *new_hash;",
          "652:  ALLOC_HASHTABLE(new_hash);",
          "653:  zend_hash_init(new_hash, zend_hash_num_elements(Z_ARRVAL_P(stream_array)), NULL, ZVAL_PTR_DTOR, 0);",
          "660:   char *key;",
          "661:   uint key_len;",
          "",
          "[Added Lines]",
          "645:  zval *elem, *dest_elem, new_array;",
          "652:  ZVAL_NEW_ARR(&new_array);",
          "653:  zend_hash_init(Z_ARRVAL(new_array), zend_hash_num_elements(Z_ARRVAL_P(stream_array)), NULL, ZVAL_PTR_DTOR, 0);",
          "660:   zend_string *key;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "669:   type = zend_hash_get_current_key_ex(Z_ARRVAL_P(stream_array),",
          "671:   if (type == HASH_KEY_NON_EXISTENT ||",
          "674:   }",
          "",
          "[Removed Lines]",
          "670:     &key, &key_len, &num_ind, 0, NULL);",
          "672:    zend_hash_get_current_data(Z_ARRVAL_P(stream_array), (void **) &elem) == FAILURE) {",
          "",
          "[Added Lines]",
          "669:     &key, &num_ind, 0, NULL);",
          "671:    (elem = zend_hash_get_current_data(Z_ARRVAL_P(stream_array))) == NULL) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "689:    if (PHP_SAFE_FD_ISSET(this_fd, fds)) {",
          "690:     if (type == HASH_KEY_IS_LONG) {",
          "694:     }",
          "696:     if (dest_elem) {",
          "",
          "[Removed Lines]",
          "691:      zend_hash_index_update(new_hash, num_ind, (void *)elem, sizeof(zval *), (void **)&dest_elem);",
          "693:      zend_hash_update(new_hash, key, key_len, (void *)elem, sizeof(zval *), (void **)&dest_elem);",
          "",
          "[Added Lines]",
          "690:      dest_elem = zend_hash_index_update(Z_ARRVAL(new_array), num_ind, elem);",
          "692:      dest_elem = zend_hash_update(Z_ARRVAL(new_array), key, elem);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "706:  zend_hash_destroy(Z_ARRVAL_P(stream_array));",
          "712:  return ret;",
          "713: }",
          "715: static int stream_array_emulate_read_fd_set(zval *stream_array TSRMLS_DC)",
          "716: {",
          "718:  php_stream *stream;",
          "720:  int ret = 0;",
          "722:  if (Z_TYPE_P(stream_array) != IS_ARRAY) {",
          "723:   return 0;",
          "724:  }",
          "728:  for (zend_hash_internal_pointer_reset(Z_ARRVAL_P(stream_array));",
          "730:    zend_hash_move_forward(Z_ARRVAL_P(stream_array))) {",
          "732:   php_stream_from_zval_no_verify(stream, elem);",
          "",
          "[Removed Lines]",
          "707:  efree(Z_ARRVAL_P(stream_array));",
          "709:  zend_hash_internal_pointer_reset(new_hash);",
          "710:  Z_ARRVAL_P(stream_array) = new_hash;",
          "717:  zval **elem, **dest_elem;",
          "719:  HashTable *new_hash;",
          "725:  ALLOC_HASHTABLE(new_hash);",
          "726:  zend_hash_init(new_hash, zend_hash_num_elements(Z_ARRVAL_P(stream_array)), NULL, ZVAL_PTR_DTOR, 0);",
          "729:    zend_hash_get_current_data(Z_ARRVAL_P(stream_array), (void **) &elem) == SUCCESS;",
          "",
          "[Added Lines]",
          "706:  efree(Z_ARR_P(stream_array));",
          "708:  zend_hash_internal_pointer_reset(Z_ARRVAL(new_array));",
          "709:  Z_ARR_P(stream_array) = Z_ARR(new_array);",
          "716:  zval *elem, *dest_elem, new_array;",
          "723:  ZVAL_NEW_ARR(&new_array);",
          "724:  zend_hash_init(Z_ARRVAL(new_array), zend_hash_num_elements(Z_ARRVAL_P(stream_array)), NULL, ZVAL_PTR_DTOR, 0);",
          "727:    (elem = zend_hash_get_current_data(Z_ARRVAL_P(stream_array))) != NULL;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "744:    if (dest_elem) {",
          "745:     zval_add_ref(dest_elem);",
          "746:    }",
          "",
          "[Removed Lines]",
          "743:    zend_hash_next_index_insert(new_hash, (void *)elem, sizeof(zval *), (void **)&dest_elem);",
          "",
          "[Added Lines]",
          "741:    dest_elem = zend_hash_next_index_insert(Z_ARRVAL(new_array), elem);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "752:  if (ret > 0) {",
          "754:   zend_hash_destroy(Z_ARRVAL_P(stream_array));",
          "759:  } else {",
          "762:  }",
          "764:  return ret;",
          "",
          "[Removed Lines]",
          "755:   efree(Z_ARRVAL_P(stream_array));",
          "757:   zend_hash_internal_pointer_reset(new_hash);",
          "758:   Z_ARRVAL_P(stream_array) = new_hash;",
          "760:   zend_hash_destroy(new_hash);",
          "761:   FREE_HASHTABLE(new_hash);",
          "",
          "[Added Lines]",
          "753:   efree(Z_ARR_P(stream_array));",
          "755:   zend_hash_internal_pointer_reset(Z_ARRVAL(new_array));",
          "756:   Z_ARR_P(stream_array) = Z_ARR(new_array);",
          "758:   zend_hash_destroy(Z_ARRVAL(new_array));",
          "759:   efree(Z_ARR(new_array));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "770: PHP_FUNCTION(stream_select)",
          "771: {",
          "773:  struct timeval tv;",
          "774:  struct timeval *tv_p = NULL;",
          "775:  fd_set   rfds, wfds, efds;",
          "",
          "[Removed Lines]",
          "772:  zval   *r_array, *w_array, *e_array, **sec = NULL;",
          "",
          "[Added Lines]",
          "770:  zval   *r_array, *w_array, *e_array, *sec = NULL;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "778:  long   usec = 0;",
          "779:  int    set_count, max_set_count = 0;",
          "782:   return;",
          "784:  FD_ZERO(&rfds);",
          "",
          "[Removed Lines]",
          "781:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"a!a!a!Z!|l\", &r_array, &w_array, &e_array, &sec, &usec) == FAILURE)",
          "",
          "[Added Lines]",
          "779:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"a!a!a!z!|l\", &r_array, &w_array, &e_array, &sec, &usec) == FAILURE)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "817:  if (sec != NULL) {",
          "818:   convert_to_long_ex(sec);",
          "821:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"The seconds parameter must be greater than 0\");",
          "822:    RETURN_FALSE;",
          "823:   } else if (usec < 0) {",
          "",
          "[Removed Lines]",
          "820:   if (Z_LVAL_PP(sec) < 0) {",
          "",
          "[Added Lines]",
          "818:   if (Z_LVAL_P(sec) < 0) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "829:   if (usec > 999999) {",
          "831:    tv.tv_usec = usec % 1000000;",
          "832:   } else {",
          "834:    tv.tv_usec = usec;",
          "835:   }",
          "",
          "[Removed Lines]",
          "830:    tv.tv_sec = Z_LVAL_PP(sec) + (usec / 1000000);",
          "833:    tv.tv_sec = Z_LVAL_PP(sec);",
          "",
          "[Added Lines]",
          "828:    tv.tv_sec = Z_LVAL_P(sec) + (usec / 1000000);",
          "831:    tv.tv_sec = Z_LVAL_P(sec);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "875:   char *xmsg, int xcode, size_t bytes_sofar, size_t bytes_max, void * ptr TSRMLS_DC)",
          "876: {",
          "877:  zval *callback = (zval*)context->notifier->ptr;",
          "879:  zval zvs[6];",
          "882:  int i;",
          "893:  if (xmsg) {",
          "895:  } else {",
          "897:  }",
          "903:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"failed to call user notifier\");",
          "904:  }",
          "905:  for (i = 0; i < 6; i++) {",
          "910:  }",
          "911: }",
          "913: static void user_space_stream_notifier_dtor(php_stream_notifier *notifier)",
          "914: {",
          "915:  if (notifier && notifier->ptr) {",
          "917:   notifier->ptr = NULL;",
          "918:  }",
          "919: }",
          "",
          "[Removed Lines]",
          "878:  zval *retval = NULL;",
          "880:  zval *ps[6];",
          "881:  zval **ptps[6];",
          "884:  for (i = 0; i < 6; i++) {",
          "885:   INIT_ZVAL(zvs[i]);",
          "886:   ps[i] = &zvs[i];",
          "887:   ptps[i] = &ps[i];",
          "888:   MAKE_STD_ZVAL(ps[i]);",
          "889:  }",
          "891:  ZVAL_LONG(ps[0], notifycode);",
          "892:  ZVAL_LONG(ps[1], severity);",
          "894:   ZVAL_STRING(ps[2], xmsg, 1);",
          "896:   ZVAL_NULL(ps[2]);",
          "898:  ZVAL_LONG(ps[3], xcode);",
          "899:  ZVAL_LONG(ps[4], bytes_sofar);",
          "900:  ZVAL_LONG(ps[5], bytes_max);",
          "902:  if (FAILURE == call_user_function_ex(EG(function_table), NULL, callback, &retval, 6, ptps, 0, NULL TSRMLS_CC)) {",
          "906:   zval_ptr_dtor(&ps[i]);",
          "907:  }",
          "908:  if (retval) {",
          "909:   zval_ptr_dtor(&retval);",
          "916:   zval_ptr_dtor((zval **)&(notifier->ptr));",
          "",
          "[Added Lines]",
          "876:  zval retval;",
          "880:  ZVAL_LONG(&zvs[0], notifycode);",
          "881:  ZVAL_LONG(&zvs[1], severity);",
          "883:   ZVAL_STRING(&zvs[2], xmsg);",
          "885:   ZVAL_NULL(&zvs[2]);",
          "887:  ZVAL_LONG(&zvs[3], xcode);",
          "888:  ZVAL_LONG(&zvs[4], bytes_sofar);",
          "889:  ZVAL_LONG(&zvs[5], bytes_max);",
          "891:  if (FAILURE == call_user_function_ex(EG(function_table), NULL, callback, &retval, 6, zvs, 0, NULL TSRMLS_CC)) {",
          "895:   zval_ptr_dtor(&zvs[i]);",
          "897:  zval_ptr_dtor(&retval);",
          "903:   zval_ptr_dtor((zval*)(notifier->ptr));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "921: static int parse_context_options(php_stream_context *context, zval *options TSRMLS_DC)",
          "922: {",
          "923:  HashPosition pos, opos;",
          "927:  int ret = SUCCESS;",
          "928:  ulong num_key;",
          "930:  zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(options), &pos);",
          "940:     }",
          "942:    }",
          "944:   } else {",
          "",
          "[Removed Lines]",
          "924:  zval **wval, **oval;",
          "925:  char *wkey, *okey;",
          "926:  uint wkey_len, okey_len;",
          "931:  while (SUCCESS == zend_hash_get_current_data_ex(Z_ARRVAL_P(options), (void**)&wval, &pos)) {",
          "932:   if (HASH_KEY_IS_STRING == zend_hash_get_current_key_ex(Z_ARRVAL_P(options), &wkey, &wkey_len, &num_key, 0, &pos)",
          "933:     && Z_TYPE_PP(wval) == IS_ARRAY) {",
          "935:    zend_hash_internal_pointer_reset_ex(Z_ARRVAL_PP(wval), &opos);",
          "936:    while (SUCCESS == zend_hash_get_current_data_ex(Z_ARRVAL_PP(wval), (void**)&oval, &opos)) {",
          "938:     if (HASH_KEY_IS_STRING == zend_hash_get_current_key_ex(Z_ARRVAL_PP(wval), &okey, &okey_len, &num_key, 0, &opos)) {",
          "939:      php_stream_context_set_option(context, wkey, okey, *oval);",
          "941:     zend_hash_move_forward_ex(Z_ARRVAL_PP(wval), &opos);",
          "",
          "[Added Lines]",
          "911:  zval *wval, *oval;",
          "912:  zend_string *wkey, *okey;",
          "917:  while (NULL != (wval = zend_hash_get_current_data_ex(Z_ARRVAL_P(options), &pos))) {",
          "918:   if (HASH_KEY_IS_STRING == zend_hash_get_current_key_ex(Z_ARRVAL_P(options), &wkey, &num_key, 0, &pos)",
          "919:     && Z_TYPE_P(wval) == IS_ARRAY) {",
          "921:    zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(wval), &opos);",
          "922:    while (NULL != (oval = zend_hash_get_current_data_ex(Z_ARRVAL_P(wval), &opos))) {",
          "924:     if (HASH_KEY_IS_STRING == zend_hash_get_current_key_ex(Z_ARRVAL_P(wval), &okey, &num_key, 0, &opos)) {",
          "925:      php_stream_context_set_option(context, wkey->val, okey->val, oval);",
          "927:     zend_hash_move_forward_ex(Z_ARRVAL_P(wval), &opos);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "953: static int parse_context_params(php_stream_context *context, zval *params TSRMLS_DC)",
          "954: {",
          "955:  int ret = SUCCESS;",
          "960:   if (context->notifier) {",
          "961:    php_stream_notification_free(context->notifier);",
          "",
          "[Removed Lines]",
          "956:  zval **tmp;",
          "958:  if (SUCCESS == zend_hash_find(Z_ARRVAL_P(params), \"notification\", sizeof(\"notification\"), (void**)&tmp)) {",
          "",
          "[Added Lines]",
          "942:  zval *tmp;",
          "944:  if (NULL != (tmp = zend_hash_str_find(Z_ARRVAL_P(params), \"notification\", sizeof(\"notification\")-1))) {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "965:   context->notifier = php_stream_notification_alloc();",
          "966:   context->notifier->func = user_space_stream_notifier;",
          "969:   context->notifier->dtor = user_space_stream_notifier_dtor;",
          "970:  }",
          "974:   } else {",
          "975:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid stream/context parameter\");",
          "976:   }",
          "",
          "[Removed Lines]",
          "967:   context->notifier->ptr = *tmp;",
          "968:   Z_ADDREF_P(*tmp);",
          "971:  if (SUCCESS == zend_hash_find(Z_ARRVAL_P(params), \"options\", sizeof(\"options\"), (void**)&tmp)) {",
          "972:   if (Z_TYPE_PP(tmp) == IS_ARRAY) {",
          "973:    parse_context_options(context, *tmp TSRMLS_CC);",
          "",
          "[Added Lines]",
          "953:   context->notifier->ptr = tmp;",
          "954:   Z_ADDREF_P(tmp);",
          "957:  if (NULL != (tmp = zend_hash_str_find(Z_ARRVAL_P(params), \"options\", sizeof(\"options\")-1))) {",
          "958:   if (Z_TYPE_P(tmp) == IS_ARRAY) {",
          "959:    parse_context_options(context, tmp TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "986: {",
          "987:  php_stream_context *context = NULL;",
          "990:  if (context == NULL) {",
          "991:   php_stream *stream;",
          "995:   if (stream) {",
          "996:    context = stream->context;",
          "",
          "[Removed Lines]",
          "989:  context = zend_fetch_resource(&contextresource TSRMLS_CC, -1, NULL, NULL, 1, php_le_stream_context(TSRMLS_C));",
          "993:   stream = zend_fetch_resource(&contextresource TSRMLS_CC, -1, NULL, NULL, 2, php_file_le_stream(), php_file_le_pstream);",
          "",
          "[Added Lines]",
          "975:  context = zend_fetch_resource(contextresource TSRMLS_CC, -1, NULL, NULL, 1, php_le_stream_context(TSRMLS_C));",
          "979:   stream = zend_fetch_resource(contextresource TSRMLS_CC, -1, NULL, NULL, 2, php_file_le_stream(), php_file_le_pstream);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1024:   RETURN_FALSE;",
          "1025:  }",
          "1028: }",
          "",
          "[Removed Lines]",
          "1027:  RETURN_ZVAL(context->options, 1, 0);",
          "",
          "[Added Lines]",
          "1013:  RETURN_ZVAL(&context->options, 1, 0);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1090: PHP_FUNCTION(stream_context_get_params)",
          "1091: {",
          "1093:  php_stream_context *context;",
          "1095:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r\", &zcontext) == FAILURE) {",
          "",
          "[Removed Lines]",
          "1092:  zval *zcontext, *options;",
          "",
          "[Added Lines]",
          "1078:  zval *zcontext, options;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1107:   add_assoc_zval_ex(return_value, ZEND_STRS(\"notification\"), context->notifier->ptr);",
          "1108:   Z_ADDREF_P(context->notifier->ptr);",
          "1109:  }",
          "1113: }",
          "",
          "[Removed Lines]",
          "1110:  ALLOC_INIT_ZVAL(options);",
          "1111:  ZVAL_ZVAL(options, context->options, 1, 0);",
          "1112:  add_assoc_zval_ex(return_value, ZEND_STRS(\"options\"), options);",
          "",
          "[Added Lines]",
          "1096:  ZVAL_ZVAL(&options, &context->options, 1, 0);",
          "1097:  add_assoc_zval_ex(return_value, ZEND_STRS(\"options\"), &options);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1180:   parse_context_params(context, params TSRMLS_CC);",
          "1181:  }",
          "1184: }",
          "",
          "[Removed Lines]",
          "1183:  RETURN_RESOURCE(context->rsrc_id);",
          "",
          "[Added Lines]",
          "1168:  RETURN_RES(context->res);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1201:   RETURN_FALSE;",
          "1202:  }",
          "1206:  if ((read_write & PHP_STREAM_FILTER_ALL) == 0) {",
          "",
          "[Removed Lines]",
          "1204:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "1189:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1252:  }",
          "1254:  if (filter) {",
          "1256:  } else {",
          "1257:   RETURN_FALSE;",
          "1258:  }",
          "",
          "[Removed Lines]",
          "1255:   RETURN_RESOURCE(filter->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, filter, php_file_le_stream_filter()));",
          "",
          "[Added Lines]",
          "1240:   filter->res = ZEND_REGISTER_RESOURCE(NULL, filter, php_file_le_stream_filter());",
          "1241:   RETURN_RES(filter->res);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1286:   RETURN_FALSE;",
          "1287:  }",
          "1290:  if (!filter) {",
          "1291:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid resource given, not a stream filter\");",
          "1292:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1289:  filter = zend_fetch_resource(&zfilter TSRMLS_CC, -1, NULL, NULL, 1, php_file_le_stream_filter());",
          "",
          "[Added Lines]",
          "1275:  filter = zend_fetch_resource(zfilter TSRMLS_CC, -1, NULL, NULL, 1, php_file_le_stream_filter());",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1297:   RETURN_FALSE;",
          "1298:  }",
          "1301:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Could not invalidate filter, not removing\");",
          "1302:   RETURN_FALSE;",
          "1303:  } else {",
          "",
          "[Removed Lines]",
          "1300:  if (zend_list_delete(Z_LVAL_P(zfilter)) == FAILURE) {",
          "",
          "[Added Lines]",
          "1286:  if (zend_list_delete(Z_RES_P(zfilter)) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1331:   max_length = PHP_SOCK_CHUNK_SIZE;",
          "1332:  }",
          "1336:  if ((buf = php_stream_get_record(stream, max_length, &buf_size, str, str_len TSRMLS_CC))) {",
          "1338:  } else {",
          "1339:   RETURN_FALSE;",
          "1340:  }",
          "",
          "[Removed Lines]",
          "1334:  php_stream_from_zval(stream, &zstream);",
          "1337:   RETURN_STRINGL(buf, buf_size, 0);",
          "",
          "[Added Lines]",
          "1320:  php_stream_from_zval(stream, zstream);",
          "1324:   RETURN_STRINGL(buf, buf_size);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1355:   return;",
          "1356:  }",
          "1360:  block = arg2;",
          "",
          "[Removed Lines]",
          "1358:  php_stream_from_zval(stream, &arg1);",
          "",
          "[Added Lines]",
          "1345:  php_stream_from_zval(stream, arg1);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1383:   return;",
          "1384:  }",
          "1388:  t.tv_sec = seconds;",
          "",
          "[Removed Lines]",
          "1386:  php_stream_from_zval(stream, &socket);",
          "",
          "[Added Lines]",
          "1373:  php_stream_from_zval(stream, socket);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1417:   RETURN_FALSE;",
          "1418:  }",
          "1422:  buff = arg2;",
          "",
          "[Removed Lines]",
          "1420:  php_stream_from_zval(stream, &arg1);",
          "",
          "[Added Lines]",
          "1407:  php_stream_from_zval(stream, arg1);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1458:   RETURN_FALSE;",
          "1459:  }",
          "1463:  ret = php_stream_set_option(stream, PHP_STREAM_OPTION_SET_CHUNK_SIZE, (int)csize, NULL);",
          "",
          "[Removed Lines]",
          "1461:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "1448:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1480:   RETURN_FALSE;",
          "1481:  }",
          "1485:  buff = arg2;",
          "",
          "[Removed Lines]",
          "1483:  php_stream_from_zval(stream, &arg1);",
          "",
          "[Added Lines]",
          "1470:  php_stream_from_zval(stream, arg1);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1509:   RETURN_FALSE;",
          "1510:  }",
          "1514:  if (ZEND_NUM_ARGS() >= 3) {",
          "1515:   if (zsessstream) {",
          "1517:   }",
          "1519:   if (php_stream_xport_crypto_setup(stream, cryptokind, sessstream TSRMLS_CC) < 0) {",
          "",
          "[Removed Lines]",
          "1512:  php_stream_from_zval(stream, &zstream);",
          "1516:    php_stream_from_zval(sessstream, &zsessstream);",
          "",
          "[Added Lines]",
          "1499:  php_stream_from_zval(stream, zstream);",
          "1503:    php_stream_from_zval(sessstream, zsessstream);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1552:  resolved_path = zend_resolve_path(filename, filename_len TSRMLS_CC);",
          "1554:  if (resolved_path) {",
          "1556:  }",
          "1557:  RETURN_FALSE;",
          "1558: }",
          "",
          "[Removed Lines]",
          "1555:   RETURN_STRING(resolved_path, 0);",
          "",
          "[Added Lines]",
          "1543:   RETURN_STRING(resolved_path);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1563: PHP_FUNCTION(stream_is_local)",
          "1564: {",
          "1566:  php_stream *stream = NULL;",
          "1567:  php_stream_wrapper *wrapper = NULL;",
          "1570:   RETURN_FALSE;",
          "1571:  }",
          "1574:   php_stream_from_zval(stream, zstream);",
          "1575:   if (stream == NULL) {",
          "1576:    RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1565:  zval **zstream;",
          "1569:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Z\", &zstream) == FAILURE) {",
          "1573:  if (Z_TYPE_PP(zstream) == IS_RESOURCE) {",
          "",
          "[Added Lines]",
          "1553:  zval *zstream;",
          "1557:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z\", &zstream) == FAILURE) {",
          "1561:  if (Z_TYPE_P(zstream) == IS_RESOURCE) {",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1579:  } else {",
          "1580:   convert_to_string_ex(zstream);",
          "1583:  }",
          "1585:  if (!wrapper) {",
          "",
          "[Removed Lines]",
          "1582:   wrapper = php_stream_locate_url_wrapper(Z_STRVAL_PP(zstream), NULL, 0 TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1570:   wrapper = php_stream_locate_url_wrapper(Z_STRVAL_P(zstream), NULL, 0 TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1601:   RETURN_FALSE;",
          "1602:  }",
          "1606:  if (!php_stream_supports_lock(stream)) {",
          "1607:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1604:  php_stream_from_zval(stream, &zsrc);",
          "",
          "[Added Lines]",
          "1592:  php_stream_from_zval(stream, zsrc);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1633:   RETURN_FALSE;",
          "1634:  }",
          "1638:  RETURN_BOOL(php_stream_xport_shutdown(stream, (stream_shutdown_t)how TSRMLS_CC) == 0);",
          "1639: }",
          "",
          "[Removed Lines]",
          "1636:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "1624:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------"
        ],
        "ext/standard/user_filters.c||ext/standard/user_filters.c": [
          "File: ext/standard/user_filters.c -> ext/standard/user_filters.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: struct php_user_filter_data {",
          "33:  zend_class_entry *ce;",
          "36: };",
          "",
          "[Removed Lines]",
          "35:  char classname[1];",
          "",
          "[Added Lines]",
          "35:  zend_string *classname;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: static ZEND_RSRC_DTOR_FUNC(php_bucket_dtor)",
          "80: {",
          "82:  if (bucket) {",
          "83:   php_stream_bucket_delref(bucket TSRMLS_CC);",
          "84:   bucket = NULL;",
          "",
          "[Removed Lines]",
          "81:  php_stream_bucket *bucket = (php_stream_bucket *)rsrc->ptr;",
          "",
          "[Added Lines]",
          "81:  php_stream_bucket *bucket = (php_stream_bucket *)res->ptr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139: {",
          "140:  zval *obj = (zval*)thisfilter->abstract;",
          "141:  zval func_name;",
          "144:  if (obj == NULL) {",
          "146:   return;",
          "147:  }",
          "151:  call_user_function_ex(NULL,",
          "153:    &func_name,",
          "154:    &retval,",
          "155:    0, NULL,",
          "156:    0, NULL TSRMLS_CC);",
          "163: }",
          "165: php_stream_filter_status_t userfilter_filter(",
          "",
          "[Removed Lines]",
          "142:  zval *retval = NULL;",
          "149:  ZVAL_STRINGL(&func_name, \"onclose\", sizeof(\"onclose\")-1, 0);",
          "152:    &obj,",
          "158:  if (retval)",
          "159:   zval_ptr_dtor(&retval);",
          "162:  zval_ptr_dtor(&obj);",
          "",
          "[Added Lines]",
          "142:  zval retval;",
          "150:  ZVAL_STRINGL(&func_name, \"onclose\", sizeof(\"onclose\")-1);",
          "153:    obj,",
          "159:  zval_ptr_dtor(&retval);",
          "162:  zval_ptr_dtor(obj);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:  int ret = PSFS_ERR_FATAL;",
          "175:  zval *obj = (zval*)thisfilter->abstract;",
          "176:  zval func_name;",
          "180:  zval zpropname;",
          "181:  int call_result;",
          "191:  }",
          "205:  if (bytes_consumed) {",
          "207:  } else {",
          "209:  }",
          "216:  call_result = call_user_function_ex(NULL,",
          "218:    &func_name,",
          "219:    &retval,",
          "220:    4, args,",
          "221:    0, NULL TSRMLS_CC);",
          "226:  } else if (call_result == FAILURE) {",
          "227:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"failed to call filter function\");",
          "228:  }",
          "230:  if (bytes_consumed) {",
          "236:  }",
          "238:  if (buckets_in->head) {",
          "",
          "[Removed Lines]",
          "177:  zval *retval = NULL;",
          "178:  zval **args[4];",
          "179:  zval *zclosing, *zconsumed, *zin, *zout, *zstream;",
          "183:  if (FAILURE == zend_hash_find(Z_OBJPROP_P(obj), \"stream\", sizeof(\"stream\"), (void**)&zstream)) {",
          "185:   ALLOC_INIT_ZVAL(zstream);",
          "186:   php_stream_to_zval(stream, zstream);",
          "187:   zval_copy_ctor(zstream);",
          "188:   add_property_zval(obj, \"stream\", zstream);",
          "190:   zval_ptr_dtor(&zstream);",
          "193:  ZVAL_STRINGL(&func_name, \"filter\", sizeof(\"filter\")-1, 0);",
          "196:  ALLOC_INIT_ZVAL(zin);",
          "197:  ZEND_REGISTER_RESOURCE(zin, buckets_in, le_bucket_brigade);",
          "198:  args[0] = &zin;",
          "200:  ALLOC_INIT_ZVAL(zout);",
          "201:  ZEND_REGISTER_RESOURCE(zout, buckets_out, le_bucket_brigade);",
          "202:  args[1] = &zout;",
          "204:  ALLOC_INIT_ZVAL(zconsumed);",
          "206:   ZVAL_LONG(zconsumed, *bytes_consumed);",
          "208:   ZVAL_NULL(zconsumed);",
          "210:  args[2] = &zconsumed;",
          "212:  ALLOC_INIT_ZVAL(zclosing);",
          "213:  ZVAL_BOOL(zclosing, flags & PSFS_FLAG_FLUSH_CLOSE);",
          "214:  args[3] = &zclosing;",
          "217:    &obj,",
          "223:  if (call_result == SUCCESS && retval != NULL) {",
          "224:   convert_to_long(retval);",
          "225:   ret = Z_LVAL_P(retval);",
          "232:  }",
          "234:  if (retval) {",
          "235:   zval_ptr_dtor(&retval);",
          "",
          "[Added Lines]",
          "177:  zval retval;",
          "178:  zval args[4];",
          "182:  if (!zend_hash_str_exists(Z_OBJPROP_P(obj), \"stream\", sizeof(\"stream\")-1)) {",
          "183:   zval tmp;",
          "186:   php_stream_to_zval(stream, &tmp);",
          "187:   zval_copy_ctor(&tmp);",
          "188:   add_property_zval(obj, \"stream\", &tmp);",
          "190:   zval_ptr_dtor(&tmp);",
          "194:  ZVAL_STRINGL(&func_name, \"filter\", sizeof(\"filter\")-1);",
          "197:  ZEND_REGISTER_RESOURCE(&args[0], buckets_in, le_bucket_brigade);",
          "199:  ZEND_REGISTER_RESOURCE(&args[1], buckets_out, le_bucket_brigade);",
          "202:   ZVAL_LONG(&args[2], *bytes_consumed);",
          "204:   ZVAL_NULL(&args[2]);",
          "207:  ZVAL_BOOL(&args[3], flags & PSFS_FLAG_FLUSH_CLOSE);",
          "210:    obj,",
          "216:  if (call_result == SUCCESS && Z_TYPE(retval) != IS_UNDEF) {",
          "217:   convert_to_long(&retval);",
          "218:   ret = Z_LVAL(retval);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "262:  Z_OBJ_HANDLER_P(obj, unset_property)(obj, &zpropname, 0 TSRMLS_CC);",
          "269:  return ret;",
          "270: }",
          "",
          "[Removed Lines]",
          "260:  INIT_ZVAL(zpropname);",
          "261:  ZVAL_STRINGL(&zpropname, \"stream\", sizeof(\"stream\")-1, 0);",
          "264:  zval_ptr_dtor(&zclosing);",
          "265:  zval_ptr_dtor(&zconsumed);",
          "266:  zval_ptr_dtor(&zout);",
          "267:  zval_ptr_dtor(&zin);",
          "",
          "[Added Lines]",
          "250:  ZVAL_STRINGL(&zpropname, \"stream\", sizeof(\"stream\")-1);",
          "253:  zval_ptr_dtor(&args[3]);",
          "254:  zval_ptr_dtor(&args[2]);",
          "255:  zval_ptr_dtor(&args[1]);",
          "256:  zval_ptr_dtor(&args[0]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "280: {",
          "281:  struct php_user_filter_data *fdat = NULL;",
          "282:  php_stream_filter *filter;",
          "284:  zval func_name;",
          "286:  int len;",
          "",
          "[Removed Lines]",
          "283:  zval *obj, *zfilter;",
          "285:  zval *retval = NULL;",
          "",
          "[Added Lines]",
          "272:  zval obj, zfilter;",
          "274:  zval retval;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "295:  len = strlen(filtername);",
          "299:   char *period;",
          "",
          "[Removed Lines]",
          "298:  if (FAILURE == zend_hash_find(BG(user_filter_map), (char*)filtername, len + 1, (void**)&fdat)) {",
          "",
          "[Added Lines]",
          "287:  if (NULL == (fdat = zend_hash_str_find_ptr(BG(user_filter_map), (char*)filtername, len))) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "312:    while (period) {",
          "314:     strncat(wildcard, \".*\", 2);",
          "316:      period = NULL;",
          "317:     } else {",
          "",
          "[Removed Lines]",
          "315:     if (SUCCESS == zend_hash_find(BG(user_filter_map), wildcard, strlen(wildcard) + 1, (void**)&fdat)) {",
          "",
          "[Added Lines]",
          "304:     if (NULL != (fdat = zend_hash_str_find_ptr(BG(user_filter_map), wildcard, strlen(wildcard)))) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "332:  if (fdat->ce == NULL) {",
          "335:    php_error_docref(NULL TSRMLS_CC, E_WARNING,",
          "336:      \"user-filter \\\"%s\\\" requires class \\\"%s\\\", but that class is not defined\",",
          "338:    return NULL;",
          "339:   }",
          "342:  }",
          "344:  filter = php_stream_filter_alloc(&userfilter_ops, NULL, 0);",
          "",
          "[Removed Lines]",
          "333:   if (FAILURE == zend_lookup_class(fdat->classname, strlen(fdat->classname),",
          "334:      (zend_class_entry ***)&fdat->ce TSRMLS_CC)) {",
          "337:      filtername, fdat->classname);",
          "340:   fdat->ce = *(zend_class_entry**)fdat->ce;",
          "",
          "[Added Lines]",
          "322:   if (NULL == (fdat->ce = zend_lookup_class(fdat->classname TSRMLS_CC))) {",
          "325:      filtername, fdat->classname->val);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "347:  }",
          "359:  if (filterparams) {",
          "361:  } else {",
          "363:  }",
          "368:  call_user_function_ex(NULL,",
          "369:    &obj,",
          "",
          "[Removed Lines]",
          "350:  ALLOC_ZVAL(obj);",
          "351:  object_init_ex(obj, fdat->ce);",
          "352:  Z_SET_REFCOUNT_P(obj, 1);",
          "353:  Z_SET_ISREF_P(obj);",
          "356:  add_property_string(obj, \"filtername\", (char*)filtername, 1);",
          "360:   add_property_zval(obj, \"params\", filterparams);",
          "362:   add_property_null(obj, \"params\");",
          "366:  ZVAL_STRINGL(&func_name, \"oncreate\", sizeof(\"oncreate\")-1, 0);",
          "",
          "[Added Lines]",
          "336:  object_init_ex(&obj, fdat->ce);",
          "340:  add_property_string(&obj, \"filtername\", (char*)filtername, 1);",
          "344:   add_property_zval(&obj, \"params\", filterparams);",
          "346:   add_property_null(&obj, \"params\");",
          "351:  ZVAL_STRINGL(&func_name, \"oncreate\", sizeof(\"oncreate\")-1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "372:    0, NULL,",
          "373:    0, NULL TSRMLS_CC);",
          "378:    zval_ptr_dtor(&retval);",
          "",
          "[Removed Lines]",
          "375:  if (retval) {",
          "376:   if (Z_TYPE_P(retval) == IS_BOOL && Z_LVAL_P(retval) == 0) {",
          "",
          "[Added Lines]",
          "360:  if (Z_TYPE(retval) != IS_UNDEF) {",
          "361:   if (Z_TYPE(retval) == IS_BOOL && Z_LVAL(retval) == 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "391:  }",
          "399:  zval_ptr_dtor(&zfilter);",
          "",
          "[Removed Lines]",
          "394:  ALLOC_INIT_ZVAL(zfilter);",
          "395:  ZEND_REGISTER_RESOURCE(zfilter, filter, le_userfilters);",
          "396:  filter->abstract = obj;",
          "397:  add_property_zval(obj, \"filter\", zfilter);",
          "",
          "[Added Lines]",
          "379:  ZEND_REGISTER_RESOURCE(&zfilter, filter, le_userfilters);",
          "381:  filter->abstract = &obj;",
          "382:  add_property_zval(&obj, \"filter\", &zfilter);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "414: PHP_FUNCTION(stream_bucket_make_writeable)",
          "415: {",
          "417:  php_stream_bucket_brigade *brigade;",
          "418:  php_stream_bucket *bucket;",
          "",
          "[Removed Lines]",
          "416:  zval *zbrigade, *zbucket;",
          "",
          "[Added Lines]",
          "401:  zval *zbrigade, zbucket;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "421:   RETURN_FALSE;",
          "422:  }",
          "426:  ZVAL_NULL(return_value);",
          "428:  if (brigade->head && (bucket = php_stream_bucket_make_writeable(brigade->head TSRMLS_CC))) {",
          "431:   object_init(return_value);",
          "434:   zval_ptr_dtor(&zbucket);",
          "435:   add_property_stringl(return_value, \"data\", bucket->buf, bucket->buflen, 1);",
          "",
          "[Removed Lines]",
          "424:  ZEND_FETCH_RESOURCE(brigade, php_stream_bucket_brigade *, &zbrigade, -1, PHP_STREAM_BRIGADE_RES_NAME, le_bucket_brigade);",
          "429:   ALLOC_INIT_ZVAL(zbucket);",
          "430:   ZEND_REGISTER_RESOURCE(zbucket, bucket, le_bucket);",
          "432:   add_property_zval(return_value, \"bucket\", zbucket);",
          "",
          "[Added Lines]",
          "409:  ZEND_FETCH_RESOURCE(brigade, php_stream_bucket_brigade *, zbrigade, -1, PHP_STREAM_BRIGADE_RES_NAME, le_bucket_brigade);",
          "414:   ZEND_REGISTER_RESOURCE(&zbucket, bucket, le_bucket);",
          "416:   add_property_zval(return_value, \"bucket\", &zbucket);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "442: static void php_stream_bucket_attach(int append, INTERNAL_FUNCTION_PARAMETERS)",
          "443: {",
          "444:  zval *zbrigade, *zobject;",
          "446:  php_stream_bucket_brigade *brigade;",
          "447:  php_stream_bucket *bucket;",
          "",
          "[Removed Lines]",
          "445:  zval **pzbucket, **pzdata;",
          "",
          "[Added Lines]",
          "429:  zval *pzbucket, *pzdata;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "450:   RETURN_FALSE;",
          "451:  }",
          "454:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Object has no bucket property\");",
          "455:   RETURN_FALSE;",
          "456:  }",
          "459:  ZEND_FETCH_RESOURCE(bucket, php_stream_bucket *, pzbucket, -1, PHP_STREAM_BUCKET_RES_NAME, le_bucket);",
          "462:   if (!bucket->own_buf) {",
          "463:    bucket = php_stream_bucket_make_writeable(bucket TSRMLS_CC);",
          "464:   }",
          "468:   }",
          "470:  }",
          "472:  if (append) {",
          "",
          "[Removed Lines]",
          "453:  if (FAILURE == zend_hash_find(Z_OBJPROP_P(zobject), \"bucket\", 7, (void**)&pzbucket)) {",
          "458:  ZEND_FETCH_RESOURCE(brigade, php_stream_bucket_brigade *, &zbrigade, -1, PHP_STREAM_BRIGADE_RES_NAME, le_bucket_brigade);",
          "461:  if (SUCCESS == zend_hash_find(Z_OBJPROP_P(zobject), \"data\", 5, (void**)&pzdata) && (*pzdata)->type == IS_STRING) {",
          "465:   if ((int)bucket->buflen != Z_STRLEN_PP(pzdata)) {",
          "466:    bucket->buf = perealloc(bucket->buf, Z_STRLEN_PP(pzdata), bucket->is_persistent);",
          "467:    bucket->buflen = Z_STRLEN_PP(pzdata);",
          "469:   memcpy(bucket->buf, Z_STRVAL_PP(pzdata), bucket->buflen);",
          "",
          "[Added Lines]",
          "437:  if (NULL == (pzbucket = zend_hash_str_find(Z_OBJPROP_P(zobject), \"bucket\", sizeof(\"bucket\")-1))) {",
          "442:  ZEND_FETCH_RESOURCE(brigade, php_stream_bucket_brigade *, zbrigade, -1, PHP_STREAM_BRIGADE_RES_NAME, le_bucket_brigade);",
          "445:  if (NULL != (pzdata = zend_hash_str_find(Z_OBJPROP_P(zobject), \"data\", sizeof(\"data\")-1)) && Z_TYPE_P(pzdata) == IS_STRING) {",
          "449:   if ((int)bucket->buflen != Z_STRLEN_P(pzdata)) {",
          "450:    bucket->buf = perealloc(bucket->buf, Z_STRLEN_P(pzdata), bucket->is_persistent);",
          "451:    bucket->buflen = Z_STRLEN_P(pzdata);",
          "453:   memcpy(bucket->buf, Z_STRVAL_P(pzdata), bucket->buflen);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "504: PHP_FUNCTION(stream_bucket_new)",
          "505: {",
          "507:  php_stream *stream;",
          "508:  char *buffer;",
          "509:  char *pbuffer;",
          "",
          "[Removed Lines]",
          "506:  zval *zstream, *zbucket;",
          "",
          "[Added Lines]",
          "490:  zval *zstream, zbucket;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "514:   RETURN_FALSE;",
          "515:  }",
          "519:  if (!(pbuffer = pemalloc(buffer_len, php_stream_is_persistent(stream)))) {",
          "520:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "517:  php_stream_from_zval(stream, &zstream);",
          "",
          "[Added Lines]",
          "501:  php_stream_from_zval(stream, zstream);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "528:   RETURN_FALSE;",
          "529:  }",
          "533:  object_init(return_value);",
          "536:  zval_ptr_dtor(&zbucket);",
          "537:  add_property_stringl(return_value, \"data\", bucket->buf, bucket->buflen, 1);",
          "",
          "[Removed Lines]",
          "531:  ALLOC_INIT_ZVAL(zbucket);",
          "532:  ZEND_REGISTER_RESOURCE(zbucket, bucket, le_bucket);",
          "534:  add_property_zval(return_value, \"bucket\", zbucket);",
          "",
          "[Added Lines]",
          "515:  ZEND_REGISTER_RESOURCE(&zbucket, bucket, le_bucket);",
          "517:  add_property_zval(return_value, \"bucket\", &zbucket);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "544: PHP_FUNCTION(stream_get_filters)",
          "545: {",
          "547:  int key_flags;",
          "549:  HashTable *filters_hash;",
          "550:  ulong num_key;",
          "",
          "[Removed Lines]",
          "546:  char *filter_name;",
          "548:  uint filter_name_len = 0;",
          "",
          "[Added Lines]",
          "529:  zend_string *filter_name;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "560:  if (filters_hash) {",
          "561:   for(zend_hash_internal_pointer_reset(filters_hash);",
          "563:    zend_hash_move_forward(filters_hash))",
          "564:     if (key_flags == HASH_KEY_IS_STRING) {",
          "566:     }",
          "567:  }",
          "",
          "[Removed Lines]",
          "562:    (key_flags = zend_hash_get_current_key_ex(filters_hash, &filter_name, &filter_name_len, &num_key, 0, NULL)) != HASH_KEY_NON_EXISTENT;",
          "565:      add_next_index_stringl(return_value, filter_name, filter_name_len - 1, 1);",
          "",
          "[Added Lines]",
          "544:    (key_flags = zend_hash_get_current_key_ex(filters_hash, &filter_name, &num_key, 0, NULL)) != HASH_KEY_NON_EXISTENT;",
          "548:      add_next_index_stringl(return_value, filter_name->val, filter_name->len, 1);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "574: PHP_FUNCTION(stream_filter_register)",
          "575: {",
          "578:  struct php_user_filter_data *fdat;",
          "582:   RETURN_FALSE;",
          "583:  }",
          "585:  RETVAL_FALSE;",
          "588:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Filter name cannot be empty\");",
          "589:   return;",
          "590:  }",
          "593:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Class name cannot be empty\");",
          "594:   return;",
          "595:  }",
          "",
          "[Removed Lines]",
          "576:  char *filtername, *classname;",
          "577:  int filtername_len, classname_len;",
          "580:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ss\", &filtername, &filtername_len,",
          "581:     &classname, &classname_len) == FAILURE) {",
          "587:  if (!filtername_len) {",
          "592:  if (!classname_len) {",
          "",
          "[Added Lines]",
          "559:  zend_string *filtername, *classname;",
          "562:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"SS\", &filtername, &classname) == FAILURE) {",
          "568:  if (!filtername->len) {",
          "573:  if (!classname->len) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "599:   zend_hash_init(BG(user_filter_map), 5, NULL, (dtor_func_t) filter_item_dtor, 0);",
          "600:  }",
          "608:   RETVAL_TRUE;",
          "609:  }",
          "612: }",
          "",
          "[Removed Lines]",
          "602:  fdat = ecalloc(1, sizeof(struct php_user_filter_data) + classname_len);",
          "603:  memcpy(fdat->classname, classname, classname_len);",
          "605:  if (zend_hash_add(BG(user_filter_map), filtername, filtername_len + 1, (void*)fdat,",
          "606:     sizeof(*fdat) + classname_len, NULL) == SUCCESS &&",
          "607:    php_stream_filter_register_factory_volatile(filtername, &user_filter_factory TSRMLS_CC) == SUCCESS) {",
          "611:  efree(fdat);",
          "",
          "[Added Lines]",
          "583:  fdat = ecalloc(1, sizeof(struct php_user_filter_data));",
          "584:  fdat->classname = STR_COPY(classname);",
          "586:  if (zend_hash_add_ptr(BG(user_filter_map), filtername, fdat) != NULL &&",
          "587:    php_stream_filter_register_factory_volatile(filtername->val, &user_filter_factory TSRMLS_CC) == SUCCESS) {",
          "589:  } else {",
          "590:   STR_RELEASE(classname);",
          "591:   efree(fdat);",
          "",
          "---------------"
        ],
        "ext/standard/uuencode.c||ext/standard/uuencode.c": [
          "File: ext/standard/uuencode.c -> ext/standard/uuencode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:  dst_len = php_uuencode(src, src_len, &dst);",
          "202: }",
          "",
          "[Removed Lines]",
          "201:  RETURN_STRINGL(dst, dst_len, 0);",
          "",
          "[Added Lines]",
          "202:  RETURN_STRINGL(dst, dst_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:   RETURN_FALSE;",
          "220:  }",
          "223: }",
          "",
          "[Removed Lines]",
          "222:  RETURN_STRINGL(dst, dst_len, 0);",
          "",
          "[Added Lines]",
          "224:  RETURN_STRINGL(dst, dst_len);",
          "",
          "---------------"
        ],
        "ext/standard/var.c||ext/standard/var.c": [
          "File: ext/standard/var.c -> ext/standard/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "896: }",
          "900: {",
          "902:  smart_str_0(buf);",
          "903: }",
          "",
          "[Removed Lines]",
          "901:  php_var_serialize_intern(buf, *struc, *var_hash TSRMLS_CC);",
          "",
          "[Added Lines]",
          "901:  php_var_serialize_intern(buf, struc, *var_hash TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "908: PHP_FUNCTION(serialize)",
          "909: {",
          "911:  php_serialize_data_t var_hash;",
          "912:  smart_str buf = {0};",
          "915:   return;",
          "916:  }",
          "",
          "[Removed Lines]",
          "910:  zval **struc;",
          "914:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Z\", &struc) == FAILURE) {",
          "",
          "[Added Lines]",
          "910:  zval *struc;",
          "914:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z\", &struc) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "954:  p = (const unsigned char*) buf;",
          "955:  PHP_VAR_UNSERIALIZE_INIT(var_hash);",
          "957:   PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "958:   zval_dtor(return_value);",
          "959:   if (!EG(exception)) {",
          "",
          "[Removed Lines]",
          "956:  if (!php_var_unserialize(&return_value, &p, p + buf_len, &var_hash TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "956:  if (!php_var_unserialize(return_value, &p, p + buf_len, &var_hash TSRMLS_CC)) {",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:   +----------------------------------------------------------------------+",
          "5:   | PHP Version 5                                                        |",
          "6:   +----------------------------------------------------------------------+",
          "8:   +----------------------------------------------------------------------+",
          "9:   | This source file is subject to version 3.01 of the PHP license,      |",
          "10:   | that is bundled with this package in the file LICENSE, and is        |",
          "",
          "[Removed Lines]",
          "7:   | Copyright (c) 1997-2014 The PHP Group                                |",
          "",
          "[Added Lines]",
          "7:   | Copyright (c) 1997-2013 The PHP Group                                |",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:  void *next;",
          "35: } var_entries;",
          "38: {",
          "39:  var_entries *var_hash = (*var_hashx)->last;",
          "40: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "37: static inline void var_push(php_unserialize_data_t *var_hashx, zval **rval)",
          "",
          "[Added Lines]",
          "37: static inline void var_push(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:   (*var_hashx)->last = var_hash;",
          "56:  }",
          "59: }",
          "62: {",
          "63:  var_entries *var_hash = (*var_hashx)->last_dtor;",
          "64: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "58:  var_hash->data[var_hash->used_slots++] = *rval;",
          "61: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval **rval)",
          "",
          "[Added Lines]",
          "58:  var_hash->data[var_hash->used_slots++] = rval;",
          "61: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:   (*var_hashx)->last_dtor = var_hash;",
          "80:  }",
          "84: }",
          "87: {",
          "88:  var_entries *var_hash = (*var_hashx)->last_dtor;",
          "89: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "82:  Z_ADDREF_PP(rval);",
          "83:  var_hash->data[var_hash->used_slots++] = *rval;",
          "86: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval **rval)",
          "",
          "[Added Lines]",
          "82:  Z_ADDREF_P(rval);",
          "83:  var_hash->data[var_hash->used_slots++] = rval;",
          "86: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:   (*var_hashx)->last_dtor = var_hash;",
          "105:  }",
          "108: }",
          "111: {",
          "112:  long i;",
          "113:  var_entries *var_hash = (*var_hashx)->first;",
          "",
          "[Removed Lines]",
          "107:  var_hash->data[var_hash->used_slots++] = *rval;",
          "110: PHPAPI void var_replace(php_unserialize_data_t *var_hashx, zval *ozval, zval **nzval)",
          "",
          "[Added Lines]",
          "107:  var_hash->data[var_hash->used_slots++] = rval;",
          "110: PHPAPI void var_replace(php_unserialize_data_t *var_hashx, zval *ozval, zval *nzval)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "118:  while (var_hash) {",
          "119:   for (i = 0; i < var_hash->used_slots; i++) {",
          "120:    if (var_hash->data[i] == ozval) {",
          "123:    }",
          "124:   }",
          "",
          "[Removed Lines]",
          "121:     var_hash->data[i] = *nzval;",
          "",
          "[Added Lines]",
          "121:     var_hash->data[i] = nzval;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "126:  }",
          "127: }",
          "130: {",
          "131:  var_entries *var_hash = (*var_hashx)->first;",
          "132: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "129: static int var_access(php_unserialize_data_t *var_hashx, long id, zval ***store)",
          "",
          "[Added Lines]",
          "129: static int var_access(php_unserialize_data_t *var_hashx, long id, zval **store)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "167:  while (var_hash) {",
          "168:   for (i = 0; i < var_hash->used_slots; i++) {",
          "170:   }",
          "171:   next = var_hash->next;",
          "172:   efree(var_hash);",
          "",
          "[Removed Lines]",
          "169:    zval_ptr_dtor(&var_hash->data[i]);",
          "",
          "[Added Lines]",
          "169:    zval_ptr_dtor(var_hash->data[i]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "286:  return result;",
          "287: }",
          "290: #define UNSERIALIZE_PASSTHRU rval, p, max, var_hash TSRMLS_CC",
          "292: static inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, long elements, int objprops)",
          "293: {",
          "294:  while (elements-- > 0) {",
          "299:   if (!php_var_unserialize(&key, p, max, NULL TSRMLS_CC)) {",
          "302:    return 0;",
          "303:   }",
          "308:    return 0;",
          "309:   }",
          "313:   if (!php_var_unserialize(&data, p, max, var_hash TSRMLS_CC)) {",
          "318:    return 0;",
          "319:   }",
          "321:   if (!objprops) {",
          "323:    case IS_LONG:",
          "325:      var_push_dtor(var_hash, old_data);",
          "326:     }",
          "328:     break;",
          "329:    case IS_STRING:",
          "331:      var_push_dtor(var_hash, old_data);",
          "332:     }",
          "334:     break;",
          "335:    }",
          "336:   } else {",
          "341:   }",
          "346:   if (elements && *(*p-1) != ';' && *(*p-1) != '}') {",
          "347:    (*p)--;",
          "",
          "[Removed Lines]",
          "289: #define UNSERIALIZE_PARAMETER zval **rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash TSRMLS_DC",
          "295:   zval *key, *data, **old_data;",
          "297:   ALLOC_INIT_ZVAL(key);",
          "300:    zval_dtor(key);",
          "301:    FREE_ZVAL(key);",
          "305:   if (Z_TYPE_P(key) != IS_LONG && Z_TYPE_P(key) != IS_STRING) {",
          "306:    zval_dtor(key);",
          "307:    FREE_ZVAL(key);",
          "311:   ALLOC_INIT_ZVAL(data);",
          "314:    zval_dtor(key);",
          "315:    FREE_ZVAL(key);",
          "316:    zval_dtor(data);",
          "317:    FREE_ZVAL(data);",
          "322:    switch (Z_TYPE_P(key)) {",
          "324:     if (zend_hash_index_find(ht, Z_LVAL_P(key), (void **)&old_data)==SUCCESS) {",
          "327:     zend_hash_index_update(ht, Z_LVAL_P(key), &data, sizeof(data), NULL);",
          "330:     if (zend_symtable_find(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, (void **)&old_data)==SUCCESS) {",
          "333:     zend_symtable_update(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, &data, sizeof(data), NULL);",
          "338:    convert_to_string(key);",
          "339:    zend_hash_update(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, &data,",
          "340:      sizeof data, NULL);",
          "343:   zval_dtor(key);",
          "344:   FREE_ZVAL(key);",
          "",
          "[Added Lines]",
          "289: #define UNSERIALIZE_PARAMETER zval *rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash TSRMLS_DC",
          "295:   zval key, data, *old_data;",
          "298:    zval_dtor(&key);",
          "302:   if (Z_TYPE(key) != IS_LONG && Z_TYPE(key) != IS_STRING) {",
          "303:    zval_dtor(&key);",
          "308:    zval_dtor(&key);",
          "309:    zval_dtor(&data);",
          "314:    switch (Z_TYPE(key)) {",
          "316:     if ((old_data = zend_hash_index_find(ht, Z_LVAL(key))) != NULL) {",
          "319:     zend_hash_index_update(ht, Z_LVAL(key), &data);",
          "322:     if ((old_data = zend_symtable_find(ht, Z_STR(key))) != NULL) {",
          "325:     zend_symtable_update(ht, Z_STR(key), &data);",
          "330:    convert_to_string(&key);",
          "331:    zend_hash_update(ht, Z_STR(key), &data);",
          "334:   zval_dtor(&key);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "377:  }",
          "379:  if (ce->unserialize == NULL) {",
          "382:  } else if (ce->unserialize(rval, ce, (const unsigned char*)*p, datalen, (zend_unserialize_data *)var_hash TSRMLS_CC) != SUCCESS) {",
          "383:   return 0;",
          "384:  }",
          "",
          "[Removed Lines]",
          "380:   zend_error(E_WARNING, \"Class %s has no unserializer\", ce->name);",
          "381:   object_init_ex(*rval, ce);",
          "",
          "[Added Lines]",
          "370:   zend_error(E_WARNING, \"Class %s has no unserializer\", ce->name->val);",
          "371:   object_init_ex(rval, ce);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "397:  (*p) += 2;",
          "400:  return elements;",
          "401: }",
          "",
          "[Removed Lines]",
          "399:  object_init_ex(*rval, ce);",
          "",
          "[Added Lines]",
          "389:  object_init_ex(rval, ce);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "405: #endif",
          "406: static inline int object_common2(UNSERIALIZE_PARAMETER, long elements)",
          "407: {",
          "409:  zval fname;",
          "412:   return 0;",
          "413:  }",
          "419:   BG(serialize_lock)++;",
          "421:   BG(serialize_lock)--;",
          "422:  }",
          "428:  if (EG(exception)) {",
          "429:   return 0;",
          "",
          "[Removed Lines]",
          "408:  zval *retval_ptr = NULL;",
          "411:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_OBJPROP_PP(rval), elements, 1)) {",
          "415:  if (Z_OBJCE_PP(rval) != PHP_IC_ENTRY &&",
          "416:   zend_hash_exists(&Z_OBJCE_PP(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\"))) {",
          "417:   INIT_PZVAL(&fname);",
          "418:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1, 0);",
          "420:   call_user_function_ex(CG(function_table), rval, &fname, &retval_ptr, 0, 0, 1, NULL TSRMLS_CC);",
          "424:  if (retval_ptr) {",
          "425:   zval_ptr_dtor(&retval_ptr);",
          "426:  }",
          "",
          "[Added Lines]",
          "398:  zval retval;",
          "401:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_OBJPROP_P(rval), elements, 1)) {",
          "405:  if (Z_OBJCE_P(rval) != PHP_IC_ENTRY &&",
          "406:   zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1)) {",
          "408:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1);",
          "410:   call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL TSRMLS_CC);",
          "414:  zval_ptr_dtor(&retval);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "439: PHPAPI int php_var_unserialize(UNSERIALIZE_PARAMETER)",
          "440: {",
          "441:  const unsigned char *cursor, *limit, *marker, *start;",
          "444:  limit = max;",
          "445:  cursor = *p;",
          "",
          "[Removed Lines]",
          "442:  zval **rval_ref;",
          "",
          "[Added Lines]",
          "430:  zval *rval_ref;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "461: {",
          "462:  YYCTYPE yych;",
          "463:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "460: #line 461 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "448: #line 449 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "517:  yych = *(YYMARKER = ++YYCURSOR);",
          "518:  if (yych == ':') goto yy95;",
          "519: yy3:",
          "521:  { return 0; }",
          "523: yy4:",
          "524:  yych = *(YYMARKER = ++YYCURSOR);",
          "525:  if (yych == ':') goto yy89;",
          "",
          "[Removed Lines]",
          "520: #line 812 \"ext/standard/var_unserializer.re\"",
          "522: #line 523 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "508: #line 785 \"ext/standard/var_unserializer.re\"",
          "510: #line 511 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "562:  goto yy3;",
          "563: yy14:",
          "564:  ++YYCURSOR;",
          "566:  {",
          "568:  php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Unexpected end of serialized data\");",
          "570: }",
          "572: yy16:",
          "573:  yych = *++YYCURSOR;",
          "574:  goto yy3;",
          "",
          "[Removed Lines]",
          "565: #line 806 \"ext/standard/var_unserializer.re\"",
          "571: #line 572 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "553: #line 779 \"ext/standard/var_unserializer.re\"",
          "559: #line 560 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "598:  yych = *++YYCURSOR;",
          "599:  if (yych != '\"') goto yy18;",
          "600:  ++YYCURSOR;",
          "602:  {",
          "603:  size_t len, len2, len3, maxlen;",
          "604:  long elements;",
          "606:  zend_class_entry *ce;",
          "608:  int incomplete_class = 0;",
          "610:  int custom_object = 0;",
          "617:  if (*start == 'C') {",
          "618:   custom_object = 1;",
          "619:  }",
          "622:  len2 = len = parse_uiv(start + 2);",
          "623:  maxlen = max - YYCURSOR;",
          "624:  if (maxlen < len || len == 0) {",
          "",
          "[Removed Lines]",
          "601: #line 660 \"ext/standard/var_unserializer.re\"",
          "605:  char *class_name;",
          "607:  zend_class_entry **pce;",
          "612:  zval *user_func;",
          "613:  zval *retval_ptr;",
          "614:  zval **args[1];",
          "615:  zval *arg_func_name;",
          "621:  INIT_PZVAL(*rval);",
          "",
          "[Added Lines]",
          "589: #line 641 \"ext/standard/var_unserializer.re\"",
          "593:  char *str;",
          "594:  zend_string *class_name;",
          "600:  zval user_func;",
          "601:  zval retval;",
          "602:  zval args[1];",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "626:   return 0;",
          "627:  }",
          "631:  YYCURSOR += len;",
          "",
          "[Removed Lines]",
          "629:  class_name = (char*)YYCURSOR;",
          "",
          "[Added Lines]",
          "616:  str = (char*)YYCURSOR;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "639:   return 0;",
          "640:  }",
          "643:  if (len3 != len)",
          "644:  {",
          "646:   return 0;",
          "647:  }",
          "651:  do {",
          "653:   BG(serialize_lock)++;",
          "655:    BG(serialize_lock)--;",
          "656:    if (EG(exception)) {",
          "658:     return 0;",
          "659:    }",
          "661:    break;",
          "662:   }",
          "663:   BG(serialize_lock)--;",
          "665:   if (EG(exception)) {",
          "667:    return 0;",
          "668:   }",
          "",
          "[Removed Lines]",
          "642:  len3 = strspn(class_name, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "649:  class_name = estrndup(class_name, len);",
          "654:   if (zend_lookup_class(class_name, len2, &pce TSRMLS_CC) == SUCCESS) {",
          "657:     efree(class_name);",
          "660:    ce = *pce;",
          "666:    efree(class_name);",
          "",
          "[Added Lines]",
          "629:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "636:  class_name = STR_INIT(str, len, 0);",
          "641:   ce = zend_lookup_class(class_name TSRMLS_CC);",
          "642:   if (ce) {",
          "645:     STR_RELEASE(class_name);",
          "653:    STR_RELEASE(class_name);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "675:   }",
          "683:   BG(serialize_lock)++;",
          "685:    BG(serialize_lock)--;",
          "686:    if (EG(exception)) {",
          "688:     zval_ptr_dtor(&user_func);",
          "690:     return 0;",
          "691:    }",
          "693:    incomplete_class = 1;",
          "694:    ce = PHP_IC_ENTRY;",
          "695:    zval_ptr_dtor(&user_func);",
          "697:    break;",
          "698:   }",
          "699:   BG(serialize_lock)--;",
          "703:   if (EG(exception)) {",
          "705:    zval_ptr_dtor(&user_func);",
          "707:    return 0;",
          "708:   }",
          "715:    incomplete_class = 1;",
          "716:    ce = PHP_IC_ENTRY;",
          "717:   }",
          "719:   zval_ptr_dtor(&user_func);",
          "721:   break;",
          "722:  } while (1);",
          "",
          "[Removed Lines]",
          "678:   MAKE_STD_ZVAL(user_func);",
          "679:   ZVAL_STRING(user_func, PG(unserialize_callback_func), 1);",
          "680:   args[0] = &arg_func_name;",
          "681:   MAKE_STD_ZVAL(arg_func_name);",
          "682:   ZVAL_STRING(arg_func_name, class_name, 1);",
          "684:   if (call_user_function_ex(CG(function_table), NULL, user_func, &retval_ptr, 1, args, 0, NULL TSRMLS_CC) != SUCCESS) {",
          "687:     efree(class_name);",
          "689:     zval_ptr_dtor(&arg_func_name);",
          "692:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"defined (%s) but not found\", user_func->value.str.val);",
          "696:    zval_ptr_dtor(&arg_func_name);",
          "700:   if (retval_ptr) {",
          "701:    zval_ptr_dtor(&retval_ptr);",
          "702:   }",
          "704:    efree(class_name);",
          "706:    zval_ptr_dtor(&arg_func_name);",
          "711:   if (zend_lookup_class(class_name, len2, &pce TSRMLS_CC) == SUCCESS) {",
          "712:    ce = *pce;",
          "713:   } else {",
          "714:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Function %s() hasn't defined the class it was called for\", user_func->value.str.val);",
          "720:   zval_ptr_dtor(&arg_func_name);",
          "",
          "[Added Lines]",
          "665:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "666:   ZVAL_STR(&args[0], class_name);",
          "668:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL TSRMLS_CC) != SUCCESS) {",
          "671:     STR_FREE(class_name);",
          "673:     zval_ptr_dtor(&args[0]);",
          "676:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "680:    zval_ptr_dtor(&args[0]);",
          "684:   zval_ptr_dtor(&retval);",
          "686:    STR_FREE(class_name);",
          "688:    zval_ptr_dtor(&args[0]);",
          "693:   if ((ce = zend_lookup_class(class_name TSRMLS_CC)) == NULL) {",
          "694:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "700:   zval_ptr_dtor(&args[0]);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "729:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "731:   if (ret && incomplete_class) {",
          "733:   }",
          "735:   return ret;",
          "736:  }",
          "738:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "740:  if (incomplete_class) {",
          "742:  }",
          "745:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "746: }",
          "748: yy25:",
          "749:  yych = *++YYCURSOR;",
          "750:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "732:    php_store_class_name(*rval, class_name, len2);",
          "734:   efree(class_name);",
          "741:   php_store_class_name(*rval, class_name, len2);",
          "743:  efree(class_name);",
          "747: #line 748 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "712:    php_store_class_name(rval, class_name->val, len2);",
          "714:   STR_FREE(class_name);",
          "721:   php_store_class_name(rval, class_name->val, len2);",
          "723:  STR_FREE(class_name);",
          "727: #line 728 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "769:  yych = *++YYCURSOR;",
          "770:  if (yych != '\"') goto yy18;",
          "771:  ++YYCURSOR;",
          "773:  {",
          "777:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "778:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "779: }",
          "781: yy32:",
          "782:  yych = *++YYCURSOR;",
          "783:  if (yych == '+') goto yy33;",
          "",
          "[Removed Lines]",
          "772: #line 652 \"ext/standard/var_unserializer.re\"",
          "775:  INIT_PZVAL(*rval);",
          "780: #line 781 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "752: #line 633 \"ext/standard/var_unserializer.re\"",
          "760: #line 761 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "798:  yych = *++YYCURSOR;",
          "799:  if (yych != '{') goto yy18;",
          "800:  ++YYCURSOR;",
          "802:  {",
          "803:  long elements = parse_iv(start + 2);",
          "",
          "[Removed Lines]",
          "801: #line 632 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "781: #line 615 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "808:   return 0;",
          "809:  }",
          "816:   return 0;",
          "817:  }",
          "819:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "820: }",
          "822: yy39:",
          "823:  yych = *++YYCURSOR;",
          "824:  if (yych == '+') goto yy40;",
          "",
          "[Removed Lines]",
          "811:  INIT_PZVAL(*rval);",
          "813:  array_init_size(*rval, elements);",
          "815:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_PP(rval), elements, 0)) {",
          "821: #line 822 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "791:  array_init_size(rval, elements);",
          "793:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "799: #line 800 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "839:  yych = *++YYCURSOR;",
          "840:  if (yych != '\"') goto yy18;",
          "841:  ++YYCURSOR;",
          "843:  {",
          "844:  size_t len, maxlen;",
          "845:  char *str;",
          "",
          "[Removed Lines]",
          "842: #line 603 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "820: #line 586 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "864:  YYCURSOR += 2;",
          "869:  return 1;",
          "870: }",
          "872: yy46:",
          "873:  yych = *++YYCURSOR;",
          "874:  if (yych == '+') goto yy47;",
          "",
          "[Removed Lines]",
          "867:  INIT_PZVAL(*rval);",
          "868:  ZVAL_STRINGL(*rval, str, len, 0);",
          "871: #line 872 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "846:  ZVAL_STRINGL(rval, str, len);",
          "849: #line 850 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "889:  yych = *++YYCURSOR;",
          "890:  if (yych != '\"') goto yy18;",
          "891:  ++YYCURSOR;",
          "893:  {",
          "894:  size_t len, maxlen;",
          "895:  char *str;",
          "",
          "[Removed Lines]",
          "892: #line 575 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "870: #line 559 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "913:  YYCURSOR += 2;",
          "918:  return 1;",
          "919: }",
          "921: yy53:",
          "922:  yych = *++YYCURSOR;",
          "923:  if (yych <= '/') {",
          "",
          "[Removed Lines]",
          "916:  INIT_PZVAL(*rval);",
          "917:  ZVAL_STRINGL(*rval, str, len, 1);",
          "920: #line 921 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "894:  ZVAL_STRINGL(rval, str, len);",
          "897: #line 898 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1005:  }",
          "1006: yy63:",
          "1007:  ++YYCURSOR;",
          "1009:  {",
          "1010: #if SIZEOF_LONG == 4",
          "1011: use_double:",
          "1012: #endif",
          "1016:  return 1;",
          "1017: }",
          "1019: yy65:",
          "1020:  yych = *++YYCURSOR;",
          "1021:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1008: #line 565 \"ext/standard/var_unserializer.re\"",
          "1014:  INIT_PZVAL(*rval);",
          "1015:  ZVAL_DOUBLE(*rval, zend_strtod((const char *)start + 2, NULL));",
          "1018: #line 1019 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "985: #line 550 \"ext/standard/var_unserializer.re\"",
          "991:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "994: #line 995 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1074:  yych = *++YYCURSOR;",
          "1075:  if (yych != ';') goto yy18;",
          "1076:  ++YYCURSOR;",
          "1078:  {",
          "1088:  }",
          "1090:  return 1;",
          "1091: }",
          "1093: yy76:",
          "1094:  yych = *++YYCURSOR;",
          "1095:  if (yych == 'N') goto yy73;",
          "",
          "[Removed Lines]",
          "1077: #line 550 \"ext/standard/var_unserializer.re\"",
          "1080:  INIT_PZVAL(*rval);",
          "1082:  if (!strncmp(start + 2, \"NAN\", 3)) {",
          "1083:   ZVAL_DOUBLE(*rval, php_get_nan());",
          "1084:  } else if (!strncmp(start + 2, \"INF\", 3)) {",
          "1085:   ZVAL_DOUBLE(*rval, php_get_inf());",
          "1086:  } else if (!strncmp(start + 2, \"-INF\", 4)) {",
          "1087:   ZVAL_DOUBLE(*rval, -php_get_inf());",
          "1092: #line 1093 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1053: #line 534 \"ext/standard/var_unserializer.re\"",
          "1057:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1058:   ZVAL_DOUBLE(rval, php_get_nan());",
          "1059:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1060:   ZVAL_DOUBLE(rval, php_get_inf());",
          "1061:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1062:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "1063:  } else {",
          "1064:   ZVAL_NULL(rval);",
          "1069: #line 1070 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1116:  if (yych <= '9') goto yy79;",
          "1117:  if (yych != ';') goto yy18;",
          "1118:  ++YYCURSOR;",
          "1120:  {",
          "1121: #if SIZEOF_LONG == 4",
          "1122:  int digits = YYCURSOR - start - 3;",
          "",
          "[Removed Lines]",
          "1119: #line 523 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1096: #line 508 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1129:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1130:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1133:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1134:     goto use_double;",
          "",
          "[Removed Lines]",
          "1131:    int cmp = strncmp(YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "",
          "[Added Lines]",
          "1108:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1139:  }",
          "1140: #endif",
          "1144:  return 1;",
          "1145: }",
          "1147: yy83:",
          "1148:  yych = *++YYCURSOR;",
          "1149:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1142:  INIT_PZVAL(*rval);",
          "1143:  ZVAL_LONG(*rval, parse_iv(start + 2));",
          "1146: #line 1147 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1119:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1122: #line 1123 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1151:  yych = *++YYCURSOR;",
          "1152:  if (yych != ';') goto yy18;",
          "1153:  ++YYCURSOR;",
          "1155:  {",
          "1159:  return 1;",
          "1160: }",
          "1162: yy87:",
          "1163:  ++YYCURSOR;",
          "1165:  {",
          "1169:  return 1;",
          "1170: }",
          "1172: yy89:",
          "1173:  yych = *++YYCURSOR;",
          "1174:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1154: #line 516 \"ext/standard/var_unserializer.re\"",
          "1157:  INIT_PZVAL(*rval);",
          "1158:  ZVAL_BOOL(*rval, parse_iv(start + 2));",
          "1161: #line 1162 \"ext/standard/var_unserializer.c\"",
          "1164: #line 509 \"ext/standard/var_unserializer.re\"",
          "1167:  INIT_PZVAL(*rval);",
          "1168:  ZVAL_NULL(*rval);",
          "1171: #line 1172 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1130: #line 502 \"ext/standard/var_unserializer.re\"",
          "1133:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1136: #line 1137 \"ext/standard/var_unserializer.c\"",
          "1139: #line 496 \"ext/standard/var_unserializer.re\"",
          "1142:  ZVAL_NULL(rval);",
          "1145: #line 1146 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1191:  if (yych <= '9') goto yy91;",
          "1192:  if (yych != ';') goto yy18;",
          "1193:  ++YYCURSOR;",
          "1195:  {",
          "1196:  long id;",
          "",
          "[Removed Lines]",
          "1194: #line 486 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1168: #line 473 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1203:   return 0;",
          "1204:  }",
          "1209:   var_push_dtor_no_addref(var_hash, rval);",
          "1210:  }",
          "1215:  return 1;",
          "1216: }",
          "1218: yy95:",
          "1219:  yych = *++YYCURSOR;",
          "1220:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1206:  if (*rval == *rval_ref) return 0;",
          "1208:  if (*rval != NULL) {",
          "1212:  Z_ADDREF_PP(rval);",
          "1213:  Z_UNSET_ISREF_PP(rval);",
          "1217: #line 1218 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1181:  if (rval == rval_ref) return 0;",
          "1183:  if (rval != NULL) {",
          "1186:  ZVAL_COPY(rval, rval_ref);",
          "1191: #line 1192 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1237:  if (yych <= '9') goto yy97;",
          "1238:  if (yych != ';') goto yy18;",
          "1239:  ++YYCURSOR;",
          "1241:  {",
          "1242:  long id;",
          "",
          "[Removed Lines]",
          "1240: #line 465 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1214: #line 453 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1249:   return 0;",
          "1250:  }",
          "1253:   zval_ptr_dtor(rval);",
          "1254:  }",
          "1259:  return 1;",
          "1260: }",
          "1262: }",
          "1266:  return 0;",
          "",
          "[Removed Lines]",
          "1252:  if (*rval != NULL) {",
          "1256:  Z_ADDREF_PP(rval);",
          "1257:  Z_SET_ISREF_PP(rval);",
          "1261: #line 1262 \"ext/standard/var_unserializer.c\"",
          "1263: #line 814 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1226:  if (rval != NULL) {",
          "1229:  ZVAL_COPY(rval, rval_ref);",
          "1234: #line 1235 \"ext/standard/var_unserializer.c\"",
          "1236: #line 787 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  void *next;",
          "33: } var_entries;",
          "36: {",
          "37:  var_entries *var_hash = (*var_hashx)->last;",
          "38: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "35: static inline void var_push(php_unserialize_data_t *var_hashx, zval **rval)",
          "",
          "[Added Lines]",
          "35: static inline void var_push(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   (*var_hashx)->last = var_hash;",
          "54:  }",
          "57: }",
          "60: {",
          "61:  var_entries *var_hash = (*var_hashx)->last_dtor;",
          "62: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "56:  var_hash->data[var_hash->used_slots++] = *rval;",
          "59: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval **rval)",
          "",
          "[Added Lines]",
          "56:  var_hash->data[var_hash->used_slots++] = rval;",
          "59: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:   (*var_hashx)->last_dtor = var_hash;",
          "78:  }",
          "82: }",
          "85: {",
          "86:  var_entries *var_hash = (*var_hashx)->last_dtor;",
          "87: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "80:  Z_ADDREF_PP(rval);",
          "81:  var_hash->data[var_hash->used_slots++] = *rval;",
          "84: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval **rval)",
          "",
          "[Added Lines]",
          "80:  Z_ADDREF_P(rval);",
          "81:  var_hash->data[var_hash->used_slots++] = rval;",
          "84: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval *rval)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:   (*var_hashx)->last_dtor = var_hash;",
          "103:  }",
          "106: }",
          "109: {",
          "110:  long i;",
          "111:  var_entries *var_hash = (*var_hashx)->first;",
          "",
          "[Removed Lines]",
          "105:  var_hash->data[var_hash->used_slots++] = *rval;",
          "108: PHPAPI void var_replace(php_unserialize_data_t *var_hashx, zval *ozval, zval **nzval)",
          "",
          "[Added Lines]",
          "105:  var_hash->data[var_hash->used_slots++] = rval;",
          "108: PHPAPI void var_replace(php_unserialize_data_t *var_hashx, zval *ozval, zval *nzval)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "116:  while (var_hash) {",
          "117:   for (i = 0; i < var_hash->used_slots; i++) {",
          "118:    if (var_hash->data[i] == ozval) {",
          "121:    }",
          "122:   }",
          "",
          "[Removed Lines]",
          "119:     var_hash->data[i] = *nzval;",
          "",
          "[Added Lines]",
          "119:     var_hash->data[i] = nzval;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "124:  }",
          "125: }",
          "128: {",
          "129:  var_entries *var_hash = (*var_hashx)->first;",
          "130: #if VAR_ENTRIES_DBG",
          "",
          "[Removed Lines]",
          "127: static int var_access(php_unserialize_data_t *var_hashx, long id, zval ***store)",
          "",
          "[Added Lines]",
          "127: static int var_access(php_unserialize_data_t *var_hashx, long id, zval **store)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "165:  while (var_hash) {",
          "166:   for (i = 0; i < var_hash->used_slots; i++) {",
          "168:   }",
          "169:   next = var_hash->next;",
          "170:   efree(var_hash);",
          "",
          "[Removed Lines]",
          "167:    zval_ptr_dtor(&var_hash->data[i]);",
          "",
          "[Added Lines]",
          "167:    zval_ptr_dtor(var_hash->data[i]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "290:  return result;",
          "291: }",
          "294: #define UNSERIALIZE_PASSTHRU rval, p, max, var_hash TSRMLS_CC",
          "296: static inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, long elements, int objprops)",
          "297: {",
          "298:  while (elements-- > 0) {",
          "303:   if (!php_var_unserialize(&key, p, max, NULL TSRMLS_CC)) {",
          "306:    return 0;",
          "307:   }",
          "312:    return 0;",
          "313:   }",
          "317:   if (!php_var_unserialize(&data, p, max, var_hash TSRMLS_CC)) {",
          "322:    return 0;",
          "323:   }",
          "325:   if (!objprops) {",
          "327:    case IS_LONG:",
          "329:      var_push_dtor(var_hash, old_data);",
          "330:     }",
          "332:     break;",
          "333:    case IS_STRING:",
          "335:      var_push_dtor(var_hash, old_data);",
          "336:     }",
          "338:     break;",
          "339:    }",
          "340:   } else {",
          "345:   }",
          "350:   if (elements && *(*p-1) != ';' && *(*p-1) != '}') {",
          "351:    (*p)--;",
          "",
          "[Removed Lines]",
          "293: #define UNSERIALIZE_PARAMETER zval **rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash TSRMLS_DC",
          "299:   zval *key, *data, **old_data;",
          "301:   ALLOC_INIT_ZVAL(key);",
          "304:    zval_dtor(key);",
          "305:    FREE_ZVAL(key);",
          "309:   if (Z_TYPE_P(key) != IS_LONG && Z_TYPE_P(key) != IS_STRING) {",
          "310:    zval_dtor(key);",
          "311:    FREE_ZVAL(key);",
          "315:   ALLOC_INIT_ZVAL(data);",
          "318:    zval_dtor(key);",
          "319:    FREE_ZVAL(key);",
          "320:    zval_dtor(data);",
          "321:    FREE_ZVAL(data);",
          "326:    switch (Z_TYPE_P(key)) {",
          "328:     if (zend_hash_index_find(ht, Z_LVAL_P(key), (void **)&old_data)==SUCCESS) {",
          "331:     zend_hash_index_update(ht, Z_LVAL_P(key), &data, sizeof(data), NULL);",
          "334:     if (zend_symtable_find(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, (void **)&old_data)==SUCCESS) {",
          "337:     zend_symtable_update(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, &data, sizeof(data), NULL);",
          "342:    convert_to_string(key);",
          "343:    zend_hash_update(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, &data,",
          "344:      sizeof data, NULL);",
          "347:   zval_dtor(key);",
          "348:   FREE_ZVAL(key);",
          "",
          "[Added Lines]",
          "293: #define UNSERIALIZE_PARAMETER zval *rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash TSRMLS_DC",
          "299:   zval key, data, *old_data;",
          "302:    zval_dtor(&key);",
          "306:   if (Z_TYPE(key) != IS_LONG && Z_TYPE(key) != IS_STRING) {",
          "307:    zval_dtor(&key);",
          "312:    zval_dtor(&key);",
          "313:    zval_dtor(&data);",
          "318:    switch (Z_TYPE(key)) {",
          "320:     if ((old_data = zend_hash_index_find(ht, Z_LVAL(key))) != NULL) {",
          "323:     zend_hash_index_update(ht, Z_LVAL(key), &data);",
          "326:     if ((old_data = zend_symtable_find(ht, Z_STR(key))) != NULL) {",
          "329:     zend_symtable_update(ht, Z_STR(key), &data);",
          "334:    convert_to_string(&key);",
          "335:    zend_hash_update(ht, Z_STR(key), &data);",
          "338:   zval_dtor(&key);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "381:  }",
          "383:  if (ce->unserialize == NULL) {",
          "386:  } else if (ce->unserialize(rval, ce, (const unsigned char*)*p, datalen, (zend_unserialize_data *)var_hash TSRMLS_CC) != SUCCESS) {",
          "387:   return 0;",
          "388:  }",
          "",
          "[Removed Lines]",
          "384:   zend_error(E_WARNING, \"Class %s has no unserializer\", ce->name);",
          "385:   object_init_ex(*rval, ce);",
          "",
          "[Added Lines]",
          "374:   zend_error(E_WARNING, \"Class %s has no unserializer\", ce->name->val);",
          "375:   object_init_ex(rval, ce);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "401:  (*p) += 2;",
          "404:  return elements;",
          "405: }",
          "",
          "[Removed Lines]",
          "403:  object_init_ex(*rval, ce);",
          "",
          "[Added Lines]",
          "393:  object_init_ex(rval, ce);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "409: #endif",
          "410: static inline int object_common2(UNSERIALIZE_PARAMETER, long elements)",
          "411: {",
          "413:  zval fname;",
          "416:   return 0;",
          "417:  }",
          "423:   BG(serialize_lock)++;",
          "425:   BG(serialize_lock)--;",
          "426:  }",
          "432:  if (EG(exception)) {",
          "433:   return 0;",
          "",
          "[Removed Lines]",
          "412:  zval *retval_ptr = NULL;",
          "415:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_OBJPROP_PP(rval), elements, 1)) {",
          "419:  if (Z_OBJCE_PP(rval) != PHP_IC_ENTRY &&",
          "420:   zend_hash_exists(&Z_OBJCE_PP(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\"))) {",
          "421:   INIT_PZVAL(&fname);",
          "422:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1, 0);",
          "424:   call_user_function_ex(CG(function_table), rval, &fname, &retval_ptr, 0, 0, 1, NULL TSRMLS_CC);",
          "428:  if (retval_ptr) {",
          "429:   zval_ptr_dtor(&retval_ptr);",
          "430:  }",
          "",
          "[Added Lines]",
          "402:  zval retval;",
          "405:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_OBJPROP_P(rval), elements, 1)) {",
          "409:  if (Z_OBJCE_P(rval) != PHP_IC_ENTRY &&",
          "410:   zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1)) {",
          "412:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1);",
          "414:   call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL TSRMLS_CC);",
          "418:  zval_ptr_dtor(&retval);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "443: PHPAPI int php_var_unserialize(UNSERIALIZE_PARAMETER)",
          "444: {",
          "445:  const unsigned char *cursor, *limit, *marker, *start;",
          "448:  limit = max;",
          "449:  cursor = *p;",
          "",
          "[Removed Lines]",
          "446:  zval **rval_ref;",
          "",
          "[Added Lines]",
          "434:  zval *rval_ref;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "473:   return 0;",
          "474:  }",
          "477:   zval_ptr_dtor(rval);",
          "478:  }",
          "483:  return 1;",
          "484: }",
          "",
          "[Removed Lines]",
          "476:  if (*rval != NULL) {",
          "480:  Z_ADDREF_PP(rval);",
          "481:  Z_SET_ISREF_PP(rval);",
          "",
          "[Added Lines]",
          "464:  if (rval != NULL) {",
          "467:  ZVAL_COPY(rval, rval_ref);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "494:   return 0;",
          "495:  }",
          "500:   var_push_dtor_no_addref(var_hash, rval);",
          "501:  }",
          "506:  return 1;",
          "507: }",
          "509: \"N;\" {",
          "513:  return 1;",
          "514: }",
          "516: \"b:\" [01] \";\" {",
          "520:  return 1;",
          "521: }",
          "",
          "[Removed Lines]",
          "497:  if (*rval == *rval_ref) return 0;",
          "499:  if (*rval != NULL) {",
          "503:  Z_ADDREF_PP(rval);",
          "504:  Z_UNSET_ISREF_PP(rval);",
          "511:  INIT_PZVAL(*rval);",
          "512:  ZVAL_NULL(*rval);",
          "518:  INIT_PZVAL(*rval);",
          "519:  ZVAL_BOOL(*rval, parse_iv(start + 2));",
          "",
          "[Added Lines]",
          "485:  if (rval == rval_ref) return 0;",
          "487:  if (rval != NULL) {",
          "490:  ZVAL_COPY(rval, rval_ref);",
          "498:  ZVAL_NULL(rval);",
          "504:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "532:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "533:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "536:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "537:     goto use_double;",
          "",
          "[Removed Lines]",
          "534:    int cmp = strncmp(YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "",
          "[Added Lines]",
          "519:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "542:  }",
          "543: #endif",
          "547:  return 1;",
          "548: }",
          "550: \"d:\" (\"NAN\" | \"-\"? \"INF\") \";\" {",
          "560:  }",
          "562:  return 1;",
          "",
          "[Removed Lines]",
          "545:  INIT_PZVAL(*rval);",
          "546:  ZVAL_LONG(*rval, parse_iv(start + 2));",
          "552:  INIT_PZVAL(*rval);",
          "554:  if (!strncmp(start + 2, \"NAN\", 3)) {",
          "555:   ZVAL_DOUBLE(*rval, php_get_nan());",
          "556:  } else if (!strncmp(start + 2, \"INF\", 3)) {",
          "557:   ZVAL_DOUBLE(*rval, php_get_inf());",
          "558:  } else if (!strncmp(start + 2, \"-INF\", 4)) {",
          "559:   ZVAL_DOUBLE(*rval, -php_get_inf());",
          "",
          "[Added Lines]",
          "530:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "537:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "538:   ZVAL_DOUBLE(rval, php_get_nan());",
          "539:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "540:   ZVAL_DOUBLE(rval, php_get_inf());",
          "541:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "542:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "543:  } else {",
          "544:   ZVAL_NULL(rval);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "567: use_double:",
          "568: #endif",
          "572:  return 1;",
          "573: }",
          "",
          "[Removed Lines]",
          "570:  INIT_PZVAL(*rval);",
          "571:  ZVAL_DOUBLE(*rval, zend_strtod((const char *)start + 2, NULL));",
          "",
          "[Added Lines]",
          "555:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "595:  YYCURSOR += 2;",
          "600:  return 1;",
          "601: }",
          "",
          "[Removed Lines]",
          "598:  INIT_PZVAL(*rval);",
          "599:  ZVAL_STRINGL(*rval, str, len, 1);",
          "",
          "[Added Lines]",
          "582:  ZVAL_STRINGL(rval, str, len);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "624:  YYCURSOR += 2;",
          "629:  return 1;",
          "630: }",
          "",
          "[Removed Lines]",
          "627:  INIT_PZVAL(*rval);",
          "628:  ZVAL_STRINGL(*rval, str, len, 0);",
          "",
          "[Added Lines]",
          "611:  ZVAL_STRINGL(rval, str, len);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "638:   return 0;",
          "639:  }",
          "646:   return 0;",
          "647:  }",
          "",
          "[Removed Lines]",
          "641:  INIT_PZVAL(*rval);",
          "643:  array_init_size(*rval, elements);",
          "645:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_PP(rval), elements, 0)) {",
          "",
          "[Added Lines]",
          "624:  array_init_size(rval, elements);",
          "626:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "652: \"o:\" iv \":\" [\"] {",
          "656:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "657:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "",
          "[Removed Lines]",
          "654:  INIT_PZVAL(*rval);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "660: object \":\" uiv \":\" [\"] {",
          "661:  size_t len, len2, len3, maxlen;",
          "662:  long elements;",
          "664:  zend_class_entry *ce;",
          "666:  int incomplete_class = 0;",
          "668:  int custom_object = 0;",
          "675:  if (*start == 'C') {",
          "676:   custom_object = 1;",
          "677:  }",
          "680:  len2 = len = parse_uiv(start + 2);",
          "681:  maxlen = max - YYCURSOR;",
          "682:  if (maxlen < len || len == 0) {",
          "",
          "[Removed Lines]",
          "663:  char *class_name;",
          "665:  zend_class_entry **pce;",
          "670:  zval *user_func;",
          "671:  zval *retval_ptr;",
          "672:  zval **args[1];",
          "673:  zval *arg_func_name;",
          "679:  INIT_PZVAL(*rval);",
          "",
          "[Added Lines]",
          "644:  char *str;",
          "645:  zend_string *class_name;",
          "651:  zval user_func;",
          "652:  zval retval;",
          "653:  zval args[1];",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "684:   return 0;",
          "685:  }",
          "689:  YYCURSOR += len;",
          "",
          "[Removed Lines]",
          "687:  class_name = (char*)YYCURSOR;",
          "",
          "[Added Lines]",
          "667:  str = (char*)YYCURSOR;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "697:   return 0;",
          "698:  }",
          "701:  if (len3 != len)",
          "702:  {",
          "704:   return 0;",
          "705:  }",
          "709:  do {",
          "711:   BG(serialize_lock)++;",
          "713:    BG(serialize_lock)--;",
          "714:    if (EG(exception)) {",
          "716:     return 0;",
          "717:    }",
          "719:    break;",
          "720:   }",
          "721:   BG(serialize_lock)--;",
          "723:   if (EG(exception)) {",
          "725:    return 0;",
          "726:   }",
          "",
          "[Removed Lines]",
          "700:  len3 = strspn(class_name, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "707:  class_name = estrndup(class_name, len);",
          "712:   if (zend_lookup_class(class_name, len2, &pce TSRMLS_CC) == SUCCESS) {",
          "715:     efree(class_name);",
          "718:    ce = *pce;",
          "724:    efree(class_name);",
          "",
          "[Added Lines]",
          "680:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "687:  class_name = STR_INIT(str, len, 0);",
          "692:   ce = zend_lookup_class(class_name TSRMLS_CC);",
          "693:   if (ce) {",
          "696:     STR_RELEASE(class_name);",
          "704:    STR_RELEASE(class_name);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "733:   }",
          "741:   BG(serialize_lock)++;",
          "743:    BG(serialize_lock)--;",
          "744:    if (EG(exception)) {",
          "746:     zval_ptr_dtor(&user_func);",
          "748:     return 0;",
          "749:    }",
          "751:    incomplete_class = 1;",
          "752:    ce = PHP_IC_ENTRY;",
          "753:    zval_ptr_dtor(&user_func);",
          "755:    break;",
          "756:   }",
          "757:   BG(serialize_lock)--;",
          "761:   if (EG(exception)) {",
          "763:    zval_ptr_dtor(&user_func);",
          "765:    return 0;",
          "766:   }",
          "773:    incomplete_class = 1;",
          "774:    ce = PHP_IC_ENTRY;",
          "775:   }",
          "777:   zval_ptr_dtor(&user_func);",
          "779:   break;",
          "780:  } while (1);",
          "",
          "[Removed Lines]",
          "736:   MAKE_STD_ZVAL(user_func);",
          "737:   ZVAL_STRING(user_func, PG(unserialize_callback_func), 1);",
          "738:   args[0] = &arg_func_name;",
          "739:   MAKE_STD_ZVAL(arg_func_name);",
          "740:   ZVAL_STRING(arg_func_name, class_name, 1);",
          "742:   if (call_user_function_ex(CG(function_table), NULL, user_func, &retval_ptr, 1, args, 0, NULL TSRMLS_CC) != SUCCESS) {",
          "745:     efree(class_name);",
          "747:     zval_ptr_dtor(&arg_func_name);",
          "750:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"defined (%s) but not found\", user_func->value.str.val);",
          "754:    zval_ptr_dtor(&arg_func_name);",
          "758:   if (retval_ptr) {",
          "759:    zval_ptr_dtor(&retval_ptr);",
          "760:   }",
          "762:    efree(class_name);",
          "764:    zval_ptr_dtor(&arg_func_name);",
          "769:   if (zend_lookup_class(class_name, len2, &pce TSRMLS_CC) == SUCCESS) {",
          "770:    ce = *pce;",
          "771:   } else {",
          "772:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Function %s() hasn't defined the class it was called for\", user_func->value.str.val);",
          "778:   zval_ptr_dtor(&arg_func_name);",
          "",
          "[Added Lines]",
          "716:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "717:   ZVAL_STR(&args[0], class_name);",
          "719:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL TSRMLS_CC) != SUCCESS) {",
          "722:     STR_FREE(class_name);",
          "724:     zval_ptr_dtor(&args[0]);",
          "727:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "731:    zval_ptr_dtor(&args[0]);",
          "735:   zval_ptr_dtor(&retval);",
          "737:    STR_FREE(class_name);",
          "739:    zval_ptr_dtor(&args[0]);",
          "744:   if ((ce = zend_lookup_class(class_name TSRMLS_CC)) == NULL) {",
          "745:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "751:   zval_ptr_dtor(&args[0]);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "787:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "789:   if (ret && incomplete_class) {",
          "791:   }",
          "793:   return ret;",
          "794:  }",
          "796:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "798:  if (incomplete_class) {",
          "800:  }",
          "803:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "804: }",
          "",
          "[Removed Lines]",
          "790:    php_store_class_name(*rval, class_name, len2);",
          "792:   efree(class_name);",
          "799:   php_store_class_name(*rval, class_name, len2);",
          "801:  efree(class_name);",
          "",
          "[Added Lines]",
          "763:    php_store_class_name(rval, class_name->val, len2);",
          "765:   STR_FREE(class_name);",
          "772:   php_store_class_name(rval, class_name->val, len2);",
          "774:  STR_FREE(class_name);",
          "",
          "---------------"
        ],
        "main/streams/php_stream_context.h||main/streams/php_stream_context.h": [
          "File: main/streams/php_stream_context.h -> main/streams/php_stream_context.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   FG(default_context) ? FG(default_context) : \\",
          "39:   (FG(default_context) = php_stream_context_alloc(TSRMLS_C)) )",
          "43: typedef struct _php_stream_notifier php_stream_notifier;",
          "",
          "[Removed Lines]",
          "41: #define php_stream_context_to_zval(context, zval) { ZVAL_RESOURCE(zval, (context)->res); zend_list_addref((context)->res); }",
          "",
          "[Added Lines]",
          "41: #define php_stream_context_to_zval(context, zval) { ZVAL_RES(zval, (context)->res); (context)->res->gc.refcount++; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "878b8f046593085365466f20c756a2d429164707",
      "candidate_info": {
        "commit_hash": "878b8f046593085365466f20c756a2d429164707",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/878b8f046593085365466f20c756a2d429164707",
        "files": [
          "NEWS",
          "ext/standard/tests/serialize/bug70213.phpt",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "Merge branch 'PHP-7.0' into PHP-7.1",
        "before_after_code_files": [
          "ext/standard/tests/serialize/bug70213.phpt||ext/standard/tests/serialize/bug70213.phpt",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/tests/serialize/bug70213.phpt||ext/standard/tests/serialize/bug70213.phpt": [
          "File: ext/standard/tests/serialize/bug70213.phpt -> ext/standard/tests/serialize/bug70213.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70213: Unserialize context shared on double class lookup",
          "3: --FILE--",
          "4: <?php",
          "6: ini_set('unserialize_callback_func', 'evil');",
          "8: function evil() {",
          "9:  function __autoload($arg) {",
          "10:         var_dump(unserialize('R:1;'));",
          "11:     }",
          "12: }",
          "14: var_dump(unserialize('a:2:{i:0;i:42;i:1;O:4:\"evil\":0:{}}'));",
          "16: ?>",
          "17: --EXPECTF--",
          "18: Notice: unserialize(): Error at offset 4 of 4 bytes in %s on line %d",
          "19: bool(false)",
          "21: Warning: unserialize(): Function evil() hasn't defined the class it was called for in %s on line %d",
          "22: array(2) {",
          "23:   [0]=>",
          "24:   int(42)",
          "25:   [1]=>",
          "26:   object(__PHP_Incomplete_Class)#1 (1) {",
          "27:     [\"__PHP_Incomplete_Class_Name\"]=>",
          "28:     string(4) \"evil\"",
          "29:   }",
          "30: }",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "647: yy2:",
          "648:  ++YYCURSOR;",
          "649: yy3:",
          "651:  { return 0; }",
          "652: #line 653 \"ext/standard/var_unserializer.c\"",
          "653: yy4:",
          "",
          "[Removed Lines]",
          "650: #line 959 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "650: #line 961 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:  goto yy3;",
          "697: yy15:",
          "698:  ++YYCURSOR;",
          "700:  {",
          "702:  php_error_docref(NULL, E_NOTICE, \"Unexpected end of serialized data\");",
          "",
          "[Removed Lines]",
          "699: #line 953 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "699: #line 955 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1240:   }",
          "1243:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "1244:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "1245:    incomplete_class = 1;",
          "1246:    ce = PHP_IC_ENTRY;",
          "1247:   }",
          "1249:   zval_ptr_dtor(&user_func);",
          "1250:   zval_ptr_dtor(&args[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1243:   BG(serialize_lock)++;",
          "1249:   BG(serialize_lock)--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1275:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "1276: }",
          "1278: yy84:",
          "1279:  ++YYCURSOR;",
          "1280: #line 743 \"ext/standard/var_unserializer.re\"",
          "",
          "[Removed Lines]",
          "1277: #line 1278 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1279: #line 1280 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1311:  ZVAL_STR(rval, str);",
          "1312:  return 1;",
          "1313: }",
          "1315: yy86:",
          "1316:  ++YYCURSOR;",
          "1317: #line 777 \"ext/standard/var_unserializer.re\"",
          "",
          "[Removed Lines]",
          "1314: #line 1315 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1316: #line 1317 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1339:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "1340: }",
          "1342: yy88:",
          "1343:  yych = *++YYCURSOR;",
          "1344:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1341: #line 1342 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1343: #line 1344 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1370:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "1371:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "1372: }",
          "1374: yy94:",
          "1375:  ++YYCURSOR;",
          "1376: #line 711 \"ext/standard/var_unserializer.re\"",
          "",
          "[Removed Lines]",
          "1373: #line 1374 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1375: #line 1376 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1405:  ZVAL_STRINGL(rval, str, len);",
          "1406:  return 1;",
          "1407: }",
          "1409: yy96:",
          "1410:  yych = *++YYCURSOR;",
          "1411:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1408: #line 1409 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1410: #line 1411 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1430:  return 1;",
          "1431: }",
          "1433: }",
          "1437:  return 0;",
          "",
          "[Removed Lines]",
          "1432: #line 1433 \"ext/standard/var_unserializer.c\"",
          "1434: #line 961 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1434: #line 1435 \"ext/standard/var_unserializer.c\"",
          "1436: #line 963 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "915:   }",
          "918:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "919:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "920:    incomplete_class = 1;",
          "921:    ce = PHP_IC_ENTRY;",
          "922:   }",
          "924:   zval_ptr_dtor(&user_func);",
          "925:   zval_ptr_dtor(&args[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "918:   BG(serialize_lock)++;",
          "924:   BG(serialize_lock)--;",
          "",
          "---------------"
        ]
      }
    }
  ]
}