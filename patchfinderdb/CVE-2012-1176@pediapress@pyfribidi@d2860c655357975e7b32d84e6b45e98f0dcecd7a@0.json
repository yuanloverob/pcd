{
  "cve_id": "CVE-2012-1176",
  "cve_desc": "Buffer overflow in the fribidi_utf8_to_unicode function in PyFriBidi before 0.11.0 allows remote attackers to cause a denial of service (application crash) via a 4-byte utf-8 sequence.",
  "repo": "pediapress/pyfribidi",
  "patch_hash": "d2860c655357975e7b32d84e6b45e98f0dcecd7a",
  "patch_info": {
    "commit_hash": "d2860c655357975e7b32d84e6b45e98f0dcecd7a",
    "repo": "pediapress/pyfribidi",
    "commit_url": "https://github.com/pediapress/pyfribidi/commit/d2860c655357975e7b32d84e6b45e98f0dcecd7a",
    "files": [
      "MANIFEST.in",
      "pyfribidi.c",
      "pyfribidi.h",
      "pyfribidi.py",
      "setup.py"
    ],
    "message": "refactor pyfribidi.c module\n\npyfribidi.c is now compiled as _pyfribidi. This module only handles\nunicode internally and doesn't use the fribidi_utf8_to_unicode\nfunction (which can't handle 4 byte utf-8 sequences). This fixes the\nbuffer overflow in issue #2.\n\nThe code is now also much simpler: pyfribidi.c is down from 280 to 130\nlines of code.\n\nWe now ship a pure python pyfribidi that handles the case when\nnon-unicode strings are passed in.\n\nWe now also adapt the size of the output string if clean=True is\npassed.",
    "before_after_code_files": [
      "MANIFEST.in||MANIFEST.in",
      "pyfribidi.c||pyfribidi.c",
      "pyfribidi.h||pyfribidi.h",
      "pyfribidi.py||pyfribidi.py",
      "setup.py||setup.py"
    ]
  },
  "patch_diff": {
    "MANIFEST.in||MANIFEST.in": [
      "File: MANIFEST.in -> MANIFEST.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "160: include fribidi-src/test/test_UTF-8_reordernsm.reference",
      "161: include fribidi_systray.py",
      "162: include pyfribidi.c",
      "164: include pyfribidi2.py",
      "165: include setup.cfg",
      "166: include setup.py",
      "",
      "[Removed Lines]",
      "163: include pyfribidi.h",
      "",
      "[Added Lines]",
      "163: include pyfribidi.py",
      "",
      "---------------"
    ],
    "pyfribidi.c||pyfribidi.c": [
      "File: pyfribidi.c -> pyfribidi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: #include <fribidi.h>",
      "35: static PyObject *",
      "37: {",
      "69: }",
      "88: static PyObject *",
      "90: {",
      "113: }",
      "260: static PyMethodDef PyfribidiMethods[] = {",
      "264:  {NULL, NULL, 0, NULL}",
      "265: };",
      "267: PyMODINIT_FUNC",
      "269: {",
      "277:  PyModule_AddIntConstant (module, \"RTL\", (long) FRIBIDI_TYPE_RTL);",
      "278:  PyModule_AddIntConstant (module, \"LTR\", (long) FRIBIDI_TYPE_LTR);",
      "279:  PyModule_AddIntConstant (module, \"ON\", (long) FRIBIDI_TYPE_ON);",
      "283: }",
      "",
      "[Removed Lines]",
      "22:     Install:",
      "23:  python setup.py install",
      "29: #undef _POSIX_C_SOURCE",
      "31: #include \"pyfribidi.h\"",
      "33: #define MAX_STR_LEN 65000",
      "36: _pyfribidi_log2vis (PyObject * self, PyObject * args, PyObject * kw)",
      "44:  static char *kwargs[] =",
      "45:          { \"logical\", \"base_direction\", \"encoding\", \"clean\", \"reordernsm\", NULL };",
      "47:         if (!PyArg_ParseTupleAndKeywords (args, kw, \"O|isii\", kwargs,",
      "48:        &logical, &base, &encoding, &clean, &reordernsm))",
      "49:   return NULL;",
      "53:  if (!(base == FRIBIDI_TYPE_RTL ||",
      "54:        base == FRIBIDI_TYPE_LTR || base == FRIBIDI_TYPE_ON))",
      "55:   return PyErr_Format (PyExc_ValueError,",
      "56:          \"invalid value %d: use either RTL, LTR or ON\",",
      "57:          base);",
      "61:  if (PyUnicode_Check (logical))",
      "62:          return log2vis_unicode (logical, base, clean, reordernsm);",
      "63:  else if (PyString_Check (logical))",
      "64:          return log2vis_encoded_string (logical, encoding, base, clean, reordernsm);",
      "65:  else",
      "66:   return PyErr_Format (PyExc_TypeError,",
      "67:          \"expected unicode or str, not %s\",",
      "68:          logical->ob_type->tp_name);",
      "72:   log2vis_unicode - reorder unicode string visually",
      "74:   Return value: new reference",
      "76:   Return Python unicode object ordered visually or NULL if an exception",
      "77:   was raised.",
      "79:   Since Python and fribidi don't now know each other unicode format,",
      "80:   encode input string as utf-8 and invoke log2vis_utf8.",
      "82:   Arguments:",
      "84:   - unicode: Python unicode object",
      "85:   - base_direction: input string base direction, e.g right to left",
      "89: log2vis_unicode (PyObject * unicode, FriBidiParType base_direction, int clean, int reordernsm)",
      "95:  int length = PyUnicode_GET_SIZE (unicode);",
      "97:  logical = PyUnicode_AsUTF8String (unicode);",
      "98:  if (logical == NULL)",
      "99:   goto cleanup;",
      "101:  visual = log2vis_utf8 (logical, length, base_direction, clean, reordernsm);",
      "102:  if (visual == NULL)",
      "103:   goto cleanup;",
      "105:  result = PyUnicode_DecodeUTF8 (PyString_AS_STRING (visual),",
      "106:            PyString_GET_SIZE (visual), \"strict\");",
      "108:       cleanup:",
      "109:  Py_XDECREF (logical);",
      "110:  Py_XDECREF (visual);",
      "112:  return result;",
      "116:   log2vis_encoded_string - reorder encoded string visually",
      "118:   Return value: new reference",
      "120:   Return Python string object ordered visually or NULL if an exception",
      "121:   was raised. The returned string use the same encoding.",
      "123:   Invoke either log2vis_utf8 or log2vis_unicode.",
      "125:   - string: Python string object using encoding",
      "126:   - encoding: string encoding, any encoding name known to Python",
      "127:   - base_direction: input string base direction, e.g right to left",
      "130: static PyObject *",
      "131: log2vis_encoded_string (PyObject * string, const char *encoding,",
      "132:    FriBidiParType base_direction, int clean, int reordernsm)",
      "133: {",
      "138:  logical = PyUnicode_Decode (PyString_AS_STRING (string),",
      "139:         PyString_GET_SIZE (string),",
      "140:         encoding, \"strict\");",
      "141:  if (logical == NULL)",
      "142:   return NULL;",
      "144:  if (strcmp (encoding, \"utf-8\") == 0)",
      "146:   result = log2vis_utf8 (string,",
      "147:            PyUnicode_GET_SIZE (logical),",
      "148:            base_direction, clean, reordernsm);",
      "149:  else",
      "150:  {",
      "153:   PyObject *visual = log2vis_unicode (logical, base_direction, clean, reordernsm);",
      "155:   if (visual)",
      "156:   {",
      "157:    result = PyUnicode_Encode (PyUnicode_AS_UNICODE",
      "158:          (visual),",
      "159:          PyUnicode_GET_SIZE (visual),",
      "160:          encoding, \"strict\");",
      "161:    Py_DECREF (visual);",
      "162:   }",
      "163:  }",
      "165:  Py_DECREF (logical);",
      "167:  return result;",
      "168: }",
      "171:   log2vis_utf8 - reorder string visually",
      "173:   Return value: new reference",
      "175:   Return Python string object ordered visually or NULL if an exception",
      "176:   was raised.",
      "178:   Arguments:",
      "180:   - string: Python string object using utf-8 encoding",
      "181:   - unicode_length: number of characters in string. This is not the",
      "182:     number of bytes in the string, which may be much bigger than the",
      "183:     number of characters, because utf-8 uses 1-4 bytes per character.",
      "184:   - base_direction: input string base direction, e.g right to left",
      "187: static PyObject *",
      "188: log2vis_utf8 (PyObject * string, int unicode_length,",
      "189:        FriBidiParType base_direction, int clean, int reordernsm)",
      "190: {",
      "199:  logical = PyMem_New (FriBidiChar, unicode_length + 1);",
      "200:  if (logical == NULL)",
      "201:  {",
      "202:   PyErr_SetString (PyExc_MemoryError,",
      "203:      \"failed to allocate unicode buffer\");",
      "204:   goto cleanup;",
      "205:  }",
      "207:  visual = PyMem_New (FriBidiChar, unicode_length + 1);",
      "208:  if (visual == NULL)",
      "209:  {",
      "210:   PyErr_SetString (PyExc_MemoryError,",
      "211:      \"failed to allocate unicode buffer\");",
      "212:   goto cleanup;",
      "213:  }",
      "216:  fribidi_set_reorder_nsm(reordernsm);",
      "217:  fribidi_utf8_to_unicode (PyString_AS_STRING (string),",
      "218:      PyString_GET_SIZE (string), logical);",
      "220:  if (!fribidi_log2vis (logical, unicode_length, &base_direction, visual,",
      "221:          NULL, NULL, NULL))",
      "222:  {",
      "223:   PyErr_SetString (PyExc_RuntimeError,",
      "224:      \"fribidi failed to order string\");",
      "225:   goto cleanup;",
      "226:  }",
      "229:  if (clean)",
      "230:   fribidi_remove_bidi_marks (visual, unicode_length, NULL, NULL, NULL);",
      "234:  visual_utf8 = PyMem_New(char, (unicode_length * 4)+1);",
      "235:  if (visual_utf8 == NULL)",
      "236:  {",
      "237:   PyErr_SetString (PyExc_MemoryError,",
      "238:     \"failed to allocate UTF-8 buffer\");",
      "239:   goto cleanup;",
      "240:  }",
      "244:  new_len = fribidi_unicode_to_utf8 (visual, unicode_length, visual_utf8);",
      "246:  result = PyString_FromStringAndSize (visual_utf8, new_len);",
      "247:  if (result == NULL)",
      "249:   goto cleanup;",
      "251:       cleanup:",
      "253:  PyMem_Del (logical);",
      "254:  PyMem_Del (visual);",
      "255:  PyMem_Del (visual_utf8);",
      "257:  return result;",
      "258: }",
      "261:  {\"log2vis\", (PyCFunction) _pyfribidi_log2vis,",
      "262:   METH_VARARGS | METH_KEYWORDS,",
      "263:   _pyfribidi_log2vis__doc__},",
      "268: initpyfribidi (void)",
      "270:  PyObject *module;",
      "274:  module = Py_InitModule3 (\"pyfribidi\", PyfribidiMethods,",
      "275:      _pyfribidi__doc__);",
      "281:  PyModule_AddStringConstant (module, \"__author__\",",
      "282:         \"Yaacov Zamir and Nir Soffer\");",
      "",
      "[Added Lines]",
      "21: #include <Python.h>",
      "26: unicode_log2vis (PyUnicodeObject* string,",
      "27:                  FriBidiParType base_direction, int clean, int reordernsm)",
      "29:     int i;",
      "30:     int length = string->length;",
      "34:     PyUnicodeObject *result = NULL;",
      "37:        TODO - Don't copy strings if sizeof(FriBidiChar) == sizeof(Py_UNICODE)",
      "40:     logical = PyMem_New (FriBidiChar, length + 1);",
      "41:     if (logical == NULL) {",
      "42:         PyErr_NoMemory();",
      "43:         goto cleanup;",
      "44:     }",
      "46:     visual = PyMem_New (FriBidiChar, length + 1);",
      "47:     if (visual == NULL) {",
      "48:         PyErr_NoMemory();",
      "49:         goto cleanup;",
      "50:     }",
      "52:     for (i=0; i<length; ++i) {",
      "53:         logical[i] = string->str[i];",
      "54:     }",
      "57:     fribidi_set_reorder_nsm(reordernsm);",
      "59:     if (!fribidi_log2vis (logical, length, &base_direction, visual,",
      "60:                           NULL, NULL, NULL)) {",
      "62:         PyErr_SetString (PyExc_RuntimeError,",
      "63:                          \"fribidi failed to order string\");",
      "64:         goto cleanup;",
      "65:     }",
      "68:     if (clean) {",
      "69:         length = fribidi_remove_bidi_marks (visual, length, NULL, NULL, NULL);",
      "70:     }",
      "72:     result = (PyUnicodeObject*) PyUnicode_FromUnicode(NULL, length);",
      "73:     if (result == NULL) {",
      "74:         goto cleanup;",
      "75:     }",
      "77:     for (i=0; i<length; ++i) {",
      "78:         result->str[i] = visual[i];",
      "79:     }",
      "81:   cleanup:",
      "83:     PyMem_Del (logical);",
      "84:     PyMem_Del (visual);",
      "86:     return (PyObject *)result;",
      "90: _pyfribidi_log2vis (PyObject * self, PyObject * args, PyObject * kw)",
      "97:     static char *kwargs[] =",
      "98:         { \"logical\", \"base_direction\", \"clean\", \"reordernsm\", NULL };",
      "100:     if (!PyArg_ParseTupleAndKeywords (args, kw, \"U|iii\", kwargs,",
      "101:                                       &logical, &base, &clean, &reordernsm)) {",
      "102:         return NULL;",
      "103:     }",
      "107:     if (!(base == FRIBIDI_TYPE_RTL",
      "108:           || base == FRIBIDI_TYPE_LTR",
      "109:           || base == FRIBIDI_TYPE_ON)) {",
      "110:         return PyErr_Format (PyExc_ValueError,",
      "111:                              \"invalid value %d: use either RTL, LTR or ON\",",
      "112:                              base);",
      "113:     }",
      "115:     return unicode_log2vis (logical, base, clean, reordernsm);",
      "120:         {\"log2vis\", (PyCFunction) _pyfribidi_log2vis, METH_VARARGS | METH_KEYWORDS, NULL},",
      "126: init_pyfribidi (void)",
      "128:         PyObject *module = Py_InitModule (\"_pyfribidi\", PyfribidiMethods);",
      "",
      "---------------"
    ],
    "pyfribidi.h||pyfribidi.h": [
      "File: pyfribidi.h -> pyfribidi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "pyfribidi.py||pyfribidi.py": [
      "File: pyfribidi.py -> pyfribidi.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"simple Python binding for fribidi.",
      "3: pyfribidi uses libfribidi to order text visually using the unicode",
      "4: algorithm. pyfribidi can also convert text from visual order to",
      "5: logical order, but the conversion may be wrong in certain cases.",
      "6: \"\"\"",
      "8: from _pyfribidi import LTR, ON, RTL, log2vis as _log2vis",
      "10: def log2vis(logical, base_direction=RTL, encoding=\"utf-8\", clean=False, reordernsm=True):",
      "11:     \"\"\"",
      "12:     Return string reordered visually according to base direction.",
      "13:     Return the same type of input string, either unicode or string using",
      "14:     encoding.",
      "16:     Note that this function does not handle line breaking. You should",
      "17:     call log2vis with each line.",
      "19:     Arguments:",
      "20:     - logical: unicode or encoded string",
      "21:     - base_direction: optional logical base direction. Accepts one of",
      "22:       the constants LTR, RTL or ON, defined in this module. ON calculate",
      "23:       the base direction according to the BiDi algorithm.",
      "24:     - encoding: optional string encoding (ignored for unicode input)",
      "25:     \"\"\"",
      "27:     if not isinstance(logical, unicode):",
      "28:         logical = unicode(logical, encoding)",
      "29:     else:",
      "30:         encoding = None",
      "31:     res = _log2vis(logical, base_direction=base_direction, clean=clean, reordernsm=reordernsm)",
      "32:     if encoding:",
      "33:         return res.encode(encoding)",
      "34:     return res",
      "",
      "---------------"
    ],
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "94:       license=\"GPL\",",
      "95:       cmdclass={'build_ext': my_build_ext},",
      "96:       long_description=read_long_description(),",
      "98:       ext_modules=[Extension(",
      "100:             sources=['pyfribidi.c'] + lib_sources,",
      "101:             define_macros=define_macros,",
      "102:             libraries=libraries,",
      "",
      "[Removed Lines]",
      "97:       py_modules=[\"pyfribidi2\"],",
      "99:             name='pyfribidi',",
      "",
      "[Added Lines]",
      "97:       py_modules=[\"pyfribidi\", \"pyfribidi2\"],",
      "99:             name='_pyfribidi',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f641681d830f4b7961d9fc7284ccad69fa27906d",
      "candidate_info": {
        "commit_hash": "f641681d830f4b7961d9fc7284ccad69fa27906d",
        "repo": "pediapress/pyfribidi",
        "commit_url": "https://github.com/pediapress/pyfribidi/commit/f641681d830f4b7961d9fc7284ccad69fa27906d",
        "files": [
          "MANIFEST.in",
          "README.rst",
          "make_manifest.py",
          "setup.py"
        ],
        "message": "make package ready for upload on PyPI.",
        "before_after_code_files": [
          "MANIFEST.in||MANIFEST.in",
          "make_manifest.py||make_manifest.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MANIFEST.in||MANIFEST.in",
            "setup.py||setup.py"
          ],
          "candidate": [
            "MANIFEST.in||MANIFEST.in",
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "MANIFEST.in||MANIFEST.in": [
          "File: MANIFEST.in -> MANIFEST.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: include AUTHORS",
          "2: include COPYING",
          "3: include ChangeLog",
          "4: include MANIFEST.in",
          "5: include README.rst",
          "6: include fribidi-src/AUTHORS",
          "7: include fribidi-src/COPYING",
          "8: include fribidi-src/ChangeLog",
          "9: include fribidi-src/ChangeLog.old",
          "10: include fribidi-src/INSTALL",
          "11: include fribidi-src/Makefile.am",
          "12: include fribidi-src/Makefile.in",
          "13: include fribidi-src/NEWS",
          "14: include fribidi-src/README",
          "15: include fribidi-src/THANKS",
          "16: include fribidi-src/TODO",
          "17: include fribidi-src/aclocal.m4",
          "18: include fribidi-src/bin/Makefile.am",
          "19: include fribidi-src/bin/Makefile.in",
          "20: include fribidi-src/bin/fribidi-benchmark.c",
          "21: include fribidi-src/bin/fribidi-bidi-types.c",
          "22: include fribidi-src/bin/fribidi-caprtl2utf8.c",
          "23: include fribidi-src/bin/fribidi-main.c",
          "24: include fribidi-src/bin/getopt.c",
          "25: include fribidi-src/bin/getopt.h",
          "26: include fribidi-src/bin/getopt1.c",
          "27: include fribidi-src/bin/getopt_int.h",
          "28: include fribidi-src/bin/gettext.h",
          "29: include fribidi-src/bootstrap",
          "30: include fribidi-src/charset/Headers.mk",
          "31: include fribidi-src/charset/Makefile.am",
          "32: include fribidi-src/charset/Makefile.in",
          "33: include fribidi-src/charset/fribidi-char-sets-cap-rtl.c",
          "34: include fribidi-src/charset/fribidi-char-sets-cap-rtl.h",
          "35: include fribidi-src/charset/fribidi-char-sets-cp1255.c",
          "36: include fribidi-src/charset/fribidi-char-sets-cp1255.h",
          "37: include fribidi-src/charset/fribidi-char-sets-cp1256.c",
          "38: include fribidi-src/charset/fribidi-char-sets-cp1256.h",
          "39: include fribidi-src/charset/fribidi-char-sets-iso8859-6.c",
          "40: include fribidi-src/charset/fribidi-char-sets-iso8859-6.h",
          "41: include fribidi-src/charset/fribidi-char-sets-iso8859-8.c",
          "42: include fribidi-src/charset/fribidi-char-sets-iso8859-8.h",
          "43: include fribidi-src/charset/fribidi-char-sets-list.h",
          "44: include fribidi-src/charset/fribidi-char-sets-utf8.c",
          "45: include fribidi-src/charset/fribidi-char-sets-utf8.h",
          "46: include fribidi-src/charset/fribidi-char-sets.c",
          "47: include fribidi-src/charset/fribidi-char-sets.h",
          "48: include fribidi-src/config.guess",
          "49: include fribidi-src/config.h.in",
          "50: include fribidi-src/config.sub",
          "51: include fribidi-src/configure",
          "52: include fribidi-src/configure.ac",
          "53: include fribidi-src/depcomp",
          "54: include fribidi-src/doc/Makefile.am",
          "55: include fribidi-src/doc/Makefile.in",
          "56: include fribidi-src/doc/c2man.stamp",
          "57: include fribidi-src/doc/fribidi_charset_to_unicode.3",
          "58: include fribidi-src/doc/fribidi_debug_status.3",
          "59: include fribidi-src/doc/fribidi_get_bidi_type.3",
          "60: include fribidi-src/doc/fribidi_get_bidi_type_name.3",
          "61: include fribidi-src/doc/fribidi_get_bidi_types.3",
          "62: include fribidi-src/doc/fribidi_get_joining_type.3",
          "63: include fribidi-src/doc/fribidi_get_joining_type_name.3",
          "64: include fribidi-src/doc/fribidi_get_joining_types.3",
          "65: include fribidi-src/doc/fribidi_get_mirror_char.3",
          "66: include fribidi-src/doc/fribidi_get_par_direction.3",
          "67: include fribidi-src/doc/fribidi_get_par_embedding_levels.3",
          "68: include fribidi-src/doc/fribidi_get_type.3",
          "69: include fribidi-src/doc/fribidi_get_type_internal.3",
          "70: include fribidi-src/doc/fribidi_join_arabic.3",
          "71: include fribidi-src/doc/fribidi_log2vis.3",
          "72: include fribidi-src/doc/fribidi_log2vis_get_embedding_levels.3",
          "73: include fribidi-src/doc/fribidi_mirroring_status.3",
          "74: include fribidi-src/doc/fribidi_parse_charset.3",
          "75: include fribidi-src/doc/fribidi_remove_bidi_marks.3",
          "76: include fribidi-src/doc/fribidi_reorder_line.3",
          "77: include fribidi-src/doc/fribidi_reorder_nsm_status.3",
          "78: include fribidi-src/doc/fribidi_set_debug.3",
          "79: include fribidi-src/doc/fribidi_set_mirroring.3",
          "80: include fribidi-src/doc/fribidi_set_reorder_nsm.3",
          "81: include fribidi-src/doc/fribidi_shape.3",
          "82: include fribidi-src/doc/fribidi_shape_mirroring.3",
          "83: include fribidi-src/doc/fribidi_unicode_to_charset.3",
          "84: include fribidi-src/doc/fribidi_unicode_version.3",
          "85: include fribidi-src/doc/fribidi_version_info.3",
          "86: include fribidi-src/fribidi.pc.in",
          "87: include fribidi-src/gen.tab/Makefile.am",
          "88: include fribidi-src/gen.tab/Makefile.in",
          "89: include fribidi-src/gen.tab/gen-arabic-shaping-tab.c",
          "90: include fribidi-src/gen.tab/gen-bidi-type-tab.c",
          "91: include fribidi-src/gen.tab/gen-joining-type-tab.c",
          "92: include fribidi-src/gen.tab/gen-mirroring-tab.c",
          "93: include fribidi-src/gen.tab/gen-unicode-version.c",
          "94: include fribidi-src/gen.tab/packtab.c",
          "95: include fribidi-src/gen.tab/packtab.h",
          "96: include fribidi-src/gen.tab/unidata/ArabicShaping.txt",
          "97: include fribidi-src/gen.tab/unidata/BidiMirroring.txt",
          "98: include fribidi-src/gen.tab/unidata/ReadMe.txt",
          "99: include fribidi-src/gen.tab/unidata/UnicodeData.txt",
          "100: include fribidi-src/install-sh",
          "101: include fribidi-src/lib/Headers.mk",
          "102: include fribidi-src/lib/Makefile.am",
          "103: include fribidi-src/lib/Makefile.in",
          "104: include fribidi-src/lib/arabic-misc.tab.i",
          "105: include fribidi-src/lib/arabic-shaping.tab.i",
          "106: include fribidi-src/lib/bidi-type.tab.i",
          "107: include fribidi-src/lib/bidi-types.h",
          "108: include fribidi-src/lib/common.h",
          "109: include fribidi-src/lib/debug.h",
          "110: include fribidi-src/lib/fribidi-arabic.c",
          "111: include fribidi-src/lib/fribidi-arabic.h",
          "112: include fribidi-src/lib/fribidi-begindecls.h",
          "113: include fribidi-src/lib/fribidi-bidi-types-list.h",
          "114: include fribidi-src/lib/fribidi-bidi-types.c",
          "115: include fribidi-src/lib/fribidi-bidi-types.h",
          "116: include fribidi-src/lib/fribidi-bidi.c",
          "117: include fribidi-src/lib/fribidi-bidi.h",
          "118: include fribidi-src/lib/fribidi-common.h",
          "119: include fribidi-src/lib/fribidi-config.h.in",
          "120: include fribidi-src/lib/fribidi-deprecated.c",
          "121: include fribidi-src/lib/fribidi-deprecated.h",
          "122: include fribidi-src/lib/fribidi-enddecls.h",
          "123: include fribidi-src/lib/fribidi-flags.h",
          "124: include fribidi-src/lib/fribidi-joining-types-list.h",
          "125: include fribidi-src/lib/fribidi-joining-types.c",
          "126: include fribidi-src/lib/fribidi-joining-types.h",
          "127: include fribidi-src/lib/fribidi-joining.c",
          "128: include fribidi-src/lib/fribidi-joining.h",
          "129: include fribidi-src/lib/fribidi-mem.c",
          "130: include fribidi-src/lib/fribidi-mirroring.c",
          "131: include fribidi-src/lib/fribidi-mirroring.h",
          "132: include fribidi-src/lib/fribidi-run.c",
          "133: include fribidi-src/lib/fribidi-shape.c",
          "134: include fribidi-src/lib/fribidi-shape.h",
          "135: include fribidi-src/lib/fribidi-types.h",
          "136: include fribidi-src/lib/fribidi-unicode-version.h",
          "137: include fribidi-src/lib/fribidi-unicode.h",
          "138: include fribidi-src/lib/fribidi.c",
          "139: include fribidi-src/lib/fribidi.def",
          "140: include fribidi-src/lib/fribidi.h",
          "141: include fribidi-src/lib/joining-type.tab.i",
          "142: include fribidi-src/lib/joining-types.h",
          "143: include fribidi-src/lib/mem.h",
          "144: include fribidi-src/lib/mirroring.tab.i",
          "145: include fribidi-src/lib/run.h",
          "146: include fribidi-src/ltmain.sh",
          "147: include fribidi-src/missing",
          "148: include fribidi-src/test/Makefile.am",
          "149: include fribidi-src/test/Makefile.in",
          "150: include fribidi-src/test/run.tests",
          "151: include fribidi-src/test/test_CapRTL_explicit.input",
          "152: include fribidi-src/test/test_CapRTL_explicit.reference",
          "153: include fribidi-src/test/test_CapRTL_implicit.input",
          "154: include fribidi-src/test/test_CapRTL_implicit.reference",
          "155: include fribidi-src/test/test_ISO8859-8_hebrew.input",
          "156: include fribidi-src/test/test_ISO8859-8_hebrew.reference",
          "157: include fribidi-src/test/test_UTF-8_persian.input",
          "158: include fribidi-src/test/test_UTF-8_persian.reference",
          "159: include fribidi-src/test/test_UTF-8_reordernsm.input",
          "160: include fribidi-src/test/test_UTF-8_reordernsm.reference",
          "161: include fribidi_systray.py",
          "162: include pyfribidi.c",
          "163: include pyfribidi.h",
          "164: include setup.py",
          "165: include syspath.py",
          "166: include test_pyfribidi.py",
          "167: include time_pyfribidi.py",
          "",
          "---------------"
        ],
        "make_manifest.py||make_manifest.py": [
          "File: make_manifest.py -> make_manifest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env python",
          "3: import os",
          "5: def main():",
          "6:     files = [x.strip() for x in os.popen(\"git ls-files\")]",
          "7:     def remove(n):",
          "8:         try:",
          "9:             files.remove(n)",
          "10:         except ValueError:",
          "11:             pass",
          "13:     remove(\"make_manifest.py\")",
          "14:     remove(\".gitignore\")",
          "16:     files.sort()",
          "18:     f = open(\"MANIFEST.in\", \"w\")",
          "19:     for x in files:",
          "20:         f.write(\"include %s\\n\" % x)",
          "21:     f.close()",
          "23: if __name__=='__main__':",
          "24:     main()",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         include_dirs = [\"fribidi-src\", \"fribidi-src/lib\", \"fribidi-src/charset\"]",
          "80:         define_macros = [(\"HAVE_CONFIG_H\", 1)]",
          "",
          "[Removed Lines]",
          "82: setup (name = \"pyfribidi\",",
          "83:         version = \"0.10.0\",",
          "84:         description = \"Python libfribidi interface\",",
          "85:         author = \"Yaacov Zamir, Nir Soffer\",",
          "86:         author_email = \"kzamir@walla.co.il\",",
          "87:         url = \"http://hspell-gui.sourceforge.net/pyfribidi.html\",",
          "88:         license = \"GPL\",",
          "89:        cmdclass={'build_ext': my_build_ext},",
          "91:         ext_modules = [ Extension(",
          "92:                 name = 'pyfribidi',",
          "93:                 sources = ['pyfribidi.c'] + lib_sources,",
          "94:                 define_macros=define_macros,",
          "95:                 libraries=libraries,",
          "96:                 include_dirs=include_dirs,",
          "97:         )]",
          "98: )",
          "",
          "[Added Lines]",
          "83: def read_long_description():",
          "84:     fn = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"README.rst\")",
          "85:     return open(fn).read()",
          "88: setup(name=\"pyfribidi\",",
          "89:       version=\"0.10.0\",",
          "90:       description=\"Python libfribidi interface\",",
          "91:       author=\"Yaacov Zamir, Nir Soffer\",",
          "92:       author_email=\"kzamir@walla.co.il\",",
          "93:       url=\"http://hspell-gui.sourceforge.net/pyfribidi.html\",",
          "94:       license=\"GPL\",",
          "95:       cmdclass={'build_ext': my_build_ext},",
          "96:       long_description=read_long_description(),",
          "97:       ext_modules=[Extension(",
          "98:             name='pyfribidi',",
          "99:             sources=['pyfribidi.c'] + lib_sources,",
          "100:             define_macros=define_macros,",
          "101:             libraries=libraries,",
          "102:             include_dirs=include_dirs)])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "904dead1ca930dc35f1f35dcfc7c8472d2315d7c",
      "candidate_info": {
        "commit_hash": "904dead1ca930dc35f1f35dcfc7c8472d2315d7c",
        "repo": "pediapress/pyfribidi",
        "commit_url": "https://github.com/pediapress/pyfribidi/commit/904dead1ca930dc35f1f35dcfc7c8472d2315d7c",
        "files": [
          "pyfribidi.c"
        ],
        "message": "apply debian's buffer overflow fix",
        "before_after_code_files": [
          "pyfribidi.c||pyfribidi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pyfribidi.c||pyfribidi.c"
          ],
          "candidate": [
            "pyfribidi.c||pyfribidi.c"
          ]
        }
      },
      "candidate_diff": {
        "pyfribidi.c||pyfribidi.c": [
          "File: pyfribidi.c -> pyfribidi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:  if (visual_utf8 == NULL)",
          "235:  {",
          "236:   PyErr_SetString (PyExc_MemoryError,",
          "",
          "[Removed Lines]",
          "233:  visual_utf8 = PyMem_New(char, MAX_STR_LEN);",
          "",
          "[Added Lines]",
          "233:  visual_utf8 = PyMem_New(char, (unicode_length * 4)+1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e82483b55c26b0135022b25ab718c0e9fa048665",
      "candidate_info": {
        "commit_hash": "e82483b55c26b0135022b25ab718c0e9fa048665",
        "repo": "pediapress/pyfribidi",
        "commit_url": "https://github.com/pediapress/pyfribidi/commit/e82483b55c26b0135022b25ab718c0e9fa048665",
        "files": [
          "pyfribidi.c",
          "pyfribidi.h",
          "test_pyfribidi.py"
        ],
        "message": "log2vis: add flag for reordering of non spacing marks",
        "before_after_code_files": [
          "pyfribidi.c||pyfribidi.c",
          "pyfribidi.h||pyfribidi.h",
          "test_pyfribidi.py||test_pyfribidi.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pyfribidi.c||pyfribidi.c",
            "pyfribidi.h||pyfribidi.h"
          ],
          "candidate": [
            "pyfribidi.c||pyfribidi.c",
            "pyfribidi.h||pyfribidi.h"
          ]
        }
      },
      "candidate_diff": {
        "pyfribidi.c||pyfribidi.c": [
          "File: pyfribidi.c -> pyfribidi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:  static char *kwargs[] =",
          "48:   return NULL;",
          "",
          "[Removed Lines]",
          "44:   { \"logical\", \"base_direction\", \"encoding\", \"clean\", NULL };",
          "46:         if (!PyArg_ParseTupleAndKeywords (args, kw, \"O|isi\", kwargs,",
          "47:        &logical, &base, &encoding, &clean))",
          "",
          "[Added Lines]",
          "45:          { \"logical\", \"base_direction\", \"encoding\", \"clean\", \"reordernsm\", NULL };",
          "47:         if (!PyArg_ParseTupleAndKeywords (args, kw, \"O|isii\", kwargs,",
          "48:        &logical, &base, &encoding, &clean, &reordernsm))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:  if (PyUnicode_Check (logical))",
          "62:  else if (PyString_Check (logical))",
          "64:  else",
          "65:   return PyErr_Format (PyExc_TypeError,",
          "66:          \"expected unicode or str, not %s\",",
          "",
          "[Removed Lines]",
          "61:   return log2vis_unicode (logical, base, clean);",
          "63:   return log2vis_encoded_string (logical, encoding, base, clean);",
          "",
          "[Added Lines]",
          "62:          return log2vis_unicode (logical, base, clean, reordernsm);",
          "64:          return log2vis_encoded_string (logical, encoding, base, clean, reordernsm);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87: static PyObject *",
          "89: {",
          "",
          "[Removed Lines]",
          "88: log2vis_unicode (PyObject * unicode, FriBidiParType base_direction, int clean)",
          "",
          "[Added Lines]",
          "89: log2vis_unicode (PyObject * unicode, FriBidiParType base_direction, int clean, int reordernsm)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:  if (logical == NULL)",
          "98:   goto cleanup;",
          "101:  if (visual == NULL)",
          "102:   goto cleanup;",
          "",
          "[Removed Lines]",
          "100:  visual = log2vis_utf8 (logical, length, base_direction, clean);",
          "",
          "[Added Lines]",
          "101:  visual = log2vis_utf8 (logical, length, base_direction, clean, reordernsm);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "129: static PyObject *",
          "130: log2vis_encoded_string (PyObject * string, const char *encoding,",
          "132: {",
          "",
          "[Removed Lines]",
          "131:    FriBidiParType base_direction, int clean)",
          "",
          "[Added Lines]",
          "132:    FriBidiParType base_direction, int clean, int reordernsm)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "145:   result = log2vis_utf8 (string,",
          "146:            PyUnicode_GET_SIZE (logical),",
          "148:  else",
          "149:  {",
          "154:   if (visual)",
          "155:   {",
          "",
          "[Removed Lines]",
          "147:            base_direction, clean);",
          "152:   PyObject *visual = log2vis_unicode (logical, base_direction, clean);",
          "",
          "[Added Lines]",
          "148:            base_direction, clean, reordernsm);",
          "153:   PyObject *visual = log2vis_unicode (logical, base_direction, clean, reordernsm);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "186: static PyObject *",
          "187: log2vis_utf8 (PyObject * string, int unicode_length,",
          "189: {",
          "",
          "[Removed Lines]",
          "188:        FriBidiParType base_direction, int clean)",
          "",
          "[Added Lines]",
          "189:        FriBidiParType base_direction, int clean, int reordernsm)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "212:  }",
          "216:  fribidi_utf8_to_unicode (PyString_AS_STRING (string),",
          "217:      PyString_GET_SIZE (string), logical);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:  fribidi_set_reorder_nsm(reordernsm);",
          "",
          "---------------"
        ],
        "pyfribidi.h||pyfribidi.h": [
          "File: pyfribidi.h -> pyfribidi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:          PyObject * kw);",
          "33: static PyObject *log2vis_unicode (PyObject * unicode,",
          "36: static PyObject *log2vis_encoded_string (PyObject * string,",
          "37:       const char *encoding,",
          "40: static PyObject *log2vis_utf8 (PyObject * string, int unicode_length,",
          "43: PyMODINIT_FUNC initpyfribidi (void);",
          "",
          "[Removed Lines]",
          "34:       FriBidiParType base_direction, int clean);",
          "38:       FriBidiParType base_direction, int clean);",
          "41:           FriBidiParType base_direction, int clean);",
          "",
          "[Added Lines]",
          "34:       FriBidiParType base_direction, int clean, int reordernsm);",
          "38:       FriBidiParType base_direction, int clean, int reordernsm);",
          "41:           FriBidiParType base_direction, int clean, int reordernsm);",
          "",
          "---------------"
        ],
        "test_pyfribidi.py||test_pyfribidi.py": [
          "File: test_pyfribidi.py -> test_pyfribidi.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         \"\"\" unicode: reorder RTL line by natural order \"\"\"",
          "83:         self.assertEqual(pyfribidi.log2vis(u\"\u05e9\u05dc\u05d5\u05dd - hello\", ON),",
          "84:                          u\"hello - \u05dd\u05d5\u05dc\u05e9\")",
          "87: class UTF8Tests(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     def testNoReorderNonSpacingMarks(self):",
          "87:         \"\"\"unicode: reorder non spacing marks\"\"\"",
          "88:         self.assertEqual(pyfribidi.log2vis(u\"\u05d7\u05b7\u05d9\u05b0\u05e4\u05b7\u05d0\", RTL, reordernsm=False),",
          "89:                          u\"\u05d0\u05b7\u05e4\u05b0\u05d9\u05b7\u05d7\"",
          "90:                          )",
          "92:     def testReorderNonSpacingMarks(self):",
          "93:         \"\"\"unicode: reorder non spacing marks\"\"\"",
          "94:         self.assertEqual(pyfribidi.log2vis(u\"\u05d7\u05b7\u05d9\u05b0\u05e4\u05b7\u05d0\", RTL),",
          "95:                          u\"\u05d0\u05e4\u05b7\u05d9\u05b0\u05d7\u05b7\"",
          "96:                          )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:                          \"hello - \u05dd\u05d5\u05dc\u05e9\")",
          "130: class OtherEncodingsTests(unittest.TestCase):",
          "131:     \"\"\" Minimal tests for other encodings \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:     def testNoReorderNonSpacingMarks(self):",
          "143:         \"\"\"utf8: reorder non spacing marks\"\"\"",
          "144:         self.assertEqual(pyfribidi.log2vis(\"\u05d7\u05b7\u05d9\u05b0\u05e4\u05b7\u05d0\", RTL, reordernsm=False),",
          "145:                          \"\u05d0\u05b7\u05e4\u05b0\u05d9\u05b7\u05d7\"",
          "146:                          )",
          "148:     def testReorderNonSpacingMarks(self):",
          "149:         \"\"\"unicode: reorder non spacing marks\"\"\"",
          "150:         self.assertEqual(pyfribidi.log2vis(\"\u05d7\u05b7\u05d9\u05b0\u05e4\u05b7\u05d0\", RTL),",
          "151:                          \"\u05d0\u05e4\u05b7\u05d9\u05b0\u05d7\u05b7\"",
          "152:                          )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31f02e50c4900756de73b6b23697ceb4c9150669",
      "candidate_info": {
        "commit_hash": "31f02e50c4900756de73b6b23697ceb4c9150669",
        "repo": "pediapress/pyfribidi",
        "commit_url": "https://github.com/pediapress/pyfribidi/commit/31f02e50c4900756de73b6b23697ceb4c9150669",
        "files": [
          "setup.py"
        ],
        "message": "configure fribidi library and use distutils to compile the c sources",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from distutils.core import setup",
          "4: from distutils.extension import Extension",
          "5: import os",
          "7: def _getpkgconfigvalue(value, package=\"fribidi\"):",
          "23: setup (name = \"pyfribidi\",",
          "24:         version = \"0.10.0\",",
          "",
          "[Removed Lines]",
          "8:  \"\"\" get a value from pkg-config for package (default: fribidi)",
          "9:      param value: long-option to pkg-config",
          "10:  \"\"\"",
          "11:  f = os.popen(\"pkg-config --%s %s\" % (value, package))",
          "12:  x = f.readline().strip()",
          "13:  f.close()",
          "15:  # generators: 2.4+ only :(",
          "16:  #return list(y[2:] for y in x.split(\" \"))",
          "18:  l = []",
          "19:  for y in x.split(\" \"):",
          "20:   l.append(y[2:])",
          "21:  return l",
          "",
          "[Added Lines]",
          "5: from distutils.command import build_ext",
          "9: USE_SYSTEM_LIB = False",
          "11: class my_build_ext(build_ext.build_ext):",
          "12:     def build_extension(self, ext):",
          "13:         configure = os.path.abspath(\"fribidi-src/configure\")",
          "14:         bdir = os.path.join(self.build_temp, \"fribidi\")",
          "15:         if not os.path.isdir(bdir):",
          "16:             os.makedirs(bdir)",
          "17:         cwd = os.getcwd()",
          "18:         os.chdir(bdir)",
          "19:         try:",
          "20:             if not os.path.exists(\"./config.status\"):",
          "21:                 os.system(\"sh %s --with-glib=no\" % configure)",
          "22:         finally:",
          "23:             os.chdir(cwd)",
          "25:         self.include_dirs[:0] = [bdir, \"%s/lib\" % bdir]",
          "26:         self.compiler.set_include_dirs(self.include_dirs)",
          "28:         return build_ext.build_ext.build_extension(self, ext)",
          "32:     \"\"\" get a value from pkg-config for package (default: fribidi)",
          "33:     param value: long-option to pkg-config",
          "34:     \"\"\"",
          "35:     f = os.popen(\"pkg-config --%s %s\" % (value, package))",
          "36:     x = f.readline().strip()",
          "37:     f.close()",
          "39:     l = []",
          "40:     for y in x.split(\" \"):",
          "41:         l.append(y[2:])",
          "42:     return l",
          "44: if USE_SYSTEM_LIB:",
          "45:     lib_sources = []",
          "46:     include_dirs = _getpkgconfigvalue(\"cflags-only-I\")",
          "47:     libraries = _getpkgconfigvalue(\"libs-only-l\"),",
          "48:     define_macros = []",
          "49:     my_build_ext = build_ext.build_ext",
          "50: else:",
          "51:         lib_sources = \"\"\"",
          "52: fribidi-src/lib/fribidi.c",
          "53: fribidi-src/lib/fribidi-arabic.c",
          "54: fribidi-src/lib/fribidi-bidi.c",
          "55: fribidi-src/lib/fribidi-bidi-types.c",
          "56: fribidi-src/lib/fribidi-deprecated.c",
          "57: fribidi-src/lib/fribidi-joining.c",
          "58: fribidi-src/lib/fribidi-joining-types.c",
          "59: fribidi-src/lib/fribidi-mem.c",
          "60: fribidi-src/lib/fribidi-mirroring.c",
          "61: fribidi-src/lib/fribidi-run.c",
          "62: fribidi-src/lib/fribidi-shape.c",
          "63: fribidi-src/charset/fribidi-char-sets-cp1256.c",
          "64: fribidi-src/charset/fribidi-char-sets-iso8859-8.c",
          "65: fribidi-src/charset/fribidi-char-sets-cap-rtl.c",
          "66: fribidi-src/charset/fribidi-char-sets-utf8.c",
          "67: fribidi-src/charset/fribidi-char-sets.c",
          "68: fribidi-src/charset/fribidi-char-sets-cp1255.c",
          "69: fribidi-src/charset/fribidi-char-sets-iso8859-6.c",
          "70: \"\"\".split()",
          "71:         libraries = []",
          "72:         include_dirs = [\"fribidi-src\", \"fribidi-src/lib\", \"fribidi-src/charset\"]",
          "73:         define_macros = [(\"HAVE_CONFIG_H\", 1)]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:         author_email = \"kzamir@walla.co.il\",",
          "28:         url = \"http://hspell-gui.sourceforge.net/pyfribidi.html\",",
          "29:         license = \"GPL\",",
          "31:         ext_modules = [ Extension(",
          "32:                 name = 'pyfribidi',",
          "36:         )]",
          "37: )",
          "",
          "[Removed Lines]",
          "33:                 sources = ['pyfribidi.c'],",
          "34:                 libraries = _getpkgconfigvalue(\"libs-only-l\"),",
          "35:                 include_dirs = _getpkgconfigvalue(\"cflags-only-I\")",
          "",
          "[Added Lines]",
          "82:        cmdclass={'build_ext': my_build_ext},",
          "86:                 sources = ['pyfribidi.c'] + lib_sources,",
          "87:                 define_macros=define_macros,",
          "88:                 libraries=libraries,",
          "89:                 include_dirs=include_dirs,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a5e0472d22898771d8ff874f0f6c3637cd3f7b6",
      "candidate_info": {
        "commit_hash": "0a5e0472d22898771d8ff874f0f6c3637cd3f7b6",
        "repo": "pediapress/pyfribidi",
        "commit_url": "https://github.com/pediapress/pyfribidi/commit/0a5e0472d22898771d8ff874f0f6c3637cd3f7b6",
        "files": [
          "MANIFEST.in",
          "pyfribidi2.py",
          "setup.py"
        ],
        "message": "add pyfribidi2 module",
        "before_after_code_files": [
          "MANIFEST.in||MANIFEST.in",
          "pyfribidi2.py||pyfribidi2.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MANIFEST.in||MANIFEST.in",
            "setup.py||setup.py"
          ],
          "candidate": [
            "MANIFEST.in||MANIFEST.in",
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "MANIFEST.in||MANIFEST.in": [
          "File: MANIFEST.in -> MANIFEST.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "161: include fribidi_systray.py",
          "162: include pyfribidi.c",
          "163: include pyfribidi.h",
          "164: include setup.py",
          "165: include syspath.py",
          "166: include test_pyfribidi.py",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: include pyfribidi2.py",
          "",
          "---------------"
        ],
        "pyfribidi2.py||pyfribidi2.py": [
          "File: pyfribidi2.py -> pyfribidi2.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from pyfribidi import *",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:       license=\"GPL\",",
          "95:       cmdclass={'build_ext': my_build_ext},",
          "96:       long_description=read_long_description(),",
          "97:       ext_modules=[Extension(",
          "98:             name='pyfribidi',",
          "99:             sources=['pyfribidi.c'] + lib_sources,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:       py_modules=[\"pyfribidi2\"],",
          "",
          "---------------"
        ]
      }
    }
  ]
}