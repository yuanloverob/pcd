{
  "cve_id": "CVE-2012-1176",
  "cve_desc": "Buffer overflow in the fribidi_utf8_to_unicode function in PyFriBidi before 0.11.0 allows remote attackers to cause a denial of service (application crash) via a 4-byte utf-8 sequence.",
  "repo": "pediapress/pyfribidi",
  "patch_hash": "d2860c655357975e7b32d84e6b45e98f0dcecd7a",
  "patch_info": {
    "commit_hash": "d2860c655357975e7b32d84e6b45e98f0dcecd7a",
    "repo": "pediapress/pyfribidi",
    "commit_url": "https://github.com/pediapress/pyfribidi/commit/d2860c655357975e7b32d84e6b45e98f0dcecd7a",
    "files": [
      "MANIFEST.in",
      "pyfribidi.c",
      "pyfribidi.h",
      "pyfribidi.py",
      "setup.py"
    ],
    "message": "refactor pyfribidi.c module\n\npyfribidi.c is now compiled as _pyfribidi. This module only handles\nunicode internally and doesn't use the fribidi_utf8_to_unicode\nfunction (which can't handle 4 byte utf-8 sequences). This fixes the\nbuffer overflow in issue #2.\n\nThe code is now also much simpler: pyfribidi.c is down from 280 to 130\nlines of code.\n\nWe now ship a pure python pyfribidi that handles the case when\nnon-unicode strings are passed in.\n\nWe now also adapt the size of the output string if clean=True is\npassed.",
    "before_after_code_files": [
      "MANIFEST.in||MANIFEST.in",
      "pyfribidi.c||pyfribidi.c",
      "pyfribidi.h||pyfribidi.h",
      "pyfribidi.py||pyfribidi.py",
      "setup.py||setup.py"
    ]
  },
  "patch_diff": {
    "MANIFEST.in||MANIFEST.in": [
      "File: MANIFEST.in -> MANIFEST.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "160: include fribidi-src/test/test_UTF-8_reordernsm.reference",
      "161: include fribidi_systray.py",
      "162: include pyfribidi.c",
      "164: include pyfribidi2.py",
      "165: include setup.cfg",
      "166: include setup.py",
      "",
      "[Removed Lines]",
      "163: include pyfribidi.h",
      "",
      "[Added Lines]",
      "163: include pyfribidi.py",
      "",
      "---------------"
    ],
    "pyfribidi.c||pyfribidi.c": [
      "File: pyfribidi.c -> pyfribidi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: #include <fribidi.h>",
      "35: static PyObject *",
      "37: {",
      "69: }",
      "88: static PyObject *",
      "90: {",
      "113: }",
      "260: static PyMethodDef PyfribidiMethods[] = {",
      "264:  {NULL, NULL, 0, NULL}",
      "265: };",
      "267: PyMODINIT_FUNC",
      "269: {",
      "277:  PyModule_AddIntConstant (module, \"RTL\", (long) FRIBIDI_TYPE_RTL);",
      "278:  PyModule_AddIntConstant (module, \"LTR\", (long) FRIBIDI_TYPE_LTR);",
      "279:  PyModule_AddIntConstant (module, \"ON\", (long) FRIBIDI_TYPE_ON);",
      "283: }",
      "",
      "[Removed Lines]",
      "22:     Install:",
      "23:  python setup.py install",
      "29: #undef _POSIX_C_SOURCE",
      "31: #include \"pyfribidi.h\"",
      "33: #define MAX_STR_LEN 65000",
      "36: _pyfribidi_log2vis (PyObject * self, PyObject * args, PyObject * kw)",
      "44:  static char *kwargs[] =",
      "45:          { \"logical\", \"base_direction\", \"encoding\", \"clean\", \"reordernsm\", NULL };",
      "47:         if (!PyArg_ParseTupleAndKeywords (args, kw, \"O|isii\", kwargs,",
      "48:        &logical, &base, &encoding, &clean, &reordernsm))",
      "49:   return NULL;",
      "53:  if (!(base == FRIBIDI_TYPE_RTL ||",
      "54:        base == FRIBIDI_TYPE_LTR || base == FRIBIDI_TYPE_ON))",
      "55:   return PyErr_Format (PyExc_ValueError,",
      "56:          \"invalid value %d: use either RTL, LTR or ON\",",
      "57:          base);",
      "61:  if (PyUnicode_Check (logical))",
      "62:          return log2vis_unicode (logical, base, clean, reordernsm);",
      "63:  else if (PyString_Check (logical))",
      "64:          return log2vis_encoded_string (logical, encoding, base, clean, reordernsm);",
      "65:  else",
      "66:   return PyErr_Format (PyExc_TypeError,",
      "67:          \"expected unicode or str, not %s\",",
      "68:          logical->ob_type->tp_name);",
      "72:   log2vis_unicode - reorder unicode string visually",
      "74:   Return value: new reference",
      "76:   Return Python unicode object ordered visually or NULL if an exception",
      "77:   was raised.",
      "79:   Since Python and fribidi don't now know each other unicode format,",
      "80:   encode input string as utf-8 and invoke log2vis_utf8.",
      "82:   Arguments:",
      "84:   - unicode: Python unicode object",
      "85:   - base_direction: input string base direction, e.g right to left",
      "89: log2vis_unicode (PyObject * unicode, FriBidiParType base_direction, int clean, int reordernsm)",
      "95:  int length = PyUnicode_GET_SIZE (unicode);",
      "97:  logical = PyUnicode_AsUTF8String (unicode);",
      "98:  if (logical == NULL)",
      "99:   goto cleanup;",
      "101:  visual = log2vis_utf8 (logical, length, base_direction, clean, reordernsm);",
      "102:  if (visual == NULL)",
      "103:   goto cleanup;",
      "105:  result = PyUnicode_DecodeUTF8 (PyString_AS_STRING (visual),",
      "106:            PyString_GET_SIZE (visual), \"strict\");",
      "108:       cleanup:",
      "109:  Py_XDECREF (logical);",
      "110:  Py_XDECREF (visual);",
      "112:  return result;",
      "116:   log2vis_encoded_string - reorder encoded string visually",
      "118:   Return value: new reference",
      "120:   Return Python string object ordered visually or NULL if an exception",
      "121:   was raised. The returned string use the same encoding.",
      "123:   Invoke either log2vis_utf8 or log2vis_unicode.",
      "125:   - string: Python string object using encoding",
      "126:   - encoding: string encoding, any encoding name known to Python",
      "127:   - base_direction: input string base direction, e.g right to left",
      "130: static PyObject *",
      "131: log2vis_encoded_string (PyObject * string, const char *encoding,",
      "132:    FriBidiParType base_direction, int clean, int reordernsm)",
      "133: {",
      "138:  logical = PyUnicode_Decode (PyString_AS_STRING (string),",
      "139:         PyString_GET_SIZE (string),",
      "140:         encoding, \"strict\");",
      "141:  if (logical == NULL)",
      "142:   return NULL;",
      "144:  if (strcmp (encoding, \"utf-8\") == 0)",
      "146:   result = log2vis_utf8 (string,",
      "147:            PyUnicode_GET_SIZE (logical),",
      "148:            base_direction, clean, reordernsm);",
      "149:  else",
      "150:  {",
      "153:   PyObject *visual = log2vis_unicode (logical, base_direction, clean, reordernsm);",
      "155:   if (visual)",
      "156:   {",
      "157:    result = PyUnicode_Encode (PyUnicode_AS_UNICODE",
      "158:          (visual),",
      "159:          PyUnicode_GET_SIZE (visual),",
      "160:          encoding, \"strict\");",
      "161:    Py_DECREF (visual);",
      "162:   }",
      "163:  }",
      "165:  Py_DECREF (logical);",
      "167:  return result;",
      "168: }",
      "171:   log2vis_utf8 - reorder string visually",
      "173:   Return value: new reference",
      "175:   Return Python string object ordered visually or NULL if an exception",
      "176:   was raised.",
      "178:   Arguments:",
      "180:   - string: Python string object using utf-8 encoding",
      "181:   - unicode_length: number of characters in string. This is not the",
      "182:     number of bytes in the string, which may be much bigger than the",
      "183:     number of characters, because utf-8 uses 1-4 bytes per character.",
      "184:   - base_direction: input string base direction, e.g right to left",
      "187: static PyObject *",
      "188: log2vis_utf8 (PyObject * string, int unicode_length,",
      "189:        FriBidiParType base_direction, int clean, int reordernsm)",
      "190: {",
      "199:  logical = PyMem_New (FriBidiChar, unicode_length + 1);",
      "200:  if (logical == NULL)",
      "201:  {",
      "202:   PyErr_SetString (PyExc_MemoryError,",
      "203:      \"failed to allocate unicode buffer\");",
      "204:   goto cleanup;",
      "205:  }",
      "207:  visual = PyMem_New (FriBidiChar, unicode_length + 1);",
      "208:  if (visual == NULL)",
      "209:  {",
      "210:   PyErr_SetString (PyExc_MemoryError,",
      "211:      \"failed to allocate unicode buffer\");",
      "212:   goto cleanup;",
      "213:  }",
      "216:  fribidi_set_reorder_nsm(reordernsm);",
      "217:  fribidi_utf8_to_unicode (PyString_AS_STRING (string),",
      "218:      PyString_GET_SIZE (string), logical);",
      "220:  if (!fribidi_log2vis (logical, unicode_length, &base_direction, visual,",
      "221:          NULL, NULL, NULL))",
      "222:  {",
      "223:   PyErr_SetString (PyExc_RuntimeError,",
      "224:      \"fribidi failed to order string\");",
      "225:   goto cleanup;",
      "226:  }",
      "229:  if (clean)",
      "230:   fribidi_remove_bidi_marks (visual, unicode_length, NULL, NULL, NULL);",
      "234:  visual_utf8 = PyMem_New(char, (unicode_length * 4)+1);",
      "235:  if (visual_utf8 == NULL)",
      "236:  {",
      "237:   PyErr_SetString (PyExc_MemoryError,",
      "238:     \"failed to allocate UTF-8 buffer\");",
      "239:   goto cleanup;",
      "240:  }",
      "244:  new_len = fribidi_unicode_to_utf8 (visual, unicode_length, visual_utf8);",
      "246:  result = PyString_FromStringAndSize (visual_utf8, new_len);",
      "247:  if (result == NULL)",
      "249:   goto cleanup;",
      "251:       cleanup:",
      "253:  PyMem_Del (logical);",
      "254:  PyMem_Del (visual);",
      "255:  PyMem_Del (visual_utf8);",
      "257:  return result;",
      "258: }",
      "261:  {\"log2vis\", (PyCFunction) _pyfribidi_log2vis,",
      "262:   METH_VARARGS | METH_KEYWORDS,",
      "263:   _pyfribidi_log2vis__doc__},",
      "268: initpyfribidi (void)",
      "270:  PyObject *module;",
      "274:  module = Py_InitModule3 (\"pyfribidi\", PyfribidiMethods,",
      "275:      _pyfribidi__doc__);",
      "281:  PyModule_AddStringConstant (module, \"__author__\",",
      "282:         \"Yaacov Zamir and Nir Soffer\");",
      "",
      "[Added Lines]",
      "21: #include <Python.h>",
      "26: unicode_log2vis (PyUnicodeObject* string,",
      "27:                  FriBidiParType base_direction, int clean, int reordernsm)",
      "29:     int i;",
      "30:     int length = string->length;",
      "34:     PyUnicodeObject *result = NULL;",
      "37:        TODO - Don't copy strings if sizeof(FriBidiChar) == sizeof(Py_UNICODE)",
      "40:     logical = PyMem_New (FriBidiChar, length + 1);",
      "41:     if (logical == NULL) {",
      "42:         PyErr_NoMemory();",
      "43:         goto cleanup;",
      "44:     }",
      "46:     visual = PyMem_New (FriBidiChar, length + 1);",
      "47:     if (visual == NULL) {",
      "48:         PyErr_NoMemory();",
      "49:         goto cleanup;",
      "50:     }",
      "52:     for (i=0; i<length; ++i) {",
      "53:         logical[i] = string->str[i];",
      "54:     }",
      "57:     fribidi_set_reorder_nsm(reordernsm);",
      "59:     if (!fribidi_log2vis (logical, length, &base_direction, visual,",
      "60:                           NULL, NULL, NULL)) {",
      "62:         PyErr_SetString (PyExc_RuntimeError,",
      "63:                          \"fribidi failed to order string\");",
      "64:         goto cleanup;",
      "65:     }",
      "68:     if (clean) {",
      "69:         length = fribidi_remove_bidi_marks (visual, length, NULL, NULL, NULL);",
      "70:     }",
      "72:     result = (PyUnicodeObject*) PyUnicode_FromUnicode(NULL, length);",
      "73:     if (result == NULL) {",
      "74:         goto cleanup;",
      "75:     }",
      "77:     for (i=0; i<length; ++i) {",
      "78:         result->str[i] = visual[i];",
      "79:     }",
      "81:   cleanup:",
      "83:     PyMem_Del (logical);",
      "84:     PyMem_Del (visual);",
      "86:     return (PyObject *)result;",
      "90: _pyfribidi_log2vis (PyObject * self, PyObject * args, PyObject * kw)",
      "97:     static char *kwargs[] =",
      "98:         { \"logical\", \"base_direction\", \"clean\", \"reordernsm\", NULL };",
      "100:     if (!PyArg_ParseTupleAndKeywords (args, kw, \"U|iii\", kwargs,",
      "101:                                       &logical, &base, &clean, &reordernsm)) {",
      "102:         return NULL;",
      "103:     }",
      "107:     if (!(base == FRIBIDI_TYPE_RTL",
      "108:           || base == FRIBIDI_TYPE_LTR",
      "109:           || base == FRIBIDI_TYPE_ON)) {",
      "110:         return PyErr_Format (PyExc_ValueError,",
      "111:                              \"invalid value %d: use either RTL, LTR or ON\",",
      "112:                              base);",
      "113:     }",
      "115:     return unicode_log2vis (logical, base, clean, reordernsm);",
      "120:         {\"log2vis\", (PyCFunction) _pyfribidi_log2vis, METH_VARARGS | METH_KEYWORDS, NULL},",
      "126: init_pyfribidi (void)",
      "128:         PyObject *module = Py_InitModule (\"_pyfribidi\", PyfribidiMethods);",
      "",
      "---------------"
    ],
    "pyfribidi.h||pyfribidi.h": [
      "File: pyfribidi.h -> pyfribidi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "pyfribidi.py||pyfribidi.py": [
      "File: pyfribidi.py -> pyfribidi.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"simple Python binding for fribidi.",
      "3: pyfribidi uses libfribidi to order text visually using the unicode",
      "4: algorithm. pyfribidi can also convert text from visual order to",
      "5: logical order, but the conversion may be wrong in certain cases.",
      "6: \"\"\"",
      "8: from _pyfribidi import LTR, ON, RTL, log2vis as _log2vis",
      "10: def log2vis(logical, base_direction=RTL, encoding=\"utf-8\", clean=False, reordernsm=True):",
      "11:     \"\"\"",
      "12:     Return string reordered visually according to base direction.",
      "13:     Return the same type of input string, either unicode or string using",
      "14:     encoding.",
      "16:     Note that this function does not handle line breaking. You should",
      "17:     call log2vis with each line.",
      "19:     Arguments:",
      "20:     - logical: unicode or encoded string",
      "21:     - base_direction: optional logical base direction. Accepts one of",
      "22:       the constants LTR, RTL or ON, defined in this module. ON calculate",
      "23:       the base direction according to the BiDi algorithm.",
      "24:     - encoding: optional string encoding (ignored for unicode input)",
      "25:     \"\"\"",
      "27:     if not isinstance(logical, unicode):",
      "28:         logical = unicode(logical, encoding)",
      "29:     else:",
      "30:         encoding = None",
      "31:     res = _log2vis(logical, base_direction=base_direction, clean=clean, reordernsm=reordernsm)",
      "32:     if encoding:",
      "33:         return res.encode(encoding)",
      "34:     return res",
      "",
      "---------------"
    ],
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "94:       license=\"GPL\",",
      "95:       cmdclass={'build_ext': my_build_ext},",
      "96:       long_description=read_long_description(),",
      "98:       ext_modules=[Extension(",
      "100:             sources=['pyfribidi.c'] + lib_sources,",
      "101:             define_macros=define_macros,",
      "102:             libraries=libraries,",
      "",
      "[Removed Lines]",
      "97:       py_modules=[\"pyfribidi2\"],",
      "99:             name='pyfribidi',",
      "",
      "[Added Lines]",
      "97:       py_modules=[\"pyfribidi\", \"pyfribidi2\"],",
      "99:             name='_pyfribidi',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "919554b82a06aa4709c4cf97fa6901b72877ba65",
      "candidate_info": {
        "commit_hash": "919554b82a06aa4709c4cf97fa6901b72877ba65",
        "repo": "pediapress/pyfribidi",
        "commit_url": "https://github.com/pediapress/pyfribidi/commit/919554b82a06aa4709c4cf97fa6901b72877ba65",
        "files": [
          "pyfribidi.c"
        ],
        "message": "fix option parsing code on 64 bit platforms.\n\ndo not use the 'l' (long) code when parsing, since sizeof(long)==8 on\na 64 bit platform, but sizeof(base) is 4.",
        "before_after_code_files": [
          "pyfribidi.c||pyfribidi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pyfribidi.c||pyfribidi.c"
          ],
          "candidate": [
            "pyfribidi.c||pyfribidi.c"
          ]
        }
      },
      "candidate_diff": {
        "pyfribidi.c||pyfribidi.c": [
          "File: pyfribidi.c -> pyfribidi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:  static char *kwargs[] =",
          "44:   { \"logical\", \"base_direction\", \"encoding\", \"clean\", NULL };",
          "47:        &logical, &base, &encoding, &clean))",
          "48:   return NULL;",
          "",
          "[Removed Lines]",
          "46:  if (!PyArg_ParseTupleAndKeywords (args, kw, \"O|lsI\", kwargs,",
          "",
          "[Added Lines]",
          "46:         if (!PyArg_ParseTupleAndKeywords (args, kw, \"O|isi\", kwargs,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "512b90684ba5a5f7929fa85ff5653bd8e2045004",
      "candidate_info": {
        "commit_hash": "512b90684ba5a5f7929fa85ff5653bd8e2045004",
        "repo": "pediapress/pyfribidi",
        "commit_url": "https://github.com/pediapress/pyfribidi/commit/512b90684ba5a5f7929fa85ff5653bd8e2045004",
        "files": [],
        "message": "import pyfribidi 0.10.0",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "Makefile.in||Makefile.in",
          "aclocal.m4||aclocal.m4",
          "autogen.sh||autogen.sh",
          "config.guess||config.guess",
          "config.sub||config.sub",
          "configure.in||configure.in",
          "fribidi_systray.py||fribidi_systray.py",
          "pyfribidi.c||pyfribidi.c",
          "pyfribidi.h||pyfribidi.h",
          "setup.py||setup.py",
          "syspath.py||syspath.py",
          "test_pyfribidi.py||test_pyfribidi.py",
          "time_pyfribidi.py||time_pyfribidi.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pyfribidi.c||pyfribidi.c",
            "pyfribidi.h||pyfribidi.h",
            "setup.py||setup.py"
          ],
          "candidate": [
            "pyfribidi.c||pyfribidi.c",
            "pyfribidi.h||pyfribidi.h",
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: EXTRA_DIST = pyfribidi.c pyfribidi.h test_pyfribidi.py time_pyfribidi.py \\",
          "2:  fribidi_systray.py syspath.py \\",
          "3:  autogen.sh setup.py NEWS README AUTHORS ChangeLog",
          "5: all-am: pyfribidi.so",
          "7: clean-am:",
          "8:  rm -f pyfribidi.so",
          "10: pyfribidi.so: pyfribidi.c",
          "11:  gcc -fpic -shared pyfribidi.c $(PY_CFLAGS) -o pyfribidi.so",
          "13: install-data-local: pyfribidi.so",
          "14:  $(mkinstalldirs) $(DESTDIR)$(PY_MODULES_PATH)",
          "15:  $(INSTALL_DATA) pyfribidi.so $(DESTDIR)$(PY_MODULES_PATH)/pyfribidi.so",
          "",
          "---------------"
        ],
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Makefile.in generated by automake 1.11.1 from Makefile.am.",
          "2: # @configure_input@",
          "4: # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,",
          "5: # 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,",
          "6: # Inc.",
          "7: # This Makefile.in is free software; the Free Software Foundation",
          "8: # gives unlimited permission to copy and/or distribute it,",
          "9: # with or without modifications, as long as this notice is preserved.",
          "11: # This program is distributed in the hope that it will be useful,",
          "12: # but WITHOUT ANY WARRANTY, to the extent permitted by law; without",
          "13: # even the implied warranty of MERCHANTABILITY or FITNESS FOR A",
          "14: # PARTICULAR PURPOSE.",
          "16: @SET_MAKE@",
          "17: VPATH = @srcdir@",
          "18: pkgdatadir = $(datadir)/@PACKAGE@",
          "19: pkgincludedir = $(includedir)/@PACKAGE@",
          "20: pkglibdir = $(libdir)/@PACKAGE@",
          "21: pkglibexecdir = $(libexecdir)/@PACKAGE@",
          "22: am__cd = CDPATH=\"$${ZSH_VERSION+.}$(PATH_SEPARATOR)\" && cd",
          "23: install_sh_DATA = $(install_sh) -c -m 644",
          "24: install_sh_PROGRAM = $(install_sh) -c",
          "25: install_sh_SCRIPT = $(install_sh) -c",
          "26: INSTALL_HEADER = $(INSTALL_DATA)",
          "27: transform = $(program_transform_name)",
          "28: NORMAL_INSTALL = :",
          "29: PRE_INSTALL = :",
          "30: POST_INSTALL = :",
          "31: NORMAL_UNINSTALL = :",
          "32: PRE_UNINSTALL = :",
          "33: POST_UNINSTALL = :",
          "34: subdir = .",
          "35: DIST_COMMON = README $(am__configure_deps) $(srcdir)/Makefile.am \\",
          "36:  $(srcdir)/Makefile.in $(top_srcdir)/configure AUTHORS COPYING \\",
          "37:  ChangeLog INSTALL NEWS config.guess config.sub install-sh \\",
          "38:  missing mkinstalldirs",
          "39: ACLOCAL_M4 = $(top_srcdir)/aclocal.m4",
          "40: am__aclocal_m4_deps = $(top_srcdir)/configure.in",
          "41: am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\",
          "42:  $(ACLOCAL_M4)",
          "43: am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\",
          "44:  configure.lineno config.status.lineno",
          "45: mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs",
          "46: CONFIG_CLEAN_FILES =",
          "47: CONFIG_CLEAN_VPATH_FILES =",
          "48: SOURCES =",
          "49: DIST_SOURCES =",
          "50: DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)",
          "51: distdir = $(PACKAGE)-$(VERSION)",
          "52: top_distdir = $(distdir)",
          "53: am__remove_distdir = \\",
          "54:   { test ! -d \"$(distdir)\" \\",
          "55:     || { find \"$(distdir)\" -type d ! -perm -200 -exec chmod u+w {} ';' \\",
          "56:          && rm -fr \"$(distdir)\"; }; }",
          "57: DIST_ARCHIVES = $(distdir).tar.gz",
          "58: GZIP_ENV = --best",
          "59: distuninstallcheck_listfiles = find . -type f -print",
          "60: distcleancheck_listfiles = find . -type f -print",
          "61: ACLOCAL = @ACLOCAL@",
          "62: AMTAR = @AMTAR@",
          "63: AUTOCONF = @AUTOCONF@",
          "64: AUTOHEADER = @AUTOHEADER@",
          "65: AUTOMAKE = @AUTOMAKE@",
          "66: AWK = @AWK@",
          "67: CC = @CC@",
          "68: CCDEPMODE = @CCDEPMODE@",
          "69: CFLAGS = @CFLAGS@",
          "70: CPPFLAGS = @CPPFLAGS@",
          "71: CYGPATH_W = @CYGPATH_W@",
          "72: DEFS = @DEFS@",
          "73: DEPDIR = @DEPDIR@",
          "74: ECHO_C = @ECHO_C@",
          "75: ECHO_N = @ECHO_N@",
          "76: ECHO_T = @ECHO_T@",
          "77: EXEEXT = @EXEEXT@",
          "78: INSTALL = @INSTALL@",
          "79: INSTALL_DATA = @INSTALL_DATA@",
          "80: INSTALL_PROGRAM = @INSTALL_PROGRAM@",
          "81: INSTALL_SCRIPT = @INSTALL_SCRIPT@",
          "82: INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@",
          "83: LDFLAGS = @LDFLAGS@",
          "84: LIBOBJS = @LIBOBJS@",
          "85: LIBS = @LIBS@",
          "86: LTLIBOBJS = @LTLIBOBJS@",
          "87: MAKEINFO = @MAKEINFO@",
          "88: MKDIR_P = @MKDIR_P@",
          "89: OBJEXT = @OBJEXT@",
          "90: PACKAGE = @PACKAGE@",
          "91: PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@",
          "92: PACKAGE_NAME = @PACKAGE_NAME@",
          "93: PACKAGE_STRING = @PACKAGE_STRING@",
          "94: PACKAGE_TARNAME = @PACKAGE_TARNAME@",
          "95: PACKAGE_URL = @PACKAGE_URL@",
          "96: PACKAGE_VERSION = @PACKAGE_VERSION@",
          "97: PATH_SEPARATOR = @PATH_SEPARATOR@",
          "98: PKG_CONFIG = @PKG_CONFIG@",
          "99: PY_CFLAGS = @PY_CFLAGS@",
          "100: PY_MODULES_PATH = @PY_MODULES_PATH@",
          "101: SET_MAKE = @SET_MAKE@",
          "102: SHELL = @SHELL@",
          "103: STRIP = @STRIP@",
          "104: VERSION = @VERSION@",
          "105: abs_builddir = @abs_builddir@",
          "106: abs_srcdir = @abs_srcdir@",
          "107: abs_top_builddir = @abs_top_builddir@",
          "108: abs_top_srcdir = @abs_top_srcdir@",
          "109: ac_ct_CC = @ac_ct_CC@",
          "110: am__include = @am__include@",
          "111: am__leading_dot = @am__leading_dot@",
          "112: am__quote = @am__quote@",
          "113: am__tar = @am__tar@",
          "114: am__untar = @am__untar@",
          "115: bindir = @bindir@",
          "116: build_alias = @build_alias@",
          "117: builddir = @builddir@",
          "118: datadir = @datadir@",
          "119: datarootdir = @datarootdir@",
          "120: docdir = @docdir@",
          "121: dvidir = @dvidir@",
          "122: exec_prefix = @exec_prefix@",
          "123: fribidi_CFLAGS = @fribidi_CFLAGS@",
          "124: fribidi_LIBS = @fribidi_LIBS@",
          "125: have_python = @have_python@",
          "126: host_alias = @host_alias@",
          "127: htmldir = @htmldir@",
          "128: includedir = @includedir@",
          "129: infodir = @infodir@",
          "130: install_sh = @install_sh@",
          "131: libdir = @libdir@",
          "132: libexecdir = @libexecdir@",
          "133: localedir = @localedir@",
          "134: localstatedir = @localstatedir@",
          "135: mandir = @mandir@",
          "136: mkdir_p = @mkdir_p@",
          "137: oldincludedir = @oldincludedir@",
          "138: pdfdir = @pdfdir@",
          "139: prefix = @prefix@",
          "140: program_transform_name = @program_transform_name@",
          "141: psdir = @psdir@",
          "142: sbindir = @sbindir@",
          "143: sharedstatedir = @sharedstatedir@",
          "144: srcdir = @srcdir@",
          "145: sysconfdir = @sysconfdir@",
          "146: target_alias = @target_alias@",
          "147: top_build_prefix = @top_build_prefix@",
          "148: top_builddir = @top_builddir@",
          "149: top_srcdir = @top_srcdir@",
          "150: EXTRA_DIST = pyfribidi.c pyfribidi.h test_pyfribidi.py time_pyfribidi.py \\",
          "151:  fribidi_systray.py syspath.py \\",
          "152:  autogen.sh setup.py NEWS README AUTHORS ChangeLog",
          "154: all: all-am",
          "156: .SUFFIXES:",
          "157: am--refresh:",
          "158:  @:",
          "159: $(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)",
          "160:  @for dep in $?; do \\",
          "161:    case '$(am__configure_deps)' in \\",
          "163:        echo ' cd $(srcdir) && $(AUTOMAKE) --gnu'; \\",
          "164:        $(am__cd) $(srcdir) && $(AUTOMAKE) --gnu \\",
          "165:   && exit 0; \\",
          "166:        exit 1;; \\",
          "167:    esac; \\",
          "168:  done; \\",
          "169:  echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu Makefile'; \\",
          "170:  $(am__cd) $(top_srcdir) && \\",
          "171:    $(AUTOMAKE) --gnu Makefile",
          "172: .PRECIOUS: Makefile",
          "173: Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status",
          "174:  @case '$?' in \\",
          "176:      echo ' $(SHELL) ./config.status'; \\",
          "177:      $(SHELL) ./config.status;; \\",
          "179:      echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \\",
          "180:      cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \\",
          "181:  esac;",
          "183: $(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)",
          "184:  $(SHELL) ./config.status --recheck",
          "186: $(top_srcdir)/configure:  $(am__configure_deps)",
          "187:  $(am__cd) $(srcdir) && $(AUTOCONF)",
          "188: $(ACLOCAL_M4):  $(am__aclocal_m4_deps)",
          "189:  $(am__cd) $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)",
          "190: $(am__aclocal_m4_deps):",
          "191: tags: TAGS",
          "192: TAGS:",
          "194: ctags: CTAGS",
          "195: CTAGS:",
          "198: distdir: $(DISTFILES)",
          "199:  $(am__remove_distdir)",
          "200:  test -d \"$(distdir)\" || mkdir \"$(distdir)\"",
          "201:  @srcdirstrip=`echo \"$(srcdir)\" | sed 's/[].[^$$\\\\*]/\\\\\\\\&/g'`; \\",
          "202:  topsrcdirstrip=`echo \"$(top_srcdir)\" | sed 's/[].[^$$\\\\*]/\\\\\\\\&/g'`; \\",
          "203:  list='$(DISTFILES)'; \\",
          "204:    dist_files=`for file in $$list; do echo $$file; done | \\",
          "205:    sed -e \"s|^$$srcdirstrip/||;t\" \\",
          "206:        -e \"s|^$$topsrcdirstrip/|$(top_builddir)/|;t\"`; \\",
          "207:  case $$dist_files in \\",
          "209:       sed '/\\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \\",
          "210:       sort -u` ;; \\",
          "211:  esac; \\",
          "212:  for file in $$dist_files; do \\",
          "213:    if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \\",
          "214:    if test -d $$d/$$file; then \\",
          "215:      dir=`echo \"/$$file\" | sed -e 's,/[^/]*$$,,'`; \\",
          "216:      if test -d \"$(distdir)/$$file\"; then \\",
          "217:        find \"$(distdir)/$$file\" -type d ! -perm -700 -exec chmod u+rwx {} \\;; \\",
          "218:      fi; \\",
          "219:      if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \\",
          "220:        cp -fpR $(srcdir)/$$file \"$(distdir)$$dir\" || exit 1; \\",
          "221:        find \"$(distdir)/$$file\" -type d ! -perm -700 -exec chmod u+rwx {} \\;; \\",
          "222:      fi; \\",
          "223:      cp -fpR $$d/$$file \"$(distdir)$$dir\" || exit 1; \\",
          "224:    else \\",
          "225:      test -f \"$(distdir)/$$file\" \\",
          "226:      || cp -p $$d/$$file \"$(distdir)/$$file\" \\",
          "227:      || exit 1; \\",
          "228:    fi; \\",
          "229:  done",
          "230:  -test -n \"$(am__skip_mode_fix)\" \\",
          "231:  || find \"$(distdir)\" -type d ! -perm -755 \\",
          "232:   -exec chmod u+rwx,go+rx {} \\; -o \\",
          "233:    ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \\; -o \\",
          "234:    ! -type d ! -perm -400 -exec chmod a+r {} \\; -o \\",
          "235:    ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \\; \\",
          "236:  || chmod -R a+r \"$(distdir)\"",
          "237: dist-gzip: distdir",
          "238:  tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz",
          "239:  $(am__remove_distdir)",
          "241: dist-bzip2: distdir",
          "242:  tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2",
          "243:  $(am__remove_distdir)",
          "245: dist-lzma: distdir",
          "246:  tardir=$(distdir) && $(am__tar) | lzma -9 -c >$(distdir).tar.lzma",
          "247:  $(am__remove_distdir)",
          "249: dist-xz: distdir",
          "250:  tardir=$(distdir) && $(am__tar) | xz -c >$(distdir).tar.xz",
          "251:  $(am__remove_distdir)",
          "253: dist-tarZ: distdir",
          "254:  tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z",
          "255:  $(am__remove_distdir)",
          "257: dist-shar: distdir",
          "258:  shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz",
          "259:  $(am__remove_distdir)",
          "261: dist-zip: distdir",
          "262:  -rm -f $(distdir).zip",
          "263:  zip -rq $(distdir).zip $(distdir)",
          "264:  $(am__remove_distdir)",
          "266: dist dist-all: distdir",
          "267:  tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz",
          "268:  $(am__remove_distdir)",
          "270: # This target untars the dist file and tries a VPATH configuration.  Then",
          "271: # it guarantees that the distribution is self-contained by making another",
          "272: # tarfile.",
          "273: distcheck: dist",
          "274:  case '$(DIST_ARCHIVES)' in \\",
          "276:    GZIP=$(GZIP_ENV) gzip -dc $(distdir).tar.gz | $(am__untar) ;;\\",
          "278:    bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\\",
          "280:    lzma -dc $(distdir).tar.lzma | $(am__untar) ;;\\",
          "282:    xz -dc $(distdir).tar.xz | $(am__untar) ;;\\",
          "284:    uncompress -c $(distdir).tar.Z | $(am__untar) ;;\\",
          "286:    GZIP=$(GZIP_ENV) gzip -dc $(distdir).shar.gz | unshar ;;\\",
          "288:    unzip $(distdir).zip ;;\\",
          "289:  esac",
          "290:  chmod -R a-w $(distdir); chmod a+w $(distdir)",
          "291:  mkdir $(distdir)/_build",
          "292:  mkdir $(distdir)/_inst",
          "293:  chmod a-w $(distdir)",
          "294:  test -d $(distdir)/_build || exit 0; \\",
          "295:  dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\\\/]:[\\\\/],/,'` \\",
          "296:    && dc_destdir=\"$${TMPDIR-/tmp}/am-dc-$$$$/\" \\",
          "297:    && am__cwd=`pwd` \\",
          "298:    && $(am__cd) $(distdir)/_build \\",
          "299:    && ../configure --srcdir=.. --prefix=\"$$dc_install_base\" \\",
          "300:      $(DISTCHECK_CONFIGURE_FLAGS) \\",
          "301:    && $(MAKE) $(AM_MAKEFLAGS) \\",
          "302:    && $(MAKE) $(AM_MAKEFLAGS) dvi \\",
          "303:    && $(MAKE) $(AM_MAKEFLAGS) check \\",
          "304:    && $(MAKE) $(AM_MAKEFLAGS) install \\",
          "305:    && $(MAKE) $(AM_MAKEFLAGS) installcheck \\",
          "306:    && $(MAKE) $(AM_MAKEFLAGS) uninstall \\",
          "307:    && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir=\"$$dc_install_base\" \\",
          "308:          distuninstallcheck \\",
          "309:    && chmod -R a-w \"$$dc_install_base\" \\",
          "310:    && ({ \\",
          "311:         (cd ../.. && umask 077 && mkdir \"$$dc_destdir\") \\",
          "312:         && $(MAKE) $(AM_MAKEFLAGS) DESTDIR=\"$$dc_destdir\" install \\",
          "313:         && $(MAKE) $(AM_MAKEFLAGS) DESTDIR=\"$$dc_destdir\" uninstall \\",
          "314:         && $(MAKE) $(AM_MAKEFLAGS) DESTDIR=\"$$dc_destdir\" \\",
          "315:              distuninstallcheck_dir=\"$$dc_destdir\" distuninstallcheck; \\",
          "316:        } || { rm -rf \"$$dc_destdir\"; exit 1; }) \\",
          "317:    && rm -rf \"$$dc_destdir\" \\",
          "318:    && $(MAKE) $(AM_MAKEFLAGS) dist \\",
          "319:    && rm -rf $(DIST_ARCHIVES) \\",
          "320:    && $(MAKE) $(AM_MAKEFLAGS) distcleancheck \\",
          "321:    && cd \"$$am__cwd\" \\",
          "322:    || exit 1",
          "323:  $(am__remove_distdir)",
          "324:  @(echo \"$(distdir) archives ready for distribution: \"; \\",
          "325:    list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \\",
          "326:    sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'",
          "327: distuninstallcheck:",
          "328:  @$(am__cd) '$(distuninstallcheck_dir)' \\",
          "329:  && test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \\",
          "330:     || { echo \"ERROR: files left after uninstall:\" ; \\",
          "331:          if test -n \"$(DESTDIR)\"; then \\",
          "332:            echo \"  (check DESTDIR support)\"; \\",
          "333:          fi ; \\",
          "334:          $(distuninstallcheck_listfiles) ; \\",
          "335:          exit 1; } >&2",
          "336: distcleancheck: distclean",
          "337:  @if test '$(srcdir)' = . ; then \\",
          "338:    echo \"ERROR: distcleancheck can only run from a VPATH build\" ; \\",
          "339:    exit 1 ; \\",
          "340:  fi",
          "341:  @test `$(distcleancheck_listfiles) | wc -l` -eq 0 \\",
          "342:    || { echo \"ERROR: files left in build directory after distclean:\" ; \\",
          "343:         $(distcleancheck_listfiles) ; \\",
          "344:         exit 1; } >&2",
          "345: check-am: all-am",
          "346: check: check-am",
          "347: all-am: Makefile",
          "348: installdirs:",
          "349: install: install-am",
          "350: install-exec: install-exec-am",
          "351: install-data: install-data-am",
          "352: uninstall: uninstall-am",
          "354: install-am: all-am",
          "355:  @$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am",
          "357: installcheck: installcheck-am",
          "358: install-strip:",
          "359:  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\",
          "360:    install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\",
          "361:    `test -z '$(STRIP)' || \\",
          "362:      echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install",
          "363: mostlyclean-generic:",
          "365: clean-generic:",
          "367: distclean-generic:",
          "368:  -test -z \"$(CONFIG_CLEAN_FILES)\" || rm -f $(CONFIG_CLEAN_FILES)",
          "369:  -test . = \"$(srcdir)\" || test -z \"$(CONFIG_CLEAN_VPATH_FILES)\" || rm -f $(CONFIG_CLEAN_VPATH_FILES)",
          "371: maintainer-clean-generic:",
          "372:  @echo \"This command is intended for maintainers to use\"",
          "373:  @echo \"it deletes files that may require special tools to rebuild.\"",
          "374: clean: clean-am",
          "376: distclean: distclean-am",
          "377:  -rm -f $(am__CONFIG_DISTCLEAN_FILES)",
          "378:  -rm -f Makefile",
          "379: distclean-am: clean-am distclean-generic",
          "381: dvi: dvi-am",
          "383: dvi-am:",
          "385: html: html-am",
          "387: html-am:",
          "389: info: info-am",
          "391: info-am:",
          "393: install-data-am: install-data-local",
          "395: install-dvi: install-dvi-am",
          "397: install-dvi-am:",
          "399: install-exec-am:",
          "401: install-html: install-html-am",
          "403: install-html-am:",
          "405: install-info: install-info-am",
          "407: install-info-am:",
          "409: install-man:",
          "411: install-pdf: install-pdf-am",
          "413: install-pdf-am:",
          "415: install-ps: install-ps-am",
          "417: install-ps-am:",
          "419: installcheck-am:",
          "421: maintainer-clean: maintainer-clean-am",
          "422:  -rm -f $(am__CONFIG_DISTCLEAN_FILES)",
          "423:  -rm -rf $(top_srcdir)/autom4te.cache",
          "424:  -rm -f Makefile",
          "425: maintainer-clean-am: distclean-am maintainer-clean-generic",
          "427: mostlyclean: mostlyclean-am",
          "429: mostlyclean-am: mostlyclean-generic",
          "431: pdf: pdf-am",
          "433: pdf-am:",
          "435: ps: ps-am",
          "437: ps-am:",
          "439: uninstall-am:",
          "441: .MAKE: install-am install-strip",
          "443: .PHONY: all all-am am--refresh check check-am clean clean-generic dist \\",
          "444:  dist-all dist-bzip2 dist-gzip dist-lzma dist-shar dist-tarZ \\",
          "445:  dist-xz dist-zip distcheck distclean distclean-generic \\",
          "446:  distcleancheck distdir distuninstallcheck dvi dvi-am html \\",
          "447:  html-am info info-am install install-am install-data \\",
          "448:  install-data-am install-data-local install-dvi install-dvi-am \\",
          "449:  install-exec install-exec-am install-html install-html-am \\",
          "450:  install-info install-info-am install-man install-pdf \\",
          "451:  install-pdf-am install-ps install-ps-am install-strip \\",
          "452:  installcheck installcheck-am installdirs maintainer-clean \\",
          "453:  maintainer-clean-generic mostlyclean mostlyclean-generic pdf \\",
          "454:  pdf-am ps ps-am uninstall uninstall-am",
          "457: all-am: pyfribidi.so",
          "459: clean-am:",
          "460:  rm -f pyfribidi.so",
          "462: pyfribidi.so: pyfribidi.c",
          "463:  gcc -fpic -shared pyfribidi.c $(PY_CFLAGS) -o pyfribidi.so",
          "465: install-data-local: pyfribidi.so",
          "466:  $(mkinstalldirs) $(DESTDIR)$(PY_MODULES_PATH)",
          "467:  $(INSTALL_DATA) pyfribidi.so $(DESTDIR)$(PY_MODULES_PATH)/pyfribidi.so",
          "469: # Tell versions [3.59,3.63) of GNU make to not export all variables.",
          "470: # Otherwise a system limit (for SysV at least) may be exceeded.",
          "471: .NOEXPORT:",
          "",
          "---------------"
        ],
        "aclocal.m4||aclocal.m4": [
          "File: aclocal.m4 -> aclocal.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # generated automatically by aclocal 1.11.1 -*- Autoconf -*-",
          "3: # Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,",
          "4: # 2005, 2006, 2007, 2008, 2009  Free Software Foundation, Inc.",
          "5: # This file is free software; the Free Software Foundation",
          "6: # gives unlimited permission to copy and/or distribute it,",
          "7: # with or without modifications, as long as this notice is preserved.",
          "9: # This program is distributed in the hope that it will be useful,",
          "10: # but WITHOUT ANY WARRANTY, to the extent permitted by law; without",
          "11: # even the implied warranty of MERCHANTABILITY or FITNESS FOR A",
          "12: # PARTICULAR PURPOSE.",
          "14: m4_ifndef([AC_AUTOCONF_VERSION],",
          "15:   [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl",
          "16: m4_if(m4_defn([AC_AUTOCONF_VERSION]), [2.65],,",
          "17: [m4_warning([this file was generated for autoconf 2.65.",
          "18: You have another version of autoconf.  It may work, but is not guaranteed to.",
          "19: If you have problems, you may need to regenerate the build system entirely.",
          "20: To do so, use the procedure documented by the package, typically `autoreconf'.])])",
          "22: # pkg.m4 - Macros to locate and utilise pkg-config.            -*- Autoconf -*-",
          "23: #",
          "24: # Copyright \u00a9 2004 Scott James Remnant <scott@netsplit.com>.",
          "25: #",
          "26: # This program is free software; you can redistribute it and/or modify",
          "27: # it under the terms of the GNU General Public License as published by",
          "28: # the Free Software Foundation; either version 2 of the License, or",
          "29: # (at your option) any later version.",
          "30: #",
          "31: # This program is distributed in the hope that it will be useful, but",
          "32: # WITHOUT ANY WARRANTY; without even the implied warranty of",
          "33: # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
          "34: # General Public License for more details.",
          "35: #",
          "36: # You should have received a copy of the GNU General Public License",
          "37: # along with this program; if not, write to the Free Software",
          "38: # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.",
          "39: #",
          "40: # As a special exception to the GNU General Public License, if you",
          "41: # distribute this file as part of a program that contains a",
          "42: # configuration script generated by Autoconf, you may include it under",
          "43: # the same distribution terms that you use for the rest of that program.",
          "45: # PKG_PROG_PKG_CONFIG([MIN-VERSION])",
          "46: # ----------------------------------",
          "47: AC_DEFUN([PKG_PROG_PKG_CONFIG],",
          "48: [m4_pattern_forbid([^_?PKG_[A-Z_]+$])",
          "49: m4_pattern_allow([^PKG_CONFIG(_PATH)?$])",
          "50: AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])dnl",
          "51: if test \"x$ac_cv_env_PKG_CONFIG_set\" != \"xset\"; then",
          "52:  AC_PATH_TOOL([PKG_CONFIG], [pkg-config])",
          "53: fi",
          "54: if test -n \"$PKG_CONFIG\"; then",
          "55:  _pkg_min_version=m4_default([$1], [0.9.0])",
          "56:  AC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])",
          "57:  if $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then",
          "58:   AC_MSG_RESULT([yes])",
          "59:  else",
          "60:   AC_MSG_RESULT([no])",
          "61:   PKG_CONFIG=\"\"",
          "62:  fi",
          "64: fi[]dnl",
          "65: ])# PKG_PROG_PKG_CONFIG",
          "67: # PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])",
          "68: #",
          "69: # Check to see whether a particular set of modules exists.  Similar",
          "70: # to PKG_CHECK_MODULES(), but does not set variables or print errors.",
          "71: #",
          "72: #",
          "73: # Similar to PKG_CHECK_MODULES, make sure that the first instance of",
          "74: # this or PKG_CHECK_MODULES is called, or make sure to call",
          "75: # PKG_CHECK_EXISTS manually",
          "76: # --------------------------------------------------------------",
          "77: AC_DEFUN([PKG_CHECK_EXISTS],",
          "78: [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl",
          "79: if test -n \"$PKG_CONFIG\" && \\",
          "80:     AC_RUN_LOG([$PKG_CONFIG --exists --print-errors \"$1\"]); then",
          "81:   m4_ifval([$2], [$2], [:])",
          "82: m4_ifvaln([$3], [else",
          "83:   $3])dnl",
          "84: fi])",
          "87: # _PKG_CONFIG([VARIABLE], [COMMAND], [MODULES])",
          "88: # ---------------------------------------------",
          "89: m4_define([_PKG_CONFIG],",
          "90: [if test -n \"$PKG_CONFIG\"; then",
          "91:     if test -n \"$$1\"; then",
          "92:         pkg_cv_[]$1=\"$$1\"",
          "93:     else",
          "94:         PKG_CHECK_EXISTS([$3],",
          "95:                          [pkg_cv_[]$1=`$PKG_CONFIG --[]$2 \"$3\" 2>/dev/null`],",
          "96:     [pkg_failed=yes])",
          "97:     fi",
          "98: else",
          "99:  pkg_failed=untried",
          "100: fi[]dnl",
          "101: ])# _PKG_CONFIG",
          "103: # _PKG_SHORT_ERRORS_SUPPORTED",
          "104: # -----------------------------",
          "105: AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED],",
          "106: [AC_REQUIRE([PKG_PROG_PKG_CONFIG])",
          "107: if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then",
          "108:         _pkg_short_errors_supported=yes",
          "109: else",
          "110:         _pkg_short_errors_supported=no",
          "111: fi[]dnl",
          "112: ])# _PKG_SHORT_ERRORS_SUPPORTED",
          "115: # PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],",
          "116: # [ACTION-IF-NOT-FOUND])",
          "117: #",
          "118: #",
          "119: # Note that if there is a possibility the first call to",
          "120: # PKG_CHECK_MODULES might not happen, you should be sure to include an",
          "121: # explicit call to PKG_PROG_PKG_CONFIG in your configure.ac",
          "122: #",
          "123: #",
          "124: # --------------------------------------------------------------",
          "125: AC_DEFUN([PKG_CHECK_MODULES],",
          "126: [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl",
          "127: AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl",
          "128: AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl",
          "130: pkg_failed=no",
          "131: AC_MSG_CHECKING([for $1])",
          "133: _PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])",
          "134: _PKG_CONFIG([$1][_LIBS], [libs], [$2])",
          "136: m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS",
          "137: and $1[]_LIBS to avoid the need to call pkg-config.",
          "138: See the pkg-config man page for more details.])",
          "140: if test $pkg_failed = yes; then",
          "141:         _PKG_SHORT_ERRORS_SUPPORTED",
          "142:         if test $_pkg_short_errors_supported = yes; then",
          "143:          $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --errors-to-stdout --print-errors \"$2\"`",
          "144:         else",
          "145:          $1[]_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors \"$2\"`",
          "146:         fi",
          "147:  # Put the nasty error message in config.log where it belongs",
          "148:  echo \"$$1[]_PKG_ERRORS\" >&AS_MESSAGE_LOG_FD",
          "150:  ifelse([$4], , [AC_MSG_ERROR(dnl",
          "151: [Package requirements ($2) were not met:",
          "153: $$1_PKG_ERRORS",
          "155: Consider adjusting the PKG_CONFIG_PATH environment variable if you",
          "156: installed software in a non-standard prefix.",
          "158: _PKG_TEXT",
          "159: ])],",
          "160:   [AC_MSG_RESULT([no])",
          "161:                 $4])",
          "162: elif test $pkg_failed = untried; then",
          "163:  ifelse([$4], , [AC_MSG_FAILURE(dnl",
          "164: [The pkg-config script could not be found or is too old.  Make sure it",
          "165: is in your PATH or set the PKG_CONFIG environment variable to the full",
          "166: path to pkg-config.",
          "168: _PKG_TEXT",
          "170: To get pkg-config, see <http://pkg-config.freedesktop.org/>.])],",
          "171:   [$4])",
          "172: else",
          "173:  $1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS",
          "174:  $1[]_LIBS=$pkg_cv_[]$1[]_LIBS",
          "175:         AC_MSG_RESULT([yes])",
          "176:  ifelse([$3], , :, [$3])",
          "177: fi[]dnl",
          "178: ])# PKG_CHECK_MODULES",
          "180: # Copyright (C) 2002, 2003, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.",
          "181: #",
          "182: # This file is free software; the Free Software Foundation",
          "183: # gives unlimited permission to copy and/or distribute it,",
          "184: # with or without modifications, as long as this notice is preserved.",
          "186: # AM_AUTOMAKE_VERSION(VERSION)",
          "187: # ----------------------------",
          "188: # Automake X.Y traces this macro to ensure aclocal.m4 has been",
          "189: # generated from the m4 files accompanying Automake X.Y.",
          "190: # (This private macro should not be called outside this file.)",
          "191: AC_DEFUN([AM_AUTOMAKE_VERSION],",
          "192: [am__api_version='1.11'",
          "193: dnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to",
          "194: dnl require some minimum version.  Point them to the right macro.",
          "195: m4_if([$1], [1.11.1], [],",
          "196:       [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl",
          "197: ])",
          "199: # _AM_AUTOCONF_VERSION(VERSION)",
          "200: # -----------------------------",
          "201: # aclocal traces this macro to find the Autoconf version.",
          "202: # This is a private macro too.  Using m4_define simplifies",
          "203: # the logic in aclocal, which can simply ignore this definition.",
          "204: m4_define([_AM_AUTOCONF_VERSION], [])",
          "206: # AM_SET_CURRENT_AUTOMAKE_VERSION",
          "207: # -------------------------------",
          "208: # Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.",
          "209: # This function is AC_REQUIREd by AM_INIT_AUTOMAKE.",
          "210: AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],",
          "211: [AM_AUTOMAKE_VERSION([1.11.1])dnl",
          "212: m4_ifndef([AC_AUTOCONF_VERSION],",
          "213:   [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl",
          "214: _AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])",
          "216: # AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-",
          "218: # Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.",
          "219: #",
          "220: # This file is free software; the Free Software Foundation",
          "221: # gives unlimited permission to copy and/or distribute it,",
          "222: # with or without modifications, as long as this notice is preserved.",
          "224: # For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets",
          "225: # $ac_aux_dir to `$srcdir/foo'.  In other projects, it is set to",
          "226: # `$srcdir', `$srcdir/..', or `$srcdir/../..'.",
          "227: #",
          "228: # Of course, Automake must honor this variable whenever it calls a",
          "229: # tool from the auxiliary directory.  The problem is that $srcdir (and",
          "230: # therefore $ac_aux_dir as well) can be either absolute or relative,",
          "231: # depending on how configure is run.  This is pretty annoying, since",
          "232: # it makes $ac_aux_dir quite unusable in subdirectories: in the top",
          "233: # source directory, any form will work fine, but in subdirectories a",
          "234: # relative path needs to be adjusted first.",
          "235: #",
          "236: # $ac_aux_dir/missing",
          "237: #    fails when called from a subdirectory if $ac_aux_dir is relative",
          "238: # $top_srcdir/$ac_aux_dir/missing",
          "239: #    fails if $ac_aux_dir is absolute,",
          "240: #    fails when called from a subdirectory in a VPATH build with",
          "241: #          a relative $ac_aux_dir",
          "242: #",
          "243: # The reason of the latter failure is that $top_srcdir and $ac_aux_dir",
          "244: # are both prefixed by $srcdir.  In an in-source build this is usually",
          "245: # harmless because $srcdir is `.', but things will broke when you",
          "246: # start a VPATH build or use an absolute $srcdir.",
          "247: #",
          "248: # So we could use something similar to $top_srcdir/$ac_aux_dir/missing,",
          "249: # iff we strip the leading $srcdir from $ac_aux_dir.  That would be:",
          "250: #   am_aux_dir='\\$(top_srcdir)/'`expr \"$ac_aux_dir\" : \"$srcdir//*\\(.*\\)\"`",
          "251: # and then we would define $MISSING as",
          "252: #   MISSING=\"\\${SHELL} $am_aux_dir/missing\"",
          "253: # This will work as long as MISSING is not called from configure, because",
          "254: # unfortunately $(top_srcdir) has no meaning in configure.",
          "255: # However there are other variables, like CC, which are often used in",
          "256: # configure, and could therefore not use this \"fixed\" $ac_aux_dir.",
          "257: #",
          "258: # Another solution, used here, is to always expand $ac_aux_dir to an",
          "259: # absolute PATH.  The drawback is that using absolute paths prevent a",
          "260: # configured tree to be moved without reconfiguration.",
          "262: AC_DEFUN([AM_AUX_DIR_EXPAND],",
          "263: [dnl Rely on autoconf to set up CDPATH properly.",
          "264: AC_PREREQ([2.50])dnl",
          "265: # expand $ac_aux_dir to an absolute path",
          "266: am_aux_dir=`cd $ac_aux_dir && pwd`",
          "267: ])",
          "269: # AM_CONDITIONAL                                            -*- Autoconf -*-",
          "271: # Copyright (C) 1997, 2000, 2001, 2003, 2004, 2005, 2006, 2008",
          "272: # Free Software Foundation, Inc.",
          "273: #",
          "274: # This file is free software; the Free Software Foundation",
          "275: # gives unlimited permission to copy and/or distribute it,",
          "276: # with or without modifications, as long as this notice is preserved.",
          "278: # serial 9",
          "280: # AM_CONDITIONAL(NAME, SHELL-CONDITION)",
          "281: # -------------------------------------",
          "282: # Define a conditional.",
          "283: AC_DEFUN([AM_CONDITIONAL],",
          "284: [AC_PREREQ(2.52)dnl",
          "285:  ifelse([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],",
          "286:  [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl",
          "287: AC_SUBST([$1_TRUE])dnl",
          "288: AC_SUBST([$1_FALSE])dnl",
          "289: _AM_SUBST_NOTMAKE([$1_TRUE])dnl",
          "290: _AM_SUBST_NOTMAKE([$1_FALSE])dnl",
          "291: m4_define([_AM_COND_VALUE_$1], [$2])dnl",
          "292: if $2; then",
          "293:   $1_TRUE=",
          "294:   $1_FALSE='#'",
          "295: else",
          "296:   $1_TRUE='#'",
          "297:   $1_FALSE=",
          "298: fi",
          "299: AC_CONFIG_COMMANDS_PRE(",
          "300: [if test -z \"${$1_TRUE}\" && test -z \"${$1_FALSE}\"; then",
          "301:   AC_MSG_ERROR([[conditional \"$1\" was never defined.",
          "302: Usually this means the macro was only invoked conditionally.]])",
          "303: fi])])",
          "305: # Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2009",
          "306: # Free Software Foundation, Inc.",
          "307: #",
          "308: # This file is free software; the Free Software Foundation",
          "309: # gives unlimited permission to copy and/or distribute it,",
          "310: # with or without modifications, as long as this notice is preserved.",
          "312: # serial 10",
          "314: # There are a few dirty hacks below to avoid letting `AC_PROG_CC' be",
          "315: # written in clear, in which case automake, when reading aclocal.m4,",
          "316: # will think it sees a *use*, and therefore will trigger all it's",
          "317: # C support machinery.  Also note that it means that autoscan, seeing",
          "318: # CC etc. in the Makefile, will ask for an AC_PROG_CC use...",
          "321: # _AM_DEPENDENCIES(NAME)",
          "322: # ----------------------",
          "323: # See how the compiler implements dependency checking.",
          "324: # NAME is \"CC\", \"CXX\", \"GCJ\", or \"OBJC\".",
          "325: # We try a few techniques and use that to set a single cache variable.",
          "326: #",
          "327: # We don't AC_REQUIRE the corresponding AC_PROG_CC since the latter was",
          "328: # modified to invoke _AM_DEPENDENCIES(CC); we would have a circular",
          "329: # dependency, and given that the user is not expected to run this macro,",
          "330: # just rely on AC_PROG_CC.",
          "331: AC_DEFUN([_AM_DEPENDENCIES],",
          "332: [AC_REQUIRE([AM_SET_DEPDIR])dnl",
          "333: AC_REQUIRE([AM_OUTPUT_DEPENDENCY_COMMANDS])dnl",
          "334: AC_REQUIRE([AM_MAKE_INCLUDE])dnl",
          "335: AC_REQUIRE([AM_DEP_TRACK])dnl",
          "337: ifelse([$1], CC,   [depcc=\"$CC\"   am_compiler_list=],",
          "338:        [$1], CXX,  [depcc=\"$CXX\"  am_compiler_list=],",
          "339:        [$1], OBJC, [depcc=\"$OBJC\" am_compiler_list='gcc3 gcc'],",
          "340:        [$1], UPC,  [depcc=\"$UPC\"  am_compiler_list=],",
          "341:        [$1], GCJ,  [depcc=\"$GCJ\"  am_compiler_list='gcc3 gcc'],",
          "342:                    [depcc=\"$$1\"   am_compiler_list=])",
          "344: AC_CACHE_CHECK([dependency style of $depcc],",
          "345:                [am_cv_$1_dependencies_compiler_type],",
          "346: [if test -z \"$AMDEP_TRUE\" && test -f \"$am_depcomp\"; then",
          "347:   # We make a subdir and do the tests there.  Otherwise we can end up",
          "348:   # making bogus files that we don't know about and never remove.  For",
          "349:   # instance it was reported that on HP-UX the gcc test will end up",
          "350:   # making a dummy file named `D' -- because `-MD' means `put the output",
          "351:   # in D'.",
          "352:   mkdir conftest.dir",
          "353:   # Copy depcomp to subdir because otherwise we won't find it if we're",
          "354:   # using a relative directory.",
          "355:   cp \"$am_depcomp\" conftest.dir",
          "356:   cd conftest.dir",
          "357:   # We will build objects and dependencies in a subdirectory because",
          "358:   # it helps to detect inapplicable dependency modes.  For instance",
          "359:   # both Tru64's cc and ICC support -MD to output dependencies as a",
          "360:   # side effect of compilation, but ICC will put the dependencies in",
          "361:   # the current directory while Tru64 will put them in the object",
          "362:   # directory.",
          "363:   mkdir sub",
          "365:   am_cv_$1_dependencies_compiler_type=none",
          "366:   if test \"$am_compiler_list\" = \"\"; then",
          "367:      am_compiler_list=`sed -n ['s/^#*\\([a-zA-Z0-9]*\\))$/\\1/p'] < ./depcomp`",
          "368:   fi",
          "369:   am__universal=false",
          "370:   m4_case([$1], [CC],",
          "371:     [case \" $depcc \" in #(",
          "373:      esac],",
          "374:     [CXX],",
          "375:     [case \" $depcc \" in #(",
          "377:      esac])",
          "379:   for depmode in $am_compiler_list; do",
          "380:     # Setup a source with many dependencies, because some compilers",
          "381:     # like to wrap large dependency lists on column 80 (with \\), and",
          "382:     # we should not choose a depcomp mode which is confused by this.",
          "383:     #",
          "384:     # We need to recreate these files for each test, as the compiler may",
          "385:     # overwrite some of them when testing with obscure command lines.",
          "386:     # This happens at least with the AIX C compiler.",
          "387:     : > sub/conftest.c",
          "388:     for i in 1 2 3 4 5 6; do",
          "389:       echo '#include \"conftst'$i'.h\"' >> sub/conftest.c",
          "390:       # Using `: > sub/conftst$i.h' creates only sub/conftst1.h with",
          "391:       # Solaris 8's {/usr,}/bin/sh.",
          "392:       touch sub/conftst$i.h",
          "393:     done",
          "394:     echo \"${am__include} ${am__quote}sub/conftest.Po${am__quote}\" > confmf",
          "396:     # We check with `-c' and `-o' for the sake of the \"dashmstdout\"",
          "397:     # mode.  It turns out that the SunPro C++ compiler does not properly",
          "398:     # handle `-M -o', and we need to detect this.  Also, some Intel",
          "399:     # versions had trouble with output in subdirs",
          "400:     am__obj=sub/conftest.${OBJEXT-o}",
          "401:     am__minus_obj=\"-o $am__obj\"",
          "402:     case $depmode in",
          "403:     gcc)",
          "404:       # This depmode causes a compiler race in universal mode.",
          "405:       test \"$am__universal\" = false || continue",
          "406:       ;;",
          "407:     nosideeffect)",
          "408:       # after this tag, mechanisms are not by side-effect, so they'll",
          "409:       # only be used when explicitly requested",
          "410:       if test \"x$enable_dependency_tracking\" = xyes; then",
          "411:  continue",
          "412:       else",
          "413:  break",
          "414:       fi",
          "415:       ;;",
          "416:     msvisualcpp | msvcmsys)",
          "417:       # This compiler won't grok `-c -o', but also, the minuso test has",
          "418:       # not run yet.  These depmodes are late enough in the game, and",
          "419:       # so weak that their functioning should not be impacted.",
          "420:       am__obj=conftest.${OBJEXT-o}",
          "421:       am__minus_obj=",
          "422:       ;;",
          "423:     none) break ;;",
          "424:     esac",
          "425:     if depmode=$depmode \\",
          "426:        source=sub/conftest.c object=$am__obj \\",
          "427:        depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \\",
          "428:        $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \\",
          "429:          >/dev/null 2>conftest.err &&",
          "430:        grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&",
          "431:        grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&",
          "432:        grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&",
          "433:        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then",
          "434:       # icc doesn't choke on unknown options, it will just issue warnings",
          "435:       # or remarks (even with -Werror).  So we grep stderr for any message",
          "436:       # that says an option was ignored or not supported.",
          "437:       # When given -MP, icc 7.0 and 7.1 complain thusly:",
          "438:       #   icc: Command line warning: ignoring option '-M'; no argument required",
          "439:       # The diagnosis changed in icc 8.0:",
          "440:       #   icc: Command line remark: option '-MP' not supported",
          "441:       if (grep 'ignoring option' conftest.err ||",
          "442:           grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else",
          "443:         am_cv_$1_dependencies_compiler_type=$depmode",
          "444:         break",
          "445:       fi",
          "446:     fi",
          "447:   done",
          "449:   cd ..",
          "450:   rm -rf conftest.dir",
          "451: else",
          "452:   am_cv_$1_dependencies_compiler_type=none",
          "453: fi",
          "454: ])",
          "455: AC_SUBST([$1DEPMODE], [depmode=$am_cv_$1_dependencies_compiler_type])",
          "456: AM_CONDITIONAL([am__fastdep$1], [",
          "457:   test \"x$enable_dependency_tracking\" != xno \\",
          "458:   && test \"$am_cv_$1_dependencies_compiler_type\" = gcc3])",
          "459: ])",
          "462: # AM_SET_DEPDIR",
          "463: # -------------",
          "464: # Choose a directory name for dependency files.",
          "465: # This macro is AC_REQUIREd in _AM_DEPENDENCIES",
          "466: AC_DEFUN([AM_SET_DEPDIR],",
          "467: [AC_REQUIRE([AM_SET_LEADING_DOT])dnl",
          "468: AC_SUBST([DEPDIR], [\"${am__leading_dot}deps\"])dnl",
          "469: ])",
          "472: # AM_DEP_TRACK",
          "473: # ------------",
          "474: AC_DEFUN([AM_DEP_TRACK],",
          "475: [AC_ARG_ENABLE(dependency-tracking,",
          "476: [  --disable-dependency-tracking  speeds up one-time build",
          "477:   --enable-dependency-tracking   do not reject slow dependency extractors])",
          "478: if test \"x$enable_dependency_tracking\" != xno; then",
          "479:   am_depcomp=\"$ac_aux_dir/depcomp\"",
          "480:   AMDEPBACKSLASH='\\'",
          "481: fi",
          "482: AM_CONDITIONAL([AMDEP], [test \"x$enable_dependency_tracking\" != xno])",
          "483: AC_SUBST([AMDEPBACKSLASH])dnl",
          "484: _AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl",
          "485: ])",
          "487: # Generate code to set up dependency tracking.              -*- Autoconf -*-",
          "489: # Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2008",
          "490: # Free Software Foundation, Inc.",
          "491: #",
          "492: # This file is free software; the Free Software Foundation",
          "493: # gives unlimited permission to copy and/or distribute it,",
          "494: # with or without modifications, as long as this notice is preserved.",
          "496: #serial 5",
          "498: # _AM_OUTPUT_DEPENDENCY_COMMANDS",
          "499: # ------------------------------",
          "500: AC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS],",
          "501: [{",
          "502:   # Autoconf 2.62 quotes --file arguments for eval, but not when files",
          "503:   # are listed without --file.  Let's play safe and only enable the eval",
          "504:   # if we detect the quoting.",
          "505:   case $CONFIG_FILES in",
          "508:   esac",
          "509:   shift",
          "510:   for mf",
          "511:   do",
          "512:     # Strip MF so we end up with the name of the file.",
          "513:     mf=`echo \"$mf\" | sed -e 's/:.*$//'`",
          "514:     # Check whether this is an Automake generated Makefile or not.",
          "515:     # We used to match only the files named `Makefile.in', but",
          "516:     # some people rename them; so instead we look at the file content.",
          "517:     # Grep'ing the first line is not enough: some people post-process",
          "518:     # each Makefile.in and add a new line on top of each file to say so.",
          "519:     # Grep'ing the whole file is not good either: AIX grep has a line",
          "520:     # limit of 2048, but all sed's we know have understand at least 4000.",
          "521:     if sed -n 's,^#.*generated by automake.*,X,p' \"$mf\" | grep X >/dev/null 2>&1; then",
          "522:       dirpart=`AS_DIRNAME(\"$mf\")`",
          "523:     else",
          "524:       continue",
          "525:     fi",
          "526:     # Extract the definition of DEPDIR, am__include, and am__quote",
          "527:     # from the Makefile without running `make'.",
          "528:     DEPDIR=`sed -n 's/^DEPDIR = //p' < \"$mf\"`",
          "529:     test -z \"$DEPDIR\" && continue",
          "530:     am__include=`sed -n 's/^am__include = //p' < \"$mf\"`",
          "531:     test -z \"am__include\" && continue",
          "532:     am__quote=`sed -n 's/^am__quote = //p' < \"$mf\"`",
          "533:     # When using ansi2knr, U may be empty or an underscore; expand it",
          "534:     U=`sed -n 's/^U = //p' < \"$mf\"`",
          "535:     # Find all dependency output files, they are included files with",
          "536:     # $(DEPDIR) in their names.  We invoke sed twice because it is the",
          "537:     # simplest approach to changing $(DEPDIR) to its actual value in the",
          "538:     # expansion.",
          "539:     for file in `sed -n \"",
          "540:       s/^$am__include $am__quote\\(.*(DEPDIR).*\\)$am__quote\"'$/\\1/p' <\"$mf\" | \\",
          "541:   sed -e 's/\\$(DEPDIR)/'\"$DEPDIR\"'/g' -e 's/\\$U/'\"$U\"'/g'`; do",
          "542:       # Make sure the directory exists.",
          "543:       test -f \"$dirpart/$file\" && continue",
          "544:       fdir=`AS_DIRNAME([\"$file\"])`",
          "545:       AS_MKDIR_P([$dirpart/$fdir])",
          "546:       # echo \"creating $dirpart/$file\"",
          "547:       echo '# dummy' > \"$dirpart/$file\"",
          "548:     done",
          "549:   done",
          "550: }",
          "551: ])# _AM_OUTPUT_DEPENDENCY_COMMANDS",
          "554: # AM_OUTPUT_DEPENDENCY_COMMANDS",
          "555: # -----------------------------",
          "556: # This macro should only be invoked once -- use via AC_REQUIRE.",
          "557: #",
          "558: # This code is only required when automatic dependency tracking",
          "559: # is enabled.  FIXME.  This creates each `.P' file that we will",
          "560: # need in order to bootstrap the dependency handling code.",
          "561: AC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS],",
          "562: [AC_CONFIG_COMMANDS([depfiles],",
          "563:      [test x\"$AMDEP_TRUE\" != x\"\" || _AM_OUTPUT_DEPENDENCY_COMMANDS],",
          "564:      [AMDEP_TRUE=\"$AMDEP_TRUE\" ac_aux_dir=\"$ac_aux_dir\"])",
          "565: ])",
          "567: # Do all the work for Automake.                             -*- Autoconf -*-",
          "569: # Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,",
          "570: # 2005, 2006, 2008, 2009 Free Software Foundation, Inc.",
          "571: #",
          "572: # This file is free software; the Free Software Foundation",
          "573: # gives unlimited permission to copy and/or distribute it,",
          "574: # with or without modifications, as long as this notice is preserved.",
          "576: # serial 16",
          "578: # This macro actually does too much.  Some checks are only needed if",
          "579: # your package does certain things.  But this isn't really a big deal.",
          "581: # AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])",
          "582: # AM_INIT_AUTOMAKE([OPTIONS])",
          "583: # -----------------------------------------------",
          "584: # The call with PACKAGE and VERSION arguments is the old style",
          "585: # call (pre autoconf-2.50), which is being phased out.  PACKAGE",
          "586: # and VERSION should now be passed to AC_INIT and removed from",
          "587: # the call to AM_INIT_AUTOMAKE.",
          "588: # We support both call styles for the transition.  After",
          "589: # the next Automake release, Autoconf can make the AC_INIT",
          "590: # arguments mandatory, and then we can depend on a new Autoconf",
          "591: # release and drop the old call support.",
          "592: AC_DEFUN([AM_INIT_AUTOMAKE],",
          "593: [AC_PREREQ([2.62])dnl",
          "594: dnl Autoconf wants to disallow AM_ names.  We explicitly allow",
          "595: dnl the ones we care about.",
          "596: m4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl",
          "597: AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl",
          "598: AC_REQUIRE([AC_PROG_INSTALL])dnl",
          "599: if test \"`cd $srcdir && pwd`\" != \"`pwd`\"; then",
          "600:   # Use -I$(srcdir) only when $(srcdir) != ., so that make's output",
          "601:   # is not polluted with repeated \"-I.\"",
          "602:   AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl",
          "603:   # test to see if srcdir already configured",
          "604:   if test -f $srcdir/config.status; then",
          "605:     AC_MSG_ERROR([source directory already configured; run \"make distclean\" there first])",
          "606:   fi",
          "607: fi",
          "609: # test whether we have cygpath",
          "610: if test -z \"$CYGPATH_W\"; then",
          "611:   if (cygpath --version) >/dev/null 2>/dev/null; then",
          "612:     CYGPATH_W='cygpath -w'",
          "613:   else",
          "614:     CYGPATH_W=echo",
          "615:   fi",
          "616: fi",
          "617: AC_SUBST([CYGPATH_W])",
          "619: # Define the identity of the package.",
          "620: dnl Distinguish between old-style and new-style calls.",
          "621: m4_ifval([$2],",
          "622: [m4_ifval([$3], [_AM_SET_OPTION([no-define])])dnl",
          "623:  AC_SUBST([PACKAGE], [$1])dnl",
          "624:  AC_SUBST([VERSION], [$2])],",
          "625: [_AM_SET_OPTIONS([$1])dnl",
          "626: dnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.",
          "627: m4_if(m4_ifdef([AC_PACKAGE_NAME], 1)m4_ifdef([AC_PACKAGE_VERSION], 1), 11,,",
          "628:   [m4_fatal([AC_INIT should be called with package and version arguments])])dnl",
          "629:  AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl",
          "630:  AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl",
          "632: _AM_IF_OPTION([no-define],,",
          "633: [AC_DEFINE_UNQUOTED(PACKAGE, \"$PACKAGE\", [Name of package])",
          "634:  AC_DEFINE_UNQUOTED(VERSION, \"$VERSION\", [Version number of package])])dnl",
          "636: # Some tools Automake needs.",
          "637: AC_REQUIRE([AM_SANITY_CHECK])dnl",
          "638: AC_REQUIRE([AC_ARG_PROGRAM])dnl",
          "639: AM_MISSING_PROG(ACLOCAL, aclocal-${am__api_version})",
          "640: AM_MISSING_PROG(AUTOCONF, autoconf)",
          "641: AM_MISSING_PROG(AUTOMAKE, automake-${am__api_version})",
          "642: AM_MISSING_PROG(AUTOHEADER, autoheader)",
          "643: AM_MISSING_PROG(MAKEINFO, makeinfo)",
          "644: AC_REQUIRE([AM_PROG_INSTALL_SH])dnl",
          "645: AC_REQUIRE([AM_PROG_INSTALL_STRIP])dnl",
          "646: AC_REQUIRE([AM_PROG_MKDIR_P])dnl",
          "647: # We need awk for the \"check\" target.  The system \"awk\" is bad on",
          "648: # some platforms.",
          "649: AC_REQUIRE([AC_PROG_AWK])dnl",
          "650: AC_REQUIRE([AC_PROG_MAKE_SET])dnl",
          "651: AC_REQUIRE([AM_SET_LEADING_DOT])dnl",
          "652: _AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])],",
          "653:        [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],",
          "654:         [_AM_PROG_TAR([v7])])])",
          "655: _AM_IF_OPTION([no-dependencies],,",
          "656: [AC_PROVIDE_IFELSE([AC_PROG_CC],",
          "657:     [_AM_DEPENDENCIES(CC)],",
          "658:     [define([AC_PROG_CC],",
          "659:      defn([AC_PROG_CC])[_AM_DEPENDENCIES(CC)])])dnl",
          "660: AC_PROVIDE_IFELSE([AC_PROG_CXX],",
          "661:     [_AM_DEPENDENCIES(CXX)],",
          "662:     [define([AC_PROG_CXX],",
          "663:      defn([AC_PROG_CXX])[_AM_DEPENDENCIES(CXX)])])dnl",
          "664: AC_PROVIDE_IFELSE([AC_PROG_OBJC],",
          "665:     [_AM_DEPENDENCIES(OBJC)],",
          "666:     [define([AC_PROG_OBJC],",
          "667:      defn([AC_PROG_OBJC])[_AM_DEPENDENCIES(OBJC)])])dnl",
          "668: ])",
          "669: _AM_IF_OPTION([silent-rules], [AC_REQUIRE([AM_SILENT_RULES])])dnl",
          "670: dnl The `parallel-tests' driver may need to know about EXEEXT, so add the",
          "671: dnl `am__EXEEXT' conditional if _AM_COMPILER_EXEEXT was seen.  This macro",
          "672: dnl is hooked onto _AC_COMPILER_EXEEXT early, see below.",
          "673: AC_CONFIG_COMMANDS_PRE(dnl",
          "674: [m4_provide_if([_AM_COMPILER_EXEEXT],",
          "675:   [AM_CONDITIONAL([am__EXEEXT], [test -n \"$EXEEXT\"])])])dnl",
          "676: ])",
          "678: dnl Hook into `_AC_COMPILER_EXEEXT' early to learn its expansion.  Do not",
          "679: dnl add the conditional right here, as _AC_COMPILER_EXEEXT may be further",
          "680: dnl mangled by Autoconf and run in a shell conditional statement.",
          "681: m4_define([_AC_COMPILER_EXEEXT],",
          "682: m4_defn([_AC_COMPILER_EXEEXT])[m4_provide([_AM_COMPILER_EXEEXT])])",
          "685: # When config.status generates a header, we must update the stamp-h file.",
          "686: # This file resides in the same directory as the config header",
          "687: # that is generated.  The stamp files are numbered to have different names.",
          "689: # Autoconf calls _AC_AM_CONFIG_HEADER_HOOK (when defined) in the",
          "690: # loop where config.status creates the headers, so we can generate",
          "691: # our stamp files there.",
          "692: AC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK],",
          "693: [# Compute $1's index in $config_headers.",
          "694: _am_arg=$1",
          "695: _am_stamp_count=1",
          "696: for _am_header in $config_headers :; do",
          "697:   case $_am_header in",
          "698:     $_am_arg | $_am_arg:* )",
          "699:       break ;;",
          "701:       _am_stamp_count=`expr $_am_stamp_count + 1` ;;",
          "702:   esac",
          "703: done",
          "704: echo \"timestamp for $_am_arg\" >`AS_DIRNAME([\"$_am_arg\"])`/stamp-h[]$_am_stamp_count])",
          "706: # Copyright (C) 2001, 2003, 2005, 2008  Free Software Foundation, Inc.",
          "707: #",
          "708: # This file is free software; the Free Software Foundation",
          "709: # gives unlimited permission to copy and/or distribute it,",
          "710: # with or without modifications, as long as this notice is preserved.",
          "712: # AM_PROG_INSTALL_SH",
          "713: # ------------------",
          "714: # Define $install_sh.",
          "715: AC_DEFUN([AM_PROG_INSTALL_SH],",
          "716: [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl",
          "717: if test x\"${install_sh}\" != xset; then",
          "718:   case $am_aux_dir in",
          "720:     install_sh=\"\\${SHELL} '$am_aux_dir/install-sh'\" ;;",
          "722:     install_sh=\"\\${SHELL} $am_aux_dir/install-sh\"",
          "723:   esac",
          "724: fi",
          "725: AC_SUBST(install_sh)])",
          "727: # Copyright (C) 2003, 2005  Free Software Foundation, Inc.",
          "728: #",
          "729: # This file is free software; the Free Software Foundation",
          "730: # gives unlimited permission to copy and/or distribute it,",
          "731: # with or without modifications, as long as this notice is preserved.",
          "733: # serial 2",
          "735: # Check whether the underlying file-system supports filenames",
          "736: # with a leading dot.  For instance MS-DOS doesn't.",
          "737: AC_DEFUN([AM_SET_LEADING_DOT],",
          "738: [rm -rf .tst 2>/dev/null",
          "739: mkdir .tst 2>/dev/null",
          "740: if test -d .tst; then",
          "741:   am__leading_dot=.",
          "742: else",
          "743:   am__leading_dot=_",
          "744: fi",
          "745: rmdir .tst 2>/dev/null",
          "746: AC_SUBST([am__leading_dot])])",
          "748: # Check to see how 'make' treats includes.             -*- Autoconf -*-",
          "750: # Copyright (C) 2001, 2002, 2003, 2005, 2009  Free Software Foundation, Inc.",
          "751: #",
          "752: # This file is free software; the Free Software Foundation",
          "753: # gives unlimited permission to copy and/or distribute it,",
          "754: # with or without modifications, as long as this notice is preserved.",
          "756: # serial 4",
          "758: # AM_MAKE_INCLUDE()",
          "759: # -----------------",
          "760: # Check to see how make treats includes.",
          "761: AC_DEFUN([AM_MAKE_INCLUDE],",
          "762: [am_make=${MAKE-make}",
          "763: cat > confinc << 'END'",
          "764: am__doit:",
          "765:  @echo this is the am__doit target",
          "766: .PHONY: am__doit",
          "767: END",
          "768: # If we don't find an include directive, just comment out the code.",
          "769: AC_MSG_CHECKING([for style of include used by $am_make])",
          "770: am__include=\"#\"",
          "771: am__quote=",
          "772: _am_result=none",
          "773: # First try GNU make style include.",
          "774: echo \"include confinc\" > confmf",
          "775: # Ignore all kinds of additional output from `make'.",
          "776: case `$am_make -s -f confmf 2> /dev/null` in #(",
          "778:   am__include=include",
          "779:   am__quote=",
          "780:   _am_result=GNU",
          "781:   ;;",
          "782: esac",
          "783: # Now try BSD make style include.",
          "784: if test \"$am__include\" = \"#\"; then",
          "785:    echo '.include \"confinc\"' > confmf",
          "786:    case `$am_make -s -f confmf 2> /dev/null` in #(",
          "788:      am__include=.include",
          "789:      am__quote=\"\\\"\"",
          "790:      _am_result=BSD",
          "791:      ;;",
          "792:    esac",
          "793: fi",
          "794: AC_SUBST([am__include])",
          "795: AC_SUBST([am__quote])",
          "796: AC_MSG_RESULT([$_am_result])",
          "797: rm -f confinc confmf",
          "798: ])",
          "800: # Fake the existence of programs that GNU maintainers use.  -*- Autoconf -*-",
          "802: # Copyright (C) 1997, 1999, 2000, 2001, 2003, 2004, 2005, 2008",
          "803: # Free Software Foundation, Inc.",
          "804: #",
          "805: # This file is free software; the Free Software Foundation",
          "806: # gives unlimited permission to copy and/or distribute it,",
          "807: # with or without modifications, as long as this notice is preserved.",
          "809: # serial 6",
          "811: # AM_MISSING_PROG(NAME, PROGRAM)",
          "812: # ------------------------------",
          "813: AC_DEFUN([AM_MISSING_PROG],",
          "814: [AC_REQUIRE([AM_MISSING_HAS_RUN])",
          "815: $1=${$1-\"${am_missing_run}$2\"}",
          "816: AC_SUBST($1)])",
          "819: # AM_MISSING_HAS_RUN",
          "820: # ------------------",
          "821: # Define MISSING if not defined so far and test if it supports --run.",
          "822: # If it does, set am_missing_run to use it, otherwise, to nothing.",
          "823: AC_DEFUN([AM_MISSING_HAS_RUN],",
          "824: [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl",
          "825: AC_REQUIRE_AUX_FILE([missing])dnl",
          "826: if test x\"${MISSING+set}\" != xset; then",
          "827:   case $am_aux_dir in",
          "829:     MISSING=\"\\${SHELL} \\\"$am_aux_dir/missing\\\"\" ;;",
          "831:     MISSING=\"\\${SHELL} $am_aux_dir/missing\" ;;",
          "832:   esac",
          "833: fi",
          "834: # Use eval to expand $SHELL",
          "835: if eval \"$MISSING --run true\"; then",
          "836:   am_missing_run=\"$MISSING --run \"",
          "837: else",
          "838:   am_missing_run=",
          "839:   AC_MSG_WARN([`missing' script is too old or missing])",
          "840: fi",
          "841: ])",
          "843: # Copyright (C) 2003, 2004, 2005, 2006  Free Software Foundation, Inc.",
          "844: #",
          "845: # This file is free software; the Free Software Foundation",
          "846: # gives unlimited permission to copy and/or distribute it,",
          "847: # with or without modifications, as long as this notice is preserved.",
          "849: # AM_PROG_MKDIR_P",
          "850: # ---------------",
          "851: # Check for `mkdir -p'.",
          "852: AC_DEFUN([AM_PROG_MKDIR_P],",
          "853: [AC_PREREQ([2.60])dnl",
          "854: AC_REQUIRE([AC_PROG_MKDIR_P])dnl",
          "855: dnl Automake 1.8 to 1.9.6 used to define mkdir_p.  We now use MKDIR_P,",
          "856: dnl while keeping a definition of mkdir_p for backward compatibility.",
          "857: dnl @MKDIR_P@ is magic: AC_OUTPUT adjusts its value for each Makefile.",
          "858: dnl However we cannot define mkdir_p as $(MKDIR_P) for the sake of",
          "859: dnl Makefile.ins that do not define MKDIR_P, so we do our own",
          "860: dnl adjustment using top_builddir (which is defined more often than",
          "861: dnl MKDIR_P).",
          "862: AC_SUBST([mkdir_p], [\"$MKDIR_P\"])dnl",
          "863: case $mkdir_p in",
          "864:   [[\\\\/$]]* | ?:[[\\\\/]]*) ;;",
          "866: esac",
          "867: ])",
          "869: # Helper functions for option handling.                     -*- Autoconf -*-",
          "871: # Copyright (C) 2001, 2002, 2003, 2005, 2008  Free Software Foundation, Inc.",
          "872: #",
          "873: # This file is free software; the Free Software Foundation",
          "874: # gives unlimited permission to copy and/or distribute it,",
          "875: # with or without modifications, as long as this notice is preserved.",
          "877: # serial 4",
          "879: # _AM_MANGLE_OPTION(NAME)",
          "880: # -----------------------",
          "881: AC_DEFUN([_AM_MANGLE_OPTION],",
          "882: [[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])",
          "884: # _AM_SET_OPTION(NAME)",
          "885: # ------------------------------",
          "886: # Set option NAME.  Presently that only means defining a flag for this option.",
          "887: AC_DEFUN([_AM_SET_OPTION],",
          "888: [m4_define(_AM_MANGLE_OPTION([$1]), 1)])",
          "890: # _AM_SET_OPTIONS(OPTIONS)",
          "891: # ----------------------------------",
          "892: # OPTIONS is a space-separated list of Automake options.",
          "893: AC_DEFUN([_AM_SET_OPTIONS],",
          "894: [m4_foreach_w([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])",
          "896: # _AM_IF_OPTION(OPTION, IF-SET, [IF-NOT-SET])",
          "897: # -------------------------------------------",
          "898: # Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.",
          "899: AC_DEFUN([_AM_IF_OPTION],",
          "900: [m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])",
          "902: # Check to make sure that the build environment is sane.    -*- Autoconf -*-",
          "904: # Copyright (C) 1996, 1997, 2000, 2001, 2003, 2005, 2008",
          "905: # Free Software Foundation, Inc.",
          "906: #",
          "907: # This file is free software; the Free Software Foundation",
          "908: # gives unlimited permission to copy and/or distribute it,",
          "909: # with or without modifications, as long as this notice is preserved.",
          "911: # serial 5",
          "913: # AM_SANITY_CHECK",
          "914: # ---------------",
          "915: AC_DEFUN([AM_SANITY_CHECK],",
          "916: [AC_MSG_CHECKING([whether build environment is sane])",
          "917: # Just in case",
          "918: sleep 1",
          "919: echo timestamp > conftest.file",
          "920: # Reject unsafe characters in $srcdir or the absolute working directory",
          "921: # name.  Accept space and tab only in the latter.",
          "922: am_lf='",
          "923: '",
          "924: case `pwd` in",
          "926:     AC_MSG_ERROR([unsafe absolute working directory name]);;",
          "927: esac",
          "928: case $srcdir in",
          "930:     AC_MSG_ERROR([unsafe srcdir value: `$srcdir']);;",
          "931: esac",
          "933: # Do `set' in a subshell so we don't clobber the current shell's",
          "934: # arguments.  Must try -L first in case configure is actually a",
          "935: # symlink; some systems play weird games with the mod time of symlinks",
          "936: # (eg FreeBSD returns the mod time of the symlink's containing",
          "937: # directory).",
          "938: if (",
          "939:    set X `ls -Lt \"$srcdir/configure\" conftest.file 2> /dev/null`",
          "940:    if test \"$[*]\" = \"X\"; then",
          "941:       # -L didn't work.",
          "942:       set X `ls -t \"$srcdir/configure\" conftest.file`",
          "943:    fi",
          "944:    rm -f conftest.file",
          "945:    if test \"$[*]\" != \"X $srcdir/configure conftest.file\" \\",
          "946:       && test \"$[*]\" != \"X conftest.file $srcdir/configure\"; then",
          "948:       # If neither matched, then we have a broken ls.  This can happen",
          "949:       # if, for instance, CONFIG_SHELL is bash and it inherits a",
          "950:       # broken ls alias from the environment.  This has actually",
          "951:       # happened.  Such a system could not be considered \"sane\".",
          "952:       AC_MSG_ERROR([ls -t appears to fail.  Make sure there is not a broken",
          "953: alias in your environment])",
          "954:    fi",
          "956:    test \"$[2]\" = conftest.file",
          "957:    )",
          "958: then",
          "959:    # Ok.",
          "960:    :",
          "961: else",
          "962:    AC_MSG_ERROR([newly created file is older than distributed files!",
          "963: Check your system clock])",
          "964: fi",
          "965: AC_MSG_RESULT(yes)])",
          "967: # Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.",
          "968: #",
          "969: # This file is free software; the Free Software Foundation",
          "970: # gives unlimited permission to copy and/or distribute it,",
          "971: # with or without modifications, as long as this notice is preserved.",
          "973: # AM_PROG_INSTALL_STRIP",
          "974: # ---------------------",
          "975: # One issue with vendor `install' (even GNU) is that you can't",
          "976: # specify the program used to strip binaries.  This is especially",
          "977: # annoying in cross-compiling environments, where the build's strip",
          "978: # is unlikely to handle the host's binaries.",
          "979: # Fortunately install-sh will honor a STRIPPROG variable, so we",
          "980: # always use install-sh in `make install-strip', and initialize",
          "981: # STRIPPROG with the value of the STRIP variable (set by the user).",
          "982: AC_DEFUN([AM_PROG_INSTALL_STRIP],",
          "983: [AC_REQUIRE([AM_PROG_INSTALL_SH])dnl",
          "984: # Installed binaries are usually stripped using `strip' when the user",
          "985: # run `make install-strip'.  However `strip' might not be the right",
          "986: # tool to use in cross-compilation environments, therefore Automake",
          "987: # will honor the `STRIP' environment variable to overrule this program.",
          "988: dnl Don't test for $cross_compiling = yes, because it might be `maybe'.",
          "989: if test \"$cross_compiling\" != no; then",
          "990:   AC_CHECK_TOOL([STRIP], [strip], :)",
          "991: fi",
          "992: INSTALL_STRIP_PROGRAM=\"\\$(install_sh) -c -s\"",
          "993: AC_SUBST([INSTALL_STRIP_PROGRAM])])",
          "995: # Copyright (C) 2006, 2008  Free Software Foundation, Inc.",
          "996: #",
          "997: # This file is free software; the Free Software Foundation",
          "998: # gives unlimited permission to copy and/or distribute it,",
          "999: # with or without modifications, as long as this notice is preserved.",
          "1001: # serial 2",
          "1003: # _AM_SUBST_NOTMAKE(VARIABLE)",
          "1004: # ---------------------------",
          "1005: # Prevent Automake from outputting VARIABLE = @VARIABLE@ in Makefile.in.",
          "1006: # This macro is traced by Automake.",
          "1007: AC_DEFUN([_AM_SUBST_NOTMAKE])",
          "1009: # AM_SUBST_NOTMAKE(VARIABLE)",
          "1010: # ---------------------------",
          "1011: # Public sister of _AM_SUBST_NOTMAKE.",
          "1012: AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])",
          "1014: # Check how to create a tarball.                            -*- Autoconf -*-",
          "1016: # Copyright (C) 2004, 2005  Free Software Foundation, Inc.",
          "1017: #",
          "1018: # This file is free software; the Free Software Foundation",
          "1019: # gives unlimited permission to copy and/or distribute it,",
          "1020: # with or without modifications, as long as this notice is preserved.",
          "1022: # serial 2",
          "1024: # _AM_PROG_TAR(FORMAT)",
          "1025: # --------------------",
          "1026: # Check how to create a tarball in format FORMAT.",
          "1027: # FORMAT should be one of `v7', `ustar', or `pax'.",
          "1028: #",
          "1029: # Substitute a variable $(am__tar) that is a command",
          "1030: # writing to stdout a FORMAT-tarball containing the directory",
          "1031: # $tardir.",
          "1032: #     tardir=directory && $(am__tar) > result.tar",
          "1033: #",
          "1034: # Substitute a variable $(am__untar) that extract such",
          "1035: # a tarball read from stdin.",
          "1036: #     $(am__untar) < result.tar",
          "1037: AC_DEFUN([_AM_PROG_TAR],",
          "1038: [# Always define AMTAR for backward compatibility.",
          "1039: AM_MISSING_PROG([AMTAR], [tar])",
          "1040: m4_if([$1], [v7],",
          "1041:      [am__tar='${AMTAR} chof - \"$$tardir\"'; am__untar='${AMTAR} xf -'],",
          "1042:      [m4_case([$1], [ustar],, [pax],,",
          "1043:               [m4_fatal([Unknown tar format])])",
          "1044: AC_MSG_CHECKING([how to create a $1 tar archive])",
          "1045: # Loop over all known methods to create a tar archive until one works.",
          "1046: _am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'",
          "1047: _am_tools=${am_cv_prog_tar_$1-$_am_tools}",
          "1048: # Do not fold the above two line into one, because Tru64 sh and",
          "1049: # Solaris sh will not grok spaces in the rhs of `-'.",
          "1050: for _am_tool in $_am_tools",
          "1051: do",
          "1052:   case $_am_tool in",
          "1053:   gnutar)",
          "1054:     for _am_tar in tar gnutar gtar;",
          "1055:     do",
          "1056:       AM_RUN_LOG([$_am_tar --version]) && break",
          "1057:     done",
          "1058:     am__tar=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$$tardir\"'",
          "1059:     am__tar_=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$tardir\"'",
          "1060:     am__untar=\"$_am_tar -xf -\"",
          "1061:     ;;",
          "1062:   plaintar)",
          "1063:     # Must skip GNU tar: if it does not support --format= it doesn't create",
          "1064:     # ustar tarball either.",
          "1065:     (tar --version) >/dev/null 2>&1 && continue",
          "1066:     am__tar='tar chf - \"$$tardir\"'",
          "1067:     am__tar_='tar chf - \"$tardir\"'",
          "1068:     am__untar='tar xf -'",
          "1069:     ;;",
          "1070:   pax)",
          "1071:     am__tar='pax -L -x $1 -w \"$$tardir\"'",
          "1072:     am__tar_='pax -L -x $1 -w \"$tardir\"'",
          "1073:     am__untar='pax -r'",
          "1074:     ;;",
          "1075:   cpio)",
          "1076:     am__tar='find \"$$tardir\" -print | cpio -o -H $1 -L'",
          "1077:     am__tar_='find \"$tardir\" -print | cpio -o -H $1 -L'",
          "1078:     am__untar='cpio -i -H $1 -d'",
          "1079:     ;;",
          "1080:   none)",
          "1081:     am__tar=false",
          "1082:     am__tar_=false",
          "1083:     am__untar=false",
          "1084:     ;;",
          "1085:   esac",
          "1087:   # If the value was cached, stop now.  We just wanted to have am__tar",
          "1088:   # and am__untar set.",
          "1089:   test -n \"${am_cv_prog_tar_$1}\" && break",
          "1091:   # tar/untar a dummy directory, and stop if the command works",
          "1092:   rm -rf conftest.dir",
          "1093:   mkdir conftest.dir",
          "1094:   echo GrepMe > conftest.dir/file",
          "1095:   AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])",
          "1096:   rm -rf conftest.dir",
          "1097:   if test -s conftest.tar; then",
          "1098:     AM_RUN_LOG([$am__untar <conftest.tar])",
          "1099:     grep GrepMe conftest.dir/file >/dev/null 2>&1 && break",
          "1100:   fi",
          "1101: done",
          "1102: rm -rf conftest.dir",
          "1104: AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])",
          "1105: AC_MSG_RESULT([$am_cv_prog_tar_$1])])",
          "1106: AC_SUBST([am__tar])",
          "1107: AC_SUBST([am__untar])",
          "1108: ]) # _AM_PROG_TAR",
          "",
          "---------------"
        ],
        "autogen.sh||autogen.sh": [
          "File: autogen.sh -> autogen.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/sh",
          "3: aclocal",
          "4: automake -a -c --gnu",
          "5: autoconf",
          "",
          "---------------"
        ],
        "config.guess||config.guess": [
          "File: config.guess -> config.guess",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /bin/sh",
          "2: # Attempt to guess a canonical system name.",
          "3: #   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,",
          "4: #   2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.",
          "6: timestamp='2005-08-03'",
          "8: # This file is free software; you can redistribute it and/or modify it",
          "9: # under the terms of the GNU General Public License as published by",
          "10: # the Free Software Foundation; either version 2 of the License, or",
          "11: # (at your option) any later version.",
          "12: #",
          "13: # This program is distributed in the hope that it will be useful, but",
          "14: # WITHOUT ANY WARRANTY; without even the implied warranty of",
          "15: # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
          "16: # General Public License for more details.",
          "17: #",
          "18: # You should have received a copy of the GNU General Public License",
          "19: # along with this program; if not, write to the Free Software",
          "20: # Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA",
          "21: # 02110-1301, USA.",
          "22: #",
          "23: # As a special exception to the GNU General Public License, if you",
          "24: # distribute this file as part of a program that contains a",
          "25: # configuration script generated by Autoconf, you may include it under",
          "26: # the same distribution terms that you use for the rest of that program.",
          "29: # Originally written by Per Bothner <per@bothner.com>.",
          "30: # Please send patches to <config-patches@gnu.org>.  Submit a context",
          "31: # diff and a properly formatted ChangeLog entry.",
          "32: #",
          "33: # This script attempts to guess a canonical system name similar to",
          "34: # config.sub.  If it succeeds, it prints the system name on stdout, and",
          "35: # exits with 0.  Otherwise, it exits with 1.",
          "36: #",
          "37: # The plan is that this can be called by configure scripts if you",
          "38: # don't specify an explicit build system type.",
          "40: me=`echo \"$0\" | sed -e 's,.*/,,'`",
          "42: usage=\"\\",
          "43: Usage: $0 [OPTION]",
          "45: Output the configuration name of the system \\`$me' is run on.",
          "47: Operation modes:",
          "48:   -h, --help         print this help, then exit",
          "49:   -t, --time-stamp   print date of last modification, then exit",
          "50:   -v, --version      print version number, then exit",
          "52: Report bugs and patches to <config-patches@gnu.org>.\"",
          "54: version=\"\\",
          "55: GNU config.guess ($timestamp)",
          "57: Originally written by Per Bothner.",
          "58: Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005",
          "59: Free Software Foundation, Inc.",
          "61: This is free software; see the source for copying conditions.  There is NO",
          "62: warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"",
          "64: help=\"",
          "65: Try \\`$me --help' for more information.\"",
          "67: # Parse command line",
          "68: while test $# -gt 0 ; do",
          "69:   case $1 in",
          "70:     --time-stamp | --time* | -t )",
          "71:        echo \"$timestamp\" ; exit ;;",
          "72:     --version | -v )",
          "73:        echo \"$version\" ; exit ;;",
          "74:     --help | --h* | -h )",
          "75:        echo \"$usage\"; exit ;;",
          "76:     -- )     # Stop option processing",
          "77:        shift; break ;;",
          "78:     - ) # Use stdin as input.",
          "79:        break ;;",
          "80:     -* )",
          "81:        echo \"$me: invalid option $1$help\" >&2",
          "82:        exit 1 ;;",
          "84:        break ;;",
          "85:   esac",
          "86: done",
          "88: if test $# != 0; then",
          "89:   echo \"$me: too many arguments$help\" >&2",
          "90:   exit 1",
          "91: fi",
          "93: trap 'exit 1' 1 2 15",
          "95: # CC_FOR_BUILD -- compiler used by this script. Note that the use of a",
          "96: # compiler to aid in system detection is discouraged as it requires",
          "97: # temporary files to be created and, as you can see below, it is a",
          "98: # headache to deal with in a portable fashion.",
          "100: # Historically, `CC_FOR_BUILD' used to be named `HOST_CC'. We still",
          "101: # use `HOST_CC' if defined, but it is deprecated.",
          "103: # Portable tmp directory creation inspired by the Autoconf team.",
          "105: set_cc_for_build='",
          "106: trap \"exitcode=\\$?; (rm -f \\$tmpfiles 2>/dev/null; rmdir \\$tmp 2>/dev/null) && exit \\$exitcode\" 0 ;",
          "107: trap \"rm -f \\$tmpfiles 2>/dev/null; rmdir \\$tmp 2>/dev/null; exit 1\" 1 2 13 15 ;",
          "108: : ${TMPDIR=/tmp} ;",
          "109:  { tmp=`(umask 077 && mktemp -d -q \"$TMPDIR/cgXXXXXX\") 2>/dev/null` && test -n \"$tmp\" && test -d \"$tmp\" ; } ||",
          "110:  { test -n \"$RANDOM\" && tmp=$TMPDIR/cg$$-$RANDOM && (umask 077 && mkdir $tmp) ; } ||",
          "111:  { tmp=$TMPDIR/cg-$$ && (umask 077 && mkdir $tmp) && echo \"Warning: creating insecure temp directory\" >&2 ; } ||",
          "112:  { echo \"$me: cannot create a temporary directory in $TMPDIR\" >&2 ; exit 1 ; } ;",
          "113: dummy=$tmp/dummy ;",
          "114: tmpfiles=\"$dummy.c $dummy.o $dummy.rel $dummy\" ;",
          "115: case $CC_FOR_BUILD,$HOST_CC,$CC in",
          "116:  ,,)    echo \"int x;\" > $dummy.c ;",
          "117:  for c in cc gcc c89 c99 ; do",
          "118:    if ($c -c -o $dummy.o $dummy.c) >/dev/null 2>&1 ; then",
          "119:       CC_FOR_BUILD=\"$c\"; break ;",
          "120:    fi ;",
          "121:  done ;",
          "122:  if test x\"$CC_FOR_BUILD\" = x ; then",
          "123:    CC_FOR_BUILD=no_compiler_found ;",
          "124:  fi",
          "125:  ;;",
          "126:  ,,*)   CC_FOR_BUILD=$CC ;;",
          "127:  ,*,*)  CC_FOR_BUILD=$HOST_CC ;;",
          "128: esac ; set_cc_for_build= ;'",
          "130: # This is needed to find uname on a Pyramid OSx when run in the BSD universe.",
          "131: # (ghazi@noc.rutgers.edu 1994-08-24)",
          "132: if (test -f /.attbin/uname) >/dev/null 2>&1 ; then",
          "133:  PATH=$PATH:/.attbin ; export PATH",
          "134: fi",
          "136: UNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown",
          "137: UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown",
          "138: UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown",
          "139: UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown",
          "141: # Note: order is significant - the case branches are not exclusive.",
          "143: case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in",
          "145:  # NetBSD (nbsd) targets should (where applicable) match one or",
          "146:  # more of the tupples: *-*-netbsdelf*, *-*-netbsdaout*,",
          "147:  # *-*-netbsdecoff* and *-*-netbsd*.  For targets that recently",
          "148:  # switched to ELF, *-*-netbsd* would select the old",
          "149:  # object file format.  This provides both forward",
          "150:  # compatibility and a consistent mechanism for selecting the",
          "151:  # object file format.",
          "152:  #",
          "153:  # Note: NetBSD doesn't particularly care about the vendor",
          "154:  # portion of the name.  We always set it to \"unknown\".",
          "155:  sysctl=\"sysctl -n hw.machine_arch\"",
          "156:  UNAME_MACHINE_ARCH=`(/sbin/$sysctl 2>/dev/null || \\",
          "157:      /usr/sbin/$sysctl 2>/dev/null || echo unknown)`",
          "158:  case \"${UNAME_MACHINE_ARCH}\" in",
          "159:      armeb) machine=armeb-unknown ;;",
          "160:      arm*) machine=arm-unknown ;;",
          "161:      sh3el) machine=shl-unknown ;;",
          "162:      sh3eb) machine=sh-unknown ;;",
          "164:  esac",
          "165:  # The Operating System including object format, if it has switched",
          "166:  # to ELF recently, or will in the future.",
          "167:  case \"${UNAME_MACHINE_ARCH}\" in",
          "168:      arm*|i386|m68k|ns32k|sh3*|sparc|vax)",
          "169:   eval $set_cc_for_build",
          "170:   if echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\",
          "171:    | grep __ELF__ >/dev/null",
          "172:   then",
          "173:       # Once all utilities can be ECOFF (netbsdecoff) or a.out (netbsdaout).",
          "174:       # Return netbsd for either.  FIX?",
          "175:       os=netbsd",
          "176:   else",
          "177:       os=netbsdelf",
          "178:   fi",
          "179:   ;;",
          "181:          os=netbsd",
          "182:   ;;",
          "183:  esac",
          "184:  # The OS release",
          "185:  # Debian GNU/NetBSD machines have a different userland, and",
          "186:  # thus, need a distinct triplet. However, they do not need",
          "187:  # kernel version information, so it can be replaced with a",
          "188:  # suitable tag, in the style of linux-gnu.",
          "189:  case \"${UNAME_VERSION}\" in",
          "190:      Debian*)",
          "191:   release='-gnu'",
          "192:   ;;",
          "194:   release=`echo ${UNAME_RELEASE}|sed -e 's/[-_].*/\\./'`",
          "195:   ;;",
          "196:  esac",
          "197:  # Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:",
          "198:  # contains redundant information, the shorter form:",
          "199:  # CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.",
          "200:  echo \"${machine}-${os}${release}\"",
          "201:  exit ;;",
          "203:  UNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`",
          "204:  echo ${UNAME_MACHINE_ARCH}-unknown-openbsd${UNAME_RELEASE}",
          "205:  exit ;;",
          "207:  echo ${UNAME_MACHINE}-unknown-ekkobsd${UNAME_RELEASE}",
          "208:  exit ;;",
          "209:     macppc:MirBSD:*:*)",
          "210:  echo powerppc-unknown-mirbsd${UNAME_RELEASE}",
          "211:  exit ;;",
          "213:  echo ${UNAME_MACHINE}-unknown-mirbsd${UNAME_RELEASE}",
          "214:  exit ;;",
          "215:     alpha:OSF1:*:*)",
          "216:  case $UNAME_RELEASE in",
          "218:   UNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`",
          "219:   ;;",
          "221:          UNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`",
          "222:   ;;",
          "223:  esac",
          "224:  # According to Compaq, /usr/sbin/psrinfo has been available on",
          "225:  # OSF/1 and Tru64 systems produced since 1995.  I hope that",
          "226:  # covers most systems running today.  This code pipes the CPU",
          "227:  # types through head -n 1, so we only detect the type of CPU 0.",
          "228:  ALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`",
          "229:  case \"$ALPHA_CPU_TYPE\" in",
          "230:      \"EV4 (21064)\")",
          "231:   UNAME_MACHINE=\"alpha\" ;;",
          "232:      \"EV4.5 (21064)\")",
          "233:   UNAME_MACHINE=\"alpha\" ;;",
          "234:      \"LCA4 (21066/21068)\")",
          "235:   UNAME_MACHINE=\"alpha\" ;;",
          "236:      \"EV5 (21164)\")",
          "237:   UNAME_MACHINE=\"alphaev5\" ;;",
          "238:      \"EV5.6 (21164A)\")",
          "239:   UNAME_MACHINE=\"alphaev56\" ;;",
          "240:      \"EV5.6 (21164PC)\")",
          "241:   UNAME_MACHINE=\"alphapca56\" ;;",
          "242:      \"EV5.7 (21164PC)\")",
          "243:   UNAME_MACHINE=\"alphapca57\" ;;",
          "244:      \"EV6 (21264)\")",
          "245:   UNAME_MACHINE=\"alphaev6\" ;;",
          "246:      \"EV6.7 (21264A)\")",
          "247:   UNAME_MACHINE=\"alphaev67\" ;;",
          "248:      \"EV6.8CB (21264C)\")",
          "249:   UNAME_MACHINE=\"alphaev68\" ;;",
          "250:      \"EV6.8AL (21264B)\")",
          "251:   UNAME_MACHINE=\"alphaev68\" ;;",
          "252:      \"EV6.8CX (21264D)\")",
          "253:   UNAME_MACHINE=\"alphaev68\" ;;",
          "254:      \"EV6.9A (21264/EV69A)\")",
          "255:   UNAME_MACHINE=\"alphaev69\" ;;",
          "256:      \"EV7 (21364)\")",
          "257:   UNAME_MACHINE=\"alphaev7\" ;;",
          "258:      \"EV7.9 (21364A)\")",
          "259:   UNAME_MACHINE=\"alphaev79\" ;;",
          "260:  esac",
          "261:  # A Pn.n version is a patched version.",
          "262:  # A Vn.n version is a released version.",
          "263:  # A Tn.n version is a released field test version.",
          "264:  # A Xn.n version is an unreleased experimental baselevel.",
          "265:  # 1.2 uses \"1.2\" for uname -r.",
          "266:  echo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[PVTX]//' | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`",
          "267:  exit ;;",
          "268:     Alpha\\ *:Windows_NT*:*)",
          "269:  # How do we know it's Interix rather than the generic POSIX subsystem?",
          "270:  # Should we change UNAME_MACHINE based on the output of uname instead",
          "271:  # of the specific Alpha model?",
          "272:  echo alpha-pc-interix",
          "273:  exit ;;",
          "274:     21064:Windows_NT:50:3)",
          "275:  echo alpha-dec-winnt3.5",
          "276:  exit ;;",
          "277:     Amiga*:UNIX_System_V:4.0:*)",
          "278:  echo m68k-unknown-sysv4",
          "279:  exit ;;",
          "281:  echo ${UNAME_MACHINE}-unknown-amigaos",
          "282:  exit ;;",
          "284:  echo ${UNAME_MACHINE}-unknown-morphos",
          "285:  exit ;;",
          "287:  echo i370-ibm-openedition",
          "288:  exit ;;",
          "290:  echo s390-ibm-zvmoe",
          "291:  exit ;;",
          "293:         echo powerpc-ibm-os400",
          "294:  exit ;;",
          "295:     arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)",
          "296:  echo arm-acorn-riscix${UNAME_RELEASE}",
          "297:  exit ;;",
          "298:     arm:riscos:*:*|arm:RISCOS:*:*)",
          "299:  echo arm-unknown-riscos",
          "300:  exit ;;",
          "301:     SR2?01:HI-UX/MPP:*:* | SR8000:HI-UX/MPP:*:*)",
          "302:  echo hppa1.1-hitachi-hiuxmpp",
          "303:  exit ;;",
          "304:     Pyramid*:OSx*:*:* | MIS*:OSx*:*:* | MIS*:SMP_DC-OSx*:*:*)",
          "305:  # akee@wpdis03.wpafb.af.mil (Earle F. Ake) contributed MIS and NILE.",
          "306:  if test \"`(/bin/universe) 2>/dev/null`\" = att ; then",
          "307:   echo pyramid-pyramid-sysv3",
          "308:  else",
          "309:   echo pyramid-pyramid-bsd",
          "310:  fi",
          "311:  exit ;;",
          "312:     NILE*:*:*:dcosx)",
          "313:  echo pyramid-pyramid-svr4",
          "314:  exit ;;",
          "315:     DRS?6000:unix:4.0:6*)",
          "316:  echo sparc-icl-nx6",
          "317:  exit ;;",
          "318:     DRS?6000:UNIX_SV:4.2*:7* | DRS?6000:isis:4.2*:7*)",
          "319:  case `/usr/bin/uname -p` in",
          "320:      sparc) echo sparc-icl-nx7; exit ;;",
          "321:  esac ;;",
          "322:     sun4H:SunOS:5.*:*)",
          "323:  echo sparc-hal-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`",
          "324:  exit ;;",
          "325:     sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)",
          "326:  echo sparc-sun-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`",
          "327:  exit ;;",
          "328:     i86pc:SunOS:5.*:*)",
          "329:  echo i386-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`",
          "330:  exit ;;",
          "331:     sun4*:SunOS:6*:*)",
          "332:  # According to config.sub, this is the proper way to canonicalize",
          "333:  # SunOS6.  Hard to guess exactly what SunOS6 will be like, but",
          "334:  # it's likely to be more like Solaris than SunOS4.",
          "335:  echo sparc-sun-solaris3`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`",
          "336:  exit ;;",
          "337:     sun4*:SunOS:*:*)",
          "338:  case \"`/usr/bin/arch -k`\" in",
          "339:      Series*|S4*)",
          "340:   UNAME_RELEASE=`uname -v`",
          "341:   ;;",
          "342:  esac",
          "343:  # Japanese Language versions have a version number like `4.1.3-JL'.",
          "344:  echo sparc-sun-sunos`echo ${UNAME_RELEASE}|sed -e 's/-/_/'`",
          "345:  exit ;;",
          "346:     sun3*:SunOS:*:*)",
          "347:  echo m68k-sun-sunos${UNAME_RELEASE}",
          "348:  exit ;;",
          "349:     sun*:*:4.2BSD:*)",
          "350:  UNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`",
          "351:  test \"x${UNAME_RELEASE}\" = \"x\" && UNAME_RELEASE=3",
          "352:  case \"`/bin/arch`\" in",
          "353:      sun3)",
          "354:   echo m68k-sun-sunos${UNAME_RELEASE}",
          "355:   ;;",
          "356:      sun4)",
          "357:   echo sparc-sun-sunos${UNAME_RELEASE}",
          "358:   ;;",
          "359:  esac",
          "360:  exit ;;",
          "361:     aushp:SunOS:*:*)",
          "362:  echo sparc-auspex-sunos${UNAME_RELEASE}",
          "363:  exit ;;",
          "364:     # The situation for MiNT is a little confusing.  The machine name",
          "365:     # can be virtually everything (everything which is not",
          "366:     # \"atarist\" or \"atariste\" at least should have a processor",
          "367:     # > m68000).  The system name ranges from \"MiNT\" over \"FreeMiNT\"",
          "368:     # to the lowercase version \"mint\" (or \"freemint\").  Finally",
          "369:     # the system name \"TOS\" denotes a system which is actually not",
          "370:     # MiNT.  But MiNT is downward compatible to TOS, so this should",
          "371:     # be no problem.",
          "372:     atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)",
          "373:         echo m68k-atari-mint${UNAME_RELEASE}",
          "374:  exit ;;",
          "375:     atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)",
          "376:  echo m68k-atari-mint${UNAME_RELEASE}",
          "377:         exit ;;",
          "379:         echo m68k-atari-mint${UNAME_RELEASE}",
          "380:  exit ;;",
          "381:     milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)",
          "382:         echo m68k-milan-mint${UNAME_RELEASE}",
          "383:         exit ;;",
          "384:     hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)",
          "385:         echo m68k-hades-mint${UNAME_RELEASE}",
          "386:         exit ;;",
          "388:         echo m68k-unknown-mint${UNAME_RELEASE}",
          "389:         exit ;;",
          "390:     m68k:machten:*:*)",
          "391:  echo m68k-apple-machten${UNAME_RELEASE}",
          "392:  exit ;;",
          "393:     powerpc:machten:*:*)",
          "394:  echo powerpc-apple-machten${UNAME_RELEASE}",
          "395:  exit ;;",
          "396:     RISC*:Mach:*:*)",
          "397:  echo mips-dec-mach_bsd4.3",
          "398:  exit ;;",
          "399:     RISC*:ULTRIX:*:*)",
          "400:  echo mips-dec-ultrix${UNAME_RELEASE}",
          "401:  exit ;;",
          "402:     VAX*:ULTRIX*:*:*)",
          "403:  echo vax-dec-ultrix${UNAME_RELEASE}",
          "404:  exit ;;",
          "405:     2020:CLIX:*:* | 2430:CLIX:*:*)",
          "406:  echo clipper-intergraph-clix${UNAME_RELEASE}",
          "407:  exit ;;",
          "408:     mips:*:*:UMIPS | mips:*:*:RISCos)",
          "409:  eval $set_cc_for_build",
          "410:  sed 's/^ //' << EOF >$dummy.c",
          "411: #ifdef __cplusplus",
          "413:  int main (int argc, char *argv[]) {",
          "414: #else",
          "415:  int main (argc, argv) int argc; char *argv[]; {",
          "416: #endif",
          "417:  #if defined (host_mips) && defined (MIPSEB)",
          "418:  #if defined (SYSTYPE_SYSV)",
          "419:    printf (\"mips-mips-riscos%ssysv\\n\", argv[1]); exit (0);",
          "420:  #endif",
          "421:  #if defined (SYSTYPE_SVR4)",
          "422:    printf (\"mips-mips-riscos%ssvr4\\n\", argv[1]); exit (0);",
          "423:  #endif",
          "424:  #if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)",
          "425:    printf (\"mips-mips-riscos%sbsd\\n\", argv[1]); exit (0);",
          "426:  #endif",
          "427:  #endif",
          "428:    exit (-1);",
          "429:  }",
          "430: EOF",
          "431:  $CC_FOR_BUILD -o $dummy $dummy.c &&",
          "432:    dummyarg=`echo \"${UNAME_RELEASE}\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&",
          "433:    SYSTEM_NAME=`$dummy $dummyarg` &&",
          "434:      { echo \"$SYSTEM_NAME\"; exit; }",
          "435:  echo mips-mips-riscos${UNAME_RELEASE}",
          "436:  exit ;;",
          "437:     Motorola:PowerMAX_OS:*:*)",
          "438:  echo powerpc-motorola-powermax",
          "439:  exit ;;",
          "440:     Motorola:*:4.3:PL8-*)",
          "441:  echo powerpc-harris-powermax",
          "442:  exit ;;",
          "443:     Night_Hawk:*:*:PowerMAX_OS | Synergy:PowerMAX_OS:*:*)",
          "444:  echo powerpc-harris-powermax",
          "445:  exit ;;",
          "446:     Night_Hawk:Power_UNIX:*:*)",
          "447:  echo powerpc-harris-powerunix",
          "448:  exit ;;",
          "449:     m88k:CX/UX:7*:*)",
          "450:  echo m88k-harris-cxux7",
          "451:  exit ;;",
          "452:     m88k:*:4*:R4*)",
          "453:  echo m88k-motorola-sysv4",
          "454:  exit ;;",
          "455:     m88k:*:3*:R3*)",
          "456:  echo m88k-motorola-sysv3",
          "457:  exit ;;",
          "458:     AViiON:dgux:*:*)",
          "459:         # DG/UX returns AViiON for all architectures",
          "460:         UNAME_PROCESSOR=`/usr/bin/uname -p`",
          "461:  if [ $UNAME_PROCESSOR = mc88100 ] || [ $UNAME_PROCESSOR = mc88110 ]",
          "462:  then",
          "463:      if [ ${TARGET_BINARY_INTERFACE}x = m88kdguxelfx ] || \\",
          "464:         [ ${TARGET_BINARY_INTERFACE}x = x ]",
          "465:      then",
          "466:   echo m88k-dg-dgux${UNAME_RELEASE}",
          "467:      else",
          "468:   echo m88k-dg-dguxbcs${UNAME_RELEASE}",
          "469:      fi",
          "470:  else",
          "471:      echo i586-dg-dgux${UNAME_RELEASE}",
          "472:  fi",
          "473:   exit ;;",
          "474:     M88*:DolphinOS:*:*) # DolphinOS (SVR3)",
          "475:  echo m88k-dolphin-sysv3",
          "476:  exit ;;",
          "477:     M88*:*:R3*:*)",
          "478:  # Delta 88k system running SVR3",
          "479:  echo m88k-motorola-sysv3",
          "480:  exit ;;",
          "481:     XD88*:*:*:*) # Tektronix XD88 system running UTekV (SVR3)",
          "482:  echo m88k-tektronix-sysv3",
          "483:  exit ;;",
          "484:     Tek43[0-9][0-9]:UTek:*:*) # Tektronix 4300 system running UTek (BSD)",
          "485:  echo m68k-tektronix-bsd",
          "486:  exit ;;",
          "488:  echo mips-sgi-irix`echo ${UNAME_RELEASE}|sed -e 's/-/_/g'`",
          "489:  exit ;;",
          "490:     ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.",
          "491:  echo romp-ibm-aix     # uname -m gives an 8 hex-code CPU id",
          "492:  exit ;;               # Note that: echo \"'`uname -s`'\" gives 'AIX '",
          "493:     i*86:AIX:*:*)",
          "494:  echo i386-ibm-aix",
          "495:  exit ;;",
          "496:     ia64:AIX:*:*)",
          "497:  if [ -x /usr/bin/oslevel ] ; then",
          "498:   IBM_REV=`/usr/bin/oslevel`",
          "499:  else",
          "500:   IBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}",
          "501:  fi",
          "502:  echo ${UNAME_MACHINE}-ibm-aix${IBM_REV}",
          "503:  exit ;;",
          "505:  if grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then",
          "506:   eval $set_cc_for_build",
          "507:   sed 's/^  //' << EOF >$dummy.c",
          "508:   #include <sys/systemcfg.h>",
          "510:   main()",
          "511:    {",
          "512:    if (!__power_pc())",
          "513:     exit(1);",
          "514:    puts(\"powerpc-ibm-aix3.2.5\");",
          "515:    exit(0);",
          "516:    }",
          "517: EOF",
          "518:   if $CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy`",
          "519:   then",
          "520:    echo \"$SYSTEM_NAME\"",
          "521:   else",
          "522:    echo rs6000-ibm-aix3.2.5",
          "523:   fi",
          "524:  elif grep bos324 /usr/include/stdio.h >/dev/null 2>&1; then",
          "525:   echo rs6000-ibm-aix3.2.4",
          "526:  else",
          "527:   echo rs6000-ibm-aix3.2",
          "528:  fi",
          "529:  exit ;;",
          "531:  IBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`",
          "532:  if /usr/sbin/lsattr -El ${IBM_CPU_ID} | grep ' POWER' >/dev/null 2>&1; then",
          "533:   IBM_ARCH=rs6000",
          "534:  else",
          "535:   IBM_ARCH=powerpc",
          "536:  fi",
          "537:  if [ -x /usr/bin/oslevel ] ; then",
          "538:   IBM_REV=`/usr/bin/oslevel`",
          "539:  else",
          "540:   IBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}",
          "541:  fi",
          "542:  echo ${IBM_ARCH}-ibm-aix${IBM_REV}",
          "543:  exit ;;",
          "545:  echo rs6000-ibm-aix",
          "546:  exit ;;",
          "547:     ibmrt:4.4BSD:*|romp-ibm:BSD:*)",
          "548:  echo romp-ibm-bsd4.4",
          "549:  exit ;;",
          "550:     ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and",
          "551:  echo romp-ibm-bsd${UNAME_RELEASE}   # 4.3 with uname added to",
          "552:  exit ;;                             # report: romp-ibm BSD 4.3",
          "554:  echo rs6000-bull-bosx",
          "555:  exit ;;",
          "556:     DPX/2?00:B.O.S.:*:*)",
          "557:  echo m68k-bull-sysv3",
          "558:  exit ;;",
          "559:     9000/[34]??:4.3bsd:1.*:*)",
          "560:  echo m68k-hp-bsd",
          "561:  exit ;;",
          "562:     hp300:4.4BSD:*:* | 9000/[34]??:4.3bsd:2.*:*)",
          "563:  echo m68k-hp-bsd4.4",
          "564:  exit ;;",
          "565:     9000/[34678]??:HP-UX:*:*)",
          "566:  HPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`",
          "567:  case \"${UNAME_MACHINE}\" in",
          "568:      9000/31? )            HP_ARCH=m68000 ;;",
          "569:      9000/[34]?? )         HP_ARCH=m68k ;;",
          "570:      9000/[678][0-9][0-9])",
          "571:   if [ -x /usr/bin/getconf ]; then",
          "572:       sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`",
          "573:                     sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`",
          "574:                     case \"${sc_cpu_version}\" in",
          "575:                       523) HP_ARCH=\"hppa1.0\" ;; # CPU_PA_RISC1_0",
          "576:                       528) HP_ARCH=\"hppa1.1\" ;; # CPU_PA_RISC1_1",
          "577:                       532)                      # CPU_PA_RISC2_0",
          "578:                         case \"${sc_kernel_bits}\" in",
          "579:                           32) HP_ARCH=\"hppa2.0n\" ;;",
          "580:                           64) HP_ARCH=\"hppa2.0w\" ;;",
          "581:      '') HP_ARCH=\"hppa2.0\" ;;   # HP-UX 10.20",
          "582:                         esac ;;",
          "583:                     esac",
          "584:   fi",
          "585:   if [ \"${HP_ARCH}\" = \"\" ]; then",
          "586:       eval $set_cc_for_build",
          "587:       sed 's/^              //' << EOF >$dummy.c",
          "589:               #define _HPUX_SOURCE",
          "590:               #include <stdlib.h>",
          "591:               #include <unistd.h>",
          "593:               int main ()",
          "594:               {",
          "595:               #if defined(_SC_KERNEL_BITS)",
          "596:                   long bits = sysconf(_SC_KERNEL_BITS);",
          "597:               #endif",
          "598:                   long cpu  = sysconf (_SC_CPU_VERSION);",
          "600:                   switch (cpu)",
          "601:                {",
          "602:                case CPU_PA_RISC1_0: puts (\"hppa1.0\"); break;",
          "603:                case CPU_PA_RISC1_1: puts (\"hppa1.1\"); break;",
          "604:                case CPU_PA_RISC2_0:",
          "605:               #if defined(_SC_KERNEL_BITS)",
          "606:                    switch (bits)",
          "607:                 {",
          "608:                 case 64: puts (\"hppa2.0w\"); break;",
          "609:                 case 32: puts (\"hppa2.0n\"); break;",
          "610:                 default: puts (\"hppa2.0\"); break;",
          "611:                 } break;",
          "613:                    puts (\"hppa2.0\"); break;",
          "614:               #endif",
          "615:                default: puts (\"hppa1.0\"); break;",
          "616:                }",
          "617:                   exit (0);",
          "618:               }",
          "619: EOF",
          "620:       (CCOPTS= $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`",
          "621:       test -z \"$HP_ARCH\" && HP_ARCH=hppa",
          "622:   fi ;;",
          "623:  esac",
          "624:  if [ ${HP_ARCH} = \"hppa2.0w\" ]",
          "625:  then",
          "626:      eval $set_cc_for_build",
          "628:      # hppa2.0w-hp-hpux* has a 64-bit kernel and a compiler generating",
          "629:      # 32-bit code.  hppa64-hp-hpux* has the same kernel and a compiler",
          "630:      # generating 64-bit code.  GNU and HP use different nomenclature:",
          "631:      #",
          "632:      # $ CC_FOR_BUILD=cc ./config.guess",
          "633:      # => hppa2.0w-hp-hpux11.23",
          "634:      # $ CC_FOR_BUILD=\"cc +DA2.0w\" ./config.guess",
          "635:      # => hppa64-hp-hpux11.23",
          "637:      if echo __LP64__ | (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) |",
          "638:   grep __LP64__ >/dev/null",
          "639:      then",
          "640:   HP_ARCH=\"hppa2.0w\"",
          "641:      else",
          "642:   HP_ARCH=\"hppa64\"",
          "643:      fi",
          "644:  fi",
          "645:  echo ${HP_ARCH}-hp-hpux${HPUX_REV}",
          "646:  exit ;;",
          "647:     ia64:HP-UX:*:*)",
          "648:  HPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`",
          "649:  echo ia64-hp-hpux${HPUX_REV}",
          "650:  exit ;;",
          "651:     3050*:HI-UX:*:*)",
          "652:  eval $set_cc_for_build",
          "653:  sed 's/^ //' << EOF >$dummy.c",
          "654:  #include <unistd.h>",
          "655:  int",
          "656:  main ()",
          "657:  {",
          "658:    long cpu = sysconf (_SC_CPU_VERSION);",
          "660:       true for CPU_PA_RISC1_0.  CPU_IS_PA_RISC returns correct",
          "662:    if (CPU_IS_PA_RISC (cpu))",
          "663:      {",
          "664:        switch (cpu)",
          "665:   {",
          "666:     case CPU_PA_RISC1_0: puts (\"hppa1.0-hitachi-hiuxwe2\"); break;",
          "667:     case CPU_PA_RISC1_1: puts (\"hppa1.1-hitachi-hiuxwe2\"); break;",
          "668:     case CPU_PA_RISC2_0: puts (\"hppa2.0-hitachi-hiuxwe2\"); break;",
          "669:     default: puts (\"hppa-hitachi-hiuxwe2\"); break;",
          "670:   }",
          "671:      }",
          "672:    else if (CPU_IS_HP_MC68K (cpu))",
          "673:      puts (\"m68k-hitachi-hiuxwe2\");",
          "674:    else puts (\"unknown-hitachi-hiuxwe2\");",
          "675:    exit (0);",
          "676:  }",
          "677: EOF",
          "678:  $CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy` &&",
          "679:   { echo \"$SYSTEM_NAME\"; exit; }",
          "680:  echo unknown-hitachi-hiuxwe2",
          "681:  exit ;;",
          "682:     9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:* )",
          "683:  echo hppa1.1-hp-bsd",
          "684:  exit ;;",
          "685:     9000/8??:4.3bsd:*:*)",
          "686:  echo hppa1.0-hp-bsd",
          "687:  exit ;;",
          "689:  echo hppa1.0-hp-mpeix",
          "690:  exit ;;",
          "691:     hp7??:OSF1:*:* | hp8?[79]:OSF1:*:* )",
          "692:  echo hppa1.1-hp-osf",
          "693:  exit ;;",
          "694:     hp8??:OSF1:*:*)",
          "695:  echo hppa1.0-hp-osf",
          "696:  exit ;;",
          "697:     i*86:OSF1:*:*)",
          "698:  if [ -x /usr/sbin/sysversion ] ; then",
          "699:      echo ${UNAME_MACHINE}-unknown-osf1mk",
          "700:  else",
          "701:      echo ${UNAME_MACHINE}-unknown-osf1",
          "702:  fi",
          "703:  exit ;;",
          "704:     parisc*:Lites*:*:*)",
          "705:  echo hppa1.1-hp-lites",
          "706:  exit ;;",
          "707:     C1*:ConvexOS:*:* | convex:ConvexOS:C1*:*)",
          "708:  echo c1-convex-bsd",
          "709:         exit ;;",
          "710:     C2*:ConvexOS:*:* | convex:ConvexOS:C2*:*)",
          "711:  if getsysinfo -f scalar_acc",
          "712:  then echo c32-convex-bsd",
          "713:  else echo c2-convex-bsd",
          "714:  fi",
          "715:         exit ;;",
          "716:     C34*:ConvexOS:*:* | convex:ConvexOS:C34*:*)",
          "717:  echo c34-convex-bsd",
          "718:         exit ;;",
          "719:     C38*:ConvexOS:*:* | convex:ConvexOS:C38*:*)",
          "720:  echo c38-convex-bsd",
          "721:         exit ;;",
          "722:     C4*:ConvexOS:*:* | convex:ConvexOS:C4*:*)",
          "723:  echo c4-convex-bsd",
          "724:         exit ;;",
          "725:     CRAY*Y-MP:*:*:*)",
          "726:  echo ymp-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'",
          "727:  exit ;;",
          "728:     CRAY*[A-Z]90:*:*:*)",
          "729:  echo ${UNAME_MACHINE}-cray-unicos${UNAME_RELEASE} \\",
          "730:  | sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\",
          "731:        -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\",
          "732:        -e 's/\\.[^.]*$/.X/'",
          "733:  exit ;;",
          "734:     CRAY*TS:*:*:*)",
          "735:  echo t90-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'",
          "736:  exit ;;",
          "737:     CRAY*T3E:*:*:*)",
          "738:  echo alphaev5-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'",
          "739:  exit ;;",
          "740:     CRAY*SV1:*:*:*)",
          "741:  echo sv1-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'",
          "742:  exit ;;",
          "744:  echo craynv-cray-unicosmp${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'",
          "745:  exit ;;",
          "746:     F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)",
          "747:  FUJITSU_PROC=`uname -m | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`",
          "748:         FUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\\///'`",
          "749:         FUJITSU_REL=`echo ${UNAME_RELEASE} | sed -e 's/ /_/'`",
          "750:         echo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"",
          "751:         exit ;;",
          "752:     5000:UNIX_System_V:4.*:*)",
          "753:         FUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\\///'`",
          "754:         FUJITSU_REL=`echo ${UNAME_RELEASE} | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/ /_/'`",
          "755:         echo \"sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"",
          "756:  exit ;;",
          "757:     i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)",
          "758:  echo ${UNAME_MACHINE}-pc-bsdi${UNAME_RELEASE}",
          "759:  exit ;;",
          "760:     sparc*:BSD/OS:*:*)",
          "761:  echo sparc-unknown-bsdi${UNAME_RELEASE}",
          "762:  exit ;;",
          "764:  echo ${UNAME_MACHINE}-unknown-bsdi${UNAME_RELEASE}",
          "765:  exit ;;",
          "767:  echo ${UNAME_MACHINE}-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`",
          "768:  exit ;;",
          "769:     i*:CYGWIN*:*)",
          "770:  echo ${UNAME_MACHINE}-pc-cygwin",
          "771:  exit ;;",
          "772:     i*:MINGW*:*)",
          "773:  echo ${UNAME_MACHINE}-pc-mingw32",
          "774:  exit ;;",
          "775:     i*:windows32*:*)",
          "776:      # uname -m includes \"-pc\" on this system.",
          "777:      echo ${UNAME_MACHINE}-mingw32",
          "778:  exit ;;",
          "779:     i*:PW*:*)",
          "780:  echo ${UNAME_MACHINE}-pc-pw32",
          "781:  exit ;;",
          "782:     x86:Interix*:[34]*)",
          "783:  echo i586-pc-interix${UNAME_RELEASE}|sed -e 's/\\..*//'",
          "784:  exit ;;",
          "785:     [345]86:Windows_95:* | [345]86:Windows_98:* | [345]86:Windows_NT:*)",
          "786:  echo i${UNAME_MACHINE}-pc-mks",
          "787:  exit ;;",
          "788:     i*:Windows_NT*:* | Pentium*:Windows_NT*:*)",
          "789:  # How do we know it's Interix rather than the generic POSIX subsystem?",
          "790:  # It also conflicts with pre-2.0 versions of AT&T UWIN. Should we",
          "791:  # UNAME_MACHINE based on the output of uname instead of i386?",
          "792:  echo i586-pc-interix",
          "793:  exit ;;",
          "794:     i*:UWIN*:*)",
          "795:  echo ${UNAME_MACHINE}-pc-uwin",
          "796:  exit ;;",
          "797:     amd64:CYGWIN*:*:* | x86_64:CYGWIN*:*:*)",
          "798:  echo x86_64-unknown-cygwin",
          "799:  exit ;;",
          "800:     p*:CYGWIN*:*)",
          "801:  echo powerpcle-unknown-cygwin",
          "802:  exit ;;",
          "803:     prep*:SunOS:5.*:*)",
          "804:  echo powerpcle-unknown-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`",
          "805:  exit ;;",
          "807:  # the GNU system",
          "808:  echo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown-gnu`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`",
          "809:  exit ;;",
          "811:  # other systems with GNU libc and userland",
          "812:  echo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr '[A-Z]' '[a-z]'``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-gnu",
          "813:  exit ;;",
          "814:     i*86:Minix:*:*)",
          "815:  echo ${UNAME_MACHINE}-pc-minix",
          "816:  exit ;;",
          "817:     arm*:Linux:*:*)",
          "818:  echo ${UNAME_MACHINE}-unknown-linux-gnu",
          "819:  exit ;;",
          "820:     cris:Linux:*:*)",
          "821:  echo cris-axis-linux-gnu",
          "822:  exit ;;",
          "823:     crisv32:Linux:*:*)",
          "824:  echo crisv32-axis-linux-gnu",
          "825:  exit ;;",
          "826:     frv:Linux:*:*)",
          "827:      echo frv-unknown-linux-gnu",
          "828:  exit ;;",
          "829:     ia64:Linux:*:*)",
          "830:  echo ${UNAME_MACHINE}-unknown-linux-gnu",
          "831:  exit ;;",
          "832:     m32r*:Linux:*:*)",
          "833:  echo ${UNAME_MACHINE}-unknown-linux-gnu",
          "834:  exit ;;",
          "835:     m68*:Linux:*:*)",
          "836:  echo ${UNAME_MACHINE}-unknown-linux-gnu",
          "837:  exit ;;",
          "838:     mips:Linux:*:*)",
          "839:  eval $set_cc_for_build",
          "840:  sed 's/^ //' << EOF >$dummy.c",
          "841:  #undef CPU",
          "842:  #undef mips",
          "843:  #undef mipsel",
          "844:  #if defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL) || defined(MIPSEL)",
          "845:  CPU=mipsel",
          "846:  #else",
          "847:  #if defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) || defined(MIPSEB)",
          "848:  CPU=mips",
          "849:  #else",
          "850:  CPU=",
          "851:  #endif",
          "852:  #endif",
          "853: EOF",
          "854:  eval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep ^CPU=`",
          "855:  test x\"${CPU}\" != x && { echo \"${CPU}-unknown-linux-gnu\"; exit; }",
          "856:  ;;",
          "857:     mips64:Linux:*:*)",
          "858:  eval $set_cc_for_build",
          "859:  sed 's/^ //' << EOF >$dummy.c",
          "860:  #undef CPU",
          "861:  #undef mips64",
          "862:  #undef mips64el",
          "863:  #if defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL) || defined(MIPSEL)",
          "864:  CPU=mips64el",
          "865:  #else",
          "866:  #if defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) || defined(MIPSEB)",
          "867:  CPU=mips64",
          "868:  #else",
          "869:  CPU=",
          "870:  #endif",
          "871:  #endif",
          "872: EOF",
          "873:  eval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep ^CPU=`",
          "874:  test x\"${CPU}\" != x && { echo \"${CPU}-unknown-linux-gnu\"; exit; }",
          "875:  ;;",
          "876:     or32:Linux:*:*)",
          "877:  echo or32-unknown-linux-gnu",
          "878:  exit ;;",
          "879:     ppc:Linux:*:*)",
          "880:  echo powerpc-unknown-linux-gnu",
          "881:  exit ;;",
          "882:     ppc64:Linux:*:*)",
          "883:  echo powerpc64-unknown-linux-gnu",
          "884:  exit ;;",
          "885:     alpha:Linux:*:*)",
          "886:  case `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in",
          "887:    EV5)   UNAME_MACHINE=alphaev5 ;;",
          "888:    EV56)  UNAME_MACHINE=alphaev56 ;;",
          "889:    PCA56) UNAME_MACHINE=alphapca56 ;;",
          "890:    PCA57) UNAME_MACHINE=alphapca56 ;;",
          "891:    EV6)   UNAME_MACHINE=alphaev6 ;;",
          "892:    EV67)  UNAME_MACHINE=alphaev67 ;;",
          "893:    EV68*) UNAME_MACHINE=alphaev68 ;;",
          "894:         esac",
          "895:  objdump --private-headers /bin/sh | grep ld.so.1 >/dev/null",
          "896:  if test \"$?\" = 0 ; then LIBC=\"libc1\" ; else LIBC=\"\" ; fi",
          "897:  echo ${UNAME_MACHINE}-unknown-linux-gnu${LIBC}",
          "898:  exit ;;",
          "899:     parisc:Linux:*:* | hppa:Linux:*:*)",
          "900:  # Look for CPU level",
          "901:  case `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in",
          "902:    PA7*) echo hppa1.1-unknown-linux-gnu ;;",
          "903:    PA8*) echo hppa2.0-unknown-linux-gnu ;;",
          "905:  esac",
          "906:  exit ;;",
          "907:     parisc64:Linux:*:* | hppa64:Linux:*:*)",
          "908:  echo hppa64-unknown-linux-gnu",
          "909:  exit ;;",
          "910:     s390:Linux:*:* | s390x:Linux:*:*)",
          "911:  echo ${UNAME_MACHINE}-ibm-linux",
          "912:  exit ;;",
          "913:     sh64*:Linux:*:*)",
          "914:      echo ${UNAME_MACHINE}-unknown-linux-gnu",
          "915:  exit ;;",
          "916:     sh*:Linux:*:*)",
          "917:  echo ${UNAME_MACHINE}-unknown-linux-gnu",
          "918:  exit ;;",
          "919:     sparc:Linux:*:* | sparc64:Linux:*:*)",
          "920:  echo ${UNAME_MACHINE}-unknown-linux-gnu",
          "921:  exit ;;",
          "922:     x86_64:Linux:*:*)",
          "923:  echo x86_64-unknown-linux-gnu",
          "924:  exit ;;",
          "925:     i*86:Linux:*:*)",
          "926:  # The BFD linker knows what the default object file format is, so",
          "927:  # first see if it will tell us. cd to the root directory to prevent",
          "928:  # problems with other programs or directories called `ld' in the path.",
          "929:  # Set LC_ALL=C to ensure ld outputs messages in English.",
          "930:  ld_supported_targets=`cd /; LC_ALL=C ld --help 2>&1 \\",
          "931:     | sed -ne '/supported targets:/!d",
          "932:         s/[  ][  ]*/ /g",
          "933:         s/.*supported targets: *//",
          "934:         s/ .*//",
          "935:         p'`",
          "936:         case \"$ld_supported_targets\" in",
          "937:    elf32-i386)",
          "938:   TENTATIVE=\"${UNAME_MACHINE}-pc-linux-gnu\"",
          "939:   ;;",
          "940:    a.out-i386-linux)",
          "941:   echo \"${UNAME_MACHINE}-pc-linux-gnuaout\"",
          "942:   exit ;;",
          "943:    coff-i386)",
          "944:   echo \"${UNAME_MACHINE}-pc-linux-gnucoff\"",
          "945:   exit ;;",
          "946:    \"\")",
          "947:   # Either a pre-BFD a.out linker (linux-gnuoldld) or",
          "948:   # one that does not give us useful --help.",
          "949:   echo \"${UNAME_MACHINE}-pc-linux-gnuoldld\"",
          "950:   exit ;;",
          "951:  esac",
          "952:  # Determine whether the default compiler is a.out or elf",
          "953:  eval $set_cc_for_build",
          "954:  sed 's/^ //' << EOF >$dummy.c",
          "955:  #include <features.h>",
          "956:  #ifdef __ELF__",
          "957:  # ifdef __GLIBC__",
          "958:  #  if __GLIBC__ >= 2",
          "959:  LIBC=gnu",
          "960:  #  else",
          "961:  LIBC=gnulibc1",
          "962:  #  endif",
          "963:  # else",
          "964:  LIBC=gnulibc1",
          "965:  # endif",
          "966:  #else",
          "967:  #ifdef __INTEL_COMPILER",
          "968:  LIBC=gnu",
          "969:  #else",
          "970:  LIBC=gnuaout",
          "971:  #endif",
          "972:  #endif",
          "973:  #ifdef __dietlibc__",
          "974:  LIBC=dietlibc",
          "975:  #endif",
          "976: EOF",
          "977:  eval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep ^LIBC=`",
          "978:  test x\"${LIBC}\" != x && {",
          "979:   echo \"${UNAME_MACHINE}-pc-linux-${LIBC}\"",
          "980:   exit",
          "981:  }",
          "982:  test x\"${TENTATIVE}\" != x && { echo \"${TENTATIVE}\"; exit; }",
          "983:  ;;",
          "984:     i*86:DYNIX/ptx:4*:*)",
          "985:  # ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.",
          "986:  # earlier versions are messed up and put the nodename in both",
          "987:  # sysname and nodename.",
          "988:  echo i386-sequent-sysv4",
          "989:  exit ;;",
          "990:     i*86:UNIX_SV:4.2MP:2.*)",
          "991:         # Unixware is an offshoot of SVR4, but it has its own version",
          "992:         # number series starting with 2...",
          "993:         # I am not positive that other SVR4 systems won't match this,",
          "994:  # I just have to hope.  -- rms.",
          "995:         # Use sysv4.2uw... so that sysv4* matches it.",
          "996:  echo ${UNAME_MACHINE}-pc-sysv4.2uw${UNAME_VERSION}",
          "997:  exit ;;",
          "998:     i*86:OS/2:*:*)",
          "999:  # If we were able to find `uname', then EMX Unix compatibility",
          "1000:  # is probably installed.",
          "1001:  echo ${UNAME_MACHINE}-pc-os2-emx",
          "1002:  exit ;;",
          "1003:     i*86:XTS-300:*:STOP)",
          "1004:  echo ${UNAME_MACHINE}-unknown-stop",
          "1005:  exit ;;",
          "1006:     i*86:atheos:*:*)",
          "1007:  echo ${UNAME_MACHINE}-unknown-atheos",
          "1008:  exit ;;",
          "1009:     i*86:syllable:*:*)",
          "1010:  echo ${UNAME_MACHINE}-pc-syllable",
          "1011:  exit ;;",
          "1012:     i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.0*:*)",
          "1013:  echo i386-unknown-lynxos${UNAME_RELEASE}",
          "1014:  exit ;;",
          "1015:     i*86:*DOS:*:*)",
          "1016:  echo ${UNAME_MACHINE}-pc-msdosdjgpp",
          "1017:  exit ;;",
          "1018:     i*86:*:4.*:* | i*86:SYSTEM_V:4.*:*)",
          "1019:  UNAME_REL=`echo ${UNAME_RELEASE} | sed 's/\\/MP$//'`",
          "1020:  if grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then",
          "1021:   echo ${UNAME_MACHINE}-univel-sysv${UNAME_REL}",
          "1022:  else",
          "1023:   echo ${UNAME_MACHINE}-pc-sysv${UNAME_REL}",
          "1024:  fi",
          "1025:  exit ;;",
          "1026:     i*86:*:5:[678]*)",
          "1027:      # UnixWare 7.x, OpenUNIX and OpenServer 6.",
          "1028:  case `/bin/uname -X | grep \"^Machine\"` in",
          "1032:  esac",
          "1033:  echo ${UNAME_MACHINE}-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}",
          "1034:  exit ;;",
          "1035:     i*86:*:3.2:*)",
          "1036:  if test -f /usr/options/cb.name; then",
          "1037:   UNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`",
          "1038:   echo ${UNAME_MACHINE}-pc-isc$UNAME_REL",
          "1039:  elif /bin/uname -X 2>/dev/null >/dev/null ; then",
          "1040:   UNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`",
          "1041:   (/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486",
          "1042:   (/bin/uname -X|grep '^Machine.*Pentium' >/dev/null) \\",
          "1043:    && UNAME_MACHINE=i586",
          "1044:   (/bin/uname -X|grep '^Machine.*Pent *II' >/dev/null) \\",
          "1045:    && UNAME_MACHINE=i686",
          "1046:   (/bin/uname -X|grep '^Machine.*Pentium Pro' >/dev/null) \\",
          "1047:    && UNAME_MACHINE=i686",
          "1048:   echo ${UNAME_MACHINE}-pc-sco$UNAME_REL",
          "1049:  else",
          "1050:   echo ${UNAME_MACHINE}-pc-sysv32",
          "1051:  fi",
          "1052:  exit ;;",
          "1053:     pc:*:*:*)",
          "1054:  # Left here for compatibility:",
          "1055:         # uname -m prints for DJGPP always 'pc', but it prints nothing about",
          "1056:         # the processor, so we play safe by assuming i386.",
          "1057:  echo i386-pc-msdosdjgpp",
          "1058:         exit ;;",
          "1059:     Intel:Mach:3*:*)",
          "1060:  echo i386-pc-mach3",
          "1061:  exit ;;",
          "1062:     paragon:*:*:*)",
          "1063:  echo i860-intel-osf1",
          "1064:  exit ;;",
          "1065:     i860:*:4.*:*) # i860-SVR4",
          "1066:  if grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then",
          "1067:    echo i860-stardent-sysv${UNAME_RELEASE} # Stardent Vistra i860-SVR4",
          "1068:  else # Add other i860-SVR4 vendors below as they are discovered.",
          "1069:    echo i860-unknown-sysv${UNAME_RELEASE}  # Unknown i860-SVR4",
          "1070:  fi",
          "1071:  exit ;;",
          "1072:     mini*:CTIX:SYS*5:*)",
          "1073:  # \"miniframe\"",
          "1074:  echo m68010-convergent-sysv",
          "1075:  exit ;;",
          "1076:     mc68k:UNIX:SYSTEM5:3.51m)",
          "1077:  echo m68k-convergent-sysv",
          "1078:  exit ;;",
          "1079:     M680?0:D-NIX:5.3:*)",
          "1080:  echo m68k-diab-dnix",
          "1081:  exit ;;",
          "1082:     M68*:*:R3V[5678]*:*)",
          "1083:  test -r /sysV68 && { echo 'm68k-motorola-sysv'; exit; } ;;",
          "1084:     3[345]??:*:4.0:3.0 | 3[34]??A:*:4.0:3.0 | 3[34]??,*:*:4.0:3.0 | 3[34]??/*:*:4.0:3.0 | 4400:*:4.0:3.0 | 4850:*:4.0:3.0 | SKA40:*:4.0:3.0 | SDS2:*:4.0:3.0 | SHG2:*:4.0:3.0 | S7501*:*:4.0:3.0)",
          "1085:  OS_REL=''",
          "1086:  test -r /etc/.relid \\",
          "1087:  && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`",
          "1088:  /bin/uname -p 2>/dev/null | grep 86 >/dev/null \\",
          "1089:    && { echo i486-ncr-sysv4.3${OS_REL}; exit; }",
          "1090:  /bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\",
          "1091:    && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;",
          "1092:     3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)",
          "1093:         /bin/uname -p 2>/dev/null | grep 86 >/dev/null \\",
          "1094:           && { echo i486-ncr-sysv4; exit; } ;;",
          "1095:     m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)",
          "1096:  echo m68k-unknown-lynxos${UNAME_RELEASE}",
          "1097:  exit ;;",
          "1098:     mc68030:UNIX_System_V:4.*:*)",
          "1099:  echo m68k-atari-sysv4",
          "1100:  exit ;;",
          "1101:     TSUNAMI:LynxOS:2.*:*)",
          "1102:  echo sparc-unknown-lynxos${UNAME_RELEASE}",
          "1103:  exit ;;",
          "1104:     rs6000:LynxOS:2.*:*)",
          "1105:  echo rs6000-unknown-lynxos${UNAME_RELEASE}",
          "1106:  exit ;;",
          "1107:     PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.0*:*)",
          "1108:  echo powerpc-unknown-lynxos${UNAME_RELEASE}",
          "1109:  exit ;;",
          "1110:     SM[BE]S:UNIX_SV:*:*)",
          "1111:  echo mips-dde-sysv${UNAME_RELEASE}",
          "1112:  exit ;;",
          "1113:     RM*:ReliantUNIX-*:*:*)",
          "1114:  echo mips-sni-sysv4",
          "1115:  exit ;;",
          "1116:     RM*:SINIX-*:*:*)",
          "1117:  echo mips-sni-sysv4",
          "1118:  exit ;;",
          "1120:  if uname -p 2>/dev/null >/dev/null ; then",
          "1121:   UNAME_MACHINE=`(uname -p) 2>/dev/null`",
          "1122:   echo ${UNAME_MACHINE}-sni-sysv4",
          "1123:  else",
          "1124:   echo ns32k-sni-sysv",
          "1125:  fi",
          "1126:  exit ;;",
          "1127:     PENTIUM:*:4.0*:*) # Unisys `ClearPath HMP IX 4000' SVR4/MP effort",
          "1128:                       # says <Richard.M.Bartel@ccMail.Census.GOV>",
          "1129:         echo i586-unisys-sysv4",
          "1130:         exit ;;",
          "1132:  # From Gerald Hewes <hewes@openmarket.com>.",
          "1133:  # How about differentiating between stratus architectures? -djm",
          "1134:  echo hppa1.1-stratus-sysv4",
          "1135:  exit ;;",
          "1137:  # From seanf@swdc.stratus.com.",
          "1138:  echo i860-stratus-sysv4",
          "1139:  exit ;;",
          "1140:     i*86:VOS:*:*)",
          "1141:  # From Paul.Green@stratus.com.",
          "1142:  echo ${UNAME_MACHINE}-stratus-vos",
          "1143:  exit ;;",
          "1145:  # From Paul.Green@stratus.com.",
          "1146:  echo hppa1.1-stratus-vos",
          "1147:  exit ;;",
          "1148:     mc68*:A/UX:*:*)",
          "1149:  echo m68k-apple-aux${UNAME_RELEASE}",
          "1150:  exit ;;",
          "1151:     news*:NEWS-OS:6*:*)",
          "1152:  echo mips-sony-newsos6",
          "1153:  exit ;;",
          "1154:     R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)",
          "1155:  if [ -d /usr/nec ]; then",
          "1156:          echo mips-nec-sysv${UNAME_RELEASE}",
          "1157:  else",
          "1158:          echo mips-unknown-sysv${UNAME_RELEASE}",
          "1159:  fi",
          "1160:         exit ;;",
          "1161:     BeBox:BeOS:*:*) # BeOS running on hardware made by Be, PPC only.",
          "1162:  echo powerpc-be-beos",
          "1163:  exit ;;",
          "1164:     BeMac:BeOS:*:*) # BeOS running on Mac or Mac clone, PPC only.",
          "1165:  echo powerpc-apple-beos",
          "1166:  exit ;;",
          "1167:     BePC:BeOS:*:*) # BeOS running on Intel PC compatible.",
          "1168:  echo i586-pc-beos",
          "1169:  exit ;;",
          "1170:     SX-4:SUPER-UX:*:*)",
          "1171:  echo sx4-nec-superux${UNAME_RELEASE}",
          "1172:  exit ;;",
          "1173:     SX-5:SUPER-UX:*:*)",
          "1174:  echo sx5-nec-superux${UNAME_RELEASE}",
          "1175:  exit ;;",
          "1176:     SX-6:SUPER-UX:*:*)",
          "1177:  echo sx6-nec-superux${UNAME_RELEASE}",
          "1178:  exit ;;",
          "1179:     Power*:Rhapsody:*:*)",
          "1180:  echo powerpc-apple-rhapsody${UNAME_RELEASE}",
          "1181:  exit ;;",
          "1183:  echo ${UNAME_MACHINE}-apple-rhapsody${UNAME_RELEASE}",
          "1184:  exit ;;",
          "1186:  UNAME_PROCESSOR=`uname -p` || UNAME_PROCESSOR=unknown",
          "1187:  case $UNAME_PROCESSOR in",
          "1189:      unknown) UNAME_PROCESSOR=powerpc ;;",
          "1190:  esac",
          "1191:  echo ${UNAME_PROCESSOR}-apple-darwin${UNAME_RELEASE}",
          "1192:  exit ;;",
          "1194:  UNAME_PROCESSOR=`uname -p`",
          "1195:  if test \"$UNAME_PROCESSOR\" = \"x86\"; then",
          "1196:   UNAME_PROCESSOR=i386",
          "1197:   UNAME_MACHINE=pc",
          "1198:  fi",
          "1199:  echo ${UNAME_PROCESSOR}-${UNAME_MACHINE}-nto-qnx${UNAME_RELEASE}",
          "1200:  exit ;;",
          "1202:  echo i386-pc-qnx",
          "1203:  exit ;;",
          "1204:     NSE-?:NONSTOP_KERNEL:*:*)",
          "1205:  echo nse-tandem-nsk${UNAME_RELEASE}",
          "1206:  exit ;;",
          "1207:     NSR-?:NONSTOP_KERNEL:*:*)",
          "1208:  echo nsr-tandem-nsk${UNAME_RELEASE}",
          "1209:  exit ;;",
          "1211:  echo mips-compaq-nonstopux",
          "1212:  exit ;;",
          "1213:     BS2000:POSIX*:*:*)",
          "1214:  echo bs2000-siemens-sysv",
          "1215:  exit ;;",
          "1216:     DS/*:UNIX_System_V:*:*)",
          "1217:  echo ${UNAME_MACHINE}-${UNAME_SYSTEM}-${UNAME_RELEASE}",
          "1218:  exit ;;",
          "1220:  # \"uname -m\" is not consistent, so use $cputype instead. 386",
          "1221:  # is converted to i386 for consistency with other x86",
          "1222:  # operating systems.",
          "1223:  if test \"$cputype\" = \"386\"; then",
          "1224:      UNAME_MACHINE=i386",
          "1225:  else",
          "1226:      UNAME_MACHINE=\"$cputype\"",
          "1227:  fi",
          "1228:  echo ${UNAME_MACHINE}-unknown-plan9",
          "1229:  exit ;;",
          "1231:  echo pdp10-unknown-tops10",
          "1232:  exit ;;",
          "1234:  echo pdp10-unknown-tenex",
          "1235:  exit ;;",
          "1236:     KS10:TOPS-20:*:* | KL10:TOPS-20:*:* | TYPE4:TOPS-20:*:*)",
          "1237:  echo pdp10-dec-tops20",
          "1238:  exit ;;",
          "1239:     XKL-1:TOPS-20:*:* | TYPE5:TOPS-20:*:*)",
          "1240:  echo pdp10-xkl-tops20",
          "1241:  exit ;;",
          "1243:  echo pdp10-unknown-tops20",
          "1244:  exit ;;",
          "1246:  echo pdp10-unknown-its",
          "1247:  exit ;;",
          "1248:     SEI:*:*:SEIUX)",
          "1249:         echo mips-sei-seiux${UNAME_RELEASE}",
          "1250:  exit ;;",
          "1252:  echo ${UNAME_MACHINE}-unknown-dragonfly`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`",
          "1253:  exit ;;",
          "1255:      UNAME_MACHINE=`(uname -p) 2>/dev/null`",
          "1256:  case \"${UNAME_MACHINE}\" in",
          "1257:      A*) echo alpha-dec-vms ; exit ;;",
          "1258:      I*) echo ia64-dec-vms ; exit ;;",
          "1259:      V*) echo vax-dec-vms ; exit ;;",
          "1260:  esac ;;",
          "1262:  echo i386-pc-xenix",
          "1263:  exit ;;",
          "1264:     i*86:skyos:*:*)",
          "1265:  echo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE}` | sed -e 's/ .*$//'",
          "1266:  exit ;;",
          "1267: esac",
          "1269: #echo '(No uname command or uname output not recognized.)' 1>&2",
          "1270: #echo \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" 1>&2",
          "1272: eval $set_cc_for_build",
          "1273: cat >$dummy.c <<EOF",
          "1274: #ifdef _SEQUENT_",
          "1275: # include <sys/types.h>",
          "1276: # include <sys/utsname.h>",
          "1277: #endif",
          "1278: main ()",
          "1279: {",
          "1280: #if defined (sony)",
          "1281: #if defined (MIPSEB)",
          "1284:   printf (\"mips-sony-bsd\\n\"); exit (0);",
          "1285: #else",
          "1286: #include <sys/param.h>",
          "1287:   printf (\"m68k-sony-newsos%s\\n\",",
          "1288: #ifdef NEWSOS4",
          "1289:           \"4\"",
          "1290: #else",
          "1291:    \"\"",
          "1292: #endif",
          "1293:          ); exit (0);",
          "1294: #endif",
          "1295: #endif",
          "1297: #if defined (__arm) && defined (__acorn) && defined (__unix)",
          "1298:   printf (\"arm-acorn-riscix\\n\"); exit (0);",
          "1299: #endif",
          "1301: #if defined (hp300) && !defined (hpux)",
          "1302:   printf (\"m68k-hp-bsd\\n\"); exit (0);",
          "1303: #endif",
          "1305: #if defined (NeXT)",
          "1306: #if !defined (__ARCHITECTURE__)",
          "1307: #define __ARCHITECTURE__ \"m68k\"",
          "1308: #endif",
          "1309:   int version;",
          "1310:   version=`(hostinfo | sed -n 's/.*NeXT Mach \\([0-9]*\\).*/\\1/p') 2>/dev/null`;",
          "1311:   if (version < 4)",
          "1312:     printf (\"%s-next-nextstep%d\\n\", __ARCHITECTURE__, version);",
          "1313:   else",
          "1314:     printf (\"%s-next-openstep%d\\n\", __ARCHITECTURE__, version);",
          "1315:   exit (0);",
          "1316: #endif",
          "1318: #if defined (MULTIMAX) || defined (n16)",
          "1319: #if defined (UMAXV)",
          "1320:   printf (\"ns32k-encore-sysv\\n\"); exit (0);",
          "1321: #else",
          "1322: #if defined (CMU)",
          "1323:   printf (\"ns32k-encore-mach\\n\"); exit (0);",
          "1324: #else",
          "1325:   printf (\"ns32k-encore-bsd\\n\"); exit (0);",
          "1326: #endif",
          "1327: #endif",
          "1328: #endif",
          "1330: #if defined (__386BSD__)",
          "1331:   printf (\"i386-pc-bsd\\n\"); exit (0);",
          "1332: #endif",
          "1334: #if defined (sequent)",
          "1335: #if defined (i386)",
          "1336:   printf (\"i386-sequent-dynix\\n\"); exit (0);",
          "1337: #endif",
          "1338: #if defined (ns32000)",
          "1339:   printf (\"ns32k-sequent-dynix\\n\"); exit (0);",
          "1340: #endif",
          "1341: #endif",
          "1343: #if defined (_SEQUENT_)",
          "1344:     struct utsname un;",
          "1346:     uname(&un);",
          "1348:     if (strncmp(un.version, \"V2\", 2) == 0) {",
          "1349:  printf (\"i386-sequent-ptx2\\n\"); exit (0);",
          "1350:     }",
          "1352:  printf (\"i386-sequent-ptx1\\n\"); exit (0);",
          "1353:     }",
          "1354:     printf (\"i386-sequent-ptx\\n\"); exit (0);",
          "1356: #endif",
          "1358: #if defined (vax)",
          "1359: # if !defined (ultrix)",
          "1360: #  include <sys/param.h>",
          "1361: #  if defined (BSD)",
          "1362: #   if BSD == 43",
          "1363:       printf (\"vax-dec-bsd4.3\\n\"); exit (0);",
          "1364: #   else",
          "1365: #    if BSD == 199006",
          "1366:       printf (\"vax-dec-bsd4.3reno\\n\"); exit (0);",
          "1367: #    else",
          "1368:       printf (\"vax-dec-bsd\\n\"); exit (0);",
          "1369: #    endif",
          "1370: #   endif",
          "1371: #  else",
          "1372:     printf (\"vax-dec-bsd\\n\"); exit (0);",
          "1373: #  endif",
          "1374: # else",
          "1375:     printf (\"vax-dec-ultrix\\n\"); exit (0);",
          "1376: # endif",
          "1377: #endif",
          "1379: #if defined (alliant) && defined (i860)",
          "1380:   printf (\"i860-alliant-bsd\\n\"); exit (0);",
          "1381: #endif",
          "1383:   exit (1);",
          "1384: }",
          "1385: EOF",
          "1387: $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null && SYSTEM_NAME=`$dummy` &&",
          "1388:  { echo \"$SYSTEM_NAME\"; exit; }",
          "1390: # Apollos put the system type in the environment.",
          "1392: test -d /usr/apollo && { echo ${ISP}-apollo-${SYSTYPE}; exit; }",
          "1394: # Convex versions that predate uname can use getsysinfo(1)",
          "1396: if [ -x /usr/convex/getsysinfo ]",
          "1397: then",
          "1398:     case `getsysinfo -f cpu_type` in",
          "1399:     c1*)",
          "1400:  echo c1-convex-bsd",
          "1401:  exit ;;",
          "1402:     c2*)",
          "1403:  if getsysinfo -f scalar_acc",
          "1404:  then echo c32-convex-bsd",
          "1405:  else echo c2-convex-bsd",
          "1406:  fi",
          "1407:  exit ;;",
          "1408:     c34*)",
          "1409:  echo c34-convex-bsd",
          "1410:  exit ;;",
          "1411:     c38*)",
          "1412:  echo c38-convex-bsd",
          "1413:  exit ;;",
          "1414:     c4*)",
          "1415:  echo c4-convex-bsd",
          "1416:  exit ;;",
          "1417:     esac",
          "1418: fi",
          "1420: cat >&2 <<EOF",
          "1421: $0: unable to guess system type",
          "1423: This script, last modified $timestamp, has failed to recognize",
          "1424: the operating system you are using. It is advised that you",
          "1425: download the most up to date version of the config scripts from",
          "1427:   http://savannah.gnu.org/cgi-bin/viewcvs/*checkout*/config/config/config.guess",
          "1428: and",
          "1429:   http://savannah.gnu.org/cgi-bin/viewcvs/*checkout*/config/config/config.sub",
          "1431: If the version you run ($0) is already up to date, please",
          "1432: send the following data and any information you think might be",
          "1433: pertinent to <config-patches@gnu.org> in order to provide the needed",
          "1434: information to handle your system.",
          "1436: config.guess timestamp = $timestamp",
          "1438: uname -m = `(uname -m) 2>/dev/null || echo unknown`",
          "1439: uname -r = `(uname -r) 2>/dev/null || echo unknown`",
          "1440: uname -s = `(uname -s) 2>/dev/null || echo unknown`",
          "1441: uname -v = `(uname -v) 2>/dev/null || echo unknown`",
          "1443: /usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null`",
          "1444: /bin/uname -X     = `(/bin/uname -X) 2>/dev/null`",
          "1446: hostinfo               = `(hostinfo) 2>/dev/null`",
          "1447: /bin/universe          = `(/bin/universe) 2>/dev/null`",
          "1448: /usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null`",
          "1449: /bin/arch              = `(/bin/arch) 2>/dev/null`",
          "1450: /usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`",
          "1451: /usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`",
          "1453: UNAME_MACHINE = ${UNAME_MACHINE}",
          "1454: UNAME_RELEASE = ${UNAME_RELEASE}",
          "1455: UNAME_SYSTEM  = ${UNAME_SYSTEM}",
          "1456: UNAME_VERSION = ${UNAME_VERSION}",
          "1457: EOF",
          "1459: exit 1",
          "1461: # Local variables:",
          "1462: # eval: (add-hook 'write-file-hooks 'time-stamp)",
          "1463: # time-stamp-start: \"timestamp='\"",
          "1464: # time-stamp-format: \"%:y-%02m-%02d\"",
          "1465: # time-stamp-end: \"'\"",
          "1466: # End:",
          "",
          "---------------"
        ],
        "config.sub||config.sub": [
          "File: config.sub -> config.sub",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /bin/sh",
          "2: # Configuration validation subroutine script.",
          "3: #   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,",
          "4: #   2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.",
          "6: timestamp='2005-07-08'",
          "8: # This file is (in principle) common to ALL GNU software.",
          "9: # The presence of a machine in this file suggests that SOME GNU software",
          "10: # can handle that machine.  It does not imply ALL GNU software can.",
          "11: #",
          "12: # This file is free software; you can redistribute it and/or modify",
          "13: # it under the terms of the GNU General Public License as published by",
          "14: # the Free Software Foundation; either version 2 of the License, or",
          "15: # (at your option) any later version.",
          "16: #",
          "17: # This program is distributed in the hope that it will be useful,",
          "18: # but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "19: # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "20: # GNU General Public License for more details.",
          "21: #",
          "22: # You should have received a copy of the GNU General Public License",
          "23: # along with this program; if not, write to the Free Software",
          "24: # Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA",
          "25: # 02110-1301, USA.",
          "26: #",
          "27: # As a special exception to the GNU General Public License, if you",
          "28: # distribute this file as part of a program that contains a",
          "29: # configuration script generated by Autoconf, you may include it under",
          "30: # the same distribution terms that you use for the rest of that program.",
          "33: # Please send patches to <config-patches@gnu.org>.  Submit a context",
          "34: # diff and a properly formatted ChangeLog entry.",
          "35: #",
          "36: # Configuration subroutine to validate and canonicalize a configuration type.",
          "37: # Supply the specified configuration type as an argument.",
          "38: # If it is invalid, we print an error message on stderr and exit with code 1.",
          "39: # Otherwise, we print the canonical config type on stdout and succeed.",
          "41: # This file is supposed to be the same for all GNU packages",
          "42: # and recognize all the CPU types, system types and aliases",
          "43: # that are meaningful with *any* GNU software.",
          "44: # Each package is responsible for reporting which valid configurations",
          "45: # it does not support.  The user should be able to distinguish",
          "46: # a failure to support a valid configuration from a meaningless",
          "47: # configuration.",
          "49: # The goal of this file is to map all the various variations of a given",
          "50: # machine specification into a single specification in the form:",
          "51: # CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM",
          "52: # or in some cases, the newer four-part form:",
          "53: # CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM",
          "54: # It is wrong to echo any other type of specification.",
          "56: me=`echo \"$0\" | sed -e 's,.*/,,'`",
          "58: usage=\"\\",
          "59: Usage: $0 [OPTION] CPU-MFR-OPSYS",
          "60:        $0 [OPTION] ALIAS",
          "62: Canonicalize a configuration name.",
          "64: Operation modes:",
          "65:   -h, --help         print this help, then exit",
          "66:   -t, --time-stamp   print date of last modification, then exit",
          "67:   -v, --version      print version number, then exit",
          "69: Report bugs and patches to <config-patches@gnu.org>.\"",
          "71: version=\"\\",
          "72: GNU config.sub ($timestamp)",
          "74: Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005",
          "75: Free Software Foundation, Inc.",
          "77: This is free software; see the source for copying conditions.  There is NO",
          "78: warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"",
          "80: help=\"",
          "81: Try \\`$me --help' for more information.\"",
          "83: # Parse command line",
          "84: while test $# -gt 0 ; do",
          "85:   case $1 in",
          "86:     --time-stamp | --time* | -t )",
          "87:        echo \"$timestamp\" ; exit ;;",
          "88:     --version | -v )",
          "89:        echo \"$version\" ; exit ;;",
          "90:     --help | --h* | -h )",
          "91:        echo \"$usage\"; exit ;;",
          "92:     -- )     # Stop option processing",
          "93:        shift; break ;;",
          "94:     - ) # Use stdin as input.",
          "95:        break ;;",
          "96:     -* )",
          "97:        echo \"$me: invalid option $1$help\"",
          "98:        exit 1 ;;",
          "101:        # First pass through any local machine types.",
          "102:        echo $1",
          "103:        exit ;;",
          "106:        break ;;",
          "107:   esac",
          "108: done",
          "110: case $# in",
          "111:  0) echo \"$me: missing argument$help\" >&2",
          "112:     exit 1;;",
          "113:  1) ;;",
          "115:     exit 1;;",
          "116: esac",
          "118: # Separate what the user gave into CPU-COMPANY and OS or KERNEL-OS (if any).",
          "119: # Here we must recognize all the valid KERNEL-OS combinations.",
          "120: maybe_os=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`",
          "121: case $maybe_os in",
          "122:   nto-qnx* | linux-gnu* | linux-dietlibc | linux-uclibc* | uclinux-uclibc* | uclinux-gnu* | \\",
          "123:   kfreebsd*-gnu* | knetbsd*-gnu* | netbsd*-gnu* | storm-chaos* | os2-emx* | rtmk-nova*)",
          "124:     os=-$maybe_os",
          "125:     basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`",
          "126:     ;;",
          "128:     basic_machine=`echo $1 | sed 's/-[^-]*$//'`",
          "129:     if [ $basic_machine != $1 ]",
          "130:     then os=`echo $1 | sed 's/.*-/-/'`",
          "131:     else os=; fi",
          "132:     ;;",
          "133: esac",
          "135: ### Let's recognize common machines as not being operating systems so",
          "136: ### that things like config.sub decstation-3100 work.  We also",
          "137: ### recognize some manufacturers as not being operating systems, so we",
          "138: ### can provide default operating systems below.",
          "139: case $os in",
          "140:  -sun*os*)",
          "141:   # Prevent following clause from handling this invalid input.",
          "142:   ;;",
          "143:  -dec* | -mips* | -sequent* | -encore* | -pc532* | -sgi* | -sony* | \\",
          "144:  -att* | -7300* | -3300* | -delta* | -motorola* | -sun[234]* | \\",
          "145:  -unicom* | -ibm* | -next | -hp | -isi* | -apollo | -altos* | \\",
          "146:  -convergent* | -ncr* | -news | -32* | -3600* | -3100* | -hitachi* |\\",
          "147:  -c[123]* | -convex* | -sun | -crds | -omron* | -dg | -ultra | -tti* | \\",
          "148:  -harris | -dolphin | -highlevel | -gould | -cbm | -ns | -masscomp | \\",
          "149:  -apple | -axis | -knuth | -cray)",
          "150:   os=",
          "151:   basic_machine=$1",
          "152:   ;;",
          "153:  -sim | -cisco | -oki | -wec | -winbond)",
          "154:   os=",
          "155:   basic_machine=$1",
          "156:   ;;",
          "157:  -scout)",
          "158:   ;;",
          "159:  -wrs)",
          "160:   os=-vxworks",
          "161:   basic_machine=$1",
          "162:   ;;",
          "163:  -chorusos*)",
          "164:   os=-chorusos",
          "165:   basic_machine=$1",
          "166:   ;;",
          "167:   -chorusrdb)",
          "168:    os=-chorusrdb",
          "169:   basic_machine=$1",
          "170:    ;;",
          "171:  -hiux*)",
          "172:   os=-hiuxwe2",
          "173:   ;;",
          "174:  -sco5)",
          "175:   os=-sco3.2v5",
          "176:   basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`",
          "177:   ;;",
          "178:  -sco4)",
          "179:   os=-sco3.2v4",
          "180:   basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`",
          "181:   ;;",
          "182:  -sco3.2.[4-9]*)",
          "183:   os=`echo $os | sed -e 's/sco3.2./sco3.2v/'`",
          "184:   basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`",
          "185:   ;;",
          "186:  -sco3.2v[4-9]*)",
          "187:   # Don't forget version if it is 3.2v4 or newer.",
          "188:   basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`",
          "189:   ;;",
          "190:  -sco*)",
          "191:   os=-sco3.2v2",
          "192:   basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`",
          "193:   ;;",
          "194:  -udk*)",
          "195:   basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`",
          "196:   ;;",
          "197:  -isc)",
          "198:   os=-isc2.2",
          "199:   basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`",
          "200:   ;;",
          "201:  -clix*)",
          "202:   basic_machine=clipper-intergraph",
          "203:   ;;",
          "204:  -isc*)",
          "205:   basic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`",
          "206:   ;;",
          "207:  -lynx*)",
          "208:   os=-lynxos",
          "209:   ;;",
          "210:  -ptx*)",
          "211:   basic_machine=`echo $1 | sed -e 's/86-.*/86-sequent/'`",
          "212:   ;;",
          "213:  -windowsnt*)",
          "214:   os=`echo $os | sed -e 's/windowsnt/winnt/'`",
          "215:   ;;",
          "216:  -psos*)",
          "217:   os=-psos",
          "218:   ;;",
          "219:  -mint | -mint[0-9]*)",
          "220:   basic_machine=m68k-atari",
          "221:   os=-mint",
          "222:   ;;",
          "223: esac",
          "225: # Decode aliases for certain CPU-COMPANY combinations.",
          "226: case $basic_machine in",
          "227:  # Recognize the basic CPU types without company name.",
          "228:  # Some are omitted here because they have special meanings below.",
          "229:  1750a | 580 \\",
          "230:  | a29k \\",
          "231:  | alpha | alphaev[4-8] | alphaev56 | alphaev6[78] | alphapca5[67] \\",
          "232:  | alpha64 | alpha64ev[4-8] | alpha64ev56 | alpha64ev6[78] | alpha64pca5[67] \\",
          "233:  | am33_2.0 \\",
          "234:  | arc | arm | arm[bl]e | arme[lb] | armv[2345] | armv[345][lb] | avr \\",
          "235:  | bfin \\",
          "236:  | c4x | clipper \\",
          "237:  | d10v | d30v | dlx | dsp16xx \\",
          "238:  | fr30 | frv \\",
          "239:  | h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\",
          "240:  | i370 | i860 | i960 | ia64 \\",
          "241:  | ip2k | iq2000 \\",
          "242:  | m32r | m32rle | m68000 | m68k | m88k | maxq | mcore \\",
          "243:  | mips | mipsbe | mipseb | mipsel | mipsle \\",
          "244:  | mips16 \\",
          "245:  | mips64 | mips64el \\",
          "246:  | mips64vr | mips64vrel \\",
          "247:  | mips64orion | mips64orionel \\",
          "248:  | mips64vr4100 | mips64vr4100el \\",
          "249:  | mips64vr4300 | mips64vr4300el \\",
          "250:  | mips64vr5000 | mips64vr5000el \\",
          "251:  | mips64vr5900 | mips64vr5900el \\",
          "252:  | mipsisa32 | mipsisa32el \\",
          "253:  | mipsisa32r2 | mipsisa32r2el \\",
          "254:  | mipsisa64 | mipsisa64el \\",
          "255:  | mipsisa64r2 | mipsisa64r2el \\",
          "256:  | mipsisa64sb1 | mipsisa64sb1el \\",
          "257:  | mipsisa64sr71k | mipsisa64sr71kel \\",
          "258:  | mipstx39 | mipstx39el \\",
          "259:  | mn10200 | mn10300 \\",
          "260:  | ms1 \\",
          "261:  | msp430 \\",
          "262:  | ns16k | ns32k \\",
          "263:  | or32 \\",
          "264:  | pdp10 | pdp11 | pj | pjl \\",
          "265:  | powerpc | powerpc64 | powerpc64le | powerpcle | ppcbe \\",
          "266:  | pyramid \\",
          "267:  | sh | sh[1234] | sh[24]a | sh[23]e | sh[34]eb | shbe | shle | sh[1234]le | sh3ele \\",
          "268:  | sh64 | sh64le \\",
          "269:  | sparc | sparc64 | sparc64b | sparc86x | sparclet | sparclite \\",
          "270:  | sparcv8 | sparcv9 | sparcv9b \\",
          "271:  | strongarm \\",
          "272:  | tahoe | thumb | tic4x | tic80 | tron \\",
          "273:  | v850 | v850e \\",
          "274:  | we32k \\",
          "275:  | x86 | xscale | xscalee[bl] | xstormy16 | xtensa \\",
          "276:  | z8k)",
          "277:   basic_machine=$basic_machine-unknown",
          "278:   ;;",
          "279:  m32c)",
          "280:   basic_machine=$basic_machine-unknown",
          "281:   ;;",
          "282:  m6811 | m68hc11 | m6812 | m68hc12)",
          "283:   # Motorola 68HC11/12.",
          "284:   basic_machine=$basic_machine-unknown",
          "285:   os=-none",
          "286:   ;;",
          "287:  m88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65 | z8k)",
          "288:   ;;",
          "290:  # We use `pc' rather than `unknown'",
          "291:  # because (1) that's what they normally are, and",
          "292:  # (2) the word \"unknown\" tends to confuse beginning users.",
          "293:  i*86 | x86_64)",
          "294:    basic_machine=$basic_machine-pc",
          "295:    ;;",
          "296:  # Object if more than one company name word.",
          "298:   echo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2",
          "299:   exit 1",
          "300:   ;;",
          "301:  # Recognize the basic CPU types with company name.",
          "302:  580-* \\",
          "303:  | a29k-* \\",
          "304:  | alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \\",
          "305:  | alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \\",
          "306:  | alphapca5[67]-* | alpha64pca5[67]-* | arc-* \\",
          "307:  | arm-*  | armbe-* | armle-* | armeb-* | armv*-* \\",
          "308:  | avr-* \\",
          "309:  | bfin-* | bs2000-* \\",
          "310:  | c[123]* | c30-* | [cjt]90-* | c4x-* | c54x-* | c55x-* | c6x-* \\",
          "311:  | clipper-* | craynv-* | cydra-* \\",
          "312:  | d10v-* | d30v-* | dlx-* \\",
          "313:  | elxsi-* \\",
          "314:  | f30[01]-* | f700-* | fr30-* | frv-* | fx80-* \\",
          "315:  | h8300-* | h8500-* \\",
          "316:  | hppa-* | hppa1.[01]-* | hppa2.0-* | hppa2.0[nw]-* | hppa64-* \\",
          "317:  | i*86-* | i860-* | i960-* | ia64-* \\",
          "318:  | ip2k-* | iq2000-* \\",
          "319:  | m32r-* | m32rle-* \\",
          "320:  | m68000-* | m680[012346]0-* | m68360-* | m683?2-* | m68k-* \\",
          "321:  | m88110-* | m88k-* | maxq-* | mcore-* \\",
          "322:  | mips-* | mipsbe-* | mipseb-* | mipsel-* | mipsle-* \\",
          "323:  | mips16-* \\",
          "324:  | mips64-* | mips64el-* \\",
          "325:  | mips64vr-* | mips64vrel-* \\",
          "326:  | mips64orion-* | mips64orionel-* \\",
          "327:  | mips64vr4100-* | mips64vr4100el-* \\",
          "328:  | mips64vr4300-* | mips64vr4300el-* \\",
          "329:  | mips64vr5000-* | mips64vr5000el-* \\",
          "330:  | mips64vr5900-* | mips64vr5900el-* \\",
          "331:  | mipsisa32-* | mipsisa32el-* \\",
          "332:  | mipsisa32r2-* | mipsisa32r2el-* \\",
          "333:  | mipsisa64-* | mipsisa64el-* \\",
          "334:  | mipsisa64r2-* | mipsisa64r2el-* \\",
          "335:  | mipsisa64sb1-* | mipsisa64sb1el-* \\",
          "336:  | mipsisa64sr71k-* | mipsisa64sr71kel-* \\",
          "337:  | mipstx39-* | mipstx39el-* \\",
          "338:  | mmix-* \\",
          "339:  | ms1-* \\",
          "340:  | msp430-* \\",
          "341:  | none-* | np1-* | ns16k-* | ns32k-* \\",
          "342:  | orion-* \\",
          "343:  | pdp10-* | pdp11-* | pj-* | pjl-* | pn-* | power-* \\",
          "344:  | powerpc-* | powerpc64-* | powerpc64le-* | powerpcle-* | ppcbe-* \\",
          "345:  | pyramid-* \\",
          "346:  | romp-* | rs6000-* \\",
          "347:  | sh-* | sh[1234]-* | sh[24]a-* | sh[23]e-* | sh[34]eb-* | shbe-* \\",
          "348:  | shle-* | sh[1234]le-* | sh3ele-* | sh64-* | sh64le-* \\",
          "349:  | sparc-* | sparc64-* | sparc64b-* | sparc86x-* | sparclet-* \\",
          "350:  | sparclite-* \\",
          "351:  | sparcv8-* | sparcv9-* | sparcv9b-* | strongarm-* | sv1-* | sx?-* \\",
          "352:  | tahoe-* | thumb-* \\",
          "353:  | tic30-* | tic4x-* | tic54x-* | tic55x-* | tic6x-* | tic80-* \\",
          "354:  | tron-* \\",
          "355:  | v850-* | v850e-* | vax-* \\",
          "356:  | we32k-* \\",
          "357:  | x86-* | x86_64-* | xps100-* | xscale-* | xscalee[bl]-* \\",
          "358:  | xstormy16-* | xtensa-* \\",
          "359:  | ymp-* \\",
          "360:  | z8k-*)",
          "361:   ;;",
          "362:  m32c-*)",
          "363:   ;;",
          "364:  # Recognize the various machine names and aliases which stand",
          "365:  # for a CPU type and a company and sometimes even an OS.",
          "366:  386bsd)",
          "367:   basic_machine=i386-unknown",
          "368:   os=-bsd",
          "369:   ;;",
          "370:  3b1 | 7300 | 7300-att | att-7300 | pc7300 | safari | unixpc)",
          "371:   basic_machine=m68000-att",
          "372:   ;;",
          "373:  3b*)",
          "374:   basic_machine=we32k-att",
          "375:   ;;",
          "376:  a29khif)",
          "377:   basic_machine=a29k-amd",
          "378:   os=-udi",
          "379:   ;;",
          "380:      abacus)",
          "381:   basic_machine=abacus-unknown",
          "382:   ;;",
          "383:  adobe68k)",
          "384:   basic_machine=m68010-adobe",
          "385:   os=-scout",
          "386:   ;;",
          "387:  alliant | fx80)",
          "388:   basic_machine=fx80-alliant",
          "389:   ;;",
          "390:  altos | altos3068)",
          "391:   basic_machine=m68k-altos",
          "392:   ;;",
          "393:  am29k)",
          "394:   basic_machine=a29k-none",
          "395:   os=-bsd",
          "396:   ;;",
          "397:  amd64)",
          "398:   basic_machine=x86_64-pc",
          "399:   ;;",
          "400:  amd64-*)",
          "401:   basic_machine=x86_64-`echo $basic_machine | sed 's/^[^-]*-//'`",
          "402:   ;;",
          "403:  amdahl)",
          "404:   basic_machine=580-amdahl",
          "405:   os=-sysv",
          "406:   ;;",
          "407:  amiga | amiga-*)",
          "408:   basic_machine=m68k-unknown",
          "409:   ;;",
          "410:  amigaos | amigados)",
          "411:   basic_machine=m68k-unknown",
          "412:   os=-amigaos",
          "413:   ;;",
          "414:  amigaunix | amix)",
          "415:   basic_machine=m68k-unknown",
          "416:   os=-sysv4",
          "417:   ;;",
          "418:  apollo68)",
          "419:   basic_machine=m68k-apollo",
          "420:   os=-sysv",
          "421:   ;;",
          "422:  apollo68bsd)",
          "423:   basic_machine=m68k-apollo",
          "424:   os=-bsd",
          "425:   ;;",
          "426:  aux)",
          "427:   basic_machine=m68k-apple",
          "428:   os=-aux",
          "429:   ;;",
          "430:  balance)",
          "431:   basic_machine=ns32k-sequent",
          "432:   os=-dynix",
          "433:   ;;",
          "434:  c90)",
          "435:   basic_machine=c90-cray",
          "436:   os=-unicos",
          "437:   ;;",
          "438:  convex-c1)",
          "439:   basic_machine=c1-convex",
          "440:   os=-bsd",
          "441:   ;;",
          "442:  convex-c2)",
          "443:   basic_machine=c2-convex",
          "444:   os=-bsd",
          "445:   ;;",
          "446:  convex-c32)",
          "447:   basic_machine=c32-convex",
          "448:   os=-bsd",
          "449:   ;;",
          "450:  convex-c34)",
          "451:   basic_machine=c34-convex",
          "452:   os=-bsd",
          "453:   ;;",
          "454:  convex-c38)",
          "455:   basic_machine=c38-convex",
          "456:   os=-bsd",
          "457:   ;;",
          "458:  cray | j90)",
          "459:   basic_machine=j90-cray",
          "460:   os=-unicos",
          "461:   ;;",
          "462:  craynv)",
          "463:   basic_machine=craynv-cray",
          "464:   os=-unicosmp",
          "465:   ;;",
          "466:  cr16c)",
          "467:   basic_machine=cr16c-unknown",
          "468:   os=-elf",
          "469:   ;;",
          "470:  crds | unos)",
          "471:   basic_machine=m68k-crds",
          "472:   ;;",
          "473:  crisv32 | crisv32-* | etraxfs*)",
          "474:   basic_machine=crisv32-axis",
          "475:   ;;",
          "476:  cris | cris-* | etrax*)",
          "477:   basic_machine=cris-axis",
          "478:   ;;",
          "479:  crx)",
          "480:   basic_machine=crx-unknown",
          "481:   os=-elf",
          "482:   ;;",
          "483:  da30 | da30-*)",
          "484:   basic_machine=m68k-da30",
          "485:   ;;",
          "486:  decstation | decstation-3100 | pmax | pmax-* | pmin | dec3100 | decstatn)",
          "487:   basic_machine=mips-dec",
          "488:   ;;",
          "489:  decsystem10* | dec10*)",
          "490:   basic_machine=pdp10-dec",
          "491:   os=-tops10",
          "492:   ;;",
          "493:  decsystem20* | dec20*)",
          "494:   basic_machine=pdp10-dec",
          "495:   os=-tops20",
          "496:   ;;",
          "497:  delta | 3300 | motorola-3300 | motorola-delta \\",
          "498:        | 3300-motorola | delta-motorola)",
          "499:   basic_machine=m68k-motorola",
          "500:   ;;",
          "501:  delta88)",
          "502:   basic_machine=m88k-motorola",
          "503:   os=-sysv3",
          "504:   ;;",
          "505:  djgpp)",
          "506:   basic_machine=i586-pc",
          "507:   os=-msdosdjgpp",
          "508:   ;;",
          "509:  dpx20 | dpx20-*)",
          "510:   basic_machine=rs6000-bull",
          "511:   os=-bosx",
          "512:   ;;",
          "513:  dpx2* | dpx2*-bull)",
          "514:   basic_machine=m68k-bull",
          "515:   os=-sysv3",
          "516:   ;;",
          "517:  ebmon29k)",
          "518:   basic_machine=a29k-amd",
          "519:   os=-ebmon",
          "520:   ;;",
          "521:  elxsi)",
          "522:   basic_machine=elxsi-elxsi",
          "523:   os=-bsd",
          "524:   ;;",
          "525:  encore | umax | mmax)",
          "526:   basic_machine=ns32k-encore",
          "527:   ;;",
          "528:  es1800 | OSE68k | ose68k | ose | OSE)",
          "529:   basic_machine=m68k-ericsson",
          "530:   os=-ose",
          "531:   ;;",
          "532:  fx2800)",
          "533:   basic_machine=i860-alliant",
          "534:   ;;",
          "535:  genix)",
          "536:   basic_machine=ns32k-ns",
          "537:   ;;",
          "538:  gmicro)",
          "539:   basic_machine=tron-gmicro",
          "540:   os=-sysv",
          "541:   ;;",
          "542:  go32)",
          "543:   basic_machine=i386-pc",
          "544:   os=-go32",
          "545:   ;;",
          "546:  h3050r* | hiux*)",
          "547:   basic_machine=hppa1.1-hitachi",
          "548:   os=-hiuxwe2",
          "549:   ;;",
          "550:  h8300hms)",
          "551:   basic_machine=h8300-hitachi",
          "552:   os=-hms",
          "553:   ;;",
          "554:  h8300xray)",
          "555:   basic_machine=h8300-hitachi",
          "556:   os=-xray",
          "557:   ;;",
          "558:  h8500hms)",
          "559:   basic_machine=h8500-hitachi",
          "560:   os=-hms",
          "561:   ;;",
          "562:  harris)",
          "563:   basic_machine=m88k-harris",
          "564:   os=-sysv3",
          "565:   ;;",
          "566:  hp300-*)",
          "567:   basic_machine=m68k-hp",
          "568:   ;;",
          "569:  hp300bsd)",
          "570:   basic_machine=m68k-hp",
          "571:   os=-bsd",
          "572:   ;;",
          "573:  hp300hpux)",
          "574:   basic_machine=m68k-hp",
          "575:   os=-hpux",
          "576:   ;;",
          "577:  hp3k9[0-9][0-9] | hp9[0-9][0-9])",
          "578:   basic_machine=hppa1.0-hp",
          "579:   ;;",
          "580:  hp9k2[0-9][0-9] | hp9k31[0-9])",
          "581:   basic_machine=m68000-hp",
          "582:   ;;",
          "583:  hp9k3[2-9][0-9])",
          "584:   basic_machine=m68k-hp",
          "585:   ;;",
          "586:  hp9k6[0-9][0-9] | hp6[0-9][0-9])",
          "587:   basic_machine=hppa1.0-hp",
          "588:   ;;",
          "589:  hp9k7[0-79][0-9] | hp7[0-79][0-9])",
          "590:   basic_machine=hppa1.1-hp",
          "591:   ;;",
          "592:  hp9k78[0-9] | hp78[0-9])",
          "593:   # FIXME: really hppa2.0-hp",
          "594:   basic_machine=hppa1.1-hp",
          "595:   ;;",
          "596:  hp9k8[67]1 | hp8[67]1 | hp9k80[24] | hp80[24] | hp9k8[78]9 | hp8[78]9 | hp9k893 | hp893)",
          "597:   # FIXME: really hppa2.0-hp",
          "598:   basic_machine=hppa1.1-hp",
          "599:   ;;",
          "600:  hp9k8[0-9][13679] | hp8[0-9][13679])",
          "601:   basic_machine=hppa1.1-hp",
          "602:   ;;",
          "603:  hp9k8[0-9][0-9] | hp8[0-9][0-9])",
          "604:   basic_machine=hppa1.0-hp",
          "605:   ;;",
          "606:  hppa-next)",
          "607:   os=-nextstep3",
          "608:   ;;",
          "609:  hppaosf)",
          "610:   basic_machine=hppa1.1-hp",
          "611:   os=-osf",
          "612:   ;;",
          "613:  hppro)",
          "614:   basic_machine=hppa1.1-hp",
          "615:   os=-proelf",
          "616:   ;;",
          "617:  i370-ibm* | ibm*)",
          "618:   basic_machine=i370-ibm",
          "619:   ;;",
          "620: # I'm not sure what \"Sysv32\" means.  Should this be sysv3.2?",
          "621:  i*86v32)",
          "622:   basic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`",
          "623:   os=-sysv32",
          "624:   ;;",
          "625:  i*86v4*)",
          "626:   basic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`",
          "627:   os=-sysv4",
          "628:   ;;",
          "629:  i*86v)",
          "630:   basic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`",
          "631:   os=-sysv",
          "632:   ;;",
          "633:  i*86sol2)",
          "634:   basic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`",
          "635:   os=-solaris2",
          "636:   ;;",
          "637:  i386mach)",
          "638:   basic_machine=i386-mach",
          "639:   os=-mach",
          "640:   ;;",
          "641:  i386-vsta | vsta)",
          "642:   basic_machine=i386-unknown",
          "643:   os=-vsta",
          "644:   ;;",
          "645:  iris | iris4d)",
          "646:   basic_machine=mips-sgi",
          "647:   case $os in",
          "648:       -irix*)",
          "649:    ;;",
          "651:    os=-irix4",
          "652:    ;;",
          "653:   esac",
          "654:   ;;",
          "655:  isi68 | isi)",
          "656:   basic_machine=m68k-isi",
          "657:   os=-sysv",
          "658:   ;;",
          "659:  m88k-omron*)",
          "660:   basic_machine=m88k-omron",
          "661:   ;;",
          "662:  magnum | m3230)",
          "663:   basic_machine=mips-mips",
          "664:   os=-sysv",
          "665:   ;;",
          "666:  merlin)",
          "667:   basic_machine=ns32k-utek",
          "668:   os=-sysv",
          "669:   ;;",
          "670:  mingw32)",
          "671:   basic_machine=i386-pc",
          "672:   os=-mingw32",
          "673:   ;;",
          "674:  miniframe)",
          "675:   basic_machine=m68000-convergent",
          "676:   ;;",
          "678:   basic_machine=m68k-atari",
          "679:   os=-mint",
          "680:   ;;",
          "681:  mips3*-*)",
          "682:   basic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`",
          "683:   ;;",
          "684:  mips3*)",
          "685:   basic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`-unknown",
          "686:   ;;",
          "687:  monitor)",
          "688:   basic_machine=m68k-rom68k",
          "689:   os=-coff",
          "690:   ;;",
          "691:  morphos)",
          "692:   basic_machine=powerpc-unknown",
          "693:   os=-morphos",
          "694:   ;;",
          "695:  msdos)",
          "696:   basic_machine=i386-pc",
          "697:   os=-msdos",
          "698:   ;;",
          "699:  mvs)",
          "700:   basic_machine=i370-ibm",
          "701:   os=-mvs",
          "702:   ;;",
          "703:  ncr3000)",
          "704:   basic_machine=i486-ncr",
          "705:   os=-sysv4",
          "706:   ;;",
          "707:  netbsd386)",
          "708:   basic_machine=i386-unknown",
          "709:   os=-netbsd",
          "710:   ;;",
          "711:  netwinder)",
          "712:   basic_machine=armv4l-rebel",
          "713:   os=-linux",
          "714:   ;;",
          "715:  news | news700 | news800 | news900)",
          "716:   basic_machine=m68k-sony",
          "717:   os=-newsos",
          "718:   ;;",
          "719:  news1000)",
          "720:   basic_machine=m68030-sony",
          "721:   os=-newsos",
          "722:   ;;",
          "723:  news-3600 | risc-news)",
          "724:   basic_machine=mips-sony",
          "725:   os=-newsos",
          "726:   ;;",
          "727:  necv70)",
          "728:   basic_machine=v70-nec",
          "729:   os=-sysv",
          "730:   ;;",
          "731:  next | m*-next )",
          "732:   basic_machine=m68k-next",
          "733:   case $os in",
          "734:       -nextstep* )",
          "735:    ;;",
          "736:       -ns2*)",
          "737:         os=-nextstep2",
          "738:    ;;",
          "740:         os=-nextstep3",
          "741:    ;;",
          "742:   esac",
          "743:   ;;",
          "744:  nh3000)",
          "745:   basic_machine=m68k-harris",
          "746:   os=-cxux",
          "747:   ;;",
          "748:  nh[45]000)",
          "749:   basic_machine=m88k-harris",
          "750:   os=-cxux",
          "751:   ;;",
          "752:  nindy960)",
          "753:   basic_machine=i960-intel",
          "754:   os=-nindy",
          "755:   ;;",
          "756:  mon960)",
          "757:   basic_machine=i960-intel",
          "758:   os=-mon960",
          "759:   ;;",
          "760:  nonstopux)",
          "761:   basic_machine=mips-compaq",
          "762:   os=-nonstopux",
          "763:   ;;",
          "764:  np1)",
          "765:   basic_machine=np1-gould",
          "766:   ;;",
          "767:  nsr-tandem)",
          "768:   basic_machine=nsr-tandem",
          "769:   ;;",
          "770:  op50n-* | op60c-*)",
          "771:   basic_machine=hppa1.1-oki",
          "772:   os=-proelf",
          "773:   ;;",
          "774:  openrisc | openrisc-*)",
          "775:   basic_machine=or32-unknown",
          "776:   ;;",
          "777:  os400)",
          "778:   basic_machine=powerpc-ibm",
          "779:   os=-os400",
          "780:   ;;",
          "781:  OSE68000 | ose68000)",
          "782:   basic_machine=m68000-ericsson",
          "783:   os=-ose",
          "784:   ;;",
          "785:  os68k)",
          "786:   basic_machine=m68k-none",
          "787:   os=-os68k",
          "788:   ;;",
          "789:  pa-hitachi)",
          "790:   basic_machine=hppa1.1-hitachi",
          "791:   os=-hiuxwe2",
          "792:   ;;",
          "793:  paragon)",
          "794:   basic_machine=i860-intel",
          "795:   os=-osf",
          "796:   ;;",
          "797:  pbd)",
          "798:   basic_machine=sparc-tti",
          "799:   ;;",
          "800:  pbb)",
          "801:   basic_machine=m68k-tti",
          "802:   ;;",
          "803:  pc532 | pc532-*)",
          "804:   basic_machine=ns32k-pc532",
          "805:   ;;",
          "806:  pentium | p5 | k5 | k6 | nexgen | viac3)",
          "807:   basic_machine=i586-pc",
          "808:   ;;",
          "809:  pentiumpro | p6 | 6x86 | athlon | athlon_*)",
          "810:   basic_machine=i686-pc",
          "811:   ;;",
          "812:  pentiumii | pentium2 | pentiumiii | pentium3)",
          "813:   basic_machine=i686-pc",
          "814:   ;;",
          "815:  pentium4)",
          "816:   basic_machine=i786-pc",
          "817:   ;;",
          "818:  pentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)",
          "819:   basic_machine=i586-`echo $basic_machine | sed 's/^[^-]*-//'`",
          "820:   ;;",
          "821:  pentiumpro-* | p6-* | 6x86-* | athlon-*)",
          "822:   basic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`",
          "823:   ;;",
          "824:  pentiumii-* | pentium2-* | pentiumiii-* | pentium3-*)",
          "825:   basic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`",
          "826:   ;;",
          "827:  pentium4-*)",
          "828:   basic_machine=i786-`echo $basic_machine | sed 's/^[^-]*-//'`",
          "829:   ;;",
          "830:  pn)",
          "831:   basic_machine=pn-gould",
          "832:   ;;",
          "833:  power) basic_machine=power-ibm",
          "834:   ;;",
          "835:  ppc) basic_machine=powerpc-unknown",
          "836:   ;;",
          "837:  ppc-*) basic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`",
          "838:   ;;",
          "839:  ppcle | powerpclittle | ppc-le | powerpc-little)",
          "840:   basic_machine=powerpcle-unknown",
          "841:   ;;",
          "842:  ppcle-* | powerpclittle-*)",
          "843:   basic_machine=powerpcle-`echo $basic_machine | sed 's/^[^-]*-//'`",
          "844:   ;;",
          "845:  ppc64) basic_machine=powerpc64-unknown",
          "846:   ;;",
          "847:  ppc64-*) basic_machine=powerpc64-`echo $basic_machine | sed 's/^[^-]*-//'`",
          "848:   ;;",
          "849:  ppc64le | powerpc64little | ppc64-le | powerpc64-little)",
          "850:   basic_machine=powerpc64le-unknown",
          "851:   ;;",
          "852:  ppc64le-* | powerpc64little-*)",
          "853:   basic_machine=powerpc64le-`echo $basic_machine | sed 's/^[^-]*-//'`",
          "854:   ;;",
          "855:  ps2)",
          "856:   basic_machine=i386-ibm",
          "857:   ;;",
          "858:  pw32)",
          "859:   basic_machine=i586-unknown",
          "860:   os=-pw32",
          "861:   ;;",
          "862:  rom68k)",
          "863:   basic_machine=m68k-rom68k",
          "864:   os=-coff",
          "865:   ;;",
          "866:  rm[46]00)",
          "867:   basic_machine=mips-siemens",
          "868:   ;;",
          "869:  rtpc | rtpc-*)",
          "870:   basic_machine=romp-ibm",
          "871:   ;;",
          "872:  s390 | s390-*)",
          "873:   basic_machine=s390-ibm",
          "874:   ;;",
          "875:  s390x | s390x-*)",
          "876:   basic_machine=s390x-ibm",
          "877:   ;;",
          "878:  sa29200)",
          "879:   basic_machine=a29k-amd",
          "880:   os=-udi",
          "881:   ;;",
          "882:  sb1)",
          "883:   basic_machine=mipsisa64sb1-unknown",
          "884:   ;;",
          "885:  sb1el)",
          "886:   basic_machine=mipsisa64sb1el-unknown",
          "887:   ;;",
          "888:  sei)",
          "889:   basic_machine=mips-sei",
          "890:   os=-seiux",
          "891:   ;;",
          "892:  sequent)",
          "893:   basic_machine=i386-sequent",
          "894:   ;;",
          "895:  sh)",
          "896:   basic_machine=sh-hitachi",
          "897:   os=-hms",
          "898:   ;;",
          "899:  sh64)",
          "900:   basic_machine=sh64-unknown",
          "901:   ;;",
          "902:  sparclite-wrs | simso-wrs)",
          "903:   basic_machine=sparclite-wrs",
          "904:   os=-vxworks",
          "905:   ;;",
          "906:  sps7)",
          "907:   basic_machine=m68k-bull",
          "908:   os=-sysv2",
          "909:   ;;",
          "910:  spur)",
          "911:   basic_machine=spur-unknown",
          "912:   ;;",
          "913:  st2000)",
          "914:   basic_machine=m68k-tandem",
          "915:   ;;",
          "916:  stratus)",
          "917:   basic_machine=i860-stratus",
          "918:   os=-sysv4",
          "919:   ;;",
          "920:  sun2)",
          "921:   basic_machine=m68000-sun",
          "922:   ;;",
          "923:  sun2os3)",
          "924:   basic_machine=m68000-sun",
          "925:   os=-sunos3",
          "926:   ;;",
          "927:  sun2os4)",
          "928:   basic_machine=m68000-sun",
          "929:   os=-sunos4",
          "930:   ;;",
          "931:  sun3os3)",
          "932:   basic_machine=m68k-sun",
          "933:   os=-sunos3",
          "934:   ;;",
          "935:  sun3os4)",
          "936:   basic_machine=m68k-sun",
          "937:   os=-sunos4",
          "938:   ;;",
          "939:  sun4os3)",
          "940:   basic_machine=sparc-sun",
          "941:   os=-sunos3",
          "942:   ;;",
          "943:  sun4os4)",
          "944:   basic_machine=sparc-sun",
          "945:   os=-sunos4",
          "946:   ;;",
          "947:  sun4sol2)",
          "948:   basic_machine=sparc-sun",
          "949:   os=-solaris2",
          "950:   ;;",
          "951:  sun3 | sun3-*)",
          "952:   basic_machine=m68k-sun",
          "953:   ;;",
          "954:  sun4)",
          "955:   basic_machine=sparc-sun",
          "956:   ;;",
          "957:  sun386 | sun386i | roadrunner)",
          "958:   basic_machine=i386-sun",
          "959:   ;;",
          "960:  sv1)",
          "961:   basic_machine=sv1-cray",
          "962:   os=-unicos",
          "963:   ;;",
          "964:  symmetry)",
          "965:   basic_machine=i386-sequent",
          "966:   os=-dynix",
          "967:   ;;",
          "968:  t3e)",
          "969:   basic_machine=alphaev5-cray",
          "970:   os=-unicos",
          "971:   ;;",
          "972:  t90)",
          "973:   basic_machine=t90-cray",
          "974:   os=-unicos",
          "975:   ;;",
          "976:  tic54x | c54x*)",
          "977:   basic_machine=tic54x-unknown",
          "978:   os=-coff",
          "979:   ;;",
          "980:  tic55x | c55x*)",
          "981:   basic_machine=tic55x-unknown",
          "982:   os=-coff",
          "983:   ;;",
          "984:  tic6x | c6x*)",
          "985:   basic_machine=tic6x-unknown",
          "986:   os=-coff",
          "987:   ;;",
          "988:  tx39)",
          "989:   basic_machine=mipstx39-unknown",
          "990:   ;;",
          "991:  tx39el)",
          "992:   basic_machine=mipstx39el-unknown",
          "993:   ;;",
          "994:  toad1)",
          "995:   basic_machine=pdp10-xkl",
          "996:   os=-tops20",
          "997:   ;;",
          "998:  tower | tower-32)",
          "999:   basic_machine=m68k-ncr",
          "1000:   ;;",
          "1001:  tpf)",
          "1002:   basic_machine=s390x-ibm",
          "1003:   os=-tpf",
          "1004:   ;;",
          "1005:  udi29k)",
          "1006:   basic_machine=a29k-amd",
          "1007:   os=-udi",
          "1008:   ;;",
          "1009:  ultra3)",
          "1010:   basic_machine=a29k-nyu",
          "1011:   os=-sym1",
          "1012:   ;;",
          "1013:  v810 | necv810)",
          "1014:   basic_machine=v810-nec",
          "1015:   os=-none",
          "1016:   ;;",
          "1017:  vaxv)",
          "1018:   basic_machine=vax-dec",
          "1019:   os=-sysv",
          "1020:   ;;",
          "1021:  vms)",
          "1022:   basic_machine=vax-dec",
          "1023:   os=-vms",
          "1024:   ;;",
          "1025:  vpp*|vx|vx-*)",
          "1026:   basic_machine=f301-fujitsu",
          "1027:   ;;",
          "1028:  vxworks960)",
          "1029:   basic_machine=i960-wrs",
          "1030:   os=-vxworks",
          "1031:   ;;",
          "1032:  vxworks68)",
          "1033:   basic_machine=m68k-wrs",
          "1034:   os=-vxworks",
          "1035:   ;;",
          "1036:  vxworks29k)",
          "1037:   basic_machine=a29k-wrs",
          "1038:   os=-vxworks",
          "1039:   ;;",
          "1040:  w65*)",
          "1041:   basic_machine=w65-wdc",
          "1042:   os=-none",
          "1043:   ;;",
          "1044:  w89k-*)",
          "1045:   basic_machine=hppa1.1-winbond",
          "1046:   os=-proelf",
          "1047:   ;;",
          "1048:  xbox)",
          "1049:   basic_machine=i686-pc",
          "1050:   os=-mingw32",
          "1051:   ;;",
          "1052:  xps | xps100)",
          "1053:   basic_machine=xps100-honeywell",
          "1054:   ;;",
          "1055:  ymp)",
          "1056:   basic_machine=ymp-cray",
          "1057:   os=-unicos",
          "1058:   ;;",
          "1059:  z8k-*-coff)",
          "1060:   basic_machine=z8k-unknown",
          "1061:   os=-sim",
          "1062:   ;;",
          "1063:  none)",
          "1064:   basic_machine=none-none",
          "1065:   os=-none",
          "1066:   ;;",
          "1068: # Here we handle the default manufacturer of certain CPU types.  It is in",
          "1069: # some cases the only manufacturer, in others, it is the most popular.",
          "1070:  w89k)",
          "1071:   basic_machine=hppa1.1-winbond",
          "1072:   ;;",
          "1073:  op50n)",
          "1074:   basic_machine=hppa1.1-oki",
          "1075:   ;;",
          "1076:  op60c)",
          "1077:   basic_machine=hppa1.1-oki",
          "1078:   ;;",
          "1079:  romp)",
          "1080:   basic_machine=romp-ibm",
          "1081:   ;;",
          "1082:  mmix)",
          "1083:   basic_machine=mmix-knuth",
          "1084:   ;;",
          "1085:  rs6000)",
          "1086:   basic_machine=rs6000-ibm",
          "1087:   ;;",
          "1088:  vax)",
          "1089:   basic_machine=vax-dec",
          "1090:   ;;",
          "1091:  pdp10)",
          "1092:   # there are many clones, so DEC is not a safe bet",
          "1093:   basic_machine=pdp10-unknown",
          "1094:   ;;",
          "1095:  pdp11)",
          "1096:   basic_machine=pdp11-dec",
          "1097:   ;;",
          "1098:  we32k)",
          "1099:   basic_machine=we32k-att",
          "1100:   ;;",
          "1101:  sh[1234] | sh[24]a | sh[34]eb | sh[1234]le | sh[23]ele)",
          "1102:   basic_machine=sh-unknown",
          "1103:   ;;",
          "1104:  sparc | sparcv8 | sparcv9 | sparcv9b)",
          "1105:   basic_machine=sparc-sun",
          "1106:   ;;",
          "1107:  cydra)",
          "1108:   basic_machine=cydra-cydrome",
          "1109:   ;;",
          "1110:  orion)",
          "1111:   basic_machine=orion-highlevel",
          "1112:   ;;",
          "1113:  orion105)",
          "1114:   basic_machine=clipper-highlevel",
          "1115:   ;;",
          "1116:  mac | mpw | mac-mpw)",
          "1117:   basic_machine=m68k-apple",
          "1118:   ;;",
          "1119:  pmac | pmac-mpw)",
          "1120:   basic_machine=powerpc-apple",
          "1121:   ;;",
          "1123:   # Make sure to match an already-canonicalized machine name.",
          "1124:   ;;",
          "1126:   echo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2",
          "1127:   exit 1",
          "1128:   ;;",
          "1129: esac",
          "1131: # Here we canonicalize certain aliases for manufacturers.",
          "1132: case $basic_machine in",
          "1134:   basic_machine=`echo $basic_machine | sed 's/digital.*/dec/'`",
          "1135:   ;;",
          "1137:   basic_machine=`echo $basic_machine | sed 's/commodore.*/cbm/'`",
          "1138:   ;;",
          "1140:   ;;",
          "1141: esac",
          "1143: # Decode manufacturer-specific aliases for certain operating systems.",
          "1145: if [ x\"$os\" != x\"\" ]",
          "1146: then",
          "1147: case $os in",
          "1148:         # First match some system type aliases",
          "1149:         # that might get confused with valid system types.",
          "1150:  # -solaris* is a basic system type, with this one exception.",
          "1151:  -solaris1 | -solaris1.*)",
          "1152:   os=`echo $os | sed -e 's|solaris1|sunos4|'`",
          "1153:   ;;",
          "1154:  -solaris)",
          "1155:   os=-solaris2",
          "1156:   ;;",
          "1157:  -svr4*)",
          "1158:   os=-sysv4",
          "1159:   ;;",
          "1160:  -unixware*)",
          "1161:   os=-sysv4.2uw",
          "1162:   ;;",
          "1163:  -gnu/linux*)",
          "1164:   os=`echo $os | sed -e 's|gnu/linux|linux-gnu|'`",
          "1165:   ;;",
          "1166:  # First accept the basic system types.",
          "1167:  # The portable systems comes first.",
          "1168:  # Each alternative MUST END IN A *, to match a version number.",
          "1169:  # -sysv* is not here because it comes later, after sysvr4.",
          "1170:  -gnu* | -bsd* | -mach* | -minix* | -genix* | -ultrix* | -irix* \\",
          "1171:        | -*vms* | -sco* | -esix* | -isc* | -aix* | -sunos | -sunos[34]*\\",
          "1172:        | -hpux* | -unos* | -osf* | -luna* | -dgux* | -solaris* | -sym* \\",
          "1173:        | -amigaos* | -amigados* | -msdos* | -newsos* | -unicos* | -aof* \\",
          "1174:        | -aos* \\",
          "1175:        | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \\",
          "1176:        | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \\",
          "1177:        | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* | -openbsd* \\",
          "1178:        | -ekkobsd* | -kfreebsd* | -freebsd* | -riscix* | -lynxos* \\",
          "1179:        | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \\",
          "1180:        | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \\",
          "1181:        | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \\",
          "1182:        | -chorusos* | -chorusrdb* \\",
          "1183:        | -cygwin* | -pe* | -psos* | -moss* | -proelf* | -rtems* \\",
          "1184:        | -mingw32* | -linux-gnu* | -linux-uclibc* | -uxpv* | -beos* | -mpeix* | -udk* \\",
          "1185:        | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \\",
          "1186:        | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\",
          "1187:        | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\",
          "1188:        | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \\",
          "1189:        | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \\",
          "1190:        | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \\",
          "1191:        | -skyos* | -haiku*)",
          "1192:  # Remember, each alternative MUST END IN *, to match a version number.",
          "1193:   ;;",
          "1194:  -qnx*)",
          "1195:   case $basic_machine in",
          "1196:       x86-* | i*86-*)",
          "1197:    ;;",
          "1199:    os=-nto$os",
          "1200:    ;;",
          "1201:   esac",
          "1202:   ;;",
          "1203:  -nto-qnx*)",
          "1204:   ;;",
          "1205:  -nto*)",
          "1206:   os=`echo $os | sed -e 's|nto|nto-qnx|'`",
          "1207:   ;;",
          "1208:  -sim | -es1800* | -hms* | -xray | -os68k* | -none* | -v88r* \\",
          "1209:        | -windows* | -osx | -abug | -netware* | -os9* | -beos* | -haiku* \\",
          "1210:        | -macos* | -mpw* | -magic* | -mmixware* | -mon960* | -lnews*)",
          "1211:   ;;",
          "1212:  -mac*)",
          "1213:   os=`echo $os | sed -e 's|mac|macos|'`",
          "1214:   ;;",
          "1215:  -linux-dietlibc)",
          "1216:   os=-linux-dietlibc",
          "1217:   ;;",
          "1218:  -linux*)",
          "1219:   os=`echo $os | sed -e 's|linux|linux-gnu|'`",
          "1220:   ;;",
          "1221:  -sunos5*)",
          "1222:   os=`echo $os | sed -e 's|sunos5|solaris2|'`",
          "1223:   ;;",
          "1224:  -sunos6*)",
          "1225:   os=`echo $os | sed -e 's|sunos6|solaris3|'`",
          "1226:   ;;",
          "1227:  -opened*)",
          "1228:   os=-openedition",
          "1229:   ;;",
          "1230:         -os400*)",
          "1231:   os=-os400",
          "1232:   ;;",
          "1233:  -wince*)",
          "1234:   os=-wince",
          "1235:   ;;",
          "1236:  -osfrose*)",
          "1237:   os=-osfrose",
          "1238:   ;;",
          "1239:  -osf*)",
          "1240:   os=-osf",
          "1241:   ;;",
          "1242:  -utek*)",
          "1243:   os=-bsd",
          "1244:   ;;",
          "1245:  -dynix*)",
          "1246:   os=-bsd",
          "1247:   ;;",
          "1248:  -acis*)",
          "1249:   os=-aos",
          "1250:   ;;",
          "1251:  -atheos*)",
          "1252:   os=-atheos",
          "1253:   ;;",
          "1254:  -syllable*)",
          "1255:   os=-syllable",
          "1256:   ;;",
          "1257:  -386bsd)",
          "1258:   os=-bsd",
          "1259:   ;;",
          "1260:  -ctix* | -uts*)",
          "1261:   os=-sysv",
          "1262:   ;;",
          "1263:  -nova*)",
          "1264:   os=-rtmk-nova",
          "1265:   ;;",
          "1266:  -ns2 )",
          "1267:   os=-nextstep2",
          "1268:   ;;",
          "1269:  -nsk*)",
          "1270:   os=-nsk",
          "1271:   ;;",
          "1272:  # Preserve the version number of sinix5.",
          "1273:  -sinix5.*)",
          "1274:   os=`echo $os | sed -e 's|sinix|sysv|'`",
          "1275:   ;;",
          "1276:  -sinix*)",
          "1277:   os=-sysv4",
          "1278:   ;;",
          "1279:         -tpf*)",
          "1280:   os=-tpf",
          "1281:   ;;",
          "1282:  -triton*)",
          "1283:   os=-sysv3",
          "1284:   ;;",
          "1285:  -oss*)",
          "1286:   os=-sysv3",
          "1287:   ;;",
          "1288:  -svr4)",
          "1289:   os=-sysv4",
          "1290:   ;;",
          "1291:  -svr3)",
          "1292:   os=-sysv3",
          "1293:   ;;",
          "1294:  -sysvr4)",
          "1295:   os=-sysv4",
          "1296:   ;;",
          "1297:  # This must come after -sysvr4.",
          "1298:  -sysv*)",
          "1299:   ;;",
          "1300:  -ose*)",
          "1301:   os=-ose",
          "1302:   ;;",
          "1303:  -es1800*)",
          "1304:   os=-ose",
          "1305:   ;;",
          "1306:  -xenix)",
          "1307:   os=-xenix",
          "1308:   ;;",
          "1309:  -*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)",
          "1310:   os=-mint",
          "1311:   ;;",
          "1312:  -aros*)",
          "1313:   os=-aros",
          "1314:   ;;",
          "1315:  -kaos*)",
          "1316:   os=-kaos",
          "1317:   ;;",
          "1318:  -zvmoe)",
          "1319:   os=-zvmoe",
          "1320:   ;;",
          "1321:  -none)",
          "1322:   ;;",
          "1324:   # Get rid of the `-' at the beginning of $os.",
          "1325:   os=`echo $os | sed 's/[^-]*-//'`",
          "1326:   echo Invalid configuration \\`$1\\': system \\`$os\\' not recognized 1>&2",
          "1327:   exit 1",
          "1328:   ;;",
          "1329: esac",
          "1330: else",
          "1332: # Here we handle the default operating systems that come with various machines.",
          "1333: # The value should be what the vendor currently ships out the door with their",
          "1334: # machine or put another way, the most popular os provided with the machine.",
          "1336: # Note that if you're going to try to match \"-MANUFACTURER\" here (say,",
          "1337: # \"-sun\"), then you have to tell the case statement up towards the top",
          "1338: # that MANUFACTURER isn't an operating system.  Otherwise, code above",
          "1339: # will signal an error saying that MANUFACTURER isn't an operating",
          "1340: # system, and we'll never get to this point.",
          "1342: case $basic_machine in",
          "1344:   os=-riscix1.2",
          "1345:   ;;",
          "1346:  arm*-rebel)",
          "1347:   os=-linux",
          "1348:   ;;",
          "1349:  arm*-semi)",
          "1350:   os=-aout",
          "1351:   ;;",
          "1352:     c4x-* | tic4x-*)",
          "1353:         os=-coff",
          "1354:         ;;",
          "1355:  # This must come before the *-dec entry.",
          "1356:  pdp10-*)",
          "1357:   os=-tops20",
          "1358:   ;;",
          "1359:  pdp11-*)",
          "1360:   os=-none",
          "1361:   ;;",
          "1363:   os=-ultrix4.2",
          "1364:   ;;",
          "1365:  m68*-apollo)",
          "1366:   os=-domain",
          "1367:   ;;",
          "1368:  i386-sun)",
          "1369:   os=-sunos4.0.2",
          "1370:   ;;",
          "1371:  m68000-sun)",
          "1372:   os=-sunos3",
          "1373:   # This also exists in the configure program, but was not the",
          "1374:   # default.",
          "1375:   # os=-sunos4",
          "1376:   ;;",
          "1377:  m68*-cisco)",
          "1378:   os=-aout",
          "1379:   ;;",
          "1380:  mips*-cisco)",
          "1381:   os=-elf",
          "1382:   ;;",
          "1383:  mips*-*)",
          "1384:   os=-elf",
          "1385:   ;;",
          "1386:  or32-*)",
          "1387:   os=-coff",
          "1388:   ;;",
          "1390:   os=-sysv3",
          "1391:   ;;",
          "1392:  sparc-* | *-sun)",
          "1393:   os=-sunos4.1.1",
          "1394:   ;;",
          "1396:   os=-beos",
          "1397:   ;;",
          "1399:   os=-haiku",
          "1400:   ;;",
          "1402:   os=-aix",
          "1403:   ;;",
          "1405:   os=-mmixware",
          "1406:   ;;",
          "1408:   os=-proelf",
          "1409:   ;;",
          "1411:   os=-proelf",
          "1412:   ;;",
          "1414:   os=-proelf",
          "1415:   ;;",
          "1417:   os=-hpux",
          "1418:   ;;",
          "1420:   os=-hiux",
          "1421:   ;;",
          "1422:  i860-* | *-att | *-ncr | *-altos | *-motorola | *-convergent)",
          "1423:   os=-sysv",
          "1424:   ;;",
          "1426:   os=-amigaos",
          "1427:   ;;",
          "1429:   os=-dgux",
          "1430:   ;;",
          "1432:   os=-sysv3",
          "1433:   ;;",
          "1434:  m68k-ccur)",
          "1435:   os=-rtu",
          "1436:   ;;",
          "1437:  m88k-omron*)",
          "1438:   os=-luna",
          "1439:   ;;",
          "1441:   os=-nextstep",
          "1442:   ;;",
          "1444:   os=-ptx",
          "1445:   ;;",
          "1447:   os=-unos",
          "1448:   ;;",
          "1450:   os=-genix",
          "1451:   ;;",
          "1452:  i370-*)",
          "1453:   os=-mvs",
          "1454:   ;;",
          "1456:   os=-nextstep3",
          "1457:   ;;",
          "1459:   os=-sysv",
          "1460:   ;;",
          "1462:   os=-bsd",
          "1463:   ;;",
          "1465:   os=-bsd",
          "1466:   ;;",
          "1468:   os=-irix",
          "1469:   ;;",
          "1471:   os=-sysv4",
          "1472:   ;;",
          "1474:   os=-rtu",
          "1475:   ;;",
          "1476:  f30[01]-fujitsu | f700-fujitsu)",
          "1477:   os=-uxpv",
          "1478:   ;;",
          "1480:   os=-coff",
          "1481:   ;;",
          "1483:   os=-coff",
          "1484:   ;;",
          "1486:   os=-macos",
          "1487:   ;;",
          "1489:   os=-mint",
          "1490:   ;;",
          "1492:   os=-none",
          "1493:   ;;",
          "1494: esac",
          "1495: fi",
          "1497: # Here we handle the case where we know the os, and the CPU type, but not the",
          "1498: # manufacturer.  We pick the logical manufacturer.",
          "1499: vendor=unknown",
          "1500: case $basic_machine in",
          "1502:   case $os in",
          "1503:    -riscix*)",
          "1504:     vendor=acorn",
          "1505:     ;;",
          "1506:    -sunos*)",
          "1507:     vendor=sun",
          "1508:     ;;",
          "1509:    -aix*)",
          "1510:     vendor=ibm",
          "1511:     ;;",
          "1512:    -beos*)",
          "1513:     vendor=be",
          "1514:     ;;",
          "1515:    -hpux*)",
          "1516:     vendor=hp",
          "1517:     ;;",
          "1518:    -mpeix*)",
          "1519:     vendor=hp",
          "1520:     ;;",
          "1521:    -hiux*)",
          "1522:     vendor=hitachi",
          "1523:     ;;",
          "1524:    -unos*)",
          "1525:     vendor=crds",
          "1526:     ;;",
          "1527:    -dgux*)",
          "1528:     vendor=dg",
          "1529:     ;;",
          "1530:    -luna*)",
          "1531:     vendor=omron",
          "1532:     ;;",
          "1533:    -genix*)",
          "1534:     vendor=ns",
          "1535:     ;;",
          "1536:    -mvs* | -opened*)",
          "1537:     vendor=ibm",
          "1538:     ;;",
          "1539:    -os400*)",
          "1540:     vendor=ibm",
          "1541:     ;;",
          "1542:    -ptx*)",
          "1543:     vendor=sequent",
          "1544:     ;;",
          "1545:    -tpf*)",
          "1546:     vendor=ibm",
          "1547:     ;;",
          "1548:    -vxsim* | -vxworks* | -windiss*)",
          "1549:     vendor=wrs",
          "1550:     ;;",
          "1551:    -aux*)",
          "1552:     vendor=apple",
          "1553:     ;;",
          "1554:    -hms*)",
          "1555:     vendor=hitachi",
          "1556:     ;;",
          "1557:    -mpw* | -macos*)",
          "1558:     vendor=apple",
          "1559:     ;;",
          "1560:    -*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)",
          "1561:     vendor=atari",
          "1562:     ;;",
          "1563:    -vos*)",
          "1564:     vendor=stratus",
          "1565:     ;;",
          "1566:   esac",
          "1567:   basic_machine=`echo $basic_machine | sed \"s/unknown/$vendor/\"`",
          "1568:   ;;",
          "1569: esac",
          "1571: echo $basic_machine$os",
          "1572: exit",
          "1574: # Local variables:",
          "1575: # eval: (add-hook 'write-file-hooks 'time-stamp)",
          "1576: # time-stamp-start: \"timestamp='\"",
          "1577: # time-stamp-format: \"%:y-%02m-%02d\"",
          "1578: # time-stamp-end: \"'\"",
          "1579: # End:",
          "",
          "---------------"
        ],
        "configure.in||configure.in": [
          "File: configure.in -> configure.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: AC_INIT(pyfribidi.c)",
          "3: AM_INIT_AUTOMAKE(pyfribidi, 0.10.0)",
          "5: AC_ISC_POSIX",
          "6: AC_PROG_CC",
          "7: AC_PROG_INSTALL",
          "9: AC_C_CONST",
          "11: AC_PATH_PROG(PKG_CONFIG, pkg-config, no)",
          "13: dnl FriBdi",
          "14: dnl ======",
          "16: PKG_CHECK_MODULES(fribidi, fribidi)",
          "18: PY_CFLAGS=\"$PY_CFLAGS  $fribidi_CFLAGS\"",
          "19: PY_LIBS=\"$PY_LIBS $fribidi_LIBS\"",
          "21: dnl Python",
          "22: dnl ======",
          "24: AC_CHECK_PROG(have_python, \"python\", yes, no)",
          "26: if test \"x$have_python\" = \"xyes\"; then",
          "28:     PY_PREFIX=`python -c 'import sys ; print sys.prefix'`",
          "29:     PY_VERSION=`python -c 'import sys ; print sys.version[[0:3]]'`",
          "31:     PY_CFLAGS=\"$PY_LIBS $PY_CFLAGS -I$PY_PREFIX/include/python$PY_VERSION\"",
          "32:     PY_MODULES_PATH=\"$PY_PREFIX/lib/python$PY_VERSION/site-packages\"",
          "34:     AC_SUBST([PY_CFLAGS])",
          "35:     AC_SUBST([PY_MODULES_PATH])",
          "37:     AC_MSG_CHECKING(for $PY_PREFIX/include/python$PY_VERSION/Python.h)",
          "39:     if test -f $PY_PREFIX/include/python$PY_VERSION/Python.h; then",
          "40:         AC_MSG_RESULT(yes)",
          "41:         have_python=yes",
          "42:     else",
          "43:         AC_MSG_RESULT(no)",
          "44:         have_python=no",
          "45:     fi",
          "47: fi",
          "49: AC_OUTPUT([",
          "50: Makefile",
          "51: ])",
          "53: dnl ERROR",
          "54: dnl =====",
          "56: if test \"x$have_python\" = \"xno\"; then",
          "57:     echo",
          "58:     echo \"ERROR: You do not have python-devel on your system\"",
          "59:     echo \"Check for package name like python-dev for your system\"",
          "60:     echo",
          "61: else",
          "62:     echo",
          "63:     echo \"PyFribidi version is $VERSION\"",
          "64:     echo",
          "65:     echo \"Python version is $PY_VERSION\"",
          "66:     echo \"Python modules path is $PY_MODULES_PATH\"",
          "67:     echo \"Type make to buils pyfribidi\"",
          "68:     echo",
          "69: fi",
          "",
          "---------------"
        ],
        "fribidi_systray.py||fribidi_systray.py": [
          "File: fribidi_systray.py -> fribidi_systray.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/python",
          "2: # -*- coding: utf-8 -*-",
          "4: # This program is free software; you can redistribute it and/or modify",
          "5: # it under the terms of the GNU General Public License as published by",
          "6: # the Free Software Foundation; either version 2 of the License, or",
          "7: # (at your option) any later version.",
          "8: #",
          "9: # This program is distributed in the hope that it will be useful,",
          "10: # but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11: # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12: # GNU General Public License for more details.",
          "13: #",
          "14: # You should have received a copy of the GNU General Public License",
          "15: # along with this program; if not, write to the Free Software",
          "16: # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.",
          "18: # Copyright (C) 2005, 2010 Yaacov Zamir",
          "20: import gtk",
          "21: import egg.trayicon",
          "22: import pyfribidi",
          "24: clip = gtk.Clipboard()",
          "25: button = gtk.Button(\"BD\")",
          "26: trayIcon = egg.trayicon.TrayIcon(\"BiDiTrayIcon\")",
          "28: def on_button_clicked(obj):",
          "29:  inText = clip.wait_for_text()",
          "30:  outText = pyfribidi.log2vis (inText, pyfribidi.ON)",
          "31:  clip.set_text(outText)",
          "33: button.connect(\"clicked\", on_button_clicked)",
          "34: trayIcon.add(button)",
          "35: trayIcon.show_all()",
          "37: gtk.main()",
          "",
          "---------------"
        ],
        "pyfribidi.c||pyfribidi.c": [
          "File: pyfribidi.c -> pyfribidi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     Install:",
          "23:  python setup.py install",
          "28: #include <fribidi.h>",
          "29: #undef _POSIX_C_SOURCE",
          "31: #include \"pyfribidi.h\"",
          "33: #define MAX_STR_LEN 65000",
          "35: static PyObject *",
          "36: _pyfribidi_log2vis (PyObject * self, PyObject * args, PyObject * kw)",
          "37: {",
          "43:  static char *kwargs[] =",
          "44:   { \"logical\", \"base_direction\", \"encoding\", \"clean\", NULL };",
          "46:  if (!PyArg_ParseTupleAndKeywords (args, kw, \"O|lsI\", kwargs,",
          "47:        &logical, &base, &encoding, &clean))",
          "48:   return NULL;",
          "52:  if (!(base == FRIBIDI_TYPE_RTL ||",
          "53:        base == FRIBIDI_TYPE_LTR || base == FRIBIDI_TYPE_ON))",
          "54:   return PyErr_Format (PyExc_ValueError,",
          "55:          \"invalid value %d: use either RTL, LTR or ON\",",
          "56:          base);",
          "60:  if (PyUnicode_Check (logical))",
          "61:   return log2vis_unicode (logical, base, clean);",
          "62:  else if (PyString_Check (logical))",
          "63:   return log2vis_encoded_string (logical, encoding, base, clean);",
          "64:  else",
          "65:   return PyErr_Format (PyExc_TypeError,",
          "66:          \"expected unicode or str, not %s\",",
          "67:          logical->ob_type->tp_name);",
          "68: }",
          "71:   log2vis_unicode - reorder unicode string visually",
          "73:   Return value: new reference",
          "75:   Return Python unicode object ordered visually or NULL if an exception",
          "76:   was raised.",
          "78:   Since Python and fribidi don't now know each other unicode format,",
          "79:   encode input string as utf-8 and invoke log2vis_utf8.",
          "81:   Arguments:",
          "83:   - unicode: Python unicode object",
          "84:   - base_direction: input string base direction, e.g right to left",
          "87: static PyObject *",
          "88: log2vis_unicode (PyObject * unicode, FriBidiParType base_direction, int clean)",
          "89: {",
          "94:  int length = PyUnicode_GET_SIZE (unicode);",
          "96:  logical = PyUnicode_AsUTF8String (unicode);",
          "97:  if (logical == NULL)",
          "98:   goto cleanup;",
          "100:  visual = log2vis_utf8 (logical, length, base_direction, clean);",
          "101:  if (visual == NULL)",
          "102:   goto cleanup;",
          "104:  result = PyUnicode_DecodeUTF8 (PyString_AS_STRING (visual),",
          "105:            PyString_GET_SIZE (visual), \"strict\");",
          "107:       cleanup:",
          "108:  Py_XDECREF (logical);",
          "109:  Py_XDECREF (visual);",
          "111:  return result;",
          "112: }",
          "115:   log2vis_encoded_string - reorder encoded string visually",
          "117:   Return value: new reference",
          "119:   Return Python string object ordered visually or NULL if an exception",
          "120:   was raised. The returned string use the same encoding.",
          "122:   Invoke either log2vis_utf8 or log2vis_unicode.",
          "124:   - string: Python string object using encoding",
          "125:   - encoding: string encoding, any encoding name known to Python",
          "126:   - base_direction: input string base direction, e.g right to left",
          "129: static PyObject *",
          "130: log2vis_encoded_string (PyObject * string, const char *encoding,",
          "131:    FriBidiParType base_direction, int clean)",
          "132: {",
          "137:  logical = PyUnicode_Decode (PyString_AS_STRING (string),",
          "138:         PyString_GET_SIZE (string),",
          "139:         encoding, \"strict\");",
          "140:  if (logical == NULL)",
          "141:   return NULL;",
          "143:  if (strcmp (encoding, \"utf-8\") == 0)",
          "145:   result = log2vis_utf8 (string,",
          "146:            PyUnicode_GET_SIZE (logical),",
          "147:            base_direction, clean);",
          "148:  else",
          "149:  {",
          "152:   PyObject *visual = log2vis_unicode (logical, base_direction, clean);",
          "154:   if (visual)",
          "155:   {",
          "156:    result = PyUnicode_Encode (PyUnicode_AS_UNICODE",
          "157:          (visual),",
          "158:          PyUnicode_GET_SIZE (visual),",
          "159:          encoding, \"strict\");",
          "160:    Py_DECREF (visual);",
          "161:   }",
          "162:  }",
          "164:  Py_DECREF (logical);",
          "166:  return result;",
          "167: }",
          "170:   log2vis_utf8 - reorder string visually",
          "172:   Return value: new reference",
          "174:   Return Python string object ordered visually or NULL if an exception",
          "175:   was raised.",
          "177:   Arguments:",
          "179:   - string: Python string object using utf-8 encoding",
          "180:   - unicode_length: number of characters in string. This is not the",
          "181:     number of bytes in the string, which may be much bigger than the",
          "182:     number of characters, because utf-8 uses 1-4 bytes per character.",
          "183:   - base_direction: input string base direction, e.g right to left",
          "186: static PyObject *",
          "187: log2vis_utf8 (PyObject * string, int unicode_length,",
          "188:        FriBidiParType base_direction, int clean)",
          "189: {",
          "198:  logical = PyMem_New (FriBidiChar, unicode_length + 1);",
          "199:  if (logical == NULL)",
          "200:  {",
          "201:   PyErr_SetString (PyExc_MemoryError,",
          "202:      \"failed to allocate unicode buffer\");",
          "203:   goto cleanup;",
          "204:  }",
          "206:  visual = PyMem_New (FriBidiChar, unicode_length + 1);",
          "207:  if (visual == NULL)",
          "208:  {",
          "209:   PyErr_SetString (PyExc_MemoryError,",
          "210:      \"failed to allocate unicode buffer\");",
          "211:   goto cleanup;",
          "212:  }",
          "216:  fribidi_utf8_to_unicode (PyString_AS_STRING (string),",
          "217:      PyString_GET_SIZE (string), logical);",
          "219:  if (!fribidi_log2vis (logical, unicode_length, &base_direction, visual,",
          "220:          NULL, NULL, NULL))",
          "221:  {",
          "222:   PyErr_SetString (PyExc_RuntimeError,",
          "223:      \"fribidi failed to order string\");",
          "224:   goto cleanup;",
          "225:  }",
          "228:  if (clean)",
          "229:   fribidi_remove_bidi_marks (visual, unicode_length, NULL, NULL, NULL);",
          "233:  visual_utf8 = PyMem_New(char, MAX_STR_LEN);",
          "234:  if (visual_utf8 == NULL)",
          "235:  {",
          "236:   PyErr_SetString (PyExc_MemoryError,",
          "237:     \"failed to allocate UTF-8 buffer\");",
          "238:   goto cleanup;",
          "239:  }",
          "243:  new_len = fribidi_unicode_to_utf8 (visual, unicode_length, visual_utf8);",
          "245:  result = PyString_FromStringAndSize (visual_utf8, new_len);",
          "246:  if (result == NULL)",
          "248:   goto cleanup;",
          "250:       cleanup:",
          "252:  PyMem_Del (logical);",
          "253:  PyMem_Del (visual);",
          "254:  PyMem_Del (visual_utf8);",
          "256:  return result;",
          "257: }",
          "259: static PyMethodDef PyfribidiMethods[] = {",
          "260:  {\"log2vis\", (PyCFunction) _pyfribidi_log2vis,",
          "261:   METH_VARARGS | METH_KEYWORDS,",
          "262:   _pyfribidi_log2vis__doc__},",
          "263:  {NULL, NULL, 0, NULL}",
          "264: };",
          "266: PyMODINIT_FUNC",
          "267: initpyfribidi (void)",
          "268: {",
          "269:  PyObject *module;",
          "273:  module = Py_InitModule3 (\"pyfribidi\", PyfribidiMethods,",
          "274:      _pyfribidi__doc__);",
          "276:  PyModule_AddIntConstant (module, \"RTL\", (long) FRIBIDI_TYPE_RTL);",
          "277:  PyModule_AddIntConstant (module, \"LTR\", (long) FRIBIDI_TYPE_LTR);",
          "278:  PyModule_AddIntConstant (module, \"ON\", (long) FRIBIDI_TYPE_ON);",
          "280:  PyModule_AddStringConstant (module, \"__author__\",",
          "281:         \"Yaacov Zamir and Nir Soffer\");",
          "282: }",
          "",
          "---------------"
        ],
        "pyfribidi.h||pyfribidi.h": [
          "File: pyfribidi.h -> pyfribidi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     Install:",
          "23:  python setup.py install",
          "27: #ifndef __PYFRIBIDI_H__",
          "28: #define __PYFRIBIDI_H__",
          "30: static PyObject *_pyfribidi_log2vis (PyObject * self, PyObject * args,",
          "31:          PyObject * kw);",
          "33: static PyObject *log2vis_unicode (PyObject * unicode,",
          "34:       FriBidiParType base_direction, int clean);",
          "36: static PyObject *log2vis_encoded_string (PyObject * string,",
          "37:       const char *encoding,",
          "38:       FriBidiParType base_direction, int clean);",
          "40: static PyObject *log2vis_utf8 (PyObject * string, int unicode_length,",
          "41:           FriBidiParType base_direction, int clean);",
          "43: PyMODINIT_FUNC initpyfribidi (void);",
          "45: PyDoc_STRVAR (_pyfribidi__doc__,",
          "46:        \"simple Python binding for fribidi.\\n\\n\"",
          "47:        \"pyfribidi uses libfribidi to order text visually using the unicode\\n\"",
          "48:        \"algorithm. pyfribidi can also convert text from visual order to\\n\"",
          "49:        \"logical order, but the conversion may be wrong in certain cases.\\n\");",
          "52: PyDoc_STRVAR (_pyfribidi_log2vis__doc__,",
          "53:        \"log2vis(logical, base_direction=RTL , encoding='utf-8') -> visual\\n\\n\"",
          "54:        \"Return string reordered visually according to base direction.\\n\"",
          "55:        \"Return the same type of input string, either unicode or string using\\n\"",
          "56:        \"encoding.\\n\\n\"",
          "57:        \"Note that this function does not handle line breaking. You should\\n\"",
          "58:        \"call log2vis with each line.\\n\\n\"",
          "59:        \"Arguments:\\n\\n\"",
          "60:        \"- logical: unicode or encoded string\\n\"",
          "61:        \"- base_direction: optional logical base direction. Accepts one of\\n\"",
          "62:        \"  the constants LTR, RTL or ON, defined in this module. ON calculate\\n\"",
          "63:        \"  the base direction according to the BiDi algorithm.\\n\"",
          "64:        \"- encoding: optional string encoding (ignored for unicode input)\\n\");",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "3: from distutils.core import setup",
          "4: from distutils.extension import Extension",
          "5: import os",
          "7: def _getpkgconfigvalue(value, package=\"fribidi\"):",
          "8:  \"\"\" get a value from pkg-config for package (default: fribidi)",
          "9:      param value: long-option to pkg-config",
          "10:  \"\"\"",
          "11:  f = os.popen(\"pkg-config --%s %s\" % (value, package))",
          "12:  x = f.readline().strip()",
          "13:  f.close()",
          "15:  # generators: 2.4+ only :(",
          "16:  #return list(y[2:] for y in x.split(\" \"))",
          "18:  l = []",
          "19:  for y in x.split(\" \"):",
          "20:   l.append(y[2:])",
          "21:  return l",
          "23: setup (name = \"pyfribidi\",",
          "24:         version = \"0.10.0\",",
          "25:         description = \"Python libfribidi interface\",",
          "26:         author = \"Yaacov Zamir, Nir Soffer\",",
          "27:         author_email = \"kzamir@walla.co.il\",",
          "28:         url = \"http://hspell-gui.sourceforge.net/pyfribidi.html\",",
          "29:         license = \"GPL\",",
          "31:         ext_modules = [ Extension(",
          "32:                 name = 'pyfribidi',",
          "33:                 sources = ['pyfribidi.c'],",
          "34:                 libraries = _getpkgconfigvalue(\"libs-only-l\"),",
          "35:                 include_dirs = _getpkgconfigvalue(\"cflags-only-I\")",
          "36:         )]",
          "37: )",
          "",
          "---------------"
        ],
        "syspath.py||syspath.py": [
          "File: syspath.py -> syspath.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import os, sys",
          "3: if sys.platform == 'darwin':",
          "4:     # Setup sys.path so we can build and test a built version without",
          "5:     # installing in the system site-packages, which reqire root access.",
          "6:     builddir = [os.path.join('build', name) for name in os.listdir('build')",
          "7:                 if name.startswith('lib.%s' % sys.platform)]",
          "8:     sys.path = builddir + sys.path",
          "",
          "---------------"
        ],
        "test_pyfribidi.py||test_pyfribidi.py": [
          "File: test_pyfribidi.py -> test_pyfribidi.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/python",
          "2: # -*- coding: utf-8 -*-",
          "3: \"\"\"",
          "4: These are very basic tests, because fribidi has its own tests. It may be",
          "5: better to reuse fribidi own tests, but its not clear what is the value",
          "6: of base_dir for those tests.",
          "7: \"\"\"",
          "9: import syspath",
          "10: import unittest",
          "11: import pyfribidi",
          "12: from pyfribidi import RTL, LTR, ON",
          "15: class TestSkipped(Exception):",
          "16:     \"\"\" Raised when test can not run \"\"\"",
          "19: class InputTests(unittest.TestCase):",
          "21:     def testRequireInputString(self):",
          "22:         \"\"\" input: require input string or unicode \"\"\"",
          "23:         self.assertRaises(TypeError, pyfribidi.log2vis)",
          "25:     def testInvalidInputString(self):",
          "26:         \"\"\" input: raise TypeError for non string or unicode input \"\"\"",
          "27:         self.assertRaises(TypeError, pyfribidi.log2vis, 1)",
          "29:     def testInvalidDirection(self):",
          "30:         \"\"\" input: raise ValueError for invalid direction \"\"\"",
          "31:         self.assertRaises(ValueError, pyfribidi.log2vis, u\"\u05e9\u05dc\u05d5\u05dd\",",
          "32:                           base_direction=1)",
          "34:     def testUnknownEncoding(self):",
          "35:         \"\"\" input: raise LookupError for invalid encoding \"\"\"",
          "36:         self.assertRaises(LookupError, pyfribidi.log2vis, \"\u05e9\u05dc\u05d5\u05dd\",",
          "37:                           encoding='foo')",
          "39:     def testInvalidEncodedString(self):",
          "40:         \"\"\" input: raise UnicodeError for invalid encoded string \"\"\"",
          "41:         self.assertRaises(UnicodeError, pyfribidi.log2vis, \"\u05e9\u05dc\u05d5\u05dd\",",
          "42:                           encoding='iso8859-8')",
          "45: class UnicodeTests(unittest.TestCase):",
          "47:     def testEmpty(self):",
          "48:         \"\"\" unicode: empty string \"\"\"",
          "49:         self.assertEqual(pyfribidi.log2vis(u''), u'')",
          "51:     def testDefaultDirection(self):",
          "52:         \"\"\" unicode: use RTL default \"\"\"",
          "53:         self.assertEqual(pyfribidi.log2vis(u\"hello - \u05e9\u05dc\u05d5\u05dd\"),",
          "54:                          pyfribidi.log2vis(u\"hello - \u05e9\u05dc\u05d5\u05dd\", RTL))",
          "56:     def testAsRTL(self):",
          "57:         \"\"\" unicode: reorder line as RTL \"\"\"",
          "58:         self.assertEqual(pyfribidi.log2vis(u\"hello - \u05e9\u05dc\u05d5\u05dd\", RTL),",
          "59:                          u\"\u05dd\u05d5\u05dc\u05e9 - hello\")",
          "61:     def testAsLTR(self):",
          "62:         \"\"\" unicode: reorder line as LTR \"\"\"",
          "63:         self.assertEqual(pyfribidi.log2vis(u\"hello - \u05e9\u05dc\u05d5\u05dd\", LTR),",
          "64:                          u\"hello - \u05dd\u05d5\u05dc\u05e9\")",
          "66:     def testNaturalLTR(self):",
          "67:         \"\"\" unicode: reorder LTR line by natural order \"\"\"",
          "68:         self.assertEqual(pyfribidi.log2vis(u\"hello - \u05e9\u05dc\u05d5\u05dd\", ON),",
          "69:                          u\"hello - \u05dd\u05d5\u05dc\u05e9\")",
          "71:     def testNaturalRTL(self):",
          "72:         \"\"\" unicode: reorder RTL line by natural order \"\"\"",
          "73:         self.assertEqual(pyfribidi.log2vis(u\"\u05e9\u05dc\u05d5\u05dd - hello\", ON),",
          "74:                          u\"hello - \u05dd\u05d5\u05dc\u05e9\")",
          "77: class UTF8Tests(unittest.TestCase):",
          "78:     \"\"\" Same tests for utf8, used mainly on linux \"\"\"",
          "80:     def testEmpty(self):",
          "81:         \"\"\" utf8: empty string \"\"\"",
          "82:         self.assertEqual(pyfribidi.log2vis(''), '')",
          "84:     def testDefaultDirection(self):",
          "85:         \"\"\" utf8: use RTL default \"\"\"",
          "86:         self.assertEqual(pyfribidi.log2vis(\"hello - \u05e9\u05dc\u05d5\u05dd\"),",
          "87:                          pyfribidi.log2vis(\"hello - \u05e9\u05dc\u05d5\u05dd\", RTL))",
          "89:     def testAsRTL(self):",
          "90:         \"\"\" utf8: reorder line as RTL \"\"\"",
          "91:         self.assertEqual(pyfribidi.log2vis(\"hello - \u05e9\u05dc\u05d5\u05dd\", RTL),",
          "92:                          \"\u05dd\u05d5\u05dc\u05e9 - hello\")",
          "94:     def testAsLTR(self):",
          "95:         \"\"\" utf8: reorder line as LTR \"\"\"",
          "96:         self.assertEqual(pyfribidi.log2vis(\"hello - \u05e9\u05dc\u05d5\u05dd\", LTR),",
          "97:                          \"hello - \u05dd\u05d5\u05dc\u05e9\")",
          "99:     def testNaturalLTR(self):",
          "100:         \"\"\" utf8: reorder LTR line by natural order \"\"\"",
          "101:         self.assertEqual(pyfribidi.log2vis(\"hello - \u05e9\u05dc\u05d5\u05dd\", ON),",
          "102:                          \"hello - \u05dd\u05d5\u05dc\u05e9\")",
          "104:     def testNaturalRTL(self):",
          "105:         \"\"\" utf8: reorder RTL line by natural order \"\"\"",
          "106:         self.assertEqual(pyfribidi.log2vis(\"\u05e9\u05dc\u05d5\u05dd - hello\", ON),",
          "107:                          \"hello - \u05dd\u05d5\u05dc\u05e9\")",
          "110: class OtherEncodingsTests(unittest.TestCase):",
          "111:     \"\"\" Minimal tests for other encodings \"\"\"",
          "113:     def testIso8859_8NaturalRTL(self):",
          "114:         \"\"\" other encodings: iso8859-8 \"\"\"",
          "115:         charset = 'iso8859-8'",
          "116:         self.assertEqual(pyfribidi.log2vis(u\"\u05e9\u05dc\u05d5\u05dd - hello\".encode(charset),",
          "117:                                            encoding=charset),",
          "118:                          u\"hello - \u05dd\u05d5\u05dc\u05e9\".encode(charset))",
          "120:     def testCp1255NaturalRTL(self):",
          "121:         \"\"\" other encodings: cp1255 \"\"\"",
          "122:         charset = 'cp1255'",
          "123:         self.assertEqual(pyfribidi.log2vis(u\"\u05e9\u05dc\u05d5\u05dd - hello\".encode(charset),",
          "124:                                            encoding=charset),",
          "125:                          u\"hello - \u05dd\u05d5\u05dc\u05e9\".encode(charset))",
          "127:     def testUTF16NaturalRTL(self):",
          "128:         \"\"\" other encodings: utf-16 \"\"\"",
          "129:         charset = 'utf-16'",
          "130:         self.assertEqual(pyfribidi.log2vis(u\"\u05e9\u05dc\u05d5\u05dd - hello\".encode(charset),",
          "131:                                            encoding=charset),",
          "132:                          u\"hello - \u05dd\u05d5\u05dc\u05e9\".encode(charset))",
          "135: if __name__ == '__main__':",
          "136:     suite = unittest.defaultTestLoader.loadTestsFromName(__name__)",
          "137:     unittest.TextTestRunner(verbosity=2).run(suite)",
          "",
          "---------------"
        ],
        "time_pyfribidi.py||time_pyfribidi.py": [
          "File: time_pyfribidi.py -> time_pyfribidi.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/python",
          "2: # -*- coding: utf-8 -*-",
          "3: \"\"\"",
          "4: time pyfribidi with all hebrew encodings.",
          "5: \"\"\"",
          "7: import syspath",
          "8: import timeit",
          "9: import pyfribidi",
          "11: hebrew_encodings = ['unicode', 'utf-8', 'utf-16', 'iso8859-8', 'cp1255']",
          "13: def timeEncoding(encoding, tests):",
          "15:     setup=\"\"\"",
          "16: import pyfribidi",
          "17: text = 'Hello - \u05e9\u05dc\u05d5\u05dd, hello - \u05e9\u05dc\u05d5\u05dd, hello - \u05e9\u05dc\u05d5\u05dd, hello - \u05e9\u05dc\u05d5\u05dd, hello - \u05e9\u05dc\u05d5\u05dd.'",
          "18: text = text.decode('utf-8')",
          "19: if '%(encoding)s' != 'unicode':",
          "20:     text = text.encode('%(encoding)s')",
          "21: \"\"\" % locals()",
          "23:     if encoding in ['unicode', 'utf-8']:",
          "24:         # utf-8 is the default encoding for strings",
          "25:         code = \"pyfribidi.log2vis(text)\"",
          "26:     else:",
          "27:         # other encodings require encoding parameter",
          "28:         code = \"pyfribidi.log2vis(text, encoding='%s')\" % encoding",
          "30:     timer = timeit.Timer(code, setup)",
          "31:     seconds = timer.timeit(number=tests)",
          "32:     microseconds = 1000000 * seconds / tests",
          "33:     print \"%12s: %.8f seconds (%.2f usec/pass)\" % (encoding, seconds,",
          "34:                                                    microseconds)",
          "37: # warm up caches",
          "38: for i in xrange(100000):",
          "39:     pyfribidi.log2vis(u'Some text to warm up the caches')",
          "41: lines = 50 # typical screen of text",
          "42: print",
          "43: print 'time to rerorder %s lines:' % lines",
          "44: print",
          "45: for encoding in hebrew_encodings:",
          "46:     timeEncoding(encoding, lines)",
          "48: lines = 100000",
          "49: print",
          "50: print 'time to rerorder %s lines:' % lines",
          "51: print",
          "52: for encoding in hebrew_encodings:",
          "53:     timeEncoding(encoding, lines)",
          "",
          "---------------"
        ]
      }
    }
  ]
}