{
  "cve_id": "CVE-2012-2127",
  "cve_desc": "fs/proc/root.c in the procfs implementation in the Linux kernel before 3.2 does not properly interact with CLONE_NEWPID clone system calls, which allows remote attackers to cause a denial of service (reference leak and memory consumption) by making many connections to a daemon that uses PID namespaces to isolate clients, as demonstrated by vsftpd.",
  "repo": "torvalds/linux",
  "patch_hash": "905ad269c55fc62bee3da29f7b1d1efeba8aa1e1",
  "patch_info": {
    "commit_hash": "905ad269c55fc62bee3da29f7b1d1efeba8aa1e1",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/905ad269c55fc62bee3da29f7b1d1efeba8aa1e1",
    "files": [
      "fs/proc/root.c"
    ],
    "message": "procfs: fix a vfsmount longterm reference leak\n\nkern_mount() doesn't pair with plain mntput()...\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
    "before_after_code_files": [
      "fs/proc/root.c||fs/proc/root.c"
    ]
  },
  "patch_diff": {
    "fs/proc/root.c||fs/proc/root.c": [
      "File: fs/proc/root.c -> fs/proc/root.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "92: void __init proc_root_init(void)",
      "93: {",
      "95:  int err;",
      "97:  proc_init_inodecache();",
      "98:  err = register_filesystem(&proc_fs_type);",
      "99:  if (err)",
      "100:   return;",
      "103:   unregister_filesystem(&proc_fs_type);",
      "104:   return;",
      "105:  }",
      "108:  proc_symlink(\"mounts\", NULL, \"self/mounts\");",
      "110:  proc_net_init();",
      "",
      "[Removed Lines]",
      "94:  struct vfsmount *mnt;",
      "101:  mnt = kern_mount_data(&proc_fs_type, &init_pid_ns);",
      "102:  if (IS_ERR(mnt)) {",
      "107:  init_pid_ns.proc_mnt = mnt;",
      "",
      "[Added Lines]",
      "100:  err = pid_ns_prepare_proc(&init_pid_ns);",
      "101:  if (err) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "210: void pid_ns_release_proc(struct pid_namespace *ns)",
      "211: {",
      "213: }",
      "",
      "[Removed Lines]",
      "212:  mntput(ns->proc_mnt);",
      "",
      "[Added Lines]",
      "210:  kern_unmount(ns->proc_mnt);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "52e9fc76d0d4b1e8adeee736172c6c23180059b2",
      "candidate_info": {
        "commit_hash": "52e9fc76d0d4b1e8adeee736172c6c23180059b2",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/52e9fc76d0d4b1e8adeee736172c6c23180059b2",
        "files": [
          "fs/proc/inode.c",
          "fs/proc/internal.h",
          "fs/proc/root.c"
        ],
        "message": "procfs: kill the global proc_mnt variable\n\nAfter the previous cleanup in proc_get_sb() the global proc_mnt has no\nreasons to exists, kill it.\n\nSigned-off-by: Oleg Nesterov <oleg@redhat.com>\nSigned-off-by: Eric W. Biederman <ebiederm@xmission.com>\nSigned-off-by: Daniel Lezcano <daniel.lezcano@free.fr>\nCc: Alexey Dobriyan <adobriyan@gmail.com>\nAcked-by: Serge E. Hallyn <serge@hallyn.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "fs/proc/inode.c||fs/proc/inode.c",
          "fs/proc/internal.h||fs/proc/internal.h",
          "fs/proc/root.c||fs/proc/root.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/proc/root.c||fs/proc/root.c"
          ],
          "candidate": [
            "fs/proc/root.c||fs/proc/root.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/proc/inode.c||fs/proc/inode.c": [
          "File: fs/proc/inode.c -> fs/proc/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:  }",
          "47: }",
          "51: static struct kmem_cache * proc_inode_cachep;",
          "53: static struct inode *proc_alloc_inode(struct super_block *sb)",
          "",
          "[Removed Lines]",
          "49: struct vfsmount *proc_mnt;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fs/proc/internal.h||fs/proc/internal.h": [
          "File: fs/proc/internal.h -> fs/proc/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: }",
          "108: void pde_put(struct proc_dir_entry *pde);",
          "111: int proc_fill_super(struct super_block *);",
          "112: struct inode *proc_get_inode(struct super_block *, struct proc_dir_entry *);",
          "",
          "[Removed Lines]",
          "110: extern struct vfsmount *proc_mnt;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fs/proc/root.c||fs/proc/root.c": [
          "File: fs/proc/root.c -> fs/proc/root.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: void __init proc_root_init(void)",
          "92: {",
          "93:  int err;",
          "95:  proc_init_inodecache();",
          "96:  err = register_filesystem(&proc_fs_type);",
          "97:  if (err)",
          "98:   return;",
          "101:   unregister_filesystem(&proc_fs_type);",
          "102:   return;",
          "103:  }",
          "106:  proc_symlink(\"mounts\", NULL, \"self/mounts\");",
          "108:  proc_net_init();",
          "",
          "[Removed Lines]",
          "99:  proc_mnt = kern_mount_data(&proc_fs_type, &init_pid_ns);",
          "100:  if (IS_ERR(proc_mnt)) {",
          "105:  init_pid_ns.proc_mnt = proc_mnt;",
          "",
          "[Added Lines]",
          "93:  struct vfsmount *mnt;",
          "100:  mnt = kern_mount_data(&proc_fs_type, &init_pid_ns);",
          "101:  if (IS_ERR(mnt)) {",
          "106:  init_pid_ns.proc_mnt = mnt;",
          "",
          "---------------"
        ]
      }
    }
  ]
}