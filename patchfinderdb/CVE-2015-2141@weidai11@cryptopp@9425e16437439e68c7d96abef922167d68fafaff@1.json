{
  "cve_id": "CVE-2015-2141",
  "cve_desc": "The InvertibleRWFunction::CalculateInverse function in rw.cpp in libcrypt++ 5.6.2 does not properly blind private key operations for the Rabin-Williams digital signature algorithm, which allows remote attackers to obtain private keys via a timing attack.",
  "repo": "weidai11/cryptopp",
  "patch_hash": "9425e16437439e68c7d96abef922167d68fafaff",
  "patch_info": {
    "commit_hash": "9425e16437439e68c7d96abef922167d68fafaff",
    "repo": "weidai11/cryptopp",
    "commit_url": "https://github.com/weidai11/cryptopp/commit/9425e16437439e68c7d96abef922167d68fafaff",
    "files": [
      "rw.cpp"
    ],
    "message": "Fix for CVE-2015-2141. Thanks to Evgeny Sidorov for reporting. Squaring to satisfy Jacobi requirements suggested by JPM.",
    "before_after_code_files": [
      "rw.cpp||rw.cpp"
    ]
  },
  "patch_diff": {
    "rw.cpp||rw.cpp": [
      "File: rw.cpp -> rw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "126:  DoQuickSanityCheck();",
      "127:  ModularArithmetic modn(m_n);",
      "128:  Integer r, rInv;",
      "130:   r.Randomize(rng, Integer::One(), m_n - Integer::One());",
      "131:   rInv = modn.MultiplicativeInverse(r);",
      "132:  } while (rInv.IsZero());",
      "133:  Integer re = modn.Square(r);",
      "134:  re = modn.Multiply(re, x);   // blind",
      "",
      "[Removed Lines]",
      "129:  do { // do this in a loop for people using small numbers for testing",
      "",
      "[Added Lines]",
      "131:  do {",
      "135:   r = modn.Square(r);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e522574ddd723315f3cfdeec063d3dd079ea5bf6",
      "candidate_info": {
        "commit_hash": "e522574ddd723315f3cfdeec063d3dd079ea5bf6",
        "repo": "weidai11/cryptopp",
        "commit_url": "https://github.com/weidai11/cryptopp/commit/e522574ddd723315f3cfdeec063d3dd079ea5bf6",
        "files": [
          "rw.cpp"
        ],
        "message": "Attempting to clear unknown pragma warning under GCC 5.1. This might be a compiler bug...",
        "before_after_code_files": [
          "rw.cpp||rw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rw.cpp||rw.cpp"
          ],
          "candidate": [
            "rw.cpp||rw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "rw.cpp||rw.cpp": [
          "File: rw.cpp -> rw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #ifndef CRYPTOPP_IMPORTS",
          "16: #endif",
          "18: NAMESPACE_BEGIN(CryptoPP)",
          "20: void RWFunction::BERDecode(BufferedTransformation &bt)",
          "21: {",
          "22:  BERSequenceDecoder seq(bt);",
          "",
          "[Removed Lines]",
          "14: #ifdef _OPENMP",
          "15: static const bool CRYPTOPP_RW_USE_OMP = false;",
          "",
          "[Added Lines]",
          "14: #if GCC_DIAGNOSTIC_AWARE",
          "15: # pragma GCC diagnostic push",
          "16: # pragma GCC diagnostic ignored \"-Wunknown-pragmas\"",
          "21: #ifdef _OPENMP",
          "22: static const bool CRYPTOPP_RW_USE_OMP = false;",
          "23: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285: NAMESPACE_END",
          "287: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292: #if GCC_DIAGNOSTIC_AWARE",
          "293: # pragma GCC diagnostic pop",
          "294: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f59d9af3598927cd83ac0582abc0a977395f049",
      "candidate_info": {
        "commit_hash": "8f59d9af3598927cd83ac0582abc0a977395f049",
        "repo": "weidai11/cryptopp",
        "commit_url": "https://github.com/weidai11/cryptopp/commit/8f59d9af3598927cd83ac0582abc0a977395f049",
        "files": [
          "3way.cpp",
          "asn.cpp",
          "datatest.cpp",
          "filters.cpp",
          "fipstest.cpp",
          "hkdf.h",
          "network.cpp",
          "rijndael.cpp",
          "rw.cpp",
          "validat1.cpp",
          "xtr.cpp",
          "zinflate.cpp"
        ],
        "message": "Cleared unused variable and function warnings",
        "before_after_code_files": [
          "3way.cpp||3way.cpp",
          "asn.cpp||asn.cpp",
          "datatest.cpp||datatest.cpp",
          "filters.cpp||filters.cpp",
          "fipstest.cpp||fipstest.cpp",
          "hkdf.h||hkdf.h",
          "network.cpp||network.cpp",
          "rijndael.cpp||rijndael.cpp",
          "rw.cpp||rw.cpp",
          "validat1.cpp||validat1.cpp",
          "xtr.cpp||xtr.cpp",
          "zinflate.cpp||zinflate.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rw.cpp||rw.cpp"
          ],
          "candidate": [
            "rw.cpp||rw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "3way.cpp||3way.cpp": [
          "File: 3way.cpp -> 3way.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: static const word32 START_E = 0x0b0b; // round constant of first encryption round",
          "17: static const word32 START_D = 0xb1b1; // round constant of first decryption round",
          "20: static inline word32 reverseBits(word32 a)",
          "21: {",
          "",
          "[Removed Lines]",
          "18: static const word32 RC_MODULUS = 0x11011;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "asn.cpp||asn.cpp": [
          "File: asn.cpp -> asn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:    if (m_lengthRemaining == 0)",
          "350:     m_state = IDENTIFIER;",
          "351:   }",
          "353:   if (m_state == IDENTIFIER && m_level == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:   case TAIL: case ALL_DONE: ;;",
          "353:   default: ;;",
          "",
          "---------------"
        ],
        "datatest.cpp||datatest.cpp": [
          "File: datatest.cpp -> datatest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "640: {",
          "641:  Integer x;",
          "642:  bool b = v.GetValue(name, x);",
          "644:  cout << name << \": \\\\\\n    \";",
          "645:  x.Encode(HexEncoder(new FileSink(cout), false, 64, \"\\\\\\n    \").Ref(), x.MinEncodedSize());",
          "646:  cout << endl;",
          "",
          "[Removed Lines]",
          "643:  assert(b);",
          "",
          "[Added Lines]",
          "643:  assert(b); CRYPTOPP_UNUSED(b);",
          "",
          "---------------"
        ],
        "filters.cpp||filters.cpp": [
          "File: filters.cpp -> filters.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "817:  {",
          "818:   m_expectedHash.New(m_digestSize);",
          "821:    memcpy(m_expectedHash, inString, m_expectedHash.size());",
          "822:   if (m_flags & PUT_HASH)",
          "823:    AttachedTransformation()->Put(inString, m_expectedHash.size());",
          "",
          "[Removed Lines]",
          "820:   if(inString)",
          "",
          "[Added Lines]",
          "820:   if (inString)",
          "",
          "---------------"
        ],
        "fipstest.cpp||fipstest.cpp": [
          "File: fipstest.cpp -> fipstest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #if GCC_DIAGNOSTIC_AWARE",
          "27: # pragma GCC diagnostic ignored \"-Wunused-value\"",
          "28: # pragma GCC diagnostic ignored \"-Wunused-variable\"",
          "29: #endif",
          "31: NAMESPACE_BEGIN(CryptoPP)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: # pragma GCC diagnostic ignored \"-Wunneeded-internal-declaration\"",
          "",
          "---------------"
        ],
        "hkdf.h||hkdf.h": [
          "File: hkdf.h -> hkdf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <cstring>",
          "13: NAMESPACE_BEGIN(CryptoPP)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #if GCC_DIAGNOSTIC_AWARE",
          "14: # pragma GCC diagnostic push",
          "15: # pragma GCC diagnostic ignored \"-Wunused-variable\"",
          "16: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85: NAMESPACE_END",
          "87: #endif // CRYPTOPP_HASH_KEY_DERIVATION_FUNCTION_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: #if GCC_DIAGNOSTIC_AWARE",
          "93: # pragma GCC diagnostic pop",
          "94: #endif",
          "",
          "---------------"
        ],
        "network.cpp||network.cpp": [
          "File: network.cpp -> network.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   return ULONG_MAX;",
          "18:  double curTime = GetCurTimeAndCleanUp();",
          "19:  lword total = 0;",
          "20:  for (OpQueue::size_type i=0; i!=m_ops.size(); ++i)",
          "21:   total += m_ops[i].second;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  CRYPTOPP_UNUSED(curTime);",
          "",
          "---------------"
        ],
        "rijndael.cpp||rijndael.cpp": [
          "File: rijndael.cpp -> rijndael.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: #include \"misc.h\"",
          "74: #include \"cpu.h\"",
          "76: NAMESPACE_BEGIN(CryptoPP)",
          "78: #ifdef CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: #if GCC_DIAGNOSTIC_AWARE",
          "77: # pragma GCC diagnostic push",
          "78: # pragma GCC diagnostic ignored \"-Wunused-function\"",
          "79: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1260: NAMESPACE_END",
          "1262: #endif",
          "1263: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1267: #if GCC_DIAGNOSTIC_AWARE",
          "1268: # pragma GCC diagnostic pop",
          "1269: #endif",
          "",
          "---------------"
        ],
        "rw.cpp||rw.cpp": [
          "File: rw.cpp -> rw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #ifndef CRYPTOPP_IMPORTS",
          "14: static const bool CRYPTOPP_RW_USE_OMP = false;",
          "16: NAMESPACE_BEGIN(CryptoPP)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #ifdef _OPENMP",
          "16: #endif",
          "",
          "---------------"
        ],
        "validat1.cpp||validat1.cpp": [
          "File: validat1.cpp -> validat1.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:   RandomNumberSource test(*rng, UINT_MAX, false, new Deflator(new Redirector(meter)));",
          "287:   unsigned long total=0, length=0;",
          "288:   time_t t = time(NULL), t1 = 0;",
          "291:   while (total < 16 && (t1 < 10 || total*8 > (unsigned long)t1))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:   CRYPTOPP_UNUSED(length);",
          "",
          "---------------"
        ],
        "xtr.cpp||xtr.cpp": [
          "File: xtr.cpp -> xtr.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  do",
          "28:  {",
          "29:   bool qFound = q.Randomize(rng, minQ, maxQ, Integer::PRIME, 7, 12);",
          "31:   bool solutionsExist = SolveModularQuadraticEquation(r1, r2, 1, -1, 1, q);",
          "33:  } while (!p.Randomize(rng, minP, maxP, Integer::PRIME, CRT(rng.GenerateBit()?r1:r2, q, 2, 3, EuclideanMultiplicativeInverse(p, 3)), 3*q));",
          "34:  assert(((p.Squared() - p + 1) % q).IsZero());",
          "",
          "[Removed Lines]",
          "30:   assert(qFound);",
          "32:   assert(solutionsExist);",
          "",
          "[Added Lines]",
          "30:   assert(qFound); CRYPTOPP_UNUSED(qFound);",
          "32:   assert(solutionsExist); CRYPTOPP_UNUSED(solutionsExist);",
          "",
          "---------------"
        ],
        "zinflate.cpp||zinflate.cpp": [
          "File: zinflate.cpp -> zinflate.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: inline unsigned long LowFirstBitReader::PeekBits(unsigned int length)",
          "37: {",
          "38:  bool result = FillBuffer(length);",
          "40:  return m_buffer & (((unsigned long)1 << length) - 1);",
          "41: }",
          "",
          "[Removed Lines]",
          "39:  assert(result);",
          "",
          "[Added Lines]",
          "39:  assert(result); CRYPTOPP_UNUSED(result);",
          "",
          "---------------"
        ]
      }
    }
  ]
}