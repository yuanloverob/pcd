{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8b3c19991143969725e2cb46cc2e9a70dceb96e",
      "candidate_info": {
        "commit_hash": "d8b3c19991143969725e2cb46cc2e9a70dceb96e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d8b3c19991143969725e2cb46cc2e9a70dceb96e",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/decimal.test"
        ],
        "message": "New test cases for decimal and ieee754.\n\nFossilOrigin-Name: 73d62f82f94347c60e026bc9cb859fec2d8b5f0c756df0c4941f11817234bff8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/decimal.test||test/decimal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b8ba2f17f938c03543a89dd29d6987163f7a4085a51de1aa14ea5504501c4f72",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/decimal.test||test/decimal.test": [
          "File: test/decimal.test -> test/decimal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: set testprefix decimal",
          "17: if {[catch {load_static_extension db decimal} error]} {",
          "19:   finish_test; return",
          "20: }",
          "",
          "[Removed Lines]",
          "18:   puts \"Skipping zipfile tests, hit load error: $error\"",
          "",
          "[Added Lines]",
          "18:   puts \"Skipping decimal tests, hit load error: $error\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:   SELECT decimal_mul('1234.0000','2');",
          "139: } {2468}",
          "142: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: if {[catch {load_static_extension db ieee754} error]} {",
          "142:   puts \"Skipping ieee754 tests, hit load error: $error\"",
          "143:   finish_test; return",
          "144: }",
          "146: do_execsql_test 6000 {",
          "147:   CREATE TABLE pow2(x INTEGER PRIMARY KEY, v TEXT);",
          "148:   WITH RECURSIVE c(x,v) AS (",
          "149:     VALUES(0,'1')",
          "150:     UNION ALL",
          "151:     SELECT x+1, decimal_mul(v,'2') FROM c WHERE x+1<=971",
          "152:   ) INSERT INTO pow2(x,v) SELECT x, v FROM c;",
          "153:   WITH RECURSIVE c(x,v) AS (",
          "154:     VALUES(-1,'0.5')",
          "155:     UNION ALL",
          "156:     SELECT x-1, decimal_mul(v,'0.5') FROM c WHERE x-1>=-1075",
          "157:   ) INSERT INTO pow2(x,v) SELECT x, v FROM c;",
          "158: } {}",
          "159: do_execsql_test 6010 {",
          "160:   WITH c(n) AS (SELECT ieee754_from_blob(x'0000000000000001'))",
          "161: SELECT decimal_mul(ieee754_mantissa(c.n),pow2.v)",
          "162:   FROM pow2, c WHERE pow2.x=ieee754_exponent(c.n);",
          "163: } {}",
          "164: do_execsql_test 6020 {",
          "165:   WITH c(n) AS (SELECT ieee754_from_blob(x'7fefffffffffffff'))",
          "166: SELECT decimal_mul(ieee754_mantissa(c.n),pow2.v)",
          "167:   FROM pow2, c WHERE pow2.x=ieee754_exponent(c.n);",
          "168: } {179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368}",
          "170: do_execsql_test 6100 {",
          "171:   SELECT ieee754(ieee754_from_blob(x'0000000000000001'));",
          "172: } {ieee754(1,-1074)}",
          "173: do_execsql_test 6110 {",
          "174:   SELECT ieee754(ieee754_from_blob(x'7fefffffffffffff'));",
          "175: } {ieee754(9007199254740991,971)}",
          "176: do_execsql_test 6120 {",
          "177:   SELECT printf('%.8e',ieee754_from_blob(x'0000000000000001'));",
          "178: } {4.94065646e-324}",
          "179: do_execsql_test 6130 {",
          "180:   SELECT printf('%.8e',ieee754_from_blob(x'ffefffffffffffff'));",
          "181: } {-1.79769313e+308}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39b30a7d6bfcf46cd24688006b1106c6ea313da2",
      "candidate_info": {
        "commit_hash": "39b30a7d6bfcf46cd24688006b1106c6ea313da2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39b30a7d6bfcf46cd24688006b1106c6ea313da2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/delete.c",
          "test/index6.test"
        ],
        "message": "In sqlite3GenerateIndexKey(), do not attempt to reuse column values from the previous index if the current index is a partial index as the partial index test may have corrupted those values.  Ticket [a9efb42811fa41ee]\n\nFossilOrigin-Name: 17e9f65814264de9c35bc5ba94e0a66fbbf1200c00d33ab9a19a0b6f92bc685a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/delete.c||src/delete.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28b8f1036d569bccce56b4e7042348024b5dd1ffa04850cbeddab1e35c49e5b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "918:       sqlite3ExprIfFalseDup(pParse, pIdx->pPartIdxWhere, *piPartIdxLabel,",
          "919:                             SQLITE_JUMPIFNULL);",
          "920:       pParse->iSelfTab = 0;",
          "921:     }else{",
          "923:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "921:       pPrior = 0; /* Ticket a9efb42811fa41ee 2019-11-02;",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:   SELECT 3 FROM t0 WHERE c1 <= c0;",
          "479: } {3}",
          "484: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481: # 2019-11-02",
          "482: # Ticket https://sqlite.org/src/tktview/a9efb42811fa41ee286e8",
          "483: db close",
          "484: sqlite3 db :memory:",
          "485: do_execsql_test index6-17.1 {",
          "486:   CREATE TABLE t0(c0);",
          "487:   CREATE INDEX i0 ON t0(0) WHERE c0 GLOB c0;",
          "488:   INSERT INTO t0 VALUES (0);",
          "489:   CREATE UNIQUE INDEX i1 ON t0(0);",
          "490:   PRAGMA integrity_check;",
          "491: } {ok}",
          "492: do_execsql_test index6-17.2 {",
          "493:   CREATE UNIQUE INDEX i2 ON t0(0);",
          "494:   REPLACE INTO t0 VALUES(0);",
          "495:   PRAGMA integrity_check;",
          "496: } {ok}",
          "497: do_execsql_test index6-17.3 {",
          "498:   SELECT COUNT(*) FROM t0 WHERE t0.c0 GLOB t0.c0;",
          "499: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e6861d23da2e05fdeff2fc913e87c1b7b1976c8",
      "candidate_info": {
        "commit_hash": "4e6861d23da2e05fdeff2fc913e87c1b7b1976c8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4e6861d23da2e05fdeff2fc913e87c1b7b1976c8",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/enlargedb.c"
        ],
        "message": "Add the \"enlargedb\" utility program used to construct very large database files for testing.\n\nFossilOrigin-Name: 66858d87507bfdd17bb76c0afb1108ad5dec752438a79bf57f0f51690232e943",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/enlargedb.c||tool/enlargedb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9cb7da9bdb666ea40771513b89591dca275f1e92092b39190df747e3797178a3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/enlargedb.c||tool/enlargedb.c": [
          "File: tool/enlargedb.c -> tool/enlargedb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include <stdio.h>",
          "15: #include <string.h>",
          "16: #include <stdlib.h>",
          "18: int main(int argc, char **argv){",
          "19:   char *zEnd;",
          "20:   long long int toAppend;",
          "21:   long long int currentSz;",
          "22:   long long int newSz;",
          "23:   FILE *f;",
          "24:   size_t got;",
          "25:   int pgsz;",
          "26:   char zero = 0;",
          "27:   unsigned char buf[100];",
          "29:   if( argc!=3 ) goto usage_error;",
          "30:   toAppend = strtoll(argv[2], &zEnd, 0);",
          "31:   if( zEnd==argv[2] || zEnd[0] ) goto usage_error;",
          "32:   if( toAppend<1 ){",
          "33:     fprintf(stderr, \"N must be at least 1\\n\");",
          "34:     exit(1);",
          "35:   }",
          "36:   f = fopen(argv[1], \"r+b\");",
          "37:   if( f==0 ){",
          "38:     fprintf(stderr, \"cannot open \\\"%s\\\" for reading and writing\\n\", argv[1]);",
          "39:     exit(1);",
          "40:   }",
          "41:   got = fread(buf, 1, sizeof(buf), f);",
          "42:   if( got!=sizeof(buf) ) goto not_valid_db;",
          "43:   if( strcmp((char*)buf,\"SQLite format 3\")!=0 ) goto not_valid_db;",
          "44:   pgsz = (buf[16]<<8) + buf[17];",
          "45:   if( pgsz==1 ) pgsz = 65536;",
          "46:   if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ) goto not_valid_db;",
          "47:   currentSz = (buf[28]<<24) + (buf[29]<<16) + (buf[30]<<8) + buf[31];",
          "48:   newSz = currentSz + toAppend;",
          "49:   if( newSz > 0xffffffff ) newSz = 0xffffffff;",
          "50:   buf[28] = (newSz>>24) & 0xff;",
          "51:   buf[29] = (newSz>>16) & 0xff;",
          "52:   buf[30] = (newSz>>8) & 0xff;",
          "53:   buf[31] = newSz & 0xff;",
          "54:   fseek(f, 28, SEEK_SET);",
          "55:   fwrite(&buf[28],4,1,f);",
          "56:   fseek(f, (long)(newSz*pgsz - 1), SEEK_SET);",
          "57:   fwrite(&zero,1,1,f);",
          "58:   fclose(f);",
          "59:   return 0;",
          "61: not_valid_db:",
          "62:   fprintf(stderr,\"not a valid database: %s\\n\", argv[1]);",
          "63:   exit(1);",
          "65: usage_error:",
          "66:   fprintf(stderr,\"Usage: %s DATABASE N\\n\", argv[0]);",
          "67:   exit(1);",
          "68: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8c4c3a09f75cb4e22884d7f2995554389e00cac",
      "candidate_info": {
        "commit_hash": "f8c4c3a09f75cb4e22884d7f2995554389e00cac",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f8c4c3a09f75cb4e22884d7f2995554389e00cac",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_win.c"
        ],
        "message": "The windows VFS accepts query parameter \"exclusive=true\" to cause it to take a mandatory file lock, preventing other applications from even reading the file.\n\nFossilOrigin-Name: 05b573fdb27abec7d75aa1375325d45043cfd674f5b346fb341f001d7e04d160",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_win.c||src/os_win.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2a8a4552112be6e39e3475e9a8579582b5157086d3efd37971463c0e3958068d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5126:     dwCreationDisposition = OPEN_EXISTING;",
          "5127:   }",
          "5131:   if( isDelete ){",
          "5132: #if SQLITE_OS_WINCE",
          "",
          "[Removed Lines]",
          "5129:   dwShareMode = FILE_SHARE_READ | FILE_SHARE_WRITE;",
          "",
          "[Added Lines]",
          "5129:   if( 0==sqlite3_uri_boolean(zName, \"exclusive\", 0) ){",
          "5130:     dwShareMode = FILE_SHARE_READ | FILE_SHARE_WRITE;",
          "5131:   }else{",
          "5132:     dwShareMode = 0;",
          "5133:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96e3c39bd58ede59150c00e4f8609cbac674ffae",
      "candidate_info": {
        "commit_hash": "96e3c39bd58ede59150c00e4f8609cbac674ffae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/96e3c39bd58ede59150c00e4f8609cbac674ffae",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mkautoconfamal.sh"
        ],
        "message": "Reverse unintentional spacing change in the previous check-in.\n\nFossilOrigin-Name: c7b2ee1edb108430454578c1623ba6aee1e2a7bc30cb2f9884ea3e21c3b75635",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mkautoconfamal.sh||tool/mkautoconfamal.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3df579ca32e8250725957d1982897a43281c73e8373af49abd6e7bd674f30e74",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkautoconfamal.sh||tool/mkautoconfamal.sh": [
          "File: tool/mkautoconfamal.sh -> tool/mkautoconfamal.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: echo \"#else\"                        >> tea/generic/tclsqlite3.c",
          "74: echo \"#include \\\"sqlite3.c\\\"\"       >> tea/generic/tclsqlite3.c",
          "75: echo \"#endif\"                       >> tea/generic/tclsqlite3.c",
          "78: cat tea/configure.ac |",
          "79:   sed \"s/AC_INIT(\\[sqlite\\], .*)/AC_INIT([sqlite], [$VERSION])/\" > tmp",
          "",
          "[Removed Lines]",
          "76: cat  $TOP/src/tclsqlite.c        >> tea/generic/tclsqlite3.c",
          "",
          "[Added Lines]",
          "76: cat  $TOP/src/tclsqlite.c           >> tea/generic/tclsqlite3.c",
          "",
          "---------------"
        ]
      }
    }
  ]
}