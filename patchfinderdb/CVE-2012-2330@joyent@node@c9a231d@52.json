{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d559bed0d59c3666718b847a11a7ba42dd4de54e",
      "candidate_info": {
        "commit_hash": "d559bed0d59c3666718b847a11a7ba42dd4de54e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d559bed0d59c3666718b847a11a7ba42dd4de54e",
        "files": [
          "src/ev-emul.h"
        ],
        "message": "node: use variadic functions in ev-emul.h\n\nFixes #3786.",
        "before_after_code_files": [
          "src/ev-emul.h||src/ev-emul.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/ev-emul.h||src/ev-emul.h": [
          "File: src/ev-emul.h -> src/ev-emul.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: }",
          "234:   return uv_hrtime() / 1e9;",
          "235: }",
          "239: }",
          "",
          "[Removed Lines]",
          "233: inline static double __ev_now(/* variadic */) {",
          "238: inline static void __ev_set_priority(/* variadic */) {",
          "",
          "[Added Lines]",
          "233: inline static double __ev_now(...) {",
          "238: inline static void __ev_set_priority(...) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b962ff35ddcd7b2120dd1804dcd3109d924c513a",
      "candidate_info": {
        "commit_hash": "b962ff35ddcd7b2120dd1804dcd3109d924c513a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b962ff35ddcd7b2120dd1804dcd3109d924c513a",
        "files": [
          "lib/tls.js"
        ],
        "message": "tls: fix test-https-client-reject fails\n\nFixes #2417.",
        "before_after_code_files": [
          "lib/tls.js||litls.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "721: SecurePair.prototype.destroy = function() {",
          "722:   var self = this;",
          "723:   var error = this.ssl.error;",
          "746:     }",
          "747:   }",
          "748: };",
          "",
          "[Removed Lines]",
          "725:   if (!this._doneFlag) {",
          "726:     this._doneFlag = true;",
          "727:     this.ssl.error = null;",
          "728:     this.ssl.close();",
          "729:     this.ssl = null;",
          "731:     self.encrypted.writable = self.encrypted.readable = false;",
          "732:     self.cleartext.writable = self.cleartext.readable = false;",
          "734:     process.nextTick(function() {",
          "735:       self.cleartext.emit('end');",
          "736:       self.encrypted.emit('close');",
          "737:       self.cleartext.emit('close');",
          "738:     });",
          "740:     if (!this._secureEstablished) {",
          "741:       if (!error) {",
          "742:         error = new Error('socket hang up');",
          "743:         error.code = 'ECONNRESET';",
          "744:       }",
          "745:       this.emit('error', error);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aad12d0b265c9b06ae029d6ee168849260a91dd6",
      "candidate_info": {
        "commit_hash": "aad12d0b265c9b06ae029d6ee168849260a91dd6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/aad12d0b265c9b06ae029d6ee168849260a91dd6",
        "files": [
          "doc/api/readline.markdown",
          "doc/api/repl.markdown",
          "doc/api/tty.markdown",
          "lib/_debugger.js",
          "lib/readline.js",
          "lib/repl.js",
          "lib/tty.js",
          "src/node.js"
        ],
        "message": "readline: migrate ansi/vt100 logic from tty to readline\n\nThe overall goal here is to make readline more interoperable with other node\nStreams like say a net.Socket instance, in \"terminal\" mode.\n\nSee #2922 for all the details.\nCloses #2922.",
        "before_after_code_files": [
          "lib/_debugger.js||li_debugger.js",
          "lib/readline.js||lireadline.js",
          "lib/repl.js||lirepl.js",
          "lib/tty.js||litty.js",
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/_debugger.js||li_debugger.js": [
          "File: lib/_debugger.js -> li_debugger.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "745:   this.stdout = stdout;",
          "746:   this.args = args;",
          "759:   repl._builtinLibs.splice(repl._builtinLibs.indexOf('repl'), 1);",
          "",
          "[Removed Lines]",
          "748:   var streams = {",
          "749:     stdin: stdin,",
          "750:     stdout: stdout",
          "751:   };",
          "755:   this.repl = new repl.REPLServer('debug> ', streams,",
          "756:                                   this.controlEval.bind(this), false, true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: var util = require('util');",
          "32: var inherits = require('util').inherits;",
          "33: var EventEmitter = require('events').EventEmitter;",
          "39: };",
          "43:   if (!(this instanceof Interface)) {",
          "45:   }",
          "46:   EventEmitter.call(this);",
          "48:   completer = completer || function() { return []; };",
          "",
          "[Removed Lines]",
          "34: var tty = require('tty');",
          "37: exports.createInterface = function(input, output, completer) {",
          "38:   return new Interface(input, output, completer);",
          "42: function Interface(input, output, completer) {",
          "44:     return new Interface(input, output, completer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     throw new TypeError('Argument \\'completer\\' must be a function');",
          "52:   }",
          "54:   var self = this;",
          "56:   this.output = output;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:   this.setPrompt('> ');",
          "74:     input.on('data', function(data) {",
          "75:       self._normalWrite(data);",
          "76:     });",
          "78:   } else {",
          "81:     input.on('keypress', function(s, key) {",
          "82:       self._ttyWrite(s, key);",
          "",
          "[Removed Lines]",
          "67:   this.enabled = output.isTTY;",
          "69:   if (parseInt(process.env['NODE_NO_READLINE'], 10)) {",
          "70:     this.enabled = false;",
          "71:   }",
          "73:   if (!this.enabled) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:     this.line = '';",
          "93:     this.cursor = 0;",
          "",
          "[Removed Lines]",
          "89:     tty.setRawMode(true);",
          "90:     this.enabled = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95:     this.history = [];",
          "96:     this.historyIndex = -1;",
          "111:   }",
          "112: }",
          "114: inherits(Interface, EventEmitter);",
          "116: Interface.prototype.__defineGetter__('columns', function() {",
          "118: });",
          "120: Interface.prototype.setPrompt = function(prompt, length) {",
          "",
          "[Removed Lines]",
          "98:     var winSize = output.getWindowSize();",
          "99:     exports.columns = winSize[0];",
          "101:     if (process.listeners('SIGWINCH').length === 0) {",
          "102:       process.on('SIGWINCH', function() {",
          "103:         var winSize = output.getWindowSize();",
          "104:         exports.columns = winSize[0];",
          "108:         self._refreshLine();",
          "109:       });",
          "110:     }",
          "117:   return exports.columns;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "132: Interface.prototype.prompt = function(preserveCursor) {",
          "133:   if (this.paused) this.resume();",
          "135:     if (!preserveCursor) this.cursor = 0;",
          "136:     this._refreshLine();",
          "137:   } else {",
          "",
          "[Removed Lines]",
          "134:   if (this.enabled) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "195:   var prevRows = this.prevRows || 0;",
          "196:   if (prevRows > 0) {",
          "198:   }",
          "206:   this.output.write(line);",
          "",
          "[Removed Lines]",
          "197:     this.output.moveCursor(0, -prevRows);",
          "201:   this.output.cursorTo(0);",
          "203:   this.output.clearScreenDown();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "211:   }",
          "216:   var diff = lineRows - cursorPos.rows;",
          "217:   if (diff > 0) {",
          "219:   }",
          "221:   this.prevRows = cursorPos.rows;",
          "",
          "[Removed Lines]",
          "214:   this.output.cursorTo(cursorPos.cols);",
          "218:     this.output.moveCursor(0, -diff);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "225: Interface.prototype.pause = function() {",
          "226:   if (this.paused) return;",
          "229:   }",
          "230:   this.input.pause();",
          "231:   this.paused = true;",
          "",
          "[Removed Lines]",
          "227:   if (this.enabled) {",
          "228:     tty.setRawMode(false);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "236: Interface.prototype.resume = function() {",
          "237:   this.input.resume();",
          "240:   }",
          "241:   this.paused = false;",
          "242:   this.emit('resume');",
          "",
          "[Removed Lines]",
          "238:   if (this.enabled) {",
          "239:     tty.setRawMode(true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "246: Interface.prototype.write = function(d, key) {",
          "247:   if (this.paused) this.resume();",
          "249: };",
          "",
          "[Removed Lines]",
          "248:   this.enabled ? this._ttyWrite(d, key) : this._normalWrite(d, key);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "516:   if (oldPos.rows === newPos.rows) {",
          "518:     this.prevRows = newPos.rows;",
          "519:   } else {",
          "520:     this._refreshLine();",
          "",
          "[Removed Lines]",
          "517:     this.output.moveCursor(this.cursor - oldcursor, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "730: exports.Interface = Interface;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/repl.js||lirepl.js": [
          "File: lib/repl.js -> lirepl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: function REPLServer(prompt, stream, eval, useGlobal, ignoreUndefined) {",
          "79:   EventEmitter.call(this);",
          "81:   var self = this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:   self.resetContext();",
          "100:   self.bufferedCommand = '';",
          "107:     } else {",
          "110:     }",
          "115:   }",
          "117:   self.prompt = (prompt != undefined ? prompt : '> ');",
          "119:   function complete(text, callback) {",
          "120:     self.complete(text, callback);",
          "121:   }",
          "124:   self.rli = rli;",
          "126:   this.commands = {};",
          "127:   defineDefaultCommands(this);",
          "130:       exports.writer === util.inspect) {",
          "132:     exports.writer = function(obj, showHidden, depth) {",
          "",
          "[Removed Lines]",
          "102:   if (stream) {",
          "104:     if (stream.stdin || stream.stdout) {",
          "105:       self.outputStream = stream.stdout;",
          "106:       self.inputStream = stream.stdin;",
          "108:       self.outputStream = stream;",
          "109:       self.inputStream = stream;",
          "111:   } else {",
          "112:     self.outputStream = process.stdout;",
          "113:     self.inputStream = process.stdin;",
          "114:     process.stdin.resume();",
          "123:   var rli = rl.createInterface(self.inputStream, self.outputStream, complete);",
          "129:   if (rli.enabled && !exports.disableColors &&",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "322: };",
          "331: function ArrayStream() {",
          "",
          "[Removed Lines]",
          "326: REPLServer.prototype.readline = function(cmd) {",
          "327: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tty.js||litty.js": [
          "File: lib/tty.js -> litty.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: var TTY = process.binding('tty_wrap').TTY;",
          "26: var isTTY = process.binding('tty_wrap').isTTY;",
          "31: exports.isatty = function(fd) {",
          "32:   return isTTY(fd);",
          "33: };",
          "36: exports.setRawMode = function(flag) {",
          "50: };",
          "",
          "[Removed Lines]",
          "28: var stdinHandle;",
          "37:   assert.ok(stdinHandle, 'stdin must be initialized before calling setRawMode');",
          "38:   stdinHandle.setRawMode(flag);",
          "39: };",
          "42: exports.getWindowSize = function() {",
          "44:   return 80;",
          "45: };",
          "48: exports.setWindowSize = function() {",
          "49:   throw new Error('implement me');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     handle: new TTY(fd, true)",
          "57:   });",
          "59:   this.writable = false;",
          "84: }",
          "85: inherits(ReadStream, net.Socket);",
          "",
          "[Removed Lines]",
          "61:   var self = this,",
          "62:       keypressListeners = this.listeners('keypress');",
          "64:   function onData(b) {",
          "65:     if (keypressListeners.length) {",
          "66:       self._emitKey(b);",
          "67:     } else {",
          "69:       self.removeListener('data', onData);",
          "70:       self.on('newListener', onNewListener);",
          "71:     }",
          "72:   }",
          "74:   function onNewListener(event) {",
          "75:     if (event == 'keypress') {",
          "76:       self.on('data', onData);",
          "77:       self.removeListener('newListener', onNewListener);",
          "78:     }",
          "79:   }",
          "81:   if (!stdinHandle) stdinHandle = this._handle;",
          "83:   this.on('newListener', onNewListener);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:   return net.Socket.prototype.resume.call(this);",
          "97: };",
          "100: ReadStream.prototype.isTTY = true;",
          "336: function WriteStream(fd) {",
          "337:   if (!(this instanceof WriteStream)) return new WriteStream(fd);",
          "",
          "[Removed Lines]",
          "104:   Some patterns seen in terminal key escape codes, derived from combos seen",
          "105:   at http://www.midnight-commander.org/browser/lib/tty/key.c",
          "107:   ESC letter",
          "108:   ESC [ letter",
          "109:   ESC [ modifier letter",
          "110:   ESC [ 1 ; modifier letter",
          "111:   ESC [ num char",
          "112:   ESC [ num ; modifier char",
          "113:   ESC O letter",
          "114:   ESC O modifier letter",
          "115:   ESC O 1 ; modifier letter",
          "116:   ESC N letter",
          "117:   ESC [ [ num ; modifier char",
          "118:   ESC [ [ 1 ; modifier letter",
          "119:   ESC ESC [ num char",
          "120:   ESC ESC O letter",
          "122:   - char is usually ~ but $ and ^ also happen with rxvt",
          "123:   - modifier is 1 +",
          "124:                 (shift     * 1) +",
          "125:                 (left_alt  * 2) +",
          "126:                 (ctrl      * 4) +",
          "127:                 (right_alt * 8)",
          "128:   - two leading ESCs apparently mean the same as one leading ESC",
          "133: var metaKeyCodeRe = /^(?:\\x1b)([a-zA-Z0-9])$/;",
          "134: var functionKeyCodeRe =",
          "135:     /^(?:\\x1b+)(O|N|\\[|\\[\\[)(?:(\\d+)(?:;(\\d+))?([~^$])|(?:1;)?(\\d+)?([a-zA-Z]))/;",
          "138: ReadStream.prototype._emitKey = function(s) {",
          "139:   var char,",
          "140:       key = {",
          "141:         name: undefined,",
          "142:         ctrl: false,",
          "143:         meta: false,",
          "144:         shift: false",
          "145:       },",
          "146:       parts;",
          "148:   if (Buffer.isBuffer(s)) {",
          "149:     if (s[0] > 127 && s[1] === undefined) {",
          "150:       s[0] -= 128;",
          "151:       s = '\\x1b' + s.toString(this.encoding || 'utf-8');",
          "152:     } else {",
          "153:       s = s.toString(this.encoding || 'utf-8');",
          "154:     }",
          "155:   }",
          "157:   key.sequence = s;",
          "159:   if (s === '\\r' || s === '\\n') {",
          "161:     key.name = 'enter';",
          "163:   } else if (s === '\\t') {",
          "165:     key.name = 'tab';",
          "167:   } else if (s === '\\b' || s === '\\x7f' ||",
          "168:              s === '\\x1b\\x7f' || s === '\\x1b\\b') {",
          "170:     key.name = 'backspace';",
          "171:     key.meta = (s.charAt(0) === '\\x1b');",
          "173:   } else if (s === '\\x1b' || s === '\\x1b\\x1b') {",
          "175:     key.name = 'escape';",
          "176:     key.meta = (s.length === 2);",
          "178:   } else if (s === ' ' || s === '\\x1b ') {",
          "179:     key.name = 'space';",
          "180:     key.meta = (s.length === 2);",
          "182:   } else if (s <= '\\x1a') {",
          "184:     key.name = String.fromCharCode(s.charCodeAt(0) + 'a'.charCodeAt(0) - 1);",
          "185:     key.ctrl = true;",
          "187:   } else if (s.length === 1 && s >= 'a' && s <= 'z') {",
          "189:     key.name = s;",
          "191:   } else if (s.length === 1 && s >= 'A' && s <= 'Z') {",
          "193:     key.name = s.toLowerCase();",
          "194:     key.shift = true;",
          "196:   } else if (parts = metaKeyCodeRe.exec(s)) {",
          "198:     key.name = parts[1].toLowerCase();",
          "199:     key.meta = true;",
          "200:     key.shift = /^[A-Z]$/.test(parts[1]);",
          "202:   } else if (parts = functionKeyCodeRe.exec(s)) {",
          "207:     var code = (parts[1] || '') + (parts[2] || '') +",
          "208:                (parts[4] || '') + (parts[6] || ''),",
          "209:         modifier = (parts[3] || parts[5] || 1) - 1;",
          "212:     key.ctrl = !!(modifier & 4);",
          "213:     key.meta = !!(modifier & 10);",
          "214:     key.shift = !!(modifier & 1);",
          "215:     key.code = code;",
          "218:     switch (code) {",
          "220:       case 'OP': key.name = 'f1'; break;",
          "221:       case 'OQ': key.name = 'f2'; break;",
          "222:       case 'OR': key.name = 'f3'; break;",
          "223:       case 'OS': key.name = 'f4'; break;",
          "226:       case '[11~': key.name = 'f1'; break;",
          "227:       case '[12~': key.name = 'f2'; break;",
          "228:       case '[13~': key.name = 'f3'; break;",
          "229:       case '[14~': key.name = 'f4'; break;",
          "232:       case '[[A': key.name = 'f1'; break;",
          "233:       case '[[B': key.name = 'f2'; break;",
          "234:       case '[[C': key.name = 'f3'; break;",
          "235:       case '[[D': key.name = 'f4'; break;",
          "236:       case '[[E': key.name = 'f5'; break;",
          "239:       case '[15~': key.name = 'f5'; break;",
          "240:       case '[17~': key.name = 'f6'; break;",
          "241:       case '[18~': key.name = 'f7'; break;",
          "242:       case '[19~': key.name = 'f8'; break;",
          "243:       case '[20~': key.name = 'f9'; break;",
          "244:       case '[21~': key.name = 'f10'; break;",
          "245:       case '[23~': key.name = 'f11'; break;",
          "246:       case '[24~': key.name = 'f12'; break;",
          "249:       case '[A': key.name = 'up'; break;",
          "250:       case '[B': key.name = 'down'; break;",
          "251:       case '[C': key.name = 'right'; break;",
          "252:       case '[D': key.name = 'left'; break;",
          "253:       case '[E': key.name = 'clear'; break;",
          "254:       case '[F': key.name = 'end'; break;",
          "255:       case '[H': key.name = 'home'; break;",
          "258:       case 'OA': key.name = 'up'; break;",
          "259:       case 'OB': key.name = 'down'; break;",
          "260:       case 'OC': key.name = 'right'; break;",
          "261:       case 'OD': key.name = 'left'; break;",
          "262:       case 'OE': key.name = 'clear'; break;",
          "263:       case 'OF': key.name = 'end'; break;",
          "264:       case 'OH': key.name = 'home'; break;",
          "267:       case '[1~': key.name = 'home'; break;",
          "268:       case '[2~': key.name = 'insert'; break;",
          "269:       case '[3~': key.name = 'delete'; break;",
          "270:       case '[4~': key.name = 'end'; break;",
          "271:       case '[5~': key.name = 'pageup'; break;",
          "272:       case '[6~': key.name = 'pagedown'; break;",
          "275:       case '[[5~': key.name = 'pageup'; break;",
          "276:       case '[[6~': key.name = 'pagedown'; break;",
          "279:       case '[7~': key.name = 'home'; break;",
          "280:       case '[8~': key.name = 'end'; break;",
          "283:       case '[a': key.name = 'up'; key.shift = true; break;",
          "284:       case '[b': key.name = 'down'; key.shift = true; break;",
          "285:       case '[c': key.name = 'right'; key.shift = true; break;",
          "286:       case '[d': key.name = 'left'; key.shift = true; break;",
          "287:       case '[e': key.name = 'clear'; key.shift = true; break;",
          "289:       case '[2$': key.name = 'insert'; key.shift = true; break;",
          "290:       case '[3$': key.name = 'delete'; key.shift = true; break;",
          "291:       case '[5$': key.name = 'pageup'; key.shift = true; break;",
          "292:       case '[6$': key.name = 'pagedown'; key.shift = true; break;",
          "293:       case '[7$': key.name = 'home'; key.shift = true; break;",
          "294:       case '[8$': key.name = 'end'; key.shift = true; break;",
          "296:       case 'Oa': key.name = 'up'; key.ctrl = true; break;",
          "297:       case 'Ob': key.name = 'down'; key.ctrl = true; break;",
          "298:       case 'Oc': key.name = 'right'; key.ctrl = true; break;",
          "299:       case 'Od': key.name = 'left'; key.ctrl = true; break;",
          "300:       case 'Oe': key.name = 'clear'; key.ctrl = true; break;",
          "302:       case '[2^': key.name = 'insert'; key.ctrl = true; break;",
          "303:       case '[3^': key.name = 'delete'; key.ctrl = true; break;",
          "304:       case '[5^': key.name = 'pageup'; key.ctrl = true; break;",
          "305:       case '[6^': key.name = 'pagedown'; key.ctrl = true; break;",
          "306:       case '[7^': key.name = 'home'; key.ctrl = true; break;",
          "307:       case '[8^': key.name = 'end'; key.ctrl = true; break;",
          "310:       case '[Z': key.name = 'tab'; key.shift = true; break;",
          "311:       default: key.name = 'undefined'; break;",
          "313:     }",
          "314:   } else if (s.length > 1 && s[0] !== '\\x1b') {",
          "317:     Array.prototype.forEach.call(s, this._emitKey, this);",
          "318:     return;",
          "319:   }",
          "322:   if (key.name === undefined) {",
          "323:     key = undefined;",
          "324:   }",
          "326:   if (s.length === 1) {",
          "327:     char = s;",
          "328:   }",
          "330:   if (key || char) {",
          "331:     this.emit('keypress', char, key);",
          "332:   }",
          "333: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "342:   this.readable = false;",
          "343:   this.writable = true;",
          "344: }",
          "345: inherits(WriteStream, net.Socket);",
          "346: exports.WriteStream = WriteStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "349: WriteStream.prototype.isTTY = true;",
          "363:   }",
          "367: WriteStream.prototype.moveCursor = function(dx, dy) {",
          "379: };",
          "382: WriteStream.prototype.clearLine = function(dir) {",
          "393: };",
          "396: WriteStream.prototype.clearScreenDown = function() {",
          "398: };",
          "401: WriteStream.prototype.getWindowSize = function() {",
          "403: };",
          "",
          "[Removed Lines]",
          "352: WriteStream.prototype.cursorTo = function(x, y) {",
          "353:   if (typeof x !== 'number' && typeof y !== 'number')",
          "354:     return;",
          "356:   if (typeof x !== 'number')",
          "357:     throw new Error(\"Can't set cursor row without also setting it's column\");",
          "359:   if (typeof y !== 'number') {",
          "360:     this.write('\\x1b[' + (x + 1) + 'G');",
          "361:   } else {",
          "362:     this.write('\\x1b[' + (y + 1) + ';' + (x + 1) + 'H');",
          "364: };",
          "368:   if (dx < 0) {",
          "369:     this.write('\\x1b[' + (-dx) + 'D');",
          "370:   } else if (dx > 0) {",
          "371:     this.write('\\x1b[' + dx + 'C');",
          "372:   }",
          "374:   if (dy < 0) {",
          "375:     this.write('\\x1b[' + (-dy) + 'A');",
          "376:   } else if (dy > 0) {",
          "377:     this.write('\\x1b[' + dy + 'B');",
          "378:   }",
          "383:   if (dir < 0) {",
          "385:     this.write('\\x1b[1K');",
          "386:   } else if (dir > 0) {",
          "388:     this.write('\\x1b[0K');",
          "389:   } else {",
          "391:     this.write('\\x1b[2K');",
          "392:   }",
          "397:   this.write('\\x1b[0J');",
          "402:   return this._handle.getWindowSize();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:       if (process._forceRepl || NativeModule.require('tty').isatty(0)) {",
          "125:         repl.on('exit', function() {",
          "126:           process.exit();",
          "127:         });",
          "",
          "[Removed Lines]",
          "124:         var repl = Module.requireRepl().start('> ', null, null, true);",
          "",
          "[Added Lines]",
          "124:         var repl = Module.requireRepl().start({",
          "125:           prompt: '> ',",
          "126:           terminal: !parseInt(process.env['NODE_NO_READLINE'], 10),",
          "127:           useGlobal: true,",
          "128:           ignoreUndefined: false",
          "129:         });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:         er = er || new Error('process.stdout cannot be closed.');",
          "321:         stdout.emit('error', er);",
          "322:       };",
          "323:       return stdout;",
          "324:     });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:       if (stdout.isTTY) {",
          "329:         process.on('SIGWINCH', function() {",
          "330:           stdout._refreshSize();",
          "331:         });",
          "332:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6003912f81c4658f2bb77b33c1421a3207615744",
      "candidate_info": {
        "commit_hash": "6003912f81c4658f2bb77b33c1421a3207615744",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6003912f81c4658f2bb77b33c1421a3207615744",
        "files": [
          "test/simple/test-tls-set-ciphers.js"
        ],
        "message": "test: use RC4-MD5 cipher in tls test\n\nNULL-MD5 is not always compiled into openssl but RC4-MD5 should always be\navailable.\n\nFixes #3531.",
        "before_after_code_files": [
          "test/simple/test-tls-set-ciphers.js||test/simple/test-tls-set-ciphers.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-tls-set-ciphers.js||test/simple/test-tls-set-ciphers.js": [
          "File: test/simple/test-tls-set-ciphers.js -> test/simple/test-tls-set-ciphers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: var options = {",
          "34:   key: fs.readFileSync(common.fixturesDir + '/keys/agent2-key.pem'),",
          "35:   cert: fs.readFileSync(common.fixturesDir + '/keys/agent2-cert.pem'),",
          "37: };",
          "39: var reply = 'I AM THE WALRUS'; // something recognizable",
          "",
          "[Removed Lines]",
          "36:   ciphers: 'NULL-MD5' // it's ultra-fast!",
          "",
          "[Added Lines]",
          "36:   ciphers: 'RC4-MD5'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: });",
          "53: server.listen(common.PORT, '127.0.0.1', function() {",
          "57:   exec(cmd, function(err, stdout, stderr) {",
          "58:     if (err) throw err;",
          "",
          "[Removed Lines]",
          "54:   var cmd = 'openssl s_client -cipher NULL-MD5 -connect 127.0.0.1:' +",
          "55:             common.PORT;",
          "",
          "[Added Lines]",
          "54:   var cmd = 'openssl s_client -cipher ' + options.ciphers +",
          "55:             ' -connect 127.0.0.1:' + common.PORT;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "992e3464b8997210ea7f40f03f0386f8dd4f4f86",
      "candidate_info": {
        "commit_hash": "992e3464b8997210ea7f40f03f0386f8dd4f4f86",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/992e3464b8997210ea7f40f03f0386f8dd4f4f86",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on 0.6.18",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 6",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "31: #define NODE_PATCH_VERSION 17",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "31: #define NODE_PATCH_VERSION 18",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}