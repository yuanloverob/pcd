{
  "cve_id": "CVE-2015-8952",
  "cve_desc": "The mbcache feature in the ext2 and ext4 filesystem implementations in the Linux kernel before 4.6 mishandles xattr block caching, which allows local users to cause a denial of service (soft lockup) via filesystem operations in environments that use many attributes, as demonstrated by Ceph and Samba.",
  "repo": "torvalds/linux",
  "patch_hash": "be0726d33cb8f411945884664924bed3cb8c70ee",
  "patch_info": {
    "commit_hash": "be0726d33cb8f411945884664924bed3cb8c70ee",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/be0726d33cb8f411945884664924bed3cb8c70ee",
    "files": [
      "fs/ext2/ext2.h",
      "fs/ext2/super.c",
      "fs/ext2/xattr.c",
      "fs/ext2/xattr.h"
    ],
    "message": "ext2: convert to mbcache2\n\nThe conversion is generally straightforward. We convert filesystem from\na global cache to per-fs one. Similarly to ext4 the tricky part is that\nxattr block corresponding to found mbcache entry can get freed before we\nget buffer lock for that block. So we have to check whether the entry is\nstill valid after getting the buffer lock.\n\nSigned-off-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
    "before_after_code_files": [
      "fs/ext2/ext2.h||fs/ext2/ext2.h",
      "fs/ext2/super.c||fs/ext2/super.c",
      "fs/ext2/xattr.c||fs/ext2/xattr.c",
      "fs/ext2/xattr.h||fs/ext2/xattr.h"
    ]
  },
  "patch_diff": {
    "fs/ext2/ext2.h||fs/ext2/ext2.h": [
      "File: fs/ext2/ext2.h -> fs/ext2/ext2.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "61: #define rsv_start rsv_window._rsv_start",
      "62: #define rsv_end rsv_window._rsv_end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64: struct mb2_cache;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:  spinlock_t s_lock;",
      "114: };",
      "116: static inline spinlock_t *",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:  struct mb2_cache *s_mb_cache;",
      "",
      "---------------"
    ],
    "fs/ext2/super.c||fs/ext2/super.c": [
      "File: fs/ext2/super.c -> fs/ext2/super.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "132:  dquot_disable(sb, -1, DQUOT_USAGE_ENABLED | DQUOT_LIMITS_ENABLED);",
      "135:  if (!(sb->s_flags & MS_RDONLY)) {",
      "136:   struct ext2_super_block *es = sbi->s_es;",
      "",
      "[Removed Lines]",
      "134:  ext2_xattr_put_super(sb);",
      "",
      "[Added Lines]",
      "134:  if (sbi->s_mb_cache) {",
      "135:   ext2_xattr_destroy_cache(sbi->s_mb_cache);",
      "136:   sbi->s_mb_cache = NULL;",
      "137:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1104:   ext2_msg(sb, KERN_ERR, \"error: insufficient memory\");",
      "1105:   goto failed_mount3;",
      "1106:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1111: #ifdef CONFIG_EXT2_FS_XATTR",
      "1112:  sbi->s_mb_cache = ext2_xattr_create_cache();",
      "1113:  if (!sbi->s_mb_cache) {",
      "1114:   ext2_msg(sb, KERN_ERR, \"Failed to create an mb_cache\");",
      "1115:   goto failed_mount3;",
      "1116:  }",
      "1117: #endif",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1149:    sb->s_id);",
      "1150:  goto failed_mount;",
      "1151: failed_mount3:",
      "1152:  percpu_counter_destroy(&sbi->s_freeblocks_counter);",
      "1153:  percpu_counter_destroy(&sbi->s_freeinodes_counter);",
      "1154:  percpu_counter_destroy(&sbi->s_dirs_counter);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1163:  if (sbi->s_mb_cache)",
      "1164:   ext2_xattr_destroy_cache(sbi->s_mb_cache);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1556: static int __init init_ext2_fs(void)",
      "1557: {",
      "1561:  err = init_inodecache();",
      "1562:  if (err)",
      "1564:         err = register_filesystem(&ext2_fs_type);",
      "1565:  if (err)",
      "1566:   goto out;",
      "1567:  return 0;",
      "1568: out:",
      "1569:  destroy_inodecache();",
      "1572:  return err;",
      "1573: }",
      "",
      "[Removed Lines]",
      "1558:  int err = init_ext2_xattr();",
      "1559:  if (err)",
      "1560:   return err;",
      "1563:   goto out1;",
      "1570: out1:",
      "1571:  exit_ext2_xattr();",
      "",
      "[Added Lines]",
      "1571:  int err;",
      "1575:   return err;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1576: {",
      "1577:  unregister_filesystem(&ext2_fs_type);",
      "1578:  destroy_inodecache();",
      "1580: }",
      "1582: MODULE_AUTHOR(\"Remy Card and others\");",
      "",
      "[Removed Lines]",
      "1579:  exit_ext2_xattr();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "fs/ext2/xattr.c||fs/ext2/xattr.c": [
      "File: fs/ext2/xattr.c -> fs/ext2/xattr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: #include <linux/buffer_head.h>",
      "57: #include <linux/init.h>",
      "58: #include <linux/slab.h>",
      "60: #include <linux/quotaops.h>",
      "61: #include <linux/rwsem.h>",
      "62: #include <linux/security.h>",
      "",
      "[Removed Lines]",
      "59: #include <linux/mbcache.h>",
      "",
      "[Added Lines]",
      "59: #include <linux/mbcache2.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "90: static int ext2_xattr_set2(struct inode *, struct buffer_head *,",
      "91:       struct ext2_xattr_header *);",
      "94: static struct buffer_head *ext2_xattr_cache_find(struct inode *,",
      "95:        struct ext2_xattr_header *);",
      "96: static void ext2_xattr_rehash(struct ext2_xattr_header *,",
      "97:          struct ext2_xattr_entry *);",
      "101: static const struct xattr_handler *ext2_xattr_handler_map[] = {",
      "102:  [EXT2_XATTR_INDEX_USER]       = &ext2_xattr_user_handler,",
      "103: #ifdef CONFIG_EXT2_FS_POSIX_ACL",
      "",
      "[Removed Lines]",
      "93: static int ext2_xattr_cache_insert(struct buffer_head *);",
      "99: static struct mb_cache *ext2_xattr_cache;",
      "",
      "[Added Lines]",
      "93: static int ext2_xattr_cache_insert(struct mb2_cache *, struct buffer_head *);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "152:  size_t name_len, size;",
      "153:  char *end;",
      "154:  int error;",
      "156:  ea_idebug(inode, \"name=%d.%s, buffer=%p, buffer_size=%ld\",",
      "157:     name_index, name, buffer, (long)buffer_size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "153:  struct mb2_cache *ext2_mb_cache = EXT2_SB(inode->i_sb)->s_mb_cache;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "196:    goto found;",
      "197:   entry = next;",
      "198:  }",
      "200:   ea_idebug(inode, \"cache insert failed\");",
      "201:  error = -ENODATA;",
      "202:  goto cleanup;",
      "",
      "[Removed Lines]",
      "199:  if (ext2_xattr_cache_insert(bh))",
      "",
      "[Added Lines]",
      "198:  if (ext2_xattr_cache_insert(ext2_mb_cache, bh))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "209:      le16_to_cpu(entry->e_value_offs) + size > inode->i_sb->s_blocksize)",
      "210:   goto bad_block;",
      "213:   ea_idebug(inode, \"cache insert failed\");",
      "214:  if (buffer) {",
      "215:   error = -ERANGE;",
      "",
      "[Removed Lines]",
      "212:  if (ext2_xattr_cache_insert(bh))",
      "",
      "[Added Lines]",
      "211:  if (ext2_xattr_cache_insert(ext2_mb_cache, bh))",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "247:  char *end;",
      "248:  size_t rest = buffer_size;",
      "249:  int error;",
      "251:  ea_idebug(inode, \"buffer=%p, buffer_size=%ld\",",
      "252:     buffer, (long)buffer_size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249:  struct mb2_cache *ext2_mb_cache = EXT2_SB(inode->i_sb)->s_mb_cache;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "281:    goto bad_block;",
      "282:   entry = next;",
      "283:  }",
      "285:   ea_idebug(inode, \"cache insert failed\");",
      "",
      "[Removed Lines]",
      "284:  if (ext2_xattr_cache_insert(bh))",
      "",
      "[Added Lines]",
      "284:  if (ext2_xattr_cache_insert(ext2_mb_cache, bh))",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "485:  if (header) {",
      "491:   lock_buffer(bh);",
      "492:   if (header->h_refcount == cpu_to_le32(1)) {",
      "493:    ea_bdebug(bh, \"modifying in-place\");",
      "497:   } else {",
      "498:    int offset;",
      "502:    unlock_buffer(bh);",
      "503:    ea_bdebug(bh, \"cloning\");",
      "504:    header = kmalloc(bh->b_size, GFP_KERNEL);",
      "",
      "[Removed Lines]",
      "486:   struct mb_cache_entry *ce;",
      "489:   ce = mb_cache_entry_get(ext2_xattr_cache, bh->b_bdev,",
      "490:      bh->b_blocknr);",
      "494:    if (ce)",
      "495:     mb_cache_entry_free(ce);",
      "500:    if (ce)",
      "501:     mb_cache_entry_release(ce);",
      "",
      "[Added Lines]",
      "489:    __u32 hash = le32_to_cpu(header->h_hash);",
      "496:    mb2_cache_entry_delete_block(EXT2_SB(sb)->s_mb_cache,",
      "497:            hash, bh->b_blocknr);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "626:  struct super_block *sb = inode->i_sb;",
      "627:  struct buffer_head *new_bh = NULL;",
      "628:  int error;",
      "630:  if (header) {",
      "631:   new_bh = ext2_xattr_cache_find(inode, header);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "630:  struct mb2_cache *ext2_mb_cache = EXT2_SB(sb)->s_mb_cache;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "654:    new_bh = old_bh;",
      "655:    get_bh(new_bh);",
      "657:   } else {",
      "659:    ext2_fsblk_t goal = ext2_group_first_block_no(sb,",
      "",
      "[Removed Lines]",
      "656:    ext2_xattr_cache_insert(new_bh);",
      "",
      "[Added Lines]",
      "658:    ext2_xattr_cache_insert(ext2_mb_cache, new_bh);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "674:    memcpy(new_bh->b_data, header, new_bh->b_size);",
      "675:    set_buffer_uptodate(new_bh);",
      "676:    unlock_buffer(new_bh);",
      "679:    ext2_xattr_update_super_block(sb);",
      "680:   }",
      "",
      "[Removed Lines]",
      "677:    ext2_xattr_cache_insert(new_bh);",
      "",
      "[Added Lines]",
      "679:    ext2_xattr_cache_insert(ext2_mb_cache, new_bh);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "708:  error = 0;",
      "709:  if (old_bh && old_bh != new_bh) {",
      "718:   lock_buffer(old_bh);",
      "719:   if (HDR(old_bh)->h_refcount == cpu_to_le32(1)) {",
      "723:    ea_bdebug(old_bh, \"freeing\");",
      "724:    ext2_free_blocks(inode, old_bh->b_blocknr, 1);",
      "725:    mark_inode_dirty(inode);",
      "",
      "[Removed Lines]",
      "710:   struct mb_cache_entry *ce;",
      "716:   ce = mb_cache_entry_get(ext2_xattr_cache, old_bh->b_bdev,",
      "717:      old_bh->b_blocknr);",
      "721:    if (ce)",
      "722:     mb_cache_entry_free(ce);",
      "",
      "[Added Lines]",
      "718:    __u32 hash = le32_to_cpu(HDR(old_bh)->h_hash);",
      "724:    mb2_cache_entry_delete_block(ext2_mb_cache,",
      "725:            hash, old_bh->b_blocknr);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "730:   } else {",
      "732:    le32_add_cpu(&HDR(old_bh)->h_refcount, -1);",
      "735:    dquot_free_block_nodirty(inode, 1);",
      "736:    mark_inode_dirty(inode);",
      "737:    mark_buffer_dirty(old_bh);",
      "",
      "[Removed Lines]",
      "733:    if (ce)",
      "734:     mb_cache_entry_release(ce);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "757: ext2_xattr_delete_inode(struct inode *inode)",
      "758: {",
      "759:  struct buffer_head *bh = NULL;",
      "762:  down_write(&EXT2_I(inode)->xattr_sem);",
      "763:  if (!EXT2_I(inode)->i_file_acl)",
      "",
      "[Removed Lines]",
      "760:  struct mb_cache_entry *ce;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "777:    EXT2_I(inode)->i_file_acl);",
      "778:   goto cleanup;",
      "779:  }",
      "781:  lock_buffer(bh);",
      "782:  if (HDR(bh)->h_refcount == cpu_to_le32(1)) {",
      "785:   ext2_free_blocks(inode, EXT2_I(inode)->i_file_acl, 1);",
      "786:   get_bh(bh);",
      "787:   bforget(bh);",
      "788:   unlock_buffer(bh);",
      "789:  } else {",
      "790:   le32_add_cpu(&HDR(bh)->h_refcount, -1);",
      "793:   ea_bdebug(bh, \"refcount now=%d\",",
      "794:    le32_to_cpu(HDR(bh)->h_refcount));",
      "795:   unlock_buffer(bh);",
      "",
      "[Removed Lines]",
      "780:  ce = mb_cache_entry_get(ext2_xattr_cache, bh->b_bdev, bh->b_blocknr);",
      "783:   if (ce)",
      "784:    mb_cache_entry_free(ce);",
      "791:   if (ce)",
      "792:    mb_cache_entry_release(ce);",
      "",
      "[Added Lines]",
      "783:   __u32 hash = le32_to_cpu(HDR(bh)->h_hash);",
      "789:   mb2_cache_entry_delete_block(EXT2_SB(inode->i_sb)->s_mb_cache,",
      "790:           hash, bh->b_blocknr);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "805:  up_write(&EXT2_I(inode)->xattr_sem);",
      "806: }",
      "",
      "[Removed Lines]",
      "813: void",
      "814: ext2_xattr_put_super(struct super_block *sb)",
      "815: {",
      "816:  mb_cache_shrink(sb->s_bdev);",
      "817: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "828: static int",
      "830: {",
      "831:  __u32 hash = le32_to_cpu(HDR(bh)->h_hash);",
      "833:  int error;",
      "839:  if (error) {",
      "841:   if (error == -EBUSY) {",
      "842:    ea_bdebug(bh, \"already in cache (%d cache entries)\",",
      "843:     atomic_read(&ext2_xattr_cache->c_entry_count));",
      "844:    error = 0;",
      "845:   }",
      "851:  return error;",
      "852: }",
      "",
      "[Removed Lines]",
      "829: ext2_xattr_cache_insert(struct buffer_head *bh)",
      "832:  struct mb_cache_entry *ce;",
      "835:  ce = mb_cache_entry_alloc(ext2_xattr_cache, GFP_NOFS);",
      "836:  if (!ce)",
      "837:   return -ENOMEM;",
      "838:  error = mb_cache_entry_insert(ce, bh->b_bdev, bh->b_blocknr, hash);",
      "840:   mb_cache_entry_free(ce);",
      "846:  } else {",
      "847:   ea_bdebug(bh, \"inserting [%x] (%d cache entries)\", (int)hash,",
      "848:      atomic_read(&ext2_xattr_cache->c_entry_count));",
      "849:   mb_cache_entry_release(ce);",
      "850:  }",
      "",
      "[Added Lines]",
      "821: ext2_xattr_cache_insert(struct mb2_cache *cache, struct buffer_head *bh)",
      "826:  error = mb2_cache_entry_create(cache, GFP_NOFS, hash, bh->b_blocknr);",
      "833:  } else",
      "834:   ea_bdebug(bh, \"inserting [%x]\", (int)hash);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "903: ext2_xattr_cache_find(struct inode *inode, struct ext2_xattr_header *header)",
      "904: {",
      "905:  __u32 hash = le32_to_cpu(header->h_hash);",
      "908:  if (!header->h_hash)",
      "910:  ea_idebug(inode, \"looking for cached blocks [%x]\", (int)hash);",
      "911: again:",
      "914:  while (ce) {",
      "915:   struct buffer_head *bh;",
      "923:   bh = sb_bread(inode->i_sb, ce->e_block);",
      "924:   if (!bh) {",
      "925:    ext2_error(inode->i_sb, \"ext2_xattr_cache_find\",",
      "",
      "[Removed Lines]",
      "906:  struct mb_cache_entry *ce;",
      "912:  ce = mb_cache_entry_find_first(ext2_xattr_cache, inode->i_sb->s_bdev,",
      "913:            hash);",
      "917:   if (IS_ERR(ce)) {",
      "918:    if (PTR_ERR(ce) == -EAGAIN)",
      "919:     goto again;",
      "920:    break;",
      "921:   }",
      "",
      "[Added Lines]",
      "890:  struct mb2_cache_entry *ce;",
      "891:  struct mb2_cache *ext2_mb_cache = EXT2_SB(inode->i_sb)->s_mb_cache;",
      "897:  ce = mb2_cache_entry_find_first(ext2_mb_cache, hash);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "927:     inode->i_ino, (unsigned long) ce->e_block);",
      "928:   } else {",
      "929:    lock_buffer(bh);",
      "931:        EXT2_XATTR_REFCOUNT_MAX) {",
      "932:     ea_idebug(inode, \"block %ld refcount %d>%d\",",
      "933:        (unsigned long) ce->e_block,",
      "",
      "[Removed Lines]",
      "930:    if (le32_to_cpu(HDR(bh)->h_refcount) >",
      "",
      "[Added Lines]",
      "917:    if (hlist_bl_unhashed(&ce->e_hash_list)) {",
      "918:     mb2_cache_entry_put(ext2_mb_cache, ce);",
      "919:     unlock_buffer(bh);",
      "920:     brelse(bh);",
      "921:     goto again;",
      "922:    } else if (le32_to_cpu(HDR(bh)->h_refcount) >",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "936:    } else if (!ext2_xattr_cmp(header, HDR(bh))) {",
      "937:     ea_bdebug(bh, \"b_count=%d\",",
      "938:        atomic_read(&(bh->b_count)));",
      "940:     return bh;",
      "941:    }",
      "942:    unlock_buffer(bh);",
      "943:    brelse(bh);",
      "944:   }",
      "946:  }",
      "947:  return NULL;",
      "948: }",
      "",
      "[Removed Lines]",
      "939:     mb_cache_entry_release(ce);",
      "945:   ce = mb_cache_entry_find_next(ce, inode->i_sb->s_bdev, hash);",
      "",
      "[Added Lines]",
      "931:     mb2_cache_entry_touch(ext2_mb_cache, ce);",
      "932:     mb2_cache_entry_put(ext2_mb_cache, ce);",
      "938:   ce = mb2_cache_entry_find_next(ext2_mb_cache, ce);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1016: #undef BLOCK_HASH_SHIFT",
      "1020: {",
      "1025: }",
      "1029: {",
      "1031: }",
      "",
      "[Removed Lines]",
      "1018: int __init",
      "1019: init_ext2_xattr(void)",
      "1021:  ext2_xattr_cache = mb_cache_create(\"ext2_xattr\", 6);",
      "1022:  if (!ext2_xattr_cache)",
      "1023:   return -ENOMEM;",
      "1024:  return 0;",
      "1027: void",
      "1028: exit_ext2_xattr(void)",
      "1030:  mb_cache_destroy(ext2_xattr_cache);",
      "",
      "[Added Lines]",
      "1011: #define HASH_BUCKET_BITS 10",
      "1013: struct mb2_cache *ext2_xattr_create_cache(void)",
      "1015:  return mb2_cache_create(HASH_BUCKET_BITS);",
      "1018: void ext2_xattr_destroy_cache(struct mb2_cache *cache)",
      "1020:  if (cache)",
      "1021:   mb2_cache_destroy(cache);",
      "",
      "---------------"
    ],
    "fs/ext2/xattr.h||fs/ext2/xattr.h": [
      "File: fs/ext2/xattr.h -> fs/ext2/xattr.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: #define EXT2_XATTR_SIZE(size) \\",
      "54:  (((size) + EXT2_XATTR_ROUND) & ~EXT2_XATTR_ROUND)",
      "56: # ifdef CONFIG_EXT2_FS_XATTR",
      "58: extern const struct xattr_handler ext2_xattr_user_handler;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: struct mb2_cache;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65: extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);",
      "67: extern void ext2_xattr_delete_inode(struct inode *);",
      "73: extern const struct xattr_handler *ext2_xattr_handlers[];",
      "",
      "[Removed Lines]",
      "68: extern void ext2_xattr_put_super(struct super_block *);",
      "70: extern int init_ext2_xattr(void);",
      "71: extern void exit_ext2_xattr(void);",
      "",
      "[Added Lines]",
      "71: extern struct mb2_cache *ext2_xattr_create_cache(void);",
      "72: extern void ext2_xattr_destroy_cache(struct mb2_cache *cache);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "93: {",
      "94: }",
      "109: {",
      "110: }",
      "",
      "[Removed Lines]",
      "96: static inline void",
      "97: ext2_xattr_put_super(struct super_block *sb)",
      "98: {",
      "99: }",
      "101: static inline int",
      "102: init_ext2_xattr(void)",
      "103: {",
      "104:  return 0;",
      "105: }",
      "107: static inline void",
      "108: exit_ext2_xattr(void)",
      "",
      "[Added Lines]",
      "97: static inline void ext2_xattr_destroy_cache(struct mb2_cache *cache)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6048c64b26097a0ffbd966866b599f990e674e9b",
      "candidate_info": {
        "commit_hash": "6048c64b26097a0ffbd966866b599f990e674e9b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6048c64b26097a0ffbd966866b599f990e674e9b",
        "files": [
          "fs/ext2/xattr.c",
          "fs/ext4/xattr.c",
          "fs/mbcache.c",
          "include/linux/mbcache.h"
        ],
        "message": "mbcache: add reusable flag to cache entries\n\nTo reduce amount of damage caused by single bad block, we limit number\nof inodes sharing an xattr block to 1024. Thus there can be more xattr\nblocks with the same contents when there are lots of files with the same\nextended attributes. These xattr blocks naturally result in hash\ncollisions and can form long hash chains and we unnecessarily check each\nsuch block only to find out we cannot use it because it is already\nshared by too many inodes.\n\nAdd a reusable flag to cache entries which is cleared when a cache entry\nhas reached its maximum refcount.  Cache entries which are not marked\nreusable are skipped by mb_cache_entry_find_{first,next}. This\nsignificantly speeds up mbcache when there are many same xattr blocks.\nFor example for xattr-bench with 5 values and each process handling\n20000 files, the run for 64 processes is 25x faster with this patch.\nEven for 8 processes the speedup is almost 3x. We have also verified\nthat for situations where there is only one xattr block of each kind,\nthe patch doesn't have a measurable cost.\n\n[JK: Remove handling of setting the same value since it is not needed\nanymore, check for races in e_reusable setting, improve changelog,\nadd measurements]\n\nSigned-off-by: Andreas Gruenbacher <agruenba@redhat.com>\nSigned-off-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext2/xattr.c||fs/ext2/xattr.c",
          "fs/ext4/xattr.c||fs/ext4/xattr.c",
          "fs/mbcache.c||fs/mbcache.c",
          "include/linux/mbcache.h||include/linux/mbcache.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext2/xattr.c||fs/ext2/xattr.c"
          ],
          "candidate": [
            "fs/ext2/xattr.c||fs/ext2/xattr.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext2/xattr.c||fs/ext2/xattr.c": [
          "File: fs/ext2/xattr.c -> fs/ext2/xattr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:  __u32 hash = le32_to_cpu(HDR(bh)->h_hash);",
          "824:  int error;",
          "827:  if (error) {",
          "828:   if (error == -EBUSY) {",
          "829:    ea_bdebug(bh, \"already in cache (%d cache entries)\",",
          "",
          "[Removed Lines]",
          "826:  error = mb_cache_entry_create(cache, GFP_NOFS, hash, bh->b_blocknr);",
          "",
          "[Added Lines]",
          "826:  error = mb_cache_entry_create(cache, GFP_NOFS, hash, bh->b_blocknr, 1);",
          "",
          "---------------"
        ],
        "fs/ext4/xattr.c||fs/ext4/xattr.c": [
          "File: fs/ext4/xattr.c -> fs/ext4/xattr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545: ext4_xattr_release_block(handle_t *handle, struct inode *inode,",
          "546:     struct buffer_head *bh)",
          "547: {",
          "548:  int error = 0;",
          "550:  BUFFER_TRACE(bh, \"get_write_access\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:  struct mb_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
          "549:  u32 hash, ref;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "553:   goto out;",
          "555:  lock_buffer(bh);",
          "559:   ea_bdebug(bh, \"refcount now=0; freeing\");",
          "566:   get_bh(bh);",
          "567:   unlock_buffer(bh);",
          "568:   ext4_free_blocks(handle, inode, bh, 0, 1,",
          "569:      EXT4_FREE_BLOCKS_METADATA |",
          "570:      EXT4_FREE_BLOCKS_FORGET);",
          "571:  } else {",
          "",
          "[Removed Lines]",
          "556:  if (BHDR(bh)->h_refcount == cpu_to_le32(1)) {",
          "557:   __u32 hash = le32_to_cpu(BHDR(bh)->h_hash);",
          "564:   mb_cache_entry_delete_block(EXT4_GET_MB_CACHE(inode), hash,",
          "565:          bh->b_blocknr);",
          "572:   le32_add_cpu(&BHDR(bh)->h_refcount, -1);",
          "",
          "[Added Lines]",
          "558:  hash = le32_to_cpu(BHDR(bh)->h_hash);",
          "559:  ref = le32_to_cpu(BHDR(bh)->h_refcount);",
          "560:  if (ref == 1) {",
          "566:   mb_cache_entry_delete_block(ext4_mb_cache, hash, bh->b_blocknr);",
          "573:   ref--;",
          "574:   BHDR(bh)->h_refcount = cpu_to_le32(ref);",
          "575:   if (ref == EXT4_XATTR_REFCOUNT_MAX - 1) {",
          "576:    struct mb_cache_entry *ce;",
          "578:    ce = mb_cache_entry_get(ext4_mb_cache, hash,",
          "579:       bh->b_blocknr);",
          "580:    if (ce) {",
          "581:     ce->e_reusable = 1;",
          "582:     mb_cache_entry_put(ext4_mb_cache, ce);",
          "583:    }",
          "584:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "872:    if (new_bh == bs->bh)",
          "873:     ea_bdebug(new_bh, \"keeping\");",
          "874:    else {",
          "877:     error = dquot_alloc_block(inode,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "888:     u32 ref;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "886:     lock_buffer(new_bh);",
          "",
          "[Removed Lines]",
          "897:     if (hlist_bl_unhashed(&ce->e_hash_list)) {",
          "",
          "[Added Lines]",
          "914:     if (hlist_bl_unhashed(&ce->e_hash_list) ||",
          "915:         !ce->e_reusable) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "909:      new_bh = NULL;",
          "910:      goto inserted;",
          "911:     }",
          "913:     ea_bdebug(new_bh, \"reusing; refcount now=%d\",",
          "915:     unlock_buffer(new_bh);",
          "916:     error = ext4_handle_dirty_xattr_block(handle,",
          "917:               inode,",
          "",
          "[Removed Lines]",
          "912:     le32_add_cpu(&BHDR(new_bh)->h_refcount, 1);",
          "914:      le32_to_cpu(BHDR(new_bh)->h_refcount));",
          "",
          "[Added Lines]",
          "930:     ref = le32_to_cpu(BHDR(new_bh)->h_refcount) + 1;",
          "931:     BHDR(new_bh)->h_refcount = cpu_to_le32(ref);",
          "932:     if (ref >= EXT4_XATTR_REFCOUNT_MAX)",
          "933:      ce->e_reusable = 0;",
          "935:        ref);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1566: static void",
          "1567: ext4_xattr_cache_insert(struct mb_cache *ext4_mb_cache, struct buffer_head *bh)",
          "1568: {",
          "1570:  int error;",
          "1572:  error = mb_cache_entry_create(ext4_mb_cache, GFP_NOFS, hash,",
          "1574:  if (error) {",
          "1575:   if (error == -EBUSY)",
          "1576:    ea_bdebug(bh, \"already in cache\");",
          "",
          "[Removed Lines]",
          "1569:  __u32 hash = le32_to_cpu(BHDR(bh)->h_hash);",
          "1573:           bh->b_blocknr);",
          "",
          "[Added Lines]",
          "1590:  struct ext4_xattr_header *header = BHDR(bh);",
          "1591:  __u32 hash = le32_to_cpu(header->h_hash);",
          "1592:  int reusable = le32_to_cpu(header->h_refcount) <",
          "1593:          EXT4_XATTR_REFCOUNT_MAX;",
          "1597:           bh->b_blocknr, reusable);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1645:   if (!bh) {",
          "1646:    EXT4_ERROR_INODE(inode, \"block %lu read error\",",
          "1647:       (unsigned long) ce->e_block);",
          "1654:   } else if (ext4_xattr_cmp(header, BHDR(bh)) == 0) {",
          "1656:    return bh;",
          "",
          "[Removed Lines]",
          "1648:   } else if (le32_to_cpu(BHDR(bh)->h_refcount) >=",
          "1649:     EXT4_XATTR_REFCOUNT_MAX) {",
          "1650:    ea_idebug(inode, \"block %lu refcount %d>=%d\",",
          "1651:       (unsigned long) ce->e_block,",
          "1652:       le32_to_cpu(BHDR(bh)->h_refcount),",
          "1653:        EXT4_XATTR_REFCOUNT_MAX);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fs/mbcache.c||fs/mbcache.c": [
          "File: fs/mbcache.c -> fs/mbcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: int mb_cache_entry_create(struct mb_cache *cache, gfp_t mask, u32 key,",
          "73: {",
          "74:  struct mb_cache_entry *entry, *dup;",
          "75:  struct hlist_bl_node *dup_node;",
          "",
          "[Removed Lines]",
          "72:      sector_t block)",
          "",
          "[Added Lines]",
          "73:      sector_t block, bool reusable)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:  atomic_set(&entry->e_refcnt, 1);",
          "92:  entry->e_key = key;",
          "93:  entry->e_block = block;",
          "94:  head = mb_cache_entry_head(cache, key);",
          "95:  hlist_bl_lock(head);",
          "96:  hlist_bl_for_each_entry(dup, dup_node, head, e_hash_list) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:  entry->e_reusable = reusable;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:  while (node) {",
          "138:   entry = hlist_bl_entry(node, struct mb_cache_entry,",
          "139:            e_hash_list);",
          "141:    atomic_inc(&entry->e_refcnt);",
          "142:    goto out;",
          "143:   }",
          "",
          "[Removed Lines]",
          "140:   if (entry->e_key == key) {",
          "",
          "[Added Lines]",
          "142:   if (entry->e_key == key && entry->e_reusable) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184: }",
          "185: EXPORT_SYMBOL(mb_cache_entry_find_next);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195: struct mb_cache_entry *mb_cache_entry_get(struct mb_cache *cache, u32 key,",
          "196:        sector_t block)",
          "197: {",
          "198:  struct hlist_bl_node *node;",
          "199:  struct hlist_bl_head *head;",
          "200:  struct mb_cache_entry *entry;",
          "202:  head = mb_cache_entry_head(cache, key);",
          "203:  hlist_bl_lock(head);",
          "204:  hlist_bl_for_each_entry(entry, node, head, e_hash_list) {",
          "205:   if (entry->e_key == key && entry->e_block == block) {",
          "206:    atomic_inc(&entry->e_refcnt);",
          "207:    goto out;",
          "208:   }",
          "209:  }",
          "210:  entry = NULL;",
          "211: out:",
          "212:  hlist_bl_unlock(head);",
          "213:  return entry;",
          "214: }",
          "215: EXPORT_SYMBOL(mb_cache_entry_get);",
          "",
          "---------------"
        ],
        "include/linux/mbcache.h||include/linux/mbcache.h": [
          "File: include/linux/mbcache.h -> include/linux/mbcache.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  u32   e_key;",
          "20:  u32   e_referenced:1;",
          "22:  sector_t  e_block;",
          "23: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  u32   e_reusable:1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: void mb_cache_destroy(struct mb_cache *cache);",
          "28: int mb_cache_entry_create(struct mb_cache *cache, gfp_t mask, u32 key,",
          "30: void __mb_cache_entry_free(struct mb_cache_entry *entry);",
          "31: static inline int mb_cache_entry_put(struct mb_cache *cache,",
          "32:          struct mb_cache_entry *entry)",
          "",
          "[Removed Lines]",
          "29:      sector_t block);",
          "",
          "[Added Lines]",
          "30:      sector_t block, bool reusable);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40: void mb_cache_entry_delete_block(struct mb_cache *cache, u32 key,",
          "41:       sector_t block);",
          "42: struct mb_cache_entry *mb_cache_entry_find_first(struct mb_cache *cache,",
          "43:        u32 key);",
          "44: struct mb_cache_entry *mb_cache_entry_find_next(struct mb_cache *cache,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: struct mb_cache_entry *mb_cache_entry_get(struct mb_cache *cache, u32 key,",
          "44:        sector_t block);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a2508e1b657cfc7e1371550f88c7a7bc4288f32",
      "candidate_info": {
        "commit_hash": "7a2508e1b657cfc7e1371550f88c7a7bc4288f32",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7a2508e1b657cfc7e1371550f88c7a7bc4288f32",
        "files": [
          "fs/Makefile",
          "fs/ext2/ext2.h",
          "fs/ext2/xattr.c",
          "fs/ext2/xattr.h",
          "fs/ext4/ext4.h",
          "fs/ext4/xattr.c",
          "fs/ext4/xattr.h",
          "fs/mbcache.c",
          "include/linux/mbcache.h",
          "include/linux/mbcache2.h"
        ],
        "message": "mbcache2: rename to mbcache\n\nSince old mbcache code is gone, let's rename new code to mbcache since\nnumber 2 is now meaningless. This is just a mechanical replacement.\n\nSigned-off-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext2/ext2.h||fs/ext2/ext2.h",
          "fs/ext2/xattr.c||fs/ext2/xattr.c",
          "fs/ext2/xattr.h||fs/ext2/xattr.h",
          "fs/ext4/ext4.h||fs/ext4/ext4.h",
          "fs/ext4/xattr.c||fs/ext4/xattr.c",
          "fs/ext4/xattr.h||fs/ext4/xattr.h",
          "fs/mbcache2.c||fs/mbcache.c",
          "include/linux/mbcache.h||include/linux/mbcache.h",
          "include/linux/mbcache2.h||include/linux/mbcache2.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext2/ext2.h||fs/ext2/ext2.h",
            "fs/ext2/xattr.c||fs/ext2/xattr.c",
            "fs/ext2/xattr.h||fs/ext2/xattr.h"
          ],
          "candidate": [
            "fs/ext2/ext2.h||fs/ext2/ext2.h",
            "fs/ext2/xattr.c||fs/ext2/xattr.c",
            "fs/ext2/xattr.h||fs/ext2/xattr.h"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext2/ext2.h||fs/ext2/ext2.h": [
          "File: fs/ext2/ext2.h -> fs/ext2/ext2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: #define rsv_start rsv_window._rsv_start",
          "62: #define rsv_end rsv_window._rsv_end",
          "",
          "[Removed Lines]",
          "64: struct mb2_cache;",
          "",
          "[Added Lines]",
          "64: struct mb_cache;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:  spinlock_t s_lock;",
          "117: };",
          "119: static inline spinlock_t *",
          "",
          "[Removed Lines]",
          "116:  struct mb2_cache *s_mb_cache;",
          "",
          "[Added Lines]",
          "116:  struct mb_cache *s_mb_cache;",
          "",
          "---------------"
        ],
        "fs/ext2/xattr.c||fs/ext2/xattr.c": [
          "File: fs/ext2/xattr.c -> fs/ext2/xattr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #include <linux/buffer_head.h>",
          "57: #include <linux/init.h>",
          "58: #include <linux/slab.h>",
          "60: #include <linux/quotaops.h>",
          "61: #include <linux/rwsem.h>",
          "62: #include <linux/security.h>",
          "",
          "[Removed Lines]",
          "59: #include <linux/mbcache2.h>",
          "",
          "[Added Lines]",
          "59: #include <linux/mbcache.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: static int ext2_xattr_set2(struct inode *, struct buffer_head *,",
          "91:       struct ext2_xattr_header *);",
          "94: static struct buffer_head *ext2_xattr_cache_find(struct inode *,",
          "95:        struct ext2_xattr_header *);",
          "96: static void ext2_xattr_rehash(struct ext2_xattr_header *,",
          "",
          "[Removed Lines]",
          "93: static int ext2_xattr_cache_insert(struct mb2_cache *, struct buffer_head *);",
          "",
          "[Added Lines]",
          "93: static int ext2_xattr_cache_insert(struct mb_cache *, struct buffer_head *);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:  size_t name_len, size;",
          "151:  char *end;",
          "152:  int error;",
          "155:  ea_idebug(inode, \"name=%d.%s, buffer=%p, buffer_size=%ld\",",
          "156:     name_index, name, buffer, (long)buffer_size);",
          "",
          "[Removed Lines]",
          "153:  struct mb2_cache *ext2_mb_cache = EXT2_SB(inode->i_sb)->s_mb_cache;",
          "",
          "[Added Lines]",
          "153:  struct mb_cache *ext2_mb_cache = EXT2_SB(inode->i_sb)->s_mb_cache;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:  char *end;",
          "247:  size_t rest = buffer_size;",
          "248:  int error;",
          "251:  ea_idebug(inode, \"buffer=%p, buffer_size=%ld\",",
          "252:     buffer, (long)buffer_size);",
          "",
          "[Removed Lines]",
          "249:  struct mb2_cache *ext2_mb_cache = EXT2_SB(inode->i_sb)->s_mb_cache;",
          "",
          "[Added Lines]",
          "249:  struct mb_cache *ext2_mb_cache = EXT2_SB(inode->i_sb)->s_mb_cache;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "500:   } else {",
          "",
          "[Removed Lines]",
          "496:    mb2_cache_entry_delete_block(EXT2_SB(sb)->s_mb_cache,",
          "497:            hash, bh->b_blocknr);",
          "",
          "[Added Lines]",
          "496:    mb_cache_entry_delete_block(EXT2_SB(sb)->s_mb_cache,",
          "497:           hash, bh->b_blocknr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "627:  struct super_block *sb = inode->i_sb;",
          "628:  struct buffer_head *new_bh = NULL;",
          "629:  int error;",
          "632:  if (header) {",
          "633:   new_bh = ext2_xattr_cache_find(inode, header);",
          "",
          "[Removed Lines]",
          "630:  struct mb2_cache *ext2_mb_cache = EXT2_SB(sb)->s_mb_cache;",
          "",
          "[Added Lines]",
          "630:  struct mb_cache *ext2_mb_cache = EXT2_SB(sb)->s_mb_cache;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "727:    ea_bdebug(old_bh, \"freeing\");",
          "728:    ext2_free_blocks(inode, old_bh->b_blocknr, 1);",
          "",
          "[Removed Lines]",
          "724:    mb2_cache_entry_delete_block(ext2_mb_cache,",
          "725:            hash, old_bh->b_blocknr);",
          "",
          "[Added Lines]",
          "724:    mb_cache_entry_delete_block(ext2_mb_cache,",
          "725:           hash, old_bh->b_blocknr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "791:   ext2_free_blocks(inode, EXT2_I(inode)->i_file_acl, 1);",
          "792:   get_bh(bh);",
          "793:   bforget(bh);",
          "",
          "[Removed Lines]",
          "789:   mb2_cache_entry_delete_block(EXT2_SB(inode->i_sb)->s_mb_cache,",
          "790:           hash, bh->b_blocknr);",
          "",
          "[Added Lines]",
          "789:   mb_cache_entry_delete_block(EXT2_SB(inode->i_sb)->s_mb_cache,",
          "790:          hash, bh->b_blocknr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "820: static int",
          "822: {",
          "823:  __u32 hash = le32_to_cpu(HDR(bh)->h_hash);",
          "824:  int error;",
          "827:  if (error) {",
          "828:   if (error == -EBUSY) {",
          "829:    ea_bdebug(bh, \"already in cache (%d cache entries)\",",
          "",
          "[Removed Lines]",
          "821: ext2_xattr_cache_insert(struct mb2_cache *cache, struct buffer_head *bh)",
          "826:  error = mb2_cache_entry_create(cache, GFP_NOFS, hash, bh->b_blocknr);",
          "",
          "[Added Lines]",
          "821: ext2_xattr_cache_insert(struct mb_cache *cache, struct buffer_head *bh)",
          "826:  error = mb_cache_entry_create(cache, GFP_NOFS, hash, bh->b_blocknr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "887: ext2_xattr_cache_find(struct inode *inode, struct ext2_xattr_header *header)",
          "888: {",
          "889:  __u32 hash = le32_to_cpu(header->h_hash);",
          "893:  if (!header->h_hash)",
          "895:  ea_idebug(inode, \"looking for cached blocks [%x]\", (int)hash);",
          "896: again:",
          "898:  while (ce) {",
          "899:   struct buffer_head *bh;",
          "",
          "[Removed Lines]",
          "890:  struct mb2_cache_entry *ce;",
          "891:  struct mb2_cache *ext2_mb_cache = EXT2_SB(inode->i_sb)->s_mb_cache;",
          "897:  ce = mb2_cache_entry_find_first(ext2_mb_cache, hash);",
          "",
          "[Added Lines]",
          "890:  struct mb_cache_entry *ce;",
          "891:  struct mb_cache *ext2_mb_cache = EXT2_SB(inode->i_sb)->s_mb_cache;",
          "897:  ce = mb_cache_entry_find_first(ext2_mb_cache, hash);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "917:    if (hlist_bl_unhashed(&ce->e_hash_list)) {",
          "919:     unlock_buffer(bh);",
          "920:     brelse(bh);",
          "921:     goto again;",
          "",
          "[Removed Lines]",
          "918:     mb2_cache_entry_put(ext2_mb_cache, ce);",
          "",
          "[Added Lines]",
          "918:     mb_cache_entry_put(ext2_mb_cache, ce);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "928:    } else if (!ext2_xattr_cmp(header, HDR(bh))) {",
          "929:     ea_bdebug(bh, \"b_count=%d\",",
          "930:        atomic_read(&(bh->b_count)));",
          "933:     return bh;",
          "934:    }",
          "935:    unlock_buffer(bh);",
          "936:    brelse(bh);",
          "937:   }",
          "939:  }",
          "940:  return NULL;",
          "941: }",
          "",
          "[Removed Lines]",
          "931:     mb2_cache_entry_touch(ext2_mb_cache, ce);",
          "932:     mb2_cache_entry_put(ext2_mb_cache, ce);",
          "938:   ce = mb2_cache_entry_find_next(ext2_mb_cache, ce);",
          "",
          "[Added Lines]",
          "931:     mb_cache_entry_touch(ext2_mb_cache, ce);",
          "932:     mb_cache_entry_put(ext2_mb_cache, ce);",
          "938:   ce = mb_cache_entry_find_next(ext2_mb_cache, ce);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1011: #define HASH_BUCKET_BITS 10",
          "1014: {",
          "1016: }",
          "1019: {",
          "1020:  if (cache)",
          "1022: }",
          "",
          "[Removed Lines]",
          "1013: struct mb2_cache *ext2_xattr_create_cache(void)",
          "1015:  return mb2_cache_create(HASH_BUCKET_BITS);",
          "1018: void ext2_xattr_destroy_cache(struct mb2_cache *cache)",
          "1021:   mb2_cache_destroy(cache);",
          "",
          "[Added Lines]",
          "1013: struct mb_cache *ext2_xattr_create_cache(void)",
          "1015:  return mb_cache_create(HASH_BUCKET_BITS);",
          "1018: void ext2_xattr_destroy_cache(struct mb_cache *cache)",
          "1021:   mb_cache_destroy(cache);",
          "",
          "---------------"
        ],
        "fs/ext2/xattr.h||fs/ext2/xattr.h": [
          "File: fs/ext2/xattr.h -> fs/ext2/xattr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #define EXT2_XATTR_SIZE(size) \\",
          "54:  (((size) + EXT2_XATTR_ROUND) & ~EXT2_XATTR_ROUND)",
          "58: # ifdef CONFIG_EXT2_FS_XATTR",
          "",
          "[Removed Lines]",
          "56: struct mb2_cache;",
          "",
          "[Added Lines]",
          "56: struct mb_cache;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: extern void ext2_xattr_delete_inode(struct inode *);",
          "74: extern const struct xattr_handler *ext2_xattr_handlers[];",
          "",
          "[Removed Lines]",
          "71: extern struct mb2_cache *ext2_xattr_create_cache(void);",
          "72: extern void ext2_xattr_destroy_cache(struct mb2_cache *cache);",
          "",
          "[Added Lines]",
          "71: extern struct mb_cache *ext2_xattr_create_cache(void);",
          "72: extern void ext2_xattr_destroy_cache(struct mb_cache *cache);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94: {",
          "95: }",
          "98: {",
          "99: }",
          "",
          "[Removed Lines]",
          "97: static inline void ext2_xattr_destroy_cache(struct mb2_cache *cache)",
          "",
          "[Added Lines]",
          "97: static inline void ext2_xattr_destroy_cache(struct mb_cache *cache)",
          "",
          "---------------"
        ],
        "fs/ext4/ext4.h||fs/ext4/ext4.h": [
          "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1469:  long s_es_nr_inode;",
          "1470:  struct ext4_es_stats s_es_stats;",
          "1472:  spinlock_t s_es_lock ____cacheline_aligned_in_smp;",
          "",
          "[Removed Lines]",
          "1471:  struct mb2_cache *s_mb_cache;",
          "",
          "[Added Lines]",
          "1471:  struct mb_cache *s_mb_cache;",
          "",
          "---------------"
        ],
        "fs/ext4/xattr.c||fs/ext4/xattr.c": [
          "File: fs/ext4/xattr.c -> fs/ext4/xattr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #include <linux/init.h>",
          "54: #include <linux/fs.h>",
          "55: #include <linux/slab.h>",
          "57: #include <linux/quotaops.h>",
          "58: #include \"ext4_jbd2.h\"",
          "59: #include \"ext4.h\"",
          "",
          "[Removed Lines]",
          "56: #include <linux/mbcache2.h>",
          "",
          "[Added Lines]",
          "56: #include <linux/mbcache.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: # define ea_bdebug(bh, fmt, ...) no_printk(fmt, ##__VA_ARGS__)",
          "79: #endif",
          "82: static struct buffer_head *ext4_xattr_cache_find(struct inode *,",
          "83:        struct ext4_xattr_header *,",
          "85: static void ext4_xattr_rehash(struct ext4_xattr_header *,",
          "86:          struct ext4_xattr_entry *);",
          "87: static int ext4_xattr_list(struct dentry *dentry, char *buffer,",
          "",
          "[Removed Lines]",
          "81: static void ext4_xattr_cache_insert(struct mb2_cache *, struct buffer_head *);",
          "84:        struct mb2_cache_entry **);",
          "",
          "[Added Lines]",
          "81: static void ext4_xattr_cache_insert(struct mb_cache *, struct buffer_head *);",
          "84:        struct mb_cache_entry **);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "276:  struct ext4_xattr_entry *entry;",
          "277:  size_t size;",
          "278:  int error;",
          "281:  ea_idebug(inode, \"name=%d.%s, buffer=%p, buffer_size=%ld\",",
          "282:     name_index, name, buffer, (long)buffer_size);",
          "",
          "[Removed Lines]",
          "279:  struct mb2_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
          "",
          "[Added Lines]",
          "279:  struct mb_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "428:  struct inode *inode = d_inode(dentry);",
          "429:  struct buffer_head *bh = NULL;",
          "430:  int error;",
          "433:  ea_idebug(inode, \"buffer=%p, buffer_size=%ld\",",
          "434:     buffer, (long)buffer_size);",
          "",
          "[Removed Lines]",
          "431:  struct mb2_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
          "",
          "[Added Lines]",
          "431:  struct mb_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "566:   get_bh(bh);",
          "567:   unlock_buffer(bh);",
          "568:   ext4_free_blocks(handle, inode, bh, 0, 1,",
          "",
          "[Removed Lines]",
          "564:   mb2_cache_entry_delete_block(EXT4_GET_MB_CACHE(inode), hash,",
          "565:           bh->b_blocknr);",
          "",
          "[Added Lines]",
          "564:   mb_cache_entry_delete_block(EXT4_GET_MB_CACHE(inode), hash,",
          "565:          bh->b_blocknr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "782:  struct super_block *sb = inode->i_sb;",
          "783:  struct buffer_head *new_bh = NULL;",
          "784:  struct ext4_xattr_search *s = &bs->s;",
          "786:  int error = 0;",
          "789: #define header(x) ((struct ext4_xattr_header *)(x))",
          "",
          "[Removed Lines]",
          "785:  struct mb2_cache_entry *ce = NULL;",
          "787:  struct mb2_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
          "",
          "[Added Lines]",
          "785:  struct mb_cache_entry *ce = NULL;",
          "787:  struct mb_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "810:    ea_bdebug(bs->bh, \"modifying in-place\");",
          "811:    error = ext4_xattr_set_entry(i, s);",
          "812:    if (!error) {",
          "",
          "[Removed Lines]",
          "808:    mb2_cache_entry_delete_block(ext4_mb_cache, hash,",
          "809:            bs->bh->b_blocknr);",
          "",
          "[Added Lines]",
          "808:    mb_cache_entry_delete_block(ext4_mb_cache, hash,",
          "809:           bs->bh->b_blocknr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "904:         EXT4_C2B(EXT4_SB(sb),",
          "905:           1));",
          "906:      brelse(new_bh);",
          "908:      ce = NULL;",
          "909:      new_bh = NULL;",
          "910:      goto inserted;",
          "",
          "[Removed Lines]",
          "907:      mb2_cache_entry_put(ext4_mb_cache, ce);",
          "",
          "[Added Lines]",
          "907:      mb_cache_entry_put(ext4_mb_cache, ce);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "919:     if (error)",
          "920:      goto cleanup_dquot;",
          "921:    }",
          "924:    ce = NULL;",
          "925:   } else if (bs->bh && s->base == bs->bh->b_data) {",
          "",
          "[Removed Lines]",
          "922:    mb2_cache_entry_touch(ext4_mb_cache, ce);",
          "923:    mb2_cache_entry_put(ext4_mb_cache, ce);",
          "",
          "[Added Lines]",
          "922:    mb_cache_entry_touch(ext4_mb_cache, ce);",
          "923:    mb_cache_entry_put(ext4_mb_cache, ce);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "986: cleanup:",
          "987:  if (ce)",
          "989:  brelse(new_bh);",
          "990:  if (!(bs->bh && s->base == bs->bh->b_data))",
          "991:   kfree(s->base);",
          "",
          "[Removed Lines]",
          "988:   mb2_cache_entry_put(ext4_mb_cache, ce);",
          "",
          "[Added Lines]",
          "988:   mb_cache_entry_put(ext4_mb_cache, ce);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1548: static void",
          "1550: {",
          "1551:  __u32 hash = le32_to_cpu(BHDR(bh)->h_hash);",
          "1552:  int error;",
          "1556:  if (error) {",
          "1557:   if (error == -EBUSY)",
          "1558:    ea_bdebug(bh, \"already in cache\");",
          "",
          "[Removed Lines]",
          "1549: ext4_xattr_cache_insert(struct mb2_cache *ext4_mb_cache, struct buffer_head *bh)",
          "1554:  error = mb2_cache_entry_create(ext4_mb_cache, GFP_NOFS, hash,",
          "1555:            bh->b_blocknr);",
          "",
          "[Added Lines]",
          "1549: ext4_xattr_cache_insert(struct mb_cache *ext4_mb_cache, struct buffer_head *bh)",
          "1554:  error = mb_cache_entry_create(ext4_mb_cache, GFP_NOFS, hash,",
          "1555:           bh->b_blocknr);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1611: static struct buffer_head *",
          "1612: ext4_xattr_cache_find(struct inode *inode, struct ext4_xattr_header *header,",
          "1614: {",
          "1615:  __u32 hash = le32_to_cpu(header->h_hash);",
          "1619:  if (!header->h_hash)",
          "1621:  ea_idebug(inode, \"looking for cached blocks [%x]\", (int)hash);",
          "1623:  while (ce) {",
          "1624:   struct buffer_head *bh;",
          "",
          "[Removed Lines]",
          "1613:         struct mb2_cache_entry **pce)",
          "1616:  struct mb2_cache_entry *ce;",
          "1617:  struct mb2_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
          "1622:  ce = mb2_cache_entry_find_first(ext4_mb_cache, hash);",
          "",
          "[Added Lines]",
          "1613:         struct mb_cache_entry **pce)",
          "1616:  struct mb_cache_entry *ce;",
          "1617:  struct mb_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
          "1622:  ce = mb_cache_entry_find_first(ext4_mb_cache, hash);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1638:    return bh;",
          "1639:   }",
          "1640:   brelse(bh);",
          "1642:  }",
          "1643:  return NULL;",
          "1644: }",
          "",
          "[Removed Lines]",
          "1641:   ce = mb2_cache_entry_find_next(ext4_mb_cache, ce);",
          "",
          "[Added Lines]",
          "1641:   ce = mb_cache_entry_find_next(ext4_mb_cache, ce);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1714: #define HASH_BUCKET_BITS 10",
          "1717: ext4_xattr_create_cache(void)",
          "1718: {",
          "1720: }",
          "1723: {",
          "1724:  if (cache)",
          "1726: }",
          "",
          "[Removed Lines]",
          "1716: struct mb2_cache *",
          "1719:  return mb2_cache_create(HASH_BUCKET_BITS);",
          "1722: void ext4_xattr_destroy_cache(struct mb2_cache *cache)",
          "1725:   mb2_cache_destroy(cache);",
          "",
          "[Added Lines]",
          "1716: struct mb_cache *",
          "1719:  return mb_cache_create(HASH_BUCKET_BITS);",
          "1722: void ext4_xattr_destroy_cache(struct mb_cache *cache)",
          "1725:   mb_cache_destroy(cache);",
          "",
          "---------------"
        ],
        "fs/ext4/xattr.h||fs/ext4/xattr.h": [
          "File: fs/ext4/xattr.h -> fs/ext4/xattr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:            struct ext4_xattr_info *i,",
          "124:            struct ext4_xattr_ibody_find *is);",
          "129: #ifdef CONFIG_EXT4_FS_SECURITY",
          "130: extern int ext4_init_security(handle_t *handle, struct inode *inode,",
          "",
          "[Removed Lines]",
          "126: extern struct mb2_cache *ext4_xattr_create_cache(void);",
          "127: extern void ext4_xattr_destroy_cache(struct mb2_cache *);",
          "",
          "[Added Lines]",
          "126: extern struct mb_cache *ext4_xattr_create_cache(void);",
          "127: extern void ext4_xattr_destroy_cache(struct mb_cache *);",
          "",
          "---------------"
        ],
        "fs/mbcache2.c||fs/mbcache.c": [
          "File: fs/mbcache2.c -> fs/mbcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <linux/module.h>",
          "6: #include <linux/sched.h>",
          "7: #include <linux/workqueue.h>",
          "",
          "[Removed Lines]",
          "8: #include <linux/mbcache2.h>",
          "",
          "[Added Lines]",
          "8: #include <linux/mbcache.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  struct hlist_bl_head *c_hash;",
          "",
          "[Removed Lines]",
          "26: struct mb2_cache {",
          "",
          "[Added Lines]",
          "26: struct mb_cache {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:  struct work_struct c_shrink_work;",
          "41: };",
          "49: {",
          "50:  return entry->_e_hash_list_head & 1;",
          "51: }",
          "54: {",
          "55:  entry->_e_hash_list_head |= 1;",
          "56: }",
          "60: {",
          "61:  entry->_e_hash_list_head &= ~1;",
          "62: }",
          "66: {",
          "67:  return (struct hlist_bl_head *)",
          "68:    (entry->_e_hash_list_head & ~1);",
          "",
          "[Removed Lines]",
          "43: static struct kmem_cache *mb2_entry_cache;",
          "45: static unsigned long mb2_cache_shrink(struct mb2_cache *cache,",
          "46:           unsigned int nr_to_scan);",
          "48: static inline bool mb2_cache_entry_referenced(struct mb2_cache_entry *entry)",
          "53: static inline void mb2_cache_entry_set_referenced(struct mb2_cache_entry *entry)",
          "58: static inline void mb2_cache_entry_clear_referenced(",
          "59:      struct mb2_cache_entry *entry)",
          "64: static inline struct hlist_bl_head *mb2_cache_entry_head(",
          "65:      struct mb2_cache_entry *entry)",
          "",
          "[Added Lines]",
          "43: static struct kmem_cache *mb_entry_cache;",
          "45: static unsigned long mb_cache_shrink(struct mb_cache *cache,",
          "46:          unsigned int nr_to_scan);",
          "48: static inline bool mb_cache_entry_referenced(struct mb_cache_entry *entry)",
          "53: static inline void mb_cache_entry_set_referenced(struct mb_cache_entry *entry)",
          "58: static inline void mb_cache_entry_clear_referenced(",
          "59:      struct mb_cache_entry *entry)",
          "64: static inline struct hlist_bl_head *mb_cache_entry_head(",
          "65:      struct mb_cache_entry *entry)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90: {",
          "92:  struct hlist_bl_node *dup_node;",
          "93:  struct hlist_bl_head *head;",
          "",
          "[Removed Lines]",
          "88: int mb2_cache_entry_create(struct mb2_cache *cache, gfp_t mask, u32 key,",
          "89:       sector_t block)",
          "91:  struct mb2_cache_entry *entry, *dup;",
          "",
          "[Added Lines]",
          "88: int mb_cache_entry_create(struct mb_cache *cache, gfp_t mask, u32 key,",
          "89:      sector_t block)",
          "91:  struct mb_cache_entry *entry, *dup;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "97:   schedule_work(&cache->c_shrink_work);",
          "99:  if (cache->c_entry_count >= 2*cache->c_max_entries)",
          "103:  if (!entry)",
          "104:   return -ENOMEM;",
          "",
          "[Removed Lines]",
          "100:   mb2_cache_shrink(cache, SYNC_SHRINK_BATCH);",
          "102:  entry = kmem_cache_alloc(mb2_entry_cache, mask);",
          "",
          "[Added Lines]",
          "100:   mb_cache_shrink(cache, SYNC_SHRINK_BATCH);",
          "102:  entry = kmem_cache_alloc(mb_entry_cache, mask);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "114:  hlist_bl_for_each_entry(dup, dup_node, head, e_hash_list) {",
          "115:   if (dup->e_key == key && dup->e_block == block) {",
          "116:    hlist_bl_unlock(head);",
          "118:    return -EBUSY;",
          "119:   }",
          "120:  }",
          "",
          "[Removed Lines]",
          "117:    kmem_cache_free(mb2_entry_cache, entry);",
          "",
          "[Added Lines]",
          "117:    kmem_cache_free(mb_entry_cache, entry);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "131:  return 0;",
          "132: }",
          "136: {",
          "138: }",
          "144: {",
          "146:  struct hlist_bl_node *node;",
          "147:  struct hlist_bl_head *head;",
          "149:  if (entry)",
          "151:  else",
          "152:   head = &cache->c_hash[hash_32(key, cache->c_bucket_bits)];",
          "153:  hlist_bl_lock(head);",
          "",
          "[Removed Lines]",
          "133: EXPORT_SYMBOL(mb2_cache_entry_create);",
          "135: void __mb2_cache_entry_free(struct mb2_cache_entry *entry)",
          "137:  kmem_cache_free(mb2_entry_cache, entry);",
          "139: EXPORT_SYMBOL(__mb2_cache_entry_free);",
          "141: static struct mb2_cache_entry *__entry_find(struct mb2_cache *cache,",
          "142:          struct mb2_cache_entry *entry,",
          "143:          u32 key)",
          "145:  struct mb2_cache_entry *old_entry = entry;",
          "150:   head = mb2_cache_entry_head(entry);",
          "",
          "[Added Lines]",
          "133: EXPORT_SYMBOL(mb_cache_entry_create);",
          "135: void __mb_cache_entry_free(struct mb_cache_entry *entry)",
          "137:  kmem_cache_free(mb_entry_cache, entry);",
          "139: EXPORT_SYMBOL(__mb_cache_entry_free);",
          "141: static struct mb_cache_entry *__entry_find(struct mb_cache *cache,",
          "142:         struct mb_cache_entry *entry,",
          "143:         u32 key)",
          "145:  struct mb_cache_entry *old_entry = entry;",
          "150:   head = mb_cache_entry_head(entry);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "156:  else",
          "157:   node = hlist_bl_first(head);",
          "158:  while (node) {",
          "160:            e_hash_list);",
          "161:   if (entry->e_key == key) {",
          "162:    atomic_inc(&entry->e_refcnt);",
          "",
          "[Removed Lines]",
          "159:   entry = hlist_bl_entry(node, struct mb2_cache_entry,",
          "",
          "[Added Lines]",
          "159:   entry = hlist_bl_entry(node, struct mb_cache_entry,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "168: out:",
          "169:  hlist_bl_unlock(head);",
          "170:  if (old_entry)",
          "173:  return entry;",
          "174: }",
          "186: {",
          "187:  return __entry_find(cache, NULL, key);",
          "188: }",
          "",
          "[Removed Lines]",
          "171:   mb2_cache_entry_put(cache, old_entry);",
          "184: struct mb2_cache_entry *mb2_cache_entry_find_first(struct mb2_cache *cache,",
          "185:          u32 key)",
          "189: EXPORT_SYMBOL(mb2_cache_entry_find_first);",
          "",
          "[Added Lines]",
          "171:   mb_cache_entry_put(cache, old_entry);",
          "184: struct mb_cache_entry *mb_cache_entry_find_first(struct mb_cache *cache,",
          "185:        u32 key)",
          "189: EXPORT_SYMBOL(mb_cache_entry_find_first);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "203: {",
          "204:  return __entry_find(cache, entry, entry->e_key);",
          "205: }",
          "217: {",
          "218:  struct hlist_bl_node *node;",
          "219:  struct hlist_bl_head *head;",
          "222:  head = &cache->c_hash[hash_32(key, cache->c_bucket_bits)];",
          "223:  hlist_bl_lock(head);",
          "",
          "[Removed Lines]",
          "201: struct mb2_cache_entry *mb2_cache_entry_find_next(struct mb2_cache *cache,",
          "202:         struct mb2_cache_entry *entry)",
          "206: EXPORT_SYMBOL(mb2_cache_entry_find_next);",
          "215: void mb2_cache_entry_delete_block(struct mb2_cache *cache, u32 key,",
          "216:       sector_t block)",
          "220:  struct mb2_cache_entry *entry;",
          "",
          "[Added Lines]",
          "201: struct mb_cache_entry *mb_cache_entry_find_next(struct mb_cache *cache,",
          "202:       struct mb_cache_entry *entry)",
          "206: EXPORT_SYMBOL(mb_cache_entry_find_next);",
          "215: void mb_cache_entry_delete_block(struct mb_cache *cache, u32 key,",
          "216:      sector_t block)",
          "220:  struct mb_cache_entry *entry;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "233:     atomic_dec(&entry->e_refcnt);",
          "234:    }",
          "235:    spin_unlock(&cache->c_list_lock);",
          "237:    return;",
          "238:   }",
          "239:  }",
          "240:  hlist_bl_unlock(head);",
          "241: }",
          "252: {",
          "254: }",
          "259: {",
          "263:  return cache->c_entry_count;",
          "264: }",
          "269: {",
          "271:  struct hlist_bl_head *head;",
          "272:  unsigned int shrunk = 0;",
          "274:  spin_lock(&cache->c_list_lock);",
          "275:  while (nr_to_scan-- && !list_empty(&cache->c_list)) {",
          "276:   entry = list_first_entry(&cache->c_list,",
          "280:    list_move_tail(&cache->c_list, &entry->e_list);",
          "281:    continue;",
          "282:   }",
          "",
          "[Removed Lines]",
          "236:    mb2_cache_entry_put(cache, entry);",
          "242: EXPORT_SYMBOL(mb2_cache_entry_delete_block);",
          "250: void mb2_cache_entry_touch(struct mb2_cache *cache,",
          "251:       struct mb2_cache_entry *entry)",
          "253:  mb2_cache_entry_set_referenced(entry);",
          "255: EXPORT_SYMBOL(mb2_cache_entry_touch);",
          "257: static unsigned long mb2_cache_count(struct shrinker *shrink,",
          "258:          struct shrink_control *sc)",
          "260:  struct mb2_cache *cache = container_of(shrink, struct mb2_cache,",
          "261:             c_shrink);",
          "267: static unsigned long mb2_cache_shrink(struct mb2_cache *cache,",
          "268:           unsigned int nr_to_scan)",
          "270:  struct mb2_cache_entry *entry;",
          "277:       struct mb2_cache_entry, e_list);",
          "278:   if (mb2_cache_entry_referenced(entry)) {",
          "279:    mb2_cache_entry_clear_referenced(entry);",
          "",
          "[Added Lines]",
          "236:    mb_cache_entry_put(cache, entry);",
          "242: EXPORT_SYMBOL(mb_cache_entry_delete_block);",
          "250: void mb_cache_entry_touch(struct mb_cache *cache,",
          "251:      struct mb_cache_entry *entry)",
          "253:  mb_cache_entry_set_referenced(entry);",
          "255: EXPORT_SYMBOL(mb_cache_entry_touch);",
          "257: static unsigned long mb_cache_count(struct shrinker *shrink,",
          "258:         struct shrink_control *sc)",
          "260:  struct mb_cache *cache = container_of(shrink, struct mb_cache,",
          "261:            c_shrink);",
          "267: static unsigned long mb_cache_shrink(struct mb_cache *cache,",
          "268:          unsigned int nr_to_scan)",
          "270:  struct mb_cache_entry *entry;",
          "277:       struct mb_cache_entry, e_list);",
          "278:   if (mb_cache_entry_referenced(entry)) {",
          "279:    mb_cache_entry_clear_referenced(entry);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "289:   spin_unlock(&cache->c_list_lock);",
          "291:   hlist_bl_lock(head);",
          "292:   if (!hlist_bl_unhashed(&entry->e_hash_list)) {",
          "293:    hlist_bl_del_init(&entry->e_hash_list);",
          "294:    atomic_dec(&entry->e_refcnt);",
          "295:   }",
          "296:   hlist_bl_unlock(head);",
          "298:    shrunk++;",
          "299:   cond_resched();",
          "300:   spin_lock(&cache->c_list_lock);",
          "",
          "[Removed Lines]",
          "290:   head = mb2_cache_entry_head(entry);",
          "297:   if (mb2_cache_entry_put(cache, entry))",
          "",
          "[Added Lines]",
          "290:   head = mb_cache_entry_head(entry);",
          "297:   if (mb_cache_entry_put(cache, entry))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "304:  return shrunk;",
          "305: }",
          "309: {",
          "310:  int nr_to_scan = sc->nr_to_scan;",
          "312:            c_shrink);",
          "314: }",
          "317: #define SHRINK_DIVISOR 16",
          "320: {",
          "324: }",
          "333: {",
          "335:  int bucket_count = 1 << bucket_bits;",
          "336:  int i;",
          "338:  if (!try_module_get(THIS_MODULE))",
          "339:   return NULL;",
          "342:  if (!cache)",
          "343:   goto err_out;",
          "344:  cache->c_bucket_bits = bucket_bits;",
          "",
          "[Removed Lines]",
          "307: static unsigned long mb2_cache_scan(struct shrinker *shrink,",
          "308:         struct shrink_control *sc)",
          "311:  struct mb2_cache *cache = container_of(shrink, struct mb2_cache,",
          "313:  return mb2_cache_shrink(cache, nr_to_scan);",
          "319: static void mb2_cache_shrink_worker(struct work_struct *work)",
          "321:  struct mb2_cache *cache = container_of(work, struct mb2_cache,",
          "322:             c_shrink_work);",
          "323:  mb2_cache_shrink(cache, cache->c_max_entries / SHRINK_DIVISOR);",
          "332: struct mb2_cache *mb2_cache_create(int bucket_bits)",
          "334:  struct mb2_cache *cache;",
          "341:  cache = kzalloc(sizeof(struct mb2_cache), GFP_KERNEL);",
          "",
          "[Added Lines]",
          "307: static unsigned long mb_cache_scan(struct shrinker *shrink,",
          "308:        struct shrink_control *sc)",
          "311:  struct mb_cache *cache = container_of(shrink, struct mb_cache,",
          "313:  return mb_cache_shrink(cache, nr_to_scan);",
          "319: static void mb_cache_shrink_worker(struct work_struct *work)",
          "321:  struct mb_cache *cache = container_of(work, struct mb_cache,",
          "322:            c_shrink_work);",
          "323:  mb_cache_shrink(cache, cache->c_max_entries / SHRINK_DIVISOR);",
          "332: struct mb_cache *mb_cache_create(int bucket_bits)",
          "334:  struct mb_cache *cache;",
          "341:  cache = kzalloc(sizeof(struct mb_cache), GFP_KERNEL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "354:  for (i = 0; i < bucket_count; i++)",
          "355:   INIT_HLIST_BL_HEAD(&cache->c_hash[i]);",
          "359:  cache->c_shrink.seeks = DEFAULT_SEEKS;",
          "360:  register_shrinker(&cache->c_shrink);",
          "364:  return cache;",
          "",
          "[Removed Lines]",
          "357:  cache->c_shrink.count_objects = mb2_cache_count;",
          "358:  cache->c_shrink.scan_objects = mb2_cache_scan;",
          "362:  INIT_WORK(&cache->c_shrink_work, mb2_cache_shrink_worker);",
          "",
          "[Added Lines]",
          "357:  cache->c_shrink.count_objects = mb_cache_count;",
          "358:  cache->c_shrink.scan_objects = mb_cache_scan;",
          "362:  INIT_WORK(&cache->c_shrink_work, mb_cache_shrink_worker);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "367:  module_put(THIS_MODULE);",
          "368:  return NULL;",
          "369: }",
          "380: {",
          "383:  unregister_shrinker(&cache->c_shrink);",
          "",
          "[Removed Lines]",
          "370: EXPORT_SYMBOL(mb2_cache_create);",
          "379: void mb2_cache_destroy(struct mb2_cache *cache)",
          "381:  struct mb2_cache_entry *entry, *next;",
          "",
          "[Added Lines]",
          "370: EXPORT_SYMBOL(mb_cache_create);",
          "379: void mb_cache_destroy(struct mb_cache *cache)",
          "381:  struct mb_cache_entry *entry, *next;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "394:    WARN_ON(1);",
          "395:   list_del(&entry->e_list);",
          "396:   WARN_ON(atomic_read(&entry->e_refcnt) != 1);",
          "398:  }",
          "399:  kfree(cache->c_hash);",
          "400:  kfree(cache);",
          "401:  module_put(THIS_MODULE);",
          "402: }",
          "406: {",
          "409:     SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD, NULL);",
          "411:  return 0;",
          "412: }",
          "415: {",
          "417: }",
          "422: MODULE_AUTHOR(\"Jan Kara <jack@suse.cz>\");",
          "423: MODULE_DESCRIPTION(\"Meta block cache (for extended attributes)\");",
          "",
          "[Removed Lines]",
          "397:   mb2_cache_entry_put(cache, entry);",
          "403: EXPORT_SYMBOL(mb2_cache_destroy);",
          "405: static int __init mb2cache_init(void)",
          "407:  mb2_entry_cache = kmem_cache_create(\"mbcache\",",
          "408:     sizeof(struct mb2_cache_entry), 0,",
          "410:  BUG_ON(!mb2_entry_cache);",
          "414: static void __exit mb2cache_exit(void)",
          "416:  kmem_cache_destroy(mb2_entry_cache);",
          "419: module_init(mb2cache_init)",
          "420: module_exit(mb2cache_exit)",
          "",
          "[Added Lines]",
          "397:   mb_cache_entry_put(cache, entry);",
          "403: EXPORT_SYMBOL(mb_cache_destroy);",
          "405: static int __init mbcache_init(void)",
          "407:  mb_entry_cache = kmem_cache_create(\"mbcache\",",
          "408:     sizeof(struct mb_cache_entry), 0,",
          "410:  BUG_ON(!mb_entry_cache);",
          "414: static void __exit mbcache_exit(void)",
          "416:  kmem_cache_destroy(mb_entry_cache);",
          "419: module_init(mbcache_init)",
          "420: module_exit(mbcache_exit)",
          "",
          "---------------"
        ],
        "include/linux/mbcache.h||include/linux/mbcache.h": [
          "File: include/linux/mbcache.h -> include/linux/mbcache.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef _LINUX_MBCACHE_H",
          "2: #define _LINUX_MBCACHE_H",
          "4: #include <linux/hash.h>",
          "5: #include <linux/list_bl.h>",
          "6: #include <linux/list.h>",
          "7: #include <linux/atomic.h>",
          "8: #include <linux/fs.h>",
          "10: struct mb_cache;",
          "12: struct mb_cache_entry {",
          "14:  struct list_head e_list;",
          "16:  struct hlist_bl_node e_hash_list;",
          "17:  atomic_t  e_refcnt;",
          "19:  u32   e_key;",
          "21:  sector_t  e_block;",
          "26:  unsigned long  _e_hash_list_head;",
          "27: };",
          "29: struct mb_cache *mb_cache_create(int bucket_bits);",
          "30: void mb_cache_destroy(struct mb_cache *cache);",
          "32: int mb_cache_entry_create(struct mb_cache *cache, gfp_t mask, u32 key,",
          "33:      sector_t block);",
          "34: void __mb_cache_entry_free(struct mb_cache_entry *entry);",
          "35: static inline int mb_cache_entry_put(struct mb_cache *cache,",
          "36:          struct mb_cache_entry *entry)",
          "37: {",
          "38:  if (!atomic_dec_and_test(&entry->e_refcnt))",
          "39:   return 0;",
          "40:  __mb_cache_entry_free(entry);",
          "41:  return 1;",
          "42: }",
          "44: void mb_cache_entry_delete_block(struct mb_cache *cache, u32 key,",
          "45:       sector_t block);",
          "46: struct mb_cache_entry *mb_cache_entry_find_first(struct mb_cache *cache,",
          "47:        u32 key);",
          "48: struct mb_cache_entry *mb_cache_entry_find_next(struct mb_cache *cache,",
          "49:       struct mb_cache_entry *entry);",
          "50: void mb_cache_entry_touch(struct mb_cache *cache,",
          "51:      struct mb_cache_entry *entry);",
          "",
          "---------------"
        ],
        "include/linux/mbcache2.h||include/linux/mbcache2.h": [
          "File: include/linux/mbcache2.h -> include/linux/mbcache2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}