{
  "cve_id": "CVE-2020-19860",
  "cve_desc": "When ldns version 1.7.1 verifies a zone file, the ldns_rr_new_frm_str_internal function has a heap out of bounds read vulnerability. An attacker can leak information on the heap by constructing a zone file payload.",
  "repo": "NLnetLabs/ldns",
  "patch_hash": "15d96206996bea969fbc918eb0a4a346f514b9f3",
  "patch_info": {
    "commit_hash": "15d96206996bea969fbc918eb0a4a346f514b9f3",
    "repo": "NLnetLabs/ldns",
    "commit_url": "https://github.com/NLnetLabs/ldns/commit/15d96206996bea969fbc918eb0a4a346f514b9f3",
    "files": [
      "Changelog",
      "rr.c"
    ],
    "message": "* bugfix #70: heap Out-of-bound Read vulnerability in   rr_frm_str_internal reported by pokerfacett.",
    "before_after_code_files": [
      "rr.c||rr.c"
    ]
  },
  "patch_diff": {
    "rr.c||rr.c": [
      "File: rr.c -> rr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "365:     ldns_buffer_remaining(rd_buf) > 0){",
      "369:     ldns_buffer_skip(rd_buf, 1);",
      "370:    }",
      "373:     delimiters = \"\\\"\\0\";",
      "374:     ldns_buffer_skip(rd_buf, 1);",
      "375:     quoted = true;",
      "377:      == LDNS_RDF_TYPE_LONG_STR) {",
      "379:     status = LDNS_STATUS_SYNTAX_RDATA_ERR;",
      "",
      "[Removed Lines]",
      "368:    while (*(ldns_buffer_current(rd_buf)) == ' ') {",
      "372:    if (*(ldns_buffer_current(rd_buf)) == '\\\"') {",
      "376:    } else if (ldns_rr_descriptor_field_type(desc, r_cnt)",
      "",
      "[Added Lines]",
      "368:    while (sldns_buffer_remaining(strbuf) > 0 &&",
      "373:    if (sldns_buffer_remaining(strbuf) > 0 &&",
      "378:    }",
      "379:    if (!quoted && ldns_rr_descriptor_field_type(desc, r_cnt)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "756c6049d304d90edd0924bdcb592204122259eb",
      "candidate_info": {
        "commit_hash": "756c6049d304d90edd0924bdcb592204122259eb",
        "repo": "NLnetLabs/ldns",
        "commit_url": "https://github.com/NLnetLabs/ldns/commit/756c6049d304d90edd0924bdcb592204122259eb",
        "files": [
          "test/03-run.tpkg/03-run.test~",
          "test/04-run-normal.tpkg/04-run-normal.test~",
          "test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.pre~",
          "test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.pre~",
          "test/60-compile-builddir.tpkg/60-compile-builddir.test~",
          "test/999-compile-nossl.tpkg/999-compile-nossl.test~",
          "test/codingstyle.tpkg/codingstyle.test~"
        ],
        "message": "Remove backup files",
        "before_after_code_files": [
          "test/03-run.tpkg/03-run.test~||test/03-run.tpkg/03-run.test~",
          "test/04-run-normal.tpkg/04-run-normal.test~||test/04-run-normal.tpkg/04-run-normal.test~",
          "test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.pre~||test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.pre~",
          "test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.pre~||test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.pre~",
          "test/60-compile-builddir.tpkg/60-compile-builddir.test~||test/60-compile-builddir.tpkg/60-compile-builddir.test~",
          "test/999-compile-nossl.tpkg/999-compile-nossl.test~||test/999-compile-nossl.tpkg/999-compile-nossl.test~",
          "test/codingstyle.tpkg/codingstyle.test~||test/codingstyle.tpkg/codingstyle.test~"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NLnetLabs/ldns/pull/144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/03-run.tpkg/03-run.test~||test/03-run.tpkg/03-run.test~": [
          "File: test/03-run.tpkg/03-run.test~ -> test/03-run.tpkg/03-run.test~",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/04-run-normal.tpkg/04-run-normal.test~||test/04-run-normal.tpkg/04-run-normal.test~": [
          "File: test/04-run-normal.tpkg/04-run-normal.test~ -> test/04-run-normal.tpkg/04-run-normal.test~",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.pre~||test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.pre~": [
          "File: test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.pre~ -> test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.pre~",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.pre~||test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.pre~": [
          "File: test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.pre~ -> test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.pre~",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/60-compile-builddir.tpkg/60-compile-builddir.test~||test/60-compile-builddir.tpkg/60-compile-builddir.test~": [
          "File: test/60-compile-builddir.tpkg/60-compile-builddir.test~ -> test/60-compile-builddir.tpkg/60-compile-builddir.test~",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/999-compile-nossl.tpkg/999-compile-nossl.test~||test/999-compile-nossl.tpkg/999-compile-nossl.test~": [
          "File: test/999-compile-nossl.tpkg/999-compile-nossl.test~ -> test/999-compile-nossl.tpkg/999-compile-nossl.test~",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/codingstyle.tpkg/codingstyle.test~||test/codingstyle.tpkg/codingstyle.test~": [
          "File: test/codingstyle.tpkg/codingstyle.test~ -> test/codingstyle.tpkg/codingstyle.test~",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43c798b56967b909513e5605886fe858a1da17a6",
      "candidate_info": {
        "commit_hash": "43c798b56967b909513e5605886fe858a1da17a6",
        "repo": "NLnetLabs/ldns",
        "commit_url": "https://github.com/NLnetLabs/ldns/commit/43c798b56967b909513e5605886fe858a1da17a6",
        "files": [
          "Changelog",
          "configure.ac",
          "examples/ldns-testns.c"
        ],
        "message": "* Fix #92: ldns-testns.c:429:15: error: 'fork' is unavailable: not   available on tvOS.",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "examples/ldns-testns.c||examples/ldns-testns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NLnetLabs/ldns/pull/144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "860: AC_REPLACE_FUNCS(strlcpy)",
          "861: AC_REPLACE_FUNCS(memmove)",
          "862: AC_FUNC_FORK",
          "863: AC_CHECK_FUNCS([endprotoent endservent sleep random fcntl strtoul bzero memset b32_ntop b32_pton])",
          "864: if test \"x$HAVE_B32_NTOP\" = \"xyes\"; then",
          "865:  AC_SUBST(ldns_build_config_have_b32_ntop, 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "863: AC_MSG_CHECKING([compile of fork])",
          "864: AC_COMPILE_IFELSE([AC_LANG_PROGRAM([",
          "865: #include <unistd.h>",
          "866: ], [",
          "867:  (void)fork();",
          "868: ])], [",
          "869:  AC_MSG_RESULT(yes)",
          "870:  AC_DEFINE([HAVE_FORK_AVAILABLE], 1, [if fork is available for compile])",
          "871: ], [ AC_MSG_RESULT(no)",
          "872: ])",
          "",
          "---------------"
        ],
        "examples/ldns-testns.c||examples/ldns-testns.c": [
          "File: examples/ldns-testns.c -> examples/ldns-testns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:  int i;",
          "411:  for(i=0; i<number; i++)",
          "412:  {",
          "414: #ifndef USE_WINSOCK",
          "415:   log_msg(\"fork() not available.\\n\");",
          "416:   exit(1);",
          "",
          "[Removed Lines]",
          "413: #ifndef HAVE_FORK",
          "",
          "[Added Lines]",
          "413: #if !defined(HAVE_FORK) || !defined(HAVE_FORK_AVAILABLE)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "171e432e2dc1c0d370357b9ca49877a70fcd31bc",
      "candidate_info": {
        "commit_hash": "171e432e2dc1c0d370357b9ca49877a70fcd31bc",
        "repo": "NLnetLabs/ldns",
        "commit_url": "https://github.com/NLnetLabs/ldns/commit/171e432e2dc1c0d370357b9ca49877a70fcd31bc",
        "files": [
          "test/13-unit-tests-base.tpkg/13-unit-tests-base.c"
        ],
        "message": "One missed memory leak (only visible in clang)",
        "before_after_code_files": [
          "test/13-unit-tests-base.tpkg/13-unit-tests-base.c||test/13-unit-tests-base.tpkg/13-unit-tests-base.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NLnetLabs/ldns/pull/144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/13-unit-tests-base.tpkg/13-unit-tests-base.c||test/13-unit-tests-base.tpkg/13-unit-tests-base.c": [
          "File: test/13-unit-tests-base.tpkg/13-unit-tests-base.c -> test/13-unit-tests-base.tpkg/13-unit-tests-base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "821:  if (test_sha256(\"Test vector from febooti.com\", \"077b18fe29036ada4890bdec192186e10678597a67880290521df70df4bac9ab\") != 0) {",
          "822:   result = EXIT_FAILURE;",
          "823:  }",
          "825:  printf(\"unit test is %s\\n\", result==EXIT_SUCCESS?\"ok\":\"fail\");",
          "826:  exit(result);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "824:  free(data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69e900d1c3d0ac05a44fc75b358d7387d890f948",
      "candidate_info": {
        "commit_hash": "69e900d1c3d0ac05a44fc75b358d7387d890f948",
        "repo": "NLnetLabs/ldns",
        "commit_url": "https://github.com/NLnetLabs/ldns/commit/69e900d1c3d0ac05a44fc75b358d7387d890f948",
        "files": [
          "Changelog",
          "Makefile.in"
        ],
        "message": "* Fix for #93: fix packaging/libldns.pc Makefile rule.",
        "before_after_code_files": [
          "Makefile.in||Makefile.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NLnetLabs/ldns/pull/144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:  exit 0",
          "396: packaging/libldns.pc: $(srcdir)/packaging/libldns.pc.in",
          "399: install-pc: packaging/libldns.pc",
          "400:  $(INSTALL) -m 644 packaging/libldns.pc $(DESTDIR)$(libdir)/pkgconfig/ldns.pc",
          "",
          "[Removed Lines]",
          "397:  ./config.status $@",
          "",
          "[Added Lines]",
          "397:  ./config.status --file=$@",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af27a2bc1a191038b76fb996640379c05c62a031",
      "candidate_info": {
        "commit_hash": "af27a2bc1a191038b76fb996640379c05c62a031",
        "repo": "NLnetLabs/ldns",
        "commit_url": "https://github.com/NLnetLabs/ldns/commit/af27a2bc1a191038b76fb996640379c05c62a031",
        "files": [
          "Changelog",
          "duration.c",
          "test/13-unit-tests-base.tpkg/13-unit-tests-base.c"
        ],
        "message": "Issue #73 replace ldns_duration2string...\n\nwith something more straight forward and comprehensible",
        "before_after_code_files": [
          "duration.c||duration.c",
          "test/13-unit-tests-base.tpkg/13-unit-tests-base.c||test/13-unit-tests-base.tpkg/13-unit-tests-base.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NLnetLabs/ldns/pull/144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "duration.c||duration.c": [
          "File: duration.c -> duration.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198: {",
          "205:  }",
          "210: }",
          "217: char*",
          "219: {",
          "308: }",
          "",
          "[Removed Lines]",
          "196: static size_t",
          "197: digits_in_number(time_t duration)",
          "199:  unsigned int i = (unsigned int) duration;",
          "200:  size_t n = 1;",
          "202:  while (i >= 100000000) {",
          "203:   n += 8;",
          "204:   i /= 100000000;",
          "206:  if (i >= 10000) { n += 4; i /= 10000; }",
          "207:  if (i >= 100  ) { n += 2; i /= 100; }",
          "208:  if (i >= 10   ) { n += 1; }",
          "209:  return n;",
          "218: ldns_duration2string(const ldns_duration_type* duration)",
          "220:     char* str = NULL;",
          "221:     size_t count = 2;",
          "222:     int T = 0;",
          "223:     char num[sizeof(unsigned int) + 2];",
          "225:     if (!duration) {",
          "226:         return NULL;",
          "227:     }",
          "229:     if (duration->years > 0) {",
          "230:         count = count + 1 + digits_in_number(duration->years);",
          "231:     }",
          "232:     if (duration->months > 0) {",
          "233:         count = count + 1 + digits_in_number(duration->months);",
          "234:     }",
          "235:     if (duration->weeks > 0) {",
          "236:         count = count + 1 + digits_in_number(duration->weeks);",
          "237:     }",
          "238:     if (duration->days > 0) {",
          "239:         count = count + 1 + digits_in_number(duration->days);",
          "240:     }",
          "241:     if (duration->hours > 0) {",
          "242:         count = count + 1 + digits_in_number(duration->hours);",
          "243:         T = 1;",
          "244:     }",
          "245:     if (duration->minutes > 0) {",
          "246:         count = count + 1 + digits_in_number(duration->minutes);",
          "247:         T = 1;",
          "248:     }",
          "249:     if (duration->seconds > 0) {",
          "250:         count = count + 1 + digits_in_number(duration->seconds);",
          "251:         T = 1;",
          "252:     }",
          "253:     if (T) {",
          "254:         count++;",
          "255:     }",
          "257:     if (!(str = (char*) calloc(count, sizeof(char))))",
          "258:      return NULL;",
          "259:     str[0] = 'P';",
          "260:     str[1] = '\\0';",
          "262:     if (duration->years > 0) {",
          "263:         count = digits_in_number(duration->years);",
          "264:  assert(count <= sizeof(num) - 2);",
          "265:         snprintf(num, count+2, \"%uY\", (unsigned int) duration->years);",
          "266:         str = strncat(str, num, count+2);",
          "267:     }",
          "268:     if (duration->months > 0) {",
          "269:         count = digits_in_number(duration->months);",
          "270:  assert(count <= sizeof(num) - 2);",
          "271:         snprintf(num, count+2, \"%uM\", (unsigned int) duration->months);",
          "272:         str = strncat(str, num, count+2);",
          "273:     }",
          "274:     if (duration->weeks > 0) {",
          "275:         count = digits_in_number(duration->weeks);",
          "276:  assert(count <= sizeof(num) - 2);",
          "277:         snprintf(num, count+2, \"%uW\", (unsigned int) duration->weeks);",
          "278:         str = strncat(str, num, count+2);",
          "279:     }",
          "280:     if (duration->days > 0) {",
          "281:         count = digits_in_number(duration->days);",
          "282:  assert(count <= sizeof(num) - 2);",
          "283:         snprintf(num, count+2, \"%uD\", (unsigned int) duration->days);",
          "284:         str = strncat(str, num, count+2);",
          "285:     }",
          "286:     if (T) {",
          "287:         str = strcat(str, \"T\");",
          "288:     }",
          "289:     if (duration->hours > 0) {",
          "290:         count = digits_in_number(duration->hours);",
          "291:  assert(count <= sizeof(num) - 2);",
          "292:         snprintf(num, count+2, \"%uH\", (unsigned int) duration->hours);",
          "293:         str = strncat(str, num, count+2);",
          "294:     }",
          "295:     if (duration->minutes > 0) {",
          "296:         count = digits_in_number(duration->minutes);",
          "297:  assert(count <= sizeof(num) - 2);",
          "298:         snprintf(num, count+2, \"%uM\", (unsigned int) duration->minutes);",
          "299:         str = strncat(str, num, count+2);",
          "300:     }",
          "301:     if (duration->seconds > 0) {",
          "302:         count = digits_in_number(duration->seconds);",
          "303:  assert(count <= sizeof(num) - 2);",
          "304:         snprintf(num, count+2, \"%uS\", (unsigned int) duration->seconds);",
          "305:         str = strncat(str, num, count+2);",
          "306:     }",
          "307:     return str;",
          "",
          "[Added Lines]",
          "196: static inline int dur_scan_print(char **buf, char *eob, char c, time_t t)",
          "198:  if (t > 0) {",
          "199:   int r = snprintf(*buf, eob - *buf, \"%u%c\", (unsigned)t, c);",
          "200:   if (r < 0 || (*buf += r) >= eob)",
          "201:    return -1;",
          "203:  return 0;",
          "211: ldns_duration2string(const ldns_duration_type* d)",
          "216:  char buf[300] = \"P0D\", *eob = buf + sizeof(buf), *p = buf + 1;",
          "218:  if (!d)",
          "219:   return NULL;",
          "221:  if (dur_scan_print(&p, eob, 'Y', d->years)",
          "222:  ||  dur_scan_print(&p, eob, 'M', d->months)",
          "223:  ||  dur_scan_print(&p, eob, 'W', d->weeks)",
          "224:  ||  dur_scan_print(&p, eob, 'D', d->days))",
          "225:   return NULL;",
          "227:  if (d->hours || d->minutes || d->seconds) {",
          "228:   if (p > (eob - 2))",
          "232:   if (dur_scan_print(&p, eob, 'H', d->hours)",
          "233:   ||  dur_scan_print(&p, eob, 'M', d->minutes)",
          "234:   ||  dur_scan_print(&p, eob, 'S', d->seconds))",
          "235:    return NULL;",
          "236:  }",
          "237:  return strdup(buf);",
          "",
          "---------------"
        ],
        "test/13-unit-tests-base.tpkg/13-unit-tests-base.c||test/13-unit-tests-base.tpkg/13-unit-tests-base.c": [
          "File: test/13-unit-tests-base.tpkg/13-unit-tests-base.c -> test/13-unit-tests-base.tpkg/13-unit-tests-base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include <ldns/ldns.h>",
          "8: void print_data_ar(const uint8_t *data, const size_t len) {",
          "9:  size_t i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: int test_duration(void)",
          "9: {",
          "10:  ldns_duration_type *d1 = NULL, *d2 = NULL;",
          "11:  char *s1 = NULL, *s2 = NULL, *s3 = NULL;",
          "12:  int r = -1;",
          "14:  if (!(d1 = ldns_duration_create()))",
          "15:   fprintf(stderr, \"ldns_duration_create() returned NULL\\n\");",
          "17:  else if (!(s1 = ldns_duration2string(d1)))",
          "18:   fprintf(stderr, \"ldns_duration2string() returned NULL\\n\");",
          "20:  else if (!(d2 = ldns_duration_create_from_string(\"PT0S\")))",
          "21:   fprintf( stderr",
          "22:          , \"ldns_duration_create_from_string(\\\"P0D\\\") returned NULL\\n\");",
          "24:  else if (ldns_duration_compare(d1, d2))",
          "25:   fprintf(stderr, \"0 durations not equal\\n\");",
          "27:  else if ((d1->years = 1), (d1->months = 3), 0)",
          "30:  else if (!(s2 = ldns_duration2string(d1)))",
          "31:   fprintf(stderr, \"ldns_duration2string() returned NULL\\n\");",
          "33:  else if (strcmp(s2, \"P1Y3M\"))",
          "34:   fprintf(stderr, \"\\\"%s\\\" should have been \\\"P1Y3M\\\"\\n\", s2);",
          "36:  else if ((d1->minutes = 3), 0)",
          "39:  else if (!(s3 = ldns_duration2string(d1)))",
          "40:   fprintf(stderr, \"ldns_duration2string() returned NULL\\n\");",
          "42:  else if (strcmp(s3, \"P1Y3MT3M\"))",
          "43:   fprintf(stderr, \"\\\"%s\\\" should have been \\\"P1Y3MT3M\\\"\\n\", s3);",
          "45:  else if (ldns_duration_compare(d1, d2) <= 0)",
          "46:   fprintf(stderr, \"ldns_duration_compare() error\\n\");",
          "47:  else",
          "48:   r = 0;",
          "50:  if (d1) ldns_duration_cleanup(d1);",
          "51:  if (d2) ldns_duration_cleanup(d2);",
          "52:  if (s1) free(s1);",
          "53:  if (s2) free(s2);",
          "54:  if (s3) free(s3);",
          "55:  return r;",
          "56: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "823:  }",
          "824:  free(data);",
          "826:  printf(\"unit test is %s\\n\", result==EXIT_SUCCESS?\"ok\":\"fail\");",
          "827:  exit(result);",
          "828: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "877:  if (test_duration())",
          "878:   result = EXIT_FAILURE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}