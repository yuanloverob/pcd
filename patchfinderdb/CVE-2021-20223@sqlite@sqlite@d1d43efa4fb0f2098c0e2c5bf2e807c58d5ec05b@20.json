{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "47bcc34271435e376b57a8482e06803f4a7a6c4f",
      "candidate_info": {
        "commit_hash": "47bcc34271435e376b57a8482e06803f4a7a6c4f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/47bcc34271435e376b57a8482e06803f4a7a6c4f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Fix a potential NULL pointer dereference on a RENAME TABLE that references a VIEW with a logic error in a window function in the ORDER BY clause.\n\nFossilOrigin-Name: 0adb273f7e7671efb0e0a1619887e369500dfd2db7ef1b1e125c2414ea96e96f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8f4a3750b7d272daf96831655ffee80d457875ee121fc4537008046b9a00d0e7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1246: void sqlite3WindowLink(Select *pSel, Window *pWin){",
          "1249:   ){",
          "1250:     pWin->pNextWin = pSel->pWin;",
          "1251:     if( pSel->pWin ){",
          "",
          "[Removed Lines]",
          "1247:   if( 0==pSel->pWin",
          "1248:    || 0==sqlite3WindowCompare(0, pSel->pWin, pWin, 0)",
          "",
          "[Added Lines]",
          "1247:   if( pSel!=0",
          "1248:    && (0==pSel->pWin || 0==sqlite3WindowCompare(0, pSel->pWin, pWin, 0))",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1234:   );",
          "1235: } {1 {frame ending offset must be a non-negative integer}}",
          "1237: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1237: # 2019-11-16 chromium issue 1025467",
          "1238: db close",
          "1239: sqlite3 db :memory:",
          "1240: do_catchsql_test 32.10 {",
          "1241:   CREATE VIEW a AS SELECT NULL INTERSECT SELECT NULL ORDER BY s() OVER R;",
          "1242:   CREATE TABLE a0 AS SELECT 0;",
          "1243:   ALTER TABLE a0 RENAME TO S;",
          "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7be5e3dd4ce9df4d7f1be86b494a25a9be78104a",
      "candidate_info": {
        "commit_hash": "7be5e3dd4ce9df4d7f1be86b494a25a9be78104a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7be5e3dd4ce9df4d7f1be86b494a25a9be78104a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: edbf911fdeda14bd63cd752f6237896400eb5a65ef486abe7b91433621d21b5c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 83dc55679a91bf5d1d13706088ce58eed02b9aad1ad0ae237966e78e0d769663",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4174:   for(i=0; i<pConst->nConst; i++){",
          "4179:     ){",
          "4181:     }",
          "",
          "[Removed Lines]",
          "4175:     const Expr *pExpr = pConst->apExpr[i*2];",
          "4176:     assert( pExpr->op==TK_COLUMN );",
          "4177:     if( pExpr->iTable==pColumn->iTable",
          "4178:      && pExpr->iColumn==pColumn->iColumn",
          "",
          "[Added Lines]",
          "4175:     const Expr *pE2 = pConst->apExpr[i*2];",
          "4176:     assert( pE2->op==TK_COLUMN );",
          "4177:     if( pE2->iTable==pColumn->iTable",
          "4178:      && pE2->iColumn==pColumn->iColumn",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27ee29f68c232cc9b5df0803d01a323e8abf1cb9",
      "candidate_info": {
        "commit_hash": "27ee29f68c232cc9b5df0803d01a323e8abf1cb9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/27ee29f68c232cc9b5df0803d01a323e8abf1cb9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Fix a compiler warning about an unused procedure in the parser.\n\nFossilOrigin-Name: b27bb4fe389e12472a6144441df2dca6a7393024f2621fd22dd1a2b4033c46ec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca7630a5772ab919482a3629e11627143a1e1ec290a570ce4188189e671f9015",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:   DisableLookaside;",
          "112: }",
          "",
          "[Removed Lines]",
          "114: #ifndef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "",
          "[Added Lines]",
          "114: #if !defined(SQLITE_ENABLE_UPDATE_DELETE_LIMIT) \\",
          "115:  && defined(SQLITE_UDL_CAPABLE_PARSER)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cdbb28154eeb8d790562e1e32fb2df71abef0e37",
      "candidate_info": {
        "commit_hash": "cdbb28154eeb8d790562e1e32fb2df71abef0e37",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cdbb28154eeb8d790562e1e32fb2df71abef0e37",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "For the LIKE pattern in the .dump command of the CLI, accept backslash as an escape character.\n\nFossilOrigin-Name: 029ceea612f5c7a1420939d8a772eefcc6f9550d24d57b52ae1729ea9d85fae9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45fba3d7055f90f67005ca740687f060a2311db40c8f6a161bfea0424e6ebf6d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7303:           goto meta_command_exit;",
          "7304:         }",
          "7305:       }else if( zLike ){",
          "7307:       }else{",
          "7309:       }",
          "7310:     }",
          "",
          "[Removed Lines]",
          "7306:         zLike = sqlite3_mprintf(\"%z OR name LIKE %Q\", zLike, azArg[i]);",
          "7308:         zLike = sqlite3_mprintf(\"name LIKE %Q\", azArg[i]);",
          "",
          "[Added Lines]",
          "7306:         zLike = sqlite3_mprintf(\"%z OR name LIKE %Q ESCAPE '\\\\'\",",
          "7307:                 zLike, azArg[i]);",
          "7309:         zLike = sqlite3_mprintf(\"name LIKE %Q ESCAPE '\\\\'\", azArg[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99f363b35ed536b3f9ed6f14ec1d4915e732c122",
      "candidate_info": {
        "commit_hash": "99f363b35ed536b3f9ed6f14ec1d4915e732c122",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/99f363b35ed536b3f9ed6f14ec1d4915e732c122",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/speedtest1.c"
        ],
        "message": "Enhance the --verify option to speedtest1.c so that it computes and displays a hash of the result from all SQL queries, for verification purposes.\n\nFossilOrigin-Name: 60d1e46c8c8a3c853034fd79f204bcb5d50d1c366eb246849c333a2d0abc2648",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/speedtest1.c||test/speedtest1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: db2f0836b64cd2e119684f1cf75fa3b19a84ca6aca1a239f7e2b9298016e2c95",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/speedtest1.c||test/speedtest1.c": [
          "File: test/speedtest1.c -> test/speedtest1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: # define sqlite3_int64 sqlite_int64",
          "62: #endif",
          "65: static struct Global {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: typedef sqlite3_uint64 u64;",
          "65: #ifndef SPEEDTEST_OMIT_HASH",
          "73: typedef struct HashContext HashContext;",
          "74: struct HashContext {",
          "79: };",
          "86: static void HashInit(HashContext *p){",
          "87:   unsigned int k;",
          "88:   p->i = 0;",
          "89:   p->j = 0;",
          "90:   for(k=0; k<256; k++) p->s[k] = k;",
          "91: }",
          "97: static void HashUpdate(",
          "98:   HashContext *p,",
          "99:   const unsigned char *aData,",
          "100:   unsigned int nData",
          "101: ){",
          "102:   unsigned char t;",
          "103:   unsigned char i = p->i;",
          "104:   unsigned char j = p->j;",
          "105:   unsigned int k;",
          "106:   for(k=0; k<nData; k++){",
          "107:     j += p->s[i] + aData[k];",
          "108:     t = p->s[j];",
          "109:     p->s[j] = p->s[i];",
          "110:     p->s[i] = t;",
          "111:     i++;",
          "112:   }",
          "113:   p->i = i;",
          "114:   p->j = j;",
          "115: }",
          "122: static unsigned char *HashFinal(HashContext *p){",
          "123:   unsigned int k;",
          "124:   unsigned char t, i, j;",
          "125:   i = p->i;",
          "126:   j = p->j;",
          "127:   for(k=0; k<32; k++){",
          "128:     i++;",
          "129:     t = p->s[i];",
          "130:     j += t;",
          "131:     p->s[i] = p->s[j];",
          "132:     p->s[j] = t;",
          "133:     t += p->s[i];",
          "134:     p->r[k] = p->s[t];",
          "135:   }",
          "136:   return p->r;",
          "137: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85: } g;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166: #ifndef SPEEDTEST_OMIT_HASH",
          "168: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:     printf(\"       TOTAL%.*s %4d.%03ds\\n\", NAMEWIDTH-5, zDots,",
          "325:            (int)(g.iTotal/1000), (int)(g.iTotal%1000));",
          "326:   }",
          "327: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:   if( g.bVerify ){",
          "414: #ifndef SPEEDTEST_OMIT_HASH",
          "415:     int i;",
          "416:     unsigned char *aHash = HashFinal(&g.hash);",
          "417: #endif",
          "418:     printf(\"SQL Output Verification:\\n\");",
          "419:     printf(\"  size: %llu\\n\", g.nResByte);",
          "420: #ifndef SPEEDTEST_OMIT_HASH",
          "421:     printf(\"  hash: \");",
          "422:     for(i=0; i<32; i++){",
          "423:       printf(\"%02x\", aHash[i]);",
          "424:     }",
          "425:     printf(\"\\n\");",
          "426: #endif",
          "427:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "434:       const char *z = (const char*)sqlite3_column_text(g.pStmt, i);",
          "435:       if( z==0 ) z = \"nil\";",
          "436:       len = (int)strlen(z);",
          "437:       if( g.nResult+len<sizeof(g.zResult)-2 ){",
          "438:         if( g.nResult>0 ) g.zResult[g.nResult++] = ' ';",
          "439:         memcpy(g.zResult + g.nResult, z, len+1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: #ifndef SPEEDTEST_OMIT_HASH",
          "539:       if( g.bVerify ){",
          "540:         HashUpdate(&g.hash, (unsigned char*)z, len);",
          "541:         g.nResByte += len;",
          "542:       }",
          "543: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2140:         zEncoding = \"utf16be\";",
          "2141:       }else if( strcmp(z,\"verify\")==0 ){",
          "2142:         g.bVerify = 1;",
          "2143:       }else if( strcmp(z,\"without-rowid\")==0 ){",
          "2144:         g.zWR = \"WITHOUT ROWID\";",
          "2145:         g.zPK = \"PRIMARY KEY\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2250: #ifndef SPEEDTEST_OMIT_HASH",
          "2251:         HashInit(&g.hash);",
          "2252: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}