{
  "cve_id": "CVE-2014-8116",
  "cve_desc": "The ELF parser (readelf.c) in file before 5.21 allows remote attackers to cause a denial of service (CPU consumption or crash) via a large number of (1) program or (2) section headers or (3) invalid capabilities.",
  "repo": "file/file",
  "patch_hash": "b4c01141e5367f247b84dcaf6aefbb4e741842b8",
  "patch_info": {
    "commit_hash": "b4c01141e5367f247b84dcaf6aefbb4e741842b8",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/b4c01141e5367f247b84dcaf6aefbb4e741842b8",
    "files": [
      "src/elfclass.h",
      "src/readelf.c"
    ],
    "message": "- limit the number of program and section header number of sections to be   processed to avoid excessive processing time. - if a bad note is found, return 0 to stop processing immediately.",
    "before_after_code_files": [
      "src/elfclass.h||src/elfclass.h",
      "src/readelf.c||src/readelf.c"
    ]
  },
  "patch_diff": {
    "src/elfclass.h||src/elfclass.h": [
      "File: src/elfclass.h -> src/elfclass.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:  switch (type) {",
      "36: #ifdef ELFCORE",
      "37:  case ET_CORE:",
      "38:   flags |= FLAGS_IS_CORE;",
      "39:   if (dophn_core(ms, clazz, swap, fd,",
      "42:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
      "43:       fsize, &flags) == -1)",
      "44:    return -1;",
      "",
      "[Removed Lines]",
      "40:       (off_t)elf_getu(swap, elfhdr.e_phoff),",
      "41:       elf_getu16(swap, elfhdr.e_phnum),",
      "",
      "[Added Lines]",
      "38:   phnum = elf_getu16(swap, elfhdr.e_phnum);",
      "39:   if (phnum > MAX_PHNUM)",
      "40:    return toomany(ms, \"program\", phnum);",
      "43:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "46: #endif",
      "47:  case ET_EXEC:",
      "48:  case ET_DYN:",
      "49:   if (dophn_exec(ms, clazz, swap, fd,",
      "52:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
      "55:    return -1;",
      "57:  case ET_REL:",
      "58:   if (doshn(ms, clazz, swap, fd,",
      "61:       (size_t)elf_getu16(swap, elfhdr.e_shentsize),",
      "62:       fsize, &flags, elf_getu16(swap, elfhdr.e_machine),",
      "63:       (int)elf_getu16(swap, elfhdr.e_shstrndx)) == -1)",
      "",
      "[Removed Lines]",
      "50:       (off_t)elf_getu(swap, elfhdr.e_phoff),",
      "51:       elf_getu16(swap, elfhdr.e_phnum),",
      "53:       fsize, &flags, elf_getu16(swap, elfhdr.e_shnum))",
      "54:       == -1)",
      "59:       (off_t)elf_getu(swap, elfhdr.e_shoff),",
      "60:       elf_getu16(swap, elfhdr.e_shnum),",
      "",
      "[Added Lines]",
      "51:   phnum = elf_getu16(swap, elfhdr.e_phnum);",
      "52:   if (phnum > MAX_PHNUM)",
      "53:    return toomany(ms, \"program\", phnum);",
      "54:   shnum = elf_getu16(swap, elfhdr.e_shnum);",
      "55:   if (shnum > MAX_SHNUM)",
      "56:    return toomany(ms, \"section\", shnum);",
      "58:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
      "60:       fsize, &flags, shnum) == -1)",
      "64:   shnum = elf_getu16(swap, elfhdr.e_shnum);",
      "65:   if (shnum > MAX_SHNUM)",
      "66:    return toomany(ms, \"section\", shnum);",
      "68:       (off_t)elf_getu(swap, elfhdr.e_shoff), shnum,",
      "",
      "---------------"
    ],
    "src/readelf.c||src/readelf.c": [
      "File: src/readelf.c -> src/readelf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "31: #endif",
      "33: #ifdef BUILTIN_ELF",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.103 2014/05/02 02:25:10 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.104 2014/10/17 15:49:00 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60: private uint32_t getu32(int, uint32_t);",
      "61: private uint64_t getu64(int, uint64_t);",
      "63: private uint16_t",
      "64: getu16(int swap, uint16_t value)",
      "65: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63: #define MAX_PHNUM 256",
      "64: #define MAX_SHNUM 1024",
      "66: private int",
      "67: toomany(struct magic_set *ms, const char *name, uint16_t num)",
      "68: {",
      "69:  if (file_printf(ms, \", too many %s header sections (%u)\", name, num",
      "70:      ) == -1)",
      "71:   return -1;",
      "72:  return 0;",
      "73: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "499:  if (namesz & 0x80000000) {",
      "500:      (void)file_printf(ms, \", bad note name size 0x%lx\",",
      "501:   (unsigned long)namesz);",
      "503:  }",
      "505:  if (descsz & 0x80000000) {",
      "506:      (void)file_printf(ms, \", bad note description size 0x%lx\",",
      "507:   (unsigned long)descsz);",
      "509:  }",
      "",
      "[Removed Lines]",
      "502:      return offset;",
      "508:      return offset;",
      "",
      "[Added Lines]",
      "514:      return 0;",
      "520:      return 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1240:  int flags = 0;",
      "1241:  Elf32_Ehdr elf32hdr;",
      "1242:  Elf64_Ehdr elf64hdr;",
      "1245:  if (ms->flags & (MAGIC_MIME|MAGIC_APPLE))",
      "1246:   return 0;",
      "",
      "[Removed Lines]",
      "1243:  uint16_t type;",
      "",
      "[Added Lines]",
      "1255:  uint16_t type, phnum, shnum;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d7cdad007c507e6c79f51f058dd77fab70ceb9f6",
      "candidate_info": {
        "commit_hash": "d7cdad007c507e6c79f51f058dd77fab70ceb9f6",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/d7cdad007c507e6c79f51f058dd77fab70ceb9f6",
        "files": [
          "src/readelf.c"
        ],
        "message": "Stop reporting bad capabilities after the first few.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.104 2014/10/17 15:49:00 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.105 2014/11/22 16:04:29 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "919:  Elf32_Shdr sh32;",
          "920:  Elf64_Shdr sh64;",
          "921:  int stripped = 1;",
          "922:  void *nbuf;",
          "923:  off_t noff, coff, name_off;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "922:  size_t nbadcap = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1007:     goto skip;",
          "1008:    }",
          "1010:    if (lseek(fd, xsh_offset, SEEK_SET) == (off_t)-1) {",
          "1011:     file_badseek(ms);",
          "1012:     return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:    if (nbadcap > 5)",
          "1012:     break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1072:          (unsigned long long)xcap_tag,",
          "1073:          (unsigned long long)xcap_val) == -1)",
          "1074:       return -1;",
          "1075:      break;",
          "1076:     }",
          "1077:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:      if (nbadcap++ > 2)",
          "1079:       coff = xsh_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c0014e144d538f5e9245653b058b5144b7a5cb4",
      "candidate_info": {
        "commit_hash": "8c0014e144d538f5e9245653b058b5144b7a5cb4",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/8c0014e144d538f5e9245653b058b5144b7a5cb4",
        "files": [
          "src/elfclass.h",
          "src/readelf.c"
        ],
        "message": "- limit the number of program and section header number of sections to be   processed to avoid excessive processing time. - if a bad note is found, return 0 to stop processing immediately.",
        "before_after_code_files": [
          "src/elfclass.h||src/elfclass.h",
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/elfclass.h||src/elfclass.h",
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/elfclass.h||src/elfclass.h",
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/elfclass.h||src/elfclass.h": [
          "File: src/elfclass.h -> src/elfclass.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  switch (type) {",
          "36: #ifdef ELFCORE",
          "37:  case ET_CORE:",
          "38:   flags |= FLAGS_IS_CORE;",
          "39:   if (dophn_core(ms, clazz, swap, fd,",
          "42:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
          "43:       fsize, &flags) == -1)",
          "44:    return -1;",
          "",
          "[Removed Lines]",
          "40:       (off_t)elf_getu(swap, elfhdr.e_phoff),",
          "41:       elf_getu16(swap, elfhdr.e_phnum),",
          "",
          "[Added Lines]",
          "38:   phnum = elf_getu16(swap, elfhdr.e_phnum);",
          "39:   if (phnum > MAX_PHNUM)",
          "40:    return toomany(ms, \"program\", phnum);",
          "43:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: #endif",
          "47:  case ET_EXEC:",
          "48:  case ET_DYN:",
          "49:   if (dophn_exec(ms, clazz, swap, fd,",
          "52:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
          "55:    return -1;",
          "57:  case ET_REL:",
          "58:   if (doshn(ms, clazz, swap, fd,",
          "61:       (size_t)elf_getu16(swap, elfhdr.e_shentsize),",
          "62:       fsize, &flags, elf_getu16(swap, elfhdr.e_machine),",
          "63:       (int)elf_getu16(swap, elfhdr.e_shstrndx)) == -1)",
          "",
          "[Removed Lines]",
          "50:       (off_t)elf_getu(swap, elfhdr.e_phoff),",
          "51:       elf_getu16(swap, elfhdr.e_phnum),",
          "53:       fsize, &flags, elf_getu16(swap, elfhdr.e_shnum))",
          "54:       == -1)",
          "59:       (off_t)elf_getu(swap, elfhdr.e_shoff),",
          "60:       elf_getu16(swap, elfhdr.e_shnum),",
          "",
          "[Added Lines]",
          "51:   phnum = elf_getu16(swap, elfhdr.e_phnum);",
          "52:   if (phnum > MAX_PHNUM)",
          "53:    return toomany(ms, \"program\", phnum);",
          "54:   shnum = elf_getu16(swap, elfhdr.e_shnum);",
          "55:   if (shnum > MAX_SHNUM)",
          "56:    return toomany(ms, \"section\", shnum);",
          "58:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
          "60:       fsize, &flags, shnum) == -1)",
          "64:   shnum = elf_getu16(swap, elfhdr.e_shnum);",
          "65:   if (shnum > MAX_SHNUM)",
          "66:    return toomany(ms, \"section\", shnum);",
          "68:       (off_t)elf_getu(swap, elfhdr.e_shoff), shnum,",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.104 2014/10/17 15:49:00 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.105 2014/11/22 16:04:29 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: private uint32_t getu32(int, uint32_t);",
          "61: private uint64_t getu64(int, uint64_t);",
          "63: private uint16_t",
          "64: getu16(int swap, uint16_t value)",
          "65: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: #define MAX_PHNUM 256",
          "64: #define MAX_SHNUM 1024",
          "66: private int",
          "67: toomany(struct magic_set *ms, const char *name, uint16_t num)",
          "68: {",
          "69:  if (file_printf(ms, \", too many %s header sections (%u)\", name, num",
          "70:      ) == -1)",
          "71:   return -1;",
          "72:  return 0;",
          "73: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "499:  if (namesz & 0x80000000) {",
          "500:      (void)file_printf(ms, \", bad note name size 0x%lx\",",
          "501:   (unsigned long)namesz);",
          "503:  }",
          "505:  if (descsz & 0x80000000) {",
          "506:      (void)file_printf(ms, \", bad note description size 0x%lx\",",
          "507:   (unsigned long)descsz);",
          "509:  }",
          "",
          "[Removed Lines]",
          "502:      return offset;",
          "508:      return offset;",
          "",
          "[Added Lines]",
          "514:      return 0;",
          "520:      return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1240:  int flags = 0;",
          "1241:  Elf32_Ehdr elf32hdr;",
          "1242:  Elf64_Ehdr elf64hdr;",
          "1245:  if (ms->flags & (MAGIC_MIME|MAGIC_APPLE))",
          "1246:   return 0;",
          "",
          "[Removed Lines]",
          "1243:  uint16_t type;",
          "",
          "[Added Lines]",
          "1255:  uint16_t type, phnum, shnum;",
          "",
          "---------------"
        ]
      }
    }
  ]
}