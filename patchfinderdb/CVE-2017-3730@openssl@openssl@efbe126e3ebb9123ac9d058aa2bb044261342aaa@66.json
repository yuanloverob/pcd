{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a39aa18644d3338087a827c6555b18bc857346fe",
      "candidate_info": {
        "commit_hash": "a39aa18644d3338087a827c6555b18bc857346fe",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a39aa18644d3338087a827c6555b18bc857346fe",
        "files": [
          "crypto/dh/dh_check.c",
          "include/openssl/dh.h",
          "ssl/statem/statem_clnt.c",
          "util/libcrypto.num"
        ],
        "message": "Better check of DH parameters in TLS data\n\nWhen the client reads DH parameters from the TLS stream, we only\nchecked that they all are non-zero.  This change updates the check to\nuse DH_check_params()\n\nDH_check_params() is a new function for light weight checking of the p\nand g parameters:\n\n    check that p is odd\n    check that 1 < g < p - 1\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>",
        "before_after_code_files": [
          "crypto/dh/dh_check.c||crypto/dh/dh_check.c",
          "include/openssl/dh.h||include/openssl/dh.h",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
          ],
          "candidate": [
            "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/dh/dh_check.c||crypto/dh/dh_check.c": [
          "File: crypto/dh/dh_check.c -> crypto/dh/dh_check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <openssl/bn.h>",
          "13: #include \"dh_locl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: int DH_check_params(const DH *dh, int *ret)",
          "23: {",
          "24:     int ok = 0;",
          "25:     BIGNUM *tmp = NULL;",
          "26:     BN_CTX *ctx = NULL;",
          "29:     ctx = BN_CTX_new();",
          "30:     if (ctx == NULL)",
          "31:         goto err;",
          "32:     BN_CTX_start(ctx);",
          "33:     tmp = BN_CTX_get(ctx);",
          "34:     if (tmp == NULL)",
          "35:         goto err;",
          "37:     if (!BN_is_odd(dh->p))",
          "39:     if (BN_is_negative(dh->g) || BN_is_zero(dh->g) || BN_is_one(dh->g))",
          "41:     if (BN_copy(tmp, dh->p) == NULL || !BN_sub_word(tmp, 1))",
          "42:         goto err;",
          "43:     if (BN_cmp(dh->g, tmp) >= 0)",
          "46:     ok = 1;",
          "47:  err:",
          "48:     if (ctx != NULL) {",
          "49:         BN_CTX_end(ctx);",
          "50:         BN_CTX_free(ctx);",
          "51:     }",
          "52:     return (ok);",
          "53: }",
          "",
          "---------------"
        ],
        "include/openssl/dh.h||include/openssl/dh.h": [
          "File: include/openssl/dh.h -> include/openssl/dh.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: int DH_generate_parameters_ex(DH *dh, int prime_len, int generator,",
          "125:                               BN_GENCB *cb);",
          "127: int DH_check(const DH *dh, int *codes);",
          "128: int DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *codes);",
          "129: int DH_generate_key(DH *dh);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: int DH_check_params(const DH *dh, int *ret);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1414:     DH *dh = NULL;",
          "1415:     BIGNUM *p = NULL, *g = NULL, *bnpub_key = NULL;",
          "1417:     if (!PACKET_get_length_prefixed_2(pkt, &prime)",
          "1418:         || !PACKET_get_length_prefixed_2(pkt, &generator)",
          "1419:         || !PACKET_get_length_prefixed_2(pkt, &pub_key)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1417:     int check_bits = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1441:         goto err;",
          "1442:     }",
          "1446:         SSLerr(SSL_F_TLS_PROCESS_SKE_DHE, SSL_R_BAD_DH_VALUE);",
          "1447:         goto err;",
          "",
          "[Removed Lines]",
          "1444:     if (BN_is_zero(p) || BN_is_zero(g) || BN_is_zero(bnpub_key)) {",
          "",
          "[Added Lines]",
          "1447:     if (BN_is_zero(bnpub_key)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1454:     }",
          "1455:     p = g = NULL;",
          "1457:     if (!DH_set0_key(dh, bnpub_key, NULL)) {",
          "1459:         SSLerr(SSL_F_TLS_PROCESS_SKE_DHE, ERR_R_BN_LIB);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1460:     if (DH_check_params(dh, &check_bits) == 0 || check_bits != 0) {",
          "1462:         SSLerr(SSL_F_TLS_PROCESS_SKE_DHE, SSL_R_BAD_DH_VALUE);",
          "1463:         goto err;",
          "1464:     }",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4213: X509_VERIFY_PARAM_set_inh_flags         4174 1_1_0d EXIST::FUNCTION:",
          "4214: X509_VERIFY_PARAM_get_inh_flags         4175 1_1_0d EXIST::FUNCTION:",
          "4215: X509_VERIFY_PARAM_get_time              4181 1_1_0d EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4216: DH_check_params                         4183 1_1_0d EXIST::FUNCTION:DH",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfb109c522a450af7f387d66ad32afeee87f9805",
      "candidate_info": {
        "commit_hash": "dfb109c522a450af7f387d66ad32afeee87f9805",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/dfb109c522a450af7f387d66ad32afeee87f9805",
        "files": [
          "crypto/bn/bn_shift.c"
        ],
        "message": "bn: fix occurance of negative zero in BN_rshift1()\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 0a2dcb6990dacc94337f746f4f4a6dfac1fbeac4)",
        "before_after_code_files": [
          "crypto/bn/bn_shift.c||crypto/bn/bn_shift.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_shift.c||crypto/bn/bn_shift.c": [
          "File: crypto/bn/bn_shift.c -> crypto/bn/bn_shift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         c = (t & 1) ? BN_TBIT : 0;",
          "75:     }",
          "76:     r->top = j;",
          "77:     bn_check_top(r);",
          "78:     return (1);",
          "79: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     if (!r->top)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f60b8fbdc9b17572a86457fe5b11437c0d3fbc2",
      "candidate_info": {
        "commit_hash": "3f60b8fbdc9b17572a86457fe5b11437c0d3fbc2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3f60b8fbdc9b17572a86457fe5b11437c0d3fbc2",
        "files": [
          "ssl/ssl_locl.h",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c"
        ],
        "message": "Use correct signature algorithm list when sending or checking.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2297)",
        "before_after_code_files": [
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2062:                                  const unsigned char *psig, size_t psiglen);",
          "2063: __owur int tls1_save_sigalgs(SSL *s, const unsigned char *data, int dsize);",
          "2064: __owur int tls1_process_sigalgs(SSL *s);",
          "2066: __owur int tls12_check_peer_sigalg(const EVP_MD **pmd, SSL *s,",
          "2067:                                    const unsigned char *sig, EVP_PKEY *pkey);",
          "2068: void ssl_set_client_disabled(SSL *s);",
          "",
          "[Removed Lines]",
          "2065: __owur size_t tls12_get_psigalgs(SSL *s, const unsigned char **psigs);",
          "",
          "[Added Lines]",
          "2065: __owur size_t tls12_get_psigalgs(SSL *s, int sent, const unsigned char **psigs);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2002:     if (SSL_USE_SIGALGS(s)) {",
          "2003:         const unsigned char *psigs;",
          "2004:         unsigned char *etmp = p;",
          "2007:         p += 2;",
          "2008:         nl = tls12_copy_sigalgs(s, p, psigs, nl);",
          "",
          "[Removed Lines]",
          "2005:         nl = tls12_get_psigalgs(s, &psigs);",
          "",
          "[Added Lines]",
          "2005:         nl = tls12_get_psigalgs(s, 1, &psigs);",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "711:         tlsext_sigalg_ecdsa(TLSEXT_hash_sha384)",
          "712: };",
          "713: #endif",
          "715: {",
          "",
          "[Removed Lines]",
          "714: size_t tls12_get_psigalgs(SSL *s, const unsigned char **psigs)",
          "",
          "[Added Lines]",
          "714: size_t tls12_get_psigalgs(SSL *s, int sent, const unsigned char **psigs)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "733:     }",
          "734: #endif",
          "738:         return s->cert->client_sigalgslen;",
          "739:     } else if (s->cert->conf_sigalgs) {",
          "",
          "[Removed Lines]",
          "736:     if (s->server && s->cert->client_sigalgs) {",
          "",
          "[Added Lines]",
          "736:     if (s->server == sent && s->cert->client_sigalgs) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "797: #endif",
          "801:     for (i = 0; i < sent_sigslen; i += 2, sent_sigs += 2) {",
          "802:         if (sig[0] == sent_sigs[0] && sig[1] == sent_sigs[1])",
          "803:             break;",
          "",
          "[Removed Lines]",
          "800:     sent_sigslen = tls12_get_psigalgs(s, &sent_sigs);",
          "",
          "[Added Lines]",
          "800:     sent_sigslen = tls12_get_psigalgs(s, 1, &sent_sigs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1189:         size_t salglen;",
          "1190:         const unsigned char *salg;",
          "1191:         unsigned char *etmp;",
          "",
          "[Removed Lines]",
          "1192:         salglen = tls12_get_psigalgs(s, &salg);",
          "",
          "[Added Lines]",
          "1192:         salglen = tls12_get_psigalgs(s, 1, &salg);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3400:     for (i = 0; i < sigalgslen; i += 2, sigalgs += 2) {",
          "3401:         switch (sigalgs[1]) {",
          "3402: #ifndef OPENSSL_NO_RSA",
          "",
          "[Removed Lines]",
          "3399:     sigalgslen = tls12_get_psigalgs(s, &sigalgs);",
          "",
          "[Added Lines]",
          "3399:     sigalgslen = tls12_get_psigalgs(s, 1, &sigalgs);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3491:         conf = c->conf_sigalgs;",
          "3492:         conflen = c->conf_sigalgslen;",
          "3493:     } else",
          "3495:     if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE || is_suiteb) {",
          "3496:         pref = conf;",
          "3497:         preflen = conflen;",
          "",
          "[Removed Lines]",
          "3494:         conflen = tls12_get_psigalgs(s, &conf);",
          "",
          "[Added Lines]",
          "3494:         conflen = tls12_get_psigalgs(s, 0, &conf);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "656bce035762ae5abd9089438dae5797c4e38b0b",
      "candidate_info": {
        "commit_hash": "656bce035762ae5abd9089438dae5797c4e38b0b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/656bce035762ae5abd9089438dae5797c4e38b0b",
        "files": [
          "crypto/chacha/asm/chacha-ppc.pl"
        ],
        "message": "chacha/asm/chacha-ppc.pl: add missing .text directive.\n\nRT#4667\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit abcbf7ed7ea249609d225e43e1bce3af1fa1028c)",
        "before_after_code_files": [
          "crypto/chacha/asm/chacha-ppc.pl||crypto/chacha/asm/chacha-ppc.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/chacha/asm/chacha-ppc.pl||crypto/chacha/asm/chacha-ppc.pl": [
          "File: crypto/chacha/asm/chacha-ppc.pl -> crypto/chacha/asm/chacha-ppc.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: $code.=<<___;",
          "135: .machine \"any\"",
          "137: .globl .ChaCha20_ctr32_int",
          "138: .align 5",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: .text",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6a9f005be1cf8e29a0985643b27b9548bcfdee2",
      "candidate_info": {
        "commit_hash": "c6a9f005be1cf8e29a0985643b27b9548bcfdee2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c6a9f005be1cf8e29a0985643b27b9548bcfdee2",
        "files": [
          "crypto/srp/srp_vfy.c"
        ],
        "message": "Prevent OOB in SRP base64 code.\n\nChange size comparison from > (GT) to >= (GTE) to ensure an additional\nbyte of output buffer, to prevent OOB reads/writes later in the function\nReject input strings larger than 2GB\nDetect invalid output buffer size and return early\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2672)\n\n(cherry picked from commit ecca16632a73bb80ee27cdec8a97f6def0a4714d)",
        "before_after_code_files": [
          "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
          "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     int i, j;",
          "37:     int size;",
          "39:     while (*src && (*src == ' ' || *src == '\\t' || *src == '\\n'))",
          "40:         ++src;",
          "41:     size = strlen(src);",
          "43:         return -1;",
          "45:     i = 0;",
          "",
          "[Removed Lines]",
          "42:     if (alen > INT_MAX || size > (int)alen)",
          "",
          "[Added Lines]",
          "39:     if (alen == 0 || alen > INT_MAX)",
          "40:         return -1;",
          "45:     if (size < 0 || size >= (int)alen)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         if (--i < 0)",
          "78:             break;",
          "79:     }",
          "81:         ++j;",
          "82:     i = 0;",
          "83:     while (j <= size)",
          "",
          "[Removed Lines]",
          "80:     while (a[j] == 0 && j <= size)",
          "",
          "[Added Lines]",
          "83:     while (j <= size && a[j] == 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}