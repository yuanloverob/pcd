{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ba323476a40484243f93019ab6f2dc6df7befd1",
      "candidate_info": {
        "commit_hash": "0ba323476a40484243f93019ab6f2dc6df7befd1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0ba323476a40484243f93019ab6f2dc6df7befd1",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Fix dbfuzz2 so that it will compile on systems that do not support getrlimit().\n\nFossilOrigin-Name: 36295dcebcb5487f2a462eabb41900ac28b8e839898ef0fae0aa4730bf9b0671",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8fb0c6d5a38e77aa4c5f394fb8af1b0c7c6a4790e932aabc213a3078ee9acaf6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:       free(pIn);",
          "378:     }",
          "379:   }",
          "380:   if( eVerbosity>0 ){",
          "381:     struct rusage x;",
          "382:     printf(\"SQLite %s\\n\", sqlite3_sourceid());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380: #ifdef RUSAGE_SELF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:       printf(\"Maximum RSS = %ld KB\\n\", x.ru_maxrss);",
          "386:     }",
          "387:   }",
          "388:   return 0;",
          "389: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dac7e69dc2bbfa895cb31c2f9305c11ff4fba51c",
      "candidate_info": {
        "commit_hash": "dac7e69dc2bbfa895cb31c2f9305c11ff4fba51c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dac7e69dc2bbfa895cb31c2f9305c11ff4fba51c",
        "files": [
          "ext/lsm1/Makefile",
          "ext/lsm1/test/lsm1_simple.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add some extra tests for the lsm virtual table module.\n\nFossilOrigin-Name: 4cb009b0f724f72eaea90e45488122f7c2a7d0caf31a8422da4060469507e921",
        "before_after_code_files": [
          "ext/lsm1/test/lsm1_simple.test||ext/lsm1/test/lsm1_simple.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/lsm1/test/lsm1_simple.test||ext/lsm1/test/lsm1_simple.test": [
          "File: ext/lsm1/test/lsm1_simple.test -> ext/lsm1/test/lsm1_simple.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: do_execsql_test 211 {",
          "89:   SELECT quote(a), quote(lsm1_key), quote(lsm1_value), '|' FROM x1;",
          "90: } {'12' X'3132' X'05320000000000000A401FFB42ABE9DB' | '15' X'3135' X'4284C6' | '8' X'38' X'2162616E6A6F1633323105' |}",
          "93: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: do_execsql_test 212 {",
          "92:   SELECT quote(a), quote(lsm1_key), quote(lsm1_value) FROM x1 WHERE a='12';",
          "93: } {'12' X'3132' X'05320000000000000A401FFB42ABE9DB'}",
          "95: #-------------------------------------------------------------------------",
          "96: reset_db",
          "97: forcedelete testlsm.db",
          "98: load_lsm1_vtab db",
          "99: do_execsql_test 300 {",
          "100:   CREATE VIRTUAL TABLE x1 USING lsm1(testlsm.db,a,TEXT,b,c,d);",
          "101: }",
          "102: do_eqp_test 310 {",
          "103:   SELECT * FROM x1 WHERE a=?",
          "104: } {SCAN TABLE x1 VIRTUAL TABLE INDEX 0:}",
          "106: do_eqp_test 320 {",
          "107:   SELECT * FROM x1 WHERE a>?",
          "108: } {SCAN TABLE x1 VIRTUAL TABLE INDEX 2:}",
          "110: do_eqp_test 330 {",
          "111:   SELECT * FROM x1 WHERE a<?",
          "112: } {SCAN TABLE x1 VIRTUAL TABLE INDEX 3:}",
          "113: do_eqp_test 340 {",
          "114:   SELECT * FROM x1 WHERE a BETWEEN ? AND ?",
          "115: } {SCAN TABLE x1 VIRTUAL TABLE INDEX 1:}",
          "117: #-------------------------------------------------------------------------",
          "118: reset_db",
          "119: forcedelete testlsm.db",
          "120: load_lsm1_vtab db",
          "121: do_execsql_test 400 {",
          "122:   CREATE VIRTUAL TABLE x1 USING lsm1(testlsm.db,a,TEXT,b);",
          "123:   INSERT INTO x1 VALUES('one', 1);",
          "124:   INSERT INTO x1 VALUES('two', 2);",
          "125:   INSERT INTO x1 VALUES('three', 3);",
          "126:   INSERT INTO x1 VALUES('four', 4);",
          "127:   INSERT INTO x1 VALUES('five', 5);",
          "128: }",
          "129: do_execsql_test 410 {",
          "130:   SELECT b FROM x1 WHERE a = 'two'",
          "131: } {2}",
          "132: do_execsql_test 411 {",
          "133:   SELECT b FROM x1 WHERE a = 'one'",
          "134: } {1}",
          "135: do_execsql_test 412 {",
          "136:   SELECT b FROM x1 WHERE a = 'five'",
          "137: } {5}",
          "139: do_execsql_test 420 {",
          "140:   SELECT b FROM x1 WHERE a BETWEEN 'one' AND 'three';",
          "141: } {1 3}",
          "142: do_execsql_test 421 {",
          "143:   SELECT b FROM x1 WHERE a BETWEEN 'five' AND 'two';",
          "144: } {5 4 1 3 2}",
          "145: do_execsql_test 421 {",
          "146:   SELECT b FROM x1 WHERE a > 'five';",
          "147: } {4 1 3 2}",
          "148: do_execsql_test 421 {",
          "149:   SELECT b FROM x1 WHERE a <= 'three';",
          "150: } {3 1 4 5}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7496e872a1a50ac65ad04709365a43038fb015ac9c690196de3cb02ce54c2e57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfc078318cc39ab2f98369a1be8fdc221ea63851",
      "candidate_info": {
        "commit_hash": "cfc078318cc39ab2f98369a1be8fdc221ea63851",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cfc078318cc39ab2f98369a1be8fdc221ea63851",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeapi.c"
        ],
        "message": "Small performance improvement in sqlite3_step().\n\nFossilOrigin-Name: d1db8d5894450b24bb0335983503d9bbf6cc48a0ae4b83291283fb2d32b6b25b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1dc0c3df32572f09265fc73eeaa0748159e0e9523b9b2d6768b834a29c909968",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "585:     return SQLITE_NOMEM_BKPT;",
          "586:   }",
          "589:     p->rc = SQLITE_SCHEMA;",
          "590:     rc = SQLITE_ERROR;",
          "591:     goto end_of_step;",
          "",
          "[Removed Lines]",
          "588:   if( p->pc<=0 && p->expired ){",
          "",
          "[Added Lines]",
          "588:   if( p->pc<0 && p->expired ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "662:        || (rc&0xff)==SQLITE_BUSY || rc==SQLITE_MISUSE",
          "663:   );",
          "664:   assert( (p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE) || p->rc==p->rcApp );",
          "668:   ){",
          "",
          "[Removed Lines]",
          "665:   if( (p->prepFlags & SQLITE_PREPARE_SAVESQL)!=0",
          "666:    && rc!=SQLITE_ROW",
          "667:    && rc!=SQLITE_DONE",
          "",
          "[Added Lines]",
          "665:   if( rc!=SQLITE_ROW",
          "666:    && rc!=SQLITE_DONE",
          "667:    && (p->prepFlags & SQLITE_PREPARE_SAVESQL)!=0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f4f6823ac81ca47056367153b851ae96888708b",
      "candidate_info": {
        "commit_hash": "3f4f6823ac81ca47056367153b851ae96888708b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3f4f6823ac81ca47056367153b851ae96888708b",
        "files": [
          "ext/fts3/fts3_aux.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 9a93c68a7673bda2e6c308d3b2798d0fb12fde399996cae24b1f0d5864adf355",
        "before_after_code_files": [
          "ext/fts3/fts3_aux.c||ext/fts3/fts3_aux.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_aux.c||ext/fts3/fts3_aux.c": [
          "File: ext/fts3/fts3_aux.c -> ext/fts3/fts3_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:     if( zStr ){",
          "418:       pCsr->filter.zTerm = sqlite3_mprintf(\"%s\", zStr);",
          "419:       if( pCsr->filter.zTerm==0 ) return SQLITE_NOMEM;",
          "421:     }",
          "422:   }",
          "424:   if( iLe>=0 ){",
          "425:     pCsr->zStop = sqlite3_mprintf(\"%s\", sqlite3_value_text(apVal[iLe]));",
          "426:     if( pCsr->zStop==0 ) return SQLITE_NOMEM;",
          "428:   }",
          "430:   if( iLangid>=0 ){",
          "",
          "[Removed Lines]",
          "420:       pCsr->filter.nTerm = strlen(pCsr->filter.zTerm);",
          "427:     pCsr->nStop = strlen(pCsr->zStop);",
          "",
          "[Added Lines]",
          "420:       pCsr->filter.nTerm = (int)strlen(pCsr->filter.zTerm);",
          "427:     pCsr->nStop = (int)strlen(pCsr->zStop);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e744d2dd93a78235e6c1d938b08232183b5ce7e355d1b7daf2199e585b03c106",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6825:   assert( i<iEnd );",
          "6826:   j = get2byte(&aData[hdr+5]);",
          "6828:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6830:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6827:   if( NEVER(j>usableSize) ){ j = 0; }",
          "",
          "[Added Lines]",
          "6827:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a1bfc9a6d5b2367a84d367290d3bf5dba708a16",
      "candidate_info": {
        "commit_hash": "6a1bfc9a6d5b2367a84d367290d3bf5dba708a16",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6a1bfc9a6d5b2367a84d367290d3bf5dba708a16",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Changes to the unix VFS that allegedly enable it to build of Fuchsia. We have no way of testing this.\n\nFossilOrigin-Name: be21a6416d47ff7db995006a0422b745044d9b8bb5bad3c53342aa6e2e524771",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: af84774d1eebcfe6a61b564b4edf280ad3c3a93f39b7f70b6fcc56f7bbdfb9eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7822:     UNIXVFS(\"unix\",          autolockIoFinder ),",
          "7823: #elif OS_VXWORKS",
          "7824:     UNIXVFS(\"unix\",          vxworksIoFinder ),",
          "7825: #else",
          "7826:     UNIXVFS(\"unix\",          posixIoFinder ),",
          "7827: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7825: #elif __Fuchsia__",
          "7827:     UNIXVFS(\"unix\",          dotlockIoFinder ),",
          "",
          "---------------"
        ]
      }
    }
  ]
}