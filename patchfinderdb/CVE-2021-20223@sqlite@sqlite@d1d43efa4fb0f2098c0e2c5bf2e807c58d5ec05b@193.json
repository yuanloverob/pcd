{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "78b52203285aa6412bfe9e21ea66ffd18752471c",
      "candidate_info": {
        "commit_hash": "78b52203285aa6412bfe9e21ea66ffd18752471c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/78b52203285aa6412bfe9e21ea66ffd18752471c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Fix a NEVER() macro that can be true if compiled with SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION. Ticket [b985f0bd1636d9bc]\n\nFossilOrigin-Name: 9f0f5d593a383ec2bebb6513ad566813f5b3dc6f052c61bcd76e8ac557bbb062",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f6affdd41608946fcfcea914ece149038a8b25a62bbe719ed2561c649b86d824",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1864:   assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "1865:   nExpr = pExpr->x.pList->nExpr;",
          "1866:   pDef = sqlite3FindFunction(db, pExpr->u.zToken, nExpr, SQLITE_UTF8, 0);",
          "1867:   if( NEVER(pDef==0) || (pDef->funcFlags & SQLITE_FUNC_LIKE)==0 ){",
          "1868:     return 0;",
          "1869:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1867: #ifdef SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION",
          "1868:   if( pDef==0 ) return 0;",
          "1869: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52f11b885a5580e270fa28cc066b884eea3274b7",
      "candidate_info": {
        "commit_hash": "52f11b885a5580e270fa28cc066b884eea3274b7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/52f11b885a5580e270fa28cc066b884eea3274b7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeaux.c",
          "src/vdbemem.c"
        ],
        "message": "Add the test_trace_breakpoint() subroutine that is invoked after each instruction is printed while running PRAGMA vdbe_trace=on.  Only works for SQLITE_DEBUG builds.  Also add parameters \"pc\" and \"pOp\" to test_addop_breakpoint() to make it easier to set conditionals.\n\nFossilOrigin-Name: 49a6368c384178653cb3ccb58cc8eff93327c16929bf79eeefeb13a4ce897153",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 435c272dcf6ed5f3acb564b8f959557145f117b869547b670258cf5a1908ab6b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: # define UPDATE_MAX_BLOBSIZE(P)",
          "118: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: #ifdef SQLITE_DEBUG",
          "134: static void test_trace_breakpoint(int pc, Op *pOp){",
          "135:   static int n = 0;",
          "136:   n++;",
          "137: }",
          "138: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "738: #ifdef SQLITE_DEBUG",
          "739:     if( db->flags & SQLITE_VdbeTrace ){",
          "740:       sqlite3VdbePrintOp(stdout, (int)(pOp - aOp), pOp);",
          "741:     }",
          "742: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:       test_trace_breakpoint((int)(pOp - aOp),pOp);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194: #ifdef SQLITE_DEBUG",
          "200:   static int n = 0;",
          "201:   n++;",
          "202: }",
          "",
          "[Removed Lines]",
          "199: static void test_addop_breakpoint(void){",
          "",
          "[Added Lines]",
          "206: static void test_addop_breakpoint(int pc, Op *pOp){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249: #ifdef SQLITE_DEBUG",
          "250:   if( p->db->flags & SQLITE_VdbeAddopTrace ){",
          "251:     sqlite3VdbePrintOp(0, i, &p->aOp[i]);",
          "253:   }",
          "254: #endif",
          "255: #ifdef VDBE_PROFILE",
          "",
          "[Removed Lines]",
          "252:     test_addop_breakpoint();",
          "",
          "[Added Lines]",
          "259:     test_addop_breakpoint(i, &p->aOp[i]);",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c"
        ]
      }
    },
    {
      "candidate_hash": "3fee9de239901b9e71110c448e5876617e3b2940",
      "candidate_info": {
        "commit_hash": "3fee9de239901b9e71110c448e5876617e3b2940",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3fee9de239901b9e71110c448e5876617e3b2940",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another case where malformed utf-8 was being mishandled in fts5. Fix for [df46a6f3].\n\nFossilOrigin-Name: 1c0a05b09a97e6e2e9b11c31ed6ec7e6484686614b587ebfd0cfe27d973ba461",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5318:   for(i=0; i<nChar; i++){",
          "5320:     if( (unsigned char)p[n++]>=0xc0 ){",
          "5322:       while( (p[n] & 0xc0)==0x80 ){",
          "5323:         n++;",
          "5325:       }",
          "5326:     }",
          "5327:   }",
          "",
          "[Removed Lines]",
          "5321:       if( n>=nByte ) break;",
          "5324:         if( n>=nByte ) break;",
          "",
          "[Added Lines]",
          "5321:       if( n>=nByte ) return 0;",
          "5324:         if( n>=nByte ){",
          "5325:           if( i+1==nChar ) break;",
          "5326:           return 0;",
          "5327:         }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   INSERT INTO vt1(vt1) VALUES('integrity-check');",
          "267: }",
          "269: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: #-------------------------------------------------------------------------",
          "270: #",
          "271: reset_db",
          "272: do_execsql_test 11.0 {",
          "273:   CREATE VIRTUAL TABLE vt0 USING fts5(",
          "274:       c0, prefix = 71, tokenize = \"porter ascii\", prefix = 9",
          "275:   );",
          "276: } {}",
          "278: do_execsql_test 11.1 {",
          "279:   BEGIN;",
          "280:   INSERT INTO vt0(c0) VALUES (x'e8');",
          "281: }",
          "282: do_execsql_test 11.2 {",
          "283:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "284: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4630c1ec013a4c2e54a34c9a64b2c803ac3912450de660497eb34ee21c91f426",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bbcaee8335624a2b8537014fb3f9af82d331256",
      "candidate_info": {
        "commit_hash": "2bbcaee8335624a2b8537014fb3f9af82d331256",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2bbcaee8335624a2b8537014fb3f9af82d331256",
        "files": [
          "ext/fts5/fts5.h",
          "ext/session/sqlite3session.h",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Fix various documentation typos suggested by Mark Benningfield. No changes to code.\n\nFossilOrigin-Name: 08f09dc4f986a27f4e4e69f8226dbfaf0cfe1269cefc2830bf0fbef7b9bbda48",
        "before_after_code_files": [
          "ext/fts5/fts5.h||ext/fts5/fts5.h",
          "ext/session/sqlite3session.h||ext/session/sqlite3session.h",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5.h||ext/fts5/fts5.h": [
          "File: ext/fts5/fts5.h -> ext/fts5/fts5.h"
        ],
        "ext/session/sqlite3session.h||ext/session/sqlite3session.h": [
          "File: ext/session/sqlite3session.h -> ext/session/sqlite3session.h"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fefe2d046725254367f9f82a8c8cb137e8b75dbbf4bc48debf0649479ff2f0c2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "3259295533f105ae47378248d5ceee3a915c1135",
      "candidate_info": {
        "commit_hash": "3259295533f105ae47378248d5ceee3a915c1135",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3259295533f105ae47378248d5ceee3a915c1135",
        "files": [
          "ext/lsm1/lsm_unix.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix problems with handling return value of mmap() in lsm_unix.c (mmap() returns MAP_FAILED on error, not NULL).\n\nFossilOrigin-Name: da06168c09df5c0e8e10d0f9618e69217d4c0173a8199660bad2805f009d7b08",
        "before_after_code_files": [
          "ext/lsm1/lsm_unix.c||ext/lsm1/lsm_unix.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/lsm1/lsm_unix.c||ext/lsm1/lsm_unix.c": [
          "File: ext/lsm1/lsm_unix.c -> ext/lsm1/lsm_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     }",
          "230:     p->pMap = mmap(0, iSz, PROT_READ|PROT_WRITE, MAP_SHARED, p->fd, 0);",
          "231:     p->nMap = iSz;",
          "232:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:     if( p->pMap==MAP_FAILED ){",
          "232:       p->pMap = 0;",
          "233:       return LSM_IOERR_BKPT;",
          "234:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413:     p->apShm[iChunk] = mmap(0, LSM_SHM_CHUNK_SIZE,",
          "414:         PROT_READ|PROT_WRITE, MAP_SHARED, p->shmfd, iChunk*LSM_SHM_CHUNK_SIZE",
          "415:     );",
          "417:   }",
          "",
          "[Removed Lines]",
          "416:     if( p->apShm[iChunk]==0 ) return LSM_IOERR_BKPT;",
          "",
          "[Added Lines]",
          "420:     if( p->apShm[iChunk]==MAP_FAILED ){",
          "421:       p->apShm[iChunk] = 0;",
          "422:       return LSM_IOERR_BKPT;",
          "423:     }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 067291143a63db924ead4810defb4bc6f195557412f5d1c22299f30d2d9f2a79",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}