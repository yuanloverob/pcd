{
  "cve_id": "CVE-2017-7539",
  "cve_desc": "An assertion-failure flaw was found in Qemu before 2.10.1, in the Network Block Device (NBD) server's initial connection negotiation, where the I/O coroutine was undefined. This could crash the qemu-nbd server if a client sent unexpected data during connection negotiation. A remote user or process could use this flaw to crash the qemu-nbd server resulting in denial of service.",
  "repo": "qemu/qemu",
  "patch_hash": "2b0bbc4f8809c972bad134bc1a2570dbb01dea0b",
  "patch_info": {
    "commit_hash": "2b0bbc4f8809c972bad134bc1a2570dbb01dea0b",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/2b0bbc4f8809c972bad134bc1a2570dbb01dea0b",
    "files": [
      "nbd/server.c"
    ],
    "message": "nbd/server: get rid of nbd_negotiate_read and friends\n\nFunctions nbd_negotiate_{read,write,drop_sync} were introduced in\n1a6245a5b, when nbd_rwv (was nbd_wr_sync) was working through\nqemu_co_sendv_recvv (the path is nbd_wr_sync -> qemu_co_{recv/send} ->\nqemu_co_send_recv -> qemu_co_sendv_recvv), which just yields, without\nsetting any handlers. But starting from ff82911cd nbd_rwv (was\nnbd_wr_syncv) works through qio_channel_yield() which sets handlers, so\nwatchers are redundant in nbd_negotiate_{read,write,drop_sync}, then,\nlet's just use nbd_{read,write,drop} functions.\n\nFunctions nbd_{read,write,drop} has errp parameter, which is unused in\nthis patch. This will be fixed later.\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nReviewed-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <20170602150150.258222-4-vsementsov@virtuozzo.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "before_after_code_files": [
      "nbd/server.c||nbd/server.c"
    ]
  },
  "patch_diff": {
    "nbd/server.c||nbd/server.c": [
      "File: nbd/server.c -> nbd/server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "105: static void nbd_client_receive_next_request(NBDClient *client);",
      "172:    Server         Client",
      "",
      "[Removed Lines]",
      "107: static gboolean nbd_negotiate_continue(QIOChannel *ioc,",
      "108:                                        GIOCondition condition,",
      "109:                                        void *opaque)",
      "110: {",
      "111:     qemu_coroutine_enter(opaque);",
      "112:     return TRUE;",
      "113: }",
      "115: static int nbd_negotiate_read(QIOChannel *ioc, void *buffer, size_t size)",
      "116: {",
      "117:     ssize_t ret;",
      "118:     guint watch;",
      "120:     assert(qemu_in_coroutine());",
      "122:     watch = qio_channel_add_watch(ioc,",
      "123:                                   G_IO_IN,",
      "124:                                   nbd_negotiate_continue,",
      "125:                                   qemu_coroutine_self(),",
      "126:                                   NULL);",
      "127:     ret = nbd_read(ioc, buffer, size, NULL);",
      "128:     g_source_remove(watch);",
      "129:     return ret;",
      "131: }",
      "133: static int nbd_negotiate_write(QIOChannel *ioc, const void *buffer, size_t size)",
      "134: {",
      "135:     ssize_t ret;",
      "136:     guint watch;",
      "138:     assert(qemu_in_coroutine());",
      "140:     watch = qio_channel_add_watch(ioc,",
      "141:                                   G_IO_OUT,",
      "142:                                   nbd_negotiate_continue,",
      "143:                                   qemu_coroutine_self(),",
      "144:                                   NULL);",
      "145:     ret = nbd_write(ioc, buffer, size, NULL);",
      "146:     g_source_remove(watch);",
      "147:     return ret;",
      "148: }",
      "150: static int nbd_negotiate_drop_sync(QIOChannel *ioc, size_t size)",
      "151: {",
      "152:     ssize_t ret;",
      "153:     uint8_t *buffer = g_malloc(MIN(65536, size));",
      "155:     while (size > 0) {",
      "156:         size_t count = MIN(65536, size);",
      "157:         ret = nbd_negotiate_read(ioc, buffer, count);",
      "158:         if (ret < 0) {",
      "159:             g_free(buffer);",
      "160:             return ret;",
      "161:         }",
      "163:         size -= count;",
      "164:     }",
      "166:     g_free(buffer);",
      "167:     return 0;",
      "168: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "205:           type, opt, len);",
      "207:     magic = cpu_to_be64(NBD_REP_MAGIC);",
      "209:         LOG(\"write failed (rep magic)\");",
      "210:         return -EINVAL;",
      "211:     }",
      "212:     opt = cpu_to_be32(opt);",
      "214:         LOG(\"write failed (rep opt)\");",
      "215:         return -EINVAL;",
      "216:     }",
      "217:     type = cpu_to_be32(type);",
      "219:         LOG(\"write failed (rep type)\");",
      "220:         return -EINVAL;",
      "221:     }",
      "222:     len = cpu_to_be32(len);",
      "224:         LOG(\"write failed (rep data length)\");",
      "225:         return -EINVAL;",
      "226:     }",
      "",
      "[Removed Lines]",
      "208:     if (nbd_negotiate_write(ioc, &magic, sizeof(magic)) < 0) {",
      "213:     if (nbd_negotiate_write(ioc, &opt, sizeof(opt)) < 0) {",
      "218:     if (nbd_negotiate_write(ioc, &type, sizeof(type)) < 0) {",
      "223:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) < 0) {",
      "",
      "[Added Lines]",
      "145:     if (nbd_write(ioc, &magic, sizeof(magic), NULL) < 0) {",
      "150:     if (nbd_write(ioc, &opt, sizeof(opt), NULL) < 0) {",
      "155:     if (nbd_write(ioc, &type, sizeof(type), NULL) < 0) {",
      "160:     if (nbd_write(ioc, &len, sizeof(len), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:     if (ret < 0) {",
      "256:         goto out;",
      "257:     }",
      "259:         LOG(\"write failed (error message)\");",
      "260:         ret = -EIO;",
      "261:     } else {",
      "",
      "[Removed Lines]",
      "258:     if (nbd_negotiate_write(ioc, msg, len) < 0) {",
      "",
      "[Added Lines]",
      "195:     if (nbd_write(ioc, msg, len, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "286:     }",
      "288:     len = cpu_to_be32(name_len);",
      "290:         LOG(\"write failed (name length)\");",
      "291:         return -EINVAL;",
      "292:     }",
      "294:         LOG(\"write failed (name buffer)\");",
      "295:         return -EINVAL;",
      "296:     }",
      "298:         LOG(\"write failed (description buffer)\");",
      "299:         return -EINVAL;",
      "300:     }",
      "",
      "[Removed Lines]",
      "289:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) < 0) {",
      "293:     if (nbd_negotiate_write(ioc, name, name_len) < 0) {",
      "297:     if (nbd_negotiate_write(ioc, desc, desc_len) < 0) {",
      "",
      "[Added Lines]",
      "226:     if (nbd_write(ioc, &len, sizeof(len), NULL) < 0) {",
      "230:     if (nbd_write(ioc, name, name_len, NULL) < 0) {",
      "234:     if (nbd_write(ioc, desc, desc_len, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "308:     NBDExport *exp;",
      "310:     if (length) {",
      "312:             return -EIO;",
      "313:         }",
      "314:         return nbd_negotiate_send_rep_err(client->ioc,",
      "",
      "[Removed Lines]",
      "311:         if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "248:         if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "339:         LOG(\"Bad length received\");",
      "340:         goto fail;",
      "341:     }",
      "343:         LOG(\"read failed\");",
      "344:         goto fail;",
      "345:     }",
      "",
      "[Removed Lines]",
      "342:     if (nbd_negotiate_read(client->ioc, name, length) < 0) {",
      "",
      "[Added Lines]",
      "279:     if (nbd_read(client->ioc, name, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372:     TRACE(\"Setting up TLS\");",
      "373:     ioc = client->ioc;",
      "374:     if (length) {",
      "376:             return NULL;",
      "377:         }",
      "378:         nbd_negotiate_send_rep_err(ioc, NBD_REP_ERR_INVALID, NBD_OPT_STARTTLS,",
      "",
      "[Removed Lines]",
      "375:         if (nbd_negotiate_drop_sync(ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "312:         if (nbd_drop(ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "436:         ...           Rest of request",
      "440:         LOG(\"read failed\");",
      "441:         return -EIO;",
      "442:     }",
      "",
      "[Removed Lines]",
      "439:     if (nbd_negotiate_read(client->ioc, &flags, sizeof(flags)) < 0) {",
      "",
      "[Added Lines]",
      "376:     if (nbd_read(client->ioc, &flags, sizeof(flags), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "462:         uint32_t clientflags, length;",
      "463:         uint64_t magic;",
      "466:             LOG(\"read failed\");",
      "467:             return -EINVAL;",
      "468:         }",
      "",
      "[Removed Lines]",
      "465:         if (nbd_negotiate_read(client->ioc, &magic, sizeof(magic)) < 0) {",
      "",
      "[Added Lines]",
      "402:         if (nbd_read(client->ioc, &magic, sizeof(magic), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "472:             return -EINVAL;",
      "473:         }",
      "477:         {",
      "478:             LOG(\"read failed\");",
      "479:             return -EINVAL;",
      "480:         }",
      "481:         clientflags = be32_to_cpu(clientflags);",
      "484:             LOG(\"read failed\");",
      "485:             return -EINVAL;",
      "486:         }",
      "",
      "[Removed Lines]",
      "475:         if (nbd_negotiate_read(client->ioc, &clientflags,",
      "476:                                sizeof(clientflags)) < 0)",
      "483:         if (nbd_negotiate_read(client->ioc, &length, sizeof(length)) < 0) {",
      "",
      "[Added Lines]",
      "412:         if (nbd_read(client->ioc, &clientflags,",
      "413:                       sizeof(clientflags), NULL) < 0)",
      "420:         if (nbd_read(client->ioc, &length, sizeof(length), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "510:                 return -EINVAL;",
      "512:             default:",
      "514:                     return -EIO;",
      "515:                 }",
      "516:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
      "",
      "[Removed Lines]",
      "513:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "450:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "548:                 return nbd_negotiate_handle_export_name(client, length);",
      "550:             case NBD_OPT_STARTTLS:",
      "552:                     return -EIO;",
      "553:                 }",
      "554:                 if (client->tlscreds) {",
      "",
      "[Removed Lines]",
      "551:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "488:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "567:                 }",
      "568:                 break;",
      "569:             default:",
      "571:                     return -EIO;",
      "572:                 }",
      "573:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
      "",
      "[Removed Lines]",
      "570:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "507:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "656:             TRACE(\"TLS cannot be enabled with oldstyle protocol\");",
      "657:             goto fail;",
      "658:         }",
      "660:             LOG(\"write failed\");",
      "661:             goto fail;",
      "662:         }",
      "663:     } else {",
      "665:             LOG(\"write failed\");",
      "666:             goto fail;",
      "667:         }",
      "",
      "[Removed Lines]",
      "659:         if (nbd_negotiate_write(client->ioc, buf, sizeof(buf)) < 0) {",
      "664:         if (nbd_negotiate_write(client->ioc, buf, 18) < 0) {",
      "",
      "[Added Lines]",
      "596:         if (nbd_write(client->ioc, buf, sizeof(buf), NULL) < 0) {",
      "601:         if (nbd_write(client->ioc, buf, 18, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "676:         stq_be_p(buf + 18, client->exp->size);",
      "677:         stw_be_p(buf + 26, client->exp->nbdflags | myflags);",
      "678:         len = client->no_zeroes ? 10 : sizeof(buf) - 18;",
      "680:             LOG(\"write failed\");",
      "681:             goto fail;",
      "682:         }",
      "",
      "[Removed Lines]",
      "679:         if (nbd_negotiate_write(client->ioc, buf + 18, len) < 0) {",
      "",
      "[Added Lines]",
      "616:         if (nbd_write(client->ioc, buf + 18, len, NULL) < 0) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1a75b3348010820cc324943f09e090ea1fc524f",
      "candidate_info": {
        "commit_hash": "b1a75b3348010820cc324943f09e090ea1fc524f",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/b1a75b3348010820cc324943f09e090ea1fc524f",
        "files": [
          "include/block/nbd.h",
          "nbd/nbd-internal.h",
          "nbd/server.c",
          "qemu-nbd.c",
          "qemu-nbd.texi"
        ],
        "message": "nbd: Add qemu-nbd -D for human-readable description\n\nThe NBD protocol allows servers to advertise a human-readable\ndescription alongside an export name during NBD_OPT_LIST.  Add\nan option to pass through the user's string to the NBD client.\n\nDoing this also makes it easier to test commit 200650d4, which\nis the client counterpart of receiving the description.\n\nSigned-off-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <1476469998-28592-2-git-send-email-eblake@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "include/block/nbd.h||include/block/nbd.h",
          "nbd/nbd-internal.h||nbd/nbd-internal.h",
          "nbd/server.c||nbd/server.c",
          "qemu-nbd.c||qemu-nbd.c",
          "qemu-nbd.texi||qemu-nbd.texi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "include/block/nbd.h||include/block/nbd.h": [
          "File: include/block/nbd.h -> include/block/nbd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: NBDExport *nbd_export_find(const char *name);",
          "117: void nbd_export_set_name(NBDExport *exp, const char *name);",
          "118: void nbd_export_close_all(void);",
          "120: void nbd_client_new(NBDExport *exp,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: void nbd_export_set_description(NBDExport *exp, const char *description);",
          "",
          "---------------"
        ],
        "nbd/nbd-internal.h||nbd/nbd-internal.h": [
          "File: nbd/nbd-internal.h -> nbd/nbd-internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     return nbd_wr_syncv(ioc, &iov, 1, size, true);",
          "105: }",
          "108: {",
          "111:     return nbd_wr_syncv(ioc, &iov, 1, size, false);",
          "112: }",
          "",
          "[Removed Lines]",
          "107: static inline ssize_t write_sync(QIOChannel *ioc, void *buffer, size_t size)",
          "109:     struct iovec iov = { .iov_base = buffer, .iov_len = size };",
          "",
          "[Added Lines]",
          "107: static inline ssize_t write_sync(QIOChannel *ioc, const void *buffer,",
          "108:                                  size_t size)",
          "110:     struct iovec iov = { .iov_base = (void *) buffer, .iov_len = size };",
          "",
          "---------------"
        ],
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     BlockBackend *blk;",
          "63:     char *name;",
          "64:     off_t dev_offset;",
          "65:     off_t size;",
          "66:     uint16_t nbdflags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     char *description;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130: }",
          "133: {",
          "134:     ssize_t ret;",
          "135:     guint watch;",
          "",
          "[Removed Lines]",
          "132: static ssize_t nbd_negotiate_write(QIOChannel *ioc, void *buffer, size_t size)",
          "",
          "[Added Lines]",
          "133: static ssize_t nbd_negotiate_write(QIOChannel *ioc, const void *buffer,",
          "134:                                    size_t size)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226: static int nbd_negotiate_send_rep_list(QIOChannel *ioc, NBDExport *exp)",
          "227: {",
          "229:     uint32_t opt, type, len;",
          "233:     magic = cpu_to_be64(NBD_REP_MAGIC);",
          "234:     if (nbd_negotiate_write(ioc, &magic, sizeof(magic)) != sizeof(magic)) {",
          "235:         LOG(\"write failed (magic)\");",
          "",
          "[Removed Lines]",
          "228:     uint64_t magic, name_len;",
          "231:     TRACE(\"Advertising export name '%s'\", exp->name ? exp->name : \"\");",
          "232:     name_len = strlen(exp->name);",
          "",
          "[Added Lines]",
          "230:     uint64_t magic;",
          "231:     size_t name_len, desc_len;",
          "233:     const char *name = exp->name ? exp->name : \"\";",
          "234:     const char *desc = exp->description ? exp->description : \"\";",
          "236:     TRACE(\"Advertising export name '%s' description '%s'\", name, desc);",
          "237:     name_len = strlen(name);",
          "238:     desc_len = strlen(desc);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "245:         LOG(\"write failed (reply type)\");",
          "246:         return -EINVAL;",
          "247:     }",
          "249:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) != sizeof(len)) {",
          "250:         LOG(\"write failed (length)\");",
          "251:         return -EINVAL;",
          "252:     }",
          "253:     len = cpu_to_be32(name_len);",
          "254:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) != sizeof(len)) {",
          "256:         return -EINVAL;",
          "257:     }",
          "260:         return -EINVAL;",
          "261:     }",
          "262:     return 0;",
          "",
          "[Removed Lines]",
          "248:     len = cpu_to_be32(name_len + sizeof(len));",
          "255:         LOG(\"write failed (length)\");",
          "258:     if (nbd_negotiate_write(ioc, exp->name, name_len) != name_len) {",
          "259:         LOG(\"write failed (buffer)\");",
          "",
          "[Added Lines]",
          "254:     len = cpu_to_be32(name_len + desc_len + sizeof(len));",
          "261:         LOG(\"write failed (name length)\");",
          "262:         return -EINVAL;",
          "263:     }",
          "264:     if (nbd_negotiate_write(ioc, name, name_len) != name_len) {",
          "265:         LOG(\"write failed (name buffer)\");",
          "268:     if (nbd_negotiate_write(ioc, desc, desc_len) != desc_len) {",
          "269:         LOG(\"write failed (description buffer)\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "894:     nbd_export_put(exp);",
          "895: }",
          "897: void nbd_export_close(NBDExport *exp)",
          "898: {",
          "899:     NBDClient *client, *next;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "907: void nbd_export_set_description(NBDExport *exp, const char *description)",
          "908: {",
          "909:     g_free(exp->description);",
          "910:     exp->description = g_strdup(description);",
          "911: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "903:         client_close(client);",
          "904:     }",
          "905:     nbd_export_set_name(exp, NULL);",
          "906:     nbd_export_put(exp);",
          "907: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "922:     nbd_export_set_description(exp, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "922:     if (--exp->refcount == 0) {",
          "923:         assert(exp->name == NULL);",
          "925:         if (exp->close) {",
          "926:             exp->close(exp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941:         assert(exp->description == NULL);",
          "",
          "---------------"
        ],
        "qemu-nbd.c||qemu-nbd.c": [
          "File: qemu-nbd.c -> qemu-nbd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: \"  -t, --persistent          don't exit on the last connection\\n\"",
          "84: \"  -v, --verbose             display extra debugging information\\n\"",
          "85: \"  -x, --export-name=NAME    expose export by name\\n\"",
          "86: \"\\n\"",
          "87: \"Exposing part of the image:\\n\"",
          "88: \"  -o, --offset=OFFSET       offset into the image\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: \"  -D, --description=TEXT    with -x, also export a human-readable description\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:     off_t fd_size;",
          "478:     QemuOpts *sn_opts = NULL;",
          "479:     const char *sn_id_or_name = NULL;",
          "481:     struct option lopt[] = {",
          "482:         { \"help\", no_argument, NULL, 'h' },",
          "483:         { \"version\", no_argument, NULL, 'V' },",
          "",
          "[Removed Lines]",
          "480:     const char *sopt = \"hVb:o:p:rsnP:c:dvk:e:f:tl:x:T:\";",
          "",
          "[Added Lines]",
          "481:     const char *sopt = \"hVb:o:p:rsnP:c:dvk:e:f:tl:x:T:D:\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "503:         { \"verbose\", no_argument, NULL, 'v' },",
          "504:         { \"object\", required_argument, NULL, QEMU_NBD_OPT_OBJECT },",
          "505:         { \"export-name\", required_argument, NULL, 'x' },",
          "506:         { \"tls-creds\", required_argument, NULL, QEMU_NBD_OPT_TLSCREDS },",
          "507:         { \"image-opts\", no_argument, NULL, QEMU_NBD_OPT_IMAGE_OPTS },",
          "508:         { \"trace\", required_argument, NULL, 'T' },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:         { \"description\", required_argument, NULL, 'D' },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "524:     BlockdevDetectZeroesOptions detect_zeroes = BLOCKDEV_DETECT_ZEROES_OPTIONS_OFF;",
          "525:     QDict *options = NULL;",
          "526:     const char *export_name = NULL;",
          "527:     const char *tlscredsid = NULL;",
          "528:     bool imageOpts = false;",
          "529:     bool writethrough = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529:     const char *export_description = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "689:         case 'x':",
          "690:             export_name = optarg;",
          "691:             break;",
          "692:         case 'v':",
          "693:             verbose = 1;",
          "694:             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "695:         case 'D':",
          "696:             export_description = optarg;",
          "697:             break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "937:     }",
          "938:     if (export_name) {",
          "939:         nbd_export_set_name(exp, export_name);",
          "940:         newproto = true;",
          "941:     }",
          "943:     server_ioc = qio_channel_socket_new();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "946:         nbd_export_set_description(exp, export_description);",
          "948:     } else if (export_description) {",
          "949:         error_report(\"Export description requires an export name\");",
          "950:         exit(EXIT_FAILURE);",
          "",
          "---------------"
        ],
        "qemu-nbd.texi||qemu-nbd.texi": [
          "File: qemu-nbd.texi -> qemu-nbd.texi",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: Allow up to @var{num} clients to share the device (default @samp{1})",
          "80: @item -t, --persistent",
          "81: Don't exit on the last connection",
          "83: Set the NBD volume export name. This switches the server to use",
          "84: the new style NBD protocol negotiation",
          "85: @item --tls-creds=ID",
          "86: Enable mandatory TLS encryption for the server by setting the ID",
          "87: of the TLS credentials object previously created with the --object",
          "",
          "[Removed Lines]",
          "82: @item -x NAME, --export-name=NAME",
          "",
          "[Added Lines]",
          "82: @item -x, --export-name=@var{name}",
          "85: @item -D, --description=@var{description}",
          "86: Set the NBD volume export description, as a human-readable",
          "87: string. Requires the use of @option{-x}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6f5d3b573fe43da1f9fa07b7454e4492f409411",
      "candidate_info": {
        "commit_hash": "b6f5d3b573fe43da1f9fa07b7454e4492f409411",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/b6f5d3b573fe43da1f9fa07b7454e4492f409411",
        "files": [
          "include/block/nbd.h",
          "include/qemu/osdep.h",
          "nbd/client.c",
          "nbd/nbd-internal.h",
          "nbd/server.c"
        ],
        "message": "nbd: Improve server handling of shutdown requests\n\nNBD commit 6d34500b clarified how clients and servers are supposed\nto behave before closing a connection. It added NBD_REP_ERR_SHUTDOWN\n(for the server to announce it is about to go away during option\nhaggling, so the client should quit sending NBD_OPT_* other than\nNBD_OPT_ABORT) and ESHUTDOWN (for the server to announce it is about\nto go away during transmission, so the client should quit sending\nNBD_CMD_* other than NBD_CMD_DISC).  It also clarified that\nNBD_OPT_ABORT gets a reply, while NBD_CMD_DISC does not.\n\nThis patch merely adds the missing reply to NBD_OPT_ABORT and teaches\nthe client to recognize server errors.  Actually teaching the server\nto send NBD_REP_ERR_SHUTDOWN or ESHUTDOWN would require knowing that\nthe server has been requested to shut down soon (maybe we could do\nthat by installing a SIGINT handler in qemu-nbd, which transitions\nfrom RUNNING to a new state that waits for the client to react,\nrather than just out-right quitting - but that's a bigger task for\nanother day).\n\nSigned-off-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <1476469998-28592-15-git-send-email-eblake@redhat.com>\n[Move dummy ESHUTDOWN to include/qemu/osdep.h. - Paolo]\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "include/block/nbd.h||include/block/nbd.h",
          "include/qemu/osdep.h||include/qemu/osdep.h",
          "nbd/client.c||nbd/client.c",
          "nbd/nbd-internal.h||nbd/nbd-internal.h",
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "include/block/nbd.h||include/block/nbd.h": [
          "File: include/block/nbd.h -> include/block/nbd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: #define NBD_CMD_FLAG_FUA        (1 << 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: #define NBD_REP_ERR(value) ((UINT32_C(1) << 31) | (value))",
          "",
          "---------------"
        ],
        "include/qemu/osdep.h||include/qemu/osdep.h": [
          "File: include/qemu/osdep.h -> include/qemu/osdep.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: #if !defined(EMEDIUMTYPE)",
          "129: #define EMEDIUMTYPE 4098",
          "130: #endif",
          "131: #ifndef TIME_MAX",
          "132: #define TIME_MAX LONG_MAX",
          "133: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: #if !defined(ESHUTDOWN)",
          "132: #define ESHUTDOWN 4099",
          "133: #endif",
          "",
          "---------------"
        ],
        "nbd/client.c||nbd/client.c": [
          "File: nbd/client.c -> nbd/client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     case NBD_ENOSPC:",
          "41:         ret = ENOSPC;",
          "42:         break;",
          "43:     default:",
          "44:         TRACE(\"Squashing unexpected error %d to EINVAL\", err);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     case NBD_ESHUTDOWN:",
          "44:         ret = ESHUTDOWN;",
          "45:         break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:                    reply->option);",
          "240:         break;",
          "242:     case NBD_REP_ERR_TLS_REQD:",
          "243:         error_setg(errp, \"TLS negotiation required before option %\" PRIx32,",
          "244:                    reply->option);",
          "245:         break;",
          "247:     default:",
          "248:         error_setg(errp, \"Unknown error code when asking for option %\" PRIx32,",
          "249:                    reply->option);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:     case NBD_REP_ERR_PLATFORM:",
          "246:         error_setg(errp, \"Server lacks support for option %\" PRIx32,",
          "247:                    reply->option);",
          "248:         break;",
          "255:     case NBD_REP_ERR_SHUTDOWN:",
          "256:         error_setg(errp, \"Server shutting down before option %\" PRIx32,",
          "257:                    reply->option);",
          "258:         break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "786:     reply->error = nbd_errno_to_system_errno(reply->error);",
          "788:     TRACE(\"Got reply: { magic = 0x%\" PRIx32 \", .error = % \" PRId32",
          "789:           \", handle = %\" PRIu64\" }\",",
          "790:           magic, reply->error, reply->handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "801:     if (reply->error == ESHUTDOWN) {",
          "803:         LOG(\"server shutting down\");",
          "804:         return -EINVAL;",
          "805:     }",
          "",
          "---------------"
        ],
        "nbd/nbd-internal.h||nbd/nbd-internal.h": [
          "File: nbd/nbd-internal.h -> nbd/nbd-internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: #define NBD_ENOMEM     12",
          "93: #define NBD_EINVAL     22",
          "94: #define NBD_ENOSPC     28",
          "96: static inline ssize_t read_sync(QIOChannel *ioc, void *buffer, size_t size)",
          "97: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: #define NBD_ESHUTDOWN  108",
          "",
          "---------------"
        ],
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     case EFBIG:",
          "40:     case ENOSPC:",
          "41:         return NBD_ENOSPC;",
          "42:     case EINVAL:",
          "43:     default:",
          "44:         return NBD_EINVAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     case ESHUTDOWN:",
          "43:         return NBD_ESHUTDOWN;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:                 if (ret < 0) {",
          "528:                     return ret;",
          "529:                 }",
          "530:                 break;",
          "531:             }",
          "532:         } else if (fixedNewstyle) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "533:                 if (clientflags == NBD_OPT_ABORT) {",
          "534:                     return -EINVAL;",
          "535:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "539:                 break;",
          "541:             case NBD_OPT_ABORT:",
          "542:                 return -EINVAL;",
          "544:             case NBD_OPT_EXPORT_NAME:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:                 nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK, clientflags);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2fd2c8407ea508e0fac0beb1aa0ec52d6964749c",
      "candidate_info": {
        "commit_hash": "2fd2c8407ea508e0fac0beb1aa0ec52d6964749c",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/2fd2c8407ea508e0fac0beb1aa0ec52d6964749c",
        "files": [
          "nbd/server.c"
        ],
        "message": "nbd/server: use errp instead of LOG\n\nMove to modern errp scheme from just LOGging errors.\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nMessage-Id: <20170707152918.23086-4-vsementsov@virtuozzo.com>\nSigned-off-by: Eric Blake <eblake@redhat.com>",
        "before_after_code_files": [
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: static int nbd_negotiate_send_rep_len(QIOChannel *ioc, uint32_t type,",
          "138: {",
          "139:     uint64_t magic;",
          "",
          "[Removed Lines]",
          "137:                                       uint32_t opt, uint32_t len)",
          "",
          "[Added Lines]",
          "137:                                       uint32_t opt, uint32_t len, Error **errp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:           type, opt, len);",
          "144:     magic = cpu_to_be64(NBD_REP_MAGIC);",
          "147:         return -EINVAL;",
          "148:     }",
          "149:     opt = cpu_to_be32(opt);",
          "152:         return -EINVAL;",
          "153:     }",
          "154:     type = cpu_to_be32(type);",
          "157:         return -EINVAL;",
          "158:     }",
          "159:     len = cpu_to_be32(len);",
          "162:         return -EINVAL;",
          "163:     }",
          "164:     return 0;",
          "",
          "[Removed Lines]",
          "145:     if (nbd_write(ioc, &magic, sizeof(magic), NULL) < 0) {",
          "146:         LOG(\"write failed (rep magic)\");",
          "150:     if (nbd_write(ioc, &opt, sizeof(opt), NULL) < 0) {",
          "151:         LOG(\"write failed (rep opt)\");",
          "155:     if (nbd_write(ioc, &type, sizeof(type), NULL) < 0) {",
          "156:         LOG(\"write failed (rep type)\");",
          "160:     if (nbd_write(ioc, &len, sizeof(len), NULL) < 0) {",
          "161:         LOG(\"write failed (rep data length)\");",
          "",
          "[Added Lines]",
          "145:     if (nbd_write(ioc, &magic, sizeof(magic), errp) < 0) {",
          "146:         error_prepend(errp, \"write failed (rep magic): \");",
          "151:     if (nbd_write(ioc, &opt, sizeof(opt), errp) < 0) {",
          "152:         error_prepend(errp, \"write failed (rep opt): \");",
          "157:     if (nbd_write(ioc, &type, sizeof(type), errp) < 0) {",
          "158:         error_prepend(errp, \"write failed (rep type): \");",
          "163:     if (nbd_write(ioc, &len, sizeof(len), errp) < 0) {",
          "164:         error_prepend(errp, \"write failed (rep data length): \");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170: {",
          "172: }",
          "177: nbd_negotiate_send_rep_err(QIOChannel *ioc, uint32_t type,",
          "179: {",
          "180:     va_list va;",
          "181:     char *msg;",
          "",
          "[Removed Lines]",
          "169: static int nbd_negotiate_send_rep(QIOChannel *ioc, uint32_t type, uint32_t opt)",
          "171:     return nbd_negotiate_send_rep_len(ioc, type, opt, 0);",
          "176: static int GCC_FMT_ATTR(4, 5)",
          "178:                            uint32_t opt, const char *fmt, ...)",
          "",
          "[Added Lines]",
          "172: static int nbd_negotiate_send_rep(QIOChannel *ioc, uint32_t type, uint32_t opt,",
          "173:                                   Error **errp)",
          "175:     return nbd_negotiate_send_rep_len(ioc, type, opt, 0, errp);",
          "180: static int GCC_FMT_ATTR(5, 6)",
          "182:                            uint32_t opt, Error **errp, const char *fmt, ...)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "188:     len = strlen(msg);",
          "189:     assert(len < 4096);",
          "190:     TRACE(\"sending error message \\\"%s\\\"\", msg);",
          "192:     if (ret < 0) {",
          "193:         goto out;",
          "194:     }",
          "197:         ret = -EIO;",
          "198:     } else {",
          "199:         ret = 0;",
          "200:     }",
          "201: out:",
          "202:     g_free(msg);",
          "203:     return ret;",
          "",
          "[Removed Lines]",
          "191:     ret = nbd_negotiate_send_rep_len(ioc, type, opt, len);",
          "195:     if (nbd_write(ioc, msg, len, NULL) < 0) {",
          "196:         LOG(\"write failed (error message)\");",
          "",
          "[Added Lines]",
          "195:     ret = nbd_negotiate_send_rep_len(ioc, type, opt, len, errp);",
          "199:     if (nbd_write(ioc, msg, len, errp) < 0) {",
          "200:         error_prepend(errp, \"write failed (error message): \");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "209: {",
          "210:     size_t name_len, desc_len;",
          "211:     uint32_t len;",
          "",
          "[Removed Lines]",
          "208: static int nbd_negotiate_send_rep_list(QIOChannel *ioc, NBDExport *exp)",
          "",
          "[Added Lines]",
          "213: static int nbd_negotiate_send_rep_list(QIOChannel *ioc, NBDExport *exp,",
          "214:                                        Error **errp)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "217:     name_len = strlen(name);",
          "218:     desc_len = strlen(desc);",
          "219:     len = name_len + desc_len + sizeof(len);",
          "221:     if (ret < 0) {",
          "222:         return ret;",
          "223:     }",
          "225:     len = cpu_to_be32(name_len);",
          "228:         return -EINVAL;",
          "229:     }",
          "232:         return -EINVAL;",
          "233:     }",
          "236:         return -EINVAL;",
          "237:     }",
          "238:     return 0;",
          "239: }",
          "244: {",
          "245:     NBDExport *exp;",
          "247:     if (length) {",
          "249:             return -EIO;",
          "250:         }",
          "251:         return nbd_negotiate_send_rep_err(client->ioc,",
          "252:                                           NBD_REP_ERR_INVALID, NBD_OPT_LIST,",
          "253:                                           \"OPT_LIST should not have length\");",
          "254:     }",
          "257:     QTAILQ_FOREACH(exp, &exports, next) {",
          "259:             return -EINVAL;",
          "260:         }",
          "261:     }",
          "264: }",
          "267: {",
          "268:     char name[NBD_MAX_NAME_SIZE + 1];",
          "",
          "[Removed Lines]",
          "220:     ret = nbd_negotiate_send_rep_len(ioc, NBD_REP_SERVER, NBD_OPT_LIST, len);",
          "226:     if (nbd_write(ioc, &len, sizeof(len), NULL) < 0) {",
          "227:         LOG(\"write failed (name length)\");",
          "230:     if (nbd_write(ioc, name, name_len, NULL) < 0) {",
          "231:         LOG(\"write failed (name buffer)\");",
          "234:     if (nbd_write(ioc, desc, desc_len, NULL) < 0) {",
          "235:         LOG(\"write failed (description buffer)\");",
          "243: static int nbd_negotiate_handle_list(NBDClient *client, uint32_t length)",
          "248:         if (nbd_drop(client->ioc, length, NULL) < 0) {",
          "258:         if (nbd_negotiate_send_rep_list(client->ioc, exp)) {",
          "263:     return nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK, NBD_OPT_LIST);",
          "266: static int nbd_negotiate_handle_export_name(NBDClient *client, uint32_t length)",
          "",
          "[Added Lines]",
          "226:     ret = nbd_negotiate_send_rep_len(ioc, NBD_REP_SERVER, NBD_OPT_LIST, len,",
          "227:                                      errp);",
          "233:     if (nbd_write(ioc, &len, sizeof(len), errp) < 0) {",
          "234:         error_prepend(errp, \"write failed (name length): \");",
          "238:     if (nbd_write(ioc, name, name_len, errp) < 0) {",
          "239:         error_prepend(errp, \"write failed (name buffer): \");",
          "243:     if (nbd_write(ioc, desc, desc_len, errp) < 0) {",
          "244:         error_prepend(errp, \"write failed (description buffer): \");",
          "253: static int nbd_negotiate_handle_list(NBDClient *client, uint32_t length,",
          "254:                                      Error **errp)",
          "259:         if (nbd_drop(client->ioc, length, errp) < 0) {",
          "264:                                           errp,",
          "270:         if (nbd_negotiate_send_rep_list(client->ioc, exp, errp)) {",
          "275:     return nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK, NBD_OPT_LIST, errp);",
          "278: static int nbd_negotiate_handle_export_name(NBDClient *client, uint32_t length,",
          "279:                                             Error **errp)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "273:     TRACE(\"Checking length\");",
          "274:     if (length >= sizeof(name)) {",
          "276:         return -EINVAL;",
          "277:     }",
          "280:         return -EINVAL;",
          "281:     }",
          "282:     name[length] = '\\0';",
          "",
          "[Removed Lines]",
          "275:         LOG(\"Bad length received\");",
          "278:     if (nbd_read(client->ioc, name, length, NULL) < 0) {",
          "279:         LOG(\"read failed\");",
          "",
          "[Added Lines]",
          "288:         error_setg(errp, \"Bad length received\");",
          "291:     if (nbd_read(client->ioc, name, length, errp) < 0) {",
          "292:         error_prepend(errp, \"read failed: \");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "286:     client->exp = nbd_export_find(name);",
          "287:     if (!client->exp) {",
          "289:         return -EINVAL;",
          "290:     }",
          "",
          "[Removed Lines]",
          "288:         LOG(\"export not found\");",
          "",
          "[Added Lines]",
          "301:         error_setg(errp, \"export not found\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "300: static QIOChannel *nbd_negotiate_handle_starttls(NBDClient *client,",
          "302: {",
          "303:     QIOChannel *ioc;",
          "304:     QIOChannelTLS *tioc;",
          "",
          "[Removed Lines]",
          "301:                                                  uint32_t length)",
          "",
          "[Added Lines]",
          "314:                                                  uint32_t length,",
          "315:                                                  Error **errp)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "307:     TRACE(\"Setting up TLS\");",
          "308:     ioc = client->ioc;",
          "309:     if (length) {",
          "311:             return NULL;",
          "312:         }",
          "313:         nbd_negotiate_send_rep_err(ioc, NBD_REP_ERR_INVALID, NBD_OPT_STARTTLS,",
          "314:                                    \"OPT_STARTTLS should not have length\");",
          "315:         return NULL;",
          "316:     }",
          "318:     if (nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK,",
          "320:         return NULL;",
          "321:     }",
          "323:     tioc = qio_channel_tls_new_server(ioc,",
          "324:                                       client->tlscreds,",
          "325:                                       client->tlsaclname,",
          "327:     if (!tioc) {",
          "328:         return NULL;",
          "329:     }",
          "",
          "[Removed Lines]",
          "310:         if (nbd_drop(ioc, length, NULL) < 0) {",
          "319:                                NBD_OPT_STARTTLS) < 0) {",
          "326:                                       NULL);",
          "",
          "[Added Lines]",
          "324:         if (nbd_drop(ioc, length, errp) < 0) {",
          "328:                                    errp,",
          "334:                                NBD_OPT_STARTTLS, errp) < 0) {",
          "341:                                       errp);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "342:     g_main_loop_unref(data.loop);",
          "343:     if (data.error) {",
          "344:         object_unref(OBJECT(tioc));",
          "346:         return NULL;",
          "347:     }",
          "",
          "[Removed Lines]",
          "345:         error_free(data.error);",
          "",
          "[Added Lines]",
          "360:         error_propagate(errp, data.error);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "360: {",
          "361:     uint32_t flags;",
          "362:     bool fixedNewstyle = false;",
          "365:         [ 0 ..   3]   client flags",
          "",
          "[Removed Lines]",
          "359: static int nbd_negotiate_options(NBDClient *client)",
          "",
          "[Added Lines]",
          "375: static int nbd_negotiate_options(NBDClient *client, Error **errp)",
          "379:     Error *local_err = NULL;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "375:         ...           Rest of request",
          "380:         return -EIO;",
          "381:     }",
          "382:     TRACE(\"Checking client flags\");",
          "",
          "[Removed Lines]",
          "378:     if (nbd_read(client->ioc, &flags, sizeof(flags), NULL) < 0) {",
          "379:         LOG(\"read failed\");",
          "",
          "[Added Lines]",
          "395:     if (nbd_read(client->ioc, &flags, sizeof(flags), errp) < 0) {",
          "396:         error_prepend(errp, \"read failed: \");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "392:         flags &= ~NBD_FLAG_C_NO_ZEROES;",
          "393:     }",
          "394:     if (flags != 0) {",
          "396:         return -EIO;",
          "397:     }",
          "",
          "[Removed Lines]",
          "395:         TRACE(\"Unknown client flags 0x%\" PRIx32 \" received\", flags);",
          "",
          "[Added Lines]",
          "412:         error_setg(errp, \"Unknown client flags 0x%\" PRIx32 \" received\", flags);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "401:         uint32_t clientflags, length;",
          "402:         uint64_t magic;",
          "406:             return -EINVAL;",
          "407:         }",
          "408:         TRACE(\"Checking opts magic\");",
          "409:         if (magic != be64_to_cpu(NBD_OPTS_MAGIC)) {",
          "411:             return -EINVAL;",
          "412:         }",
          "414:         if (nbd_read(client->ioc, &clientflags,",
          "418:             return -EINVAL;",
          "419:         }",
          "420:         clientflags = be32_to_cpu(clientflags);",
          "424:             return -EINVAL;",
          "425:         }",
          "426:         length = be32_to_cpu(length);",
          "",
          "[Removed Lines]",
          "404:         if (nbd_read(client->ioc, &magic, sizeof(magic), NULL) < 0) {",
          "405:             LOG(\"read failed\");",
          "410:             LOG(\"Bad magic received\");",
          "415:                       sizeof(clientflags), NULL) < 0)",
          "416:         {",
          "417:             LOG(\"read failed\");",
          "422:         if (nbd_read(client->ioc, &length, sizeof(length), NULL) < 0) {",
          "423:             LOG(\"read failed\");",
          "",
          "[Added Lines]",
          "421:         if (nbd_read(client->ioc, &magic, sizeof(magic), errp) < 0) {",
          "422:             error_prepend(errp, \"read failed: \");",
          "427:             error_setg(errp, \"Bad magic received\");",
          "432:                      sizeof(clientflags), errp) < 0) {",
          "433:             error_prepend(errp, \"read failed: \");",
          "438:         if (nbd_read(client->ioc, &length, sizeof(length), errp) < 0) {",
          "439:             error_prepend(errp, \"read failed: \");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "430:             client->ioc == (QIOChannel *)client->sioc) {",
          "431:             QIOChannel *tioc;",
          "432:             if (!fixedNewstyle) {",
          "434:                 return -EINVAL;",
          "435:             }",
          "436:             switch (clientflags) {",
          "437:             case NBD_OPT_STARTTLS:",
          "439:                 if (!tioc) {",
          "440:                     return -EIO;",
          "441:                 }",
          "",
          "[Removed Lines]",
          "433:                 TRACE(\"Unsupported option 0x%\" PRIx32, clientflags);",
          "438:                 tioc = nbd_negotiate_handle_starttls(client, length);",
          "",
          "[Added Lines]",
          "449:                 error_setg(errp, \"Unsupported option 0x%\" PRIx32, clientflags);",
          "454:                 tioc = nbd_negotiate_handle_starttls(client, length, errp);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "446:             case NBD_OPT_EXPORT_NAME:",
          "449:                 return -EINVAL;",
          "451:             default:",
          "453:                     return -EIO;",
          "454:                 }",
          "455:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
          "456:                                                  NBD_REP_ERR_TLS_REQD,",
          "458:                                                  \"Option 0x%\" PRIx32",
          "459:                                                  \"not permitted before TLS\",",
          "460:                                                  clientflags);",
          "",
          "[Removed Lines]",
          "448:                 TRACE(\"Option 0x%x not permitted before TLS\", clientflags);",
          "452:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
          "457:                                                  clientflags,",
          "",
          "[Added Lines]",
          "464:                 error_setg(errp, \"Option 0x%x not permitted before TLS\",",
          "465:                            clientflags);",
          "469:                 if (nbd_drop(client->ioc, length, errp) < 0) {",
          "474:                                                  clientflags, errp,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "470:         } else if (fixedNewstyle) {",
          "471:             switch (clientflags) {",
          "472:             case NBD_OPT_LIST:",
          "474:                 if (ret < 0) {",
          "475:                     return ret;",
          "476:                 }",
          "",
          "[Removed Lines]",
          "473:                 ret = nbd_negotiate_handle_list(client, length);",
          "",
          "[Added Lines]",
          "490:                 ret = nbd_negotiate_handle_list(client, length, errp);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "484:                 return 1;",
          "486:             case NBD_OPT_EXPORT_NAME:",
          "489:             case NBD_OPT_STARTTLS:",
          "491:                     return -EIO;",
          "492:                 }",
          "493:                 if (client->tlscreds) {",
          "494:                     ret = nbd_negotiate_send_rep_err(client->ioc,",
          "495:                                                      NBD_REP_ERR_INVALID,",
          "497:                                                      \"TLS already enabled\");",
          "498:                 } else {",
          "499:                     ret = nbd_negotiate_send_rep_err(client->ioc,",
          "500:                                                      NBD_REP_ERR_POLICY,",
          "502:                                                      \"TLS not configured\");",
          "503:                 }",
          "504:                 if (ret < 0) {",
          "",
          "[Removed Lines]",
          "483:                 nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK, clientflags);",
          "487:                 return nbd_negotiate_handle_export_name(client, length);",
          "490:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
          "496:                                                      clientflags,",
          "501:                                                      clientflags,",
          "",
          "[Added Lines]",
          "500:                 nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK, clientflags,",
          "501:                                        &local_err);",
          "503:                 if (local_err != NULL) {",
          "504:                     TRACE(\"Reply to NBD_OPT_ABORT request failed: %s\",",
          "505:                           error_get_pretty(local_err));",
          "506:                     error_free(local_err);",
          "507:                 }",
          "512:                 return nbd_negotiate_handle_export_name(client, length, errp);",
          "515:                 if (nbd_drop(client->ioc, length, errp) < 0) {",
          "521:                                                      clientflags, errp,",
          "526:                                                      clientflags, errp,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "506:                 }",
          "507:                 break;",
          "508:             default:",
          "510:                     return -EIO;",
          "511:                 }",
          "512:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
          "513:                                                  NBD_REP_ERR_UNSUP,",
          "515:                                                  \"Unsupported option 0x%\"",
          "516:                                                  PRIx32,",
          "517:                                                  clientflags);",
          "",
          "[Removed Lines]",
          "509:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
          "514:                                                  clientflags,",
          "",
          "[Added Lines]",
          "534:                 if (nbd_drop(client->ioc, length, errp) < 0) {",
          "539:                                                  clientflags, errp,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "528:             switch (clientflags) {",
          "529:             case NBD_OPT_EXPORT_NAME:",
          "532:             default:",
          "534:                 return -EINVAL;",
          "535:             }",
          "536:         }",
          "",
          "[Removed Lines]",
          "530:                 return nbd_negotiate_handle_export_name(client, length);",
          "533:                 TRACE(\"Unsupported option 0x%\" PRIx32, clientflags);",
          "",
          "[Added Lines]",
          "555:                 return nbd_negotiate_handle_export_name(client, length, errp);",
          "558:                 error_setg(errp, \"Unsupported option 0x%\" PRIx32, clientflags);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "547: {",
          "548:     char buf[8 + 8 + 8 + 128];",
          "549:     int ret;",
          "",
          "[Removed Lines]",
          "546: static coroutine_fn int nbd_negotiate(NBDClient *client)",
          "",
          "[Added Lines]",
          "572: static coroutine_fn int nbd_negotiate(NBDClient *client, Error **errp)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "585:         stq_be_p(buf + 16, client->exp->size);",
          "586:         stw_be_p(buf + 26, client->exp->nbdflags | myflags);",
          "590:             return -EINVAL;",
          "591:         }",
          "592:     } else {",
          "593:         stq_be_p(buf + 8, NBD_OPTS_MAGIC);",
          "594:         stw_be_p(buf + 16, NBD_FLAG_FIXED_NEWSTYLE | NBD_FLAG_NO_ZEROES);",
          "598:             return -EINVAL;",
          "599:         }",
          "601:         if (ret != 0) {",
          "603:             return ret;",
          "604:         }",
          "",
          "[Removed Lines]",
          "588:         if (nbd_write(client->ioc, buf, sizeof(buf), NULL) < 0) {",
          "589:             LOG(\"write failed\");",
          "596:         if (nbd_write(client->ioc, buf, 18, NULL) < 0) {",
          "597:             LOG(\"write failed\");",
          "600:         ret = nbd_negotiate_options(client);",
          "602:             LOG(\"option negotiation failed\");",
          "",
          "[Added Lines]",
          "614:         if (nbd_write(client->ioc, buf, sizeof(buf), errp) < 0) {",
          "615:             error_prepend(errp, \"write failed: \");",
          "622:         if (nbd_write(client->ioc, buf, 18, errp) < 0) {",
          "623:             error_prepend(errp, \"write failed: \");",
          "626:         ret = nbd_negotiate_options(client, errp);",
          "628:             if (ret < 0) {",
          "629:                 error_prepend(errp, \"option negotiation failed: \");",
          "630:             }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "608:         stq_be_p(buf + 18, client->exp->size);",
          "609:         stw_be_p(buf + 26, client->exp->nbdflags | myflags);",
          "610:         len = client->no_zeroes ? 10 : sizeof(buf) - 18;",
          "612:         if (ret < 0) {",
          "614:             return ret;",
          "615:         }",
          "616:     }",
          "",
          "[Removed Lines]",
          "611:         ret = nbd_write(client->ioc, buf + 18, len, NULL);",
          "613:             LOG(\"write failed\");",
          "",
          "[Added Lines]",
          "639:         ret = nbd_write(client->ioc, buf + 18, len, errp);",
          "641:             error_prepend(errp, \"write failed: \");",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "620:     return 0;",
          "621: }",
          "624: {",
          "625:     uint8_t buf[NBD_REQUEST_SIZE];",
          "626:     uint32_t magic;",
          "627:     int ret;",
          "630:     if (ret < 0) {",
          "631:         return ret;",
          "632:     }",
          "",
          "[Removed Lines]",
          "623: static int nbd_receive_request(QIOChannel *ioc, NBDRequest *request)",
          "629:     ret = nbd_read(ioc, buf, sizeof(buf), NULL);",
          "",
          "[Added Lines]",
          "651: static int nbd_receive_request(QIOChannel *ioc, NBDRequest *request,",
          "652:                                Error **errp)",
          "658:     ret = nbd_read(ioc, buf, sizeof(buf), errp);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "652:           magic, request->flags, request->type, request->from, request->len);",
          "654:     if (magic != NBD_REQUEST_MAGIC) {",
          "656:         return -EINVAL;",
          "657:     }",
          "658:     return 0;",
          "",
          "[Removed Lines]",
          "655:         LOG(\"invalid magic (got 0x%\" PRIx32 \")\", magic);",
          "",
          "[Added Lines]",
          "684:         error_setg(errp, \"invalid magic (got 0x%\" PRIx32 \")\", magic);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1002: {",
          "1003:     NBDClient *client = req->client;",
          "1005:     g_assert(qemu_in_coroutine());",
          "1006:     assert(client->recv_coroutine == qemu_coroutine_self());",
          "1008:         return -EIO;",
          "1009:     }",
          "",
          "[Removed Lines]",
          "1001: static int nbd_co_receive_request(NBDRequestData *req, NBDRequest *request)",
          "1007:     if (nbd_receive_request(client->ioc, request) < 0) {",
          "",
          "[Added Lines]",
          "1030: static int nbd_co_receive_request(NBDRequestData *req, NBDRequest *request,",
          "1031:                                   Error **errp)",
          "1037:     if (nbd_receive_request(client->ioc, request, errp) < 0) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1028:     if ((request->from + request->len) < request->from) {",
          "1030:         return -EINVAL;",
          "1031:     }",
          "1033:     if (request->type == NBD_CMD_READ || request->type == NBD_CMD_WRITE) {",
          "1034:         if (request->len > NBD_MAX_BUFFER_SIZE) {",
          "1037:             return -EINVAL;",
          "1038:         }",
          "1040:         req->data = blk_try_blockalign(client->exp->blk, request->len);",
          "1041:         if (req->data == NULL) {",
          "1042:             return -ENOMEM;",
          "1043:         }",
          "1044:     }",
          "1045:     if (request->type == NBD_CMD_WRITE) {",
          "1046:         TRACE(\"Reading %\" PRIu32 \" byte(s)\", request->len);",
          "1050:             return -EIO;",
          "1051:         }",
          "1052:         req->complete = true;",
          "",
          "[Removed Lines]",
          "1029:         LOG(\"integer overflow detected, you're probably being attacked\");",
          "1035:             LOG(\"len (%\" PRIu32\" ) is larger than max len (%u)\",",
          "1036:                 request->len, NBD_MAX_BUFFER_SIZE);",
          "1048:         if (nbd_read(client->ioc, req->data, request->len, NULL) < 0) {",
          "1049:             LOG(\"reading from socket failed\");",
          "",
          "[Added Lines]",
          "1059:         error_setg(errp,",
          "1060:                    \"integer overflow detected, you're probably being attacked\");",
          "1066:             error_setg(errp, \"len (%\" PRIu32\" ) is larger than max len (%u)\",",
          "1067:                        request->len, NBD_MAX_BUFFER_SIZE);",
          "1073:             error_setg(errp, \"No memory\");",
          "1080:         if (nbd_read(client->ioc, req->data, request->len, errp) < 0) {",
          "1081:             error_prepend(errp, \"reading from socket failed: \");",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1056:     if (request->from + request->len > client->exp->size) {",
          "1060:         return request->type == NBD_CMD_WRITE ? -ENOSPC : -EINVAL;",
          "1061:     }",
          "1062:     if (request->flags & ~(NBD_CMD_FLAG_FUA | NBD_CMD_FLAG_NO_HOLE)) {",
          "1064:         return -EINVAL;",
          "1065:     }",
          "1066:     if (request->type != NBD_CMD_WRITE_ZEROES &&",
          "1067:         (request->flags & NBD_CMD_FLAG_NO_HOLE)) {",
          "1069:         return -EINVAL;",
          "1070:     }",
          "",
          "[Removed Lines]",
          "1057:         LOG(\"operation past EOF; From: %\" PRIu64 \", Len: %\" PRIu32",
          "1058:             \", Size: %\" PRIu64, request->from, request->len,",
          "1059:             (uint64_t)client->exp->size);",
          "1063:         LOG(\"unsupported flags (got 0x%x)\", request->flags);",
          "1068:         LOG(\"unexpected flags (got 0x%x)\", request->flags);",
          "",
          "[Added Lines]",
          "1089:         error_setg(errp, \"operation past EOF; From: %\" PRIu64 \", Len: %\" PRIu32",
          "1090:                    \", Size: %\" PRIu64, request->from, request->len,",
          "1091:                    (uint64_t)client->exp->size);",
          "1095:         error_setg(errp, \"unsupported flags (got 0x%x)\", request->flags);",
          "1100:         error_setg(errp, \"unexpected flags (got 0x%x)\", request->flags);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1083:     int ret;",
          "1084:     int flags;",
          "1085:     int reply_data_len = 0;",
          "1087:     TRACE(\"Reading request.\");",
          "1088:     if (client->closing) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1118:     Error *local_err = NULL;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1091:     }",
          "1093:     req = nbd_request_get(client);",
          "1095:     client->recv_coroutine = NULL;",
          "1096:     nbd_client_receive_next_request(client);",
          "1097:     if (ret == -EIO) {",
          "",
          "[Removed Lines]",
          "1094:     ret = nbd_co_receive_request(req, &request);",
          "",
          "[Added Lines]",
          "1127:     ret = nbd_co_receive_request(req, &request, &local_err);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1122:         if (request.flags & NBD_CMD_FLAG_FUA) {",
          "1123:             ret = blk_co_flush(exp->blk);",
          "1124:             if (ret < 0) {",
          "1126:                 reply.error = -ret;",
          "1127:                 break;",
          "1128:             }",
          "",
          "[Removed Lines]",
          "1125:                 LOG(\"flush failed\");",
          "",
          "[Added Lines]",
          "1158:                 error_setg_errno(&local_err, -ret, \"flush failed\");",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1131:         ret = blk_pread(exp->blk, request.from + exp->dev_offset,",
          "1132:                         req->data, request.len);",
          "1133:         if (ret < 0) {",
          "1135:             reply.error = -ret;",
          "1136:             break;",
          "1137:         }",
          "",
          "[Removed Lines]",
          "1134:             LOG(\"reading from file failed\");",
          "",
          "[Added Lines]",
          "1167:             error_setg_errno(&local_err, -ret, \"reading from file failed\");",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1158:         ret = blk_pwrite(exp->blk, request.from + exp->dev_offset,",
          "1159:                          req->data, request.len, flags);",
          "1160:         if (ret < 0) {",
          "1162:             reply.error = -ret;",
          "1163:         }",
          "",
          "[Removed Lines]",
          "1161:             LOG(\"writing to file failed\");",
          "",
          "[Added Lines]",
          "1194:             error_setg_errno(&local_err, -ret, \"writing to file failed\");",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1167:         TRACE(\"Request type is WRITE_ZEROES\");",
          "1169:         if (exp->nbdflags & NBD_FLAG_READ_ONLY) {",
          "1171:             reply.error = EROFS;",
          "1172:             break;",
          "1173:         }",
          "",
          "[Removed Lines]",
          "1170:             TRACE(\"Server is read-only, return error\");",
          "",
          "[Added Lines]",
          "1203:             error_setg(&local_err, \"Server is read-only, return error\");",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1184:         ret = blk_pwrite_zeroes(exp->blk, request.from + exp->dev_offset,",
          "1185:                                 request.len, flags);",
          "1186:         if (ret < 0) {",
          "1188:             reply.error = -ret;",
          "1189:         }",
          "",
          "[Removed Lines]",
          "1187:             LOG(\"writing to file failed\");",
          "",
          "[Added Lines]",
          "1220:             error_setg_errno(&local_err, -ret, \"writing to file failed\");",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1199:         ret = blk_co_flush(exp->blk);",
          "1200:         if (ret < 0) {",
          "1202:             reply.error = -ret;",
          "1203:         }",
          "",
          "[Removed Lines]",
          "1201:             LOG(\"flush failed\");",
          "",
          "[Added Lines]",
          "1234:             error_setg_errno(&local_err, -ret, \"flush failed\");",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1208:         ret = blk_co_pdiscard(exp->blk, request.from + exp->dev_offset,",
          "1209:                               request.len);",
          "1210:         if (ret < 0) {",
          "1212:             reply.error = -ret;",
          "1213:         }",
          "1215:         break;",
          "1216:     default:",
          "1218:         reply.error = EINVAL;",
          "1219:     }",
          "1221: reply:",
          "1226:         goto disconnect;",
          "1227:     }",
          "",
          "[Removed Lines]",
          "1211:             LOG(\"discard failed\");",
          "1217:         LOG(\"invalid request type (%\" PRIu32 \") received\", request.type);",
          "1225:     if (nbd_co_send_reply(req, &reply, reply_data_len) < 0 || !req->complete) {",
          "",
          "[Added Lines]",
          "1244:             error_setg_errno(&local_err, -ret, \"discard failed\");",
          "1250:         error_setg(&local_err, \"invalid request type (%\" PRIu32 \") received\",",
          "1251:                    request.type);",
          "1256:     if (local_err) {",
          "1259:         error_report_err(local_err);",
          "1260:         local_err = NULL;",
          "1261:     }",
          "1263:     if (nbd_co_send_reply(req, &reply, reply_data_len) < 0) {",
          "1264:         error_setg(&local_err, \"Failed to send reply\");",
          "1265:         goto disconnect;",
          "1266:     }",
          "1271:     if (!req->complete) {",
          "1272:         error_setg(&local_err, \"Request handling failed in intermediate state\");",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1234:     return;",
          "1236: disconnect:",
          "1237:     nbd_request_put(req);",
          "1238:     client_close(client, true);",
          "1239:     nbd_client_put(client);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1284:     if (local_err) {",
          "1285:         error_reportf_err(local_err, \"Disconnect client, due to: \");",
          "1286:     }",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1252: {",
          "1253:     NBDClient *client = opaque;",
          "1254:     NBDExport *exp = client->exp;",
          "1256:     if (exp) {",
          "1257:         nbd_export_get(exp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1305:     Error *local_err = NULL;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1259:     }",
          "1260:     qemu_co_mutex_init(&client->send_lock);",
          "1263:         client_close(client, false);",
          "1264:         return;",
          "1265:     }",
          "",
          "[Removed Lines]",
          "1262:     if (nbd_negotiate(client)) {",
          "",
          "[Added Lines]",
          "1313:     if (nbd_negotiate(client, &local_err)) {",
          "1314:         if (local_err) {",
          "1315:             error_report_err(local_err);",
          "1316:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d17922a28f5b9a8adcea3c93f49086e0a751e86",
      "candidate_info": {
        "commit_hash": "1d17922a28f5b9a8adcea3c93f49086e0a751e86",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/1d17922a28f5b9a8adcea3c93f49086e0a751e86",
        "files": [
          "nbd/server.c"
        ],
        "message": "nbd/server: structurize option reply sending\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nReviewed-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <20171122101958.17065-6-vsementsov@virtuozzo.com>\nSigned-off-by: Eric Blake <eblake@redhat.com>",
        "before_after_code_files": [
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: static int nbd_negotiate_send_rep_len(NBDClient *client, uint32_t type,",
          "143:                                       uint32_t len, Error **errp)",
          "144: {",
          "150:                                      type, nbd_rep_lookup(type), len);",
          "152:     assert(len < NBD_MAX_BUFFER_SIZE);",
          "177: }",
          "",
          "[Removed Lines]",
          "145:     uint64_t magic;",
          "146:     QIOChannel *ioc = client->ioc;",
          "147:     uint32_t opt = client->opt;",
          "149:     trace_nbd_negotiate_send_rep_len(opt, nbd_opt_lookup(opt),",
          "153:     magic = cpu_to_be64(NBD_REP_MAGIC);",
          "154:     if (nbd_write(ioc, &magic, sizeof(magic), errp) < 0) {",
          "155:         error_prepend(errp, \"write failed (rep magic): \");",
          "156:         return -EINVAL;",
          "157:     }",
          "159:     opt = cpu_to_be32(opt);",
          "160:     if (nbd_write(ioc, &opt, sizeof(opt), errp) < 0) {",
          "161:         error_prepend(errp, \"write failed (rep opt): \");",
          "162:         return -EINVAL;",
          "163:     }",
          "165:     type = cpu_to_be32(type);",
          "166:     if (nbd_write(ioc, &type, sizeof(type), errp) < 0) {",
          "167:         error_prepend(errp, \"write failed (rep type): \");",
          "168:         return -EINVAL;",
          "169:     }",
          "171:     len = cpu_to_be32(len);",
          "172:     if (nbd_write(ioc, &len, sizeof(len), errp) < 0) {",
          "173:         error_prepend(errp, \"write failed (rep data length): \");",
          "174:         return -EINVAL;",
          "175:     }",
          "176:     return 0;",
          "",
          "[Added Lines]",
          "140: static inline void set_be_option_rep(NBDOptionReply *rep, uint32_t option,",
          "141:                                      uint32_t type, uint32_t length)",
          "142: {",
          "143:     stq_be_p(&rep->magic, NBD_REP_MAGIC);",
          "144:     stl_be_p(&rep->option, option);",
          "145:     stl_be_p(&rep->type, type);",
          "146:     stl_be_p(&rep->length, length);",
          "147: }",
          "154:     NBDOptionReply rep;",
          "156:     trace_nbd_negotiate_send_rep_len(client->opt, nbd_opt_lookup(client->opt),",
          "161:     set_be_option_rep(&rep, client->opt, type, len);",
          "162:     return nbd_write(client->ioc, &rep, sizeof(rep), errp);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2cb347493c5a0c3634dc13942ba65fdcefbcd34b",
      "candidate_info": {
        "commit_hash": "2cb347493c5a0c3634dc13942ba65fdcefbcd34b",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/2cb347493c5a0c3634dc13942ba65fdcefbcd34b",
        "files": [
          "nbd/client.c",
          "nbd/server.c"
        ],
        "message": "nbd: More debug typo fixes, use correct formats\n\nClean up some debug message oddities missed earlier; this includes\nsome typos, and recognizing that %d is not necessarily compatible\nwith uint32_t. Also add a couple messages that I found useful\nwhile debugging things.\n\nSigned-off-by: Eric Blake <eblake@redhat.com>\n\nMessage-Id: <1463006384-7734-3-git-send-email-eblake@redhat.com>\n[Do not use PRIx16, clang complains. - Paolo]\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "nbd/client.c||nbd/client.c",
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/client.c||nbd/client.c": [
          "File: nbd/client.c -> nbd/client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     switch (type) {",
          "111:     case NBD_REP_ERR_UNSUP:",
          "114:         result = 0;",
          "115:         goto cleanup;",
          "117:     case NBD_REP_ERR_POLICY:",
          "119:         break;",
          "121:     case NBD_REP_ERR_INVALID:",
          "123:         break;",
          "125:     case NBD_REP_ERR_TLS_REQD:",
          "127:         break;",
          "129:     default:",
          "131:         break;",
          "132:     }",
          "",
          "[Removed Lines]",
          "112:         TRACE(\"server doesn't understand request %d, attempting fallback\",",
          "113:               opt);",
          "118:         error_setg(errp, \"Denied by server for option %x\", opt);",
          "122:         error_setg(errp, \"Invalid data length for option %x\", opt);",
          "126:         error_setg(errp, \"TLS negotiation required before option %x\", opt);",
          "130:         error_setg(errp, \"Unknown error code when asking for option %x\", opt);",
          "",
          "[Added Lines]",
          "112:         TRACE(\"server doesn't understand request %\" PRIx32",
          "113:               \", attempting fallback\", opt);",
          "118:         error_setg(errp, \"Denied by server for option %\" PRIx32, opt);",
          "122:         error_setg(errp, \"Invalid data length for option %\" PRIx32, opt);",
          "126:         error_setg(errp, \"TLS negotiation required before option %\" PRIx32,",
          "127:                    opt);",
          "131:         error_setg(errp, \"Unknown error code when asking for option %\" PRIx32,",
          "132:                    opt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     }",
          "166:     opt = be32_to_cpu(opt);",
          "167:     if (opt != NBD_OPT_LIST) {",
          "169:                    opt, NBD_OPT_LIST);",
          "170:         return -1;",
          "171:     }",
          "",
          "[Removed Lines]",
          "168:         error_setg(errp, \"Unexpected option type %x expected %x\",",
          "",
          "[Added Lines]",
          "170:         error_setg(errp, \"Unexpected option type %\" PRIx32 \" expected %x\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:             return -1;",
          "208:         }",
          "209:         if (namelen > 255) {",
          "211:             return -1;",
          "212:         }",
          "",
          "[Removed Lines]",
          "210:             error_setg(errp, \"export name length too long %d\", namelen);",
          "",
          "[Added Lines]",
          "212:             error_setg(errp, \"export name length too long %\" PRIu32, namelen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:             g_free(buf);",
          "235:         }",
          "236:     } else {",
          "238:                    type, NBD_REP_SERVER);",
          "239:         return -1;",
          "240:     }",
          "",
          "[Removed Lines]",
          "237:         error_setg(errp, \"Unexpected reply type %x expected %x\",",
          "",
          "[Added Lines]",
          "239:         error_setg(errp, \"Unexpected reply type %\" PRIx32 \" expected %x\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "349:     }",
          "350:     opt = be32_to_cpu(opt);",
          "351:     if (opt != NBD_OPT_STARTTLS) {",
          "353:                    opt, NBD_OPT_STARTTLS);",
          "354:         return NULL;",
          "355:     }",
          "",
          "[Removed Lines]",
          "352:         error_setg(errp, \"Unexpected option type %x expected %x\",",
          "",
          "[Added Lines]",
          "354:         error_setg(errp, \"Unexpected option type %\" PRIx32 \" expected %x\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "361:     }",
          "362:     type = be32_to_cpu(type);",
          "363:     if (type != NBD_REP_ACK) {",
          "365:                    type);",
          "366:         return NULL;",
          "367:     }",
          "",
          "[Removed Lines]",
          "364:         error_setg(errp, \"Server rejected request to start TLS %x\",",
          "",
          "[Added Lines]",
          "366:         error_setg(errp, \"Server rejected request to start TLS %\" PRIx32,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "373:     }",
          "374:     length = be32_to_cpu(length);",
          "375:     if (length != 0) {",
          "377:                    length);",
          "378:         return NULL;",
          "379:     }",
          "",
          "[Removed Lines]",
          "376:         error_setg(errp, \"Start TLS response was not zero %x\",",
          "",
          "[Added Lines]",
          "378:         error_setg(errp, \"Start TLS response was not zero %\" PRIu32,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "384:         return NULL;",
          "385:     }",
          "386:     data.loop = g_main_loop_new(g_main_context_default(), FALSE);",
          "388:     qio_channel_tls_handshake(tioc,",
          "389:                               nbd_tls_handshake,",
          "390:                               &data,",
          "",
          "[Removed Lines]",
          "387:     TRACE(\"Starting TLS hanshake\");",
          "",
          "[Added Lines]",
          "389:     TRACE(\"Starting TLS handshake\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "474:         }",
          "475:         globalflags = be16_to_cpu(globalflags);",
          "478:         if (globalflags & NBD_FLAG_FIXED_NEWSTYLE) {",
          "479:             fixedNewStyle = true;",
          "480:             TRACE(\"Server supports fixed new style\");",
          "",
          "[Removed Lines]",
          "477:         TRACE(\"Global flags are %x\", globalflags);",
          "",
          "[Added Lines]",
          "479:         TRACE(\"Global flags are %\" PRIx32, globalflags);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "550:         }",
          "551:         exportflags = be16_to_cpu(exportflags);",
          "554:     } else if (magic == NBD_CLIENT_MAGIC) {",
          "555:         if (name) {",
          "556:             error_setg(errp, \"Server does not support export names\");",
          "",
          "[Removed Lines]",
          "553:         TRACE(\"Export flags are %x\", exportflags);",
          "",
          "[Added Lines]",
          "555:         TRACE(\"Export flags are %\" PRIx16, exportflags);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "683:     ssize_t ret;",
          "685:     TRACE(\"Sending request to server: \"",
          "687:           request->from, request->len, request->handle, request->type);",
          "689:     stl_be_p(buf, NBD_REQUEST_MAGIC);",
          "",
          "[Removed Lines]",
          "686:           \"{ .from = %\" PRIu64\", .len = %u, .handle = %\" PRIu64\", .type=%i}\",",
          "",
          "[Added Lines]",
          "688:           \"{ .from = %\" PRIu64\", .len = %\" PRIu32 \", .handle = %\" PRIu64",
          "689:           \", .type=%\" PRIu16 \" }\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "733:     reply->error = nbd_errno_to_system_errno(reply->error);",
          "737:           magic, reply->error, reply->handle);",
          "739:     if (magic != NBD_REPLY_MAGIC) {",
          "741:         return -EINVAL;",
          "742:     }",
          "743:     return 0;",
          "",
          "[Removed Lines]",
          "735:     TRACE(\"Got reply: \"",
          "736:           \"{ magic = 0x%x, .error = %d, handle = %\" PRIu64\" }\",",
          "740:         LOG(\"invalid magic (got 0x%x)\", magic);",
          "",
          "[Added Lines]",
          "738:     TRACE(\"Got reply: { magic = 0x%\" PRIx32 \", .error = % \" PRId32",
          "739:           \", handle = %\" PRIu64\" }\",",
          "743:         LOG(\"invalid magic (got 0x%\" PRIx32 \")\", magic);",
          "",
          "---------------"
        ],
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     uint64_t magic;",
          "197:     uint32_t len;",
          "201:     magic = cpu_to_be64(NBD_REP_MAGIC);",
          "202:     if (nbd_negotiate_write(ioc, &magic, sizeof(magic)) != sizeof(magic)) {",
          "",
          "[Removed Lines]",
          "199:     TRACE(\"Reply opt=%x type=%x\", type, opt);",
          "",
          "[Added Lines]",
          "199:     TRACE(\"Reply opt=%\" PRIx32 \" type=%\" PRIx32, type, opt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:     uint64_t magic, name_len;",
          "227:     uint32_t opt, type, len;",
          "230:     name_len = strlen(exp->name);",
          "231:     magic = cpu_to_be64(NBD_REP_MAGIC);",
          "232:     if (nbd_negotiate_write(ioc, &magic, sizeof(magic)) != sizeof(magic)) {",
          "",
          "[Removed Lines]",
          "229:     TRACE(\"Advertizing export name '%s'\", exp->name ? exp->name : \"\");",
          "",
          "[Added Lines]",
          "229:     TRACE(\"Advertising export name '%s'\", exp->name ? exp->name : \"\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "392:     TRACE(\"Checking client flags\");",
          "393:     be32_to_cpus(&flags);",
          "394:     if (flags & NBD_FLAG_C_FIXED_NEWSTYLE) {",
          "396:         fixedNewstyle = true;",
          "397:         flags &= ~NBD_FLAG_C_FIXED_NEWSTYLE;",
          "398:     }",
          "399:     if (flags != 0) {",
          "401:         return -EIO;",
          "402:     }",
          "",
          "[Removed Lines]",
          "395:         TRACE(\"Support supports fixed newstyle handshake\");",
          "400:         TRACE(\"Unknown client flags 0x%x received\", flags);",
          "",
          "[Added Lines]",
          "395:         TRACE(\"Client supports fixed newstyle handshake\");",
          "400:         TRACE(\"Unknown client flags 0x%\" PRIx32 \" received\", flags);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "431:         }",
          "432:         length = be32_to_cpu(length);",
          "435:         if (client->tlscreds &&",
          "436:             client->ioc == (QIOChannel *)client->sioc) {",
          "437:             QIOChannel *tioc;",
          "438:             if (!fixedNewstyle) {",
          "440:                 return -EINVAL;",
          "441:             }",
          "442:             switch (clientflags) {",
          "",
          "[Removed Lines]",
          "434:         TRACE(\"Checking option 0x%x\", clientflags);",
          "439:                 TRACE(\"Unsupported option 0x%x\", clientflags);",
          "",
          "[Added Lines]",
          "434:         TRACE(\"Checking option 0x%\" PRIx32, clientflags);",
          "439:                 TRACE(\"Unsupported option 0x%\" PRIx32, clientflags);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "455:                 return -EINVAL;",
          "457:             default:",
          "459:                 if (nbd_negotiate_drop_sync(client->ioc, length) != length) {",
          "460:                     return -EIO;",
          "461:                 }",
          "",
          "[Removed Lines]",
          "458:                 TRACE(\"Option 0x%x not permitted before TLS\", clientflags);",
          "",
          "[Added Lines]",
          "458:                 TRACE(\"Option 0x%\" PRIx32 \" not permitted before TLS\",",
          "459:                       clientflags);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "493:                 }",
          "494:                 break;",
          "495:             default:",
          "497:                 if (nbd_negotiate_drop_sync(client->ioc, length) != length) {",
          "498:                     return -EIO;",
          "499:                 }",
          "",
          "[Removed Lines]",
          "496:                 TRACE(\"Unsupported option 0x%x\", clientflags);",
          "",
          "[Added Lines]",
          "497:                 TRACE(\"Unsupported option 0x%\" PRIx32, clientflags);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "511:                 return nbd_negotiate_handle_export_name(client, length);",
          "513:             default:",
          "515:                 return -EINVAL;",
          "516:             }",
          "517:         }",
          "",
          "[Removed Lines]",
          "514:                 TRACE(\"Unsupported option 0x%x\", clientflags);",
          "",
          "[Added Lines]",
          "515:                 TRACE(\"Unsupported option 0x%\" PRIx32, clientflags);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "560:     oldStyle = client->exp != NULL && !client->tlscreds;",
          "561:     if (oldStyle) {",
          "562:         assert ((client->exp->nbdflags & ~65535) == 0);",
          "563:         stq_be_p(buf + 8, NBD_CLIENT_MAGIC);",
          "564:         stq_be_p(buf + 16, client->exp->size);",
          "565:         stw_be_p(buf + 26, client->exp->nbdflags | myflags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:         TRACE(\"advertising size %\" PRIu64 \" and flags %x\",",
          "565:               client->exp->size, client->exp->nbdflags | myflags);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "589:         }",
          "591:         assert ((client->exp->nbdflags & ~65535) == 0);",
          "592:         stq_be_p(buf + 18, client->exp->size);",
          "593:         stw_be_p(buf + 26, client->exp->nbdflags | myflags);",
          "594:         if (nbd_negotiate_write(client->ioc, buf + 18, sizeof(buf) - 18) !=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595:         TRACE(\"advertising size %\" PRIu64 \" and flags %x\",",
          "596:               client->exp->size, client->exp->nbdflags | myflags);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "652:     request->from   = ldq_be_p(buf + 16);",
          "653:     request->len    = ldl_be_p(buf + 24);",
          "657:           magic, request->type, request->from, request->len);",
          "659:     if (magic != NBD_REQUEST_MAGIC) {",
          "661:         return -EINVAL;",
          "662:     }",
          "663:     return 0;",
          "",
          "[Removed Lines]",
          "655:     TRACE(\"Got request: \"",
          "656:           \"{ magic = 0x%x, .type = %d, from = %\" PRIu64\" , len = %u }\",",
          "660:         LOG(\"invalid magic (got 0x%x)\", magic);",
          "",
          "[Added Lines]",
          "660:     TRACE(\"Got request: { magic = 0x%\" PRIx32 \", .type = %\" PRIx32",
          "661:           \", from = %\" PRIu64 \" , len = %\" PRIu32 \" }\",",
          "665:         LOG(\"invalid magic (got 0x%\" PRIx32 \")\", magic);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "671:     reply->error = system_errno_to_nbd_errno(reply->error);",
          "674:           reply->error, reply->handle);",
          "",
          "[Removed Lines]",
          "673:     TRACE(\"Sending response to client: { .error = %d, handle = %\" PRIu64 \" }\",",
          "",
          "[Added Lines]",
          "678:     TRACE(\"Sending response to client: { .error = %\" PRId32",
          "679:           \", handle = %\" PRIu64 \" }\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "999:     command = request->type & NBD_CMD_MASK_COMMAND;",
          "1000:     if (command == NBD_CMD_READ || command == NBD_CMD_WRITE) {",
          "1001:         if (request->len > NBD_MAX_BUFFER_SIZE) {",
          "1003:                 request->len, NBD_MAX_BUFFER_SIZE);",
          "1004:             rc = -EINVAL;",
          "1005:             goto out;",
          "",
          "[Removed Lines]",
          "1002:             LOG(\"len (%u) is larger than max len (%u)\",",
          "",
          "[Added Lines]",
          "1008:             LOG(\"len (%\" PRIu32\" ) is larger than max len (%u)\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1012:         }",
          "1013:     }",
          "1014:     if (command == NBD_CMD_WRITE) {",
          "1017:         if (read_sync(client->ioc, req->data, request->len) != request->len) {",
          "1018:             LOG(\"reading from socket failed\");",
          "",
          "[Removed Lines]",
          "1015:         TRACE(\"Reading %u byte(s)\", request->len);",
          "",
          "[Added Lines]",
          "1021:         TRACE(\"Reading %\" PRIu32 \" byte(s)\", request->len);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1063:     }",
          "1064:     command = request.type & NBD_CMD_MASK_COMMAND;",
          "1065:     if (command != NBD_CMD_DISC && (request.from + request.len) > exp->size) {",
          "1070:         LOG(\"requested operation past EOF--bad client?\");",
          "1071:         goto invalid_request;",
          "1072:     }",
          "",
          "[Removed Lines]",
          "1066:             LOG(\"From: %\" PRIu64 \", Len: %u, Size: %\" PRIu64",
          "1067:             \", Offset: %\" PRIu64 \"\\n\",",
          "1068:                     request.from, request.len,",
          "1069:                     (uint64_t)exp->size, (uint64_t)exp->dev_offset);",
          "",
          "[Added Lines]",
          "1072:             LOG(\"From: %\" PRIu64 \", Len: %\" PRIu32\", Size: %\" PRIu64",
          "1073:                 \", Offset: %\" PRIu64 \"\\n\",",
          "1074:                 request.from, request.len,",
          "1075:                 (uint64_t)exp->size, (uint64_t)exp->dev_offset);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1100:             goto error_reply;",
          "1101:         }",
          "1104:         if (nbd_co_send_reply(req, &reply, request.len) < 0)",
          "1105:             goto out;",
          "1106:         break;",
          "",
          "[Removed Lines]",
          "1103:         TRACE(\"Read %u byte(s)\", request.len);",
          "",
          "[Added Lines]",
          "1109:         TRACE(\"Read %\" PRIu32\" byte(s)\", request.len);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1169:         }",
          "1170:         break;",
          "1171:     default:",
          "1173:     invalid_request:",
          "1174:         reply.error = EINVAL;",
          "1175:     error_reply:",
          "",
          "[Removed Lines]",
          "1172:         LOG(\"invalid request type (%u) received\", request.type);",
          "",
          "[Added Lines]",
          "1178:         LOG(\"invalid request type (%\" PRIu32 \") received\", request.type);",
          "",
          "---------------"
        ]
      }
    }
  ]
}