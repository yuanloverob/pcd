{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
      "candidate_info": {
        "commit_hash": "aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix another potential \"jump depends on uninitialized value\" warning.\n\nFossilOrigin-Name: 633b214e9b9d99788ed72ab4823a69a43c7c40ed07fb76c7d56c50453c0e58ab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b6751cd90601a1e2744a7d233c973291ecb783801b9327c3b99734dd22bcd27",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2268: ){",
          "2269:   WhereTerm *pTerm, *pX;",
          "2270:   Bitmask notAllowed = ~(pLoop->prereq|pLoop->maskSelf);",
          "2274:   assert( (pLoop->wsFlags & WHERE_AUTO_INDEX)==0 );",
          "",
          "[Removed Lines]",
          "2271:   int i, j, k;",
          "",
          "[Added Lines]",
          "2271:   int i, j;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2294:         pLoop->nOut--;",
          "2295:         if( pTerm->eOperator&(WO_EQ|WO_IS) ){",
          "2296:           Expr *pRight = pTerm->pExpr->pRight;",
          "2297:           testcase( pTerm->pExpr->op==TK_IS );",
          "2298:           if( sqlite3ExprIsInteger(pRight, &k) && k>=(-1) && k<=1 ){",
          "2299:             k = 10;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2297:           int k = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29e9af88484b2266189d694faa3eb3e69f0a7190",
      "candidate_info": {
        "commit_hash": "29e9af88484b2266189d694faa3eb3e69f0a7190",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29e9af88484b2266189d694faa3eb3e69f0a7190",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Change the way a comparison used to detect corrupt databases in fts3 is done to avoid potential pointer overflow in 32-bit builds.\n\nFossilOrigin-Name: 95a9a39ff784b960b62dd6298e722a620ba3f9c8b76839a49bbef35d7bc84a8e",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1413:    || (pReader->nPopulate==0 && pReader->aDoclist[pReader->nDoclist-1])",
          "1414:   ){",
          "1415:     return FTS_CORRUPT_VTAB;",
          "",
          "[Removed Lines]",
          "1412:   if( (&pReader->aNode[pReader->nNode] - pReader->aDoclist)<pReader->nDoclist",
          "",
          "[Added Lines]",
          "1412:   if( pReader->nDoclist-(pReader->aDoclist-pReader->aNode) > pReader->nNode",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b6494b1509f0d0189f98aa34c990eee99c775ff57826e79b2c5b0a12b4c97ad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab45fc041389b937cf82c20bec231905105f829d",
      "candidate_info": {
        "commit_hash": "ab45fc041389b937cf82c20bec231905105f829d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ab45fc041389b937cf82c20bec231905105f829d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h"
        ],
        "message": "INSERT with named columns for a table with generated columns.\n\nFossilOrigin-Name: 64db39f92d68d1b9f23e48af35e16b969c38b58041fbe900066eeb3ddb291cef",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 120c6b78cb51532f783014605f1107d40b2e4f54e3852fb1f8f167d0c0b78c69",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3382: ){",
          "3383:   Vdbe *v = pParse->pVdbe;",
          "3384:   assert( v!=0 );",
          "3385:   if( pTab==0 ){",
          "3386:     sqlite3VdbeAddOp3(v, OP_Column, iTabCur, iCol, regOut);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3384:   Column *pCol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3395:       op = OP_VColumn;",
          "3396:       x = iCol;",
          "3397: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3403:       return;",
          "3404: #endif",
          "3405:     }else if( !HasRowid(pTab) ){",
          "",
          "[Removed Lines]",
          "3398:     }else if( pTab->aCol[iCol].colFlags & COLFLAG_VIRTUAL ){",
          "3399:       int savedSelfTab = pParse->iSelfTab;",
          "3400:       pParse->iSelfTab = iTabCur+1;",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, regOut);",
          "3402:       pParse->iSelfTab = savedSelfTab;",
          "",
          "[Added Lines]",
          "3399:     }else if( (pCol = &pTab->aCol[iCol])->colFlags & COLFLAG_VIRTUAL ){",
          "3400:       if( pCol->colFlags & COLFLAG_BUSY ){",
          "3401:         sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\", pCol->zName);",
          "3402:       }else{",
          "3403:         int savedSelfTab = pParse->iSelfTab;",
          "3404:         pCol->colFlags |= COLFLAG_BUSY;",
          "3405:         pParse->iSelfTab = iTabCur+1;",
          "3406:         sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, regOut);",
          "3407:         pParse->iSelfTab = savedSelfTab;",
          "3408:         pCol->colFlags &= ~COLFLAG_BUSY;",
          "3409:       }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){",
          "134:   char *zColAff = pTab->zColAff;",
          "135:   if( zColAff==0 ){",
          "136:     sqlite3 *db = sqlite3VdbeDb(v);",
          "",
          "[Removed Lines]",
          "133:   int i;",
          "",
          "[Added Lines]",
          "133:   int i, j;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:       return;",
          "141:     }",
          "144:       assert( pTab->aCol[i].affinity!=0 );",
          "146:     }",
          "147:     do{",
          "150:     pTab->zColAff = zColAff;",
          "151:   }",
          "152:   assert( zColAff!=0 );",
          "",
          "[Removed Lines]",
          "143:     for(i=0; i<pTab->nCol; i++){",
          "145:       zColAff[i] = pTab->aCol[i].affinity;",
          "148:       zColAff[i--] = 0;",
          "149:     }while( i>=0 && zColAff[i]<=SQLITE_AFF_BLOB );",
          "",
          "[Added Lines]",
          "143:     for(i=j=0; i<pTab->nCol; i++){",
          "145:       if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ){",
          "146:         zColAff[j++] = pTab->aCol[i].affinity;",
          "147:       }",
          "150:       zColAff[j--] = 0;",
          "151:     }while( j>=0 && zColAff[j]<=SQLITE_AFF_BLOB );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1006:     nHidden = 0;",
          "1007:     iRegStore = regRowid+1;",
          "1008:     for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "1009:       if( i==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:       int k;",
          "1012:       assert( i>=nHidden );",
          "1013:       assert( iRegStore==sqlite3ColumnOfTable(pTab,i)+regRowid+1 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1015:         sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "1016:         continue;",
          "1017:       }",
          "1026:         }else{",
          "1032:         }",
          "1033:       }",
          "1035:         sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1038:       }else if( pSelect ){",
          "1039:         if( regFromSelect!=regData ){",
          "1041:         }",
          "1042:       }else{",
          "1044:       }",
          "1045:     }",
          "",
          "[Removed Lines]",
          "1018:       if( pColumn==0 ){",
          "1019:         if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ){",
          "1020:           j = -1;",
          "1021:           nHidden++;",
          "1022:           if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1023:             iRegStore--;",
          "1024:             continue;",
          "1025:           }",
          "1027:           j = i - nHidden;",
          "1028:         }",
          "1029:       }else{",
          "1030:         for(j=0; j<pColumn->nId; j++){",
          "1031:           if( pColumn->a[j].idx==i ) break;",
          "1034:       if( j<0 || nColumn==0 || (pColumn && j>=pColumn->nId) ){",
          "1036:       }else if( useTempTable ){",
          "1037:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, j, iRegStore);",
          "1040:           sqlite3VdbeAddOp2(v, OP_SCopy, regFromSelect+j, iRegStore);",
          "1043:         sqlite3ExprCode(pParse, pList->a[j].pExpr, iRegStore);",
          "",
          "[Added Lines]",
          "1023:       if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ){",
          "1024:         nHidden++;",
          "1025:         if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1027:           iRegStore--;",
          "1030:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1032:         continue;",
          "1034:       if( pColumn ){",
          "1035:         for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}",
          "1036:         if( j>=pColumn->nId ){",
          "1039:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1040:           continue;",
          "1041:         }",
          "1042:         k = j;",
          "1043:       }else if( nColumn==0 ){",
          "1045:         continue;",
          "1046:       }else{",
          "1047:         k = i - nHidden;",
          "1048:       }",
          "1050:       if( useTempTable ){",
          "1051:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, k, iRegStore);",
          "1054:           sqlite3VdbeAddOp2(v, OP_SCopy, regFromSelect+k, iRegStore);",
          "1057:         sqlite3ExprCode(pParse, pList->a[k].pExpr, iRegStore);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "323096175ee537ccf20ff370868170ebc32a2c32",
      "candidate_info": {
        "commit_hash": "323096175ee537ccf20ff370868170ebc32a2c32",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/323096175ee537ccf20ff370868170ebc32a2c32",
        "files": [
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove the vfslog.c extension from the testfixture target in main.mk, as that extension has no TCL bindings and is inaccessible.\n\nFossilOrigin-Name: d71f8bbc4efd8af935671c4e7626862d6e5a4c2e51527b9e82b2f0c94ddf6e93",
        "before_after_code_files": [
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:   $(TOP)/ext/misc/totype.c \\",
          "379:   $(TOP)/ext/misc/unionvtab.c \\",
          "380:   $(TOP)/ext/misc/wholenumber.c \\",
          "382:   $(TOP)/ext/misc/zipfile.c \\",
          "383:   $(TOP)/ext/fts5/fts5_tcl.c \\",
          "384:   $(TOP)/ext/fts5/fts5_test_mi.c \\",
          "",
          "[Removed Lines]",
          "381:   $(TOP)/ext/misc/vfslog.c \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 31eb27f438ad727b095a518bfe0f7ed37cb806fc1e6929b821eddcc6cc9de260",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a5f9bc49ce598fa3a3829f5f2c24179d1f44455",
      "candidate_info": {
        "commit_hash": "3a5f9bc49ce598fa3a3829f5f2c24179d1f44455",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3a5f9bc49ce598fa3a3829f5f2c24179d1f44455",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/delete.c",
          "src/sqliteInt.h",
          "test/altertab.test"
        ],
        "message": "More restrictions on changes to shadow tables when in defensive mode.\n\nFossilOrigin-Name: bae76a5c40703871e5ce4cd23d6fae5a3836606f524a63b01ac828c7a602c5e9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 70390bbca49e706649ca5b7c031f0baf416fc38798c17e5f3b73746b3e66e3b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: static int isAlterableTable(Parse *pParse, Table *pTab){",
          "32:   if( 0==sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)",
          "33: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "37:    )",
          "38: #endif",
          "39:   ){",
          "",
          "[Removed Lines]",
          "34:    || ( (pTab->tabFlags & TF_Shadow)",
          "35:      && (pParse->db->flags & SQLITE_Defensive)",
          "36:      && pParse->db->nVdbeExec==0",
          "",
          "[Added Lines]",
          "34:    || ( (pTab->tabFlags & TF_Shadow)!=0",
          "35:         && sqlite3ReadOnlyShadowTables(pParse->db)",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "856:       }",
          "857:     }",
          "858:   }else{",
          "861:     ){",
          "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
          "863:                       zName);",
          "864:       return SQLITE_ERROR;",
          "865:     }",
          "866:   }",
          "867:   return SQLITE_OK;",
          "868: }",
          "",
          "[Removed Lines]",
          "859:     if( pParse->nested==0",
          "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
          "",
          "[Added Lines]",
          "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
          "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
          "",
          "[Added Lines]",
          "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
          "2148:   return pMod->pModule->xShadowName(zTail+1);",
          "2149: }",
          "",
          "[Removed Lines]",
          "2150: #else",
          "2151: # define isShadowTableName(x,y) 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2190:   p = pParse->pNewTable;",
          "2191:   if( p==0 ) return;",
          "2194:     p->tabFlags |= TF_Shadow;",
          "2195:   }",
          "",
          "[Removed Lines]",
          "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "",
          "[Added Lines]",
          "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2894:   sqliteViewResetAll(db, iDb);",
          "2895: }",
          "2901:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0 ){",
          "2902:     if( sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)==0 ) return 0;",
          "2903:     if( sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)==0 ) return 0;",
          "2904:     return 1;",
          "2905:   }",
          "2909:   }",
          "2910:   return 0;",
          "2911: }",
          "",
          "[Removed Lines]",
          "2900: static int tableMayNotBeDropped(Parse *pParse, Table *pTab){",
          "2906:   if( pTab->tabFlags & TF_Shadow ){",
          "2907:     sqlite3 *db = pParse->db;",
          "2908:     if( (db->flags & SQLITE_Defensive)!=0 && db->nVdbeExec==0 ) return 1;",
          "",
          "[Added Lines]",
          "2900: int sqlite3ReadOnlyShadowTables(sqlite3 *db){",
          "2901: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "2902:   if( (db->flags & SQLITE_Defensive)!=0",
          "2903:    && db->pVtabCtx==0",
          "2904:    && db->nVdbeExec==0",
          "2905:   ){",
          "2906:     return 1;",
          "2907:   }",
          "2908: #endif",
          "2909:   return 0;",
          "2910: }",
          "2915: static int tableMayNotBeDropped(sqlite3 *db, Table *pTab){",
          "2921:   if( (pTab->tabFlags & TF_Shadow)!=0 && sqlite3ReadOnlyShadowTables(db) ){",
          "2922:     return 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2979:     }",
          "2980:   }",
          "2981: #endif",
          "2983:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2984:     goto exit_drop_table;",
          "2985:   }",
          "",
          "[Removed Lines]",
          "2982:   if( tableMayNotBeDropped(pParse, pTab) ){",
          "",
          "[Added Lines]",
          "2996:   if( tableMayNotBeDropped(db, pTab) ){",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     return sqlite3WritableSchema(db)==0 && pParse->nested==0;",
          "71:   }",
          "72:   assert( pTab->tabFlags & TF_Shadow );",
          "78: }",
          "",
          "[Removed Lines]",
          "73:   return (db->flags & SQLITE_Defensive)!=0",
          "74: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "75:           && db->pVtabCtx==0",
          "76: #endif",
          "77:           && db->nVdbeExec==0;",
          "",
          "[Added Lines]",
          "73:   return sqlite3ReadOnlyShadowTables(db);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4547:    );",
          "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
          "4549: #endif",
          "4550: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
          "4551: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
          "4552: void sqlite3VtabMakeWritable(Parse*,Table*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
          "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
          "4553: #else",
          "4554: # define sqlite3ShadowTableName(A,B) 0",
          "4555: #endif",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "547:   } {1 {table y1_segments may not be modified}}",
          "549:   do_catchsql_test 16.20 {",
          "554:     DROP TABLE y1_segments;",
          "555:   } {1 {table y1_segments may not be dropped}}",
          "557:   do_execsql_test 16.30 {",
          "558:     ALTER TABLE y1 RENAME TO z1;",
          "559:   }",
          "",
          "[Removed Lines]",
          "550:     ALTER TABLE y1_segments RENAME TO abc;",
          "551:   } {1 {table y1_segments may not be altered}}",
          "553:   do_catchsql_test 16.21 {",
          "",
          "[Added Lines]",
          "553:   do_catchsql_test 16.20 {",
          "554:     ALTER TABLE y1_segments RENAME TO abc;",
          "555:   } {1 {table y1_segments may not be altered}}",
          "556:   sqlite3_db_config db DEFENSIVE 0",
          "557:   do_catchsql_test 16.22 {",
          "558:     ALTER TABLE y1_segments RENAME TO abc;",
          "559:   } {0 {}}",
          "560:   sqlite3_db_config db DEFENSIVE 1",
          "561:   do_catchsql_test 16.23 {",
          "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
          "563:   } {1 {object name reserved for internal use: y1_segments}}",
          "564:   do_catchsql_test 16.24 {",
          "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
          "566:   } {1 {object name reserved for internal use: y1_segments}}",
          "567:   sqlite3_db_config db DEFENSIVE 0",
          "568:   do_catchsql_test 16.25 {",
          "569:     ALTER TABLE abc RENAME TO y1_segments;",
          "570:   } {0 {}}",
          "571:   sqlite3_db_config db DEFENSIVE 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}