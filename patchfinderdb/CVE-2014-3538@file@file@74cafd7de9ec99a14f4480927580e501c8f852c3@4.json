{
  "cve_id": "CVE-2014-3538",
  "cve_desc": "file before 5.19 does not properly restrict the amount of data read during a regex search, which allows remote attackers to cause a denial of service (CPU consumption) via a crafted file that triggers backtracking during processing of an awk rule.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-7345.",
  "repo": "file/file",
  "patch_hash": "74cafd7de9ec99a14f4480927580e501c8f852c3",
  "patch_info": {
    "commit_hash": "74cafd7de9ec99a14f4480927580e501c8f852c3",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/74cafd7de9ec99a14f4480927580e501c8f852c3",
    "files": [
      "src/softmagic.c"
    ],
    "message": "If requested, limit search length.",
    "before_after_code_files": [
      "src/softmagic.c||src/softmagic.c"
    ]
  },
  "patch_diff": {
    "src/softmagic.c||src/softmagic.c": [
      "File: src/softmagic.c -> src/softmagic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.187 2014/05/13 16:42:17 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.188 2014/05/14 23:15:42 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1929:    file_regerror(&rx, rc, ms);",
      "1930:    v = (uint64_t)-1;",
      "1931:   } else {",
      "1932:    regmatch_t pmatch[1];",
      "1933: #ifndef REG_STARTEND",
      "1934: #define REG_STARTEND 0",
      "1938: #else",
      "1939:    pmatch[0].rm_so = 0;",
      "1941: #endif",
      "1942:    rc = file_regexec(&rx, (const char *)ms->search.s,",
      "1943:        1, pmatch, REG_STARTEND);",
      "",
      "[Removed Lines]",
      "1935:    size_t l = ms->search.s_len - 1;",
      "1936:    char c = ms->search.s[l];",
      "1937:    ((char *)(intptr_t)ms->search.s)[l] = '\\0';",
      "1940:    pmatch[0].rm_eo = ms->search.s_len;",
      "",
      "[Added Lines]",
      "1932: #ifndef REG_STARTEND",
      "1933:    char c;",
      "1934: #endif",
      "1936:    size_t slen = ms->search.s_len;",
      "1938:    if (m->str_range > 0)",
      "1939:     slen = MIN(slen, m->str_range);",
      "1942:    if (slen != 0)",
      "1943:     slen--;",
      "1944:    c = ms->search.s[slen];",
      "1945:    ((char *)(intptr_t)ms->search.s)[slen] = '\\0';",
      "1948:    pmatch[0].rm_eo = slen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
      "candidate_info": {
        "commit_hash": "a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
        "files": [
          "ChangeLog",
          "src/file.h",
          "src/funcs.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "* change printable -> file_printable and use it in more places for safety * in ELF, instead of \"(uses dynamic libraries)\" when PT_INTERP   is present print the interpreter name.",
        "before_after_code_files": [
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:     size_t *);",
          "477: protected size_t file_pstring_length_size(const struct magic *);",
          "478: protected size_t file_pstring_get_length(const struct magic *, const char *);",
          "479: #ifdef __EMX__",
          "480: protected int file_os2_apptype(struct magic_set *, const char *, const void *,",
          "481:     size_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479: protected char * file_printable(char *, size_t, const char *);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.76 2014/11/28 02:35:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.77 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:  free(pb);",
          "532:  return rbuf;",
          "533: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: protected char *",
          "539: file_printable(char *buf, size_t bufsiz, const char *str)",
          "540: {",
          "541:  char *ptr, *eptr;",
          "542:  const unsigned char *s = (const unsigned char *)str;",
          "544:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "545:   if (isprint(*s)) {",
          "547:    continue;",
          "548:   }",
          "549:   if (ptr >= eptr + 4)",
          "550:    break;",
          "555:  }",
          "557:  return buf;",
          "558: }",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.110 2014/12/09 02:47:07 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.111 2014/12/09 02:47:45 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489: #endif",
          "490:  uint32_t namesz, descsz;",
          "491:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
          "493:  if (xnh_sizeof + offset > size) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:  char sbuf[512];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "740:    if (file_printf(ms, \", from '%.31s'\",",
          "742:     return size;",
          "",
          "[Removed Lines]",
          "741:        &nbuf[doff + 0x7c]) == -1)",
          "",
          "[Added Lines]",
          "742:        file_printable(sbuf, sizeof(sbuf),",
          "743:        (const char *)&nbuf[doff + 0x7c])) == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1163:  Elf32_Phdr ph32;",
          "1164:  Elf64_Phdr ph64;",
          "1165:  const char *linking_style = \"statically\";",
          "1167:  unsigned char nbuf[BUFSIZ];",
          "1168:  ssize_t bufsize;",
          "1169:  size_t offset, align, len;",
          "",
          "[Removed Lines]",
          "1166:  const char *shared_libraries = \"\";",
          "",
          "[Added Lines]",
          "1168:  const char *interp = \"\";",
          "1170:  char ibuf[BUFSIZ];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1181:   }",
          "1183:   off += size;",
          "1186:   switch (xph_type) {",
          "1187:   case PT_DYNAMIC:",
          "1188:    linking_style = \"dynamically\";",
          "1189:    break;",
          "1190:   case PT_INTERP:",
          "1192:    break;",
          "1193:   default:",
          "1194:    if (fsize != SIZE_UNKNOWN && xph_offset > fsize) {",
          "",
          "[Removed Lines]",
          "1191:    shared_libraries = \" (uses shared libs)\";",
          "",
          "[Added Lines]",
          "1187:   bufsize = 0;",
          "1188:   align = 4;",
          "1195:   case PT_NOTE:",
          "1197:     continue;",
          "1198:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1199:        align < 4) {",
          "1200:     if (file_printf(ms,",
          "1201:         \", invalid note alignment 0x%lx\",",
          "1202:         (unsigned long)align) == -1)",
          "1203:      return -1;",
          "1204:     align = 4;",
          "1205:    }",
          "1208:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1209:        : sizeof(nbuf);",
          "1210:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1211:    if (bufsize == -1) {",
          "1212:     file_badread(ms);",
          "1213:     return -1;",
          "1214:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1202:   switch (xph_type) {",
          "1211:    }",
          "1225:    offset = 0;",
          "1226:    for (;;) {",
          "1227:     if (offset >= (size_t)bufsize)",
          "",
          "[Removed Lines]",
          "1203:   case PT_NOTE:",
          "1204:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1205:        align < 4) {",
          "1206:     if (file_printf(ms,",
          "1207:         \", invalid note alignment 0x%lx\",",
          "1208:         (unsigned long)align) == -1)",
          "1209:      return -1;",
          "1210:     align = 4;",
          "1212:    if (sh_num)",
          "1213:     break;",
          "1218:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1219:        : sizeof(nbuf);",
          "1220:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1221:    if (bufsize == -1) {",
          "1222:     file_badread(ms);",
          "1223:     return -1;",
          "1224:    }",
          "",
          "[Added Lines]",
          "1226:   case PT_INTERP:",
          "1227:    if (bufsize) {",
          "1228:     nbuf[bufsize - 1] = '\\0';",
          "1229:     interp = (const char *)nbuf;",
          "1231:    break;",
          "1232:   case PT_NOTE:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1237:    break;",
          "1238:   }",
          "1239:  }",
          "1241:      == -1)",
          "1243:  return 0;",
          "1244: }",
          "",
          "[Removed Lines]",
          "1240:  if (file_printf(ms, \", %s linked%s\", linking_style, shared_libraries)",
          "1242:      return -1;",
          "",
          "[Added Lines]",
          "1252:  if (file_printf(ms, \", %s linked\", linking_style)",
          "1254:   return -1;",
          "1255:  if (interp[0])",
          "1256:   if (file_printf(ms, \", interpreter %s\",",
          "1257:       file_printable(ibuf, sizeof(ibuf), interp)) == -1)",
          "1258:    return -1;",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.202 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.203 2014/12/04 15:22:05 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404: }",
          "429: private int32_t",
          "430: mprint(struct magic_set *ms, struct magic *m)",
          "431: {",
          "",
          "[Removed Lines]",
          "407: static char *",
          "408: printable(char *buf, size_t bufsiz, const char *str)",
          "409: {",
          "410:  char *ptr, *eptr;",
          "411:  const unsigned char *s = (const unsigned char *)str;",
          "413:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "414:   if (isprint(*s)) {",
          "416:    continue;",
          "417:   }",
          "418:   if (ptr >= eptr + 4)",
          "419:    break;",
          "424:  }",
          "426:  return buf;",
          "427: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:  float vf;",
          "434:  double vd;",
          "435:  int64_t t = 0;",
          "437:  union VALUETYPE *p = &ms->ms_value;",
          "439:    switch (m->type) {",
          "",
          "[Removed Lines]",
          "436:   char buf[128], tbuf[26];",
          "",
          "[Added Lines]",
          "414:   char buf[128], tbuf[26], sbuf[512];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "527:    case FILE_BESTRING16:",
          "528:    case FILE_LESTRING16:",
          "529:   if (m->reln == '=' || m->reln == '!') {",
          "531:     return -1;",
          "532:    t = ms->offset + m->vallen;",
          "533:   }",
          "534:   else {",
          "536:    char *str = p->s;",
          "",
          "[Removed Lines]",
          "530:    if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "535:    char sbuf[512];",
          "",
          "[Added Lines]",
          "508:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "509:        file_printable(sbuf, sizeof(sbuf), m->value.s))",
          "510:        == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "555:    }",
          "557:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "559:     return -1;",
          "561:    if (m->type == FILE_PSTRING)",
          "",
          "[Removed Lines]",
          "558:        printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "[Added Lines]",
          "537:        file_printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "659:    file_oomem(ms, ms->search.rm_len);",
          "660:    return -1;",
          "661:   }",
          "663:   free(cp);",
          "665:   if (rval == -1)",
          "",
          "[Removed Lines]",
          "662:   rval = file_printf(ms, F(ms, m, \"%s\"), cp);",
          "",
          "[Added Lines]",
          "641:   rval = file_printf(ms, F(ms, m, \"%s\"),",
          "642:       file_printable(sbuf, sizeof(sbuf), cp));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "673:  }",
          "675:  case FILE_SEARCH:",
          "677:    return -1;",
          "678:   if ((m->str_flags & REGEX_OFFSET_START))",
          "679:    t = ms->search.offset;",
          "",
          "[Removed Lines]",
          "676:     if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "",
          "[Added Lines]",
          "656:     if (file_printf(ms, F(ms, m, \"%s\"),",
          "657:       file_printable(sbuf, sizeof(sbuf), m->value.s)) == -1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4075d47c8debe0b2d413c1cf0f01b8f48813756c",
      "candidate_info": {
        "commit_hash": "4075d47c8debe0b2d413c1cf0f01b8f48813756c",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/4075d47c8debe0b2d413c1cf0f01b8f48813756c",
        "files": [
          "src/softmagic.c"
        ],
        "message": "indirect offsets should be relative to the beginning of the current magic.",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.203 2014/12/04 15:22:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.204 2014/12/11 12:34:24 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1665:   break;",
          "1667:  case FILE_INDIRECT:",
          "1668:   if (offset == 0)",
          "1669:    return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1668:   offset += o;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43137d87ebe726757ff4b91cd8aae9b8e355fc5a",
      "candidate_info": {
        "commit_hash": "43137d87ebe726757ff4b91cd8aae9b8e355fc5a",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/43137d87ebe726757ff4b91cd8aae9b8e355fc5a",
        "files": [
          "ChangeLog",
          "src/softmagic.c"
        ],
        "message": "Make strings from files always printable.",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.194 2014/09/22 18:26:19 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.195 2014/09/24 19:49:07 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397: }",
          "400: private int32_t",
          "401: mprint(struct magic_set *ms, struct magic *m)",
          "402: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400: static char *",
          "401: printable(char *buf, size_t bufsiz, const char *str)",
          "402: {",
          "403:  char *ptr, *eptr;",
          "404:  const unsigned char *s = (const unsigned char *)str;",
          "406:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "407:   if (isprint(*s)) {",
          "409:    continue;",
          "410:   }",
          "411:   if (ptr >= eptr + 4)",
          "412:    break;",
          "417:  }",
          "419:  return buf;",
          "420: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "503:    t = ms->offset + m->vallen;",
          "504:   }",
          "505:   else {",
          "506:    char *str = p->s;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:    char sbuf[512];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "525:    }",
          "528:     return -1;",
          "530:    if (m->type == FILE_PSTRING)",
          "",
          "[Removed Lines]",
          "527:    if (file_printf(ms, F(ms, m, \"%s\"), str) == -1)",
          "",
          "[Added Lines]",
          "550:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "551:        printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "809020889c857afb776a67cc73b1c4fa217adc0b",
      "candidate_info": {
        "commit_hash": "809020889c857afb776a67cc73b1c4fa217adc0b",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/809020889c857afb776a67cc73b1c4fa217adc0b",
        "files": [
          "src/apprentice.c",
          "src/cdf_time.c",
          "src/file.h",
          "src/fsmagic.c",
          "src/funcs.c",
          "src/magic.c",
          "src/softmagic.c"
        ],
        "message": "PR/347: Windows patches.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/cdf_time.c||src/cdf_time.c",
          "src/file.h||src/file.h",
          "src/fsmagic.c||src/fsmagic.c",
          "src/funcs.c||src/funcs.c",
          "src/magic.c||src/magic.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.208 2014/05/06 16:07:23 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.209 2014/05/13 16:42:17 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2767:  }",
          "2768:  entries = (uint32_t)(st.st_size / sizeof(struct magic));",
          "2769:  if ((off_t)(entries * sizeof(struct magic)) != st.st_size) {",
          "2771:       dbname, (unsigned long long)st.st_size,",
          "2772:       sizeof(struct magic));",
          "2773:   goto error;",
          "",
          "[Removed Lines]",
          "2770:   file_error(ms, 0, \"Size of `%s' %llu is not a multiple of %zu\",",
          "",
          "[Added Lines]",
          "2770:   file_error(ms, 0, \"Size of `%s' %\" INT64_T_FORMAT \"u is not \"",
          "2771:       \"a multiple of %\" SIZE_T_FORMAT \"u\",",
          "",
          "---------------"
        ],
        "src/cdf_time.c||src/cdf_time.c": [
          "File: src/cdf_time.c -> src/cdf_time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #include <time.h>",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: cdf_time.c,v 1.13 2014/02/25 20:52:02 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: cdf_time.c,v 1.14 2014/04/17 12:44:01 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:  char *ptr = ctime_r(sec, buf);",
          "172:  if (ptr != NULL)",
          "173:   return buf;",
          "175:  return buf;",
          "176: }",
          "",
          "[Removed Lines]",
          "174:  (void)snprintf(buf, 26, \"*Bad* 0x%16.16llx\\n\", (long long)*sec);",
          "",
          "[Added Lines]",
          "174:  (void)snprintf(buf, 26, \"*Bad* 0x%16.16\" INT64_T_FORMAT \"x\\n\",",
          "175:      (long long)*sec);",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: #define private static",
          "87: #define public  __attribute__ ((__visibility__(\"default\")))",
          "88: #ifndef protected",
          "89: #define protected __attribute__ ((__visibility__(\"hidden\")))",
          "",
          "[Removed Lines]",
          "86: #if HAVE_VISIBILITY",
          "",
          "[Added Lines]",
          "86: #if HAVE_VISIBILITY && !defined(WIN32)",
          "",
          "---------------"
        ],
        "src/fsmagic.c||src/fsmagic.c": [
          "File: src/fsmagic.c -> src/fsmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: fsmagic.c,v 1.71 2013/12/01 18:01:07 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: fsmagic.c,v 1.72 2014/04/17 12:47:11 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: # define HAVE_MAJOR",
          "55: #endif",
          "57: #ifndef HAVE_MAJOR",
          "58: # define major(dev)  (((dev) >> 8) & 0xff)",
          "59: # define minor(dev)  ((dev) & 0xff)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #ifdef WIN32",
          "57: # define WIN32_LEAN_AND_MEAN",
          "58: # include <windows.h>",
          "59: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123: #endif",
          "126:  if (ret) {",
          "127:   if (ms->flags & MAGIC_ERROR) {",
          "128:    file_error(ms, errno, \"cannot stat `%s'\", fn);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: #ifdef WIN32",
          "131:  {",
          "132:   HANDLE hFile = CreateFile(fn, 0, FILE_SHARE_DELETE |",
          "133:       FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0,",
          "134:       NULL);",
          "135:   if (hFile != INVALID_HANDLE_VALUE) {",
          "140:    if (ret) {",
          "141:     sb->st_mode = S_IFBLK;",
          "142:     ret = 0;",
          "143:    }",
          "144:    switch (GetFileType(hFile)) {",
          "145:    case FILE_TYPE_CHAR:",
          "146:     sb->st_mode |= S_IFCHR;",
          "147:     sb->st_mode &= ~S_IFREG;",
          "148:     break;",
          "149:    case FILE_TYPE_PIPE:",
          "150:     sb->st_mode |= S_IFIFO;",
          "151:     sb->st_mode &= ~S_IFREG;",
          "152:     break;",
          "153:    }",
          "154:    CloseHandle(hFile);",
          "155:   }",
          "156:  }",
          "157: #endif",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.70 2014/03/14 19:02:37 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.71 2014/05/05 20:53:10 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:   if (file_printf(ms, \"%s\", code_mime) == -1)",
          "281:    rv = -1;",
          "282:  }",
          "283:  done_encoding:",
          "284:  free(u8buf);",
          "285:  if (rv)",
          "286:   return rv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283: #if HAVE_FORK",
          "285: #endif",
          "",
          "---------------"
        ],
        "src/magic.c||src/magic.c": [
          "File: src/magic.c -> src/magic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"file.h\"",
          "35: #ifndef lint",
          "39: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.82 2014/05/13 16:38:23 christos Exp $\")",
          "",
          "[Added Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.83 2014/05/13 16:44:24 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:  free(hmagicpath);",
          "127:  return MAGIC;",
          "128: #else",
          "130:  char *tmppath = NULL;",
          "132: #define APPENDPATH() \\",
          "133:  do { \\",
          "",
          "[Removed Lines]",
          "129:  char *hmagicp = hmagicpath;",
          "",
          "[Added Lines]",
          "129:  char *hmagicp;",
          "131:  hmagicpath = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:   goto done;",
          "369:  }",
          "371:  if (inname == NULL) {",
          "372:   if (fstat(fd, &sb) == 0 && S_ISFIFO(sb.st_mode))",
          "373:    ispipe = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: #ifdef WIN32",
          "374:  if (fd == STDIN_FILENO)",
          "375:   _setmode(STDIN_FILENO, O_BINARY);",
          "376: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "387:   errno = 0;",
          "388:   if ((fd = open(inname, flags)) < 0) {",
          "389:    if (okstat &&",
          "390:        unreadable_info(ms, sb.st_mode, inname) == -1)",
          "391:     goto done;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396: #ifdef WIN32",
          "403:    if (!okstat && errno == EACCES) {",
          "404:     sb.st_mode = S_IFBLK;",
          "405:     okstat = 1;",
          "406:    }",
          "407: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "421:   }",
          "423:  } else {",
          "426:    goto done;",
          "427:   }",
          "428:  }",
          "",
          "[Removed Lines]",
          "424:   if ((nbytes = read(fd, (char *)buf, HOWMANY)) == -1) {",
          "425:    file_error(ms, errno, \"cannot read `%s'\", inname);",
          "",
          "[Added Lines]",
          "444:   size_t howmany =",
          "445: #if defined(WIN32) && HOWMANY > 8 * 1024",
          "446:     _isatty(fd) ? 8 * 1024 :",
          "447: #endif",
          "448:     HOWMANY;",
          "449:   if ((nbytes = read(fd, (char *)buf, howmany)) == -1) {",
          "450:    if (inname == NULL && fd != STDIN_FILENO)",
          "451:     file_error(ms, errno, \"cannot read fd %d\", fd);",
          "452:    else",
          "453:     file_error(ms, errno, \"cannot read `%s'\",",
          "454:         inname == NULL ? \"/dev/stdin\" : inname);",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.186 2014/05/05 20:53:10 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.187 2014/05/13 16:42:17 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482:   case -1:",
          "483:    return -1;",
          "484:   case 1:",
          "486:        (unsigned long long)v);",
          "487:    if (file_printf(ms, F(ms, m, \"%s\"), buf) == -1)",
          "488:     return -1;",
          "489:    break;",
          "490:   default:",
          "492:        (unsigned long long) v) == -1)",
          "493:     return -1;",
          "494:    break;",
          "",
          "[Removed Lines]",
          "485:    (void)snprintf(buf, sizeof(buf), \"%llu\",",
          "491:    if (file_printf(ms, F(ms, m, \"%llu\"),",
          "",
          "[Added Lines]",
          "485:    (void)snprintf(buf, sizeof(buf), \"%\" INT64_T_FORMAT \"u\",",
          "491:    if (file_printf(ms, F(ms, m, \"%\" INT64_T_FORMAT \"u\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24afd020b48d38d90350579b707773bf9d08c6ba",
      "candidate_info": {
        "commit_hash": "24afd020b48d38d90350579b707773bf9d08c6ba",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/24afd020b48d38d90350579b707773bf9d08c6ba",
        "files": [
          "ChangeLog",
          "doc/magic.man",
          "magic/Magdir/jpeg",
          "src/apprentice.c",
          "src/file.h",
          "src/softmagic.c"
        ],
        "message": "Add indirect relative offsets; make Exif use them. All other indirect magic is absolute by default.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/file.h||src/file.h",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.227 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.228 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1605: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1608: private int",
          "1609: parse_indirect_modifier(struct magic_set *ms, struct magic *m, const char **lp)",
          "1610: {",
          "1611:  const char *l = *lp;",
          "1613:  while (!isspace((unsigned char)*++l))",
          "1614:   switch (*l) {",
          "1615:   case CHAR_INDIRECT_RELATIVE:",
          "1616:    m->str_flags |= INDIRECT_RELATIVE;",
          "1617:    break;",
          "1618:   default:",
          "1619:    if (ms->flags & MAGIC_CHECK)",
          "1620:     file_magwarn(ms, \"indirect modifier `%c' \"",
          "1621:      \"invalid\", *l);",
          "1623:    return -1;",
          "1624:   }",
          "1626:  return 0;",
          "1627: }",
          "1629: private void",
          "1630: parse_op_modifier(struct magic_set *ms, struct magic *m, const char **lp,",
          "1631:     int op)",
          "1632: {",
          "1633:  const char *l = *lp;",
          "1634:  char *t;",
          "1635:  uint64_t val;",
          "1637:  ++l;",
          "1638:  m->mask_op |= op;",
          "1639:  val = (uint64_t)strtoull(l, &t, 0);",
          "1640:  l = t;",
          "1641:  m->num_mask = file_signextend(ms, m, val);",
          "1642:  eatsize(&l);",
          "1644: }",
          "1646: private int",
          "1647: parse_string_modifier(struct magic_set *ms, struct magic *m, const char **lp)",
          "1648: {",
          "1649:  const char *l = *lp;",
          "1650:  char *t;",
          "1651:  int have_range = 0;",
          "1653:  while (!isspace((unsigned char)*++l)) {",
          "1654:   switch (*l) {",
          "1655:   case '0':  case '1':  case '2':",
          "1656:   case '3':  case '4':  case '5':",
          "1657:   case '6':  case '7':  case '8':",
          "1658:   case '9':",
          "1659:    if (have_range && (ms->flags & MAGIC_CHECK))",
          "1660:     file_magwarn(ms, \"multiple ranges\");",
          "1661:    have_range = 1;",
          "1662:    m->str_range = CAST(uint32_t, strtoul(l, &t, 0));",
          "1663:    if (m->str_range == 0)",
          "1664:     file_magwarn(ms, \"zero range\");",
          "1665:    l = t - 1;",
          "1666:    break;",
          "1667:   case CHAR_COMPACT_WHITESPACE:",
          "1668:    m->str_flags |= STRING_COMPACT_WHITESPACE;",
          "1669:    break;",
          "1670:   case CHAR_COMPACT_OPTIONAL_WHITESPACE:",
          "1671:    m->str_flags |= STRING_COMPACT_OPTIONAL_WHITESPACE;",
          "1672:    break;",
          "1673:   case CHAR_IGNORE_LOWERCASE:",
          "1674:    m->str_flags |= STRING_IGNORE_LOWERCASE;",
          "1675:    break;",
          "1676:   case CHAR_IGNORE_UPPERCASE:",
          "1677:    m->str_flags |= STRING_IGNORE_UPPERCASE;",
          "1678:    break;",
          "1679:   case CHAR_REGEX_OFFSET_START:",
          "1680:    m->str_flags |= REGEX_OFFSET_START;",
          "1681:    break;",
          "1682:   case CHAR_BINTEST:",
          "1683:    m->str_flags |= STRING_BINTEST;",
          "1684:    break;",
          "1685:   case CHAR_TEXTTEST:",
          "1686:    m->str_flags |= STRING_TEXTTEST;",
          "1687:    break;",
          "1688:   case CHAR_TRIM:",
          "1689:    m->str_flags |= STRING_TRIM;",
          "1690:    break;",
          "1691:   case CHAR_PSTRING_1_LE:",
          "1692: #define SET_LENGTH(a) m->str_flags = (m->str_flags & ~PSTRING_LEN) | (a)",
          "1693:    if (m->type != FILE_PSTRING)",
          "1694:     goto bad;",
          "1695:    SET_LENGTH(PSTRING_1_LE);",
          "1696:    break;",
          "1697:   case CHAR_PSTRING_2_BE:",
          "1698:    if (m->type != FILE_PSTRING)",
          "1699:     goto bad;",
          "1700:    SET_LENGTH(PSTRING_2_BE);",
          "1701:    break;",
          "1702:   case CHAR_PSTRING_2_LE:",
          "1703:    if (m->type != FILE_PSTRING)",
          "1704:     goto bad;",
          "1705:    SET_LENGTH(PSTRING_2_LE);",
          "1706:    break;",
          "1707:   case CHAR_PSTRING_4_BE:",
          "1708:    if (m->type != FILE_PSTRING)",
          "1709:     goto bad;",
          "1710:    SET_LENGTH(PSTRING_4_BE);",
          "1711:    break;",
          "1712:   case CHAR_PSTRING_4_LE:",
          "1713:    switch (m->type) {",
          "1714:    case FILE_PSTRING:",
          "1715:    case FILE_REGEX:",
          "1716:     break;",
          "1717:    default:",
          "1718:     goto bad;",
          "1719:    }",
          "1720:    SET_LENGTH(PSTRING_4_LE);",
          "1721:    break;",
          "1722:   case CHAR_PSTRING_LENGTH_INCLUDES_ITSELF:",
          "1723:    if (m->type != FILE_PSTRING)",
          "1724:     goto bad;",
          "1725:    m->str_flags |= PSTRING_LENGTH_INCLUDES_ITSELF;",
          "1726:    break;",
          "1727:   default:",
          "1728:   bad:",
          "1729:    if (ms->flags & MAGIC_CHECK)",
          "1730:     file_magwarn(ms, \"string modifier `%c' \"",
          "1731:      \"invalid\", *l);",
          "1732:    goto out;",
          "1733:   }",
          "1735:   if (l[1] == '/' && !isspace((unsigned char)l[2]))",
          "1736:    l++;",
          "1737:  }",
          "1738:  if (string_modifier_check(ms, m) == -1)",
          "1739:   goto out;",
          "1741:  return 0;",
          "1742: out:",
          "1744:  return -1;",
          "1745: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1874:  m->str_range = 0;",
          "1875:  m->str_flags = m->type == FILE_PSTRING ? PSTRING_1_LE : 0;",
          "1876:  if ((op = get_op(*l)) != -1) {",
          "1979:    }",
          "1981:     return -1;",
          "1988:  }",
          "",
          "[Removed Lines]",
          "1877:   if (!IS_STRING(m->type)) {",
          "1878:    uint64_t val;",
          "1879:    ++l;",
          "1880:    m->mask_op |= op;",
          "1881:    val = (uint64_t)strtoull(l, &t, 0);",
          "1882:    l = t;",
          "1883:    m->num_mask = file_signextend(ms, m, val);",
          "1884:    eatsize(&l);",
          "1885:   }",
          "1886:   else if (op == FILE_OPDIVIDE) {",
          "1887:    int have_range = 0;",
          "1888:    while (!isspace((unsigned char)*++l)) {",
          "1889:     switch (*l) {",
          "1890:     case '0':  case '1':  case '2':",
          "1891:     case '3':  case '4':  case '5':",
          "1892:     case '6':  case '7':  case '8':",
          "1893:     case '9':",
          "1894:      if (have_range &&",
          "1895:          (ms->flags & MAGIC_CHECK))",
          "1896:       file_magwarn(ms,",
          "1897:           \"multiple ranges\");",
          "1898:      have_range = 1;",
          "1899:      m->str_range = CAST(uint32_t,",
          "1900:          strtoul(l, &t, 0));",
          "1901:      if (m->str_range == 0)",
          "1902:       file_magwarn(ms,",
          "1903:           \"zero range\");",
          "1904:      l = t - 1;",
          "1905:      break;",
          "1906:     case CHAR_COMPACT_WHITESPACE:",
          "1907:      m->str_flags |=",
          "1908:          STRING_COMPACT_WHITESPACE;",
          "1909:      break;",
          "1910:     case CHAR_COMPACT_OPTIONAL_WHITESPACE:",
          "1911:      m->str_flags |=",
          "1912:          STRING_COMPACT_OPTIONAL_WHITESPACE;",
          "1913:      break;",
          "1914:     case CHAR_IGNORE_LOWERCASE:",
          "1915:      m->str_flags |= STRING_IGNORE_LOWERCASE;",
          "1916:      break;",
          "1917:     case CHAR_IGNORE_UPPERCASE:",
          "1918:      m->str_flags |= STRING_IGNORE_UPPERCASE;",
          "1919:      break;",
          "1920:     case CHAR_REGEX_OFFSET_START:",
          "1921:      m->str_flags |= REGEX_OFFSET_START;",
          "1922:      break;",
          "1923:     case CHAR_BINTEST:",
          "1924:      m->str_flags |= STRING_BINTEST;",
          "1925:      break;",
          "1926:     case CHAR_TEXTTEST:",
          "1927:      m->str_flags |= STRING_TEXTTEST;",
          "1928:      break;",
          "1929:     case CHAR_TRIM:",
          "1930:      m->str_flags |= STRING_TRIM;",
          "1931:      break;",
          "1932:     case CHAR_PSTRING_1_LE:",
          "1933:      if (m->type != FILE_PSTRING)",
          "1934:       goto bad;",
          "1935:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_1_LE;",
          "1936:      break;",
          "1937:     case CHAR_PSTRING_2_BE:",
          "1938:      if (m->type != FILE_PSTRING)",
          "1939:       goto bad;",
          "1940:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_2_BE;",
          "1941:      break;",
          "1942:     case CHAR_PSTRING_2_LE:",
          "1943:      if (m->type != FILE_PSTRING)",
          "1944:       goto bad;",
          "1945:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_2_LE;",
          "1946:      break;",
          "1947:     case CHAR_PSTRING_4_BE:",
          "1948:      if (m->type != FILE_PSTRING)",
          "1949:       goto bad;",
          "1950:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_BE;",
          "1951:      break;",
          "1952:     case CHAR_PSTRING_4_LE:",
          "1953:      switch (m->type) {",
          "1954:      case FILE_PSTRING:",
          "1955:      case FILE_REGEX:",
          "1956:       break;",
          "1957:      default:",
          "1958:       goto bad;",
          "1959:      }",
          "1960:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_LE;",
          "1961:      break;",
          "1962:     case CHAR_PSTRING_LENGTH_INCLUDES_ITSELF:",
          "1963:      if (m->type != FILE_PSTRING)",
          "1964:       goto bad;",
          "1965:      m->str_flags |= PSTRING_LENGTH_INCLUDES_ITSELF;",
          "1966:      break;",
          "1967:     default:",
          "1968:     bad:",
          "1969:      if (ms->flags & MAGIC_CHECK)",
          "1970:       file_magwarn(ms,",
          "1971:           \"string extension `%c' \"",
          "1972:           \"invalid\", *l);",
          "1973:      return -1;",
          "1974:     }",
          "1976:     if (l[1] == '/' &&",
          "1977:         !isspace((unsigned char)l[2]))",
          "1978:      l++;",
          "1980:    if (string_modifier_check(ms, m) == -1)",
          "1982:   }",
          "1983:   else {",
          "1984:    if (ms->flags & MAGIC_CHECK)",
          "1985:     file_magwarn(ms, \"invalid string op: %c\", *t);",
          "1986:    return -1;",
          "1987:   }",
          "",
          "[Added Lines]",
          "2016:   if (IS_STRING(m->type)) {",
          "2017:    int r;",
          "2019:    if (op != FILE_OPDIVIDE) {",
          "2020:     if (ms->flags & MAGIC_CHECK)",
          "2021:      file_magwarn(ms,",
          "2022:          \"invalid string/indirect op: \"",
          "2023:          \"`%c'\", *t);",
          "2024:     return -1;",
          "2027:    if (m->type == FILE_INDIRECT)",
          "2028:     r = parse_indirect_modifier(ms, m, &l);",
          "2029:    else",
          "2030:     r = parse_string_modifier(ms, m, &l);",
          "2031:    if (r == -1)",
          "2033:   } else",
          "2034:    parse_op_modifier(ms, m, &l, op);",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:   (t) == FILE_LESTRING16 || \\",
          "235:   (t) == FILE_REGEX || \\",
          "236:   (t) == FILE_SEARCH || \\",
          "237:   (t) == FILE_NAME || \\",
          "238:   (t) == FILE_USE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:   (t) == FILE_INDIRECT || \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346: #define STRING_IGNORE_CASE  (STRING_IGNORE_LOWERCASE|STRING_IGNORE_UPPERCASE)",
          "347: #define STRING_DEFAULT_RANGE  100",
          "351: struct mlist {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: #define INDIRECT_RELATIVE   BIT(0)",
          "351: #define CHAR_INDIRECT_RELATIVE   'r'",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.204 2014/12/11 12:34:24 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.205 2015/01/01 04:12:23 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1665:   break;",
          "1667:  case FILE_INDIRECT:",
          "1669:   if (offset == 0)",
          "1670:    return 0;",
          "",
          "[Removed Lines]",
          "1668:   offset += o;",
          "",
          "[Added Lines]",
          "1668:   if (m->str_flags & INDIRECT_RELATIVE)",
          "1669:    offset += o;",
          "",
          "---------------"
        ]
      }
    }
  ]
}