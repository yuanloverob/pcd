{
  "cve_id": "CVE-2022-21732",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `ThreadPoolHandle` can be used to trigger a denial of service attack by allocating too much memory. This is because the `num_threads` argument is only checked to not be negative, but there is no upper bound on its value. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "e3749a6d5d1e8d11806d4a2e9cc3123d1a90b75e",
  "patch_info": {
    "commit_hash": "e3749a6d5d1e8d11806d4a2e9cc3123d1a90b75e",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/e3749a6d5d1e8d11806d4a2e9cc3123d1a90b75e",
    "files": [
      "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
    ],
    "message": "[tf.data] Set limit on number of threads used in threadpool_dataset.\n\nPiperOrigin-RevId: 410922677\nChange-Id: Ib25814a99043ab10805b5d2d7088ae0e0b7b04fd",
    "before_after_code_files": [
      "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc": [
      "File: tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc -> tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:     PrivateThreadPoolDatasetOp::kDatasetType;",
      "42: class ThreadPoolResource : public ResourceBase {",
      "43:  public:",
      "44:   ThreadPoolResource(Env* env, const ThreadOptions& thread_options,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: namespace {",
      "45: constexpr int kThreadLimit = 65536;",
      "47: Status ValidateNumThreads(int32_t num_threads) {",
      "48:   if (num_threads < 0) {",
      "49:     return errors::InvalidArgument(\"`num_threads` must be >= 0\");",
      "50:   }",
      "51:   if (num_threads >= kThreadLimit) {",
      "52:     return errors::InvalidArgument(\"`num_threads` must be < \", kThreadLimit);",
      "53:   }",
      "54:   return Status::OK();",
      "55: }",
      "56: }  // namespace",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "83:     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"num_threads\", &num_threads_));",
      "84:     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"max_intra_op_parallelism\",",
      "85:                                      &max_intra_op_parallelism_));",
      "89:   }",
      "",
      "[Removed Lines]",
      "86:     OP_REQUIRES(",
      "87:         ctx, num_threads_ > 0,",
      "88:         errors::InvalidArgument(\"`num_threads` must be greater than zero.\"));",
      "",
      "[Added Lines]",
      "102:     OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads_));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "531:                                                         DatasetBase* input,",
      "532:                                                         int32_t num_threads,",
      "533:                                                         DatasetBase** output) {",
      "537:                         DatasetContext(DatasetContext::Params(",
      "538:                             {PrivateThreadPoolDatasetOp::kDatasetType,",
      "",
      "[Removed Lines]",
      "534:   OP_REQUIRES(ctx, num_threads >= 0,",
      "535:               errors::InvalidArgument(\"`num_threads` must be >= 0\"));",
      "",
      "[Added Lines]",
      "548:   OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "546:   int64_t num_threads = 0;",
      "547:   OP_REQUIRES_OK(",
      "548:       ctx, ParseScalarArgument<int64_t>(ctx, \"num_threads\", &num_threads));",
      "552: }",
      "",
      "[Removed Lines]",
      "549:   OP_REQUIRES(ctx, num_threads >= 0,",
      "550:               errors::InvalidArgument(\"`num_threads` must be >= 0\"));",
      "",
      "[Added Lines]",
      "562:   OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "50b1c27acab7b6b4a220e30eb076155107c1f8f3",
      "candidate_info": {
        "commit_hash": "50b1c27acab7b6b4a220e30eb076155107c1f8f3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/50b1c27acab7b6b4a220e30eb076155107c1f8f3",
        "files": [
          "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
        ],
        "message": "[tf.data] Relax locking in the threading dataset ops.\n\nConcurrent calls to threading dataset iterator `GetNext` calls do not need to be serialized. We only need to serialize calls to `GetNext` w.r.t. to saving and restoring the iterator state.\n\nPiperOrigin-RevId: 353038539\nChange-Id: I03d027350129ebdb1995166821fb58ef6748b27a",
        "before_after_code_files": [
          "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc": [
          "File: tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc -> tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"tensorflow/core/kernels/data/dataset_utils.h\"",
          "21: #include \"tensorflow/core/lib/core/refcount.h\"",
          "22: #include \"tensorflow/core/lib/core/threadpool.h\"",
          "23: #include \"tensorflow/core/platform/thread_annotations.h\"",
          "24: #include \"tensorflow/core/util/work_sharder.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"tensorflow/core/platform/mutex.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:       Status GetNextInternal(IteratorContext* ctx,",
          "211:                              std::vector<Tensor>* out_tensors,",
          "212:                              bool* end_of_sequence) override {",
          "214:         return input_impl_->GetNext(IteratorContext(CreateParams(ctx)),",
          "215:                                     out_tensors, end_of_sequence);",
          "216:       }",
          "",
          "[Removed Lines]",
          "213:         mutex_lock l(mu_);",
          "",
          "[Added Lines]",
          "214:         tf_shared_lock l(mu_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "350:         auto max_parallelism = dataset()->max_intra_op_parallelism_;",
          "351:         params.runner =",
          "352:             RunnerWithMaxParallelism(*ctx->runner(), max_parallelism);",
          "354:         return input_impl_->GetNext(IteratorContext{std::move(params)},",
          "355:                                     out_tensors, end_of_sequence);",
          "356:       }",
          "",
          "[Removed Lines]",
          "353:         mutex_lock l(mu_);",
          "",
          "[Added Lines]",
          "354:         tf_shared_lock l(mu_);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "480:           pool->Schedule(std::move(c));",
          "481:         };",
          "482:         params.runner_threadpool_size = dataset()->num_threads_;",
          "484:         return input_impl_->GetNext(IteratorContext{std::move(params)},",
          "485:                                     out_tensors, end_of_sequence);",
          "486:       }",
          "",
          "[Removed Lines]",
          "483:         mutex_lock l(mu_);",
          "",
          "[Added Lines]",
          "484:         tf_shared_lock l(mu_);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0fec57555a27af1eff48136269d1aaeb2fde954",
      "candidate_info": {
        "commit_hash": "a0fec57555a27af1eff48136269d1aaeb2fde954",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a0fec57555a27af1eff48136269d1aaeb2fde954",
        "files": [
          "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
        ],
        "message": "[tf.data] Relax locking for threading dataset iterator.\n\nThread-safety of stateless iterators (modulo iterator state) is established by induction on the thread-safety of its input iterator, hence no locking is required.\n\nPiperOrigin-RevId: 353085605\nChange-Id: I42df1ee8063f7f8d11574cfc1ad811a3ce401cdf",
        "before_after_code_files": [
          "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc": [
          "File: tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc -> tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"tensorflow/core/kernels/data/dataset_utils.h\"",
          "21: #include \"tensorflow/core/lib/core/refcount.h\"",
          "22: #include \"tensorflow/core/lib/core/threadpool.h\"",
          "24: #include \"tensorflow/core/platform/thread_annotations.h\"",
          "25: #include \"tensorflow/core/util/work_sharder.h\"",
          "",
          "[Removed Lines]",
          "23: #include \"tensorflow/core/platform/mutex.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:       Status GetNextInternal(IteratorContext* ctx,",
          "212:                              std::vector<Tensor>* out_tensors,",
          "213:                              bool* end_of_sequence) override {",
          "215:         return input_impl_->GetNext(IteratorContext(CreateParams(ctx)),",
          "216:                                     out_tensors, end_of_sequence);",
          "217:       }",
          "",
          "[Removed Lines]",
          "214:         tf_shared_lock l(mu_);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:       Status SaveInternal(SerializationContext* ctx,",
          "227:                           IteratorStateWriter* writer) override {",
          "229:         DCHECK(input_impl_ != nullptr);",
          "230:         TF_RETURN_IF_ERROR(SaveInput(ctx, writer, input_impl_));",
          "231:         return Status::OK();",
          "",
          "[Removed Lines]",
          "228:         mutex_lock l(mu_);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:       Status RestoreInternal(IteratorContext* ctx,",
          "235:                              IteratorStateReader* reader) override {",
          "237:         TF_RETURN_IF_ERROR(RestoreInput(ctx, reader, input_impl_));",
          "238:         return Status::OK();",
          "239:       }",
          "",
          "[Removed Lines]",
          "236:         mutex_lock l(mu_);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "249:         return params;",
          "250:       }",
          "254:     };",
          "256:     const DatasetBase* const input_;",
          "",
          "[Removed Lines]",
          "252:       mutex mu_;",
          "253:       std::unique_ptr<IteratorBase> input_impl_ TF_GUARDED_BY(mu_);",
          "",
          "[Added Lines]",
          "248:       std::unique_ptr<IteratorBase> input_impl_;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "351:         auto max_parallelism = dataset()->max_intra_op_parallelism_;",
          "352:         params.runner =",
          "353:             RunnerWithMaxParallelism(*ctx->runner(), max_parallelism);",
          "355:         return input_impl_->GetNext(IteratorContext{std::move(params)},",
          "356:                                     out_tensors, end_of_sequence);",
          "357:       }",
          "",
          "[Removed Lines]",
          "354:         tf_shared_lock l(mu_);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "366:       Status SaveInternal(SerializationContext* ctx,",
          "367:                           IteratorStateWriter* writer) override {",
          "369:         DCHECK(input_impl_ != nullptr);",
          "370:         TF_RETURN_IF_ERROR(SaveInput(ctx, writer, input_impl_));",
          "371:         return Status::OK();",
          "",
          "[Removed Lines]",
          "368:         mutex_lock l(mu_);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "374:       Status RestoreInternal(IteratorContext* ctx,",
          "375:                              IteratorStateReader* reader) override {",
          "377:         TF_RETURN_IF_ERROR(RestoreInput(ctx, reader, input_impl_));",
          "378:         return Status::OK();",
          "379:       }",
          "381:      private:",
          "384:     };",
          "386:     const DatasetBase* const input_;",
          "",
          "[Removed Lines]",
          "376:         mutex_lock l(mu_);",
          "382:       mutex mu_;",
          "383:       std::unique_ptr<IteratorBase> input_impl_ TF_GUARDED_BY(mu_);",
          "",
          "[Added Lines]",
          "374:       std::unique_ptr<IteratorBase> input_impl_;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "481:           pool->Schedule(std::move(c));",
          "482:         };",
          "483:         params.runner_threadpool_size = dataset()->num_threads_;",
          "485:         return input_impl_->GetNext(IteratorContext{std::move(params)},",
          "486:                                     out_tensors, end_of_sequence);",
          "487:       }",
          "",
          "[Removed Lines]",
          "484:         tf_shared_lock l(mu_);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "496:       Status SaveInternal(SerializationContext* ctx,",
          "497:                           IteratorStateWriter* writer) override {",
          "499:         DCHECK(input_impl_ != nullptr);",
          "500:         TF_RETURN_IF_ERROR(SaveInput(ctx, writer, input_impl_));",
          "501:         return Status::OK();",
          "",
          "[Removed Lines]",
          "498:         mutex_lock l(mu_);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "504:       Status RestoreInternal(IteratorContext* ctx,",
          "505:                              IteratorStateReader* reader) override {",
          "507:         TF_RETURN_IF_ERROR(RestoreInput(ctx, reader, input_impl_));",
          "508:         return Status::OK();",
          "509:       }",
          "511:      private:",
          "514:     };",
          "516:     const DatasetBase* const input_;",
          "",
          "[Removed Lines]",
          "506:         mutex_lock l(mu_);",
          "512:       mutex mu_;",
          "513:       std::unique_ptr<IteratorBase> input_impl_ TF_GUARDED_BY(mu_);",
          "",
          "[Added Lines]",
          "500:       std::unique_ptr<IteratorBase> input_impl_;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf32fe44683b90e05f5ea35bed0456926915c5fb",
      "candidate_info": {
        "commit_hash": "bf32fe44683b90e05f5ea35bed0456926915c5fb",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/bf32fe44683b90e05f5ea35bed0456926915c5fb",
        "files": [
          "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
        ],
        "message": "[tf.data] Set limit on number of threads used in threadpool_dataset.\n\nPiperOrigin-RevId: 410922677\nChange-Id: Ib25814a99043ab10805b5d2d7088ae0e0b7b04fd",
        "before_after_code_files": [
          "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc": [
          "File: tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc -> tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     PrivateThreadPoolDatasetOp::kDatasetType;",
          "42: class ThreadPoolResource : public ResourceBase {",
          "43:  public:",
          "44:   ThreadPoolResource(Env* env, const ThreadOptions& thread_options,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: namespace {",
          "45: constexpr int kThreadLimit = 65536;",
          "47: Status ValidateNumThreads(int32_t num_threads) {",
          "48:   if (num_threads < 0) {",
          "49:     return errors::InvalidArgument(\"`num_threads` must be >= 0\");",
          "50:   }",
          "51:   if (num_threads >= kThreadLimit) {",
          "52:     return errors::InvalidArgument(\"`num_threads` must be < \", kThreadLimit);",
          "53:   }",
          "54:   return Status::OK();",
          "55: }",
          "56: }  // namespace",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"num_threads\", &num_threads_));",
          "84:     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"max_intra_op_parallelism\",",
          "85:                                      &max_intra_op_parallelism_));",
          "89:   }",
          "",
          "[Removed Lines]",
          "86:     OP_REQUIRES(",
          "87:         ctx, num_threads_ > 0,",
          "88:         errors::InvalidArgument(\"`num_threads` must be greater than zero.\"));",
          "",
          "[Added Lines]",
          "102:     OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads_));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:                                                         DatasetBase* input,",
          "530:                                                         int32 num_threads,",
          "531:                                                         DatasetBase** output) {",
          "535:                         DatasetContext(DatasetContext::Params(",
          "536:                             {PrivateThreadPoolDatasetOp::kDatasetType,",
          "",
          "[Removed Lines]",
          "532:   OP_REQUIRES(ctx, num_threads >= 0,",
          "533:               errors::InvalidArgument(\"`num_threads` must be >= 0\"));",
          "",
          "[Added Lines]",
          "546:   OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "544:   int64 num_threads = 0;",
          "545:   OP_REQUIRES_OK(ctx,",
          "546:                  ParseScalarArgument<int64>(ctx, \"num_threads\", &num_threads));",
          "550: }",
          "",
          "[Removed Lines]",
          "547:   OP_REQUIRES(ctx, num_threads >= 0,",
          "548:               errors::InvalidArgument(\"`num_threads` must be >= 0\"));",
          "",
          "[Added Lines]",
          "560:   OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf6959fce015c30557c755553fb9612a3bf7691d",
      "candidate_info": {
        "commit_hash": "cf6959fce015c30557c755553fb9612a3bf7691d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/cf6959fce015c30557c755553fb9612a3bf7691d",
        "files": [
          "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
        ],
        "message": "[tf.data] Set limit on number of threads used in threadpool_dataset.\n\nPiperOrigin-RevId: 410922677\nChange-Id: Ib25814a99043ab10805b5d2d7088ae0e0b7b04fd",
        "before_after_code_files": [
          "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc": [
          "File: tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc -> tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     PrivateThreadPoolDatasetOp::kDatasetType;",
          "42: class ThreadPoolResource : public ResourceBase {",
          "43:  public:",
          "44:   ThreadPoolResource(Env* env, const ThreadOptions& thread_options,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: namespace {",
          "45: constexpr int kThreadLimit = 65536;",
          "47: Status ValidateNumThreads(int32_t num_threads) {",
          "48:   if (num_threads < 0) {",
          "49:     return errors::InvalidArgument(\"`num_threads` must be >= 0\");",
          "50:   }",
          "51:   if (num_threads >= kThreadLimit) {",
          "52:     return errors::InvalidArgument(\"`num_threads` must be < \", kThreadLimit);",
          "53:   }",
          "54:   return Status::OK();",
          "55: }",
          "56: }  // namespace",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"num_threads\", &num_threads_));",
          "84:     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"max_intra_op_parallelism\",",
          "85:                                      &max_intra_op_parallelism_));",
          "89:   }",
          "",
          "[Removed Lines]",
          "86:     OP_REQUIRES(",
          "87:         ctx, num_threads_ > 0,",
          "88:         errors::InvalidArgument(\"`num_threads` must be greater than zero.\"));",
          "",
          "[Added Lines]",
          "102:     OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads_));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:                                                         DatasetBase* input,",
          "530:                                                         int32_t num_threads,",
          "531:                                                         DatasetBase** output) {",
          "535:                         DatasetContext(DatasetContext::Params(",
          "536:                             {PrivateThreadPoolDatasetOp::kDatasetType,",
          "",
          "[Removed Lines]",
          "532:   OP_REQUIRES(ctx, num_threads >= 0,",
          "533:               errors::InvalidArgument(\"`num_threads` must be >= 0\"));",
          "",
          "[Added Lines]",
          "546:   OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "544:   int64_t num_threads = 0;",
          "545:   OP_REQUIRES_OK(",
          "546:       ctx, ParseScalarArgument<int64_t>(ctx, \"num_threads\", &num_threads));",
          "550: }",
          "",
          "[Removed Lines]",
          "547:   OP_REQUIRES(ctx, num_threads >= 0,",
          "548:               errors::InvalidArgument(\"`num_threads` must be >= 0\"));",
          "",
          "[Added Lines]",
          "560:   OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2350236983b10608231422d7d6bd636cdd85348d",
      "candidate_info": {
        "commit_hash": "2350236983b10608231422d7d6bd636cdd85348d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2350236983b10608231422d7d6bd636cdd85348d",
        "files": [
          "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
        ],
        "message": "[tf.data] Set limit on number of threads used in threadpool_dataset.\n\nPiperOrigin-RevId: 410922677\nChange-Id: Ib25814a99043ab10805b5d2d7088ae0e0b7b04fd",
        "before_after_code_files": [
          "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc||tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc": [
          "File: tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc -> tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     PrivateThreadPoolDatasetOp::kDatasetType;",
          "42: class ThreadPoolResource : public ResourceBase {",
          "43:  public:",
          "44:   ThreadPoolResource(Env* env, const ThreadOptions& thread_options,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: namespace {",
          "45: constexpr int kThreadLimit = 65536;",
          "47: Status ValidateNumThreads(int32_t num_threads) {",
          "48:   if (num_threads < 0) {",
          "49:     return errors::InvalidArgument(\"`num_threads` must be >= 0\");",
          "50:   }",
          "51:   if (num_threads >= kThreadLimit) {",
          "52:     return errors::InvalidArgument(\"`num_threads` must be < \", kThreadLimit);",
          "53:   }",
          "54:   return Status::OK();",
          "55: }",
          "56: }  // namespace",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"num_threads\", &num_threads_));",
          "84:     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"max_intra_op_parallelism\",",
          "85:                                      &max_intra_op_parallelism_));",
          "89:   }",
          "",
          "[Removed Lines]",
          "86:     OP_REQUIRES(",
          "87:         ctx, num_threads_ > 0,",
          "88:         errors::InvalidArgument(\"`num_threads` must be greater than zero.\"));",
          "",
          "[Added Lines]",
          "102:     OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads_));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "530:                                                         DatasetBase* input,",
          "531:                                                         int32 num_threads,",
          "532:                                                         DatasetBase** output) {",
          "536:                         DatasetContext(DatasetContext::Params(",
          "537:                             {PrivateThreadPoolDatasetOp::kDatasetType,",
          "",
          "[Removed Lines]",
          "533:   OP_REQUIRES(ctx, num_threads >= 0,",
          "534:               errors::InvalidArgument(\"`num_threads` must be >= 0\"));",
          "",
          "[Added Lines]",
          "547:   OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "545:   int64 num_threads = 0;",
          "546:   OP_REQUIRES_OK(ctx,",
          "547:                  ParseScalarArgument<int64>(ctx, \"num_threads\", &num_threads));",
          "551: }",
          "",
          "[Removed Lines]",
          "548:   OP_REQUIRES(ctx, num_threads >= 0,",
          "549:               errors::InvalidArgument(\"`num_threads` must be >= 0\"));",
          "",
          "[Added Lines]",
          "561:   OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads));",
          "",
          "---------------"
        ]
      }
    }
  ]
}