{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dbdd93b7e1b6f4e129df36309868a4c1fb002207",
      "candidate_info": {
        "commit_hash": "dbdd93b7e1b6f4e129df36309868a4c1fb002207",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dbdd93b7e1b6f4e129df36309868a4c1fb002207",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases in test/fuzzdata8.db.\n\nFossilOrigin-Name: 7be6222c9ec44596e4eddd906c831eb1272b90fbdf68641d791f216264feb7cf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e1724f1d618cfbcfd1e495d8965a395656cfc1114e1bffd4bc3be0bd5cdb6550",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db5ba5c385496191770a418e27607522474e611c",
      "candidate_info": {
        "commit_hash": "db5ba5c385496191770a418e27607522474e611c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db5ba5c385496191770a418e27607522474e611c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/like3.test"
        ],
        "message": "Omit tests of the LIKE optimization in like3.test when SQLITE_ENABLE_ICU is defined.\n\nFossilOrigin-Name: af53c41a127c314c0608f3fd016d3a26896783745e46cd180976a188400cdb75",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7be6222c9ec44596e4eddd906c831eb1272b90fbdf68641d791f216264feb7cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "183: # using PRAGMA case_sensitive_like=ON.",
          "184: #",
          "185: do_execsql_test like3-6.100 {",
          "186:   DROP TABLE IF EXISTS t1;",
          "187:   CREATE TABLE t1(path TEXT COLLATE nocase PRIMARY KEY,a,b,c) WITHOUT ROWID;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: ifcapable !icu {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:   QUERY PLAN",
          "230:   `--SEARCH TABLE t2 USING INDEX t2path2 (path>? AND path<?)",
          "231: }",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58b42ad1314348a2be094abda4239d2c0a6be926",
      "candidate_info": {
        "commit_hash": "58b42ad1314348a2be094abda4239d2c0a6be926",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/58b42ad1314348a2be094abda4239d2c0a6be926",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Earlier detection of corruption while added to the freelist.\n\nFossilOrigin-Name: 8c80b004cae71aaf820a31dba80c100ed162ef5bae845fb4535ff4d3be407500",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bcbe7d96df3c9515f679ccf671ca9ba89d081b53501495d4218eb5126196838b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6193:   assert( CORRUPT_DB || iPage>1 );",
          "6194:   assert( !pMemPage || pMemPage->pgno==iPage );",
          "6197:   if( pMemPage ){",
          "6198:     pPage = pMemPage;",
          "6199:     sqlite3PagerRef(pPage->pDbPage);",
          "",
          "[Removed Lines]",
          "6196:   if( iPage<2 ) return SQLITE_CORRUPT_BKPT;",
          "",
          "[Added Lines]",
          "6196:   if( iPage<2 || iPage>pBt->nPage ){",
          "6197:     return SQLITE_CORRUPT_BKPT;",
          "6198:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b186a622ee3650dae46ab52f24e23fb91ef4e6c0",
      "candidate_info": {
        "commit_hash": "b186a622ee3650dae46ab52f24e23fb91ef4e6c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b186a622ee3650dae46ab52f24e23fb91ef4e6c0",
        "files": [
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Disallow page-sizes smaller than 32 bytes in fts5. Also ensure the fts5 integrity-check works even when \"PRAGMA reverse_unordered_selects\" is true. Fix for [265e935b26].\n\nFossilOrigin-Name: 8ab0aebdb3c2d6fb3160b2c58ce6cc0495a6ddd960878a6395958c837f3d1b71",
        "before_after_code_files": [
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "828:     if( SQLITE_INTEGER==sqlite3_value_numeric_type(pVal) ){",
          "829:       pgsz = sqlite3_value_int(pVal);",
          "830:     }",
          "833:     }else{",
          "834:       pConfig->pgsz = pgsz;",
          "",
          "[Removed Lines]",
          "831:     if( pgsz<=0 || pgsz>FTS5_MAX_PAGE_SIZE ){",
          "",
          "[Added Lines]",
          "831:     if( pgsz<32 || pgsz>FTS5_MAX_PAGE_SIZE ){",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5890:   if( pSeg->pgnoFirst==0 ) return;",
          "5892:   fts5IndexPrepareStmt(p, &pStmt, sqlite3_mprintf(",
          "5894:       pConfig->zDb, pConfig->zName, pSeg->iSegid",
          "5895:   ));",
          "",
          "[Removed Lines]",
          "5893:       \"SELECT segid, term, (pgno>>1), (pgno&1) FROM %Q.'%q_idx' WHERE segid=%d\",",
          "",
          "[Added Lines]",
          "5893:       \"SELECT segid, term, (pgno>>1), (pgno&1) FROM %Q.'%q_idx' WHERE segid=%d \"",
          "5894:       \"ORDER BY 1, 2\",",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "4484: do_catchsql_test 36.1 {",
          "4485:   INSERT INTO t1(b) VALUES(",
          "4486:       x'78de3fa24af3733ca8769291a0fee3669f9fddefc5cba913e4225d4b6ce2b04f26b87fad3ee6f9b7d90a1ea62a169bf41e5d32707a6ca5c3d05e4bde05c9d89eaaa8c50e74333d2e9fcd7dfe95528a3a016aac1102d825c5cd70cf99d8a88e0ea7f798d4334386518b7ad359beb168b93aba059a2a3bd93112d65b44c12b9904ea786b204d80531cdf0504bf9b203dbe927061974caf7b9f30cbc3397b61f802e732012a6663d41c3607d6f1c0dbcfd489adac05ca500c0b04439d894cd93a840159225ef73b627e178b9f84b3ffe66cf22a963a8368813ff7961fc47f573211ccec95e0220dcbb3bf429f4a50ba54d7a53784ac51bfef346e6a');",
          "4489: #-------------------------------------------------------------------------",
          "4490: reset_db",
          "",
          "[Removed Lines]",
          "4487: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "4487: } {0 {}}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "107: }",
          "110: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: #-------------------------------------------------------------------------",
          "110: reset_db",
          "111: do_execsql_test 3.0 {",
          "112:   CREATE VIRTUAL TABLE vt0 USING fts5(a);",
          "113:   PRAGMA reverse_unordered_selects = true;",
          "114:   INSERT INTO vt0 VALUES('365062398'), (0), (0);",
          "115:   INSERT INTO vt0(vt0, rank) VALUES('pgsz', '38');",
          "116: }",
          "117: do_execsql_test 3.1 {",
          "118:   UPDATE vt0 SET a = 399905135; -- unexpected: database disk image is malformed",
          "119: }",
          "120: do_execsql_test 3.2 {",
          "121:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "122: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d76dbc5b0584c15d7d59e5c079868f2077f32b865f406b40ec837b8ab6ef2e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c40a3eb354f2fac4b3d8f24aa6fb459eb4b2d06",
      "candidate_info": {
        "commit_hash": "2c40a3eb354f2fac4b3d8f24aa6fb459eb4b2d06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c40a3eb354f2fac4b3d8f24aa6fb459eb4b2d06",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Disallow tables that have only virtual columns.\n\nFossilOrigin-Name: 591973217f1caf24cde91dc15b7edca2edda05dac8ae2b2cd8d71e7aa072f7d1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b0a3048f9df88bbc8979f2ac5247bee7d7bc1e585faca252610d2fcbe36d51d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2243: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2244:   if( p->tabFlags & TF_HasGenerated ){",
          "2246:     testcase( p->tabFlags & TF_HasVirtual );",
          "2247:     testcase( p->tabFlags & TF_HasStored );",
          "2248:     for(ii=0; ii<p->nCol; ii++){",
          "",
          "[Removed Lines]",
          "2245:     int ii;",
          "",
          "[Added Lines]",
          "2245:     int ii, nNV = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2253:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2254:                                     p->aCol[ii].pDflt, 0);",
          "2255:       }",
          "2256:     }",
          "2257:   }",
          "2258: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2256:       if( (colFlags & COLFLAG_VIRTUAL)==0 ) nNV++;",
          "2257:     }",
          "2258:     if( nNV==0 ){",
          "2259:       sqlite3ErrorMsg(pParse, \"must have at least one non-VIRTUAL column\");",
          "2260:       return;",
          "",
          "---------------"
        ]
      }
    }
  ]
}