{
  "cve_id": "CVE-2012-6697",
  "cve_desc": "InspIRCd before 2.0.7 allows remote attackers to cause a denial of service (infinite loop).",
  "repo": "inspircd/inspircd",
  "patch_hash": "58c893e834ff20495d007709220881a3ff13f423",
  "patch_info": {
    "commit_hash": "58c893e834ff20495d007709220881a3ff13f423",
    "repo": "inspircd/inspircd",
    "commit_url": "https://github.com/inspircd/inspircd/commit/58c893e834ff20495d007709220881a3ff13f423",
    "files": [
      "src/dns.cpp"
    ],
    "message": "Fixed infinite loop cauesd by invalid dns packets",
    "before_after_code_files": [
      "src/dns.cpp||src/dns.cpp"
    ]
  },
  "patch_diff": {
    "src/dns.cpp||src/dns.cpp": [
      "File: src/dns.cpp -> src/dns.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "801:   case DNS_QUERY_CNAME:",
      "802:   case DNS_QUERY_PTR:",
      "803:    o = 0;",
      "804:    q = 0;",
      "805:    while (q == 0 && i < length && o + 256 < 1023)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "803:   {",
      "804:    unsigned short lowest_pos = length;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "812:      i = ntohs(ptr);",
      "816:       return std::make_pair((unsigned char *) NULL, \"DN label decompression header is bogus\");",
      "819:      i &= ~DN_COMP_BITMASK;",
      "823:     }",
      "824:     else",
      "825:     {",
      "",
      "[Removed Lines]",
      "815:      if (!(i & DN_COMP_BITMASK))",
      "822:      i =- 12;",
      "",
      "[Added Lines]",
      "817:      if ((i & DN_COMP_BITMASK) != DN_COMP_BITMASK)",
      "824:      i -= 12;",
      "826:      if (i >= lowest_pos)",
      "827:       return std::make_pair((unsigned char *) NULL, \"Invalid decompression pointer\");",
      "828:      lowest_pos = i;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "843:     }",
      "844:    }",
      "845:    res[o] = 0;",
      "846:   break;",
      "847:   case DNS_QUERY_AAAA:",
      "848:    if (rr.rdlength != sizeof(struct in6_addr))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "852:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ed28c1ba666b39581adb860bf51cdde43c84cc89",
      "candidate_info": {
        "commit_hash": "ed28c1ba666b39581adb860bf51cdde43c84cc89",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/ed28c1ba666b39581adb860bf51cdde43c84cc89",
        "files": [
          "src/dns.cpp"
        ],
        "message": "Fixed out of bounds memory access from malformed DNS queries that have an invalid length label. Introduced in a6a07de0daa353bcd29056a4535a9c4784c113c8.",
        "before_after_code_files": [
          "src/dns.cpp||src/dns.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/inspircd/inspircd/pull/16"
        ],
        "olp_code_files": {
          "patch": [
            "src/dns.cpp||src/dns.cpp"
          ],
          "candidate": [
            "src/dns.cpp||src/dns.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/dns.cpp||src/dns.cpp": [
          "File: src/dns.cpp -> src/dns.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "761:    }",
          "762:   }",
          "764:    return std::make_pair((unsigned char*)NULL,\"Incorrectly sized DNS reply\");",
          "",
          "[Removed Lines]",
          "763:   if (length - i < 10)",
          "",
          "[Added Lines]",
          "763:   if (static_cast<int>(length - i) < 10)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9aa28f3730fb3dd69c1e06f78bb2bbc43d36c684",
      "candidate_info": {
        "commit_hash": "9aa28f3730fb3dd69c1e06f78bb2bbc43d36c684",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/9aa28f3730fb3dd69c1e06f78bb2bbc43d36c684",
        "files": [
          "src/dns.cpp"
        ],
        "message": "dns: reject messages with lengths larger than DNSHeader with prejudice\n\nThis also includes when decompressing name entries.",
        "before_after_code_files": [
          "src/dns.cpp||src/dns.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/dns.cpp||src/dns.cpp"
          ],
          "candidate": [
            "src/dns.cpp||src/dns.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/dns.cpp||src/dns.cpp": [
          "File: src/dns.cpp -> src/dns.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "162: DNSRequest::DNSRequest(DNS* dns, int rid, const std::string &original) : dnsobj(dns)",
          "163: {",
          "166:  orig = original;",
          "167:  RequestTimeout* RT = new RequestTimeout(ServerInstance->Config->dns_timeout ? ServerInstance->Config->dns_timeout : 5, this, rid);",
          "",
          "[Removed Lines]",
          "164:  res = new unsigned char[512];",
          "",
          "[Added Lines]",
          "169:  res = new unsigned char[sizeof(DNSHeader) * 2];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "691: DNSInfo DNSRequest::ResultIsReady(DNSHeader &header, int length)",
          "692: {",
          "694:  int q = 0;",
          "696:  ResourceRecord rr;",
          "697:   unsigned short ptr;",
          "",
          "[Removed Lines]",
          "693:  unsigned i = 0;",
          "695:  int curanswer, o;",
          "",
          "[Added Lines]",
          "698:  unsigned i = 0, o;",
          "700:  int curanswer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "718:  length -= 12;",
          "721:  {",
          "722:   if (header.payload[i] > 63)",
          "723:   {",
          "",
          "[Removed Lines]",
          "720:  while ((unsigned int)q < header.qdcount && i < length)",
          "",
          "[Added Lines]",
          "725:  while ((unsigned int)q < header.qdcount && i < (unsigned) length)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "738:  while ((unsigned)curanswer < header.ancount)",
          "739:  {",
          "740:   q = 0;",
          "742:   {",
          "743:    if (header.payload[i] > 63)",
          "744:    {",
          "",
          "[Removed Lines]",
          "741:   while (q == 0 && i < length)",
          "",
          "[Added Lines]",
          "746:   while (q == 0 && i < (unsigned) length)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "756:    }",
          "757:   }",
          "759:    return std::make_pair((unsigned char*)NULL,\"Incorrectly sized DNS reply\");",
          "",
          "[Removed Lines]",
          "758:   if (length - i < 10)",
          "",
          "[Added Lines]",
          "763:   if ((unsigned) length - i < 10)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "791:  switch (rr.type)",
          "792:  {",
          "793:   case DNS_QUERY_CNAME:",
          "795:   case DNS_QUERY_PTR:",
          "796:    o = 0;",
          "797:    q = 0;",
          "799:    {",
          "800:     if (header.payload[i] > 63)",
          "801:     {",
          "802:      memcpy(&ptr,&header.payload[i],2);",
          "804:     }",
          "805:     else",
          "806:     {",
          "",
          "[Removed Lines]",
          "798:    while (q == 0 && i < length && o + 256 < 1023)",
          "803:      i = ntohs(ptr) - 0xC000 - 12;",
          "",
          "[Added Lines]",
          "805:    while (q == 0 && i < (unsigned) length && o + 256 < 1023)",
          "812:      i = ntohs(ptr);",
          "815:      if (!(i & DN_COMP_BITMASK))",
          "816:       return std::make_pair((unsigned char *) NULL, \"DN label decompression header is bogus\");",
          "819:      i &= ~DN_COMP_BITMASK;",
          "822:      i =- 12;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "813:       res[o] = 0;",
          "814:       if (o != 0)",
          "815:        res[o++] = '.';",
          "817:       o += header.payload[i];",
          "818:       i += header.payload[i] + 1;",
          "819:      }",
          "",
          "[Removed Lines]",
          "816:       memcpy(&res[o],&header.payload[i + 1],header.payload[i]);",
          "",
          "[Added Lines]",
          "836:       if (o + header.payload[i] > sizeof(DNSHeader))",
          "837:        return std::make_pair((unsigned char *) NULL, \"DN label decompression is impossible -- malformed/hostile packet?\");",
          "839:       memcpy(&res[o], &header.payload[i + 1], header.payload[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a161ae5e2e12bbb32f57395147b0e28a413c65bb",
      "candidate_info": {
        "commit_hash": "a161ae5e2e12bbb32f57395147b0e28a413c65bb",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/a161ae5e2e12bbb32f57395147b0e28a413c65bb",
        "files": [
          "src/dns.cpp"
        ],
        "message": "Fixed infinite loop cauesd by invalid dns packets",
        "before_after_code_files": [
          "src/dns.cpp||src/dns.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/dns.cpp||src/dns.cpp"
          ],
          "candidate": [
            "src/dns.cpp||src/dns.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/dns.cpp||src/dns.cpp": [
          "File: src/dns.cpp -> src/dns.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "886:   case DNS_QUERY_CNAME:",
          "887:   case DNS_QUERY_PTR:",
          "888:    o = 0;",
          "889:    q = 0;",
          "890:    while (q == 0 && i < length && o + 256 < 1023)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "888:   {",
          "889:    unsigned short lowest_pos = length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "897:      i = ntohs(ptr);",
          "901:       return std::make_pair((unsigned char *) NULL, \"DN label decompression header is bogus\");",
          "904:      i &= ~DN_COMP_BITMASK;",
          "908:     }",
          "909:     else",
          "910:     {",
          "",
          "[Removed Lines]",
          "900:      if (!(i & DN_COMP_BITMASK))",
          "907:      i =- 12;",
          "",
          "[Added Lines]",
          "902:      if ((i & DN_COMP_BITMASK) != DN_COMP_BITMASK)",
          "909:      i -= 12;",
          "911:      if (i >= lowest_pos)",
          "912:       return std::make_pair((unsigned char *) NULL, \"Invalid decompression pointer\");",
          "913:      lowest_pos = i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "928:     }",
          "929:    }",
          "930:    res[o] = 0;",
          "931:   break;",
          "932:   case DNS_QUERY_AAAA:",
          "933:    if (rr.rdlength != sizeof(struct in6_addr))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "937:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f2956e9d72d0b06c42a2653474213dec1642783",
      "candidate_info": {
        "commit_hash": "2f2956e9d72d0b06c42a2653474213dec1642783",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/2f2956e9d72d0b06c42a2653474213dec1642783",
        "files": [
          "src/dns.cpp"
        ],
        "message": "Fixed infinite loop cauesd by invalid dns packets",
        "before_after_code_files": [
          "src/dns.cpp||src/dns.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/dns.cpp||src/dns.cpp"
          ],
          "candidate": [
            "src/dns.cpp||src/dns.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/dns.cpp||src/dns.cpp": [
          "File: src/dns.cpp -> src/dns.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "798:   case DNS_QUERY_CNAME:",
          "799:   case DNS_QUERY_PTR:",
          "800:    o = 0;",
          "801:    q = 0;",
          "802:    while (q == 0 && i < length && o + 256 < 1023)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800:   {",
          "801:    unsigned short lowest_pos = length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "809:      i = ntohs(ptr);",
          "813:       return std::make_pair((unsigned char *) NULL, \"DN label decompression header is bogus\");",
          "816:      i &= ~DN_COMP_BITMASK;",
          "820:     }",
          "821:     else",
          "822:     {",
          "",
          "[Removed Lines]",
          "812:      if (!(i & DN_COMP_BITMASK))",
          "819:      i =- 12;",
          "",
          "[Added Lines]",
          "814:      if ((i & DN_COMP_BITMASK) != DN_COMP_BITMASK)",
          "821:      i -= 12;",
          "823:      if (i >= lowest_pos)",
          "824:       return std::make_pair((unsigned char *) NULL, \"Invalid decompression pointer\");",
          "825:      lowest_pos = i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "840:     }",
          "841:    }",
          "842:    res[o] = 0;",
          "843:   break;",
          "844:   case DNS_QUERY_AAAA:",
          "845:    if (rr.rdlength != sizeof(struct in6_addr))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "849:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}