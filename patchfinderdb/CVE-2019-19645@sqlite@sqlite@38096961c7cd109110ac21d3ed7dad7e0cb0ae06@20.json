{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bffdd636339b32c706253e8c791ccca8b3f88f19",
      "candidate_info": {
        "commit_hash": "bffdd636339b32c706253e8c791ccca8b3f88f19",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bffdd636339b32c706253e8c791ccca8b3f88f19",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/check.test",
          "test/indexexpr1.test"
        ],
        "message": "When computing an expression value for an index-on-expression or a CHECK constraint and the expressions uses a REAL table column, but the value of that column is an integer (in other words, when it is using the store-real-as-integer optimization) be sure to promote the value to real before evaluating the expression.  Ticket [57af00b6642ecd68].\n\nFossilOrigin-Name: 0658c16e311393c8a347b1bd41fa5dbfd2e184aa75d84c011aa8dbac79b632e9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/check.test||test/check.test",
          "test/indexexpr1.test||test/indexexpr1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f6d8956cf8b5993a4332b9330e89d5c3d5f8872ea5a2ce3d2e91127406cc1839",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3532:       if( iTab<0 ){",
          "3533:         if( pParse->iSelfTab<0 ){",
          "3536:         }else{",
          "",
          "[Removed Lines]",
          "3535:           return pExpr->iColumn - pParse->iSelfTab;",
          "",
          "[Added Lines]",
          "3535:           assert( pExpr->y.pTab!=0 );",
          "3536:           assert( pExpr->iColumn>=XN_ROWID );",
          "3537:           assert( pExpr->iColumn<pExpr->y.pTab->nCol );",
          "3538:           if( pExpr->iColumn>=0",
          "3539:             && pExpr->y.pTab->aCol[pExpr->iColumn].affinity==SQLITE_AFF_REAL",
          "3540:           ){",
          "3541:             sqlite3VdbeAddOp2(v, OP_SCopy, pExpr->iColumn - pParse->iSelfTab,",
          "3542:                               target);",
          "3543:             sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "3544:             return target;",
          "3545:           }else{",
          "3546:             return pExpr->iColumn - pParse->iSelfTab;",
          "3547:           }",
          "",
          "---------------"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:       y REAL CONSTRAINT two CHECK( typeof(coalesce(y,0.1))=='real' ),",
          "124:       z TEXT CONSTRAINT three CHECK( typeof(coalesce(z,''))=='text' )",
          "125:     );",
          "126:     PRAGMA writable_schema = 0;",
          "127:   }",
          "128: } {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:     CREATE TABLE t2n(",
          "127:       x INTEGER CONSTRAINT one CHECK( typeof(coalesce(x,0))==\"integer\" ),",
          "128:       y NUMERIC CONSTRAINT two CHECK( typeof(coalesce(y,0.1))=='real' ),",
          "129:       z TEXT CONSTRAINT three CHECK( typeof(coalesce(z,''))=='text' )",
          "130:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   }",
          "147: } {1 {CHECK constraint failed: one}}",
          "148: do_test check-2.5 {",
          "149:   catchsql {",
          "150:     INSERT INTO t2 VALUES(NULL, 5, NULL);",
          "151:   }",
          "152: } {1 {CHECK constraint failed: two}}",
          "153: do_test check-2.6 {",
          "154:   catchsql {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:   # The 5 gets automatically promoted to 5.0 because the column type is REAL",
          "158: } {0 {}}",
          "159: do_test check-2.5b {",
          "160:   # This time the column type is NUMERIC, so not automatic promption to REAL",
          "161:   # occurs and the constraint fails.",
          "162:   catchsql {",
          "163:     INSERT INTO t2n VALUES(NULL, 5, NULL);",
          "164:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:   execsql {",
          "196:     DROP TABLE IF EXISTS t2b;",
          "197:     DROP TABLE IF EXISTS t2c;",
          "198:   }",
          "199: } {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:     DROP TABLE IF EXISTS t2n;",
          "",
          "---------------"
        ],
        "test/indexexpr1.test||test/indexexpr1.test": [
          "File: test/indexexpr1.test -> test/indexexpr1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "457:   SELECT * FROM t0 WHERE ((NULL IS FALSE) IS FALSE);",
          "458: } {0}",
          "460: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460: # 2019-09-02 https://www.sqlite.org/src/tktview/57af00b6642ecd6848",
          "461: # When the expression of an an index-on-expression references a",
          "462: # table column of type REAL that is actually holding an MEM_IntReal",
          "463: # value, be sure to use the REAL value and not the INT value when",
          "464: # computing the expression.",
          "465: #",
          "466: do_execsql_test indexexpr-1800 {",
          "467:   DROP TABLE IF EXISTS t0;",
          "468:   CREATE TABLE t0(c0 REAL, c1 TEXT);",
          "469:   CREATE INDEX i0 ON t0(+c0, c0);",
          "470:   INSERT INTO t0(c0) VALUES(0);",
          "471:   SELECT CAST(+ t0.c0 AS BLOB) LIKE 0 FROM t0;",
          "472: } {0}",
          "473: do_execsql_test indexexpr-1810 {",
          "474:   SELECT CAST(+ t0.c0 AS BLOB) LIKE '0.0' FROM t0;",
          "475: } {1}",
          "476: do_execsql_test indexexpr-1820 {",
          "477:   DROP TABLE IF EXISTS t1;",
          "478:   CREATE TABLE t1(x REAL);",
          "479:   CREATE INDEX t1x ON t1(x, +x);",
          "480:   INSERT INTO t1(x) VALUES(2);",
          "481:   SELECT +x FROM t1 WHERE x=2;",
          "482: } {2.0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91f34eab2d08ef03e4454664458960f746ba580e",
      "candidate_info": {
        "commit_hash": "91f34eab2d08ef03e4454664458960f746ba580e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/91f34eab2d08ef03e4454664458960f746ba580e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/shell.c.in"
        ],
        "message": "Allow DROP TABLE to work on tables name \"sqlite_parameters\" just as it does with tables named \"sqlite_stat%\".  Fix for the \".parameter clear\" command in the shell.\n\nFossilOrigin-Name: e768179baacb2423205a774cc8149fe58ed86a9320102aff4844b1d8933aa1db",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0ceab26f15c4c7039647cbccf8939dd5c36a60b70ffeefcd3b415c8d4d8351cd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2816:   }",
          "2817: #endif",
          "2818:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0",
          "2820:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2821:     goto exit_drop_table;",
          "2822:   }",
          "",
          "[Removed Lines]",
          "2819:     && sqlite3StrNICmp(pTab->zName, \"sqlite_stat\", 11)!=0 ){",
          "",
          "[Added Lines]",
          "2819:     && sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)!=0",
          "2820:     && sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)!=0 ){",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8150:     if( nArg==2 && strcmp(azArg[1],\"clear\")==0 ){",
          "8154:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.sqlite_parameters;\",",
          "8155:                    0, 0, 0);",
          "8157:     }else",
          "",
          "[Removed Lines]",
          "8151:       int wrSchema = 0;",
          "8152:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);",
          "8153:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);",
          "8156:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e85e9033ff34f8f75e5bb56152be39be39a62a5",
      "candidate_info": {
        "commit_hash": "7e85e9033ff34f8f75e5bb56152be39be39a62a5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e85e9033ff34f8f75e5bb56152be39be39a62a5",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Disable unix-specific features of dbfuzz2 when compiling on windows.\n\nFossilOrigin-Name: af84774d1eebcfe6a61b564b4edf280ad3c3a93f39b7f70b6fcc56f7bbdfb9eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c48f6f39c5f89a338fed7153553a27a5d882d4d8db8221e911b96e0dd57c53d9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include <stdarg.h>",
          "44: #include <ctype.h>",
          "45: #include <stdint.h>",
          "46: #include <sys/time.h>",
          "47: #include <sys/resource.h>",
          "48: #include \"sqlite3.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #ifndef _WIN32",
          "49: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:         szMax = strtol(argv[++i], 0, 0);",
          "262:         continue;",
          "263:       }",
          "264:       if( strcmp(z,\"max-stack\")==0",
          "265:        || strcmp(z,\"max-data\")==0",
          "266:        || strcmp(z,\"max-as\")==0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: #ifndef _WIN32",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0f20b46fbac80976a71e0a8f618976be3661e19",
      "candidate_info": {
        "commit_hash": "e0f20b46fbac80976a71e0a8f618976be3661e19",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e0f20b46fbac80976a71e0a8f618976be3661e19",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbemem.c"
        ],
        "message": "Performance improvement on the OP_Variable opcode.\n\nFossilOrigin-Name: 1dc7993bb6957587a6c63142e97b8e4137c3d81bbfd724f86048e0894bcb429b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 27160df7b3a04ac59d06013ede1d2ee27a4ace86a525ecc333bf7f8b5c580afb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1236:     goto too_big;",
          "1237:   }",
          "1238:   pOut = &aMem[pOp->p2];",
          "1241:   UPDATE_MAX_BLOBSIZE(pOut);",
          "1242:   break;",
          "1243: }",
          "",
          "[Removed Lines]",
          "1239:   sqlite3VdbeMemShallowCopy(pOut, pVar, MEM_Static);",
          "1240:   pOut->flags |= MEM_FromBind;",
          "",
          "[Added Lines]",
          "1239:   if( VdbeMemDynamic(pOut) ) sqlite3VdbeMemSetNull(pOut);",
          "1240:   memcpy(pOut, pVar, MEMCELLSIZE);",
          "1241:   pOut->flags &= ~(MEM_Dyn|MEM_Ephem);",
          "1242:   pOut->flags |= MEM_Static|MEM_FromBind;",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:               ((p->flags&MEM_Static)!=0 ? 1 : 0) <= 1 );",
          "61:                            |MEM_Dyn|MEM_Ephem|MEM_Static))==0 );",
          "62:     }else{",
          "",
          "[Removed Lines]",
          "60:       assert( (p->flags & ~(MEM_Null|MEM_Term|MEM_Subtype",
          "",
          "[Added Lines]",
          "60:       assert( (p->flags & ~(MEM_Null|MEM_Term|MEM_Subtype|MEM_FromBind",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a79bcf358bcf84f0d42f091da132be82412ca120",
      "candidate_info": {
        "commit_hash": "a79bcf358bcf84f0d42f091da132be82412ca120",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a79bcf358bcf84f0d42f091da132be82412ca120",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Prevent unsigned 32-bit integer overflow from leading to a buffer overread inside of an assert().  The problem fixed here is no reachable in production code.\n\nFossilOrigin-Name: 0f850a25d67a752fe1e9059c0c3f78e00c222113e556a7605fd3c50817b573cb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 726e398b9ddc15ea1b67c40e2a12ddf5d04428a866699588c5fa1af75af846e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3888:     ){",
          "3889:       break;",
          "3890:     }",
          "",
          "[Removed Lines]",
          "3886:     if( d1+serial_type1+2>(u32)nKey1",
          "3887:      && d1+sqlite3VdbeSerialTypeLen(serial_type1)>(u32)nKey1",
          "",
          "[Added Lines]",
          "3886:     if( d1+(u64)serial_type1+2>(u64)nKey1",
          "3887:      && d1+(u64)sqlite3VdbeSerialTypeLen(serial_type1)>(u64)nKey1",
          "",
          "---------------"
        ]
      }
    }
  ]
}