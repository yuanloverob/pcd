{
  "cve_id": "CVE-2020-4032",
  "cve_desc": "In FreeRDP before version 2.1.2, there is an integer casting vulnerability in update_recv_secondary_order. All clients with +glyph-cache /relax-order-checks are affected. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
  "patch_info": {
    "commit_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/e7bffa64ef5ed70bac94f823e2b95262642f5296",
    "files": [
      "libfreerdp/core/orders.c"
    ],
    "message": "Fixed OOB read in update_recv_secondary_order\n\nCVE-2020-4032 thanks to @antonio-morales for finding this.",
    "before_after_code_files": [
      "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
      "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3762:              name, end - start);",
      "3763:   return FALSE;",
      "3764:  }",
      "3766:  if (diff > 0)",
      "3767:  {",
      "3768:   WLog_Print(update->log, WLOG_DEBUG,",
      "3769:              \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes short, skipping\", name, diff);",
      "3771:  }",
      "3772:  return rc;",
      "3773: }",
      "",
      "[Removed Lines]",
      "3765:  diff = start - end;",
      "3770:   Stream_Seek(s, diff);",
      "",
      "[Added Lines]",
      "3765:  diff = end - start;",
      "3770:   if (!Stream_SafeSeek(s, diff))",
      "3771:    return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "12800786a8a2c38587942eb20ac184c4867e1ddb",
      "candidate_info": {
        "commit_hash": "12800786a8a2c38587942eb20ac184c4867e1ddb",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/12800786a8a2c38587942eb20ac184c4867e1ddb",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed OOB read in update_recv_secondary_order\n\nCVE-2020-4032 thanks to @antonio-morales for finding this.\n\n(cherry picked from commit e7bffa64ef5ed70bac94f823e2b95262642f5296)",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ],
          "candidate": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3762:              name, end - start);",
          "3763:   return FALSE;",
          "3764:  }",
          "3766:  if (diff > 0)",
          "3767:  {",
          "3768:   WLog_Print(update->log, WLOG_DEBUG,",
          "3769:              \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes short, skipping\", name, diff);",
          "3771:  }",
          "3772:  return rc;",
          "3773: }",
          "",
          "[Removed Lines]",
          "3765:  diff = start - end;",
          "3770:   Stream_Seek(s, diff);",
          "",
          "[Added Lines]",
          "3765:  diff = end - start;",
          "3770:   if (!Stream_SafeSeek(s, diff))",
          "3771:    return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a45afe9db77a19e5a177fe1dc3e85119013f9587",
      "candidate_info": {
        "commit_hash": "a45afe9db77a19e5a177fe1dc3e85119013f9587",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a45afe9db77a19e5a177fe1dc3e85119013f9587",
        "files": [
          "winpr/libwinpr/sysinfo/sysinfo.c"
        ],
        "message": "Replaced gmtime with gmtime_r",
        "before_after_code_files": [
          "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c": [
          "File: winpr/libwinpr/sysinfo/sysinfo.c -> winpr/libwinpr/sysinfo/sysinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: void GetSystemTime(LPSYSTEMTIME lpSystemTime)",
          "214: {",
          "215:  time_t ct = 0;",
          "216:  struct tm* stm = NULL;",
          "217:  WORD wMilliseconds = 0;",
          "218:  ct = time(NULL);",
          "219:  wMilliseconds = (WORD)(GetTickCount() % 1000);",
          "221:  ZeroMemory(lpSystemTime, sizeof(SYSTEMTIME));",
          "223:  if (stm)",
          "",
          "[Removed Lines]",
          "220:  stm = gmtime(&ct);",
          "",
          "[Added Lines]",
          "216:  struct tm tres;",
          "221:  stm = gmtime_r(&ct, &tres);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f753c25ad3d5dae7890fe73cfb3c091c015d97ed",
      "candidate_info": {
        "commit_hash": "f753c25ad3d5dae7890fe73cfb3c091c015d97ed",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f753c25ad3d5dae7890fe73cfb3c091c015d97ed",
        "files": [
          "libfreerdp/gdi/graphics.c"
        ],
        "message": "Reset freed HGDI_DC\n\nCVE-2020-4031 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/gdi/graphics.c||libfreerdp/gdi/graphics.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/gdi/graphics.c||libfreerdp/gdi/graphics.c": [
          "File: libfreerdp/gdi/graphics.c -> libfreerdp/gdi/graphics.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:  if (!gdi_bitmap->bitmap)",
          "94:  {",
          "95:   gdi_DeleteDC(gdi_bitmap->hdc);",
          "96:   return FALSE;",
          "97:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:   gdi_bitmap->hdc = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a02af5a12b400fcb6ad121a0a71e4440c2e9152",
      "candidate_info": {
        "commit_hash": "1a02af5a12b400fcb6ad121a0a71e4440c2e9152",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/1a02af5a12b400fcb6ad121a0a71e4440c2e9152",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c"
        ],
        "message": "Fixed codition with side effects",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:  {",
          "581:   pCallback = channel->channel_callback;",
          "584:   {",
          "587:   }",
          "589:   WLog_Print(drdynvc->log, WLOG_DEBUG, \"open_channel: ChannelId %\" PRIu32 \"\", ChannelId);",
          "",
          "[Removed Lines]",
          "583:   if ((pCallback->OnOpen) && (error = pCallback->OnOpen(pCallback)))",
          "585:    WLog_Print(drdynvc->log, WLOG_ERROR, \"OnOpen failed with error %\" PRIu32 \"!\", error);",
          "586:    return error;",
          "",
          "[Added Lines]",
          "583:   if (pCallback->OnOpen)",
          "585:    error = pCallback->OnOpen(pCallback);",
          "586:    if (error)",
          "587:    {",
          "588:     WLog_Print(drdynvc->log, WLOG_ERROR, \"OnOpen failed with error %\" PRIu32 \"!\",",
          "589:                error);",
          "590:     return error;",
          "591:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8beb55913471952f92770c90c372139d78c16c0",
      "candidate_info": {
        "commit_hash": "b8beb55913471952f92770c90c372139d78c16c0",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b8beb55913471952f92770c90c372139d78c16c0",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed OOB read in update_read_cache_bitmap_v3_order\n\nCVE-2020-11096 thanks @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ],
          "candidate": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:  }",
          "114: }",
          "131: static BOOL check_order_activated(wLog* log, rdpSettings* settings, const char* orderName,",
          "132:                                   BOOL condition)",
          "",
          "[Removed Lines]",
          "116: static const BYTE CBR2_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
          "118: static const BYTE BPP_CBR2[] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
          "119:                               0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
          "121: static const BYTE CBR23_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
          "123: static const BYTE BPP_CBR23[] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
          "124:                                0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
          "126: static const BYTE BMF_BPP[] = { 0, 1, 0, 8, 16, 24, 32, 0 };",
          "128: static const BYTE BPP_BMF[] = { 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
          "129:                              0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
          "",
          "[Added Lines]",
          "116: static BYTE get_cbr2_bpp(UINT32 bpp, BOOL* pValid)",
          "117: {",
          "118:  if (pValid)",
          "120:  switch (bpp)",
          "121:  {",
          "122:   case 3:",
          "123:    return 8;",
          "124:   case 4:",
          "125:    return 16;",
          "126:   case 5:",
          "127:    return 24;",
          "128:   case 6:",
          "129:    return 32;",
          "130:   default:",
          "131:    WLog_WARN(TAG, \"Invalid bpp %\" PRIu32, bpp);",
          "132:    if (pValid)",
          "134:    return 0;",
          "135:  }",
          "136: }",
          "138: static BYTE get_bmf_bpp(UINT32 bmf, BOOL* pValid)",
          "139: {",
          "140:  if (pValid)",
          "142:  switch (bmf)",
          "143:  {",
          "144:   case 1:",
          "145:    return 1;",
          "146:   case 3:",
          "147:    return 8;",
          "148:   case 4:",
          "149:    return 16;",
          "150:   case 5:",
          "151:    return 24;",
          "152:   case 6:",
          "153:    return 32;",
          "154:   default:",
          "155:    WLog_WARN(TAG, \"Invalid bmf %\" PRIu32, bmf);",
          "156:    if (pValid)",
          "158:    return 0;",
          "159:  }",
          "160: }",
          "161: static BYTE get_bpp_bmf(UINT32 bpp, BOOL* pValid)",
          "162: {",
          "163:  if (pValid)",
          "165:  switch (bpp)",
          "166:  {",
          "167:   case 1:",
          "168:    return 1;",
          "169:   case 8:",
          "170:    return 3;",
          "171:   case 16:",
          "172:    return 4;",
          "173:   case 24:",
          "174:    return 5;",
          "175:   case 32:",
          "176:    return 6;",
          "177:   default:",
          "178:    WLog_WARN(TAG, \"Invalid color depth %\" PRIu32, bpp);",
          "179:    if (pValid)",
          "181:    return 0;",
          "182:  }",
          "183: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "815:  if (brush->style & CACHED_BRUSH)",
          "816:  {",
          "817:   brush->index = brush->hatch;",
          "820:   if (brush->bpp == 0)",
          "821:    brush->bpp = 1;",
          "822:  }",
          "",
          "[Removed Lines]",
          "818:   brush->bpp = BMF_BPP[brush->style & 0x07];",
          "",
          "[Added Lines]",
          "871:   BOOL rc;",
          "873:   brush->bpp = get_bmf_bpp(brush->style, &rc);",
          "874:   if (!rc)",
          "875:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "859:  if (brush->style & CACHED_BRUSH)",
          "860:  {",
          "861:   brush->hatch = brush->index;",
          "864:   if (brush->bpp == 0)",
          "865:    brush->bpp = 1;",
          "866:  }",
          "",
          "[Removed Lines]",
          "862:   brush->bpp = BMF_BPP[brush->style & 0x07];",
          "",
          "[Added Lines]",
          "917:   BOOL rc;",
          "919:   brush->bpp = get_bmf_bpp(brush->style, &rc);",
          "920:   if (!rc)",
          "921:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2016: static CACHE_BITMAP_V2_ORDER* update_read_cache_bitmap_v2_order(rdpUpdate* update, wStream* s,",
          "2017:                                                                 BOOL compressed, UINT16 flags)",
          "2018: {",
          "2019:  BYTE bitsPerPixelId;",
          "2020:  CACHE_BITMAP_V2_ORDER* cache_bitmap_v2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2077:  BOOL rc;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2030:  cache_bitmap_v2->cacheId = flags & 0x0003;",
          "2031:  cache_bitmap_v2->flags = (flags & 0xFF80) >> 7;",
          "2032:  bitsPerPixelId = (flags & 0x0078) >> 3;",
          "2035:  if (cache_bitmap_v2->flags & CBR2_PERSISTENT_KEY_PRESENT)",
          "2036:  {",
          "",
          "[Removed Lines]",
          "2033:  cache_bitmap_v2->bitmapBpp = CBR2_BPP[bitsPerPixelId];",
          "",
          "[Added Lines]",
          "2092:  cache_bitmap_v2->bitmapBpp = get_cbr2_bpp(bitsPerPixelId, &rc);",
          "2093:  if (!rc)",
          "2094:   goto fail;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2109: BOOL update_write_cache_bitmap_v2_order(wStream* s, CACHE_BITMAP_V2_ORDER* cache_bitmap_v2,",
          "2110:                                         BOOL compressed, UINT16* flags)",
          "2111: {",
          "2112:  BYTE bitsPerPixelId;",
          "2114:  if (!Stream_EnsureRemainingCapacity(",
          "2115:          s, update_approximate_cache_bitmap_v2_order(cache_bitmap_v2, compressed, flags)))",
          "2116:   return FALSE;",
          "2120:           ((cache_bitmap_v2->flags << 7) & 0xFF80);",
          "",
          "[Removed Lines]",
          "2118:  bitsPerPixelId = BPP_CBR2[cache_bitmap_v2->bitmapBpp];",
          "",
          "[Added Lines]",
          "2173:  BOOL rc;",
          "2180:  bitsPerPixelId = get_bpp_bmf(cache_bitmap_v2->bitmapBpp, &rc);",
          "2181:  if (!rc)",
          "2182:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2177: static CACHE_BITMAP_V3_ORDER* update_read_cache_bitmap_v3_order(rdpUpdate* update, wStream* s,",
          "2178:                                                                 UINT16 flags)",
          "2179: {",
          "2180:  BYTE bitsPerPixelId;",
          "2181:  BITMAP_DATA_EX* bitmapData;",
          "2182:  UINT32 new_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2244:  BOOL rc;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2194:  cache_bitmap_v3->cacheId = flags & 0x00000003;",
          "2195:  cache_bitmap_v3->flags = (flags & 0x0000FF80) >> 7;",
          "2196:  bitsPerPixelId = (flags & 0x00000078) >> 3;",
          "2199:  if (Stream_GetRemainingLength(s) < 21)",
          "2200:   goto fail;",
          "",
          "[Removed Lines]",
          "2197:  cache_bitmap_v3->bpp = CBR23_BPP[bitsPerPixelId];",
          "",
          "[Added Lines]",
          "2262:  cache_bitmap_v3->bpp = get_cbr2_bpp(bitsPerPixelId, &rc);",
          "2263:  if (!rc)",
          "2264:   goto fail;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2242: BOOL update_write_cache_bitmap_v3_order(wStream* s, CACHE_BITMAP_V3_ORDER* cache_bitmap_v3,",
          "2243:                                         UINT16* flags)",
          "2244: {",
          "2245:  BYTE bitsPerPixelId;",
          "2246:  BITMAP_DATA_EX* bitmapData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2312:  BOOL rc;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2250:   return FALSE;",
          "2252:  bitmapData = &cache_bitmap_v3->bitmapData;",
          "2255:           ((cache_bitmap_v3->flags << 7) & 0x0000FF80) | ((bitsPerPixelId << 3) & 0x00000078);",
          "",
          "[Removed Lines]",
          "2253:  bitsPerPixelId = BPP_CBR23[cache_bitmap_v3->bpp];",
          "",
          "[Added Lines]",
          "2321:  bitsPerPixelId = get_bpp_bmf(cache_bitmap_v3->bpp, &rc);",
          "2322:  if (!rc)",
          "2323:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2574: static CACHE_BRUSH_ORDER* update_read_cache_brush_order(rdpUpdate* update, wStream* s, UINT16 flags)",
          "2575: {",
          "2576:  int i;",
          "2577:  BYTE iBitmapFormat;",
          "2578:  BOOL compressed = FALSE;",
          "2579:  CACHE_BRUSH_ORDER* cache_brush = calloc(1, sizeof(CACHE_BRUSH_ORDER));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2647:  BOOL rc;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2591:   goto fail;",
          "",
          "[Removed Lines]",
          "2590:  if (iBitmapFormat >= ARRAYSIZE(BMF_BPP))",
          "2593:  cache_brush->bpp = BMF_BPP[iBitmapFormat];",
          "",
          "[Added Lines]",
          "2661:  cache_brush->bpp = get_bmf_bpp(iBitmapFormat, &rc);",
          "2662:  if (!rc)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2661: {",
          "2662:  int i;",
          "2663:  BYTE iBitmapFormat;",
          "2664:  BOOL compressed = FALSE;",
          "2666:  if (!Stream_EnsureRemainingCapacity(s,",
          "2667:                                      update_approximate_cache_brush_order(cache_brush, flags)))",
          "2668:   return FALSE;",
          "",
          "[Removed Lines]",
          "2670:  iBitmapFormat = BPP_BMF[cache_brush->bpp];",
          "",
          "[Added Lines]",
          "2735:  BOOL rc;",
          "2742:  iBitmapFormat = get_bpp_bmf(cache_brush->bpp, &rc);",
          "2743:  if (!rc)",
          "2744:   return FALSE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}