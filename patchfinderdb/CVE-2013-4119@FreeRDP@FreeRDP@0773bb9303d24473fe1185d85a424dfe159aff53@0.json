{
  "cve_id": "CVE-2013-4119",
  "cve_desc": "FreeRDP before 1.1.0-beta+2013071101 allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) by disconnecting before authentication has finished.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "0773bb9303d24473fe1185d85a424dfe159aff53",
  "patch_info": {
    "commit_hash": "0773bb9303d24473fe1185d85a424dfe159aff53",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0773bb9303d24473fe1185d85a424dfe159aff53",
    "files": [
      "libfreerdp/core/nla.c",
      "libfreerdp/core/peer.c",
      "libfreerdp/core/transport.c",
      "winpr/libwinpr/sspi/sspi.c"
    ],
    "message": "nla: invalidate sec handle after creation\n\nIf sec pointer isn't invalidated after creation it is not possible\nto check if the upper and lower pointers are valid.\n\nThis fixes a segfault in the server part if the client disconnects before\nthe authentication was finished.",
    "before_after_code_files": [
      "libfreerdp/core/nla.c||libfreerdp/core/nla.c",
      "libfreerdp/core/peer.c||libfreerdp/core/peer.c",
      "libfreerdp/core/transport.c||libfreerdp/core/transport.c",
      "winpr/libwinpr/sspi/sspi.c||winpr/libwinpr/sspi/sspi.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/nla.c||libfreerdp/core/nla.c": [
      "File: libfreerdp/core/nla.c -> libfreerdp/core/nla.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1245:   ZeroMemory(&credssp->negoToken, sizeof(SecBuffer));",
      "1246:   ZeroMemory(&credssp->pubKeyAuth, sizeof(SecBuffer));",
      "1247:   ZeroMemory(&credssp->authInfo, sizeof(SecBuffer));",
      "1249:   if (credssp->server)",
      "1250:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1248:   SecInvalidateHandle(&credssp->context);",
      "",
      "---------------"
    ],
    "libfreerdp/core/peer.c||libfreerdp/core/peer.c": [
      "File: libfreerdp/core/peer.c -> libfreerdp/core/peer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "272:     sspi_CopyAuthIdentity(&client->identity, &(rdp->nego->transport->credssp->identity));",
      "273:     IFCALLRET(client->Logon, client->authenticated, client, &client->identity, TRUE);",
      "274:     credssp_free(rdp->nego->transport->credssp);",
      "275:    }",
      "276:    else",
      "277:    {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "275:     rdp->nego->transport->credssp = NULL;",
      "",
      "---------------"
    ],
    "libfreerdp/core/transport.c||libfreerdp/core/transport.c": [
      "File: libfreerdp/core/transport.c -> libfreerdp/core/transport.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "159:    \"If credentials are valid, the NTLMSSP implementation may be to blame.\\n\");",
      "161:   credssp_free(transport->credssp);",
      "162:   return FALSE;",
      "163:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "162:   transport->credssp = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "292:  {",
      "293:   fprintf(stderr, \"client authentication failure\\n\");",
      "294:   credssp_free(transport->credssp);",
      "295:   return FALSE;",
      "296:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "296:   transport->credssp = NULL;",
      "",
      "---------------"
    ],
    "winpr/libwinpr/sspi/sspi.c||winpr/libwinpr/sspi/sspi.c": [
      "File: winpr/libwinpr/sspi/sspi.c -> winpr/libwinpr/sspi/sspi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "248: {",
      "249:  void* pointer;",
      "252:   return NULL;",
      "254:  pointer = (void*) ~((size_t) handle->dwLower);",
      "",
      "[Removed Lines]",
      "251:  if (!handle)",
      "",
      "[Added Lines]",
      "251:  if (!handle || !SecIsValidHandle(handle))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "268: {",
      "269:  void* pointer;",
      "272:   return NULL;",
      "274:  pointer = (void*) ~((size_t) handle->dwUpper);",
      "",
      "[Removed Lines]",
      "271:  if (!handle)",
      "",
      "[Added Lines]",
      "271:  if (!handle || !SecIsValidHandle(handle))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "840: SECURITY_STATUS SEC_ENTRY DeleteSecurityContext(PCtxtHandle phContext)",
      "841: {",
      "843:  SECURITY_STATUS status;",
      "844:  SecurityFunctionTableA* table;",
      "",
      "[Removed Lines]",
      "842:  char* Name;",
      "",
      "[Added Lines]",
      "842:  char* Name = NULL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "87e9a24b1e0204aca4206fdc1ce75fe55a3eb580",
      "candidate_info": {
        "commit_hash": "87e9a24b1e0204aca4206fdc1ce75fe55a3eb580",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/87e9a24b1e0204aca4206fdc1ce75fe55a3eb580",
        "files": [
          "libfreerdp/crypto/tls.c"
        ],
        "message": "tls: updated certificate mismatch message\n\nAdded information to the message if the name found is an CN or an\nalternative name. Also print a message if no CN was not found instead\nof (null).",
        "before_after_code_files": [
          "libfreerdp/crypto/tls.c||libfreerdp/crypto/tls.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/1330"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/tls.c||libfreerdp/crypto/tls.c": [
          "File: libfreerdp/crypto/tls.c -> libfreerdp/crypto/tls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "685:  }",
          "687: #ifndef _WIN32",
          "689: #endif",
          "691:  return verification_status;",
          "",
          "[Removed Lines]",
          "688:  free(common_name);",
          "",
          "[Added Lines]",
          "688:  if (common_name)",
          "689:   free(common_name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "715:  fprintf(stderr, \"@           WARNING: CERTIFICATE NAME MISMATCH!           @\\n\");",
          "716:  fprintf(stderr, \"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n\");",
          "717:  fprintf(stderr, \"The hostname used for this connection (%s) \\n\", hostname);",
          "720:  {",
          "730:   {",
          "732:   }",
          "735:  }",
          "737:  fprintf(stderr, \"A valid certificate for the wrong name should NOT be trusted!\\n\");",
          "738: }",
          "",
          "[Removed Lines]",
          "719:  if (alt_names_count < 1)",
          "721:   fprintf(stderr, \"does not match the name given in the certificate:\\n\");",
          "722:   fprintf(stderr, \"%s\\n\", common_name);",
          "723:  }",
          "724:  else",
          "725:  {",
          "726:   fprintf(stderr, \"does not match the names given in the certificate:\\n\");",
          "727:   fprintf(stderr, \"%s\", common_name);",
          "729:   for (index = 0; index < alt_names_count; index++)",
          "731:    fprintf(stderr, \", %s\", alt_names[index]);",
          "734:   fprintf(stderr, \"\\n\");",
          "",
          "[Added Lines]",
          "719:  fprintf(stderr, \"does not match %s given in the certificate:\\n\", alt_names_count < 1 ? \"the name\" : \"any of the names\");",
          "720:  fprintf(stderr, \"Common Name (CN):\\n\");",
          "721:  fprintf(stderr, \"\\t%s\\n\", common_name ? common_name : \"no CN found in certificate\");",
          "722:  if (alt_names_count > 1)",
          "724:   fprintf(stderr, \"Alternative names:\\n\");",
          "725:   if (alt_names_count > 1)",
          "727:    for (index = 0; index < alt_names_count; index++)",
          "728:    {",
          "729:     fprintf(stderr, \"\\t %s\\n\", alt_names[index]);",
          "730:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}