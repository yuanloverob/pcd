{
  "cve_id": "CVE-2022-0525",
  "cve_desc": "Out-of-bounds Read in Homebrew mruby prior to 3.2.",
  "repo": "mruby/mruby",
  "patch_hash": "0849a2885f81cfd82134992c06df3ccd59052ac7",
  "patch_info": {
    "commit_hash": "0849a2885f81cfd82134992c06df3ccd59052ac7",
    "repo": "mruby/mruby",
    "commit_url": "https://github.com/mruby/mruby/commit/0849a2885f81cfd82134992c06df3ccd59052ac7",
    "files": [
      "mrbgems/mruby-compiler/core/codegen.c"
    ],
    "message": "codegen.c: stack position may be wrong on assignments.\n\nWhen `[]=` access includes keyword arguments.",
    "before_after_code_files": [
      "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
    ]
  },
  "patch_diff": {
    "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c": [
      "File: mrbgems/mruby-compiler/core/codegen.c -> mrbgems/mruby-compiler/core/codegen.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1865:           }",
      "1866:         }",
      "1868:           gen_hash(s, tree->cdr->car->cdr, VAL, 0);",
      "1869:           if (n < 14) {",
      "1870:             n++;",
      "1872:           }",
      "1873:           else {",
      "1875:             genop_2(s, OP_ARYPUSH, cursp(), 1);",
      "1876:           }",
      "1877:         }",
      "1878:       }",
      "1879:       if (rhs) {",
      "",
      "[Removed Lines]",
      "1871:             push();",
      "1874:             pop();",
      "",
      "[Added Lines]",
      "1868:           if (n == 14) {",
      "1869:             pop_n(n);",
      "1870:             genop_2(s, OP_ARRAY, cursp(), n);",
      "1871:             push();",
      "1872:             n = 15;",
      "1873:           }",
      "1879:             pop_n(2);",
      "1882:           push();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b53cd3ce255f43164cae87f2abbd4f573676cbab",
      "candidate_info": {
        "commit_hash": "b53cd3ce255f43164cae87f2abbd4f573676cbab",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/b53cd3ce255f43164cae87f2abbd4f573676cbab",
        "files": [
          "mrbgems/mruby-compiler/core/codegen.c"
        ],
        "message": "codegen.c: fix evaluation order of attribute assignment.",
        "before_after_code_files": [
          "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
          ],
          "candidate": [
            "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
          ]
        }
      },
      "candidate_diff": {
        "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c": [
          "File: mrbgems/mruby-compiler/core/codegen.c -> mrbgems/mruby-compiler/core/codegen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1788:   case NODE_CONST:",
          "1789:   case NODE_NIL:",
          "1790:   case NODE_MASGN:",
          "1793:     if (rhs) {",
          "1794:       codegen(s, rhs, VAL);",
          "1795:       pop();",
          "",
          "[Removed Lines]",
          "1791:   case NODE_SCALL:",
          "1792:   case NODE_CALL:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1798:     break;",
          "1800:   case NODE_COLON2:",
          "1802:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1799:   case NODE_CALL:",
          "1800:   case NODE_SCALL:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1856:   case NODE_CALL:",
          "1857:   case NODE_SCALL:",
          "1863:     }",
          "1864:     break;",
          "",
          "[Removed Lines]",
          "1858:     push();",
          "1859:     gen_call(s, tree, attrsym(s, nsym(tree->cdr->car)), sp, NOVAL, type == NODE_SCALL);",
          "1860:     pop();",
          "1861:     if (val && cursp() != sp) {",
          "1862:       gen_move(s, cursp(), sp, 0);",
          "",
          "[Added Lines]",
          "1858:     {",
          "1859:       int noself = 0, safe = (type == NODE_SCALL), skip = 0, top, call, n = 0;",
          "1860:       mrb_sym mid = nsym(tree->cdr->car);",
          "1862:       top = cursp();",
          "1863:       if (val || sp == cursp()) {",
          "1865:       }",
          "1866:       call = cursp();",
          "1867:       if (!tree->car) {",
          "1868:         noself = 1;",
          "1869:         push();",
          "1870:       }",
          "1871:       else {",
          "1873:       }",
          "1874:       if (safe) {",
          "1875:         int recv = cursp()-1;",
          "1876:         gen_move(s, cursp(), recv, 1);",
          "1877:         skip = genjmp2_0(s, OP_JMPNIL, cursp(), val);",
          "1878:       }",
          "1879:       tree = tree->cdr->cdr->car;",
          "1880:       if (tree) {",
          "1882:           n = gen_values(s, tree->car, VAL, 0, (tree->cdr->car)?13:14);",
          "1884:             n = 15;",
          "1885:             push();",
          "1886:           }",
          "1887:         }",
          "1889:           gen_hash(s, tree->cdr->car->cdr, VAL, 0);",
          "1890:           if (n < 14) {",
          "1891:             n++;",
          "1892:             push();",
          "1893:           }",
          "1894:           else {",
          "1895:             pop();",
          "1896:             genop_2(s, OP_ARYPUSH, cursp(), 1);",
          "1897:           }",
          "1898:         }",
          "1899:       }",
          "1900:       if (rhs) {",
          "1901:         codegen(s, rhs, VAL);",
          "1902:         pop();",
          "1903:       }",
          "1904:       else {",
          "1905:         gen_move(s, cursp(), sp, 0);",
          "1906:       }",
          "1907:       if (val) {",
          "1908:         gen_move(s, top, cursp(), 1);",
          "1909:       }",
          "1910:       if (n < 14) {",
          "1911:         n++;",
          "1912:       }",
          "1913:       else {",
          "1914:         pop();",
          "1915:         genop_2(s, OP_ARYPUSH, cursp(), 1);",
          "1916:       }",
          "1917:       s->sp = call;",
          "1918:       genop_3(s, noself ? OP_SSEND : OP_SEND, cursp(), new_sym(s, attrsym(s, mid)), n);",
          "1919:       if (safe) {",
          "1920:         dispatch(s, skip);",
          "1921:       }",
          "1922:       s->sp = top;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c8c083cb750606b2da81582cd8e43b442bb143e6",
      "candidate_info": {
        "commit_hash": "c8c083cb750606b2da81582cd8e43b442bb143e6",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/c8c083cb750606b2da81582cd8e43b442bb143e6",
        "files": [
          "mrbgems/mruby-compiler/core/codegen.c"
        ],
        "message": "codegen.c: need to pack argument when `n==13` too.\n\nBecause we have extra 2 arguments coming (kw and rhs).",
        "before_after_code_files": [
          "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
          ],
          "candidate": [
            "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
          ]
        }
      },
      "candidate_diff": {
        "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c": [
          "File: mrbgems/mruby-compiler/core/codegen.c -> mrbgems/mruby-compiler/core/codegen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1905:           }",
          "1906:         }",
          "1909:             pop_n(n);",
          "1910:             genop_2(s, OP_ARRAY, cursp(), n);",
          "1911:             push();",
          "",
          "[Removed Lines]",
          "1908:           if (n == 14) {",
          "",
          "[Added Lines]",
          "1908:           if (n == 13 || n == 14) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef98eb2c29650b786dd2a25f0bb6345b947c26eb",
      "candidate_info": {
        "commit_hash": "ef98eb2c29650b786dd2a25f0bb6345b947c26eb",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/ef98eb2c29650b786dd2a25f0bb6345b947c26eb",
        "files": [
          "mrbgems/mruby-compiler/core/codegen.c"
        ],
        "message": "codegen.c: fix evaluation order of constant initialization.\n\n`a::B = c` should evaluate `a` then `c`. It used to be `c` then `a`. The\n`OP_SETMCNST` instruction operands are designed for older order in mind.\nShould we changed the operand order?",
        "before_after_code_files": [
          "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
          ],
          "candidate": [
            "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
          ]
        }
      },
      "candidate_diff": {
        "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c": [
          "File: mrbgems/mruby-compiler/core/codegen.c -> mrbgems/mruby-compiler/core/codegen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: static int catch_handler_new(codegen_scope *s);",
          "102: static void catch_handler_set(codegen_scope *s, int ent, enum mrb_catch_type type, uint32_t begin, uint32_t end, uint32_t target);",
          "107: static void codegen(codegen_scope *s, node *tree, int val);",
          "108: static void raise_error(codegen_scope *s, const char *msg);",
          "",
          "[Removed Lines]",
          "104: static void gen_assignment(codegen_scope *s, node *tree, int sp, int val);",
          "105: static void gen_vmassignment(codegen_scope *s, node *tree, int rhs, int val);",
          "",
          "[Added Lines]",
          "104: static void gen_assignment(codegen_scope *s, node *tree, node *rhs, int sp, int val);",
          "105: static void gen_vmassignment(codegen_scope *s, node *tree, int sp, int val);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1275:   n2 = tree->car;",
          "1276:   genop_W(s, OP_ENTER, 0x40000);",
          "1277:   if (n2->car && !n2->car->cdr && !n2->cdr) {",
          "1279:   }",
          "1280:   else {",
          "1281:     gen_vmassignment(s, n2, 1, VAL);",
          "",
          "[Removed Lines]",
          "1278:     gen_assignment(s, n2->car->car, 1, NOVAL);",
          "",
          "[Added Lines]",
          "1278:     gen_assignment(s, n2->car->car, NULL, 1, NOVAL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1774: }",
          "1776: static void",
          "1778: {",
          "1779:   int idx;",
          "1780:   int type = nint(tree->car);",
          "1782:   tree = tree->cdr;",
          "1783:   switch (type) {",
          "1784:   case NODE_GVAR:",
          "",
          "[Removed Lines]",
          "1777: gen_assignment(codegen_scope *s, node *tree, int sp, int val)",
          "",
          "[Added Lines]",
          "1777: gen_assignment(codegen_scope *s, node *tree, node *rhs, int sp, int val)",
          "1782:   switch (type) {",
          "1783:   case NODE_GVAR:",
          "1784:   case NODE_ARG:",
          "1785:   case NODE_LVAR:",
          "1786:   case NODE_IVAR:",
          "1787:   case NODE_CVAR:",
          "1788:   case NODE_CONST:",
          "1789:   case NODE_NIL:",
          "1790:   case NODE_MASGN:",
          "1791:   case NODE_SCALL:",
          "1792:   case NODE_CALL:",
          "1793:     if (rhs) {",
          "1794:       codegen(s, rhs, VAL);",
          "1795:       pop();",
          "1796:       sp = cursp();",
          "1797:     }",
          "1798:     break;",
          "1800:   case NODE_COLON2:",
          "1802:     break;",
          "1804:   case NODE_NVAR:",
          "1805:     codegen_error(s, \"Can't assign to numbered parameter\");",
          "1806:     break;",
          "1808:   default:",
          "1809:     codegen_error(s, \"unknown lhs\");",
          "1810:     break;",
          "1811:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1797:       gen_setupvar(s, sp, nsym(tree));",
          "1798:     }",
          "1799:     break;",
          "1804:   case NODE_IVAR:",
          "1805:     gen_setxv(s, OP_SETIV, sp, nsym(tree), val);",
          "1806:     break;",
          "",
          "[Removed Lines]",
          "1800:   case NODE_NVAR:",
          "1801:     idx = nint(tree);",
          "1802:     codegen_error(s, \"Can't assign to numbered parameter\");",
          "1803:     break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1811:     gen_setxv(s, OP_SETCONST, sp, nsym(tree), val);",
          "1812:     break;",
          "1813:   case NODE_COLON2:",
          "1815:     push();",
          "1816:     codegen(s, tree->car, VAL);",
          "1817:     pop_n(2);",
          "1818:     idx = new_sym(s, nsym(tree->cdr));",
          "1819:     genop_2(s, OP_SETMCNST, sp, idx);",
          "",
          "[Removed Lines]",
          "1814:     gen_move(s, cursp(), sp, 0);",
          "",
          "[Added Lines]",
          "1841:     if (sp) {",
          "1842:       gen_move(s, cursp(), sp, 0);",
          "1843:     }",
          "1844:     sp = cursp();",
          "1847:     if (rhs) {",
          "1848:       codegen(s, rhs, VAL); pop();",
          "1849:       gen_move(s, sp, cursp(), 0);",
          "1850:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1822:   case NODE_CALL:",
          "1823:   case NODE_SCALL:",
          "1824:     push();",
          "1827:     pop();",
          "1828:     if (val && cursp() != sp) {",
          "1829:       gen_move(s, cursp(), sp, 0);",
          "",
          "[Removed Lines]",
          "1825:     gen_call(s, tree, attrsym(s, nsym(tree->cdr->car)), sp, NOVAL,",
          "1826:              type == NODE_SCALL);",
          "",
          "[Added Lines]",
          "1859:     gen_call(s, tree, attrsym(s, nsym(tree->cdr->car)), sp, NOVAL, type == NODE_SCALL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1860:       genop_3(s, OP_AREF, sp, rhs, n);",
          "1861:       push();",
          "1863:       pop();",
          "1864:       n++;",
          "1865:       t = t->cdr;",
          "",
          "[Removed Lines]",
          "1862:       gen_assignment(s, t->car, sp, NOVAL);",
          "",
          "[Added Lines]",
          "1895:       gen_assignment(s, t->car, NULL, sp, NOVAL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1880:     genop_3(s, OP_APOST, cursp(), n, post);",
          "1881:     n = 1;",
          "1884:     }",
          "1885:     if (t->cdr && t->cdr->car) {",
          "1886:       t = t->cdr->car;",
          "1887:       while (t) {",
          "1889:         t = t->cdr;",
          "1890:         n++;",
          "1891:       }",
          "",
          "[Removed Lines]",
          "1883:       gen_assignment(s, t->car, cursp(), NOVAL);",
          "1888:         gen_assignment(s, t->car, cursp()+n, NOVAL);",
          "",
          "[Added Lines]",
          "1916:       gen_assignment(s, t->car, NULL, cursp(), NOVAL);",
          "1921:         gen_assignment(s, t->car, NULL, cursp()+n, NOVAL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2206:           pop();",
          "2207:           if (n3->cdr->car) {",
          "2209:           }",
          "2210:           if (n3->cdr->cdr->car) {",
          "2211:             codegen(s, n3->cdr->cdr->car, val);",
          "",
          "[Removed Lines]",
          "2208:             gen_assignment(s, n3->cdr->car, exc, NOVAL);",
          "",
          "[Added Lines]",
          "2241:             gen_assignment(s, n3->cdr->car, NULL, exc, NOVAL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2589:     break;",
          "2591:   case NODE_ASGN:",
          "2595:     break;",
          "2597:   case NODE_MASGN:",
          "",
          "[Removed Lines]",
          "2592:     codegen(s, tree->cdr, VAL);",
          "2593:     pop();",
          "2594:     gen_assignment(s, tree->car, cursp(), val);",
          "",
          "[Added Lines]",
          "2625:     gen_assignment(s, tree->car, tree->cdr, 0, val);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2614:           n = 0;",
          "2615:           while (t) {",
          "2616:             if (n < len) {",
          "2618:               n++;",
          "2619:             }",
          "2620:             else {",
          "2621:               genop_1(s, OP_LOADNIL, rhs+n);",
          "2623:             }",
          "2624:             t = t->cdr;",
          "2625:           }",
          "",
          "[Removed Lines]",
          "2617:               gen_assignment(s, t->car, rhs+n, NOVAL);",
          "2622:               gen_assignment(s, t->car, rhs+n, NOVAL);",
          "",
          "[Added Lines]",
          "2648:               gen_assignment(s, t->car, NULL, rhs+n, NOVAL);",
          "2653:               gen_assignment(s, t->car, NULL, rhs+n, NOVAL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2643:               rn = len - post - n;",
          "2644:             }",
          "2645:             genop_3(s, OP_ARRAY2, cursp(), rhs+n, rn);",
          "2647:             n += rn;",
          "2648:           }",
          "2649:           if (t->cdr && t->cdr->car) {",
          "2650:             t = t->cdr->car;",
          "2651:             while (n<len) {",
          "2653:               t = t->cdr;",
          "2654:               n++;",
          "2655:             }",
          "",
          "[Removed Lines]",
          "2646:             gen_assignment(s, t->car, cursp(), NOVAL);",
          "2652:               gen_assignment(s, t->car, rhs+n, NOVAL);",
          "",
          "[Added Lines]",
          "2677:             gen_assignment(s, t->car, NULL, cursp(), NOVAL);",
          "2683:               gen_assignment(s, t->car, NULL, rhs+n, NOVAL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2770:           genop_3(s, OP_SEND, cursp(), idx, callargs);",
          "2771:         }",
          "2772:         else {",
          "2774:         }",
          "2775:         dispatch(s, pos);",
          "2776:         goto exit;",
          "",
          "[Removed Lines]",
          "2773:           gen_assignment(s, tree->car, cursp(), val);",
          "",
          "[Added Lines]",
          "2804:           gen_assignment(s, tree->car, NULL, cursp(), val);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2808:         genop_3(s, OP_SEND, cursp(), idx, 1);",
          "2809:       }",
          "2810:       if (callargs < 0) {",
          "2812:       }",
          "2813:       else {",
          "2814:         if (val && vsp >= 0) {",
          "",
          "[Removed Lines]",
          "2811:         gen_assignment(s, tree->car, cursp(), val);",
          "",
          "[Added Lines]",
          "2842:         gen_assignment(s, tree->car, NULL, cursp(), val);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5d9aab37227766b46c836871204d56c3c512801",
      "candidate_info": {
        "commit_hash": "f5d9aab37227766b46c836871204d56c3c512801",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/f5d9aab37227766b46c836871204d56c3c512801",
        "files": [
          "mrbgems/mruby-compiler/core/codegen.c"
        ],
        "message": "codegen.c: should not emit the `MOVE` instruction to the same register.",
        "before_after_code_files": [
          "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
          ],
          "candidate": [
            "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c"
          ]
        }
      },
      "candidate_diff": {
        "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c": [
          "File: mrbgems/mruby-compiler/core/codegen.c -> mrbgems/mruby-compiler/core/codegen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "577: gen_move(codegen_scope *s, uint16_t dst, uint16_t src, int nopeep)",
          "578: {",
          "579:   if (nopeep || no_peephole(s)) goto normal;",
          "580:   else {",
          "581:     struct mrb_insn_data data = mrb_last_insn(s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:   else if (dst == src) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1804:     gen_call(s, tree, attrsym(s, nsym(tree->cdr->car)), sp, NOVAL,",
          "1805:              type == NODE_SCALL);",
          "1806:     pop();",
          "1808:       gen_move(s, cursp(), sp, 0);",
          "1809:     }",
          "1810:     break;",
          "",
          "[Removed Lines]",
          "1807:     if (val) {",
          "",
          "[Added Lines]",
          "1808:     if (val && cursp() != sp) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}