{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c8abb29f68abf64bacf2dc5a483eedab84b52428",
      "candidate_info": {
        "commit_hash": "c8abb29f68abf64bacf2dc5a483eedab84b52428",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/c8abb29f68abf64bacf2dc5a483eedab84b52428",
        "files": [
          "src/threadpool.c"
        ],
        "message": "windows: don't use atexit for cleaning up the threadpool\n\nIf libuv is loaded as a DLL and is later unloaded deadlocks can happen\nwhen running atexit handlers, so we can't use synchronization\npriomitives or join threads there.\n\nFor reference see https://github.com/saghul/pyuv/issues/171",
        "before_after_code_files": [
          "src/threadpool.c||src/threadpool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/threadpool.c||src/threadpool.c": [
          "File: src/threadpool.c -> src/threadpool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: }",
          "112:   unsigned int i;",
          "114:   if (initialized == 0)",
          "",
          "[Removed Lines]",
          "111: static void cleanup(void) {",
          "",
          "[Added Lines]",
          "111: #ifndef _WIN32",
          "112: UV_DESTRUCTOR(static void cleanup(void)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:   nthreads = 0;",
          "131:   initialized = 0;",
          "132: }",
          "135: static void init_once(void) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:       abort();",
          "169:   initialized = 1;",
          "171: }",
          "",
          "[Removed Lines]",
          "170:   atexit(cleanup);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "145f7b3560541cd897440940a00c5c0c52f09f9f",
      "candidate_info": {
        "commit_hash": "145f7b3560541cd897440940a00c5c0c52f09f9f",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/145f7b3560541cd897440940a00c5c0c52f09f9f",
        "files": [
          "src/unix/internal.h",
          "src/unix/kqueue.c",
          "src/unix/linux-inotify.c"
        ],
        "message": "darwin: look up file path with F_GETPATH\n\nLook up the file path with fcntl(F_GETPATH) and pass it to\nthe uv_fs_event_cb callback.",
        "before_after_code_files": [
          "src/unix/internal.h||src/unix/internal.h",
          "src/unix/kqueue.c||src/unix/kqueue.c",
          "src/unix/linux-inotify.c||src/unix/linux-inotify.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/internal.h||src/unix/internal.h": [
          "File: src/unix/internal.h -> src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:   loop->time = uv__hrtime() / 1000000;",
          "257: }",
          "259: #ifdef HAVE_DTRACE",
          "260: #include \"uv-dtrace.h\"",
          "261: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: __attribute__((unused))",
          "261: static char* uv__basename_r(const char* path) {",
          "262:   char* s;",
          "264:   s = strrchr(path, '/');",
          "265:   if (s == NULL)",
          "266:     return (char*) path;",
          "268:   return s + 1;",
          "269: }",
          "",
          "---------------"
        ],
        "src/unix/kqueue.c||src/unix/kqueue.c": [
          "File: src/unix/kqueue.c -> src/unix/kqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:   uv_fs_event_t* handle;",
          "260:   struct kevent ev;",
          "261:   int events;",
          "263:   handle = container_of(w, uv_fs_event_t, event_watcher);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:   const char* path;",
          "263: #if defined(F_GETPATH)",
          "265:   char pathbuf[MAXPATHLEN];",
          "266: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:   else",
          "268:     events = UV_RENAME;",
          "272:   if (handle->event_watcher.fd == -1)",
          "273:     return;",
          "",
          "[Removed Lines]",
          "270:   handle->cb(handle, NULL, events, 0);",
          "",
          "[Added Lines]",
          "275:   path = NULL;",
          "276: #if defined(F_GETPATH)",
          "281:   if (fcntl(handle->event_watcher.fd, F_GETPATH, pathbuf) == 0)",
          "282:     path = uv__basename_r(pathbuf);",
          "283: #endif",
          "284:   handle->cb(handle, path, events, 0);",
          "",
          "---------------"
        ],
        "src/unix/linux-inotify.c||src/unix/linux-inotify.c": [
          "File: src/unix/linux-inotify.c -> src/unix/linux-inotify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #define CAST(p) ((struct watcher_root*)(p))",
          "55: static int compare_watchers(const struct watcher_list* a,",
          "56:                             const struct watcher_list* b) {",
          "57:   if (a->wd < b->wd) return -1;",
          "",
          "[Removed Lines]",
          "49: static char* basename_r(const char* path) {",
          "50:   char* s = strrchr(path, '/');",
          "51:   return s ? (s + 1) : (char*)path;",
          "52: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:       QUEUE_FOREACH(q, &w->watchers) {",
          "162:         h = QUEUE_DATA(q, uv_fs_event_t, watchers);",
          "",
          "[Removed Lines]",
          "159:       path = e->len ? (const char*) (e + 1) : basename_r(w->path);",
          "",
          "[Added Lines]",
          "152:       path = e->len ? (const char*) (e + 1) : uv__basename_r(w->path);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9e6029b8215772b8c20d3fee85835dfb101dc57",
      "candidate_info": {
        "commit_hash": "f9e6029b8215772b8c20d3fee85835dfb101dc57",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f9e6029b8215772b8c20d3fee85835dfb101dc57",
        "files": [
          "include/uv.h",
          "src/fs-poll.c",
          "src/unix/fs.c",
          "src/win/fs.c",
          "test/test-fs.c"
        ],
        "message": "unix, windows: add extra fields to uv_stat_t",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/fs-poll.c||src/fs-poll.c",
          "src/unix/fs.c||src/unix/fs.c",
          "src/win/fs.c||src/win/fs.c",
          "test/test-fs.c||test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:   uint64_t st_size;",
          "401:   uint64_t st_blksize;",
          "402:   uint64_t st_blocks;",
          "403:   uv_timespec_t st_atim;",
          "404:   uv_timespec_t st_mtim;",
          "405:   uv_timespec_t st_ctim;",
          "406: } uv_stat_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403:   uint64_t st_flags;",
          "404:   uint64_t st_gen;",
          "408:   uv_timespec_t st_birthtim;",
          "",
          "---------------"
        ],
        "src/fs-poll.c||src/fs-poll.c": [
          "File: src/fs-poll.c -> src/fs-poll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192: static int statbuf_eq(const uv_stat_t* a, const uv_stat_t* b) {",
          "193:   return a->st_ctim.tv_nsec == b->st_ctim.tv_nsec",
          "194:       && a->st_mtim.tv_nsec == b->st_mtim.tv_nsec",
          "195:       && a->st_ctim.tv_sec == b->st_ctim.tv_sec",
          "196:       && a->st_mtim.tv_sec == b->st_mtim.tv_sec",
          "197:       && a->st_size == b->st_size",
          "198:       && a->st_mode == b->st_mode",
          "199:       && a->st_uid == b->st_uid",
          "200:       && a->st_gid == b->st_gid",
          "201:       && a->st_ino == b->st_ino",
          "203: }",
          "",
          "[Removed Lines]",
          "202:       && a->st_dev == b->st_dev;",
          "",
          "[Added Lines]",
          "195:       && a->st_birthtim.tv_nsec == b->st_birthtim.tv_nsec",
          "198:       && a->st_birthtim.tv_sec == b->st_birthtim.tv_sec",
          "204:       && a->st_dev == b->st_dev",
          "205:       && a->st_flags == b->st_flags",
          "206:       && a->st_gen == b->st_gen;",
          "",
          "---------------"
        ],
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:   dst->st_mtim.tv_nsec = src->st_mtimespec.tv_nsec;",
          "520:   dst->st_ctim.tv_sec = src->st_ctimespec.tv_sec;",
          "521:   dst->st_ctim.tv_nsec = src->st_ctimespec.tv_nsec;",
          "522: #elif defined(_BSD_SOURCE) || defined(_SVID_SOURCE) || defined(_XOPEN_SOURCE)",
          "523:   dst->st_atim.tv_sec = src->st_atim.tv_sec;",
          "524:   dst->st_atim.tv_nsec = src->st_atim.tv_nsec;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522:   dst->st_birthtim.tv_sec = src->st_birthtimespec.tv_sec;",
          "523:   dst->st_birthtim.tv_nsec = src->st_birthtimespec.tv_nsec;",
          "524:   dst->st_flags = src->st_flags;",
          "525:   dst->st_gen = src->st_gen;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "526:   dst->st_mtim.tv_nsec = src->st_mtim.tv_nsec;",
          "527:   dst->st_ctim.tv_sec = src->st_ctim.tv_sec;",
          "528:   dst->st_ctim.tv_nsec = src->st_ctim.tv_nsec;",
          "529: #else",
          "530:   dst->st_atim.tv_sec = src->st_atime;",
          "531:   dst->st_atim.tv_nsec = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "533: # if defined(__DragonFly__)  || \\",
          "534:      defined(__FreeBSD__)    || \\",
          "535:      defined(__OpenBSD__)    || \\",
          "536:      defined(__NetBSD__)",
          "537:   dst->st_birthtim.tv_sec = src->st_birthtim.tv_sec;",
          "538:   dst->st_birthtim.tv_nsec = src->st_birthtim.tv_nsec;",
          "539:   dst->st_flags = src->st_flags;",
          "540:   dst->st_gen = src->st_gen;",
          "541: # else",
          "542:   dst->st_birthtim.tv_sec = src->st_ctim.tv_sec;",
          "543:   dst->st_birthtim.tv_nsec = src->st_ctim.tv_nsec;",
          "544:   dst->st_flags = 0;",
          "545:   dst->st_gen = 0;",
          "546: # endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "533:   dst->st_mtim.tv_nsec = 0;",
          "534:   dst->st_ctim.tv_sec = src->st_ctime;",
          "535:   dst->st_ctim.tv_nsec = 0;",
          "536: #endif",
          "537: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "554:   dst->st_birthtim.tv_sec = src->st_ctime;",
          "555:   dst->st_birthtim.tv_nsec = 0;",
          "556:   dst->st_flags = 0;",
          "557:   dst->st_gen = 0;",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "839:   statbuf->st_blksize = 0;",
          "840:   statbuf->st_blocks = 0;",
          "842:   if (info.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) {",
          "843:     if (fs__readlink_handle(handle, NULL, &statbuf->st_size) != 0) {",
          "844:       return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "842:   statbuf->st_flags = 0;",
          "843:   statbuf->st_gen = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "863:   FILETIME_TO_TIMESPEC(statbuf->st_mtim, info.ftLastWriteTime);",
          "864:   FILETIME_TO_TIMESPEC(statbuf->st_atim, info.ftLastAccessTime);",
          "865:   FILETIME_TO_TIMESPEC(statbuf->st_ctim, info.ftCreationTime);",
          "867:   statbuf->st_nlink = (info.nNumberOfLinks <= SHRT_MAX) ?",
          "868:                       (short) info.nNumberOfLinks : SHRT_MAX;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "869:   FILETIME_TO_TIMESPEC(statbuf->st_birthtim, info.ftCreationTime);",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "947:   ASSERT(s->st_mtim.tv_nsec == t.st_mtimespec.tv_nsec);",
          "948:   ASSERT(s->st_ctim.tv_sec == t.st_ctimespec.tv_sec);",
          "949:   ASSERT(s->st_ctim.tv_nsec == t.st_ctimespec.tv_nsec);",
          "950: #elif defined(_BSD_SOURCE) || defined(_SVID_SOURCE) || defined(_XOPEN_SOURCE)",
          "951:   ASSERT(s->st_atim.tv_sec == t.st_atim.tv_sec);",
          "952:   ASSERT(s->st_atim.tv_nsec == t.st_atim.tv_nsec);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "950:   ASSERT(s->st_birthtim.tv_sec == t.st_birthtimespec.tv_sec);",
          "951:   ASSERT(s->st_birthtim.tv_nsec == t.st_birthtimespec.tv_nsec);",
          "952:   ASSERT(s->st_flags == t.st_flags);",
          "953:   ASSERT(s->st_gen == t.st_gen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "954:   ASSERT(s->st_mtim.tv_nsec == t.st_mtim.tv_nsec);",
          "955:   ASSERT(s->st_ctim.tv_sec == t.st_ctim.tv_sec);",
          "956:   ASSERT(s->st_ctim.tv_nsec == t.st_ctim.tv_nsec);",
          "957: #else",
          "958:   ASSERT(s->st_atim.tv_sec == t.st_atime);",
          "959:   ASSERT(s->st_atim.tv_nsec == 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "961: # if defined(__DragonFly__)  || \\",
          "962:       defined(__FreeBSD__)    || \\",
          "963:       defined(__OpenBSD__)    || \\",
          "964:       defined(__NetBSD__)",
          "965:   ASSERT(s->st_birthtim.tv_sec == t.st_birthtim.tv_sec);",
          "966:   ASSERT(s->st_birthtim.tv_nsec == t.st_birthtim.tv_nsec);",
          "967:   ASSERT(s->st_flags == t.st_flags);",
          "968:   ASSERT(s->st_gen == t.st_gen);",
          "969: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0ec132aabced0173480c58b180a2b23c7dc9235",
      "candidate_info": {
        "commit_hash": "b0ec132aabced0173480c58b180a2b23c7dc9235",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b0ec132aabced0173480c58b180a2b23c7dc9235",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/version.c"
        ],
        "message": "Now working on v0.11.20",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: AM_INIT_AUTOMAKE([-Wall -Werror foreign subdir-objects] UV_EXTRA_AUTOMAKE_FLAGS)",
          "",
          "[Removed Lines]",
          "16: AC_INIT([libuv], [0.11.19], [https://github.com/joyent/libuv/issues])",
          "",
          "[Added Lines]",
          "16: AC_INIT([libuv], [0.11.20], [https://github.com/joyent/libuv/issues])",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "34: #define UV_VERSION_PATCH 19",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "34: #define UV_VERSION_PATCH 20",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3791bd4c3c3105f895926beb1a1019d8ddce68e",
      "candidate_info": {
        "commit_hash": "d3791bd4c3c3105f895926beb1a1019d8ddce68e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d3791bd4c3c3105f895926beb1a1019d8ddce68e",
        "files": [
          "test/test-pipe-getsockname.c"
        ],
        "message": "test: fix compilation warning on non-linux systems",
        "before_after_code_files": [
          "test/test-pipe-getsockname.c||test/test-pipe-getsockname.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-pipe-getsockname.c||test/test-pipe-getsockname.c": [
          "File: test/test-pipe-getsockname.c -> test/test-pipe-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: static int close_cb_called = 0;",
          "42: static void close_cb(uv_handle_t* handle) {",
          "",
          "[Removed Lines]",
          "39: static char abstract_pipe[] = \"\\0test-pipe\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   int sock;",
          "83:   struct sockaddr_un sun;",
          "84:   socklen_t sun_len;",
          "86:   sock = socket(AF_LOCAL, SOCK_STREAM, 0);",
          "87:   ASSERT(sock != -1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   char abstract_pipe[] = \"\\0test-pipe\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}