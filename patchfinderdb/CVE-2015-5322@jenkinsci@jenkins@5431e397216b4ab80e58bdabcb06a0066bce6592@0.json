{
  "cve_id": "CVE-2015-5322",
  "cve_desc": "Directory traversal vulnerability in Jenkins before 1.638 and LTS before 1.625.2 allows remote attackers to list directory contents and read arbitrary files in the Jenkins servlet resources via directory traversal sequences in a request to jnlpJars/.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "5431e397216b4ab80e58bdabcb06a0066bce6592",
  "patch_info": {
    "commit_hash": "5431e397216b4ab80e58bdabcb06a0066bce6592",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/5431e397216b4ab80e58bdabcb06a0066bce6592",
    "files": [
      "core/src/main/java/hudson/model/Slave.java"
    ],
    "message": "[SECURITY-195] - Throw the MalformedURLException if the request includes the relative addressing",
    "before_after_code_files": [
      "core/src/main/java/hudson/model/Slave.java||core/src/main/java/hudson/model/Slave.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/model/Slave.java||core/src/main/java/hudson/model/Slave.java": [
      "File: core/src/main/java/hudson/model/Slave.java -> core/src/main/java/hudson/model/Slave.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "323:         public URL getURL() throws MalformedURLException {",
      "324:             String name = fileName;",
      "325:             if (name.equals(\"hudson-cli.jar\"))  name=\"jenkins-cli.jar\";",
      "326:             URL res = Jenkins.getInstance().servletContext.getResource(\"/WEB-INF/\" + name);",
      "327:             if(res==null) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "328:             if (name.contains(\"..\")) {",
      "329:                 throw new MalformedURLException(\"The specified file path \" + fileName + \" contains '..'. \"",
      "330:                         + \"The path is not allowed due to security reasons\");",
      "331:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f22db8a7fab9f83dade918dda77e4eb92913f920",
      "candidate_info": {
        "commit_hash": "f22db8a7fab9f83dade918dda77e4eb92913f920",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/f22db8a7fab9f83dade918dda77e4eb92913f920",
        "files": [
          "core/src/main/java/hudson/model/Slave.java",
          "test/src/test/java/hudson/model/SlaveTest2.java"
        ],
        "message": "Update the implementation and tests according to comments from @stephenc",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/Slave.java||core/src/main/java/hudson/model/Slave.java",
          "test/src/test/java/hudson/model/SlaveTest2.java||test/src/test/java/hudson/model/SlaveTest2.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/Slave.java||core/src/main/java/hudson/model/Slave.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/Slave.java||core/src/main/java/hudson/model/Slave.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/Slave.java||core/src/main/java/hudson/model/Slave.java": [
          "File: core/src/main/java/hudson/model/Slave.java -> core/src/main/java/hudson/model/Slave.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:             if (name.equals(\"hudson-cli.jar\"))  name=\"jenkins-cli.jar\";",
          "329:                 throw new MalformedURLException(\"The specified file path \" + fileName + \" contains '..'. \"",
          "330:                         + \"The path is not allowed due to security reasons\");",
          "331:             }",
          "",
          "[Removed Lines]",
          "328:             if (name.contains(\"..\")) {",
          "",
          "[Added Lines]",
          "328:             if (name.equals(\"..\") || name.startsWith(\"../\") || name.startsWith(\"..\\\\\") ||",
          "329:                     name.replace('\\\\','/').contains(\"/../\")) {",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/SlaveTest2.java||test/src/test/java/hudson/model/SlaveTest2.java": [
          "File: test/src/test/java/hudson/model/SlaveTest2.java -> test/src/test/java/hudson/model/SlaveTest2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.model;",
          "26: import java.net.MalformedURLException;",
          "27: import org.junit.Rule;",
          "28: import org.junit.Test;",
          "29: import org.jvnet.hudson.test.JenkinsRule;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import java.net.URLEncoder;",
          "28: import javax.annotation.Nonnull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     public void shouldNotEscapeJnlpSlavesResources() throws Exception {",
          "49:         Slave slave = rule.createSlave();",
          "53:         try {",
          "54:             jnlpJar.getURL();",
          "55:         } catch (MalformedURLException ex) {",
          "",
          "[Removed Lines]",
          "52:         Slave.JnlpJar jnlpJar = slave.getComputer().getJnlpJars(\"../\");",
          "",
          "[Added Lines]",
          "54:         assertJnlpJarUrlIsAllowed(slave, \"slave.jar\");",
          "55:         assertJnlpJarUrlIsAllowed(slave, \"jenkins-cli.jar\");",
          "58:         assertJnlpJarUrlFails(slave, \"../\");",
          "59:         assertJnlpJarUrlFails(slave, \"..\");",
          "60:         assertJnlpJarUrlFails(slave, \"..\\\\\");",
          "61:         assertJnlpJarUrlFails(slave, \"../foo/bar\");",
          "62:         assertJnlpJarUrlFails(slave, \"..\\\\foo\\\\bar\");",
          "63:         assertJnlpJarUrlFails(slave, \"foo/../../bar\");",
          "64:         assertJnlpJarUrlFails(slave, \"./../foo/bar\");",
          "65:     }",
          "67:     private void assertJnlpJarUrlFails(@Nonnull Slave slave, @Nonnull String url) throws Exception {",
          "69:         Slave.JnlpJar jnlpJar = slave.getComputer().getJnlpJars(url);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:             ex.printStackTrace();",
          "58:             return;",
          "59:         }",
          "63:         JenkinsRule.WebClient client = rule.createWebClient();",
          "65:     }",
          "66: }",
          "",
          "[Removed Lines]",
          "60:         fail(\"Expected the MalformedURLException\");",
          "64:         client.assertFails(\"jnlpJars/..%f\", 500);",
          "",
          "[Added Lines]",
          "77:         fail(\"Expected the MalformedURLException for \" + url);",
          "80:         JenkinsRule.WebClient client = rule.createWebClient();",
          "81:         client.assertFails(\"jnlpJars/\" + URLEncoder.encode(url, \"UTF-8\"), 500);",
          "82:     }",
          "84:     private void assertJnlpJarUrlIsAllowed(@Nonnull Slave slave, @Nonnull String url) throws Exception {",
          "86:         Slave.JnlpJar jnlpJar = slave.getComputer().getJnlpJars(url);",
          "87:         assertNotNull(jnlpJar.getURL());",
          "92:         client.getPage(client.getContextPath() + \"jnlpJars/\" + URLEncoder.encode(url, \"UTF-8\")).getWebResponse().getContentAsString();",
          "93:         client.getPage(jnlpJar.getURL()).getWebResponse().getContentAsString();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed0bfe3014d3c96b0d05af2952662ee88947f4ae",
      "candidate_info": {
        "commit_hash": "ed0bfe3014d3c96b0d05af2952662ee88947f4ae",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/ed0bfe3014d3c96b0d05af2952662ee88947f4ae",
        "files": [
          "core/src/main/java/hudson/model/Slave.java",
          "test/src/test/java/hudson/model/SlaveTest2.java"
        ],
        "message": "Restrict everything excepting the predefined list of entries.",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/Slave.java||core/src/main/java/hudson/model/Slave.java",
          "test/src/test/java/hudson/model/SlaveTest2.java||test/src/test/java/hudson/model/SlaveTest2.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/Slave.java||core/src/main/java/hudson/model/Slave.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/Slave.java||core/src/main/java/hudson/model/Slave.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/Slave.java||core/src/main/java/hudson/model/Slave.java": [
          "File: core/src/main/java/hudson/model/Slave.java -> core/src/main/java/hudson/model/Slave.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: import java.net.URL;",
          "52: import java.net.URLConnection;",
          "53: import java.util.ArrayList;",
          "54: import java.util.List;",
          "55: import java.util.Set;",
          "57: import javax.servlet.ServletException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: import java.util.Arrays;",
          "57: import java.util.TreeSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:         public URL getURL() throws MalformedURLException {",
          "324:             String name = fileName;",
          "332:             }",
          "334:             URL res = Jenkins.getInstance().servletContext.getResource(\"/WEB-INF/\" + name);",
          "",
          "[Removed Lines]",
          "325:             if (name.equals(\"hudson-cli.jar\"))  name=\"jenkins-cli.jar\";",
          "328:             if (name.equals(\"..\") || name.startsWith(\"../\") || name.startsWith(\"..\\\\\") ||",
          "329:                     name.replace('\\\\','/').contains(\"/../\")) {",
          "330:                 throw new MalformedURLException(\"The specified file path \" + fileName + \" contains '..'. \"",
          "331:                         + \"The path is not allowed due to security reasons\");",
          "",
          "[Added Lines]",
          "329:             if (!ALLOWED_JNLPJARS_FILES.contains(name)) {",
          "330:                 throw new MalformedURLException(\"The specified file path \" + fileName + \" is not allowed due to security reasons\");",
          "331:             }",
          "333:             if (name.equals(\"hudson-cli.jar\"))  {",
          "334:                 name=\"jenkins-cli.jar\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "507:     private static final String WORKSPACE_ROOT = System.getProperty(Slave.class.getName()+\".workspaceRoot\",\"workspace\");",
          "508: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515:     private static final Set<String> ALLOWED_JNLPJARS_FILES = new TreeSet<String>",
          "516:         (Arrays.asList(\"slave.jar\", \"remoting.jar\", \"jenkins-cli.jar\", \"hudson-cli.jar\"));",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/SlaveTest2.java||test/src/test/java/hudson/model/SlaveTest2.java": [
          "File: test/src/test/java/hudson/model/SlaveTest2.java -> test/src/test/java/hudson/model/SlaveTest2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         assertJnlpJarUrlIsAllowed(slave, \"slave.jar\");",
          "55:         assertJnlpJarUrlIsAllowed(slave, \"jenkins-cli.jar\");",
          "58:         assertJnlpJarUrlFails(slave, \"../\");",
          "59:         assertJnlpJarUrlFails(slave, \"..\");",
          "60:         assertJnlpJarUrlFails(slave, \"..\\\\\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:         assertJnlpJarUrlIsAllowed(slave, \"remoting.jar\");",
          "57:         assertJnlpJarUrlIsAllowed(slave, \"hudson-cli.jar\");",
          "60:         assertJnlpJarUrlFails(slave, \"web.xml\");",
          "61:         assertJnlpJarUrlFails(slave, \"web.xml\");",
          "62:         assertJnlpJarUrlFails(slave, \"classes/bundled-plugins.txt\");",
          "63:         assertJnlpJarUrlFails(slave, \"classes/dependencies.txt\");",
          "64:         assertJnlpJarUrlFails(slave, \"plugins/ant.hpi\");",
          "65:         assertJnlpJarUrlFails(slave, \"nonexistentfolder/something.txt\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         JenkinsRule.WebClient client = rule.createWebClient();",
          "91:         client.getPage(client.getContextPath() + \"jnlpJars/\" + URLEncoder.encode(url, \"UTF-8\")).getWebResponse().getContentAsString();",
          "94:     }",
          "95: }",
          "",
          "[Removed Lines]",
          "92:         client.getPage(jnlpJar.getURL()).getWebResponse().getContentAsString();",
          "",
          "[Added Lines]",
          "102:         client.getPage(jnlpJar.getURL()).getWebResponse().getContentAsString();",
          "",
          "---------------"
        ]
      }
    }
  ]
}