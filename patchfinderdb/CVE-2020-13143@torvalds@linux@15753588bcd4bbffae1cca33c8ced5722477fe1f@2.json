{
  "cve_id": "CVE-2020-13143",
  "cve_desc": "gadget_dev_desc_UDC_store in drivers/usb/gadget/configfs.c in the Linux kernel 3.16 through 5.6.13 relies on kstrdup without considering the possibility of an internal '\\0' value, which allows attackers to trigger an out-of-bounds read, aka CID-15753588bcd4.",
  "repo": "torvalds/linux",
  "patch_hash": "15753588bcd4bbffae1cca33c8ced5722477fe1f",
  "patch_info": {
    "commit_hash": "15753588bcd4bbffae1cca33c8ced5722477fe1f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/15753588bcd4bbffae1cca33c8ced5722477fe1f",
    "files": [
      "drivers/usb/gadget/configfs.c"
    ],
    "message": "USB: gadget: fix illegal array access in binding with UDC\n\nFuzzUSB (a variant of syzkaller) found an illegal array access\nusing an incorrect index while binding a gadget with UDC.\n\nReference: https://www.spinics.net/lists/linux-usb/msg194331.html\n\nThis bug occurs when a size variable used for a buffer\nis misused to access its strcpy-ed buffer.\nGiven a buffer along with its size variable (taken from user input),\nfrom which, a new buffer is created using kstrdup().\nDue to the original buffer containing 0 value in the middle,\nthe size of the kstrdup-ed buffer becomes smaller than that of the original.\nSo accessing the kstrdup-ed buffer with the same size variable\ntriggers memory access violation.\n\nThe fix makes sure no zero value in the buffer,\nby comparing the strlen() of the orignal buffer with the size variable,\nso that the access to the kstrdup-ed buffer is safe.\n\nBUG: KASAN: slab-out-of-bounds in gadget_dev_desc_UDC_store+0x1ba/0x200\ndrivers/usb/gadget/configfs.c:266\nRead of size 1 at addr ffff88806a55dd7e by task syz-executor.0/17208\n\nCPU: 2 PID: 17208 Comm: syz-executor.0 Not tainted 5.6.8 #1\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011\nCall Trace:\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0xce/0x128 lib/dump_stack.c:118\n print_address_description.constprop.4+0x21/0x3c0 mm/kasan/report.c:374\n __kasan_report+0x131/0x1b0 mm/kasan/report.c:506\n kasan_report+0x12/0x20 mm/kasan/common.c:641\n __asan_report_load1_noabort+0x14/0x20 mm/kasan/generic_report.c:132\n gadget_dev_desc_UDC_store+0x1ba/0x200 drivers/usb/gadget/configfs.c:266\n flush_write_buffer fs/configfs/file.c:251 [inline]\n configfs_write_file+0x2f1/0x4c0 fs/configfs/file.c:283\n __vfs_write+0x85/0x110 fs/read_write.c:494\n vfs_write+0x1cd/0x510 fs/read_write.c:558\n ksys_write+0x18a/0x220 fs/read_write.c:611\n __do_sys_write fs/read_write.c:623 [inline]\n __se_sys_write fs/read_write.c:620 [inline]\n __x64_sys_write+0x73/0xb0 fs/read_write.c:620\n do_syscall_64+0x9e/0x510 arch/x86/entry/common.c:294\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\nSigned-off-by: Kyungtae Kim <kt0755@gmail.com>\nReported-and-tested-by: Kyungtae Kim <kt0755@gmail.com>\nCc: Felipe Balbi <balbi@kernel.org>\nCc: stable <stable@vger.kernel.org>\nLink: https://lore.kernel.org/r/20200510054326.GA19198@pizza01\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "before_after_code_files": [
      "drivers/usb/gadget/configfs.c||drivers/usb/gadget/configfs.c"
    ]
  },
  "patch_diff": {
    "drivers/usb/gadget/configfs.c||drivers/usb/gadget/configfs.c": [
      "File: drivers/usb/gadget/configfs.c -> drivers/usb/gadget/configfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:  char *name;",
      "261:  int ret;",
      "263:  name = kstrdup(page, GFP_KERNEL);",
      "264:  if (!name)",
      "265:   return -ENOMEM;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263:  if (strlen(page) < len)",
      "264:   return -EOVERFLOW;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f6766ff6afff70e2aaf39e1511e16d471de7c3ae",
      "candidate_info": {
        "commit_hash": "f6766ff6afff70e2aaf39e1511e16d471de7c3ae",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f6766ff6afff70e2aaf39e1511e16d471de7c3ae",
        "files": [
          "drivers/md/md.c"
        ],
        "message": "md: don't flush workqueue unconditionally in md_open\n\nWe need to check mddev->del_work before flush workqueu since the purpose\nof flush is to ensure the previous md is disappeared. Otherwise the similar\ndeadlock appeared if LOCKDEP is enabled, it is due to md_open holds the\nbdev->bd_mutex before flush workqueue.\n\nkernel: [  154.522645] ======================================================\nkernel: [  154.522647] WARNING: possible circular locking dependency detected\nkernel: [  154.522650] 5.6.0-rc7-lp151.27-default #25 Tainted: G           O\nkernel: [  154.522651] ------------------------------------------------------\nkernel: [  154.522653] mdadm/2482 is trying to acquire lock:\nkernel: [  154.522655] ffff888078529128 ((wq_completion)md_misc){+.+.}, at: flush_workqueue+0x84/0x4b0\nkernel: [  154.522673]\nkernel: [  154.522673] but task is already holding lock:\nkernel: [  154.522675] ffff88804efa9338 (&bdev->bd_mutex){+.+.}, at: __blkdev_get+0x79/0x590\nkernel: [  154.522691]\nkernel: [  154.522691] which lock already depends on the new lock.\nkernel: [  154.522691]\nkernel: [  154.522694]\nkernel: [  154.522694] the existing dependency chain (in reverse order) is:\nkernel: [  154.522696]\nkernel: [  154.522696] -> #4 (&bdev->bd_mutex){+.+.}:\nkernel: [  154.522704]        __mutex_lock+0x87/0x950\nkernel: [  154.522706]        __blkdev_get+0x79/0x590\nkernel: [  154.522708]        blkdev_get+0x65/0x140\nkernel: [  154.522709]        blkdev_get_by_dev+0x2f/0x40\nkernel: [  154.522716]        lock_rdev+0x3d/0x90 [md_mod]\nkernel: [  154.522719]        md_import_device+0xd6/0x1b0 [md_mod]\nkernel: [  154.522723]        new_dev_store+0x15e/0x210 [md_mod]\nkernel: [  154.522728]        md_attr_store+0x7a/0xc0 [md_mod]\nkernel: [  154.522732]        kernfs_fop_write+0x117/0x1b0\nkernel: [  154.522735]        vfs_write+0xad/0x1a0\nkernel: [  154.522737]        ksys_write+0xa4/0xe0\nkernel: [  154.522745]        do_syscall_64+0x64/0x2b0\nkernel: [  154.522748]        entry_SYSCALL_64_after_hwframe+0x49/0xbe\nkernel: [  154.522749]\nkernel: [  154.522749] -> #3 (&mddev->reconfig_mutex){+.+.}:\nkernel: [  154.522752]        __mutex_lock+0x87/0x950\nkernel: [  154.522756]        new_dev_store+0xc9/0x210 [md_mod]\nkernel: [  154.522759]        md_attr_store+0x7a/0xc0 [md_mod]\nkernel: [  154.522761]        kernfs_fop_write+0x117/0x1b0\nkernel: [  154.522763]        vfs_write+0xad/0x1a0\nkernel: [  154.522765]        ksys_write+0xa4/0xe0\nkernel: [  154.522767]        do_syscall_64+0x64/0x2b0\nkernel: [  154.522769]        entry_SYSCALL_64_after_hwframe+0x49/0xbe\nkernel: [  154.522770]\nkernel: [  154.522770] -> #2 (kn->count#253){++++}:\nkernel: [  154.522775]        __kernfs_remove+0x253/0x2c0\nkernel: [  154.522778]        kernfs_remove+0x1f/0x30\nkernel: [  154.522780]        kobject_del+0x28/0x60\nkernel: [  154.522783]        mddev_delayed_delete+0x24/0x30 [md_mod]\nkernel: [  154.522786]        process_one_work+0x2a7/0x5f0\nkernel: [  154.522788]        worker_thread+0x2d/0x3d0\nkernel: [  154.522793]        kthread+0x117/0x130\nkernel: [  154.522795]        ret_from_fork+0x3a/0x50\nkernel: [  154.522796]\nkernel: [  154.522796] -> #1 ((work_completion)(&mddev->del_work)){+.+.}:\nkernel: [  154.522800]        process_one_work+0x27e/0x5f0\nkernel: [  154.522802]        worker_thread+0x2d/0x3d0\nkernel: [  154.522804]        kthread+0x117/0x130\nkernel: [  154.522806]        ret_from_fork+0x3a/0x50\nkernel: [  154.522807]\nkernel: [  154.522807] -> #0 ((wq_completion)md_misc){+.+.}:\nkernel: [  154.522813]        __lock_acquire+0x1392/0x1690\nkernel: [  154.522816]        lock_acquire+0xb4/0x1a0\nkernel: [  154.522818]        flush_workqueue+0xab/0x4b0\nkernel: [  154.522821]        md_open+0xb6/0xc0 [md_mod]\nkernel: [  154.522823]        __blkdev_get+0xea/0x590\nkernel: [  154.522825]        blkdev_get+0x65/0x140\nkernel: [  154.522828]        do_dentry_open+0x1d1/0x380\nkernel: [  154.522831]        path_openat+0x567/0xcc0\nkernel: [  154.522834]        do_filp_open+0x9b/0x110\nkernel: [  154.522836]        do_sys_openat2+0x201/0x2a0\nkernel: [  154.522838]        do_sys_open+0x57/0x80\nkernel: [  154.522840]        do_syscall_64+0x64/0x2b0\nkernel: [  154.522842]        entry_SYSCALL_64_after_hwframe+0x49/0xbe\nkernel: [  154.522844]\nkernel: [  154.522844] other info that might help us debug this:\nkernel: [  154.522844]\nkernel: [  154.522846] Chain exists of:\nkernel: [  154.522846]   (wq_completion)md_misc --> &mddev->reconfig_mutex --> &bdev->bd_mutex\nkernel: [  154.522846]\nkernel: [  154.522850]  Possible unsafe locking scenario:\nkernel: [  154.522850]\nkernel: [  154.522852]        CPU0                    CPU1\nkernel: [  154.522853]        ----                    ----\nkernel: [  154.522854]   lock(&bdev->bd_mutex);\nkernel: [  154.522856]                                lock(&mddev->reconfig_mutex);\nkernel: [  154.522858]                                lock(&bdev->bd_mutex);\nkernel: [  154.522860]   lock((wq_completion)md_misc);\nkernel: [  154.522861]\nkernel: [  154.522861]  *** DEADLOCK ***\nkernel: [  154.522861]\nkernel: [  154.522864] 1 lock held by mdadm/2482:\nkernel: [  154.522865]  #0: ffff88804efa9338 (&bdev->bd_mutex){+.+.}, at: __blkdev_get+0x79/0x590\nkernel: [  154.522868]\nkernel: [  154.522868] stack backtrace:\nkernel: [  154.522873] CPU: 1 PID: 2482 Comm: mdadm Tainted: G           O      5.6.0-rc7-lp151.27-default #25\nkernel: [  154.522875] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nkernel: [  154.522878] Call Trace:\nkernel: [  154.522881]  dump_stack+0x8f/0xcb\nkernel: [  154.522884]  check_noncircular+0x194/0x1b0\nkernel: [  154.522888]  ? __lock_acquire+0x1392/0x1690\nkernel: [  154.522890]  __lock_acquire+0x1392/0x1690\nkernel: [  154.522893]  lock_acquire+0xb4/0x1a0\nkernel: [  154.522895]  ? flush_workqueue+0x84/0x4b0\nkernel: [  154.522898]  flush_workqueue+0xab/0x4b0\nkernel: [  154.522900]  ? flush_workqueue+0x84/0x4b0\nkernel: [  154.522905]  ? md_open+0xb6/0xc0 [md_mod]\nkernel: [  154.522908]  md_open+0xb6/0xc0 [md_mod]\nkernel: [  154.522910]  __blkdev_get+0xea/0x590\nkernel: [  154.522912]  ? bd_acquire+0xc0/0xc0\nkernel: [  154.522914]  blkdev_get+0x65/0x140\nkernel: [  154.522916]  ? bd_acquire+0xc0/0xc0\nkernel: [  154.522918]  do_dentry_open+0x1d1/0x380\nkernel: [  154.522921]  path_openat+0x567/0xcc0\nkernel: [  154.522923]  ? __lock_acquire+0x380/0x1690\nkernel: [  154.522926]  do_filp_open+0x9b/0x110\nkernel: [  154.522929]  ? __alloc_fd+0xe5/0x1f0\nkernel: [  154.522935]  ? kmem_cache_alloc+0x28c/0x630\nkernel: [  154.522939]  ? do_sys_openat2+0x201/0x2a0\nkernel: [  154.522941]  do_sys_openat2+0x201/0x2a0\nkernel: [  154.522944]  do_sys_open+0x57/0x80\nkernel: [  154.522946]  do_syscall_64+0x64/0x2b0\nkernel: [  154.522948]  entry_SYSCALL_64_after_hwframe+0x49/0xbe\nkernel: [  154.522951] RIP: 0033:0x7f98d279d9ae\n\nAnd md_alloc also flushed the same workqueue, but the thing is different\nhere. Because all the paths call md_alloc don't hold bdev->bd_mutex, and\nthe flush is necessary to avoid race condition, so leave it as it is.\n\nSigned-off-by: Guoqing Jiang <guoqing.jiang@cloud.ionos.com>\nSigned-off-by: Song Liu <songliubraving@fb.com>",
        "before_after_code_files": [
          "drivers/md/md.c||drivers/md/md.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/md/md.c||drivers/md/md.c": [
          "File: drivers/md/md.c -> drivers/md/md.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7769:   mddev_put(mddev);",
          "7773:   return -ERESTARTSYS;",
          "7774:  }",
          "",
          "[Removed Lines]",
          "7771:   flush_workqueue(md_misc_wq);",
          "",
          "[Added Lines]",
          "7771:   if (work_pending(&mddev->del_work))",
          "7772:    flush_workqueue(md_misc_wq);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1449cb2c2253d37d998c3714aa9b95416d16d379",
      "candidate_info": {
        "commit_hash": "1449cb2c2253d37d998c3714aa9b95416d16d379",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1449cb2c2253d37d998c3714aa9b95416d16d379",
        "files": [
          "drivers/usb/host/xhci-plat.c"
        ],
        "message": "usb: host: xhci-plat: keep runtime active when removing host\n\nWhile removing the host (e.g. for USB role switch from host to device),\nif runtime pm is enabled by user, below oops occurs on dwc3 and cdns3\nplatforms.\nKeeping the xhci-plat device active during host removal, and disabling\nruntime pm before calling pm_runtime_set_suspended() fixes them.\n\noops1:\nUnable to handle kernel NULL pointer dereference at virtual address\n0000000000000240\nInternal error: Oops: 96000004 [#1] PREEMPT SMP\nModules linked in:\nCPU: 0 PID: 5 Comm: kworker/0:0 Not tainted 5.4.3-00107-g64d454a-dirty\nHardware name: FSL i.MX8MP EVK (DT)\nWorkqueue: pm pm_runtime_work\npstate: 60000005 (nZCv daif -PAN -UAO)\npc : xhci_suspend+0x34/0x698\nlr : xhci_plat_runtime_suspend+0x2c/0x38\nsp : ffff800011ddbbc0\nCall trace:\n xhci_suspend+0x34/0x698\n xhci_plat_runtime_suspend+0x2c/0x38\n pm_generic_runtime_suspend+0x28/0x40\n __rpm_callback+0xd8/0x138\n rpm_callback+0x24/0x98\n rpm_suspend+0xe0/0x448\n rpm_idle+0x124/0x140\n pm_runtime_work+0xa0/0xf8\n process_one_work+0x1dc/0x370\n worker_thread+0x48/0x468\n kthread+0xf0/0x120\n ret_from_fork+0x10/0x1c\n\noops2:\nusb 2-1: USB disconnect, device number 2\nxhci-hcd xhci-hcd.1.auto: remove, state 4\nusb usb2: USB disconnect, device number 1\nxhci-hcd xhci-hcd.1.auto: USB bus 2 deregistered\nxhci-hcd xhci-hcd.1.auto: remove, state 4\nusb usb1: USB disconnect, device number 1\nUnable to handle kernel NULL pointer dereference at virtual address\n0000000000000138\nInternal error: Oops: 96000004 [#1] PREEMPT SMP\nModules linked in:\nCPU: 2 PID: 7 Comm: kworker/u8:0 Not tainted 5.6.0-rc4-next-20200304-03578\nHardware name: Freescale i.MX8QXP MEK (DT)\nWorkqueue: 1-0050 tcpm_state_machine_work\npstate: 20000005 (nzCv daif -PAN -UAO)\npc : xhci_free_dev+0x214/0x270\nlr : xhci_plat_runtime_resume+0x78/0x88\nsp : ffff80001006b5b0\nCall trace:\n xhci_free_dev+0x214/0x270\n xhci_plat_runtime_resume+0x78/0x88\n pm_generic_runtime_resume+0x30/0x48\n __rpm_callback+0x90/0x148\n rpm_callback+0x28/0x88\n rpm_resume+0x568/0x758\n rpm_resume+0x260/0x758\n rpm_resume+0x260/0x758\n __pm_runtime_resume+0x40/0x88\n device_release_driver_internal+0xa0/0x1c8\n device_release_driver+0x1c/0x28\n bus_remove_device+0xd4/0x158\n device_del+0x15c/0x3a0\n usb_disable_device+0xb0/0x268\n usb_disconnect+0xcc/0x300\n usb_remove_hcd+0xf4/0x1dc\n xhci_plat_remove+0x78/0xe0\n platform_drv_remove+0x30/0x50\n device_release_driver_internal+0xfc/0x1c8\n device_release_driver+0x1c/0x28\n bus_remove_device+0xd4/0x158\n device_del+0x15c/0x3a0\n platform_device_del.part.0+0x20/0x90\n platform_device_unregister+0x28/0x40\n cdns3_host_exit+0x20/0x40\n cdns3_role_stop+0x60/0x90\n cdns3_role_set+0x64/0xd8\n usb_role_switch_set_role.part.0+0x3c/0x68\n usb_role_switch_set_role+0x20/0x30\n tcpm_mux_set+0x60/0xf8\n tcpm_reset_port+0xa4/0xf0\n tcpm_detach.part.0+0x28/0x50\n tcpm_state_machine_work+0x12ac/0x2360\n process_one_work+0x1c8/0x470\n worker_thread+0x50/0x428\n kthread+0xfc/0x128\n ret_from_fork+0x10/0x18\nCode: c8037c02 35ffffa3 17ffe7c3 f9800011 (c85f7c01)\n---[ end trace 45b1a173d2679e44 ]---\n\n[minor commit message cleanup  -Mathias]\nCc: Baolin Wang <baolin.wang@linaro.org>\nCc: <stable@vger.kernel.org>\nFixes: b0c69b4bace3 (\"usb: host: plat: Enable xHCI plat runtime PM\")\nReviewed-by: Peter Chen <peter.chen@nxp.com>\nTested-by: Peter Chen <peter.chen@nxp.com>\nSigned-off-by: Li Jun <jun.li@nxp.com>\nSigned-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>\nLink: https://lore.kernel.org/r/20200514110432.25564-3-mathias.nyman@linux.intel.com\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/usb/host/xhci-plat.c||drivers/usb/host/xhci-plat.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/usb/host/xhci-plat.c||drivers/usb/host/xhci-plat.c": [
          "File: drivers/usb/host/xhci-plat.c -> drivers/usb/host/xhci-plat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:  struct clk *reg_clk = xhci->reg_clk;",
          "363:  struct usb_hcd *shared_hcd = xhci->shared_hcd;",
          "365:  xhci->xhc_state |= XHCI_STATE_REMOVING;",
          "367:  usb_remove_hcd(shared_hcd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:  pm_runtime_get_sync(&dev->dev);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:  clk_disable_unprepare(reg_clk);",
          "376:  usb_put_hcd(hcd);",
          "379:  pm_runtime_disable(&dev->dev);",
          "381:  return 0;",
          "382: }",
          "",
          "[Removed Lines]",
          "378:  pm_runtime_set_suspended(&dev->dev);",
          "",
          "[Added Lines]",
          "380:  pm_runtime_put_noidle(&dev->dev);",
          "381:  pm_runtime_set_suspended(&dev->dev);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3eaae1d05f2b5be1be834bfad64f8fc2ad39a56d",
      "candidate_info": {
        "commit_hash": "3eaae1d05f2b5be1be834bfad64f8fc2ad39a56d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3eaae1d05f2b5be1be834bfad64f8fc2ad39a56d",
        "files": [
          "include/linux/dsa/8021q.h",
          "net/dsa/tag_8021q.c"
        ],
        "message": "net: dsa: tag_8021q: support up to 8 VLANs per port using sub-VLANs\n\nFor switches that support VLAN retagging, such as sja1105, we extend\ndsa_8021q by encoding a \"sub-VLAN\" into the remaining 3 free bits in the\ndsa_8021q tag.\n\nA sub-VLAN is nothing more than a number in the range 0-7, which serves\nas an index into a per-port driver lookup table. The sub-VLAN value of\nzero means that traffic is untagged (this is also backwards-compatible\nwith dsa_8021q without retagging).\n\nThe switch should be configured to retag VLAN-tagged traffic that gets\ntransmitted towards the CPU port (and towards the CPU only). Example:\n\nbridge vlan add dev sw1p0 vid 100\n\nThe switch retags frames received on port 0, going to the CPU, and\nhaving VID 100, to the VID of 1104 (0x0450). In dsa_8021q language:\n\n | 11  | 10  |  9  |  8  |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0  |\n +-----------+-----+-----------------+-----------+-----------------------+\n |    DIR    | SVL |    SWITCH_ID    |  SUBVLAN  |          PORT         |\n +-----------+-----+-----------------+-----------+-----------------------+\n\n0x0450 means:\n - DIR = 0b01: this is an RX VLAN\n - SUBVLAN = 0b001: this is subvlan #1\n - SWITCH_ID = 0b001: this is switch 1 (see the name \"sw1p0\")\n - PORT = 0b0000: this is port 0 (see the name \"sw1p0\")\n\nThe driver also remembers the \"1 -> 100\" mapping. In the hotpath, if the\nsub-VLAN from the tag encodes a non-untagged frame, this mapping is used\nto create a VLAN hwaccel tag, with the value of 100.\n\nSigned-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>\nReviewed-by: Florian Fainelli <f.fainelli@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/linux/dsa/8021q.h||include/linux/dsa/8021q.h",
          "net/dsa/tag_8021q.c||net/dsa/tag_8021q.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/linux/dsa/8021q.h||include/linux/dsa/8021q.h": [
          "File: include/linux/dsa/8021q.h -> include/linux/dsa/8021q.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  refcount_t refcount;",
          "21: };",
          "23: #if IS_ENABLED(CONFIG_NET_DSA_TAG_8021Q)",
          "25: int dsa_port_setup_8021q_tagging(struct dsa_switch *ds, int index,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #define DSA_8021Q_N_SUBVLAN   8",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: u16 dsa_8021q_rx_vid(struct dsa_switch *ds, int port);",
          "45: int dsa_8021q_rx_switch_id(u16 vid);",
          "47: int dsa_8021q_rx_source_port(u16 vid);",
          "49: bool vid_is_dsa_8021q(u16 vid);",
          "51: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: u16 dsa_8021q_rx_vid_subvlan(struct dsa_switch *ds, int port, u16 subvlan);",
          "53: u16 dsa_8021q_rx_subvlan(u16 vid);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:  return 0;",
          "89: }",
          "91: int dsa_8021q_rx_switch_id(u16 vid)",
          "92: {",
          "93:  return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: u16 dsa_8021q_rx_vid_subvlan(struct dsa_switch *ds, int port, u16 subvlan)",
          "98: {",
          "99:  return 0;",
          "100: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:  return 0;",
          "99: }",
          "101: bool vid_is_dsa_8021q(u16 vid)",
          "102: {",
          "103:  return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: u16 dsa_8021q_rx_subvlan(u16 vid)",
          "113: {",
          "114:  return 0;",
          "115: }",
          "",
          "---------------"
        ],
        "net/dsa/tag_8021q.c||net/dsa/tag_8021q.c": [
          "File: net/dsa/tag_8021q.c -> net/dsa/tag_8021q.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #define DSA_8021Q_SWITCH_ID(x)  (((x) << DSA_8021Q_SWITCH_ID_SHIFT) & \\",
          "55:        DSA_8021Q_SWITCH_ID_MASK)",
          "57: #define DSA_8021Q_PORT_SHIFT  0",
          "58: #define DSA_8021Q_PORT_MASK  GENMASK(3, 0)",
          "59: #define DSA_8021Q_PORT(x)  (((x) << DSA_8021Q_PORT_SHIFT) & \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: #define DSA_8021Q_SUBVLAN_HI_SHIFT 9",
          "65: #define DSA_8021Q_SUBVLAN_HI_MASK GENMASK(9, 9)",
          "66: #define DSA_8021Q_SUBVLAN_LO_SHIFT 4",
          "67: #define DSA_8021Q_SUBVLAN_LO_MASK GENMASK(4, 3)",
          "68: #define DSA_8021Q_SUBVLAN_HI(x)  (((x) & GENMASK(2, 2)) >> 2)",
          "69: #define DSA_8021Q_SUBVLAN_LO(x)  ((x) & GENMASK(1, 0))",
          "70: #define DSA_8021Q_SUBVLAN(x)  \\",
          "71:   (((DSA_8021Q_SUBVLAN_LO(x) << DSA_8021Q_SUBVLAN_LO_SHIFT) & \\",
          "72:     DSA_8021Q_SUBVLAN_LO_MASK) | \\",
          "73:    ((DSA_8021Q_SUBVLAN_HI(x) << DSA_8021Q_SUBVLAN_HI_SHIFT) & \\",
          "74:     DSA_8021Q_SUBVLAN_HI_MASK))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: }",
          "80: EXPORT_SYMBOL_GPL(dsa_8021q_rx_vid);",
          "83: int dsa_8021q_rx_switch_id(u16 vid)",
          "84: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: u16 dsa_8021q_rx_vid_subvlan(struct dsa_switch *ds, int port, u16 subvlan)",
          "102: {",
          "103:  return DSA_8021Q_DIR_RX | DSA_8021Q_SWITCH_ID(ds->index) |",
          "104:         DSA_8021Q_PORT(port) | DSA_8021Q_SUBVLAN(subvlan);",
          "105: }",
          "106: EXPORT_SYMBOL_GPL(dsa_8021q_rx_vid_subvlan);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93: }",
          "94: EXPORT_SYMBOL_GPL(dsa_8021q_rx_source_port);",
          "96: bool vid_is_dsa_8021q(u16 vid)",
          "97: {",
          "98:  return ((vid & DSA_8021Q_DIR_MASK) == DSA_8021Q_DIR_RX ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123: u16 dsa_8021q_rx_subvlan(u16 vid)",
          "124: {",
          "125:  u16 svl_hi, svl_lo;",
          "127:  svl_hi = (vid & DSA_8021Q_SUBVLAN_HI_MASK) >>",
          "128:    DSA_8021Q_SUBVLAN_HI_SHIFT;",
          "129:  svl_lo = (vid & DSA_8021Q_SUBVLAN_LO_MASK) >>",
          "130:    DSA_8021Q_SUBVLAN_LO_SHIFT;",
          "132:  return (svl_hi << 2) | svl_lo;",
          "133: }",
          "134: EXPORT_SYMBOL_GPL(dsa_8021q_rx_subvlan);",
          "",
          "---------------"
        ]
      }
    }
  ]
}