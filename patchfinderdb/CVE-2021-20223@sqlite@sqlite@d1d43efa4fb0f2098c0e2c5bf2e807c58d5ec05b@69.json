{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ad0e25fa41bf51f6ee5302ac62842cf5546223d",
      "candidate_info": {
        "commit_hash": "6ad0e25fa41bf51f6ee5302ac62842cf5546223d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ad0e25fa41bf51f6ee5302ac62842cf5546223d",
        "files": [
          "ext/misc/regexp.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the regexp extension so that it correctly translates all over-length 3-byte UTF8 sequences into 0xfffd.\n\nFossilOrigin-Name: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
        "before_after_code_files": [
          "ext/misc/regexp.c||ext/misc/regexp.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/regexp.c||ext/misc/regexp.c": [
          "File: ext/misc/regexp.c -> ext/misc/regexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:            && (p->z[p->i+1]&0xc0)==0x80 ){",
          "157:       c = (c&0x0f)<<12 | ((p->z[p->i]&0x3f)<<6) | (p->z[p->i+1]&0x3f);",
          "158:       p->i += 2;",
          "160:     }else if( (c&0xf8)==0xf0 && p->i+3<p->mx && (p->z[p->i]&0xc0)==0x80",
          "161:            && (p->z[p->i+1]&0xc0)==0x80 && (p->z[p->i+2]&0xc0)==0x80 ){",
          "162:       c = (c&0x07)<<18 | ((p->z[p->i]&0x3f)<<12) | ((p->z[p->i+1]&0x3f)<<6)",
          "",
          "[Removed Lines]",
          "159:       if( c<=0x3ff || (c>=0xd800 && c<=0xdfff) ) c = 0xfffd;",
          "",
          "[Added Lines]",
          "159:       if( c<=0x7ff || (c>=0xd800 && c<=0xdfff) ) c = 0xfffd;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "337ca519e1c106bbcfa3b7b91c0fe68673e3cc42",
      "candidate_info": {
        "commit_hash": "337ca519e1c106bbcfa3b7b91c0fe68673e3cc42",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/337ca519e1c106bbcfa3b7b91c0fe68673e3cc42",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c"
        ],
        "message": "Enhance PRAGMA function_list to show internal functions if the direct use of internal functions is enabled via the SQLITE_TESTCTRL_INTERNAL_FUNCTIONS test control.\n\nFossilOrigin-Name: 7a8d7ca726666f4384925f959df0d58f7622229e06f1b5e643a3caccd539bb6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b878c30f03e895bbc5c4c99c0f727d49093bb78bdc275593cf4852148579ae69",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   for(; p; p=p->pNext){",
          "304:     const char *zType;",
          "305:     const char *zEnc;",
          "",
          "[Removed Lines]",
          "302: static void pragmaFunclistLine(Vdbe *v, FuncDef *p, int isBuiltin){",
          "",
          "[Added Lines]",
          "302: static void pragmaFunclistLine(",
          "307: ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:         SQLITE_DETERMINISTIC |",
          "308:         SQLITE_DIRECTONLY |",
          "309:         SQLITE_SUBTYPE |",
          "311:     ;",
          "313:     if( p->xSFunc==0 ) continue;",
          "314:     if( p->xValue!=0 ){",
          "315:       zType = \"w\";",
          "316:     }else if( p->xFinalize!=0 ){",
          "",
          "[Removed Lines]",
          "310:         SQLITE_INNOCUOUS",
          "",
          "[Added Lines]",
          "315:         SQLITE_INNOCUOUS |",
          "316:         SQLITE_FUNC_INTERNAL",
          "320:     if( (p->funcFlags & SQLITE_FUNC_INTERNAL)!=0",
          "321:      && showInternFuncs==0",
          "322:     ){",
          "323:       continue;",
          "324:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1299:     int i;",
          "1300:     HashElem *j;",
          "1301:     FuncDef *p;",
          "1302:     pParse->nMem = 6;",
          "1303:     for(i=0; i<SQLITE_FUNC_HASH_SZ; i++){",
          "1304:       for(p=sqlite3BuiltinFunctions.a[i]; p; p=p->u.pHash ){",
          "1307:       }",
          "1308:     }",
          "1309:     for(j=sqliteHashFirst(&db->aFunc); j; j=sqliteHashNext(j)){",
          "1310:       p = (FuncDef*)sqliteHashData(j);",
          "1312:     }",
          "1313:   }",
          "1314:   break;",
          "",
          "[Removed Lines]",
          "1305:         if( p->funcFlags & SQLITE_FUNC_INTERNAL ) continue;",
          "1306:         pragmaFunclistLine(v, p, 1);",
          "1311:       pragmaFunclistLine(v, p, 0);",
          "",
          "[Added Lines]",
          "1313:     int showInternFunc = (db->mDbFlags & DBFLAG_InternalFunc)!=0;",
          "1317:         pragmaFunclistLine(v, p, 1, showInternFunc);",
          "1322:       pragmaFunclistLine(v, p, 0, showInternFunc);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0933aad72c5ac1a763891c03b231ce72b1d19b03",
      "candidate_info": {
        "commit_hash": "0933aad72c5ac1a763891c03b231ce72b1d19b03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0933aad72c5ac1a763891c03b231ce72b1d19b03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c",
          "src/os_win.c",
          "src/pager.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/tclsqlite.c",
          "src/test_demovfs.c",
          "src/test_vfs.c",
          "test/symlink.test",
          "test/tclsqlite.test"
        ],
        "message": "Add support for SQLITE_OPEN_NOFOLLOW.\n\nFossilOrigin-Name: cb79c828496a703f1410f61458ebc1e15a92a63412b36f51945b2b5a32ec6e88",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c",
          "src/os_win.c||src/os_win.c",
          "src/pager.c||src/pager.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/tclsqlite.c||src/tclsqlite.c",
          "src/test_demovfs.c||src/test_demovfs.c",
          "src/test_vfs.c||src/test_vfs.c",
          "test/symlink.test||test/symlink.test",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b67eba54e7b4887a8cdab7537b12a95e9f17bcdaa0b423af5ed5bd91f69f2c6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6251:   SimulateIOError( return SQLITE_IOERR_ACCESS; );",
          "6252:   assert( pResOut!=0 );",
          "6258:   if( flags==SQLITE_ACCESS_EXISTS ){",
          "6259:     struct stat buf;",
          "6263:   }",
          "6264:   return SQLITE_OK;",
          "6265: }",
          "",
          "[Removed Lines]",
          "6256:   assert( flags==SQLITE_ACCESS_EXISTS || flags==SQLITE_ACCESS_READWRITE );",
          "6261:   }else{",
          "",
          "[Added Lines]",
          "6256:   assert( flags==SQLITE_ACCESS_EXISTS",
          "6257:        || flags==SQLITE_ACCESS_READWRITE",
          "6258:        || flags==SQLITE_ACCESS_SYMLINK );",
          "6263:   }else if( flags==SQLITE_ACCESS_READWRITE ){",
          "6265:   }else{",
          "6266: #if !defined(HAVE_LSTAT)",
          "6268: #else",
          "6269:     struct stat buf;",
          "6271: #endif",
          "6272:     assert( flags==SQLITE_ACCESS_SYMLINK );",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5472:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5473:              (attr & FILE_ATTRIBUTE_READONLY)==0;",
          "5474:       break;",
          "5475:     default:",
          "5476:       assert(!\"Invalid flags argument\");",
          "5477:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5475:     case SQLITE_ACCESS_SYMLINK:",
          "5477:       break;",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4789:   if( zFilename && zFilename[0] ){",
          "4790:     const char *z;",
          "4791:     nPathname = pVfs->mxPathname+1;",
          "4792:     zPathname = sqlite3DbMallocRaw(0, nPathname*2);",
          "4793:     if( zPathname==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4791:     if( (vfsFlags & SQLITE_OPEN_NOFOLLOW)!=0 ){",
          "4792:       int isLink = 0;",
          "4793:       if( sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink)==0",
          "4794:        && isLink",
          "4795:       ){",
          "4796:         return SQLITE_CANTOPEN_SYMLINK;",
          "4797:       }",
          "4798:     }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3562:   \"        --maxsize N     Maximum size for --hexdb or --deserialized database\",",
          "3563: #endif",
          "3564:   \"        --new           Initialize FILE to an empty database\",",
          "3565:   \"        --readonly      Open FILE readonly\",",
          "3566:   \"        --zip           FILE is a ZIP archive\",",
          "3567:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3566:   \"        --nofollow      Do not follow symbolic links\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4126:     switch( p->openMode ){",
          "4127:       case SHELL_OPEN_APPENDVFS: {",
          "4128:         sqlite3_open_v2(p->zDbFilename, &p->db,",
          "4130:         break;",
          "4131:       }",
          "4132:       case SHELL_OPEN_HEXDB:",
          "",
          "[Removed Lines]",
          "4129:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE, \"apndvfs\");",
          "",
          "[Added Lines]",
          "4131:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|p->openFlags, \"apndvfs\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4139:         break;",
          "4140:       }",
          "4141:       case SHELL_OPEN_READONLY: {",
          "4143:         break;",
          "4144:       }",
          "4145:       case SHELL_OPEN_UNSPEC:",
          "4146:       case SHELL_OPEN_NORMAL: {",
          "4148:         break;",
          "4149:       }",
          "4150:     }",
          "",
          "[Removed Lines]",
          "4142:         sqlite3_open_v2(p->zDbFilename, &p->db, SQLITE_OPEN_READONLY, 0);",
          "4147:         sqlite3_open(p->zDbFilename, &p->db);",
          "",
          "[Added Lines]",
          "4144:         sqlite3_open_v2(p->zDbFilename, &p->db,",
          "4145:             SQLITE_OPEN_READONLY|p->openFlags, 0);",
          "4150:         sqlite3_open_v2(p->zDbFilename, &p->db,",
          "4151:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|p->openFlags, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8042:     sqlite3_free(p->zFreeOnClose);",
          "8043:     p->zFreeOnClose = 0;",
          "8044:     p->openMode = SHELL_OPEN_UNSPEC;",
          "8045:     p->szMax = 0;",
          "8047:     for(iName=1; iName<nArg && azArg[iName][0]=='-'; iName++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8049:     p->openFlags = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8056:         p->openMode = SHELL_OPEN_APPENDVFS;",
          "8057:       }else if( optionMatch(z, \"readonly\") ){",
          "8058:         p->openMode = SHELL_OPEN_READONLY;",
          "8059: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "8060:       }else if( optionMatch(z, \"deserialize\") ){",
          "8061:         p->openMode = SHELL_OPEN_DESERIALIZE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8064:       }else if( optionMatch(z, \"nofollow\") ){",
          "8065:         p->openFlags |= SQLITE_OPEN_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9976:   \"   -multiplex           enable the multiplexor VFS\\n\"",
          "9977: #endif",
          "9978:   \"   -newline SEP         set output row separator. Default: '\\\\n'\\n\"",
          "9979:   \"   -nullvalue TEXT      set text string for NULL values. Default ''\\n\"",
          "9980:   \"   -pagecache SIZE N    use N slots of SZ bytes each for page cache memory\\n\"",
          "9981:   \"   -quote               set output mode to 'quote'\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9986:   \"   -nofollow            refuse to open symbolic links to database files\\n\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "10286: #endif",
          "10287:     }else if( strcmp(z,\"-readonly\")==0 ){",
          "10288:       data.openMode = SHELL_OPEN_READONLY;",
          "10289: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB)",
          "10290:     }else if( strncmp(z, \"-A\",2)==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10297:     }else if( strcmp(z,\"-nofollow\")==0 ){",
          "10298:       data.openFlags = SQLITE_OPEN_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10389: #endif",
          "10390:     }else if( strcmp(z,\"-readonly\")==0 ){",
          "10391:       data.openMode = SHELL_OPEN_READONLY;",
          "10392:     }else if( strcmp(z,\"-ascii\")==0 ){",
          "10393:       data.mode = MODE_Ascii;",
          "10394:       sqlite3_snprintf(sizeof(data.colSeparator), data.colSeparator,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10402:     }else if( strcmp(z,\"-nofollow\")==0 ){",
          "10403:       data.openFlags |= SQLITE_OPEN_NOFOLLOW;",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "516: #define SQLITE_CANTOPEN_FULLPATH       (SQLITE_CANTOPEN | (3<<8))",
          "517: #define SQLITE_CANTOPEN_CONVPATH       (SQLITE_CANTOPEN | (4<<8))",
          "519: #define SQLITE_CORRUPT_VTAB            (SQLITE_CORRUPT | (1<<8))",
          "520: #define SQLITE_CORRUPT_SEQUENCE        (SQLITE_CORRUPT | (2<<8))",
          "521: #define SQLITE_READONLY_RECOVERY       (SQLITE_READONLY | (1<<8))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519: #define SQLITE_CANTOPEN_SYMLINK        (SQLITE_CANTOPEN | (6<<8))",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3670: ){",
          "3671:   Tcl_WrongNumArgs(interp, 1, objv,",
          "3672:     \"HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN?\"",
          "3673:     \" ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "3674: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_CODEC_FROM_TCL)",
          "3675:     \" ?-key CODECKEY?\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3673:     \" ?-nofollow BOOLEAN?\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3779:       }else{",
          "3780:         flags &= ~SQLITE_OPEN_CREATE;",
          "3781:       }",
          "3782:     }else if( strcmp(zArg, \"-nomutex\")==0 ){",
          "3783:       int b;",
          "3784:       if( Tcl_GetBooleanFromObj(interp, objv[i], &b) ) return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3784:     }else if( strcmp(zArg, \"-nofollow\")==0 ){",
          "3785:       int b;",
          "3786:       if( Tcl_GetBooleanFromObj(interp, objv[i], &b) ) return TCL_ERROR;",
          "3787:       if( b ){",
          "3788:         flags |= SQLITE_OPEN_NOFOLLOW;",
          "3789:       }else{",
          "3790:         flags &= ~SQLITE_OPEN_NOFOLLOW;",
          "3791:       }",
          "",
          "---------------"
        ],
        "src/test_demovfs.c||src/test_demovfs.c": [
          "File: src/test_demovfs.c -> src/test_demovfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "511:   );",
          "513:   if( flags==SQLITE_ACCESS_READWRITE ) eAccess = R_OK|W_OK;",
          "514:   if( flags==SQLITE_ACCESS_READ )      eAccess = R_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514:   if( flags==SQLITE_ACCESS_SYMLINK ){",
          "517:     return SQLITE_OK;",
          "518:   }",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "732:     if( flags==SQLITE_ACCESS_EXISTS ) zArg = \"SQLITE_ACCESS_EXISTS\";",
          "733:     if( flags==SQLITE_ACCESS_READWRITE ) zArg = \"SQLITE_ACCESS_READWRITE\";",
          "734:     if( flags==SQLITE_ACCESS_READ ) zArg = \"SQLITE_ACCESS_READ\";",
          "735:     tvfsExecTcl(p, \"xAccess\",",
          "736:         Tcl_NewStringObj(zPath, -1), Tcl_NewStringObj(zArg, -1), 0, 0",
          "737:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "735:     if( flags==SQLITE_ACCESS_SYMLINK ) zArg = \"SQLITE_ACCESS_SYMLINK\";",
          "",
          "---------------"
        ],
        "test/symlink.test||test/symlink.test": [
          "File: test/symlink.test -> test/symlink.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   sqlite3_db_filename db2 main",
          "38: } [file join [pwd] test.db]",
          "40: # Test that if the symlink points to a file that does not exists, it is",
          "41: # created when it is opened.",
          "42: #",
          "43: do_test 1.2.1 {",
          "45:   db close",
          "46:   forcedelete test.db",
          "47:   file exists test.db",
          "",
          "[Removed Lines]",
          "44:   db2 close",
          "",
          "[Added Lines]",
          "40: # But not with the -nofollow flag",
          "41: #",
          "42: do_test 1.1.2 {",
          "43:   db2 close",
          "44:   set rc [catch {sqlite3 db2 test.db2 -nofollow 1} msg]",
          "45:   lappend rc $msg",
          "46: } {1 {unable to open database file}}",
          "48: # If the main database is successfully opened with -nofollow, then -nofollow",
          "49: # is also used for ATTACH.",
          "50: #",
          "51: do_test 1.1.3 {",
          "52:   catch {db2 close}",
          "53:   sqlite3 db2 test.db -nofollow 1",
          "54: } {}",
          "55: do_test 1.1.4 {",
          "56:   catchsql {ATTACH 'test.db2' AS aux1;} db2",
          "57: } {1 {unable to open database: test.db2}}",
          "63:   catch {db2 close}",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: # Check the error messages generated by tclsqlite",
          "27: #",
          "29: if {[sqlite3 -has-codec]} {",
          "30:   append r \" ?-key CODECKEY?\"",
          "31: }",
          "",
          "[Removed Lines]",
          "28: set r \"sqlite_orig HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN? ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "",
          "[Added Lines]",
          "28: set r \"sqlite_orig HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN? ?-nofollow BOOLEAN? ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8cc8feae7eccac1a43e00e5d7325b07767e92a3b",
      "candidate_info": {
        "commit_hash": "8cc8feae7eccac1a43e00e5d7325b07767e92a3b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8cc8feae7eccac1a43e00e5d7325b07767e92a3b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/window1.test"
        ],
        "message": "When computing dependencies on WHERE-clause terms, be sure to take into account the FILTER clause of aggregate functions.  Problem reported by Manuel Rigger.\n\nFossilOrigin-Name: 3cc2b5709e66ef605c3b85ed13ae6cc9c3090e864ebc18859db36284b8f715b6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c538601e4c979ee59f18d19e6eb6296cebfa580fb029a18d5a3f0dd9393acb75",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1516:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->x.pList);",
          "1517:   }",
          "1518: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1520:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->y.pWin->pPartition);",
          "1521:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->y.pWin->pOrderBy);",
          "1522:   }",
          "1523: #endif",
          "1524:   return mask;",
          "",
          "[Removed Lines]",
          "1519:   if( p->op==TK_FUNCTION && p->y.pWin ){",
          "",
          "[Added Lines]",
          "1519:   if( (p->op==TK_FUNCTION || p->op==TK_AGG_FUNCTION) && p->y.pWin ){",
          "1522:     mask |= sqlite3WhereExprUsage(pMaskSet, p->y.pWin->pFilter);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1329:   SELECT c FROM v0 WHERE c BETWEEN -10 AND 20;",
          "1330: } {}",
          "1334: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1332: # 2019-20-20 mrigger reported problem with a FILTER clause on an aggregate",
          "1333: # in a join.",
          "1334: #",
          "1335: reset_db",
          "1336: do_execsql_test 38.10 {",
          "1337:   CREATE TABLE t0(c0);",
          "1338:   CREATE TABLE t1(c0, c1 UNIQUE);",
          "1339:   INSERT INTO t0(c0) VALUES(1);",
          "1340:   INSERT INTO t1(c0,c1) VALUES(2,3);",
          "1341:   SELECT COUNT(*) FROM t0, t1 WHERE (SELECT AVG(0) FILTER(WHERE t1.c1));",
          "1342: } {0}",
          "1343: do_execsql_test 38.20 {",
          "1344:   SELECT COUNT(*), AVG(1) FILTER(WHERE t1.c1) FROM t0, t1;",
          "1345: } {1 1.0}",
          "1346: do_execsql_test 38.30 {",
          "1347:   SELECT COUNT(*) FROM t0, t1 WHERE (SELECT AVG(1) FILTER(WHERE t1.c1));",
          "1348: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a92eae97510c02bed680dbfa90341ea73df4a3da",
      "candidate_info": {
        "commit_hash": "a92eae97510c02bed680dbfa90341ea73df4a3da",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a92eae97510c02bed680dbfa90341ea73df4a3da",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/fts3corrupt4.test"
        ],
        "message": "Merge fixes from trunk.\n\nFossilOrigin-Name: dd39418ee47529cc3ffbe01eccf31f1304a266a196bf81a2a2cb2e650c195b97",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5831:       fts3EvalRestart(pCsr, pRoot, &rc);",
          "5832:       do {",
          "5833:         fts3EvalNextRow(pCsr, pRoot, &rc);",
          "5835:       }while( pRoot->iDocid!=iDocid && rc==SQLITE_OK );",
          "5836:     }",
          "5837:   }",
          "",
          "[Removed Lines]",
          "5834:         assert( pRoot->bEof==0 );",
          "",
          "[Added Lines]",
          "5834:         assert_fts3_nc( pRoot->bEof==0 );",
          "5835:         if( pRoot->bEof ) rc = FTS_CORRUPT_VTAB;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b5443b47af95f4f0ef527bee90f186ee25faa5df197dbcc3e14d48eee095e4aa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1129:     }",
          "1131:     case SRT_Upfrom: {",
          "1133:       if( pSort ){",
          "1134:         pushOntoSorter(",
          "1135:             pParse, pSort, p, regResult, regOrig, nResultCol, nPrefixReg);",
          "1139:         int i2 = pDest->iSDParm2;",
          "1140:         int r1 = sqlite3GetTempReg(pParse);",
          "",
          "[Removed Lines]",
          "1132: #ifdef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "1136:       }else",
          "1137: #endif",
          "1138:       {",
          "",
          "[Added Lines]",
          "1135:       }else{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1587:       break;",
          "1588:     }",
          "1589: #endif",
          "1591:     case SRT_Upfrom: {",
          "1592:       int i2 = pDest->iSDParm2;",
          "1593:       int r1 = sqlite3GetTempReg(pParse);",
          "",
          "[Removed Lines]",
          "1590: #ifdef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1599:       }",
          "1600:       break;",
          "1601:     }",
          "1603:     default: {",
          "1604:       assert( eDest==SRT_Output || eDest==SRT_Coroutine );",
          "1605:       testcase( eDest==SRT_Output );",
          "",
          "[Removed Lines]",
          "1602: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6284: set sqlite_fts3_enable_parentheses $saved",
          "6285: extra_schema_checks 1",
          "6287: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6287: #-------------------------------------------------------------------------",
          "6288: reset_db",
          "6289: do_execsql_test 47.1 {",
          "6290:   CREATE VIRTUAL TABLE t1 USING fts3(a,b,c);",
          "6291: }",
          "6292: do_execsql_test 47.2 {",
          "6293:   INSERT INTO t1_segdir VALUES(0,0,0,0,0,X'000130120106000106000106001f030001030001030000083230313630363039090107000107000107000001340901050001050001050000013509010400010400010400010730303030303030091c0400010400010400000662696e6172793c0301020200030102020003010202000301020200030102020003010202000301020200030102020003010202000301020200030102020003010202000008636f6d70696c657209010200010200010200000664627374617409070300010300010300010465627567090402000102000102000006656e61626c653f07020001020001020001020001020001020001020001020001020001020001020001020001010001020001020001020001020001020001020001020001020001087874656e73696f6e091f0400010400010400000466747334090a0300010300010300030135090d03000103000103000003676363090103000103000103000106656f706f6c790910030001030001030000056a736f6e310913030001030001030000046c6f6164091f030001030001030000036d6178091c02000102000102000105656d6f7279091c03000103000103000304737973350916030001030001030000066e6f636173653c02010202000301020200030102020003010202000301020200030102020003010202000301020200030102020003010202000301020200030102020000046f6d6974091f020001020001020000057274726565091903000103000103000302696d3c01010202000301020200030102020003010202000301020200030102020003010202000301a202000301020200030102020003010202000301020200000a746872656164736166650922020001020001020000047674616209070400010400010400000178b401010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200');",
          "6294:   INSERT INTO t1_segdir VALUES(0,1,0,0,0,X'0001300425061b000008323031363036303903250700000134032505000001350325040001073030303030303003251a000008636f6d70696c657203250200000664627374617403250a00010465627567032508000006656e61626c650925090504040404040001087874656e73696f6e03251d0000046674733403250d0003013503250f000003676363032503000106656f706f6c790325110000056a736f6e310325130000046c6f616403251c0000036d6178032518000105656d6f7279032519000304737973350325150000046f6d697403251b000005727472656503251700000a7468726561647361666503251e0000047674616333250b00');",
          "6295: }",
          "6297: do_catchsql_test 47.3 {",
          "6298:   SELECT matchinfo(t1) FROM t1 WHERE t1 MATCH '\"json1 enable\"';",
          "6299: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}