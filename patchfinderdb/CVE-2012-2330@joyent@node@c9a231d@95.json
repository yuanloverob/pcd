{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5809426d758af04bcd55de960081316729279838",
      "candidate_info": {
        "commit_hash": "5809426d758af04bcd55de960081316729279838",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5809426d758af04bcd55de960081316729279838",
        "files": [
          "lib/net.js"
        ],
        "message": "net.js: lint",
        "before_after_code_files": [
          "lib/net.js||linet.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   Stream.call(this);",
          "134:   switch (typeof options) {",
          "141:   }",
          "143:   if (typeof options.fd === 'undefined') {",
          "",
          "[Removed Lines]",
          "135:   case 'number':",
          "136:     options = { fd: options }; // Legacy interface.",
          "137:     break;",
          "138:   case 'undefined':",
          "139:     options = {};",
          "140:     break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23dc0992995fb1307d516e6c6f33439da8bc112b",
      "candidate_info": {
        "commit_hash": "23dc0992995fb1307d516e6c6f33439da8bc112b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/23dc0992995fb1307d516e6c6f33439da8bc112b",
        "files": [
          "benchmark/tls-connect.js"
        ],
        "message": "benchmark: add single process tls connection benchmark",
        "before_after_code_files": [
          "benchmark/tls-connect.js||benchmark/tls-connect.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/tls-connect.js||benchmark/tls-connect.js": [
          "File: benchmark/tls-connect.js -> benchmark/tls-connect.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: var assert = require('assert'),",
          "3:     fs = require('fs'),",
          "4:     path = require('path'),",
          "5:     tls = require('tls');",
          "8: var target_connections = 10000,",
          "9:     concurrency = 10;",
          "11: for (var i = 2; i < process.argv.length; i++) {",
          "12:   switch (process.argv[i]) {",
          "13:     case '-c':",
          "14:       concurrency = ~~process.argv[++i];",
          "15:       break;",
          "17:     case '-n':",
          "18:       target_connections = ~~process.argv[++i];",
          "19:       break;",
          "21:     default:",
          "22:       throw new Error('Invalid flag: ' + process.argv[i]);",
          "23:   }",
          "24: }",
          "27: var cert_dir = path.resolve(__dirname, '../test/fixtures'),",
          "28:     options = { key: fs.readFileSync(cert_dir + '/test_key.pem'),",
          "29:                 cert: fs.readFileSync(cert_dir + '/test_cert.pem'),",
          "30:                 ca: [ fs.readFileSync(cert_dir + '/test_ca.pem') ] };",
          "32: var server = tls.createServer(options, onConnection);",
          "33: server.listen(8000);",
          "36: var initiated_connections = 0,",
          "37:     server_connections = 0,",
          "38:     client_connections = 0,",
          "39:     start = Date.now();",
          "41: for (var i = 0; i < concurrency; i++)",
          "42:   makeConnection();",
          "45: process.on('exit', onExit);",
          "48: function makeConnection() {",
          "49:   if (initiated_connections >= target_connections)",
          "50:     return;",
          "52:   initiated_connections++;",
          "54:   var conn = tls.connect(8000, function() {",
          "55:     client_connections++;",
          "57:     if (client_connections % 100 === 0)",
          "58:       console.log(client_connections + ' of ' + target_connections +",
          "59:                   ' connections made');",
          "61:     conn.end();",
          "62:     makeConnection();",
          "63:   });",
          "64: }",
          "67: function onConnection(conn) {",
          "68:   server_connections++;",
          "70:   if (server_connections === target_connections)",
          "71:     server.close();",
          "72: }",
          "75: function onExit() {",
          "76:   var end = Date.now(),",
          "77:       s = (end - start) / 1000,",
          "78:       persec = Math.round(target_connections / s);",
          "80:   assert.equal(initiated_connections, target_connections);",
          "81:   assert.equal(client_connections, target_connections);",
          "82:   assert.equal(server_connections, target_connections);",
          "84:   console.log('%d connections in %d s', target_connections, s);",
          "85:   console.log('%d connections per second', persec);",
          "86: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b2091b58ab7cdef5651aa16641c5f274687561f",
      "candidate_info": {
        "commit_hash": "6b2091b58ab7cdef5651aa16641c5f274687561f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6b2091b58ab7cdef5651aa16641c5f274687561f",
        "files": [
          "lib/_debugger.js",
          "lib/child_process.js"
        ],
        "message": "debug threads",
        "before_after_code_files": [
          "lib/_debugger.js||li_debugger.js",
          "lib/child_process.js||lichild_process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/_debugger.js||li_debugger.js": [
          "File: lib/_debugger.js -> li_debugger.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     vm = require('vm'),",
          "26:     repl = require('repl'),",
          "27:     inherits = util.inherits,",
          "30: exports.start = function(argv, stdin, stdout) {",
          "31:   argv || (argv = process.argv.slice(2));",
          "",
          "[Removed Lines]",
          "28:     spawn = require('child_process').spawn;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   stdin = stdin || process.openStdin();",
          "40:   stdout = stdout || process.stdout;",
          "43:       interface = new Interface(stdin, stdout, args);",
          "45:   stdin.resume();",
          "",
          "[Removed Lines]",
          "42:   var args = ['--debug-brk'].concat(argv),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:   this.scripts = {};",
          "170:   this.breakpoints = [];",
          "173:   socket.setEncoding('utf8');",
          "174:   socket.on('data', function(d) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1595:     }",
          "1596:   }",
          "1603:   }",
          "1605:   this.pause();",
          "1610:   client.once('ready', function() {",
          "1614:     breakpoints.forEach(function(bp) {",
          "",
          "[Removed Lines]",
          "1598:   if (!this.child) {",
          "1599:     this.child = spawn(process.execPath, this.args);",
          "1601:     this.child.stdout.on('data', this.childPrint.bind(this));",
          "1602:     this.child.stderr.on('data', this.childPrint.bind(this));",
          "1607:   var client = self.client = new Client(),",
          "1608:       connectionAttempts = 0;",
          "1611:     self.stdout.write(' ok\\n');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1656:   function attemptConnect() {",
          "1657:     ++connectionAttempts;",
          "1658:     self.stdout.write('.');",
          "1659:     client.connect(port, host);",
          "1660:   }",
          "1666: };",
          "",
          "[Removed Lines]",
          "1662:   setTimeout(function() {",
          "1663:     self.print('connecting..', true);",
          "1664:     attemptConnect();",
          "1665:   }, 50);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:     windowsVerbatimArguments: !!(options && options.windowsVerbatimArguments),",
          "362:     envPairs: envPairs,",
          "363:     customFds: options ? options.customFds : null,",
          "365:   });",
          "367:   return child;",
          "",
          "[Removed Lines]",
          "364:     stdinStream: options ? options.stdinStream : null",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:   var self = this;",
          "540:   if (self._handle) throw new Error('Isolate already running.');",
          "542:   if (!self._handle) throw new Error('Cannot create isolate.');",
          "544:   self._handle.onmessage = function(msg) {",
          "",
          "[Removed Lines]",
          "541:   self._handle = isolates.create(options.args);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "145612c2f51e4dfa536f6d1a538ab600aad69e52",
      "candidate_info": {
        "commit_hash": "145612c2f51e4dfa536f6d1a538ab600aad69e52",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/145612c2f51e4dfa536f6d1a538ab600aad69e52",
        "files": [
          "test/simple/test-http-full-response.js"
        ],
        "message": "test: skip test-http-full-response on ab errors\n\nIf we get errors from ab or apr, skip the test and move on.\n\nFix #3451",
        "before_after_code_files": [
          "test/simple/test-http-full-response.js||test/simple/test-http-full-response.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-http-full-response.js||test/simple/test-http-full-response.js": [
          "File: test/simple/test-http-full-response.js -> test/simple/test-http-full-response.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   var command = 'ab ' + opts + ' http://127.0.0.1:' + common.PORT + '/';",
          "50:   exec(command, function(err, stdout, stderr) {",
          "51:     if (err) {",
          "54:         process.reallyExit(0);",
          "55:       }",
          "56:       process.exit();",
          "",
          "[Removed Lines]",
          "52:       if (stderr.indexOf('ab') >= 0) {",
          "53:         console.log('ab not installed? skipping test.\\n' + stderr);",
          "",
          "[Added Lines]",
          "52:       if (/ab|apr/mi.test(stderr)) {",
          "53:         console.log('problem spawning ab - skipping test.\\n' + stderr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03cb903e7e3a35350ba09af052eac7844ae070e9",
      "candidate_info": {
        "commit_hash": "03cb903e7e3a35350ba09af052eac7844ae070e9",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/03cb903e7e3a35350ba09af052eac7844ae070e9",
        "files": [
          "src/node.cc",
          "src/node_isolate.cc"
        ],
        "message": "isolates: remove references to uv_thread_self()\n\nuv_thread_self() is difficult to implement on Windows in a way where the return\nvalue is valid across threads. It's already been removed from upstream libuv.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_isolate.cc||src/node_isolate.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2679:   v8::V8::Initialize();",
          "2680:   v8::HandleScope handle_scope;",
          "2686:   node::Isolate::Initialize();",
          "2687:   Isolate* isolate = new node::Isolate();",
          "2689:   isolate->Enter();",
          "2690:   StartThread(isolate, argc, argv);",
          "2691:   isolate->Dispose();",
          "",
          "[Removed Lines]",
          "2683:   uv_thread_t tid = uv_thread_self();",
          "2688:   isolate->tid_ = tid;",
          "",
          "[Added Lines]",
          "2685:   isolate->tid_ = (uv_thread_t) -1;",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   HandleScope scope;",
          "221:   Isolate* self = static_cast<Isolate*>(arg);",
          "223:   NODE_ISOLATE_CHECK(self);",
          "225:   Buffer* buf = Buffer::New(msg->data_, msg->size_, IsolateMessage::Free, msg);",
          "",
          "[Removed Lines]",
          "222:   assert(uv_thread_self() == self->tid_);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426:   }",
          "428:   void OnMessage(IsolateMessage* msg) {",
          "430:     NODE_ISOLATE_CHECK(parent_isolate_);",
          "431:     HandleScope scope;",
          "432:     Buffer* buf = Buffer::New(",
          "",
          "[Removed Lines]",
          "429:     assert(uv_thread_self() != isolate_->tid_);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}