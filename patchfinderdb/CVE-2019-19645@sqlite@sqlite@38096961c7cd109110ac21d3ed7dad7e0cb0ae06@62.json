{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a015d3c82f295994186f1b95b1f0004ad2004d03",
      "candidate_info": {
        "commit_hash": "a015d3c82f295994186f1b95b1f0004ad2004d03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a015d3c82f295994186f1b95b1f0004ad2004d03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a problem in the legacy \".explain on\" formatting when it is used on a query with more than 8 output columns.\n\nFossilOrigin-Name: 070b49825c5f87cce15be4b758f0dfdd65226ec379465ca527a18706a1f3b8f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 346bdd49fb93aa58e8bd14250974d8c0c32cc7e8317c8b12da1fa44db10d8a3a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1855:       const int *colWidth;",
          "1856:       int showHdr;",
          "1857:       char *rowSep;",
          "1858:       if( p->cMode==MODE_Column ){",
          "1859:         colWidth = p->colWidth;",
          "1860:         showHdr = p->showHeader;",
          "1861:         rowSep = p->rowSeparator;",
          "1862:       }else{",
          "1863:         colWidth = aExplainWidths;",
          "1864:         showHdr = 1;",
          "1865:         rowSep = SEP_Row;",
          "1866:       }",
          "1867:       if( p->cnt++==0 ){",
          "1868:         for(i=0; i<nArg; i++){",
          "1869:           int w, n;",
          "1871:             w = colWidth[i];",
          "1872:           }else{",
          "1873:             w = 0;",
          "",
          "[Removed Lines]",
          "1870:           if( i<ArraySize(p->colWidth) ){",
          "",
          "[Added Lines]",
          "1858:       int nWidth;",
          "1861:         nWidth = ArraySize(p->colWidth);",
          "1866:         nWidth = ArraySize(aExplainWidths);",
          "1873:           if( i<nWidth ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfe3b583159900285febfeb141b6e75c3fa1411e",
      "candidate_info": {
        "commit_hash": "dfe3b583159900285febfeb141b6e75c3fa1411e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dfe3b583159900285febfeb141b6e75c3fa1411e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix a typo in a comment used to generate documentation.  No functional changes.\n\nFossilOrigin-Name: ccc4f7424bc8f37c168333091dd9e3d6f80ccff9e2b06f182df65be59a7e3349",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0888fc2e881d56ccd5222383d1a08cdf16fbd15c40da7ebfc14346be69ffb26a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ]
      }
    },
    {
      "candidate_hash": "f467744d5fc68f64f051d7e3a8ba8e4a67b006bb",
      "candidate_info": {
        "commit_hash": "f467744d5fc68f64f051d7e3a8ba8e4a67b006bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f467744d5fc68f64f051d7e3a8ba8e4a67b006bb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with running ALTER TABLE on a schema that contains expressions of the type \"col IN ()\" (empty set on RHS of IN operator).\n\nFossilOrigin-Name: 2d9cd06715092c312c8c0ec392696a0e90ed090b074e2082e0b830f1399aa941",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 008112bcef561a8a3ebfb007cbef36cbc0071f547e6ebdba3d3bbb39e2c48c7a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1171:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "1169:       sqlite3ExprDelete(pParse->db, A);",
          "1170:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "",
          "[Added Lines]",
          "1169:       if( IN_RENAME_OBJECT==0 ){",
          "1170:         sqlite3ExprDelete(pParse->db, A);",
          "1171:         A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1172:       }",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     SELECT a,b,c FROM \"t1x\" WHERE b>='d' ORDER BY name;",
          "64:     SELECT new.c;",
          "65:   END}}",
          "66: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #-------------------------------------------------------------------------",
          "68: reset_db",
          "69: do_execsql_test 3.0 {",
          "70:   CREATE TABLE t1(a, b, c, d);",
          "71:   CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (b IN ());",
          "72: }",
          "74: do_execsql_test 3.1 {",
          "75:   ALTER TABLE t1 RENAME b TO bbb;",
          "76: }",
          "78: do_execsql_test 3.2 {",
          "79:   SELECT sql FROM sqlite_master WHERE name = 'v1'",
          "80: } {{CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (bbb IN ())}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3af1b60e3a3963b70399320cdf59286537004f69",
      "candidate_info": {
        "commit_hash": "3af1b60e3a3963b70399320cdf59286537004f69",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3af1b60e3a3963b70399320cdf59286537004f69",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/oserror.test"
        ],
        "message": "Changes to oserror.test so that it works even on systems that allow an unusually large number of file descriptors.\n\nFossilOrigin-Name: a27b0b880d76c6838c0365f66bcd69b1b49b7594470993b608f4e490cbdc4882",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/oserror.test||test/oserror.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1b1dd4d48cd79a585e1fa7ee79128e9f2a9ee9846339dc56bbd67b75112dcad5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/oserror.test||test/oserror.test": [
          "File: test/oserror.test -> test/oserror.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: # an error may be reported for either open() or getcwd() here.",
          "53: #",
          "54: if {![clang_sanitize_address]} {",
          "55:   do_test 1.1.1 {",
          "56:     set ::log [list]",
          "61:   do_test 1.1.2 {",
          "67: }",
          "",
          "[Removed Lines]",
          "57:     list [catch {",
          "58:       for {set i 0} {$i < 20000} {incr i} { sqlite3 dbh_$i test.db -readonly 1 }",
          "59:     } msg] $msg",
          "60:   } {1 {unable to open database file}}",
          "62:     catch { for {set i 0} {$i < 20000} {incr i} { dbh_$i close } }",
          "63:   } {1}",
          "64:   do_re_test 1.1.3 {",
          "65:     lindex $::log 0",
          "66:   } {^os_unix.c:\\d+: \\(\\d+\\) (open|getcwd)\\(.*test.db\\) - }",
          "",
          "[Added Lines]",
          "55:   unset -nocomplain rc",
          "56:   unset -nocomplain nOpen",
          "57:   set nOpen 20000",
          "60:     set ::rc [catch {",
          "61:       for {set i 0} {$i < $::nOpen} {incr i} { sqlite3 dbh_$i test.db -readonly 1 }",
          "62:     } msg]",
          "63:     if {$::rc==0} {",
          "64:       # Some system (ex: Debian) are able to create 20000+ file descriptiors",
          "65:       # such systems will not fail here",
          "66:       set x ok",
          "67:     } elseif {$::rc==1 && $msg==\"unable to open database file\"} {",
          "68:       set x ok",
          "69:     } else {",
          "70:       set x [list $::rc $msg]",
          "71:     }",
          "72:   } {ok}",
          "74:     catch { for {set i 0} {$i < $::nOpen} {incr i} { dbh_$i close } }",
          "75:   } $::rc",
          "76:   if {$rc} {",
          "77:     do_re_test 1.1.3 {",
          "78:       lindex $::log 0",
          "79:     } {^os_unix.c:\\d+: \\(\\d+\\) (open|getcwd)\\(.*test.db\\) - }",
          "80:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "211a0857b9bfe094297a0004d0344dcb1d06492e",
      "candidate_info": {
        "commit_hash": "211a0857b9bfe094297a0004d0344dcb1d06492e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/211a0857b9bfe094297a0004d0344dcb1d06492e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "src/window.c"
        ],
        "message": "Window functions that can abort should indicate this, so that if they are used in DML statement, a statement journal will be used.\n\nFossilOrigin-Name: 0ea05a0eb96acb860d8af2e788e29a5ae3b161e7892ab62f1ff2f3e722c0dcb6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 004f7d9bbeee049c22a7e1c82c6cc0ea79a237967de3ff57686acea3060d5f45",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "638:     if( opcode==OP_Destroy || opcode==OP_VUpdate || opcode==OP_VRename",
          "639:      || opcode==OP_VDestroy",
          "640:      || ((opcode==OP_Halt || opcode==OP_HaltIfNull)",
          "642:     ){",
          "643:       hasAbort = 1;",
          "644:       break;",
          "",
          "[Removed Lines]",
          "641:       && ((pOp->p1&0xff)==SQLITE_CONSTRAINT && pOp->p2==OE_Abort))",
          "",
          "[Added Lines]",
          "641:       && ((pOp->p1)!=SQLITE_OK && pOp->p2==OE_Abort))",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:   VdbeCoverageNeverNullIf(v, eCond==0);",
          "1076:   VdbeCoverageNeverNullIf(v, eCond==1);",
          "1077:   VdbeCoverageNeverNullIf(v, eCond==2);",
          "1078:   sqlite3VdbeAddOp2(v, OP_Halt, SQLITE_ERROR, OE_Abort);",
          "1079:   sqlite3VdbeAppendP4(v, (void*)azErr[eCond], P4_STATIC);",
          "1080:   sqlite3ReleaseTempReg(pParse, regZero);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:   sqlite3MayAbort(pParse);",
          "",
          "---------------"
        ]
      }
    }
  ]
}