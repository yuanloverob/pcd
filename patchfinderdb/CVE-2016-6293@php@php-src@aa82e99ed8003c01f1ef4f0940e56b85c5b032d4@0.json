{
  "cve_id": "CVE-2016-6293",
  "cve_desc": "The uloc_acceptLanguageFromHTTP function in common/uloc.cpp in International Components for Unicode (ICU) through 57.1 for C/C++ does not ensure that there is a '\\0' character at the end of a certain temporary array, which allows remote attackers to cause a denial of service (out-of-bounds read) or possibly have unspecified other impact via a call with a long httpAcceptLanguage argument.",
  "repo": "php/php-src",
  "patch_hash": "aa82e99ed8003c01f1ef4f0940e56b85c5b032d4",
  "patch_info": {
    "commit_hash": "aa82e99ed8003c01f1ef4f0940e56b85c5b032d4",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/aa82e99ed8003c01f1ef4f0940e56b85c5b032d4",
    "files": [
      "ext/intl/locale/locale_methods.c",
      "ext/intl/tests/bug72533.phpt"
    ],
    "message": "Fix bug #72533 (locale_accept_from_http out-of-bounds access)",
    "before_after_code_files": [
      "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c",
      "ext/intl/tests/bug72533.phpt||ext/intl/tests/bug72533.phpt"
    ]
  },
  "patch_diff": {
    "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c": [
      "File: ext/intl/locale/locale_methods.c -> ext/intl/locale/locale_methods.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1591:   \"locale_accept_from_http: unable to parse input parameters\", 0 TSRMLS_CC );",
      "1592:   RETURN_FALSE;",
      "1593:  }",
      "1595:  available = ures_openAvailableLocales(NULL, &status);",
      "1596:  INTL_CHECK_STATUS(status, \"locale_accept_from_http: failed to retrieve locale list\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1594:  if(http_accept_len > ULOC_FULLNAME_CAPACITY) {",
      "1596:   char *start = http_accept;",
      "1597:   char *end;",
      "1598:   size_t len;",
      "1599:   do {",
      "1600:    end = strchr(start, ',');",
      "1601:    len = end ? end-start : http_accept_len-(start-http_accept);",
      "1602:    if(len > ULOC_FULLNAME_CAPACITY) {",
      "1603:     intl_error_set( NULL, U_ILLEGAL_ARGUMENT_ERROR,",
      "1604:       \"locale_accept_from_http: locale string too long\", 0 TSRMLS_CC );",
      "1605:     RETURN_FALSE;",
      "1606:    }",
      "1607:    if(end) {",
      "1608:     start = end+1;",
      "1609:    }",
      "1610:   } while(end != NULL);",
      "1611:  }",
      "",
      "---------------"
    ],
    "ext/intl/tests/bug72533.phpt||ext/intl/tests/bug72533.phpt": [
      "File: ext/intl/tests/bug72533.phpt -> ext/intl/tests/bug72533.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: --TEST--",
      "2: Bug #72533 (locale_accept_from_http out-of-bounds access)",
      "3: --SKIPIF--",
      "4: <?php if( !extension_loaded( 'intl' ) ) print 'skip'; ?>",
      "5: --FILE--",
      "6: <?php",
      "8: function ut_main()",
      "9: {",
      "10:     $ret = var_export(ut_loc_accept_http(str_repeat('x', 256)), true);",
      "11:     $ret .= \"\\n\";",
      "12:  if(intl_is_failure(intl_get_error_code())) {",
      "13:   $ret .= var_export(intl_get_error_message(), true);",
      "14:  }",
      "15:     $ret .= \"\\n\";",
      "16:     $ret .= var_export(ut_loc_accept_http(str_repeat('en,', 256)), true);",
      "17:     $ret .= \"\\n\";",
      "18:  if(intl_is_failure(intl_get_error_code())) {",
      "19:   $ret .= var_export(intl_get_error_message(), true);",
      "20:  }",
      "21:     return $ret;",
      "22: }",
      "24: include_once( 'ut_common.inc' );",
      "25: ut_run();",
      "26: ?>",
      "27: --EXPECTF--",
      "28: false",
      "29: 'locale_accept_from_http: locale string too long: U_ILLEGAL_ARGUMENT_ERROR'",
      "30: 'en'",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e9b4c26a5e43a4c97555b69b105c265240febd2",
      "candidate_info": {
        "commit_hash": "5e9b4c26a5e43a4c97555b69b105c265240febd2",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/5e9b4c26a5e43a4c97555b69b105c265240febd2",
        "files": [
          "ext/gd/gd.c",
          "ext/intl/locale/locale_methods.c",
          "ext/json/json.c",
          "ext/mbstring/mbstring.c",
          "ext/mcrypt/mcrypt.c",
          "ext/opcache/ZendAccelerator.c",
          "ext/pdo/pdo_stmt.c",
          "ext/session/mod_files.c",
          "ext/snmp/snmp.c",
          "ext/sockets/sockets.c",
          "ext/xml/xml.c"
        ],
        "message": "remove TSRMLS_*",
        "before_after_code_files": [
          "ext/gd/gd.c||ext/gd/gd.c",
          "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c",
          "ext/json/json.c||ext/json/json.c",
          "ext/mbstring/mbstring.c||ext/mbstring/mbstring.c",
          "ext/mcrypt/mcrypt.c||ext/mcrypt/mcrypt.c",
          "ext/opcache/ZendAccelerator.c||ext/opcache/ZendAccelerator.c",
          "ext/pdo/pdo_stmt.c||ext/pdo/pdo_stmt.c",
          "ext/session/mod_files.c||ext/session/mod_files.c",
          "ext/snmp/snmp.c||ext/snmp/snmp.c",
          "ext/sockets/sockets.c||ext/sockets/sockets.c",
          "ext/xml/xml.c||ext/xml/xml.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c"
          ],
          "candidate": [
            "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/gd/gd.c||ext/gd/gd.c": [
          "File: ext/gd/gd.c -> ext/gd/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036:   default:",
          "1037:    type = E_ERROR;",
          "1038:  }",
          "1040: }",
          "1042: #endif",
          "",
          "[Removed Lines]",
          "1039:  php_verror(NULL, \"\", type, format, args TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1039:  php_verror(NULL, \"\", type, format, args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3040:  }",
          "3042:  if ( input <= 0.0 || output <= 0.0 ) {",
          "3044:   RETURN_FALSE;",
          "3045:  }",
          "",
          "[Removed Lines]",
          "3043:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Gamma values should be positive\");",
          "",
          "[Added Lines]",
          "3043:   php_error_docref(NULL, E_WARNING, \"Gamma values should be positive\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4669:   case GD_CROP_THRESHOLD:",
          "4670:    if (color < 0 || (!gdImageTrueColor(im) && color >= gdImageColorsTotal(im))) {",
          "4672:     RETURN_FALSE;",
          "4673:    }",
          "4674:    im_crop = gdImageCropThreshold(im, color, (float) threshold);",
          "",
          "[Removed Lines]",
          "4671:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Color argument missing with threshold mode\");",
          "",
          "[Added Lines]",
          "4671:     php_error_docref(NULL, E_WARNING, \"Color argument missing with threshold mode\");",
          "",
          "---------------"
        ],
        "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c": [
          "File: ext/intl/locale/locale_methods.c -> ext/intl/locale/locale_methods.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1628:    len = end ? end-start : http_accept_len-(start-http_accept);",
          "1629:    if(len > ULOC_FULLNAME_CAPACITY) {",
          "1630:     intl_error_set( NULL, U_ILLEGAL_ARGUMENT_ERROR,",
          "1632:     RETURN_FALSE;",
          "1633:    }",
          "1634:    if(end) {",
          "",
          "[Removed Lines]",
          "1631:       \"locale_accept_from_http: locale string too long\", 0 TSRMLS_CC );",
          "",
          "[Added Lines]",
          "1631:       \"locale_accept_from_http: locale string too long\", 0 );",
          "",
          "---------------"
        ],
        "ext/json/json.c||ext/json/json.c": [
          "File: ext/json/json.c -> ext/json/json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:  }",
          "263:  if (depth <= 0) {",
          "265:   RETURN_NULL();",
          "266:  }",
          "268:  if (depth > INT_MAX) {",
          "270:   RETURN_NULL();",
          "271:  }",
          "",
          "[Removed Lines]",
          "264:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Depth must be greater than zero\");",
          "269:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Depth must be lower than %d\", INT_MAX);",
          "",
          "[Added Lines]",
          "264:   php_error_docref(NULL, E_WARNING, \"Depth must be greater than zero\");",
          "269:   php_error_docref(NULL, E_WARNING, \"Depth must be lower than %d\", INT_MAX);",
          "",
          "---------------"
        ],
        "ext/mbstring/mbstring.c||ext/mbstring/mbstring.c": [
          "File: ext/mbstring/mbstring.c -> ext/mbstring/mbstring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3825:    if (elist != NULL) {",
          "3826:     efree((void *)elist);",
          "3827:    }",
          "3829:    RETURN_FALSE;",
          "3830:   }",
          "3831:   efree(stack);",
          "",
          "[Removed Lines]",
          "3828:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Cannot handle recursive references\");",
          "",
          "[Added Lines]",
          "3828:    php_error_docref(NULL, E_WARNING, \"Cannot handle recursive references\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3942:     }",
          "3943:    }",
          "3944:    efree(stack);",
          "3946:    RETURN_FALSE;",
          "3947:   }",
          "3948:   efree(stack);",
          "",
          "[Removed Lines]",
          "3945:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Cannot handle recursive references\");",
          "",
          "[Added Lines]",
          "3945:    php_error_docref(NULL, E_WARNING, \"Cannot handle recursive references\");",
          "",
          "---------------"
        ],
        "ext/mcrypt/mcrypt.c||ext/mcrypt/mcrypt.c": [
          "File: ext/mcrypt/mcrypt.c -> ext/mcrypt/mcrypt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "642:   block_size = mcrypt_enc_get_block_size(pm->td);",
          "643:   data_size = ((((int)data_len - 1) / block_size) + 1) * block_size;",
          "644:   if (data_size <= 0) {",
          "646:    RETURN_FALSE;",
          "647:   }",
          "648:   data_str = zend_string_alloc(data_size, 0);",
          "",
          "[Removed Lines]",
          "645:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Integer overflow in data size\");",
          "",
          "[Added Lines]",
          "645:    php_error_docref(NULL, E_WARNING, \"Integer overflow in data size\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:   block_size = mcrypt_enc_get_block_size(pm->td);",
          "697:   data_size = ((((int)data_len - 1) / block_size) + 1) * block_size;",
          "698:   if (data_size <= 0) {",
          "700:    RETURN_FALSE;",
          "701:   }",
          "702:   data_s = emalloc((size_t)data_size + 1);",
          "",
          "[Removed Lines]",
          "699:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Integer overflow in data size\");",
          "",
          "[Added Lines]",
          "699:    php_error_docref(NULL, E_WARNING, \"Integer overflow in data size\");",
          "",
          "---------------"
        ],
        "ext/opcache/ZendAccelerator.c||ext/opcache/ZendAccelerator.c": [
          "File: ext/opcache/ZendAccelerator.c -> ext/opcache/ZendAccelerator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1769:      file_handle->type == ZEND_HANDLE_FILENAME &&",
          "1770:      UNEXPECTED(access(ZSTR_VAL(persistent_script->full_path), R_OK) != 0)) {",
          "1771:   if (type == ZEND_REQUIRE) {",
          "1773:    zend_bailout();",
          "1774:   } else {",
          "1776:   }",
          "1777:   return NULL;",
          "1778:  }",
          "",
          "[Removed Lines]",
          "1772:    zend_message_dispatcher(ZMSG_FAILED_REQUIRE_FOPEN, file_handle->filename TSRMLS_CC);",
          "1775:    zend_message_dispatcher(ZMSG_FAILED_INCLUDE_FOPEN, file_handle->filename TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1772:    zend_message_dispatcher(ZMSG_FAILED_REQUIRE_FOPEN, file_handle->filename);",
          "1775:    zend_message_dispatcher(ZMSG_FAILED_INCLUDE_FOPEN, file_handle->filename);",
          "",
          "---------------"
        ],
        "ext/pdo/pdo_stmt.c||ext/pdo/pdo_stmt.c": [
          "File: ext/pdo/pdo_stmt.c -> ext/pdo/pdo_stmt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2568:      int res;",
          "2569:      zval val;",
          "2572:      res = check_empty ? i_zend_is_true(&val) : Z_TYPE(val) != IS_NULL;",
          "2573:      zval_dtor(&val);",
          "",
          "[Removed Lines]",
          "2571:      fetch_value(stmt, &val, colno, NULL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2571:      fetch_value(stmt, &val, colno, NULL);",
          "",
          "---------------"
        ],
        "ext/session/mod_files.c||ext/session/mod_files.c": [
          "File: ext/session/mod_files.c -> ext/session/mod_files.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   }",
          "177:   if (!ps_files_path_create(buf, sizeof(buf), data, key)) {",
          "179:    return;",
          "180:   }",
          "",
          "[Removed Lines]",
          "178:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Failed to create session data file path. Too short session ID, invalid save_path or path lentgth exceeds MAXPATHLEN(%d)\", MAXPATHLEN);",
          "",
          "[Added Lines]",
          "178:    php_error_docref(NULL, E_WARNING, \"Failed to create session data file path. Too short session ID, invalid save_path or path lentgth exceeds MAXPATHLEN(%d)\", MAXPATHLEN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:    if (fstat(data->fd, &sbuf) || (sbuf.st_uid != 0 && sbuf.st_uid != getuid() && sbuf.st_uid != geteuid())) {",
          "201:     close(data->fd);",
          "202:     data->fd = -1;",
          "204:     return;",
          "205:    }",
          "206: #endif",
          "",
          "[Removed Lines]",
          "203:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Session data file is not created by your uid\");",
          "",
          "[Added Lines]",
          "203:     php_error_docref(NULL, E_WARNING, \"Session data file is not created by your uid\");",
          "",
          "---------------"
        ],
        "ext/snmp/snmp.c||ext/snmp/snmp.c": [
          "File: ext/snmp/snmp.c -> ext/snmp/snmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2071: }",
          "2075: {",
          "2079: }",
          "",
          "[Removed Lines]",
          "2078:  return zend_std_get_properties(object TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2078:  return zend_std_get_properties(object);",
          "",
          "---------------"
        ],
        "ext/sockets/sockets.c||ext/sockets/sockets.c": [
          "File: ext/sockets/sockets.c -> ext/sockets/sockets.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2370:  char *protocol = NULL;",
          "2371:  size_t protocollen = 0;",
          "2374:   return;",
          "2375:  }",
          "2376:  if ((socket = (php_socket *) zend_fetch_resource(Z_RES_P(zsocket), le_socket_name, le_socket)) == NULL) {",
          "",
          "[Removed Lines]",
          "2373:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r\", &zsocket) == FAILURE) {",
          "",
          "[Added Lines]",
          "2373:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &zsocket) == FAILURE) {",
          "",
          "---------------"
        ],
        "ext/xml/xml.c||ext/xml/xml.c": [
          "File: ext/xml/xml.c -> ext/xml/xml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1610:    convert_to_long_ex(val);",
          "1611:    parser->toffset = Z_LVAL_P(val);",
          "1612:    if (parser->toffset < 0) {",
          "1614:     parser->toffset = 0;",
          "1615:    }",
          "1616:    break;",
          "",
          "[Removed Lines]",
          "1613:     php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"tagstart ignored, because it is out of range\");",
          "",
          "[Added Lines]",
          "1613:     php_error_docref(NULL, E_NOTICE, \"tagstart ignored, because it is out of range\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "676f082836b9afff7830a877816e55e22bdcd2d5",
      "candidate_info": {
        "commit_hash": "676f082836b9afff7830a877816e55e22bdcd2d5",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/676f082836b9afff7830a877816e55e22bdcd2d5",
        "files": [
          "ext/exif/exif.c",
          "ext/exif/tests/bug54002.phpt",
          "ext/exif/tests/bug62523_2.phpt",
          "ext/exif/tests/bug72603.jpeg",
          "ext/exif/tests/bug72603.phpt",
          "ext/exif/tests/bug72618.jpg",
          "ext/exif/tests/bug72618.phpt",
          "ext/gd/libgd/gd.c",
          "ext/gd/libgd/gd_interpolation.c",
          "ext/gd/tests/bug72512_0.phpt",
          "ext/gd/tests/bug72512_1.phpt",
          "ext/intl/locale/locale_methods.c",
          "ext/intl/tests/bug72533.phpt",
          "ext/session/session.c",
          "ext/session/tests/bug72562.phpt",
          "ext/snmp/snmp.c",
          "ext/snmp/tests/bug72479.phpt",
          "ext/standard/basic_functions.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/xmlrpc/libxmlrpc/simplestring.h",
          "ext/zip/zip_stream.c",
          "main/SAPI.c",
          "main/php_variables.c"
        ],
        "message": "Merge branch 'PHP-5.6' into PHP-7.0\n\n* PHP-5.6:\n  fix #72519, possible OOB using imagegif\n  fix #72512, invalid read or write for palette image when invalid transparent index is used\n  Apparently some envs miss SIZE_MAX\n  Fix tests\n  Fix bug #72618: NULL Pointer Dereference in exif_process_user_comment\n  Partial fix for bug #72613 - do not treat negative returns from bz2 as size_t\n  Fix bug #72606: heap-buffer-overflow (write) simplestring_addn simplestring.c\n  Fix for bug #72558, Integer overflow error within _gdContributionsAlloc()\n  Fix bug #72603: Out of bound read in exif_process_IFD_in_MAKERNOTE\n  Fix bug #72562 - destroy var_hash properly\n  Fix bug #72533 (locale_accept_from_http out-of-bounds access)\n  Fix fir bug #72520\n  Fix for bug #72513\n  Fix for bug #72513\n  CS fix and comments with bug ID\n  Fix for HTTP_PROXY issue.\n  5.6.24RC1\n  add tests for bug #72512\n  Fixed bug #72512 gdImageTrueColorToPaletteBody allows arbitrary write/read access\n  Fixed bug #72479 - same as #72434\n\nConflicts:\n\tZend/zend_virtual_cwd.c\n\text/bz2/bz2.c\n\text/exif/exif.c\n\text/session/session.c\n\text/snmp/snmp.c\n\text/standard/basic_functions.c\n\tmain/SAPI.c\n\tmain/php_variables.c\n\n(cherry picked from commit b00f8f2a5bae651d6375ca34c676963f1f25ee5a)",
        "before_after_code_files": [
          "ext/exif/exif.c||ext/exif/exif.c",
          "ext/exif/tests/bug54002.phpt||ext/exif/tests/bug54002.phpt",
          "ext/exif/tests/bug62523_2.phpt||ext/exif/tests/bug62523_2.phpt",
          "ext/exif/tests/bug72603.phpt||ext/exif/tests/bug72603.phpt",
          "ext/exif/tests/bug72618.phpt||ext/exif/tests/bug72618.phpt",
          "ext/gd/libgd/gd.c||ext/gd/libgd/gd.c",
          "ext/gd/libgd/gd_interpolation.c||ext/gd/libgd/gd_interpolation.c",
          "ext/gd/tests/bug72512_0.phpt||ext/gd/tests/bug72512_0.phpt",
          "ext/gd/tests/bug72512_1.phpt||ext/gd/tests/bug72512_1.phpt",
          "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c",
          "ext/intl/tests/bug72533.phpt||ext/intl/tests/bug72533.phpt",
          "ext/session/session.c||ext/session/session.c",
          "ext/session/tests/bug72562.phpt||ext/session/tests/bug72562.phpt",
          "ext/snmp/snmp.c||ext/snmp/snmp.c",
          "ext/snmp/tests/bug72479.phpt||ext/snmp/tests/bug72479.phpt",
          "ext/standard/basic_functions.c||ext/standard/basic_functions.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h",
          "ext/zip/zip_stream.c||ext/zip/zip_stream.c",
          "main/SAPI.c||main/SAPI.c",
          "main/php_variables.c||main/php_variables.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c",
            "ext/intl/tests/bug72533.phpt||ext/intl/tests/bug72533.phpt"
          ],
          "candidate": [
            "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c",
            "ext/intl/tests/bug72533.phpt||ext/intl/tests/bug72533.phpt"
          ]
        }
      },
      "candidate_diff": {
        "ext/exif/exif.c||ext/exif/exif.c": [
          "File: ext/exif/exif.c -> ext/exif/exif.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2606:  if (ByteCount>=8) {",
          "2607:   if (!memcmp(szValuePtr, \"UNICODE\\0\", 8)) {",
          "2609:    szValuePtr = szValuePtr+8;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2607:   const zend_encoding *from, *to;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2624:    } else {",
          "2625:     decode = ImageInfo->decode_unicode_le;",
          "2626:    }",
          "2629:      (unsigned char**)pszInfoPtr,",
          "2630:      &len,",
          "2631:      (unsigned char*)szValuePtr,",
          "2632:      ByteCount,",
          "2636:     len = exif_process_string_raw(pszInfoPtr, szValuePtr, ByteCount);",
          "2637:    }",
          "2638:    return len;",
          "",
          "[Removed Lines]",
          "2628:    if (zend_multibyte_encoding_converter(",
          "2633:      zend_multibyte_fetch_encoding(ImageInfo->encode_unicode),",
          "2634:      zend_multibyte_fetch_encoding(decode)",
          "2635:      ) == (size_t)-1) {",
          "",
          "[Added Lines]",
          "2628:    to = zend_multibyte_fetch_encoding(ImageInfo->encode_unicode);",
          "2629:    from = zend_multibyte_fetch_encoding(decode);",
          "2631:    if (!to || !from || zend_multibyte_encoding_converter(",
          "2636:      to,",
          "2637:      from) == (size_t)-1) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2646:    szValuePtr = szValuePtr+8;",
          "2647:    ByteCount -= 8;",
          "2650:      (unsigned char**)pszInfoPtr,",
          "2651:      &len,",
          "2652:      (unsigned char*)szValuePtr,",
          "2653:      ByteCount,",
          "2657:     len = exif_process_string_raw(pszInfoPtr, szValuePtr, ByteCount);",
          "2658:    }",
          "2659:    return len;",
          "",
          "[Removed Lines]",
          "2649:    if (zend_multibyte_encoding_converter(",
          "2654:      zend_multibyte_fetch_encoding(ImageInfo->encode_jis),",
          "2655:      zend_multibyte_fetch_encoding(ImageInfo->motorola_intel ? ImageInfo->decode_jis_be : ImageInfo->decode_jis_le)",
          "2656:      ) == (size_t)-1) {",
          "",
          "[Added Lines]",
          "2651:    to = zend_multibyte_fetch_encoding(ImageInfo->encode_jis);",
          "2652:    from = zend_multibyte_fetch_encoding(ImageInfo->motorola_intel ? ImageInfo->decode_jis_be : ImageInfo->decode_jis_le);",
          "2653:    if (!to || !from || zend_multibyte_encoding_converter(",
          "2658:      to,",
          "2659:      from) == (size_t)-1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2723:   break;",
          "2724:  }",
          "2726:  dir_start = value_ptr + maker_note->offset;",
          "2728: #ifdef EXIF_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2729:  if (maker_note->offset >= value_len) {",
          "2731:   exif_error_docref(\"exif_read_data#error_ifd\" EXIFERR_CC, ImageInfo, E_WARNING, \"IFD data too short: 0x%04X offset 0x%04X\", value_len, maker_note->offset);",
          "2732:   return FALSE;",
          "2733:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2751:    offset_base = value_ptr;",
          "2752:    break;",
          "2753:   case MN_OFFSET_GUESS:",
          "2754:    offset_diff = 2 + NumDirEntries*12 + 4 - php_ifd_get32u(dir_start+10, ImageInfo->motorola_intel);",
          "2755: #ifdef EXIF_DEBUG",
          "2756:    exif_error_docref(NULL EXIFERR_CC, ImageInfo, E_NOTICE, \"Using automatic offset correction: 0x%04X\", ((int)dir_start-(int)offset_base+maker_note->offset+displacement) + offset_diff);",
          "2757: #endif",
          "2758:    offset_base = value_ptr + offset_diff;",
          "2759:    break;",
          "2760:   default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2763:    if (maker_note->offset + 10 + 4 >= value_len) {",
          "2765:     exif_error_docref(\"exif_read_data#error_ifd\" EXIFERR_CC, ImageInfo, E_WARNING, \"IFD data too short: 0x%04X\", value_len);",
          "2766:     return FALSE;",
          "2767:    }",
          "2772:    if (offset_diff < 0 || offset_diff >= value_len ) {",
          "2773:     exif_error_docref(\"exif_read_data#error_ifd\" EXIFERR_CC, ImageInfo, E_WARNING, \"IFD data bad offset: 0x%04X length 0x%04X\", offset_diff, value_len);",
          "2774:     return FALSE;",
          "2775:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2763:  }",
          "2765:  if ((2+NumDirEntries*12) > value_len) {",
          "2767:   return FALSE;",
          "2768:  }",
          "",
          "[Removed Lines]",
          "2766:   exif_error_docref(\"exif_read_data#error_ifd\" EXIFERR_CC, ImageInfo, E_WARNING, \"Illegal IFD size: 2 + x%04X*12 = x%04X > x%04X\", NumDirEntries, 2+NumDirEntries*12, value_len);",
          "",
          "[Added Lines]",
          "2784:   exif_error_docref(\"exif_read_data#error_ifd\" EXIFERR_CC, ImageInfo, E_WARNING, \"Illegal IFD size: 2 + 0x%04X*12 = 0x%04X > 0x%04X\", NumDirEntries, 2+NumDirEntries*12, value_len);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3049:     break;",
          "3051:    case TAG_MAKER_NOTE:",
          "3053:     break;",
          "3055:    case TAG_EXIF_IFD_POINTER:",
          "",
          "[Removed Lines]",
          "3052:     exif_process_IFD_in_MAKERNOTE(ImageInfo, value_ptr, byte_count, offset_base, IFDlength, displacement);",
          "",
          "[Added Lines]",
          "3070:     if (!exif_process_IFD_in_MAKERNOTE(ImageInfo, value_ptr, byte_count, offset_base, IFDlength, displacement)) {",
          "3071:      EFREE_IF(outside);",
          "3072:      return FALSE;",
          "3073:     }",
          "",
          "---------------"
        ],
        "ext/exif/tests/bug54002.phpt||ext/exif/tests/bug54002.phpt": [
          "File: ext/exif/tests/bug54002.phpt -> ext/exif/tests/bug54002.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: --EXPECTF--",
          "14: Warning: exif_read_data(bug54002_1.jpeg): Process tag(x0205=UndefinedTa): Illegal byte_count in %sbug54002.php on line %d",
          "",
          "[Removed Lines]",
          "16: Warning: exif_read_data(bug54002_1.jpeg): Process tag(xA000=FlashPixVer): Illegal pointer offset(%s) in %sbug54002.php on line %d",
          "18: Warning: exif_read_data(bug54002_2.jpeg): Process tag(x0205=UndefinedTa): Illegal byte_count in %sbug54002.php on line %d",
          "20: Warning: exif_read_data(bug54002_2.jpeg): Process tag(xA000=FlashPixVer): Illegal pointer offset(%s) in %sbug54002.php on line %d",
          "",
          "[Added Lines]",
          "16: Warning: exif_read_data(bug54002_2.jpeg): Process tag(x0205=UndefinedTa): Illegal byte_count in %sbug54002.php on line %d",
          "",
          "---------------"
        ],
        "ext/exif/tests/bug62523_2.phpt||ext/exif/tests/bug62523_2.phpt": [
          "File: ext/exif/tests/bug62523_2.phpt -> ext/exif/tests/bug62523_2.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: var_dump(count(exif_read_data(__DIR__.\"/bug62523_2.jpg\")));",
          "11: ?>",
          "12: Done",
          "14: Test",
          "16: Done",
          "",
          "[Removed Lines]",
          "13: --EXPECT--",
          "15: int(76)",
          "",
          "[Added Lines]",
          "13: --EXPECTF--",
          "16: Warning: exif_read_data(bug62523_2.jpg): IFD data bad offset: 0xADB23672 length 0x0D94 in %s/bug62523_2.php on line %d",
          "17: int(30)",
          "",
          "---------------"
        ],
        "ext/exif/tests/bug72603.phpt||ext/exif/tests/bug72603.phpt": [
          "File: ext/exif/tests/bug72603.phpt -> ext/exif/tests/bug72603.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72603 (Out of bound read in exif_process_IFD_in_MAKERNOTE)",
          "3: --SKIPIF--",
          "4: <?php if (!extension_loaded('exif')) print 'skip exif extension not available';?>",
          "5: --FILE--",
          "6: <?php",
          "7: var_dump(count(exif_read_data(dirname(__FILE__) . \"/bug72603.jpeg\")));",
          "8: ?>",
          "9: --EXPECTF--",
          "10: Warning: exif_read_data(bug72603.jpeg): IFD data bad offset: 0x058C length 0x001C in %s/bug72603.php on line %d",
          "11: int(13)",
          "",
          "---------------"
        ],
        "ext/exif/tests/bug72618.phpt||ext/exif/tests/bug72618.phpt": [
          "File: ext/exif/tests/bug72618.phpt -> ext/exif/tests/bug72618.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug 72618 (NULL Pointer Dereference in exif_process_user_comment)",
          "3: --SKIPIF--",
          "4: <?php if (!extension_loaded('exif')) print 'skip exif extension not available';?>",
          "5: --FILE--",
          "6: <?php",
          "7: var_dump(count(exif_read_data(dirname(__FILE__) . \"/bug72618.jpg\")));",
          "8: ?>",
          "9: --EXPECTF--",
          "10: Warning: exif_read_data(bug72618.jpg): IFD data bad offset: 0x058E length 0x0030 in %s/bug72618.php on line %d",
          "11: int(13)",
          "",
          "---------------"
        ],
        "ext/gd/libgd/gd.c||ext/gd/libgd/gd.c": [
          "File: ext/gd/libgd/gd.c -> ext/gd/libgd/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:   return NULL;",
          "189:  }",
          "192:   return NULL;",
          "193:  }",
          "",
          "[Removed Lines]",
          "191:  if (overflow2(sizeof(int), sx)) {",
          "",
          "[Added Lines]",
          "191:  if (overflow2(sizeof(int *), sx)) {",
          "",
          "---------------"
        ],
        "ext/gd/libgd/gd_interpolation.c||ext/gd/libgd/gd_interpolation.c": [
          "File: ext/gd/libgd/gd_interpolation.c -> ext/gd/libgd/gd_interpolation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "879: static inline LineContribType * _gdContributionsAlloc(unsigned int line_length, unsigned int windows_size)",
          "880: {",
          "881:  unsigned int u = 0;",
          "884:  res = (LineContribType *) gdMalloc(sizeof(LineContribType));",
          "885:  if (!res) {",
          "886:   return NULL;",
          "887:  }",
          "896: }",
          "898: static inline void _gdContributionsFree(LineContribType * p)",
          "",
          "[Removed Lines]",
          "882:     LineContribType *res;",
          "888:     res->WindowSize = windows_size;",
          "889:     res->LineLength = line_length;",
          "890:     res->ContribRow = (ContributionType *) gdMalloc(line_length * sizeof(ContributionType));",
          "892:     for (u = 0 ; u < line_length ; u++) {",
          "893:         res->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));",
          "894:     }",
          "895:     return res;",
          "",
          "[Added Lines]",
          "882:  LineContribType *res;",
          "883:  int overflow_error = 0;",
          "889:  res->WindowSize = windows_size;",
          "890:  res->LineLength = line_length;",
          "891:  if (overflow2(line_length, sizeof(ContributionType))) {",
          "892:   return NULL;",
          "893:  }",
          "894:  res->ContribRow = (ContributionType *) gdMalloc(line_length * sizeof(ContributionType));",
          "895:  if (res->ContribRow == NULL) {",
          "896:   gdFree(res);",
          "897:   return NULL;",
          "898:  }",
          "899:  for (u = 0 ; u < line_length ; u++) {",
          "900:   if (overflow2(windows_size, sizeof(double))) {",
          "901:    overflow_error = 1;",
          "902:   } else {",
          "903:    res->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));",
          "904:   }",
          "905:   if (overflow_error == 1 || res->ContribRow[u].Weights == NULL) {",
          "906:    u--;",
          "907:    while (u >= 0) {",
          "908:     gdFree(res->ContribRow[u].Weights);",
          "909:     u--;",
          "910:    }",
          "911:    return NULL;",
          "912:   }",
          "913:  }",
          "914:  return res;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "908: static inline LineContribType *_gdContributionsCalc(unsigned int line_size, unsigned int src_size, double scale_d,  const interpolation_method pFilter)",
          "909: {",
          "913:  int windows_size;",
          "914:  unsigned int u;",
          "915:  LineContribType *res;",
          "933:   int iSrc;",
          "951:   if (dTotalWeight < 0.0) {",
          "952:    _gdContributionsFree(res);",
          "953:    return NULL;",
          "954:   }",
          "963: }",
          "965: static inline void _gdScaleRow(gdImagePtr pSrc,  unsigned int src_width, gdImagePtr dst, unsigned int dst_width, unsigned int row, LineContribType *contrib)",
          "",
          "[Removed Lines]",
          "910:     double width_d;",
          "911:     double scale_f_d = 1.0;",
          "912:     const double filter_width_d = DEFAULT_BOX_RADIUS;",
          "917:     if (scale_d < 1.0) {",
          "918:         width_d = filter_width_d / scale_d;",
          "919:         scale_f_d = scale_d;",
          "920:     }  else {",
          "921:         width_d= filter_width_d;",
          "922:     }",
          "924:     windows_size = 2 * (int)ceil(width_d) + 1;",
          "925:     res = _gdContributionsAlloc(line_size, windows_size);",
          "927:     for (u = 0; u < line_size; u++) {",
          "928:         const double dCenter = (double)u / scale_d;",
          "930:         register int iLeft = MAX(0, (int)floor (dCenter - width_d));",
          "931:         int iRight = MIN((int)ceil(dCenter + width_d), (int)src_size - 1);",
          "932:         double dTotalWeight = 0.0;",
          "936:         if (iRight - iLeft + 1 > windows_size)  {",
          "937:             if (iLeft < ((int)src_size - 1 / 2))  {",
          "938:                 iLeft++;",
          "939:             } else {",
          "940:                 iRight--;",
          "941:             }",
          "942:         }",
          "944:         res->ContribRow[u].Left = iLeft;",
          "945:         res->ContribRow[u].Right = iRight;",
          "947:         for (iSrc = iLeft; iSrc <= iRight; iSrc++) {",
          "948:             dTotalWeight += (res->ContribRow[u].Weights[iSrc-iLeft] =  scale_f_d * (*pFilter)(scale_f_d * (dCenter - (double)iSrc)));",
          "949:         }",
          "956:         if (dTotalWeight > 0.0) {",
          "957:             for (iSrc = iLeft; iSrc <= iRight; iSrc++) {",
          "958:                 res->ContribRow[u].Weights[iSrc-iLeft] /= dTotalWeight;",
          "959:             }",
          "960:         }",
          "961:    }",
          "962:    return res;",
          "",
          "[Added Lines]",
          "929:  double width_d;",
          "930:  double scale_f_d = 1.0;",
          "931:  const double filter_width_d = DEFAULT_BOX_RADIUS;",
          "935:  int overflow_error = 0;",
          "937:  if (scale_d < 1.0) {",
          "938:   width_d = filter_width_d / scale_d;",
          "939:   scale_f_d = scale_d;",
          "940:  }  else {",
          "941:   width_d= filter_width_d;",
          "942:  }",
          "944:  windows_size = 2 * (int)ceil(width_d) + 1;",
          "945:  res = _gdContributionsAlloc(line_size, windows_size);",
          "946:  if (res == NULL) {",
          "947:   return NULL;",
          "948:  }",
          "949:  for (u = 0; u < line_size; u++) {",
          "950:  const double dCenter = (double)u / scale_d;",
          "952:  register int iLeft = MAX(0, (int)floor (dCenter - width_d));",
          "953:  int iRight = MIN((int)ceil(dCenter + width_d), (int)src_size - 1);",
          "954:  double dTotalWeight = 0.0;",
          "958:  if (iRight - iLeft + 1 > windows_size)  {",
          "959:   if (iLeft < ((int)src_size - 1 / 2))  {",
          "960:    iLeft++;",
          "961:   } else {",
          "962:    iRight--;",
          "963:   }",
          "964:  }",
          "966:  res->ContribRow[u].Left = iLeft;",
          "967:  res->ContribRow[u].Right = iRight;",
          "969:  for (iSrc = iLeft; iSrc <= iRight; iSrc++) {",
          "970:   dTotalWeight += (res->ContribRow[u].Weights[iSrc-iLeft] =  scale_f_d * (*pFilter)(scale_f_d * (dCenter - (double)iSrc)));",
          "971:  }",
          "978:  if (dTotalWeight > 0.0) {",
          "979:   for (iSrc = iLeft; iSrc <= iRight; iSrc++) {",
          "980:    res->ContribRow[u].Weights[iSrc-iLeft] /= dTotalWeight;",
          "981:   }",
          "982:  }",
          "983:  }",
          "984:  return res;",
          "",
          "---------------"
        ],
        "ext/gd/tests/bug72512_0.phpt||ext/gd/tests/bug72512_0.phpt": [
          "File: ext/gd/tests/bug72512_0.phpt -> ext/gd/tests/bug72512_0.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72512 gdImageTrueColorToPaletteBody allows arbitrary write/read access, var 0",
          "3: --SKIPIF--",
          "4: <?php",
          "5:  if (!extension_loaded('gd')) die(\"skip gd extension not available\\n\");",
          "6: ?>",
          "7: --FILE--",
          "8: <?php",
          "10: $img = imagecreatetruecolor(13, 1007);",
          "12: imagecolortransparent($img, -10066304);",
          "13: imagetruecolortopalette($img, TRUE, 3);",
          "14: imagescale($img, 1, 65535);",
          "15: ?>",
          "16: ==DONE==",
          "17: --EXPECT--",
          "18: ==DONE==",
          "",
          "---------------"
        ],
        "ext/gd/tests/bug72512_1.phpt||ext/gd/tests/bug72512_1.phpt": [
          "File: ext/gd/tests/bug72512_1.phpt -> ext/gd/tests/bug72512_1.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72512 gdImageTrueColorToPaletteBody allows arbitrary write/read access, var 1",
          "3: --SKIPIF--",
          "4: <?php",
          "5:  if (!extension_loaded('gd')) die(\"skip gd extension not available\\n\");",
          "6: ?>",
          "7: --FILE--",
          "8: <?php",
          "10: $img = imagecreatetruecolor(100, 100);",
          "11: imagecolortransparent($img, -1000000);",
          "12: imagetruecolortopalette($img, TRUE, 3);",
          "13: imagecolortransparent($img, 9);",
          "15: ?>",
          "16: ==DONE==",
          "17: --EXPECT--",
          "18: ==DONE==",
          "",
          "---------------"
        ],
        "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c": [
          "File: ext/intl/locale/locale_methods.c -> ext/intl/locale/locale_methods.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1598:   \"locale_accept_from_http: unable to parse input parameters\", 0 );",
          "1599:   RETURN_FALSE;",
          "1600:  }",
          "1602:  available = ures_openAvailableLocales(NULL, &status);",
          "1603:  INTL_CHECK_STATUS(status, \"locale_accept_from_http: failed to retrieve locale list\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1601:  if(http_accept_len > ULOC_FULLNAME_CAPACITY) {",
          "1603:   char *start = http_accept;",
          "1604:   char *end;",
          "1605:   size_t len;",
          "1606:   do {",
          "1607:    end = strchr(start, ',');",
          "1608:    len = end ? end-start : http_accept_len-(start-http_accept);",
          "1609:    if(len > ULOC_FULLNAME_CAPACITY) {",
          "1610:     intl_error_set( NULL, U_ILLEGAL_ARGUMENT_ERROR,",
          "1611:       \"locale_accept_from_http: locale string too long\", 0 TSRMLS_CC );",
          "1612:     RETURN_FALSE;",
          "1613:    }",
          "1614:    if(end) {",
          "1615:     start = end+1;",
          "1616:    }",
          "1617:   } while(end != NULL);",
          "1618:  }",
          "",
          "---------------"
        ],
        "ext/intl/tests/bug72533.phpt||ext/intl/tests/bug72533.phpt": [
          "File: ext/intl/tests/bug72533.phpt -> ext/intl/tests/bug72533.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72533 (locale_accept_from_http out-of-bounds access)",
          "3: --SKIPIF--",
          "4: <?php if( !extension_loaded( 'intl' ) ) print 'skip'; ?>",
          "5: --FILE--",
          "6: <?php",
          "8: function ut_main()",
          "9: {",
          "10:     $ret = var_export(ut_loc_accept_http(str_repeat('x', 256)), true);",
          "11:     $ret .= \"\\n\";",
          "12:  if(intl_is_failure(intl_get_error_code())) {",
          "13:   $ret .= var_export(intl_get_error_message(), true);",
          "14:  }",
          "15:     $ret .= \"\\n\";",
          "16:     $ret .= var_export(ut_loc_accept_http(str_repeat('en,', 256)), true);",
          "17:     $ret .= \"\\n\";",
          "18:  if(intl_is_failure(intl_get_error_code())) {",
          "19:   $ret .= var_export(intl_get_error_message(), true);",
          "20:  }",
          "21:     return $ret;",
          "22: }",
          "24: include_once( 'ut_common.inc' );",
          "25: ut_run();",
          "26: ?>",
          "27: --EXPECTF--",
          "28: false",
          "29: 'locale_accept_from_http: locale string too long: U_ILLEGAL_ARGUMENT_ERROR'",
          "30: 'en'",
          "",
          "---------------"
        ],
        "ext/session/session.c||ext/session/session.c": [
          "File: ext/session/session.c -> ext/session/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "971:   namelen = ((unsigned char)(*p)) & (~PS_BIN_UNDEF);",
          "973:   if (namelen < 0 || namelen > PS_BIN_MAX || (p + namelen) >= endptr) {",
          "974:    return FAILURE;",
          "975:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "974:    PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "",
          "---------------"
        ],
        "ext/session/tests/bug72562.phpt||ext/session/tests/bug72562.phpt": [
          "File: ext/session/tests/bug72562.phpt -> ext/session/tests/bug72562.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72562: Use After Free in unserialize() with Unexpected Session Deserialization",
          "3: --SKIPIF--",
          "4: <?php include('skipif.inc'); ?>",
          "5: --FILE--",
          "6: <?php",
          "8: ini_set('session.serialize_handler', 'php_binary');",
          "9: session_start();",
          "10: $sess = \"\\x1xi:1;\\x2y\";",
          "11: session_decode($sess);",
          "12: $uns_1 = '{';",
          "13: $out_1[] = unserialize($uns_1);",
          "14: unset($out_1);",
          "15: $fakezval = ptr2str(1122334455);",
          "16: $fakezval .= ptr2str(0);",
          "17: $fakezval .= \"\\x00\\x00\\x00\\x00\";",
          "18: $fakezval .= \"\\x01\";",
          "19: $fakezval .= \"\\x00\";",
          "20: $fakezval .= \"\\x00\\x00\";",
          "21: for ($i = 0; $i < 5; $i++) {",
          "22:   $v[$i] = $fakezval.$i;",
          "23: }",
          "24: $uns_2 = 'R:2;';",
          "25: $out_2 = unserialize($uns_2);",
          "26: var_dump($out_2);",
          "28: function ptr2str($ptr)",
          "29: {",
          "30:  $out = '';",
          "31:  for ($i = 0; $i < 8; $i++) {",
          "32:   $out .= chr($ptr & 0xff);",
          "33:   $ptr >>= 8;",
          "34:  }",
          "35:  return $out;",
          "36: }",
          "37: ?>",
          "38: --EXPECTF--",
          "39: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/bug72562.php on line %d",
          "41: Notice: unserialize(): Error at offset 0 of 1 bytes in %s/bug72562.php on line %d",
          "43: Notice: unserialize(): Error at offset 4 of 4 bytes in %s/bug72562.php on line %d",
          "44: bool(false)",
          "",
          "---------------"
        ],
        "ext/snmp/snmp.c||ext/snmp/snmp.c": [
          "File: ext/snmp/snmp.c -> ext/snmp/snmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2071: }",
          "2076: static HashTable *php_snmp_get_properties(zval *object)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2075: {",
          "2078:  return zend_std_get_properties(object TSRMLS_CC);",
          "2079: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2361:  php_snmp_object_handlers.write_property = php_snmp_write_property;",
          "2362:  php_snmp_object_handlers.has_property = php_snmp_has_property;",
          "2363:  php_snmp_object_handlers.get_properties = php_snmp_get_properties;",
          "2366:  INIT_CLASS_ENTRY(ce, \"SNMP\", php_snmp_class_methods);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2372:  php_snmp_object_handlers.get_gc = php_snmp_get_gc;",
          "",
          "---------------"
        ],
        "ext/snmp/tests/bug72479.phpt||ext/snmp/tests/bug72479.phpt": [
          "File: ext/snmp/tests/bug72479.phpt -> ext/snmp/tests/bug72479.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72479: Use After Free Vulnerability in SNMP with GC and unserialize()",
          "3: --SKIPIF--",
          "4: <?php",
          "5: require_once(dirname(__FILE__).'/skipif.inc');",
          "6: ?>",
          "7: --FILE--",
          "8: <?php",
          "9: $arr = [1, [1, 2, 3, 4, 5], 3, 4, 5];",
          "10: $poc = 'a:3:{i:1;N;i:2;O:4:\"snmp\":1:{s:11:\"quick_print\";'.serialize($arr).'}i:1;R:7;}';",
          "11: $out = unserialize($poc);",
          "12: gc_collect_cycles();",
          "13: $fakezval = ptr2str(1122334455);",
          "14: $fakezval .= ptr2str(0);",
          "15: $fakezval .= \"\\x00\\x00\\x00\\x00\";",
          "16: $fakezval .= \"\\x01\";",
          "17: $fakezval .= \"\\x00\";",
          "18: $fakezval .= \"\\x00\\x00\";",
          "19: for ($i = 0; $i < 5; $i++) {",
          "20:     $v[$i] = $fakezval.$i;",
          "21: }",
          "22: var_dump($out[1]);",
          "24: function ptr2str($ptr)",
          "25: {",
          "26:     $out = '';",
          "27:     for ($i = 0; $i < 8; $i++) {",
          "28:         $out .= chr($ptr & 0xff);",
          "29:         $ptr >>= 8;",
          "30:     }",
          "31:     return $out;",
          "32: }",
          "33: ?>",
          "34: --EXPECT--",
          "35: int(1)",
          "",
          "---------------"
        ],
        "ext/standard/basic_functions.c||ext/standard/basic_functions.c": [
          "File: ext/standard/basic_functions.c -> ext/standard/basic_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4014: PHP_FUNCTION(getenv)",
          "4015: {",
          "4016:  char *ptr, *str;",
          "4017:  size_t str_len;",
          "4020:   RETURN_FALSE;",
          "4021:  }",
          "4030:  }",
          "4031: #ifdef PHP_WIN32",
          "4032:  {",
          "",
          "[Removed Lines]",
          "4019:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s\", &str, &str_len) == FAILURE) {",
          "4024:  ptr = sapi_getenv(str, str_len);",
          "4025:  if (ptr) {",
          "4027:   RETVAL_STRING(ptr);",
          "4028:   efree(ptr);",
          "4029:   return;",
          "",
          "[Added Lines]",
          "4018:  zend_bool local_only = 0;",
          "4020:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s|b\", &str, &str_len, &local_only) == FAILURE) {",
          "4024:  if (!local_only) {",
          "4026:   ptr = sapi_getenv(str, str_len);",
          "4027:   if (ptr) {",
          "4029:    RETVAL_STRING(ptr);",
          "4030:    efree(ptr);",
          "4031:    return;",
          "4032:   }",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c": [
          "File: ext/xmlrpc/libxmlrpc/simplestring.c -> ext/xmlrpc/libxmlrpc/simplestring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175: #ifndef SIZE_MAX",
          "176: #define SIZE_MAX ((size_t)-1)",
          "177: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:    if(target && source) {",
          "195:       if(!target->str) {",
          "196:          simplestring_init_str(target);",
          "197:       }",
          "198:       if(target->len + add_len + 1 > target->size) {",
          "205:          target->str = (char*)realloc(target->str, newsize);",
          "207:          target->size = target->str ? newsize : 0;",
          "",
          "[Removed Lines]",
          "193: void simplestring_addn(simplestring* target, const char* source, int add_len) {",
          "200:          int newsize = target->len + add_len + 1;",
          "201:          int incr = target->size * 2;",
          "204:          newsize = newsize - (newsize % incr) + incr;",
          "",
          "[Added Lines]",
          "196: void simplestring_addn(simplestring* target, const char* source, size_t add_len) {",
          "197:    size_t newsize = target->size, incr = 0;",
          "203:       if((SIZE_MAX - add_len) < target->len || (SIZE_MAX - add_len - 1) < target->len) {",
          "205:        return;",
          "206:       }",
          "210:          newsize = target->len + add_len + 1;",
          "211:          incr = target->size * 2;",
          "214:          if (incr) {",
          "215:             newsize = newsize - (newsize % incr) + incr;",
          "216:          }",
          "217:          if(newsize < (target->len + add_len + 1)) {",
          "219:           return;",
          "220:          }",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h": [
          "File: ext/xmlrpc/libxmlrpc/simplestring.h -> ext/xmlrpc/libxmlrpc/simplestring.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: void simplestring_clear(simplestring* string);",
          "64: void simplestring_free(simplestring* string);",
          "65: void simplestring_add(simplestring* string, const char* add);",
          "68: #ifdef __cplusplus",
          "69: }",
          "",
          "[Removed Lines]",
          "66: void simplestring_addn(simplestring* string, const char* add, int add_len);",
          "",
          "[Added Lines]",
          "66: void simplestring_addn(simplestring* string, const char* add, size_t add_len);",
          "",
          "---------------"
        ],
        "ext/zip/zip_stream.c||ext/zip/zip_stream.c": [
          "File: ext/zip/zip_stream.c -> ext/zip/zip_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:            zend_string **opened_path,",
          "265:            php_stream_context *context STREAMS_DC)",
          "266: {",
          "269:  zend_string *file_basename;",
          "270:  char file_dirname[MAXPATHLEN];",
          "",
          "[Removed Lines]",
          "267:  int path_len;",
          "",
          "[Added Lines]",
          "267:  size_t path_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:  struct zip *za;",
          "273:  struct zip_file *zf = NULL;",
          "274:  char *fragment;",
          "276:  int err;",
          "278:  php_stream *stream = NULL;",
          "",
          "[Removed Lines]",
          "275:  int fragment_len;",
          "",
          "[Added Lines]",
          "275:  size_t fragment_len;",
          "",
          "---------------"
        ],
        "main/SAPI.c||main/SAPI.c": [
          "File: main/SAPI.c -> main/SAPI.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1021: SAPI_API char *sapi_getenv(char *name, size_t name_len)",
          "1022: {",
          "1023:  if (sapi_module.getenv) {",
          "1024:   char *value, *tmp = sapi_module.getenv(name, name_len);",
          "1025:   if (tmp) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1023:  if (!strncasecmp(name, \"HTTP_PROXY\", name_len)) {",
          "1025:   return NULL;",
          "1026:  }",
          "",
          "---------------"
        ],
        "main/php_variables.c||main/php_variables.c": [
          "File: main/php_variables.c -> main/php_variables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "731: }",
          "733: static zend_bool php_auto_globals_create_server(zend_string *name)",
          "734: {",
          "735:  if (PG(variables_order) && (strchr(PG(variables_order),'S') || strchr(PG(variables_order),'s'))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "734: static void check_http_proxy(HashTable *var_table)",
          "735: {",
          "736:  if (zend_hash_str_exists(var_table, \"HTTP_PROXY\", sizeof(\"HTTP_PROXY\")-1)) {",
          "737:   char *local_proxy = getenv(\"HTTP_PROXY\");",
          "739:   if (!local_proxy) {",
          "740:    zend_hash_str_del(var_table, \"HTTP_PROXY\", sizeof(\"HTTP_PROXY\")-1);",
          "741:   } else {",
          "742:    zval local_zval;",
          "743:    ZVAL_STRING(&local_zval, local_proxy);",
          "744:    zend_hash_str_update(var_table, \"HTTP_PROXY\", sizeof(\"HTTP_PROXY\")-1, &local_zval);",
          "745:   }",
          "746:  }",
          "747: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "755:   array_init(&PG(http_globals)[TRACK_VARS_SERVER]);",
          "756:  }",
          "758:  zend_hash_update(&EG(symbol_table), name, &PG(http_globals)[TRACK_VARS_SERVER]);",
          "759:  Z_ADDREF(PG(http_globals)[TRACK_VARS_SERVER]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "774:  check_http_proxy(Z_ARRVAL(PG(http_globals)[TRACK_VARS_SERVER]));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "770:   php_import_environment_variables(&PG(http_globals)[TRACK_VARS_ENV]);",
          "771:  }",
          "773:  zend_hash_update(&EG(symbol_table), name, &PG(http_globals)[TRACK_VARS_ENV]);",
          "774:  Z_ADDREF(PG(http_globals)[TRACK_VARS_ENV]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "790:  check_http_proxy(Z_ARRVAL(PG(http_globals)[TRACK_VARS_ENV]));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1734d79a76b165365afb74716c592c3b9cbd0ca",
      "candidate_info": {
        "commit_hash": "b1734d79a76b165365afb74716c592c3b9cbd0ca",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/b1734d79a76b165365afb74716c592c3b9cbd0ca",
        "files": [
          "Zend/zend_virtual_cwd.c",
          "ext/bz2/bz2.c",
          "ext/bz2/tests/72613.bz2",
          "ext/bz2/tests/bug72613.phpt",
          "ext/exif/exif.c",
          "ext/exif/tests/bug54002.phpt",
          "ext/exif/tests/bug62523_2.phpt",
          "ext/exif/tests/bug72603.jpeg",
          "ext/exif/tests/bug72603.phpt",
          "ext/exif/tests/bug72618.jpg",
          "ext/exif/tests/bug72618.phpt",
          "ext/gd/libgd/gd.c",
          "ext/gd/libgd/gd_interpolation.c",
          "ext/gd/tests/bug72512_0.phpt",
          "ext/gd/tests/bug72512_1.phpt",
          "ext/intl/locale/locale_methods.c",
          "ext/intl/tests/bug72533.phpt",
          "ext/session/session.c",
          "ext/session/tests/bug72562.phpt",
          "ext/snmp/snmp.c",
          "ext/snmp/tests/bug72479.phpt",
          "ext/standard/basic_functions.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/xmlrpc/libxmlrpc/simplestring.h",
          "ext/zip/zip_stream.c",
          "main/SAPI.c",
          "main/php_variables.c"
        ],
        "message": "Merge branch 'PHP-5.5' into PHP-5.6\n\n* PHP-5.5:\n  fix #72519, possible OOB using imagegif\n  fix #72512, invalid read or write for palette image when invalid transparent index is used\n  Apparently some envs miss SIZE_MAX\n  Fix tests\n  Fix bug #72618: NULL Pointer Dereference in exif_process_user_comment\n  Partial fix for bug #72613 - do not treat negative returns from bz2 as size_t\n  Fix bug #72606: heap-buffer-overflow (write) simplestring_addn simplestring.c\n  Fix for bug #72558, Integer overflow error within _gdContributionsAlloc()\n  Fix bug #72603: Out of bound read in exif_process_IFD_in_MAKERNOTE\n  Fix bug #72562 - destroy var_hash properly\n  Fix bug #72533 (locale_accept_from_http out-of-bounds access)\n  Fix fir bug #72520\n  Fix for bug #72513\n  CS fix and comments with bug ID\n  Fix for HTTP_PROXY issue.\n  add tests for bug #72512\n  Fixed bug #72512 gdImageTrueColorToPaletteBody allows arbitrary write/read access\n  Fixed bug #72479 - same as #72434\n\nConflicts:\n\text/bz2/bz2.c\n\tmain/SAPI.c\n\tmain/php_variables.c",
        "before_after_code_files": [
          "Zend/zend_virtual_cwd.c||Zend/zend_virtual_cwd.c",
          "ext/bz2/bz2.c||ext/bz2/bz2.c",
          "ext/bz2/tests/bug72613.phpt||ext/bz2/tests/bug72613.phpt",
          "ext/exif/exif.c||ext/exif/exif.c",
          "ext/exif/tests/bug54002.phpt||ext/exif/tests/bug54002.phpt",
          "ext/exif/tests/bug62523_2.phpt||ext/exif/tests/bug62523_2.phpt",
          "ext/exif/tests/bug72603.phpt||ext/exif/tests/bug72603.phpt",
          "ext/exif/tests/bug72618.phpt||ext/exif/tests/bug72618.phpt",
          "ext/gd/libgd/gd.c||ext/gd/libgd/gd.c",
          "ext/gd/libgd/gd_interpolation.c||ext/gd/libgd/gd_interpolation.c",
          "ext/gd/tests/bug72512_0.phpt||ext/gd/tests/bug72512_0.phpt",
          "ext/gd/tests/bug72512_1.phpt||ext/gd/tests/bug72512_1.phpt",
          "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c",
          "ext/intl/tests/bug72533.phpt||ext/intl/tests/bug72533.phpt",
          "ext/session/session.c||ext/session/session.c",
          "ext/session/tests/bug72562.phpt||ext/session/tests/bug72562.phpt",
          "ext/snmp/snmp.c||ext/snmp/snmp.c",
          "ext/snmp/tests/bug72479.phpt||ext/snmp/tests/bug72479.phpt",
          "ext/standard/basic_functions.c||ext/standard/basic_functions.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h",
          "ext/zip/zip_stream.c||ext/zip/zip_stream.c",
          "main/SAPI.c||main/SAPI.c",
          "main/php_variables.c||main/php_variables.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c",
            "ext/intl/tests/bug72533.phpt||ext/intl/tests/bug72533.phpt"
          ],
          "candidate": [
            "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c",
            "ext/intl/tests/bug72533.phpt||ext/intl/tests/bug72533.phpt"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_virtual_cwd.c||Zend/zend_virtual_cwd.c": [
          "File: Zend/zend_virtual_cwd.c -> Zend/zend_virtual_cwd.c"
        ],
        "ext/bz2/bz2.c||ext/bz2/bz2.c": [
          "File: ext/bz2/bz2.c -> ext/bz2/bz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: static size_t php_bz2iop_read(php_stream *stream, char *buf, size_t count TSRMLS_DC)",
          "139: {",
          "140:  struct php_bz2_stream_data_t *self = (struct php_bz2_stream_data_t *) stream->abstract;",
          "146:   stream->eof = 1;",
          "147:  }",
          "150: }",
          "152: static size_t php_bz2iop_write(php_stream *stream, const char *buf, size_t count TSRMLS_DC)",
          "153: {",
          "154:  struct php_bz2_stream_data_t *self = (struct php_bz2_stream_data_t *) stream->abstract;",
          "157: }",
          "159: static int php_bz2iop_close(php_stream *stream, int close_handle TSRMLS_DC)",
          "160: {",
          "161:  struct php_bz2_stream_data_t *self = (struct php_bz2_stream_data_t *)stream->abstract;",
          "162:  int ret = EOF;",
          "164:  if (close_handle) {",
          "165:   BZ2_bzclose(self->bz_file);",
          "166:  }",
          "",
          "[Removed Lines]",
          "141:  size_t ret;",
          "143:  ret = BZ2_bzread(self->bz_file, buf, count);",
          "145:  if (ret == 0) {",
          "149:  return ret;",
          "156:  return BZ2_bzwrite(self->bz_file, (char*)buf, count);",
          "",
          "[Added Lines]",
          "141:  int bz2_ret;",
          "143:  bz2_ret = BZ2_bzread(self->bz_file, buf, count);",
          "145:  if (bz2_ret < 0) {",
          "146:   stream->eof = 1;",
          "147:   return -1;",
          "148:  }",
          "149:  if (bz2_ret == 0) {",
          "153:  return (size_t)bz2_ret;",
          "160:  return BZ2_bzwrite(self->bz_file, (char*)buf, count);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:  virtual_filepath_ex(path, &path_copy, NULL TSRMLS_CC);",
          "228: #else",
          "229:  path_copy = path;",
          "232:  if (php_check_open_basedir(path_copy TSRMLS_CC)) {",
          "233: #ifdef VIRTUAL_DIR",
          "",
          "[Removed Lines]",
          "230: #endif",
          "",
          "[Added Lines]",
          "234: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:  Z_STRVAL_P(return_value) = emalloc(len + 1);",
          "353:  Z_STRLEN_P(return_value) = php_stream_read(stream, Z_STRVAL_P(return_value), len);",
          "355:  if (Z_STRLEN_P(return_value) < 0) {",
          "356:   efree(Z_STRVAL_P(return_value));",
          "357:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"could not read valid bz2 data from stream\");",
          "359:  }",
          "361:  Z_STRVAL_P(return_value)[Z_STRLEN_P(return_value)] = 0;",
          "362:  Z_TYPE_P(return_value) = IS_STRING;",
          "363: }",
          "",
          "[Removed Lines]",
          "358:   RETURN_FALSE;",
          "",
          "[Added Lines]",
          "362:   RETURN_FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "389:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"filename cannot be empty\");",
          "390:    RETURN_FALSE;",
          "391:   }",
          "393:   if (CHECK_ZVAL_NULL_PATH(*file)) {",
          "394:    RETURN_FALSE;",
          "395:   }",
          "397:   stream = php_stream_bz2open(NULL,",
          "401:          NULL);",
          "402:  } else if (Z_TYPE_PP(file) == IS_RESOURCE) {",
          "",
          "[Removed Lines]",
          "398:          Z_STRVAL_PP(file),",
          "399:          mode,",
          "400:          REPORT_ERRORS,",
          "",
          "[Added Lines]",
          "402:          Z_STRVAL_PP(file),",
          "403:          mode,",
          "404:          REPORT_ERRORS,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "503:  }",
          "509:  dest_len   = (unsigned int) (source_len + (0.01 * source_len) + 600);",
          "512:  dest = emalloc(dest_len + 1);",
          "515:  if (argc > 1) {",
          "516:   block_size = zblock_size;",
          "517:  }",
          "519:  if (argc > 2) {",
          "520:   work_factor = zwork_factor;",
          "521:  }",
          "",
          "[Removed Lines]",
          "506:     + .01 x length of data + 600 which is the largest size the results of the compression",
          "507:     could possibly be, at least that's what the libbz2 docs say (thanks to jeremy@nirvani.net",
          "",
          "[Added Lines]",
          "510:     + .01 x length of data + 600 which is the largest size the results of the compression",
          "511:     could possibly be, at least that's what the libbz2 docs say (thanks to jeremy@nirvani.net",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "593: static void php_bz2_error(INTERNAL_FUNCTION_PARAMETERS, int opt)",
          "596:  php_stream   *stream;",
          "599:  struct php_bz2_stream_data_t *self;",
          "601:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r\", &bzp) == FAILURE) {",
          "602:   return;",
          "603:  }",
          "",
          "[Removed Lines]",
          "594: {",
          "",
          "[Added Lines]",
          "598: {",
          "",
          "---------------"
        ],
        "ext/bz2/tests/bug72613.phpt||ext/bz2/tests/bug72613.phpt": [
          "File: ext/bz2/tests/bug72613.phpt -> ext/bz2/tests/bug72613.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72613 (Inadequate error handling in bzread())",
          "3: --SKIPIF--",
          "4: <?php if (!extension_loaded(\"bz2\")) print \"skip\"; ?>",
          "5: --FILE--",
          "6: <?php",
          "7: $fp = bzopen(__DIR__.'/72613.bz2', 'r');",
          "8: if ($fp === FALSE) {",
          "9:     exit(\"ERROR: bzopen()\");",
          "10: }",
          "11: $data = \"\";",
          "12: while (!feof($fp)) {",
          "13:     $res = bzread($fp);",
          "14:     if ($res === FALSE) {",
          "15:         exit(\"ERROR: bzread()\");",
          "16:     }",
          "17:     $data .= $res;",
          "18: }",
          "19: bzclose($fp);",
          "20: ?>",
          "21: DONE",
          "22: --EXPECT--",
          "23: DONE",
          "",
          "---------------"
        ],
        "ext/exif/exif.c||ext/exif/exif.c": [
          "File: ext/exif/exif.c -> ext/exif/exif.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2615:  if (ByteCount>=8) {",
          "2616:   if (!memcmp(szValuePtr, \"UNICODE\\0\", 8)) {",
          "2618:    szValuePtr = szValuePtr+8;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2616:   const zend_encoding *from, *to;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2633:    } else {",
          "2634:     decode = ImageInfo->decode_unicode_le;",
          "2635:    }",
          "2638:      (unsigned char**)pszInfoPtr,",
          "2639:      &len,",
          "2640:      (unsigned char*)szValuePtr,",
          "2641:      ByteCount,",
          "2644:      TSRMLS_CC) == (size_t)-1) {",
          "2645:     len = exif_process_string_raw(pszInfoPtr, szValuePtr, ByteCount);",
          "2646:    }",
          "",
          "[Removed Lines]",
          "2637:    if (zend_multibyte_encoding_converter(",
          "2642:      zend_multibyte_fetch_encoding(ImageInfo->encode_unicode TSRMLS_CC),",
          "2643:      zend_multibyte_fetch_encoding(decode TSRMLS_CC)",
          "",
          "[Added Lines]",
          "2637:    to = zend_multibyte_fetch_encoding(ImageInfo->encode_unicode TSRMLS_CC);",
          "2638:    from = zend_multibyte_fetch_encoding(decode TSRMLS_CC);",
          "2640:    if (!to || !from || zend_multibyte_encoding_converter(",
          "2645:      to,",
          "2646:      from",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2655:    szValuePtr = szValuePtr+8;",
          "2656:    ByteCount -= 8;",
          "2659:      (unsigned char**)pszInfoPtr,",
          "2660:      &len,",
          "2661:      (unsigned char*)szValuePtr,",
          "2662:      ByteCount,",
          "2665:      TSRMLS_CC) == (size_t)-1) {",
          "2666:     len = exif_process_string_raw(pszInfoPtr, szValuePtr, ByteCount);",
          "2667:    }",
          "",
          "[Removed Lines]",
          "2658:    if (zend_multibyte_encoding_converter(",
          "2663:      zend_multibyte_fetch_encoding(ImageInfo->encode_jis TSRMLS_CC),",
          "2664:      zend_multibyte_fetch_encoding(ImageInfo->motorola_intel ? ImageInfo->decode_jis_be : ImageInfo->decode_jis_le TSRMLS_CC)",
          "",
          "[Added Lines]",
          "2661:    to = zend_multibyte_fetch_encoding(ImageInfo->encode_jis TSRMLS_CC);",
          "2662:    from = zend_multibyte_fetch_encoding(ImageInfo->motorola_intel ? ImageInfo->decode_jis_be : ImageInfo->decode_jis_le TSRMLS_CC);",
          "2663:    if (!to || !from || zend_multibyte_encoding_converter(",
          "2668:      to,",
          "2669:      from",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2732:   break;",
          "2733:  }",
          "2735:  dir_start = value_ptr + maker_note->offset;",
          "2737: #ifdef EXIF_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2740:  if (maker_note->offset >= value_len) {",
          "2742:   exif_error_docref(\"exif_read_data#error_ifd\" EXIFERR_CC, ImageInfo, E_WARNING, \"IFD data too short: 0x%04X offset 0x%04X\", value_len, maker_note->offset);",
          "2743:   return FALSE;",
          "2744:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2760:    offset_base = value_ptr;",
          "2761:    break;",
          "2762:   case MN_OFFSET_GUESS:",
          "2763:    offset_diff = 2 + NumDirEntries*12 + 4 - php_ifd_get32u(dir_start+10, ImageInfo->motorola_intel);",
          "2764: #ifdef EXIF_DEBUG",
          "2765:    exif_error_docref(NULL EXIFERR_CC, ImageInfo, E_NOTICE, \"Using automatic offset correction: 0x%04X\", ((int)dir_start-(int)offset_base+maker_note->offset+displacement) + offset_diff);",
          "2766: #endif",
          "2767:    offset_base = value_ptr + offset_diff;",
          "2768:    break;",
          "2769:   default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2774:    if (maker_note->offset + 10 + 4 >= value_len) {",
          "2776:     exif_error_docref(\"exif_read_data#error_ifd\" EXIFERR_CC, ImageInfo, E_WARNING, \"IFD data too short: 0x%04X\", value_len);",
          "2777:     return FALSE;",
          "2778:    }",
          "2783:    if (offset_diff < 0 || offset_diff >= value_len ) {",
          "2784:     exif_error_docref(\"exif_read_data#error_ifd\" EXIFERR_CC, ImageInfo, E_WARNING, \"IFD data bad offset: 0x%04X length 0x%04X\", offset_diff, value_len);",
          "2785:     return FALSE;",
          "2786:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2772:  }",
          "2774:  if ((2+NumDirEntries*12) > value_len) {",
          "2776:   return FALSE;",
          "2777:  }",
          "",
          "[Removed Lines]",
          "2775:   exif_error_docref(\"exif_read_data#error_ifd\" EXIFERR_CC, ImageInfo, E_WARNING, \"Illegal IFD size: 2 + x%04X*12 = x%04X > x%04X\", NumDirEntries, 2+NumDirEntries*12, value_len);",
          "",
          "[Added Lines]",
          "2795:   exif_error_docref(\"exif_read_data#error_ifd\" EXIFERR_CC, ImageInfo, E_WARNING, \"Illegal IFD size: 2 + 0x%04X*12 = 0x%04X > 0x%04X\", NumDirEntries, 2+NumDirEntries*12, value_len);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3058:     break;",
          "3060:    case TAG_MAKER_NOTE:",
          "3062:     break;",
          "3064:    case TAG_EXIF_IFD_POINTER:",
          "",
          "[Removed Lines]",
          "3061:     exif_process_IFD_in_MAKERNOTE(ImageInfo, value_ptr, byte_count, offset_base, IFDlength, displacement TSRMLS_CC);",
          "",
          "[Added Lines]",
          "3081:     if (!exif_process_IFD_in_MAKERNOTE(ImageInfo, value_ptr, byte_count, offset_base, IFDlength, displacement TSRMLS_CC)) {",
          "3082:      EFREE_IF(outside);",
          "3083:      return FALSE;",
          "3084:     }",
          "",
          "---------------"
        ],
        "ext/exif/tests/bug54002.phpt||ext/exif/tests/bug54002.phpt": [
          "File: ext/exif/tests/bug54002.phpt -> ext/exif/tests/bug54002.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: --EXPECTF--",
          "14: Warning: exif_read_data(bug54002_1.jpeg): Process tag(x0205=UndefinedTa): Illegal byte_count in %sbug54002.php on line %d",
          "",
          "[Removed Lines]",
          "16: Warning: exif_read_data(bug54002_1.jpeg): Process tag(xA000=FlashPixVer): Illegal pointer offset(%s) in %sbug54002.php on line %d",
          "18: Warning: exif_read_data(bug54002_2.jpeg): Process tag(x0205=UndefinedTa): Illegal byte_count in %sbug54002.php on line %d",
          "20: Warning: exif_read_data(bug54002_2.jpeg): Process tag(xA000=FlashPixVer): Illegal pointer offset(%s) in %sbug54002.php on line %d",
          "",
          "[Added Lines]",
          "16: Warning: exif_read_data(bug54002_2.jpeg): Process tag(x0205=UndefinedTa): Illegal byte_count in %sbug54002.php on line %d",
          "",
          "---------------"
        ],
        "ext/exif/tests/bug62523_2.phpt||ext/exif/tests/bug62523_2.phpt": [
          "File: ext/exif/tests/bug62523_2.phpt -> ext/exif/tests/bug62523_2.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: var_dump(count(exif_read_data(__DIR__.\"/bug62523_2.jpg\")));",
          "11: ?>",
          "12: Done",
          "14: Test",
          "16: Done",
          "",
          "[Removed Lines]",
          "13: --EXPECT--",
          "15: int(76)",
          "",
          "[Added Lines]",
          "13: --EXPECTF--",
          "16: Warning: exif_read_data(bug62523_2.jpg): IFD data bad offset: 0xADB23672 length 0x0D94 in %s/bug62523_2.php on line %d",
          "17: int(30)",
          "",
          "---------------"
        ],
        "ext/exif/tests/bug72603.phpt||ext/exif/tests/bug72603.phpt": [
          "File: ext/exif/tests/bug72603.phpt -> ext/exif/tests/bug72603.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72603 (Out of bound read in exif_process_IFD_in_MAKERNOTE)",
          "3: --SKIPIF--",
          "4: <?php if (!extension_loaded('exif')) print 'skip exif extension not available';?>",
          "5: --FILE--",
          "6: <?php",
          "7: var_dump(count(exif_read_data(dirname(__FILE__) . \"/bug72603.jpeg\")));",
          "8: ?>",
          "9: --EXPECTF--",
          "10: Warning: exif_read_data(bug72603.jpeg): IFD data bad offset: 0x058C length 0x001C in %s/bug72603.php on line %d",
          "11: int(13)",
          "",
          "---------------"
        ],
        "ext/exif/tests/bug72618.phpt||ext/exif/tests/bug72618.phpt": [
          "File: ext/exif/tests/bug72618.phpt -> ext/exif/tests/bug72618.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug 72618 (NULL Pointer Dereference in exif_process_user_comment)",
          "3: --SKIPIF--",
          "4: <?php if (!extension_loaded('exif')) print 'skip exif extension not available';?>",
          "5: --FILE--",
          "6: <?php",
          "7: var_dump(count(exif_read_data(dirname(__FILE__) . \"/bug72618.jpg\")));",
          "8: ?>",
          "9: --EXPECTF--",
          "10: Warning: exif_read_data(bug72618.jpg): IFD data bad offset: 0x058E length 0x0030 in %s/bug72618.php on line %d",
          "11: int(13)",
          "",
          "---------------"
        ],
        "ext/gd/libgd/gd.c||ext/gd/libgd/gd.c": [
          "File: ext/gd/libgd/gd.c -> ext/gd/libgd/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:   return NULL;",
          "191:  }",
          "194:   return NULL;",
          "195:  }",
          "",
          "[Removed Lines]",
          "193:  if (overflow2(sizeof(int), sx)) {",
          "",
          "[Added Lines]",
          "193:  if (overflow2(sizeof(int *), sx)) {",
          "",
          "---------------"
        ],
        "ext/gd/libgd/gd_interpolation.c||ext/gd/libgd/gd_interpolation.c": [
          "File: ext/gd/libgd/gd_interpolation.c -> ext/gd/libgd/gd_interpolation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "879: static inline LineContribType * _gdContributionsAlloc(unsigned int line_length, unsigned int windows_size)",
          "880: {",
          "881:  unsigned int u = 0;",
          "884:  res = (LineContribType *) gdMalloc(sizeof(LineContribType));",
          "885:  if (!res) {",
          "886:   return NULL;",
          "887:  }",
          "896: }",
          "898: static inline void _gdContributionsFree(LineContribType * p)",
          "",
          "[Removed Lines]",
          "882:     LineContribType *res;",
          "888:     res->WindowSize = windows_size;",
          "889:     res->LineLength = line_length;",
          "890:     res->ContribRow = (ContributionType *) gdMalloc(line_length * sizeof(ContributionType));",
          "892:     for (u = 0 ; u < line_length ; u++) {",
          "893:         res->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));",
          "894:     }",
          "895:     return res;",
          "",
          "[Added Lines]",
          "882:  LineContribType *res;",
          "883:  int overflow_error = 0;",
          "889:  res->WindowSize = windows_size;",
          "890:  res->LineLength = line_length;",
          "891:  if (overflow2(line_length, sizeof(ContributionType))) {",
          "892:   return NULL;",
          "893:  }",
          "894:  res->ContribRow = (ContributionType *) gdMalloc(line_length * sizeof(ContributionType));",
          "895:  if (res->ContribRow == NULL) {",
          "896:   gdFree(res);",
          "897:   return NULL;",
          "898:  }",
          "899:  for (u = 0 ; u < line_length ; u++) {",
          "900:   if (overflow2(windows_size, sizeof(double))) {",
          "901:    overflow_error = 1;",
          "902:   } else {",
          "903:    res->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));",
          "904:   }",
          "905:   if (overflow_error == 1 || res->ContribRow[u].Weights == NULL) {",
          "906:    u--;",
          "907:    while (u >= 0) {",
          "908:     gdFree(res->ContribRow[u].Weights);",
          "909:     u--;",
          "910:    }",
          "911:    return NULL;",
          "912:   }",
          "913:  }",
          "914:  return res;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "908: static inline LineContribType *_gdContributionsCalc(unsigned int line_size, unsigned int src_size, double scale_d,  const interpolation_method pFilter)",
          "909: {",
          "913:  int windows_size;",
          "914:  unsigned int u;",
          "915:  LineContribType *res;",
          "933:   int iSrc;",
          "951:   if (dTotalWeight < 0.0) {",
          "952:    _gdContributionsFree(res);",
          "953:    return NULL;",
          "954:   }",
          "963: }",
          "965: static inline void _gdScaleRow(gdImagePtr pSrc,  unsigned int src_width, gdImagePtr dst, unsigned int dst_width, unsigned int row, LineContribType *contrib)",
          "",
          "[Removed Lines]",
          "910:     double width_d;",
          "911:     double scale_f_d = 1.0;",
          "912:     const double filter_width_d = DEFAULT_BOX_RADIUS;",
          "917:     if (scale_d < 1.0) {",
          "918:         width_d = filter_width_d / scale_d;",
          "919:         scale_f_d = scale_d;",
          "920:     }  else {",
          "921:         width_d= filter_width_d;",
          "922:     }",
          "924:     windows_size = 2 * (int)ceil(width_d) + 1;",
          "925:     res = _gdContributionsAlloc(line_size, windows_size);",
          "927:     for (u = 0; u < line_size; u++) {",
          "928:         const double dCenter = (double)u / scale_d;",
          "930:         register int iLeft = MAX(0, (int)floor (dCenter - width_d));",
          "931:         int iRight = MIN((int)ceil(dCenter + width_d), (int)src_size - 1);",
          "932:         double dTotalWeight = 0.0;",
          "936:         if (iRight - iLeft + 1 > windows_size)  {",
          "937:             if (iLeft < ((int)src_size - 1 / 2))  {",
          "938:                 iLeft++;",
          "939:             } else {",
          "940:                 iRight--;",
          "941:             }",
          "942:         }",
          "944:         res->ContribRow[u].Left = iLeft;",
          "945:         res->ContribRow[u].Right = iRight;",
          "947:         for (iSrc = iLeft; iSrc <= iRight; iSrc++) {",
          "948:             dTotalWeight += (res->ContribRow[u].Weights[iSrc-iLeft] =  scale_f_d * (*pFilter)(scale_f_d * (dCenter - (double)iSrc)));",
          "949:         }",
          "956:         if (dTotalWeight > 0.0) {",
          "957:             for (iSrc = iLeft; iSrc <= iRight; iSrc++) {",
          "958:                 res->ContribRow[u].Weights[iSrc-iLeft] /= dTotalWeight;",
          "959:             }",
          "960:         }",
          "961:    }",
          "962:    return res;",
          "",
          "[Added Lines]",
          "929:  double width_d;",
          "930:  double scale_f_d = 1.0;",
          "931:  const double filter_width_d = DEFAULT_BOX_RADIUS;",
          "935:  int overflow_error = 0;",
          "937:  if (scale_d < 1.0) {",
          "938:   width_d = filter_width_d / scale_d;",
          "939:   scale_f_d = scale_d;",
          "940:  }  else {",
          "941:   width_d= filter_width_d;",
          "942:  }",
          "944:  windows_size = 2 * (int)ceil(width_d) + 1;",
          "945:  res = _gdContributionsAlloc(line_size, windows_size);",
          "946:  if (res == NULL) {",
          "947:   return NULL;",
          "948:  }",
          "949:  for (u = 0; u < line_size; u++) {",
          "950:  const double dCenter = (double)u / scale_d;",
          "952:  register int iLeft = MAX(0, (int)floor (dCenter - width_d));",
          "953:  int iRight = MIN((int)ceil(dCenter + width_d), (int)src_size - 1);",
          "954:  double dTotalWeight = 0.0;",
          "958:  if (iRight - iLeft + 1 > windows_size)  {",
          "959:   if (iLeft < ((int)src_size - 1 / 2))  {",
          "960:    iLeft++;",
          "961:   } else {",
          "962:    iRight--;",
          "963:   }",
          "964:  }",
          "966:  res->ContribRow[u].Left = iLeft;",
          "967:  res->ContribRow[u].Right = iRight;",
          "969:  for (iSrc = iLeft; iSrc <= iRight; iSrc++) {",
          "970:   dTotalWeight += (res->ContribRow[u].Weights[iSrc-iLeft] =  scale_f_d * (*pFilter)(scale_f_d * (dCenter - (double)iSrc)));",
          "971:  }",
          "978:  if (dTotalWeight > 0.0) {",
          "979:   for (iSrc = iLeft; iSrc <= iRight; iSrc++) {",
          "980:    res->ContribRow[u].Weights[iSrc-iLeft] /= dTotalWeight;",
          "981:   }",
          "982:  }",
          "983:  }",
          "984:  return res;",
          "",
          "---------------"
        ],
        "ext/gd/tests/bug72512_0.phpt||ext/gd/tests/bug72512_0.phpt": [
          "File: ext/gd/tests/bug72512_0.phpt -> ext/gd/tests/bug72512_0.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72512 gdImageTrueColorToPaletteBody allows arbitrary write/read access, var 0",
          "3: --SKIPIF--",
          "4: <?php",
          "5:  if (!extension_loaded('gd')) die(\"skip gd extension not available\\n\");",
          "6: ?>",
          "7: --FILE--",
          "8: <?php",
          "10: $img = imagecreatetruecolor(13, 1007);",
          "12: imagecolortransparent($img, -10066304);",
          "13: imagetruecolortopalette($img, TRUE, 3);",
          "14: imagescale($img, 1, 65535);",
          "15: ?>",
          "16: ==DONE==",
          "17: --EXPECT--",
          "18: ==DONE==",
          "",
          "---------------"
        ],
        "ext/gd/tests/bug72512_1.phpt||ext/gd/tests/bug72512_1.phpt": [
          "File: ext/gd/tests/bug72512_1.phpt -> ext/gd/tests/bug72512_1.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72512 gdImageTrueColorToPaletteBody allows arbitrary write/read access, var 1",
          "3: --SKIPIF--",
          "4: <?php",
          "5:  if (!extension_loaded('gd')) die(\"skip gd extension not available\\n\");",
          "6: ?>",
          "7: --FILE--",
          "8: <?php",
          "10: $img = imagecreatetruecolor(100, 100);",
          "11: imagecolortransparent($img, -1000000);",
          "12: imagetruecolortopalette($img, TRUE, 3);",
          "13: imagecolortransparent($img, 9);",
          "15: ?>",
          "16: ==DONE==",
          "17: --EXPECT--",
          "18: ==DONE==",
          "",
          "---------------"
        ],
        "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c": [
          "File: ext/intl/locale/locale_methods.c -> ext/intl/locale/locale_methods.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1591:   \"locale_accept_from_http: unable to parse input parameters\", 0 TSRMLS_CC );",
          "1592:   RETURN_FALSE;",
          "1593:  }",
          "1595:  available = ures_openAvailableLocales(NULL, &status);",
          "1596:  INTL_CHECK_STATUS(status, \"locale_accept_from_http: failed to retrieve locale list\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1594:  if(http_accept_len > ULOC_FULLNAME_CAPACITY) {",
          "1596:   char *start = http_accept;",
          "1597:   char *end;",
          "1598:   size_t len;",
          "1599:   do {",
          "1600:    end = strchr(start, ',');",
          "1601:    len = end ? end-start : http_accept_len-(start-http_accept);",
          "1602:    if(len > ULOC_FULLNAME_CAPACITY) {",
          "1603:     intl_error_set( NULL, U_ILLEGAL_ARGUMENT_ERROR,",
          "1604:       \"locale_accept_from_http: locale string too long\", 0 TSRMLS_CC );",
          "1605:     RETURN_FALSE;",
          "1606:    }",
          "1607:    if(end) {",
          "1608:     start = end+1;",
          "1609:    }",
          "1610:   } while(end != NULL);",
          "1611:  }",
          "",
          "---------------"
        ],
        "ext/intl/tests/bug72533.phpt||ext/intl/tests/bug72533.phpt": [
          "File: ext/intl/tests/bug72533.phpt -> ext/intl/tests/bug72533.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72533 (locale_accept_from_http out-of-bounds access)",
          "3: --SKIPIF--",
          "4: <?php if( !extension_loaded( 'intl' ) ) print 'skip'; ?>",
          "5: --FILE--",
          "6: <?php",
          "8: function ut_main()",
          "9: {",
          "10:     $ret = var_export(ut_loc_accept_http(str_repeat('x', 256)), true);",
          "11:     $ret .= \"\\n\";",
          "12:  if(intl_is_failure(intl_get_error_code())) {",
          "13:   $ret .= var_export(intl_get_error_message(), true);",
          "14:  }",
          "15:     $ret .= \"\\n\";",
          "16:     $ret .= var_export(ut_loc_accept_http(str_repeat('en,', 256)), true);",
          "17:     $ret .= \"\\n\";",
          "18:  if(intl_is_failure(intl_get_error_code())) {",
          "19:   $ret .= var_export(intl_get_error_message(), true);",
          "20:  }",
          "21:     return $ret;",
          "22: }",
          "24: include_once( 'ut_common.inc' );",
          "25: ut_run();",
          "26: ?>",
          "27: --EXPECTF--",
          "28: false",
          "29: 'locale_accept_from_http: locale string too long: U_ILLEGAL_ARGUMENT_ERROR'",
          "30: 'en'",
          "",
          "---------------"
        ],
        "ext/session/session.c||ext/session/session.c": [
          "File: ext/session/session.c -> ext/session/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "932:   namelen = ((unsigned char)(*p)) & (~PS_BIN_UNDEF);",
          "934:   if (namelen < 0 || namelen > PS_BIN_MAX || (p + namelen) >= endptr) {",
          "935:    return FAILURE;",
          "936:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "935:    PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "",
          "---------------"
        ],
        "ext/session/tests/bug72562.phpt||ext/session/tests/bug72562.phpt": [
          "File: ext/session/tests/bug72562.phpt -> ext/session/tests/bug72562.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72562: Use After Free in unserialize() with Unexpected Session Deserialization",
          "3: --SKIPIF--",
          "4: <?php include('skipif.inc'); ?>",
          "5: --FILE--",
          "6: <?php",
          "8: ini_set('session.serialize_handler', 'php_binary');",
          "9: session_start();",
          "10: $sess = \"\\x1xi:1;\\x2y\";",
          "11: session_decode($sess);",
          "12: $uns_1 = '{';",
          "13: $out_1[] = unserialize($uns_1);",
          "14: unset($out_1);",
          "15: $fakezval = ptr2str(1122334455);",
          "16: $fakezval .= ptr2str(0);",
          "17: $fakezval .= \"\\x00\\x00\\x00\\x00\";",
          "18: $fakezval .= \"\\x01\";",
          "19: $fakezval .= \"\\x00\";",
          "20: $fakezval .= \"\\x00\\x00\";",
          "21: for ($i = 0; $i < 5; $i++) {",
          "22:   $v[$i] = $fakezval.$i;",
          "23: }",
          "24: $uns_2 = 'R:2;';",
          "25: $out_2 = unserialize($uns_2);",
          "26: var_dump($out_2);",
          "28: function ptr2str($ptr)",
          "29: {",
          "30:  $out = '';",
          "31:  for ($i = 0; $i < 8; $i++) {",
          "32:   $out .= chr($ptr & 0xff);",
          "33:   $ptr >>= 8;",
          "34:  }",
          "35:  return $out;",
          "36: }",
          "37: ?>",
          "38: --EXPECTF--",
          "39: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s/bug72562.php on line %d",
          "41: Notice: unserialize(): Error at offset 0 of 1 bytes in %s/bug72562.php on line %d",
          "43: Notice: unserialize(): Error at offset 4 of 4 bytes in %s/bug72562.php on line %d",
          "44: bool(false)",
          "",
          "---------------"
        ],
        "ext/snmp/snmp.c||ext/snmp/snmp.c": [
          "File: ext/snmp/snmp.c -> ext/snmp/snmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:        struct snmp_session *session,",
          "705:        struct objid_query *objid_query)",
          "706: {",
          "",
          "[Removed Lines]",
          "703: static void php_snmp_internal(INTERNAL_FUNCTION_PARAMETERS, int st,",
          "",
          "[Added Lines]",
          "703: static void php_snmp_internal(INTERNAL_FUNCTION_PARAMETERS, int st,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "803:     }",
          "804:     for (vars = response->variables; vars; vars = vars->next_variable) {",
          "808:       vars->type == SNMP_NOSUCHINSTANCE ) {",
          "809:       if ((st & SNMP_CMD_WALK) && Z_TYPE_P(return_value) == IS_ARRAY) {",
          "810:        break;",
          "",
          "[Removed Lines]",
          "806:      if (  vars->type == SNMP_ENDOFMIBVIEW ||",
          "807:       vars->type == SNMP_NOSUCHOBJECT ||",
          "",
          "[Added Lines]",
          "806:      if (  vars->type == SNMP_ENDOFMIBVIEW ||",
          "807:       vars->type == SNMP_NOSUCHOBJECT ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "814:       php_snmp_error(getThis(), NULL TSRMLS_CC, PHP_SNMP_ERRNO_ERROR_IN_REPLY, \"Error in packet at '%s': %s\", buf, buf2);",
          "815:       continue;",
          "816:      }",
          "821:        keepwalking = 0;",
          "",
          "[Removed Lines]",
          "818:      if ((st & SNMP_CMD_WALK) &&",
          "",
          "[Added Lines]",
          "818:      if ((st & SNMP_CMD_WALK) &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1099:     efree(objid_query->vars);",
          "1100:     return FALSE;",
          "1101:    }",
          "1103:    memmove((char *)objid_query->vars[0].name, (char *)objid_mib, sizeof(objid_mib));",
          "1104:    objid_query->vars[0].name_length = sizeof(objid_mib) / sizeof(oid);",
          "1105:   }",
          "",
          "[Removed Lines]",
          "1102:   } else {",
          "",
          "[Added Lines]",
          "1102:   } else {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1641:  netsnmp_ds_set_boolean(NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_PRINT_NUMERIC_ENUM, (int) a1);",
          "1642:  RETURN_TRUE;",
          "",
          "[Removed Lines]",
          "1643: }",
          "",
          "[Added Lines]",
          "1643: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1668:    RETURN_FALSE;",
          "1669:    break;",
          "1670:  }",
          "1676: PHP_FUNCTION(snmp2_get)",
          "1677: {",
          "",
          "[Removed Lines]",
          "1671: }",
          "",
          "[Added Lines]",
          "1671: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2093: }",
          "2098: static HashTable *php_snmp_get_properties(zval *object TSRMLS_DC)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2097: {",
          "2100:  return zend_std_get_properties(object TSRMLS_CC);",
          "2101: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2330:   newval = &ztmp;",
          "2331:  }",
          "2335:  if (newval == &ztmp) {",
          "2336:   zval_dtor(newval);",
          "",
          "[Removed Lines]",
          "2333:  snmp_object->exceptions_enabled = Z_LVAL_P(newval);",
          "",
          "[Added Lines]",
          "2341:  snmp_object->exceptions_enabled = Z_LVAL_P(newval);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2399:  php_snmp_object_handlers.write_property = php_snmp_write_property;",
          "2400:  php_snmp_object_handlers.has_property = php_snmp_has_property;",
          "2401:  php_snmp_object_handlers.get_properties = php_snmp_get_properties;",
          "2404:  INIT_CLASS_ENTRY(ce, \"SNMP\", php_snmp_class_methods);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2410:  php_snmp_object_handlers.get_gc = php_snmp_get_gc;",
          "",
          "---------------"
        ],
        "ext/snmp/tests/bug72479.phpt||ext/snmp/tests/bug72479.phpt": [
          "File: ext/snmp/tests/bug72479.phpt -> ext/snmp/tests/bug72479.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72479: Use After Free Vulnerability in SNMP with GC and unserialize()",
          "3: --SKIPIF--",
          "4: <?php",
          "5: require_once(dirname(__FILE__).'/skipif.inc');",
          "6: ?>",
          "7: --FILE--",
          "8: <?php",
          "9: $arr = [1, [1, 2, 3, 4, 5], 3, 4, 5];",
          "10: $poc = 'a:3:{i:1;N;i:2;O:4:\"snmp\":1:{s:11:\"quick_print\";'.serialize($arr).'}i:1;R:7;}';",
          "11: $out = unserialize($poc);",
          "12: gc_collect_cycles();",
          "13: $fakezval = ptr2str(1122334455);",
          "14: $fakezval .= ptr2str(0);",
          "15: $fakezval .= \"\\x00\\x00\\x00\\x00\";",
          "16: $fakezval .= \"\\x01\";",
          "17: $fakezval .= \"\\x00\";",
          "18: $fakezval .= \"\\x00\\x00\";",
          "19: for ($i = 0; $i < 5; $i++) {",
          "20:     $v[$i] = $fakezval.$i;",
          "21: }",
          "22: var_dump($out[1]);",
          "24: function ptr2str($ptr)",
          "25: {",
          "26:     $out = '';",
          "27:     for ($i = 0; $i < 8; $i++) {",
          "28:         $out .= chr($ptr & 0xff);",
          "29:         $ptr >>= 8;",
          "30:     }",
          "31:     return $out;",
          "32: }",
          "33: ?>",
          "34: --EXPECT--",
          "35: int(1)",
          "",
          "---------------"
        ],
        "ext/standard/basic_functions.c||ext/standard/basic_functions.c": [
          "File: ext/standard/basic_functions.c -> ext/standard/basic_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3991: PHP_FUNCTION(getenv)",
          "3992: {",
          "3993:  char *ptr, *str;",
          "3994:  int str_len;",
          "3997:   RETURN_FALSE;",
          "3998:  }",
          "4004:  }",
          "4005: #ifdef PHP_WIN32",
          "4006:  {",
          "",
          "[Removed Lines]",
          "3996:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &str, &str_len) == FAILURE) {",
          "4001:  ptr = sapi_getenv(str, str_len TSRMLS_CC);",
          "4002:  if (ptr) {",
          "4003:   RETURN_STRING(ptr, 0);",
          "",
          "[Added Lines]",
          "3995:  zend_bool local_only = 0;",
          "3997:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|b\", &str, &str_len, &local_only) == FAILURE) {",
          "4001:  if (!local_only) {",
          "4003:   ptr = sapi_getenv(str, str_len TSRMLS_CC);",
          "4004:   if (ptr) {",
          "4005:    RETURN_STRING(ptr, 0);",
          "4006:   }",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c": [
          "File: ext/xmlrpc/libxmlrpc/simplestring.c -> ext/xmlrpc/libxmlrpc/simplestring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   Epinions.com may be contacted at feedback@epinions-inc.com",
          "",
          "[Removed Lines]",
          "9:   Copyright 2000 Epinions, Inc.",
          "11:   Subject to the following 3 conditions, Epinions, Inc.  permits you, free",
          "12:   of charge, to (a) use, copy, distribute, modify, perform and display this",
          "13:   software and associated documentation files (the \"Software\"), and (b)",
          "14:   permit others to whom the Software is furnished to do so as well.",
          "16:   1) The above copyright notice and this permission notice shall be included",
          "17:   without modification in all copies or substantial portions of the",
          "18:   Software.",
          "20:   2) THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT ANY WARRANTY OR CONDITION OF",
          "21:   ANY KIND, EXPRESS, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION ANY",
          "22:   IMPLIED WARRANTIES OF ACCURACY, MERCHANTABILITY, FITNESS FOR A PARTICULAR",
          "23:   PURPOSE OR NONINFRINGEMENT.",
          "25:   3) IN NO EVENT SHALL EPINIONS, INC. BE LIABLE FOR ANY DIRECT, INDIRECT,",
          "26:   SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES OR LOST PROFITS ARISING OUT",
          "27:   OF OR IN CONNECTION WITH THE SOFTWARE (HOWEVER ARISING, INCLUDING",
          "28:   NEGLIGENCE), EVEN IF EPINIONS, INC.  IS AWARE OF THE POSSIBILITY OF SUCH",
          "29:   DAMAGES.",
          "",
          "[Added Lines]",
          "9:   Copyright 2000 Epinions, Inc.",
          "11:   Subject to the following 3 conditions, Epinions, Inc.  permits you, free",
          "12:   of charge, to (a) use, copy, distribute, modify, perform and display this",
          "13:   software and associated documentation files (the \"Software\"), and (b)",
          "14:   permit others to whom the Software is furnished to do so as well.",
          "16:   1) The above copyright notice and this permission notice shall be included",
          "17:   without modification in all copies or substantial portions of the",
          "18:   Software.",
          "20:   2) THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT ANY WARRANTY OR CONDITION OF",
          "21:   ANY KIND, EXPRESS, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION ANY",
          "22:   IMPLIED WARRANTIES OF ACCURACY, MERCHANTABILITY, FITNESS FOR A PARTICULAR",
          "23:   PURPOSE OR NONINFRINGEMENT.",
          "25:   3) IN NO EVENT SHALL EPINIONS, INC. BE LIABLE FOR ANY DIRECT, INDIRECT,",
          "26:   SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES OR LOST PROFITS ARISING OUT",
          "27:   OF OR IN CONNECTION WITH THE SOFTWARE (HOWEVER ARISING, INCLUDING",
          "28:   NEGLIGENCE), EVEN IF EPINIONS, INC.  IS AWARE OF THE POSSIBILITY OF SUCH",
          "29:   DAMAGES.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175: #ifndef SIZE_MAX",
          "176: #define SIZE_MAX ((size_t)-1)",
          "177: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:    if(target && source) {",
          "195:       if(!target->str) {",
          "196:          simplestring_init_str(target);",
          "197:       }",
          "198:       if(target->len + add_len + 1 > target->size) {",
          "205:          target->str = (char*)realloc(target->str, newsize);",
          "207:          target->size = target->str ? newsize : 0;",
          "",
          "[Removed Lines]",
          "193: void simplestring_addn(simplestring* target, const char* source, int add_len) {",
          "200:          int newsize = target->len + add_len + 1;",
          "201:          int incr = target->size * 2;",
          "204:          newsize = newsize - (newsize % incr) + incr;",
          "",
          "[Added Lines]",
          "196: void simplestring_addn(simplestring* target, const char* source, size_t add_len) {",
          "197:    size_t newsize = target->size, incr = 0;",
          "203:       if((SIZE_MAX - add_len) < target->len || (SIZE_MAX - add_len - 1) < target->len) {",
          "205:        return;",
          "206:       }",
          "210:          newsize = target->len + add_len + 1;",
          "211:          incr = target->size * 2;",
          "214:          if (incr) {",
          "215:             newsize = newsize - (newsize % incr) + incr;",
          "216:          }",
          "217:          if(newsize < (target->len + add_len + 1)) {",
          "219:           return;",
          "220:          }",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h": [
          "File: ext/xmlrpc/libxmlrpc/simplestring.h -> ext/xmlrpc/libxmlrpc/simplestring.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: void simplestring_clear(simplestring* string);",
          "64: void simplestring_free(simplestring* string);",
          "65: void simplestring_add(simplestring* string, const char* add);",
          "68: #ifdef __cplusplus",
          "69: }",
          "",
          "[Removed Lines]",
          "66: void simplestring_addn(simplestring* string, const char* add, int add_len);",
          "",
          "[Added Lines]",
          "66: void simplestring_addn(simplestring* string, const char* add, size_t add_len);",
          "",
          "---------------"
        ],
        "ext/zip/zip_stream.c||ext/zip/zip_stream.c": [
          "File: ext/zip/zip_stream.c -> ext/zip/zip_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:    self = emalloc(sizeof(*self));",
          "231:    self->za = stream_za;",
          "233:    self->stream = NULL;",
          "234:    self->cursor = 0;",
          "235:    stream = php_stream_alloc(&php_stream_zipio_ops, self, NULL, mode);",
          "",
          "[Removed Lines]",
          "232:    self->zf = zf;",
          "",
          "[Added Lines]",
          "232:    self->zf = zf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256:            char **opened_path,",
          "257:            php_stream_context *context STREAMS_DC TSRMLS_DC)",
          "258: {",
          "261:  char *file_basename;",
          "262:  size_t file_basename_len;",
          "",
          "[Removed Lines]",
          "259:  int path_len;",
          "",
          "[Added Lines]",
          "259:  size_t path_len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "265:  struct zip *za;",
          "266:  struct zip_file *zf = NULL;",
          "267:  char *fragment;",
          "269:  int err;",
          "271:  php_stream *stream = NULL;",
          "",
          "[Removed Lines]",
          "268:  int fragment_len;",
          "",
          "[Added Lines]",
          "268:  size_t fragment_len;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "308:    self = emalloc(sizeof(*self));",
          "310:    self->za = za;",
          "312:    self->stream = NULL;",
          "313:    self->cursor = 0;",
          "314:    stream = php_stream_alloc(&php_stream_zipio_ops, self, NULL, mode);",
          "",
          "[Removed Lines]",
          "311:    self->zf = zf;",
          "",
          "[Added Lines]",
          "311:    self->zf = zf;",
          "",
          "---------------"
        ],
        "main/SAPI.c||main/SAPI.c": [
          "File: main/SAPI.c -> main/SAPI.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: callback_failed:",
          "171:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Could not call the sapi_header_callback\");",
          "172:  }",
          "174:  if (callback_name) {",
          "175:   efree(callback_name);",
          "176:  }",
          "177:  if (callback_error) {",
          "178:   efree(callback_error);",
          "180: }",
          "182: SAPI_API void sapi_handle_post(void *arg TSRMLS_DC)",
          "",
          "[Removed Lines]",
          "179:  }",
          "",
          "[Added Lines]",
          "179:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:  if (SG(request_info).headers_read == 1)",
          "408:   return;",
          "409:  SG(request_info).headers_read = 1;",
          "411:    (void (*)(void *)) sapi_free_header, 0);",
          "412:  SG(sapi_headers).send_default_content_type = 1;",
          "415:  SG(sapi_headers).http_status_line = NULL;",
          "416:  SG(sapi_headers).mimetype = NULL;",
          "417:  SG(read_post_bytes) = 0;",
          "",
          "[Removed Lines]",
          "410:  zend_llist_init(&SG(sapi_headers).headers, sizeof(sapi_header_struct),",
          "",
          "[Added Lines]",
          "410:  zend_llist_init(&SG(sapi_headers).headers, sizeof(sapi_header_struct),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "771:  sapi_header.header_len = header_line_len;",
          "775:   && !strncasecmp(header_line, \"HTTP/\", 5)) {",
          "777:   sapi_update_response_code(sapi_extract_response_code(header_line) TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "774:  if (header_line_len>=5",
          "",
          "[Added Lines]",
          "774:  if (header_line_len>=5",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "832:       sapi_update_response_code(http_response_code TSRMLS_CC);",
          "835:         strcmp(SG(request_info).request_method, \"HEAD\") &&",
          "836:         strcmp(SG(request_info).request_method, \"GET\")) {",
          "837:       sapi_update_response_code(303 TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "833:      } else if (SG(request_info).proto_num > 1000 &&",
          "834:         SG(request_info).request_method &&",
          "",
          "[Added Lines]",
          "833:      } else if (SG(request_info).proto_num > 1000 &&",
          "834:         SG(request_info).request_method &&",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1021: SAPI_API char *sapi_getenv(char *name, size_t name_len TSRMLS_DC)",
          "1022: {",
          "1024:   char *value, *tmp = sapi_module.getenv(name, name_len TSRMLS_CC);",
          "1025:   if (tmp) {",
          "1026:    value = estrdup(tmp);",
          "",
          "[Removed Lines]",
          "1023:  if (sapi_module.getenv) {",
          "",
          "[Added Lines]",
          "1023:  if (!strncasecmp(name, \"HTTP_PROXY\", name_len)) {",
          "1025:   return NULL;",
          "1026:  }",
          "1027:  if (sapi_module.getenv) {",
          "",
          "---------------"
        ],
        "main/php_variables.c||main/php_variables.c": [
          "File: main/php_variables.c -> main/php_variables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:      return;",
          "172:     }",
          "175:    }",
          "177:    if (!index) {",
          "",
          "[Removed Lines]",
          "174:     new_idx_len = strlen(index_s);",
          "",
          "[Added Lines]",
          "174:     new_idx_len = strlen(index_s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:   Z_ADDREF_P(argc);",
          "603:   zend_hash_update(&EG(symbol_table), \"argv\", sizeof(\"argv\"), &arr, sizeof(zval *), NULL);",
          "604:   zend_hash_update(&EG(symbol_table), \"argc\", sizeof(\"argc\"), &argc, sizeof(zval *), NULL);",
          "606:  if (track_vars_array) {",
          "607:   Z_ADDREF_P(arr);",
          "608:   Z_ADDREF_P(argc);",
          "",
          "[Removed Lines]",
          "605:  }",
          "",
          "[Added Lines]",
          "605:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "801:  zend_hash_update(&EG(symbol_table), name, name_len + 1, &vars, sizeof(zval *), NULL);",
          "802:  Z_ADDREF_P(vars);",
          "805: }",
          "807: static zend_bool php_auto_globals_create_server(const char *name, uint name_len TSRMLS_DC)",
          "808: {",
          "809:  if (PG(variables_order) && (strchr(PG(variables_order),'S') || strchr(PG(variables_order),'s'))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "808: static void check_http_proxy(HashTable *var_table)",
          "809: {",
          "810:  if (zend_hash_exists(var_table, \"HTTP_PROXY\", sizeof(\"HTTP_PROXY\"))) {",
          "811:   char *local_proxy = getenv(\"HTTP_PROXY\");",
          "813:   if (!local_proxy) {",
          "814:    zend_hash_del(var_table, \"HTTP_PROXY\", sizeof(\"HTTP_PROXY\"));",
          "815:   } else {",
          "816:    zval *local_zval;",
          "817:    ALLOC_INIT_ZVAL(local_zval);",
          "818:    ZVAL_STRING(local_zval, local_proxy, 1);",
          "819:    zend_hash_update(var_table, \"HTTP_PROXY\", sizeof(\"HTTP_PROXY\"), &local_zval, sizeof(zval **), NULL);",
          "820:   }",
          "821:  }",
          "822: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "836:   PG(http_globals)[TRACK_VARS_SERVER] = server_vars;",
          "837:  }",
          "839:  zend_hash_update(&EG(symbol_table), name, name_len + 1, &PG(http_globals)[TRACK_VARS_SERVER], sizeof(zval *), NULL);",
          "840:  Z_ADDREF_P(PG(http_globals)[TRACK_VARS_SERVER]);",
          "843: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856:  check_http_proxy(Z_ARRVAL_P(PG(http_globals)[TRACK_VARS_SERVER]));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "852:   zval_ptr_dtor(&PG(http_globals)[TRACK_VARS_ENV]);",
          "853:  }",
          "854:  PG(http_globals)[TRACK_VARS_ENV] = env_vars;",
          "856:  if (PG(variables_order) && (strchr(PG(variables_order),'E') || strchr(PG(variables_order),'e'))) {",
          "857:   php_import_environment_variables(PG(http_globals)[TRACK_VARS_ENV] TSRMLS_CC);",
          "858:  }",
          "860:  zend_hash_update(&EG(symbol_table), name, name_len + 1, &PG(http_globals)[TRACK_VARS_ENV], sizeof(zval *), NULL);",
          "861:  Z_ADDREF_P(PG(http_globals)[TRACK_VARS_ENV]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "878:  check_http_proxy(Z_ARRVAL_P(PG(http_globals)[TRACK_VARS_ENV]));",
          "",
          "---------------"
        ]
      }
    }
  ]
}