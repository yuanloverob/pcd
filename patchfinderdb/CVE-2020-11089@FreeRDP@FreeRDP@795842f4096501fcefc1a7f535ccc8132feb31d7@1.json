{
  "cve_id": "CVE-2020-11089",
  "cve_desc": "In FreeRDP before 2.1.0, there is an out-of-bound read in irp functions (parallel_process_irp_create, serial_process_irp_create, drive_process_irp_write, printer_process_irp_write, rdpei_recv_pdu, serial_process_irp_write). This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "795842f4096501fcefc1a7f535ccc8132feb31d7",
  "patch_info": {
    "commit_hash": "795842f4096501fcefc1a7f535ccc8132feb31d7",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/795842f4096501fcefc1a7f535ccc8132feb31d7",
    "files": [
      "channels/parallel/client/parallel_main.c"
    ],
    "message": "Fixed oob read in parallel_process_irp_create",
    "before_after_code_files": [
      "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
    ]
  },
  "patch_diff": {
    "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
      "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "83: {",
      "84:  char* path = NULL;",
      "85:  int status;",
      "86:  UINT32 PathLength;",
      "90:  Stream_Read_UINT32(irp->input, PathLength);",
      "94:  if (status < 1)",
      "95:   if (!(path = (char*)calloc(1, 1)))",
      "",
      "[Removed Lines]",
      "87:  Stream_Seek(irp->input, 28);",
      "91:  status = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer(irp->input), PathLength / 2,",
      "92:                              &path, 0, NULL, NULL);",
      "",
      "[Added Lines]",
      "86:  WCHAR* ptr;",
      "88:  if (!Stream_SafeSeek(irp->input, 28))",
      "89:   return ERROR_INVALID_DATA;",
      "92:  if (Stream_GetRemainingLength(irp->input) < 4)",
      "93:   return ERROR_INVALID_DATA;",
      "95:  ptr = (WCHAR*)Stream_Pointer(irp->input);",
      "96:  if (!Stream_SafeSeek(irp->input, PathLength))",
      "97:   return ERROR_INVALID_DATA;",
      "98:  status = ConvertFromUnicode(CP_UTF8, 0, ptr, PathLength / 2, &path, 0, NULL, NULL);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a167f3b779aee4012e8d3cccbbd2ffea8a41b2d3",
      "candidate_info": {
        "commit_hash": "a167f3b779aee4012e8d3cccbbd2ffea8a41b2d3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a167f3b779aee4012e8d3cccbbd2ffea8a41b2d3",
        "files": [
          "libfreerdp/codec/progressive.c"
        ],
        "message": "Fixed possible int overflow.",
        "before_after_code_files": [
          "libfreerdp/codec/progressive.c||libfreerdp/codec/progressive.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/progressive.c||libfreerdp/codec/progressive.c": [
          "File: libfreerdp/codec/progressive.c -> libfreerdp/codec/progressive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1920:                                                       UINT16 blockType, UINT32 blockLen,",
          "1921:                                                       PROGRESSIVE_BLOCK_REGION* region)",
          "1922: {",
          "1925:  memset(region, 0, sizeof(PROGRESSIVE_BLOCK_REGION));",
          "1926:  if (Stream_GetRemainingLength(s) < 12)",
          "",
          "[Removed Lines]",
          "1923:  size_t offset, len;",
          "",
          "[Added Lines]",
          "1923:  size_t len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1965:  }",
          "1967:  len = Stream_GetRemainingLength(s);",
          "1970:  {",
          "1971:   WLog_Print(progressive->log, WLOG_ERROR, \"ProgressiveRegion data short for region->rects\");",
          "1972:   return -1015;",
          "1973:  }",
          "1977:  {",
          "1978:   WLog_Print(progressive->log, WLOG_ERROR, \"ProgressiveRegion data short for region->cQuant\");",
          "1979:   return -1018;",
          "1980:  }",
          "1984:  {",
          "1985:   WLog_Print(progressive->log, WLOG_ERROR,",
          "1986:              \"ProgressiveRegion data short for region->cProgQuant\");",
          "1987:   return -1021;",
          "1988:  }",
          "1992:  {",
          "1993:   WLog_Print(progressive->log, WLOG_ERROR, \"ProgressiveRegion data short for region->tiles\");",
          "1994:   return -1024;",
          "1995:  }",
          "1997:  return 0;",
          "1998: }",
          "",
          "[Removed Lines]",
          "1968:  offset = (region->numRects * 8);",
          "1969:  if (len < offset)",
          "1975:  offset += (region->numQuant * 5);",
          "1976:  if (len < offset)",
          "1982:  offset += (region->numProgQuant * 16);",
          "1983:  if (len < offset)",
          "1990:  offset += region->tileDataSize;",
          "1991:  if (len < offset)",
          "",
          "[Added Lines]",
          "1968:  if (len / 8 < region->numRects)",
          "1973:  len -= region->numRects * 8ULL;",
          "1975:  if (len / 5 < region->numQuant)",
          "1980:  len -= region->numQuant * 5ULL;",
          "1982:  if (len / 16 < region->numProgQuant)",
          "1988:  len -= region->numProgQuant * 16ULL;",
          "1990:  if (len < region->tileDataSize)",
          "1995:  len -= region->tileDataSize;",
          "1996:  if (len > 0)",
          "1997:   WLog_Print(progressive->log, WLOG_DEBUG,",
          "1998:              \"Unused byes detected, %\" PRIuz \" bytes not processed\", len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dffd893dc5874b63c99777d7df147e37c770fc92",
      "candidate_info": {
        "commit_hash": "dffd893dc5874b63c99777d7df147e37c770fc92",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/dffd893dc5874b63c99777d7df147e37c770fc92",
        "files": [
          "winpr/libwinpr/utils/image.c"
        ],
        "message": "Fixed integer overflow in winpr_image_bitmap_read_buffer\n\nThanks to hac425",
        "before_after_code_files": [
          "winpr/libwinpr/utils/image.c||winpr/libwinpr/utils/image.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/image.c||winpr/libwinpr/utils/image.c": [
          "File: winpr/libwinpr/utils/image.c -> winpr/libwinpr/utils/image.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:  image->type = WINPR_IMAGE_BITMAP;",
          "343:   goto fail;",
          "346:  image->width = bi.biWidth;",
          "348:  if (bi.biHeight < 0)",
          "",
          "[Removed Lines]",
          "342:  if (Stream_Capacity(s) < bf.bfOffBits + bi.biSizeImage)",
          "345:  Stream_SetPosition(s, bf.bfOffBits);",
          "",
          "[Added Lines]",
          "342:  if (Stream_GetPosition(s) > bf.bfOffBits)",
          "343:   goto fail;",
          "344:  if (!Stream_SafeSeek(s, bf.bfOffBits - Stream_GetPosition(s)))",
          "345:   goto fail;",
          "346:  if (Stream_GetRemainingCapacity(s) < bi.biSizeImage)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "363d7046dfec4003b91aecf7867e3b05905f3843",
      "candidate_info": {
        "commit_hash": "363d7046dfec4003b91aecf7867e3b05905f3843",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/363d7046dfec4003b91aecf7867e3b05905f3843",
        "files": [
          "libfreerdp/codec/clear.c"
        ],
        "message": "Fixed oob read in clear_decompress_subcode_rlex\n\nFixed length checks before stream read.\nThanks to hac425 CVE-2020-11040",
        "before_after_code_files": [
          "libfreerdp/codec/clear.c||libfreerdp/codec/clear.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/clear.c||libfreerdp/codec/clear.c": [
          "File: libfreerdp/codec/clear.c -> libfreerdp/codec/clear.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:  UINT32 i;",
          "131:  UINT32 pixelCount;",
          "132:  UINT32 bitmapDataOffset;",
          "134:  UINT32 numBits;",
          "135:  BYTE startIndex;",
          "136:  BYTE stopIndex;",
          "",
          "[Removed Lines]",
          "133:  UINT32 pixelIndex;",
          "",
          "[Added Lines]",
          "133:  size_t pixelIndex;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   return FALSE;",
          "147:  }",
          "149:  Stream_Read_UINT8(s, paletteCount);",
          "150:  bitmapDataOffset = 1 + (paletteCount * 3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:  if (Stream_GetRemainingLength(s) < 1)",
          "150:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:   return FALSE;",
          "156:  }",
          "158:  for (i = 0; i < paletteCount; i++)",
          "159:  {",
          "160:   BYTE r, g, b;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:  if (Stream_GetRemainingLength(s) < 3ULL * paletteCount)",
          "161:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:  if (pixelIndex != pixelCount)",
          "301:  {",
          "303:   return FALSE;",
          "304:  }",
          "",
          "[Removed Lines]",
          "302:   WLog_ERR(TAG, \"pixelIndex %\" PRIu32 \" != pixelCount %\" PRIu32 \"\", pixelIndex, pixelCount);",
          "",
          "[Added Lines]",
          "307:   WLog_ERR(TAG, \"pixelIndex %\" PRIdz \" != pixelCount %\" PRIu32 \"\", pixelIndex, pixelCount);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afdffac4b5a9faef40e74f4ee4fc2e5b03a830af",
      "candidate_info": {
        "commit_hash": "afdffac4b5a9faef40e74f4ee4fc2e5b03a830af",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/afdffac4b5a9faef40e74f4ee4fc2e5b03a830af",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
        ],
        "message": "Fixed oob read in ntlm_read_ntlm_v2_response",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: static int ntlm_read_ntlm_v2_client_challenge(wStream* s, NTLMv2_CLIENT_CHALLENGE* challenge)",
          "125: {",
          "126:  size_t size;",
          "127:  Stream_Read_UINT8(s, challenge->RespType);",
          "128:  Stream_Read_UINT8(s, challenge->HiRespType);",
          "129:  Stream_Read_UINT16(s, challenge->Reserved1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  if (Stream_GetRemainingLength(s) < 28)",
          "128:   return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164: int ntlm_read_ntlm_v2_response(wStream* s, NTLMv2_RESPONSE* response)",
          "165: {",
          "166:  Stream_Read(s, response->Response, 16);",
          "167:  return ntlm_read_ntlm_v2_client_challenge(s, &(response->Challenge));",
          "168: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:  if (Stream_GetRemainingLength(s) < 16)",
          "170:   return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66d3b77d88326fc72bc000249b4ae351d2c07482",
      "candidate_info": {
        "commit_hash": "66d3b77d88326fc72bc000249b4ae351d2c07482",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/66d3b77d88326fc72bc000249b4ae351d2c07482",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "update_decompress_brush: explicit output length checks\n\nThe output length was just assumed to be >= 256 bytes, with this\ncommit it is explicitly checked.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2496:  return TRUE;",
          "2497: }",
          "2499: {",
          "2501:  UINT32 x, y, k;",
          "2502:  BYTE byte = 0;",
          "2509:   return FALSE;",
          "2511:  for (y = 7; y >= 0; y--)",
          "2512:  {",
          "2513:   for (x = 0; x < 8; x++)",
          "2514:   {",
          "2515:    if ((x % 4) == 0)",
          "2516:     Stream_Read_UINT8(s, byte);",
          "",
          "[Removed Lines]",
          "2498: static BOOL update_decompress_brush(wStream* s, BYTE* output, BYTE bpp)",
          "2500:  UINT32 index;",
          "2503:  BYTE* palette;",
          "2504:  UINT32 bytesPerPixel;",
          "2505:  palette = Stream_Pointer(s) + 16;",
          "2506:  bytesPerPixel = ((bpp + 1) / 8);",
          "2508:  if (Stream_GetRemainingLength(s) < 16 + 7 * bytesPerPixel) // 64 / 4",
          "",
          "[Added Lines]",
          "2498: static BOOL update_decompress_brush(wStream* s, BYTE* output, size_t outSize, BYTE bpp)",
          "2502:  const BYTE* palette = Stream_Pointer(s) + 16;",
          "2503:  const UINT32 bytesPerPixel = ((bpp + 1) / 8);",
          "2505:  if (!Stream_SafeSeek(s, 16ULL + 7ULL * bytesPerPixel)) // 64 / 4",
          "2512:    UINT32 index;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2520:    for (k = 0; k < bytesPerPixel; k++)",
          "2521:    {",
          "2523:    }",
          "2524:   }",
          "2525:  }",
          "2530:  return TRUE;",
          "2531: }",
          "2532: static BOOL update_compress_brush(wStream* s, const BYTE* input, BYTE bpp)",
          "",
          "[Removed Lines]",
          "2522:     output[((y * 8 + x) * bytesPerPixel) + k] = palette[(index * bytesPerPixel) + k];",
          "2528:  Stream_Seek(s, 7 * bytesPerPixel);",
          "",
          "[Added Lines]",
          "2520:     const size_t dstIndex = ((y * 8 + x) * bytesPerPixel) + k;",
          "2521:     const size_t srcIndex = (index * bytesPerPixel) + k;",
          "2522:     if (dstIndex >= outSize)",
          "2523:      return FALSE;",
          "2524:     output[dstIndex] = palette[srcIndex];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2590:    if (compressed != FALSE)",
          "2591:    {",
          "2594:      goto fail;",
          "2595:    }",
          "2596:    else",
          "",
          "[Removed Lines]",
          "2593:     if (!update_decompress_brush(s, cache_brush->data, cache_brush->bpp))",
          "",
          "[Added Lines]",
          "2592:     if (!update_decompress_brush(s, cache_brush->data, sizeof(cache_brush->data),",
          "2593:                                  cache_brush->bpp))",
          "",
          "---------------"
        ]
      }
    }
  ]
}