{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eb8305bbc724cea443997194514eacf5b626923c",
      "candidate_info": {
        "commit_hash": "eb8305bbc724cea443997194514eacf5b626923c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eb8305bbc724cea443997194514eacf5b626923c",
        "files": [
          "ext/misc/cksumvfs.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a compiler warning in cksumvfs.c.\n\nFossilOrigin-Name: 68033bcade87e6046f4c0a49936d63ce531c680c1def98fae02afa0c79db2c7f",
        "before_after_code_files": [
          "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c": [
          "File: ext/misc/cksumvfs.c -> ext/misc/cksumvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:     ){",
          "413:       u8 cksum[8];",
          "414:       cksmCompute((u8*)zBuf, iAmt-8, cksum);",
          "416:         sqlite3_log(SQLITE_IOERR_DATA,",
          "417:            \"checksum fault offset %lld of \\\"%s\\\"\",",
          "418:            iOfst, p->zFName);",
          "",
          "[Removed Lines]",
          "415:       if( memcmp(zBuf+iAmt-8, cksum, 8)!=0 ){",
          "",
          "[Added Lines]",
          "415:       if( memcmp((u8*)zBuf+iAmt-8, cksum, 8)!=0 ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8eee591d3cb9fadfd5cac5543bd66ef9cb371a72d3ad3241fb3bfd67fb216eda",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05e8c5407f5d774c7c7947936a3a44f332fdcf81",
      "candidate_info": {
        "commit_hash": "05e8c5407f5d774c7c7947936a3a44f332fdcf81",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/05e8c5407f5d774c7c7947936a3a44f332fdcf81",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Remove an ALWAYS on a branch for improved database corruption detection in btree.c:freeSpace().  Test case found by dbsqlfuzz.\n\nFossilOrigin-Name: 54bf04811951db6c894f272f870e3e41f8f5e05a25c1115efbbdbd0d8bba54be",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 72911fb1b010ae093a161b9c0d21cbdedcbc1f924a55f12227fbe342bd978e08",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1731:   }else{",
          "1732:     while( (iFreeBlk = get2byte(&data[iPtr]))<iStart ){",
          "1733:       if( iFreeBlk<iPtr+4 ){",
          "1735:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1736:       }",
          "1737:       iPtr = iFreeBlk;",
          "",
          "[Removed Lines]",
          "1734:         if( ALWAYS(iFreeBlk==0) ) break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e5f7fef333219411606e0b78b2fcaf7f0975266",
      "candidate_info": {
        "commit_hash": "3e5f7fef333219411606e0b78b2fcaf7f0975266",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e5f7fef333219411606e0b78b2fcaf7f0975266",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Modify the parse.sql output file from Lemon so that the RULE table contains a column with the complete text of the rule.\n\nFossilOrigin-Name: 329cbb372d4d77f774f01a87d104c40ef42d713afbe76195b65f5ca205c5ea7b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 062e00c4d7e30155299339eaefe6cbe01953894baebf0af6d7ab3295b7436eb7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4222:     fprintf(sql,",
          "4223:       \"CREATE TABLE rule(\\n\"",
          "4224:       \"  ruleid INTEGER PRIMARY KEY,\\n\"",
          "4226:       \");\\n\"",
          "4227:       \"CREATE TABLE rulerhs(\\n\"",
          "4228:       \"  ruleid INTEGER REFERENCES rule(ruleid),\\n\"",
          "",
          "[Removed Lines]",
          "4225:       \"  lhs INTEGER REFERENCES symbol(id)\\n\"",
          "",
          "[Added Lines]",
          "4225:       \"  lhs INTEGER REFERENCES symbol(id),\\n\"",
          "4226:       \"  txt TEXT\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4232:     );",
          "4233:     for(i=0, rp=lemp->rule; rp; rp=rp->next, i++){",
          "4234:       assert( i==rp->iRule );",
          "4238:       fprintf(sql,",
          "4240:         rp->iRule, rp->lhs->index",
          "4241:       );",
          "4242:       for(j=0; j<rp->nrhs; j++){",
          "4243:         struct symbol *sp = rp->rhs[j];",
          "4244:         if( sp->type!=MULTITERMINAL ){",
          "",
          "[Removed Lines]",
          "4235:       fprintf(sql, \"-- \");",
          "4236:       writeRuleText(sql, rp);",
          "4237:       fprintf(sql, \"\\n\");",
          "4239:         \"INSERT INTO rule(ruleid,lhs)VALUES(%d,%d);\\n\",",
          "",
          "[Added Lines]",
          "4237:         \"INSERT INTO rule(ruleid,lhs)VALUES(%d,%d,'\",",
          "4240:       writeRuleText(sql, rp);",
          "4241:       fprintf(sql,\"');\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "218da8c6f1258a04c9ecd3e4c5f1a52db13e59ee",
      "candidate_info": {
        "commit_hash": "218da8c6f1258a04c9ecd3e4c5f1a52db13e59ee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/218da8c6f1258a04c9ecd3e4c5f1a52db13e59ee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/os_unix.c",
          "src/sqlite.h.in",
          "src/wal.c"
        ],
        "message": "Enhancements to the SQLITE_ENABLE_SETLK_TIMEOUT compile-time option to avoid rare deadlocks on recovery.\n\nFossilOrigin-Name: 06885e9aa4e430d10f4b32105bcf405c65fd6f7b4cd451baf56fb4f12f408963",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/os_unix.c||src/os_unix.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 076658e5d21d9284448f41312b83a6c3d25394c2bfa088ef6cdfe1dc60277856",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1569: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1570:   if( sqlite3OsFileControl(pFile,SQLITE_FCNTL_LOCK_TIMEOUT,&tmout)==SQLITE_OK ){",
          "1571:     if( count ){",
          "1575:     }else{",
          "1576:       return 1;",
          "1577:     }",
          "",
          "[Removed Lines]",
          "1572:       tmout = 0;",
          "1573:       sqlite3OsFileControl(pFile, SQLITE_FCNTL_LOCK_TIMEOUT, &tmout);",
          "1574:       return 0;",
          "",
          "[Added Lines]",
          "1582:       if( tmout ){",
          "1583:         tmout = 0;",
          "1584:         sqlite3OsFileControl(pFile, SQLITE_FCNTL_LOCK_TIMEOUT, &tmout);",
          "1585:         return 0;",
          "1586:       }",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3995:     }",
          "3996: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3997:     case SQLITE_FCNTL_LOCK_TIMEOUT: {",
          "3998:       pFile->iBusyTimeout = *(int*)pArg;",
          "3999:       return SQLITE_OK;",
          "4000:     }",
          "4001: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3998:       int iOld = pFile->iBusyTimeout;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4817:   assert( pShmNode->hShm>=0 || pDbFd->pInode->bProcessLock==1 );",
          "4818:   assert( pShmNode->hShm<0 || pDbFd->pInode->bProcessLock==0 );",
          "4820:   mask = (1<<(ofst+n)) - (1<<ofst);",
          "4821:   assert( n>1 || mask==(1<<ofst) );",
          "4822:   sqlite3_mutex_enter(pShmNode->pShmMutex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4833: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "4834:   assert( pDbFd->iBusyTimeout==0",
          "4835:        || (flags & SQLITE_SHM_UNLOCK) || ofst==0",
          "4836:        || ((p->exclMask|p->sharedMask)&~((1<<ofst)-2))==0",
          "4837:   );",
          "4838: #endif",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1140:   u32 aFrameCksum[2] = {0, 0};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1143: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1144:   int tmout = 0;",
          "1145:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "1146: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2758: int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){",
          "2762: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2763:   int bChanged = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2766: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2767:   int tmout = 0;",
          "2768: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2767:   }",
          "2768: #endif",
          "2770:   do{",
          "2771:     rc = walTryBeginRead(pWal, pChanged, 0, ++cnt);",
          "2772:   }while( rc==WAL_RETRY );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2778: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2781:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "2782: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2775:   testcase( rc==SQLITE_PROTOCOL );",
          "2776:   testcase( rc==SQLITE_OK );",
          "2778: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2779:   if( rc==SQLITE_OK ){",
          "2780:     if( pSnapshot && memcmp(pSnapshot, &pWal->hdr, sizeof(WalIndexHdr))!=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2792: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2797:   if( rc==SQLITE_OK ){",
          "2798:     sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "2799:   }",
          "2800: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26c48d2aab82ca8bb0f1fcb8b69d2163999ad15e",
      "candidate_info": {
        "commit_hash": "26c48d2aab82ca8bb0f1fcb8b69d2163999ad15e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/26c48d2aab82ca8bb0f1fcb8b69d2163999ad15e",
        "files": [
          "ext/fts3/fts3Int.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem building fts3 separately from the amalgamation.\n\nFossilOrigin-Name: 2a167cfbb2abd76e1b33116b671e58a767fc972dd79bee0004aad09a1dd2b487",
        "before_after_code_files": [
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: #define LARGEST_INT64  (0xffffffff|(((i64)0x7fffffff)<<32))",
          "200: #define SMALLEST_INT64 (((i64)-1) - LARGEST_INT64)",
          "204: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202: #define deliberate_fall_through",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 33cd5341ac2ec84c86fbd3371f15c9153f83c1739f85dd8c3956fe2093d49afd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}