{
  "cve_id": "CVE-2017-15537",
  "cve_desc": "The x86/fpu (Floating Point Unit) subsystem in the Linux kernel before 4.13.5, when a processor supports the xsave feature but not the xsaves feature, does not correctly handle attempts to set reserved bits in the xstate header via the ptrace() or rt_sigreturn() system call, allowing local users to read the FPU registers of other processes on the system, related to arch/x86/kernel/fpu/regset.c and arch/x86/kernel/fpu/signal.c.",
  "repo": "torvalds/linux",
  "patch_hash": "814fb7bb7db5433757d76f4c4502c96fc53b0b5e",
  "patch_info": {
    "commit_hash": "814fb7bb7db5433757d76f4c4502c96fc53b0b5e",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/814fb7bb7db5433757d76f4c4502c96fc53b0b5e",
    "files": [
      "arch/x86/kernel/fpu/regset.c",
      "arch/x86/kernel/fpu/signal.c"
    ],
    "message": "x86/fpu: Don't let userspace set bogus xcomp_bv\n\nOn x86, userspace can use the ptrace() or rt_sigreturn() system calls to\nset a task's extended state (xstate) or \"FPU\" registers.  ptrace() can\nset them for another task using the PTRACE_SETREGSET request with\nNT_X86_XSTATE, while rt_sigreturn() can set them for the current task.\nIn either case, registers can be set to any value, but the kernel\nassumes that the XSAVE area itself remains valid in the sense that the\nCPU can restore it.\n\nHowever, in the case where the kernel is using the uncompacted xstate\nformat (which it does whenever the XSAVES instruction is unavailable),\nit was possible for userspace to set the xcomp_bv field in the\nxstate_header to an arbitrary value.  However, all bits in that field\nare reserved in the uncompacted case, so when switching to a task with\nnonzero xcomp_bv, the XRSTOR instruction failed with a #GP fault.  This\ncaused the WARN_ON_FPU(err) in copy_kernel_to_xregs() to be hit.  In\naddition, since the error is otherwise ignored, the FPU registers from\nthe task previously executing on the CPU were leaked.\n\nFix the bug by checking that the user-supplied value of xcomp_bv is 0 in\nthe uncompacted case, and returning an error otherwise.\n\nThe reason for validating xcomp_bv rather than simply overwriting it\nwith 0 is that we want userspace to see an error if it (incorrectly)\nprovides an XSAVE area in compacted format rather than in uncompacted\nformat.\n\nNote that as before, in case of error we clear the task's FPU state.\nThis is perhaps non-ideal, especially for PTRACE_SETREGSET; it might be\nbetter to return an error before changing anything.  But it seems the\n\"clear on error\" behavior is fine for now, and it's a little tricky to\ndo otherwise because it would mean we couldn't simply copy the full\nuserspace state into kernel memory in one __copy_from_user().\n\nThis bug was found by syzkaller, which hit the above-mentioned\nWARN_ON_FPU():\n\n    WARNING: CPU: 1 PID: 0 at ./arch/x86/include/asm/fpu/internal.h:373 __switch_to+0x5b5/0x5d0\n    CPU: 1 PID: 0 Comm: swapper/1 Not tainted 4.13.0 #453\n    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011\n    task: ffff9ba2bc8e42c0 task.stack: ffffa78cc036c000\n    RIP: 0010:__switch_to+0x5b5/0x5d0\n    RSP: 0000:ffffa78cc08bbb88 EFLAGS: 00010082\n    RAX: 00000000fffffffe RBX: ffff9ba2b8bf2180 RCX: 00000000c0000100\n    RDX: 00000000ffffffff RSI: 000000005cb10700 RDI: ffff9ba2b8bf36c0\n    RBP: ffffa78cc08bbbd0 R08: 00000000929fdf46 R09: 0000000000000001\n    R10: 0000000000000000 R11: 0000000000000000 R12: ffff9ba2bc8e42c0\n    R13: 0000000000000000 R14: ffff9ba2b8bf3680 R15: ffff9ba2bf5d7b40\n    FS:  00007f7e5cb10700(0000) GS:ffff9ba2bf400000(0000) knlGS:0000000000000000\n    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n    CR2: 00000000004005cc CR3: 0000000079fd5000 CR4: 00000000001406e0\n    Call Trace:\n    Code: 84 00 00 00 00 00 e9 11 fd ff ff 0f ff 66 0f 1f 84 00 00 00 00 00 e9 e7 fa ff ff 0f ff 66 0f 1f 84 00 00 00 00 00 e9 c2 fa ff ff <0f> ff 66 0f 1f 84 00 00 00 00 00 e9 d4 fc ff ff 66 66 2e 0f 1f\n\nHere is a C reproducer.  The expected behavior is that the program spin\nforever with no output.  However, on a buggy kernel running on a\nprocessor with the \"xsave\" feature but without the \"xsaves\" feature\n(e.g. Sandy Bridge through Broadwell for Intel), within a second or two\nthe program reports that the xmm registers were corrupted, i.e. were not\nrestored correctly.  With CONFIG_X86_DEBUG_FPU=y it also hits the above\nkernel warning.\n\n    #define _GNU_SOURCE\n    #include <stdbool.h>\n    #include <inttypes.h>\n    #include <linux/elf.h>\n    #include <stdio.h>\n    #include <sys/ptrace.h>\n    #include <sys/uio.h>\n    #include <sys/wait.h>\n    #include <unistd.h>\n\n    int main(void)\n    {\n        int pid = fork();\n        uint64_t xstate[512];\n        struct iovec iov = { .iov_base = xstate, .iov_len = sizeof(xstate) };\n\n        if (pid == 0) {\n            bool tracee = true;\n            for (int i = 0; i < sysconf(_SC_NPROCESSORS_ONLN) && tracee; i++)\n                tracee = (fork() != 0);\n            uint32_t xmm0[4] = { [0 ... 3] = tracee ? 0x00000000 : 0xDEADBEEF };\n            asm volatile(\"   movdqu %0, %%xmm0\\n\"\n                         \"   mov %0, %%rbx\\n\"\n                         \"1: movdqu %%xmm0, %0\\n\"\n                         \"   mov %0, %%rax\\n\"\n                         \"   cmp %%rax, %%rbx\\n\"\n                         \"   je 1b\\n\"\n                         : \"+m\" (xmm0) : : \"rax\", \"rbx\", \"xmm0\");\n            printf(\"BUG: xmm registers corrupted!  tracee=%d, xmm0=%08X%08X%08X%08X\\n\",\n                   tracee, xmm0[0], xmm0[1], xmm0[2], xmm0[3]);\n        } else {\n            usleep(100000);\n            ptrace(PTRACE_ATTACH, pid, 0, 0);\n            wait(NULL);\n            ptrace(PTRACE_GETREGSET, pid, NT_X86_XSTATE, &iov);\n            xstate[65] = -1;\n            ptrace(PTRACE_SETREGSET, pid, NT_X86_XSTATE, &iov);\n            ptrace(PTRACE_CONT, pid, 0, 0);\n            wait(NULL);\n        }\n        return 1;\n    }\n\nNote: the program only tests for the bug using the ptrace() system call.\nThe bug can also be reproduced using the rt_sigreturn() system call, but\nonly when called from a 32-bit program, since for 64-bit programs the\nkernel restores the FPU state from the signal frame by doing XRSTOR\ndirectly from userspace memory (with proper error checking).\n\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nSigned-off-by: Eric Biggers <ebiggers@google.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nReviewed-by: Rik van Riel <riel@redhat.com>\nAcked-by: Dave Hansen <dave.hansen@linux.intel.com>\nCc: <stable@vger.kernel.org> [v3.17+]\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Eric Biggers <ebiggers3@gmail.com>\nCc: Fenghua Yu <fenghua.yu@intel.com>\nCc: Kevin Hao <haokexin@gmail.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Michael Halcrow <mhalcrow@google.com>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Wanpeng Li <wanpeng.li@hotmail.com>\nCc: Yu-cheng Yu <yu-cheng.yu@intel.com>\nCc: kernel-hardening@lists.openwall.com\nFixes: 0b29643a5843 (\"x86/xsaves: Change compacted format xsave area header\")\nLink: http://lkml.kernel.org/r/20170922174156.16780-2-ebiggers3@gmail.com\nLink: http://lkml.kernel.org/r/20170923130016.21448-25-mingo@kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
    "before_after_code_files": [
      "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c",
      "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c"
    ]
  },
  "patch_diff": {
    "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c": [
      "File: arch/x86/kernel/fpu/regset.c -> arch/x86/kernel/fpu/regset.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "141:    ret = copy_user_to_xstate(xsave, ubuf);",
      "142:  } else {",
      "143:   ret = user_regset_copyin(&pos, &count, &kbuf, &ubuf, xsave, 0, -1);",
      "144:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "146:   if (!ret && xsave->header.xcomp_bv)",
      "147:    ret = -EINVAL;",
      "",
      "---------------"
    ],
    "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c": [
      "File: arch/x86/kernel/fpu/signal.c -> arch/x86/kernel/fpu/signal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "325:   fpu__drop(fpu);",
      "328:    err = copy_user_to_xstate(&fpu->state.xsave, buf_fx);",
      "330:    err = __copy_from_user(&fpu->state.xsave, buf_fx, state_size);",
      "332:   if (err || __copy_from_user(&env, buf, sizeof(env))) {",
      "333:    fpstate_init(&fpu->state);",
      "334:    trace_x86_fpu_init_state(fpu);",
      "",
      "[Removed Lines]",
      "327:   if (using_compacted_format())",
      "329:   else",
      "",
      "[Added Lines]",
      "327:   if (using_compacted_format()) {",
      "329:   } else {",
      "333:    if (!err && state_size > offsetof(struct xregs_state, header) && fpu->state.xsave.header.xcomp_bv)",
      "334:     err = -EINVAL;",
      "335:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b9094c688f807c110a2dab6f6edc5876bfa7b0b",
      "candidate_info": {
        "commit_hash": "7b9094c688f807c110a2dab6f6edc5876bfa7b0b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7b9094c688f807c110a2dab6f6edc5876bfa7b0b",
        "files": [
          "arch/x86/include/asm/fpu/xstate.h",
          "arch/x86/kernel/fpu/regset.c",
          "arch/x86/kernel/fpu/signal.c",
          "arch/x86/kernel/fpu/xstate.c"
        ],
        "message": "x86/fpu: Remove 'kbuf' parameter from the copy_user_to_xstate() API\n\nNo change in functionality.\n\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: Eric Biggers <ebiggers3@gmail.com>\nCc: Fenghua Yu <fenghua.yu@intel.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Rik van Riel <riel@redhat.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Yu-cheng Yu <yu-cheng.yu@intel.com>\nLink: http://lkml.kernel.org/r/20170923130016.21448-14-mingo@kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "before_after_code_files": [
          "arch/x86/include/asm/fpu/xstate.h||arch/x86/include/asm/fpu/xstate.h",
          "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c",
          "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c",
          "arch/x86/kernel/fpu/xstate.c||arch/x86/kernel/fpu/xstate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c",
            "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c"
          ],
          "candidate": [
            "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c",
            "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/include/asm/fpu/xstate.h||arch/x86/include/asm/fpu/xstate.h": [
          "File: arch/x86/include/asm/fpu/xstate.h -> arch/x86/include/asm/fpu/xstate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: int copy_xstate_to_kernel(void *kbuf, struct xregs_state *xsave, unsigned int offset, unsigned int size);",
          "52: int copy_xstate_to_user(void __user *ubuf, struct xregs_state *xsave, unsigned int offset, unsigned int size);",
          "53: int copy_kernel_to_xstate(const void *kbuf, struct xregs_state *xsave);",
          "55: #endif",
          "",
          "[Removed Lines]",
          "54: int copy_user_to_xstate(const void *kbuf, const void __user *ubuf, struct xregs_state *xsave);",
          "",
          "[Added Lines]",
          "54: int copy_user_to_xstate(const void __user *ubuf, struct xregs_state *xsave);",
          "",
          "---------------"
        ],
        "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c": [
          "File: arch/x86/kernel/fpu/regset.c -> arch/x86/kernel/fpu/regset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:   if (kbuf)",
          "139:    ret = copy_kernel_to_xstate(kbuf, xsave);",
          "140:   else",
          "142:  } else {",
          "143:   ret = user_regset_copyin(&pos, &count, &kbuf, &ubuf, xsave, 0, -1);",
          "144:  }",
          "",
          "[Removed Lines]",
          "141:    ret = copy_user_to_xstate(kbuf, ubuf, xsave);",
          "",
          "[Added Lines]",
          "141:    ret = copy_user_to_xstate(ubuf, xsave);",
          "",
          "---------------"
        ],
        "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c": [
          "File: arch/x86/kernel/fpu/signal.c -> arch/x86/kernel/fpu/signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:   fpu__drop(fpu);",
          "334:   if (err || __copy_from_user(&env, buf, sizeof(env))) {",
          "335:    fpstate_init(&fpu->state);",
          "",
          "[Removed Lines]",
          "326:   if (using_compacted_format()) {",
          "327:    err = copy_user_to_xstate(NULL, buf_fx,",
          "328:             &fpu->state.xsave);",
          "329:   } else {",
          "330:    err = __copy_from_user(&fpu->state.xsave,",
          "331:             buf_fx, state_size);",
          "332:   }",
          "",
          "[Added Lines]",
          "326:   if (using_compacted_format())",
          "327:    err = copy_user_to_xstate(buf_fx, &fpu->state.xsave);",
          "328:   else",
          "329:    err = __copy_from_user(&fpu->state.xsave, buf_fx, state_size);",
          "",
          "---------------"
        ],
        "arch/x86/kernel/fpu/xstate.c||arch/x86/kernel/fpu/xstate.c": [
          "File: arch/x86/kernel/fpu/xstate.c -> arch/x86/kernel/fpu/xstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1147: {",
          "1148:  unsigned int offset, size;",
          "1149:  int i;",
          "",
          "[Removed Lines]",
          "1145: int copy_user_to_xstate(const void *kbuf, const void __user *ubuf,",
          "1146:        struct xregs_state *xsave)",
          "",
          "[Added Lines]",
          "1145: int copy_user_to_xstate(const void __user *ubuf, struct xregs_state *xsave)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1153:  offset = offsetof(struct xregs_state, header);",
          "1154:  size = sizeof(xfeatures);",
          "",
          "[Removed Lines]",
          "1156:  if (kbuf) {",
          "1157:   memcpy(&xfeatures, kbuf + offset, size);",
          "1158:  } else {",
          "1159:   if (__copy_from_user(&xfeatures, ubuf + offset, size))",
          "1160:    return -EFAULT;",
          "1161:  }",
          "",
          "[Added Lines]",
          "1155:  if (__copy_from_user(&xfeatures, ubuf + offset, size))",
          "1156:   return -EFAULT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1177:    offset = xstate_offsets[i];",
          "1178:    size = xstate_sizes[i];",
          "1186:   }",
          "1187:  }",
          "",
          "[Removed Lines]",
          "1180:    if (kbuf) {",
          "1181:     memcpy(dst, kbuf + offset, size);",
          "1182:    } else {",
          "1183:     if (__copy_from_user(dst, ubuf + offset, size))",
          "1184:      return -EFAULT;",
          "1185:    }",
          "",
          "[Added Lines]",
          "1175:    if (__copy_from_user(dst, ubuf + offset, size))",
          "1176:     return -EFAULT;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "656f083116a4799d8c0194976b8a2d66bf306538",
      "candidate_info": {
        "commit_hash": "656f083116a4799d8c0194976b8a2d66bf306538",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/656f083116a4799d8c0194976b8a2d66bf306538",
        "files": [
          "arch/x86/include/asm/fpu/xstate.h",
          "arch/x86/kernel/fpu/regset.c",
          "arch/x86/kernel/fpu/signal.c",
          "arch/x86/kernel/fpu/xstate.c"
        ],
        "message": "x86/fpu: Rename copyin_to_xsaves()/copyout_from_xsaves() to copy_user_to_xstate()/copy_xstate_to_user()\n\nThe 'copyin/copyout' nomenclature needlessly departs from what the modern FPU code\nuses, which is:\n\n copy_fpregs_to_fpstate()\n copy_fpstate_to_sigframe()\n copy_fregs_to_user()\n copy_fxregs_to_kernel()\n copy_fxregs_to_user()\n copy_kernel_to_fpregs()\n copy_kernel_to_fregs()\n copy_kernel_to_fxregs()\n copy_kernel_to_xregs()\n copy_user_to_fregs()\n copy_user_to_fxregs()\n copy_user_to_xregs()\n copy_xregs_to_kernel()\n copy_xregs_to_user()\n\nI.e. according to this pattern, the following rename should be done:\n\n  copyin_to_xsaves()    -> copy_user_to_xstate()\n  copyout_from_xsaves() -> copy_xstate_to_user()\n\nor, if we want to be pedantic, denote that that the user-space format is ptrace:\n\n  copyin_to_xsaves()    -> copy_user_ptrace_to_xstate()\n  copyout_from_xsaves() -> copy_xstate_to_user_ptrace()\n\nBut I'd suggest the shorter, non-pedantic name.\n\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: Eric Biggers <ebiggers3@gmail.com>\nCc: Fenghua Yu <fenghua.yu@intel.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Rik van Riel <riel@redhat.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Yu-cheng Yu <yu-cheng.yu@intel.com>\nLink: http://lkml.kernel.org/r/20170923130016.21448-2-mingo@kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "before_after_code_files": [
          "arch/x86/include/asm/fpu/xstate.h||arch/x86/include/asm/fpu/xstate.h",
          "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c",
          "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c",
          "arch/x86/kernel/fpu/xstate.c||arch/x86/kernel/fpu/xstate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c",
            "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c"
          ],
          "candidate": [
            "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c",
            "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/include/asm/fpu/xstate.h||arch/x86/include/asm/fpu/xstate.h": [
          "File: arch/x86/include/asm/fpu/xstate.h -> arch/x86/include/asm/fpu/xstate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: void *get_xsave_addr(struct xregs_state *xsave, int xstate);",
          "49: const void *get_xsave_field_ptr(int xstate_field);",
          "50: int using_compacted_format(void);",
          "52:    void __user *ubuf, struct xregs_state *xsave);",
          "54:        struct xregs_state *xsave);",
          "55: #endif",
          "",
          "[Removed Lines]",
          "51: int copyout_from_xsaves(unsigned int pos, unsigned int count, void *kbuf,",
          "53: int copyin_to_xsaves(const void *kbuf, const void __user *ubuf,",
          "",
          "[Added Lines]",
          "51: int copy_xstate_to_user(unsigned int pos, unsigned int count, void *kbuf,",
          "53: int copy_user_to_xstate(const void *kbuf, const void __user *ubuf,",
          "",
          "---------------"
        ],
        "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c": [
          "File: arch/x86/kernel/fpu/regset.c -> arch/x86/kernel/fpu/regset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:  fpu__activate_fpstate_read(fpu);",
          "94:  if (using_compacted_format()) {",
          "96:  } else {",
          "97:   fpstate_sanitize_xstate(fpu);",
          "",
          "[Removed Lines]",
          "95:   ret = copyout_from_xsaves(pos, count, kbuf, ubuf, xsave);",
          "",
          "[Added Lines]",
          "95:   ret = copy_xstate_to_user(pos, count, kbuf, ubuf, xsave);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:  fpu__activate_fpstate_write(fpu);",
          "134:  if (boot_cpu_has(X86_FEATURE_XSAVES))",
          "136:  else",
          "137:   ret = user_regset_copyin(&pos, &count, &kbuf, &ubuf, xsave, 0, -1);",
          "",
          "[Removed Lines]",
          "135:   ret = copyin_to_xsaves(kbuf, ubuf, xsave);",
          "",
          "[Added Lines]",
          "135:   ret = copy_user_to_xstate(kbuf, ubuf, xsave);",
          "",
          "---------------"
        ],
        "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c": [
          "File: arch/x86/kernel/fpu/signal.c -> arch/x86/kernel/fpu/signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:   fpu__drop(fpu);",
          "326:   if (using_compacted_format()) {",
          "328:             &fpu->state.xsave);",
          "329:   } else {",
          "330:    err = __copy_from_user(&fpu->state.xsave,",
          "",
          "[Removed Lines]",
          "327:    err = copyin_to_xsaves(NULL, buf_fx,",
          "",
          "[Added Lines]",
          "327:    err = copy_user_to_xstate(NULL, buf_fx,",
          "",
          "---------------"
        ],
        "arch/x86/kernel/fpu/xstate.c||arch/x86/kernel/fpu/xstate.c": [
          "File: arch/x86/kernel/fpu/xstate.c -> arch/x86/kernel/fpu/xstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "955:    void __user *ubuf, struct xregs_state *xsave)",
          "956: {",
          "957:  unsigned int offset, size;",
          "",
          "[Removed Lines]",
          "954: int copyout_from_xsaves(unsigned int pos, unsigned int count, void *kbuf,",
          "",
          "[Added Lines]",
          "954: int copy_xstate_to_user(unsigned int pos, unsigned int count, void *kbuf,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1027:        struct xregs_state *xsave)",
          "1028: {",
          "1029:  unsigned int offset, size;",
          "",
          "[Removed Lines]",
          "1026: int copyin_to_xsaves(const void *kbuf, const void __user *ubuf,",
          "",
          "[Added Lines]",
          "1026: int copy_user_to_xstate(const void *kbuf, const void __user *ubuf,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b11e2e18a7fc8eaa3d592c260d50c7129e094ded",
      "candidate_info": {
        "commit_hash": "b11e2e18a7fc8eaa3d592c260d50c7129e094ded",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b11e2e18a7fc8eaa3d592c260d50c7129e094ded",
        "files": [
          "arch/x86/kernel/fpu/signal.c"
        ],
        "message": "x86/fpu: Use validate_xstate_header() to validate the xstate_header in __fpu__restore_sig()\n\nTighten the checks in __fpu__restore_sig() and update comments.\n\nSigned-off-by: Eric Biggers <ebiggers@google.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: Dmitry Vyukov <dvyukov@google.com>\nCc: Eric Biggers <ebiggers3@gmail.com>\nCc: Fenghua Yu <fenghua.yu@intel.com>\nCc: Kees Cook <keescook@chromium.org>\nCc: Kevin Hao <haokexin@gmail.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Michael Halcrow <mhalcrow@google.com>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Rik van Riel <riel@redhat.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Wanpeng Li <wanpeng.li@hotmail.com>\nCc: Yu-cheng Yu <yu-cheng.yu@intel.com>\nCc: kernel-hardening@lists.openwall.com\nLink: http://lkml.kernel.org/r/20170924105913.9157-4-mingo@kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "before_after_code_files": [
          "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c"
          ],
          "candidate": [
            "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/fpu/signal.c||arch/x86/kernel/fpu/signal.c": [
          "File: arch/x86/kernel/fpu/signal.c -> arch/x86/kernel/fpu/signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:  struct xstate_header *header = &xsave->header;",
          "216:  if (use_xsave()) {",
          "",
          "[Removed Lines]",
          "218:   memset(header->reserved, 0, 48);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:   if (fx_only)",
          "225:    header->xfeatures = XFEATURE_MASK_FPSSE;",
          "226:   else",
          "228:  }",
          "230:  if (use_fxsr()) {",
          "",
          "[Removed Lines]",
          "227:    header->xfeatures &= (xfeatures_mask & xfeatures);",
          "",
          "[Added Lines]",
          "230:    header->xfeatures &= xfeatures;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "329:   } else {",
          "330:    err = __copy_from_user(&fpu->state.xsave, buf_fx, state_size);",
          "335:   }",
          "337:   if (err || __copy_from_user(&env, buf, sizeof(env))) {",
          "",
          "[Removed Lines]",
          "333:    if (!err && state_size > offsetof(struct xregs_state, header) && fpu->state.xsave.header.xcomp_bv)",
          "334:     err = -EINVAL;",
          "",
          "[Added Lines]",
          "335:    if (!err && state_size > offsetof(struct xregs_state, header))",
          "336:     err = validate_xstate_header(&fpu->state.xsave.header);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf9df81b139b6ebaec188d73758f02ca3b2110e4",
      "candidate_info": {
        "commit_hash": "cf9df81b139b6ebaec188d73758f02ca3b2110e4",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/cf9df81b139b6ebaec188d73758f02ca3b2110e4",
        "files": [
          "arch/x86/kernel/fpu/regset.c"
        ],
        "message": "x86/fpu: Use validate_xstate_header() to validate the xstate_header in xstateregs_set()\n\nTighten the checks in xstateregs_set().\n\nSigned-off-by: Eric Biggers <ebiggers@google.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: Dmitry Vyukov <dvyukov@google.com>\nCc: Eric Biggers <ebiggers3@gmail.com>\nCc: Fenghua Yu <fenghua.yu@intel.com>\nCc: Kees Cook <keescook@chromium.org>\nCc: Kevin Hao <haokexin@gmail.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Michael Halcrow <mhalcrow@google.com>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Rik van Riel <riel@redhat.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Wanpeng Li <wanpeng.li@hotmail.com>\nCc: Yu-cheng Yu <yu-cheng.yu@intel.com>\nCc: kernel-hardening@lists.openwall.com\nLink: http://lkml.kernel.org/r/20170924105913.9157-3-mingo@kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "before_after_code_files": [
          "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c"
          ],
          "candidate": [
            "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/fpu/regset.c||arch/x86/kernel/fpu/regset.c": [
          "File: arch/x86/kernel/fpu/regset.c -> arch/x86/kernel/fpu/regset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:    ret = copy_user_to_xstate(xsave, ubuf);",
          "142:  } else {",
          "143:   ret = user_regset_copyin(&pos, &count, &kbuf, &ubuf, xsave, 0, -1);",
          "148:  }",
          "159:  xsave->i387.mxcsr &= mxcsr_feature_mask;",
          "166:  return ret;",
          "167: }",
          "",
          "[Removed Lines]",
          "146:   if (!ret && xsave->header.xcomp_bv)",
          "147:    ret = -EINVAL;",
          "153:  if (ret)",
          "154:   fpstate_init(&fpu->state);",
          "160:  xsave->header.xfeatures &= xfeatures_mask;",
          "164:  memset(&xsave->header.reserved, 0, 48);",
          "",
          "[Added Lines]",
          "144:   if (!ret)",
          "145:    ret = validate_xstate_header(&xsave->header);",
          "156:  if (ret)",
          "157:   fpstate_init(&fpu->state);",
          "",
          "---------------"
        ]
      }
    }
  ]
}