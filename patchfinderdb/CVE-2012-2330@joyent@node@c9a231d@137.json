{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a7dce4785434ebb6eb259374174d9e5985c0baaa",
      "candidate_info": {
        "commit_hash": "a7dce4785434ebb6eb259374174d9e5985c0baaa",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a7dce4785434ebb6eb259374174d9e5985c0baaa",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on v0.6.15",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 6",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "31: #define NODE_PATCH_VERSION 14",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "31: #define NODE_PATCH_VERSION 15",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44daa9836b5bb4cfb8434b35bb1a12fc324223aa",
      "candidate_info": {
        "commit_hash": "44daa9836b5bb4cfb8434b35bb1a12fc324223aa",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/44daa9836b5bb4cfb8434b35bb1a12fc324223aa",
        "files": [
          "lib/vm.js"
        ],
        "message": "Wrap NodeScript binding class in JavaScript layer\n\nThis makes it easy to prevent errors where Script methods\nare called on non-script objects, resulting in Assertion failures.",
        "before_after_code_files": [
          "lib/vm.js||livm.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/vm.js||livm.js": [
          "File: lib/vm.js -> livm.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var binding = process.binding('evals');",
          "27: };",
          "",
          "[Removed Lines]",
          "24: exports.Script = binding.NodeScript;",
          "25: exports.createScript = function(code, ctx, name) {",
          "26:   return new exports.Script(code, ctx, name);",
          "29: exports.createContext = binding.NodeScript.createContext;",
          "30: exports.runInContext = binding.NodeScript.runInContext;",
          "31: exports.runInThisContext = binding.NodeScript.runInThisContext;",
          "32: exports.runInNewContext = binding.NodeScript.runInNewContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3733a85d8d1fa82ca9998fd874f16084801d5db5",
      "candidate_info": {
        "commit_hash": "3733a85d8d1fa82ca9998fd874f16084801d5db5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3733a85d8d1fa82ca9998fd874f16084801d5db5",
        "files": [
          "src/node_file.cc"
        ],
        "message": "Windows: include syscall in fs errors",
        "before_after_code_files": [
          "src/node_file.cc||src/node_file.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #define THROW_BAD_ARGS \\",
          "50:   ThrowException(Exception::TypeError(String::New(\"Bad argument\")))",
          "54: static Persistent<String> encoding_symbol;",
          "55: static Persistent<String> errno_symbol;",
          "",
          "[Removed Lines]",
          "52: typedef class ReqWrap<uv_fs_t> FSReqWrap;",
          "",
          "[Added Lines]",
          "52: class FSReqWrap: public ReqWrap<uv_fs_t> {",
          "53:  public:",
          "54:   FSReqWrap(const char* syscall)",
          "55:     : syscall_(syscall) {",
          "56:   }",
          "58:   const char* syscall() { return syscall_; }",
          "60:  private:",
          "61:   const char* syscall_;",
          "62: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     if (!req->path) {",
          "91:       argv[0] = UVException(req->errorno,",
          "92:                             NULL,",
          "93:                             NULL,",
          "94:                             static_cast<const char*>(req->path));",
          "95:     }",
          "96:   } else {",
          "",
          "[Removed Lines]",
          "89:       argv[0] = UVException(req->errorno);",
          "90:     } else {",
          "",
          "[Added Lines]",
          "102:                             req_wrap->syscall());",
          "103:     } else {",
          "104:       argv[0] = UVException(req->errorno,",
          "106:                             req_wrap->syscall(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "208: #define ASYNC_CALL(func, callback, ...)                           \\",
          "210:   int r = uv_fs_##func(uv_default_loop(), &req_wrap->req_,        \\",
          "211:       __VA_ARGS__, After);                                        \\",
          "212:   assert(r == 0);                                                 \\",
          "",
          "[Removed Lines]",
          "209:   FSReqWrap* req_wrap = new FSReqWrap();                          \\",
          "",
          "[Added Lines]",
          "222:   FSReqWrap* req_wrap = new FSReqWrap(#func);                     \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77c18d1e1b470d99af317a2b1ed4b7e9bb81d5b6",
      "candidate_info": {
        "commit_hash": "77c18d1e1b470d99af317a2b1ed4b7e9bb81d5b6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/77c18d1e1b470d99af317a2b1ed4b7e9bb81d5b6",
        "files": [
          "lib/console.js",
          "test/simple/test-console.js"
        ],
        "message": "console: throw when no such label exists in `console.timeEnd`\n\nTest included.",
        "before_after_code_files": [
          "lib/console.js||liconsole.js",
          "test/simple/test-console.js||test/simple/test-console.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/console.js||liconsole.js": [
          "File: lib/console.js -> liconsole.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: exports.timeEnd = function(label) {",
          "53:   exports.log('%s: %dms', label, duration);",
          "54: };",
          "",
          "[Removed Lines]",
          "52:   var duration = Date.now() - times[label];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-console.js||test/simple/test-console.js": [
          "File: test/simple/test-console.js -> test/simple/test-console.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: assert.equal(\"{ slashes: '\\\\\\\\\\\\\\\\' }\\n\", strings.shift());",
          "52: process.stderr.write('hello world');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: assert.throws(function () {",
          "55:   console.timeEnd('no such label');",
          "56: });",
          "58: assert.doesNotThrow(function () {",
          "59:   console.time('label');",
          "60:   console.timeEnd('label');",
          "61: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01103d077bce626a332be998813382d15bed3501",
      "candidate_info": {
        "commit_hash": "01103d077bce626a332be998813382d15bed3501",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/01103d077bce626a332be998813382d15bed3501",
        "files": [
          "lib/http.js"
        ],
        "message": "Guard against emitting 'end' twice on http responses\n\nConflicts:\n\n\tlib/http.js",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1282:   if (req.res && req.res.readable) {",
          "1284:     req.res.emit('aborted');",
          "1286:     req.res.emit('close');",
          "1287:   } else if (!req.res && !req._hadError) {",
          "",
          "[Removed Lines]",
          "1285:     req.res.emit('end');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}