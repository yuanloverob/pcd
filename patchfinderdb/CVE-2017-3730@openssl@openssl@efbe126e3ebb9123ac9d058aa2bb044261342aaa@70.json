{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "16c34d4f74e16443cfdc99f2a49ebb1ba3c37db3",
      "candidate_info": {
        "commit_hash": "16c34d4f74e16443cfdc99f2a49ebb1ba3c37db3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/16c34d4f74e16443cfdc99f2a49ebb1ba3c37db3",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0b release\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100020L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0b-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0b-dev  xx XXX xxxx\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010002fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0b-fips  26 Sep 2016\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0b  26 Sep 2016\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5eab25a7c03c5fb1d3fab55c506907f8fbd427e",
      "candidate_info": {
        "commit_hash": "f5eab25a7c03c5fb1d3fab55c506907f8fbd427e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f5eab25a7c03c5fb1d3fab55c506907f8fbd427e",
        "files": [
          "apps/speed.c",
          "crypto/evp/e_aes_cbc_hmac_sha1.c",
          "crypto/evp/e_aes_cbc_hmac_sha256.c",
          "crypto/evp/e_rc4.c",
          "crypto/evp/e_rc4_hmac_md5.c",
          "crypto/include/internal/evp_int.h",
          "ssl/record/rec_layer_s3.c"
        ],
        "message": "Cleanup EVP_CIPH/EP_CTRL duplicate defines\n\nRemove duplicate defines from EVP source files.\nMost of them were in evp.h, which is always included.\nAdd new ones evp_int.h\nEVP_CIPH_FLAG_TLS1_1_MULTIBLOCK is now always defined in evp.h, so\nremove conditionals on it\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2201)\n(cherry picked from commit 9d6fcd4295fef7ebc4232aab85718a99d36cc50a)",
        "before_after_code_files": [
          "apps/speed.c||apps/speed.c",
          "crypto/evp/e_aes_cbc_hmac_sha1.c||crypto/evp/e_aes_cbc_hmac_sha1.c",
          "crypto/evp/e_aes_cbc_hmac_sha256.c||crypto/evp/e_aes_cbc_hmac_sha256.c",
          "crypto/evp/e_rc4.c||crypto/evp/e_rc4.c",
          "crypto/evp/e_rc4_hmac_md5.c||crypto/evp/e_rc4_hmac_md5.c",
          "crypto/include/internal/evp_int.h||crypto/include/internal/evp_int.h",
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/speed.c||apps/speed.c": [
          "File: apps/speed.c -> apps/speed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2273: #endif",
          "2275:     if (doit[D_EVP]) {",
          "2277:         if (multiblock && evp_cipher) {",
          "2278:             if (!",
          "2279:                 (EVP_CIPHER_flags(evp_cipher) &",
          "",
          "[Removed Lines]",
          "2276: #ifdef EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2290:             ret = 0;",
          "2291:             goto end;",
          "2292:         }",
          "2294:         for (testnum = 0; testnum < SIZE_NUM; testnum++) {",
          "2295:             if (evp_cipher) {",
          "",
          "[Removed Lines]",
          "2293: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/evp/e_aes_cbc_hmac_sha1.c||crypto/evp/e_aes_cbc_hmac_sha1.c": [
          "File: crypto/evp/e_aes_cbc_hmac_sha1.c -> crypto/evp/e_aes_cbc_hmac_sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"internal/evp_int.h\"",
          "22: #include \"internal/constant_time_locl.h\"",
          "40: typedef struct {",
          "41:     AES_KEY ks;",
          "42:     SHA_CTX head, tail, md;",
          "",
          "[Removed Lines]",
          "24: #ifndef EVP_CIPH_FLAG_AEAD_CIPHER",
          "25: # define EVP_CIPH_FLAG_AEAD_CIPHER       0x200000",
          "26: # define EVP_CTRL_AEAD_TLS1_AAD          0x16",
          "27: # define EVP_CTRL_AEAD_SET_MAC_KEY       0x17",
          "28: #endif",
          "30: #if !defined(EVP_CIPH_FLAG_DEFAULT_ASN1)",
          "31: # define EVP_CIPH_FLAG_DEFAULT_ASN1 0",
          "32: #endif",
          "34: #if !defined(EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK)",
          "35: # define EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK 0",
          "36: #endif",
          "38: #define TLS1_1_VERSION 0x0302",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146: # endif",
          "147: # define SHA1_Update sha1_update",
          "151: typedef struct {",
          "152:     unsigned int A[8], B[8], C[8], D[8], E[8];",
          "",
          "[Removed Lines]",
          "149: # if !defined(OPENSSL_NO_MULTIBLOCK) && EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "",
          "[Added Lines]",
          "133: # if !defined(OPENSSL_NO_MULTIBLOCK)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "842:                 return SHA_DIGEST_LENGTH;",
          "843:             }",
          "844:         }",
          "846:     case EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE:",
          "847:         return (int)(5 + 16 + ((arg + 20 + 16) & -16));",
          "848:     case EVP_CTRL_TLS1_1_MULTIBLOCK_AAD:",
          "",
          "[Removed Lines]",
          "845: # if !defined(OPENSSL_NO_MULTIBLOCK) && EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "",
          "[Added Lines]",
          "829: # if !defined(OPENSSL_NO_MULTIBLOCK)",
          "",
          "---------------"
        ],
        "crypto/evp/e_aes_cbc_hmac_sha256.c||crypto/evp/e_aes_cbc_hmac_sha256.c": [
          "File: crypto/evp/e_aes_cbc_hmac_sha256.c -> crypto/evp/e_aes_cbc_hmac_sha256.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"internal/constant_time_locl.h\"",
          "23: #include \"internal/evp_int.h\"",
          "41: typedef struct {",
          "42:     AES_KEY ks;",
          "43:     SHA256_CTX head, tail, md;",
          "",
          "[Removed Lines]",
          "25: #ifndef EVP_CIPH_FLAG_AEAD_CIPHER",
          "26: # define EVP_CIPH_FLAG_AEAD_CIPHER       0x200000",
          "27: # define EVP_CTRL_AEAD_TLS1_AAD          0x16",
          "28: # define EVP_CTRL_AEAD_SET_MAC_KEY       0x17",
          "29: #endif",
          "31: #if !defined(EVP_CIPH_FLAG_DEFAULT_ASN1)",
          "32: # define EVP_CIPH_FLAG_DEFAULT_ASN1 0",
          "33: #endif",
          "35: #if !defined(EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK)",
          "36: # define EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK 0",
          "37: #endif",
          "39: #define TLS1_1_VERSION 0x0302",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142: # endif",
          "143: # define SHA256_Update sha256_update",
          "147: typedef struct {",
          "148:     unsigned int A[8], B[8], C[8], D[8], E[8], F[8], G[8], H[8];",
          "",
          "[Removed Lines]",
          "145: # if !defined(OPENSSL_NO_MULTIBLOCK) && EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "",
          "[Added Lines]",
          "129: # if !defined(OPENSSL_NO_MULTIBLOCK)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:                 return SHA256_DIGEST_LENGTH;",
          "820:             }",
          "821:         }",
          "823:     case EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE:",
          "824:         return (int)(5 + 16 + ((arg + 32 + 16) & -16));",
          "825:     case EVP_CTRL_TLS1_1_MULTIBLOCK_AAD:",
          "",
          "[Removed Lines]",
          "822: # if !defined(OPENSSL_NO_MULTIBLOCK) && EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "",
          "[Added Lines]",
          "806: # if !defined(OPENSSL_NO_MULTIBLOCK)",
          "",
          "---------------"
        ],
        "crypto/evp/e_rc4.c||crypto/evp/e_rc4.c": [
          "File: crypto/evp/e_rc4.c -> crypto/evp/e_rc4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: # include \"internal/evp_int.h\"",
          "24: typedef struct {",
          "26: } EVP_RC4_KEY;",
          "",
          "[Removed Lines]",
          "22: # define EVP_RC4_KEY_SIZE                16",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/evp/e_rc4_hmac_md5.c||crypto/evp/e_rc4_hmac_md5.c": [
          "File: crypto/evp/e_rc4_hmac_md5.c -> crypto/evp/e_rc4_hmac_md5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: # include <openssl/md5.h>",
          "22: # include \"internal/evp_int.h\"",
          "33: typedef struct {",
          "34:     RC4_KEY ks;",
          "35:     MD5_CTX head, tail, md;",
          "",
          "[Removed Lines]",
          "24: # ifndef EVP_CIPH_FLAG_AEAD_CIPHER",
          "25: #  define EVP_CIPH_FLAG_AEAD_CIPHER       0x200000",
          "26: #  define EVP_CTRL_AEAD_TLS1_AAD          0x16",
          "27: #  define EVP_CTRL_AEAD_SET_MAC_KEY       0x17",
          "28: # endif",
          "31: # define EVP_RC4_KEY_SIZE                16",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/include/internal/evp_int.h||crypto/include/internal/evp_int.h": [
          "File: crypto/include/internal/evp_int.h -> crypto/include/internal/evp_int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "380: void openssl_add_all_ciphers_int(void);",
          "381: void openssl_add_all_digests_int(void);",
          "382: void evp_cleanup_int(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386: #define EVP_RC4_KEY_SIZE 16",
          "387: #ifndef TLS1_1_VERSION",
          "388: # define TLS1_1_VERSION   0x0302",
          "389: #endif",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <openssl/rand.h>",
          "18: #include \"record_locl.h\"",
          "24: #if     defined(OPENSSL_SMALL_FOOTPRINT) || \\",
          "25:         !(      defined(AES_ASM) &&     ( \\",
          "26:                 defined(__x86_64)       || defined(__x86_64__)  || \\",
          "",
          "[Removed Lines]",
          "20: #ifndef  EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "21: # define EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK 0",
          "22: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "389d4655b143bc6d495ca6c48809aac8f4356e01",
      "candidate_info": {
        "commit_hash": "389d4655b143bc6d495ca6c48809aac8f4356e01",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/389d4655b143bc6d495ca6c48809aac8f4356e01",
        "files": [
          "test/build.info",
          "test/recipes/90-test_shlibload.t",
          "test/shlibloadtest.c"
        ],
        "message": "Add a test to dynamically load and unload the libraries\n\nThis should demonstrate that the atexit() handling is working properly (or\nat least not crashing) on process exit.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(cherry picked from commit b987d748e46d4ec19a45e5ec9e890a9003a361d6)",
        "before_after_code_files": [
          "test/build.info||test/build.info",
          "test/recipes/90-test_shlibload.t||test/recipes/90-test_shlibload.t",
          "test/shlibloadtest.c||test/shlibloadtest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/build.info||test/build.info": [
          "File: test/build.info -> test/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:   SOURCE[bio_enc_test]=bio_enc_test.c",
          "275:   INCLUDE[bio_enc_test]=../include",
          "276:   DEPEND[bio_enc_test]=../libcrypto",
          "277: ENDIF",
          "279: {-",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:   IF[{- !disabled{shared} -}]",
          "279:     PROGRAMS_NO_INST=shlibloadtest",
          "280:     SOURCE[shlibloadtest]=shlibloadtest.c",
          "281:     INCLUDE[shlibloadtest]=../include",
          "282:   ENDIF",
          "",
          "---------------"
        ],
        "test/recipes/90-test_shlibload.t||test/recipes/90-test_shlibload.t": [
          "File: test/recipes/90-test_shlibload.t -> test/recipes/90-test_shlibload.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "10: use OpenSSL::Test qw/:DEFAULT bldtop_dir/;",
          "11: use OpenSSL::Test::Utils;",
          "13: #Load configdata.pm",
          "15: BEGIN {",
          "16:     setup(\"test_shlibload\");",
          "17: }",
          "18: use lib bldtop_dir('.');",
          "19: use configdata;",
          "21: plan skip_all => \"Test only supported in a shared build\" if disabled(\"shared\");",
          "23: plan tests => 3;",
          "25: ok(run(test([\"shlibloadtest\", \"-crypto_first\",",
          "26:              $unified_info{sharednames}->{libcrypto},",
          "27:              $unified_info{sharednames}->{libssl}])),",
          "28:    \"running shlibloadtest -crypto_first\");",
          "29: ok(run(test([\"shlibloadtest\", \"-ssl_first\",",
          "30:              $unified_info{sharednames}->{libcrypto},",
          "31:              $unified_info{sharednames}->{libssl}])),",
          "32:    \"running shlibloadtest -ssl_first\");",
          "33: ok(run(test([\"shlibloadtest\", \"-just_crypto\",",
          "34:              $unified_info{sharednames}->{libcrypto},",
          "35:              $unified_info{sharednames}->{libssl}])),",
          "36:    \"running shlibloadtest -just_crypto\");",
          "",
          "---------------"
        ],
        "test/shlibloadtest.c||test/shlibloadtest.c": [
          "File: test/shlibloadtest.c -> test/shlibloadtest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <stdio.h>",
          "11: #include <string.h>",
          "12: #include <stdlib.h>",
          "13: #include <openssl/opensslv.h>",
          "15: #define SSL_CTX_NEW \"SSL_CTX_new\"",
          "16: #define SSL_CTX_FREE \"SSL_CTX_free\"",
          "17: #define TLS_METHOD \"TLS_method\"",
          "19: #define ERR_GET_ERROR \"ERR_get_error\"",
          "20: #define OPENSSL_VERSION_NUM_FUNC \"OpenSSL_version_num\"",
          "22: typedef struct ssl_ctx_st SSL_CTX;",
          "23: typedef struct ssl_method_st SSL_METHOD;",
          "24: typedef const SSL_METHOD * (*TLS_method_t)(void);",
          "25: typedef SSL_CTX * (*SSL_CTX_new_t)(const SSL_METHOD *meth);",
          "26: typedef void (*SSL_CTX_free_t)(SSL_CTX *);",
          "28: typedef unsigned long (*ERR_get_error_t)(void);",
          "29: typedef unsigned long (*OpenSSL_version_num_t)(void);",
          "31: TLS_method_t TLS_method;",
          "32: SSL_CTX_new_t SSL_CTX_new;",
          "33: SSL_CTX_free_t SSL_CTX_free;",
          "35: ERR_get_error_t ERR_get_error;",
          "36: OpenSSL_version_num_t OpenSSL_version_num;",
          "39: #ifdef DSO_DLFCN",
          "41: # include <dlfcn.h>",
          "43: typedef void * SHLIB;",
          "44: typedef void * SHLIB_SYM;",
          "46: # define SHARED_LIBRARY_SUFFIX \".so\"",
          "48: static int shlib_load(char *filename, SHLIB *lib)",
          "49: {",
          "50:     char *tmpfile;",
          "51:     size_t filenamelen = strlen(filename);",
          "54:     tmpfile = malloc(filenamelen + sizeof(SHARED_LIBRARY_SUFFIX) + 1);",
          "55:     if (tmpfile == NULL)",
          "56:         return 0;",
          "57:     strcpy(tmpfile, filename);",
          "58:     strcpy(tmpfile + filenamelen, SHARED_LIBRARY_SUFFIX);",
          "61:     free(tmpfile);",
          "63:     if (*lib == NULL)",
          "64:         return 0;",
          "66:     return 1;",
          "67: }",
          "69: static int shlib_sym(SHLIB lib, const char *symname, SHLIB_SYM *sym)",
          "70: {",
          "73:     return *sym != NULL;",
          "74: }",
          "76: static int shlib_close(SHLIB lib)",
          "77: {",
          "78:     if (dlclose(lib) != 0)",
          "79:         return 0;",
          "81:     return 1;",
          "82: }",
          "84: #elif defined(DSO_WIN32)",
          "86: # include <windows.h>",
          "88: typedef HINSTANCE SHLIB;",
          "89: typedef void * SHLIB_SYM;",
          "91: static int shlib_load(char *filename, SHLIB *lib)",
          "92: {",
          "94:     if (*lib == NULL)",
          "95:         return 0;",
          "97:     return 1;",
          "98: }",
          "100: static int shlib_sym(SHLIB lib, const char *symname, SHLIB_SYM *sym)",
          "101: {",
          "104:     return *sym != NULL;",
          "105: }",
          "107: static int shlib_close(SHLIB lib)",
          "108: {",
          "109:     if (FreeLibrary(lib) == 0)",
          "110:         return 0;",
          "112:     return 1;",
          "113: }",
          "115: #endif",
          "118: #if defined(DSO_DLFCN) || defined(DSO_WIN32)",
          "120: # define CRYPTO_FIRST_OPT    \"-crypto_first\"",
          "121: # define SSL_FIRST_OPT       \"-ssl_first\"",
          "122: # define JUST_CRYPTO_OPT     \"-just_crypto\"",
          "124: enum test_types_en {",
          "125:     CRYPTO_FIRST,",
          "126:     SSL_FIRST,",
          "127:     JUST_CRYPTO",
          "128: };",
          "130: int main(int argc, char **argv)",
          "131: {",
          "132:     SHLIB ssllib, cryptolib;",
          "133:     SSL_CTX *ctx;",
          "134:     union {",
          "135:         void (*func) (void);",
          "136:         SHLIB_SYM sym;",
          "137:     } tls_method_sym, ssl_ctx_new_sym, ssl_ctx_free_sym, err_get_error_sym,",
          "138:     openssl_version_num_sym;",
          "139:     enum test_types_en test_type;",
          "140:     int i;",
          "142:     if (argc != 4) {",
          "143:         printf(\"Unexpected number of arguments\\n\");",
          "144:         return 1;",
          "145:     }",
          "147:     if (strcmp(argv[1], CRYPTO_FIRST_OPT) == 0) {",
          "148:         test_type = CRYPTO_FIRST;",
          "149:     } else if (strcmp(argv[1], SSL_FIRST_OPT) == 0) {",
          "150:             test_type = SSL_FIRST;",
          "151:     } else if (strcmp(argv[1], JUST_CRYPTO_OPT) == 0) {",
          "152:             test_type = JUST_CRYPTO;",
          "153:     } else {",
          "154:         printf(\"Unrecognised argument\\n\");",
          "155:         return 1;",
          "156:     }",
          "158:     for (i = 0; i < 2; i++) {",
          "159:         if ((i == 0 && (test_type == CRYPTO_FIRST",
          "160:                        || test_type == JUST_CRYPTO))",
          "161:                || (i == 1 && test_type == SSL_FIRST)) {",
          "162:             if (!shlib_load(argv[2], &cryptolib)) {",
          "163:                 printf(\"Unable to load libcrypto\\n\");",
          "164:                 return 1;",
          "165:             }",
          "166:         }",
          "167:         if ((i == 0 && test_type == SSL_FIRST)",
          "168:                 || (i == 1 && test_type == CRYPTO_FIRST)) {",
          "169:             if (!shlib_load(argv[3], &ssllib)) {",
          "170:                 printf(\"Unable to load libssl\\n\");",
          "171:                 return 1;",
          "172:             }",
          "173:         }",
          "174:     }",
          "176:     if (test_type != JUST_CRYPTO) {",
          "177:         if (!shlib_sym(ssllib, TLS_METHOD, &tls_method_sym.sym)",
          "178:                 || !shlib_sym(ssllib, SSL_CTX_NEW, &ssl_ctx_new_sym.sym)",
          "179:                 || !shlib_sym(ssllib, SSL_CTX_FREE, &ssl_ctx_free_sym.sym)) {",
          "180:             printf(\"Unable to load ssl symbols\\n\");",
          "181:             return 1;",
          "182:         }",
          "184:         TLS_method = (TLS_method_t)tls_method_sym.func;",
          "185:         SSL_CTX_new = (SSL_CTX_new_t)ssl_ctx_new_sym.func;",
          "186:         SSL_CTX_free = (SSL_CTX_free_t)ssl_ctx_free_sym.func;",
          "188:         ctx = SSL_CTX_new(TLS_method());",
          "189:         if (ctx == NULL) {",
          "190:             printf(\"Unable to create SSL_CTX\\n\");",
          "191:             return 1;",
          "192:         }",
          "193:         SSL_CTX_free(ctx);",
          "194:     }",
          "196:     if (!shlib_sym(cryptolib, ERR_GET_ERROR, &err_get_error_sym.sym)",
          "197:             || !shlib_sym(cryptolib, OPENSSL_VERSION_NUM_FUNC,",
          "198:                           &openssl_version_num_sym.sym)) {",
          "199:         printf(\"Unable to load crypto symbols\\n\");",
          "200:         return 1;",
          "201:     }",
          "203:     ERR_get_error = (ERR_get_error_t)err_get_error_sym.func;",
          "204:     OpenSSL_version_num = (OpenSSL_version_num_t)openssl_version_num_sym.func;",
          "206:     if (ERR_get_error() != 0) {",
          "207:         printf(\"Unexpected error in error queue\\n\");",
          "208:         return 1;",
          "209:     }",
          "211:     if (OpenSSL_version_num() != OPENSSL_VERSION_NUMBER) {",
          "212:         printf(\"Unexpected library version loaded\\n\");",
          "213:         return 1;",
          "214:     }",
          "216:     for (i = 0; i < 2; i++) {",
          "217:         if ((i == 0 && test_type == CRYPTO_FIRST)",
          "218:                 || (i == 1 && test_type == SSL_FIRST)) {",
          "219:             if (!shlib_close(ssllib)) {",
          "220:                 printf(\"Unable to close libssl\\n\");",
          "221:                 return 1;",
          "222:             }",
          "223:         }",
          "224:         if ((i == 0 && (test_type == SSL_FIRST",
          "225:                        || test_type == JUST_CRYPTO))",
          "226:                 || (i == 1 && test_type == CRYPTO_FIRST)) {",
          "227:             if (!shlib_close(cryptolib)) {",
          "228:                 printf(\"Unable to close libcrypto\\n\");",
          "229:                 return 1;",
          "230:             }",
          "231:         }",
          "232:     }",
          "234:     printf(\"Success\\n\");",
          "235:     return 0;",
          "236: }",
          "237: #else",
          "238: int main(void)",
          "239: {",
          "240:     printf(\"Test not implemented on this platform\\n\");",
          "241:     return 0;",
          "242: }",
          "243: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45789c2819e1cb93150061ddaa95fe97da2c0cba",
      "candidate_info": {
        "commit_hash": "45789c2819e1cb93150061ddaa95fe97da2c0cba",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/45789c2819e1cb93150061ddaa95fe97da2c0cba",
        "files": [
          "apps/ca.c"
        ],
        "message": "Fix use before assignment\n\n it was getting the SerialNumber of a previous cert.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2272)\n(cherry picked from commit 0db1fb3fc13c4b1a2b916efbb374f40579b1398f)",
        "before_after_code_files": [
          "apps/ca.c||apps/ca.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/ca.c||apps/ca.c": [
          "File: apps/ca.c -> apps/ca.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "983:             BIO_printf(bio_err, \"writing new certificates\\n\");",
          "984:         for (i = 0; i < sk_X509_num(cert_sk); i++) {",
          "985:             BIO *Cout = NULL;",
          "987:             int k;",
          "988:             char *n;",
          "992:             j = ASN1_STRING_length(serialNumber);",
          "993:             p = (const char *)ASN1_STRING_get0_data(serialNumber);",
          "",
          "[Removed Lines]",
          "986:             ASN1_INTEGER *serialNumber = X509_get_serialNumber(x);",
          "990:             x = sk_X509_value(cert_sk, i);",
          "",
          "[Added Lines]",
          "986:             X509 *xi = sk_X509_value(cert_sk, i);",
          "987:             ASN1_INTEGER *serialNumber = X509_get_serialNumber(xi);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1030:                 perror(buf[2]);",
          "1031:                 goto end;",
          "1032:             }",
          "1035:             BIO_free_all(Cout);",
          "1036:         }",
          "",
          "[Removed Lines]",
          "1033:             write_new_certificate(Cout, x, 0, notext);",
          "1034:             write_new_certificate(Sout, x, output_der, notext);",
          "",
          "[Added Lines]",
          "1032:             write_new_certificate(Cout, xi, 0, notext);",
          "1033:             write_new_certificate(Sout, xi, output_der, notext);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3258e29a385f4800440a96a16889035a83aff437",
      "candidate_info": {
        "commit_hash": "3258e29a385f4800440a96a16889035a83aff437",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3258e29a385f4800440a96a16889035a83aff437",
        "files": [
          "crypto/evp/e_aes.c",
          "crypto/evp/e_des3.c",
          "crypto/evp/evp_enc.c",
          "crypto/evp/evp_err.c",
          "crypto/evp/evp_locl.h",
          "include/openssl/evp.h",
          "test/evp_test.c"
        ],
        "message": "Fix the overlapping check for fragmented \"Update\" operations\n\nWhen doing in place encryption the overlapping buffer check can fail\nincorrectly where we have done a partial block \"Update\" operation. This\nfixes things to take account of any pending partial blocks.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2275)\n(cherry picked from commit 7141ba31969d0b378d08104a51f8f99b9187b9d5)",
        "before_after_code_files": [
          "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
          "crypto/evp/e_des3.c||crypto/evp/e_des3.c",
          "crypto/evp/evp_enc.c||crypto/evp/evp_enc.c",
          "crypto/evp/evp_err.c||crypto/evp/evp_err.c",
          "crypto/evp/evp_locl.h||crypto/evp/evp_locl.h",
          "include/openssl/evp.h||include/openssl/evp.h",
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
          "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"internal/evp_int.h\"",
          "18: #include \"modes_lcl.h\"",
          "19: #include <openssl/rand.h>",
          "21: typedef struct {",
          "22:     union {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"evp_locl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2234:     if (!pad && inlen & 0x7)",
          "2235:         return -1;",
          "2236:     if (!out) {",
          "2237:         if (EVP_CIPHER_CTX_encrypting(ctx)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2237:     if (is_partially_overlapping(out, in, inlen)) {",
          "2238:         EVPerr(EVP_F_AES_WRAP_CIPHER, EVP_R_PARTIALLY_OVERLAPPING);",
          "2239:         return 0;",
          "2240:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2551:         } else {",
          "2552:             buf = octx->data_buf;",
          "2553:             buf_len = &(octx->data_buf_len);",
          "2554:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2560:             if (is_partially_overlapping(out + *buf_len, in, len)) {",
          "2561:                 EVPerr(EVP_F_AES_OCB_CIPHER, EVP_R_PARTIALLY_OVERLAPPING);",
          "2562:                 return 0;",
          "2563:             }",
          "",
          "---------------"
        ],
        "crypto/evp/e_des3.c||crypto/evp/e_des3.c": [
          "File: crypto/evp/e_des3.c -> crypto/evp/e_des3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # include \"internal/evp_int.h\"",
          "16: # include <openssl/des.h>",
          "17: # include <openssl/rand.h>",
          "19: typedef struct {",
          "20:     union {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: # include \"evp_locl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:     if (inl >= EVP_MAXCHUNK || inl % 8)",
          "394:         return -1;",
          "395:     if (EVP_CIPHER_CTX_encrypting(ctx))",
          "396:         return des_ede3_wrap(ctx, out, in, inl);",
          "397:     else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:     if (is_partially_overlapping(out, in, inl)) {",
          "398:         EVPerr(EVP_F_DES_EDE3_WRAP_CIPHER, EVP_R_PARTIALLY_OVERLAPPING);",
          "399:         return 0;",
          "400:     }",
          "",
          "---------------"
        ],
        "crypto/evp/evp_enc.c||crypto/evp/evp_enc.c": [
          "File: crypto/evp/evp_enc.c -> crypto/evp/evp_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "276: # define PTRDIFF_T size_t",
          "277: #endif",
          "281: {",
          "282:     PTRDIFF_T diff = (PTRDIFF_T)ptr1-(PTRDIFF_T)ptr2;",
          "",
          "[Removed Lines]",
          "279: static int is_partially_overlapping(const void *ptr1, const void *ptr2,",
          "280:                                     int len)",
          "",
          "[Added Lines]",
          "279: int is_partially_overlapping(const void *ptr1, const void *ptr2, int len)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296: {",
          "297:     int i, j, bl;",
          "299:     if (ctx->cipher->flags & EVP_CIPH_FLAG_CUSTOM_CIPHER) {",
          "301:             EVPerr(EVP_F_EVP_ENCRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "302:             return 0;",
          "303:         }",
          "",
          "[Removed Lines]",
          "300:         if (is_partially_overlapping(out, in, inl)) {",
          "",
          "[Added Lines]",
          "298:     bl = ctx->cipher->block_size;",
          "302:         if (bl == 1 && is_partially_overlapping(out, in, inl)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315:         return inl == 0;",
          "316:     }",
          "318:         EVPerr(EVP_F_EVP_ENCRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "319:         return 0;",
          "320:     }",
          "",
          "[Removed Lines]",
          "317:     if (is_partially_overlapping(out, in, inl)) {",
          "",
          "[Added Lines]",
          "319:     if (is_partially_overlapping(out + ctx->buf_len, in, inl)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329:         }",
          "330:     }",
          "331:     i = ctx->buf_len;",
          "333:     OPENSSL_assert(bl <= (int)sizeof(ctx->buf));",
          "334:     if (i != 0) {",
          "335:         if (bl - i > inl) {",
          "",
          "[Removed Lines]",
          "332:     bl = ctx->cipher->block_size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "342:             memcpy(&(ctx->buf[i]), in, j);",
          "343:             inl -= j;",
          "344:             in += j;",
          "349:             if (!ctx->cipher->do_cipher(ctx, out, ctx->buf, bl))",
          "350:                 return 0;",
          "351:             out += bl;",
          "",
          "[Removed Lines]",
          "345:             if (is_partially_overlapping(out, in, bl)) {",
          "346:          EVPerr(EVP_F_EVP_ENCRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "347:                 return 0;",
          "348:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "422:     int fix_len;",
          "423:     unsigned int b;",
          "425:     if (ctx->cipher->flags & EVP_CIPH_FLAG_CUSTOM_CIPHER) {",
          "427:             EVPerr(EVP_F_EVP_DECRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "428:             return 0;",
          "429:         }",
          "",
          "[Removed Lines]",
          "426:         if (is_partially_overlapping(out, in, inl)) {",
          "",
          "[Added Lines]",
          "422:     b = ctx->cipher->block_size;",
          "425:         if (b == 1 && is_partially_overlapping(out, in, inl)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "445:     if (ctx->flags & EVP_CIPH_NO_PADDING)",
          "446:         return EVP_EncryptUpdate(ctx, out, outl, in, inl);",
          "449:     OPENSSL_assert(b <= sizeof ctx->final);",
          "451:     if (ctx->final_used) {",
          "",
          "[Removed Lines]",
          "448:     b = ctx->cipher->block_size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/evp/evp_err.c||crypto/evp/evp_err.c": [
          "File: crypto/evp/evp_err.c -> crypto/evp/evp_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: static ERR_STRING_DATA EVP_str_functs[] = {",
          "22:     {ERR_FUNC(EVP_F_AESNI_INIT_KEY), \"aesni_init_key\"},",
          "23:     {ERR_FUNC(EVP_F_AES_INIT_KEY), \"aes_init_key\"},",
          "24:     {ERR_FUNC(EVP_F_AES_T4_INIT_KEY), \"aes_t4_init_key\"},",
          "25:     {ERR_FUNC(EVP_F_ALG_MODULE_INIT), \"alg_module_init\"},",
          "26:     {ERR_FUNC(EVP_F_CAMELLIA_INIT_KEY), \"camellia_init_key\"},",
          "27:     {ERR_FUNC(EVP_F_CHACHA20_POLY1305_CTRL), \"chacha20_poly1305_ctrl\"},",
          "28:     {ERR_FUNC(EVP_F_CMLL_T4_INIT_KEY), \"cmll_t4_init_key\"},",
          "29:     {ERR_FUNC(EVP_F_DO_SIGVER_INIT), \"do_sigver_init\"},",
          "30:     {ERR_FUNC(EVP_F_EVP_CIPHERINIT_EX), \"EVP_CipherInit_ex\"},",
          "31:     {ERR_FUNC(EVP_F_EVP_CIPHER_CTX_COPY), \"EVP_CIPHER_CTX_copy\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     {ERR_FUNC(EVP_F_AES_OCB_CIPHER), \"aes_ocb_cipher\"},",
          "26:     {ERR_FUNC(EVP_F_AES_WRAP_CIPHER), \"aes_wrap_cipher\"},",
          "31:     {ERR_FUNC(EVP_F_DES_EDE3_WRAP_CIPHER), \"des_ede3_wrap_cipher\"},",
          "",
          "---------------"
        ],
        "crypto/evp/evp_locl.h||crypto/evp/evp_locl.h": [
          "File: crypto/evp/evp_locl.h -> crypto/evp/evp_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: typedef struct evp_pbe_st EVP_PBE_CTL;",
          "66: DEFINE_STACK_OF(EVP_PBE_CTL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: int is_partially_overlapping(const void *ptr1, const void *ptr2, int len);",
          "",
          "---------------"
        ],
        "include/openssl/evp.h||include/openssl/evp.h": [
          "File: include/openssl/evp.h -> include/openssl/evp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1456: # define EVP_F_AESNI_INIT_KEY                             165",
          "1457: # define EVP_F_AES_INIT_KEY                               133",
          "1458: # define EVP_F_AES_T4_INIT_KEY                            178",
          "1459: # define EVP_F_ALG_MODULE_INIT                            177",
          "1460: # define EVP_F_CAMELLIA_INIT_KEY                          159",
          "1461: # define EVP_F_CHACHA20_POLY1305_CTRL                     182",
          "1462: # define EVP_F_CMLL_T4_INIT_KEY                           179",
          "1463: # define EVP_F_DO_SIGVER_INIT                             161",
          "1464: # define EVP_F_EVP_CIPHERINIT_EX                          123",
          "1465: # define EVP_F_EVP_CIPHER_CTX_COPY                        163",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1458: # define EVP_F_AES_OCB_CIPHER                             169",
          "1460: # define EVP_F_AES_WRAP_CIPHER                            170",
          "1465: # define EVP_F_DES_EDE3_WRAP_CIPHER                       171",
          "",
          "---------------"
        ],
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1101:         static char aux_err[64];",
          "1102:         t->aux_err = aux_err;",
          "1103:         for (inp_misalign = (size_t)-1; inp_misalign != 2; inp_misalign++) {",
          "1107:             if (inp_misalign == (size_t)-1) {",
          "1109:                 BIO_snprintf(aux_err, sizeof(aux_err),",
          "",
          "[Removed Lines]",
          "1104:             if (frag && inp_misalign == (size_t)-1)",
          "1105:                  continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}