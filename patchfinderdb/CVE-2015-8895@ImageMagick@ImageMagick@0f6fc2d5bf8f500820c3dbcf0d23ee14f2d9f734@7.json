{
  "cve_id": "CVE-2015-8895",
  "cve_desc": "Integer overflow in coders/icon.c in ImageMagick 6.9.1-3 and later allows remote attackers to cause a denial of service (application crash) via a crafted length value, which triggers a buffer overflow.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "0f6fc2d5bf8f500820c3dbcf0d23ee14f2d9f734",
  "patch_info": {
    "commit_hash": "0f6fc2d5bf8f500820c3dbcf0d23ee14f2d9f734",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/0f6fc2d5bf8f500820c3dbcf0d23ee14f2d9f734",
    "files": [
      "MagickCore/memory.c",
      "MagickCore/studio.h",
      "MagickCore/version.c",
      "MagickCore/version.h",
      "MagickWand/studio.h",
      "coders/icon.c",
      "coders/pict.c",
      "configure",
      "configure.ac"
    ],
    "message": "",
    "before_after_code_files": [
      "MagickCore/memory.c||MagickCore/memory.c",
      "MagickCore/studio.h||MagickCore/studio.h",
      "MagickCore/version.c||MagickCore/version.c",
      "MagickCore/version.h||MagickCore/version.h",
      "MagickWand/studio.h||MagickWand/studio.h",
      "coders/icon.c||coders/icon.c",
      "coders/pict.c||coders/pict.c",
      "configure.ac||configure.ac"
    ]
  },
  "patch_diff": {
    "MagickCore/memory.c||MagickCore/memory.c": [
      "File: MagickCore/memory.c -> MagickCore/memory.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "606:     }",
      "607:   if ((memory_info->blob == NULL) &&",
      "608:       (AcquireMagickResource(MapResource,length) != MagickFalse))",
      "611:         Heap memory failed, try anonymous memory mapping.",
      "",
      "[Removed Lines]",
      "609:     {",
      "",
      "[Added Lines]",
      "609:     {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "615:         memory_info->type=MapVirtualMemory;",
      "616:       else",
      "617:         RelinquishMagickResource(MapResource,length);",
      "619:   if (memory_info->blob == NULL)",
      "621:       int",
      "627:       file=AcquireUniqueFileResource(memory_info->filename);",
      "628:       if (file != -1)",
      "629:         {",
      "",
      "[Removed Lines]",
      "618:     }",
      "620:     {",
      "622:         file;",
      "625:         Anonymous memory mapping failed, try file-backed memory mapping.",
      "",
      "[Added Lines]",
      "619:   if ((memory_info->blob == NULL) &&",
      "620:       (AcquireMagickResource(DiskResource,length) != MagickFalse))",
      "621:     {",
      "623:         file;",
      "628:       file=AcquireUniqueFileResource(memory_info->filename);",
      "629:       if (file == -1)",
      "631:       else",
      "632:         {",
      "633:           if ((lseek(file,length-1,SEEK_SET) < 0) || (write(file,\"\",1) != 1))",
      "634:             RelinquishMagickResource(DiskResource,length);",
      "635:           else",
      "636:             {",
      "637:               if (AcquireMagickResource(MapResource,length) == MagickFalse)",
      "638:                 RelinquishMagickResource(DiskResource,length);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1033: %",
      "1035: MagickExport MemoryInfo *RelinquishVirtualMemory(MemoryInfo *memory_info)",
      "1037:   assert(memory_info != (MemoryInfo *) NULL);",
      "1038:   assert(memory_info->signature == MagickSignature);",
      "1039:   if (memory_info->blob != (void *) NULL)",
      "",
      "[Removed Lines]",
      "1036: {",
      "",
      "[Added Lines]",
      "1048: {",
      "1049:   assert(memory_info != (MemoryInfo *) NULL);",
      "1050:   assert(memory_info->signature == MagickSignature);",
      "1051:   if (memory_info->blob != (void *) NULL)",
      "",
      "---------------"
    ],
    "MagickCore/studio.h||MagickCore/studio.h": [
      "File: MagickCore/studio.h -> MagickCore/studio.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: #if defined(_magickcore_inline) && !defined(inline)",
      "47: # define inline  _magickcore_inline",
      "48: #endif",
      "52: # if defined(__cplusplus) || defined(c_plusplus)",
      "53: #  undef inline",
      "54: # endif",
      "",
      "[Removed Lines]",
      "49: #if defined(_magickcore_restrict) && !defined(restrict)",
      "50: # define restrict  _magickcore_restrict",
      "51: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75: #  include <stdlib.h>",
      "76: # endif",
      "77: #endif",
      "78: #if defined(MAGICKCORE_HAVE_STRING_H)",
      "79: # if !defined(STDC_HEADERS) && defined(MAGICKCORE_HAVE_MEMORY_H)",
      "80: #  include <memory.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75: #if defined(_magickcore_restrict) && !defined(restrict)",
      "76: # define restrict  _magickcore_restrict",
      "77: #endif",
      "",
      "---------------"
    ],
    "MagickCore/version.c||MagickCore/version.c": [
      "File: MagickCore/version.c -> MagickCore/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "219: %      const char *GetMagickFeatures(void)",
      "220: %",
      "221: %  No parameters are required.",
      "224: MagickExport const char *GetMagickFeatures(void)",
      "225: {",
      "226:   return \"DPC\"",
      "227: #if defined(MAGICKCORE_BUILD_MODULES) || defined(_DLL)",
      "228:   \" Modules\"",
      "229: #endif",
      "230: #if defined(MAGICKCORE_HDRI_SUPPORT)",
      "231:   \" HDRI\"",
      "232: #endif",
      "233: #if defined(MAGICKCORE_OPENCL_SUPPORT)",
      "234:   \" OpenCL\"",
      "235: #endif",
      "",
      "[Removed Lines]",
      "222: %",
      "",
      "[Added Lines]",
      "222: %",
      "224: MagickExport const char *GetMagickFeatures(void)",
      "225: {",
      "226:   return \"DPC\"",
      "231:   \" Cipher\"",
      "232: #endif",
      "233: #if defined(MAGICKCORE_HDRI_SUPPORT)",
      "239: #if defined(MAGICKCORE_OPENCL_SUPPORT)",
      "240:   \" OpenCL\"",
      "241: #endif",
      "",
      "---------------"
    ],
    "MagickCore/version.h||MagickCore/version.h": [
      "File: MagickCore/version.h -> MagickCore/version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: #define MagickPackageName \"ImageMagick\"",
      "29: #define MagickCopyright  \"Copyright (C) 1999-2015 ImageMagick Studio LLC\"",
      "31: #define MagickLibVersion  0x700",
      "32: #define MagickLibVersionText  \"7.0.0\"",
      "33: #define MagickLibVersionNumber  0,0,0",
      "",
      "[Removed Lines]",
      "30: #define MagickSVNRevision  \"18658:18662M\"",
      "",
      "[Added Lines]",
      "30: #define MagickSVNRevision  \"18670M\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48: #define MagickppLibAddendum  \"-0\"",
      "49: #define MagickppLibInterface  0",
      "50: #define MagickppLibMinInterface  0",
      "52: #define MagickChangeDate   \"20120427\"",
      "53: #define MagickAuthoritativeLicense  \\",
      "54:   \"http://www.imagemagick.org/script/license.php\"",
      "55: #define MagickAuthoritativeURL  \"http://www.imagemagick.org\"",
      "57: #define MagickDelegates \"bzlib djvu mpeg fftw fpx fontconfig freetype jbig jng jpeg lcms lzma openexr pango png ps tiff webp x xml zlib\"",
      "58: #define MagickHomeURL  \"file:///usr/local/share/doc/ImageMagick-7/index.html\"",
      "59: #if (MAGICKCORE_QUANTUM_DEPTH == 8)",
      "",
      "[Removed Lines]",
      "51: #define MagickReleaseDate  \"2015-05-26\"",
      "56: #define MagickFeatures \"DPC HDRI OpenMP\"",
      "",
      "[Added Lines]",
      "51: #define MagickReleaseDate  \"2015-05-29\"",
      "56: #define MagickFeatures \"DPC HDRI Cipher OpenMP\"",
      "",
      "---------------"
    ],
    "MagickWand/studio.h||MagickWand/studio.h": [
      "File: MagickWand/studio.h -> MagickWand/studio.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: #if defined(_magickcore_inline) && !defined(inline)",
      "47: # define inline _magickcore_inline",
      "48: #endif",
      "52: # if defined(__cplusplus) || defined(c_plusplus)",
      "53: #  undef inline",
      "54: # endif",
      "",
      "[Removed Lines]",
      "49: #if defined(_magickcore_restrict) && !defined(restrict)",
      "50: # define restrict  _magickcore_restrict",
      "51: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: #  include <stdlib.h>",
      "78: # endif",
      "79: #endif",
      "80: #if defined(MAGICKCORE_HAVE_STRING_H)",
      "81: # if !defined(STDC_HEADERS) && defined(MAGICKCORE_HAVE_MEMORY_H)",
      "82: #  include <memory.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "77: #if defined(_magickcore_restrict) && !defined(restrict)",
      "78: # define restrict  _magickcore_restrict",
      "79: #endif",
      "",
      "---------------"
    ],
    "coders/icon.c||coders/icon.c": [
      "File: coders/icon.c -> coders/icon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "183:     size_t",
      "184:       size;",
      "189:     size=(size_t)strtol(p,&q,10);",
      "190:     if (p == q || size < 16 || size > 256)",
      "",
      "[Removed Lines]",
      "186:     while ((isspace((int) ((unsigned char) *p)) != 0))",
      "187:       p++;",
      "",
      "[Added Lines]",
      "186:     while ((isspace((int) ((unsigned char) *p)) != 0))",
      "187:       p++;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "355:         unsigned char",
      "359:           Icon image encoded as a compressed PNG image.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "coders/pict.c||coders/pict.c": [
      "File: coders/pict.c -> coders/pict.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1637:     source_rectangle;",
      "1639:   register const Quantum",
      "1642:   register ssize_t",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1649:     storage_class;",
      "1651:   ssize_t",
      "1654:   unsigned char",
      "",
      "[Removed Lines]",
      "1652:     y;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1682:     Initialize image info.",
      "1685:   size_rectangle.left=0;",
      "1686:   size_rectangle.bottom=(short) image->rows;",
      "1687:   size_rectangle.right=(short) image->columns;",
      "",
      "[Removed Lines]",
      "1684:   size_rectangle.top=0;",
      "",
      "[Added Lines]",
      "1684:   size_rectangle.top=0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1711:   y_resolution=image->resolution.y != 0.0 ? image->resolution.y :",
      "1712:     DefaultResolution;",
      "1713:   storage_class=image->storage_class;",
      "1715:     storage_class=DirectClass;",
      "1716:   if (storage_class == DirectClass)",
      "1717:     {",
      "",
      "[Removed Lines]",
      "1714:   if (image_info->compression == JPEGCompression)",
      "",
      "[Added Lines]",
      "1714:   if (image_info->compression == JPEGCompression)",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "643: if test \"$enable_cipher\" = 'yes'; then",
      "644:     AC_DEFINE(CIPHER_SUPPORT,1,[permit enciphering and deciphering image pixels])",
      "645: fi",
      "647: # Build a zero-configuration version of ImageMagick.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "645:     MAGICK_FEATURES=\"Cipher $MAGICK_FEATURES\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "654: if test \"$enable_zero_configuration\" = 'yes'; then",
      "655:     AC_DEFINE(ZERO_CONFIGURATION_SUPPORT,1,[Build self-contained, embeddable, zero-configuration ImageMagick])",
      "657: fi",
      "659: # Build a high dynamic range version of ImageMagick.",
      "",
      "[Removed Lines]",
      "656:     MAGICK_FEATURES=\"Zero-Configuration $MAGICK_FEATURES\"",
      "",
      "[Added Lines]",
      "657:     MAGICK_FEATURES=\"Zero-configuration $MAGICK_FEATURES\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3996: if test \"$build_modules\" != 'no'; then",
      "3997:     MAGICK_DEP_LIBS=\"$USER_LIBS $LCMS_LIBS $FREETYPE_LIBS $LQR_LIBS $FFTW_LIBS $FONTCONFIG_LIBS $XEXT_LIBS $IPC_LIBS $X11_LIBS $XT_LIBS $LZMA_LIBS $BZLIB_LIBS $ZLIB_LIBS $LTDL_LIBS $GDI32_LIBS $MATH_LIBS $GOMP_LIBS $CL_LIBS $UMEM_LIBS $JEMALLOC_LIBS $THREAD_LIBS\"",
      "3998: else",
      "4000: fi",
      "4001: AC_SUBST(MAGICK_DEP_LIBS)",
      "",
      "[Removed Lines]",
      "3999:     MAGICK_DEP_LIBS=\"$USER_LIBS $JBIG_LIBS $LCMS_LIBS $TIFF_LIBS $FREETYPE_LIBS $JPEG_LIBS $GS_LIBS $LQR_LIBS $PNG_LIBS $AUTOTRACE_LIBS $DJVU_LIBS $FFTW_LIBS $FPX_LIBS $FONTCONFIG_LIBS $WEBP_LIBS $WMF_LIBS $DPS_LIBS $XEXT_LIBS $XT_LIBS $IPC_LIBS $X11_LIBS $LZMA_LIBS $BZLIB_LIBS $OPENEXR_LIBS $OPENJPEG_LIBS $PANGO_LIBS $RSVG_LIBS $XML_LIBS $GVC_LIBS $ZLIB_LIBS $GDI32_LIBS $MATH_LIBS $GOMP_LIBS $CL_LIBS $UMEM_LIBS $JEMALLOC_LIBS $THREAD_LIBS\"",
      "",
      "[Added Lines]",
      "4000:     MAGICK_DEP_LIBS=\"$USER_LIBS $JBIG_LIBS $LCMS_LIBS $TIFF_LIBS $FREETYPE_LIBS $JPEG_LIBS $GS_LIBS $LQR_LIBS $PNG_LIBS $AUTOTRACE_LIBS $DJVU_LIBS $FFTW_LIBS $FPX_LIBS $FONTCONFIG_LIBS $WEBP_LIBS $WMF_LIBS $DPS_LIBS $XEXT_LIBS $XT_LIBS $IPC_LIBS $X11_LIBS $LZMA_LIBS $BZLIB_LIBS $OPENEXR_LIBS $LIBOPENJP2_LIB $PANGO_LIBS $RSVG_LIBS $XML_LIBS $GVC_LIBS $ZLIB_LIBS $GDI32_LIBS $MATH_LIBS $GOMP_LIBS $CL_LIBS $UMEM_LIBS $JEMALLOC_LIBS $THREAD_LIBS\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f868d1bb7f0188b65b0980feb0e92cbdb5d2ffa8",
      "candidate_info": {
        "commit_hash": "f868d1bb7f0188b65b0980feb0e92cbdb5d2ffa8",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/f868d1bb7f0188b65b0980feb0e92cbdb5d2ffa8",
        "files": [
          "MagickCore/memory.c"
        ],
        "message": "https://github.com/ImageMagick/ImageMagick/pull/75",
        "before_after_code_files": [
          "MagickCore/memory.c||MagickCore/memory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/memory.c||MagickCore/memory.c"
          ],
          "candidate": [
            "MagickCore/memory.c||MagickCore/memory.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/memory.c||MagickCore/memory.c": [
          "File: MagickCore/memory.c -> MagickCore/memory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:       return((MemoryInfo *) NULL);",
          "591:     }",
          "592:   memory_info=(MemoryInfo *) MagickAssumeAligned(AcquireAlignedMemory(1,",
          "596:   (void) ResetMagickMemory(memory_info,0,sizeof(*memory_info));",
          "599:   if (AcquireMagickResource(MemoryResource,length) != MagickFalse)",
          "600:     {",
          "601:       memory_info->blob=AcquireAlignedMemory(1,length);",
          "602:       if (memory_info->blob != NULL)",
          "603:         memory_info->type=AlignedVirtualMemory;",
          "604:       else",
          "622:       int",
          "626:         Anonymous memory mapping failed, try file-backed memory mapping.",
          "630:         RelinquishMagickResource(DiskResource,length);",
          "631:       else",
          "632:         {",
          "635:           else",
          "638:                 RelinquishMagickResource(DiskResource,length);",
          "639:               else",
          "640:                 {",
          "642:                   if (memory_info->blob != NULL)",
          "643:                     memory_info->type=MapVirtualMemory;",
          "644:                   else",
          "645:                     {",
          "646:                       RelinquishMagickResource(MapResource,length);",
          "",
          "[Removed Lines]",
          "593:     sizeof(*memory_info)));",
          "594:   if (memory_info == (MemoryInfo *) NULL)",
          "595:     ThrowFatalException(ResourceLimitFatalError,\"MemoryAllocationFailed\");",
          "597:   memory_info->length=length;",
          "598:   memory_info->signature=MagickCoreSignature;",
          "605:         RelinquishMagickResource(MemoryResource,length);",
          "606:     }",
          "607:   if ((memory_info->blob == NULL) &&",
          "608:       (AcquireMagickResource(MapResource,length) != MagickFalse))",
          "609:     {",
          "611:         Heap memory failed, try anonymous memory mapping.",
          "613:       memory_info->blob=MapBlob(-1,IOMode,0,length);",
          "614:       if (memory_info->blob != NULL)",
          "615:         memory_info->type=MapVirtualMemory;",
          "616:       else",
          "617:         RelinquishMagickResource(MapResource,length);",
          "618:     }",
          "619:   if ((memory_info->blob == NULL) &&",
          "620:       (AcquireMagickResource(DiskResource,length) != MagickFalse))",
          "621:     {",
          "623:         file;",
          "628:       file=AcquireUniqueFileResource(memory_info->filename);",
          "629:       if (file == -1)",
          "633:           if ((lseek(file,length-1,SEEK_SET) < 0) || (write(file,\"\",1) != 1))",
          "634:             RelinquishMagickResource(DiskResource,length);",
          "636:             {",
          "637:               if (AcquireMagickResource(MapResource,length) == MagickFalse)",
          "641:                   memory_info->blob=MapBlob(file,IOMode,0,length);",
          "",
          "[Added Lines]",
          "593:     sizeof(*memory_info)));",
          "594:   if (memory_info == (MemoryInfo *) NULL)",
          "595:     ThrowFatalException(ResourceLimitFatalError,\"MemoryAllocationFailed\");",
          "596:   (void) ResetMagickMemory(memory_info,0,sizeof(*memory_info));",
          "598:   memory_info->signature=MagickCoreSignature;",
          "599:   if (AcquireMagickResource(MemoryResource,length) != MagickFalse)",
          "607:     }",
          "608:   RelinquishMagickResource(MemoryResource,length);",
          "609:   if (AcquireMagickResource(MapResource,length) != MagickFalse)",
          "610:     {",
          "612:         Heap memory failed, try anonymous memory mapping.",
          "614:       memory_info->blob=MapBlob(-1,IOMode,0,length);",
          "615:       if (memory_info->blob != NULL)",
          "616:         {",
          "617:           memory_info->type=MapVirtualMemory;",
          "618:           return(memory_info);",
          "619:         }",
          "620:       if (AcquireMagickResource(DiskResource,length) != MagickFalse)",
          "621:         {",
          "623:             file;",
          "630:           file=AcquireUniqueFileResource(memory_info->filename);",
          "631:           if (file != -1)",
          "635:                 {",
          "636:                   memory_info->blob=MapBlob(file,IOMode,0,length);",
          "637:                   if (memory_info->blob != NULL)",
          "638:                     {",
          "639:                       (void) close(file);",
          "642:                     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b707f9e43fa22c268e92998bcb0452e926060b4",
      "candidate_info": {
        "commit_hash": "2b707f9e43fa22c268e92998bcb0452e926060b4",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/2b707f9e43fa22c268e92998bcb0452e926060b4",
        "files": [
          "MagickCore/version.h",
          "configure"
        ],
        "message": "",
        "before_after_code_files": [
          "MagickCore/version.h||MagickCore/version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/version.h||MagickCore/version.h"
          ],
          "candidate": [
            "MagickCore/version.h||MagickCore/version.h"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/version.h||MagickCore/version.h": [
          "File: MagickCore/version.h -> MagickCore/version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #define MagickPackageName \"ImageMagick\"",
          "29: #define MagickCopyright  \"Copyright (C) 1999-2015 ImageMagick Studio LLC\"",
          "31: #define MagickLibVersion  0x700",
          "32: #define MagickLibVersionText  \"7.0.0\"",
          "33: #define MagickLibVersionNumber  1,0,0",
          "",
          "[Removed Lines]",
          "30: #define MagickSVNRevision  \"18392M\"",
          "",
          "[Added Lines]",
          "30: #define MagickSVNRevision  \"18399:18400\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "786debc06cc6bb1cb992194b1c4c2235b42526c8",
      "candidate_info": {
        "commit_hash": "786debc06cc6bb1cb992194b1c4c2235b42526c8",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/786debc06cc6bb1cb992194b1c4c2235b42526c8",
        "files": [
          "MagickCore/version.h",
          "PerlMagick/Makefile.PL",
          "configure"
        ],
        "message": "",
        "before_after_code_files": [
          "MagickCore/version.h||MagickCore/version.h",
          "PerlMagick/Makefile.PL||PerlMagick/Makefile.PL"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/version.h||MagickCore/version.h"
          ],
          "candidate": [
            "MagickCore/version.h||MagickCore/version.h"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/version.h||MagickCore/version.h": [
          "File: MagickCore/version.h -> MagickCore/version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #define MagickPackageName \"ImageMagick\"",
          "29: #define MagickCopyright  \"Copyright (C) 1999-2014 ImageMagick Studio LLC\"",
          "31: #define MagickLibVersion  0x700",
          "32: #define MagickLibVersionText  \"7.0.0\"",
          "33: #define MagickLibVersionNumber  1,0,0",
          "",
          "[Removed Lines]",
          "30: #define MagickSVNRevision  \"16308:16316\"",
          "",
          "[Added Lines]",
          "30: #define MagickSVNRevision  \"16321:16325\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: #define MagickppLibAddendum  \"-0\"",
          "49: #define MagickppLibInterface  1",
          "50: #define MagickppLibMinInterface  1",
          "52: #define MagickChangeDate   \"20120427\"",
          "53: #define MagickAuthoritativeURL  \"http://www.imagemagick.org\"",
          "54: #define MagickFeatures \"DPC HDRI OpenMP\"",
          "",
          "[Removed Lines]",
          "51: #define MagickReleaseDate  \"2014-08-14\"",
          "",
          "[Added Lines]",
          "51: #define MagickReleaseDate  \"2014-08-16\"",
          "",
          "---------------"
        ],
        "PerlMagick/Makefile.PL||PerlMagick/Makefile.PL": [
          "File: PerlMagick/Makefile.PL -> PerlMagick/Makefile.PL",
          "--- Hunk 1 ---",
          "[Context before]",
          "163: # defaults for LIBS & INC & CCFLAGS params that we later pass to Writemakefile",
          "164: my $INC_magick = '-I../ -I.. -pthread -I/usr/include/pango-1.0 -I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libdrm -I/usr/include/libpng16 -I/usr/include/freetype2 -DMAGICKCORE_HDRI_ENABLE=1 -DMAGICKCORE_QUANTUM_DEPTH=16 -I/usr/include/libxml2 -I\"' . $Config{'usrinc'} . '/ImageMagick\"';",
          "165: my $LIBS_magick = '-L../MagickCore/.libs -lMagickCore-7.Q16HDRI -lperl -lm';",
          "170: if (($^O eq 'MSWin32') && ($Config{cc} =~ /gcc/)) {",
          "171:   my($Ipaths, $Lpaths) = AutodetectWin32gcc();",
          "",
          "[Removed Lines]",
          "166: my $CCFLAGS_magick = \"$Config{'ccflags'} -pthread -I/usr/include/OpenEXR -I/usr/include/libdrm -I/usr/include/freetype2 -fopenmp -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -march=corei7-avx -fexceptions -pthread -DMAGICKCORE_HDRI_ENABLE=1 -DMAGICKCORE_QUANTUM_DEPTH=16\";",
          "167: my $LDFLAGS_magick   = \"-L../MagickCore/.libs -lMagickCore-7.Q16HDRI $Config{'ldflags'} -Wl,-z,relro\";",
          "168: my $LDDLFLAGS_magick = \"-L../MagickCore/.libs -lMagickCore-7.Q16HDRI $Config{'lddlflags'} -Wl,-z,relro\";",
          "",
          "[Added Lines]",
          "166: my $CCFLAGS_magick = \"$Config{'ccflags'} -pthread -I/usr/include/OpenEXR -I/usr/include/libdrm -I/usr/include/freetype2 -fopenmp -g -O2 -Wall -march=corei7-avx -fexceptions -pthread -DMAGICKCORE_HDRI_ENABLE=1 -DMAGICKCORE_QUANTUM_DEPTH=16\";",
          "167: my $LDFLAGS_magick   = \"-L../MagickCore/.libs -lMagickCore-7.Q16HDRI $Config{'ldflags'} \";",
          "168: my $LDDLFLAGS_magick = \"-L../MagickCore/.libs -lMagickCore-7.Q16HDRI $Config{'lddlflags'} \";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb125a482b304c998fd88eccff22b5d57245707b",
      "candidate_info": {
        "commit_hash": "fb125a482b304c998fd88eccff22b5d57245707b",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/fb125a482b304c998fd88eccff22b5d57245707b",
        "files": [
          "MagickCore/version.h",
          "configure"
        ],
        "message": "",
        "before_after_code_files": [
          "MagickCore/version.h||MagickCore/version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/version.h||MagickCore/version.h"
          ],
          "candidate": [
            "MagickCore/version.h||MagickCore/version.h"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/version.h||MagickCore/version.h": [
          "File: MagickCore/version.h -> MagickCore/version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #define MagickPackageName \"ImageMagick\"",
          "29: #define MagickCopyright  \"Copyright (C) 1999-2015 ImageMagick Studio LLC\"",
          "31: #define MagickLibVersion  0x700",
          "32: #define MagickLibVersionText  \"7.0.0\"",
          "33: #define MagickLibVersionNumber  1,0,0",
          "",
          "[Removed Lines]",
          "30: #define MagickSVNRevision  \"17817:17832M\"",
          "",
          "[Added Lines]",
          "30: #define MagickSVNRevision  \"17908:17909\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: #define MagickppLibAddendum  \"-0\"",
          "49: #define MagickppLibInterface  1",
          "50: #define MagickppLibMinInterface  1",
          "52: #define MagickChangeDate   \"20120427\"",
          "53: #define MagickAuthoritativeURL  \"http://www.imagemagick.org\"",
          "54: #define MagickFeatures \"DPC HDRI OpenMP\"",
          "",
          "[Removed Lines]",
          "51: #define MagickReleaseDate  \"2015-01-24\"",
          "",
          "[Added Lines]",
          "51: #define MagickReleaseDate  \"2015-01-31\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "841f915b32169234a3b1f836ad54eda3e8cccf2d",
      "candidate_info": {
        "commit_hash": "841f915b32169234a3b1f836ad54eda3e8cccf2d",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/841f915b32169234a3b1f836ad54eda3e8cccf2d",
        "files": [
          "coders/icon.c"
        ],
        "message": "Fixed checking sizes of icon:auto-resize.",
        "before_after_code_files": [
          "coders/icon.c||coders/icon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/icon.c||coders/icon.c"
          ],
          "candidate": [
            "coders/icon.c||coders/icon.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/icon.c||coders/icon.c": [
          "File: coders/icon.c -> coders/icon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:     size_t",
          "184:       size;",
          "187:       p++;",
          "189:     size=(size_t)strtol(p,&q,10);",
          "",
          "[Removed Lines]",
          "186:     while ((isspace((int) ((unsigned char) *p)) != 0))",
          "",
          "[Added Lines]",
          "186:     while ((isspace((int) ((unsigned char) *p)) != 0))",
          "",
          "---------------"
        ]
      }
    }
  ]
}