{
  "cve_id": "CVE-2021-39191",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
  "patch_info": {
    "commit_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "auth_openidc.conf",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "auth_openidc.conf||auth_openidc.conf",
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "auth_openidc.conf||auth_openidc.conf": [
      "File: auth_openidc.conf -> auth_openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "918: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
      "920: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
      "923: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
      "924: # or:",
      "925: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
      "",
      "[Removed Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, e.g.:",
      "",
      "[Added Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in",
      "923: # 3rd-party initiated logins, e.g.:",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:  return TRUE;",
      "2458: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2460: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2462: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2463:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2464:   char **err_desc) {",
      "2465:  apr_uri_t uri;",
      "2466:  const char *c_host = NULL;",
      "2467:  apr_hash_index_t *hi = NULL;",
      "2468:  size_t i = 0;",
      "2469:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2472:  for (i = 0; i < strlen(url); i++)",
      "2473:   if (url[i] == '\\\\')",
      "2474:    url[i] = '/';",
      "2476:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2479:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2480:   return FALSE;",
      "2481:  }",
      "2483:  if (c->redirect_urls_allowed != NULL) {",
      "2484:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2485:     apr_hash_next(hi)) {",
      "2486:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2487:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2488:      NULL, err_str) == TRUE)",
      "2489:     break;",
      "2490:   }",
      "2491:   if (hi == NULL) {",
      "2494:      apr_psprintf(r->pool,",
      "2495:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2496:        url);",
      "2497:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2498:    return FALSE;",
      "2499:   }",
      "2500:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2501:   c_host = oidc_get_current_url_host(r);",
      "2502:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2503:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2506:      apr_psprintf(r->pool,",
      "2507:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2508:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2509:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2510:    return FALSE;",
      "2511:   }",
      "2512:  }",
      "2514:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "2517:     apr_psprintf(r->pool,",
      "2518:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "2519:       url);",
      "2520:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2521:   return FALSE;",
      "2522:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "2525:     \"No hostname was parsed and starting with '//': %s\", url);",
      "2526:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2527:   return FALSE;",
      "2528:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "2531:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "2532:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2533:   return FALSE;",
      "2534:  }",
      "2537:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "2540:     apr_psprintf(r->pool,",
      "2541:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "2542:       url);",
      "2543:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2544:   return FALSE;",
      "2545:  }",
      "2547:  return TRUE;",
      "2548: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2469:  oidc_provider_t *provider = NULL;",
      "2471:  oidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);",
      "2472:  oidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:  char *error_str = NULL;",
      "2561:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2519:     HTTP_UNAUTHORIZED);",
      "2520:  }",
      "2523:  if (c->metadata_dir == NULL) {",
      "2524:   if ((oidc_provider_static_config(r, c, &provider) == TRUE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2615:  if (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,",
      "2616:    &error_description) == FALSE) {",
      "2617:   return oidc_util_html_send_error(r, c->error_template, error_str,",
      "2618:     error_description,",
      "2619:     HTTP_UNAUTHORIZED);",
      "2620:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2947:  return rc;",
      "2948: }",
      "",
      "[Removed Lines]",
      "2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2953:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2954:   char **err_desc) {",
      "2955:  apr_uri_t uri;",
      "2956:  const char *c_host = NULL;",
      "2957:  apr_hash_index_t *hi = NULL;",
      "2958:  size_t i = 0;",
      "2959:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2962:  for (i = 0; i < strlen(url); i++)",
      "2963:   if (url[i] == '\\\\')",
      "2964:    url[i] = '/';",
      "2966:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2969:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2970:   return FALSE;",
      "2971:  }",
      "2973:  if (c->redirect_urls_allowed != NULL) {",
      "2974:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2975:     apr_hash_next(hi)) {",
      "2976:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2977:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2978:      NULL, err_str) == TRUE)",
      "2979:     break;",
      "2980:   }",
      "2981:   if (hi == NULL) {",
      "2984:      apr_psprintf(r->pool,",
      "2985:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2986:        url);",
      "2987:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2988:    return FALSE;",
      "2989:   }",
      "2990:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2991:   c_host = oidc_get_current_url_host(r);",
      "2992:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2993:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2996:      apr_psprintf(r->pool,",
      "2997:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2998:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2999:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3000:    return FALSE;",
      "3001:   }",
      "3002:  }",
      "3004:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "3007:     apr_psprintf(r->pool,",
      "3008:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3009:       url);",
      "3010:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3011:   return FALSE;",
      "3012:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "3015:     \"No hostname was parsed and starting with '//': %s\", url);",
      "3016:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3017:   return FALSE;",
      "3018:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3021:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "3022:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3023:   return FALSE;",
      "3024:  }",
      "3027:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3030:     apr_psprintf(r->pool,",
      "3031:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3032:       url);",
      "3033:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3034:   return FALSE;",
      "3035:  }",
      "3037:  return TRUE;",
      "3038: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5498b7002d49a85c13da086ba9fbef35563761c2",
      "candidate_info": {
        "commit_hash": "5498b7002d49a85c13da086ba9fbef35563761c2",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/5498b7002d49a85c13da086ba9fbef35563761c2",
        "files": [
          ".gitignore",
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/proto.c",
          "test/.gitignore"
        ],
        "message": "avoid jwt/proto_state json_object memory leaks on cache failures\n\nbump to 2.4.7.1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.7],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.7.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1534:    oidc_proto_state_get_issuer(*proto_state), FALSE);",
          "1537: }",
          "",
          "[Removed Lines]",
          "1536:  return (*provider != NULL);",
          "",
          "[Added Lines]",
          "1536:  if (*provider == NULL) {",
          "1537:   oidc_proto_state_destroy(*proto_state);",
          "1539:   return FALSE;",
          "1540:  }",
          "1542:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1983:     apr_table_get(params, OIDC_PROTO_REFRESH_TOKEN),",
          "1984:     apr_table_get(params, OIDC_PROTO_SESSION_STATE),",
          "1985:     apr_table_get(params, OIDC_PROTO_STATE), original_url,",
          "1987:    return HTTP_INTERNAL_SERVER_ERROR;",
          "1989:  } else {",
          "1990:   oidc_error(r, \"remote user could not be set\");",
          "1991:   return oidc_authorization_response_error(r, c, proto_state,",
          "1992:     \"Remote user could not be set: contact the website administrator\",",
          "1993:     NULL);",
          "",
          "[Removed Lines]",
          "1986:     userinfo_jwt) == FALSE)",
          "",
          "[Added Lines]",
          "1992:     userinfo_jwt) == FALSE) {",
          "1993:    oidc_proto_state_destroy(proto_state);",
          "1994:    oidc_jwt_destroy(jwt);",
          "1996:   }",
          "2000:   oidc_jwt_destroy(jwt);",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2893:  if ((must_validate_code == TRUE)",
          "2894:    && (oidc_proto_validate_code(r, provider, *jwt, response_type, code)",
          "2896:   return FALSE;",
          "2898:  return TRUE;",
          "2899: }",
          "",
          "[Removed Lines]",
          "2895:      == FALSE))",
          "",
          "[Added Lines]",
          "2895:      == FALSE)) {",
          "2896:   oidc_jwt_destroy(*jwt);",
          "2898:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1330750ffed959365e9cfe28a158264b119c437",
      "candidate_info": {
        "commit_hash": "e1330750ffed959365e9cfe28a158264b119c437",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/e1330750ffed959365e9cfe28a158264b119c437",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/redis.c"
        ],
        "message": "improve sanity checking on Redis reply\n\nbump to 2.4.5rc4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/redis.c||src/cache/redis.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/redis.c||src/cache/redis.c": [
          "File: src/cache/redis.c -> src/cache/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:   goto end;",
          "292:  }",
          "298:   goto end;",
          "299:  }",
          "",
          "[Removed Lines]",
          "295:  if (reply->len != strlen(reply->str)) {",
          "296:   oidc_error(r, \"redisCommand reply->len != strlen(reply->str): '%s'\",",
          "297:     reply->str);",
          "",
          "[Added Lines]",
          "294:  if (reply->type != REDIS_REPLY_STRING) {",
          "295:   oidc_error(r, \"redisCommand reply type is not string: %d\", reply->type);",
          "296:   goto end;",
          "297:  }",
          "300:  if ((reply->len < 0) || (reply->str == NULL)",
          "301:    || (reply->len != strlen(reply->str))) {",
          "302:   oidc_error(r,",
          "303:     \"redisCommand reply->len (%d) != strlen(reply->str): '%s'\",",
          "304:     (int )reply->len, reply->str);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "276bdafdb241bd88cb1069035df79e23ef4a0ada",
      "candidate_info": {
        "commit_hash": "276bdafdb241bd88cb1069035df79e23ef4a0ada",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/276bdafdb241bd88cb1069035df79e23ef4a0ada",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "bump to 2.4.9rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9-dev],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9127ab4cb4809cb143a4a1b248638fba37449833",
      "candidate_info": {
        "commit_hash": "9127ab4cb4809cb143a4a1b248638fba37449833",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/9127ab4cb4809cb143a4a1b248638fba37449833",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "fix handling of IPv6 based logout URLs\n\nthanks @@codemaker219; bump to 2.4.11.3rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.3rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.3rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac5686495a51bc93e257e42bfdc9c9c46252feb1",
      "candidate_info": {
        "commit_hash": "ac5686495a51bc93e257e42bfdc9c9c46252feb1",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/ac5686495a51bc93e257e42bfdc9c9c46252feb1",
        "files": [
          "ChangeLog",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/proto.c"
        ],
        "message": "handle discovery in the content handler\n\nreturn OK in the content handler for calls to the redirect URI and when\npreserving POST data\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2252:  if (provider == NULL) {",
          "2259:   if (oidc_provider_static_config(r, c, &provider) == FALSE)",
          "",
          "[Removed Lines]",
          "2255:   if (c->metadata_dir != NULL)",
          "2256:    return oidc_discovery(r, c);",
          "",
          "[Added Lines]",
          "2255:   if (c->metadata_dir != NULL) {",
          "2261:    oidc_debug(r, \"defer discovery to the content handler\");",
          "2262:    oidc_request_state_set(r, OIDC_REQUEST_STATE_KEY_DISCOVERY, \"\");",
          "2263:    r->user = \"\";",
          "2264:    return OK;",
          "2265:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2687:   const char *accept = oidc_util_hdr_in_accept_get(r);",
          "2688:   if ((apr_strnatcmp(url, OIDC_IMG_STYLE_LOGOUT_PARAM_VALUE) == 0)",
          "2689:     || ((accept) && strstr(accept, OIDC_CONTENT_TYPE_IMAGE_PNG))) {",
          "2692:    return oidc_util_http_send(r, (const char*) &oidc_transparent_pixel,",
          "2693:      sizeof(oidc_transparent_pixel), OIDC_CONTENT_TYPE_IMAGE_PNG,",
          "2695:   }",
          "2698:   return oidc_util_html_send(r, \"Logged Out\", NULL, NULL,",
          "2700:  }",
          "",
          "[Removed Lines]",
          "2694:      DONE);",
          "2699:     \"<p>Logged Out</p>\", DONE);",
          "",
          "[Added Lines]",
          "2701:      OK);",
          "2706:     \"<p>Logged Out</p>\", OK);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2868:   oidc_error(r,",
          "2869:     \"could not find session based on sid/sub provided in logout token: %s\",",
          "2870:     sid);",
          "2874:   goto out;",
          "2875:  }",
          "",
          "[Removed Lines]",
          "2873:   rc = DONE;",
          "",
          "[Added Lines]",
          "2878:   r->user = \"\";",
          "2879:   rc = OK;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2885:  oidc_cache_set_sid(r, sid, NULL, 0);",
          "2886:  oidc_cache_set_session(r, uuid, NULL, 0);",
          "2892: out:",
          "",
          "[Removed Lines]",
          "2890:  rc = DONE;",
          "",
          "[Added Lines]",
          "2894:  r->user = \"\";",
          "2895:  rc = OK;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4137:  apr_byte_t needs_save = FALSE;",
          "4138:  oidc_session_t *session = NULL;",
          "4161:   }",
          "4163:  }",
          "",
          "[Removed Lines]",
          "4140:  if (oidc_enabled(r)",
          "4141:    && oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c))) {",
          "4143:   if (oidc_util_request_has_parameter(r,",
          "4144:     OIDC_REDIRECT_URI_REQUEST_INFO)) {",
          "4146:    oidc_session_load(r, &session);",
          "4148:    rc = oidc_handle_existing_session(r, c, session, &needs_save);",
          "4149:    if (rc == OK)",
          "4151:     rc = oidc_handle_info_request(r, c, session, needs_save);",
          "4154:    oidc_session_free(r, session);",
          "4156:   } else if (oidc_util_request_has_parameter(r,",
          "4157:     OIDC_REDIRECT_URI_REQUEST_JWKS)) {",
          "4160:    rc = oidc_handle_jwks(r, c);",
          "",
          "[Added Lines]",
          "4145:  if (oidc_enabled(r) == TRUE) {",
          "4147:   if (oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c)) == TRUE) {",
          "4149:    if (oidc_util_request_has_parameter(r,",
          "4150:      OIDC_REDIRECT_URI_REQUEST_INFO)) {",
          "4152:     oidc_session_load(r, &session);",
          "4154:     rc = oidc_handle_existing_session(r, c, session, &needs_save);",
          "4155:     if (rc == OK)",
          "4157:      rc = oidc_handle_info_request(r, c, session, needs_save);",
          "4160:     oidc_session_free(r, session);",
          "4162:    } else if (oidc_util_request_has_parameter(r,",
          "4163:      OIDC_REDIRECT_URI_REQUEST_JWKS)) {",
          "4166:     rc = oidc_handle_jwks(r, c);",
          "4168:    } else {",
          "4170:     rc = OK;",
          "4172:    }",
          "4174:   } else if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL) {",
          "4176:    rc = oidc_discovery(r, c);",
          "4178:   } else if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_AUTHN) != NULL) {",
          "4180:    rc = OK;",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: #define OIDC_REQUEST_STATE_KEY_IDTOKEN \"i\"",
          "89: #define OIDC_REQUEST_STATE_KEY_CLAIMS  \"c\"",
          "92: #define OIDC_DISC_CB_PARAM \"oidc_callback\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: #define OIDC_REQUEST_STATE_KEY_DISCOVERY  \"d\"",
          "91: #define OIDC_REQUEST_STATE_KEY_AUTHN  \"a\"",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "760:    rv = HTTP_MOVED_TEMPORARILY;",
          "761:   }",
          "762:  } else {",
          "763:   oidc_error(r, \"provider->auth_request_method set to wrong value: %d\",",
          "764:     provider->auth_request_method);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762:   } else {",
          "765:    oidc_request_state_set(r, OIDC_REQUEST_STATE_KEY_AUTHN, \"\");",
          "766:    r->user = \"\";",
          "767:    rv = OK;",
          "",
          "---------------"
        ]
      }
    }
  ]
}