{
  "cve_id": "CVE-2021-40153",
  "cve_desc": "squashfs_opendir in unsquash-1.c in Squashfs-Tools 4.5 stores the filename in the directory entry; this is then used by unsquashfs to create the new file during the unsquash. The filename is not validated for traversal outside of the destination directory, and thus allows writing to locations outside of the destination.",
  "repo": "plougher/squashfs-tools",
  "patch_hash": "79b5a555058eef4e1e7ff220c344d39f8cd09646",
  "patch_info": {
    "commit_hash": "79b5a555058eef4e1e7ff220c344d39f8cd09646",
    "repo": "plougher/squashfs-tools",
    "commit_url": "https://github.com/plougher/squashfs-tools/commit/79b5a555058eef4e1e7ff220c344d39f8cd09646",
    "files": [
      "squashfs-tools/Makefile",
      "squashfs-tools/unsquash-1.c",
      "squashfs-tools/unsquash-1234.c",
      "squashfs-tools/unsquash-2.c",
      "squashfs-tools/unsquash-3.c",
      "squashfs-tools/unsquash-4.c",
      "squashfs-tools/unsquashfs.c",
      "squashfs-tools/unsquashfs.h"
    ],
    "message": "Unsquashfs: fix write outside destination directory exploit\n\nAn issue on Github (https://github.com/plougher/squashfs-tools/issues/72)\nshows how some specially crafted Squashfs filesystems containing\ninvalid file names (with '/' and ..) can cause Unsquashfs to write\nfiles outside of the destination directory.\n\nThis commit fixes this exploit by checking all names for\nvalidity.\n\nIn doing so I have also added checks for '.' and for names that\nare shorter than they should be (names in the file system should\nnot have '\\0' terminators).\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
    "before_after_code_files": [
      "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c",
      "squashfs-tools/unsquash-1234.c||squashfs-tools/unsquash-1234.c",
      "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c",
      "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c",
      "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
      "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c",
      "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h"
    ]
  },
  "patch_diff": {
    "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c": [
      "File: squashfs-tools/unsquash-1.c -> squashfs-tools/unsquash-1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "285:    memcpy(dire->name, directory_table + bytes,",
      "286:     dire->size + 1);",
      "287:    dire->name[dire->size + 1] = '\\0';",
      "288:    TRACE(\"squashfs_opendir: directory entry %s, inode \"",
      "289:     \"%d:%d, type %d\\n\", dire->name,",
      "290:     dirh.start_block, dire->offset, dire->type);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "290:    if(check_name(dire->name, dire->size + 1) == FALSE) {",
      "291:     ERROR(\"File system corrupted: invalid characters in name\\n\");",
      "292:     goto corrupted;",
      "293:    }",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquash-1234.c||squashfs-tools/unsquash-1234.c": [
      "File: squashfs-tools/unsquash-1234.c -> squashfs-tools/unsquash-1234.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #define TRUE 1",
      "29: #define FALSE 0",
      "37: int check_name(char *name, int size)",
      "38: {",
      "39:  char *start = name;",
      "41:  if(name[0] == '.') {",
      "42:   if(name[1] == '.')",
      "43:    name++;",
      "44:   if(name[1] == '/' || name[1] == '\\0')",
      "45:    return FALSE;",
      "46:  }",
      "48:  while(name[0] != '/' && name[0] != '\\0')",
      "49:   name ++;",
      "51:  if(name[0] == '/')",
      "52:   return FALSE;",
      "54:  if((name - start) != size)",
      "55:   return FALSE;",
      "57:  return TRUE;",
      "58: }",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c": [
      "File: squashfs-tools/unsquash-2.c -> squashfs-tools/unsquash-2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "386:    memcpy(dire->name, directory_table + bytes,",
      "387:     dire->size + 1);",
      "388:    dire->name[dire->size + 1] = '\\0';",
      "389:    TRACE(\"squashfs_opendir: directory entry %s, inode \"",
      "390:     \"%d:%d, type %d\\n\", dire->name,",
      "391:     dirh.start_block, dire->offset, dire->type);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "391:    if(check_name(dire->name, dire->size + 1) == FALSE) {",
      "392:     ERROR(\"File system corrupted: invalid characters in name\\n\");",
      "393:     goto corrupted;",
      "394:    }",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c": [
      "File: squashfs-tools/unsquash-3.c -> squashfs-tools/unsquash-3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "413:    memcpy(dire->name, directory_table + bytes,",
      "414:     dire->size + 1);",
      "415:    dire->name[dire->size + 1] = '\\0';",
      "416:    TRACE(\"squashfs_opendir: directory entry %s, inode \"",
      "417:     \"%d:%d, type %d\\n\", dire->name,",
      "418:     dirh.start_block, dire->offset, dire->type);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "418:    if(check_name(dire->name, dire->size + 1) == FALSE) {",
      "419:     ERROR(\"File system corrupted: invalid characters in name\\n\");",
      "420:     goto corrupted;",
      "421:    }",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c": [
      "File: squashfs-tools/unsquash-4.c -> squashfs-tools/unsquash-4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "349:    memcpy(dire->name, directory_table + bytes,",
      "350:     dire->size + 1);",
      "351:    dire->name[dire->size + 1] = '\\0';",
      "352:    TRACE(\"squashfs_opendir: directory entry %s, inode \"",
      "353:     \"%d:%d, type %d\\n\", dire->name,",
      "354:     dirh.start_block, dire->offset, dire->type);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "354:    if(check_name(dire->name, dire->size + 1) == FALSE) {",
      "355:     ERROR(\"File system corrupted: invalid characters in name\\n\");",
      "356:     goto corrupted;",
      "357:    }",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
      "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2672: #define VERSION() \\",
      "2674:  printf(\"copyright (C) 2021 Phillip Lougher \"\\",
      "2675:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
      "2676:      printf(\"This program is free software; you can redistribute it and/or\"\\",
      "",
      "[Removed Lines]",
      "2673:  printf(\"unsquashfs version 4.4-git (2021/01/09)\\n\");\\",
      "",
      "[Added Lines]",
      "2673:  printf(\"unsquashfs version 4.4-git (2021/01/17)\\n\");\\",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h": [
      "File: squashfs-tools/unsquashfs.h -> squashfs-tools/unsquashfs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "263: extern long long *alloc_index_table(int);",
      "264: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "266: extern int check_name(char *, int);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9f02b65d866238202d46b2aba32b5e1fff6521e1",
      "candidate_info": {
        "commit_hash": "9f02b65d866238202d46b2aba32b5e1fff6521e1",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/9f02b65d866238202d46b2aba32b5e1fff6521e1",
        "files": [
          "squashfs-tools/unsquashfs.c"
        ],
        "message": "unsquashfs: shorten options line to < 80 columns\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3780:  fprintf(stream, \"\\t-max[-depth] <levels>\\tdescend at most <levels> of \");",
          "3781:  fprintf(stream, \"directories when\\n\\t\\t\\t\\tunsquashing or listing\\n\");",
          "3782:  fprintf(stream, \"\\t-excludes\\t\\ttreat files on command line as exclude files\\n\");",
          "3785:  fprintf(stream, \"\\t-follow[-symlinks]\\tfollow symlinks in extract files, and \");",
          "3786:  fprintf(stream, \"add all\\n\\t\\t\\t\\tfiles/symlinks needed to resolve extract \");",
          "3787:  fprintf(stream, \"file.\\n\\t\\t\\t\\tImplies -no-wildcards\\n\");",
          "",
          "[Removed Lines]",
          "3783:  fprintf(stream, \"\\t-ex[clude-list]\\t\\tlist of files/dirs to be excluded, \");",
          "3784:  fprintf(stream, \"terminated with ';'\\n\");",
          "",
          "[Added Lines]",
          "3783:  fprintf(stream, \"\\t-ex[clude-list]\\t\\tlist of files to be excluded, \");",
          "3784:  fprintf(stream, \"terminated with ;\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "866069824774ede7f105da2133ff855477e0a51f",
      "candidate_info": {
        "commit_hash": "866069824774ede7f105da2133ff855477e0a51f",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/866069824774ede7f105da2133ff855477e0a51f",
        "files": [
          "squashfs-tools/unsquashfs.c"
        ],
        "message": "Unsquashfs: Add new -max-depth <levels> option\n\nAdd a new option, similar to find -maxdepth, that limits\nthe unsquashing or listing of files, to <levels> directories.\nOr only descend <levels> directories when unsquashing or\nlisting.\n\nThis is an option I have sometimes wanted with Unsquashfs to\nlimit the output, but as so often happens it is easier\nto work around it when that happens, rather than go to the\ntrouble of adding it, and so it has remained a to-do feature.\n\nA recent request suggests it is an option that other people\nwould find useful, and so here it is.   Better late than never.\n\nIt does what it says, a <levels> of 0 produces only the root\ndirectory, a <levels> of 1 produces the entries in the\ntop-level directory and so on.\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1534: int pre_scan(char *parent_name, unsigned int start_block, unsigned int offset,",
          "1536: {",
          "1537:  unsigned int type;",
          "1538:  int scan_res = TRUE;",
          "1539:  char *name;",
          "1540:  struct pathnames *new;",
          "1541:  struct inode *i;",
          "1544:  if(dir == NULL)",
          "1545:   return FALSE;",
          "",
          "[Removed Lines]",
          "1535:  struct pathnames *paths)",
          "1542:  struct dir *dir = s_ops->opendir(start_block, offset, &i);",
          "",
          "[Added Lines]",
          "1536:  struct pathnames *paths, int depth)",
          "1543:  struct dir *dir;",
          "1545:  if(max_depth != -1 && depth > max_depth)",
          "1546:   return TRUE;",
          "1548:  dir = s_ops->opendir(start_block, offset, &i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1560:    EXIT_UNSQUASH(\"asprintf failed in dir_scan\\n\");",
          "1562:   if(type == SQUASHFS_DIR_TYPE) {",
          "1564:    if(res == FALSE)",
          "1565:     scan_res = FALSE;",
          "1566:   } else if(new == NULL) {",
          "",
          "[Removed Lines]",
          "1563:    res = pre_scan(parent_name, start_block, offset, new);",
          "",
          "[Added Lines]",
          "1568:    res = pre_scan(parent_name, start_block, offset, new, depth + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1591: int dir_scan(char *parent_name, unsigned int start_block, unsigned int offset,",
          "1593: {",
          "1594:  unsigned int type;",
          "1595:  int scan_res = TRUE;",
          "",
          "[Removed Lines]",
          "1592:  struct pathnames *paths)",
          "",
          "[Added Lines]",
          "1597:  struct pathnames *paths, int depth)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1643:   }",
          "1644:  }",
          "1687:  }",
          "1689:  if(!lsonly)",
          "",
          "[Removed Lines]",
          "1646:  while(squashfs_readdir(dir, &name, &start_block, &offset, &type)) {",
          "1647:   char *pathname;",
          "1648:   int res;",
          "1650:   TRACE(\"dir_scan: name %s, start_block %d, offset %d, type %d\\n\",",
          "1651:    name, start_block, offset, type);",
          "1654:   if(!matches(paths, name, &new))",
          "1655:    continue;",
          "1657:   res = asprintf(&pathname, \"%s/%s\", parent_name, name);",
          "1658:   if(res == -1)",
          "1659:    EXIT_UNSQUASH(\"asprintf failed in dir_scan\\n\");",
          "1661:   if(type == SQUASHFS_DIR_TYPE) {",
          "1662:    res = dir_scan(pathname, start_block, offset, new);",
          "1663:    if(res == FALSE)",
          "1664:     scan_res = FALSE;",
          "1665:    free(pathname);",
          "1666:   } else if(new == NULL) {",
          "1667:    update_info(pathname);",
          "1669:    i = s_ops->read_inode(start_block, offset);",
          "1671:    if(lsonly || info)",
          "1672:     print_filename(pathname, i);",
          "1674:    if(!lsonly) {",
          "1675:     res = create_inode(pathname, i);",
          "1676:     if(res == FALSE)",
          "1677:      scan_res = FALSE;",
          "1678:    }",
          "1680:    if(i->type == SQUASHFS_SYMLINK_TYPE ||",
          "1681:      i->type == SQUASHFS_LSYMLINK_TYPE)",
          "1682:     free(i->symlink);",
          "1683:   } else",
          "1684:    free(pathname);",
          "1686:   free_subdir(new);",
          "",
          "[Added Lines]",
          "1651:  if(max_depth == -1 || depth <= max_depth) {",
          "1652:   while(squashfs_readdir(dir, &name, &start_block, &offset, &type)) {",
          "1653:    char *pathname;",
          "1654:    int res;",
          "1656:    TRACE(\"dir_scan: name %s, start_block %d, offset %d, type %d\\n\",",
          "1657:     name, start_block, offset, type);",
          "1660:    if(!matches(paths, name, &new))",
          "1661:     continue;",
          "1663:    res = asprintf(&pathname, \"%s/%s\", parent_name, name);",
          "1664:    if(res == -1)",
          "1665:     EXIT_UNSQUASH(\"asprintf failed in dir_scan\\n\");",
          "1667:    if(type == SQUASHFS_DIR_TYPE) {",
          "1668:     res = dir_scan(pathname, start_block, offset, new, depth + 1);",
          "1669:     if(res == FALSE)",
          "1670:      scan_res = FALSE;",
          "1671:     free(pathname);",
          "1672:    } else if(new == NULL) {",
          "1673:     update_info(pathname);",
          "1675:     i = s_ops->read_inode(start_block, offset);",
          "1677:     if(lsonly || info)",
          "1678:      print_filename(pathname, i);",
          "1680:     if(!lsonly) {",
          "1681:      res = create_inode(pathname, i);",
          "1682:      if(res == FALSE)",
          "1683:       scan_res = FALSE;",
          "1684:     }",
          "1686:     if(i->type == SQUASHFS_SYMLINK_TYPE ||",
          "1687:       i->type == SQUASHFS_LSYMLINK_TYPE)",
          "1688:      free(i->symlink);",
          "1689:    } else",
          "1690:     free(pathname);",
          "1692:    free_subdir(new);",
          "1693:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2622: #define VERSION() \\",
          "2624:  printf(\"copyright (C) 2021 Phillip Lougher \"\\",
          "2625:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
          "2626:      printf(\"This program is free software; you can redistribute it and/or\"\\",
          "",
          "[Removed Lines]",
          "2623:  printf(\"unsquashfs version 4.4-git (2021/01/07)\\n\");\\",
          "",
          "[Added Lines]",
          "2630:  printf(\"unsquashfs version 4.4-git (2021/01/08)\\n\");\\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2716:      argv[0]);",
          "2717:     exit(1);",
          "2718:    }",
          "2719:   } else if(strcmp(argv[i], \"-data-queue\") == 0 ||",
          "2720:       strcmp(argv[i], \"-da\") == 0) {",
          "2721:    if((++i == argc) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2726:   } else if(strcmp(argv[i], \"-max-depth\") == 0 ||",
          "2727:     strcmp(argv[i], \"-max\") == 0) {",
          "2728:    if((++i == argc) ||",
          "2729:      !parse_number(argv[i],",
          "2730:       &max_depth)) {",
          "2731:     ERROR(\"%s: -max-depth missing or invalid \"",
          "2732:      \"levels\\n\", argv[0]);",
          "2733:     exit(1);",
          "2734:    }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2814:     \"copyright information\\n\");",
          "2815:    ERROR(\"\\t-d[est] <pathname>\\tunsquash to <pathname>, \"",
          "2816:     \"default \\\"squashfs-root\\\"\\n\");",
          "2817:    ERROR(\"\\t-q[uiet]\\t\\tno verbose output\\n\");",
          "2818:    ERROR(\"\\t-n[o-progress]\\t\\tdon't display the progress \"",
          "2819:     \"bar\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2833:    ERROR(\"\\t-max[-depth] <levels>\\tdescend at most \"",
          "2834:     \"<levels> of directories when\"",
          "2835:     \"\\n\\t\\t\\t\\tunsquashing or listing\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2957:  if(!quiet || progress) {",
          "2958:   res = pre_scan(dest, SQUASHFS_INODE_BLK(sBlk.s.root_inode),",
          "2960:   if(res == FALSE)",
          "2961:    exit_code = 1;",
          "",
          "[Removed Lines]",
          "2959:    SQUASHFS_INODE_OFFSET(sBlk.s.root_inode), paths);",
          "",
          "[Added Lines]",
          "2978:    SQUASHFS_INODE_OFFSET(sBlk.s.root_inode), paths, 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2975:  }",
          "2977:  res = dir_scan(dest, SQUASHFS_INODE_BLK(sBlk.s.root_inode),",
          "2979:  if(res == FALSE)",
          "2980:   exit_code = 1;",
          "",
          "[Removed Lines]",
          "2978:   SQUASHFS_INODE_OFFSET(sBlk.s.root_inode), paths);",
          "",
          "[Added Lines]",
          "2997:   SQUASHFS_INODE_OFFSET(sBlk.s.root_inode), paths, 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3b251f73a493d50ee64efb0954a069c461ee817",
      "candidate_info": {
        "commit_hash": "b3b251f73a493d50ee64efb0954a069c461ee817",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/b3b251f73a493d50ee64efb0954a069c461ee817",
        "files": [
          "squashfs-tools/unsquashfs.c"
        ],
        "message": "Unsquashfs: add -cat to options text\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3424: static void print_options(char *name)",
          "3425: {",
          "3428:  ERROR(\"\\t-v[ersion]\\t\\tprint version, licence and copyright \");",
          "3429:  ERROR(\"information\\n\");",
          "3430:  ERROR(\"\\t-d[est] <pathname>\\tunsquash to <pathname>, default \");",
          "3431:  ERROR(\"\\\"squashfs-root\\\"\\n\");",
          "3432:  ERROR(\"\\t-max[-depth] <levels>\\tdescend at most <levels> of \");",
          "",
          "[Removed Lines]",
          "3426:  ERROR(\"SYNTAX: %s [options] filesystem [directories or files \", name);",
          "3427:  ERROR(\"to extract or exclude (with -excludes)]\\n\");",
          "",
          "[Added Lines]",
          "3426:  ERROR(\"SYNTAX: %s [options] filesystem [files \", name);",
          "3427:  ERROR(\"to extract or exclude (with -excludes) or cat (with -cat )]\\n\");",
          "3430:  ERROR(\"\\t-cat\\t\\t\\tcat the listed files to stdout\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}