{
  "cve_id": "CVE-2017-3735",
  "cve_desc": "While parsing an IPAddressFamily extension in an X.509 certificate, it is possible to do a one-byte overread. This would result in an incorrect text display of the certificate. This bug has been present since 2006 and is present in all versions of OpenSSL before 1.0.2m and 1.1.0g.",
  "repo": "openssl/openssl",
  "patch_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
  "patch_info": {
    "commit_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "files": [
      "crypto/x509v3/v3_addr.c"
    ],
    "message": "Avoid out-of-bounds read\n\nFixes CVE 2017-3735\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\n(Merged from https://github.com/openssl/openssl/pull/4276)\n\n(cherry picked from commit b23171744b01e473ebbfd6edad70c1c3825ffbcd)",
    "before_after_code_files": [
      "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c"
    ]
  },
  "patch_diff": {
    "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c": [
      "File: crypto/x509v3/v3_addr.c -> crypto/x509v3/v3_addr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: unsigned int X509v3_addr_get_afi(const IPAddressFamily *f)",
      "86: {",
      "91: }",
      "",
      "[Removed Lines]",
      "87:     return ((f != NULL &&",
      "88:              f->addressFamily != NULL && f->addressFamily->data != NULL)",
      "89:             ? ((f->addressFamily->data[0] << 8) | (f->addressFamily->data[1]))",
      "90:             : 0);",
      "",
      "[Added Lines]",
      "87:     if (f == NULL",
      "88:             || f->addressFamily == NULL",
      "89:             || f->addressFamily->data == NULL",
      "90:             || f->addressFamily->length < 2)",
      "91:         return 0;",
      "92:     return (f->addressFamily->data[0] << 8) | f->addressFamily->data[1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b39931eeebf97a0d46af858eda9cb1943f0743c",
      "candidate_info": {
        "commit_hash": "7b39931eeebf97a0d46af858eda9cb1943f0743c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7b39931eeebf97a0d46af858eda9cb1943f0743c",
        "files": [
          "test/evp_test.c",
          "test/evptests.txt"
        ],
        "message": "evp_test.c: Add PrivPubKeyPair test\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3246)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "273: static const struct evp_test_method pbe_test_method;",
          "274: static const struct evp_test_method encode_test_method;",
          "275: static const struct evp_test_method kdf_test_method;",
          "277: static const struct evp_test_method *evp_test_list[] = {",
          "278:     &digest_test_method,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276: static const struct evp_test_method keypair_test_method;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:     &pbe_test_method,",
          "287:     &encode_test_method,",
          "288:     &kdf_test_method,",
          "289:     NULL",
          "290: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:     &keypair_test_method,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2040:     kdf_test_parse,",
          "2041:     kdf_test_run",
          "2042: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2046: struct keypair_test_data {",
          "2047:     EVP_PKEY *privk;",
          "2048:     EVP_PKEY *pubk;",
          "2049: };",
          "2051: static int keypair_test_init(struct evp_test *t, const char *pair)",
          "2052: {",
          "2053:     int rv = 0;",
          "2054:     EVP_PKEY *pk = NULL, *pubk = NULL;",
          "2055:     char *pub, *priv = NULL;",
          "2056:     const char *err = \"INTERNAL_ERROR\";",
          "2057:     struct keypair_test_data *data;",
          "2059:     priv = OPENSSL_strdup(pair);",
          "2060:     if (priv == NULL)",
          "2061:         return 0;",
          "2062:     pub = strchr(priv, ':');",
          "2063:     if ( pub == NULL ) {",
          "2064:         fprintf(stderr, \"Wrong syntax \\\"%s\\\"\\n\", pair);",
          "2065:         goto end;",
          "2066:     }",
          "2069:     if (find_key(&pk, priv, t->private) == 0) {",
          "2070:         fprintf(stderr, \"Cannot find private key: %s\\n\", priv);",
          "2071:         err = \"MISSING_PRIVATE_KEY\";",
          "2072:         goto end;",
          "2073:     }",
          "2074:     if (find_key(&pubk, pub, t->public) == 0) {",
          "2075:         fprintf(stderr, \"Cannot find public key: %s\\n\", pub);",
          "2076:         err = \"MISSING_PUBLIC_KEY\";",
          "2077:         goto end;",
          "2078:     }",
          "2080:     if (pk == NULL && pubk == NULL) {",
          "2082:         t->skip = 1;",
          "2083:         rv = 1;",
          "2084:         goto end;",
          "2085:     }",
          "2087:     data = OPENSSL_malloc(sizeof(*data));",
          "2088:     if (data == NULL )",
          "2089:         goto end;",
          "2091:     data->privk = pk;",
          "2092:     data->pubk = pubk;",
          "2093:     t->data = data;",
          "2095:     rv = 1;",
          "2096:     err = NULL;",
          "2098: end:",
          "2099:     if (priv)",
          "2100:         OPENSSL_free(priv);",
          "2101:     t->err = err;",
          "2102:     return rv;",
          "2103: }",
          "2105: static void keypair_test_cleanup(struct evp_test *t)",
          "2106: {",
          "2107:     struct keypair_test_data *data = t->data;",
          "2108:     t->data = NULL;",
          "2109:     if (data)",
          "2110:         test_free(data);",
          "2111:     return;",
          "2112: }",
          "2117: static int void_test_parse(struct evp_test *t, const char *keyword, const char *value)",
          "2118: {",
          "2119:     return 0;",
          "2120: }",
          "2122: static int keypair_test_run(struct evp_test *t)",
          "2123: {",
          "2124:     int rv = 0;",
          "2125:     const struct keypair_test_data *pair = t->data;",
          "2126:     const char *err = \"INTERNAL_ERROR\";",
          "2128:     if (pair == NULL)",
          "2129:         goto end;",
          "2131:     if (pair->privk == NULL || pair->pubk == NULL) {",
          "2136:         err = \"KEYPAIR_TYPE_MISMATCH\";",
          "2137:         rv = 1;",
          "2138:         goto end;",
          "2139:     }",
          "2141:     if ((rv = EVP_PKEY_cmp(pair->privk, pair->pubk)) != 1 ) {",
          "2142:         if ( 0 == rv ) {",
          "2143:             err = \"KEYPAIR_MISMATCH\";",
          "2144:         } else if ( -1 == rv ) {",
          "2145:             err = \"KEYPAIR_TYPE_MISMATCH\";",
          "2146:         } else if ( -2 == rv ) {",
          "2147:             err = \"UNSUPPORTED_KEY_COMPARISON\";",
          "2148:         } else {",
          "2149:             fprintf(stderr, \"Unexpected error in key comparison\\n\");",
          "2150:             rv = 0;",
          "2151:             goto end;",
          "2152:         }",
          "2153:         rv = 1;",
          "2154:         goto end;",
          "2155:     }",
          "2157:     rv = 1;",
          "2158:     err = NULL;",
          "2160: end:",
          "2161:     t->err = err;",
          "2162:     return rv;",
          "2163: }",
          "2165: static const struct evp_test_method keypair_test_method = {",
          "2166:     \"PrivPubKeyPair\",",
          "2167:     keypair_test_init,",
          "2168:     keypair_test_cleanup,",
          "2169:     void_test_parse,",
          "2170:     keypair_test_run",
          "2171: };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed54856765976841faa4fc41e8a09d14f0724dee",
      "candidate_info": {
        "commit_hash": "ed54856765976841faa4fc41e8a09d14f0724dee",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ed54856765976841faa4fc41e8a09d14f0724dee",
        "files": [
          "crypto/async/arch/async_posix.h",
          "engines/e_dasync.c"
        ],
        "message": "Simplify Cygwin checks, part 1\n\nBecause OPENSSL_SYS_CYGWIN will keep OPENSSL_SYS_UNIX defined, there's\nno point having checks of this form:\n\n    #if (defined(OPENSSL_SYS_UNIX) || defined(OPENSSL_SYS_CYGWIN))\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/5060)\n\n(cherry picked from commit 6ce66ce073b19af46fd94f4eefdb7c4772d7dd6f)",
        "before_after_code_files": [
          "crypto/async/arch/async_posix.h||crypto/async/arch/async_posix.h",
          "engines/e_dasync.c||engines/e_dasync.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/async/arch/async_posix.h||crypto/async/arch/async_posix.h": [
          "File: crypto/async/arch/async_posix.h -> crypto/async/arch/async_posix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #define OPENSSL_ASYNC_ARCH_ASYNC_POSIX_H",
          "12: #include <openssl/e_os2.h>",
          "15:     && defined(OPENSSL_THREADS) && !defined(OPENSSL_NO_ASYNC) \\",
          "16:     && !defined(__ANDROID__) && !defined(__OpenBSD__)",
          "",
          "[Removed Lines]",
          "14: #if (defined(OPENSSL_SYS_UNIX) || defined(OPENSSL_SYS_CYGWIN)) \\",
          "",
          "[Added Lines]",
          "14: #if defined(OPENSSL_SYS_UNIX) \\",
          "",
          "---------------"
        ],
        "engines/e_dasync.c||engines/e_dasync.c": [
          "File: engines/e_dasync.c -> engines/e_dasync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <openssl/ssl.h>",
          "26: #include <openssl/modes.h>",
          "29: # undef ASYNC_POSIX",
          "30: # define ASYNC_POSIX",
          "31: # include <unistd.h>",
          "",
          "[Removed Lines]",
          "28: #if (defined(OPENSSL_SYS_UNIX) || defined(OPENSSL_SYS_CYGWIN)) && defined(OPENSSL_THREADS)",
          "",
          "[Added Lines]",
          "28: #if defined(OPENSSL_SYS_UNIX) && defined(OPENSSL_THREADS)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a08f26660e0f8d2caf9462219ffea20d9e2c74f2",
      "candidate_info": {
        "commit_hash": "a08f26660e0f8d2caf9462219ffea20d9e2c74f2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a08f26660e0f8d2caf9462219ffea20d9e2c74f2",
        "files": [
          "test/secmemtest.c"
        ],
        "message": "Add some test coverage for OPENSSL_secure_clear_free\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4048)",
        "before_after_code_files": [
          "test/secmemtest.c||test/secmemtest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/secmemtest.c||test/secmemtest.c": [
          "File: test/secmemtest.c -> test/secmemtest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #if defined(OPENSSL_SYS_LINUX) || defined(OPENSSL_SYS_UNIX)",
          "20:     char *p = NULL, *q = NULL, *r = NULL, *s = NULL;",
          "22:     r = OPENSSL_secure_malloc(20);",
          "24:     if (r == NULL) {",
          "25:         perror_line();",
          "26:         return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     s = OPENSSL_secure_malloc(20);",
          "24:     if (s == NULL) {",
          "25:         perror_line();",
          "26:         return 1;",
          "27:     }",
          "28:     if (CRYPTO_secure_allocated(s)) {",
          "29:         perror_line();",
          "30:         return 1;",
          "31:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:         return 1;",
          "46:     }",
          "47:     q = OPENSSL_malloc(20);",
          "49:     if (CRYPTO_secure_allocated(q)) {",
          "50:         perror_line();",
          "51:         return 1;",
          "52:     }",
          "53:     s = OPENSSL_secure_malloc(20);",
          "55:     if (!CRYPTO_secure_allocated(s)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     OPENSSL_secure_clear_free(s, 20);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:         perror_line();",
          "62:         return 1;",
          "63:     }",
          "66:     if (CRYPTO_secure_used() != 32) {",
          "67:         perror_line();",
          "",
          "[Removed Lines]",
          "64:     OPENSSL_secure_free(p);",
          "",
          "[Added Lines]",
          "75:     OPENSSL_secure_clear_free(p, 20);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9593b9f558c6d65ce5f57c74e9923b375b05712d",
      "candidate_info": {
        "commit_hash": "9593b9f558c6d65ce5f57c74e9923b375b05712d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9593b9f558c6d65ce5f57c74e9923b375b05712d",
        "files": [
          "Configurations/windows-makefile.tmpl"
        ],
        "message": "Set OPENSSL_ENGINES for Windows\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/5108)\n\n(cherry picked from commit 7a6ce9039cb6690aae3cca01f18daab16b8e30d7)",
        "before_after_code_files": [
          "Configurations/windows-makefile.tmpl||Configurations/windows-makefile.tmpl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/windows-makefile.tmpl||Configurations/windows-makefile.tmpl": [
          "File: Configurations/windows-makefile.tmpl -> Configurations/windows-makefile.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:  set BLDTOP=$(BLDDIR)",
          "210:  set RESULT_D=$(BLDDIR)\\test\\test-runs",
          "211:  set PERL=$(PERL)",
          "212:  set OPENSSL_DEBUG_MEMORY=on",
          "213:  \"$(PERL)\" \"$(SRCDIR)\\test\\run_tests.pl\" $(TESTS)",
          "214:  @rem {- if ($disabled{tests}) { output_on(); } else { output_off(); } \"\" -}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:  set OPENSSL_ENGINES=$(MAKEDIR)\\engines",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc4ce5e8b66e10be23b40b162522df8df5081460",
      "candidate_info": {
        "commit_hash": "bc4ce5e8b66e10be23b40b162522df8df5081460",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/bc4ce5e8b66e10be23b40b162522df8df5081460",
        "files": [
          "apps/spkac.c"
        ],
        "message": "Fix possible usage of NULL pointers in apps/spkac.c\n\nCheck return value of NETSCAPE_SPKI_new() and\nNETSCAPE_SPKI_b64_encode(), and also clean up coding style incidentally.\n\nSigned-off-by: Paul Yang <paulyang.inf@gmail.com>\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3647)\n(cherry picked from commit f2582f08d5167ee84b7b313fd1435fe91ee44880)",
        "before_after_code_files": [
          "apps/spkac.c||apps/spkac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/spkac.c||apps/spkac.c": [
          "File: apps/spkac.c -> apps/spkac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         goto end;",
          "117:     }",
          "120:         pkey = load_key(strcmp(keyfile, \"-\") ? keyfile : NULL,",
          "121:                         FORMAT_PEM, 1, passin, e, \"private key\");",
          "123:             goto end;",
          "125:         spki = NETSCAPE_SPKI_new();",
          "127:             ASN1_STRING_set(spki->spkac->challenge,",
          "128:                             challenge, (int)strlen(challenge));",
          "129:         NETSCAPE_SPKI_set_pubkey(spki, pkey);",
          "130:         NETSCAPE_SPKI_sign(spki, pkey, EVP_md5());",
          "131:         spkstr = NETSCAPE_SPKI_b64_encode(spki);",
          "133:         out = bio_open_default(outfile, 'w', FORMAT_TEXT);",
          "134:         if (out == NULL) {",
          "",
          "[Removed Lines]",
          "119:     if (keyfile) {",
          "122:         if (!pkey) {",
          "124:         }",
          "126:         if (challenge)",
          "",
          "[Added Lines]",
          "119:     if (keyfile != NULL) {",
          "122:         if (pkey == NULL)",
          "125:         if (spki == NULL)",
          "126:             goto end;",
          "127:         if (challenge != NULL)",
          "133:         if (spkstr == NULL)",
          "134:             goto end;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:     spki = NETSCAPE_SPKI_b64_decode(spkstr, -1);",
          "158:         BIO_printf(bio_err, \"Error loading SPKAC\\n\");",
          "159:         ERR_print_errors(bio_err);",
          "160:         goto end;",
          "",
          "[Removed Lines]",
          "157:     if (!spki) {",
          "",
          "[Added Lines]",
          "160:     if (spki == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:     pkey = NETSCAPE_SPKI_get_pubkey(spki);",
          "170:     if (verify) {",
          "171:         i = NETSCAPE_SPKI_verify(spki, pkey);",
          "173:             BIO_printf(bio_err, \"Signature OK\\n\");",
          "175:             BIO_printf(bio_err, \"Signature Failure\\n\");",
          "176:             ERR_print_errors(bio_err);",
          "177:             goto end;",
          "",
          "[Removed Lines]",
          "172:         if (i > 0)",
          "174:         else {",
          "",
          "[Added Lines]",
          "175:         if (i > 0) {",
          "177:         } else {",
          "",
          "---------------"
        ]
      }
    }
  ]
}