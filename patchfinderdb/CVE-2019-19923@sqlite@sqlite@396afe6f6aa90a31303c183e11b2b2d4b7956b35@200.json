{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "76e4990b259dd2e56883c224a0a70bcab9365cd3",
      "candidate_info": {
        "commit_hash": "76e4990b259dd2e56883c224a0a70bcab9365cd3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/76e4990b259dd2e56883c224a0a70bcab9365cd3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/walvfs.test"
        ],
        "message": "Add test cases to test file walvfs.test.\n\nFossilOrigin-Name: d697f6f3ca47350dad30feb529914fc5254fa662ece783408eea963d912918c1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d8c1235c02b745138ac2b12e8bbb00dda4cac321176be92a2fa9547be029b3d0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1616:   return TCL_OK;",
          "1617: }",
          "1620: int Sqlitetestvfs_Init(Tcl_Interp *interp){",
          "1621:   Tcl_CreateObjCommand(interp, \"testvfs\", testvfs_cmd, 0, 0);",
          "1622:   Tcl_CreateObjCommand(interp, \"vfs_shmlock\", test_vfs_shmlock, 0, 0);",
          "1623:   return TCL_OK;",
          "1624: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1619: static int SQLITE_TCLAPI test_vfs_set_readmark(",
          "1620:   void * clientData,",
          "1621:   Tcl_Interp *interp,",
          "1622:   int objc,",
          "1623:   Tcl_Obj *CONST objv[]",
          "1624: ){",
          "1625:   sqlite3 *db = 0;",
          "1626:   int rc = SQLITE_OK;",
          "1627:   const char *zDbname = 0;",
          "1628:   int iSlot = 0;",
          "1629:   int iVal = -1;",
          "1630:   sqlite3_file *pFd;",
          "1631:   void volatile *pShm = 0;",
          "1632:   u32 *aShm;",
          "1633:   int iOff;",
          "1635:   if( objc!=4 && objc!=5 ){",
          "1636:     Tcl_WrongNumArgs(interp, 1, objv, \"DB DBNAME SLOT ?VALUE?\");",
          "1637:     return TCL_ERROR;",
          "1638:   }",
          "1640:   zDbname = Tcl_GetString(objv[2]);",
          "1641:   if( getDbPointer(interp, Tcl_GetString(objv[1]), &db)",
          "1642:    || Tcl_GetIntFromObj(interp, objv[3], &iSlot)",
          "1643:    || (objc==5 && Tcl_GetIntFromObj(interp, objv[4], &iVal))",
          "1644:   ){",
          "1645:     return TCL_ERROR;",
          "1646:   }",
          "1648:   sqlite3_file_control(db, zDbname, SQLITE_FCNTL_FILE_POINTER, (void*)&pFd);",
          "1649:   if( pFd==0 ){",
          "1650:     return TCL_ERROR;",
          "1651:   }",
          "1652:   rc = pFd->pMethods->xShmMap(pFd, 0, 32*1024, 0, &pShm);",
          "1653:   if( rc!=SQLITE_OK ){",
          "1654:     Tcl_SetObjResult(interp, Tcl_NewStringObj(sqlite3ErrName(rc), -1));",
          "1655:     return TCL_ERROR;",
          "1656:   }",
          "1657:   if( pShm==0 ){",
          "1658:     Tcl_AppendResult(interp, \"*-shm is not yet mapped\", 0);",
          "1659:     return TCL_ERROR;",
          "1660:   }",
          "1661:   aShm = (u32*)pShm;",
          "1662:   iOff = 12*2+1+iSlot;",
          "1664:   if( objc==5 ){",
          "1665:     aShm[iOff] = iVal;",
          "1666:   }",
          "1667:   Tcl_SetObjResult(interp, Tcl_NewIntObj(aShm[iOff]));",
          "1669:   return TCL_OK;",
          "1670: }",
          "1675:   Tcl_CreateObjCommand(interp, \"vfs_set_readmark\", test_vfs_set_readmark, 0, 0);",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:   SELECT count(*) FROM t1",
          "183: } {1 {attempt to write a readonly database}}",
          "185: db close",
          "186: tvfs delete",
          "187: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: #-------------------------------------------------------------------------",
          "186: #",
          "187: reset_db",
          "188: db close",
          "189: sqlite3 db test.db -vfs tvfs",
          "190: tvfs filter {}",
          "191: do_execsql_test 5.0 {",
          "192:   PRAGMA auto_vacuum = 0;",
          "193:   PRAGMA page_size = 1024;",
          "194:   CREATE TABLE t1(x);",
          "195:   PRAGMA journal_mode = wal;",
          "196:   WITH s(i) AS (",
          "197:       SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "198:   )",
          "199:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "200: } {wal}",
          "202: do_execsql_test 5.1 {",
          "203:   SELECT count(*) FROM t1",
          "204: } {20}",
          "206: do_test 5.2 {",
          "207:   vfs_set_readmark db main 1 100",
          "208:   vfs_set_readmark db main 2 100",
          "209:   vfs_set_readmark db main 3 100",
          "210:   vfs_set_readmark db main 4 100",
          "211: } {100}",
          "213: do_execsql_test 5.3 {",
          "214:   SELECT count(*) FROM t1",
          "215: } {20}",
          "217: do_test 5.3 {",
          "218:   list [vfs_set_readmark db main 1] \\",
          "219:        [vfs_set_readmark db main 2] \\",
          "220:        [vfs_set_readmark db main 3] \\",
          "221:        [vfs_set_readmark db main 4]",
          "222: } {24 100 100 100}",
          "224: tvfs script xShmLock",
          "225: tvfs filter xShmLock",
          "226: set ::cnt 20",
          "227: proc xShmLock {args} {",
          "228:   incr ::cnt -1",
          "229:   if {$::cnt>0} { return SQLITE_BUSY }",
          "230:   return SQLITE_OK",
          "231: }",
          "233: do_test 5.4 {",
          "234:   vfs_set_readmark db main 1 100",
          "235:   execsql { SELECT count(*) FROM t1 }",
          "236: } {20}",
          "238: #-------------------------------------------------------------------------",
          "239: # Cause an SQLITE_PROTOCOL while attempting to restart the wal file.",
          "240: reset_db",
          "241: tvfs filter {}",
          "242: db close",
          "243: sqlite3 db test.db -vfs tvfs",
          "244: do_execsql_test 6.0 {",
          "245:   PRAGMA auto_vacuum = 0;",
          "246:   PRAGMA page_size = 1024;",
          "247:   CREATE TABLE t1(x);",
          "248:   PRAGMA journal_mode = wal;",
          "249:   WITH s(i) AS (",
          "250:       SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "251:   )",
          "252:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "253: } {wal}",
          "255: do_test 6.1 {",
          "256:   execsql { PRAGMA wal_checkpoint }",
          "257:   set {} {}",
          "258: } {}",
          "260: tvfs filter xShmLock",
          "261: set ::flag 0",
          "262: proc xShmLock {method file handle spec} {",
          "263:   if {$::flag && [lrange $spec 2 end]==\"lock shared\"} {",
          "264:     return SQLITE_BUSY",
          "265:   }",
          "266:   if {$spec==\"3 1 unlock shared\"} {",
          "267:     set ::flag 1",
          "268:   }",
          "269:   return SQLITE_OK",
          "270: }",
          "272: puts \"# WARNING: This next test takes around 12 seconds\"",
          "273: do_catchsql_test 6.2 {",
          "274:   INSERT INTO t1 VALUES(1);",
          "275: } {1 {locking protocol}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
      "candidate_info": {
        "commit_hash": "48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json101.test"
        ],
        "message": "Proper surrogate pair decoding added to JSON functions.  See the mailing list bug report and [https://bugs.python.org/issue38749].  More test cases needed here, but it seems to work so far.\n\nFossilOrigin-Name: 51027f08c0478f1bf9d7545d9e268c772c0a5cd5dda4b03d78f16c7d94f2f50d",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json101.test||test/json101.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:   sqlite3_result_subtype(pCtx, JSON_SUBTYPE);",
          "523: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530: static u8 jsonHexToInt(int h){",
          "531:   assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );",
          "532: #ifdef SQLITE_EBCDIC",
          "533:   h += 9*(1&~(h>>4));",
          "534: #else",
          "535:   h += 9*(1&(h>>6));",
          "536: #endif",
          "537:   return (u8)(h & 0xf);",
          "538: }",
          "543: static u32 jsonHexToInt4(const char *z){",
          "544:   u32 v;",
          "545:   assert( safe_isxdigit(z[0]) );",
          "546:   assert( safe_isxdigit(z[1]) );",
          "547:   assert( safe_isxdigit(z[2]) );",
          "548:   assert( safe_isxdigit(z[3]) );",
          "549:   v = (jsonHexToInt(z[0])<<12)",
          "550:     + (jsonHexToInt(z[1])<<8)",
          "551:     + (jsonHexToInt(z[2])<<4)",
          "552:     + jsonHexToInt(z[3]);",
          "553:   return v;",
          "554: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615:           }else{",
          "616:             c = z[++i];",
          "617:             if( c=='u' ){",
          "627:               if( v==0 ) break;",
          "628:               if( v<=0x7f ){",
          "629:                 zOut[j++] = (char)v;",
          "",
          "[Removed Lines]",
          "618:               u32 v = 0, k;",
          "619:               for(k=0; k<4; i++, k++){",
          "620:                 assert( i<n-2 );",
          "621:                 c = z[i+1];",
          "622:                 assert( safe_isxdigit(c) );",
          "623:                 if( c<='9' ) v = v*16 + c - '0';",
          "624:                 else if( c<='F' ) v = v*16 + c - 'A' + 10;",
          "625:                 else v = v*16 + c - 'a' + 10;",
          "626:               }",
          "",
          "[Added Lines]",
          "649:               u32 v = jsonHexToInt4(z+i+1);",
          "650:               i += 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "631:                 zOut[j++] = (char)(0xc0 | (v>>6));",
          "632:                 zOut[j++] = 0x80 | (v&0x3f);",
          "633:               }else{",
          "637:               }",
          "638:             }else{",
          "639:               if( c=='b' ){",
          "",
          "[Removed Lines]",
          "634:                 zOut[j++] = (char)(0xe0 | (v>>12));",
          "635:                 zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "636:                 zOut[j++] = 0x80 | (v&0x3f);",
          "",
          "[Added Lines]",
          "658:                 u32 vlo;",
          "659:                 if( (v&0xfc00)==0xd800",
          "660:                   && i<n-6",
          "661:                   && z[i+1]=='\\\\'",
          "662:                   && z[i+2]=='u'",
          "663:                   && ((vlo = jsonHexToInt4(z+i+3))&0xfc00)==0xdc00",
          "664:                 ){",
          "666:                   v = ((v&0x3ff)<<10) + (vlo&0x3ff) + 0x10000;",
          "667:                   i += 6;",
          "668:                   zOut[j++] = 0xf0 | (v>>18);",
          "669:                   zOut[j++] = 0x80 | ((v>>12)&0x3f);",
          "670:                   zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "671:                   zOut[j++] = 0x80 | (v&0x3f);",
          "672:                 }else{",
          "673:                   zOut[j++] = 0xe0 | (v>>12);",
          "674:                   zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "675:                   zOut[j++] = 0x80 | (v&0x3f);",
          "676:                 }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f7a74f89dbd58b47bbcb58ea2af71fbe1eb5ec2dbe36d90685c39cb28ecf5250",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json101.test||test/json101.test": [
          "File: test/json101.test -> test/json101.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "832:   SELECT xyz.* FROM (JSON_EACH('{\"a\":1, \"b\":2}')) AS xyz;",
          "833: } {a 1 integer 1 2 {} {$.a} {$} b 2 integer 2 4 {} {$.b} {$}}",
          "835: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835: # 2019-11-10",
          "836: # Mailing list bug report on the handling of surrogate pairs",
          "837: # in JSON.",
          "838: #",
          "839: do_execsql_test json-16.10 {",
          "840:   SELECT length(json_extract('\"abc\\uD834\\uDD1Exyz\"','$'));",
          "841: } {7}",
          "842: do_execsql_test json-16.20 {",
          "843:   SELECT length(json_extract('\"\\uD834\\uDD1E\"','$'));",
          "844: } {1}",
          "845: do_execsql_test json-16.30 {",
          "846:   SELECT unicode(json_extract('\"\\uD834\\uDD1E\"','$'));",
          "847: } {119070}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93673620ec4e31cc71443ec46889bb8f695d6548",
      "candidate_info": {
        "commit_hash": "93673620ec4e31cc71443ec46889bb8f695d6548",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/93673620ec4e31cc71443ec46889bb8f695d6548",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Have wapptest.tcl display the name, OS and architecture of the host.\n\nFossilOrigin-Name: c47e53b4d0f29628bd20ba3daf7e759c4bfed07710d982c095445c01376d57f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cbf423656047f0cb5200be6981a205e0ae206eef8263aa686f4a3621fb07fb57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   # Either \"config\", \"running\" or \"stopped\":",
          "45:   set G(state) \"config\"",
          "46: }",
          "48: # Check to see if there are uncommitted changes in the SQLite source",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   set G(host) \"(unknown host)\"",
          "48:   catch { set G(host) [exec hostname] }",
          "49:   append G(host) \" $::tcl_platform(os) $::tcl_platform(osVersion)\"",
          "50:   append G(host) \" $::tcl_platform(machine) $::tcl_platform(byteOrder)\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:     }",
          "284:   }",
          "286:   wapp-trim {",
          "287:       <div class=div id=controls>",
          "288:       <form action=\"control\" method=\"post\" name=\"control\">",
          "289:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:   set host $G(host)",
          "293:       <div class=div>%string($host)</div>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26391eeefe25dcaacb34e18e7042a890f05d15d1",
      "candidate_info": {
        "commit_hash": "26391eeefe25dcaacb34e18e7042a890f05d15d1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/26391eeefe25dcaacb34e18e7042a890f05d15d1",
        "files": [
          "main.mk",
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the \"dbfuzz2\" target to main.mk.  Remove an unused local variable from dbfuzz2.c.\n\nFossilOrigin-Name: 05c7609cfd02f49114876267d7090f4e0ea2467f3aa7c65019c5986ec8f60a87",
        "before_after_code_files": [
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:    $(DBFUZZ_OPT) $(TOP)/test/dbfuzz.c sqlite3.c \\",
          "575:    $(TLIBS) $(THREADLIB)",
          "577: fuzzcheck$(EXE): $(TOP)/test/fuzzcheck.c sqlite3.c sqlite3.h $(TOP)/test/ossfuzz.c",
          "578:  $(TCCX) -o fuzzcheck$(EXE) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\",
          "579:   -DSQLITE_ENABLE_MEMSYS5 $(FUZZCHECK_OPT) -DSQLITE_OSS_FUZZ \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "577: DBFUZZ2_OPTS = \\",
          "578:   -DSQLITE_THREADSAFE=0 \\",
          "579:   -DSQLITE_OMIT_LOAD_EXTENSION \\",
          "580:   -DSQLITE_ENABLE_DESERIALIZE \\",
          "581:   -DSQLITE_DEBUG \\",
          "582:   -DSQLITE_ENABLE_DBSTAT_VTAB \\",
          "583:   -DSQLITE_ENABLE_RTREE \\",
          "584:   -DSQLITE_ENABLE_FTS4 \\",
          "585:   -DSQLITE_ENABLE_FTS5",
          "587: dbfuzz2$(EXE): $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "588:  $(TCCX) -I. -g -O0 -DSTANDALONE -o dbfuzz2$(EXE) \\",
          "589:    $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c  $(TLIBS) $(THREADLIB)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5547f39de993c708f72301ef25df190a2f007e0c4253799bdd9e86bb1ae41777",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: #ifdef STANDALONE",
          "170: int main(int argc, char **argv){",
          "171:   int i;",
          "173:   LLVMFuzzerInitialize(&argc, &argv);",
          "174:   for(i=1; i<argc; i++){",
          "175:     unsigned char *pIn;",
          "",
          "[Removed Lines]",
          "172:   int prevAmt = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0aa3231ff0af4873cee2b044d1ba2b55688152b9",
      "candidate_info": {
        "commit_hash": "0aa3231ff0af4873cee2b044d1ba2b55688152b9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0aa3231ff0af4873cee2b044d1ba2b55688152b9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/main.c",
          "src/test_fs.c",
          "src/util.c",
          "src/vdbeaux.c",
          "src/vdbesort.c",
          "src/vtab.c"
        ],
        "message": "Enforce the SQLITE_LIMIT_COLUMN limit on virtual tables.\n\nFossilOrigin-Name: 0b6ae032c28e7fe34d81d1769f6e2901addbd1b95cd9a255dcef274061fb0164",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/main.c||src/main.c",
          "src/test_fs.c||src/test_fs.c",
          "src/util.c||src/util.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbesort.c||src/vdbesort.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7b771405a9adc3ec191156be4ebe7122f4c698d88d69ae2134c75acb8d8feebb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3769: ){",
          "3770:   char *z;",
          "3772:   if( (n & (n-1))==0 ){",
          "3774:     void *pNew = sqlite3DbRealloc(db, pArray, sz*szEntry);",
          "3775:     if( pNew==0 ){",
          "",
          "[Removed Lines]",
          "3771:   int n = *pnEntry;",
          "3773:     int sz = (n==0) ? 1 : 2*n;",
          "",
          "[Added Lines]",
          "3771:   sqlite3_int64 n = *pnEntry;",
          "3773:     sqlite3_int64 sz = (n==0) ? 1 : 2*n;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3892:   if( (u32)pSrc->nSrc+nExtra>pSrc->nAlloc ){",
          "3893:     SrcList *pNew;",
          "3895:     sqlite3 *db = pParse->db;",
          "3897:     if( pSrc->nSrc+nExtra>=SQLITE_MAX_SRCLIST ){",
          "",
          "[Removed Lines]",
          "3894:     int nAlloc = pSrc->nSrc*2+nExtra;",
          "",
          "[Added Lines]",
          "3894:     sqlite3_int64 nAlloc = 2*(sqlite3_int64)pSrc->nSrc+nExtra;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4648:   }",
          "4650:   if( pWith ){",
          "4652:     pNew = sqlite3DbRealloc(db, pWith, nByte);",
          "4653:   }else{",
          "4654:     pNew = sqlite3DbMallocZero(db, sizeof(*pWith));",
          "",
          "[Removed Lines]",
          "4651:     int nByte = sizeof(*pWith) + (sizeof(pWith->a[1]) * pWith->nCte);",
          "",
          "[Added Lines]",
          "4651:     sqlite3_int64 nByte = sizeof(*pWith) + (sizeof(pWith->a[1]) * pWith->nCte);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1587:   }else if( (pList->nExpr & (pList->nExpr-1))==0 ){",
          "1588:     ExprList *pNew;",
          "1589:     pNew = sqlite3DbRealloc(db, pList,",
          "1591:     if( pNew==0 ){",
          "1592:       goto no_mem;",
          "1593:     }",
          "",
          "[Removed Lines]",
          "1590:              sizeof(*pList)+(2*pList->nExpr - 1)*sizeof(pList->a[0]));",
          "",
          "[Added Lines]",
          "1590:          sizeof(*pList)+(2*(sqlite3_int64)pList->nExpr-1)*sizeof(pList->a[0]));",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c"
        ],
        "src/test_fs.c||src/test_fs.c": [
          "File: src/test_fs.c -> src/test_fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "740:     fstat(fd, &sbuf);",
          "742:     if( sbuf.st_size>=pCur->nAlloc ){",
          "744:       char *zNew;",
          "745:       if( nNew<1024 ) nNew = 1024;",
          "",
          "[Removed Lines]",
          "743:       int nNew = sbuf.st_size*2;",
          "",
          "[Added Lines]",
          "743:       sqlite3_int64 nNew = sbuf.st_size*2;",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1598:   if( pIn==0 || pIn[1]+nInt > pIn[0] ){",
          "1601:     VList *pOut = sqlite3DbRealloc(db, pIn, nAlloc*sizeof(int));",
          "1602:     if( pOut==0 ) return pIn;",
          "1603:     if( pIn==0 ) pOut[1] = 2;",
          "",
          "[Removed Lines]",
          "1600:     int nAlloc = (pIn ? pIn[0]*2 : 10) + nInt;",
          "",
          "[Added Lines]",
          "1600:     sqlite3_int64 nAlloc = (pIn ? 2*(sqlite3_int64)pIn[0] : 10) + nInt;",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: #ifdef SQLITE_TEST_REALLOC_STRESS",
          "159: #else",
          "161:   UNUSED_PARAMETER(nOp);",
          "162: #endif",
          "",
          "[Removed Lines]",
          "158:   int nNew = (v->nOpAlloc>=512 ? v->nOpAlloc*2 : v->nOpAlloc+nOp);",
          "160:   int nNew = (v->nOpAlloc ? v->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "[Added Lines]",
          "158:   sqlite3_int64 nNew = (v->nOpAlloc>=512 ? 2*(sqlite3_int64)v->nOpAlloc",
          "159:                         : (sqlite3_int64)v->nOpAlloc+nOp);",
          "161:   sqlite3_int64 nNew = (v->nOpAlloc ? 2*(sqlite3_int64)v->nOpAlloc",
          "162:                         : (sqlite3_int64)1024/sizeof(Op));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "947: ){",
          "949:   ScanStatus *aNew;",
          "950:   aNew = (ScanStatus*)sqlite3DbRealloc(p->db, p->aScan, nByte);",
          "951:   if( aNew ){",
          "",
          "[Removed Lines]",
          "948:   int nByte = (p->nScan+1) * sizeof(ScanStatus);",
          "",
          "[Added Lines]",
          "950:   sqlite3_int64 nByte = (p->nScan+1) * sizeof(ScanStatus);",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "538:     if( p->nAlloc<nByte ){",
          "539:       u8 *aNew;",
          "541:       while( nByte>nNew ) nNew = nNew*2;",
          "542:       aNew = sqlite3Realloc(p->aAlloc, nNew);",
          "543:       if( !aNew ) return SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "540:       int nNew = MAX(128, p->nAlloc*2);",
          "",
          "[Added Lines]",
          "540:       sqlite3_int64 nNew = MAX(128, 2*(sqlite3_int64)p->nAlloc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1829:     if( nMin>pSorter->nMemory ){",
          "1830:       u8 *aNew;",
          "1831:       int iListOff = (u8*)pSorter->list.pList - pSorter->list.aMemory;",
          "1833:       while( nNew < nMin ) nNew = nNew*2;",
          "1834:       if( nNew > pSorter->mxPmaSize ) nNew = pSorter->mxPmaSize;",
          "1835:       if( nNew < nMin ) nNew = nMin;",
          "",
          "[Removed Lines]",
          "1832:       int nNew = pSorter->nMemory * 2;",
          "",
          "[Added Lines]",
          "1832:       sqlite3_int64 nNew = 2 * (sqlite3_int64)pSorter->nMemory;",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:   char **azModuleArg;",
          "308:   azModuleArg = sqlite3DbRealloc(db, pTable->azModuleArg, nBytes);",
          "309:   if( azModuleArg==0 ){",
          "310:     sqlite3DbFree(db, zArg);",
          "",
          "[Removed Lines]",
          "305: static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){",
          "306:   int nBytes = sizeof(char *)*(2+pTable->nModuleArg);",
          "",
          "[Added Lines]",
          "305: static void addModuleArgument(Parse *pParse, Table *pTable, char *zArg){",
          "306:   sqlite3_int64 nBytes = sizeof(char *)*(2+pTable->nModuleArg);",
          "308:   sqlite3 *db = pParse->db;",
          "309:   if( pTable->nModuleArg+3>=db->aLimit[SQLITE_LIMIT_COLUMN] ){",
          "310:     sqlite3ErrorMsg(pParse, \"too many columns on %s\", pTable->zName);",
          "311:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:   db = pParse->db;",
          "341:   assert( pTable->nModuleArg==0 );",
          "345:   assert( (pParse->sNameToken.z==pName2->z && pName2->z!=0)",
          "346:        || (pParse->sNameToken.z==pName1->z && pName2->z==0)",
          "347:   );",
          "",
          "[Removed Lines]",
          "342:   addModuleArgument(db, pTable, sqlite3NameFromToken(db, pModuleName));",
          "343:   addModuleArgument(db, pTable, 0);",
          "344:   addModuleArgument(db, pTable, sqlite3DbStrDup(db, pTable->zName));",
          "",
          "[Added Lines]",
          "346:   addModuleArgument(pParse, pTable, sqlite3NameFromToken(db, pModuleName));",
          "347:   addModuleArgument(pParse, pTable, 0);",
          "348:   addModuleArgument(pParse, pTable, sqlite3DbStrDup(db, pTable->zName));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "374:     const char *z = (const char*)pParse->sArg.z;",
          "375:     int n = pParse->sArg.n;",
          "376:     sqlite3 *db = pParse->db;",
          "378:   }",
          "379: }",
          "",
          "[Removed Lines]",
          "377:     addModuleArgument(db, pParse->pNewTable, sqlite3DbStrNDup(db, z, n));",
          "",
          "[Added Lines]",
          "381:     addModuleArgument(pParse, pParse->pNewTable, sqlite3DbStrNDup(db, z, n));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "664:   if( (db->nVTrans%ARRAY_INCR)==0 ){",
          "665:     VTable **aVTrans;",
          "667:     aVTrans = sqlite3DbRealloc(db, (void *)db->aVTrans, nBytes);",
          "668:     if( !aVTrans ){",
          "669:       return SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "666:     int nBytes = sizeof(sqlite3_vtab *) * (db->nVTrans + ARRAY_INCR);",
          "",
          "[Added Lines]",
          "670:     sqlite3_int64 nBytes = sizeof(sqlite3_vtab*)*",
          "671:                                  ((sqlite3_int64)db->nVTrans + ARRAY_INCR);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1159:   pTab->pSchema = db->aDb[0].pSchema;",
          "1160:   assert( pTab->nModuleArg==0 );",
          "1161:   pTab->iPKey = -1;",
          "1165:   rc = vtabCallConstructor(db, pTab, pMod, pModule->xConnect, &zErr);",
          "1166:   if( rc ){",
          "1167:     sqlite3ErrorMsg(pParse, \"%s\", zErr);",
          "",
          "[Removed Lines]",
          "1162:   addModuleArgument(db, pTab, sqlite3DbStrDup(db, pTab->zName));",
          "1163:   addModuleArgument(db, pTab, 0);",
          "1164:   addModuleArgument(db, pTab, sqlite3DbStrDup(db, pTab->zName));",
          "",
          "[Added Lines]",
          "1167:   addModuleArgument(pParse, pTab, sqlite3DbStrDup(db, pTab->zName));",
          "1168:   addModuleArgument(pParse, pTab, 0);",
          "1169:   addModuleArgument(pParse, pTab, sqlite3DbStrDup(db, pTab->zName));",
          "",
          "---------------"
        ]
      }
    }
  ]
}