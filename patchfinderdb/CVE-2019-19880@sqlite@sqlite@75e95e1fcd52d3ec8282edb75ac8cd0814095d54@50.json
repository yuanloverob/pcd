{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bc8b231098ae2cbc7528370ab722579f5d3b23fc",
      "candidate_info": {
        "commit_hash": "bc8b231098ae2cbc7528370ab722579f5d3b23fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc8b231098ae2cbc7528370ab722579f5d3b23fc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/backup.c"
        ],
        "message": "Fix harmless compiler warning seen with MSVC.\n\nFossilOrigin-Name: 5862b83eb36b93016d37e5b86ebb183d891bb553901facab1e5d83e114a38ec3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/backup.c||src/backup.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5a8a23ee5f60a31dbd167a0966d1ab3d0f1c07df2251906cb73f23d1f5466b46",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/backup.c||src/backup.c": [
          "File: src/backup.c -> src/backup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:   if( nSrcReserve!=nDestReserve ){",
          "275:     u32 newPgsz = nSrcPgsz;",
          "276:     rc = sqlite3PagerSetPagesize(pDestPager, &newPgsz, nSrcReserve);",
          "278:   }",
          "279: #endif",
          "",
          "[Removed Lines]",
          "277:     if( rc==SQLITE_OK && newPgsz!=nSrcPgsz ) rc = SQLITE_READONLY;",
          "",
          "[Added Lines]",
          "277:     if( rc==SQLITE_OK && newPgsz!=(u32)nSrcPgsz ) rc = SQLITE_READONLY;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a51ddb1ed7ae699d6fc2c49e3dbc3b3c15d49f00",
      "candidate_info": {
        "commit_hash": "a51ddb1ed7ae699d6fc2c49e3dbc3b3c15d49f00",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a51ddb1ed7ae699d6fc2c49e3dbc3b3c15d49f00",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/filter1.test",
          "test/window2.tcl",
          "test/window2.test",
          "test/window9.test"
        ],
        "message": "Fix a window-functions problem that could occur if an ORDER BY clause contains an alias for a window-function that is not a top-level expression.\n\nFossilOrigin-Name: 1cc6cf6407c6e25aeafeca379a93d0ad2614839c07fb3644e46926fce5f1cfab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/filter1.test||test/filter1.test",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36d35dbd5a80dc4a149ed7409cc4b43712622fc4c6a8915b4fbb62fd1d6b7763",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:       pExpr->u.zToken = sqlite3DbStrDup(db, pExpr->u.zToken);",
          "97:       pExpr->flags |= EP_MemToken;",
          "98:     }",
          "99:     sqlite3DbFree(db, pDup);",
          "100:   }",
          "101:   ExprSetProperty(pExpr, EP_Alias);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "100:       pExpr->y.pWin->pOwner = pExpr;",
          "101:     }",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   SELECT a, c, max(b) FILTER (WHERE c='x') FROM t2 GROUP BY a;",
          "135: } {1 x 5 2 6 {}}",
          "137: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: #-------------------------------------------------------------------------",
          "138: reset_db",
          "139: do_execsql_test 4.0 {",
          "140:   CREATE TABLE t1(a, b, c);",
          "141:   INSERT INTO t1 VALUES('a', 0, 5);",
          "142:   INSERT INTO t1 VALUES('a', 1, 10);",
          "143:   INSERT INTO t1 VALUES('a', 0, 15);",
          "145:   INSERT INTO t1 VALUES('b', 0, 5);",
          "146:   INSERT INTO t1 VALUES('b', 1, 1000);",
          "147:   INSERT INTO t1 VALUES('b', 0, 5);",
          "149:   INSERT INTO t1 VALUES('c', 0, 1);",
          "150:   INSERT INTO t1 VALUES('c', 1, 2);",
          "151:   INSERT INTO t1 VALUES('c', 0, 3);",
          "152: }",
          "154: do_execsql_test 4.1 {",
          "155:   SELECT avg(c) FILTER (WHERE b!=1) AS h FROM t1 GROUP BY a ORDER BY h;",
          "156: } {2.0 5.0 10.0}",
          "157: do_execsql_test 4.2 {",
          "158:   SELECT avg(c) FILTER (WHERE b!=1) AS h FROM t1 GROUP BY a ORDER BY (h+1.0);",
          "159: } {2.0 5.0 10.0}",
          "160: do_execsql_test 4.3 {",
          "161:   SELECT a, avg(c) FILTER (WHERE b!=1) AS h FROM t1 GROUP BY a ORDER BY avg(c);",
          "162: } {c 2.0 a 10.0 b 5.0}",
          "163: do_execsql_test 4.4 {",
          "164:   SELECT a, avg(c) FILTER (WHERE b!=1) FROM t1 GROUP BY a ORDER BY 2",
          "165: } {c 2.0 b 5.0 a 10.0}",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "433: }",
          "436: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435: ==========",
          "437: execsql_test 5.0 {",
          "438:   DROP TABLE IF EXISTS t1;",
          "439:   CREATE TABLE t1(x INTEGER, y INTEGER);",
          "440:   INSERT INTO t1 VALUES(10, 1);",
          "441:   INSERT INTO t1 VALUES(20, 2);",
          "442:   INSERT INTO t1 VALUES(3, 3);",
          "443:   INSERT INTO t1 VALUES(2, 4);",
          "444:   INSERT INTO t1 VALUES(1, 5);",
          "445: }",
          "447: execsql_float_test 5.1 {",
          "448:   SELECT avg(x) OVER (ORDER BY y) AS z FROM t1 ORDER BY z;",
          "449: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "901:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "902: } {3}",
          "904: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904: #==========================================================================",
          "906: do_execsql_test 5.0 {",
          "907:   DROP TABLE IF EXISTS t1;",
          "908:   CREATE TABLE t1(x INTEGER, y INTEGER);",
          "909:   INSERT INTO t1 VALUES(10, 1);",
          "910:   INSERT INTO t1 VALUES(20, 2);",
          "911:   INSERT INTO t1 VALUES(3, 3);",
          "912:   INSERT INTO t1 VALUES(2, 4);",
          "913:   INSERT INTO t1 VALUES(1, 5);",
          "914: } {}",
          "917: do_test 5.1 {",
          "918:   set myres {}",
          "919:   foreach r [db eval {SELECT avg(x) OVER (ORDER BY y) AS z FROM t1 ORDER BY z;}] {",
          "920:     lappend myres [format %.4f [set r]]",
          "921:   }",
          "922:   set res2 {7.2000 8.7500 10.0000 11.0000 15.0000}",
          "923:   set i 0",
          "924:   foreach r [set myres] r2 [set res2] {",
          "925:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "926:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "927:     }",
          "928:     incr i",
          "929:   }",
          "930:   set {} {}",
          "931: } {}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:   BETWEEN 1 AND 1;",
          "196: } {0}",
          "199: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198: #-------------------------------------------------------------------------",
          "199: reset_db",
          "200: do_execsql_test 7.0 {",
          "201:   DROP TABLE IF EXISTS t1;",
          "202:   CREATE TABLE t1(x, y);",
          "203:   INSERT INTO t1 VALUES(10, 1);",
          "204:   INSERT INTO t1 VALUES(20, 2);",
          "205:   INSERT INTO t1 VALUES(3, 3);",
          "206:   INSERT INTO t1 VALUES(2, 4);",
          "207:   INSERT INTO t1 VALUES(1, 5);",
          "208: } {}",
          "211: do_execsql_test 7.1 {",
          "212:   SELECT avg(x) OVER (ORDER BY y) AS z FROM t1 ORDER BY z",
          "213: } {",
          "214:   7.2 8.75 10.0 11.0 15.0",
          "215: }",
          "217: do_execsql_test 7.2 {",
          "218:   SELECT avg(x) OVER (ORDER BY y) z FROM t1 ORDER BY (z IS y);",
          "219: } {",
          "220:   10.0 15.0 11.0 8.75 7.2",
          "221: }",
          "223: do_execsql_test 7.3 {",
          "224:   SELECT avg(x) OVER (ORDER BY y) z FROM t1 ORDER BY (y IS z);",
          "225: } {",
          "226:   10.0 15.0 11.0 8.75 7.2",
          "227: }",
          "229: do_execsql_test 7.4 {",
          "230:   SELECT avg(x) OVER (ORDER BY y) z FROM t1 ORDER BY z + 0.0;",
          "231: } {",
          "232:   7.2 8.75 10.0 11.0 15.0",
          "233: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eefc72d12fa7b76393e9a1092dfc8278260da1d9",
      "candidate_info": {
        "commit_hash": "eefc72d12fa7b76393e9a1092dfc8278260da1d9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eefc72d12fa7b76393e9a1092dfc8278260da1d9",
        "files": [
          "ext/fts5/fts5_tokenize.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid an undefined left-shift operation in fts5 caused by malformed utf-8 text.\n\nFossilOrigin-Name: c3a3a11194586bef80a9d7ca54caae8af30d4e7b464b8bb3d257ba2d2ec4791f",
        "before_after_code_files": [
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:       const unsigned char *zCsr = (const unsigned char*)z;",
          "263:       const unsigned char *zTerm = (const unsigned char*)&z[n];",
          "264:       while( zCsr<zTerm ){",
          "266:         int bToken;",
          "267:         READ_UTF8(zCsr, zTerm, iCode);",
          "268:         if( iCode<128 ){",
          "269:           p->aTokenChar[iCode] = (unsigned char)bTokenChars;",
          "270:         }else{",
          "272:           assert( (bToken==0 || bToken==1) );",
          "273:           assert( (bTokenChars==0 || bTokenChars==1) );",
          "274:           if( bToken!=bTokenChars && sqlite3Fts5UnicodeIsdiacritic(iCode)==0 ){",
          "",
          "[Removed Lines]",
          "265:         int iCode;",
          "271:           bToken = p->aCategory[sqlite3Fts5UnicodeCategory((u32)iCode)];",
          "",
          "[Added Lines]",
          "265:         u32 iCode;",
          "271:           bToken = p->aCategory[sqlite3Fts5UnicodeCategory(iCode)];",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a385298df264dbfa6765f63ad8708f74bc8e8a1404239c1049890b39a1bda888",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5102cf8df5147aa9f230334d4d0d5b4555957943",
      "candidate_info": {
        "commit_hash": "5102cf8df5147aa9f230334d4d0d5b4555957943",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5102cf8df5147aa9f230334d4d0d5b4555957943",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree1.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Early detection and reporting of too few columns in an rtree CREATE VIRTUAL TABLE statement.\n\nFossilOrigin-Name: ef73107f475e40e6bdd8b722e96992070f81fd2b7a3cb718ec8f251c89ca3e81",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3706:   };",
          "3711:     return SQLITE_ERROR;",
          "3712:   }",
          "",
          "[Removed Lines]",
          "3709:   if( argc>RTREE_MAX_AUX_COLUMN+3 ){",
          "",
          "[Added Lines]",
          "3709:   if( argc<6 || argc>RTREE_MAX_AUX_COLUMN+3 ){",
          "",
          "---------------"
        ],
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:   catchsql { DROP TABLE t1 }",
          "114: }",
          "116: # Like execsql except display output as integer where that can be",
          "117: # done without loss of information.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: do_catchsql_test rtree-1.3.1000 {",
          "116:   CREATE VIRTUAL TABLE t1000 USING rtree;",
          "117: } {1 {Too few columns for an rtree table}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 97fb5a72f91a44d579466e67c33aa862384c4d1c95c2010cf4ae9dbd172bbcfb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6e96b1b45b28a1fdb96af673604bb33dc9f5658",
      "candidate_info": {
        "commit_hash": "e6e96b1b45b28a1fdb96af673604bb33dc9f5658",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6e96b1b45b28a1fdb96af673604bb33dc9f5658",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/dbfuzz2.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fixes to the PRNG_SEED pragma idea.\n\nFossilOrigin-Name: c71098409c98af8360f8f28b9238a12ec764018a5782e8ff03fdf5db54031d6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/dbfuzz2.c||test/dbfuzz2.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ac5723164ae801e209ce525a5d94692767136f9d06be2a84883dcea677d02da",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6392:     Tcl_WrongNumArgs(interp, 1, objv, \"PRNG-SEED-TEXT\");",
          "6393:     return TCL_ERROR;",
          "6394:   }",
          "6396:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, (unsigned int)i);",
          "6397:   sqlite3_randomness(0,0);",
          "6398:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "6395:   if( Tcl_GetIntFromObj(objv[0],&i) ) return TCL_ERROR;",
          "",
          "[Added Lines]",
          "6395:   if( Tcl_GetIntFromObj(interp,objv[0],&i) ) return TCL_ERROR;",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   if( mxCb>0 ){",
          "212:     sqlite3_progress_handler(db, 10, progress_handler, 0);",
          "213:   }",
          "214:   for(i=0; i<sizeof(azSql)/sizeof(azSql[0]); i++){",
          "215:     if( eVerbosity>=1 ){",
          "216:       printf(\"%s\\n\", azSql[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "215:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "216:   sqlite3_randomness(0,0);",
          "217: #endif",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1805:             sqlite3_progress_handler(db, 100000, progressHandler,",
          "1806:                                      &vdbeLimitFlag);",
          "1807:           }",
          "1808: #endif",
          "1809:           do{",
          "1810:             runSql(db, (char*)pSql->a, runFlags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1808: #endif",
          "1809: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "1810:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "1811:           sqlite3_randomness(0,0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}