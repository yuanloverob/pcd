{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94f0a8342106b4e1af85bf658bdf1c12ed010c73",
      "candidate_info": {
        "commit_hash": "94f0a8342106b4e1af85bf658bdf1c12ed010c73",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94f0a8342106b4e1af85bf658bdf1c12ed010c73",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/memdb.c"
        ],
        "message": "Fix the xFetch method of the \"memdb\" VFS (used by deserialize) so that it is robust against corrupt database file.\n\nFossilOrigin-Name: 2c1ef40e787a6bc355b50168527a47eb09acd30d0d88cff8336a434ad554115d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e6f7c2aced49824a38b3494b796a8ec73aa7a90b51159f670596df15ed1c5ab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   void **pp",
          "311: ){",
          "312:   MemFile *p = (MemFile *)pFile;",
          "315:   return SQLITE_OK;",
          "316: }",
          "",
          "[Removed Lines]",
          "313:   p->nMmap++;",
          "",
          "[Added Lines]",
          "313:   if( iOfst+iAmt>p->sz ){",
          "314:     assert( CORRUPT_DB );",
          "316:   }else{",
          "317:     p->nMmap++;",
          "319:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "746461f1b81fc952a2793f5f0b19099dc06e9510",
      "candidate_info": {
        "commit_hash": "746461f1b81fc952a2793f5f0b19099dc06e9510",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/746461f1b81fc952a2793f5f0b19099dc06e9510",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/pager.c",
          "src/sqliteInt.h"
        ],
        "message": "Ensure that the main filename and the journal filenames in the pager object are all correctly double-zero terminated.\n\nFossilOrigin-Name: df51ae19c1aa4c26f2dcd427eddc1c9cc24b698e1ab0a948b198a57432e25e1e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/pager.c||src/pager.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28091a48aa6994f8d7c142b5851bcd6b4e9a93a7bbef6c927a6182d24f3245b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4187:   return rc;",
          "4188: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4190: #ifdef SQLITE_DEBUG",
          "4196: int sqlite3UriCount(const char *z){",
          "4197:   int n = 0;",
          "4198:   if( z==0 ) return 0;",
          "4199:   z += strlen(z)+1;",
          "4200:   while( z[0] ){",
          "4201:     z += strlen(z)+1;",
          "4202:     z += strlen(z)+1;",
          "4203:     n++;",
          "4204:   }",
          "4205:   return n;",
          "4206: }",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4764: #ifdef SQLITE_DEBUG",
          "4766: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4797:     nPathname = sqlite3Strlen30(zPathname);",
          "4798:     z = zUri = &zFilename[sqlite3Strlen30(zFilename)+1];",
          "4799:     while( *z ){",
          "4802:     }",
          "4805:     if( rc==SQLITE_OK && nPathname+8>pVfs->mxPathname ){",
          "",
          "[Removed Lines]",
          "4800:       z += sqlite3Strlen30(z)+1;",
          "4801:       z += sqlite3Strlen30(z)+1;",
          "4803:     nUri = (int)(&z[1] - zUri);",
          "4804:     assert( nUri>=0 );",
          "",
          "[Added Lines]",
          "4803:       z += strlen(z)+1;",
          "4804:       z += strlen(z)+1;",
          "4805: #ifdef SQLITE_DEBUG",
          "4806:       nUri++;",
          "4807: #endif",
          "4809:     nUriByte = (int)(&z[2] - zUri);",
          "4810:     assert( nUriByte>=1 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4857:   if( zPathname ){",
          "4858:     assert( nPathname>0 );",
          "4860:     memcpy(pPager->zFilename, zPathname, nPathname);",
          "4862:     memcpy(pPager->zJournal, zPathname, nPathname);",
          "4864:     sqlite3FileSuffix3(pPager->zFilename, pPager->zJournal);",
          "4865: #ifndef SQLITE_OMIT_WAL",
          "4867:     memcpy(pPager->zWal, zPathname, nPathname);",
          "4869:     sqlite3FileSuffix3(pPager->zFilename, pPager->zWal);",
          "4870: #endif",
          "4871:     sqlite3DbFree(0, zPathname);",
          "4872:   }",
          "4873:   pPager->pVfs = pVfs;",
          "",
          "[Removed Lines]",
          "4859:     pPager->zJournal =   (char*)(pPtr += nPathname + 1 + nUri);",
          "4861:     if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUri);",
          "4863:     memcpy(&pPager->zJournal[nPathname], \"-journal\\000\", 8+2);",
          "4866:     pPager->zWal = &pPager->zJournal[nPathname+8+1];",
          "4868:     memcpy(&pPager->zWal[nPathname], \"-wal\\000\", 4+1);",
          "",
          "[Added Lines]",
          "4866:     if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUriByte);",
          "4867:     pPager->zJournal =   (char*)(pPtr += nPathname + 1 + nUriByte);",
          "4869:     memcpy(&pPager->zJournal[nPathname], \"-journal\", 8);",
          "4872:     pPager->zWal = (char*)(pPtr += nPathname + 8 + 2);",
          "4874:     memcpy(&pPager->zWal[nPathname], \"-wal\", 4);",
          "4876:     assert( sqlite3UriCount(pPager->zWal)==0 );",
          "4878:     assert( sqlite3UriCount(pPager->zFilename)==nUri );",
          "4879:     assert( sqlite3UriCount(pPager->zJournal)==0 );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3992: void sqlite3AddCollateType(Parse*, Token*);",
          "3993: void sqlite3AddGenerated(Parse*,Expr*,Token*);",
          "3994: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "3995: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "3996:                     sqlite3_vfs**,char**,char **);",
          "3997: #ifdef SQLITE_HAS_CODEC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3995: #ifdef SQLITE_DEBUG",
          "3996:   int sqlite3UriCount(const char*);",
          "3997: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19d9a3ca6ce3d0f8ee0d6c249faf4e972af47e00",
      "candidate_info": {
        "commit_hash": "19d9a3ca6ce3d0f8ee0d6c249faf4e972af47e00",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/19d9a3ca6ce3d0f8ee0d6c249faf4e972af47e00",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/vtab1.test",
          "test/without_rowid1.test",
          "test/without_rowid6.test"
        ],
        "message": "New test cases for PRAGMA index_xinfo on a WITHOUT ROWID table.  And new testcases using index_xinfo to verify that WITHOUT ROWID tables are constructed correctly.\n\nFossilOrigin-Name: 340378c1e60da80263523776f4b6366a9d332a7ee25986637e8b157f4e8e4bd3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/vtab1.test||test/vtab1.test",
          "test/without_rowid1.test||test/without_rowid1.test",
          "test/without_rowid6.test||test/without_rowid6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 62274ff683ba077d8b0fa34ad653ce235a8c5cbfdb7ab8558469af7333d03698",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/vtab1.test||test/vtab1.test": [
          "File: test/vtab1.test -> test/vtab1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "875:   }",
          "876: } {}",
          "878: ifcapable attach {",
          "879:   do_test vtab1.8-1 {",
          "880:     set echo_module \"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "878: # PRAGMA index_info and index_xinfo are no-ops on a virtual table",
          "879: do_test vtab1.7-14 {",
          "880:   execsql {",
          "881:     PRAGMA index_info('echo_abc');",
          "882:     PRAGMA index_xinfo('echo_abc');",
          "883:   }",
          "884: } {}",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: integrity_check without_rowid1-1.0ic",
          "34: do_execsql_test without_rowid1-1.1 {",
          "35:   SELECT *, '|' FROM t1 ORDER BY +c, a;",
          "36: } {arctic sleep ammonia helena | journal sherman ammonia helena | dynamic juliet flipper command | journal sherman gamma patriot |}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: do_execsql_test without_rowid1-1.0ixi {",
          "35:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "36: } {c 1 a 1 b 0 d 0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   UPDATE t4 SET a = 'ABC';",
          "121:   SELECT * FROM t4;",
          "122: } {ABC def}",
          "124: do_execsql_test 2.2.1 {",
          "125:   DROP TABLE t4;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: do_execsql_test 2.1.3 {",
          "128:   SELECT name, coll, key FROM pragma_index_xinfo('t4');",
          "129: } {a nocase 1 b BINARY 0}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:   SELECT * FROM t4;",
          "134: } {xyz ABC}",
          "136: do_execsql_test 2.3.1 {",
          "137:   CREATE TABLE t5 (a, b, PRIMARY KEY(b, a)) WITHOUT ROWID;",
          "138:   INSERT INTO t5(a, b) VALUES('abc', 'def');",
          "139:   UPDATE t5 SET a='abc', b='def';",
          "140: } {}",
          "142: do_execsql_test 2.4.1 {",
          "143:   CREATE TABLE t6 (",
          "144:     a COLLATE nocase, b, c UNIQUE, PRIMARY KEY(b, a)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: do_execsql_test 2.2.3 {",
          "144:   SELECT name, coll, key FROM pragma_index_xinfo('t4');",
          "145: } {a nocase 1 b BINARY 0}",
          "154: do_execsql_test 2.3.2 {",
          "155:   SELECT name, coll, key FROM pragma_index_xinfo('t5');",
          "156: } {b BINARY 1 a BINARY 1}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:   SELECT * FROM t6 ORDER BY c;",
          "154: } {ABC def ghi ABC def ghi}",
          "156: #-------------------------------------------------------------------------",
          "157: # Unless the destination table is completely empty, the xfer optimization",
          "158: # is disabled for WITHOUT ROWID tables. The following tests check for",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: do_execsql_test 2.4.3 {",
          "174:   SELECT name, coll, key FROM pragma_index_xinfo('t6');",
          "175: } {b BINARY 1 a nocase 1 c BINARY 0}",
          "",
          "---------------"
        ],
        "test/without_rowid6.test||test/without_rowid6.test": [
          "File: test/without_rowid6.test -> test/without_rowid6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   INSERT INTO t1(a,b,c,d,e) SELECT i, i+1000, printf('x%dy',i), 0, 0 FROM c;",
          "25:   ANALYZE;",
          "26: } {}",
          "27: do_execsql_test without_rowid6-110 {",
          "28:   SELECT c FROM t1 WHERE a=123;",
          "29: } {x123y}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: do_execsql_test without_rowid6-101 {",
          "28:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "29: } {a 1 b 1 c 1 d 1 e 0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   INSERT INTO t1(a,b,c) VALUES(1,8,3),(4,5,6),(7,2,9);",
          "52:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "53: } {4 1}",
          "54: do_execsql_test without_rowid6-210 {",
          "55:   EXPLAIN QUERY PLAN",
          "56:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: do_execsql_test without_rowid6-201 {",
          "58:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "59: } {b 1 a 0 c 0}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:   INSERT INTO t1(a,b,c) VALUES(1,8,3),(4,5,6),(7,2,9);",
          "106:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "107: } {4 1}",
          "108: do_execsql_test without_rowid6-510 {",
          "109:   EXPLAIN QUERY PLAN",
          "110:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: do_execsql_test without_rowid6-501 {",
          "115:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "116: } {b 1 c 1 a 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c72afaf33c8e3fd86999a3f56a382cdf2845caf",
      "candidate_info": {
        "commit_hash": "8c72afaf33c8e3fd86999a3f56a382cdf2845caf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8c72afaf33c8e3fd86999a3f56a382cdf2845caf",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/window1.test"
        ],
        "message": "Add a test case for fix in check-in [1ca0bd982ab1183b]\n\nFossilOrigin-Name: 519864da8bb671941a64bf333c2086ad9a068b5f85759e7abd368f0706d3aefd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a96d02b4ab8c70cc20b322e4fa3a4b8814f05c51f5d8b071ec9d69e7379f3ea5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1314:   VALUES(2),(3),(count(*)OVER()),(4),(5);",
          "1315: } {2 3 1 4 5}",
          "1318: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1317: # 2019-12-17 crash test case found by Yongheng and Rui",
          "1318: # See check-in 1ca0bd982ab1183b",
          "1319: #",
          "1320: reset_db",
          "1321: do_execsql_test 37.10 {",
          "1322:   CREATE TABLE t0(a UNIQUE, b PRIMARY KEY);",
          "1323:   CREATE VIEW v0(c) AS SELECT max((SELECT count(a)OVER(ORDER BY 1))) FROM t0;",
          "1324:   SELECT c FROM v0 WHERE c BETWEEN 10 AND 20;",
          "1325: } {}",
          "1326: do_execsql_test 37.20 {",
          "1327:   DROP VIEW v0;",
          "1328:   CREATE VIEW v0(c) AS SELECT max((SELECT count(a)OVER(ORDER BY 1234))) FROM t0;",
          "1329:   SELECT c FROM v0 WHERE c BETWEEN -10 AND 20;",
          "1330: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "829d4253ffa2e0bb5cc6ca37f0bf5053fd8db930",
      "candidate_info": {
        "commit_hash": "829d4253ffa2e0bb5cc6ca37f0bf5053fd8db930",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/829d4253ffa2e0bb5cc6ca37f0bf5053fd8db930",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata7.db"
        ],
        "message": "Add test cases to test/fuzzdata7.db for (harmless) dbfuzz2 finds.\n\nFossilOrigin-Name: 1eb2a628e4bfae51fea43e8f40fedfe23f2118024d9cce35828c3cbe92a9b392",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4b05caeb1b9767ba58cb4261ecc22cdd495216b3258d45f2165cdbd3ea079495",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}