{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "57c45147207fcf1d94a8a3a324ecf4d19922dfa1",
      "candidate_info": {
        "commit_hash": "57c45147207fcf1d94a8a3a324ecf4d19922dfa1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57c45147207fcf1d94a8a3a324ecf4d19922dfa1",
        "files": [
          "ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Optimize further cases of restarting an RBU vacuum.\n\nFossilOrigin-Name: 6b3261bfa1d762aa29a57244a30cf5e35655f1fe9c30ee682c186dec29d7a2c2",
        "before_after_code_files": [
          "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test": [
          "File: ext/rbu/rbuvacuum4.test -> ext/rbu/rbuvacuum4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 Jan 3",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # This file contains tests for the RBU module. More specifically, it",
          "13: # contains tests to ensure that the sqlite3rbu_vacuum() API works as",
          "14: # expected.",
          "15: #",
          "17: source [file join [file dirname [info script]] rbu_common.tcl]",
          "18: set testprefix rbuvacuum4",
          "20: set step 1",
          "22: do_execsql_test 1.0 {",
          "23:   CREATE TABLE t1(a PRIMARY KEY, b, c) WITHOUT ROWID;",
          "24:   INSERT INTO t1 VALUES(1, 2, 3);",
          "25:   INSERT INTO t1 VALUES(4, 5, 6);",
          "26:   INSERT INTO t1 VALUES(7, 8, 9);",
          "27: }",
          "28: do_rbu_vacuum_test 1.1 1",
          "30: #-------------------------------------------------------------------------",
          "31: reset_db",
          "33: do_execsql_test 2.0 {",
          "34:   CREATE TABLE t1(a, b, c, PRIMARY KEY(a, b, c)) WITHOUT ROWID;",
          "35:   INSERT INTO t1 VALUES(1, 2, 3);",
          "36:   INSERT INTO t1 VALUES(4, 5, 6);",
          "37:   INSERT INTO t1 VALUES(7, 8, 9);",
          "38: }",
          "39: do_rbu_vacuum_test 2.1 1",
          "40: do_execsql_test 2.2 {",
          "41:   SELECT * FROM t1;",
          "42: } {1 2 3 4 5 6 7 8 9}",
          "44: #-------------------------------------------------------------------------",
          "45: reset_db",
          "47: do_execsql_test 3.0 {",
          "48:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "49:   CREATE INDEX i1 oN t1(b, c);",
          "50:   INSERT INTO t1 VALUES(1, 2, 3);",
          "51:   INSERT INTO t1 VALUES(4, 5, 6);",
          "52:   INSERT INTO t1 VALUES(7, 8, 9);",
          "53: }",
          "55: do_rbu_vacuum_test 3.1 1",
          "57: do_execsql_test 3.2 {",
          "58:   SELECT * FROM t1;",
          "59: } {1 2 3 4 5 6 7 8 9}",
          "61: #-------------------------------------------------------------------------",
          "62: reset_db",
          "63: do_execsql_test 4.0 {",
          "64:   CREATE TABLE x1(a, b, c, d, PRIMARY KEY(c, b)) WITHOUT ROWID;",
          "65:   INSERT INTO x1 VALUES(1, 1, 1, 1);",
          "66:   INSERT INTO x1 VALUES(1, 1, 2, 1);",
          "67:   INSERT INTO x1 VALUES(1, 2, 2, 1);",
          "69:   INSERT INTO x1 VALUES(NULL, 2, 3, NULL);",
          "70:   INSERT INTO x1 VALUES(NULL, 2, 4, NULL);",
          "71:   INSERT INTO x1 VALUES(NULL, 2, 5, NULL);",
          "73:   CREATE INDEX x1ad ON x1(d, a);",
          "74: }",
          "76: do_rbu_vacuum_test 4.1.1 1",
          "78: do_execsql_test 4.2 {",
          "79:   SELECT count(*) fROM x1",
          "80: } 6",
          "82: do_rbu_vacuum_test 4.1.2 0",
          "84: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1476:           zSelect = rbuMPrintf(p, \"%z%squote(\\\"%w\\\")\", zSelect, zSep2, zCol);",
          "1477:           zSep = \", \";",
          "1478:           zSep2 = \"||','||\";",
          "1479:         }",
          "1480:       }",
          "1481:       if( i==pIter->nTblCol ) break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1479:           break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1503:   return zRet;",
          "1504: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507: char *rbuVacuumIndexStart(",
          "1508:   sqlite3rbu *p,",
          "1509:   RbuObjIter *pIter",
          "1510: ){",
          "1511:   char *zOrder = 0;",
          "1512:   char *zLhs = 0;",
          "1513:   char *zSelect = 0;",
          "1514:   char *zVector = 0;",
          "1515:   char *zRet = 0;",
          "1516:   int bFailed = 0;",
          "1518:   if( p->rc==SQLITE_OK ){",
          "1519:     const char *zSep = \"\";",
          "1520:     int iCol = 0;",
          "1521:     sqlite3_stmt *pXInfo = 0;",
          "1522:     p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1523:         sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", pIter->zIdx)",
          "1524:     );",
          "1525:     while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pXInfo) ){",
          "1526:       int iCid = sqlite3_column_int(pXInfo, 1);",
          "1527:       const char *zCollate = (const char*)sqlite3_column_text(pXInfo, 4);",
          "1528:       const char *zCol;",
          "1529:       if( sqlite3_column_int(pXInfo, 3) ){",
          "1530:         bFailed = 1;",
          "1531:         break;",
          "1532:       }",
          "1534:       if( iCid<0 ){",
          "1535:         if( pIter->eType==RBU_PK_IPK ){",
          "1536:           int i;",
          "1537:           for(i=0; pIter->abTblPk[i]==0; i++);",
          "1538:           assert( i<pIter->nTblCol );",
          "1539:           zCol = pIter->azTblCol[i];",
          "1540:         }else{",
          "1541:           zCol = \"_rowid_\";",
          "1542:         }",
          "1543:       }else{",
          "1544:         zCol = pIter->azTblCol[iCid];",
          "1545:       }",
          "1547:       zLhs = rbuMPrintf(p, \"%z%s \\\"%w\\\" COLLATE %Q\",",
          "1548:           zLhs, zSep, zCol, zCollate",
          "1549:       );",
          "1550:       zOrder = rbuMPrintf(p, \"%z%s \\\"rbu_imp_%d%w\\\" COLLATE %Q DESC\",",
          "1551:           zOrder, zSep, iCol, zCol, zCollate",
          "1552:       );",
          "1553:       zSelect = rbuMPrintf(p, \"%z%s quote(\\\"rbu_imp_%d%w\\\")\",",
          "1554:           zSelect, zSep, iCol, zCol",
          "1555:       );",
          "1556:       zSep = \", \";",
          "1557:       iCol++;",
          "1558:     }",
          "1559:     rbuFinalize(p, pXInfo);",
          "1560:   }",
          "1561:   if( bFailed ) goto index_start_out;",
          "1563:   if( p->rc==SQLITE_OK ){",
          "1564:     int iCol;",
          "1565:     sqlite3_stmt *pSel = 0;",
          "1567:     if( p->rc==SQLITE_OK ){",
          "1568:       p->rc = prepareFreeAndCollectError(p->dbMain, &pSel, &p->zErrmsg,",
          "1569:           sqlite3_mprintf(\"SELECT %s FROM \\\"rbu_imp_%w\\\" ORDER BY %s LIMIT 1\",",
          "1570:             zSelect, pIter->zTbl, zOrder",
          "1571:           )",
          "1572:       );",
          "1573:     }",
          "1574:     if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSel) ){",
          "1575:       const char *zSep = \"\";",
          "1576:       for(iCol=0; iCol<pIter->nCol; iCol++){",
          "1577:         const char *zQuoted = (const char*)sqlite3_column_text(pSel, iCol);",
          "1578:         if( zQuoted[0]=='N' ){",
          "1579:           bFailed = 1;",
          "1580:           break;",
          "1581:         }",
          "1582:         zVector = rbuMPrintf(p, \"%z%s%s\", zVector, zSep, zQuoted);",
          "1583:         zSep = \", \";",
          "1584:       }",
          "1586:       if( !bFailed ){",
          "1587:         zRet = rbuMPrintf(p, \"(%s) > (%s)\", zLhs, zVector);",
          "1588:       }",
          "1589:     }",
          "1590:     rbuFinalize(p, pSel);",
          "1591:   }",
          "1593:  index_start_out:",
          "1594:   sqlite3_free(zOrder);",
          "1595:   sqlite3_free(zSelect);",
          "1596:   sqlite3_free(zVector);",
          "1597:   sqlite3_free(zLhs);",
          "1598:   return zRet;",
          "1599: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2179:       if( p->rc==SQLITE_OK ){",
          "2180:         char *zSql;",
          "2181:         if( rbuIsVacuum(p) ){",
          "2182:           zSql = sqlite3_mprintf(",
          "2184:               zCollist,",
          "2185:               pIter->zDataTbl,",
          "2187:           );",
          "2188:         }else",
          "2190:         if( pIter->eType==RBU_PK_EXTERNAL || pIter->eType==RBU_PK_NONE ){",
          "",
          "[Removed Lines]",
          "2183:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s ORDER BY %s%s\",",
          "2186:               zPart, zCollist, zLimit",
          "",
          "[Added Lines]",
          "2277:           const char *zStart = 0;",
          "2278:           if( nOffset ){",
          "2279:             zStart = rbuVacuumIndexStart(p, pIter);",
          "2280:             if( zStart ){",
          "2281:               sqlite3_free(zLimit);",
          "2282:               zLimit = 0;",
          "2283:             }",
          "2284:           }",
          "2287:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s %s %s ORDER BY %s%s\",",
          "2290:               zPart,",
          "2291:               (zStart ? (zPart ? \"AND\" : \"WHERE\") : \"\"), zStart,",
          "2292:               zCollist, zLimit",
          "2294:           sqlite3_free(zStart);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2207:               zCollist, zLimit",
          "2208:           );",
          "2209:         }",
          "2211:       }",
          "2213:       sqlite3_free(zImposterCols);",
          "",
          "[Removed Lines]",
          "2210:         p->rc = prepareFreeAndCollectError(p->dbRbu, &pIter->pSelect, pz, zSql);",
          "",
          "[Added Lines]",
          "2317:         if( p->rc==SQLITE_OK ){",
          "2318:           p->rc = prepareFreeAndCollectError(p->dbRbu,&pIter->pSelect,pz,zSql);",
          "2319:         }else{",
          "2320:           sqlite3_free(zSql);",
          "2321:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cdc09867ed6522026ae7bfac1f59cd79b60fba6d07d49b99b030a501a7059ee4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01e92df41ef05b7ec1807beccc697fd521abc584",
      "candidate_info": {
        "commit_hash": "01e92df41ef05b7ec1807beccc697fd521abc584",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01e92df41ef05b7ec1807beccc697fd521abc584",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbeInt.h",
          "src/vdbeaux.c"
        ],
        "message": "Merge performance enhancements from trunk.\n\nFossilOrigin-Name: 0f1b9ff9e1e6f13e03045fcb7d0907227085054f9eb0b0b8471fb26b0094b13a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: da53f3d3ff26cc32d3a5ac788b6785baa3d1688e50d9354025a3130dc7e71a38",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   pParse->pVdbe = p;",
          "37:   assert( pParse->aLabel==0 );",
          "38:   assert( pParse->nLabel==0 );",
          "40:   assert( pParse->szOpAlloc==0 );",
          "41:   sqlite3VdbeAddOp2(p, OP_Init, 0, 1);",
          "42:   return p;",
          "",
          "[Removed Lines]",
          "39:   assert( pParse->nOpAlloc==0 );",
          "",
          "[Added Lines]",
          "39:   assert( p->nOpAlloc==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157: #ifdef SQLITE_TEST_REALLOC_STRESS",
          "159: #else",
          "161:   UNUSED_PARAMETER(nOp);",
          "162: #endif",
          "",
          "[Removed Lines]",
          "158:   int nNew = (p->nOpAlloc>=512 ? p->nOpAlloc*2 : p->nOpAlloc+nOp);",
          "160:   int nNew = (p->nOpAlloc ? p->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "[Added Lines]",
          "158:   int nNew = (v->nOpAlloc>=512 ? v->nOpAlloc*2 : v->nOpAlloc+nOp);",
          "160:   int nNew = (v->nOpAlloc ? v->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:   }",
          "170:   assert( nOp<=(1024/sizeof(Op)) );",
          "172:   pNew = sqlite3DbRealloc(p->db, v->aOp, nNew*sizeof(Op));",
          "173:   if( pNew ){",
          "174:     p->szOpAlloc = sqlite3DbMallocSize(p->db, pNew);",
          "176:     v->aOp = pNew;",
          "177:   }",
          "178:   return (pNew ? SQLITE_OK : SQLITE_NOMEM_BKPT);",
          "",
          "[Removed Lines]",
          "171:   assert( nNew>=(p->nOpAlloc+nOp) );",
          "175:     p->nOpAlloc = p->szOpAlloc/sizeof(Op);",
          "",
          "[Added Lines]",
          "171:   assert( nNew>=(v->nOpAlloc+nOp) );",
          "175:     v->nOpAlloc = p->szOpAlloc/sizeof(Op);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208: static SQLITE_NOINLINE int growOp3(Vdbe *p, int op, int p1, int p2, int p3){",
          "210:   if( growOpArray(p, 1) ) return 1;",
          "212:   return sqlite3VdbeAddOp3(p, op, p1, p2, p3);",
          "213: }",
          "214: int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){",
          "",
          "[Removed Lines]",
          "209:   assert( p->pParse->nOpAlloc<=p->nOp );",
          "211:   assert( p->pParse->nOpAlloc>p->nOp );",
          "",
          "[Added Lines]",
          "209:   assert( p->nOpAlloc<=p->nOp );",
          "211:   assert( p->nOpAlloc>p->nOp );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "218:   i = p->nOp;",
          "219:   assert( p->magic==VDBE_MAGIC_INIT );",
          "220:   assert( op>=0 && op<0xff );",
          "222:     return growOp3(p, op, p1, p2, p3);",
          "223:   }",
          "224:   p->nOp++;",
          "",
          "[Removed Lines]",
          "221:   if( p->pParse->nOpAlloc<=i ){",
          "",
          "[Added Lines]",
          "221:   if( p->nOpAlloc<=i ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "809: #if defined(SQLITE_DEBUG) && !defined(SQLITE_TEST_REALLOC_STRESS)",
          "810: void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N){",
          "812: }",
          "813: #endif",
          "",
          "[Removed Lines]",
          "811:   assert( p->nOp + N <= p->pParse->nOpAlloc );",
          "",
          "[Added Lines]",
          "811:   assert( p->nOp + N <= p->nOpAlloc );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "880:   VdbeOp *pOut, *pFirst;",
          "881:   assert( nOp>0 );",
          "882:   assert( p->magic==VDBE_MAGIC_INIT );",
          "884:     return 0;",
          "885:   }",
          "886:   pFirst = pOut = &p->aOp[p->nOp];",
          "",
          "[Removed Lines]",
          "883:   if( p->nOp + nOp > p->pParse->nOpAlloc && growOpArray(p, nOp) ){",
          "",
          "[Added Lines]",
          "883:   if( p->nOp + nOp > p->nOpAlloc && growOpArray(p, nOp) ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2211: #ifdef SQLITE_ENABLE_STMT_SCANSTATUS",
          "2213: #endif",
          "2215:     x.pSpace = p->pFree = sqlite3DbMallocRawNN(db, x.nNeeded);",
          "2216:     x.nFree = x.nNeeded;",
          "2219:   p->pVList = pParse->pVList;",
          "2220:   pParse->pVList =  0;",
          "",
          "[Removed Lines]",
          "2205:   do {",
          "2206:     x.nNeeded = 0;",
          "2207:     p->aMem = allocSpace(&x, p->aMem, nMem*sizeof(Mem));",
          "2208:     p->aVar = allocSpace(&x, p->aVar, nVar*sizeof(Mem));",
          "2209:     p->apArg = allocSpace(&x, p->apArg, nArg*sizeof(Mem*));",
          "2210:     p->apCsr = allocSpace(&x, p->apCsr, nCursor*sizeof(VdbeCursor*));",
          "2212:     p->anExec = allocSpace(&x, p->anExec, p->nOp*sizeof(i64));",
          "2214:     if( x.nNeeded==0 ) break;",
          "2217:   }while( !db->mallocFailed );",
          "",
          "[Added Lines]",
          "2205:   x.nNeeded = 0;",
          "2206:   p->aMem = allocSpace(&x, 0, nMem*sizeof(Mem));",
          "2207:   p->aVar = allocSpace(&x, 0, nVar*sizeof(Mem));",
          "2208:   p->apArg = allocSpace(&x, 0, nArg*sizeof(Mem*));",
          "2209:   p->apCsr = allocSpace(&x, 0, nCursor*sizeof(VdbeCursor*));",
          "2211:   p->anExec = allocSpace(&x, 0, p->nOp*sizeof(i64));",
          "2213:   if( x.nNeeded ){",
          "2216:     if( !db->mallocFailed ){",
          "2217:       p->aMem = allocSpace(&x, p->aMem, nMem*sizeof(Mem));",
          "2218:       p->aVar = allocSpace(&x, p->aVar, nVar*sizeof(Mem));",
          "2219:       p->apArg = allocSpace(&x, p->apArg, nArg*sizeof(Mem*));",
          "2220:       p->apCsr = allocSpace(&x, p->apCsr, nCursor*sizeof(VdbeCursor*));",
          "2221: #ifdef SQLITE_ENABLE_STMT_SCANSTATUS",
          "2222:       p->anExec = allocSpace(&x, p->anExec, p->nOp*sizeof(i64));",
          "2223: #endif",
          "2224:     }",
          "2225:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba01634cd393040ade90cf5449e3642663e80699",
      "candidate_info": {
        "commit_hash": "ba01634cd393040ade90cf5449e3642663e80699",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ba01634cd393040ade90cf5449e3642663e80699",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Ensure that the same subquery does not go through the window-function rewrite more than once, even when that subquery is part of a virtual table constraint that lacks the omit flag.\n\nFossilOrigin-Name: d0bc7db6b0a53edc04815622c46250d26f526f56e59f14875f4e18c75b49000d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7e3151855fd4370fb7d4fff20516c2c2d1980134620df924106e6989bc130583",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "904: int sqlite3WindowRewrite(Parse *pParse, Select *p){",
          "905:   int rc = SQLITE_OK;",
          "907:     Vdbe *v = sqlite3GetVdbe(pParse);",
          "908:     sqlite3 *db = pParse->db;",
          "",
          "[Removed Lines]",
          "906:   if( p->pWin && p->pPrior==0 ){",
          "",
          "[Added Lines]",
          "906:   if( p->pWin && p->pPrior==0 && (p->selFlags & SF_WinRewrite)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "928:     p->pGroupBy = 0;",
          "929:     p->pHaving = 0;",
          "930:     p->selFlags &= ~SF_Aggregate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931:     p->selFlags |= SF_WinRewrite;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b22c1b8168ce18d5582fc0004369ecef8f7d939",
      "candidate_info": {
        "commit_hash": "1b22c1b8168ce18d5582fc0004369ecef8f7d939",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1b22c1b8168ce18d5582fc0004369ecef8f7d939",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test",
          "ext/misc/uuid.c",
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/parse.y",
          "src/treeview.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "test/rowvalue.test",
          "test/trigger1.test"
        ],
        "message": "Merge fixes from trunk.\n\nFossilOrigin-Name: 4ec57d88415fa4ea2e99d4a5671074ec6829d6824bc8509d5ae9c978d47d1419",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "ext/misc/uuid.c||ext/misc/uuid.c",
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/parse.y||src/parse.y",
          "src/treeview.c||src/treeview.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/rowvalue.test||test/rowvalue.test",
          "test/trigger1.test||test/trigger1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5318:   for(i=0; i<nChar; i++){",
          "5320:     if( (unsigned char)p[n++]>=0xc0 ){",
          "5321:       while( (p[n] & 0xc0)==0x80 ){",
          "5322:         n++;",
          "5323:         if( n>=nByte ) break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5321:       if( n>=nByte ) break;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   SELECT rowid FROM t1 WHERE rowid=2 AND t1 = 'hello';",
          "219: }",
          "222: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: #-------------------------------------------------------------------------",
          "222: #",
          "223: reset_db",
          "224: do_execsql_test 8.0 {",
          "225:   CREATE VIRTUAL TABLE vt0 USING fts5(c0, tokenize = \"ascii\", prefix = 1);",
          "226:   INSERT INTO vt0(c0) VALUES (x'd1');",
          "227: }",
          "229: breakpoint",
          "230: do_execsql_test 8.1 {",
          "231:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "232: }",
          "",
          "---------------"
        ],
        "ext/misc/uuid.c||ext/misc/uuid.c": [
          "File: ext/misc/uuid.c -> ext/misc/uuid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #include \"sqlite3ext.h\"",
          "62: SQLITE_EXTENSION_INIT1",
          "63: #include <assert.h>",
          "64: #include <string.h>",
          "65: #include <ctype.h>",
          "67: #if !defined(SQLITE_ASCII) && !defined(SQLITE_EBCDIC)",
          "68: # define SQLITE_ASCII 1",
          "69: #endif",
          "76: static unsigned char sqlite3UuidHexToInt(int h){",
          "77:   assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );",
          "78: #ifdef SQLITE_ASCII",
          "79:   h += 9*(1&(h>>6));",
          "80: #endif",
          "81: #ifdef SQLITE_EBCDIC",
          "82:   h += 9*(1&~(h>>4));",
          "83: #endif",
          "84:   return (unsigned char)(h & 0xf);",
          "85: }",
          "92: static void sqlite3UuidBlobToStr(",
          "95: ){",
          "96:   static const char zDigits[] = \"0123456789abcdef\";",
          "97:   int i, k;",
          "98:   unsigned char x;",
          "99:   k = 0;",
          "100:   for(i=0, k=0x550; i<16; i++, k=k>>1){",
          "101:     if( k&1 ){",
          "102:       zStr[0] = '-';",
          "103:       zStr++;",
          "104:     }",
          "105:     x = aBlob[i];",
          "106:     zStr[0] = zDigits[x>>4];",
          "107:     zStr[1] = zDigits[x&0xf];",
          "108:     zStr += 2;",
          "109:   }",
          "111: }",
          "118: static int sqlite3UuidStrToBlob(",
          "121: ){",
          "122:   int i;",
          "123:   if( zStr[0]=='{' ) zStr++;",
          "124:   for(i=0; i<16; i++){",
          "125:     if( zStr[0]=='-' ) zStr++;",
          "126:     if( isxdigit(zStr[0]) && isxdigit(zStr[1]) ){",
          "127:       aBlob[i] = (sqlite3UuidHexToInt(zStr[0])<<4)",
          "128:                       + sqlite3UuidHexToInt(zStr[1]);",
          "129:       zStr += 2;",
          "130:     }else{",
          "131:       return 1;",
          "132:     }",
          "133:   }",
          "134:   if( zStr[0]=='}' ) zStr++;",
          "135:   return zStr[0]!=0;",
          "136: }",
          "142: static const unsigned char *sqlite3UuidInputToBlob(",
          "145: ){",
          "146:   switch( sqlite3_value_type(pIn) ){",
          "147:     case SQLITE_TEXT: {",
          "148:       const unsigned char *z = sqlite3_value_text(pIn);",
          "149:       if( sqlite3UuidStrToBlob(z, pBuf) ) return 0;",
          "150:       return pBuf;",
          "151:     }",
          "152:     case SQLITE_BLOB: {",
          "153:       int n = sqlite3_value_bytes(pIn);",
          "154:       return n==16 ? sqlite3_value_blob(pIn) : 0;",
          "155:     }",
          "156:     default: {",
          "157:       return 0;",
          "158:     }",
          "159:   }",
          "160: }",
          "163: static void sqlite3UuidFunc(",
          "164:   sqlite3_context *context,",
          "165:   int argc,",
          "166:   sqlite3_value **argv",
          "167: ){",
          "168:   unsigned char aBlob[16];",
          "169:   unsigned char zStr[37];",
          "170:   (void)argc;",
          "171:   (void)argv;",
          "172:   sqlite3_randomness(16, aBlob);",
          "173:   aBlob[6] = (aBlob[6]&0x0f) + 0x40;",
          "174:   aBlob[8] = (aBlob[8]&0x3f) + 0x80;",
          "175:   sqlite3UuidBlobToStr(aBlob, zStr);",
          "176:   sqlite3_result_text(context, (char*)zStr, 36, SQLITE_TRANSIENT);",
          "177: }",
          "180: static void sqlite3UuidStrFunc(",
          "181:   sqlite3_context *context,",
          "182:   int argc,",
          "183:   sqlite3_value **argv",
          "184: ){",
          "185:   unsigned char aBlob[16];",
          "186:   unsigned char zStr[37];",
          "187:   const unsigned char *pBlob;",
          "188:   (void)argc;",
          "189:   pBlob = sqlite3UuidInputToBlob(argv[0], aBlob);",
          "190:   if( pBlob==0 ) return;",
          "191:   sqlite3UuidBlobToStr(pBlob, zStr);",
          "192:   sqlite3_result_text(context, (char*)zStr, 36, SQLITE_TRANSIENT);",
          "193: }",
          "196: static void sqlite3UuidBlobFunc(",
          "197:   sqlite3_context *context,",
          "198:   int argc,",
          "199:   sqlite3_value **argv",
          "200: ){",
          "201:   unsigned char aBlob[16];",
          "202:   const unsigned char *pBlob;",
          "203:   (void)argc;",
          "204:   pBlob = sqlite3UuidInputToBlob(argv[0], aBlob);",
          "205:   if( pBlob==0 ) return;",
          "206:   sqlite3_result_blob(context, pBlob, 16, SQLITE_TRANSIENT);",
          "207: }",
          "209: #ifdef _WIN32",
          "210: __declspec(dllexport)",
          "211: #endif",
          "212: int sqlite3_uuid_init(",
          "213:   sqlite3 *db,",
          "214:   char **pzErrMsg,",
          "215:   const sqlite3_api_routines *pApi",
          "216: ){",
          "217:   int rc = SQLITE_OK;",
          "218:   SQLITE_EXTENSION_INIT2(pApi);",
          "220:   rc = sqlite3_create_function(db, \"uuid\", 0, SQLITE_UTF8, 0,",
          "221:                                sqlite3UuidFunc, 0, 0);",
          "222:   if( rc==SQLITE_OK ){",
          "223:     rc = sqlite3_create_function(db, \"uuid_str\", 1, SQLITE_UTF8, 0,",
          "224:                                  sqlite3UuidStrFunc, 0, 0);",
          "225:   }",
          "226:   if( rc==SQLITE_OK ){",
          "227:     rc = sqlite3_create_function(db, \"uuid_blob\", 1, SQLITE_UTF8, 0,",
          "228:                                  sqlite3UuidBlobFunc, 0, 0);",
          "229:   }",
          "230:   return rc;",
          "231: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b99d5701312f7472e6b606bd824f9273617e2655920485bf50aa96d408064721",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:       p = p->pLeft;",
          "176:       continue;",
          "177:     }",
          "178:     if( op==TK_COLLATE ){",
          "179:       pColl = sqlite3GetCollSeq(pParse, ENC(db), 0, p->u.zToken);",
          "180:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:     if( op==TK_VECTOR ){",
          "179:       p = p->x.pList->a[0].pExpr;",
          "180:       continue;",
          "181:     }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1197:       sqlite3CompleteInsertion(pParse, pTab, iDataCur, iIdxCur,",
          "1198:           regIns, aRegIdx, 0, appendFlag, bUseSeek",
          "1199:       );",
          "",
          "[Removed Lines]",
          "1194:       bUseSeek = (isReplace==0 || (pTrigger==0 &&",
          "1195:           ((db->flags & SQLITE_ForeignKeys)==0 || sqlite3FkReferences(pTab)==0)",
          "1196:       ));",
          "",
          "[Added Lines]",
          "1194:       bUseSeek = (isReplace==0 || !sqlite3VdbeHasSubProgram(v));",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:   A = sqlite3PExpr(pParse, TK_VECTOR, 0, 0);",
          "1076:   if( A ){",
          "1077:     A->x.pList = pList;",
          "1078:   }else{",
          "1079:     sqlite3ExprListDelete(pParse->db, pList);",
          "1080:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:     if( pList->nExpr ){",
          "1079:       A->flags |= pList->a[0].pExpr->flags & EP_Propagate;",
          "1080:     }",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:       break;",
          "662:     }",
          "663:     case TK_VECTOR: {",
          "665:       break;",
          "666:     }",
          "667:     case TK_SELECT_COLUMN: {",
          "",
          "[Removed Lines]",
          "664:       sqlite3TreeViewBareExprList(pView, pExpr->x.pList, \"VECTOR\");",
          "",
          "[Added Lines]",
          "664:       char *z = sqlite3_mprintf(\"VECTOR%s\",zFlgs);",
          "665:       sqlite3TreeViewBareExprList(pView, pExpr->x.pList, z);",
          "666:       sqlite3_free(z);",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "279: typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);",
          "280: RecordCompare sqlite3VdbeFindCompare(UnpackedRecord*);",
          "283: void sqlite3VdbeLinkSubProgram(Vdbe *, SubProgram *);",
          "286: int sqlite3NotPureFunc(sqlite3_context*);",
          "",
          "[Removed Lines]",
          "282: #ifndef SQLITE_OMIT_TRIGGER",
          "284: #endif",
          "",
          "[Added Lines]",
          "283: int sqlite3VdbeHasSubProgram(Vdbe*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1105:   pVdbe->pProgram = p;",
          "1106: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1111: int sqlite3VdbeHasSubProgram(Vdbe *pVdbe){",
          "1112:   return pVdbe->pProgram!=0;",
          "1113: }",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "595:   SELECT 2 FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE);",
          "596: } {1 2}",
          "598: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598: # 2019-10-23 Ticket 135c9da7513e5a97",
          "599: do_execsql_test 25.10 {",
          "600:   DROP TABLE t0;",
          "601:   CREATE TABLE t0(c0 UNIQUE);",
          "602:   INSERT INTO t0(c0) VALUES('a');",
          "603:   SELECT (t0.c0, 0) < ('B' COLLATE NOCASE, 0) FROM t0;",
          "604:   SELECT 2 FROM t0 WHERE (t0.c0, 0) < ('B' COLLATE NOCASE, 0);",
          "605: } {1 2}",
          "606: do_execsql_test 25.20 {",
          "607:   SELECT ('B' COLLATE NOCASE, 0)> (t0.c0, 0) FROM t0;",
          "608:   SELECT 2 FROM t0 WHERE ('B' COLLATE NOCASE, 0)> (t0.c0, 0);",
          "609: } {1 2}",
          "610: do_execsql_test 25.30 {",
          "611:   SELECT ('B', 0)> (t0.c0 COLLATE nocase, 0) FROM t0;",
          "612:   SELECT 2 FROM t0 WHERE ('B', 0)> (t0.c0 COLLATE nocase, 0);",
          "613: } {1 2}",
          "614: do_execsql_test 25.40 {",
          "615:   SELECT (t0.c0 COLLATE nocase, 0) < ('B', 0) FROM t0;",
          "616:   SELECT 2 FROM t0 WHERE (t0.c0 COLLATE nocase, 0) < ('B', 0);",
          "617: } {1 2}",
          "",
          "---------------"
        ],
        "test/trigger1.test||test/trigger1.test": [
          "File: test/trigger1.test -> test/trigger1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "782:   DROP TRIGGER r20_3;",
          "783: } {}",
          "785: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785: # 2019-10-24 ticket 50c09fc2cf0d91ce",
          "786: #",
          "787: db close",
          "788: sqlite3 db :memory:",
          "789: do_execsql_test trigger1-21.1 {",
          "790:   PRAGMA recursive_triggers = true;",
          "791:   CREATE TABLE t0(a, b, c UNIQUE);",
          "792:   CREATE UNIQUE INDEX i0 ON t0(b) WHERE a;",
          "793:   CREATE TRIGGER tr0 AFTER DELETE ON t0 BEGIN",
          "794:     DELETE FROM t0;",
          "795:   END;",
          "796:   INSERT INTO t0(a,b,c) VALUES(0,0,9),(1,1,1);",
          "797:   REPLACE INTO t0(a,b,c) VALUES(2,0,9);",
          "798:   SELECT * FROM t0;",
          "799: } {2 0 9}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f95909c7648942e7157722c33b5e5f9293bf3436",
      "candidate_info": {
        "commit_hash": "f95909c7648942e7157722c33b5e5f9293bf3436",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f95909c7648942e7157722c33b5e5f9293bf3436",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fixes for WITHOUT ROWID tables with VIRTUAL columns and an INTEGER PRIMARY KEY.\n\nFossilOrigin-Name: 86074da0fd2949e231898ef0bc672d90fd89cefa49fb0eb50ff398fbdd91d1ad",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85bc4524d76999080faa4474e8880d2b6a2ac3a7f6a76239af4de1a42f8138c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1226:     pCol->colFlags |= COLFLAG_HASTYPE;",
          "1227:   }",
          "1228:   p->nCol++;",
          "1229:   pParse->constraintName.n = 0;",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1229:   p->nNVCol++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1591:       goto generated_error;",
          "1592:     }",
          "1593:   }",
          "1594:   pCol->colFlags |= eType;",
          "1595:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1596:   assert( TF_HasStored==COLFLAG_STORED );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1595:   if( eType==COLFLAG_VIRTUAL ) pTab->nNVCol--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2156:   assert( !db->mallocFailed );",
          "2157:   p = pParse->pNewTable;",
          "2158:   if( p==0 ) return;",
          "2161:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "2162:     p->tabFlags |= TF_Shadow;",
          "",
          "[Removed Lines]",
          "2159:   p->nNVCol = p->nCol;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2197:       return;",
          "2198:     }",
          "2199:     p->tabFlags |= TF_WithoutRowid | TF_NoVisibleRowid;",
          "2200:   }",
          "2202: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2201:     convertToWithoutRowidTable(pParse, p);",
          "2203:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2212:     for(ii=0; ii<p->nCol; ii++){",
          "2213:       u32 colFlags = p->aCol[ii].colFlags;",
          "2214:       if( (colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "2219:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2220:                                     p->aCol[ii].pDflt, 0);",
          "2221:       }",
          "",
          "[Removed Lines]",
          "2215:         if( colFlags & COLFLAG_VIRTUAL ){",
          "2216:           p->nNVCol--;",
          "2217:           assert( p->nNVCol>=0 );",
          "2218:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2223:   }",
          "2224: #endif",
          "2235:   estimateTableWidth(p);",
          "2236:   for(pIdx=p->pIndex; pIdx; pIdx=pIdx->pNext){",
          "",
          "[Removed Lines]",
          "2227:   if( (tabOpts & TF_WithoutRowid)!=0 ){",
          "2228:     convertToWithoutRowidTable(pParse, p);",
          "2229:   }",
          "2231:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}