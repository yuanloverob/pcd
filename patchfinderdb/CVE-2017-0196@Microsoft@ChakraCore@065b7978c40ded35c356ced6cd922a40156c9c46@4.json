{
  "cve_id": "CVE-2017-0196",
  "cve_desc": "An information disclosure vulnerability in Microsoft scripting engine allows remote attackers to obtain sensitive information from process memory via a crafted web site, aka \"Microsoft Browser Information Disclosure Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
  "patch_info": {
    "commit_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/065b7978c40ded35c356ced6cd922a40156c9c46",
    "files": [
      "lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js"
    ],
    "message": "[CVE-2017-0196] Fixing an heap overread during slice.\n\nThe MissingItem check is happening on the array in a loop. It is possible that we get called into script and that mutates the array. So the Array's head is newly created with length.\nHowever the loop is still performing over the old length.\nFixed this by checking the length In IsMissingItem function.\nAdded a unittest.",
    "before_after_code_files": [
      "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
    ]
  },
  "patch_diff": {
    "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
      "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "478:     bool JavascriptArray::IsMissingItem(uint32 index)",
      "479:     {",
      "480:         bool isIntArray = false, isFloatArray = false;",
      "481:         this->GetArrayTypeAndConvert(&isIntArray, &isFloatArray);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:         if (this->length <= index)",
      "481:         {",
      "482:             return false;",
      "483:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5768:         if (!pArr->HasNoMissingValues())",
      "5769:         {",
      "5771:             {",
      "",
      "[Removed Lines]",
      "5770:             for (uint32 i = 0; i < newLen; i++)",
      "",
      "[Added Lines]",
      "5775:             for (uint32 i = 0; i < newLen && (i + start) < pArr->length; i++)",
      "",
      "---------------"
    ],
    "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js": [
      "File: test/Array/Array_TypeConfusion_bugs.js -> test/Array/Array_TypeConfusion_bugs.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "593:             assert.areEqual(101, arr.length);",
      "594:         }",
      "595:     },",
      "596: ];",
      "597: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "596:     {",
      "597:         name: \"Heap overread when splice mutates the array when executing slice\",",
      "598:         body: function ()",
      "599:         {",
      "600:             var getterCalled = false;",
      "601:             var a = [1, 2];",
      "602:             for (var i = 0; i < 100 * 1024; i++) {",
      "603:                 a.push(i);",
      "604:             }",
      "605:             delete a[0]; // Make a missing item",
      "606:             var protoObj = [11];",
      "607:             Object.defineProperty(protoObj, '0', {",
      "608:                 get : function () {",
      "609:                     getterCalled = true;",
      "610:                     Object.setPrototypeOf(a, Array.prototype);",
      "611:                     a.splice(0); // head seg is now length=0",
      "612:                     return 42;",
      "613:                 },",
      "614:                 configurable : true",
      "615:             });",
      "616:             Object.setPrototypeOf(a, protoObj);",
      "617:             var b = a.slice();",
      "618:             assert.isTrue(getterCalled);",
      "619:             assert.areEqual(0, a.length, \"Getter will splice the array to zero length\");",
      "620:             assert.areEqual(100 * 1024 + 2, b.length, \"Validating that slice will return the full array even though splice is deleting the whole array\");",
      "621:         }",
      "622:     },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dd61e049dee473351541d54261c32cb4c2c02263",
      "candidate_info": {
        "commit_hash": "dd61e049dee473351541d54261c32cb4c2c02263",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/dd61e049dee473351541d54261c32cb4c2c02263",
        "files": [
          "lib/Runtime/ByteCode/FuncInfo.cpp",
          "lib/Runtime/ByteCode/FuncInfo.h",
          "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.cpp"
        ],
        "message": "[CVE-2017-0150] DeferDeserialize is not working properly with asm.js ChangeHeap",
        "before_after_code_files": [
          "lib/Runtime/ByteCode/FuncInfo.cpp||lib/Runtime/ByteCode/FuncInfo.cpp",
          "lib/Runtime/ByteCode/FuncInfo.h||lib/Runtime/ByteCode/FuncInfo.h",
          "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp||lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/ByteCode/FuncInfo.cpp||lib/Runtime/ByteCode/FuncInfo.cpp": [
          "File: lib/Runtime/ByteCode/FuncInfo.cpp -> lib/Runtime/ByteCode/FuncInfo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     Js::ParseableFunctionInfo* byteCodeFunction)",
          "14:     : alloc(alloc),",
          "15:     varRegsCount(0),",
          "17:     inArgsCount(0),",
          "18:     innerScopeCount(0),",
          "19:     currentInnerScopeIndex((uint)-1),",
          "",
          "[Removed Lines]",
          "16:     constRegsCount(2),",
          "",
          "[Added Lines]",
          "16:     constRegsCount(InitialConstRegsCount),",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/FuncInfo.h||lib/Runtime/ByteCode/FuncInfo.h": [
          "File: lib/Runtime/ByteCode/FuncInfo.h -> lib/Runtime/ByteCode/FuncInfo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     uint        nextForInLoopLevel;",
          "84:     uint        maxForInLoopLevel;",
          "85: public:",
          "86:     ArenaAllocator *alloc;",
          "88:     Js::RegSlot varRegsCount; // number of registers used for non-constants",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     static const Js::RegSlot InitialConstRegsCount = 2; // constRegsCount is set to 2 because R0 is the return register, and R1 is the root object",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp||lib/Runtime/Language/AsmJsByteCodeGenerator.cpp": [
          "File: lib/Runtime/Language/AsmJsByteCodeGenerator.cpp -> lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3324:         byteCodeGen->Writer()->EndStatement(functionNode);",
          "3325:         byteCodeGen->Writer()->End();",
          "3327:         autoCleanup.Done();",
          "3328:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3327:         functionBody->CheckAndSetConstantCount(FuncInfo::InitialConstRegsCount);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp": [
          "File: lib/Runtime/Language/InterpreterStackFrame.cpp -> lib/Runtime/Language/InterpreterStackFrame.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2773:                 AsmJsScriptFunction* scriptFuncObj = (AsmJsScriptFunction*)ScriptFunction::OP_NewScFunc(pDisplay, functionInfo);",
          "2774:                 localModuleFunctions[modFunc.location] = scriptFuncObj;",
          "2775:                 if (i == 0 && info->GetUsesChangeHeap())",
          "2776:                 {",
          "2777:                     scriptFuncObj->GetDynamicType()->SetEntryPoint(AsmJsChangeHeapBuffer);",
          "2778:                 }",
          "2779:                 else",
          "2780:                 {",
          "2785:                     scriptFuncObj->GetDynamicType()->SetEntryPoint(AsmJsExternalEntryPoint);",
          "2786:                     scriptFuncObj->GetFunctionBody()->GetAsmJsFunctionInfo()->SetModuleFunctionBody(asmJsModuleFunctionBody);",
          "2787:                 }",
          "",
          "[Removed Lines]",
          "2781:                     if (scriptFuncObj->GetDynamicType()->GetEntryPoint() == DefaultDeferredDeserializeThunk)",
          "2782:                     {",
          "2783:                         JavascriptFunction::DeferredDeserialize(scriptFuncObj);",
          "2784:                     }",
          "",
          "[Added Lines]",
          "2776:                 if (scriptFuncObj->GetDynamicType()->GetEntryPoint() == DefaultDeferredDeserializeThunk)",
          "2777:                 {",
          "2778:                     JavascriptFunction::DeferredDeserialize(scriptFuncObj);",
          "2779:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80cfdbb9c697ea5b5691fc10e87bce6da8886dc0",
      "candidate_info": {
        "commit_hash": "80cfdbb9c697ea5b5691fc10e87bce6da8886dc0",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/80cfdbb9c697ea5b5691fc10e87bce6da8886dc0",
        "files": [
          "lib/Runtime/Base/FunctionBody.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/Library/GlobalObject.cpp",
          "test/AsmJs/nested.baseline",
          "test/AsmJs/nested.js",
          "test/AsmJs/qmarkbug.baseline",
          "test/AsmJs/qmarkbug.js",
          "test/AsmJs/rlexe.xml",
          "test/AsmJs/shadowingBug.baseline",
          "test/AsmJs/shadowingBug.js"
        ],
        "message": "[CVE-2017-0067] prevent parser from getting into inconsistent state when asm.js parse fails",
        "before_after_code_files": [
          "lib/Runtime/Base/FunctionBody.cpp||lib/Runtime/Base/FunctionBody.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/Library/GlobalObject.cpp||lib/Runtime/Library/GlobalObject.cpp",
          "test/AsmJs/nested.baseline||test/AsmJs/nested.baseline",
          "test/AsmJs/nested.js||test/AsmJs/nested.js",
          "test/AsmJs/qmarkbug.baseline||test/AsmJs/qmarkbug.baseline",
          "test/AsmJs/qmarkbug.js||test/AsmJs/qmarkbug.js",
          "test/AsmJs/shadowingBug.baseline||test/AsmJs/shadowingBug.baseline",
          "test/AsmJs/shadowingBug.js||test/AsmJs/shadowingBug.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Base/FunctionBody.cpp||lib/Runtime/Base/FunctionBody.cpp": [
          "File: lib/Runtime/Base/FunctionBody.cpp -> lib/Runtime/Base/FunctionBody.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2134:             return GetFunctionBody();",
          "2135:         }",
          "2137:         BOOL fParsed = FALSE;",
          "2138:         FunctionBody* returnFunctionBody = nullptr;",
          "2139:         ENTER_PINNED_SCOPE(Js::PropertyRecordList, propertyRecordList);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2137:         bool asmjsParseFailed = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2143:         bool isDebugOrAsmJsReparse = false;",
          "2144:         FunctionBody* funcBody = nullptr;",
          "2154:         {",
          "2155:             this->GetUtf8SourceInfo()->StopTrackingDeferredFunction(this->GetLocalFunctionId());",
          "2156:             funcBody = FunctionBody::NewFromParseableFunctionInfo(this, propertyRecordList);",
          "2175:                 {",
          "2180:                     {",
          "2194:                         {",
          "2197:                             {",
          "2199:                             }",
          "2200:                         }",
          "2205:             }",
          "2230:                 {",
          "2235:             }",
          "2243: #if ENABLE_PROFILE_INFO",
          "2245: #endif",
          "2267:                 {",
          "2300:                     {",
          "2303:                     }",
          "2305:                     {",
          "2323:                         {",
          "2325:                         }",
          "2326:                         else",
          "2327:                         {",
          "2330:                         }",
          "2331:                     }",
          "2332:                 }",
          "2342:             {",
          "2344:             }",
          "2346:             {",
          "2356:             }",
          "2357:         }",
          "2365:         if (fParsed == TRUE)",
          "2366:         {",
          "",
          "[Removed Lines]",
          "2146:         AutoRestoreFunctionInfo autoRestoreFunctionInfo(this, DefaultEntryThunk);",
          "2153:         if (!this->m_hasBeenParsed)",
          "2157:             autoRestoreFunctionInfo.funcBody = funcBody;",
          "2159:             PERF_COUNTER_DEC(Code, DeferredFunction);",
          "2161:             if (!this->GetSourceContextInfo()->IsDynamic())",
          "2162:             {",
          "2163:                 PHASE_PRINT_TESTTRACE1(Js::DeferParsePhase, _u(\"TestTrace: Deferred function parsed - ID: %d; Display Name: %s; Length: %d; Nested Function Count: %d; Utf8SourceInfo: %d; Source Length: %d; Is Top Level: %s; Source Url: %s\\n\"), m_functionNumber, m_displayName, this->m_cchLength, this->GetNestedCount(), this->m_utf8SourceInfo->GetSourceInfoId(), this->m_utf8SourceInfo->GetCchLength(), this->GetIsTopLevel() ? _u(\"True\") : _u(\"False\"), this->GetSourceContextInfo()->url);",
          "2164:             }",
          "2165:             else",
          "2166:             {",
          "2167:                 PHASE_PRINT_TESTTRACE1(Js::DeferParsePhase, _u(\"TestTrace: Deferred function parsed - ID: %d; Display Name: %s; Length: %d; Nested Function Count: %d; Utf8SourceInfo: %d; Source Length: %d\\n; Is Top Level: %s;\"), m_functionNumber, m_displayName, this->m_cchLength, this->GetNestedCount(),  this->m_utf8SourceInfo->GetSourceInfoId(), this->m_utf8SourceInfo->GetCchLength(), this->GetIsTopLevel() ? _u(\"True\") : _u(\"False\"));",
          "2168:             }",
          "2170:             if (!this->GetIsTopLevel() &&",
          "2171:                 !this->GetSourceContextInfo()->IsDynamic() &&",
          "2172:                 this->m_scriptContext->DoUndeferGlobalFunctions())",
          "2173:             {",
          "2174:                 this->GetUtf8SourceInfo()->UndeferGlobalFunctions([this](JsUtil::SimpleDictionaryEntry<Js::LocalFunctionId, Js::ParseableFunctionInfo*> func)",
          "2176:                     Js::ParseableFunctionInfo *nextFunc = func.Value();",
          "2177:                     JavascriptExceptionObject* pExceptionObject = nullptr;",
          "2179:                     if (nextFunc != nullptr && this != nextFunc)",
          "2181:                         try",
          "2182:                         {",
          "2183:                             nextFunc->Parse();",
          "2184:                         }",
          "2185:                         catch (OutOfMemoryException) {}",
          "2186:                         catch (StackOverflowException) {}",
          "2187:                         catch (const Js::JavascriptException& err)",
          "2188:                         {",
          "2189:                             pExceptionObject = err.GetAndClear();",
          "2190:                         }",
          "2193:                         if(pExceptionObject)",
          "2195:                             if(pExceptionObject != ThreadContext::GetContextForCurrentThread()->GetPendingOOMErrorObject() &&",
          "2196:                                 pExceptionObject != ThreadContext::GetContextForCurrentThread()->GetPendingSOErrorObject())",
          "2198:                                 JavascriptExceptionOperators::DoThrow(pExceptionObject, /*scriptContext*/nullptr);",
          "2201:                     }",
          "2203:                     return true;",
          "2204:                 });",
          "2206:         }",
          "2207:         else",
          "2208:         {",
          "2209:             bool isDebugReparse = m_scriptContext->IsScriptContextInSourceRundownOrDebugMode() && !this->GetUtf8SourceInfo()->GetIsLibraryCode();",
          "2210:             bool isAsmJsReparse = m_isAsmjsMode && !isDebugReparse;",
          "2212:             isDebugOrAsmJsReparse = isAsmJsReparse || isDebugReparse;",
          "2214:             funcBody = this->GetFunctionBody();",
          "2216:             if (isDebugOrAsmJsReparse)",
          "2217:             {",
          "2218:     #if ENABLE_DEBUG_CONFIG_OPTIONS",
          "2219:                 char16 debugStringBuffer[MAX_FUNCTION_BODY_DEBUG_STRING_SIZE];",
          "2220:     #endif",
          "2221:     #if DBG",
          "2222:                 Assert(",
          "2223:                     funcBody->IsReparsed()",
          "2224:                     || m_scriptContext->IsScriptContextInSourceRundownOrDebugMode()",
          "2225:                     || m_isAsmjsMode);",
          "2226:     #endif",
          "2227:                 OUTPUT_TRACE(Js::DebuggerPhase, _u(\"Full nested reparse of function: %s (%s)\\n\"), funcBody->GetDisplayName(), funcBody->GetDebugNumberSet(debugStringBuffer));",
          "2229:                 if (funcBody->GetByteCode())",
          "2232:                     funcBody->CleanupToReparse();",
          "2233:                 }",
          "2236:         }",
          "2241:         if (funcBody->GetByteCode() == nullptr)",
          "2242:         {",
          "2244:             Assert(!funcBody->HasExecutionDynamicProfileInfo());",
          "2247:             AssertMsg(isDebugOrAsmJsReparse || funcBody->GetGrfscr() & fscrGlobalCode || CONFIG_FLAG(DeferNested), \"Deferred parsing of non-global procedure?\");",
          "2249:             HRESULT hr = NO_ERROR;",
          "2250:             HRESULT hrParser = NO_ERROR;",
          "2251:             HRESULT hrParseCodeGen = NO_ERROR;",
          "2253:             BEGIN_LEAVE_SCRIPT_INTERNAL(m_scriptContext)",
          "2254:             {",
          "2255:                 bool isCesu8 = m_scriptContext->GetSource(funcBody->GetSourceIndex())->IsCesu8();",
          "2257:                 size_t offset = this->StartOffset();",
          "2258:                 charcount_t charOffset = this->StartInDocument();",
          "2259:                 size_t length = this->LengthInBytes();",
          "2261:                 LPCUTF8 pszStart = this->GetStartOfDocument();",
          "2263:                 uint32 grfscr = funcBody->GetGrfscr() | fscrDeferredFnc;",
          "2266:                 if (!funcBody->GetIsGlobalFunc())",
          "2268:                     grfscr &= ~fscrGlobalCode;",
          "2269:                 }",
          "2271:                 if (!funcBody->GetIsDeclaration() && !funcBody->GetIsGlobalFunc()) // No refresh may reparse global function (e.g. eval code)",
          "2272:                 {",
          "2275:                     grfscr |= fscrDeferredFncExpression;",
          "2276:                 }",
          "2277:                 if (!CONFIG_FLAG(DeferNested) || isDebugOrAsmJsReparse)",
          "2278:                 {",
          "2279:                     grfscr &= ~fscrDeferFncParse; // Disable deferred parsing if not DeferNested, or doing a debug/asm.js re-parse",
          "2280:                 }",
          "2282:                 if (isDebugOrAsmJsReparse)",
          "2283:                 {",
          "2284:                     grfscr |= fscrNoAsmJs; // Disable asm.js when debugging or if linking failed",
          "2285:                 }",
          "2287:                 BEGIN_TRANSLATE_EXCEPTION_TO_HRESULT",
          "2288:                 {",
          "2289:                     CompileScriptException se;",
          "2290:                     Parser ps(m_scriptContext, funcBody->GetIsStrictMode() ? TRUE : FALSE);",
          "2291:                     ParseNodePtr parseTree;",
          "2293:                     uint nextFunctionId = funcBody->GetLocalFunctionId();",
          "2294:                     hrParser = ps.ParseSourceWithOffset(&parseTree, pszStart, offset, length, charOffset, isCesu8, grfscr, &se,",
          "2295:                         &nextFunctionId, funcBody->GetRelativeLineNumber(), funcBody->GetSourceContextInfo(),",
          "2296:                         funcBody);",
          "2299:                     if (FAILED(hrParser))",
          "2301:                         hrParseCodeGen = MapDeferredReparseError(hrParser, se); // Map certain errors like OOM/SOE",
          "2302:                         AssertMsg(FAILED(hrParseCodeGen) && SUCCEEDED(hrParser), \"Syntax errors should never be detected on deferred re-parse\");",
          "2304:                     else",
          "2306:                         TRACE_BYTECODE(_u(\"\\nDeferred parse %s\\n\"), funcBody->GetDisplayName());",
          "2307:                         Js::AutoDynamicCodeReference dynamicFunctionReference(m_scriptContext);",
          "2309:                         bool forceNoNative = isDebugOrAsmJsReparse ? this->GetScriptContext()->IsInterpreted() : false;",
          "2310:                         hrParseCodeGen = GenerateByteCode(parseTree, grfscr, m_scriptContext,",
          "2311:                             funcBody->GetParseableFunctionInfoRef(), funcBody->GetSourceIndex(),",
          "2312:                             forceNoNative, &ps, &se, funcBody->GetScopeInfo(), functionRef);",
          "2314:                         if (se.ei.scode == JSERR_AsmJsCompileError)",
          "2315:                         {",
          "2317:                             m_grfscr |= fscrNoAsmJs;",
          "2318:                             se.Clear();",
          "2319:                             return Parse(functionRef, isByteCodeDeserialization);",
          "2320:                         }",
          "2322:                         if (SUCCEEDED(hrParseCodeGen))",
          "2324:                             fParsed = TRUE;",
          "2328:                             Assert(hrParseCodeGen == SCRIPT_E_RECORDED);",
          "2329:                             hrParseCodeGen = se.ei.scode;",
          "2333:                 END_TRANSLATE_EXCEPTION_TO_HRESULT(hr);",
          "2334:             }",
          "2335:             END_LEAVE_SCRIPT_INTERNAL(m_scriptContext);",
          "2337:             THROW_KNOWN_HRESULT_EXCEPTIONS(hr, m_scriptContext);",
          "2339:             Assert(hr == NO_ERROR);",
          "2341:             if (!SUCCEEDED(hrParser))",
          "2343:                 JavascriptError::ThrowError(m_scriptContext, VBSERR_InternalError);",
          "2345:             else if (!SUCCEEDED(hrParseCodeGen))",
          "2351:                 if (hrParseCodeGen == VBSERR_OutOfStack)",
          "2352:                 {",
          "2353:                     JavascriptError::ThrowStackOverflowError(m_scriptContext);",
          "2354:                 }",
          "2355:                 JavascriptError::MapAndThrowError(m_scriptContext, hrParseCodeGen);",
          "2358:         else",
          "2359:         {",
          "2360:             fParsed = FALSE;",
          "2361:         }",
          "2363:         autoRestoreFunctionInfo.Clear();",
          "",
          "[Added Lines]",
          "2148:             AutoRestoreFunctionInfo autoRestoreFunctionInfo(this, DefaultEntryThunk);",
          "2156:             if (!this->m_hasBeenParsed)",
          "2157:             {",
          "2160:                 autoRestoreFunctionInfo.funcBody = funcBody;",
          "2162:                 PERF_COUNTER_DEC(Code, DeferredFunction);",
          "2164:                 if (!this->GetSourceContextInfo()->IsDynamic())",
          "2166:                     PHASE_PRINT_TESTTRACE1(Js::DeferParsePhase, _u(\"TestTrace: Deferred function parsed - ID: %d; Display Name: %s; Length: %d; Nested Function Count: %d; Utf8SourceInfo: %d; Source Length: %d; Is Top Level: %s; Source Url: %s\\n\"), m_functionNumber, m_displayName, this->m_cchLength, this->GetNestedCount(), this->m_utf8SourceInfo->GetSourceInfoId(), this->m_utf8SourceInfo->GetCchLength(), this->GetIsTopLevel() ? _u(\"True\") : _u(\"False\"), this->GetSourceContextInfo()->url);",
          "2167:                 }",
          "2168:                 else",
          "2169:                 {",
          "2170:                     PHASE_PRINT_TESTTRACE1(Js::DeferParsePhase, _u(\"TestTrace: Deferred function parsed - ID: %d; Display Name: %s; Length: %d; Nested Function Count: %d; Utf8SourceInfo: %d; Source Length: %d\\n; Is Top Level: %s;\"), m_functionNumber, m_displayName, this->m_cchLength, this->GetNestedCount(), this->m_utf8SourceInfo->GetSourceInfoId(), this->m_utf8SourceInfo->GetCchLength(), this->GetIsTopLevel() ? _u(\"True\") : _u(\"False\"));",
          "2171:                 }",
          "2173:                 if (!this->GetIsTopLevel() &&",
          "2174:                     !this->GetSourceContextInfo()->IsDynamic() &&",
          "2175:                     this->m_scriptContext->DoUndeferGlobalFunctions())",
          "2176:                 {",
          "2177:                     this->GetUtf8SourceInfo()->UndeferGlobalFunctions([this](JsUtil::SimpleDictionaryEntry<Js::LocalFunctionId, Js::ParseableFunctionInfo*> func)",
          "2179:                         Js::ParseableFunctionInfo *nextFunc = func.Value();",
          "2180:                         JavascriptExceptionObject* pExceptionObject = nullptr;",
          "2182:                         if (nextFunc != nullptr && this != nextFunc)",
          "2184:                             try",
          "2185:                             {",
          "2186:                                 nextFunc->Parse();",
          "2187:                             }",
          "2188:                             catch (OutOfMemoryException) {}",
          "2189:                             catch (StackOverflowException) {}",
          "2190:                             catch (const Js::JavascriptException& err)",
          "2192:                                 pExceptionObject = err.GetAndClear();",
          "2193:                             }",
          "2196:                             if (pExceptionObject)",
          "2197:                             {",
          "2198:                                 if (pExceptionObject != ThreadContext::GetContextForCurrentThread()->GetPendingOOMErrorObject() &&",
          "2199:                                     pExceptionObject != ThreadContext::GetContextForCurrentThread()->GetPendingSOErrorObject())",
          "2200:                                 {",
          "2201:                                     JavascriptExceptionOperators::DoThrow(pExceptionObject, /*scriptContext*/nullptr);",
          "2202:                                 }",
          "2206:                         return true;",
          "2207:                     });",
          "2208:                 }",
          "2210:             else",
          "2211:             {",
          "2212:                 bool isDebugReparse = m_scriptContext->IsScriptContextInSourceRundownOrDebugMode() && !this->GetUtf8SourceInfo()->GetIsLibraryCode();",
          "2213:                 bool isAsmJsReparse = m_isAsmjsMode && !isDebugReparse;",
          "2215:                 isDebugOrAsmJsReparse = isAsmJsReparse || isDebugReparse;",
          "2217:                 funcBody = this->GetFunctionBody();",
          "2219:                 if (isDebugOrAsmJsReparse)",
          "2221: #if ENABLE_DEBUG_CONFIG_OPTIONS",
          "2222:                     char16 debugStringBuffer[MAX_FUNCTION_BODY_DEBUG_STRING_SIZE];",
          "2223: #endif",
          "2224: #if DBG",
          "2225:                     Assert(",
          "2226:                         funcBody->IsReparsed()",
          "2227:                         || m_scriptContext->IsScriptContextInSourceRundownOrDebugMode()",
          "2228:                         || m_isAsmjsMode);",
          "2229: #endif",
          "2230:                     OUTPUT_TRACE(Js::DebuggerPhase, _u(\"Full nested reparse of function: %s (%s)\\n\"), funcBody->GetDisplayName(), funcBody->GetDebugNumberSet(debugStringBuffer));",
          "2232:                     if (funcBody->GetByteCode())",
          "2233:                     {",
          "2235:                         funcBody->CleanupToReparse();",
          "2236:                     }",
          "2238:                 }",
          "2244:             if (funcBody->GetByteCode() == nullptr)",
          "2245:             {",
          "2247:                 Assert(!funcBody->HasExecutionDynamicProfileInfo());",
          "2250:                 AssertMsg(isDebugOrAsmJsReparse || funcBody->GetGrfscr() & fscrGlobalCode || CONFIG_FLAG(DeferNested), \"Deferred parsing of non-global procedure?\");",
          "2252:                 HRESULT hr = NO_ERROR;",
          "2253:                 HRESULT hrParser = NO_ERROR;",
          "2254:                 HRESULT hrParseCodeGen = NO_ERROR;",
          "2256:                 BEGIN_LEAVE_SCRIPT_INTERNAL(m_scriptContext)",
          "2258:                     bool isCesu8 = m_scriptContext->GetSource(funcBody->GetSourceIndex())->IsCesu8();",
          "2260:                     size_t offset = this->StartOffset();",
          "2261:                     charcount_t charOffset = this->StartInDocument();",
          "2262:                     size_t length = this->LengthInBytes();",
          "2264:                     LPCUTF8 pszStart = this->GetStartOfDocument();",
          "2266:                     uint32 grfscr = funcBody->GetGrfscr() | fscrDeferredFnc;",
          "2269:                     if (!funcBody->GetIsGlobalFunc())",
          "2270:                     {",
          "2271:                         grfscr &= ~fscrGlobalCode;",
          "2272:                     }",
          "2274:                     if (!funcBody->GetIsDeclaration() && !funcBody->GetIsGlobalFunc()) // No refresh may reparse global function (e.g. eval code)",
          "2278:                         grfscr |= fscrDeferredFncExpression;",
          "2280:                     if (!CONFIG_FLAG(DeferNested) || isDebugOrAsmJsReparse)",
          "2282:                         grfscr &= ~fscrDeferFncParse; // Disable deferred parsing if not DeferNested, or doing a debug/asm.js re-parse",
          "2283:                     }",
          "2285:                     if (isDebugOrAsmJsReparse)",
          "2286:                     {",
          "2287:                         grfscr |= fscrNoAsmJs; // Disable asm.js when debugging or if linking failed",
          "2288:                     }",
          "2290:                     BEGIN_TRANSLATE_EXCEPTION_TO_HRESULT",
          "2291:                     {",
          "2292:                         CompileScriptException se;",
          "2293:                         Parser ps(m_scriptContext, funcBody->GetIsStrictMode() ? TRUE : FALSE);",
          "2294:                         ParseNodePtr parseTree;",
          "2296:                         uint nextFunctionId = funcBody->GetLocalFunctionId();",
          "2297:                         hrParser = ps.ParseSourceWithOffset(&parseTree, pszStart, offset, length, charOffset, isCesu8, grfscr, &se,",
          "2298:                             &nextFunctionId, funcBody->GetRelativeLineNumber(), funcBody->GetSourceContextInfo(),",
          "2299:                             funcBody);",
          "2302:                         if (FAILED(hrParser))",
          "2304:                             hrParseCodeGen = MapDeferredReparseError(hrParser, se); // Map certain errors like OOM/SOE",
          "2305:                             AssertMsg(FAILED(hrParseCodeGen) && SUCCEEDED(hrParser), \"Syntax errors should never be detected on deferred re-parse\");",
          "2309:                             TRACE_BYTECODE(_u(\"\\nDeferred parse %s\\n\"), funcBody->GetDisplayName());",
          "2310:                             Js::AutoDynamicCodeReference dynamicFunctionReference(m_scriptContext);",
          "2312:                             bool forceNoNative = isDebugOrAsmJsReparse ? this->GetScriptContext()->IsInterpreted() : false;",
          "2313:                             hrParseCodeGen = GenerateByteCode(parseTree, grfscr, m_scriptContext,",
          "2314:                                 funcBody->GetParseableFunctionInfoRef(), funcBody->GetSourceIndex(),",
          "2315:                                 forceNoNative, &ps, &se, funcBody->GetScopeInfo(), functionRef);",
          "2317:                             if (SUCCEEDED(hrParseCodeGen))",
          "2318:                             {",
          "2319:                                 fParsed = TRUE;",
          "2320:                             }",
          "2321:                             else",
          "2322:                             {",
          "2323:                                 Assert(hrParseCodeGen == SCRIPT_E_RECORDED);",
          "2324:                                 hrParseCodeGen = se.ei.scode;",
          "2325:                             }",
          "2328:                     END_TRANSLATE_EXCEPTION_TO_HRESULT(hr);",
          "2330:                 END_LEAVE_SCRIPT_INTERNAL(m_scriptContext);",
          "2332:                 THROW_KNOWN_HRESULT_EXCEPTIONS(hr, m_scriptContext);",
          "2334:                 Assert(hr == NO_ERROR);",
          "2336:                 if (!SUCCEEDED(hrParser))",
          "2337:                 {",
          "2338:                     JavascriptError::ThrowError(m_scriptContext, VBSERR_InternalError);",
          "2339:                 }",
          "2340:                 else if (!SUCCEEDED(hrParseCodeGen))",
          "2341:                 {",
          "2346:                     if (hrParseCodeGen == VBSERR_OutOfStack)",
          "2347:                     {",
          "2348:                         JavascriptError::ThrowStackOverflowError(m_scriptContext);",
          "2349:                     }",
          "2350:                     else if (hrParseCodeGen == JSERR_AsmJsCompileError)",
          "2351:                     {",
          "2352:                         asmjsParseFailed = true;",
          "2353:                     }",
          "2354:                     else",
          "2355:                     {",
          "2356:                         JavascriptError::MapAndThrowError(m_scriptContext, hrParseCodeGen);",
          "2357:                     }",
          "2358:                 }",
          "2359:             }",
          "2360:             else",
          "2362:                 fParsed = FALSE;",
          "2365:             if (!asmjsParseFailed)",
          "2367:                 autoRestoreFunctionInfo.Clear();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2370:             this->m_hasBeenParsed = true;",
          "2371:             returnFunctionBody = funcBody;",
          "2372:         }",
          "2374:         {",
          "2375:             returnFunctionBody = this->GetFunctionBody();",
          "2376:         }",
          "2378:         LEAVE_PINNED_SCOPE();",
          "2380:         return returnFunctionBody;",
          "2381:     }",
          "",
          "[Removed Lines]",
          "2373:         else",
          "",
          "[Added Lines]",
          "2379:         else if(!asmjsParseFailed)",
          "2386:         if (asmjsParseFailed)",
          "2387:         {",
          "2389:             m_grfscr |= fscrNoAsmJs;",
          "2390:             return Parse(functionRef, isByteCodeDeserialization);",
          "2391:         }",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3633:                 {",
          "3634:                     exit(JSERR_AsmJsCompileError);",
          "3635:                 }",
          "3637:                 {",
          "3639:                     throw Js::AsmJsParseException();",
          "3640:                 }",
          "3641:             }",
          "",
          "[Removed Lines]",
          "3636:                 else if (!(flags & fscrDeferFncParse))",
          "",
          "[Added Lines]",
          "3636:                 else",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/GlobalObject.cpp||lib/Runtime/Library/GlobalObject.cpp": [
          "File: lib/Runtime/Library/GlobalObject.cpp -> lib/Runtime/Library/GlobalObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "944:             {",
          "945:                 JavascriptError::ThrowStackOverflowError(scriptContext);",
          "946:             }",
          "952:             {",
          "954:                 grfscr |= fscrNoAsmJs;",
          "956:                 return DefaultEvalHelper(scriptContext, source, sourceLength, moduleID, grfscr, pszTitle, registerDocument, isIndirect, strictMode);",
          "957:             }",
          "959:             Assert(funcBody != nullptr);",
          "960:             funcBody->SetDisplayName(pszTitle);",
          "",
          "[Removed Lines]",
          "947:             JavascriptError::MapAndThrowError(scriptContext, hrCodeGen);",
          "948:         }",
          "949:         else",
          "950:         {",
          "951:             if (se.ei.scode == JSERR_AsmJsCompileError)",
          "955:                 se.Clear();",
          "",
          "[Added Lines]",
          "947:             else if (hrCodeGen == JSERR_AsmJsCompileError)",
          "953:             JavascriptError::MapAndThrowError(scriptContext, hrCodeGen);",
          "954:         }",
          "955:         else",
          "956:         {",
          "",
          "---------------"
        ],
        "test/AsmJs/nested.baseline||test/AsmJs/nested.baseline": [
          "File: test/AsmJs/nested.baseline -> test/AsmJs/nested.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: closure functions are not allowed",
          "2: Asm.js compilation failed.",
          "",
          "---------------"
        ],
        "test/AsmJs/nested.js||test/AsmJs/nested.js": [
          "File: test/AsmJs/nested.js -> test/AsmJs/nested.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: function AsmModule() {",
          "7:     \"use asm\";",
          "8:     function f() {",
          "9:         function g() { }",
          "10:     }",
          "11: }",
          "12: AsmModule();",
          "",
          "---------------"
        ],
        "test/AsmJs/qmarkbug.baseline||test/AsmJs/qmarkbug.baseline": [
          "File: test/AsmJs/qmarkbug.baseline -> test/AsmJs/qmarkbug.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:  Asm.js Compilation Error function : None::f",
          "4:  Conditional expressions must be of type int, double, or float",
          "6: Asm.js compilation failed.",
          "9:  Asm.js Compilation Error function : None::f",
          "10:  Conditional expressions must be of type int, double, or float",
          "",
          "[Removed Lines]",
          "2: qmarkbug.js(9, 3)",
          "8: qmarkbug.js(25, 3)",
          "",
          "[Added Lines]",
          "2: qmarkbug.js(6, 5)",
          "8: qmarkbug.js(6, 5)",
          "",
          "---------------"
        ],
        "test/AsmJs/qmarkbug.js||test/AsmJs/qmarkbug.js": [
          "File: test/AsmJs/qmarkbug.js -> test/AsmJs/qmarkbug.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "6: var asmModule =",
          "7: (function(stdlib, foreign, heap) { 'use asm';   var Uint8ArrayView = new stdlib.Uint8Array(heap);",
          "8:   var Int16ArrayView = new stdlib.Int16Array(heap);",
          "9:   function f(d0, i1)",
          "10:   {",
          "11:     d0 = +d0;",
          "12:     i1 = i1|0;",
          "13:     var i4 = 0;",
          "14:     i4 = ((0) ? 0 : ((Uint8ArrayView[0])));",
          "15:     return +((-7.555786372591432e+22));",
          "16:   }",
          "17:   return f; })",
          "19:   var asmHeap = new ArrayBuffer(1<<24);",
          "20:   var asmFun = asmModule(this, {}, asmHeap);",
          "21:   asmFun();",
          "22:   var asmModule =",
          "23: (function(stdlib, foreign, heap) { 'use asm';   var Uint8ArrayView = new stdlib.Uint8Array(heap);",
          "24:   var Int16ArrayView = new stdlib.Int16Array(heap);",
          "25:   function f(d0, i1)",
          "26:   {",
          "27:     d0 = +d0;",
          "28:     i1 = i1|0;",
          "29:     var i4 = 0;",
          "30:     i4 = ((0) ? ((Uint8ArrayView[0])): 0 );",
          "31:     return +((-7.555786372591432e+22));",
          "32:   }",
          "33:   return f; })",
          "35:   var asmFun = asmModule(this, {}, asmHeap);",
          "36:   asmFun();",
          "",
          "[Added Lines]",
          "6: eval(`",
          "7: (function(stdlib, foreign, heap) {",
          "8:     'use asm';",
          "9:     var Uint8ArrayView = new stdlib.Uint8Array(heap);",
          "10:     var Int16ArrayView = new stdlib.Int16Array(heap);",
          "11:     function f(d0, i1)",
          "12:     {",
          "13:         d0 = +d0;",
          "14:         i1 = i1|0;",
          "15:         var i4 = 0;",
          "16:         i4 = ((0) ? 0 : ((Uint8ArrayView[0])));",
          "17:         return +((-7.555786372591432e+22));",
          "18:     }",
          "19:     return f;",
          "20: })(this, {}, new ArrayBuffer(1<<24));",
          "21: `);",
          "23: eval(`",
          "24: (function(stdlib, foreign, heap) {",
          "25:     'use asm';",
          "26:     var Uint8ArrayView = new stdlib.Uint8Array(heap);",
          "27:     var Int16ArrayView = new stdlib.Int16Array(heap);",
          "28:     function f(d0, i1)",
          "29:     {",
          "30:         d0 = +d0;",
          "31:         i1 = i1|0;",
          "32:         var i4 = 0;",
          "33:         i4 = ((0) ? ((Uint8ArrayView[0])): 0 );",
          "34:         return +((-7.555786372591432e+22));",
          "35:     }",
          "36:     return f;",
          "37: })(this, {}, new ArrayBuffer(1<<24));",
          "38: `);",
          "",
          "---------------"
        ],
        "test/AsmJs/shadowingBug.baseline||test/AsmJs/shadowingBug.baseline": [
          "File: test/AsmJs/shadowingBug.baseline -> test/AsmJs/shadowingBug.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:  Asm.js Compilation Error function : None::f1",
          "4:  Invalid identifier f64",
          "6: Asm.js compilation failed.",
          "9:  Asm.js Compilation Error function : None::f1",
          "10:  Invalid identifier f64",
          "12: Asm.js compilation failed.",
          "13: Var declaration with non-constant",
          "14: Asm.js compilation failed.",
          "15: 0",
          "18: 0",
          "",
          "[Removed Lines]",
          "2: shadowingBug.js(7, 97)",
          "8: shadowingBug.js(8, 97)",
          "16: NaN",
          "17: 0",
          "",
          "[Added Lines]",
          "2: shadowingBug.js(1, 97)",
          "7: 0",
          "9: shadowingBug.js(1, 97)",
          "14: NaN",
          "",
          "---------------"
        ],
        "test/AsmJs/shadowingBug.js||test/AsmJs/shadowingBug.js": [
          "File: test/AsmJs/shadowingBug.js -> test/AsmJs/shadowingBug.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: var buffer = new ArrayBuffer(1<<20);",
          "11: var f64Arr = new Float64Array(buffer);",
          "12: print(f64Arr[0]);",
          "",
          "[Removed Lines]",
          "7: print((function (stdlib,foreign,buffer) { \"use asm\"; var f64 = new stdlib.Float64Array(buffer); function f1(){ var f64 = 1.; f64[0] = 0.0;return +0.0;} return f1;})(this,{},buffer)());",
          "8: print((function (stdlib,foreign,buffer) { \"use asm\"; var f64 = new stdlib.Float64Array(buffer); function f1(){ var f64 = 1.; return +f64[0];} return f1;})(this,{},buffer)());",
          "9: print((function (stdlib,foreign,buffer) { \"use asm\"; const a = 10; function f1(){ var a =0; var b = a; return b|0;} return f1;})(this,{},buffer)());",
          "",
          "[Added Lines]",
          "7: eval('print((function (stdlib,foreign,buffer) { \"use asm\"; var f64 = new stdlib.Float64Array(buffer); function f1(){ var f64 = 1.; f64[0] = 0.0;return +0.0;} return f1;})(this,{},buffer)())');",
          "8: eval('print((function (stdlib,foreign,buffer) { \"use asm\"; var f64 = new stdlib.Float64Array(buffer); function f1(){ var f64 = 1.; return +f64[0];} return f1;})(this,{},buffer)())');",
          "9: eval('print((function (stdlib,foreign,buffer) { \"use asm\"; const a = 10; function f1(){ var a =0; var b = a; return b|0;} return f1;})(this,{},buffer)())');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c91129d377de99dfc3de105f7c96d260a2a44fef",
      "candidate_info": {
        "commit_hash": "c91129d377de99dfc3de105f7c96d260a2a44fef",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/c91129d377de99dfc3de105f7c96d260a2a44fef",
        "files": [
          "lib/Common/DataStructures/DoublyLinkedListElement.inl",
          "lib/Common/DataStructures/InternalString.cpp",
          "lib/Common/DataStructures/InternalString.h",
          "lib/Common/Memory/RecyclerPointers.h",
          "lib/Common/Memory/WriteBarrierMacros.h",
          "lib/Parser/RegexRuntime.cpp",
          "lib/Parser/TextbookBoyerMoore.h",
          "lib/Runtime/Base/FunctionInfo.cpp",
          "lib/Runtime/Base/FunctionInfo.h",
          "lib/Runtime/Base/SourceHolder.cpp",
          "lib/Runtime/Base/SourceHolder.h",
          "lib/Runtime/Language/FunctionCodeGenRuntimeData.cpp",
          "lib/Runtime/Language/ModuleNamespace.cpp",
          "lib/Runtime/Library/BoundFunction.cpp",
          "lib/Runtime/Library/ConcatString.cpp",
          "lib/Runtime/Library/EngineInterfaceObject.cpp",
          "lib/Runtime/Library/IntlEngineInterfaceExtensionObject.cpp",
          "lib/Runtime/Library/JSON.cpp",
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptBuiltInFunctions.cpp",
          "lib/Runtime/Library/JavascriptGeneratorFunction.cpp",
          "lib/Runtime/Library/JavascriptLibrary.cpp",
          "lib/Runtime/Library/JavascriptString.cpp",
          "lib/Runtime/Types/ES5ArrayTypeHandler.cpp",
          "lib/Runtime/Types/PathTypeHandler.h",
          "lib/Runtime/Types/SimplePropertyDescriptor.h",
          "lib/Runtime/Types/SimpleTypeHandler.cpp",
          "lib/Runtime/Types/SimpleTypeHandler.h",
          "lib/Runtime/Types/Type.cpp",
          "lib/Runtime/Types/TypePropertyCache.cpp"
        ],
        "message": "swb: avoid write barrier for global static data\n\nAdded WriteBarrierPtr(nullptr) constructor, no write barrier for nullptr.\nChanged such initializers to use nullptr instead of 0 or NULL.\n\nFor all global static data that may contain WriteBarrierPtr fields, add\na constructor variant that takes a dummy parameter to indicate that\nconstructor is to initialize from static data. The corresponding\nWriteBarrierPtr field uses a special variant to skip write barrier. This\navoids write barrier on static data address (which is in binary image\naddress, not recycler memory, and we have no cardTable for them on x64).",
        "before_after_code_files": [
          "lib/Common/DataStructures/DoublyLinkedListElement.inl||lib/Common/DataStructures/DoublyLinkedListElement.inl",
          "lib/Common/DataStructures/InternalString.cpp||lib/Common/DataStructures/InternalString.cpp",
          "lib/Common/DataStructures/InternalString.h||lib/Common/DataStructures/InternalString.h",
          "lib/Common/Memory/RecyclerPointers.h||lib/Common/Memory/RecyclerPointers.h",
          "lib/Common/Memory/WriteBarrierMacros.h||lib/Common/Memory/WriteBarrierMacros.h",
          "lib/Parser/RegexRuntime.cpp||lib/Parser/RegexRuntime.cpp",
          "lib/Parser/TextbookBoyerMoore.h||lib/Parser/TextbookBoyerMoore.h",
          "lib/Runtime/Base/FunctionInfo.cpp||lib/Runtime/Base/FunctionInfo.cpp",
          "lib/Runtime/Base/FunctionInfo.h||lib/Runtime/Base/FunctionInfo.h",
          "lib/Runtime/Base/SourceHolder.cpp||lib/Runtime/Base/SourceHolder.cpp",
          "lib/Runtime/Base/SourceHolder.h||lib/Runtime/Base/SourceHolder.h",
          "lib/Runtime/Language/FunctionCodeGenRuntimeData.cpp||lib/Runtime/Language/FunctionCodeGenRuntimeData.cpp",
          "lib/Runtime/Language/ModuleNamespace.cpp||lib/Runtime/Language/ModuleNamespace.cpp",
          "lib/Runtime/Library/BoundFunction.cpp||lib/Runtime/Library/BoundFunction.cpp",
          "lib/Runtime/Library/ConcatString.cpp||lib/Runtime/Library/ConcatString.cpp",
          "lib/Runtime/Library/EngineInterfaceObject.cpp||lib/Runtime/Library/EngineInterfaceObject.cpp",
          "lib/Runtime/Library/IntlEngineInterfaceExtensionObject.cpp||lib/Runtime/Library/IntlEngineInterfaceExtensionObject.cpp",
          "lib/Runtime/Library/JSON.cpp||lib/Runtime/Library/JSON.cpp",
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptBuiltInFunctions.cpp||lib/Runtime/Library/JavascriptBuiltInFunctions.cpp",
          "lib/Runtime/Library/JavascriptGeneratorFunction.cpp||lib/Runtime/Library/JavascriptGeneratorFunction.cpp",
          "lib/Runtime/Library/JavascriptLibrary.cpp||lib/Runtime/Library/JavascriptLibrary.cpp",
          "lib/Runtime/Library/JavascriptString.cpp||lib/Runtime/Library/JavascriptString.cpp",
          "lib/Runtime/Types/ES5ArrayTypeHandler.cpp||lib/Runtime/Types/ES5ArrayTypeHandler.cpp",
          "lib/Runtime/Types/PathTypeHandler.h||lib/Runtime/Types/PathTypeHandler.h",
          "lib/Runtime/Types/SimplePropertyDescriptor.h||lib/Runtime/Types/SimplePropertyDescriptor.h",
          "lib/Runtime/Types/SimpleTypeHandler.cpp||lib/Runtime/Types/SimpleTypeHandler.cpp",
          "lib/Runtime/Types/SimpleTypeHandler.h||lib/Runtime/Types/SimpleTypeHandler.h",
          "lib/Runtime/Types/Type.cpp||lib/Runtime/Types/Type.cpp",
          "lib/Runtime/Types/TypePropertyCache.cpp||lib/Runtime/Types/TypePropertyCache.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Common/DataStructures/DoublyLinkedListElement.inl||lib/Common/DataStructures/DoublyLinkedListElement.inl": [
          "File: lib/Common/DataStructures/DoublyLinkedListElement.inl -> lib/Common/DataStructures/DoublyLinkedListElement.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: namespace JsUtil",
          "8: {",
          "9:     template<class T, class TAllocator>",
          "11:     {",
          "12:         TemplateParameter::SameOrDerivedFrom<T, DoublyLinkedListElement<T, TAllocator>>();",
          "13:     }",
          "",
          "[Removed Lines]",
          "10:     DoublyLinkedListElement<T, TAllocator>::DoublyLinkedListElement() : previous(0), next(0)",
          "",
          "[Added Lines]",
          "10:     DoublyLinkedListElement<T, TAllocator>::DoublyLinkedListElement() : previous(nullptr), next(nullptr)",
          "",
          "---------------"
        ],
        "lib/Common/DataStructures/InternalString.cpp||lib/Common/DataStructures/InternalString.cpp": [
          "File: lib/Common/DataStructures/InternalString.cpp -> lib/Common/DataStructures/InternalString.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:         AssertMsg(length < INT_MAX, \"Length should be a valid string length\");",
          "17:     }",
          "20:     InternalString *InternalString::New(ArenaAllocator* alloc, const char16* content, charcount_t length)",
          "21:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:     }",
          "19:     InternalString::InternalString(const char16* content, _no_write_barrier_tag, charcount_t length, unsigned char offset) :",
          "20:         m_content(NO_WRITE_BARRIER_TAG(content)),",
          "21:         m_charLength(length),",
          "22:         m_offset(offset)",
          "23:     {",
          "24:         AssertMsg(length < INT_MAX, \"Length should be a valid string length\");",
          "",
          "---------------"
        ],
        "lib/Common/DataStructures/InternalString.h||lib/Common/DataStructures/InternalString.h": [
          "File: lib/Common/DataStructures/InternalString.h -> lib/Common/DataStructures/InternalString.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:         Field(const char16*) m_content;",
          "15:     public:",
          "17:         InternalString(const char16* content, DECLSPEC_GUARD_OVERFLOW charcount_t charLength, unsigned char offset = 0);",
          "18:         static InternalString* New(ArenaAllocator* alloc, const char16* content, DECLSPEC_GUARD_OVERFLOW charcount_t length);",
          "19:         static InternalString* New(Recycler* recycler, const char16* content, DECLSPEC_GUARD_OVERFLOW charcount_t length);",
          "20:         static InternalString* NewNoCopy(ArenaAllocator* alloc, const char16* content, DECLSPEC_GUARD_OVERFLOW charcount_t length);",
          "",
          "[Removed Lines]",
          "16:         InternalString() : m_charLength(0), m_content(NULL), m_offset(0) { };",
          "",
          "[Added Lines]",
          "16:         InternalString() : m_charLength(0), m_content(nullptr), m_offset(0) { };",
          "18:         InternalString(const char16* content, _no_write_barrier_tag, DECLSPEC_GUARD_OVERFLOW charcount_t charLength, unsigned char offset = 0);",
          "",
          "---------------"
        ],
        "lib/Common/Memory/RecyclerPointers.h||lib/Common/Memory/RecyclerPointers.h": [
          "File: lib/Common/Memory/RecyclerPointers.h -> lib/Common/Memory/RecyclerPointers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: class Recycler;",
          "10: class RecyclerNonLeafAllocator;",
          "14: struct _write_barrier_policy {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: struct _no_write_barrier_tag {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317: {",
          "318: public:",
          "319:     WriteBarrierPtr() : ptr(nullptr) {}",
          "320:     WriteBarrierPtr(T * ptr)",
          "321:     {",
          "324:         WriteBarrierSet(ptr);",
          "328:         NoWriteBarrierSet(ptr);",
          "330:     }",
          "331:     WriteBarrierPtr(WriteBarrierPtr<T>& other)",
          "332:     {",
          "",
          "[Removed Lines]",
          "322: #ifdef _WIN32",
          "325: #else",
          "329: #endif",
          "",
          "[Added Lines]",
          "323:     WriteBarrierPtr(const std::nullptr_t&) : ptr(nullptr) {}",
          "328:     }",
          "329:     WriteBarrierPtr(T * ptr, const _no_write_barrier_tag&)",
          "330:     {",
          "",
          "---------------"
        ],
        "lib/Common/Memory/WriteBarrierMacros.h||lib/Common/Memory/WriteBarrierMacros.h": [
          "File: lib/Common/Memory/WriteBarrierMacros.h -> lib/Common/Memory/WriteBarrierMacros.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     typename WriteBarrierFieldTypeTraits<type, ##__VA_ARGS__>::Type",
          "21: #if GLOBAL_ENABLE_WRITE_BARRIER",
          "22: #define Field(type, ...) \\",
          "23:     FieldWithBarrier(type, ##__VA_ARGS__)",
          "24: #define FieldNoBarrier(type) \\",
          "25:     typename WriteBarrierFieldTypeTraits<type, _no_write_barrier_policy, _no_write_barrier_policy>::Type",
          "26: #else",
          "27: #define Field(type, ...) type",
          "28: #define FieldNoBarrier(type) type",
          "29: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #define NO_WRITE_BARRIER_TAG_TYPE(arg) arg, _no_write_barrier_tag",
          "29: #define NO_WRITE_BARRIER_TAG(arg) arg, _no_write_barrier_tag()",
          "36: #define NO_WRITE_BARRIER_TAG_TYPE(arg) arg",
          "37: #define NO_WRITE_BARRIER_TAG(arg) arg",
          "",
          "---------------"
        ],
        "lib/Parser/RegexRuntime.cpp||lib/Parser/RegexRuntime.cpp": [
          "File: lib/Parser/RegexRuntime.cpp -> lib/Parser/RegexRuntime.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5101:     Program::Program(RegexFlags flags)",
          "5103:         , sourceLen(0)",
          "5104:         , flags(flags)",
          "5105:         , numGroups(0)",
          "",
          "[Removed Lines]",
          "5102:         : source(0)",
          "",
          "[Added Lines]",
          "5102:         : source(nullptr)",
          "",
          "---------------"
        ],
        "lib/Parser/TextbookBoyerMoore.h||lib/Parser/TextbookBoyerMoore.h": [
          "File: lib/Parser/TextbookBoyerMoore.h -> lib/Parser/TextbookBoyerMoore.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     public:",
          "",
          "[Removed Lines]",
          "113:         inline TextbookBoyerMoore() : lastOccurrence(-1), goodSuffix(0) {}",
          "",
          "[Added Lines]",
          "113:         inline TextbookBoyerMoore() : lastOccurrence(-1), goodSuffix(nullptr) {}",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/FunctionInfo.cpp||lib/Runtime/Base/FunctionInfo.cpp": [
          "File: lib/Runtime/Base/FunctionInfo.cpp -> lib/Runtime/Base/FunctionInfo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #endif",
          "15:     }",
          "17:     bool FunctionInfo::Is(void* ptr)",
          "18:     {",
          "19:         if(!ptr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:     FunctionInfo::FunctionInfo(JavascriptMethod entryPoint, _no_write_barrier_tag, Attributes attributes, LocalFunctionId functionId, FunctionProxy* functionBodyImpl)",
          "18:         : originalEntryPoint(entryPoint), attributes(attributes), functionBodyImpl(NO_WRITE_BARRIER_TAG(functionBodyImpl)), functionId(functionId), compileCount(0)",
          "19:     {",
          "20: #if !DYNAMIC_INTERPRETER_THUNK",
          "21:         Assert(entryPoint != nullptr);",
          "22: #endif",
          "23:     }",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/FunctionInfo.h||lib/Runtime/Base/FunctionInfo.h": [
          "File: lib/Runtime/Base/FunctionInfo.h -> lib/Runtime/Base/FunctionInfo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:             AllowDirectSuper               = 0x100000",
          "43:         };",
          "44:         FunctionInfo(JavascriptMethod entryPoint, Attributes attributes = None, LocalFunctionId functionId = Js::Constants::NoFunctionId, FunctionProxy* functionBodyImpl = nullptr);",
          "46:         static bool Is(void *ptr);",
          "47:         static DWORD GetFunctionBodyImplOffset() { return offsetof(FunctionInfo, functionBodyImpl); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:         FunctionInfo(JavascriptMethod entryPoint, _no_write_barrier_tag, Attributes attributes = None, LocalFunctionId functionId = Js::Constants::NoFunctionId, FunctionProxy* functionBodyImpl = nullptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         NoProfileFunctionInfo(JavascriptMethod entryPoint)",
          "148:             : FunctionInfo(entryPoint, Attributes::DoNotProfile)",
          "149:         {}",
          "150:     };",
          "152:     class AutoDisableRedeferral",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:         NoProfileFunctionInfo(JavascriptMethod entryPoint, _no_write_barrier_tag)",
          "153:             : FunctionInfo(NO_WRITE_BARRIER_TAG(entryPoint), Attributes::DoNotProfile)",
          "154:         {}",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/SourceHolder.cpp||lib/Runtime/Base/SourceHolder.cpp": [
          "File: lib/Runtime/Base/SourceHolder.cpp -> lib/Runtime/Base/SourceHolder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: namespace Js",
          "8: {",
          "9:     LPCUTF8 const ISourceHolder::emptyString = (LPCUTF8)\"\\0\";",
          "12:     ISourceHolder* SimpleSourceHolder::Clone(ScriptContext* scriptContext)",
          "13:     {",
          "",
          "[Removed Lines]",
          "10:     SimpleSourceHolder const ISourceHolder::emptySourceHolder(emptyString, 0, true);",
          "",
          "[Added Lines]",
          "10:     SimpleSourceHolder const ISourceHolder::emptySourceHolder(NO_WRITE_BARRIER_TAG(emptyString), 0, true);",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/SourceHolder.h||lib/Runtime/Base/SourceHolder.h": [
          "File: lib/Runtime/Base/SourceHolder.h -> lib/Runtime/Base/SourceHolder.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         Field(size_t) byteLength;",
          "36:         Field(bool) isEmpty;",
          "40:             byteLength(byteLength),",
          "41:             isEmpty(isEmpty)",
          "42:         {",
          "",
          "[Removed Lines]",
          "38:         SimpleSourceHolder(LPCUTF8 source, size_t byteLength, bool isEmpty)",
          "39:             : source(source),",
          "",
          "[Added Lines]",
          "38:         SimpleSourceHolder(NO_WRITE_BARRIER_TAG_TYPE(LPCUTF8 source), size_t byteLength, bool isEmpty)",
          "39:             : source(NO_WRITE_BARRIER_TAG(source)),",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/FunctionCodeGenRuntimeData.cpp||lib/Runtime/Language/FunctionCodeGenRuntimeData.cpp": [
          "File: lib/Runtime/Language/FunctionCodeGenRuntimeData.cpp -> lib/Runtime/Language/FunctionCodeGenRuntimeData.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: namespace Js",
          "9: {",
          "10:     FunctionCodeGenRuntimeData::FunctionCodeGenRuntimeData(FunctionBody *const functionBody)",
          "12:     {",
          "13:     }",
          "",
          "[Removed Lines]",
          "11:         : functionBody(functionBody), inlinees(nullptr), next(0)",
          "",
          "[Added Lines]",
          "11:         : functionBody(functionBody), inlinees(nullptr), next(nullptr)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/ModuleNamespace.cpp||lib/Runtime/Language/ModuleNamespace.cpp": [
          "File: lib/Runtime/Language/ModuleNamespace.cpp -> lib/Runtime/Language/ModuleNamespace.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: namespace Js",
          "15: {",
          "18:     ModuleNamespace::ModuleNamespace(ModuleRecordBase* moduleRecord, DynamicType* type) :",
          "19:         moduleRecord(moduleRecord), DynamicObject(type), unambiguousNonLocalExports(nullptr),",
          "",
          "[Removed Lines]",
          "16:     Js::FunctionInfo ModuleNamespace::EntryInfo::SymbolIterator(ModuleNamespace::EntrySymbolIterator);",
          "",
          "[Added Lines]",
          "16:     Js::FunctionInfo ModuleNamespace::EntryInfo::SymbolIterator(NO_WRITE_BARRIER_TAG(ModuleNamespace::EntrySymbolIterator));",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/BoundFunction.cpp||lib/Runtime/Library/BoundFunction.cpp": [
          "File: lib/Runtime/Library/BoundFunction.cpp -> lib/Runtime/Library/BoundFunction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: namespace Js",
          "8: {",
          "11:     BoundFunction::BoundFunction(DynamicType * type)",
          "12:         : JavascriptFunction(type, &functionInfo),",
          "",
          "[Removed Lines]",
          "9:     FunctionInfo BoundFunction::functionInfo(&BoundFunction::NewInstance, FunctionInfo::DoNotProfile);",
          "",
          "[Added Lines]",
          "9:     FunctionInfo BoundFunction::functionInfo(NO_WRITE_BARRIER_TAG(BoundFunction::NewInstance), FunctionInfo::DoNotProfile);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/ConcatString.cpp||lib/Runtime/Library/ConcatString.cpp": [
          "File: lib/Runtime/Library/ConcatString.cpp -> lib/Runtime/Library/ConcatString.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     ConcatStringBuilder::ConcatStringBuilder(ScriptContext* scriptContext, int initialSlotCount) :",
          "131:         ConcatStringBase(scriptContext->GetLibrary()->GetStringTypeStatic()),",
          "133:     {",
          "134:         Assert(scriptContext);",
          "",
          "[Removed Lines]",
          "132:         m_count(0), m_prevChunk(NULL)",
          "",
          "[Added Lines]",
          "132:         m_count(0), m_prevChunk(nullptr)",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/EngineInterfaceObject.cpp||lib/Runtime/Library/EngineInterfaceObject.cpp": [
          "File: lib/Runtime/Library/EngineInterfaceObject.cpp -> lib/Runtime/Library/EngineInterfaceObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:         }",
          "96:     }",
          "102: #ifndef GlobalBuiltIn",
          "103: #define GlobalBuiltIn(global, method) \\",
          "106: #define GlobalBuiltInConstructor(global)",
          "108: #define BuiltInRaiseException(exceptionType, exceptionID) \\",
          "111: #define BuiltInRaiseException1(exceptionType, exceptionID) BuiltInRaiseException(exceptionType, exceptionID)",
          "112: #define BuiltInRaiseException2(exceptionType, exceptionID) BuiltInRaiseException(exceptionType, exceptionID)",
          "",
          "[Removed Lines]",
          "98:     NoProfileFunctionInfo EngineInterfaceObject::EntryInfo::GetErrorMessage(EngineInterfaceObject::Entry_GetErrorMessage);",
          "99:     NoProfileFunctionInfo EngineInterfaceObject::EntryInfo::LogDebugMessage(EngineInterfaceObject::Entry_LogDebugMessage);",
          "100:     NoProfileFunctionInfo EngineInterfaceObject::EntryInfo::TagPublicLibraryCode(EngineInterfaceObject::Entry_TagPublicLibraryCode);",
          "104:     NoProfileFunctionInfo EngineInterfaceObject::EntryInfo::Intl_BuiltIn_##global##_##method##(global##::##method##); \\",
          "109:     NoProfileFunctionInfo EngineInterfaceObject::EntryInfo::Intl_BuiltIn_raise##exceptionID(EngineInterfaceObject::EntryIntl_BuiltIn_raise##exceptionID); \\",
          "",
          "[Added Lines]",
          "98:     NoProfileFunctionInfo EngineInterfaceObject::EntryInfo::GetErrorMessage(NO_WRITE_BARRIER_TAG(EngineInterfaceObject::Entry_GetErrorMessage));",
          "99:     NoProfileFunctionInfo EngineInterfaceObject::EntryInfo::LogDebugMessage(NO_WRITE_BARRIER_TAG(EngineInterfaceObject::Entry_LogDebugMessage));",
          "100:     NoProfileFunctionInfo EngineInterfaceObject::EntryInfo::TagPublicLibraryCode(NO_WRITE_BARRIER_TAG(EngineInterfaceObject::Entry_TagPublicLibraryCode));",
          "104:     NoProfileFunctionInfo EngineInterfaceObject::EntryInfo::Intl_BuiltIn_##global##_##method##(NO_WRITE_BARRIER_TAG(global##::##method##)); \\",
          "109:     NoProfileFunctionInfo EngineInterfaceObject::EntryInfo::Intl_BuiltIn_raise##exceptionID(NO_WRITE_BARRIER_TAG(EngineInterfaceObject::EntryIntl_BuiltIn_raise##exceptionID)); \\",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/IntlEngineInterfaceExtensionObject.cpp||lib/Runtime/Library/IntlEngineInterfaceExtensionObject.cpp": [
          "File: lib/Runtime/Library/IntlEngineInterfaceExtensionObject.cpp -> lib/Runtime/Library/IntlEngineInterfaceExtensionObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:     {",
          "199:     }",
          "228:     WindowsGlobalizationAdapter* IntlEngineInterfaceExtensionObject::GetWindowsGlobalizationAdapter(_In_ ScriptContext * scriptContext)",
          "229:     {",
          "",
          "[Removed Lines]",
          "201:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_RaiseAssert(IntlEngineInterfaceExtensionObject::EntryIntl_RaiseAssert);",
          "202:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_IsWellFormedLanguageTag(IntlEngineInterfaceExtensionObject::EntryIntl_IsWellFormedLanguageTag);",
          "203:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_NormalizeLanguageTag(IntlEngineInterfaceExtensionObject::EntryIntl_NormalizeLanguageTag);",
          "204:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_ResolveLocaleLookup(IntlEngineInterfaceExtensionObject::EntryIntl_ResolveLocaleLookup);",
          "205:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_ResolveLocaleBestFit(IntlEngineInterfaceExtensionObject::EntryIntl_ResolveLocaleBestFit);",
          "206:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_GetDefaultLocale(IntlEngineInterfaceExtensionObject::EntryIntl_GetDefaultLocale);",
          "207:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_GetExtensions(IntlEngineInterfaceExtensionObject::EntryIntl_GetExtensions);",
          "208:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_CompareString(IntlEngineInterfaceExtensionObject::EntryIntl_CompareString);",
          "209:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_CurrencyDigits(IntlEngineInterfaceExtensionObject::EntryIntl_CurrencyDigits);",
          "210:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_FormatNumber(IntlEngineInterfaceExtensionObject::EntryIntl_FormatNumber);",
          "212:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_CacheNumberFormat(IntlEngineInterfaceExtensionObject::EntryIntl_CacheNumberFormat);",
          "213:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_CreateDateTimeFormat(IntlEngineInterfaceExtensionObject::EntryIntl_CreateDateTimeFormat);",
          "215:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_FormatDateTime(IntlEngineInterfaceExtensionObject::EntryIntl_FormatDateTime);",
          "216:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_ValidateAndCanonicalizeTimeZone(IntlEngineInterfaceExtensionObject::EntryIntl_ValidateAndCanonicalizeTimeZone);",
          "217:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_GetDefaultTimeZone(IntlEngineInterfaceExtensionObject::EntryIntl_GetDefaultTimeZone);",
          "219:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_RegisterBuiltInFunction(IntlEngineInterfaceExtensionObject::EntryIntl_RegisterBuiltInFunction);",
          "220:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_GetHiddenObject(IntlEngineInterfaceExtensionObject::EntryIntl_GetHiddenObject);",
          "221:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_SetHiddenObject(IntlEngineInterfaceExtensionObject::EntryIntl_SetHiddenObject);",
          "223:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_BuiltIn_GetArrayLength(IntlEngineInterfaceExtensionObject::EntryIntl_BuiltIn_GetArrayLength);",
          "224:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_BuiltIn_SetPrototype(IntlEngineInterfaceExtensionObject::EntryIntl_BuiltIn_SetPrototype);",
          "225:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_BuiltIn_RegexMatch(IntlEngineInterfaceExtensionObject::EntryIntl_BuiltIn_RegexMatch);",
          "226:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_BuiltIn_CallInstanceFunction(IntlEngineInterfaceExtensionObject::EntryIntl_BuiltIn_CallInstanceFunction);",
          "",
          "[Added Lines]",
          "201:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_RaiseAssert(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_RaiseAssert));",
          "202:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_IsWellFormedLanguageTag(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_IsWellFormedLanguageTag));",
          "203:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_NormalizeLanguageTag(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_NormalizeLanguageTag));",
          "204:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_ResolveLocaleLookup(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_ResolveLocaleLookup));",
          "205:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_ResolveLocaleBestFit(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_ResolveLocaleBestFit));",
          "206:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_GetDefaultLocale(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_GetDefaultLocale));",
          "207:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_GetExtensions(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_GetExtensions));",
          "208:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_CompareString(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_CompareString));",
          "209:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_CurrencyDigits(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_CurrencyDigits));",
          "210:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_FormatNumber(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_FormatNumber));",
          "212:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_CacheNumberFormat(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_CacheNumberFormat));",
          "213:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_CreateDateTimeFormat(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_CreateDateTimeFormat));",
          "215:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_FormatDateTime(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_FormatDateTime));",
          "216:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_ValidateAndCanonicalizeTimeZone(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_ValidateAndCanonicalizeTimeZone));",
          "217:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_GetDefaultTimeZone(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_GetDefaultTimeZone));",
          "219:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_RegisterBuiltInFunction(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_RegisterBuiltInFunction));",
          "220:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_GetHiddenObject(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_GetHiddenObject));",
          "221:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_SetHiddenObject(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_SetHiddenObject));",
          "223:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_BuiltIn_GetArrayLength(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_BuiltIn_GetArrayLength));",
          "224:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_BuiltIn_SetPrototype(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_BuiltIn_SetPrototype));",
          "225:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_BuiltIn_RegexMatch(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_BuiltIn_RegexMatch));",
          "226:     NoProfileFunctionInfo IntlEngineInterfaceExtensionObject::EntryInfo::Intl_BuiltIn_CallInstanceFunction(NO_WRITE_BARRIER_TAG(IntlEngineInterfaceExtensionObject::EntryIntl_BuiltIn_CallInstanceFunction));",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JSON.cpp||lib/Runtime/Library/JSON.cpp": [
          "File: lib/Runtime/Library/JSON.cpp -> lib/Runtime/Library/JSON.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: namespace JSON",
          "16: {",
          "20:     Js::Var Parse(Js::JavascriptString* input, Js::RecyclableObject* reviver, Js::ScriptContext* scriptContext);",
          "",
          "[Removed Lines]",
          "17:     Js::FunctionInfo EntryInfo::Stringify(JSON::Stringify, Js::FunctionInfo::ErrorOnNew);",
          "18:     Js::FunctionInfo EntryInfo::Parse(JSON::Parse, Js::FunctionInfo::ErrorOnNew);",
          "",
          "[Added Lines]",
          "17:     Js::FunctionInfo EntryInfo::Stringify(NO_WRITE_BARRIER_TAG(JSON::Stringify), Js::FunctionInfo::ErrorOnNew);",
          "18:     Js::FunctionInfo EntryInfo::Parse(NO_WRITE_BARRIER_TAG(JSON::Parse), Js::FunctionInfo::ErrorOnNew);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     SegmentBTree::SegmentBTree()",
          "70:         : segmentCount(0),",
          "74:     {",
          "75:     }",
          "",
          "[Removed Lines]",
          "71:           segments(NULL),",
          "72:           keys(NULL),",
          "73:           children(NULL)",
          "",
          "[Added Lines]",
          "71:           segments(nullptr),",
          "72:           keys(nullptr),",
          "73:           children(nullptr)",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptBuiltInFunctions.cpp||lib/Runtime/Library/JavascriptBuiltInFunctions.cpp": [
          "File: lib/Runtime/Library/JavascriptBuiltInFunctions.cpp -> lib/Runtime/Library/JavascriptBuiltInFunctions.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: namespace Js",
          "8: {",
          "11: #define BUILTIN_TEMPLATE(c, n, e, i) template<> BUILTIN(c, n, e, i)",
          "12: #include \"JavascriptBuiltInFunctionList.h\"",
          "13: #undef BUILTIN",
          "",
          "[Removed Lines]",
          "10: #define BUILTIN(c, n, e, i) FunctionInfo c::EntryInfo::n(c::e, (Js::FunctionInfo::Attributes)(i), JavascriptBuiltInFunction:: ## c ## _ ## n);",
          "",
          "[Added Lines]",
          "10: #define BUILTIN(c, n, e, i) FunctionInfo c::EntryInfo::n(NO_WRITE_BARRIER_TAG(c::e), (Js::FunctionInfo::Attributes)(i), JavascriptBuiltInFunction:: ## c ## _ ## n);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptGeneratorFunction.cpp||lib/Runtime/Library/JavascriptGeneratorFunction.cpp": [
          "File: lib/Runtime/Library/JavascriptGeneratorFunction.cpp -> lib/Runtime/Library/JavascriptGeneratorFunction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: namespace Js",
          "8: {",
          "12:     JavascriptGeneratorFunction::JavascriptGeneratorFunction(DynamicType* type)",
          "13:         : ScriptFunctionBase(type, &functionInfo),",
          "",
          "[Removed Lines]",
          "9:     FunctionInfo JavascriptGeneratorFunction::functionInfo(&JavascriptGeneratorFunction::EntryGeneratorFunctionImplementation, (FunctionInfo::Attributes)(FunctionInfo::DoNotProfile | FunctionInfo::ErrorOnNew));",
          "10:     FunctionInfo JavascriptAsyncFunction::functionInfo(&JavascriptGeneratorFunction::EntryAsyncFunctionImplementation, (FunctionInfo::Attributes)(FunctionInfo::DoNotProfile | FunctionInfo::ErrorOnNew));",
          "",
          "[Added Lines]",
          "9:     FunctionInfo JavascriptGeneratorFunction::functionInfo(",
          "10:         NO_WRITE_BARRIER_TAG(JavascriptGeneratorFunction::EntryGeneratorFunctionImplementation),",
          "11:         (FunctionInfo::Attributes)(FunctionInfo::DoNotProfile | FunctionInfo::ErrorOnNew));",
          "12:     FunctionInfo JavascriptAsyncFunction::functionInfo(",
          "13:         NO_WRITE_BARRIER_TAG(JavascriptGeneratorFunction::EntryAsyncFunctionImplementation),",
          "14:         (FunctionInfo::Attributes)(FunctionInfo::DoNotProfile | FunctionInfo::ErrorOnNew));",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptLibrary.cpp||lib/Runtime/Library/JavascriptLibrary.cpp": [
          "File: lib/Runtime/Library/JavascriptLibrary.cpp -> lib/Runtime/Library/JavascriptLibrary.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: {",
          "26:     SimplePropertyDescriptor const JavascriptLibrary::SharedFunctionPropertyDescriptors[2] =",
          "27:     {",
          "30:     };",
          "32:     SimplePropertyDescriptor const JavascriptLibrary::FunctionWithLengthAndNameTypeDescriptors[2] =",
          "33:     {",
          "36:     };",
          "38:     SimplePropertyDescriptor const JavascriptLibrary::ModuleNamespaceTypeDescriptors[2] =",
          "39:     {",
          "42:     };",
          "52:     MissingPropertyTypeHandler JavascriptLibrary::MissingPropertyHolderTypeHandler;",
          "55:     SimplePropertyDescriptor const JavascriptLibrary::HeapArgumentsPropertyDescriptors[3] =",
          "56:     {",
          "60:     };",
          "62:     SimplePropertyDescriptor const JavascriptLibrary::FunctionWithLengthAndPrototypeTypeDescriptors[2] =",
          "63:     {",
          "66:     };",
          "68:     void JavascriptLibrary::Initialize(ScriptContext* scriptContext, GlobalObject * globalObject)",
          "",
          "[Removed Lines]",
          "28:         SimplePropertyDescriptor(BuiltInPropertyRecords::prototype, PropertyWritable),",
          "29:         SimplePropertyDescriptor(BuiltInPropertyRecords::name, PropertyConfigurable)",
          "34:         SimplePropertyDescriptor(BuiltInPropertyRecords::length, PropertyConfigurable),",
          "35:         SimplePropertyDescriptor(BuiltInPropertyRecords::name, PropertyConfigurable)",
          "40:         SimplePropertyDescriptor(BuiltInPropertyRecords::_symbolToStringTag, PropertyConfigurable),",
          "41:         SimplePropertyDescriptor(BuiltInPropertyRecords::_symbolIterator, PropertyConfigurable)",
          "44:     SimpleTypeHandler<1> JavascriptLibrary::SharedPrototypeTypeHandler(BuiltInPropertyRecords::constructor, PropertyWritable | PropertyConfigurable, PropertyTypesWritableDataOnly, 4, sizeof(DynamicObject));",
          "45:     SimpleTypeHandler<1> JavascriptLibrary::SharedFunctionWithoutPrototypeTypeHandler(BuiltInPropertyRecords::name, PropertyConfigurable);",
          "46:     SimpleTypeHandler<1> JavascriptLibrary::SharedFunctionWithPrototypeTypeHandlerV11(BuiltInPropertyRecords::prototype, PropertyWritable);",
          "47:     SimpleTypeHandler<2> JavascriptLibrary::SharedFunctionWithPrototypeTypeHandler(SharedFunctionPropertyDescriptors);",
          "48:     SimpleTypeHandler<1> JavascriptLibrary::SharedIdMappedFunctionWithPrototypeTypeHandler(BuiltInPropertyRecords::prototype);",
          "49:     SimpleTypeHandler<1> JavascriptLibrary::SharedFunctionWithLengthTypeHandler(BuiltInPropertyRecords::length);",
          "50:     SimpleTypeHandler<2> JavascriptLibrary::SharedFunctionWithLengthAndNameTypeHandler(FunctionWithLengthAndNameTypeDescriptors);",
          "51:     SimpleTypeHandler<2> JavascriptLibrary::SharedNamespaceSymbolTypeHandler(ModuleNamespaceTypeDescriptors);",
          "57:         SimplePropertyDescriptor(BuiltInPropertyRecords::length, PropertyConfigurable | PropertyWritable),",
          "58:         SimplePropertyDescriptor(BuiltInPropertyRecords::callee, PropertyConfigurable | PropertyWritable),",
          "59:         SimplePropertyDescriptor(BuiltInPropertyRecords::_symbolIterator, PropertyConfigurable | PropertyWritable)",
          "64:         SimplePropertyDescriptor(BuiltInPropertyRecords::prototype, PropertyNone),",
          "65:         SimplePropertyDescriptor(BuiltInPropertyRecords::length, PropertyConfigurable)",
          "",
          "[Added Lines]",
          "28:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::prototype), PropertyWritable),",
          "29:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::name), PropertyConfigurable)",
          "34:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::length), PropertyConfigurable),",
          "35:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::name), PropertyConfigurable)",
          "40:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::_symbolToStringTag), PropertyConfigurable),",
          "41:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::_symbolIterator), PropertyConfigurable)",
          "44:     SimpleTypeHandler<1> JavascriptLibrary::SharedPrototypeTypeHandler(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::constructor), PropertyWritable | PropertyConfigurable, PropertyTypesWritableDataOnly, 4, sizeof(DynamicObject));",
          "45:     SimpleTypeHandler<1> JavascriptLibrary::SharedFunctionWithoutPrototypeTypeHandler(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::name), PropertyConfigurable);",
          "46:     SimpleTypeHandler<1> JavascriptLibrary::SharedFunctionWithPrototypeTypeHandlerV11(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::prototype), PropertyWritable);",
          "47:     SimpleTypeHandler<2> JavascriptLibrary::SharedFunctionWithPrototypeTypeHandler(NO_WRITE_BARRIER_TAG(SharedFunctionPropertyDescriptors));",
          "48:     SimpleTypeHandler<1> JavascriptLibrary::SharedIdMappedFunctionWithPrototypeTypeHandler(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::prototype));",
          "49:     SimpleTypeHandler<1> JavascriptLibrary::SharedFunctionWithLengthTypeHandler(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::length));",
          "50:     SimpleTypeHandler<2> JavascriptLibrary::SharedFunctionWithLengthAndNameTypeHandler(NO_WRITE_BARRIER_TAG(FunctionWithLengthAndNameTypeDescriptors));",
          "51:     SimpleTypeHandler<2> JavascriptLibrary::SharedNamespaceSymbolTypeHandler(NO_WRITE_BARRIER_TAG(ModuleNamespaceTypeDescriptors));",
          "57:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::length), PropertyConfigurable | PropertyWritable),",
          "58:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::callee), PropertyConfigurable | PropertyWritable),",
          "59:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::_symbolIterator), PropertyConfigurable | PropertyWritable)",
          "64:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::prototype), PropertyNone),",
          "65:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::length), PropertyConfigurable)",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptString.cpp||lib/Runtime/Library/JavascriptString.cpp": [
          "File: lib/Runtime/Library/JavascriptString.cpp -> lib/Runtime/Library/JavascriptString.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:     }",
          "195:     JavascriptString::JavascriptString(StaticType * type)",
          "197:     {",
          "198:         Assert(type->GetTypeId() == TypeIds_String);",
          "199:     }",
          "",
          "[Removed Lines]",
          "196:         : RecyclableObject(type), m_charLength(0), m_pszValue(0)",
          "",
          "[Added Lines]",
          "196:         : RecyclableObject(type), m_charLength(0), m_pszValue(nullptr)",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/ES5ArrayTypeHandler.cpp||lib/Runtime/Types/ES5ArrayTypeHandler.cpp": [
          "File: lib/Runtime/Types/ES5ArrayTypeHandler.cpp -> lib/Runtime/Types/ES5ArrayTypeHandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: namespace Js",
          "10: {",
          "11:     IndexPropertyDescriptorMap::IndexPropertyDescriptorMap(Recycler* recycler)",
          "13:     {",
          "14:         indexPropertyMap = RecyclerNew(recycler, InnerMap, recycler);",
          "15:     }",
          "",
          "[Removed Lines]",
          "12:         : recycler(recycler), indexList(NULL), lastIndexAt(-1)",
          "",
          "[Added Lines]",
          "12:         : recycler(recycler), indexList(nullptr), lastIndexAt(-1)",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/PathTypeHandler.h||lib/Runtime/Types/PathTypeHandler.h": [
          "File: lib/Runtime/Types/PathTypeHandler.h -> lib/Runtime/Types/PathTypeHandler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     protected:",
          "25:         PathTypeHandlerBase(TypePath* typePath, uint16 pathLength, const PropertyIndex slotCapacity, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots, bool isLocked = false, bool isShared = false, DynamicType* predecessorType = nullptr);",
          "29:     public:",
          "30:         virtual BOOL IsLockable() const override { return true; }",
          "",
          "[Removed Lines]",
          "27:         DEFINE_VTABLE_CTOR_INIT_NO_REGISTER(PathTypeHandlerBase, DynamicTypeHandler, typePath(0));",
          "",
          "[Added Lines]",
          "27:         DEFINE_VTABLE_CTOR_INIT_NO_REGISTER(PathTypeHandlerBase, DynamicTypeHandler, typePath(nullptr));",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/SimplePropertyDescriptor.h||lib/Runtime/Types/SimplePropertyDescriptor.h": [
          "File: lib/Runtime/Types/SimplePropertyDescriptor.h -> lib/Runtime/Types/SimplePropertyDescriptor.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:     class SimplePropertyDescriptor",
          "10:     {",
          "11:     public:",
          "13:         SimplePropertyDescriptor(const PropertyRecord* id) : Id(id), preventFalseReference(NULL) { Attributes = PropertyDynamicTypeDefaults; }",
          "14:         SimplePropertyDescriptor(const PropertyRecord* id, PropertyAttributes attributes) : Id(id), preventFalseReference(NULL) { Attributes = attributes; }",
          "16:         Field(const PropertyRecord*) Id;",
          "17:         union",
          "18:         {",
          "",
          "[Removed Lines]",
          "12:         SimplePropertyDescriptor() : Id(NULL), preventFalseReference(NULL) { Attributes = PropertyDynamicTypeDefaults; }",
          "",
          "[Added Lines]",
          "12:         SimplePropertyDescriptor() : Id(nullptr), preventFalseReference(nullptr) { Attributes = PropertyDynamicTypeDefaults; }",
          "16:         SimplePropertyDescriptor(const PropertyRecord* id, _no_write_barrier_tag, PropertyAttributes attributes)",
          "17:             : Id(NO_WRITE_BARRIER_TAG(id)), preventFalseReference(NULL)",
          "18:         { Attributes = attributes; }",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/SimpleTypeHandler.cpp||lib/Runtime/Types/SimpleTypeHandler.cpp": [
          "File: lib/Runtime/Types/SimpleTypeHandler.cpp -> lib/Runtime/Types/SimpleTypeHandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     }",
          "33:     template<size_t size>",
          "35:         DynamicTypeHandler(sizeof(descriptors) / sizeof(SimplePropertyDescriptor),",
          "36:         inlineSlotCapacity, offsetOfInlineSlots, DefaultFlags | IsLockedFlag | MayBecomeSharedFlag | IsSharedFlag), propertyCount(1)",
          "37:     {",
          "",
          "[Removed Lines]",
          "34:     SimpleTypeHandler<size>::SimpleTypeHandler(const PropertyRecord* id, PropertyAttributes attributes, PropertyTypes propertyTypes, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots) :",
          "",
          "[Added Lines]",
          "34:     SimpleTypeHandler<size>::SimpleTypeHandler(NO_WRITE_BARRIER_TAG_TYPE(const PropertyRecord* id), PropertyAttributes attributes, PropertyTypes propertyTypes, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots) :",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     }",
          "47:     template<size_t size>",
          "50:          DynamicTypeHandler(sizeof(descriptors) / sizeof(SimplePropertyDescriptor),",
          "51:          inlineSlotCapacity, offsetOfInlineSlots, DefaultFlags | IsLockedFlag | MayBecomeSharedFlag | IsSharedFlag), propertyCount(size)",
          "52:     {",
          "",
          "[Removed Lines]",
          "49:     SimpleTypeHandler<size>::SimpleTypeHandler(SimplePropertyDescriptor const (&SharedFunctionPropertyDescriptors)[size], PropertyTypes propertyTypes, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots) :",
          "",
          "[Added Lines]",
          "48:     SimpleTypeHandler<size>::SimpleTypeHandler(NO_WRITE_BARRIER_TAG_TYPE(SimplePropertyDescriptor const (&SharedFunctionPropertyDescriptors)[size]), PropertyTypes propertyTypes, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots) :",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/SimpleTypeHandler.h||lib/Runtime/Types/SimpleTypeHandler.h": [
          "File: lib/Runtime/Types/SimpleTypeHandler.h -> lib/Runtime/Types/SimpleTypeHandler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:         DEFINE_VTABLE_CTOR_NO_REGISTER(SimpleTypeHandler, DynamicTypeHandler);",
          "25:     public:",
          "31:         virtual BOOL IsLockable() const override { return true; }",
          "32:         virtual BOOL IsSharable() const override { return true; }",
          "",
          "[Removed Lines]",
          "26:         SimpleTypeHandler(const PropertyRecord* id, PropertyAttributes attributes = PropertyNone, PropertyTypes propertyTypes = PropertyTypesNone, uint16 inlineSlotCapacity = 0, uint16 offsetOfInlineSlots = 0);",
          "29:         SimpleTypeHandler(SimplePropertyDescriptor const (&SharedFunctionPropertyDescriptors)[size], PropertyTypes propertyTypes = PropertyTypesNone, uint16 inlineSlotCapacity = 0, uint16 offsetOfInlineSlots = 0);",
          "",
          "[Added Lines]",
          "26:         SimpleTypeHandler(NO_WRITE_BARRIER_TAG_TYPE(const PropertyRecord* id), PropertyAttributes attributes = PropertyNone, PropertyTypes propertyTypes = PropertyTypesNone, uint16 inlineSlotCapacity = 0, uint16 offsetOfInlineSlots = 0);",
          "29:         SimpleTypeHandler(NO_WRITE_BARRIER_TAG_TYPE(SimplePropertyDescriptor const (&SharedFunctionPropertyDescriptors)[size]), PropertyTypes propertyTypes = PropertyTypesNone, uint16 inlineSlotCapacity = 0, uint16 offsetOfInlineSlots = 0);",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/Type.cpp||lib/Runtime/Types/Type.cpp": [
          "File: lib/Runtime/Types/Type.cpp -> lib/Runtime/Types/Type.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: {",
          "9:     DEFINE_RECYCLER_TRACKER_WEAKREF_PERF_COUNTER(Type);",
          "18:     Type::Type(ScriptContext* scriptContext, TypeId typeId, RecyclableObject* prototype, JavascriptMethod entryPoint) :",
          "19:         javascriptLibrary(scriptContext->GetLibrary()),",
          "",
          "[Removed Lines]",
          "11:     InternalString Type::ObjectTypeNameString    = InternalString(_u(\"object\"), 6);",
          "12:     InternalString Type::UndefinedTypeNameString = InternalString(_u(\"undefined\"), 9);",
          "13:     InternalString Type::BooleanTypeNameString   = InternalString(_u(\"boolean\"), 7);",
          "14:     InternalString Type::StringTypeNameString    = InternalString(_u(\"string\"), 6);",
          "15:     InternalString Type::NumberTypeNameString    = InternalString(_u(\"number\"), 6);",
          "16:     InternalString Type::FunctionTypeNameString  = InternalString(_u(\"function\"), 8);",
          "",
          "[Added Lines]",
          "11:     InternalString Type::ObjectTypeNameString    = InternalString(NO_WRITE_BARRIER_TAG(_u(\"object\")), 6);",
          "12:     InternalString Type::UndefinedTypeNameString = InternalString(NO_WRITE_BARRIER_TAG(_u(\"undefined\")), 9);",
          "13:     InternalString Type::BooleanTypeNameString   = InternalString(NO_WRITE_BARRIER_TAG(_u(\"boolean\")), 7);",
          "14:     InternalString Type::StringTypeNameString    = InternalString(NO_WRITE_BARRIER_TAG(_u(\"string\")), 6);",
          "15:     InternalString Type::NumberTypeNameString    = InternalString(NO_WRITE_BARRIER_TAG(_u(\"number\")), 6);",
          "16:     InternalString Type::FunctionTypeNameString  = InternalString(NO_WRITE_BARRIER_TAG(_u(\"function\")), 8);",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/TypePropertyCache.cpp||lib/Runtime/Types/TypePropertyCache.cpp": [
          "File: lib/Runtime/Types/TypePropertyCache.cpp -> lib/Runtime/Types/TypePropertyCache.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     {",
          "15:     }",
          "",
          "[Removed Lines]",
          "13:     TypePropertyCacheElement::TypePropertyCacheElement() : id(Constants::NoProperty), tag(1), index(0), prototypeObjectWithProperty(0)",
          "",
          "[Added Lines]",
          "13:     TypePropertyCacheElement::TypePropertyCacheElement()",
          "14:         : id(Constants::NoProperty), tag(1), index(0), prototypeObjectWithProperty(nullptr)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1623a6ae6c6471250f3b366d475d6bd52ca9b49",
      "candidate_info": {
        "commit_hash": "c1623a6ae6c6471250f3b366d475d6bd52ca9b49",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/c1623a6ae6c6471250f3b366d475d6bd52ca9b49",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h",
          "test/Array/bug_9575461.js",
          "test/Array/rlexe.xml"
        ],
        "message": "[MERGE #2337 @obastemur] bug-fix: 9575461 - IsConcatSpreadable is called twice\n\nMerge pull request #2337 from obastemur:9575461",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h",
          "test/Array/bug_9575461.js||test/Array/bug_9575461.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2997:     }",
          "2999:     template<typename T>",
          "3001:     {",
          "3003:         Throw::InternalError();",
          "",
          "[Removed Lines]",
          "3000:     void JavascriptArray::ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext, uint start, BigIndex startIdxDest, BOOL FirstPromotedItemIsSpreadable, BigIndex FirstPromotedItemLength)",
          "",
          "[Added Lines]",
          "3000:     void JavascriptArray::ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds,",
          "3001:         Js::Arguments& args, ScriptContext* scriptContext, uint start, BigIndex startIdxDest,",
          "3002:         BOOL FirstPromotedItemIsSpreadable, BigIndex FirstPromotedItemLength, bool spreadableCheckedAndTrue)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3008:     template<typename T>",
          "3010:     {",
          "3011:         JavascriptArray* pDestArray = nullptr;",
          "",
          "[Removed Lines]",
          "3009:     void JavascriptArray::ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext, uint start, uint startIdxDest, BOOL firstPromotedItemIsSpreadable, BigIndex firstPromotedItemLength)",
          "",
          "[Added Lines]",
          "3011:     void JavascriptArray::ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds,",
          "3012:         Js::Arguments& args, ScriptContext* scriptContext, uint start, uint startIdxDest,",
          "3013:         BOOL firstPromotedItemIsSpreadable, BigIndex firstPromotedItemLength, bool spreadableCheckedAndTrue)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3019:         for (uint idxArg = start; idxArg < args.Info.Count; idxArg++)",
          "3020:         {",
          "3021:             Var aItem = args[idxArg];",
          "3024:             {",
          "",
          "[Removed Lines]",
          "3022:             BOOL spreadable = false;",
          "3023:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled())",
          "",
          "[Added Lines]",
          "3026:             bool spreadable = spreadableCheckedAndTrue;",
          "3027:             if (!spreadable && scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3034:                     continue;",
          "3035:                 }",
          "3036:             }",
          "3038:             if (pDestArray && JavascriptArray::IsDirectAccessArray(aItem) && JavascriptArray::IsDirectAccessArray(pDestArray)",
          "3039:                 && BigIndex(idxDest + JavascriptArray::FromVar(aItem)->length).IsSmallIndex()) // Fast path",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3041:             else",
          "3042:             {",
          "3043:                 spreadableCheckedAndTrue = false; // if it was `true`, reset after the first use",
          "3044:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3173:         for (uint idxArg = 0; idxArg < args.Info.Count; idxArg++)",
          "3174:         {",
          "3175:             Var aItem = args[idxArg];",
          "3178:             {",
          "3182:                 {",
          "3185:                 }",
          "3187:             }",
          "3189:             if (JavascriptNativeIntArray::Is(aItem)) // Fast path",
          "",
          "[Removed Lines]",
          "3177:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled() && !JavascriptOperators::IsConcatSpreadable(aItem))",
          "3179:                 pDestArray->SetItem(idxDest, aItem, PropertyOperation_ThrowIfNotExtensible);",
          "3180:                 idxDest = idxDest + 1;",
          "3181:                 if (!JavascriptNativeIntArray::Is(pDestArray)) // SetItem could convert pDestArray to a var array if aItem is not an integer if so fall back",
          "3183:                     ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg + 1, idxDest);",
          "3184:                     return pDestArray;",
          "3186:                 continue;",
          "",
          "[Added Lines]",
          "3185:             bool spreadableCheckedAndTrue = false;",
          "3187:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled())",
          "3189:                 if (JavascriptOperators::IsConcatSpreadable(aItem))",
          "3191:                     spreadableCheckedAndTrue = true;",
          "3192:                 }",
          "3193:                 else",
          "3194:                 {",
          "3195:                     pDestArray->SetItem(idxDest, aItem, PropertyOperation_ThrowIfNotExtensible);",
          "3196:                     idxDest = idxDest + 1;",
          "3197:                     if (!JavascriptNativeIntArray::Is(pDestArray)) // SetItem could convert pDestArray to a var array if aItem is not an integer if so fall back",
          "3198:                     {",
          "3199:                         ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg + 1, idxDest);",
          "3200:                         return pDestArray;",
          "3201:                     }",
          "3202:                     continue;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3220:             else",
          "3221:             {",
          "3222:                 JavascriptArray *pVarDestArray = JavascriptNativeIntArray::ConvertToVarArray(pDestArray);",
          "3224:                 return pVarDestArray;",
          "3225:             }",
          "3226:         }",
          "",
          "[Removed Lines]",
          "3223:                 ConcatArgs<uint>(pVarDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest);",
          "",
          "[Added Lines]",
          "3240:                 ConcatArgs<uint>(pVarDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest, spreadableCheckedAndTrue);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3238:         {",
          "3239:             Var aItem = args[idxArg];",
          "3248:                 {",
          "3251:                 }",
          "3253:             }",
          "3255:             bool converted;",
          "",
          "[Removed Lines]",
          "3241:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled() && !JavascriptOperators::IsConcatSpreadable(aItem))",
          "3242:             {",
          "3244:                 pDestArray->SetItem(idxDest, aItem, PropertyOperation_ThrowIfNotExtensible);",
          "3246:                 idxDest = idxDest + 1;",
          "3247:                 if (!JavascriptNativeFloatArray::Is(pDestArray)) // SetItem could convert pDestArray to a var array if aItem is not an integer if so fall back",
          "3249:                     ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg + 1, idxDest);",
          "3250:                     return pDestArray;",
          "3252:                 continue;",
          "",
          "[Added Lines]",
          "3258:             bool spreadableCheckedAndTrue = false;",
          "3260:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled())",
          "3261:             {",
          "3262:                 if (JavascriptOperators::IsConcatSpreadable(aItem))",
          "3264:                     spreadableCheckedAndTrue = true;",
          "3265:                 }",
          "3266:                 else",
          "3267:                 {",
          "3268:                     pDestArray->SetItem(idxDest, aItem, PropertyOperation_ThrowIfNotExtensible);",
          "3270:                     idxDest = idxDest + 1;",
          "3271:                     if (!JavascriptNativeFloatArray::Is(pDestArray)) // SetItem could convert pDestArray to a var array if aItem is not an integer if so fall back",
          "3272:                     {",
          "3273:                         ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg + 1, idxDest);",
          "3274:                         return pDestArray;",
          "3275:                     }",
          "3276:                     continue;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3270:                 else",
          "3271:                 {",
          "3272:                     JavascriptArray *pVarDestArray = JavascriptNativeFloatArray::ConvertToVarArray(pDestArray);",
          "3274:                     return pVarDestArray;",
          "3275:                 }",
          "3276:                 if (converted)",
          "3277:                 {",
          "",
          "[Removed Lines]",
          "3273:                     ConcatArgs<uint>(pVarDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest);",
          "",
          "[Added Lines]",
          "3298:                     ConcatArgs<uint>(pVarDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest, spreadableCheckedAndTrue);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h": [
          "File: lib/Runtime/Library/JavascriptArray.h -> lib/Runtime/Library/JavascriptArray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:         static void SetConcatItem(Var aItem, uint idxArg, JavascriptArray* pDestArray, RecyclableObject* pDestObj, T idxDest, ScriptContext *scriptContext);",
          "782:         template<typename T>",
          "784:         template<typename T>",
          "786:         static JavascriptArray* ConcatIntArgs(JavascriptNativeIntArray* pDestArray, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext);",
          "787:         static bool PromoteToBigIndex(BigIndex lhs, BigIndex rhs);",
          "788:         static bool PromoteToBigIndex(BigIndex lhs, uint32 rhs);",
          "",
          "[Removed Lines]",
          "783:         static void ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext, uint start, BigIndex startIdxDest, BOOL firstPromotedItemIsSpreadable, BigIndex firstPromotedItemLength);",
          "785:         static void ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext, uint start = 0, uint startIdxDest = 0u, BOOL FirstPromotedItemIsSpreadable = false, BigIndex FirstPromotedItemLength = 0u);",
          "",
          "[Added Lines]",
          "783:         static void ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext, uint start, BigIndex startIdxDest, BOOL firstPromotedItemIsSpreadable, BigIndex firstPromotedItemLength, bool spreadableCheckedAndTrue = false);",
          "785:         static void ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext, uint start = 0, uint startIdxDest = 0u, BOOL FirstPromotedItemIsSpreadable = false, BigIndex FirstPromotedItemLength = 0u, bool spreadableCheckedAndTrue = false);",
          "",
          "---------------"
        ],
        "test/Array/bug_9575461.js||test/Array/bug_9575461.js": [
          "File: test/Array/bug_9575461.js -> test/Array/bug_9575461.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: var obj = [1, 2, 3];",
          "7: var cc_base = [-2, -1, 0];",
          "8: var isCS = false;",
          "9: var counter = 0;",
          "11: Object.defineProperty(obj, Symbol.isConcatSpreadable, {",
          "12:     get : function () {",
          "13:         counter++;",
          "14:         obj[2] = isCS ? \"Some String inserted\" : 123;",
          "15:         isCS = !isCS;",
          "16:         return isCS;",
          "17:     }",
          "18: });",
          "20: var MAY_THROW = function(n, result) {",
          "21:     if (!result) throw new Error(n + \". FAILED\");",
          "22: };",
          "24: MAY_THROW(0, cc_base.concat(obj).length == 6);",
          "25: MAY_THROW(1, cc_base.concat(obj).length == 4);",
          "26: MAY_THROW(2, counter == 2 && !isCS);",
          "28: print(\"PASS\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7c70b5b22fd3216fc8c66c30b737212e3231210",
      "candidate_info": {
        "commit_hash": "c7c70b5b22fd3216fc8c66c30b737212e3231210",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/c7c70b5b22fd3216fc8c66c30b737212e3231210",
        "files": [
          "lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h",
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h",
          "lib/Runtime/Library/JavascriptArray.inl"
        ],
        "message": "[1.4>master] [MERGE #2325 @kunalspathak] Allocate more elements for `new Array()`\n\nMerge pull request #2325 from kunalspathak:noArgArrayCtor\n\nWith #1363, I changed the allocation buckets to allocate space for 2 elements if user calls `new Array()` or size passed to Array ctor is 0. However there can be cases where user creates array using `new Array()` but then set elements to indices beyond size 2. With my change, we will go through slow path to set these elements.\n\n As part of the fix, revert the `new Array()` case to allocate same amount of space before my #1363 changes. This doesn't change the `new Array(0) or (foo = 0; new Array(foo);` case and will continue to allocate space for just 2 elements.\n\nI have opened #2324 to gather profile data of array's length which will help us specify the right length for such scenarios during array allocation in JIT.",
        "before_after_code_files": [
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h||lib/Backend/Lower.h",
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h",
          "lib/Runtime/Library/JavascriptArray.inl||lib/Runtime/Library/JavascriptArray.inl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3901:         }",
          "3902:         GenerateArrayInfoIsNativeIntArrayTest(instr, arrayInfo, arrayInfoAddr, helperLabel);",
          "3903:         Assert(Js::JavascriptNativeIntArray::GetOffsetOfArrayFlags() + sizeof(uint16) == Js::JavascriptNativeIntArray::GetOffsetOfArrayCallSiteIndex());",
          "3905:         const IR::AutoReuseOpnd autoReuseHeadOpnd(headOpnd, func);",
          "3907:         GenerateMemInit(dstOpnd, Js::JavascriptNativeIntArray::GetOffsetOfWeakFuncRef(), IR::AddrOpnd::New(weakFuncRef, IR::AddrOpndKindDynamicFunctionBodyWeakRef, m_func), instr, isZeroed);",
          "",
          "[Removed Lines]",
          "3904:         headOpnd = GenerateArrayAlloc<Js::JavascriptNativeIntArray>(instr, &size, arrayInfo, &isZeroed);",
          "",
          "[Added Lines]",
          "3904:         headOpnd = GenerateArrayLiteralsAlloc<Js::JavascriptNativeIntArray>(instr, &size, arrayInfo, &isZeroed);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3919:         }",
          "3920:         GenerateArrayInfoIsNativeFloatAndNotIntArrayTest(instr, arrayInfo, arrayInfoAddr, helperLabel);",
          "3921:         Assert(Js::JavascriptNativeFloatArray::GetOffsetOfArrayFlags() + sizeof(uint16) == Js::JavascriptNativeFloatArray::GetOffsetOfArrayCallSiteIndex());",
          "3923:         const IR::AutoReuseOpnd autoReuseHeadOpnd(headOpnd, func);",
          "3925:         GenerateMemInit(dstOpnd, Js::JavascriptNativeFloatArray::GetOffsetOfWeakFuncRef(), IR::AddrOpnd::New(weakFuncRef, IR::AddrOpndKindDynamicFunctionBodyWeakRef, m_func), instr, isZeroed);",
          "",
          "[Removed Lines]",
          "3922:         headOpnd = GenerateArrayAlloc<Js::JavascriptNativeFloatArray>(instr, &size, arrayInfo, &isZeroed);",
          "",
          "[Added Lines]",
          "3922:         headOpnd = GenerateArrayLiteralsAlloc<Js::JavascriptNativeFloatArray>(instr, &size, arrayInfo, &isZeroed);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3942:             return;",
          "3943:         }",
          "3944:         uint const offsetStart = sizeof(Js::SparseArraySegmentBase);",
          "3946:         const IR::AutoReuseOpnd autoReuseHeadOpnd(headOpnd, func);",
          "3947:         for (; i < size; i++)",
          "3948:         {",
          "",
          "[Removed Lines]",
          "3945:         headOpnd = GenerateArrayAlloc<Js::JavascriptArray>(instr, &size, arrayInfo, &isZeroed);",
          "",
          "[Added Lines]",
          "3945:         headOpnd = GenerateArrayLiteralsAlloc<Js::JavascriptArray>(instr, &size, arrayInfo, &isZeroed);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3998: template <typename ArrayType>",
          "3999: IR::RegOpnd *",
          "4001: {",
          "4002:     Func * func = this->m_func;",
          "4003:     IR::RegOpnd * dstOpnd = instr->GetDst()->AsRegOpnd();",
          "",
          "[Removed Lines]",
          "4000: Lowerer::GenerateArrayAlloc(IR::Instr *instr, uint32 * psize, Js::ArrayCallSiteInfo * arrayInfo, bool * pIsHeadSegmentZeroed, bool isArrayObjCtor /* = false */)",
          "",
          "[Added Lines]",
          "4000: Lowerer::GenerateArrayLiteralsAlloc(IR::Instr *instr, uint32 * psize, Js::ArrayCallSiteInfo * arrayInfo, bool * pIsHeadSegmentZeroed)",
          "4001: {",
          "4002:     return GenerateArrayAllocHelper<ArrayType>(instr, psize, arrayInfo, pIsHeadSegmentZeroed, false /* isArrayObjCtor */, false /* isNoArgs */);",
          "4003: }",
          "4005: template <typename ArrayType>",
          "4006: IR::RegOpnd *",
          "4007: Lowerer::GenerateArrayObjectsAlloc(IR::Instr *instr, uint32 * psize, Js::ArrayCallSiteInfo * arrayInfo, bool * pIsHeadSegmentZeroed, bool isNoArgs)",
          "4008: {",
          "4009:     return GenerateArrayAllocHelper<ArrayType>(instr, psize, arrayInfo, pIsHeadSegmentZeroed, true /* isArrayObjCtor */, isNoArgs);",
          "4010: }",
          "4013: template <typename ArrayType>",
          "4014: IR::RegOpnd *",
          "4015: Lowerer::GenerateArrayAllocHelper(IR::Instr *instr, uint32 * psize, Js::ArrayCallSiteInfo * arrayInfo, bool * pIsHeadSegmentZeroed, bool isArrayObjCtor, bool isNoArgs)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4016:     {",
          "4017:         if (isArrayObjCtor)",
          "4018:         {",
          "4020:         }",
          "4021:         else",
          "4022:         {",
          "",
          "[Removed Lines]",
          "4019:             arrayAllocSize = Js::JavascriptArray::DetermineAllocationSizeForArrayObjects<ArrayType, 0>(count, nullptr, &alignedHeadSegmentSize);",
          "",
          "[Added Lines]",
          "4034:             uint32 allocCount = isNoArgs ? Js::SparseArraySegmentBase::SMALL_CHUNK_SIZE : count;",
          "4035:             arrayAllocSize = Js::JavascriptArray::DetermineAllocationSizeForArrayObjects<ArrayType, 0>(allocCount, nullptr, &alignedHeadSegmentSize);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4207: void",
          "4209: {",
          "4210:     if (PHASE_OFF(Js::ArrayCtorFastPathPhase, m_func))",
          "4211:     {",
          "",
          "[Removed Lines]",
          "4208: Lowerer::GenerateProfiledNewScObjArrayFastPath(IR::Instr *instr, Js::ArrayCallSiteInfo * arrayInfo, intptr_t arrayInfoAddr, intptr_t weakFuncRef, uint32 length, IR::LabelInstr* labelDone)",
          "",
          "[Added Lines]",
          "4224: Lowerer::GenerateProfiledNewScObjArrayFastPath(IR::Instr *instr, Js::ArrayCallSiteInfo * arrayInfo, intptr_t arrayInfoAddr, intptr_t weakFuncRef, uint32 length, IR::LabelInstr* labelDone, bool isNoArgs)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4223:     {",
          "4224:         GenerateArrayInfoIsNativeIntArrayTest(instr, arrayInfo, arrayInfoAddr, helperLabel);",
          "4225:         Assert(Js::JavascriptNativeIntArray::GetOffsetOfArrayFlags() + sizeof(uint16) == Js::JavascriptNativeIntArray::GetOffsetOfArrayCallSiteIndex());",
          "4228:         GenerateMemInit(dstOpnd, Js::JavascriptNativeIntArray::GetOffsetOfArrayCallSiteIndex(), IR::IntConstOpnd::New(profileId, TyUint16, func, true), instr, isZeroed);",
          "4229:         GenerateMemInit(dstOpnd, Js::JavascriptNativeIntArray::GetOffsetOfWeakFuncRef(), IR::AddrOpnd::New(weakFuncRef, IR::AddrOpndKindDynamicFunctionBodyWeakRef, m_func), instr, isZeroed);",
          "",
          "[Removed Lines]",
          "4226:         headOpnd = GenerateArrayAlloc<Js::JavascriptNativeIntArray>(instr, &size, arrayInfo, &isZeroed, true);",
          "",
          "[Added Lines]",
          "4242:         headOpnd = GenerateArrayObjectsAlloc<Js::JavascriptNativeIntArray>(instr, &size, arrayInfo, &isZeroed, isNoArgs);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4237:     {",
          "4238:         GenerateArrayInfoIsNativeFloatAndNotIntArrayTest(instr, arrayInfo, arrayInfoAddr, helperLabel);",
          "4239:         Assert(Js::JavascriptNativeFloatArray::GetOffsetOfArrayFlags() + sizeof(uint16) == Js::JavascriptNativeFloatArray::GetOffsetOfArrayCallSiteIndex());",
          "4242:         GenerateMemInit(dstOpnd, Js::JavascriptNativeFloatArray::GetOffsetOfArrayCallSiteIndex(), IR::IntConstOpnd::New(profileId, TyUint16, func, true), instr, isZeroed);",
          "4243:         GenerateMemInit(dstOpnd, Js::JavascriptNativeFloatArray::GetOffsetOfWeakFuncRef(), IR::AddrOpnd::New(weakFuncRef, IR::AddrOpndKindDynamicFunctionBodyWeakRef, m_func), instr, isZeroed);",
          "",
          "[Removed Lines]",
          "4240:         headOpnd = GenerateArrayAlloc<Js::JavascriptNativeFloatArray>(instr, &size, arrayInfo, &isZeroed, true);",
          "",
          "[Added Lines]",
          "4256:         headOpnd = GenerateArrayObjectsAlloc<Js::JavascriptNativeFloatArray>(instr, &size, arrayInfo, &isZeroed, isNoArgs);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4256:     else",
          "4257:     {",
          "4258:         uint const offsetStart = sizeof(Js::SparseArraySegmentBase);",
          "4260:         for (uint i = 0; i < size; i++)",
          "4261:         {",
          "4262:             GenerateMemInit(",
          "",
          "[Removed Lines]",
          "4259:         headOpnd = GenerateArrayAlloc<Js::JavascriptArray>(instr, &size, arrayInfo, &isZeroed, true);",
          "",
          "[Added Lines]",
          "4275:         headOpnd = GenerateArrayObjectsAlloc<Js::JavascriptArray>(instr, &size, arrayInfo, &isZeroed, isNoArgs);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4407:     bool isHeadSegmentZeroed;",
          "4408:     IR::RegOpnd * dstOpnd = instr->GetDst()->AsRegOpnd();",
          "4409:     Assert(Js::JavascriptNativeIntArray::GetOffsetOfArrayFlags() + sizeof(uint16) == Js::JavascriptNativeIntArray::GetOffsetOfArrayCallSiteIndex());",
          "4411:     const IR::AutoReuseOpnd autoReuseHeadOpnd(headOpnd, func);",
          "4413:     GenerateMemInit(dstOpnd, Js::JavascriptNativeIntArray::GetOffsetOfWeakFuncRef(), IR::AddrOpnd::New(weakFuncRef, IR::AddrOpndKindDynamicMisc, m_func), instr, isHeadSegmentZeroed);",
          "",
          "[Removed Lines]",
          "4410:     IR::RegOpnd * headOpnd = GenerateArrayAlloc<Js::JavascriptNativeIntArray>(instr, &size, arrayInfo, &isHeadSegmentZeroed);",
          "",
          "[Added Lines]",
          "4426:     IR::RegOpnd * headOpnd = GenerateArrayLiteralsAlloc<Js::JavascriptNativeIntArray>(instr, &size, arrayInfo, &isHeadSegmentZeroed);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4479:     bool isHeadSegmentZeroed;",
          "4480:     IR::RegOpnd * dstOpnd = instr->GetDst()->AsRegOpnd();",
          "4481:     Assert(Js::JavascriptNativeFloatArray::GetOffsetOfArrayFlags() + sizeof(uint16) == Js::JavascriptNativeFloatArray::GetOffsetOfArrayCallSiteIndex());",
          "4483:     const IR::AutoReuseOpnd autoReuseHeadOpnd(headOpnd, func);",
          "4485:     GenerateMemInit(dstOpnd, Js::JavascriptNativeFloatArray::GetOffsetOfWeakFuncRef(), IR::AddrOpnd::New(weakFuncRef, IR::AddrOpndKindDynamicFunctionBodyWeakRef, m_func), instr, isHeadSegmentZeroed);",
          "",
          "[Removed Lines]",
          "4482:     IR::RegOpnd * headOpnd = GenerateArrayAlloc<Js::JavascriptNativeFloatArray>(instr, &size, arrayInfo, &isHeadSegmentZeroed);",
          "",
          "[Added Lines]",
          "4498:     IR::RegOpnd * headOpnd = GenerateArrayLiteralsAlloc<Js::JavascriptNativeFloatArray>(instr, &size, arrayInfo, &isHeadSegmentZeroed);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5478:                 int32 length = linkSym->GetIntConstValue();",
          "5479:                 if (length >= 0 && length <= upperBoundValue)",
          "5480:                 {",
          "5482:                 }",
          "5483:                 else",
          "5484:                 {",
          "",
          "[Removed Lines]",
          "5481:                     GenerateProfiledNewScObjArrayFastPath(newObjInstr, arrayInfo, arrayInfoAddr, weakFuncRef, (uint32)length, labelDone);",
          "",
          "[Added Lines]",
          "5497:                     GenerateProfiledNewScObjArrayFastPath(newObjInstr, arrayInfo, arrayInfoAddr, weakFuncRef, (uint32)length, labelDone, false);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5596:     }",
          "5598:     IR::LabelInstr *labelDone = IR::LabelInstr::New(Js::OpCode::Label, func);",
          "5600:     newObjInstr->InsertAfter(labelDone);",
          "5602:     m_lowererMD.LoadHelperArgument(newObjInstr, IR::AddrOpnd::New(weakFuncRef, IR::AddrOpndKindDynamicFunctionBodyWeakRef, func));",
          "",
          "[Removed Lines]",
          "5599:     GenerateProfiledNewScObjArrayFastPath(newObjInstr, arrayInfo, arrayInfoAddr, weakFuncRef, 0, labelDone);",
          "",
          "[Added Lines]",
          "5615:     GenerateProfiledNewScObjArrayFastPath(newObjInstr, arrayInfo, arrayInfoAddr, weakFuncRef, 0, labelDone, true);",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.h||lib/Backend/Lower.h": [
          "File: lib/Backend/Lower.h -> lib/Backend/Lower.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:     void            GenerateRecyclerAlloc(IR::JnHelperMethod allocHelper, size_t allocSize, IR::RegOpnd* newObjDst, IR::Instr* insertionPointInstr, bool inOpHelper = false);",
          "522:     template <typename ArrayType>",
          "524:     template <typename ArrayType>",
          "525:     IR::RegOpnd *   GenerateArrayAlloc(IR::Instr *instr, IR::Opnd * sizeOpnd, Js::ArrayCallSiteInfo * arrayInfo);",
          "529:     template <typename ArrayType>",
          "530:     void            GenerateProfiledNewScObjArrayFastPath(IR::Instr *instr, Js::ArrayCallSiteInfo * arrayInfo, intptr_t arrayInfoAddr, intptr_t weakFuncRef, IR::LabelInstr* helperLabel, IR::LabelInstr* labelDone, IR::Opnd* lengthOpnd, uint32 offsetOfCallSiteIndex, uint32 offsetOfWeakFuncRef);",
          "",
          "[Removed Lines]",
          "523:     IR::RegOpnd *   GenerateArrayAlloc(IR::Instr *instr, uint32 * psize, Js::ArrayCallSiteInfo * arrayInfo, bool * pIsHeadSegmentZeroed, bool isArrayObjCtor = false);",
          "527:     void            GenerateProfiledNewScObjArrayFastPath(IR::Instr *instr, Js::ArrayCallSiteInfo * arrayInfo, intptr_t arrayInfoAddr, intptr_t weakFuncRef, uint32 length, IR::LabelInstr* labelDone);",
          "",
          "[Added Lines]",
          "523:     IR::RegOpnd *   GenerateArrayAllocHelper(IR::Instr *instr, uint32 * psize, Js::ArrayCallSiteInfo * arrayInfo, bool * pIsHeadSegmentZeroed, bool isArrayObjCtor, bool isNoArgs);",
          "524:     template <typename ArrayType>",
          "525:     IR::RegOpnd *   GenerateArrayLiteralsAlloc(IR::Instr *instr, uint32 * psize, Js::ArrayCallSiteInfo * arrayInfo, bool * pIsHeadSegmentZeroed);",
          "526:     template <typename ArrayType>",
          "527:     IR::RegOpnd *   GenerateArrayObjectsAlloc(IR::Instr *instr, uint32 * psize, Js::ArrayCallSiteInfo * arrayInfo, bool * pIsHeadSegmentZeroed, bool isNoArgs);",
          "532:     void            GenerateProfiledNewScObjArrayFastPath(IR::Instr *instr, Js::ArrayCallSiteInfo * arrayInfo, intptr_t arrayInfoAddr, intptr_t weakFuncRef, uint32 length, IR::LabelInstr* labelDone, bool isNoArgs);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:         if (callInfo.Count < 2)",
          "1111:         {",
          "1122:             return isCtorSuperCall ?",
          "1123:                 JavascriptOperators::OrdinaryCreateFromConstructor(RecyclableObject::FromVar(newTarget), pNew, nullptr, scriptContext) :",
          "",
          "[Removed Lines]",
          "1112:             if (pNew == nullptr)",
          "1113:             {",
          "1115:                 pNew = CreateArrayFromConstructor(function, 0, scriptContext);",
          "1116:             }",
          "1117:             else",
          "1118:             {",
          "1119:                 pNew->SetLength((uint32)0);",
          "1120:             }",
          "",
          "[Added Lines]",
          "1113:             pNew = CreateArrayFromConstructorNoArg(function, scriptContext);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1138:                     JavascriptError::ThrowRangeError(scriptContext, JSERR_ArrayLengthConstructIncorrect);",
          "1139:                 }",
          "1149:             }",
          "1150:             else if (JavascriptNumber::Is_NoTaggedIntCheck(firstArgument))",
          "1151:             {",
          "",
          "[Removed Lines]",
          "1141:                 if (pNew == nullptr)",
          "1142:                 {",
          "1143:                     pNew = CreateArrayFromConstructor(function, elementCount, scriptContext);",
          "1144:                 }",
          "1145:                 else",
          "1146:                 {",
          "1147:                     pNew->SetLength(elementCount);",
          "1148:                 }",
          "",
          "[Added Lines]",
          "1134:                 pNew = CreateArrayFromConstructor(function, elementCount, scriptContext);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1157:                     JavascriptError::ThrowRangeError(scriptContext, JSERR_ArrayLengthConstructIncorrect);",
          "1158:                 }",
          "1168:             }",
          "1169:             else",
          "1170:             {",
          "",
          "[Removed Lines]",
          "1160:                 if (pNew == nullptr)",
          "1161:                 {",
          "1162:                     pNew = CreateArrayFromConstructor(function, uvalue, scriptContext);",
          "1163:                 }",
          "1164:                 else",
          "1165:                 {",
          "1166:                     pNew->SetLength(uvalue);",
          "1167:                 }",
          "",
          "[Added Lines]",
          "1146:                 pNew = CreateArrayFromConstructor(function, uvalue, scriptContext);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1182:                 JavascriptOperators::SetItem(pNew, pNew, 0u, firstArgument, scriptContext, PropertyOperation_ThrowIfNotExtensible);",
          "",
          "[Removed Lines]",
          "1177:                 if (pNew == nullptr)",
          "1178:                 {",
          "1179:                     pNew = CreateArrayFromConstructor(function, 1, scriptContext);",
          "1180:                 }",
          "",
          "[Added Lines]",
          "1156:                 pNew = CreateArrayFromConstructor(function, 1, scriptContext);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1193:         {",
          "1212:             pNew->JavascriptArray::FillFromArgs(callInfo.Count - 1, 0, args.Values);",
          "1213:         }",
          "",
          "[Removed Lines]",
          "1197:             if (pNew == nullptr)",
          "1198:             {",
          "1199:                 pNew = CreateArrayFromConstructor(function, callInfo.Count - 1, scriptContext);",
          "1200:             }",
          "1201:             else",
          "1202:             {",
          "1209:                 pNew->SetLength(callInfo.Count - 1);",
          "1210:             }",
          "",
          "[Added Lines]",
          "1172:             pNew = CreateArrayFromConstructor(function, callInfo.Count - 1, scriptContext);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1236: #if ENABLE_PROFILE_INFO",
          "1237:     Var JavascriptArray::ProfiledNewInstanceNoArg(RecyclableObject *function, ScriptContext *scriptContext, ArrayCallSiteInfo *arrayInfo, RecyclerWeakReference<FunctionBody> *weakFuncRef)",
          "",
          "[Removed Lines]",
          "1231:         JavascriptArray* arr = library->CreateArray(length);",
          "1233:         return arr;",
          "1234: }",
          "",
          "[Added Lines]",
          "1192:         return library->CreateArray(length);",
          "1193:     }",
          "1195:     JavascriptArray* JavascriptArray::CreateArrayFromConstructorNoArg(RecyclableObject* constructor, ScriptContext* scriptContext)",
          "1196:     {",
          "1197:         JavascriptLibrary* library = constructor->GetLibrary();",
          "1198:         return library->CreateArray();",
          "1199:     }",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h": [
          "File: lib/Runtime/Library/JavascriptArray.h -> lib/Runtime/Library/JavascriptArray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:         }",
          "381:         static JavascriptArray* CreateArrayFromConstructor(RecyclableObject* constructor, uint32 length, ScriptContext* scriptContext);",
          "383:         template<typename unitType, typename className>",
          "384:         static className* New(Recycler* recycler, DynamicType* arrayType);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382:         static JavascriptArray* CreateArrayFromConstructorNoArg(RecyclableObject* constructor, ScriptContext* scriptContext);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.inl||lib/Runtime/Library/JavascriptArray.inl": [
          "File: lib/Runtime/Library/JavascriptArray.inl -> lib/Runtime/Library/JavascriptArray.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:         size_t allocationPlusSize;",
          "159:         uint alignedInlineElementSlots;",
          "160:         DetermineAllocationSizeForArrayObjects<className, 0>(",
          "162:             &allocationPlusSize,",
          "163:             &alignedInlineElementSlots);",
          "164:         return RecyclerNewPlusZ(recycler, allocationPlusSize, className, type, alignedInlineElementSlots);",
          "",
          "[Removed Lines]",
          "161:             0,",
          "",
          "[Added Lines]",
          "161:             SparseArraySegmentBase::SMALL_CHUNK_SIZE,",
          "",
          "---------------"
        ]
      }
    }
  ]
}