{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a49774f478cdbc8f31e720f2cd871ed2543612df",
      "candidate_info": {
        "commit_hash": "a49774f478cdbc8f31e720f2cd871ed2543612df",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a49774f478cdbc8f31e720f2cd871ed2543612df",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Technical improvements to the documentation for sqlite3_bind_blob() and sqlite3_bind_text().  No changes to code.\n\nFossilOrigin-Name: fb60150aeedc3898cb249c75c98a7cb48fcec090f94ded7896b634e436c7daa5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 711f5ec4dc2635e3102a607510cbbe0b468d9f0af935e09d3454e6e925c8dcb2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "813ed78054b8d765631150fad12bd60cd437e263",
      "candidate_info": {
        "commit_hash": "813ed78054b8d765631150fad12bd60cd437e263",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/813ed78054b8d765631150fad12bd60cd437e263",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix a buffer overread in fts3 that could occur in a prefix query on a corrupted database.\n\nFossilOrigin-Name: d0d5689371577b2861d4a9464443d055f3256f3f51d89e0388233a4cbe2601ee",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2552:   if( !aOut ) return SQLITE_NOMEM;",
          "2554:   p = aOut;",
          "",
          "[Removed Lines]",
          "2551:   aOut = sqlite3_malloc64((sqlite3_int64)n1+n2+FTS3_VARINT_MAX-1);",
          "",
          "[Added Lines]",
          "2551:   aOut = sqlite3_malloc64((i64)n1+n2+FTS3_VARINT_MAX-1+FTS3_BUFFER_PADDING);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2577:   if( rc!=SQLITE_OK ){",
          "2578:     sqlite3_free(aOut);",
          "2579:     p = aOut = 0;",
          "2580:   }",
          "2584:   return rc;",
          "2585: }",
          "",
          "[Removed Lines]",
          "2583:   assert( *pnOut<=n1+n2+FTS3_VARINT_MAX-1 );",
          "",
          "[Added Lines]",
          "2580:   }else{",
          "2581:     assert( (p-aOut)<=n1+n2+FTS3_VARINT_MAX-1 );",
          "2582:     memset(&aOut[(p-aOut)], 0, FTS3_BUFFER_PADDING);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2d9cd06715092c312c8c0ec392696a0e90ed090b074e2082e0b830f1399aa941",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2151:   INSERT INTO t1(t1) VALUES('optimize');",
          "2152: } {1 {database disk image is malformed}}",
          "2154: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2154: #-------------------------------------------------------------------------",
          "2155: reset_db",
          "2156: do_execsql_test 15.0 {",
          "2157:   CREATE VIRTUAL TABLE t1 USING fts3(a, content=\"\");",
          "2158:   INSERT INTO t1_segdir VALUES(0,0,0,0,'0 665',X'000261640303040002086970697363696e670301080001056c6971756103020c00050269700304040001036d65740301060001036e6a6d03080900010375746503050300000663696c6c756d0306020001066f6d6d6f646f0304070002096e736563746574757203010700050471756174030408000104756c7061030804000207706964617461740307050000086465736572756e740308070001016f0302030002036c6f720601040004050005016506020a00040300010375697303050200000265610304060001066975736d6f640302040001036c69740301090001036e696d13030300010373736503050b0002017403080b0001017403020900010175030604000101780304050002076365707465757203070100020a65726369746174696f6e030309000006667567696174030605000002696403080a0001016e070506040003030002086369646964756e740302060001047073756d030103000104727572650305040000066c61626f7265030208000502697303030b000502756d03080c0001046f72656d0301020000056d61676e6103020b000104696e696d0303050001056f6c6c69740308080000046e6973690304020001026f6e0307060002057374727564030308000104756c6c610306060000086f636361656361740307040001066666696369610308060000087061726961747572030607000107726f6964656e740307070000037175690308050003017303030700000d726570726568656e6465726974030507000003736564030202000103696e7403070300020174030105000103756e7403080200000674656d706f72030205000007756c6c616d636f03030a0001017409020700010200010300000576656c697403050a0002046e69616d0303060001086f6c75707461746503050900');",
          "2159: }",
          "2161: do_execsql_test 15.1 {",
          "2162:   SELECT quote(matchinfo(t1, t1 ))==0 FROM t1 WHERE t1 MATCH 'e*';",
          "2163: } {0 0 0 0 0 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d92571d65393ae87f01f533eee2a6075b122efc",
      "candidate_info": {
        "commit_hash": "0d92571d65393ae87f01f533eee2a6075b122efc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0d92571d65393ae87f01f533eee2a6075b122efc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "test/check.test",
          "test/quote.test"
        ],
        "message": "Disallow string constants enclosed in double-quotes within new CREATE TABLE and CREATE INDEX statements. It is still possible to enclose column names in double-quotes, and existing database schemas that use double-quotes for strings can still be loaded. This addresses ticket [9b78184b].\n\nFossilOrigin-Name: 1685610ef8e0dc9218b02461ceab14dc6114f4f5ef7fcda0da395094aff443e1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/check.test||test/check.test",
          "test/quote.test||test/quote.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 99eba69b3a64741c69d167bf7a05dbe138c9e7faecc54a1b8d8220cb23902830",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:   if( cnt==0 && zTab==0 ){",
          "478:     assert( pExpr->op==TK_ID );",
          "",
          "[Removed Lines]",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted) ){",
          "",
          "[Added Lines]",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "480:      && 0==(pTopNC->ncFlags&NC_NewSchema)",
          "481:     ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1656: ){",
          "1658:   Walker w;",
          "1660:   if( pExpr==0 ) return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "1657:   u16 savedHasAgg;",
          "",
          "[Added Lines]",
          "1659:   int savedHasAgg;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1769:   sNC.pParse = pParse;",
          "1770:   sNC.pSrcList = &sSrc;",
          "1771:   sNC.ncFlags = type;",
          "1772:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "1773:   if( pList ) rc = sqlite3ResolveExprListNames(&sNC, pList);",
          "1774:   return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1774:   if( pTab && !pParse->db->init.busy && !sqlite3WritableSchema(pParse->db) ){",
          "1775:     sNC.ncFlags |= NC_NewSchema;",
          "1776:   }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: do_test check-2.1 {",
          "119:   execsql {",
          "120:     CREATE TABLE t2(",
          "121:       x INTEGER CONSTRAINT one CHECK( typeof(coalesce(x,0))==\"integer\" ),",
          "122:       y REAL CONSTRAINT two CHECK( typeof(coalesce(y,0.1))=='real' ),",
          "123:       z TEXT CONSTRAINT three CHECK( typeof(coalesce(z,''))=='text' )",
          "124:     );",
          "125:   }",
          "126: } {}",
          "127: do_test check-2.2 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:     PRAGMA writable_schema = 1;",
          "126:     PRAGMA writable_schema = 0;",
          "",
          "---------------"
        ],
        "test/quote.test||test/quote.test": [
          "File: test/quote.test -> test/quote.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "20: # Create a table with a strange name and with strange column names.",
          "21: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: set testprefix quote",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   } msg ]",
          "85:   lappend r $msg",
          "86: } {0 {}}",
          "89: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: #-------------------------------------------------------------------------",
          "90: # Check that it is not possible to use double-quotes for a string",
          "91: # constant in a CHECK constraint or CREATE INDEX statement. However,",
          "92: # SQLite can load such a schema from disk.",
          "93: #",
          "94: reset_db",
          "95: do_execsql_test 2.0 {",
          "96:   CREATE TABLE t1(x, y, z);",
          "97: }",
          "98: foreach {tn sql errname} {",
          "99:   1 { CREATE TABLE xyz(a, b, c CHECK (c!=\"null\") ) } null",
          "100:   2 { CREATE INDEX i2 ON t1(x, y, z||\"abc\") }        abc",
          "101:   3 { CREATE INDEX i3 ON t1(\"w\") }                   w",
          "102:   4 { CREATE INDEX i4 ON t1(x) WHERE z=\"w\" }         w",
          "103: } {",
          "104:   do_catchsql_test 2.1.$tn $sql [list 1 \"no such column: $errname\"]",
          "105: }",
          "107: do_execsql_test 2.2 {",
          "108:   PRAGMA writable_schema = 1;",
          "109:   CREATE TABLE xyz(a, b, c CHECK (c!=\"null\") );",
          "110:   CREATE INDEX i2 ON t1(x, y, z||\"abc\");",
          "111:   CREATE INDEX i3 ON t1(\"w\");",
          "112:   CREATE INDEX i4 ON t1(x) WHERE z=\"w\";",
          "113: }",
          "115: db close",
          "116: sqlite3 db test.db",
          "118: do_execsql_test 2.3.1 {",
          "119:   INSERT INTO xyz VALUES(1, 2, 3);",
          "120: }",
          "121: do_catchsql_test 2.3.2 {",
          "122:   INSERT INTO xyz VALUES(1, 2, 'null');",
          "123: } {1 {CHECK constraint failed: xyz}}",
          "125: do_execsql_test 2.4 {",
          "126:   INSERT INTO t1 VALUES(1, 2, 3);",
          "127:   INSERT INTO t1 VALUES(4, 5, 'w');",
          "128:   SELECT * FROM t1 WHERE z='w';",
          "129: } {4 5 w}",
          "130: do_execsql_test 2.5 {",
          "131:   SELECT sql FROM sqlite_master;",
          "132: } {",
          "133:   {CREATE TABLE t1(x, y, z)}",
          "134:   {CREATE TABLE xyz(a, b, c CHECK (c!=\"null\") )}",
          "135:   {CREATE INDEX i2 ON t1(x, y, z||\"abc\")}",
          "136:   {CREATE INDEX i3 ON t1(\"w\")}",
          "137:   {CREATE INDEX i4 ON t1(x) WHERE z=\"w\"}",
          "138: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48cd0f28c5a192a903cf717e0789f3402571333e",
      "candidate_info": {
        "commit_hash": "48cd0f28c5a192a903cf717e0789f3402571333e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/48cd0f28c5a192a903cf717e0789f3402571333e",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/tkt-80ba201079.test"
        ],
        "message": "Remove debugging pragmas accidently left in by a prior change.\n\nFossilOrigin-Name: 26275fc7e89eb2542a65d01fd271cef016a4a1815bc3845c599cf2f4fbf7513d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/tkt-80ba201079.test||test/tkt-80ba201079.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ccc4f7424bc8f37c168333091dd9e3d6f80ccff9e2b06f182df65be59a7e3349",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/tkt-80ba201079.test||test/tkt-80ba201079.test": [
          "File: test/tkt-80ba201079.test -> test/tkt-80ba201079.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: } {300 object_change 2048}",
          "111: do_test tkt-80ba2-201 {",
          "112:   db eval {",
          "115:     CREATE INDEX timeline_entry_id_idx on timeline(entry_id);",
          "116:     SELECT entry_type,",
          "117:            entry_types.name,",
          "",
          "[Removed Lines]",
          "113: PRAGMA vdbe_debug=on;",
          "114: PRAGMA vdbe_addoptrace=on;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b65e5919d3f36d807d9f50e5ef649eacc77e0fe",
      "candidate_info": {
        "commit_hash": "8b65e5919d3f36d807d9f50e5ef649eacc77e0fe",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b65e5919d3f36d807d9f50e5ef649eacc77e0fe",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/check.test",
          "test/checkfault.test"
        ],
        "message": "When processing a BETWEEN or CASE expression, avoid transforming a node of the original expression into a TK_REGISTER node. Instead, take a copy and use it instead. Fix for [1be72aab9].\n\nFossilOrigin-Name: 7ef7b23cbb1b9ace9f853238d9133320c153e6c3417e6823ab6394ee1fe56358",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/check.test||test/check.test",
          "test/checkfault.test||test/checkfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 84a51a755c18ac8253080db6eec505df894ee3b1e97cfa8e61039ac38001e270",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1086:   return EXPR_FULLSIZE;",
          "1087: }",
          "",
          "[Removed Lines]",
          "1094: static void exprNodeCopy(Expr *pDest, Expr *pSrc){",
          "1095:   memset(pDest, 0, sizeof(Expr));",
          "1096:   memcpy(pDest, pSrc, exprStructSize(pSrc));",
          "1097: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4052:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList );",
          "4053:       assert(pExpr->x.pList->nExpr > 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4041:       Expr *pDel = 0;",
          "4042:       sqlite3 *db = pParse->db;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4056:       nExpr = pEList->nExpr;",
          "4057:       endLabel = sqlite3VdbeMakeLabel(pParse);",
          "4058:       if( (pX = pExpr->pLeft)!=0 ){",
          "4060:         testcase( pX->op==TK_COLUMN );",
          "4062:         testcase( regFree1==0 );",
          "4063:         memset(&opCompare, 0, sizeof(opCompare));",
          "4064:         opCompare.op = TK_EQ;",
          "4066:         pTest = &opCompare;",
          "",
          "[Removed Lines]",
          "4059:         exprNodeCopy(&tempX, pX);",
          "4061:         exprToRegister(&tempX, exprCodeVector(pParse, &tempX, &regFree1));",
          "4065:         opCompare.pLeft = &tempX;",
          "",
          "[Added Lines]",
          "4051:         pDel = sqlite3ExprDup(db, pX, 0);",
          "4052:         if( db->mallocFailed ){",
          "4053:           sqlite3ExprDelete(db, pDel);",
          "4054:           break;",
          "4055:         }",
          "4057:         exprToRegister(pDel, exprCodeVector(pParse, pDel, &regFree1));",
          "4061:         opCompare.pLeft = pDel;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4090:       }else{",
          "4091:         sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "4092:       }",
          "4093:       sqlite3VdbeResolveLabel(v, endLabel);",
          "4094:       break;",
          "4095:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4089:       sqlite3ExprDelete(db, pDel);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4373: ){",
          "4380:   memset(&compLeft, 0, sizeof(Expr));",
          "4381:   memset(&compRight, 0, sizeof(Expr));",
          "4382:   memset(&exprAnd, 0, sizeof(Expr));",
          "4384:   assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "4406:   }",
          "4410:   testcase( xJump==sqlite3ExprIfTrue  && jumpIfNull==0 && regFree1==0 );",
          "",
          "[Removed Lines]",
          "4385:   exprNodeCopy(&exprX, pExpr->pLeft);",
          "4386:   exprAnd.op = TK_AND;",
          "4387:   exprAnd.pLeft = &compLeft;",
          "4388:   exprAnd.pRight = &compRight;",
          "4389:   compLeft.op = TK_GE;",
          "4390:   compLeft.pLeft = &exprX;",
          "4391:   compLeft.pRight = pExpr->x.pList->a[0].pExpr;",
          "4392:   compRight.op = TK_LE;",
          "4393:   compRight.pLeft = &exprX;",
          "4394:   compRight.pRight = pExpr->x.pList->a[1].pExpr;",
          "4395:   exprToRegister(&exprX, exprCodeVector(pParse, &exprX, &regFree1));",
          "4396:   if( xJump ){",
          "4397:     xJump(pParse, &exprAnd, dest, jumpIfNull);",
          "4398:   }else{",
          "4404:     exprX.flags |= EP_FromJoin;",
          "4405:     sqlite3ExprCodeTarget(pParse, &exprAnd, dest);",
          "4407:   sqlite3ReleaseTempReg(pParse, regFree1);",
          "",
          "[Added Lines]",
          "4375:   Expr *pDel = 0;",
          "4376:   sqlite3 *db = pParse->db;",
          "4383:   pDel = sqlite3ExprDup(db, pExpr->pLeft, 0);",
          "4384:   if( db->mallocFailed==0 ){",
          "4385:     exprAnd.op = TK_AND;",
          "4386:     exprAnd.pLeft = &compLeft;",
          "4387:     exprAnd.pRight = &compRight;",
          "4388:     compLeft.op = TK_GE;",
          "4389:     compLeft.pLeft = pDel;",
          "4390:     compLeft.pRight = pExpr->x.pList->a[0].pExpr;",
          "4391:     compRight.op = TK_LE;",
          "4392:     compRight.pLeft = pDel;",
          "4393:     compRight.pRight = pExpr->x.pList->a[1].pExpr;",
          "4394:     exprToRegister(pDel, exprCodeVector(pParse, pDel, &regFree1));",
          "4395:     if( xJump ){",
          "4396:       xJump(pParse, &exprAnd, dest, jumpIfNull);",
          "4397:     }else{",
          "4403:       pDel->flags |= EP_FromJoin;",
          "4404:       sqlite3ExprCodeTarget(pParse, &exprAnd, dest);",
          "4405:     }",
          "4406:     sqlite3ReleaseTempReg(pParse, regFree1);",
          "4408:   sqlite3ExprDelete(db, pDel);",
          "",
          "---------------"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:   PRAGMA integrity_check;",
          "496: } {ok}",
          "498: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498: #-------------------------------------------------------------------------",
          "499: reset_db",
          "500: do_execsql_test 11.0 {",
          "501:   CREATE TABLE t1 (Col0 CHECK(1 COLLATE BINARY BETWEEN 1 AND 1) ) ;",
          "502: }",
          "503: do_execsql_test 11.1 {",
          "504:   INSERT INTO t1 VALUES (NULL);",
          "505: }",
          "506: do_execsql_test 11.2 {",
          "507:   INSERT  INTO t1 VALUES (NULL);",
          "508: }",
          "510: do_execsql_test 11.3 {",
          "511:   CREATE TABLE t2(b, a CHECK(",
          "512:       CASE 'abc' COLLATE nocase WHEN a THEN 1 ELSE 0 END)",
          "513:   );",
          "514: }",
          "515: do_execsql_test 11.4 {",
          "516:   INSERT INTO t2(a) VALUES('abc');",
          "517: }",
          "518: do_execsql_test 11.5 {",
          "519:   INSERT INTO t2(b, a) VALUES(1, 'abc'||'');",
          "520: }",
          "521: do_execsql_test 11.6 {",
          "522:   INSERT INTO t2(b, a) VALUES(2, 'abc');",
          "523: }",
          "525: finish_test",
          "",
          "---------------"
        ],
        "test/checkfault.test||test/checkfault.test": [
          "File: test/checkfault.test -> test/checkfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 July 17",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # This file contains fault-injection test cases for the",
          "13: # sqlite3_db_cacheflush API.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: set testprefix cffault",
          "19: source $testdir/malloc_common.tcl",
          "21: do_execsql_test 1.0 {",
          "22:   CREATE TABLE t1 (Col0 CHECK(1 COLLATE BINARY BETWEEN 1 AND 1) ) ;",
          "23:   CREATE TABLE t2(b, a CHECK(",
          "24:       CASE 'abc' COLLATE nocase WHEN a THEN 1 ELSE 0 END)",
          "25:   );",
          "26: }",
          "28: do_faultsim_test 1.1 -faults oom* -body {",
          "29:   execsql { INSERT INTO t1 VALUES ('ABCDEFG') }",
          "30: } -test {",
          "31:   faultsim_test_result {0 {}}",
          "32: }",
          "34: do_faultsim_test 1.2 -faults oom* -body {",
          "35:   execsql { INSERT INTO t2(a) VALUES('abc') }",
          "36: } -test {",
          "37:   faultsim_test_result {0 {}}",
          "38: }",
          "41: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}