{
  "cve_id": "CVE-2016-7957",
  "cve_desc": "In Wireshark 2.2.0, the Bluetooth L2CAP dissector could crash, triggered by packet injection or a malformed capture file. This was addressed in epan/dissectors/packet-btl2cap.c by avoiding use of a seven-byte memcmp for potentially shorter strings.",
  "repo": "wireshark/wireshark",
  "patch_hash": "7be73201a044e8228de8e91a5f8708ebcd761015",
  "patch_info": {
    "commit_hash": "7be73201a044e8228de8e91a5f8708ebcd761015",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/7be73201a044e8228de8e91a5f8708ebcd761015",
    "files": [
      "epan/dissectors/packet-btl2cap.c"
    ],
    "message": "BTL2AP: compare strings with strcmp, not memcp\n\nOtherwise a string shorter than 7 characters will trigger an out of bounds access\n\nBug: 12825\nChange-Id: I54a7909d74838dcb56583374e5753f877ff74fe2\nReviewed-on: https://code.wireshark.org/review/17826\nReviewed-by: Michal Labedzki <michal.labedzki@tieto.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-btl2cap.c||epan/dissectors/packet-btl2cap.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-btl2cap.c||epan/dissectors/packet-btl2cap.c": [
      "File: epan/dissectors/packet-btl2cap.c -> epan/dissectors/packet-btl2cap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1889:             service_name = val_to_str_ext_const(uuid.bt_uuid, &bluetooth_uuid_vals_ext, \"Unknown\");",
      "1890:         }",
      "1893:             service_name = val_to_str_const(psm, psm_vals, \"Unknown\");",
      "1894:         }",
      "",
      "[Removed Lines]",
      "1892:         if (memcmp(service_name, \"Unknown\", 7) == 0) {",
      "",
      "[Added Lines]",
      "1891:         if (strcmp(service_name, \"Unknown\") == 0) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "355b56b1c6c545072ac0c1225730b526c6749f0a",
      "candidate_info": {
        "commit_hash": "355b56b1c6c545072ac0c1225730b526c6749f0a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/355b56b1c6c545072ac0c1225730b526c6749f0a",
        "files": [
          "epan/dissectors/packet-btl2cap.c"
        ],
        "message": "BTL2AP: compare strings with strcmp, not memcp\n\nOtherwise a string shorter than 7 characters will trigger an out of bounds access\n\nBug: 12825\nChange-Id: I54a7909d74838dcb56583374e5753f877ff74fe2\nReviewed-on: https://code.wireshark.org/review/17826\nReviewed-by: Michal Labedzki <michal.labedzki@tieto.com>\n(cherry picked from commit 7be73201a044e8228de8e91a5f8708ebcd761015)\nReviewed-on: https://code.wireshark.org/review/17828\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-btl2cap.c||epan/dissectors/packet-btl2cap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-btl2cap.c||epan/dissectors/packet-btl2cap.c"
          ],
          "candidate": [
            "epan/dissectors/packet-btl2cap.c||epan/dissectors/packet-btl2cap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-btl2cap.c||epan/dissectors/packet-btl2cap.c": [
          "File: epan/dissectors/packet-btl2cap.c -> epan/dissectors/packet-btl2cap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1561:             service_name = val_to_str_ext_const(uuid.bt_uuid, &bluetooth_uuid_vals_ext, \"Unknown\");",
          "1562:         }",
          "1565:             service_name = val_to_str_const(psm, psm_vals, \"Unknown\");",
          "1566:         }",
          "",
          "[Removed Lines]",
          "1564:         if (memcmp(service_name, \"Unknown\", 7) == 0) {",
          "",
          "[Added Lines]",
          "1563:         if (strcmp(service_name, \"Unknown\") == 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ac3d9a0f15405584a8c37d238302a7e0c5d958b",
      "candidate_info": {
        "commit_hash": "8ac3d9a0f15405584a8c37d238302a7e0c5d958b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/8ac3d9a0f15405584a8c37d238302a7e0c5d958b",
        "files": [
          "epan/dissectors/packet-btl2cap.c"
        ],
        "message": "Bluetooth: L2CAP: Improve tracing connects and disconnects\n\nAdd Connect in frame/Disconnect in frame jump-fields or Service/PSM\nis possible to know what current channel payload is.\n\nChange-Id: I6a06baaec50c5e54a1990ec8f29cf386910acc28\nReviewed-on: https://code.wireshark.org/review/11977\nReviewed-by: Michal Labedzki <michal.labedzki@tieto.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-btl2cap.c||epan/dissectors/packet-btl2cap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-btl2cap.c||epan/dissectors/packet-btl2cap.c"
          ],
          "candidate": [
            "epan/dissectors/packet-btl2cap.c||epan/dissectors/packet-btl2cap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-btl2cap.c||epan/dissectors/packet-btl2cap.c": [
          "File: epan/dissectors/packet-btl2cap.c -> epan/dissectors/packet-btl2cap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: static int hf_btl2cap_flags_reserved = -1;",
          "132: static int hf_btl2cap_flags_continuation = -1;",
          "133: static int hf_btl2cap_data = -1;",
          "134: static int hf_btl2cap_connect_in_frame = -1;",
          "135: static int hf_btl2cap_disconnect_in_frame = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: static int hf_btl2cap_service = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568: static int",
          "569: dissect_connrequest(tvbuff_t *tvb, int offset, packet_info *pinfo,",
          "572: {",
          "573:     guint16            scid;",
          "574:     guint16            psm;",
          "",
          "[Removed Lines]",
          "570:         proto_tree *tree, gboolean is_ch_request, bthci_acl_data_t *acl_data,",
          "571:         btl2cap_data_t *l2cap_data)",
          "",
          "[Added Lines]",
          "571:         proto_tree *tree, proto_tree *command_tree, gboolean is_ch_request,",
          "572:         bthci_acl_data_t *acl_data, btl2cap_data_t *l2cap_data)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "586:     }",
          "588:     if (psm < BTL2CAP_DYNAMIC_PSM_START) {",
          "590:         psm_str = val_to_str_const(psm, psm_vals, \"Unknown PSM\");",
          "591:     } else {",
          "592:         proto_item  *item;",
          "593:         guint16      uuid;",
          "597:         uuid = get_service_uuid(pinfo, l2cap_data, psm, (pinfo->p2p_dir == P2P_DIR_RECV) ? TRUE : FALSE);",
          "598:         if (uuid) {",
          "",
          "[Removed Lines]",
          "589:         proto_tree_add_item(tree, hf_btl2cap_psm, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "595:         item = proto_tree_add_item(tree, hf_btl2cap_psm_dynamic, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "590:         proto_tree_add_item(command_tree, hf_btl2cap_psm, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "596:         item = proto_tree_add_item(command_tree, hf_btl2cap_psm_dynamic, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "603:     offset += 2;",
          "605:     scid = tvb_get_letohs(tvb, offset);",
          "607:     offset += 2;",
          "609:     col_append_fstr(pinfo->cinfo, COL_INFO, \" (%s, SCID: 0x%04x)\", psm_str, scid);",
          "611:     if (is_ch_request) {",
          "613:         offset += 1;",
          "614:     }",
          "",
          "[Removed Lines]",
          "606:     proto_tree_add_item(tree, hf_btl2cap_scid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "612:         proto_tree_add_item(tree, hf_btl2cap_controller, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "607:     proto_tree_add_item(command_tree, hf_btl2cap_scid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "613:         proto_tree_add_item(command_tree, hf_btl2cap_controller, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "676:         wmem_tree_insert32_array(cid_to_psm_table, key, psm_data);",
          "677:     }",
          "678:     return offset;",
          "679: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "680:     if (l2cap_data) {",
          "681:         proto_item        *sub_item;",
          "682:         guint32            bt_uuid = 0;",
          "683:         guint32            disconnect_in_frame = 0;",
          "684:         psm_data_t        *psm_data;",
          "685:         wmem_tree_key_t    key[6];",
          "686:         guint32            k_interface_id;",
          "687:         guint32            k_adapter_id;",
          "688:         guint32            k_chandle;",
          "689:         guint32            k_cid;",
          "690:         guint32            k_frame_number;",
          "691:         guint32            interface_id;",
          "692:         guint32            adapter_id;",
          "693:         guint32            chandle;",
          "695:         if (pinfo->phdr->presence_flags & WTAP_HAS_INTERFACE_ID)",
          "696:             interface_id = pinfo->phdr->interface_id;",
          "697:         else",
          "698:             interface_id = HCI_INTERFACE_DEFAULT;",
          "699:         adapter_id   = (acl_data) ? acl_data->adapter_id : HCI_ADAPTER_DEFAULT;",
          "700:         chandle      = (acl_data) ? acl_data->chandle : 0;",
          "702:         k_interface_id = interface_id;",
          "703:         k_adapter_id   = adapter_id;",
          "704:         k_chandle      = chandle;",
          "705:         k_cid          = scid | ((pinfo->p2p_dir == P2P_DIR_RECV) ? 0x80000000 : 0x00000000);",
          "706:         k_frame_number = pinfo->fd->num;",
          "708:         key[0].length = 1;",
          "709:         key[0].key    = &k_interface_id;",
          "710:         key[1].length = 1;",
          "711:         key[1].key    = &k_adapter_id;",
          "712:         key[2].length = 1;",
          "713:         key[2].key    = &k_chandle;",
          "714:         key[3].length = 1;",
          "715:         key[3].key    = &k_cid;",
          "716:         key[4].length = 1;",
          "717:         key[4].key    = &k_frame_number;",
          "718:         key[5].length = 0;",
          "719:         key[5].key    = NULL;",
          "721:         psm_data = (psm_data_t *)wmem_tree_lookup32_array_le(cid_to_psm_table, key);",
          "722:         if (psm_data && psm_data->interface_id == interface_id &&",
          "723:                 psm_data->adapter_id == adapter_id &&",
          "724:                 psm_data->chandle == chandle &&",
          "725:                 psm_data->local_cid == k_cid) {",
          "726:             bt_uuid = get_service_uuid(pinfo, l2cap_data, psm_data->psm, psm_data->local_service);",
          "727:             disconnect_in_frame = psm_data->disconnect_in_frame;",
          "728:         }",
          "730:         if (bt_uuid) {",
          "731:             sub_item = proto_tree_add_uint(tree, hf_btl2cap_service, tvb, 0, 0, bt_uuid);",
          "732:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "733:         }",
          "735:         if (disconnect_in_frame < max_disconnect_in_frame) {",
          "736:             sub_item = proto_tree_add_uint(tree, hf_btl2cap_disconnect_in_frame, tvb, 0, 0, disconnect_in_frame);",
          "737:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "738:         }",
          "739:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1325: static int",
          "1326: dissect_disconnrequestresponse(tvbuff_t *tvb, int offset, packet_info *pinfo,",
          "1328: {",
          "1332:     dcid = tvb_get_letohs(tvb, offset);",
          "1334:     offset += 2;",
          "1336:     scid = tvb_get_letohs(tvb, offset);",
          "1338:     offset += 2;",
          "1342:     if (!pinfo->fd->flags.visited) {",
          "1343:         psm_data_t        *psm_data;",
          "1344:         wmem_tree_key_t    key[6];",
          "",
          "[Removed Lines]",
          "1327:         proto_tree *tree, bthci_acl_data_t *acl_data, gboolean is_request)",
          "1329:     guint16 scid;",
          "1330:     guint16 dcid;",
          "1333:     proto_tree_add_item(tree, hf_btl2cap_dcid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1337:     proto_tree_add_item(tree, hf_btl2cap_scid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1340:     col_append_fstr(pinfo->cinfo, COL_INFO, \" (SCID: 0x%04x, DCID: 0x%04x)\", scid, dcid);",
          "",
          "[Added Lines]",
          "1390:         proto_tree *tree, proto_tree *command_tree, bthci_acl_data_t *acl_data, btl2cap_data_t *l2cap_data,",
          "1391:         gboolean is_request)",
          "1393:     guint16       scid;",
          "1394:     guint16       dcid;",
          "1395:     guint         psm = 0;",
          "1396:     const gchar  *service_name = \"Unknown\";",
          "1399:     proto_tree_add_item(command_tree, hf_btl2cap_dcid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1403:     proto_tree_add_item(command_tree, hf_btl2cap_scid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1425:         }",
          "1426:     }",
          "1429:     return offset;",
          "1430: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1492:     if (l2cap_data) {",
          "1493:         proto_item        *sub_item;",
          "1494:         guint32            bt_uuid = 0;",
          "1495:         guint32            connect_in_frame = 0;",
          "1496:         psm_data_t        *psm_data;",
          "1497:         wmem_tree_key_t    key[6];",
          "1498:         guint32            k_interface_id;",
          "1499:         guint32            k_adapter_id;",
          "1500:         guint32            k_chandle;",
          "1501:         guint32            k_cid;",
          "1502:         guint32            k_frame_number;",
          "1503:         guint32            interface_id;",
          "1504:         guint32            adapter_id;",
          "1505:         guint32            chandle;",
          "1506:         guint32            key_dcid;",
          "1508:         if (pinfo->phdr->presence_flags & WTAP_HAS_INTERFACE_ID)",
          "1509:             interface_id = pinfo->phdr->interface_id;",
          "1510:         else",
          "1511:             interface_id = HCI_INTERFACE_DEFAULT;",
          "1512:         adapter_id   = (acl_data) ? acl_data->adapter_id : HCI_ADAPTER_DEFAULT;",
          "1513:         chandle      = (acl_data) ? acl_data->chandle : 0;",
          "1514:         if ((is_request && pinfo->p2p_dir == P2P_DIR_SENT) ||",
          "1515:                 (!is_request && pinfo->p2p_dir == P2P_DIR_RECV)) {",
          "1516:             key_dcid     = dcid | 0x80000000;",
          "1517:         } else {",
          "1518:             key_dcid     = scid | 0x80000000;",
          "1519:         }",
          "1521:         k_interface_id = interface_id;",
          "1522:         k_adapter_id   = adapter_id;",
          "1523:         k_chandle      = chandle;",
          "1524:         k_cid          = key_dcid;",
          "1525:         k_frame_number = pinfo->fd->num;",
          "1527:         key[0].length = 1;",
          "1528:         key[0].key    = &k_interface_id;",
          "1529:         key[1].length = 1;",
          "1530:         key[1].key    = &k_adapter_id;",
          "1531:         key[2].length = 1;",
          "1532:         key[2].key    = &k_chandle;",
          "1533:         key[3].length = 1;",
          "1534:         key[3].key    = &k_cid;",
          "1535:         key[4].length = 1;",
          "1536:         key[4].key    = &k_frame_number;",
          "1537:         key[5].length = 0;",
          "1538:         key[5].key    = NULL;",
          "1540:         psm_data = (psm_data_t *)wmem_tree_lookup32_array_le(cid_to_psm_table, key);",
          "1541:         if (psm_data && psm_data->interface_id == interface_id &&",
          "1542:                 psm_data->adapter_id == adapter_id &&",
          "1543:                 psm_data->chandle == chandle &&",
          "1544:                 psm_data->remote_cid == key_dcid) {",
          "1545:             psm = psm_data->psm;",
          "1546:             bt_uuid = get_service_uuid(pinfo, l2cap_data, psm_data->psm, psm_data->local_service);",
          "1547:             connect_in_frame = psm_data->connect_in_frame;",
          "1548:         }",
          "1550:         if (bt_uuid) {",
          "1551:             bluetooth_uuid_t   uuid;",
          "1553:             uuid.size = 2;",
          "1554:             uuid.bt_uuid = bt_uuid;",
          "1555:             uuid.data[0] = bt_uuid >> 8;",
          "1556:             uuid.data[1] = bt_uuid & 0xFF;",
          "1558:             service_name = val_to_str_ext_const(uuid.bt_uuid, &bluetooth_uuid_vals_ext, \"Unknown\");",
          "1559:         }",
          "1561:         if (memcmp(service_name, \"Unknown\", 7) == 0) {",
          "1562:             service_name = val_to_str_const(psm, psm_vals, \"Unknown\");",
          "1563:         }",
          "1565:         if (psm > 0) {",
          "1566:             sub_item = proto_tree_add_uint(tree, hf_btl2cap_psm, tvb, offset, 0, psm);",
          "1567:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "1568:         }",
          "1570:         if (bt_uuid) {",
          "1571:             sub_item = proto_tree_add_uint(tree, hf_btl2cap_service, tvb, 0, 0, bt_uuid);",
          "1572:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "1573:         }",
          "1575:         if (connect_in_frame > 0) {",
          "1576:             sub_item = proto_tree_add_uint(tree, hf_btl2cap_connect_in_frame, tvb, 0, 0, connect_in_frame);",
          "1577:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "1578:         }",
          "1579:     }",
          "1581:     if (psm > 0)",
          "1582:         col_append_fstr(pinfo->cinfo, COL_INFO, \" (SCID: 0x%04x, DCID: 0x%04x, PSM: 0x%04x, Service: %s)\", scid, dcid, psm, service_name);",
          "1583:     else",
          "1584:         col_append_fstr(pinfo->cinfo, COL_INFO, \" (SCID: 0x%04x, DCID: 0x%04x, PSM: Unknown, Service: %s)\", scid, dcid, service_name);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1836:                 break;",
          "1840:                 break;",
          "",
          "[Removed Lines]",
          "1839:                 offset  = dissect_connrequest(tvb, offset, pinfo, btl2cap_cmd_tree, FALSE, acl_data, l2cap_data);",
          "",
          "[Added Lines]",
          "1997:                 offset  = dissect_connrequest(tvb, offset, pinfo, btl2cap_tree, btl2cap_cmd_tree, FALSE, acl_data, l2cap_data);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1852:                 break;",
          "1856:                 break;",
          "1860:                 break;",
          "",
          "[Removed Lines]",
          "1855:                 offset  = dissect_disconnrequestresponse(tvb, offset, pinfo, btl2cap_cmd_tree, acl_data, TRUE);",
          "1859:                 offset  = dissect_disconnrequestresponse(tvb, offset, pinfo, btl2cap_cmd_tree, acl_data, FALSE);",
          "",
          "[Added Lines]",
          "2013:                 offset  = dissect_disconnrequestresponse(tvb, offset, pinfo, btl2cap_tree, btl2cap_cmd_tree, acl_data, l2cap_data, TRUE);",
          "2017:                 offset  = dissect_disconnrequestresponse(tvb, offset, pinfo, btl2cap_tree, btl2cap_cmd_tree, acl_data, l2cap_data, FALSE);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1878:                 break;",
          "1882:                 break;",
          "",
          "[Removed Lines]",
          "1881:                 offset  = dissect_connrequest(tvb, offset, pinfo, btl2cap_cmd_tree, TRUE, acl_data, l2cap_data);",
          "",
          "[Added Lines]",
          "2039:                 offset  = dissect_connrequest(tvb, offset, pinfo, btl2cap_tree, btl2cap_cmd_tree, TRUE, acl_data, l2cap_data);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2103:                 psm_data->disconnect_in_frame > pinfo->fd->num) {",
          "2104:             config_data_t  *config_data;",
          "2105:             proto_item     *sub_item;",
          "2107:             psm = psm_data->psm;",
          "2108:             l2cap_data->local_cid = psm_data->local_cid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2264:             guint32         bt_uuid;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2126:                 PROTO_ITEM_SET_GENERATED(sub_item);",
          "2127:             }",
          "2129:             if (config_data->mode == 0) {",
          "2130:                 offset = dissect_b_frame(tvb, pinfo, tree, btl2cap_tree, cid, psm, psm_data->local_service, length, offset, l2cap_data);",
          "2131:             } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2288:             bt_uuid = get_service_uuid(pinfo, l2cap_data, psm_data->psm, psm_data->local_service);",
          "2289:             if (bt_uuid) {",
          "2290:                 sub_item = proto_tree_add_uint(btl2cap_tree, hf_btl2cap_service, tvb, 0, 0, bt_uuid);",
          "2291:                 PROTO_ITEM_SET_GENERATED(sub_item);",
          "2292:             }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2603:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "2604:             NULL, HFILL }",
          "2605:         },",
          "2606:         { &hf_btl2cap_connect_in_frame,",
          "2607:             { \"Connect in frame\",                            \"btl2cap.connect_in\",",
          "2608:             FT_FRAMENUM, BASE_NONE, NULL, 0x0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2771:         { &hf_btl2cap_service,",
          "2772:           { \"Service\",           \"btl2cap.service\",",
          "2773:             FT_UINT16, BASE_HEX, VALS(bluetooth_uuid_vals), 0x0,",
          "2774:             NULL, HFILL }",
          "2775:         },",
          "",
          "---------------"
        ]
      }
    }
  ]
}