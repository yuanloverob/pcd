{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aed6d05d8c52345840379a0ca1a303da4eee5647",
      "candidate_info": {
        "commit_hash": "aed6d05d8c52345840379a0ca1a303da4eee5647",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/aed6d05d8c52345840379a0ca1a303da4eee5647",
        "files": [
          "mongoose.c"
        ],
        "message": "Do not test reassembled buffer for WS_OP_CLOSE\n\nPUBLISHED_FROM=0e8de208b553b63c8367f66893389587bd17359f",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8889:     }",
          "8893:       nc->flags |= MG_F_SEND_AND_CLOSE;",
          "8894:     }",
          "8895:   }",
          "",
          "[Removed Lines]",
          "8892:     if ((buf[0] & 0x0f) == WEBSOCKET_OP_CLOSE) {",
          "",
          "[Added Lines]",
          "8892:     if (!reass && (buf[0] & 0x0f) == WEBSOCKET_OP_CLOSE) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7a2e3deb11659341c99e9b68d49d7c23d2f67b4",
      "candidate_info": {
        "commit_hash": "a7a2e3deb11659341c99e9b68d49d7c23d2f67b4",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/a7a2e3deb11659341c99e9b68d49d7c23d2f67b4",
        "files": [
          "mongoose.c"
        ],
        "message": "Introduce  log filter\n\nPUBLISHED_FROM=b8f538f87e034452032284d45b78090338e87f72",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:   _LL_MAX = 5,",
          "224: };",
          "226: void cs_log_set_level(enum cs_log_level level);",
          "228: #if CS_ENABLE_STDIO",
          "230: void cs_log_set_file(FILE *file);",
          "233: void cs_log_printf(const char *fmt, ...)",
          "234: #ifdef __GNUC__",
          "235:     __attribute__((format(printf, 1, 2)))",
          "236: #endif",
          "237:     ;",
          "245:   } while (0)",
          "247: #ifndef CS_NDEBUG",
          "",
          "[Removed Lines]",
          "231: extern enum cs_log_level cs_log_threshold;",
          "232: void cs_log_print_prefix(enum cs_log_level level, const char *func);",
          "239: #define LOG(l, x)                       \\",
          "240:   do {                                  \\",
          "241:     if (cs_log_threshold >= l) {        \\",
          "242:       cs_log_print_prefix(l, __func__); \\",
          "243:       cs_log_printf x;                  \\",
          "244:     }                                   \\",
          "249: #define DBG(x)                                         \\",
          "250:   do {                                                 \\",
          "251:     if (cs_log_threshold >= LL_VERBOSE_DEBUG) {        \\",
          "252:       cs_log_print_prefix(LL_VERBOSE_DEBUG, __func__); \\",
          "253:       cs_log_printf x;                                 \\",
          "254:     }                                                  \\",
          "255:   } while (0)",
          "",
          "[Added Lines]",
          "230: void cs_log_set_filter(char *source_file_name);",
          "232: int cs_log_print_prefix(enum cs_log_level level, const char *func,",
          "233:                         const char *filename);",
          "235: extern enum cs_log_level cs_log_threshold;",
          "246: #define LOG(l, x)                                                    \\",
          "247:   do {                                                               \\",
          "248:     if (cs_log_print_prefix(l, __func__, __FILE__)) cs_log_printf x; \\",
          "253: #define DBG(x) LOG(LL_VERBOSE_DEBUG, x)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:     LL_ERROR;",
          "296: #endif",
          "298: #if CS_ENABLE_STDIO",
          "300: FILE *cs_log_file WEAK = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297: static char *s_filter_pattern = NULL;",
          "298: static size_t s_filter_pattern_len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306: enum cs_log_level cs_log_cur_msg_level WEAK = LL_NONE;",
          "310:   char prefix[21];",
          "311:   strncpy(prefix, func, 20);",
          "312:   prefix[20] = '\\0';",
          "313:   if (cs_log_file == NULL) cs_log_file = stderr;",
          "",
          "[Removed Lines]",
          "308: void cs_log_print_prefix(enum cs_log_level level, const char *func) WEAK;",
          "309: void cs_log_print_prefix(enum cs_log_level level, const char *func) {",
          "",
          "[Added Lines]",
          "310: void cs_log_set_filter(char *str) WEAK;",
          "311: void cs_log_set_filter(char *str) {",
          "312:   free(s_filter_pattern);",
          "313:   if (str != NULL) {",
          "314:     s_filter_pattern = strdup(str);",
          "315:     s_filter_pattern_len = strlen(str);",
          "316:   } else {",
          "317:     s_filter_pattern = NULL;",
          "318:     s_filter_pattern_len = 0;",
          "319:   }",
          "320: };",
          "322: int cs_log_print_prefix(enum cs_log_level, const char *, const char *) WEAK;",
          "323: int cs_log_print_prefix(enum cs_log_level level, const char *func,",
          "324:                         const char *filename) {",
          "327:   if (level > cs_log_threshold) return 0;",
          "328:   if (s_filter_pattern != NULL &&",
          "329:       mg_match_prefix(s_filter_pattern, s_filter_pattern_len, func) < 0 &&",
          "330:       mg_match_prefix(s_filter_pattern, s_filter_pattern_len, filename) < 0) {",
          "331:     return 0;",
          "332:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "320:     cs_log_ts = now;",
          "321:   }",
          "322: #endif",
          "323: }",
          "325: void cs_log_printf(const char *fmt, ...) WEAK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:   return 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddef0654939ee7f0b7eda454f5447351592b512f",
      "candidate_info": {
        "commit_hash": "ddef0654939ee7f0b7eda454f5447351592b512f",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/ddef0654939ee7f0b7eda454f5447351592b512f",
        "files": [
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Enable SNTP on CC3200\n\nPUBLISHED_FROM=cea0fc4db21f5b68fd3e779334989fef84a1637a",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12390: #ifndef __TI_COMPILER_VERSION__",
          "12392: #else",
          "12394: #endif",
          "12406:   return 0;",
          "12407: }",
          "",
          "[Removed Lines]",
          "12391: int _gettimeofday_r(struct _reent *r, struct timeval *tp, void *tzp) {",
          "12393: int gettimeofday(struct timeval *tp, void *tzp) {",
          "12395:   unsigned long long r1 = 0, r2;",
          "12397:   do {",
          "12398:     r2 = r1;",
          "12399:     r1 = PRCMSlowClkCtrFastGet();",
          "12400:   } while (r1 != r2);",
          "12402:   tp->tv_sec = (r1 >> 15);",
          "12405:   tp->tv_usec = (r1 & 0x7FFF) * 30;",
          "",
          "[Added Lines]",
          "12391: int _gettimeofday_r(struct _reent *r, struct timeval *tp, void *tz) {",
          "12393: int gettimeofday(struct timeval *tp, void *tz) {",
          "12395:   unsigned long sec;",
          "12396:   unsigned short msec;",
          "12397:   MAP_PRCMRTCGet(&sec, &msec);",
          "12398:   tp->tv_sec = sec;",
          "12399:   tp->tv_usec = ((unsigned long) msec) * 1000;",
          "12400:   return 0;",
          "12401: }",
          "12403: #ifndef __TI_COMPILER_VERSION__",
          "12404: int settimeofday(const struct timeval *tv, const struct timezone *tz) {",
          "12405: #else",
          "12406: int settimeofday(const struct timeval *tv, const void *tz) {",
          "12407: #endif",
          "12408:   MAP_PRCMRTCSet(tv->tv_sec, tv->tv_usec / 1000);",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "676: struct SlTimeval_t;",
          "677: #define timeval SlTimeval_t",
          "678: int gettimeofday(struct timeval *t, void *tz);",
          "680: int asprintf(char **strp, const char *fmt, ...);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "679: int settimeofday(const struct timeval *tv, const void *tz);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08a10a8af5684409c815fea3867512565496a534",
      "candidate_info": {
        "commit_hash": "08a10a8af5684409c815fea3867512565496a534",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/08a10a8af5684409c815fea3867512565496a534",
        "files": [
          "mongoose.c"
        ],
        "message": "Handle multiple MQTT messages per RECV event\n\nPUBLISHED_FROM=fc98c51254dd94d3f443fb66e49449da7d9e754c",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9741: MG_INTERNAL int parse_mqtt(struct mbuf *io, struct mg_mqtt_message *mm) {",
          "9742:   uint8_t header;",
          "9744:   int cmd;",
          "9747:   if (io->len < 2) return -1;",
          "9748:   header = io->buf[0];",
          "9749:   cmd = header >> 4;",
          "9756:   end = p + len;",
          "9758:     return -1;",
          "9759:   }",
          "",
          "[Removed Lines]",
          "9743:   size_t len = 0;",
          "9745:   const char *p = &io->buf[1], *end;",
          "9752:   do {",
          "9753:     len += (*p & 127) << 7 * (p - &io->buf[1]);",
          "9754:   } while ((*p++ & 128) != 0 && ((size_t)(p - io->buf) <= io->len));",
          "9757:   if (end > io->buf + io->len + 1) {",
          "",
          "[Added Lines]",
          "9743:   size_t len = 0, len_len = 0;",
          "9744:   const char *p, *end;",
          "9745:   unsigned char lc = 0;",
          "9753:   len = len_len = 0;",
          "9754:   p = io->buf + 1;",
          "9755:   while ((size_t)(p - io->buf) < io->len) {",
          "9756:     lc = *((const unsigned char *) p++);",
          "9757:     len += (lc & 0x7f) << 7 * len_len;",
          "9758:     len_len++;",
          "9759:     if (!(lc & 0x80) || (len_len > sizeof(len))) break;",
          "9760:   }",
          "9763:   if (lc & 0x80 || end > io->buf + io->len) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9830: static void mqtt_handler(struct mg_connection *nc, int ev,",
          "9831:                          void *ev_data MG_UD_ARG(void *user_data)) {",
          "9833:   struct mbuf *io = &nc->recv_mbuf;",
          "9834:   struct mg_mqtt_message mm;",
          "9835:   memset(&mm, 0, sizeof(mm));",
          "",
          "[Removed Lines]",
          "9832:   int len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9839:   switch (ev) {",
          "9840:     case MG_EV_RECV:",
          "9845:       break;",
          "9846:   }",
          "9847: }",
          "",
          "[Removed Lines]",
          "9841:       len = parse_mqtt(io, &mm);",
          "9843:       nc->handler(nc, MG_MQTT_EVENT_BASE + mm.cmd, &mm MG_UD_ARG(user_data));",
          "9844:       mbuf_remove(io, len);",
          "",
          "[Added Lines]",
          "9847:       while (1) {",
          "9848:         int len = parse_mqtt(io, &mm);",
          "9850:         nc->handler(nc, MG_MQTT_EVENT_BASE + mm.cmd, &mm MG_UD_ARG(user_data));",
          "9851:         mbuf_remove(io, len);",
          "9852:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a0b6fc35abd21031ad749a1180a6f63cd70b52a",
      "candidate_info": {
        "commit_hash": "5a0b6fc35abd21031ad749a1180a6f63cd70b52a",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/5a0b6fc35abd21031ad749a1180a6f63cd70b52a",
        "files": [
          "mongoose.c"
        ],
        "message": "Use SSL_CTX_{get,set}_app_data to store context\n\nh/t @hendrikw01\n\nFixes https://github.com/cesanta/mongoose/issues/826\nCloses https://github.com/cesanta/mongoose/pull/831\n\nPUBLISHED_FROM=d5e1285bee9bcbb85d581ee62972a2fde7d9c0db",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4407:                                           unsigned char *psk,",
          "4408:                                           unsigned int max_psk_len) {",
          "4409:   struct mg_ssl_if_ctx *ctx =",
          "4411:   size_t key_len = ctx->psk.len - ctx->identity_len - 1;",
          "4412:   DBG((\"hint: '%s'\", (hint ? hint : \"\")));",
          "4413:   if (ctx->identity_len + 1 > max_identity_len) {",
          "",
          "[Removed Lines]",
          "4410:       (struct mg_ssl_if_ctx *) ssl->ctx->msg_callback_arg;",
          "",
          "[Added Lines]",
          "4410:       (struct mg_ssl_if_ctx *) SSL_CTX_get_app_data(SSL_get_SSL_CTX(ssl));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4456:   mbuf_append(&ctx->psk, identity, ctx->identity_len + 1);",
          "4457:   mbuf_append(&ctx->psk, key, key_len);",
          "4458:   SSL_CTX_set_psk_client_callback(ctx->ssl_ctx, mg_ssl_if_ossl_psk_cb);",
          "4461:   return MG_SSL_OK;",
          "4462: }",
          "4463: #else",
          "",
          "[Removed Lines]",
          "4460:   ctx->ssl_ctx->msg_callback_arg = ctx;",
          "",
          "[Added Lines]",
          "4459:   SSL_CTX_set_app_data(ctx->ssl_ctx, ctx);",
          "",
          "---------------"
        ]
      }
    }
  ]
}