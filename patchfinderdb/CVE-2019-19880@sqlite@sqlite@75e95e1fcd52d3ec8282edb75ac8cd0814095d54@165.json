{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b10a50e7f829f7038242db6f52b557e7624df412",
      "candidate_info": {
        "commit_hash": "b10a50e7f829f7038242db6f52b557e7624df412",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b10a50e7f829f7038242db6f52b557e7624df412",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "In dbfuzz2, avoid using a malloc in the LLVMFuzzerInitialize() initializer routine, so that no memory leaks are reported.  Also, show the version of SQLite being used when the -v option is on.\n\nFossilOrigin-Name: 824f93246988ffa213bbd41a7de08886999b1a8ae00fdf6b9767acb6e3ec6a1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 97e723d746eeb2159f5bf1701532271ac6a4620879c82d496f4499c178b64479",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: int LLVMFuzzerInitialize(int *pArgc, char ***pArgv){",
          "135:   int i, j, n;",
          "136:   int argc = *pArgc;",
          "138:   char **argv = *pArgv;",
          "142:   for(i=j=1; i<argc; i++){",
          "143:     char *z = argv[i];",
          "144:     if( z[0]=='-' ){",
          "",
          "[Removed Lines]",
          "137:   char **newArgv;",
          "139:   newArgv = malloc( sizeof(char*)*(argc+1) );",
          "140:   if( newArgv==0 ) return 0;",
          "141:   newArgv[0] = argv[0];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:         continue;",
          "154:       }",
          "155:     }",
          "157:   }",
          "161:   return 0;",
          "162: }",
          "",
          "[Removed Lines]",
          "156:     newArgv[j++] = argv[i];",
          "158:   newArgv[j] = 0;",
          "",
          "[Added Lines]",
          "152:     argv[j++] = argv[i];",
          "154:   argv[j] = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:       free(pIn);",
          "203:     }",
          "204:   }",
          "205:   return 0;",
          "206: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:   if( eVerbosity>0 ){",
          "201:     printf(\"SQLite %s\\n\", sqlite3_sourceid());",
          "202:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1417c2f77f4c63d3a18bff4c21a933cfe4b5daee",
      "candidate_info": {
        "commit_hash": "1417c2f77f4c63d3a18bff4c21a933cfe4b5daee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1417c2f77f4c63d3a18bff4c21a933cfe4b5daee",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix the parse.sql output file so that it is readable into a database where foreign keys are enforced.\n\nFossilOrigin-Name: 3a82c554c3bde4640df6865686f8f70e2c1e07c581fed4772b6b0a8ec1b10bb6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0fab65c79f675c825ed7e85c82b65ce6f990c9d0796ebb3886942d241df7b268",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4189:       return;",
          "4190:     }",
          "4191:     fprintf(sql,",
          "4192:        \"CREATE TABLE symbol(\\n\"",
          "4193:        \"  id INTEGER PRIMARY KEY,\\n\"",
          "4194:        \"  name TEXT NOT NULL,\\n\"",
          "4195:        \"  isTerminal BOOLEAN NOT NULL,\\n\"",
          "4197:        \");\\n\"",
          "4198:     );",
          "4199:     for(i=0; i<lemp->nsymbol; i++){",
          "",
          "[Removed Lines]",
          "4196:        \"  fallback INTEGER REFERENCES symbol\\n\"",
          "",
          "[Added Lines]",
          "4192:        \"BEGIN;\\n\"",
          "4197:        \"  fallback INTEGER REFERENCES symbol\"",
          "4198:                \" DEFERRABLE INITIALLY DEFERRED\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4244:         }",
          "4245:       }",
          "4246:     }",
          "4247:   }",
          "4248:   lineno = 1;",
          "4249:   tplt_xfer(lemp->name,in,out,&lineno);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4249:     fprintf(sql, \"COMMIT;\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3e3a5bb5714b10a98212139280aa976a3fbbd4c",
      "candidate_info": {
        "commit_hash": "b3e3a5bb5714b10a98212139280aa976a3fbbd4c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b3e3a5bb5714b10a98212139280aa976a3fbbd4c",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid reading outside a record buffer when extracting an SQL value in the sqlite_dbdata virtual table code.\n\nFossilOrigin-Name: d99bb0c11d62f629bf59da037827af73a9b814e65815006e0cbca1bc41f42e25",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:     case 7:",
          "383:       return 8;",
          "384:     default:",
          "386:   }",
          "387: }",
          "",
          "[Removed Lines]",
          "385:       return ((eType-12) / 2);",
          "",
          "[Added Lines]",
          "385:       if( eType>0 ){",
          "386:         return ((eType-12) / 2);",
          "387:       }",
          "388:       return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426:       }",
          "436:       }",
          "437:     }",
          "438:   }",
          "439: }",
          "",
          "[Removed Lines]",
          "393: static void dbdataValue(sqlite3_context *pCtx, int eType, u8 *pData){",
          "394:   switch( eType ){",
          "395:     case 0:",
          "396:     case 10:",
          "397:     case 11:",
          "398:       sqlite3_result_null(pCtx);",
          "399:       break;",
          "401:     case 8:",
          "402:       sqlite3_result_int(pCtx, 0);",
          "403:       break;",
          "404:     case 9:",
          "405:       sqlite3_result_int(pCtx, 1);",
          "406:       break;",
          "408:     case 1: case 2: case 3: case 4: case 5: case 6: case 7: {",
          "409:       sqlite3_uint64 v = (signed char)pData[0];",
          "410:       pData++;",
          "411:       switch( eType ){",
          "412:         case 7:",
          "413:         case 6:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "414:         case 5:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "415:         case 4:  v = (v<<8) + pData[0];  pData++;",
          "416:         case 3:  v = (v<<8) + pData[0];  pData++;",
          "417:         case 2:  v = (v<<8) + pData[0];  pData++;",
          "418:       }",
          "420:       if( eType==7 ){",
          "421:         double r;",
          "422:         memcpy(&r, &v, sizeof(r));",
          "423:         sqlite3_result_double(pCtx, r);",
          "424:       }else{",
          "425:         sqlite3_result_int64(pCtx, (sqlite3_int64)v);",
          "427:       break;",
          "428:     }",
          "430:     default: {",
          "431:       int n = ((eType-12) / 2);",
          "432:       if( eType % 2 ){",
          "433:         sqlite3_result_text(pCtx, (const char*)pData, n, SQLITE_TRANSIENT);",
          "434:       }else{",
          "435:         sqlite3_result_blob(pCtx, pData, n, SQLITE_TRANSIENT);",
          "",
          "[Added Lines]",
          "396: static void dbdataValue(",
          "397:   sqlite3_context *pCtx,",
          "398:   int eType,",
          "399:   u8 *pData,",
          "400:   int nData",
          "401: ){",
          "402:   if( eType>=0 && dbdataValueBytes(eType)<=nData ){",
          "403:     switch( eType ){",
          "404:       case 0:",
          "405:       case 10:",
          "406:       case 11:",
          "407:         sqlite3_result_null(pCtx);",
          "408:         break;",
          "410:       case 8:",
          "411:         sqlite3_result_int(pCtx, 0);",
          "412:         break;",
          "413:       case 9:",
          "414:         sqlite3_result_int(pCtx, 1);",
          "415:         break;",
          "417:       case 1: case 2: case 3: case 4: case 5: case 6: case 7: {",
          "418:         sqlite3_uint64 v = (signed char)pData[0];",
          "419:         pData++;",
          "420:         switch( eType ){",
          "421:           case 7:",
          "422:           case 6:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "423:           case 5:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "424:           case 4:  v = (v<<8) + pData[0];  pData++;",
          "425:           case 3:  v = (v<<8) + pData[0];  pData++;",
          "426:           case 2:  v = (v<<8) + pData[0];  pData++;",
          "427:         }",
          "429:         if( eType==7 ){",
          "430:           double r;",
          "431:           memcpy(&r, &v, sizeof(r));",
          "432:           sqlite3_result_double(pCtx, r);",
          "433:         }else{",
          "434:           sqlite3_result_int64(pCtx, (sqlite3_int64)v);",
          "435:         }",
          "436:         break;",
          "439:       default: {",
          "440:         int n = ((eType-12) / 2);",
          "441:         if( eType % 2 ){",
          "442:           sqlite3_result_text(pCtx, (const char*)pData, n, SQLITE_TRANSIENT);",
          "443:         }else{",
          "444:           sqlite3_result_blob(pCtx, pData, n, SQLITE_TRANSIENT);",
          "445:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "728:         }else{",
          "729:           sqlite3_int64 iType;",
          "730:           dbdataGetVarint(pCsr->pHdrPtr, &iType);",
          "732:         }",
          "733:         break;",
          "734:       }",
          "",
          "[Removed Lines]",
          "731:           dbdataValue(ctx, iType, pCsr->pPtr);",
          "",
          "[Added Lines]",
          "740:           dbdataValue(",
          "741:               ctx, iType, pCsr->pPtr, &pCsr->pRec[pCsr->nRec] - pCsr->pPtr",
          "742:           );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ec9373031d76b34163a45d0ed05e43c0c9d585c8d47aa255f670340673bc7875",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
      "candidate_info": {
        "commit_hash": "0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree1.test",
          "ext/rtree/rtree2.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "In the rtree extension, actively suppress extra tokens on the column names, and be pedantic about column affinities.  Ticket [367a86e28859f1ff]\n\nFossilOrigin-Name: 97fb5a72f91a44d579466e67c33aa862384c4d1c95c2010cf4ae9dbd172bbcfb",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "ext/rtree/rtree2.test||ext/rtree/rtree2.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3661:   return rc;",
          "3662: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3668: static int rtreeTokenLength(const char *z){",
          "3669:   int dummy = 0;",
          "3670:   return sqlite3GetToken((const unsigned char*)z,&dummy);",
          "3671: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3728:   pSql = sqlite3_str_new(db);",
          "3730:   for(ii=4; ii<argc; ii++){",
          "3732:       pRtree->nAux++;",
          "3734:     }else if( pRtree->nAux>0 ){",
          "3735:       break;",
          "3736:     }else{",
          "3737:       pRtree->nDim2++;",
          "3739:     }",
          "3740:   }",
          "3741:   sqlite3_str_appendf(pSql, \");\");",
          "",
          "[Removed Lines]",
          "3729:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%s INT\", argv[3]);",
          "3731:     if( argv[ii][0]=='+' ){",
          "3733:       sqlite3_str_appendf(pSql, \",%s\", argv[ii]+1);",
          "3738:       sqlite3_str_appendf(pSql, \",%s\", argv[ii]);",
          "",
          "[Added Lines]",
          "3738:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%.*s INT\",",
          "3739:                       rtreeTokenLength(argv[3]), argv[3]);",
          "3741:     const char *zArg = argv[ii];",
          "3742:     if( zArg[0]=='+' ){",
          "3744:       sqlite3_str_appendf(pSql, \",%s\", zArg+1);",
          "3749:       sqlite3_str_appendf(pSql, \",%.*s NUM\", rtreeTokenLength(zArg), zArg);",
          "",
          "---------------"
        ],
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "705:   REINDEX;",
          "706: } {}",
          "708: expand_all_sql db",
          "709: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708: reset_db",
          "709: do_execsql_test 18.0 {",
          "710:   CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
          "711:   INSERT INTO rt0(c0,c1,c2) VALUES(9,2,3);",
          "712:   SELECT c0 FROM rt0 WHERE rt0.c1 > '-1';",
          "713:   SELECT rt0.c1 > '-1' FROM rt0;",
          "714: } {9 1}",
          "",
          "---------------"
        ],
        "ext/rtree/rtree2.test||ext/rtree/rtree2.test": [
          "File: ext/rtree/rtree2.test -> ext/rtree/rtree2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: }",
          "35: foreach module {rtree_i32 rtree} {",
          "36:   for {set nDim 1} {$nDim <= 5} {incr nDim} {",
          "38:     do_test rtree2-$module.$nDim.1 {",
          "39:       set cols [list]",
          "40:       foreach c [list c0 c1 c2 c3 c4 c5 c6 c7 c8 c9] {",
          "42:       }",
          "43:       set cols [join [lrange $cols 0 [expr {$nDim*2-1}]] \", \"]",
          "44:       execsql \"",
          "",
          "[Removed Lines]",
          "41:         lappend cols \"$c REAL\"",
          "",
          "[Added Lines]",
          "36:   if {$module==\"rtree_i32\"} {set etype INT} {set etype REAL}",
          "42:         lappend cols \"$c $etype\"",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 62f2235adf796c72882b26313489cf49804ec3ec4972e0eee5034176cbb07f84",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aaad696141fdb4d72e9c8289e7d9183f9493c23f",
      "candidate_info": {
        "commit_hash": "aaad696141fdb4d72e9c8289e7d9183f9493c23f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aaad696141fdb4d72e9c8289e7d9183f9493c23f",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/showdb.c"
        ],
        "message": "Fix a potential 32-bit integer overflow in the \"showdb\" utility program when it is trying to interpret a corrupt database file.\n\nFossilOrigin-Name: 3803e750384ec37091b0a6c350f8ef67720e316fd6f74c95e3c5f231c4a01ceb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/showdb.c||tool/showdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 38d2e510cdedf38153466b161c0842b1604aef7b5589c51f628ae7cbb6a8722a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/showdb.c||tool/showdb.c": [
          "File: tool/showdb.c -> tool/showdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "828:     while( ovfl && (cnt++)<g.mxPage ){",
          "829:       page_usage_msg(ovfl, \"overflow %d from cell %d of page %d\",",
          "830:                      cnt, cellno, pgno);",
          "832:       ovfl = decodeInt32(a);",
          "833:       sqlite3_free(a);",
          "834:     }",
          "",
          "[Removed Lines]",
          "831:       a = fileRead((ovfl-1)*g.pagesize, 4);",
          "",
          "[Added Lines]",
          "831:       a = fileRead((ovfl-1)*(sqlite3_int64)g.pagesize, 4);",
          "",
          "---------------"
        ]
      }
    }
  ]
}