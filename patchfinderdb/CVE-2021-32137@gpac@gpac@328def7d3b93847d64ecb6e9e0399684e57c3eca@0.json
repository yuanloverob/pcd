{
  "cve_id": "CVE-2021-32137",
  "cve_desc": "Heap buffer overflow in the URL_GetProtocolType function in MP4Box in GPAC 1.0.1 allows attackers to cause a denial of service or execute arbitrary code via a crafted file.",
  "repo": "gpac/gpac",
  "patch_hash": "328def7d3b93847d64ecb6e9e0399684e57c3eca",
  "patch_info": {
    "commit_hash": "328def7d3b93847d64ecb6e9e0399684e57c3eca",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/328def7d3b93847d64ecb6e9e0399684e57c3eca",
    "files": [
      "src/isomedia/media.c"
    ],
    "message": "fixed #1766 (fuzz)",
    "before_after_code_files": [
      "src/isomedia/media.c||src/isomedia/media.c"
    ]
  },
  "patch_diff": {
    "src/isomedia/media.c||src/isomedia/media.c": [
      "File: src/isomedia/media.c -> src/isomedia/media.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "685:  if (entry->flags == 1) return GF_OK;",
      "690:  if (mdia->mediaTrack->moov->mov->openMode == GF_ISOM_OPEN_WRITE) {",
      "691:   e = gf_isom_datamap_new(entry->location, NULL, GF_ISOM_DATA_MAP_READ, &map);",
      "692:  } else {",
      "",
      "[Removed Lines]",
      "689:  if (entry->type == GF_ISOM_BOX_TYPE_URN) return GF_NOT_SUPPORTED;",
      "",
      "[Added Lines]",
      "688:  if ((entry->type != GF_ISOM_BOX_TYPE_URL) && (entry->type != GF_QT_BOX_TYPE_ALIS) )",
      "689:   return GF_NOT_SUPPORTED;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c4aa245659caee8ac60d2cbe775d3102c45d44ce",
      "candidate_info": {
        "commit_hash": "c4aa245659caee8ac60d2cbe775d3102c45d44ce",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/c4aa245659caee8ac60d2cbe775d3102c45d44ce",
        "files": [
          "include/gpac/internal/isomedia_dev.h",
          "src/compositor/media_object.c",
          "src/isomedia/box_code_meta.c",
          "src/isomedia/box_dump.c",
          "src/isomedia/box_funcs.c",
          "src/isomedia/isom_write.c",
          "src/isomedia/media.c",
          "src/media_tools/isom_tools.c",
          "testsuite"
        ],
        "message": "early detect qt-style meta when parsing and write meta as QT for mov output",
        "before_after_code_files": [
          "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
          "src/compositor/media_object.c||src/compositor/media_object.c",
          "src/isomedia/box_code_meta.c||src/isomedia/box_code_meta.c",
          "src/isomedia/box_dump.c||src/isomedia/box_dump.c",
          "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
          "src/isomedia/isom_write.c||src/isomedia/isom_write.c",
          "src/isomedia/media.c||src/isomedia/media.c",
          "src/media_tools/isom_tools.c||src/media_tools/isom_tools.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/media.c||src/isomedia/media.c"
          ],
          "candidate": [
            "src/isomedia/media.c||src/isomedia/media.c"
          ]
        }
      },
      "candidate_diff": {
        "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h": [
          "File: include/gpac/internal/isomedia_dev.h -> include/gpac/internal/isomedia_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:  GF_QT_BOX_TYPE_FIEL = GF_4CC('f','i','e','l'),",
          "487:  GF_QT_BOX_TYPE_GAMA = GF_4CC('g','a','m','a'),",
          "488:  GF_QT_BOX_TYPE_CHRM = GF_4CC('c','h','r','m'),",
          "491:  GF_ISOM_BOX_TYPE_264B  = GF_4CC('2','6','4','b'),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:  GF_QT_BOX_TYPE_STPS = GF_4CC('s','t','p','s'),",
          "490:  GF_QT_BOX_TYPE_CIOS = GF_4CC('c','i','o','s'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2506:  GF_ItemReferenceBox *item_refs;",
          "2507:  GF_GroupListBox *groups_list;",
          "2510: } GF_MetaBox;",
          "2512: typedef struct",
          "",
          "[Removed Lines]",
          "2509:  u8 use_item_sample_sharing, use_item_item_sharing;",
          "",
          "[Added Lines]",
          "2511:  u8 use_item_sample_sharing, use_item_item_sharing, write_qt;",
          "",
          "---------------"
        ],
        "src/compositor/media_object.c||src/compositor/media_object.c": [
          "File: src/compositor/media_object.c -> src/compositor/media_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "647:   gf_filter_pid_try_pull(mo->odm->pid);",
          "648:  }",
          "649:  if (!retry_pull && (force_decode_mode==1)) {",
          "651:  }",
          "",
          "[Removed Lines]",
          "650:   GF_LOG(GF_LOG_INFO, GF_LOG_COMPTIME, (\"[ODM%d] At %d could not force a pull from pid - POTENTIAL blank frame after TS %u\\n\", mo->odm->ID, gf_clock_time(mo->odm->ck), mo->timestamp));",
          "",
          "[Added Lines]",
          "650:   GF_LOG(GF_LOG_INFO, GF_LOG_COMPTIME, (\"[ODM%d] Could not force a pull from pid - POTENTIAL blank frame after TS %u\\n\", mo->odm->ID, mo->timestamp));",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_meta.c||src/isomedia/box_code_meta.c": [
          "File: src/isomedia/box_code_meta.c -> src/isomedia/box_code_meta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: GF_Err meta_box_read(GF_Box *s, GF_BitStream *bs)",
          "103: {",
          "104:  u64 pos = gf_bs_get_position(bs);",
          "105:  u64 size = s->size;",
          "110:   meta_reset(s);",
          "111:   s->size = size+4;",
          "112:   e = gf_isom_box_array_read(s, bs);",
          "",
          "[Removed Lines]",
          "106:  GF_Err e = gf_isom_box_array_read(s, bs);",
          "108:  if (e && (pos>4) ) {",
          "109:   gf_bs_seek(bs, pos-4);",
          "",
          "[Added Lines]",
          "104:  GF_MetaBox *ptr = (GF_MetaBox *)s;",
          "108:  u32 qt_type = (pos>8) ? gf_bs_peek_bits(bs, 32, 4) : 0;",
          "109:  switch (qt_type) {",
          "110:  case GF_4CC('h', 'd', 'l', 'r'):",
          "111:  case GF_4CC('m', 'h', 'd', 'r'):",
          "112:  case GF_4CC('k', 'e', 'y', 's'):",
          "113:  case GF_4CC('i', 'l', 's', 't'):",
          "114:  case GF_4CC('c', 't', 'r', 'y'):",
          "115:  case GF_4CC('l', 'a', 'n', 'g'):",
          "116:   break;",
          "117:  default:",
          "118:   qt_type = 0;",
          "119:   break;",
          "120:  }",
          "121:  GF_Err e = GF_EOS;",
          "122:  if (!qt_type) {",
          "123:   ISOM_DECREASE_SIZE(s, 4)",
          "124:   ptr->version = gf_bs_read_u8(bs);",
          "125:   ptr->flags = gf_bs_read_u24(bs);",
          "126:   e = gf_isom_box_array_read(s, bs);",
          "127:  }",
          "130:  if (e && (pos>8) ) {",
          "131:   gf_bs_seek(bs, pos);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "118: GF_Err meta_box_write(GF_Box *s, GF_BitStream *bs)",
          "119: {",
          "120:  return gf_isom_full_box_write(s, bs);",
          "121: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:  GF_MetaBox *ptr = (GF_MetaBox *)s;",
          "143:  if (ptr->write_qt) {",
          "144:   return gf_isom_box_write_header(s, bs);",
          "145:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:  gf_isom_check_position(s, (GF_Box *)ptr->item_refs, &pos);",
          "135:  gf_isom_check_position(s, (GF_Box *)ptr->item_props, &pos);",
          "136:  gf_isom_check_position(s, (GF_Box *)ptr->groups_list, &pos);",
          "137:  return GF_OK;",
          "138: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:  if (!ptr->write_qt)",
          "165:   s->size+=4;",
          "",
          "---------------"
        ],
        "src/isomedia/box_dump.c||src/isomedia/box_dump.c": [
          "File: src/isomedia/box_dump.c -> src/isomedia/box_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1206: {",
          "1207:  GF_SyncSampleBox *p;",
          "1208:  u32 i;",
          "1210:  if (dump_skip_samples)",
          "1211:   return GF_OK;",
          "1213:  p = (GF_SyncSampleBox *)a;",
          "1215:  gf_fprintf(trace, \"EntryCount=\\\"%d\\\">\\n\", p->nb_entries);",
          "1217:  if (!p->sampleNumbers && p->size) {",
          "1219:  } else if (p->sampleNumbers) {",
          "1220:   for (i=0; i<p->nb_entries; i++) {",
          "1222:   }",
          "1223:  }",
          "1224:  if (!p->size) {",
          "1226:  }",
          "1228:  return GF_OK;",
          "1229: }",
          "",
          "[Removed Lines]",
          "1214:  gf_isom_box_dump_start(a, \"SyncSampleBox\", trace);",
          "1218:   gf_fprintf(trace, \"<!--Warning: No Key Frames indications-->\\n\");",
          "1221:    gf_fprintf(trace, \"<SyncSampleEntry sampleNumber=\\\"%u\\\"/>\\n\", p->sampleNumbers[i]);",
          "1225:    gf_fprintf(trace, \"<SyncSampleEntry sampleNumber=\\\"\\\"/>\\n\");",
          "1227:  gf_isom_box_dump_done(\"SyncSampleBox\", a, trace);",
          "",
          "[Added Lines]",
          "1209:  const char *name, *entname;",
          "1215:  if (a->type==GF_ISOM_BOX_TYPE_STSS) {",
          "1216:   name = \"SyncSampleBox\";",
          "1217:   entname = \"SyncSampleEntry\";",
          "1218:  } else {",
          "1219:   name = \"PartialSyncSampleBox\";",
          "1220:   entname = \"PartialSyncSampleEntry\";",
          "1221:  }",
          "1222:  gf_isom_box_dump_start(a, name, trace);",
          "1226:   if (a->type==GF_ISOM_BOX_TYPE_STSS)",
          "1227:    gf_fprintf(trace, \"<!--Warning: No Key Frames indications-->\\n\");",
          "1230:    gf_fprintf(trace, \"<%s sampleNumber=\\\"%u\\\"/>\\n\", entname, p->sampleNumbers[i]);",
          "1234:    gf_fprintf(trace, \"<%s sampleNumber=\\\"\\\"/>\\n\", entname);",
          "1236:  gf_isom_box_dump_done(name, a, trace);",
          "",
          "---------------"
        ],
        "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c": [
          "File: src/isomedia/box_funcs.c -> src/isomedia/box_funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1077:  BOX_DEFINE( GF_ISOM_BOX_TYPE_BTRT, btrt, \"sample_entry\"),",
          "1078:  BOX_DEFINE( GF_ISOM_BOX_TYPE_PASP, pasp, \"video_sample_entry ipco\"),",
          "1079:  BOX_DEFINE( GF_ISOM_BOX_TYPE_CLAP, clap, \"video_sample_entry ipco\"),",
          "1081:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_XML, xml, \"meta\", 0),",
          "1082:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_BXML, bxml, \"meta\", 0),",
          "1083:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_ILOC, iloc, \"meta\", 2),",
          "",
          "[Removed Lines]",
          "1080:  FBOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_META, meta, \"file moov trak moof traf udta\", 0), //apple uses meta in moov->udta",
          "",
          "[Added Lines]",
          "1080:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_META, meta, \"file moov trak moof traf udta\"), //apple uses meta in moov->udta",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1455:  BOX_DEFINE_S(GF_QT_BOX_TYPE_TAPT, def_parent, \"trak\", \"apple\"),",
          "1456:  FBOX_DEFINE_S( GF_QT_BOX_TYPE_GMIN, gmin, \"gmhd\", 0, \"apple\"),",
          "1457:  FBOX_DEFINE_FLAGS_S( GF_QT_BOX_TYPE_ALIS, alis, \"dref\", 0, 1, \"apple\"),",
          "1458:  FBOX_DEFINE_S( GF_QT_BOX_TYPE_CLEF, clef, \"tapt\", 0, \"apple\"),",
          "1459:  FBOX_DEFINE_S( GF_QT_BOX_TYPE_PROF, clef, \"tapt\", 0, \"apple\"),",
          "1460:  FBOX_DEFINE_S( GF_QT_BOX_TYPE_ENOF, clef, \"tapt\", 0, \"apple\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1458:  FBOX_DEFINE_FLAGS_S( GF_QT_BOX_TYPE_CIOS, alis, \"dref\", 0, 1, \"apple\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1513:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_RGBA, video_sample_entry, \"stsd\", \"apple\"),",
          "1514:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_ABGR, video_sample_entry, \"stsd\", \"apple\"),",
          "1518:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_AC3, audio_sample_entry, \"stsd\", \"dolby\"),",
          "1519:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_EC3, audio_sample_entry, \"stsd\", \"dolby\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1517:  FBOX_DEFINE_S(GF_QT_BOX_TYPE_STPS, stss, \"stbl\", 0, \"apple\"),",
          "",
          "---------------"
        ],
        "src/isomedia/isom_write.c||src/isomedia/isom_write.c": [
          "File: src/isomedia/isom_write.c -> src/isomedia/isom_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4269:   Bool use_alis = GF_FALSE;",
          "4270:   if (! (flags & GF_ISOM_CLONE_TRACK_NO_QT)) {",
          "4271:    GF_Box *b = gf_list_get(new_tk->Media->information->dataInformation->dref->child_boxes, 0);",
          "4273:     use_alis = GF_TRUE;",
          "4274:   }",
          "4275:   gf_isom_box_array_del(new_tk->Media->information->dataInformation->dref->child_boxes);",
          "",
          "[Removed Lines]",
          "4272:    if (b && b->type==GF_QT_BOX_TYPE_ALIS)",
          "",
          "[Added Lines]",
          "4272:    if (b && (b->type==GF_QT_BOX_TYPE_ALIS))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8568: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8573: GF_Err gf_isom_set_meta_qt(GF_ISOFile *file)",
          "8574: {",
          "8575:  u32 i, count;",
          "8576:  if (!file) return GF_BAD_PARAM;",
          "8577:  GF_Err e = CanAccessMovie(file, GF_ISOM_OPEN_WRITE);",
          "8578:  if (e) return e;",
          "8579:  if (file->moov->meta)",
          "8580:   file->moov->meta->write_qt = 1;",
          "8582:  count = gf_list_count(file->moov->trackList);",
          "8583:  for (i=0; i<count; i++) {",
          "8584:   GF_TrackBox *trak = gf_list_get(file->moov->trackList, i);",
          "8585:   if (trak->meta)",
          "8586:    trak->meta->write_qt = 1;",
          "8587:  }",
          "8588:  return GF_OK;",
          "8589: }",
          "",
          "---------------"
        ],
        "src/isomedia/media.c||src/isomedia/media.c": [
          "File: src/isomedia/media.c -> src/isomedia/media.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698:   return GF_NOT_SUPPORTED;",
          "700:  if (mdia->mediaTrack->moov->mov->openMode == GF_ISOM_OPEN_WRITE) {",
          "701:   e = gf_isom_datamap_new(entry->location, NULL, GF_ISOM_DATA_MAP_READ, &map);",
          "",
          "[Removed Lines]",
          "697:  if ((entry->type != GF_ISOM_BOX_TYPE_URL) && (entry->type != GF_QT_BOX_TYPE_ALIS) )",
          "",
          "[Added Lines]",
          "697:  switch (entry->type) {",
          "698:  case GF_ISOM_BOX_TYPE_URL:",
          "699:  case GF_QT_BOX_TYPE_ALIS:",
          "700:  case GF_QT_BOX_TYPE_CIOS:",
          "701:   break;",
          "702:  default:",
          "704:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "730:  if (a->flags & 1) return 1;",
          "732:  if (a->type == GF_QT_BOX_TYPE_ALIS) return 1;",
          "733:  return 0;",
          "734: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:  if (a->type == GF_QT_BOX_TYPE_CIOS) return 1;",
          "",
          "---------------"
        ],
        "src/media_tools/isom_tools.c||src/media_tools/isom_tools.c": [
          "File: src/media_tools/isom_tools.c -> src/media_tools/isom_tools.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1080:  return GF_NOT_SUPPORTED;",
          "1081: }",
          "1084: GF_EXPORT",
          "1085: GF_Err gf_media_check_qt_prores(GF_ISOFile *mp4)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1083: GF_Err gf_isom_set_meta_qt(GF_ISOFile *file);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1150:   }",
          "1151:  }",
          "1153:  if (!video_tk) {",
          "1154:   GF_LOG(GF_LOG_DEBUG, GF_LOG_MEDIA, (\"[QTFF] No visual track\\n\"));",
          "1155:   return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1154:  gf_isom_set_meta_qt(mp4);",
          "",
          "---------------"
        ]
      }
    }
  ]
}