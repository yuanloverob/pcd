{
  "cve_id": "CVE-2014-0224",
  "cve_desc": "OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h does not properly restrict processing of ChangeCipherSpec messages, which allows man-in-the-middle attackers to trigger use of a zero-length master key in certain OpenSSL-to-OpenSSL communications, and consequently hijack sessions or obtain sensitive information, via a crafted TLS handshake, aka the \"CCS Injection\" vulnerability.",
  "repo": "openssl/openssl",
  "patch_hash": "a91be10833e61bcdc9002de28489405101c52650",
  "patch_info": {
    "commit_hash": "a91be10833e61bcdc9002de28489405101c52650",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/a91be10833e61bcdc9002de28489405101c52650",
    "files": [
      "ssl/s3_clnt.c",
      "ssl/s3_pkt.c",
      "ssl/s3_srvr.c",
      "ssl/ssl3.h"
    ],
    "message": "Fix for CVE-2014-0224\n\nOnly accept change cipher spec when it is expected instead of at any\ntime. This prevents premature setting of session keys before the master\nsecret is determined which an attacker could use as a MITM attack.\n\nThanks to KIKUCHI Masashi (Lepidum Co. Ltd.) for reporting this issue\nand providing the initial fix this patch is based on.\n(cherry picked from commit bc8923b1ec9c467755cd86f7848c50ee8812e441)",
    "before_after_code_files": [
      "ssl/s3_clnt.c||ssl/s3_clnt.c",
      "ssl/s3_pkt.c||ssl/s3_pkt.c",
      "ssl/s3_srvr.c||ssl/s3_srvr.c",
      "ssl/ssl3.h||ssl/ssl3.h"
    ]
  },
  "patch_diff": {
    "ssl/s3_clnt.c||ssl/s3_clnt.c": [
      "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "599:   case SSL3_ST_CR_FINISHED_A:",
      "600:   case SSL3_ST_CR_FINISHED_B:",
      "602:    ret=ssl3_get_finished(s,SSL3_ST_CR_FINISHED_A,",
      "603:     SSL3_ST_CR_FINISHED_B);",
      "604:    if (ret <= 0) goto end;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "602:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1051:   SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT);",
      "1052:   goto f_err;",
      "1053:   }",
      "1054:      s->hit=1;",
      "1055:      }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1055:      s->s3->flags |= SSL3_FLAGS_CCS_OK;",
      "",
      "---------------"
    ],
    "ssl/s3_pkt.c||ssl/s3_pkt.c": [
      "File: ssl/s3_pkt.c -> ssl/s3_pkt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1593:    goto f_err;",
      "1594:    }",
      "1596:   rr->length=0;",
      "1598:   if (s->msg_callback)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1596:   if (!(s->s3->flags & SSL3_FLAGS_CCS_OK))",
      "1597:    {",
      "1598:    al=SSL_AD_UNEXPECTED_MESSAGE;",
      "1599:    SSLerr(SSL_F_SSL3_READ_BYTES,SSL_R_CCS_RECEIVED_EARLY);",
      "1600:    goto f_err;",
      "1601:    }",
      "1603:   s->s3->flags &= ~SSL3_FLAGS_CCS_OK;",
      "",
      "---------------"
    ],
    "ssl/s3_srvr.c||ssl/s3_srvr.c": [
      "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "708:   case SSL3_ST_SR_CERT_VRFY_A:",
      "709:   case SSL3_ST_SR_CERT_VRFY_B:",
      "712:    ret=ssl3_get_cert_verify(s);",
      "713:    if (ret <= 0) goto end;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "711:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "736:   case SSL3_ST_SR_FINISHED_A:",
      "737:   case SSL3_ST_SR_FINISHED_B:",
      "738:    ret=ssl3_get_finished(s,SSL3_ST_SR_FINISHED_A,",
      "739:     SSL3_ST_SR_FINISHED_B);",
      "740:    if (ret <= 0) goto end;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "739:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "805:     s->s3->tmp.next_state=SSL3_ST_SR_FINISHED_A;",
      "806: #else",
      "807:     if (s->s3->next_proto_neg_seen)",
      "808:      s->s3->tmp.next_state=SSL3_ST_SR_NEXT_PROTO_A;",
      "809:     else",
      "810:      s->s3->tmp.next_state=SSL3_ST_SR_FINISHED_A;",
      "811: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "810:      {",
      "811:      s->s3->flags |= SSL3_FLAGS_CCS_OK;",
      "813:      }",
      "",
      "---------------"
    ],
    "ssl/ssl3.h||ssl/ssl3.h": [
      "File: ssl/ssl3.h -> ssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "428: #define TLS1_FLAGS_TLS_PADDING_BUG  0x0008",
      "429: #define TLS1_FLAGS_SKIP_CERT_VERIFY  0x0010",
      "430: #define TLS1_FLAGS_KEEP_HANDSHAKE  0x0020",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "431: #define SSL3_FLAGS_CCS_OK   0x0080",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b3ba508af5c86afe43e28174aa3c53a0a24f4d9",
      "candidate_info": {
        "commit_hash": "7b3ba508af5c86afe43e28174aa3c53a0a24f4d9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7b3ba508af5c86afe43e28174aa3c53a0a24f4d9",
        "files": [
          "ssl/s3_clnt.c"
        ],
        "message": "Set s->hit when resuming from external pre-shared secret.\n\nThe same change was independently made in BoringSSL, see commit\n9eaeef81fa2d4fd6246dc02b6203fa936a5eaf67\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "984:  memcpy(s->s3->server_random,p,SSL3_RANDOM_SIZE);",
          "985:  p+=SSL3_RANDOM_SIZE;",
          "988:  j= *(p++);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "987:  s->hit = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1007:    {",
          "1008:    s->session->cipher = pref_cipher ?",
          "1009:     pref_cipher : ssl_get_cipher_by_char(s, p+j);",
          "1011:    }",
          "1012:   }",
          "1016:      && memcmp(p,s->session->session_id,j) == 0)",
          "1017:      {",
          "1018:      if(s->sid_ctx_length != s->session->sid_ctx_length",
          "",
          "[Removed Lines]",
          "1010:        s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "1015:  if (j != 0 && j == s->session->session_id_length",
          "",
          "[Added Lines]",
          "1012:    s->hit = 1;",
          "1013:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "1018:  if (!s->hit && j != 0 && j == s->session->session_id_length",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1026:      s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "1027:      s->hit=1;",
          "1028:      }",
          "1030:   {",
          "1034:   if (s->session->session_id_length > 0)",
          "1035:    {",
          "1036:    if (!ssl_get_new_session(s,0))",
          "",
          "[Removed Lines]",
          "1033:   s->hit=0;",
          "",
          "[Added Lines]",
          "1033:  if (!s->hit)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb8d9ddb9dc19d84dffa84932f75e607c8a3ffe6",
      "candidate_info": {
        "commit_hash": "fb8d9ddb9dc19d84dffa84932f75e607c8a3ffe6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fb8d9ddb9dc19d84dffa84932f75e607c8a3ffe6",
        "files": [
          "ssl/s3_clnt.c"
        ],
        "message": "Make tls_session_secret_cb work with CVE-2014-0224 fix.\n\nIf application uses tls_session_secret_cb for session resumption\nset the CCS_OK flag.",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1037:    {",
          "1038:    s->session->cipher = pref_cipher ?",
          "1039:     pref_cipher : ssl_get_cipher_by_char(s, p+j);",
          "1040:    }",
          "1041:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1040:        s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e94a6c0ede623960728415b68650a595e48f5a43",
      "candidate_info": {
        "commit_hash": "e94a6c0ede623960728415b68650a595e48f5a43",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e94a6c0ede623960728415b68650a595e48f5a43",
        "files": [
          "CHANGES",
          "ssl/d1_clnt.c",
          "ssl/d1_srvr.c",
          "ssl/dtls1.h",
          "ssl/s3_clnt.c",
          "ssl/s3_srvr.c",
          "ssl/ssl3.h",
          "ssl/t1_lib.c"
        ],
        "message": "Ensure SSL3_FLAGS_CCS_OK (or d1->change_cipher_spec_ok for DTLS) is reset once the ChangeCipherSpec message is received. Previously, the server would set the flag once at SSL3_ST_SR_CERT_VRFY and again at SSL3_ST_SR_FINISHED. This would allow a second CCS to arrive and would corrupt the server state.\n\n(Because the first CCS would latch the correct keys and subsequent CCS\nmessages would have to be encrypted, a MitM attacker cannot exploit this,\nthough.)\n\nThanks to Joeri de Ruiter for reporting this issue.\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_clnt.c||ssl/d1_clnt.c",
          "ssl/d1_srvr.c||ssl/d1_srvr.c",
          "ssl/dtls1.h||ssl/dtls1.h",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl3.h||ssl/ssl3.h",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/s3_srvr.c||ssl/s3_srvr.c",
            "ssl/ssl3.h||ssl/ssl3.h"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/s3_srvr.c||ssl/s3_srvr.c",
            "ssl/ssl3.h||ssl/ssl3.h"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_clnt.c||ssl/d1_clnt.c": [
          "File: ssl/d1_clnt.c -> ssl/d1_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:    memset(s->s3->client_random,0,sizeof(s->s3->client_random));",
          "268:    s->d1->send_cookie = 0;",
          "269:    s->hit = 0;",
          "270:    break;",
          "272: #ifndef OPENSSL_NO_SCTP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:    s->d1->change_cipher_spec_ok = 0;",
          "272:    s->s3->change_cipher_spec = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "510:     else",
          "511: #endif",
          "512:      s->state=SSL3_ST_CW_CHANGE_A;",
          "514:     }",
          "516:    s->init_num=0;",
          "",
          "[Removed Lines]",
          "513:     s->s3->change_cipher_spec=0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "531: #endif",
          "532:     s->state=SSL3_ST_CW_CHANGE_A;",
          "533:    s->init_num=0;",
          "535:    break;",
          "537:   case SSL3_ST_CW_CHANGE_A:",
          "",
          "[Removed Lines]",
          "534:    s->s3->change_cipher_spec=0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/d1_srvr.c||ssl/d1_srvr.c": [
          "File: ssl/d1_srvr.c -> ssl/d1_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:     }",
          "266:    s->init_num=0;",
          "268:    if (s->state != SSL_ST_RENEGOTIATE)",
          "269:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:    s->d1->change_cipher_spec_ok = 0;",
          "269:    s->s3->change_cipher_spec = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "695:   case SSL3_ST_SR_CERT_VRFY_A:",
          "696:   case SSL3_ST_SR_CERT_VRFY_B:",
          "700:    ret=ssl3_get_cert_verify(s);",
          "701:    if (ret <= 0) goto end;",
          "",
          "[Removed Lines]",
          "698:    s->d1->change_cipher_spec_ok = 1;",
          "",
          "[Added Lines]",
          "706:    if (!s->s3->change_cipher_spec)",
          "707:     s->d1->change_cipher_spec_ok = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "712:   case SSL3_ST_SR_FINISHED_A:",
          "713:   case SSL3_ST_SR_FINISHED_B:",
          "715:    ret=ssl3_get_finished(s,SSL3_ST_SR_FINISHED_A,",
          "716:     SSL3_ST_SR_FINISHED_B);",
          "717:    if (ret <= 0) goto end;",
          "",
          "[Removed Lines]",
          "714:    s->d1->change_cipher_spec_ok = 1;",
          "",
          "[Added Lines]",
          "733:    if (!s->s3->change_cipher_spec)",
          "734:     s->d1->change_cipher_spec_ok = 1;",
          "",
          "---------------"
        ],
        "ssl/dtls1.h||ssl/dtls1.h": [
          "File: ssl/dtls1.h -> ssl/dtls1.h"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:    s->state=SSL3_ST_CW_CLNT_HELLO_A;",
          "281:    s->ctx->stats.sess_connect++;",
          "282:    s->init_num=0;",
          "283:    break;",
          "285:   case SSL3_ST_CW_CLNT_HELLO_A:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:    s->s3->flags &= ~SSL3_FLAGS_CCS_OK;",
          "285:    s->s3->change_cipher_spec = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "428:    else",
          "429:     {",
          "430:     s->state=SSL3_ST_CW_CHANGE_A;",
          "432:     }",
          "433:    if (s->s3->flags & TLS1_FLAGS_SKIP_CERT_VERIFY)",
          "434:     {",
          "435:     s->state=SSL3_ST_CW_CHANGE_A;",
          "437:     }",
          "439:    s->init_num=0;",
          "",
          "[Removed Lines]",
          "431:     s->s3->change_cipher_spec=0;",
          "436:     s->s3->change_cipher_spec=0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "445:    if (ret <= 0) goto end;",
          "446:    s->state=SSL3_ST_CW_CHANGE_A;",
          "447:    s->init_num=0;",
          "449:    break;",
          "451:   case SSL3_ST_CW_CHANGE_A:",
          "",
          "[Removed Lines]",
          "448:    s->s3->change_cipher_spec=0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "505:     s->method->ssl3_enc->client_finished_label,",
          "506:     s->method->ssl3_enc->client_finished_label_len);",
          "507:    if (ret <= 0) goto end;",
          "509:    s->state=SSL3_ST_CW_FLUSH;",
          "",
          "[Removed Lines]",
          "508:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "992:    s->session->cipher = pref_cipher ?",
          "993:     pref_cipher : ssl_get_cipher_by_char(s, p+j);",
          "994:    s->hit = 1;",
          "996:    }",
          "997:   }",
          "",
          "[Removed Lines]",
          "995:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1008:   SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT);",
          "1009:   goto f_err;",
          "1010:   }",
          "1012:      s->hit=1;",
          "1013:      }",
          "",
          "[Removed Lines]",
          "1011:      s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:    s->init_num=0;",
          "310:    s->s3->flags &= ~SSL3_FLAGS_SGC_RESTART_DONE;",
          "311:    s->s3->flags &= ~TLS1_FLAGS_SKIP_CERT_VERIFY;",
          "313:    if (s->state != SSL_ST_RENEGOTIATE)",
          "314:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:    s->s3->flags &= ~SSL3_FLAGS_CCS_OK;",
          "314:    s->s3->change_cipher_spec = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "684:   case SSL3_ST_SR_CERT_VRFY_A:",
          "685:   case SSL3_ST_SR_CERT_VRFY_B:",
          "689:    ret=ssl3_get_cert_verify(s);",
          "690:    if (ret <= 0) goto end;",
          "",
          "[Removed Lines]",
          "687:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "695:    if (!s->s3->change_cipher_spec)",
          "696:     s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "703: #if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)",
          "704:   case SSL3_ST_SR_NEXT_PROTO_A:",
          "705:   case SSL3_ST_SR_NEXT_PROTO_B:",
          "706:    ret=ssl3_get_next_proto(s);",
          "707:    if (ret <= 0) goto end;",
          "708:    s->init_num = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725:    if (!s->s3->change_cipher_spec)",
          "726:     s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "713:   case SSL3_ST_SR_FINISHED_A:",
          "714:   case SSL3_ST_SR_FINISHED_B:",
          "716:    ret=ssl3_get_finished(s,SSL3_ST_SR_FINISHED_A,",
          "717:     SSL3_ST_SR_FINISHED_B);",
          "718:    if (ret <= 0) goto end;",
          "",
          "[Removed Lines]",
          "715:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "747:    if (!s->s3->change_cipher_spec)",
          "748:     s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "784: #else",
          "785:     if (s->s3->next_proto_neg_seen)",
          "786:      {",
          "788:      s->s3->tmp.next_state=SSL3_ST_SR_NEXT_PROTO_A;",
          "789:      }",
          "790:     else",
          "",
          "[Removed Lines]",
          "787:      s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl3.h||ssl/ssl3.h": [
          "File: ssl/ssl3.h -> ssl/ssl3.h"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2504: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "2505:  s->s3->next_proto_neg_seen = 0;",
          "2506: #endif",
          "2509:  if (s->s3->alpn_selected)",
          "2510:   {",
          "",
          "[Removed Lines]",
          "2507:         s->tlsext_ticket_expected = 0;",
          "",
          "[Added Lines]",
          "2507:  s->tlsext_ticket_expected = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0cfb0e75b9dbf1a605c47e1b79c76d43a1f8344d",
      "candidate_info": {
        "commit_hash": "0cfb0e75b9dbf1a605c47e1b79c76d43a1f8344d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0cfb0e75b9dbf1a605c47e1b79c76d43a1f8344d",
        "files": [
          "ssl/d1_srvr.c",
          "ssl/s3_clnt.c",
          "ssl/s3_srvr.c",
          "ssl/t1_enc.c",
          "ssl/tls1.h"
        ],
        "message": "Add extms support to master key generation.\n\nUpdate master secret calculation to support extended master secret.\nTLS 1.2 client authentication adds a complication because we need to\ncache the handshake messages. This is simpllified however because\nthe point at which the handshake hashes are calculated for extended\nmaster secret is identical to that required for TLS 1.2 client\nauthentication (immediately after client key exchange which is also\nimmediately before certificate verify).\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_srvr.c||ssl/d1_srvr.c",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/t1_enc.c||ssl/t1_enc.c",
          "ssl/tls1.h||ssl/tls1.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_srvr.c||ssl/d1_srvr.c": [
          "File: ssl/d1_srvr.c -> ssl/d1_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "655:                 s->init_num = 0;",
          "656:                 if (!s->session->peer)",
          "657:                     break;",
          "662:                 if (!s->s3->handshake_buffer) {",
          "663:                     SSLerr(SSL_F_DTLS1_ACCEPT, ERR_R_INTERNAL_ERROR);",
          "664:                     return -1;",
          "665:                 }",
          "669:             } else {",
          "670:                 s->state = SSL3_ST_SR_CERT_VRFY_A;",
          "671:                 s->init_num = 0;",
          "",
          "[Removed Lines]",
          "666:                 s->s3->flags |= TLS1_FLAGS_KEEP_HANDSHAKE;",
          "667:                 if (!ssl3_digest_cached_records(s))",
          "668:                     return -1;",
          "",
          "[Added Lines]",
          "666:                 if (!(s->s3->flags & SSL_SESS_FLAG_EXTMS)) {",
          "667:                     s->s3->flags |= TLS1_FLAGS_KEEP_HANDSHAKE;",
          "668:                     if (!ssl3_digest_cached_records(s))",
          "669:                         return -1;",
          "670:                 }",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3150:             }",
          "3151:             s2n(u, p);",
          "3152:             n = u + 4;",
          "3154:                 goto err;",
          "3155:         } else",
          "3156: #ifndef OPENSSL_NO_RSA",
          "",
          "[Removed Lines]",
          "3153:             if (!ssl3_digest_cached_records(s))",
          "",
          "[Added Lines]",
          "3157:             if (s->session->flags & SSL_SESS_FLAG_EXTMS) {",
          "3158:                 BIO_free(s->s3->handshake_buffer);",
          "3159:                 s->s3->handshake_buffer = NULL;",
          "3160:                 s->s3->flags &= ~TLS1_FLAGS_KEEP_HANDSHAKE;",
          "3161:             } else if (!ssl3_digest_cached_records(s))",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:                 s->init_num = 0;",
          "621:                 if (!s->session->peer)",
          "622:                     break;",
          "627:                 if (!s->s3->handshake_buffer) {",
          "628:                     SSLerr(SSL_F_SSL3_ACCEPT, ERR_R_INTERNAL_ERROR);",
          "629:                     return -1;",
          "630:                 }",
          "634:             } else {",
          "635:                 int offset = 0;",
          "636:                 int dgst_num;",
          "",
          "[Removed Lines]",
          "631:                 s->s3->flags |= TLS1_FLAGS_KEEP_HANDSHAKE;",
          "632:                 if (!ssl3_digest_cached_records(s))",
          "633:                     return -1;",
          "",
          "[Added Lines]",
          "631:                 if (!(s->s3->flags & SSL_SESS_FLAG_EXTMS)) {",
          "632:                     s->s3->flags |= TLS1_FLAGS_KEEP_HANDSHAKE;",
          "633:                     if (!ssl3_digest_cached_records(s))",
          "634:                         return -1;",
          "635:                 }",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1070:             len);",
          "1080: #ifdef SSL_DEBUG",
          "1081:     fprintf(stderr, \"Premaster Secret:\\n\");",
          "1082:     BIO_dump_fp(stderr, (char *)p, len);",
          "",
          "[Removed Lines]",
          "1074:     tls1_PRF(ssl_get_algorithm2(s),",
          "1075:              TLS_MD_MASTER_SECRET_CONST, TLS_MD_MASTER_SECRET_CONST_SIZE,",
          "1076:              s->s3->client_random, SSL3_RANDOM_SIZE,",
          "1077:              co, col,",
          "1078:              s->s3->server_random, SSL3_RANDOM_SIZE,",
          "1079:              so, sol, p, len, s->session->master_key, buff, sizeof buff);",
          "",
          "[Added Lines]",
          "1073:     if (s->session->flags & SSL_SESS_FLAG_EXTMS) {",
          "1074:         unsigned char hash[EVP_MAX_MD_SIZE * 2];",
          "1075:         int hashlen;",
          "1077:         if (s->s3->handshake_buffer) {",
          "1083:             s->s3->flags |= TLS1_FLAGS_KEEP_HANDSHAKE;",
          "1084:             ssl3_digest_cached_records(s);",
          "1085:         }",
          "1086:         hashlen = ssl_handshake_hash(s, hash, sizeof(hash));",
          "1087: #ifdef SSL_DEBUG",
          "1088:         fprintf(stderr, \"Handshake hashes:\\n\");",
          "1089:         BIO_dump_fp(stderr, (char *)hash, hashlen);",
          "1090: #endif",
          "1091:         tls1_PRF(ssl_get_algorithm2(s),",
          "1092:                  TLS_MD_EXTENDED_MASTER_SECRET_CONST,",
          "1093:                  TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE,",
          "1094:                  hash, hashlen,",
          "1095:                  co, col,",
          "1096:                  NULL, 0,",
          "1097:                  so, sol, p, len, s->session->master_key, buff, sizeof buff);",
          "1098:         OPENSSL_cleanse(hash, hashlen);",
          "1099:     } else {",
          "1100:         tls1_PRF(ssl_get_algorithm2(s),",
          "1101:                  TLS_MD_MASTER_SECRET_CONST,",
          "1102:                  TLS_MD_MASTER_SECRET_CONST_SIZE,",
          "1103:                  s->s3->client_random, SSL3_RANDOM_SIZE,",
          "1104:                  co, col,",
          "1105:                  s->s3->server_random, SSL3_RANDOM_SIZE,",
          "1106:                  so, sol, p, len, s->session->master_key, buff, sizeof buff);",
          "1107:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1175:     if (memcmp(val, TLS_MD_MASTER_SECRET_CONST,",
          "1176:                TLS_MD_MASTER_SECRET_CONST_SIZE) == 0)",
          "1177:         goto err1;",
          "1178:     if (memcmp(val, TLS_MD_KEY_EXPANSION_CONST,",
          "1179:                TLS_MD_KEY_EXPANSION_CONST_SIZE) == 0)",
          "1180:         goto err1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1206:     if (memcmp(val, TLS_MD_EXTENDED_MASTER_SECRET_CONST,",
          "1207:                TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE) == 0)",
          "1208:         goto err1;",
          "",
          "---------------"
        ],
        "ssl/tls1.h||ssl/tls1.h": [
          "File: ssl/tls1.h -> ssl/tls1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "783: # define TLS1_FINISH_MAC_LENGTH          12",
          "786: # define TLS_MD_CLIENT_FINISH_CONST              \"client finished\"",
          "787: # define TLS_MD_CLIENT_FINISH_CONST_SIZE         15",
          "788: # define TLS_MD_SERVER_FINISH_CONST              \"server finished\"",
          "",
          "[Removed Lines]",
          "785: # define TLS_MD_MAX_CONST_SIZE                   20",
          "",
          "[Added Lines]",
          "785: # define TLS_MD_MAX_CONST_SIZE                   22",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "797: # define TLS_MD_IV_BLOCK_CONST_SIZE              8",
          "798: # define TLS_MD_MASTER_SECRET_CONST              \"master secret\"",
          "799: # define TLS_MD_MASTER_SECRET_CONST_SIZE         13",
          "801: # ifdef CHARSET_EBCDIC",
          "802: #  undef TLS_MD_CLIENT_FINISH_CONST",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800: # define TLS_MD_EXTENDED_MASTER_SECRET_CONST     \"extended master secret\"",
          "801: # define TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE        22",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "848: #  define TLS_MD_MASTER_SECRET_CONST    \"\\x6d\\x61\\x73\\x74\\x65\\x72\\x20\\x73\\x65\\x63\\x72\\x65\\x74\"",
          "849: # endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "851: #  undef TLS_MD_EXTENDED_MASTER_SECRET_CONST",
          "855: #  define TLS_MD_EXTENDED_MASTER_SECRET_CONST    \"\\x65\\x78\\x74\\x65\\x63\\x64\\x65\\x64\\x20\\x6d\\x61\\x73\\x74\\x65\\x72\\x20\\x73\\x65\\x63\\x72\\x65\\x74\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf9b0b6fb253fd40225d7c648a08646686e62d2d",
      "candidate_info": {
        "commit_hash": "cf9b0b6fb253fd40225d7c648a08646686e62d2d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/cf9b0b6fb253fd40225d7c648a08646686e62d2d",
        "files": [
          "ssl/s3_srvr.c"
        ],
        "message": "Add more error state transitions\n\nEnsure all fatal errors transition into the new error state on the server\nside.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_srvr.c||ssl/s3_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ],
          "candidate": [
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:             if ((s->version >> 8) != 3) {",
          "264:                 SSLerr(SSL_F_SSL3_ACCEPT, ERR_R_INTERNAL_ERROR);",
          "265:                 return -1;",
          "266:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:                 s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275:             if (s->init_buf == NULL) {",
          "276:                 if ((buf = BUF_MEM_new()) == NULL) {",
          "277:                     ret = -1;",
          "278:                     goto end;",
          "279:                 }",
          "280:                 if (!BUF_MEM_grow(buf, SSL3_RT_MAX_PLAIN_LENGTH)) {",
          "281:                     BUF_MEM_free(buf);",
          "282:                     ret = -1;",
          "283:                     goto end;",
          "284:                 }",
          "285:                 s->init_buf = buf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:                     s->state = SSL_ST_ERR;",
          "285:                     s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "288:             if (!ssl3_setup_buffers(s)) {",
          "289:                 ret = -1;",
          "290:                 goto end;",
          "291:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:                 s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "306:                 if (!ssl_init_wbio_buffer(s, 1)) {",
          "307:                     ret = -1;",
          "308:                     goto end;",
          "309:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:                     s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "322:                        SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED);",
          "323:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "324:                 ret = -1;",
          "325:                 goto end;",
          "326:             } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:                 s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "380:                         SSLerr(SSL_F_SSL3_ACCEPT, SSL_R_CLIENTHELLO_TLSEXT);",
          "381:                     ret = SSL_TLSEXT_ERR_ALERT_FATAL;",
          "382:                     ret = -1;",
          "383:                     goto end;",
          "384:                 }",
          "385:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:                     s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "530:                 skip = 1;",
          "531:                 s->s3->tmp.cert_request = 0;",
          "532:                 s->state = SSL3_ST_SW_SRVR_DONE_A;",
          "535:                         return -1;",
          "536:             } else {",
          "537:                 s->s3->tmp.cert_request = 1;",
          "538:                 ret = ssl3_send_certificate_request(s);",
          "",
          "[Removed Lines]",
          "533:                 if (s->s3->handshake_buffer)",
          "534:                     if (!ssl3_digest_cached_records(s))",
          "",
          "[Added Lines]",
          "540:                 if (s->s3->handshake_buffer) {",
          "541:                     if (!ssl3_digest_cached_records(s)) {",
          "542:                         s->state = SSL_ST_ERR;",
          "544:                     }",
          "545:                 }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "613:                     break;",
          "614:                 if (!s->s3->handshake_buffer) {",
          "615:                     SSLerr(SSL_F_SSL3_ACCEPT, ERR_R_INTERNAL_ERROR);",
          "616:                     return -1;",
          "617:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:                     s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "622:                 if (!(s->s3->flags & SSL_SESS_FLAG_EXTMS)) {",
          "623:                     s->s3->flags |= TLS1_FLAGS_KEEP_HANDSHAKE;",
          "625:                         return -1;",
          "626:                 }",
          "627:             } else {",
          "628:                 int offset = 0;",
          "",
          "[Removed Lines]",
          "624:                     if (!ssl3_digest_cached_records(s))",
          "",
          "[Added Lines]",
          "635:                     if (!ssl3_digest_cached_records(s)) {",
          "636:                         s->state = SSL_ST_ERR;",
          "638:                     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "642:                         return -1;",
          "643:                 for (dgst_num = 0; dgst_num < SSL_MAX_DIGEST; dgst_num++)",
          "644:                     if (s->s3->handshake_dgst[dgst_num]) {",
          "645:                         int dgst_size;",
          "",
          "[Removed Lines]",
          "640:                 if (s->s3->handshake_buffer)",
          "641:                     if (!ssl3_digest_cached_records(s))",
          "",
          "[Added Lines]",
          "653:                 if (s->s3->handshake_buffer) {",
          "654:                     if (!ssl3_digest_cached_records(s)) {",
          "655:                         s->state = SSL_ST_ERR;",
          "657:                     }",
          "658:                 }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "655:                         dgst_size =",
          "656:                             EVP_MD_CTX_size(s->s3->handshake_dgst[dgst_num]);",
          "657:                         if (dgst_size < 0) {",
          "658:                             ret = -1;",
          "659:                             goto end;",
          "660:                         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "674:                             s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "769:             s->session->cipher = s->s3->tmp.new_cipher;",
          "770:             if (!s->method->ssl3_enc->setup_key_block(s)) {",
          "771:                 ret = -1;",
          "772:                 goto end;",
          "773:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "789:                 s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "785:                                                           SSL3_CHANGE_CIPHER_SERVER_WRITE))",
          "786:             {",
          "787:                 ret = -1;",
          "788:                 goto end;",
          "789:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "806:                 s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1465:         buf = (unsigned char *)s->init_buf->data;",
          "1466: #ifdef OPENSSL_NO_TLSEXT",
          "1467:         p = s->s3->server_random;",
          "1469:             return -1;",
          "1470: #endif",
          "1472:         d = p = ssl_handshake_start(s);",
          "",
          "[Removed Lines]",
          "1468:         if (ssl_fill_hello_random(s, 1, p, SSL3_RANDOM_SIZE) <= 0)",
          "",
          "[Added Lines]",
          "1487:         if (ssl_fill_hello_random(s, 1, p, SSL3_RANDOM_SIZE) <= 0) {",
          "1488:             s->state = SSL_ST_ERR;",
          "1490:         }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1502:         sl = s->session->session_id_length;",
          "1503:         if (sl > (int)sizeof(s->session->session_id)) {",
          "1504:             SSLerr(SSL_F_SSL3_SEND_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1505:             return -1;",
          "1506:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1526:             s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1524: #ifndef OPENSSL_NO_TLSEXT",
          "1525:         if (ssl_prepare_serverhello_tlsext(s) <= 0) {",
          "1526:             SSLerr(SSL_F_SSL3_SEND_SERVER_HELLO, SSL_R_SERVERHELLO_TLSEXT);",
          "1527:             return -1;",
          "1528:         }",
          "1529:         if ((p =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1549:             s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1531:                                         &al)) == NULL) {",
          "1532:             ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1533:             SSLerr(SSL_F_SSL3_SEND_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1534:             return -1;",
          "1535:         }",
          "1536: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1557:             s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2019:     BN_CTX_free(bn_ctx);",
          "2020: #endif",
          "2021:     EVP_MD_CTX_cleanup(&md_ctx);",
          "2022:     return (-1);",
          "2023: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2046:     s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2094:     return ssl_do_write(s);",
          "2095:  err:",
          "2096:     return (-1);",
          "2097: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2121:     s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2919:     EC_KEY_free(srvr_ecdh);",
          "2920:     BN_CTX_free(bn_ctx);",
          "2921: #endif",
          "2922:     return (-1);",
          "2923: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2948:     s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3121:     if (0) {",
          "3122:  f_err:",
          "3123:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "3124:     }",
          "3125:  end:",
          "3126:     BIO_free(s->s3->handshake_buffer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3151:         s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3289:  f_err:",
          "3290:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "3291:  done:",
          "3292:     X509_free(x);",
          "3293:     sk_X509_pop_free(sk, X509_free);",
          "3294:     return (ret);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3320:     s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3306:                 (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kKRB5)) {",
          "3307:                 SSLerr(SSL_F_SSL3_SEND_SERVER_CERTIFICATE,",
          "3308:                        ERR_R_INTERNAL_ERROR);",
          "3309:                 return (0);",
          "3310:             }",
          "3311:         }",
          "3313:         if (!ssl3_output_cert_chain(s, cpk)) {",
          "3314:             SSLerr(SSL_F_SSL3_SEND_SERVER_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "3315:             return (0);",
          "3316:         }",
          "3317:         s->state = SSL3_ST_SW_CERT_B;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3338:                 s->state = SSL_ST_ERR;",
          "3345:             s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3349:             return -1;",
          "3350:         senc = OPENSSL_malloc(slen_full);",
          "3352:             return -1;",
          "3354:         EVP_CIPHER_CTX_init(&ctx);",
          "3355:         HMAC_CTX_init(&hctx);",
          "",
          "[Removed Lines]",
          "3348:         if (slen_full == 0 || slen_full > 0xFF00)",
          "3351:         if (!senc)",
          "",
          "[Added Lines]",
          "3379:         if (slen_full == 0 || slen_full > 0xFF00) {",
          "3380:             s->state = SSL_ST_ERR;",
          "3382:         }",
          "3384:         if (!senc) {",
          "3385:             s->state = SSL_ST_ERR;",
          "3387:         }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3464:     OPENSSL_free(senc);",
          "3465:     EVP_CIPHER_CTX_cleanup(&ctx);",
          "3466:     HMAC_CTX_cleanup(&hctx);",
          "3467:     return -1;",
          "3468: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3502:     s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3481:             return -1;",
          "3483:         p = (unsigned char *)s->init_buf->data;",
          "",
          "[Removed Lines]",
          "3480:         if (!BUF_MEM_grow(s->init_buf, 8 + s->tlsext_ocsp_resplen))",
          "",
          "[Added Lines]",
          "3516:         if (!BUF_MEM_grow(s->init_buf, 8 + s->tlsext_ocsp_resplen)) {",
          "3517:             s->state = SSL_ST_ERR;",
          "3519:         }",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3521:     if (!s->s3->next_proto_neg_seen) {",
          "3522:         SSLerr(SSL_F_SSL3_GET_NEXT_PROTO,",
          "3523:                SSL_R_GOT_NEXT_PROTO_WITHOUT_EXTENSION);",
          "3524:         return -1;",
          "3525:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3562:         s->state = SSL_ST_ERR;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3541:     if (!s->s3->change_cipher_spec) {",
          "3542:         SSLerr(SSL_F_SSL3_GET_NEXT_PROTO, SSL_R_GOT_NEXT_PROTO_BEFORE_A_CCS);",
          "3543:         return -1;",
          "3544:     }",
          "3549:     p = (unsigned char *)s->init_msg;",
          "",
          "[Removed Lines]",
          "3546:     if (n < 2)",
          "",
          "[Added Lines]",
          "3582:         s->state = SSL_ST_ERR;",
          "3586:     if (n < 2) {",
          "3587:         s->state = SSL_ST_ERR;",
          "3589:     }",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3558:     proto_len = p[0];",
          "3560:         return 0;",
          "3561:     padding_len = p[proto_len + 1];",
          "3563:         return 0;",
          "3565:     s->next_proto_negotiated = OPENSSL_malloc(proto_len);",
          "3566:     if (!s->next_proto_negotiated) {",
          "3567:         SSLerr(SSL_F_SSL3_GET_NEXT_PROTO, ERR_R_MALLOC_FAILURE);",
          "3568:         return 0;",
          "3569:     }",
          "3570:     memcpy(s->next_proto_negotiated, p + 1, proto_len);",
          "",
          "[Removed Lines]",
          "3559:     if (proto_len + 2 > s->init_num)",
          "3562:     if (proto_len + padding_len + 2 != s->init_num)",
          "",
          "[Added Lines]",
          "3601:     if (proto_len + 2 > s->init_num) {",
          "3602:         s->state = SSL_ST_ERR;",
          "3604:     }",
          "3606:     if (proto_len + padding_len + 2 != s->init_num) {",
          "3607:         s->state = SSL_ST_ERR;",
          "3609:     }",
          "3614:         s->state = SSL_ST_ERR;",
          "",
          "---------------"
        ]
      }
    }
  ]
}