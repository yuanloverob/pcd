{
  "cve_id": "CVE-2014-9714",
  "cve_desc": "Cross-site scripting (XSS) vulnerability in the WddxPacket::recursiveAddVar function in HHVM (aka the HipHop Virtual Machine) before 3.5.0 allows remote attackers to inject arbitrary web script or HTML via a crafted string to the wddx_serialize_value function.",
  "repo": "facebook/hhvm",
  "patch_hash": "324701c9fd31beb4f070f1b7ef78b115fbdfec34",
  "patch_info": {
    "commit_hash": "324701c9fd31beb4f070f1b7ef78b115fbdfec34",
    "repo": "facebook/hhvm",
    "commit_url": "https://github.com/facebook/hhvm/commit/324701c9fd31beb4f070f1b7ef78b115fbdfec34",
    "files": [
      "hphp/runtime/ext/wddx/ext_wddx.cpp",
      "hphp/test/slow/ext_wddx/htmlent.php",
      "hphp/test/slow/ext_wddx/htmlent.php.expect"
    ],
    "message": "HTMLEncode strings in wddx_serialize_value()\n\nSummary: Strings returned through wddx_serialize_value should be HTMLEncode()'d during\nserialization.\n\nFixes #4283\n\n{sync, type=\"child\", parent=\"internal\", parentrevid=\"1691695\", parentrevfbid=\"1537976659780590\", parentdiffid=\"5726084\"}\n\nReviewed By: @JoelMarcey\n\nDifferential Revision: D1691695\n\nSignature: t1:1691695:1416530595:722bfcdaf7c0dbee379bea886cd4c43d997ca7dd",
    "before_after_code_files": [
      "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp",
      "hphp/test/slow/ext_wddx/htmlent.php||hphp/test/slow/ext_wddx/htmlent.php",
      "hphp/test/slow/ext_wddx/htmlent.php.expect||hphp/test/slow/ext_wddx/htmlent.php.expect"
    ]
  },
  "patch_diff": {
    "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp": [
      "File: hphp/runtime/ext/wddx/ext_wddx.cpp -> hphp/runtime/ext/wddx/ext_wddx.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:   std::string varType = getDataTypeString(varVariant.getType()).data();",
      "128:   if (!getWddxEncoded(varType, \"\", varName, false).empty()) {",
      "130:     if (varType.compare(\"boolean\") == 0) {",
      "131:       varValue = varVariant.toBoolean() ? \"true\" : \"false\";",
      "132:     }",
      "133:     m_packetString += getWddxEncoded(varType, varValue, varName, hasVarTag);",
      "134:     return true;",
      "",
      "[Removed Lines]",
      "129:     std::string varValue = varVariant.toString().data();",
      "",
      "[Added Lines]",
      "129:     std::string varValue;",
      "132:     } else {",
      "133:       varValue = StringUtil::HtmlEncode(varVariant.toString(),",
      "134:                                         StringUtil::QuoteStyle::Double,",
      "135:                                         \"UTF-8\", false, false).toCppString();",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_wddx/htmlent.php||hphp/test/slow/ext_wddx/htmlent.php": [
      "File: hphp/test/slow/ext_wddx/htmlent.php -> hphp/test/slow/ext_wddx/htmlent.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "2: $s = wddx_serialize_value(\"Test for &\");",
      "3: var_dump($s);",
      "4: $d = wddx_deserialize($s);",
      "5: var_dump($d);",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_wddx/htmlent.php.expect||hphp/test/slow/ext_wddx/htmlent.php.expect": [
      "File: hphp/test/slow/ext_wddx/htmlent.php.expect -> hphp/test/slow/ext_wddx/htmlent.php.expect",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: string(92) \"<wddxPacket version='1.0'><header/><data><string>Test for &amp;</string></data></wddxPacket>\"",
      "2: string(10) \"Test for &\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d861d0cd2de58ab4210e20441efb6cb396e88138",
      "candidate_info": {
        "commit_hash": "d861d0cd2de58ab4210e20441efb6cb396e88138",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/d861d0cd2de58ab4210e20441efb6cb396e88138",
        "files": [
          "hphp/runtime/ext/wddx/ext_wddx.cpp"
        ],
        "message": "Fix iteration issues in ext_wddx\n\nIt wasn't handling KindOfRefs and it was using getChildren\ninstead of array iteration (so for e.g. if the array came from APC it\nwould do something else entirely).  (I'm unsure if it's supposed to\nsupport iterable objects, but that's something else...)  Not handling\nKindOfRefs seems to be deliberate (to avoid handling recursive arrays),\nso that behavior is preserved for now.\n\nReviewed By: @scannell\n\nDifferential Revision: D1268081",
        "before_after_code_files": [
          "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp": [
          "File: hphp/runtime/ext/wddx/ext_wddx.cpp -> hphp/runtime/ext/wddx/ext_wddx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"hphp/runtime/ext/wddx/ext_wddx.h\"",
          "24: WddxPacket::WddxPacket(const Variant& comment, bool manualPacket, bool sVar) :",
          "25:                        m_packetString(\"\"), m_packetClosed(false),",
          "26:                        m_manualPacketCreation(manualPacket) {",
          "29:   if (!comment.isNull() && !sVar) {",
          "31:     header = \"<header><comment>\" + scomment + \"</comment></header>\";",
          "32:   }",
          "33:   m_packetString = \"<wddxPacket version='1.0'>\" + header + \"<data>\";",
          "",
          "[Removed Lines]",
          "19: namespace HPHP {",
          "21: using std::string;",
          "22: using std::vector;",
          "27:   string header = \"<header/>\";",
          "30:     string scomment = comment.toString().data();",
          "",
          "[Added Lines]",
          "19: #include <string>",
          "20: #include <vector>",
          "22: namespace HPHP {",
          "27:   std::string header = \"<header/>\";",
          "30:     std::string scomment = comment.toString().data();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   return recursiveAddVar(varName, varVariant, hasVarTag);",
          "45: }",
          "48:   if (!m_packetClosed) {",
          "49:     if (m_manualPacketCreation) {",
          "50:       m_packetString += \"</struct>\";",
          "",
          "[Removed Lines]",
          "47: string WddxPacket::packet_end() {",
          "",
          "[Added Lines]",
          "47: std::string WddxPacket::packet_end() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     return true;",
          "124:   }",
          "127:   if (!getWddxEncoded(varType, \"\", varName, false).empty()) {",
          "129:     if (varType.compare(\"boolean\") == 0) {",
          "130:       varValue = varVariant.toBoolean() ? \"true\" : \"false\";",
          "131:     }",
          "",
          "[Removed Lines]",
          "126:   string varType = getDataTypeString(varVariant.getType()).data();",
          "128:     string varValue = varVariant.toString().data();",
          "",
          "[Added Lines]",
          "126:   std::string varType = getDataTypeString(varVariant.getType()).data();",
          "128:     std::string varValue = varVariant.toString().data();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:   return false;",
          "137: }",
          "143:   if (varType.compare(\"NULL\") == 0) {",
          "144:     return wrapValue(\"<null/>\", \"\", \"\", varName, hasVarTag);",
          "145:   }",
          "",
          "[Removed Lines]",
          "139: string WddxPacket::getWddxEncoded(string varType,",
          "140:                                   string varValue,",
          "141:                                   String varName,",
          "142:                                   bool hasVarTag) {",
          "",
          "[Added Lines]",
          "139: std::string WddxPacket::getWddxEncoded(std::string varType,",
          "140:                                        std::string varValue,",
          "141:                                        String varName,",
          "142:                                        bool hasVarTag) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:   return \"\";",
          "156: }",
          "162:   if (hasVarTag) {",
          "163:     startVar += \"<var name='\";",
          "164:     startVar += varName.data();",
          "",
          "[Removed Lines]",
          "158: string WddxPacket::wrapValue(string start, string end, string varValue,",
          "159:                              String varName, bool hasVarTag) {",
          "160:   string startVar = \"\";",
          "161:   string endVar = \"\";",
          "",
          "[Added Lines]",
          "158: std::string WddxPacket::wrapValue(std::string start,",
          "159:                                   std::string end,",
          "160:                                   std::string varValue,",
          "161:                                   String varName,",
          "162:                                   bool hasVarTag) {",
          "163:   std::string startVar = \"\";",
          "164:   std::string endVar = \"\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "177:     wddxPacket->add_var(var_name, true);",
          "178:   }",
          "179:   if (tv->m_type == KindOfArray) {",
          "184:     }",
          "185:   }",
          "186: }",
          "",
          "[Removed Lines]",
          "180:     std::vector<const TypedValue*> children;",
          "181:     tv->m_data.parr->getChildren(children);",
          "182:     for (auto const& child : children) {",
          "183:       find_var_recursive(child, wddxPacket);",
          "",
          "[Added Lines]",
          "183:     for (ArrayIter iter(tv->m_data.parr); iter; ++iter) {",
          "184:       find_var_recursive(iter.secondRef().asTypedValue(), wddxPacket);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "191:   auto wddxPacket = packet_id.getTyped<WddxPacket>();",
          "193:   for (int i = start_index; i < ar->numArgs(); i++) {",
          "195:     find_var_recursive(tv, wddxPacket);",
          "196:   }",
          "197:   return arReturn(ar, true);",
          "",
          "[Removed Lines]",
          "194:     auto const tv = getArg(ar,i);",
          "",
          "[Added Lines]",
          "195:     auto const tv = getArg(ar, i);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "204:     auto const tv = getArg(ar, i);",
          "205:     find_var_recursive(tv, wddxPacket);",
          "206:   }",
          "208:   Variant strHolder = makeStaticString(packet);",
          "209:   return arReturn(ar, strHolder);",
          "210: }",
          "",
          "[Removed Lines]",
          "207:   const string packet = wddxPacket->packet_end();",
          "",
          "[Added Lines]",
          "208:   const std::string packet = wddxPacket->packet_end();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "223: static String HHVM_FUNCTION(wddx_packet_end, const Resource& packet_id) {",
          "224:   auto wddxPacket = packet_id.getTyped<WddxPacket>();",
          "226:   return String(packetString);",
          "227: }",
          "",
          "[Removed Lines]",
          "225:   string packetString = wddxPacket->packet_end();",
          "",
          "[Added Lines]",
          "226:   std::string packetString = wddxPacket->packet_end();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "235:                             const Variant& comment) {",
          "236:   WddxPacket* wddxPacket = NEWOBJ(WddxPacket)(comment, false, false);",
          "237:   wddxPacket->serialize_value(var);",
          "239:   return String(packetString);",
          "240: }",
          "",
          "[Removed Lines]",
          "238:   const string packetString = wddxPacket->packet_end();",
          "",
          "[Added Lines]",
          "239:   const std::string packetString = wddxPacket->packet_end();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f6a4c6f4f86c1812ef1b67b592fe2cf9ccd7c3b",
      "candidate_info": {
        "commit_hash": "3f6a4c6f4f86c1812ef1b67b592fe2cf9ccd7c3b",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/3f6a4c6f4f86c1812ef1b67b592fe2cf9ccd7c3b",
        "files": [
          "hphp/runtime/ext/session/ext_session.cpp",
          "hphp/runtime/ext/wddx/ext_wddx.cpp",
          "hphp/runtime/ext/wddx/ext_wddx.h",
          "hphp/runtime/ext/wddx/ext_wddx.php",
          "hphp/test/slow/ext_wddx/wddx_session_decode.php",
          "hphp/test/slow/ext_wddx/wddx_session_decode.php.expect",
          "hphp/test/slow/ext_wddx/wddx_session_encode.php",
          "hphp/test/slow/ext_wddx/wddx_session_encode.php.expect"
        ],
        "message": "Update to allow for wddx session_serializer\n\nAdded wddx to also be a valid session serialize_handler.\n\nhttp://www.php.net/manual/en/session.configuration.php#ini.session.serialize-handler\nCloses #2346\n\nReviewed By: @ptarjan\n\nDifferential Revision: D1262533\n\nPulled By: @alexmalyshev",
        "before_after_code_files": [
          "hphp/runtime/ext/session/ext_session.cpp||hphp/runtime/ext/session/ext_session.cpp",
          "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp",
          "hphp/runtime/ext/wddx/ext_wddx.h||hphp/runtime/ext/wddx/ext_wddx.h",
          "hphp/runtime/ext/wddx/ext_wddx.php||hphp/runtime/ext/wddx/ext_wddx.php",
          "hphp/test/slow/ext_wddx/wddx_session_decode.php||hphp/test/slow/ext_wddx/wddx_session_decode.php",
          "hphp/test/slow/ext_wddx/wddx_session_decode.php.expect||hphp/test/slow/ext_wddx/wddx_session_decode.php.expect",
          "hphp/test/slow/ext_wddx/wddx_session_encode.php||hphp/test/slow/ext_wddx/wddx_session_encode.php",
          "hphp/test/slow/ext_wddx/wddx_session_encode.php.expect||hphp/test/slow/ext_wddx/wddx_session_encode.php.expect"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/session/ext_session.cpp||hphp/runtime/ext/session/ext_session.cpp": [
          "File: hphp/runtime/ext/session/ext_session.cpp -> hphp/runtime/ext/session/ext_session.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include \"hphp/runtime/ext/ext_function.h\"",
          "45: #include \"hphp/runtime/ext/ext_hash.h\"",
          "46: #include \"hphp/runtime/ext/std/ext_std_options.h\"",
          "47: #include \"hphp/runtime/vm/jit/translator-inline.h\"",
          "48: #include \"hphp/runtime/base/request-event-handler.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #include \"hphp/runtime/ext/wddx/ext_wddx.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1087: };",
          "1088: static PhpSessionSerializer s_php_session_serializer;",
          "1092: #define SESSION_CHECK_ACTIVE_STATE                                      \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1091: class WddxSessionSerializer : public SessionSerializer {",
          "1092: public:",
          "1093:   WddxSessionSerializer() : SessionSerializer(\"wddx\") {}",
          "1095:   virtual String encode() {",
          "1096:     WddxPacket* wddxPacket = NEWOBJ(WddxPacket)(empty_string, true, true);",
          "1097:     GlobalVariables *g = get_global_variables();",
          "1099:     for (ArrayIter iter(g->get(s__SESSION).toArray()); iter; ++iter) {",
          "1100:       Variant key = iter.first();",
          "1101:       if (key.isString()) {",
          "1102:         wddxPacket->recursiveAddVar(key.toString(), iter.second(), true);",
          "1103:       } else {",
          "1104:         raise_notice(\"Skipping numeric key %\" PRId64, key.toInt64());",
          "1105:       }",
          "1106:     }",
          "1108:     string spacket = wddxPacket->packet_end();",
          "1109:     return String(spacket);",
          "1110:   }",
          "1112:   virtual bool decode(const String& value) {",
          "1113:     Array params = Array::Create();",
          "1114:     params.append(value);",
          "1115:     Variant ret = vm_call_user_func(\"wddx_deserialize\", params, true);",
          "1116:     GlobalVariables *g = get_global_variables();",
          "1117:     if (ret.isArray()) {",
          "1118:       Array arr = ret.toArray();",
          "1120:       for (ArrayIter iter(arr); iter; ++iter) {",
          "1121:         Variant key = iter.first();",
          "1122:         Variant value = iter.second();",
          "1123:         auto& sess = g->getRef(s__SESSION);",
          "1124:         forceToArray(sess).set(key, value);",
          "1125:       }",
          "1126:     }",
          "1128:     return true;",
          "1129:   }",
          "1130: };",
          "1131: static WddxSessionSerializer s_wddx_session_serializer;",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp": [
          "File: hphp/runtime/ext/wddx/ext_wddx.cpp -> hphp/runtime/ext/wddx/ext_wddx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:    | license@php.net so we can mail you a copy immediately.               |",
          "15:    +----------------------------------------------------------------------+",
          "19: namespace HPHP {",
          "21: using std::string;",
          "22: using std::vector;",
          "43:     if (m_manualPacketCreation) {",
          "45:     }",
          "46:   }",
          "81:         m_packetString += \"'>\";",
          "82:       }",
          "116:       }",
          "128:       }",
          "131:       }",
          "133:     }",
          "140:       }",
          "143:     }",
          "151:     }",
          "152:     if (varType.compare(\"boolean\") == 0) {",
          "160:     }",
          "162:   }",
          "175:   }",
          "187:   if (tvIsString(tv)) {",
          "188:     String var_name = tvCastToString(tv);",
          "190:   }",
          "191:   if (tv->m_type == KindOfArray) {",
          "193:     tv->m_data.parr->getChildren(children);",
          "194:     for (TypedValue *child : children) {",
          "196:     }",
          "197:   }",
          "198: }",
          "200: static TypedValue* add_vars_helper(ActRec* ar) {",
          "201:   int start_index = 1;",
          "203:   auto wddxPacket = packet_id.getTyped<WddxPacket>();",
          "205:   for (int i = start_index; i < ar->numArgs(); i++) {",
          "206:     TypedValue* tv = getArg(ar,i);",
          "208:   }",
          "209:   return arReturn(ar, true);",
          "210: }",
          "212: static TypedValue* serialize_vars_helper(ActRec* ar) {",
          "214:   int start_index = 0;",
          "215:   for (int i = start_index; i < ar->numArgs(); i++) {",
          "218:   }",
          "219:   const string packet = wddxPacket->packet_end();",
          "220:   Variant strHolder = makeStaticString(packet);",
          "222: }",
          "",
          "[Removed Lines]",
          "17: #include \"hphp/runtime/base/base-includes.h\"",
          "24: class WddxPacket: public SweepableResourceData {",
          "25:  public:",
          "26:   DECLARE_RESOURCE_ALLOCATION(WddxPacket);",
          "28:   CLASSNAME_IS(\"WddxPacket\");",
          "30:   const String& o_getClassNameHook() const { return classnameof(); }",
          "32:   explicit WddxPacket(const Variant& comment, bool manualPacket, bool sVar) :",
          "33:                       m_packetString(\"\"), m_packetClosed(false),",
          "34:                       m_manualPacketCreation(manualPacket) {",
          "35:     string header = \"<header/>\";",
          "37:     if (!comment.isNull() && !sVar) {",
          "38:       string scomment = comment.toString().data();",
          "39:       header = \"<header><comment>\" + scomment + \"</comment></header>\";",
          "40:     }",
          "41:     m_packetString = \"<wddxPacket version='1.0'>\" + header + \"<data>\";",
          "44:       m_packetString = m_packetString + \"<struct>\";",
          "48:   bool add_var(const String& varName, bool hasVarTag) {",
          "49:     VarEnv* v = g_context->getVarEnv();",
          "50:     if (!v) return false;",
          "51:     Variant varVariant = *reinterpret_cast<Variant*>(v->lookup(varName.get()));",
          "52:     return recursiveAddVar(varName,varVariant,hasVarTag);",
          "53:   }",
          "55:   string packet_end() {",
          "56:     if (!m_packetClosed) {",
          "57:       if (m_manualPacketCreation) {",
          "58:         m_packetString += \"</struct>\";",
          "59:       }",
          "60:       m_packetString += \"</data></wddxPacket>\";",
          "61:     }",
          "62:     m_packetClosed = true;",
          "63:     return m_packetString;",
          "64:   }",
          "66:   bool serialize_value(const Variant& varVariant) {",
          "67:     return recursiveAddVar(empty_string,varVariant,false);",
          "68:   }",
          "70:  private:",
          "71:   bool recursiveAddVar(String varName, const Variant& varVariant,",
          "72:                        bool hasVarTag ) {",
          "74:     bool isArray = varVariant.isArray();",
          "75:     bool isObject = varVariant.isObject();",
          "77:     if (isArray || isObject) {",
          "78:       if (hasVarTag) {",
          "79:         m_packetString += \"<var name='\";",
          "80:         m_packetString += varName.data();",
          "84:       Array varAsArray;",
          "85:       Object varAsObject = varVariant.toObject();",
          "86:       if (isArray) varAsArray = varVariant.toArray();",
          "87:       if (isObject) varAsArray = varAsObject.toArray();",
          "89:       int length = varAsArray.length();",
          "90:       if (length > 0) {",
          "91:         ArrayIter it = ArrayIter(varAsArray);",
          "92:         if (it.first().isString()) isObject = true;",
          "93:         if (isObject) {",
          "94:           m_packetString += \"<struct>\";",
          "95:           if (!isArray) {",
          "96:             m_packetString += \"<var name='php_class_name'><string>\";",
          "97:             m_packetString += varAsObject->o_getClassName().c_str();",
          "98:             m_packetString += \"</string></var>\";",
          "99:           }",
          "100:         } else {",
          "101:           m_packetString += \"<array length='\";",
          "102:           m_packetString += std::to_string(length);",
          "103:           m_packetString += \"'>\";",
          "104:         }",
          "105:         for (ArrayIter it(varAsArray); it; ++it) {",
          "106:           Variant key = it.first();",
          "107:           Variant value = it.second();",
          "108:           recursiveAddVar(key.toString(),value,isObject);",
          "109:         }",
          "110:         if (isObject) {",
          "111:           m_packetString += \"</struct>\";",
          "112:         }",
          "113:         else {",
          "114:           m_packetString += \"</array>\";",
          "115:         }",
          "117:       else {",
          "119:         if (isObject) {",
          "120:           m_packetString += \"<struct>\";",
          "121:           if (!isArray) {",
          "122:             m_packetString += \"<var name='php_class_name'><string>\";",
          "123:             m_packetString += varAsObject->o_getClassName().c_str();",
          "124:             m_packetString += \"</string></var>\";",
          "125:           }",
          "126:           m_packetString += \"</struct>\";",
          "127:         }",
          "129:       if (hasVarTag) {",
          "130:         m_packetString += \"</var>\";",
          "132:       return true;",
          "135:     string varType = getDataTypeString(varVariant.getType()).data();",
          "136:     if (!getWddxEncoded(varType,\"\",varName,false).empty()) {",
          "137:       string varValue = varVariant.toString().data();",
          "138:       if (varType.compare(\"boolean\") == 0) {",
          "139:         varValue = varVariant.toBoolean() ? \"true\" : \"false\";",
          "141:       m_packetString += getWddxEncoded(varType,varValue,varName,hasVarTag);",
          "142:       return true;",
          "145:     return false;",
          "146:   }",
          "147:   string getWddxEncoded(string varType, string varValue, String varName,",
          "148:                         bool hasVarTag) {",
          "149:     if (varType.compare(\"NULL\") == 0) {",
          "150:       return wrapValue(\"<null/>\",\"\",\"\",varName,hasVarTag);",
          "153:       return wrapValue(\"<boolean value='\",\"'/>\",varValue,varName,hasVarTag);",
          "154:     }",
          "155:     if (varType.compare(\"integer\") == 0 || varType.compare(\"double\") == 0) {",
          "156:       return wrapValue(\"<number>\",\"</number>\",varValue,varName,hasVarTag);",
          "157:     }",
          "158:     if (varType.compare(\"string\") == 0) {",
          "159:       return wrapValue(\"<string>\",\"</string>\",varValue,varName,hasVarTag);",
          "161:     return \"\";",
          "164:   string wrapValue(string start, string end, string varValue,",
          "165:                        String varName, bool hasVarTag) {",
          "166:     string startVar = \"\";",
          "167:     string endVar = \"\";",
          "168:     if (hasVarTag) {",
          "169:       startVar += \"<var name='\";",
          "170:       startVar += varName.data();",
          "171:       startVar += \"'>\";",
          "172:       endVar = \"</var>\";",
          "173:     }",
          "174:     return startVar + start + varValue + end + endVar;",
          "177:   string m_packetString;",
          "178:   bool m_packetClosed;",
          "179:   bool m_manualPacketCreation;",
          "180: };",
          "181: IMPLEMENT_OBJECT_ALLOCATION(WddxPacket);",
          "186: static void find_var_recursive(TypedValue* tv, WddxPacket* wddxPacket ) {",
          "189:     wddxPacket->add_var(var_name,true);",
          "192:     vector<TypedValue *> children;",
          "195:       find_var_recursive(child,wddxPacket);",
          "202:   Resource packet_id = getArg<KindOfResource>(ar,0);",
          "207:     find_var_recursive(tv,wddxPacket);",
          "213:   WddxPacket* wddxPacket = NEWOBJ(WddxPacket)(empty_string,true,true);",
          "216:     TypedValue* tv = getArg(ar,i);",
          "217:     find_var_recursive(tv,wddxPacket);",
          "221:   return arReturn(ar,strHolder);",
          "",
          "[Added Lines]",
          "17: #include \"hphp/runtime/ext/wddx/ext_wddx.h\"",
          "24: WddxPacket::WddxPacket(const Variant& comment, bool manualPacket, bool sVar) :",
          "25:                        m_packetString(\"\"), m_packetClosed(false),",
          "26:                        m_manualPacketCreation(manualPacket) {",
          "27:   string header = \"<header/>\";",
          "29:   if (!comment.isNull() && !sVar) {",
          "30:     string scomment = comment.toString().data();",
          "31:     header = \"<header><comment>\" + scomment + \"</comment></header>\";",
          "32:   }",
          "33:   m_packetString = \"<wddxPacket version='1.0'>\" + header + \"<data>\";",
          "35:   if (m_manualPacketCreation) {",
          "36:     m_packetString = m_packetString + \"<struct>\";",
          "37:   }",
          "38: }",
          "40: bool WddxPacket::add_var(const String& varName, bool hasVarTag) {",
          "41:   VarEnv* v = g_context->getVarEnv();",
          "42:   if (!v) return false;",
          "43:   Variant varVariant = *reinterpret_cast<Variant*>(v->lookup(varName.get()));",
          "44:   return recursiveAddVar(varName, varVariant, hasVarTag);",
          "45: }",
          "47: string WddxPacket::packet_end() {",
          "48:   if (!m_packetClosed) {",
          "50:       m_packetString += \"</struct>\";",
          "52:     m_packetString += \"</data></wddxPacket>\";",
          "54:   m_packetClosed = true;",
          "55:   return m_packetString;",
          "56: }",
          "58: bool WddxPacket::serialize_value(const Variant& varVariant) {",
          "59:   return recursiveAddVar(empty_string, varVariant, false);",
          "60: }",
          "62: bool WddxPacket::recursiveAddVar(String varName, const Variant& varVariant,",
          "63:                                  bool hasVarTag) {",
          "65:   bool isArray = varVariant.isArray();",
          "66:   bool isObject = varVariant.isObject();",
          "68:   if (isArray || isObject) {",
          "69:     if (hasVarTag) {",
          "70:       m_packetString += \"<var name='\";",
          "71:       m_packetString += varName.data();",
          "72:       m_packetString += \"'>\";",
          "73:     }",
          "75:     Array varAsArray;",
          "76:     Object varAsObject = varVariant.toObject();",
          "77:     if (isArray) varAsArray = varVariant.toArray();",
          "78:     if (isObject) varAsArray = varAsObject.toArray();",
          "80:     int length = varAsArray.length();",
          "81:     if (length > 0) {",
          "82:       ArrayIter it = ArrayIter(varAsArray);",
          "83:       if (it.first().isString()) isObject = true;",
          "84:       if (isObject) {",
          "85:         m_packetString += \"<struct>\";",
          "86:         if (!isArray) {",
          "87:           m_packetString += \"<var name='php_class_name'><string>\";",
          "88:           m_packetString += varAsObject->o_getClassName().c_str();",
          "89:           m_packetString += \"</string></var>\";",
          "90:         }",
          "91:       } else {",
          "92:         m_packetString += \"<array length='\";",
          "93:         m_packetString += std::to_string(length);",
          "96:       for (ArrayIter it(varAsArray); it; ++it) {",
          "97:         Variant key = it.first();",
          "98:         Variant value = it.second();",
          "99:         recursiveAddVar(key.toString(), value, isObject);",
          "101:       if (isObject) {",
          "102:         m_packetString += \"</struct>\";",
          "104:       else {",
          "105:         m_packetString += \"</array>\";",
          "108:     else {",
          "110:       if (isObject) {",
          "111:         m_packetString += \"<struct>\";",
          "112:         if (!isArray) {",
          "113:           m_packetString += \"<var name='php_class_name'><string>\";",
          "114:           m_packetString += varAsObject->o_getClassName().c_str();",
          "115:           m_packetString += \"</string></var>\";",
          "116:         }",
          "117:         m_packetString += \"</struct>\";",
          "120:     if (hasVarTag) {",
          "121:       m_packetString += \"</var>\";",
          "123:     return true;",
          "124:   }",
          "126:   string varType = getDataTypeString(varVariant.getType()).data();",
          "127:   if (!getWddxEncoded(varType, \"\", varName, false).empty()) {",
          "128:     string varValue = varVariant.toString().data();",
          "130:       varValue = varVariant.toBoolean() ? \"true\" : \"false\";",
          "132:     m_packetString += getWddxEncoded(varType, varValue, varName, hasVarTag);",
          "133:     return true;",
          "136:   return false;",
          "137: }",
          "139: string WddxPacket::getWddxEncoded(string varType,",
          "140:                                   string varValue,",
          "141:                                   String varName,",
          "142:                                   bool hasVarTag) {",
          "143:   if (varType.compare(\"NULL\") == 0) {",
          "144:     return wrapValue(\"<null/>\", \"\", \"\", varName, hasVarTag);",
          "145:   }",
          "146:   if (varType.compare(\"boolean\") == 0) {",
          "147:     return wrapValue(\"<boolean value='\", \"'/>\", varValue, varName, hasVarTag);",
          "148:   }",
          "149:   if (varType.compare(\"integer\") == 0 || varType.compare(\"double\") == 0) {",
          "150:     return wrapValue(\"<number>\", \"</number>\", varValue, varName, hasVarTag);",
          "152:   if (varType.compare(\"string\") == 0) {",
          "153:     return wrapValue(\"<string>\", \"</string>\", varValue, varName, hasVarTag);",
          "154:   }",
          "155:   return \"\";",
          "156: }",
          "158: string WddxPacket::wrapValue(string start, string end, string varValue,",
          "159:                              String varName, bool hasVarTag) {",
          "160:   string startVar = \"\";",
          "161:   string endVar = \"\";",
          "162:   if (hasVarTag) {",
          "163:     startVar += \"<var name='\";",
          "164:     startVar += varName.data();",
          "165:     startVar += \"'>\";",
          "166:     endVar = \"</var>\";",
          "167:   }",
          "168:   return startVar + start + varValue + end + endVar;",
          "169: }",
          "173: void find_var_recursive(TypedValue* tv, WddxPacket* wddxPacket) {",
          "176:     wddxPacket->add_var(var_name, true);",
          "179:     vector<TypedValue*> children;",
          "182:       find_var_recursive(child, wddxPacket);",
          "189:   Resource packet_id = getArg<KindOfResource>(ar, 0);",
          "194:     find_var_recursive(tv, wddxPacket);",
          "200:   WddxPacket* wddxPacket = NEWOBJ(WddxPacket)(empty_string, true, true);",
          "203:     TypedValue* tv = getArg(ar, i);",
          "204:     find_var_recursive(tv, wddxPacket);",
          "208:   return arReturn(ar, strHolder);",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/wddx/ext_wddx.h||hphp/runtime/ext/wddx/ext_wddx.h": [
          "File: hphp/runtime/ext/wddx/ext_wddx.h -> hphp/runtime/ext/wddx/ext_wddx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    +----------------------------------------------------------------------+",
          "3:    | HipHop for PHP                                                       |",
          "4:    +----------------------------------------------------------------------+",
          "5:    | Copyright (c) 2010-2014 Facebook, Inc. (http://www.facebook.com)     |",
          "6:    | Copyright (c) 1997-2010 The PHP Group                                |",
          "7:    +----------------------------------------------------------------------+",
          "8:    | This source file is subject to version 3.01 of the PHP license,      |",
          "9:    | that is bundled with this package in the file LICENSE, and is        |",
          "10:    | available through the world-wide-web at the following url:           |",
          "11:    | http://www.php.net/license/3_01.txt                                  |",
          "12:    | If you did not receive a copy of the PHP license and are unable to   |",
          "13:    | obtain it through the world-wide-web, please send a note to          |",
          "14:    | license@php.net so we can mail you a copy immediately.               |",
          "15:    +----------------------------------------------------------------------+",
          "18: #ifndef incl_HPHP_EXT_WDDX_H_",
          "19: #define incl_HPHP_EXT_WDDX_H_",
          "21: #include \"hphp/runtime/base/base-includes.h\"",
          "23: namespace HPHP {",
          "25: using std::string;",
          "26: using std::vector;",
          "28: class WddxPacket: public ResourceData {",
          "29:  public:",
          "30:   DECLARE_RESOURCE_ALLOCATION_NO_SWEEP(WddxPacket);",
          "32:   WddxPacket(const Variant& comment, bool manualPacket, bool sVar);",
          "34:   CLASSNAME_IS(\"WddxPacket\");",
          "36:   virtual const String& o_getClassNameHook() const { return classnameof(); }",
          "39:   bool add_var(const String& varName, bool hasVarTag);",
          "40:   string packet_end();",
          "41:   bool serialize_value(const Variant& varVariant);",
          "42:   bool recursiveAddVar(String varName, const Variant& varVariant,",
          "43:                        bool hasVarTag );",
          "45:  private:",
          "46:   string getWddxEncoded(string varType, string varValue, String varName,",
          "47:                         bool hasVarTag);",
          "49:   string wrapValue(string start, string end, string varValue,",
          "50:                    String varName, bool hasVarTag);",
          "52:   string m_packetString;",
          "53:   bool m_packetClosed;",
          "54:   bool m_manualPacketCreation;",
          "55: };",
          "60: void find_var_recursive(TypedValue* tv, WddxPacket* wddxPacket);",
          "62: }",
          "64: #endif",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/wddx/ext_wddx.php||hphp/runtime/ext/wddx/ext_wddx.php": [
          "File: hphp/runtime/ext/wddx/ext_wddx.php -> hphp/runtime/ext/wddx/ext_wddx.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     }",
          "35:     return wddx_deserialize($out);",
          "36:   }",
          "42:                           /wddxpacket[@version='1.0'] )/data\");",
          "44:   }",
          "46:   $type = $packet->getName();",
          "50:     case \"string\":",
          "52:     case \"number\":",
          "53:       $packet = (string) $packet;",
          "54:       if ((int) $packet == $packet) {",
          "55:         return (int) $packet;",
          "56:       }",
          "58:     case \"boolean\":",
          "59:       if (!empty($packet[\"value\"])) {",
          "60:         return (((string) $packet[\"value\"]) === 'true');",
          "61:       }",
          "63:     case \"binary\":",
          "65:     case \"dateTime\":",
          "71:   $array = array();",
          "72:   $subchildren = $packet->children();",
          "74:   if ($type == \"data\") {",
          "75:     return wddx_deserialize($subchildren[0]);",
          "76:   }",
          "80:     foreach ($subchildren as $subchild) {",
          "82:     }",
          "83:     return $array;",
          "87:   if ($type == \"struct\" || $type == \"recordset\") {",
          "88:     $isObject = false;",
          "",
          "[Removed Lines]",
          "37:   if (!$packet instanceof SimpleXMLElement) {",
          "39:     $xml = simplexml_load_string($packet);",
          "41:     $root = $xml->xpath(\"(/wddxPacket[@version='1.0'] |",
          "43:     return wddx_deserialize($root[0]);",
          "49:   switch ($type) {",
          "51:       return (string) $packet;",
          "57:       return (float) $packet;",
          "62:       break;",
          "64:       return \"binary data\";",
          "66:       $dateTime = new DateTime((string) $packet);",
          "67:       return $dateTime->getTimestamp();",
          "68:   }",
          "79:   if ($type == \"array\" ) {",
          "81:         array_push($array, wddx_deserialize($subchild));",
          "84:   }",
          "",
          "[Added Lines]",
          "37:   if (is_string($packet) && empty($packet)){",
          "38:     return null;",
          "39:   }",
          "41:   if (is_string($packet)) {",
          "43:     $xml = simplexml_load_string($packet);",
          "45:     $root = $xml->xpath(\"(/wddxPacket[@version='1.0'] |",
          "47:     return wddx_deserialize($root[0]);",
          "53:   switch ($type) {",
          "55:       return (string) $packet;",
          "61:       return (float) $packet;",
          "66:       break;",
          "68:       return \"binary data\";",
          "70:       $dateTime = new DateTime((string) $packet);",
          "71:       return $dateTime->getTimestamp();",
          "72:   }",
          "83:   if ($type == \"array\" ) {",
          "85:         array_push($array, wddx_deserialize($subchild));",
          "88:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:         $inner = (string) $firstchild->string;",
          "95:         if (!class_exists($inner)) {",
          "96:           trigger_error(\"The script tried to execute a method or \" .",
          "98:                         \"Please ensure that the class definition \\\"\" .",
          "99:                         $inner . \"\\\" of the object you are trying to \" .",
          "100:                         \"operate on was loaded _before_ unserialize()\" .",
          "",
          "[Removed Lines]",
          "97:                         \"access a property of an incomplete object. \" .",
          "",
          "[Added Lines]",
          "101:                         \"access a property of an incomplete object. \" .",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:                         E_USER_ERROR);",
          "104:           break;",
          "105:         }",
          "107:         $array = $reflect->newInstance();",
          "108:       }",
          "109:     }",
          "",
          "[Removed Lines]",
          "106:         $reflect  = new ReflectionClass($inner);",
          "",
          "[Added Lines]",
          "110:         $reflect  = new ReflectionClass($inner);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:           continue;",
          "116:         }",
          "117:         foreach ($returnArray as $key => $value) {",
          "119:         }",
          "120:       }",
          "121:       else{",
          "124:     }",
          "125:     return $array;",
          "132:       $key = (string)($packet[\"name\"]);",
          "133:       $array[$key] = wddx_deserialize($subchild);",
          "134:       if ($type == \"field\") {",
          "135:         $subarray = array();",
          "136:           foreach ($subchildren as $subchild) {",
          "138:           }",
          "139:         $array[$key] = $subarray;",
          "140:       }",
          "141:       return $array;",
          "142:     }",
          "143:     return wddx_deserialize($subchild);",
          "145: }",
          "",
          "[Removed Lines]",
          "118:           $array->{$key} = $value;",
          "122:         $array = $array + $returnArray;",
          "123:       }",
          "126:   }",
          "129:   if ($type == \"var\" || $type == \"field\") {",
          "130:     $subchild = $subchildren[0];",
          "131:     if (!empty($packet[\"name\"])) {",
          "137:               array_push($subarray, wddx_deserialize($subchild));",
          "144:   }",
          "",
          "[Added Lines]",
          "122:           $array->{$key} = $value;",
          "126:         $array = $array + $returnArray;",
          "127:       }",
          "130:   }",
          "133:   if ($type == \"var\" || $type == \"field\") {",
          "134:     $subchild = $subchildren[0];",
          "135:     if (!empty($packet[\"name\"])) {",
          "141:               array_push($subarray, wddx_deserialize($subchild));",
          "148:   }",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_wddx/wddx_session_decode.php||hphp/test/slow/ext_wddx/wddx_session_decode.php": [
          "File: hphp/test/slow/ext_wddx/wddx_session_decode.php -> hphp/test/slow/ext_wddx/wddx_session_decode.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "2: ini_set(\"session.serialize_handler\",\"wddx\");",
          "3: session_start();",
          "4: $str = \"<wddxPacket version='1.0'><header/><data><struct>",
          "5:   <var name='login_ok'><boolean value='true'/></var>",
          "6:   <var name='name'><string>somename</string></var>",
          "7:   <var name='integer'><number>34</number></var>",
          "8:   </struct></data></wddxPacket>\";",
          "9: session_decode($str);",
          "11: $data = $_SESSION;",
          "13: var_dump($data);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_wddx/wddx_session_decode.php.expect||hphp/test/slow/ext_wddx/wddx_session_decode.php.expect": [
          "File: hphp/test/slow/ext_wddx/wddx_session_decode.php.expect -> hphp/test/slow/ext_wddx/wddx_session_decode.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: array(3) {",
          "2:   [\"login_ok\"]=>",
          "3:   bool(true)",
          "4:   [\"name\"]=>",
          "5:   string(8) \"somename\"",
          "6:   [\"integer\"]=>",
          "7:   int(34)",
          "8: }",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_wddx/wddx_session_encode.php||hphp/test/slow/ext_wddx/wddx_session_encode.php": [
          "File: hphp/test/slow/ext_wddx/wddx_session_encode.php -> hphp/test/slow/ext_wddx/wddx_session_encode.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "2: ini_set(\"session.serialize_handler\",\"wddx\");",
          "3: session_start();",
          "4: $_SESSION['login_ok'] = true;",
          "5: $_SESSION['name'] = 'somename';",
          "6: $_SESSION['integer'] = 34;",
          "7: var_dump(session_encode());",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_wddx/wddx_session_encode.php.expect||hphp/test/slow/ext_wddx/wddx_session_encode.php.expect": [
          "File: hphp/test/slow/ext_wddx/wddx_session_encode.php.expect -> hphp/test/slow/ext_wddx/wddx_session_encode.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: string(221) \"<wddxPacket version='1.0'><header/><data><struct><var name='login_ok'><boolean value='true'/></var><var name='name'><string>somename</string></var><var name='integer'><number>34</number></var></struct></data></wddxPacket>\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99488885d468a7d4184eb6ef6f367c3cb0ce585e",
      "candidate_info": {
        "commit_hash": "99488885d468a7d4184eb6ef6f367c3cb0ce585e",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/99488885d468a7d4184eb6ef6f367c3cb0ce585e",
        "files": [
          "hphp/runtime/base/type-string.cpp",
          "hphp/runtime/base/type-string.h",
          "hphp/runtime/ext/session/ext_session.cpp",
          "hphp/runtime/ext/wddx/ext_wddx.cpp",
          "hphp/runtime/ext/wddx/ext_wddx.h",
          "hphp/runtime/test/test-string.cpp"
        ],
        "message": "Convert WddxPacket to use StringBuffer instead of std::string.\n\nSummary: Convert WddxPacket to use StringBuffer instead of std::string.\n\nReviewed By: @edwinsmith\n\nDifferential Revision: D1714927",
        "before_after_code_files": [
          "hphp/runtime/base/type-string.cpp||hphp/runtime/base/type-string.cpp",
          "hphp/runtime/base/type-string.h||hphp/runtime/base/type-string.h",
          "hphp/runtime/ext/session/ext_session.cpp||hphp/runtime/ext/session/ext_session.cpp",
          "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp",
          "hphp/runtime/ext/wddx/ext_wddx.h||hphp/runtime/ext/wddx/ext_wddx.h",
          "hphp/runtime/test/test-string.cpp||hphp/runtime/test/test-string.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/base/type-string.cpp||hphp/runtime/base/type-string.cpp": [
          "File: hphp/runtime/base/type-string.cpp -> hphp/runtime/base/type-string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "469:   return HPHP::more(m_px, v2);",
          "470: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472: int String::compare(litstr v2) const {",
          "473:   int lengthDiff = length() - strlen(v2);",
          "474:   if(lengthDiff == 0)",
          "475:     return memcmp(data(), v2, length());",
          "476:   else",
          "477:     return lengthDiff;",
          "478: }",
          "480: int String::compare(const String& v2) const {",
          "481:   int lengthDiff = length() - v2.length();",
          "482:   if(lengthDiff == 0)",
          "483:     return memcmp(data(), v2.data(), length());",
          "484:   else",
          "485:     return lengthDiff;",
          "486: }",
          "",
          "---------------"
        ],
        "hphp/runtime/base/type-string.h||hphp/runtime/base/type-string.h": [
          "File: hphp/runtime/base/type-string.h -> hphp/runtime/base/type-string.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:   bool more (const Object& v2) const;",
          "388:   bool more (const Resource& v2) const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:   int compare(litstr v2) const;",
          "391:   int compare(const String& v2) const;",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/session/ext_session.cpp||hphp/runtime/ext/session/ext_session.cpp": [
          "File: hphp/runtime/ext/session/ext_session.cpp -> hphp/runtime/ext/session/ext_session.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1147:       }",
          "1148:     }",
          "1152:   }",
          "1154:   virtual bool decode(const String& value) {",
          "",
          "[Removed Lines]",
          "1150:     string spacket = wddxPacket->packet_end();",
          "1151:     return String(spacket);",
          "",
          "[Added Lines]",
          "1150:     return wddxPacket->packet_end();",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp": [
          "File: hphp/runtime/ext/wddx/ext_wddx.cpp -> hphp/runtime/ext/wddx/ext_wddx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"hphp/runtime/ext/wddx/ext_wddx.h\"",
          "22: namespace HPHP {",
          "24: WddxPacket::WddxPacket(const Variant& comment, bool manualPacket, bool sVar) :",
          "26:                        m_manualPacketCreation(manualPacket) {",
          "29:   if (!comment.isNull() && !sVar) {",
          "32:   }",
          "35:   if (m_manualPacketCreation) {",
          "37:   }",
          "38: }",
          "",
          "[Removed Lines]",
          "19: #include <string>",
          "20: #include <vector>",
          "25:                        m_packetString(\"\"), m_packetClosed(false),",
          "27:   std::string header = \"<header/>\";",
          "30:     std::string scomment = comment.toString().data();",
          "31:     header = \"<header><comment>\" + scomment + \"</comment></header>\";",
          "33:   m_packetString = \"<wddxPacket version='1.0'>\" + header + \"<data>\";",
          "36:     m_packetString = m_packetString + \"<struct>\";",
          "",
          "[Added Lines]",
          "22:                        m_packetClosed(false),",
          "24:   m_packetString.append(\"<wddxPacket version='1.0'>\");",
          "27:     m_packetString.append(\"<header><comment>\");",
          "28:     m_packetString.append(comment);",
          "29:     m_packetString.append(\"</comment></header>\");",
          "30:   } else {",
          "31:     m_packetString.append(\"<header/>\");",
          "34:   m_packetString.append(\"<data>\");",
          "37:     m_packetString.append(\"<struct>\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   return recursiveAddVar(varName, varVariant, hasVarTag);",
          "45: }",
          "48:   if (!m_packetClosed) {",
          "49:     if (m_manualPacketCreation) {",
          "51:     }",
          "53:   }",
          "54:   m_packetClosed = true;",
          "56: }",
          "58: bool WddxPacket::serialize_value(const Variant& varVariant) {",
          "",
          "[Removed Lines]",
          "47: std::string WddxPacket::packet_end() {",
          "50:       m_packetString += \"</struct>\";",
          "52:     m_packetString += \"</data></wddxPacket>\";",
          "55:   return m_packetString;",
          "",
          "[Added Lines]",
          "48: String WddxPacket::packet_end() {",
          "51:       m_packetString.append(\"</struct>\");",
          "53:     m_packetString.append(\"</data></wddxPacket>\");",
          "56:   return m_packetString.detach();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   if (isArray || isObject) {",
          "70:     if (hasVarTag) {",
          "74:     }",
          "76:     Array varAsArray;",
          "",
          "[Removed Lines]",
          "71:       m_packetString += \"<var name='\";",
          "72:       m_packetString += varName.data();",
          "73:       m_packetString += \"'>\";",
          "",
          "[Added Lines]",
          "72:       m_packetString.append(\"<var name='\");",
          "73:       m_packetString.append(varName.data());",
          "74:       m_packetString.append(\"'>\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:       ArrayIter it = ArrayIter(varAsArray);",
          "84:       if (it.first().isString()) isObject = true;",
          "85:       if (isObject) {",
          "87:         if (!isArray) {",
          "91:         }",
          "92:       } else {",
          "96:       }",
          "97:       for (ArrayIter it(varAsArray); it; ++it) {",
          "98:         Variant key = it.first();",
          "",
          "[Removed Lines]",
          "86:         m_packetString += \"<struct>\";",
          "88:           m_packetString += \"<var name='php_class_name'><string>\";",
          "89:           m_packetString += varAsObject->o_getClassName().c_str();",
          "90:           m_packetString += \"</string></var>\";",
          "93:         m_packetString += \"<array length='\";",
          "94:         m_packetString += std::to_string(length);",
          "95:         m_packetString += \"'>\";",
          "",
          "[Added Lines]",
          "87:         m_packetString.append(\"<struct>\");",
          "89:           m_packetString.append(\"<var name='php_class_name'><string>\");",
          "90:           m_packetString.append(varAsObject->o_getClassName());",
          "91:           m_packetString.append(\"</string></var>\");",
          "94:         m_packetString.append(\"<array length='\");",
          "95:         m_packetString.append(std::to_string(length));",
          "96:         m_packetString.append(\"'>\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:         recursiveAddVar(key.toString(), value, isObject);",
          "101:       }",
          "102:       if (isObject) {",
          "104:       }",
          "105:       else {",
          "107:       }",
          "108:     }",
          "109:     else {",
          "111:       if (isObject) {",
          "113:         if (!isArray) {",
          "117:         }",
          "119:       }",
          "120:     }",
          "121:     if (hasVarTag) {",
          "123:     }",
          "124:     return true;",
          "125:   }",
          "128:   if (!getWddxEncoded(varType, \"\", varName, false).empty()) {",
          "130:     if (varType.compare(\"boolean\") == 0) {",
          "131:       varValue = varVariant.toBoolean() ? \"true\" : \"false\";",
          "132:     } else {",
          "",
          "[Removed Lines]",
          "103:         m_packetString += \"</struct>\";",
          "106:         m_packetString += \"</array>\";",
          "112:         m_packetString += \"<struct>\";",
          "114:           m_packetString += \"<var name='php_class_name'><string>\";",
          "115:           m_packetString += varAsObject->o_getClassName().c_str();",
          "116:           m_packetString += \"</string></var>\";",
          "118:         m_packetString += \"</struct>\";",
          "122:       m_packetString += \"</var>\";",
          "127:   std::string varType = getDataTypeString(varVariant.getType()).data();",
          "129:     std::string varValue;",
          "",
          "[Added Lines]",
          "104:         m_packetString.append(\"</struct>\");",
          "107:         m_packetString.append(\"</array>\");",
          "113:         m_packetString.append(\"<struct>\");",
          "115:           m_packetString.append(\"<var name='php_class_name'><string>\");",
          "116:           m_packetString.append(varAsObject->o_getClassName());",
          "117:           m_packetString.append(\"</string></var>\");",
          "119:         m_packetString.append(\"</struct>\");",
          "123:       m_packetString.append(\"</var>\");",
          "128:   String varType = getDataTypeString(varVariant.getType());",
          "130:     String varValue;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134:                                         StringUtil::QuoteStyle::Double,",
          "135:                                         \"UTF-8\", false, false).toCppString();",
          "136:     }",
          "138:     return true;",
          "139:   }",
          "141:   return false;",
          "142: }",
          "148:   if (varType.compare(\"NULL\") == 0) {",
          "149:     return wrapValue(\"<null/>\", \"\", \"\", varName, hasVarTag);",
          "150:   }",
          "",
          "[Removed Lines]",
          "137:     m_packetString += getWddxEncoded(varType, varValue, varName, hasVarTag);",
          "144: std::string WddxPacket::getWddxEncoded(const std::string& varType,",
          "145:                                        const std::string& varValue,",
          "146:                                        const String& varName,",
          "147:                                        bool hasVarTag) {",
          "",
          "[Added Lines]",
          "138:     m_packetString.append(",
          "139:       getWddxEncoded(varType, varValue, varName, hasVarTag));",
          "146: String WddxPacket::getWddxEncoded(const String& varType,",
          "147:                                   const String& varValue,",
          "148:                                   const String& varName,",
          "149:                                   bool hasVarTag) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "160:   return \"\";",
          "161: }",
          "170:   if (hasVarTag) {",
          "175:   }",
          "177: }",
          "",
          "[Removed Lines]",
          "163: std::string WddxPacket::wrapValue(const std::string& start,",
          "164:                                   const std::string& end,",
          "165:                                   const std::string& varValue,",
          "166:                                   const String& varName,",
          "167:                                   bool hasVarTag) {",
          "168:   std::string startVar = \"\";",
          "169:   std::string endVar = \"\";",
          "171:     startVar += \"<var name='\";",
          "172:     startVar += varName.data();",
          "173:     startVar += \"'>\";",
          "174:     endVar = \"</var>\";",
          "176:   return startVar + start + varValue + end + endVar;",
          "",
          "[Added Lines]",
          "165: String WddxPacket::wrapValue(const String& start,",
          "166:                              const String& end,",
          "167:                              const String& varValue,",
          "168:                              const String& varName,",
          "169:                              bool hasVarTag) {",
          "170:   StringBuffer valueStr;",
          "172:   if (hasVarTag) {",
          "173:     valueStr.append(\"<var name='\");",
          "174:     valueStr.append(varName);",
          "175:     valueStr.append(\"'>\");",
          "176:   }",
          "178:   valueStr.append(start);",
          "179:   valueStr.append(varValue);",
          "180:   valueStr.append(end);",
          "183:     valueStr.append(\"</var>\");",
          "186:   return valueStr.detach();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "229: static String HHVM_FUNCTION(wddx_packet_end, const Resource& packet_id) {",
          "230:   auto wddxPacket = packet_id.getTyped<WddxPacket>();",
          "233: }",
          "235: static Resource HHVM_FUNCTION(wddx_packet_start, const Variant& comment) {",
          "",
          "[Removed Lines]",
          "231:   std::string packetString = wddxPacket->packet_end();",
          "232:   return String(packetString);",
          "",
          "[Added Lines]",
          "241:   return wddxPacket->packet_end();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "241:                             const Variant& comment) {",
          "242:   WddxPacket* wddxPacket = newres<WddxPacket>(comment, false, false);",
          "243:   wddxPacket->serialize_value(var);",
          "246: }",
          "",
          "[Removed Lines]",
          "244:   const std::string packetString = wddxPacket->packet_end();",
          "245:   return String(packetString);",
          "",
          "[Added Lines]",
          "253:   return wddxPacket->packet_end();",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/wddx/ext_wddx.h||hphp/runtime/ext/wddx/ext_wddx.h": [
          "File: hphp/runtime/ext/wddx/ext_wddx.h -> hphp/runtime/ext/wddx/ext_wddx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #define incl_HPHP_EXT_WDDX_H_",
          "21: #include \"hphp/runtime/base/base-includes.h\"",
          "23: namespace HPHP {",
          "28: class WddxPacket: public ResourceData {",
          "29:  public:",
          "30:   DECLARE_RESOURCE_ALLOCATION_NO_SWEEP(WddxPacket);",
          "",
          "[Removed Lines]",
          "25: using std::string;",
          "26: using std::vector;",
          "",
          "[Added Lines]",
          "22: #include \"hphp/runtime/base/string-buffer.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   bool add_var(const String& varName, bool hasVarTag);",
          "41:   bool serialize_value(const Variant& varVariant);",
          "42:   bool recursiveAddVar(const String& varName, const Variant& varVariant,",
          "43:                        bool hasVarTag );",
          "45:  private:",
          "51:                    bool hasVarTag);",
          "54:   bool m_packetClosed;",
          "55:   bool m_manualPacketCreation;",
          "56: };",
          "",
          "[Removed Lines]",
          "40:   string packet_end();",
          "46:   string getWddxEncoded(const string& varType, const string& varValue,",
          "47:                         const String& varName, bool hasVarTag);",
          "49:   string wrapValue(const string& start, const string& end,",
          "50:                    const string& varValue, const String& varName,",
          "53:   string m_packetString;",
          "",
          "[Added Lines]",
          "38:   String packet_end();",
          "44:   String getWddxEncoded(const String& varType,",
          "45:                         const String& varValue,",
          "46:                         const String& varName,",
          "47:                         bool hasVarTag);",
          "49:   String wrapValue(const String& start,",
          "50:                    const String& end,",
          "51:                    const String& varValue,",
          "52:                    const String& varName,",
          "55:   StringBuffer m_packetString;",
          "",
          "---------------"
        ],
        "hphp/runtime/test/test-string.cpp||hphp/runtime/test/test-string.cpp": [
          "File: hphp/runtime/test/test-string.cpp -> hphp/runtime/test/test-string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    +----------------------------------------------------------------------+",
          "3:    | HipHop for PHP                                                       |",
          "4:    +----------------------------------------------------------------------+",
          "5:    | Copyright (c) 2010-2014 Facebook, Inc. (http://www.facebook.com)     |",
          "6:    +----------------------------------------------------------------------+",
          "7:    | This source file is subject to version 3.01 of the PHP license,      |",
          "8:    | that is bundled with this package in the file LICENSE, and is        |",
          "9:    | available through the world-wide-web at the following url:           |",
          "10:    | http://www.php.net/license/3_01.txt                                  |",
          "11:    | If you did not receive a copy of the PHP license and are unable to   |",
          "12:    | obtain it through the world-wide-web, please send a note to          |",
          "13:    | license@php.net so we can mail you a copy immediately.               |",
          "14:    +----------------------------------------------------------------------+",
          "17: #include <gtest/gtest.h>",
          "19: #include \"hphp/runtime/base/type-string.h\"",
          "21: namespace HPHP {",
          "23: TEST(DataTypes, String) {",
          "25:   {",
          "26:     EXPECT_TRUE(String(\"abc\").compare(\"abc\") == 0);",
          "27:     EXPECT_TRUE(String(\"abc\").compare(\"bbc\") < 0);",
          "28:     EXPECT_TRUE(String(\"bbc\").compare(\"abc\") > 0);",
          "29:     EXPECT_TRUE(String(\"abc\").compare(String(\"abc\")) == 0);",
          "30:     EXPECT_TRUE(String(\"abc\").compare(String(\"bbc\")) < 0);",
          "31:     EXPECT_TRUE(String(\"bbc\").compare(String(\"abc\")) > 0);",
          "33:     EXPECT_TRUE(String(\"abc\").compare(\"abcd\") < 0);",
          "34:     EXPECT_TRUE(String(\"abcd\").compare(\"abc\") > 0);",
          "35:     EXPECT_TRUE(String(\"abc\").compare(String(\"abcd\")) < 0);",
          "36:     EXPECT_TRUE(String(\"abcd\").compare(String(\"abc\")) > 0);",
          "39:     std::string str1(\"a\\0bc\", 4);",
          "40:     std::string str2(\"a\\0bb\", 4);",
          "41:     EXPECT_TRUE(String(str1).compare(String(str1)) == 0);",
          "42:     EXPECT_TRUE(String(str1).compare(String(str2)) > 0);",
          "43:     EXPECT_TRUE(String(str2).compare(String(str1)) < 0);",
          "44:   }",
          "45: }",
          "47: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d08b18268125ab90376f7d3eea8db72b5d7c500",
      "candidate_info": {
        "commit_hash": "2d08b18268125ab90376f7d3eea8db72b5d7c500",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/2d08b18268125ab90376f7d3eea8db72b5d7c500",
        "files": [
          "hphp/runtime/ext/wddx/ext_wddx.cpp",
          "hphp/test/slow/ext_wddx/htmlent.php",
          "hphp/test/slow/ext_wddx/htmlent.php.expect"
        ],
        "message": "HTMLEncode strings in wddx_serialize_value()\n\nSummary: Strings returned through wddx_serialize_value should be HTMLEncode()'d during\nserialization.\n\nFixes #4283\n\n{sync, type=\"child\", parent=\"internal\", parentrevid=\"1691695\", parentrevfbid=\"1537976659780590\", parentdiffid=\"5726084\"}\n\nReviewed By: @JoelMarcey\n\nDifferential Revision: D1691695\n\nSignature: t1:1691695:1416530595:722bfcdaf7c0dbee379bea886cd4c43d997ca7dd",
        "before_after_code_files": [
          "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp",
          "hphp/test/slow/ext_wddx/htmlent.php||hphp/test/slow/ext_wddx/htmlent.php",
          "hphp/test/slow/ext_wddx/htmlent.php.expect||hphp/test/slow/ext_wddx/htmlent.php.expect"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp",
            "hphp/test/slow/ext_wddx/htmlent.php||hphp/test/slow/ext_wddx/htmlent.php",
            "hphp/test/slow/ext_wddx/htmlent.php.expect||hphp/test/slow/ext_wddx/htmlent.php.expect"
          ],
          "candidate": [
            "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp",
            "hphp/test/slow/ext_wddx/htmlent.php||hphp/test/slow/ext_wddx/htmlent.php",
            "hphp/test/slow/ext_wddx/htmlent.php.expect||hphp/test/slow/ext_wddx/htmlent.php.expect"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/wddx/ext_wddx.cpp||hphp/runtime/ext/wddx/ext_wddx.cpp": [
          "File: hphp/runtime/ext/wddx/ext_wddx.cpp -> hphp/runtime/ext/wddx/ext_wddx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   std::string varType = getDataTypeString(varVariant.getType()).data();",
          "128:   if (!getWddxEncoded(varType, \"\", varName, false).empty()) {",
          "130:     if (varType.compare(\"boolean\") == 0) {",
          "131:       varValue = varVariant.toBoolean() ? \"true\" : \"false\";",
          "132:     }",
          "133:     m_packetString += getWddxEncoded(varType, varValue, varName, hasVarTag);",
          "134:     return true;",
          "",
          "[Removed Lines]",
          "129:     std::string varValue = varVariant.toString().data();",
          "",
          "[Added Lines]",
          "129:     std::string varValue;",
          "132:     } else {",
          "133:       varValue = StringUtil::HtmlEncode(varVariant.toString(),",
          "134:                                         StringUtil::QuoteStyle::Double,",
          "135:                                         \"UTF-8\", false, false).toCppString();",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_wddx/htmlent.php||hphp/test/slow/ext_wddx/htmlent.php": [
          "File: hphp/test/slow/ext_wddx/htmlent.php -> hphp/test/slow/ext_wddx/htmlent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "2: $s = wddx_serialize_value(\"Test for &\");",
          "3: var_dump($s);",
          "4: $d = wddx_deserialize($s);",
          "5: var_dump($d);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_wddx/htmlent.php.expect||hphp/test/slow/ext_wddx/htmlent.php.expect": [
          "File: hphp/test/slow/ext_wddx/htmlent.php.expect -> hphp/test/slow/ext_wddx/htmlent.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: string(92) \"<wddxPacket version='1.0'><header/><data><string>Test for &amp;</string></data></wddxPacket>\"",
          "2: string(10) \"Test for &\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}