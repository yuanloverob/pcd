{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "df6f9cc890363f79b28e2ad28b090cf8d599ee23",
      "candidate_info": {
        "commit_hash": "df6f9cc890363f79b28e2ad28b090cf8d599ee23",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/df6f9cc890363f79b28e2ad28b090cf8d599ee23",
        "files": [
          "cstool/cstool.c",
          "cstool/cstool_arm.c",
          "cstool/cstool_m68k.c"
        ],
        "message": "cleanup",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c",
          "cstool/cstool_arm.c||cstool/cstool_arm.c",
          "cstool/cstool_m68k.c||cstool/cstool_m68k.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:  }",
          "127:  if (cs_support(CS_ARCH_M68K)) {",
          "129:   printf(\"        m68k40:    m68k_040\\n\");",
          "130:  }",
          "",
          "[Removed Lines]",
          "128:   printf(\"        m68kb:     m68k+big endian\\n\");",
          "",
          "[Added Lines]",
          "128:   printf(\"        m68k:      m68k + big endian\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "315:   err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "316:  }",
          "319:   arch = CS_ARCH_M68K;",
          "320:   err = cs_open(CS_ARCH_M68K, CS_MODE_BIG_ENDIAN, &handle);",
          "321:  }",
          "",
          "[Removed Lines]",
          "318:  if (!strcmp(mode,\"m68kb\")) {",
          "",
          "[Added Lines]",
          "318:  if (!strcmp(mode,\"m68k\")) {",
          "",
          "---------------"
        ],
        "cstool/cstool_arm.c||cstool/cstool_arm.c": [
          "File: cstool/cstool_arm.c -> cstool/cstool_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "45:     if (op->mem.base != ARM_REG_INVALID)",
          "46:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "48:     if (op->mem.index != ARM_REG_INVALID)",
          "49:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "51:     if (op->mem.scale != 1)",
          "52:      printf(\"\\t\\t\\toperands[%u].mem.scale: %u\\n\", i, op->mem.scale);",
          "53:     if (op->mem.disp != 0)",
          "54:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "55:     if (op->mem.lshift != 0)",
          "56:      printf(\"\\t\\t\\toperands[%u].mem.lshift: 0x%x\\n\", i, op->mem.lshift);",
          "58:     break;",
          "59:    case ARM_OP_PIMM:",
          "60:     printf(\"\\t\\toperands[%u].type: P-IMM = %u\\n\", i, op->imm);",
          "",
          "[Removed Lines]",
          "47:          i, cs_reg_name(handle, op->mem.base));",
          "50:          i, cs_reg_name(handle, op->mem.index));",
          "",
          "[Added Lines]",
          "47:        i, cs_reg_name(handle, op->mem.base));",
          "50:        i, cs_reg_name(handle, op->mem.index));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:    else",
          "97:     printf(\"\\t\\t\\tShift: %u = %s\\n\", op->shift.type,",
          "99:   }",
          "101:   if (op->vector_index != -1) {",
          "",
          "[Removed Lines]",
          "98:      cs_reg_name(handle, op->shift.value));",
          "",
          "[Added Lines]",
          "98:       cs_reg_name(handle, op->shift.value));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:  if (!cs_regs_access(handle, ins,",
          "140:   if (regs_read_count) {",
          "141:    printf(\"\\tRegisters read:\");",
          "142:    for(i = 0; i < regs_read_count; i++) {",
          "",
          "[Removed Lines]",
          "138:       regs_read, &regs_read_count,",
          "139:       regs_write, &regs_write_count)) {",
          "",
          "[Added Lines]",
          "138:     regs_read, &regs_read_count,",
          "139:     regs_write, &regs_write_count)) {",
          "",
          "---------------"
        ],
        "cstool/cstool_m68k.c||cstool/cstool_m68k.c": [
          "File: cstool/cstool_m68k.c -> cstool/cstool_m68k.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "94:     if (op->mem.base_reg != M68K_REG_INVALID)",
          "95:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "97:     if (op->mem.index_reg != M68K_REG_INVALID) {",
          "98:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "100:      printf(\"\\t\\t\\toperands[%u].mem.index: size = %c\\n\",",
          "102:     }",
          "103:     if (op->mem.disp != 0)",
          "104:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "105:     if (op->mem.scale != 0)",
          "106:      printf(\"\\t\\t\\toperands[%u].mem.scale: %d\\n\", i, op->mem.scale);",
          "108:     printf(\"\\t\\taddress mode: %s\\n\", s_addressing_modes[op->address_mode]);",
          "109:     break;",
          "110:    case M68K_OP_FP_SINGLE:",
          "",
          "[Removed Lines]",
          "96:          i, cs_reg_name(handle, op->mem.base_reg));",
          "99:          i, cs_reg_name(handle, op->mem.index_reg));",
          "101:          i, op->mem.index_size ? 'l' : 'w');",
          "",
          "[Added Lines]",
          "96:        i, cs_reg_name(handle, op->mem.base_reg));",
          "99:        i, cs_reg_name(handle, op->mem.index_reg));",
          "101:        i, op->mem.index_size ? 'l' : 'w');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10618e3e6a7672d6e162464e60d6ac2cc33d12e7",
      "candidate_info": {
        "commit_hash": "10618e3e6a7672d6e162464e60d6ac2cc33d12e7",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/10618e3e6a7672d6e162464e60d6ac2cc33d12e7",
        "files": [
          "bindings/java/capstone/Ppc_const.java",
          "bindings/ocaml/ppc_const.ml",
          "bindings/python/capstone/__init__.py",
          "bindings/python/capstone/ppc_const.py",
          "cstool/cstool.c",
          "include/capstone/capstone.h"
        ],
        "message": "add CS_VERSION_{MAJOR, MINOR, EXTRA}",
        "before_after_code_files": [
          "bindings/javcapstone/Ppc_const.java||bindings/java/capstone/Ppc_const.java",
          "bindings/ocaml/ppc_const.ml||bindings/ocaml/ppc_const.ml",
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py",
          "bindings/python/capstone/ppc_const.py||bindings/python/capstone/ppc_const.py",
          "cstool/cstool.c||cstool/cstool.c",
          "include/capstone/capstone.h||include/capstone/capstone.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/javcapstone/Ppc_const.java||bindings/java/capstone/Ppc_const.java": [
          "File: bindings/javcapstone/Ppc_const.java -> bindings/java/capstone/Ppc_const.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:  public static final int PPC_OP_INVALID = 0;",
          "243:  public static final int PPC_OP_REG = 1;",
          "244:  public static final int PPC_OP_IMM = 2;",
          "245:  public static final int PPC_OP_MEM = 3;",
          "246:  public static final int PPC_OP_CRX = 64;",
          "",
          "---------------"
        ],
        "bindings/ocaml/ppc_const.ml||bindings/ocaml/ppc_const.ml": [
          "File: bindings/ocaml/ppc_const.ml -> bindings/ocaml/ppc_const.ml",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: let _PPC_BH_PLUS = 1;;",
          "21: let _PPC_BH_MINUS = 2;;",
          "31: (* PPC registers *)",
          "33: let _PPC_REG_INVALID = 0;;",
          "",
          "[Removed Lines]",
          "23: (* Operand type for instruction's operands *)",
          "25: let _PPC_OP_INVALID = 0;;",
          "26: let _PPC_OP_REG = 1;;",
          "27: let _PPC_OP_IMM = 2;;",
          "28: let _PPC_OP_MEM = 3;;",
          "29: let _PPC_OP_CRX = 64;;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242: let _PPC_REG_X2 = 209;;",
          "243: let _PPC_REG_ENDING = 210;;",
          "245: (* PPC instruction *)",
          "247: let _PPC_INS_INVALID = 0;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237: (* Operand type for instruction's operands *)",
          "239: let _PPC_OP_INVALID = 0;;",
          "240: let _PPC_OP_REG = 1;;",
          "241: let _PPC_OP_IMM = 2;;",
          "242: let _PPC_OP_MEM = 3;;",
          "243: let _PPC_OP_CRX = 64;;",
          "",
          "---------------"
        ],
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     'CS_API_MAJOR',",
          "20:     'CS_API_MINOR',",
          "22:     'CS_ARCH_ARM',",
          "23:     'CS_ARCH_ARM64',",
          "24:     'CS_ARCH_MIPS',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     'CS_VERSION_MAJOR',",
          "23:     'CS_VERSION_MINOR',",
          "24:     'CS_VERSION_EXTRA',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: CS_API_MAJOR = 4",
          "114: CS_API_MINOR = 0",
          "118: # architectures",
          "119: CS_ARCH_ARM = 0",
          "",
          "[Removed Lines]",
          "116: __version__ = \"%s.%s\" %(CS_API_MAJOR, CS_API_MINOR)",
          "",
          "[Added Lines]",
          "120: # Package version",
          "121: CS_VERSION_MAJOR = CS_API_MAJOR",
          "122: CS_VERSION_MINOR = CS_API_MINOR",
          "123: CS_VERSION_EXTRA = 0",
          "125: __version__ = \"%u.%u.%u\" %(CS_VERSION_MAJOR, CS_VERSION_MINOR, CS_VERSION_EXTRA)",
          "",
          "---------------"
        ],
        "bindings/python/capstone/ppc_const.py||bindings/python/capstone/ppc_const.py": [
          "File: bindings/python/capstone/ppc_const.py -> bindings/python/capstone/ppc_const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: PPC_BH_PLUS = 1",
          "21: PPC_BH_MINUS = 2",
          "31: # PPC registers",
          "33: PPC_REG_INVALID = 0",
          "",
          "[Removed Lines]",
          "23: # Operand type for instruction's operands",
          "25: PPC_OP_INVALID = 0",
          "26: PPC_OP_REG = 1",
          "27: PPC_OP_IMM = 2",
          "28: PPC_OP_MEM = 3",
          "29: PPC_OP_CRX = 64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242: PPC_REG_X2 = 209",
          "243: PPC_REG_ENDING = 210",
          "245: # PPC instruction",
          "247: PPC_INS_INVALID = 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237: # Operand type for instruction's operands",
          "239: PPC_OP_INVALID = 0",
          "240: PPC_OP_REG = 1",
          "241: PPC_OP_IMM = 2",
          "242: PPC_OP_MEM = 3",
          "243: PPC_OP_CRX = 64",
          "",
          "---------------"
        ],
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: static void usage(char *prog)",
          "75: {",
          "77:  printf(\"Syntax: %s [-d] <arch+mode> <assembly-hexstring> [start-address-in-hex-format]\\n\", prog);",
          "78:  printf(\"\\nThe following <arch+mode> options are supported:\\n\");",
          "",
          "[Removed Lines]",
          "76:  printf(\"Cstool v%s for Capstone Disassembler Engine (core v%u.%u)\\n\\n\", VERSION, CS_API_MAJOR, CS_API_MINOR);",
          "",
          "[Added Lines]",
          "76:  printf(\"Cstool v%s for Capstone Disassembler Engine (core v%u.%u.%u)\\n\\n\", VERSION, CS_VERSION_MAJOR, CS_VERSION_MINOR, CS_VERSION_EXTRA);",
          "",
          "---------------"
        ],
        "include/capstone/capstone.h||include/capstone/capstone.h": [
          "File: include/capstone/capstone.h -> include/capstone/capstone.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "56: #define CS_NEXT_VERSION 3",
          "",
          "[Added Lines]",
          "56: #define CS_NEXT_VERSION 4",
          "59: #define CS_VERSION_MAJOR CS_API_MAJOR",
          "60: #define CS_VERSION_MINOR CS_API_MINOR",
          "61: #define CS_VERSION_EXTRA 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97ee61b645d30c01548edb4c35bc7659aeae459d",
      "candidate_info": {
        "commit_hash": "97ee61b645d30c01548edb4c35bc7659aeae459d",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/97ee61b645d30c01548edb4c35bc7659aeae459d",
        "files": [
          "arch/M68K/M68KInstPrinter.c"
        ],
        "message": "M68KInstPrinter.c: print size after register in M68K_AM_PCI_INDEX_8_BIT_DISP",
        "before_after_code_files": [
          "arch/M68K/M68KInstPrinter.c||arch/M68K/M68KInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/M68K/M68KInstPrinter.c||arch/M68K/M68KInstPrinter.c": [
          "File: arch/M68K/M68KInstPrinter.c -> arch/M68K/M68KInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     SStream_concat(O, \"#$%x\", op->imm);",
          "159:     break;",
          "160:   case M68K_AM_PCI_INDEX_8_BIT_DISP:",
          "162:    break;",
          "163:   case M68K_AM_AREGI_INDEX_8_BIT_DISP:",
          "164:    SStream_concat(O, \"$%x(%s,%s%s.%c)\", op->mem.disp, getRegName(op->mem.base_reg), s_spacing, getRegName(op->mem.index_reg), op->mem.index_size ? 'l' : 'w');",
          "",
          "[Removed Lines]",
          "161:    SStream_concat(O, \"$%x(pc,%s%s)\", op->mem.disp, s_spacing, getRegName(op->mem.index_reg));",
          "",
          "[Added Lines]",
          "161:    SStream_concat(O, \"$%x(pc,%s%s.%c)\", op->mem.disp, s_spacing, getRegName(op->mem.index_reg), op->mem.index_size ? 'l' : 'w');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "988bb6311339da28023b4fc74405ccd89a31cc54",
      "candidate_info": {
        "commit_hash": "988bb6311339da28023b4fc74405ccd89a31cc54",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/988bb6311339da28023b4fc74405ccd89a31cc54",
        "files": [
          "arch/M68K/M68KDisassembler.c",
          "arch/M68K/M68KDisassembler.h",
          "arch/M68K/M68KInstPrinter.c",
          "include/capstone/m68k.h",
          "tests/test_m68k.c"
        ],
        "message": "[M68K] Added basic groups\n\nAdded support for basic groups in the M68K backend. Also did some minor cleanups/whitespace fixes while at it.\n\nRelates to this issue https://github.com/aquynh/capstone/issues/494",
        "before_after_code_files": [
          "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c",
          "arch/M68K/M68KDisassembler.h||arch/M68K/M68KDisassembler.h",
          "arch/M68K/M68KInstPrinter.c||arch/M68K/M68KInstPrinter.c",
          "include/capstone/m68k.h||include/capstone/m68k.h",
          "tests/test_m68k.c||tests/test_m68k.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c": [
          "File: arch/M68K/M68KDisassembler.c -> arch/M68K/M68KDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: static unsigned int m68k_read_disassembler_16(const m68k_info *info, const uint64_t addr)",
          "157: {",
          "158:  const uint16_t v0 = info->code[addr + 0];",
          "159:  const uint16_t v1 = info->code[addr + 1];",
          "161: }",
          "163: static unsigned int m68k_read_disassembler_32(const m68k_info *info, const uint64_t addr)",
          "",
          "[Removed Lines]",
          "160:  return (v0 << 8) | v1;",
          "",
          "[Added Lines]",
          "159:  return (v0 << 8) | v1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:   if (preindex) {",
          "382:    op->address_mode = is_pc ? M68K_AM_PC_MEMI_PRE_INDEX : M68K_AM_MEMI_PRE_INDEX;",
          "384:    op->address_mode = is_pc ? M68K_AM_PC_MEMI_POST_INDEX : M68K_AM_MEMI_POST_INDEX;",
          "385:   }",
          "",
          "[Removed Lines]",
          "383:   } else if (postindex) {",
          "",
          "[Added Lines]",
          "382:   } else if (postindex) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "388:  }",
          "390:  op->mem.index_reg = (EXT_INDEX_AR(extension) ? M68K_REG_A0 : M68K_REG_D0) + EXT_INDEX_REGISTER(extension);",
          "393:  if (EXT_8BIT_DISPLACEMENT(extension) == 0) {",
          "394:   if (is_pc) {",
          "396:    op->address_mode = M68K_AM_PCI_INDEX_BASE_DISP;",
          "397:   } else {",
          "399:   }",
          "400:  } else {",
          "401:   if (is_pc) {",
          "403:    op->address_mode = M68K_AM_PCI_INDEX_8_BIT_DISP;",
          "404:   } else {",
          "406:    op->address_mode = M68K_AM_AREGI_INDEX_8_BIT_DISP;",
          "407:   }",
          "",
          "[Removed Lines]",
          "391:  op->mem.index_size = EXT_INDEX_LONG(extension) ? 1 : 0;",
          "395:    op->mem.base_reg = M68K_REG_PC;",
          "398:    op->mem.base_reg = M68K_REG_A0 + (instruction & 7);",
          "402:    op->mem.base_reg = M68K_REG_PC;",
          "405:    op->mem.base_reg = M68K_REG_A0 + (instruction & 7);",
          "",
          "[Added Lines]",
          "390:  op->mem.index_size = EXT_INDEX_LONG(extension) ? 1 : 0;",
          "394:    op->mem.base_reg = M68K_REG_PC;",
          "397:    op->mem.base_reg = M68K_REG_A0 + (instruction & 7);",
          "401:    op->mem.base_reg = M68K_REG_PC;",
          "404:    op->mem.base_reg = M68K_REG_A0 + (instruction & 7);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "509:  }",
          "510: }",
          "512: static cs_m68k* build_init_op(m68k_info *info, int opcode, int count, int size)",
          "513: {",
          "514:  cs_m68k* ext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511: static void set_insn_group(m68k_info *info, m68k_group_type group)",
          "512: {",
          "513:  info->groups[info->groups_count++] = (uint8_t)group;",
          "514: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "622:  op0->type = M68K_OP_IMM;",
          "623:  op0->address_mode = M68K_AM_IMMIDIATE;",
          "626:  get_ea_mode_op(info, op1, info->ir, size);",
          "627: }",
          "",
          "[Removed Lines]",
          "624:  op0->imm = imm;",
          "",
          "[Added Lines]",
          "628:  op0->imm = imm;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "746:  op0->type = M68K_OP_IMM;",
          "747:  op0->address_mode = M68K_AM_IMMIDIATE;",
          "750:  op1->address_mode = M68K_AM_NONE;",
          "752: }",
          "754: static void build_bxx(m68k_info *info, int opcode, int size, int jump_offset)",
          "",
          "[Removed Lines]",
          "748:  op0->imm = imm;",
          "751:  op1->reg = reg;",
          "",
          "[Added Lines]",
          "752:  op0->imm = imm;",
          "755:  op1->reg = reg;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "761:  op->type = M68K_OP_IMM;",
          "762:  op->address_mode = M68K_AM_IMMIDIATE;",
          "763:  op->imm = jump_offset;",
          "764: }",
          "766: static void build_bcc(m68k_info *info, int size, int jump_offset)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "769:  set_insn_group(info, M68K_GRP_JUMP);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "788:  op1->type = M68K_OP_IMM;",
          "789:  op1->address_mode = M68K_AM_IMMIDIATE;",
          "790:  op1->imm = jump_offset;",
          "791: }",
          "793: static void build_dbcc(m68k_info *info, int size, int jump_offset)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798:  set_insn_group(info, M68K_GRP_JUMP);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "867:  uint r = v; // r will be reversed bits of v; first get LSB of v",
          "868:  uint s = 16 - 1; // extra shift needed at end",
          "871:   r <<= 1;",
          "872:   r |= v & 1;",
          "873:   s--;",
          "",
          "[Removed Lines]",
          "870:  for (v >>= 1; v; v >>= 1) {",
          "",
          "[Added Lines]",
          "878:  for (v >>= 1; v; v >>= 1) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "881:  uint r = v; // r will be reversed bits of v; first get LSB of v",
          "882:  uint s = 8 - 1; // extra shift needed at end",
          "885:   r <<= 1;",
          "886:   r |= v & 1;",
          "887:   s--;",
          "",
          "[Removed Lines]",
          "884:  for (v >>= 1; v; v >>= 1) {",
          "",
          "[Added Lines]",
          "892:  for (v >>= 1; v; v >>= 1) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1057:  switch ((info->ir >> 3) & 3) { // scope",
          "1060:    d68000_invalid(info);",
          "1061:    return;",
          "",
          "[Removed Lines]",
          "1059:   case 0:",
          "",
          "[Added Lines]",
          "1067:   case 0:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1869:  get_ea_mode_op(info, op_ea, info->ir, 4);",
          "1872:   special->reg = M68K_REG_FPCR;",
          "1874:   special->reg = M68K_REG_FPSR;",
          "1876:   special->reg = M68K_REG_FPIAR;",
          "1877: }",
          "",
          "[Removed Lines]",
          "1871:  if (regsel & 4)",
          "1873:  else if (regsel & 2)",
          "1875:  else if (regsel & 1)",
          "",
          "[Added Lines]",
          "1879:  if (regsel & 4)",
          "1881:  else if (regsel & 2)",
          "1883:  else if (regsel & 1)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1903:    op_reglist->reg = M68K_REG_D0 + ((reglist >> 4) & 7);",
          "1904:    break;",
          "1907:    op_reglist->address_mode = M68K_AM_NONE;",
          "1908:    op_reglist->type = M68K_OP_REG_BITS;",
          "1909:    op_reglist->register_bits = reglist << 16;",
          "",
          "[Removed Lines]",
          "1906:   case 0 :",
          "",
          "[Added Lines]",
          "1914:   case 0 :",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2018:   case 0x28: MCInst_setOpcode(info->inst, M68K_INS_FSUB); supports_single_op = false; break;",
          "2019:   case 0x38: MCInst_setOpcode(info->inst, M68K_INS_FCMP); supports_single_op = false; break;",
          "2020:   case 0x3a: MCInst_setOpcode(info->inst, M68K_INS_FTST); break;",
          "2022:        break;",
          "2023:  }",
          "",
          "[Removed Lines]",
          "2021:   default:",
          "",
          "[Added Lines]",
          "2029:   default:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2051:  if (rm == 1) {",
          "2052:   switch (src) {",
          "2054:     ext->op_size.cpu_size = M68K_CPU_SIZE_LONG;",
          "2055:     get_ea_mode_op(info, op0, info->ir, 4);",
          "2056:     break;",
          "2059:     ext->op_size.cpu_size = M68K_CPU_SIZE_BYTE;",
          "2060:     get_ea_mode_op(info, op0, info->ir, 1);",
          "2061:     break;",
          "2064:     ext->op_size.cpu_size = M68K_CPU_SIZE_WORD;",
          "2065:     get_ea_mode_op(info, op0, info->ir, 2);",
          "2066:     break;",
          "2069:     ext->op_size.type = M68K_SIZE_TYPE_FPU;",
          "2070:     ext->op_size.fpu_size = M68K_FPU_SIZE_SINGLE;",
          "2071:     get_ea_mode_op(info, op0, info->ir, 4);",
          "",
          "[Removed Lines]",
          "2053:    case 0x00 :",
          "2058:    case 0x06 :",
          "2063:    case 0x04 :",
          "2068:    case 0x01 :",
          "",
          "[Added Lines]",
          "2061:    case 0x00 :",
          "2066:    case 0x06 :",
          "2071:    case 0x04 :",
          "2076:    case 0x01 :",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2340: static void d68000_jmp(m68k_info *info)",
          "2341: {",
          "2342:  cs_m68k* ext = build_init_op(info, M68K_INS_JMP, 1, 0);",
          "2343:  get_ea_mode_op(info, &ext->operands[0], info->ir, 4);",
          "2344: }",
          "2346: static void d68000_jsr(m68k_info *info)",
          "2347: {",
          "2348:  cs_m68k* ext = build_init_op(info, M68K_INS_JSR, 1, 0);",
          "2349:  get_ea_mode_op(info, &ext->operands[0], info->ir, 4);",
          "2350: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2350:  set_insn_group(info, M68K_GRP_JUMP);",
          "2357:  set_insn_group(info, M68K_GRP_JUMP);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3066: static void d68010_rtd(m68k_info *info)",
          "3067: {",
          "3068:  LIMIT_CPU_TYPES(info, M68010_PLUS);",
          "3069:  build_bxx(info, M68K_INS_RTD, 0, read_imm_16(info));",
          "3070: }",
          "3072: static void d68000_rte(m68k_info *info)",
          "3073: {",
          "3074:  MCInst_setOpcode(info->inst, M68K_INS_RTE);",
          "3075: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3078:  set_insn_group(info, M68K_GRP_RET);",
          "3085:  set_insn_group(info, M68K_GRP_IRET);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3079:  cs_m68k* ext;",
          "3080:  cs_m68k_op* op;",
          "3083:  LIMIT_CPU_TYPES(info, M68020_ONLY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3094:  set_insn_group(info, M68K_GRP_RET);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3100: static void d68000_rtr(m68k_info *info)",
          "3101: {",
          "3102:  MCInst_setOpcode(info->inst, M68K_INS_RTR);",
          "3103: }",
          "3105: static void d68000_rts(m68k_info *info)",
          "3106: {",
          "3107:  MCInst_setOpcode(info->inst, M68K_INS_RTS);",
          "3108: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3115:  set_insn_group(info, M68K_GRP_RET);",
          "3121:  set_insn_group(info, M68K_GRP_RET);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3889:  int s;",
          "3890:  int cpu_type = M68K_CPU_TYPE_68000;",
          "3891:  cs_struct* handle = instr->csh;",
          "3894:  info->code = code;",
          "3895:  info->code_len = code_len;",
          "",
          "[Removed Lines]",
          "3892:  m68k_info *info = (m68k_info *)handle->printer_info;",
          "",
          "[Added Lines]",
          "3907:  m68k_info *info = (m68k_info*)handle->printer_info;",
          "",
          "---------------"
        ],
        "arch/M68K/M68KDisassembler.h||arch/M68K/M68KDisassembler.h": [
          "File: arch/M68K/M68KDisassembler.h -> arch/M68K/M68KDisassembler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  unsigned int type;",
          "20:  cs_m68k extension;",
          "21: } m68k_info;",
          "23: bool M68K_getInstruction(csh ud, const uint8_t* code, size_t code_len, MCInst* instr, uint16_t* size, uint64_t address, void* info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  uint8_t groups[8];",
          "22:  uint8_t groups_count;",
          "",
          "---------------"
        ],
        "arch/M68K/M68KInstPrinter.c||arch/M68K/M68KInstPrinter.c": [
          "File: arch/M68K/M68KInstPrinter.c -> arch/M68K/M68KInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:  \"caar\", \"msp\", \"isp\", \"tc\", \"itt0\", \"itt1\", \"dtt0\",",
          "35:  \"dtt1\", \"mmusr\", \"urp\", \"srp\",",
          "38: };",
          "40: static const char* s_instruction_names[] = {",
          "",
          "[Removed Lines]",
          "37:  \"fpcr\", \"fpsr\", \"fpiar\",",
          "",
          "[Added Lines]",
          "37:  \"fpcr\", \"fpsr\", \"fpiar\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:  \"fcosh\", \"fdbf\", \"fdbeq\", \"fdbogt\", \"fdboge\", \"fdbolt\", \"fdbole\", \"fdbogl\", \"fdbor\", \"fdbun\", \"fdbueq\", \"fdbugt\", \"fdbuge\", \"fdbult\", \"fdbule\", \"fdbne\",",
          "50:  \"fdbt\", \"fdbsf\", \"fdbseq\", \"fdbgt\", \"fdbge\", \"fdblt\", \"fdble\", \"fdbgl\", \"fdbgle\", \"fdbngle\", \"fdbngl\", \"fdbnle\", \"fdbnlt\", \"fdbnge\", \"fdbngt\", \"fdbsne\",",
          "51:  \"fdbst\", \"fdiv\", \"fsdiv\", \"fddiv\", \"fetox\", \"fetoxm1\", \"fgetexp\", \"fgetman\", \"fint\", \"fintrz\", \"flog10\", \"flog2\", \"flogn\", \"flognp1\", \"fmod\", \"fmove\",",
          "53:  \"fsglmul\", \"fsin\", \"fsincos\", \"fsinh\", \"fsqrt\", \"fssqrt\", \"fdsqrt\", \"fsf\", \"fseq\", \"fsogt\", \"fsoge\", \"fsolt\", \"fsole\", \"fsogl\", \"fsor\", \"fsun\", \"fsueq\",",
          "54:  \"fsugt\", \"fsuge\", \"fsult\", \"fsule\", \"fsne\", \"fst\", \"fssf\", \"fsseq\", \"fsgt\", \"fsge\", \"fslt\", \"fsle\", \"fsgl\", \"fsgle\", \"fsngle\",",
          "61:  \"roxl\", \"roxr\", \"rtd\", \"rte\", \"rtm\", \"rtr\", \"rts\", \"sbcd\", \"st\", \"sf\", \"shi\", \"sls\", \"scc\", \"shs\", \"scs\", \"slo\", \"sne\", \"seq\", \"svc\", \"svs\", \"spl\", \"smi\",",
          "62:  \"sge\", \"slt\", \"sgt\", \"sle\", \"stop\", \"sub\", \"suba\", \"subi\", \"subq\", \"subx\", \"swap\", \"tas\", \"trap\", \"trapv\", \"trapt\", \"trapf\", \"traphi\", \"trapls\",",
          "63:  \"trapcc\", \"traphs\", \"trapcs\", \"traplo\", \"trapne\", \"trapeq\", \"trapvc\", \"trapvs\", \"trappl\", \"trapmi\", \"trapge\", \"traplt\", \"trapgt\", \"traple\", \"tst\", \"unlk\", \"unpk\",",
          "",
          "[Removed Lines]",
          "52:  \"fsmove\", \"fdmove\", \"fmovecr\", \"fmovem\", \"fmul\", \"fsmul\", \"fdmul\", \"fneg\", \"fsneg\", \"fdneg\", \"fnop\", \"frem\", \"frestore\", \"fsave\", \"fscale\", \"fsgldiv\",",
          "55:  \"fsngl\", \"fsnle\", \"fsnlt\", \"fsnge\", \"fsngt\", \"fssne\", \"fsst\", \"fsub\", \"fssub\", \"fdsub\", \"ftan\", \"ftanh\", \"ftentox\", \"ftrapf\", \"ftrapeq\", \"ftrapogt\",",
          "56:  \"ftrapoge\", \"ftrapolt\", \"ftrapole\", \"ftrapogl\", \"ftrapor\", \"ftrapun\", \"ftrapueq\", \"ftrapugt\", \"ftrapuge\", \"ftrapult\", \"ftrapule\", \"ftrapne\", \"ftrapt\",",
          "57:  \"ftrapsf\", \"ftrapseq\", \"ftrapgt\", \"ftrapge\", \"ftraplt\", \"ftraple\", \"ftrapgl\", \"ftrapgle\", \"ftrapngle\", \"ftrapngl\", \"ftrapnle\", \"ftrapnlt\", \"ftrapnge\",",
          "58:  \"ftrapngt\", \"ftrapsne\", \"ftrapst\", \"ftst\", \"ftwotox\", \"halt\", \"illegal\", \"jmp\", \"jsr\", \"lea\", \"link\", \"lpstop\", \"lsl\", \"lsr\", \"move\", \"movea\", \"movec\",",
          "59:  \"movem\", \"movep\", \"moveq\", \"moves\", \"move16\", \"muls\", \"mulu\", \"nbcd\", \"neg\", \"negx\", \"nop\", \"not\", \"or\", \"ori\", \"pack\", \"pea\", \"pflush\", \"pflusha\",",
          "60:  \"pflushan\", \"pflushn\", \"ploadr\", \"ploadw\", \"plpar\", \"plpaw\", \"pmove\", \"pmovefd\", \"ptestr\", \"ptestw\", \"pulse\", \"rems\", \"remu\", \"reset\", \"rol\", \"ror\",",
          "",
          "[Added Lines]",
          "52:  \"fsmove\", \"fdmove\", \"fmovecr\", \"fmovem\", \"fmul\", \"fsmul\", \"fdmul\", \"fneg\", \"fsneg\", \"fdneg\", \"fnop\", \"frem\", \"frestore\", \"fsave\", \"fscale\", \"fsgldiv\",",
          "55:  \"fsngl\", \"fsnle\", \"fsnlt\", \"fsnge\", \"fsngt\", \"fssne\", \"fsst\", \"fsub\", \"fssub\", \"fdsub\", \"ftan\", \"ftanh\", \"ftentox\", \"ftrapf\", \"ftrapeq\", \"ftrapogt\",",
          "56:  \"ftrapoge\", \"ftrapolt\", \"ftrapole\", \"ftrapogl\", \"ftrapor\", \"ftrapun\", \"ftrapueq\", \"ftrapugt\", \"ftrapuge\", \"ftrapult\", \"ftrapule\", \"ftrapne\", \"ftrapt\",",
          "57:  \"ftrapsf\", \"ftrapseq\", \"ftrapgt\", \"ftrapge\", \"ftraplt\", \"ftraple\", \"ftrapgl\", \"ftrapgle\", \"ftrapngle\", \"ftrapngl\", \"ftrapnle\", \"ftrapnlt\", \"ftrapnge\",",
          "58:  \"ftrapngt\", \"ftrapsne\", \"ftrapst\", \"ftst\", \"ftwotox\", \"halt\", \"illegal\", \"jmp\", \"jsr\", \"lea\", \"link\", \"lpstop\", \"lsl\", \"lsr\", \"move\", \"movea\", \"movec\",",
          "59:  \"movem\", \"movep\", \"moveq\", \"moves\", \"move16\", \"muls\", \"mulu\", \"nbcd\", \"neg\", \"negx\", \"nop\", \"not\", \"or\", \"ori\", \"pack\", \"pea\", \"pflush\", \"pflusha\",",
          "60:  \"pflushan\", \"pflushn\", \"ploadr\", \"ploadw\", \"plpar\", \"plpaw\", \"pmove\", \"pmovefd\", \"ptestr\", \"ptestw\", \"pulse\", \"rems\", \"remu\", \"reset\", \"rol\", \"ror\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100: static void registerBits(SStream* O, const cs_m68k_op* op)",
          "101: {",
          "102:  char buffer[128];",
          "105:  buffer[0] = 0;",
          "",
          "[Removed Lines]",
          "103:  unsigned int data = op->register_bits;",
          "",
          "[Added Lines]",
          "103:  unsigned int data = op->register_bits;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114: static void registerPair(SStream* O, const cs_m68k_op* op)",
          "115: {",
          "117:    s_reg_names[M68K_REG_D0 + (op->register_bits & 0xf)]);",
          "118: }",
          "",
          "[Removed Lines]",
          "116:  SStream_concat(O, \"%s:%s\", s_reg_names[M68K_REG_D0 + (op->register_bits >> 4)],",
          "",
          "[Added Lines]",
          "116:  SStream_concat(O, \"%s:%s\", s_reg_names[M68K_REG_D0 + (op->register_bits >> 4)],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:   case M68K_AM_REGI_ADDR_PRE_DEC: SStream_concat(O, \"-(a%d)\", (op->reg - M68K_REG_A0)); break;",
          "144:   case M68K_AM_REGI_ADDR_DISP: SStream_concat(O, \"$%x(a%d)\", op->mem.disp, (op->reg - M68K_REG_A0)); break;",
          "145:   case M68K_AM_PCI_DISP: SStream_concat(O, \"$%x(pc)\", op->mem.disp); break;",
          "148:   case M68K_AM_IMMIDIATE:",
          "149:     if (inst->op_size.type == M68K_SIZE_TYPE_FPU) {",
          "150:      if (inst->op_size.fpu_size == M68K_FPU_SIZE_SINGLE)",
          "",
          "[Removed Lines]",
          "146:   case M68K_AM_ABSOLUTE_DATA_SHORT: SStream_concat(O, \"$%x.w\", op->imm); break;",
          "147:   case M68K_AM_ABSOLUTE_DATA_LONG: SStream_concat(O, \"$%x.l\", op->imm); break;",
          "",
          "[Added Lines]",
          "146:   case M68K_AM_ABSOLUTE_DATA_SHORT: SStream_concat(O, \"$%x.w\", op->imm); break;",
          "147:   case M68K_AM_ABSOLUTE_DATA_LONG: SStream_concat(O, \"$%x.l\", op->imm); break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161:    SStream_concat(O, \"$%x(pc,%s%s.%c)\", op->mem.disp, s_spacing, getRegName(op->mem.index_reg), op->mem.index_size ? 'l' : 'w');",
          "162:    break;",
          "163:   case M68K_AM_AREGI_INDEX_8_BIT_DISP:",
          "165:    break;",
          "166:   case M68K_AM_PCI_INDEX_BASE_DISP:",
          "167:   case M68K_AM_AREGI_INDEX_BASE_DISP:",
          "",
          "[Removed Lines]",
          "164:    SStream_concat(O, \"$%x(%s,%s%s.%c)\", op->mem.disp, getRegName(op->mem.base_reg), s_spacing, getRegName(op->mem.index_reg), op->mem.index_size ? 'l' : 'w');",
          "",
          "[Added Lines]",
          "164:    SStream_concat(O, \"$%x(%s,%s%s.%c)\", op->mem.disp, getRegName(op->mem.base_reg), s_spacing, getRegName(op->mem.index_reg), op->mem.index_size ? 'l' : 'w');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "197:    if (op->mem.base_reg != M68K_REG_INVALID) {",
          "198:     if (op->mem.in_disp > 0)",
          "200:     else",
          "202:    }",
          "204:    if (op->address_mode == M68K_AM_MEMI_POST_INDEX || op->address_mode == M68K_AM_PC_MEMI_POST_INDEX)",
          "",
          "[Removed Lines]",
          "199:      SStream_concat(O, \",%s%s\", s_spacing, getRegName(op->mem.base_reg));",
          "201:      SStream_concat(O, \"%s\", getRegName(op->mem.base_reg));",
          "",
          "[Added Lines]",
          "199:      SStream_concat(O, \",%s%s\", s_spacing, getRegName(op->mem.base_reg));",
          "201:      SStream_concat(O, \"%s\", getRegName(op->mem.base_reg));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "238:  detail = MI->flat_insn->detail;",
          "239:  if (detail) {",
          "240:   memcpy(&detail->m68k, ext, sizeof(cs_m68k));",
          "241:   detail->regs_read_count = 0;",
          "242:   detail->regs_write_count = 0;",
          "244:  }",
          "246:  if (MI->Opcode == M68K_INS_INVALID) {",
          "",
          "[Removed Lines]",
          "243:   detail->groups_count = 0;",
          "",
          "[Added Lines]",
          "241:   memcpy(&detail->groups, &info->groups, info->groups_count);",
          "242:   detail->groups_count = info->groups_count;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "262:     case M68K_CPU_SIZE_BYTE: SStream_concat0(O, \".b\"); break;",
          "263:     case M68K_CPU_SIZE_WORD: SStream_concat0(O, \".w\"); break;",
          "264:     case M68K_CPU_SIZE_LONG: SStream_concat0(O, \".l\"); break;",
          "266:    }",
          "267:    break;",
          "",
          "[Removed Lines]",
          "265:     case M68K_CPU_SIZE_NONE: break;",
          "",
          "[Added Lines]",
          "266:     case M68K_CPU_SIZE_NONE: break;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "271:     case M68K_FPU_SIZE_SINGLE: SStream_concat0(O, \".s\"); break;",
          "272:     case M68K_FPU_SIZE_DOUBLE: SStream_concat0(O, \".d\"); break;",
          "273:     case M68K_FPU_SIZE_EXTENDED: SStream_concat0(O, \".x\"); break;",
          "275:    }",
          "276:    break;",
          "277:  }",
          "279:  SStream_concat0(O, \" \");",
          "283:  if (MI->Opcode == M68K_INS_CAS2) {",
          "284:   int reg_value_0, reg_value_1;",
          "",
          "[Removed Lines]",
          "274:     case M68K_FPU_SIZE_NONE: break;",
          "",
          "[Added Lines]",
          "275:     case M68K_FPU_SIZE_NONE: break;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "286:   printAddressingMode(O, ext, &ext->operands[1]); SStream_concat0(O, \",\");",
          "287:   reg_value_0 = ext->operands[2].register_bits >> 4;",
          "288:   reg_value_1 = ext->operands[2].register_bits & 0xf;",
          "290:   return;",
          "291:  }",
          "",
          "[Removed Lines]",
          "289:   SStream_concat(O, \"(%s):(%s)\", s_reg_names[M68K_REG_D0 + reg_value_0], s_reg_names[M68K_REG_D0 + reg_value_1]);",
          "",
          "[Added Lines]",
          "290:   SStream_concat(O, \"(%s):(%s)\", s_reg_names[M68K_REG_D0 + reg_value_0], s_reg_names[M68K_REG_D0 + reg_value_1]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "321: #endif",
          "322: }",
          "325: {",
          "327:  return NULL;",
          "328: }",
          "",
          "[Removed Lines]",
          "324: const char* M68K_group_name(csh handle, unsigned int id)",
          "",
          "[Added Lines]",
          "325: #ifndef CAPSTONE_DIET",
          "326: static name_map group_name_maps[] = {",
          "327:  { M68K_GRP_INVALID , NULL },",
          "328:  { M68K_GRP_JUMP, \"jump\" },",
          "329:  { M68K_GRP_RET , \"ret\" },",
          "330:  { M68K_GRP_IRET, \"iret\" },",
          "331: };",
          "332: #endif",
          "334: const char *M68K_group_name(csh handle, unsigned int id)",
          "336: #ifndef CAPSTONE_DIET",
          "337:  return id2name(group_name_maps, ARR_SIZE(group_name_maps), id);",
          "338: #else",
          "340: #endif",
          "",
          "---------------"
        ],
        "include/capstone/m68k.h||include/capstone/m68k.h": [
          "File: include/capstone/m68k.h -> include/capstone/m68k.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: typedef enum m68k_adress_mode {",
          "83:  M68K_AM_REG_DIRECT_DATA,  // Register Direct - Data",
          "84:  M68K_AM_REG_DIRECT_ADDR,  // Register Direct - Address",
          "",
          "[Removed Lines]",
          "81:  M68K_AM_NONE = 0,   // No address mode.",
          "",
          "[Added Lines]",
          "81:  M68K_AM_NONE = 0,   // No address mode.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:  M68K_AM_ABSOLUTE_DATA_SHORT, // Absolute Data Addressing  - Short",
          "106:  M68K_AM_ABSOLUTE_DATA_LONG,  // Absolute Data Addressing  - Long",
          "107:  M68K_AM_IMMIDIATE,    // Immidate value",
          "111: typedef enum m68k_op_type {",
          "",
          "[Removed Lines]",
          "108: } m68k_adress_mode;",
          "",
          "[Added Lines]",
          "108: } m68k_adress_mode;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:  M68K_OP_MEM,         // = CS_OP_MEM (Memory operand).",
          "116:  M68K_OP_FP,          // = CS_OP_FP  (Floating-Point operand)",
          "117:  M68K_OP_REG_BITS,    // Registes bits movem",
          "119: } m68k_op_type;",
          "",
          "[Removed Lines]",
          "118:  M68K_OP_REG_PAIR,    // Register pair in the same op (upper 4 bits for first reg, lower for second)",
          "",
          "[Added Lines]",
          "118:  M68K_OP_REG_PAIR,    // Register pair in the same op (upper 4 bits for first reg, lower for second)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:  m68k_reg base_reg;      // base register (or M68K_REG_INVALID if irrelevant)",
          "125:  m68k_reg index_reg;     // index register (or M68K_REG_INVALID if irrelevant)",
          "126:  m68k_reg in_base_reg;   // indirect base register (or M68K_REG_INVALID if irrelevant)",
          "129:  uint16_t disp;         // displacement value",
          "130:  uint8_t scale;         // scale for index register",
          "133:  uint8_t offset;         // used for bf* instructions",
          "134:  uint8_t index_size;     // 0 = w, 1 = l",
          "135: } m68k_op_mem;",
          "",
          "[Removed Lines]",
          "127:  uint32_t in_disp;      // indirect displacement",
          "128:  uint32_t out_disp;      // outher displacement",
          "131:  uint8_t bitfield;       // set to true if the two values bellow should be used",
          "132:  uint8_t width;         // used for bf* instructions",
          "",
          "[Added Lines]",
          "127:  uint32_t in_disp;      // indirect displacement",
          "128:  uint32_t out_disp;      // outher displacement",
          "131:  uint8_t bitfield;       // set to true if the two values bellow should be used",
          "132:  uint8_t width;         // used for bf* instructions",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "145:   uint32_t register_bits; // register bits for movem/cas2/etc (always in d0-d7, a0-a7, fp0 - fp7 order)",
          "146:  };",
          "147:  m68k_op_type type;",
          "149: } cs_m68k_op;",
          "152: typedef enum m68k_cpu_size {",
          "153:  M68K_CPU_SIZE_NONE = 0,  // unsized or unspecified",
          "154:  M68K_CPU_SIZE_BYTE = 1,  // 1 byte in size",
          "",
          "[Removed Lines]",
          "148:  m68k_adress_mode address_mode; // M68K addressing mode for this op",
          "",
          "[Added Lines]",
          "148:  m68k_adress_mode address_mode; // M68K addressing mode for this op",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "160: typedef enum m68k_fpu_size {",
          "161:  M68K_FPU_SIZE_NONE = 0,  // unsized like fsave/frestore",
          "164:  M68K_FPU_SIZE_EXTENDED = 12, // 12 byte in size (extended real format)",
          "165: } m68k_fpu_size;",
          "",
          "[Removed Lines]",
          "162:  M68K_FPU_SIZE_SINGLE = 4,  // 4 byte in size (single float)",
          "163:  M68K_FPU_SIZE_DOUBLE = 8,  // 8 byte in size (double)",
          "",
          "[Added Lines]",
          "162:  M68K_FPU_SIZE_SINGLE = 4,  // 4 byte in size (single float)",
          "163:  M68K_FPU_SIZE_DOUBLE = 8,  // 8 byte in size (double)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "569:  M68K_INS_UNPK,",
          "570: } m68k_insn;",
          "572: #ifdef __cplusplus",
          "573: }",
          "574: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573: typedef enum m68k_group_type {",
          "574:  M68K_GRP_INVALID = 0,  // CS_GRUP_INVALID",
          "575:  M68K_GRP_JUMP,  // = CS_GRP_JUMP",
          "576:  M68K_GRP_RET = 3,  // = CS_GRP_RET",
          "577:  M68K_GRP_IRET, // = CS_GRP_IRET",
          "579:  M68K_GRP_ENDING,",
          "580: } m68k_group_type;",
          "",
          "---------------"
        ],
        "tests/test_m68k.c||tests/test_m68k.c": [
          "File: tests/test_m68k.c -> tests/test_m68k.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:  \"Absolute Data Addressing  - Short\",",
          "57:  \"Absolute Data Addressing  - Long\",",
          "58:  \"Immidate value\",",
          "61: static void print_insn_detail(cs_insn *ins)",
          "62: {",
          "63:  cs_m68k* m68k;",
          "64:  int i;",
          "67:  if (ins->detail == NULL)",
          "68:   return;",
          "71:  if (m68k->op_count)",
          "72:   printf(\"\\top_count: %u\\n\", m68k->op_count);",
          "74:  for (i = 0; i < m68k->op_count; i++) {",
          "75:   cs_m68k_op* op = &(m68k->operands[i]);",
          "",
          "[Removed Lines]",
          "59: };",
          "70:  m68k = &(ins->detail->m68k);",
          "",
          "[Added Lines]",
          "59: };",
          "64:  cs_detail* detail;",
          "71:  detail = ins->detail;",
          "72:  m68k = &detail->m68k;",
          "76:  printf(\"\\tgroups_count: %u\\n\", detail->groups_count);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122: static void test()",
          "123: {",
          "126:  struct platform platforms[] = {",
          "127:   {",
          "",
          "[Removed Lines]",
          "124: #define M68K_CODE \"\\xd4\\x40\\x87\\x5a\\x4e\\x71\\x02\\xb4\\xc0\\xde\\xc0\\xde\\x5c\\x00\\x1d\\x80\\x71\\x12\\x01\\x23\\xf2\\x3c\\x44\\x22\\x40\\x49\\x0e\\x56\\x54\\xc5\\xf2\\x3c\\x44\\x00\\x44\\x7a\\x00\\x00\\xf2\\x00\\x0a\\x28\"",
          "",
          "[Added Lines]",
          "128: #define M68K_CODE \"\\xd4\\x40\\x87\\x5a\\x4e\\x71\\x02\\xb4\\xc0\\xde\\xc0\\xde\\x5c\\x00\\x1d\\x80\\x71\\x12\\x01\\x23\\xf2\\x3c\\x44\\x22\\x40\\x49\\x0e\\x56\\x54\\xc5\\xf2\\x3c\\x44\\x00\\x44\\x7a\\x00\\x00\\xf2\\x00\\x0a\\x28\\x4E\\xB9\\x00\\x00\\x00\\x12\\x4E\\x75\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc4488b68e082e9ee040f3475659d9d9a897f256",
      "candidate_info": {
        "commit_hash": "fc4488b68e082e9ee040f3475659d9d9a897f256",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/fc4488b68e082e9ee040f3475659d9d9a897f256",
        "files": [
          "tests/test_m68k.c"
        ],
        "message": "Reduced confusion caused by the m68k test being out of date\n\n* added a new case branch to account for floating point operands.",
        "before_after_code_files": [
          "tests/test_m68k.c||tests/test_m68k.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/test_m68k.c||tests/test_m68k.c": [
          "File: tests/test_m68k.c -> tests/test_m68k.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:     printf(\"\\t\\taddress mode: %s\\n\", s_addressing_modes[op->address_mode]);",
          "117:     break;",
          "118:   }",
          "119:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:    case M68K_OP_FP_SINGLE:",
          "119:     printf(\"\\t\\toperands[%u].type: FP_SINGLE\\n\", i);",
          "120:     printf(\"\\t\\t\\toperands[%u].simm: %f\\n\", i, op->simm);",
          "121:     break;",
          "",
          "---------------"
        ]
      }
    }
  ]
}