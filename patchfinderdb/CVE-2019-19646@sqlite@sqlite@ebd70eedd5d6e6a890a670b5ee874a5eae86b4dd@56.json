{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a07548b0d40b1f08574914aa3a2af07fbbc9596",
      "candidate_info": {
        "commit_hash": "3a07548b0d40b1f08574914aa3a2af07fbbc9596",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3a07548b0d40b1f08574914aa3a2af07fbbc9596",
        "files": [
          "ext/fts5/test/fts5vocab.test",
          "ext/fts5/test/fts5vocab2.test",
          "manifest",
          "manifest.uuid",
          "test/e_select.test",
          "test/triggerF.test",
          "test/unionvtab.test",
          "test/window1.test"
        ],
        "message": "Remove unnecessary whitespace from testcase result strings.\n\nFossilOrigin-Name: ad70f03ceda74163903d247a975666b35fae722a27c48dd3efd31c1164b5627e",
        "before_after_code_files": [
          "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test",
          "ext/fts5/test/fts5vocab2.test||ext/fts5/test/fts5vocab2.test",
          "manifest.uuid||manifest.uuid",
          "test/e_select.test||test/e_select.test",
          "test/triggerF.test||test/triggerF.test",
          "test/unionvtab.test||test/unionvtab.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test": [
          "File: ext/fts5/test/fts5vocab.test -> ext/fts5/test/fts5vocab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   3 cnt {} 0 {} 0",
          "80: }",
          "85: do_execsql_test 1.3 {",
          "86:   INSERT INTO t1 VALUES('x y z');",
          "",
          "[Removed Lines]",
          "82: do_execsql_test 1.2.1 { SELECT * FROM v1 } { }",
          "83: do_execsql_test 1.2.2 { SELECT * FROM v2 } { }",
          "",
          "[Added Lines]",
          "82: do_execsql_test 1.2.1 { SELECT * FROM v1 } {}",
          "83: do_execsql_test 1.2.2 { SELECT * FROM v2 } {}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5vocab2.test||ext/fts5/test/fts5vocab2.test": [
          "File: ext/fts5/test/fts5vocab2.test -> ext/fts5/test/fts5vocab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: do_execsql_test 1.5 {",
          "81:   DELETE FROM t1;",
          "82:   SELECT * FROM v1;",
          "86: #-------------------------------------------------------------------------",
          "87: #",
          "",
          "[Removed Lines]",
          "83: } {",
          "84: }",
          "",
          "[Added Lines]",
          "83: } {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143: do_execsql_test 2.5 {",
          "144:   DELETE FROM t1;",
          "145:   SELECT * FROM v1;",
          "149: #-------------------------------------------------------------------------",
          "150: #",
          "",
          "[Removed Lines]",
          "146: } {",
          "147: }",
          "",
          "[Added Lines]",
          "145: } {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202: do_execsql_test 3.5 {",
          "203:   DELETE FROM t1;",
          "204:   SELECT * FROM v1;",
          "208: finish_test",
          "",
          "[Removed Lines]",
          "205: } {",
          "206: }",
          "",
          "[Added Lines]",
          "203: } {}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 83935b950619855fb3bf05486091804ac2a61fb993c6ec826c89f943264fabc3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/e_select.test||test/e_select.test": [
          "File: test/e_select.test -> test/e_select.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   0102.1  \"SELECT count(*), max(a) FROM t1 GROUP BY b HAVING count(*)=1\" {",
          "168:     1 a 1 c 1 b",
          "169:   }",
          "172:   1101.1  \"SELECT DISTINCT count(*), max(a) FROM t1 GROUP BY b\" {1 a 1 c 1 b}",
          "173:   1102.1  \"SELECT DISTINCT count(*), max(a) FROM t1",
          "",
          "[Removed Lines]",
          "170:   0102.2  \"SELECT count(*), max(a) FROM t1 GROUP BY b HAVING count(*)=2\" { }",
          "",
          "[Added Lines]",
          "170:   0102.2  \"SELECT count(*), max(a) FROM t1 GROUP BY b HAVING count(*)=2\" {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:     1 a 1 c 1 b",
          "176:   }",
          "177:   1102.2  \"SELECT DISTINCT count(*), max(a) FROM t1",
          "181:   2101.1  \"SELECT ALL count(*), max(a) FROM t1 GROUP BY b\" {1 a 1 c 1 b}",
          "182:   2102.1  \"SELECT ALL count(*), max(a) FROM t1",
          "",
          "[Removed Lines]",
          "178:            GROUP BY b HAVING count(*)=2\" {",
          "179:   }",
          "",
          "[Added Lines]",
          "178:            GROUP BY b HAVING count(*)=2\" {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:     1 a 1 c 1 b",
          "185:   }",
          "186:   2102.2  \"SELECT ALL count(*), max(a) FROM t1",
          "190:   0011.1  \"SELECT 1, 2, 3 WHERE 1 GROUP BY 2\" {1 2 3}",
          "191:   0012.1  \"SELECT 1, 2, 3 WHERE 0 GROUP BY 2 HAVING count(*)=1\" {}",
          "",
          "[Removed Lines]",
          "187:            GROUP BY b HAVING count(*)=2\" {",
          "188:   }",
          "",
          "[Added Lines]",
          "186:            GROUP BY b HAVING count(*)=2\" {}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "204:   0112.1  \"SELECT count(*), max(a) FROM t1",
          "205:            WHERE a='c' GROUP BY b HAVING count(*)=1\" {1 c}",
          "206:   0112.2  \"SELECT count(*), max(a) FROM t1",
          "208:   1111.1  \"SELECT DISTINCT count(*), max(a) FROM t1 WHERE a<'c' GROUP BY b\"",
          "209:           {1 a 1 b}",
          "210:   1112.1  \"SELECT DISTINCT count(*), max(a) FROM t1 WHERE a>'a'",
          "",
          "[Removed Lines]",
          "207:            WHERE 0 GROUP BY b HAVING count(*)=2\" { }",
          "",
          "[Added Lines]",
          "205:            WHERE 0 GROUP BY b HAVING count(*)=2\" {}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "212:     1 c 1 b",
          "213:   }",
          "214:   1112.2  \"SELECT DISTINCT count(*), max(a) FROM t1 WHERE 0",
          "218:   2111.1  \"SELECT ALL count(*), max(a) FROM t1 WHERE b>'one' GROUP BY b\"",
          "219:           {1 c 1 b}",
          "",
          "[Removed Lines]",
          "215:            GROUP BY b HAVING count(*)=2\" {",
          "216:   }",
          "",
          "[Added Lines]",
          "213:            GROUP BY b HAVING count(*)=2\" {}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "222:     1 a 1 c",
          "223:   }",
          "224:   2112.2  \"SELECT ALL count(*), max(a) FROM t1",
          "226: }",
          "",
          "[Removed Lines]",
          "225:            WHERE 0 GROUP BY b HAVING count(*)=2\" { }",
          "",
          "[Added Lines]",
          "222:            WHERE 0 GROUP BY b HAVING count(*)=2\" {}",
          "",
          "---------------"
        ],
        "test/triggerF.test||test/triggerF.test": [
          "File: test/triggerF.test -> test/triggerF.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: foreach {tn sql log} {",
          "25:   2 {",
          "26:     CREATE TRIGGER trd AFTER DELETE ON t1 BEGIN",
          "",
          "[Removed Lines]",
          "23:   1 { } { }",
          "",
          "[Added Lines]",
          "23:   1 {} {}",
          "",
          "---------------"
        ],
        "test/unionvtab.test||test/unionvtab.test": [
          "File: test/unionvtab.test -> test/unionvtab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "373: }",
          "374: do_execsql_test 4.3.4 {",
          "375:   SELECT * FROM sl WHERE rowid<-9223372036854775808",
          "378: do_execsql_test 4.4.1 {",
          "379:   SELECT * FROM sl WHERE rowid<9223372036854775807",
          "",
          "[Removed Lines]",
          "376: } { }",
          "",
          "[Added Lines]",
          "376: } {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394: }",
          "395: do_execsql_test 4.4.4 {",
          "396:   SELECT * FROM sl WHERE rowid>9223372036854775807",
          "399: #-------------------------------------------------------------------------",
          "400: # More than 8 source tables.",
          "",
          "[Removed Lines]",
          "397: } { }",
          "",
          "[Added Lines]",
          "397: } {}",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "591:   SELECT a, rank() OVER(ORDER BY b) FROM t1",
          "592:     INTERSECT",
          "593:   SELECT a, rank() OVER(ORDER BY b DESC) FROM t1;",
          "597: # 2018-12-06",
          "598: # https://www.sqlite.org/src/info/f09fcd17810f65f7",
          "",
          "[Removed Lines]",
          "594: } {",
          "595: }",
          "",
          "[Added Lines]",
          "594: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "acd6bb5fe4667730463d5e434b6c14999257e02c",
      "candidate_info": {
        "commit_hash": "acd6bb5fe4667730463d5e434b6c14999257e02c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/acd6bb5fe4667730463d5e434b6c14999257e02c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Improvements to the automatic compile-time selection of byte-order, as suggested on the mailing list by Seb Kemper.\n\nFossilOrigin-Name: b7aad929619f7043b1685a6477d50f6b4436e85511eb365eceae3dd4dbab571a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3e1b55f3ab85710ed81574904718205c7370b5f0b5a41029e961486d2e3f37c7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "832: #ifndef SQLITE_BYTEORDER",
          "837: #   define SQLITE_BYTEORDER    1234",
          "839: #   define SQLITE_BYTEORDER    4321",
          "840: # else",
          "841: #   define SQLITE_BYTEORDER 0",
          "",
          "[Removed Lines]",
          "833: # if defined(i386)     || defined(__i386__)   || defined(_M_IX86) ||    \\",
          "834:      defined(__x86_64) || defined(__x86_64__) || defined(_M_X64)  ||    \\",
          "835:      defined(_M_AMD64) || defined(_M_ARM)     || defined(__x86)   ||    \\",
          "836:      defined(__arm__)  || defined(_M_ARM64)",
          "838: # elif defined(sparc)    || defined(__ppc__)",
          "",
          "[Added Lines]",
          "833: # if defined(i386)      || defined(__i386__)      || defined(_M_IX86) ||    \\",
          "834:      defined(__x86_64)  || defined(__x86_64__)    || defined(_M_X64)  ||    \\",
          "835:      defined(_M_AMD64)  || defined(_M_ARM)        || defined(__x86)   ||    \\",
          "836:      defined(__ARMEL__) || defined(__AARCH64EL__) || defined(_M_ARM64)",
          "838: # elif defined(sparc)     || defined(__ppc__) || \\",
          "839:        defined(__ARMEB__) || defined(__AARCH64EB__)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1baae57a729dee59b541f34ae48f3f48fb1958b9",
      "candidate_info": {
        "commit_hash": "1baae57a729dee59b541f34ae48f3f48fb1958b9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1baae57a729dee59b541f34ae48f3f48fb1958b9",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/csv01.test"
        ],
        "message": "Fix the csv01.test module so that it works on systems with \\r\\n line endings.\n\nFossilOrigin-Name: 36eaf5a5e51b20699328aae67c2bfd325f81bea342e2b167fddd859a50a26e28",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/csv01.test||test/csv01.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: df939c89fa90b7f9ccf961027ca4eca4f987c49eabf530b5719a83e5ab0d346d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/csv01.test||test/csv01.test": [
          "File: test/csv01.test -> test/csv01.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: # Bug report on the mailing list",
          "219: #",
          "220: forcedelete csv01.csv",
          "222: puts $fd \"a,b,c,d\\r\\n1,2,3,4\\r\\none,two,three,four\\r\\n5,6,7,8\"",
          "223: close $fd",
          "224: do_execsql_test 5.1 {",
          "",
          "[Removed Lines]",
          "221: set fd [open csv01.csv w]",
          "",
          "[Added Lines]",
          "221: set fd [open csv01.csv wb]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d57936721b6598d62baaa359c8d179b74ab3bfcb",
      "candidate_info": {
        "commit_hash": "d57936721b6598d62baaa359c8d179b74ab3bfcb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d57936721b6598d62baaa359c8d179b74ab3bfcb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "The IS NOT NULL operator does not imply that the operand is never NULL. Fix for ticket [5948e09b8c415bc45da5cf]\n\nFossilOrigin-Name: d840e9bb023a1e84a7739d764a0f6cf608fc3183ff8c366fcdb486ebd932f0c1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 93386a7c97f27df69f79052ef4d80143bb6832a806885249c315d226b2a256b2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4986:     case TK_ISNOT:",
          "4987:     case TK_NOT:",
          "4988:     case TK_ISNULL:",
          "4989:     case TK_IS:",
          "4990:     case TK_OR:",
          "4991:     case TK_CASE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4989:     case TK_NOTNULL:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4994:       testcase( pExpr->op==TK_ISNOT );",
          "4995:       testcase( pExpr->op==TK_NOT );",
          "4996:       testcase( pExpr->op==TK_ISNULL );",
          "4997:       testcase( pExpr->op==TK_IS );",
          "4998:       testcase( pExpr->op==TK_OR );",
          "4999:       testcase( pExpr->op==TK_CASE );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4998:       testcase( pExpr->op==TK_NOTNULL );",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "850:    ORDER BY a1, a2, a3, a4, a5;",
          "851: } {1 {} {} {} {} 1 11 {} {} {} 1 12 {} {} {} 1 12 121 {} {} 1 13 {} {} {}}",
          "853: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853: # 2019-02-05 Ticket https://www.sqlite.org/src/tktview/5948e09b8c415bc45da5c",
          "854: # Error in join due to the LEFT JOIN strength reduction optimization.",
          "855: #",
          "856: do_execsql_test join-16.100 {",
          "857:   DROP TABLE IF EXISTS t1;",
          "858:   DROP TABLE IF EXISTS t2;",
          "859:   CREATE TABLE t1(a INT);",
          "860:   INSERT INTO t1(a) VALUES(1);",
          "861:   CREATE TABLE t2(b INT);",
          "862:   SELECT a, b",
          "863:     FROM t1 LEFT JOIN t2 ON 0",
          "864:    WHERE (b IS NOT NULL)=0;",
          "865: } {1 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b747068bad531f0300891e6f569f67d55abb93b",
      "candidate_info": {
        "commit_hash": "9b747068bad531f0300891e6f569f67d55abb93b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9b747068bad531f0300891e6f569f67d55abb93b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/pragma.h",
          "src/sqliteInt.h",
          "src/tokenize.c",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Improvements to \"PRAGMA parser_trace=ON\": Make it a flag pragma, and then use the flag to show the complete SQL text at the beginning of the parse.\n\nFossilOrigin-Name: 507c43537f00d089efb3c3020fb6e826e8f89f3efa2caaa12c5309d35dd0c22e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tokenize.c||src/tokenize.c",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 916c52dad414b224695d455a42af36f85dff216504c2aa67d1d2c5818cdca8d6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1424: #ifndef NDEBUG",
          "1425:   case PragTyp_PARSER_TRACE: {",
          "1426:     if( zRight ){",
          "1427:       if( sqlite3GetBoolean(zRight, 0) ){",
          "1428:         sqlite3ParserTrace(stdout, \"parser: \");",
          "1429:       }else{",
          "1430:         sqlite3ParserTrace(0, 0);",
          "1431:       }",
          "1432:     }",
          "1433:   }",
          "1434:   break;",
          "1435: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #define PragTyp_HEXKEY                        41",
          "50: #define PragTyp_KEY                           42",
          "51: #define PragTyp_LOCK_STATUS                   43",
          "",
          "[Removed Lines]",
          "52: #define PragTyp_PARSER_TRACE                  44",
          "53: #define PragTyp_STATS                         45",
          "",
          "[Added Lines]",
          "52: #define PragTyp_STATS                         44",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475: #endif",
          "477:  {/* zName:     */ \"parser_trace\",",
          "482: #endif",
          "483: #if defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "484:  {/* zName:     */ \"pragma_list\",",
          "",
          "[Removed Lines]",
          "476: #if defined(SQLITE_DEBUG) && !defined(SQLITE_OMIT_PARSER_TRACE)",
          "",
          "[Added Lines]",
          "475: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "476: #if defined(SQLITE_DEBUG)",
          "482: #endif",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "572:   pParse->rc = SQLITE_OK;",
          "573:   pParse->zTail = zSql;",
          "574:   assert( pzErrMsg!=0 );",
          "576: #ifdef sqlite3Parser_ENGINEALWAYSONSTACK",
          "577:   pEngine = &sEngine;",
          "578:   sqlite3ParserInit(pEngine, pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575: #ifdef SQLITE_DEBUG",
          "576:   if( db->flags & SQLITE_ParserTrace ){",
          "577:     printf(\"parser: [[[%s]]]\\n\", zSql);",
          "578:     sqlite3ParserTrace(stdout, \"parser: \");",
          "579:   }else{",
          "580:     sqlite3ParserTrace(0, 0);",
          "581:   }",
          "582: #endif",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:   IF:   !defined(SQLITE_OMIT_FOREIGN_KEY) && !defined(SQLITE_OMIT_TRIGGER)",
          "304:   NAME: parser_trace",
          "307:   NAME: case_sensitive_like",
          "308:   FLAG: NoColumns",
          "",
          "[Removed Lines]",
          "305:   IF:   defined(SQLITE_DEBUG) && !defined(SQLITE_OMIT_PARSER_TRACE)",
          "",
          "[Added Lines]",
          "305:   TYPE: FLAG",
          "306:   ARG:  SQLITE_ParserTrace",
          "307:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "308:   IF:   defined(SQLITE_DEBUG)",
          "",
          "---------------"
        ]
      }
    }
  ]
}