{
  "cve_id": "CVE-2016-10130",
  "cve_desc": "The http_connect function in transports/http.c in libgit2 before 0.24.6 and 0.25.x before 0.25.1 might allow man-in-the-middle attackers to spoof servers by leveraging clobbering of the error variable.",
  "repo": "libgit2/libgit2",
  "patch_hash": "b5c6a1b407b7f8b952bded2789593b68b1876211",
  "patch_info": {
    "commit_hash": "b5c6a1b407b7f8b952bded2789593b68b1876211",
    "repo": "libgit2/libgit2",
    "commit_url": "https://github.com/libgit2/libgit2/commit/b5c6a1b407b7f8b952bded2789593b68b1876211",
    "files": [
      "src/transports/http.c"
    ],
    "message": "http: check certificate validity before clobbering the error variable",
    "before_after_code_files": [
      "src/transports/http.c||src/transports/http.c"
    ]
  },
  "patch_diff": {
    "src/transports/http.c||src/transports/http.c": [
      "File: src/transports/http.c -> src/transports/http.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "602:  if ((!error || error == GIT_ECERTIFICATE) && t->owner->certificate_check_cb != NULL &&",
      "603:      git_stream_is_encrypted(t->io)) {",
      "604:   git_cert *cert;",
      "607:   if ((error = git_stream_certificate(&cert, t->io)) < 0)",
      "608:    return error;",
      "610:   giterr_clear();",
      "612:   error = t->owner->certificate_check_cb(cert, is_valid, t->connection_data.host, t->owner->message_cb_payload);",
      "614:   if (error < 0) {",
      "",
      "[Removed Lines]",
      "605:   int is_valid;",
      "611:   is_valid = error != GIT_ECERTIFICATE;",
      "",
      "[Added Lines]",
      "605:   int is_valid = (error == GIT_OK);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ac39c76c0153d1ee6889a0984c39e97731684b2",
      "candidate_info": {
        "commit_hash": "4ac39c76c0153d1ee6889a0984c39e97731684b2",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/4ac39c76c0153d1ee6889a0984c39e97731684b2",
        "files": [
          "src/transports/smart_pkt.c"
        ],
        "message": "smart_pkt: verify packet length exceeds PKT_LEN_SIZE\n\nEach packet line in the Git protocol is prefixed by a four-byte\nlength of how much data will follow, which we parse in\n`git_pkt_parse_line`. The transmitted length can either be equal\nto zero in case of a flush packet or has to be at least of length\nfour, as it also includes the encoded length itself. Not\nchecking this may result in a buffer overflow as we directly pass\nthe length to functions which accept a `size_t` length as\nparameter.\n\nFix the issue by verifying that non-flush packets have at least a\nlength of `PKT_LEN_SIZE`.",
        "before_after_code_files": [
          "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4075"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
          "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:  if (bufflen > 0 && bufflen < (size_t)len)",
          "428:   return GIT_EBUFS;",
          "430:  line += PKT_LEN_SIZE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:  if (len != 0 && len < PKT_LEN_SIZE)",
          "436:   return GIT_ERROR;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a64e62f0f20c9cf9b2e1609f037060eb2d8eb22",
      "candidate_info": {
        "commit_hash": "9a64e62f0f20c9cf9b2e1609f037060eb2d8eb22",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/9a64e62f0f20c9cf9b2e1609f037060eb2d8eb22",
        "files": [
          "src/transports/http.c"
        ],
        "message": "http: check certificate validity before clobbering the error variable",
        "before_after_code_files": [
          "src/transports/http.c||src/transports/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/transports/http.c||src/transports/http.c"
          ],
          "candidate": [
            "src/transports/http.c||src/transports/http.c"
          ]
        }
      },
      "candidate_diff": {
        "src/transports/http.c||src/transports/http.c": [
          "File: src/transports/http.c -> src/transports/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:  if ((!error || error == GIT_ECERTIFICATE) && t->owner->certificate_check_cb != NULL &&",
          "625:      git_stream_is_encrypted(t->io)) {",
          "626:   git_cert *cert;",
          "629:   if ((error = git_stream_certificate(&cert, t->io)) < 0)",
          "630:    return error;",
          "632:   giterr_clear();",
          "634:   error = t->owner->certificate_check_cb(cert, is_valid, t->connection_data.host, t->owner->message_cb_payload);",
          "636:   if (error < 0) {",
          "",
          "[Removed Lines]",
          "627:   int is_valid;",
          "633:   is_valid = error != GIT_ECERTIFICATE;",
          "",
          "[Added Lines]",
          "627:   int is_valid = (error == GIT_OK);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddcf37abfff55c6e09ca16c7e83584aeec4f49c8",
      "candidate_info": {
        "commit_hash": "ddcf37abfff55c6e09ca16c7e83584aeec4f49c8",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/ddcf37abfff55c6e09ca16c7e83584aeec4f49c8",
        "files": [
          "src/transports/http.c"
        ],
        "message": "http: check certificate validity before clobbering the error variable",
        "before_after_code_files": [
          "src/transports/http.c||src/transports/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/transports/http.c||src/transports/http.c"
          ],
          "candidate": [
            "src/transports/http.c||src/transports/http.c"
          ]
        }
      },
      "candidate_diff": {
        "src/transports/http.c||src/transports/http.c": [
          "File: src/transports/http.c -> src/transports/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "601:  if ((!error || error == GIT_ECERTIFICATE) && t->owner->certificate_check_cb != NULL &&",
          "602:      git_stream_is_encrypted(t->io)) {",
          "603:   git_cert *cert;",
          "606:   if ((error = git_stream_certificate(&cert, t->io)) < 0)",
          "607:    return error;",
          "609:   giterr_clear();",
          "611:   error = t->owner->certificate_check_cb(cert, is_valid, t->connection_data.host, t->owner->message_cb_payload);",
          "613:   if (error < 0) {",
          "",
          "[Removed Lines]",
          "604:   int is_valid;",
          "610:   is_valid = error != GIT_ECERTIFICATE;",
          "",
          "[Added Lines]",
          "604:   int is_valid = (error == GIT_OK);",
          "",
          "---------------"
        ]
      }
    }
  ]
}