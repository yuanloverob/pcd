{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0b0274a90c68a20c3dcab0b9f5719adda9402117",
      "candidate_info": {
        "commit_hash": "0b0274a90c68a20c3dcab0b9f5719adda9402117",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0b0274a90c68a20c3dcab0b9f5719adda9402117",
        "files": [
          "manifest",
          "manifest.uuid"
        ],
        "message": "Version 3.32.0\n\nFossilOrigin-Name: 5998789c9c744bce92e4cff7636bba800a75574243d6977e1fc8281e360f8d5a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ce36b6d1331edba5a921fef32553e2470a79bdb1f62d2cfd81190691c83d5b06",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58d6f633bae0c44edcce64cb2d6bd82d5ce4159f",
      "candidate_info": {
        "commit_hash": "58d6f633bae0c44edcce64cb2d6bd82d5ce4159f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/58d6f633bae0c44edcce64cb2d6bd82d5ce4159f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Reduce the N in the logN term for the sorting cost associated with computing DISTINCT by B-Tree by half, under the assumption that the DISTINCT will eliminate about half the rows of output.  This is really a wild guess.  But we do not have any better way of estimating what the row-count reduction due to DISTINCT will actually be.\n\nFossilOrigin-Name: 8787417ec1da8071d84c6ff0d7a90b5fd458ab6baba871327f36bc4e1bceca61",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 493a25949b9a6d0be82169b597133e491d8be4f4147b6eae135b06c1d810abd3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4057:   LogEst rScale, rSortCost;",
          "4058:   assert( nOrderBy>0 && 66==sqlite3LogEst(100) );",
          "4059:   rScale = sqlite3LogEst((nOrderBy-nSorted)*100/nOrderBy) - 66;",
          "4060:   rSortCost = nRow + rScale + 16;",
          "4064:   if( (pWInfo->wctrlFlags & WHERE_USE_LIMIT)!=0 && pWInfo->iLimit<nRow ){",
          "4065:     nRow = pWInfo->iLimit;",
          "4066:   }",
          "4067:   rSortCost += estLog(nRow);",
          "4068:   return rSortCost;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4070:   }else if( (pWInfo->wctrlFlags & WHERE_WANT_DISTINCT) ){",
          "4073:     if( nRow>10 ) nRow -= 10;  assert( 10==sqlite3LogEst(2) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d42e619acb77717cbf318e6fb473b6a756e9160",
      "candidate_info": {
        "commit_hash": "1d42e619acb77717cbf318e6fb473b6a756e9160",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1d42e619acb77717cbf318e6fb473b6a756e9160",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest_data.tcl"
        ],
        "message": "Update releasetest_data.tcl so that the \"Fast-One\" configuration runs bigmmap.test as part of release testing.\n\nFossilOrigin-Name: a0aa35aaa5694a96638a7c7b1cd69c7523750cbe95831a13c1ee5a6d48256b76",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest_data.tcl||test/releasetest_data.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d8e47382160e98be646ce3ba568578493088d1bb11d513ded3e00b576fb07f06",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:     -DSQLITE_ENABLE_STAT4",
          "144:     -DSQLITE_ENABLE_RBU",
          "145:     -DSQLITE_MAX_ATTACHED=125",
          "146:     -DLONGDOUBLE_TYPE=double",
          "147:     --enable-session",
          "148:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     -DSQLITE_MAX_MMAP_SIZE=12884901888",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be03cc9fcf199ba0e74f00bb391918717e86a1cf",
      "candidate_info": {
        "commit_hash": "be03cc9fcf199ba0e74f00bb391918717e86a1cf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/be03cc9fcf199ba0e74f00bb391918717e86a1cf",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "In the fuzzcheck test program, reduce the default expression depth limit from 1000 to 500 to avoid stack-overflow problems when running stress tests using clang ASAN.\n\nFossilOrigin-Name: 63d886f4ce3c770498b8bdad45b04143a3f63197d81793bde107450aba4a9c87",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d46255096671ae7be33081e81bb25561304e069f459ffa7587f1f19381a1851",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463: static int lengthLimit = 1000000;",
          "466: static sqlite3_int64 heapLimit = 1000000000;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466: static int depthLimit = 500;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "789:   if( lengthLimit>0 ){",
          "790:     sqlite3_limit(cx.db, SQLITE_LIMIT_LENGTH, lengthLimit);",
          "791:   }",
          "792:   sqlite3_hard_heap_limit64(heapLimit);",
          "794:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "795:   if( depthLimit>0 ){",
          "796:     sqlite3_limit(cx.db, SQLITE_LIMIT_EXPR_DEPTH, depthLimit);",
          "797:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1304: \"  --export-sql DIR     Write SQL to file(s) in DIR. Also works with --sqlid\\n\"",
          "1305: \"  --help               Show this help text\\n\"",
          "1306: \"  --info               Show information about SOURCE-DB w/o running tests\\n\"",
          "1307: \"  --limit-mem N        Limit memory used by test SQLite instance to N bytes\\n\"",
          "1308: \"  --limit-vdbe         Panic if any test runs for more than 100,000 cycles\\n\"",
          "1309: \"  --load-sql ARGS...   Load SQL scripts fron files into SOURCE-DB\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1313: \"  --limit-depth N      Limit expression depth to N\\n\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1406:       if( strcmp(z,\"info\")==0 ){",
          "1407:         infoFlag = 1;",
          "1408:       }else",
          "1409:       if( strcmp(z,\"limit-mem\")==0 ){",
          "1410:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1411:         nMem = integerValue(argv[++i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1416:       if( strcmp(z,\"limit-depth\")==0 ){",
          "1417:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1418:         depthLimit = integerValue(argv[++i]);",
          "1419:       }else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00bd55e1ae7c8e241492ca1ae94aad6ace6f1807",
      "candidate_info": {
        "commit_hash": "00bd55e1ae7c8e241492ca1ae94aad6ace6f1807",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/00bd55e1ae7c8e241492ca1ae94aad6ace6f1807",
        "files": [
          "ext/expert/expert1.test",
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/build.c",
          "src/dbstat.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/trigger.c",
          "test/attach.test",
          "test/e_createtable.test",
          "test/e_dropview.test",
          "test/misc8.test",
          "test/permutations.test",
          "test/tester.tcl"
        ],
        "message": "Allow \"main\" to be used to refer to the main database even after SQLITE_DBCONFIG_MAINDBNAME has been used to assign another alias.\n\nFossilOrigin-Name: 75c85ca32f9ae4a28fd8f8ff2f7639599413d22af706e9799a0e76cc560d14eb",
        "before_after_code_files": [
          "ext/expert/expert1.test||ext/expert/expert1.test",
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/build.c||src/build.c",
          "src/dbstat.c||src/dbstat.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/trigger.c||src/trigger.c",
          "test/attach.test||test/attach.test",
          "test/e_createtable.test||test/e_createtable.test",
          "test/e_dropview.test||test/e_dropview.test",
          "test/misc8.test||test/misc8.test",
          "test/permutations.test||test/permutations.test",
          "test/tester.tcl||test/tester.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/expert/expert1.test||ext/expert/expert1.test": [
          "File: ext/expert/expert1.test -> ext/expert/expert1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: proc do_setup_rec_test {tn setup sql res} {",
          "39:   reset_db",
          "40:   db eval $setup",
          "41:   uplevel [list do_rec_test $tn $sql $res]",
          "42: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   if {[info exists ::set_main_db_name]} {",
          "41:     dbconfig_maindbname_icecube db",
          "42:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     }",
          "77:   }",
          "78:   3 {",
          "79:     if {![file executable $CLI]} { continue }",
          "81:     proc do_rec_test {tn sql res} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     if {[info commands sqlite3_expert_new]==\"\"} { continue }",
          "83:     set ::set_main_db_name 1",
          "84:   }",
          "85:   4 {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "338: reset_db",
          "340:   CREATE TABLE t1(a, b);",
          "341:   CREATE TABLE t2(c, d);",
          "",
          "[Removed Lines]",
          "339: do_execsql_test 4.0 {",
          "",
          "[Added Lines]",
          "346: do_execsql_test 5.0 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "346:   WITH s(i) AS ( VALUES(1) UNION ALL SELECT i+1 FROM s WHERE i<100)",
          "347:   INSERT INTO t2 SELECT (i-1)/20, (i-1)/5 FROM s;",
          "348: }",
          "350:   SELECT * FROM t1,t2 WHERE (b=? OR a=?) AND (c=? OR d=?)",
          "351: } {",
          "352:   CREATE INDEX t1_idx_00000062 ON t1(b); -- stat1: 100 20",
          "",
          "[Removed Lines]",
          "349: do_candidates_test 4.1 {",
          "",
          "[Added Lines]",
          "356: do_candidates_test 5.1 {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "355:   CREATE INDEX t2_idx_00000064 ON t2(d); -- stat1: 100 5",
          "356: }",
          "359:   SELECT * FROM t1,t2 WHERE a=? AND b=? AND c=? AND d=?",
          "360: } {",
          "361:   CREATE INDEX t1_idx_000123a7 ON t1(a, b); -- stat1: 100 50 17",
          "362:   CREATE INDEX t2_idx_0001295b ON t2(c, d); -- stat1: 100 20 5",
          "363: }",
          "366:   CREATE INDEX t1_idx_00000061 ON t1(a); -- stat1: 100 50",
          "367:   CREATE INDEX t1_idx_00000062 ON t1(b); -- stat1: 100 20",
          "368:   CREATE INDEX t1_idx_000123a7 ON t1(a, b); -- stat1: 100 50 16",
          "",
          "[Removed Lines]",
          "358: do_candidates_test 4.2 {",
          "365: do_execsql_test 4.3 {",
          "",
          "[Added Lines]",
          "365: do_candidates_test 5.2 {",
          "372: do_execsql_test 5.3 {",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 86e98ddc19470410ccc6d2cf4ad56ef0bc5a23b7fbe6331b8cae374689f54529",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:     for(i=0; i<db->nDb; i++){",
          "120:       char *z = db->aDb[i].zDbSName;",
          "121:       assert( z && zName );",
          "123:         zErrDyn = sqlite3MPrintf(db, \"database %s is already in use\", zName);",
          "124:         goto attach_error;",
          "125:       }",
          "",
          "[Removed Lines]",
          "122:       if( sqlite3StrICmp(z, zName)==0 ){",
          "",
          "[Added Lines]",
          "122:       if( sqlite3StrICmp(z, zName)==0 || sqlite3StrICmp(\"main\", zName)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:   for(i=0; i<db->nDb; i++){",
          "273:     pDb = &db->aDb[i];",
          "274:     if( pDb->pBt==0 ) continue;",
          "276:   }",
          "278:   if( i>=db->nDb ){",
          "",
          "[Removed Lines]",
          "275:     if( sqlite3StrICmp(pDb->zDbSName, zName)==0 ) break;",
          "",
          "[Added Lines]",
          "275:     if( sqlite3StrICmp(pDb->zDbSName, zName)==0",
          "276:      || (i==0 && sqlite3StrICmp(\"main\", zName)==0)",
          "277:     ){",
          "278:       break;",
          "279:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "465:   int i;",
          "466:   const char *zDb;",
          "467:   struct SrcList_item *pItem;",
          "469:   if( NEVER(pList==0) ) return 0;",
          "470:   zDb = pFix->zDb;",
          "471:   for(i=0, pItem=pList->a; i<pList->nSrc; i++, pItem++){",
          "472:     if( pFix->bTemp==0 ){",
          "474:         sqlite3ErrorMsg(pFix->pParse,",
          "475:             \"%s %T cannot reference objects in database %s\",",
          "476:             pFix->zType, pFix->pName, pItem->zDatabase);",
          "",
          "[Removed Lines]",
          "473:       if( pItem->zDatabase && sqlite3StrICmp(pItem->zDatabase, zDb) ){",
          "",
          "[Added Lines]",
          "472:   sqlite3 *db = pFix->pParse->db;",
          "473:   const char *zAlt = 0;",
          "477:   if( sqlite3StrICmp(db->aDb[0].zDbSName, zDb)==0 ){",
          "478:     zAlt = \"main\";",
          "479:   }else if( sqlite3StrICmp(\"main\", zDb)==0 ){",
          "480:     zAlt = db->aDb[0].zDbSName;",
          "481:   }",
          "485:       if( pItem->zDatabase",
          "486:        && sqlite3StrICmp(pItem->zDatabase, zDb)",
          "487:        && sqlite3_stricmp(pItem->zDatabase, zAlt)",
          "488:       ){",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:   while(1){",
          "316:     for(i=OMIT_TEMPDB; i<db->nDb; i++){",
          "319:         assert( sqlite3SchemaMutexHeld(db, j, 0) );",
          "320:         p = sqlite3HashFind(&db->aDb[j].pSchema->tblHash, zName);",
          "321:         if( p ) return p;",
          "",
          "[Removed Lines]",
          "318:       if( zDatabase==0 || sqlite3StrICmp(zDatabase, db->aDb[j].zDbSName)==0 ){",
          "",
          "[Added Lines]",
          "318:       if( zDatabase==0",
          "319:        || sqlite3StrICmp(zDatabase, db->aDb[j].zDbSName)==0",
          "320:        || (j==0 && sqlite3StrICmp(zDatabase, \"main\")==0)",
          "321:       ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:     Schema *pSchema = db->aDb[j].pSchema;",
          "439:     assert( pSchema );",
          "441:     assert( sqlite3SchemaMutexHeld(db, j, 0) );",
          "442:     p = sqlite3HashFind(&pSchema->idxHash, zName);",
          "443:     if( p ) break;",
          "",
          "[Removed Lines]",
          "440:     if( zDb && sqlite3StrICmp(zDb, db->aDb[j].zDbSName) ) continue;",
          "",
          "[Added Lines]",
          "443:     if( zDb",
          "444:      && sqlite3StrICmp(zDb, db->aDb[j].zDbSName)",
          "445:      && (j!=0 || sqlite3StrICmp(zDb, \"main\"))",
          "446:     ){",
          "447:       continue;",
          "448:     }",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:   i = 0;",
          "239:   if( iSchema>=0 ){",
          "240:     pIdxInfo->aConstraintUsage[iSchema].argvIndex = ++i;",
          "241:     pIdxInfo->idxNum |= 0x01;",
          "242:   }",
          "243:   if( iName>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:     pIdxInfo->aConstraintUsage[iSchema].omit = 1;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:   assert( !ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced) );",
          "231:   pExpr->iTable = -1;",
          "232:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230: static int nCall = 0;",
          "231: nCall++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "252:           break;",
          "253:         }",
          "254:       }",
          "255:     }",
          "256:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:       if( i==db->nDb && sqlite3StrICmp(\"main\", zDb)==0 ){",
          "261:         pSchema = db->aDb[0].pSchema;",
          "262:         zDb = db->aDb[0].zDbSName;",
          "263:       }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2952: ){",
          "2953:   assert( pState->expert.pExpert );",
          "2954:   assert( pzErr==0 || *pzErr==0 );",
          "2956: }",
          "",
          "[Removed Lines]",
          "2955:   return sqlite3_expert_sql(pState->expert.pExpert, zSql, pzErr);",
          "",
          "[Added Lines]",
          "2955:     return sqlite3_expert_sql(pState->expert.pExpert, zSql, pzErr);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:   assert( zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) );",
          "581:   for(i=OMIT_TEMPDB; i<db->nDb; i++){",
          "584:     assert( sqlite3SchemaMutexHeld(db, j, 0) );",
          "585:     pTrigger = sqlite3HashFind(&(db->aDb[j].pSchema->trigHash), zName);",
          "586:     if( pTrigger ) break;",
          "",
          "[Removed Lines]",
          "583:     if( zDb && sqlite3StrICmp(db->aDb[j].zDbSName, zDb) ) continue;",
          "",
          "[Added Lines]",
          "583:     if( zDb",
          "584:       && sqlite3StrICmp(db->aDb[j].zDbSName, zDb)",
          "585:       && (j!=0 || sqlite3StrICmp(\"main\", zDb))",
          "586:     ) continue;",
          "",
          "---------------"
        ],
        "test/attach.test||test/attach.test": [
          "File: test/attach.test -> test/attach.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     ATTACH 'test.db' as db9;",
          "149:   }",
          "150: } {1 {database db9 is already in use}}",
          "155: } {1 {database main is already in use}}",
          "156: ifcapable tempdb {",
          "157:   do_test attach-1.16 {",
          "",
          "[Removed Lines]",
          "151: do_test attach-1.15 {",
          "152:   catchsql {",
          "153:     ATTACH 'test.db' as main;",
          "154:   }",
          "",
          "[Added Lines]",
          "151: do_catchsql_test attach-1.15 {",
          "152:   ATTACH 'test.db' as main;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:     }",
          "161:   } {1 {database temp is already in use}}",
          "162: }",
          "167: } {1 {database MAIN is already in use}}",
          "168: do_test attach-1.18 {",
          "169:   catchsql {",
          "",
          "[Removed Lines]",
          "163: do_test attach-1.17 {",
          "164:   catchsql {",
          "165:     ATTACH 'test.db' as MAIN;",
          "166:   }",
          "",
          "[Added Lines]",
          "161: do_catchsql_test attach-1.17 {",
          "162:   ATTACH 'test.db' as MAIN;",
          "",
          "---------------"
        ],
        "test/e_createtable.test||test/e_createtable.test": [
          "File: test/e_createtable.test -> test/e_createtable.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:   4    {CREATE TABLE auxb.xyz(z)}                {}",
          "396: }",
          "397: drop_all_tables",
          "409: }",
          "411: # EVIDENCE-OF: R-18895-27365 If the \"TEMP\" or \"TEMPORARY\" keyword occurs",
          "",
          "[Removed Lines]",
          "398: do_createtable_tests 1.3 -tclquery {",
          "399:   unset -nocomplain X",
          "400:   array set X [table_list]",
          "401:   list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "402: } {",
          "403:   1    \"CREATE TABLE main.abc(a, b, c)\"  {abc {} {} {}}",
          "404:   2    \"CREATE TABLE main.t1(a, b, c)\"   {{abc t1} {} {} {}}",
          "405:   3    \"CREATE TABLE temp.tmp(a, b, c)\"  {{abc t1} tmp {} {}}",
          "406:   4    \"CREATE TABLE auxb.tbl(x, y)\"     {{abc t1} tmp {} tbl}",
          "407:   5    \"CREATE TABLE auxb.t1(k, v)\"      {{abc t1} tmp {} {t1 tbl}}",
          "408:   6    \"CREATE TABLE auxa.next(c, d)\"    {{abc t1} tmp next {t1 tbl}}",
          "",
          "[Added Lines]",
          "398: if {[permutation]!=\"maindbname\"} {",
          "399:   do_createtable_tests 1.3 -tclquery {",
          "400:     unset -nocomplain X",
          "401:     array set X [table_list]",
          "402:     list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "403:   } {",
          "404:     1    \"CREATE TABLE main.abc(a, b, c)\"  {abc {} {} {}}",
          "405:     2    \"CREATE TABLE main.t1(a, b, c)\"   {{abc t1} {} {} {}}",
          "406:     3    \"CREATE TABLE temp.tmp(a, b, c)\"  {{abc t1} tmp {} {}}",
          "407:     4    \"CREATE TABLE auxb.tbl(x, y)\"     {{abc t1} tmp {} tbl}",
          "408:     5    \"CREATE TABLE auxb.t1(k, v)\"      {{abc t1} tmp {} {t1 tbl}}",
          "409:     6    \"CREATE TABLE auxa.next(c, d)\"    {{abc t1} tmp next {t1 tbl}}",
          "410:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413: # temp database.",
          "414: #",
          "415: drop_all_tables",
          "423: }",
          "425: # EVIDENCE-OF: R-23976-43329 It is an error to specify both a",
          "",
          "[Removed Lines]",
          "416: do_createtable_tests 1.4 -tclquery {",
          "417:   unset -nocomplain X",
          "418:   array set X [table_list]",
          "419:   list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "420: } {",
          "421:   1    \"CREATE TEMP TABLE t1(a, b)\"      {{} t1 {} {}}",
          "422:   2    \"CREATE TEMPORARY TABLE t2(a, b)\" {{} {t1 t2} {} {}}",
          "",
          "[Added Lines]",
          "418: if {[permutation]!=\"maindbname\"} {",
          "419:   do_createtable_tests 1.4 -tclquery {",
          "420:     unset -nocomplain X",
          "421:     array set X [table_list]",
          "422:     list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "423:   } {",
          "424:     1    \"CREATE TEMP TABLE t1(a, b)\"      {{} t1 {} {}}",
          "425:     2    \"CREATE TEMPORARY TABLE t2(a, b)\" {{} {t1 t2} {} {}}",
          "426:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "436:   4    \"CREATE TEMPORARY TABLE main.xxx(x)\"     {}",
          "437: }",
          "438: drop_all_tables",
          "448: }",
          "450: # EVIDENCE-OF: R-31997-24564 If no schema name is specified and the TEMP",
          "451: # keyword is not present then the table is created in the main database.",
          "452: #",
          "453: drop_all_tables",
          "463: }",
          "465: drop_all_tables",
          "",
          "[Removed Lines]",
          "439: do_createtable_tests 1.5.2 -tclquery {",
          "440:   unset -nocomplain X",
          "441:   array set X [table_list]",
          "442:   list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "443: } {",
          "444:   1    \"CREATE TEMP TABLE temp.t1(a, b)\"        {{} t1 {} {}}",
          "445:   2    \"CREATE TEMPORARY TABLE temp.t2(a, b)\"   {{} {t1 t2} {} {}}",
          "446:   3    \"CREATE TEMP TABLE TEMP.t3(a, b)\"        {{} {t1 t2 t3} {} {}}",
          "447:   4    \"CREATE TEMPORARY TABLE TEMP.xxx(x)\"     {{} {t1 t2 t3 xxx} {} {}}",
          "454: do_createtable_tests 1.6 -tclquery {",
          "455:   unset -nocomplain X",
          "456:   array set X [table_list]",
          "457:   list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "458: } {",
          "459:   1    \"CREATE TABLE t1(a, b)\"   {t1 {} {} {}}",
          "460:   2    \"CREATE TABLE t2(a, b)\"   {{t1 t2} {} {} {}}",
          "461:   3    \"CREATE TABLE t3(a, b)\"   {{t1 t2 t3} {} {} {}}",
          "462:   4    \"CREATE TABLE xxx(x)\"     {{t1 t2 t3 xxx} {} {} {}}",
          "",
          "[Added Lines]",
          "443: if {[permutation]!=\"maindbname\"} {",
          "444:   do_createtable_tests 1.5.2 -tclquery {",
          "445:     unset -nocomplain X",
          "446:     array set X [table_list]",
          "447:     list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "448:   } {",
          "449:     1    \"CREATE TEMP TABLE temp.t1(a, b)\"        {{} t1 {} {}}",
          "450:     2    \"CREATE TEMPORARY TABLE temp.t2(a, b)\"   {{} {t1 t2} {} {}}",
          "451:     3    \"CREATE TEMP TABLE TEMP.t3(a, b)\"        {{} {t1 t2 t3} {} {}}",
          "452:     4    \"CREATE TEMPORARY TABLE TEMP.xxx(x)\"     {{} {t1 t2 t3 xxx} {} {}}",
          "453:   }",
          "460: if {[permutation]!=\"maindbname\"} {",
          "461:   do_createtable_tests 1.6 -tclquery {",
          "462:     unset -nocomplain X",
          "463:     array set X [table_list]",
          "464:     list $X(main) $X(temp) $X(auxa) $X(auxb)",
          "465:   } {",
          "466:     1    \"CREATE TABLE t1(a, b)\"   {t1 {} {} {}}",
          "467:     2    \"CREATE TABLE t2(a, b)\"   {{t1 t2} {} {} {}}",
          "468:     3    \"CREATE TABLE t3(a, b)\"   {{t1 t2 t3} {} {} {}}",
          "469:     4    \"CREATE TABLE xxx(x)\"     {{t1 t2 t3 xxx} {} {} {}}",
          "470:   }",
          "",
          "---------------"
        ],
        "test/e_dropview.test||test/e_dropview.test": [
          "File: test/e_dropview.test -> test/e_dropview.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: do_execsql_test  3.1.1 { DROP VIEW temp.v1 } {}",
          "127: do_catchsql_test 3.1.2 { SELECT * FROM temp.v1 } {1 {no such table: temp.v1}}",
          "128: do_test          3.1.3 { list_all_views } {main.v1 main.v2 aux.v1 aux.v2 aux.v3}",
          "131: do_execsql_test  3.2.0 { SELECT * FROM v1 } {{a main} {b main}}",
          "132: do_execsql_test  3.2.1 { DROP VIEW v1 } {}",
          "133: do_catchsql_test 3.2.2 { SELECT * FROM main.v1 } {1 {no such table: main.v1}}",
          "134: do_test          3.2.3 { list_all_views } {main.v2 aux.v1 aux.v2 aux.v3}",
          "137: do_execsql_test  3.3.0 { SELECT * FROM v2 } {{a main} {b main}}",
          "138: do_execsql_test  3.3.1 { DROP VIEW v2 } {}",
          "139: do_catchsql_test 3.3.2 { SELECT * FROM main.v2 } {1 {no such table: main.v2}}",
          "140: do_test          3.3.3 { list_all_views } {aux.v1 aux.v2 aux.v3}",
          "143: do_execsql_test  3.4.0 { SELECT * FROM v1 } {{a aux} {b aux}}",
          "144: do_execsql_test  3.4.1 { DROP VIEW v1 } {}",
          "145: do_catchsql_test 3.4.2 { SELECT * FROM v1 } {1 {no such table: v1}}",
          "146: do_test          3.4.3 { list_all_views } {aux.v2 aux.v3}",
          "161: # EVIDENCE-OF: R-25558-37487 If the specified view cannot be found and",
          "162: # the IF EXISTS clause is not present, it is an error.",
          "",
          "[Removed Lines]",
          "129: do_test          3.1.4 { list_all_data  } $databasedata",
          "135: do_test          3.2.4 { list_all_data  } $databasedata",
          "141: do_test          3.3.4 { list_all_data  } $databasedata",
          "147: do_test          3.4.4 { list_all_data  } $databasedata",
          "149: do_execsql_test  3.4.0 { SELECT * FROM aux.v2 } {{a aux} {b aux}}",
          "150: do_execsql_test  3.4.1 { DROP VIEW aux.v2 } {}",
          "151: do_catchsql_test 3.4.2 { SELECT * FROM aux.v2 } {1 {no such table: aux.v2}}",
          "152: do_test          3.4.3 { list_all_views } {aux.v3}",
          "153: do_test          3.4.4 { list_all_data  } $databasedata",
          "155: do_execsql_test  3.5.0 { SELECT * FROM v3 } {{a aux} {b aux}}",
          "156: do_execsql_test  3.5.1 { DROP VIEW v3 } {}",
          "157: do_catchsql_test 3.5.2 { SELECT * FROM v3 } {1 {no such table: v3}}",
          "158: do_test          3.5.3 { list_all_views } {}",
          "159: do_test          3.5.4 { list_all_data  } $databasedata",
          "",
          "[Added Lines]",
          "129: do_test          3.1.4 { string compare [list_all_data] $databasedata } 0",
          "135: do_test          3.2.4 { string compare [list_all_data] $databasedata } 0",
          "141: do_test          3.3.4 { string compare [list_all_data] $databasedata } 0",
          "147: do_test          3.4.4 { string compare [list_all_data] $databasedata } 0",
          "149: do_execsql_test  3.5.0 { SELECT * FROM aux.v2 } {{a aux} {b aux}}",
          "150: do_execsql_test  3.5.1 { DROP VIEW aux.v2 } {}",
          "151: do_catchsql_test 3.5.2 { SELECT * FROM aux.v2 } {1 {no such table: aux.v2}}",
          "152: do_test          3.5.3 { list_all_views } {aux.v3}",
          "153: do_test          3.5.4 { string compare [list_all_data] $databasedata } 0",
          "155: do_execsql_test  3.6.0 { SELECT * FROM v3 } {{a aux} {b aux}}",
          "156: do_execsql_test  3.6.1 { DROP VIEW v3 } {}",
          "157: do_catchsql_test 3.6.2 { SELECT * FROM v3 } {1 {no such table: v3}}",
          "158: do_test          3.6.3 { list_all_views } {}",
          "159: do_test          3.6.4 { string compare [list_all_data] $databasedata } 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:   dropview_reopen_db",
          "180: } -tclquery {",
          "181:   list_all_views",
          "183: } {",
          "187: }",
          "",
          "[Removed Lines]",
          "182:   expr {[list_all_views] == \"main.v1 main.v2 temp.v1 aux.v1 aux.v2 aux.v3\"}",
          "184:   1    \"DROP VIEW IF EXISTS xx\"       1",
          "185:   2    \"DROP VIEW IF EXISTS main.xx\"  1",
          "186:   3    \"DROP VIEW IF EXISTS temp.v2\"  1",
          "",
          "[Added Lines]",
          "182:   #expr {[list_all_views] == \"main.v1 main.v2 temp.v1 aux.v1 aux.v2 aux.v3\"}",
          "184:   1    \"DROP VIEW IF EXISTS xx\" \"main.v1 main.v2 temp.v1 aux.v1 aux.v2 aux.v3\"",
          "185:   2    \"DROP VIEW IF EXISTS main.xx\" \"main.v1 main.v2 temp.v1 aux.v1 aux.v2 aux.v3\"",
          "186:   3    \"DROP VIEW IF EXISTS temp.v2\" \"main.v1 main.v2 temp.v1 aux.v1 aux.v2 aux.v3\"",
          "",
          "---------------"
        ],
        "test/misc8.test||test/misc8.test": [
          "File: test/misc8.test -> test/misc8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: do_execsql_test misc8-4.2 {",
          "133:   SELECT name FROM icecube.sqlite_master;",
          "134: } {t1}",
          "",
          "[Removed Lines]",
          "135: do_execsql_test misc8-4.3 {",
          "136:   PRAGMA database_list;",
          "137: } {/0 icecube .* 2 aux2/}",
          "",
          "[Added Lines]",
          "135: do_test misc8-4.3 {",
          "136:   regexp {0 icecube .* 2 aux2} [db eval {PRAGMA database_list}]",
          "137: } 1",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:   autoinstall_test_functions",
          "1076: }",
          "1078: # End of tests",
          "1079: #############################################################################",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078: test_suite \"maindbname\" -prefix \"\" -description {",
          "1079:   Run the \"veryquick\" test suite with SQLITE_DBCONFIG_MAINDBNAME used to",
          "1080:   set the name of database 0 to \"icecube\".",
          "1081: } -files [",
          "1082:   test_set $allquicktests -exclude *malloc* *ioerr* *fault* *bigfile* *_err* \\",
          "1084: ] -dbconfig {",
          "1085:   dbconfig_maindbname_icecube $::dbhandle",
          "1086: }",
          "",
          "---------------"
        ],
        "test/tester.tcl||test/tester.tcl": [
          "File: test/tester.tcl -> test/tester.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "782:       output2 \"\\nError: $result\"",
          "783:       fail_test $name",
          "784:     } else {",
          "785:       if {[regexp {^[~#]?/.*/$} $expected]} {",
          "786:         # \"expected\" is of the form \"/PATTERN/\" then the result if correct if",
          "787:         # regular expression PATTERN matches the result.  \"~/PATTERN/\" means",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785:       if {[permutation]==\"maindbname\"} {",
          "786:         set result [string map [list [string tolower ICECUBE] main] $result]",
          "787:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}