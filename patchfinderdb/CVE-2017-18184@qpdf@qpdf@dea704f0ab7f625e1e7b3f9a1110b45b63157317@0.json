{
  "cve_id": "CVE-2017-18184",
  "cve_desc": "An issue was discovered in QPDF before 7.0.0. There is a stack-based out-of-bounds read in the function iterate_rc4 in QPDF_encryption.cc.",
  "repo": "qpdf/qpdf",
  "patch_hash": "dea704f0ab7f625e1e7b3f9a1110b45b63157317",
  "patch_info": {
    "commit_hash": "dea704f0ab7f625e1e7b3f9a1110b45b63157317",
    "repo": "qpdf/qpdf",
    "commit_url": "https://github.com/qpdf/qpdf/commit/dea704f0ab7f625e1e7b3f9a1110b45b63157317",
    "files": [
      "libqpdf/QPDF_encryption.cc"
    ],
    "message": "Pad keys to avoid memory errors (fixes #147)",
    "before_after_code_files": [
      "libqpdf/QPDF_encryption.cc||libqpdf/QPDF_encryption.cc"
    ]
  },
  "patch_diff": {
    "libqpdf/QPDF_encryption.cc||libqpdf/QPDF_encryption.cc": [
      "File: libqpdf/QPDF_encryption.cc -> libqpdf/QPDF_encryption.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "480:     char upass[key_bytes];",
      "481:     pad_or_truncate_password_V4(user_password, upass);",
      "482:     iterate_rc4(QUtil::unsigned_char_pointer(upass), key_bytes,",
      "483:   O_key, data.getLengthBytes(),",
      "484:                 (data.getR() >= 3) ? 20 : 1, false);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "482:     std::string k1(reinterpret_cast<char*>(O_key), OU_key_bytes_V4);",
      "483:     pad_short_parameter(k1, data.getLengthBytes());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "495:     std::string k1 = QPDF::compute_encryption_key(user_password, data);",
      "496:     char udata[key_bytes];",
      "497:     pad_or_truncate_password_V4(\"\", udata);",
      "498:     iterate_rc4(QUtil::unsigned_char_pointer(udata), key_bytes,",
      "499:   QUtil::unsigned_char_pointer(k1),",
      "500:                 data.getLengthBytes(), 1, false);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "500:     pad_short_parameter(k1, data.getLengthBytes());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "516:                                 data.getId1().length());",
      "517:     MD5::Digest digest;",
      "518:     md5.digest(digest);",
      "519:     iterate_rc4(digest, sizeof(MD5::Digest),",
      "520:   QUtil::unsigned_char_pointer(k1),",
      "521:                 data.getLengthBytes(), 20, false);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "522:     pad_short_parameter(k1, data.getLengthBytes());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "591:     compute_O_rc4_key(user_password, owner_password, data, key);",
      "592:     unsigned char O_data[key_bytes];",
      "593:     memcpy(O_data, QUtil::unsigned_char_pointer(data.getO()), key_bytes);",
      "595:                 (data.getR() >= 3) ? 20 : 1, true);",
      "596:     std::string new_user_password =",
      "597:         std::string(reinterpret_cast<char*>(O_data), key_bytes);",
      "",
      "[Removed Lines]",
      "594:     iterate_rc4(O_data, key_bytes, key, data.getLengthBytes(),",
      "",
      "[Added Lines]",
      "598:     std::string k1(reinterpret_cast<char*>(key), OU_key_bytes_V4);",
      "599:     pad_short_parameter(k1, data.getLengthBytes());",
      "600:     iterate_rc4(O_data, key_bytes, QUtil::unsigned_char_pointer(k1),",
      "601:                 data.getLengthBytes(),",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "913:         UE = encryption_dict.getKey(\"/UE\").getStringValue();",
      "914:         Perms = encryption_dict.getKey(\"/Perms\").getStringValue();",
      "916:         pad_short_parameter(O, OU_key_bytes_V5);",
      "917:         pad_short_parameter(U, OU_key_bytes_V5);",
      "918:         pad_short_parameter(OE, OUE_key_bytes_V5);",
      "919:         pad_short_parameter(UE, OUE_key_bytes_V5);",
      "920:         pad_short_parameter(Perms, Perms_key_bytes_V5);",
      "934:     }",
      "936:     int Length = 40;",
      "",
      "[Removed Lines]",
      "921:         if ((O.length() < OU_key_bytes_V5) ||",
      "922:             (U.length() < OU_key_bytes_V5) ||",
      "923:             (OE.length() < OUE_key_bytes_V5) ||",
      "924:             (UE.length() < OUE_key_bytes_V5) ||",
      "925:             (Perms.length() < Perms_key_bytes_V5))",
      "926:         {",
      "927:             throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
      "928:                           \"encryption dictionary\",",
      "929:                           this->m->file->getLastOffset(),",
      "930:                           \"incorrect length for some of\"",
      "931:                           \" /O, /U, /OE, /UE, or /Perms in\"",
      "932:                           \" encryption dictionary\");",
      "933:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8fe0b06cd879f503d0e5be63f706d3adda3b8203",
      "candidate_info": {
        "commit_hash": "8fe0b06cd879f503d0e5be63f706d3adda3b8203",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/8fe0b06cd879f503d0e5be63f706d3adda3b8203",
        "files": [
          "ChangeLog",
          "libqpdf/QPDF_encryption.cc",
          "qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/short-O-U.out",
          "qpdf/qtest/qpdf/short-O-U.pdf"
        ],
        "message": "Pad encryption parameters that are too short (fixes #96)",
        "before_after_code_files": [
          "libqpdf/QPDF_encryption.cc||libqpdf/QPDF_encryption.cc",
          "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libqpdf/QPDF_encryption.cc||libqpdf/QPDF_encryption.cc"
          ],
          "candidate": [
            "libqpdf/QPDF_encryption.cc||libqpdf/QPDF_encryption.cc"
          ]
        }
      },
      "candidate_diff": {
        "libqpdf/QPDF_encryption.cc||libqpdf/QPDF_encryption.cc": [
          "File: libqpdf/QPDF_encryption.cc -> libqpdf/QPDF_encryption.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:     return result;",
          "341: }",
          "343: std::string",
          "344: QPDF::compute_data_key(std::string const& encryption_key,",
          "345:          int objid, int generation, bool use_aes,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343: static",
          "344: void pad_short_parameter(std::string& param, unsigned int max_len)",
          "345: {",
          "346:     if (param.length() < max_len)",
          "347:     {",
          "348:         QTC::TC(\"qpdf\", \"QPDF_encryption pad short parameter\");",
          "349:         param.append(max_len - param.length(), '\\0');",
          "350:     }",
          "351: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "877:     if (V < 5)",
          "878:     {",
          "879:         if (! ((O.length() == key_bytes) && (U.length() == key_bytes)))",
          "880:         {",
          "881:             throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "889:         pad_short_parameter(O, key_bytes);",
          "890:         pad_short_parameter(U, key_bytes);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "899:         UE = encryption_dict.getKey(\"/UE\").getStringValue();",
          "900:         Perms = encryption_dict.getKey(\"/Perms\").getStringValue();",
          "902:         if ((O.length() < OU_key_bytes_V5) ||",
          "903:             (U.length() < OU_key_bytes_V5) ||",
          "904:             (OE.length() < OUE_key_bytes_V5) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "914:         pad_short_parameter(O, OU_key_bytes_V5);",
          "915:         pad_short_parameter(U, OU_key_bytes_V5);",
          "916:         pad_short_parameter(OE, OUE_key_bytes_V5);",
          "917:         pad_short_parameter(UE, OUE_key_bytes_V5);",
          "918:         pad_short_parameter(Perms, Perms_key_bytes_V5);",
          "",
          "---------------"
        ],
        "qpdf/qpdf.testcov||qpdf/qpdf.testcov": [
          "File: qpdf/qpdf.testcov -> qpdf/qpdf.testcov",
          "--- Hunk 1 ---",
          "[Context before]",
          "293: QPDF ignore first extra space in xref entry 0",
          "294: QPDF ignore second extra space in xref entry 0",
          "295: QPDF ignore length error xref entry 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296: QPDF_encryption pad short parameter 0",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "232: show_ntests();",
          "233: # ----------",
          "234: $td->notify(\"--- Miscellaneous Tests ---\");",
          "237: $td->runtest(\"qpdf version\",",
          "238:       {$td->COMMAND => \"qpdf --version\"},",
          "",
          "[Removed Lines]",
          "235: $n_tests += 87;",
          "",
          "[Added Lines]",
          "235: $n_tests += 88;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "676:               $td->EXIT_STATUS => 3},",
          "677:              $td->NORMALIZE_NEWLINES);",
          "679: show_ntests();",
          "680: # ----------",
          "681: $td->notify(\"--- Single Page ---\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "679: # A file was emailed privately with issue 96. short-O-U.pdf was",
          "680: # created by copying encryption parameters from that file. It exhibits",
          "681: # the same behavior as the original file.",
          "682: $td->runtest(\"short /O or /U\",",
          "683:              {$td->COMMAND =>",
          "684:                   \"qpdf --password=19723102477 --check short-O-U.pdf\"},",
          "685:              {$td->FILE => \"short-O-U.out\",",
          "686:               $td->EXIT_STATUS => 0},",
          "687:              $td->NORMALIZE_NEWLINES);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8c93bd324d0362a26c1e6591eead5c52f865c0d",
      "candidate_info": {
        "commit_hash": "a8c93bd324d0362a26c1e6591eead5c52f865c0d",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/a8c93bd324d0362a26c1e6591eead5c52f865c0d",
        "files": [
          "include/qpdf/QPDF.hh",
          "libqpdf/QPDF.cc",
          "libqpdf/QPDF_encryption.cc",
          "libqpdf/QPDF_linearization.cc",
          "libqpdf/QPDF_optimization.cc",
          "libqpdf/QPDF_pages.cc"
        ],
        "message": "Push QPDF member variables into a nested class\n\nPushing member variables into a nested class enables addition of new\nmember variables without breaking binary compatibility.",
        "before_after_code_files": [
          "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh",
          "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
          "libqpdf/QPDF_encryption.cc||libqpdf/QPDF_encryption.cc",
          "libqpdf/QPDF_linearization.cc||libqpdf/QPDF_linearization.cc",
          "libqpdf/QPDF_optimization.cc||libqpdf/QPDF_optimization.cc",
          "libqpdf/QPDF_pages.cc||libqpdf/QPDF_pages.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libqpdf/QPDF_encryption.cc||libqpdf/QPDF_encryption.cc"
          ],
          "candidate": [
            "libqpdf/QPDF_encryption.cc||libqpdf/QPDF_encryption.cc"
          ]
        }
      },
      "candidate_diff": {
        "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh": [
          "File: include/qpdf/QPDF.hh -> include/qpdf/QPDF.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:             qpdf(qpdf),",
          "636:             og(og)",
          "637:         {",
          "639:         }",
          "640:         virtual ~ResolveRecorder()",
          "641:         {",
          "643:         }",
          "644:       private:",
          "645:         QPDF* qpdf;",
          "",
          "[Removed Lines]",
          "638:             qpdf->resolving.insert(og);",
          "642:             this->qpdf->resolving.erase(og);",
          "",
          "[Added Lines]",
          "638:             qpdf->m->resolving.insert(og);",
          "642:             this->qpdf->m->resolving.erase(og);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1113:       std::set<QPDFObjGen>& visited, bool top);",
          "1114:     void filterCompressedObjects(std::map<int, int> const& object_stream_data);",
          "1189: };",
          "1191: #endif // __QPDF_HH__",
          "",
          "[Removed Lines]",
          "1117:     QPDFTokenizer tokenizer;",
          "1118:     PointerHolder<InputSource> file;",
          "1119:     std::string last_object_description;",
          "1120:     bool encrypted;",
          "1121:     bool encryption_initialized;",
          "1122:     bool ignore_xref_streams;",
          "1123:     bool suppress_warnings;",
          "1124:     std::ostream* out_stream;",
          "1125:     std::ostream* err_stream;",
          "1126:     bool attempt_recovery;",
          "1127:     int encryption_V;",
          "1128:     int encryption_R;",
          "1129:     bool encrypt_metadata;",
          "1130:     std::map<std::string, encryption_method_e> crypt_filters;",
          "1131:     encryption_method_e cf_stream;",
          "1132:     encryption_method_e cf_string;",
          "1133:     encryption_method_e cf_file;",
          "1134:     std::string provided_password;",
          "1135:     std::string user_password;",
          "1136:     std::string encryption_key;",
          "1137:     std::string cached_object_encryption_key;",
          "1138:     int cached_key_objid;",
          "1139:     int cached_key_generation;",
          "1140:     std::string pdf_version;",
          "1141:     std::map<QPDFObjGen, QPDFXRefEntry> xref_table;",
          "1142:     std::set<int> deleted_objects;",
          "1143:     std::map<QPDFObjGen, ObjCache> obj_cache;",
          "1144:     std::set<QPDFObjGen> resolving;",
          "1145:     QPDFObjectHandle trailer;",
          "1146:     std::vector<QPDFObjectHandle> all_pages;",
          "1147:     std::map<QPDFObjGen, int> pageobj_to_pages_pos;",
          "1148:     bool pushed_inherited_attributes_to_pages;",
          "1149:     std::vector<QPDFExc> warnings;",
          "1150:     std::map<QPDF*, ObjCopier> object_copiers;",
          "1151:     PointerHolder<QPDFObjectHandle::StreamDataProvider> copied_streams;",
          "1153:     CopiedStreamDataProvider* copied_stream_data_provider;",
          "1154:     std::set<QPDFObjGen> attachment_streams;",
          "1155:     bool reconstructed_xref;",
          "1158:     qpdf_offset_t first_xref_item_offset; // actual value from file",
          "1159:     bool uncompressed_after_compressed;",
          "1163:     QPDFObjectHandle lindict;",
          "1164:     LinParameters linp;",
          "1165:     HPageOffset page_offset_hints;",
          "1166:     HSharedObject shared_object_hints;",
          "1167:     HGeneric outline_hints;",
          "1172:     LinParameters c_linp;",
          "1173:     CHPageOffset c_page_offset_data;",
          "1174:     CHSharedObject c_shared_object_data;",
          "1175:     HGeneric c_outline_data;",
          "1180:     std::vector<QPDFObjectHandle> part4;",
          "1181:     std::vector<QPDFObjectHandle> part6;",
          "1182:     std::vector<QPDFObjectHandle> part7;",
          "1183:     std::vector<QPDFObjectHandle> part8;",
          "1184:     std::vector<QPDFObjectHandle> part9;",
          "1187:     std::map<ObjUser, std::set<QPDFObjGen> > obj_user_to_objects;",
          "1188:     std::map<QPDFObjGen, std::set<ObjUser> > object_to_obj_users;",
          "",
          "[Added Lines]",
          "1116:     class Members",
          "1117:     {",
          "1118:         friend class QPDF;",
          "1120:       public:",
          "1121:         ~Members();",
          "1123:       private:",
          "1124:         Members();",
          "1125:         Members(Members const&);",
          "1127:         QPDFTokenizer tokenizer;",
          "1128:         PointerHolder<InputSource> file;",
          "1129:         std::string last_object_description;",
          "1130:         bool encrypted;",
          "1131:         bool encryption_initialized;",
          "1132:         bool ignore_xref_streams;",
          "1133:         bool suppress_warnings;",
          "1134:         std::ostream* out_stream;",
          "1135:         std::ostream* err_stream;",
          "1136:         bool attempt_recovery;",
          "1137:         int encryption_V;",
          "1138:         int encryption_R;",
          "1139:         bool encrypt_metadata;",
          "1140:         std::map<std::string, encryption_method_e> crypt_filters;",
          "1141:         encryption_method_e cf_stream;",
          "1142:         encryption_method_e cf_string;",
          "1143:         encryption_method_e cf_file;",
          "1144:         std::string provided_password;",
          "1145:         std::string user_password;",
          "1146:         std::string encryption_key;",
          "1147:         std::string cached_object_encryption_key;",
          "1148:         int cached_key_objid;",
          "1149:         int cached_key_generation;",
          "1150:         std::string pdf_version;",
          "1151:         std::map<QPDFObjGen, QPDFXRefEntry> xref_table;",
          "1152:         std::set<int> deleted_objects;",
          "1153:         std::map<QPDFObjGen, ObjCache> obj_cache;",
          "1154:         std::set<QPDFObjGen> resolving;",
          "1155:         QPDFObjectHandle trailer;",
          "1156:         std::vector<QPDFObjectHandle> all_pages;",
          "1157:         std::map<QPDFObjGen, int> pageobj_to_pages_pos;",
          "1158:         bool pushed_inherited_attributes_to_pages;",
          "1159:         std::vector<QPDFExc> warnings;",
          "1160:         std::map<QPDF*, ObjCopier> object_copiers;",
          "1161:         PointerHolder<QPDFObjectHandle::StreamDataProvider> copied_streams;",
          "1163:         CopiedStreamDataProvider* copied_stream_data_provider;",
          "1164:         std::set<QPDFObjGen> attachment_streams;",
          "1165:         bool reconstructed_xref;",
          "1168:         qpdf_offset_t first_xref_item_offset; // actual value from file",
          "1169:         bool uncompressed_after_compressed;",
          "1173:         QPDFObjectHandle lindict;",
          "1174:         LinParameters linp;",
          "1175:         HPageOffset page_offset_hints;",
          "1176:         HSharedObject shared_object_hints;",
          "1177:         HGeneric outline_hints;",
          "1182:         LinParameters c_linp;",
          "1183:         CHPageOffset c_page_offset_data;",
          "1184:         CHSharedObject c_shared_object_data;",
          "1185:         HGeneric c_outline_data;",
          "1190:         std::vector<QPDFObjectHandle> part4;",
          "1191:         std::vector<QPDFObjectHandle> part6;",
          "1192:         std::vector<QPDFObjectHandle> part7;",
          "1193:         std::vector<QPDFObjectHandle> part8;",
          "1194:         std::vector<QPDFObjectHandle> part9;",
          "1197:         std::map<ObjUser, std::set<QPDFObjGen> > obj_user_to_objects;",
          "1198:         std::map<QPDFObjGen, std::set<ObjUser> > object_to_obj_users;",
          "1199:     };",
          "1204:     PointerHolder<Members> m;",
          "",
          "---------------"
        ],
        "libqpdf/QPDF.cc||libqpdf/QPDF.cc": [
          "File: libqpdf/QPDF.cc -> libqpdf/QPDF.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     return QPDF::qpdf_version;",
          "75: }",
          "78:     encrypted(false),",
          "79:     encryption_initialized(false),",
          "80:     ignore_xref_streams(false),",
          "",
          "[Removed Lines]",
          "77: QPDF::QPDF() :",
          "",
          "[Added Lines]",
          "77: QPDF::Members::Members() :",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: {",
          "99: }",
          "101: QPDF::~QPDF()",
          "102: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: QPDF::Members::~Members()",
          "102: {",
          "103: }",
          "105: QPDF::QPDF() :",
          "106:     m(new Members())",
          "107: {",
          "108: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:     for (std::map<QPDFObjGen, ObjCache>::iterator iter =",
          "121:     {",
          "122:  QPDFObject::ObjAccessor::releaseResolved(",
          "123:      (*iter).second.object.getPointer());",
          "",
          "[Removed Lines]",
          "117:     this->xref_table.clear();",
          "119:              this->obj_cache.begin();",
          "120:   iter != obj_cache.end(); ++iter)",
          "",
          "[Added Lines]",
          "126:     this->m->xref_table.clear();",
          "128:              this->m->obj_cache.begin();",
          "129:   iter != this->m->obj_cache.end(); ++iter)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158: QPDF::processInputSource(PointerHolder<InputSource> source,",
          "159:                          char const* password)",
          "160: {",
          "162:     parse(password);",
          "163: }",
          "",
          "[Removed Lines]",
          "161:     this->file = source;",
          "",
          "[Added Lines]",
          "170:     this->m->file = source;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "171: void",
          "172: QPDF::setIgnoreXRefStreams(bool val)",
          "173: {",
          "175: }",
          "177: void",
          "178: QPDF::setOutputStreams(std::ostream* out, std::ostream* err)",
          "179: {",
          "182: }",
          "184: void",
          "185: QPDF::setSuppressWarnings(bool val)",
          "186: {",
          "188: }",
          "190: void",
          "191: QPDF::setAttemptRecovery(bool val)",
          "192: {",
          "194: }",
          "196: std::vector<QPDFExc>",
          "197: QPDF::getWarnings()",
          "198: {",
          "201:     return result;",
          "202: }",
          "204: bool",
          "205: QPDF::findHeader()",
          "206: {",
          "209:     char const* p = line.c_str();",
          "210:     if (strncmp(p, \"%PDF-\", 5) != 0)",
          "211:     {",
          "",
          "[Removed Lines]",
          "174:     this->ignore_xref_streams = val;",
          "180:     this->out_stream = out ? out : &std::cout;",
          "181:     this->err_stream = err ? err : &std::cerr;",
          "187:     this->suppress_warnings = val;",
          "193:     this->attempt_recovery = val;",
          "199:     std::vector<QPDFExc> result = this->warnings;",
          "200:     this->warnings.clear();",
          "207:     qpdf_offset_t global_offset = this->file->tell();",
          "208:     std::string line = this->file->readLine(1024);",
          "",
          "[Added Lines]",
          "183:     this->m->ignore_xref_streams = val;",
          "189:     this->m->out_stream = out ? out : &std::cout;",
          "190:     this->m->err_stream = err ? err : &std::cerr;",
          "196:     this->m->suppress_warnings = val;",
          "202:     this->m->attempt_recovery = val;",
          "208:     std::vector<QPDFExc> result = this->m->warnings;",
          "209:     this->m->warnings.clear();",
          "216:     qpdf_offset_t global_offset = this->m->file->tell();",
          "217:     std::string line = this->m->file->readLine(1024);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "239:     }",
          "240:     if (valid)",
          "241:     {",
          "243:         if (global_offset != 0)",
          "244:         {",
          "",
          "[Removed Lines]",
          "242:         this->pdf_version = version;",
          "",
          "[Added Lines]",
          "251:         this->m->pdf_version = version;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "249:             QTC::TC(\"qpdf\", \"QPDF global offset\");",
          "251:         }",
          "252:     }",
          "253:     return valid;",
          "",
          "[Removed Lines]",
          "250:             this->file = new OffsetInputSource(this->file, global_offset);",
          "",
          "[Added Lines]",
          "259:             this->m->file = new OffsetInputSource(this->m->file, global_offset);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "256: bool",
          "257: QPDF::findStartxref()",
          "258: {",
          "260:     if (t == QPDFTokenizer::Token(QPDFTokenizer::tt_word, \"startxref\"))",
          "261:     {",
          "263:         if (t.getType() == QPDFTokenizer::tt_integer)",
          "264:         {",
          "267:             return true;",
          "268:         }",
          "269:     }",
          "",
          "[Removed Lines]",
          "259:     QPDFTokenizer::Token t = readToken(this->file, true);",
          "262:         t = readToken(this->file, true);",
          "266:             this->file->seek(this->file->getLastOffset(), SEEK_SET);",
          "",
          "[Added Lines]",
          "268:     QPDFTokenizer::Token t = readToken(this->m->file, true);",
          "271:         t = readToken(this->m->file, true);",
          "275:             this->m->file->seek(this->m->file->getLastOffset(), SEEK_SET);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "275: {",
          "276:     if (password)",
          "277:     {",
          "279:     }",
          "282:     PatternFinder hf(*this, &QPDF::findHeader);",
          "284:     {",
          "285:  QTC::TC(\"qpdf\", \"QPDF not a pdf file\");",
          "287:                      \"\", 0, \"can't find PDF header\"));",
          "291:     }",
          "293:     {",
          "295:     }",
          "302:     qpdf_offset_t start_offset = (end_offset > 1054 ? end_offset - 1054 : 0);",
          "303:     PatternFinder sf(*this, &QPDF::findStartxref);",
          "304:     qpdf_offset_t xref_offset = 0;",
          "306:     {",
          "307:         xref_offset = QUtil::string_to_ll(",
          "309:     }",
          "311:     try",
          "",
          "[Removed Lines]",
          "278:  this->provided_password = password;",
          "283:     if (! this->file->findFirst(\"%PDF-\", 0, 1024, hf))",
          "286:  warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "290:         this->pdf_version = \"1.2\";",
          "292:     if (atof(this->pdf_version.c_str()) < 1.2)",
          "294:         this->tokenizer.allowPoundAnywhereInName();",
          "300:     this->file->seek(0, SEEK_END);",
          "301:     qpdf_offset_t end_offset = this->file->tell();",
          "305:     if (this->file->findLast(\"startxref\", start_offset, 0, sf))",
          "308:             readToken(this->file).getValue().c_str());",
          "",
          "[Added Lines]",
          "287:  this->m->provided_password = password;",
          "292:     if (! this->m->file->findFirst(\"%PDF-\", 0, 1024, hf))",
          "295:  warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "299:         this->m->pdf_version = \"1.2\";",
          "301:     if (atof(this->m->pdf_version.c_str()) < 1.2)",
          "303:         this->m->tokenizer.allowPoundAnywhereInName();",
          "309:     this->m->file->seek(0, SEEK_END);",
          "310:     qpdf_offset_t end_offset = this->m->file->tell();",
          "314:     if (this->m->file->findLast(\"startxref\", start_offset, 0, sf))",
          "317:             readToken(this->m->file).getValue().c_str());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "313:  if (xref_offset == 0)",
          "314:  {",
          "315:      QTC::TC(\"qpdf\", \"QPDF can't find startxref\");",
          "317:      \"can't find startxref\");",
          "318:  }",
          "319:  read_xref(xref_offset);",
          "320:     }",
          "321:     catch (QPDFExc& e)",
          "322:     {",
          "324:  {",
          "325:      reconstruct_xref(e);",
          "326:      QTC::TC(\"qpdf\", \"QPDF reconstructed xref table\");",
          "",
          "[Removed Lines]",
          "316:      throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(), \"\", 0,",
          "323:  if (this->attempt_recovery)",
          "",
          "[Added Lines]",
          "325:      throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(), \"\", 0,",
          "332:  if (this->m->attempt_recovery)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "338: void",
          "339: QPDF::warn(QPDFExc const& e)",
          "340: {",
          "343:     {",
          "346:     }",
          "347: }",
          "349: void",
          "350: QPDF::setTrailer(QPDFObjectHandle obj)",
          "351: {",
          "353:     {",
          "354:  return;",
          "355:     }",
          "357: }",
          "359: void",
          "360: QPDF::reconstruct_xref(QPDFExc& e)",
          "361: {",
          "363:     {",
          "",
          "[Removed Lines]",
          "341:     this->warnings.push_back(e);",
          "342:     if (! this->suppress_warnings)",
          "345:       << this->warnings.back().what() << std::endl;",
          "352:     if (this->trailer.isInitialized())",
          "356:     this->trailer = obj;",
          "362:     if (this->reconstructed_xref)",
          "",
          "[Added Lines]",
          "350:     this->m->warnings.push_back(e);",
          "351:     if (! this->m->suppress_warnings)",
          "354:             << \"WARNING: \"",
          "355:             << this->m->warnings.back().what() << std::endl;",
          "362:     if (this->m->trailer.isInitialized())",
          "366:     this->m->trailer = obj;",
          "372:     if (this->m->reconstructed_xref)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "367:         throw e;",
          "368:     }",
          "373:    \"file is damaged\"));",
          "374:     warn(e);",
          "376:    \"Attempting to reconstruct cross-reference table\"));",
          "379:     std::set<QPDFObjGen> to_delete;",
          "380:     for (std::map<QPDFObjGen, QPDFXRefEntry>::iterator iter =",
          "383:     {",
          "384:  if (((*iter).second).getType() == 1)",
          "385:  {",
          "",
          "[Removed Lines]",
          "370:     this->reconstructed_xref = true;",
          "372:     warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(), \"\", 0,",
          "375:     warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(), \"\", 0,",
          "381:       this->xref_table.begin();",
          "382:   iter != this->xref_table.end(); ++iter)",
          "",
          "[Added Lines]",
          "380:     this->m->reconstructed_xref = true;",
          "382:     warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(), \"\", 0,",
          "385:     warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(), \"\", 0,",
          "391:       this->m->xref_table.begin();",
          "392:   iter != this->m->xref_table.end(); ++iter)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "389:     for (std::set<QPDFObjGen>::iterator iter = to_delete.begin();",
          "390:   iter != to_delete.end(); ++iter)",
          "391:     {",
          "393:     }",
          "398:     bool in_obj = false;",
          "399:     qpdf_offset_t line_start = 0;",
          "407:         if (token_start >= next_line_start)",
          "408:         {",
          "",
          "[Removed Lines]",
          "392:  this->xref_table.erase(*iter);",
          "395:     this->file->seek(0, SEEK_END);",
          "396:     qpdf_offset_t eof = this->file->tell();",
          "397:     this->file->seek(0, SEEK_SET);",
          "400:     while (this->file->tell() < eof)",
          "401:     {",
          "402:         this->file->findAndSkipNextEOL();",
          "403:         qpdf_offset_t next_line_start = this->file->tell();",
          "404:         this->file->seek(line_start, SEEK_SET);",
          "405:         QPDFTokenizer::Token t1 = readToken(this->file, true);",
          "406:         qpdf_offset_t token_start = this->file->tell() - t1.getValue().length();",
          "",
          "[Added Lines]",
          "402:  this->m->xref_table.erase(*iter);",
          "405:     this->m->file->seek(0, SEEK_END);",
          "406:     qpdf_offset_t eof = this->m->file->tell();",
          "407:     this->m->file->seek(0, SEEK_SET);",
          "410:     while (this->m->file->tell() < eof)",
          "411:     {",
          "412:         this->m->file->findAndSkipNextEOL();",
          "413:         qpdf_offset_t next_line_start = this->m->file->tell();",
          "414:         this->m->file->seek(line_start, SEEK_SET);",
          "415:         QPDFTokenizer::Token t1 = readToken(this->m->file, true);",
          "416:         qpdf_offset_t token_start =",
          "417:             this->m->file->tell() - t1.getValue().length();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "419:         {",
          "420:             if (t1.getType() == QPDFTokenizer::tt_integer)",
          "421:             {",
          "424:                 if ((t2.getType() == QPDFTokenizer::tt_integer) &&",
          "425:                     (t3 == QPDFTokenizer::Token(QPDFTokenizer::tt_word, \"obj\")))",
          "426:                 {",
          "",
          "[Removed Lines]",
          "422:                 QPDFTokenizer::Token t2 = readToken(this->file, true);",
          "423:                 QPDFTokenizer::Token t3 = readToken(this->file, true);",
          "",
          "[Added Lines]",
          "433:                 QPDFTokenizer::Token t2 = readToken(this->m->file, true);",
          "434:                 QPDFTokenizer::Token t3 = readToken(this->m->file, true);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "430:                     insertXrefEntry(obj, 1, token_start, gen, true);",
          "431:                 }",
          "432:             }",
          "435:             {",
          "436:                 QPDFObjectHandle t =",
          "438:                 if (! t.isDictionary())",
          "439:                 {",
          "",
          "[Removed Lines]",
          "433:             else if ((! this->trailer.isInitialized()) &&",
          "434:                      (t1 == QPDFTokenizer::Token(QPDFTokenizer::tt_word, \"trailer\")))",
          "437:                     readObject(this->file, \"trailer\", 0, 0, false);",
          "",
          "[Added Lines]",
          "444:             else if ((! this->m->trailer.isInitialized()) &&",
          "445:                      (t1 == QPDFTokenizer::Token(",
          "446:                          QPDFTokenizer::tt_word, \"trailer\")))",
          "449:                     readObject(this->m->file, \"trailer\", 0, 0, false);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "445:                 }",
          "446:             }",
          "447:  }",
          "449:         line_start = next_line_start;",
          "450:     }",
          "453:     {",
          "",
          "[Removed Lines]",
          "448:         this->file->seek(next_line_start, SEEK_SET);",
          "452:     if (! this->trailer.isInitialized())",
          "",
          "[Added Lines]",
          "460:         this->m->file->seek(next_line_start, SEEK_SET);",
          "464:     if (! this->m->trailer.isInitialized())",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "461:         \"unable to find trailer \"",
          "462:         \"dictionary while recovering damaged file\");",
          "463:     }",
          "",
          "[Removed Lines]",
          "460:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(), \"\", 0,",
          "",
          "[Added Lines]",
          "472:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(), \"\", 0,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "479:     {",
          "480:         char buf[7];",
          "481:         memset(buf, 0, sizeof(buf));",
          "",
          "[Removed Lines]",
          "482:  this->file->seek(xref_offset, SEEK_SET);",
          "483:  this->file->read(buf, sizeof(buf) - 1);",
          "",
          "[Added Lines]",
          "494:  this->m->file->seek(xref_offset, SEEK_SET);",
          "495:  this->m->file->read(buf, sizeof(buf) - 1);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "506:  }",
          "507:     }",
          "510:     {",
          "512:                       \"unable to find trailer while reading xref\");",
          "513:     }",
          "515:     int max_obj = 0;",
          "517:     {",
          "519:     }",
          "521:     {",
          "523:     }",
          "524:     if (size != max_obj + 1)",
          "525:     {",
          "526:  QTC::TC(\"qpdf\", \"QPDF xref size mismatch\");",
          "528:        std::string(\"reported number of objects (\") +",
          "529:        QUtil::int_to_string(size) +",
          "530:        \") inconsistent with actual number of objects (\" +",
          "",
          "[Removed Lines]",
          "509:     if (! this->trailer.isInitialized())",
          "511:         throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(), \"\", 0,",
          "514:     int size = this->trailer.getKey(\"/Size\").getIntValue();",
          "516:     if (! xref_table.empty())",
          "518:  max_obj = (*(xref_table.rbegin())).first.getObj();",
          "520:     if (! this->deleted_objects.empty())",
          "522:  max_obj = std::max(max_obj, *(this->deleted_objects.rbegin()));",
          "527:  warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(), \"\", 0,",
          "",
          "[Added Lines]",
          "521:     if (! this->m->trailer.isInitialized())",
          "523:         throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(), \"\", 0,",
          "526:     int size = this->m->trailer.getKey(\"/Size\").getIntValue();",
          "528:     if (! this->m->xref_table.empty())",
          "530:  max_obj = (*(this->m->xref_table.rbegin())).first.getObj();",
          "532:     if (! this->m->deleted_objects.empty())",
          "534:  max_obj = std::max(max_obj, *(this->m->deleted_objects.rbegin()));",
          "539:  warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(), \"\", 0,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "537: }",
          "539: bool",
          "",
          "[Removed Lines]",
          "536:     this->deleted_objects.clear();",
          "",
          "[Added Lines]",
          "548:     this->m->deleted_objects.clear();",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "678:     if (invalid)",
          "679:     {",
          "681:                      \"xref table\",",
          "683:                      \"accepting invalid xref table entry\"));",
          "684:     }",
          "",
          "[Removed Lines]",
          "680:         warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "682:                      this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "692:         warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "694:                      this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "694: {",
          "695:     std::vector<QPDFObjGen> deleted_items;",
          "698:     bool done = false;",
          "699:     while (! done)",
          "700:     {",
          "701:         char linebuf[51];",
          "702:         memset(linebuf, 0, sizeof(linebuf));",
          "704:  std::string line = linebuf;",
          "705:         int obj = 0;",
          "706:         int num = 0;",
          "",
          "[Removed Lines]",
          "697:     this->file->seek(xref_offset, SEEK_SET);",
          "703:         this->file->read(linebuf, sizeof(linebuf) - 1);",
          "",
          "[Added Lines]",
          "709:     this->m->file->seek(xref_offset, SEEK_SET);",
          "715:         this->m->file->read(linebuf, sizeof(linebuf) - 1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "708:         if (! parse_xrefFirst(line, obj, num, bytes))",
          "709:  {",
          "710:      QTC::TC(\"qpdf\", \"QPDF invalid xref\");",
          "713:      \"xref syntax invalid\");",
          "714:  }",
          "716:  for (int i = obj; i < obj + num; ++i)",
          "717:  {",
          "718:      if (i == 0)",
          "719:      {",
          "722:      }",
          "725:      qpdf_offset_t f1 = 0;",
          "726:      int f2 = 0;",
          "",
          "[Removed Lines]",
          "711:      throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "712:      \"xref table\", this->file->getLastOffset(),",
          "715:         this->file->seek(this->file->getLastOffset() + bytes, SEEK_SET);",
          "721:   this->first_xref_item_offset = this->file->tell();",
          "723:      std::string xref_entry = this->file->readLine(30);",
          "",
          "[Added Lines]",
          "723:      throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "724:      \"xref table\", this->m->file->getLastOffset(),",
          "727:         this->m->file->seek(this->m->file->getLastOffset() + bytes, SEEK_SET);",
          "733:   this->m->first_xref_item_offset = this->m->file->tell();",
          "735:      std::string xref_entry = this->m->file->readLine(30);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "729:      {",
          "730:   QTC::TC(\"qpdf\", \"QPDF invalid xref entry\");",
          "731:   throw QPDFExc(",
          "734:       \"invalid xref entry (obj=\" +",
          "735:       QUtil::int_to_string(i) + \")\");",
          "736:      }",
          "",
          "[Removed Lines]",
          "732:       qpdf_e_damaged_pdf, this->file->getName(),",
          "733:       \"xref table\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "744:       qpdf_e_damaged_pdf, this->m->file->getName(),",
          "745:       \"xref table\", this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "745:   insertXrefEntry(i, 1, f1, f2);",
          "746:      }",
          "747:  }",
          "750:  if (t == QPDFTokenizer::Token(QPDFTokenizer::tt_word, \"trailer\"))",
          "751:  {",
          "752:      done = true;",
          "753:  }",
          "754:  else",
          "755:  {",
          "757:  }",
          "758:     }",
          "761:     QPDFObjectHandle cur_trailer =",
          "763:     if (! cur_trailer.isDictionary())",
          "764:     {",
          "765:  QTC::TC(\"qpdf\", \"QPDF missing trailer\");",
          "768:         \"expected trailer dictionary\");",
          "769:     }",
          "772:     {",
          "773:  setTrailer(cur_trailer);",
          "776:  {",
          "777:      QTC::TC(\"qpdf\", \"QPDF trailer lacks size\");",
          "780:      \"trailer dictionary lacks /Size key\");",
          "781:  }",
          "783:  {",
          "784:      QTC::TC(\"qpdf\", \"QPDF trailer size not integer\");",
          "787:      \"/Size key in trailer dictionary is not \"",
          "788:      \"an integer\");",
          "789:  }",
          "",
          "[Removed Lines]",
          "748:  qpdf_offset_t pos = this->file->tell();",
          "749:  QPDFTokenizer::Token t = readToken(this->file);",
          "756:      this->file->seek(pos, SEEK_SET);",
          "762:  readObject(this->file, \"trailer\", 0, 0, false);",
          "766:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "767:         \"\", this->file->getLastOffset(),",
          "771:     if (! this->trailer.isInitialized())",
          "775:  if (! this->trailer.hasKey(\"/Size\"))",
          "778:      throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "779:      \"trailer\", this->file->getLastOffset(),",
          "782:  if (! this->trailer.getKey(\"/Size\").isInteger())",
          "785:      throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "786:      \"trailer\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "760:  qpdf_offset_t pos = this->m->file->tell();",
          "761:  QPDFTokenizer::Token t = readToken(this->m->file);",
          "768:      this->m->file->seek(pos, SEEK_SET);",
          "774:  readObject(this->m->file, \"trailer\", 0, 0, false);",
          "778:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "779:         \"\", this->m->file->getLastOffset(),",
          "783:     if (! this->m->trailer.isInitialized())",
          "787:  if (! this->m->trailer.hasKey(\"/Size\"))",
          "790:      throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "791:      \"trailer\", this->m->file->getLastOffset(),",
          "794:  if (! this->m->trailer.getKey(\"/Size\").isInteger())",
          "797:      throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "798:      \"trailer\", this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "792:     if (cur_trailer.hasKey(\"/XRefStm\"))",
          "793:     {",
          "795:  {",
          "796:      QTC::TC(\"qpdf\", \"QPDF ignoring XRefStm in trailer\");",
          "797:  }",
          "",
          "[Removed Lines]",
          "794:  if (this->ignore_xref_streams)",
          "",
          "[Added Lines]",
          "806:  if (this->m->ignore_xref_streams)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "807:      }",
          "808:      else",
          "809:      {",
          "811:          \"xref stream\", xref_offset,",
          "812:          \"invalid /XRefStm\");",
          "813:      }",
          "",
          "[Removed Lines]",
          "810:   throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "",
          "[Added Lines]",
          "822:   throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "827:  if (! cur_trailer.getKey(\"/Prev\").isInteger())",
          "828:  {",
          "829:      QTC::TC(\"qpdf\", \"QPDF trailer prev not integer\");",
          "832:      \"/Prev key in trailer dictionary is not \"",
          "833:      \"an integer\");",
          "834:  }",
          "",
          "[Removed Lines]",
          "830:      throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "831:      \"trailer\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "842:      throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "843:      \"trailer\", this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "847: QPDF::read_xrefStream(qpdf_offset_t xref_offset)",
          "848: {",
          "849:     bool found = false;",
          "851:     {",
          "852:  int xobj;",
          "853:  int xgen;",
          "",
          "[Removed Lines]",
          "850:     if (! this->ignore_xref_streams)",
          "",
          "[Added Lines]",
          "862:     if (! this->m->ignore_xref_streams)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "875:     if (! found)",
          "876:     {",
          "877:  QTC::TC(\"qpdf\", \"QPDF can't find xref\");",
          "879:         \"\", xref_offset, \"xref not found\");",
          "880:     }",
          "",
          "[Removed Lines]",
          "878:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "",
          "[Added Lines]",
          "890:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "896:     dict.getKey(\"/Size\").isInteger() &&",
          "897:     (Index_obj.isArray() || Index_obj.isNull())))",
          "898:     {",
          "900:         \"xref stream\", xref_offset,",
          "901:         \"Cross-reference stream does not have\"",
          "902:         \" proper /W and /Index keys\");",
          "",
          "[Removed Lines]",
          "899:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "",
          "[Added Lines]",
          "911:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "910:  W[i] = W_obj.getArrayItem(i).getIntValue();",
          "911:         if (W[i] > max_bytes)",
          "912:         {",
          "914:                           \"xref stream\", xref_offset,",
          "915:                           \"Cross-reference stream's /W contains\"",
          "916:                           \" impossibly large values\");",
          "",
          "[Removed Lines]",
          "913:             throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "",
          "[Added Lines]",
          "925:             throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "919:     }",
          "920:     if (entry_size == 0)",
          "921:     {",
          "923:                       \"xref stream\", xref_offset,",
          "924:                       \"Cross-reference stream's /W indicates\"",
          "925:                       \" entry size of 0\");",
          "",
          "[Removed Lines]",
          "922:         throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "",
          "[Added Lines]",
          "934:         throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "933:  int n_index = Index_obj.getArrayNItems();",
          "934:  if ((n_index % 2) || (n_index < 2))",
          "935:  {",
          "937:      \"xref stream\", xref_offset,",
          "938:      \"Cross-reference stream's /Index has an\"",
          "939:      \" invalid number of values\");",
          "",
          "[Removed Lines]",
          "936:      throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "",
          "[Added Lines]",
          "948:      throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "946:      }",
          "947:      else",
          "948:      {",
          "950:          \"xref stream\", xref_offset,",
          "951:          \"Cross-reference stream's /Index's item \" +",
          "952:          QUtil::int_to_string(i) +",
          "",
          "[Removed Lines]",
          "949:   throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "",
          "[Added Lines]",
          "961:   throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "969:     {",
          "970:         if (indx.at(i) > max_num_entries - num_entries)",
          "971:         {",
          "973:                           \"xref stream\", xref_offset,",
          "974:                           \"Cross-reference stream claims to contain\"",
          "975:                           \" too many entries: \" +",
          "",
          "[Removed Lines]",
          "972:             throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "",
          "[Added Lines]",
          "984:             throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "990:     if (expected_size != actual_size)",
          "991:     {",
          "993:     \"xref stream\", xref_offset,",
          "994:     \"Cross-reference stream data has the wrong size;\"",
          "995:     \" expected = \" + QUtil::int_to_string(expected_size) +",
          "",
          "[Removed Lines]",
          "992:  QPDFExc x(qpdf_e_damaged_pdf, this->file->getName(),",
          "",
          "[Added Lines]",
          "1004:  QPDFExc x(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1050:  {",
          "1051:      if (fields[0] != 2)",
          "1052:      {",
          "1054:      }",
          "1055:  }",
          "1056:  else if (fields[0] == 2)",
          "",
          "[Removed Lines]",
          "1053:   this->uncompressed_after_compressed = true;",
          "",
          "[Added Lines]",
          "1065:   this->m->uncompressed_after_compressed = true;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1060:  if (obj == 0)",
          "1061:  {",
          "1064:  }",
          "1065:  insertXrefEntry(obj, static_cast<int>(fields[0]),",
          "1066:                         fields[1], static_cast<int>(fields[2]));",
          "1067:     }",
          "1070:     {",
          "1071:  setTrailer(dict);",
          "1072:     }",
          "",
          "[Removed Lines]",
          "1063:      this->first_xref_item_offset = xref_offset;",
          "1069:     if (! this->trailer.isInitialized())",
          "",
          "[Added Lines]",
          "1075:      this->m->first_xref_item_offset = xref_offset;",
          "1081:     if (! this->m->trailer.isInitialized())",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1075:     {",
          "1076:  if (! dict.getKey(\"/Prev\").isInteger())",
          "1077:  {",
          "1080:      \"/Prev key in xref stream dictionary is not \"",
          "1081:      \"an integer\");",
          "1082:  }",
          "",
          "[Removed Lines]",
          "1078:      throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1079:      \"xref stream\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "1090:      throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1091:      \"xref stream\", this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1108:     { // private scope",
          "1109:  int gen = (f0 == 2 ? 0 : f2);",
          "1110:  QPDFObjGen og(obj, gen);",
          "1112:  {",
          "1113:      if (overwrite)",
          "1114:      {",
          "1115:   QTC::TC(\"qpdf\", \"QPDF xref overwrite object\");",
          "1117:      }",
          "1118:      else",
          "1119:      {",
          "",
          "[Removed Lines]",
          "1111:  if (this->xref_table.count(og))",
          "1116:   this->xref_table.erase(og);",
          "",
          "[Added Lines]",
          "1123:  if (this->m->xref_table.count(og))",
          "1128:   this->m->xref_table.erase(og);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1121:   return;",
          "1122:      }",
          "1123:  }",
          "1125:  {",
          "1126:      QTC::TC(\"qpdf\", \"QPDF xref deleted object\");",
          "1127:      return;",
          "",
          "[Removed Lines]",
          "1124:  if (this->deleted_objects.count(obj))",
          "",
          "[Added Lines]",
          "1136:  if (this->m->deleted_objects.count(obj))",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1131:     switch (f0)",
          "1132:     {",
          "1133:       case 0:",
          "1135:  break;",
          "1137:       case 1:",
          "1139:  QTC::TC(\"qpdf\", \"QPDF xref gen > 0\", ((f2 > 0) ? 1 : 0));",
          "1141:  break;",
          "1143:       case 2:",
          "1145:  break;",
          "1147:       default:",
          "1150:         \"unknown xref stream entry type \" +",
          "1151:         QUtil::int_to_string(f0));",
          "1152:  break;",
          "",
          "[Removed Lines]",
          "1134:  this->deleted_objects.insert(obj);",
          "1140:  this->xref_table[QPDFObjGen(obj, f2)] = QPDFXRefEntry(f0, f1, f2);",
          "1144:  this->xref_table[QPDFObjGen(obj, 0)] = QPDFXRefEntry(f0, f1, f2);",
          "1148:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1149:         \"xref stream\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "1146:  this->m->deleted_objects.insert(obj);",
          "1152:  this->m->xref_table[QPDFObjGen(obj, f2)] = QPDFXRefEntry(f0, f1, f2);",
          "1156:  this->m->xref_table[QPDFObjGen(obj, 0)] = QPDFXRefEntry(f0, f1, f2);",
          "1160:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1161:         \"xref stream\", this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1157: QPDF::showXRefTable()",
          "1158: {",
          "1159:     for (std::map<QPDFObjGen, QPDFXRefEntry>::iterator iter =",
          "1162:     {",
          "1163:  QPDFObjGen const& og = (*iter).first;",
          "1164:  QPDFXRefEntry const& entry = (*iter).second;",
          "1166:  switch (entry.getType())",
          "1167:  {",
          "1168:    case 1:",
          "1170:      break;",
          "1172:    case 2:",
          "1175:      break;",
          "1177:    default:",
          "",
          "[Removed Lines]",
          "1160:       this->xref_table.begin();",
          "1161:   iter != this->xref_table.end(); ++iter)",
          "1174:    << \", index = \" << entry.getObjStreamIndex();",
          "",
          "[Added Lines]",
          "1172:       this->m->xref_table.begin();",
          "1173:   iter != this->m->xref_table.end(); ++iter)",
          "1182:                 << \"uncompressed; offset = \" << entry.getOffset();",
          "1187:                 << \"compressed; stream = \"",
          "1188:                 << entry.getObjStreamNumber()",
          "1189:                 << \", index = \" << entry.getObjStreamIndex();",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1188: {",
          "1189:     std::vector<QPDFObjectHandle> result;",
          "1190:     for (std::map<QPDFObjGen, QPDFXRefEntry>::iterator iter =",
          "1193:     {",
          "1195:  QPDFObjGen const& og = (*iter).first;",
          "",
          "[Removed Lines]",
          "1191:       this->xref_table.begin();",
          "1192:   iter != this->xref_table.end(); ++iter)",
          "",
          "[Added Lines]",
          "1206:       this->m->xref_table.begin();",
          "1207:   iter != this->m->xref_table.end(); ++iter)",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1203: QPDF::setLastObjectDescription(std::string const& description,",
          "1204:           int objid, int generation)",
          "1205: {",
          "1207:     if (! description.empty())",
          "1208:     {",
          "1210:  if (objid > 0)",
          "1211:  {",
          "1213:  }",
          "1214:     }",
          "1215:     if (objid > 0)",
          "1216:     {",
          "1218:      QUtil::int_to_string(objid) + \" \" +",
          "1219:      QUtil::int_to_string(generation);",
          "1220:     }",
          "",
          "[Removed Lines]",
          "1206:     this->last_object_description.clear();",
          "1209:  this->last_object_description += description;",
          "1212:      this->last_object_description += \": \";",
          "1217:  this->last_object_description += \"object \" +",
          "",
          "[Added Lines]",
          "1221:     this->m->last_object_description.clear();",
          "1224:  this->m->last_object_description += description;",
          "1227:      this->m->last_object_description += \": \";",
          "1232:  this->m->last_object_description += \"object \" +",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1231:     bool empty = false;",
          "1232:     PointerHolder<StringDecrypter> decrypter_ph;",
          "1233:     StringDecrypter* decrypter = 0;",
          "1235:     {",
          "1236:         decrypter_ph = new StringDecrypter(this, objid, generation);",
          "1237:         decrypter = decrypter_ph.getPointer();",
          "1238:     }",
          "1239:     QPDFObjectHandle object = QPDFObjectHandle::parse(",
          "1241:     if (empty)",
          "1242:     {",
          "1246:         warn(QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1248:                      input->getLastOffset(),",
          "1249:                      \"empty object treated as null\"));",
          "1250:     }",
          "",
          "[Removed Lines]",
          "1234:     if (this->encrypted && (! in_object_stream))",
          "1240:         input, description, this->tokenizer, empty, decrypter, this);",
          "1247:                      this->last_object_description,",
          "",
          "[Added Lines]",
          "1249:     if (this->m->encrypted && (! in_object_stream))",
          "1255:         input, description, this->m->tokenizer, empty, decrypter, this);",
          "1262:                      this->m->last_object_description,",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1299:                             warn(QPDFExc(",
          "1300:                                      qpdf_e_damaged_pdf,",
          "1301:                                      input->getName(),",
          "1303:                                      input->tell(),",
          "1304:                                      \"stream keyword followed\"",
          "1305:                                      \" by carriage return only\"));",
          "",
          "[Removed Lines]",
          "1302:                                      this->last_object_description,",
          "",
          "[Added Lines]",
          "1317:                                      this->m->last_object_description,",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1315:                         input->unreadCh(ch);",
          "1316:                     }",
          "1317:                     warn(QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1319:                                  input->tell(),",
          "1320:                                  \"stream keyword not followed\"",
          "1321:                                  \" by proper line terminator\"));",
          "",
          "[Removed Lines]",
          "1318:                                  this->last_object_description,",
          "",
          "[Added Lines]",
          "1333:                                  this->m->last_object_description,",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1337:                 {",
          "1338:                     QTC::TC(\"qpdf\", \"QPDF stream without length\");",
          "1339:                     throw QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1341:                                   \"stream dictionary lacks /Length key\");",
          "1342:                 }",
          "",
          "[Removed Lines]",
          "1340:                                   this->last_object_description, offset,",
          "",
          "[Added Lines]",
          "1355:                                   this->m->last_object_description, offset,",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1346:                 {",
          "1347:                     QTC::TC(\"qpdf\", \"QPDF stream length not integer\");",
          "1348:                     throw QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1350:                                   \"/Length key in stream dictionary is not \"",
          "1351:                                   \"an integer\");",
          "1352:                 }",
          "",
          "[Removed Lines]",
          "1349:                                   this->last_object_description, offset,",
          "",
          "[Added Lines]",
          "1364:                                   this->m->last_object_description, offset,",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1359:                 {",
          "1360:                     QTC::TC(\"qpdf\", \"QPDF missing endstream\");",
          "1361:                     throw QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1363:                                   input->getLastOffset(),",
          "1364:                                   \"expected endstream\");",
          "1365:                 }",
          "1366:             }",
          "1367:             catch (QPDFExc& e)",
          "1368:             {",
          "1370:                 {",
          "1371:                     warn(e);",
          "1372:                     length = recoverStreamLength(",
          "",
          "[Removed Lines]",
          "1362:                                   this->last_object_description,",
          "1369:                 if (this->attempt_recovery)",
          "",
          "[Added Lines]",
          "1377:                                   this->m->last_object_description,",
          "1384:                 if (this->m->attempt_recovery)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1396: QPDF::findEndstream()",
          "1397: {",
          "1400:     if ((t.getType() == QPDFTokenizer::tt_word) &&",
          "1401:         ((t.getValue() == \"endobj\") ||",
          "1402:          (t.getValue() == \"endstream\")));",
          "1403:     {",
          "1405:         return true;",
          "1406:     }",
          "1407:     return false;",
          "",
          "[Removed Lines]",
          "1399:     QPDFTokenizer::Token t = readToken(this->file, true);",
          "1404:         this->file->seek(this->file->getLastOffset(), SEEK_SET);",
          "",
          "[Added Lines]",
          "1414:     QPDFTokenizer::Token t = readToken(this->m->file, true);",
          "1419:         this->m->file->seek(this->m->file->getLastOffset(), SEEK_SET);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1417:     warn(QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1419:    \"attempting to recover stream length\"));",
          "1421:     PatternFinder ef(*this, &QPDF::findEndstream);",
          "1422:     size_t length = 0;",
          "1424:     {",
          "1428:         if (t.getValue() == \"endobj\")",
          "1429:         {",
          "1431:         }",
          "1432:     }",
          "",
          "[Removed Lines]",
          "1418:    this->last_object_description, stream_offset,",
          "1423:     if (this->file->findFirst(\"end\", stream_offset, 0, ef))",
          "1425:         length = this->file->tell() - stream_offset;",
          "1427:         QPDFTokenizer::Token t = readToken(this->file);",
          "1430:             this->file->seek(this->file->getLastOffset(), SEEK_SET);",
          "",
          "[Added Lines]",
          "1433:    this->m->last_object_description, stream_offset,",
          "1438:     if (this->m->file->findFirst(\"end\", stream_offset, 0, ef))",
          "1440:         length = this->m->file->tell() - stream_offset;",
          "1442:         QPDFTokenizer::Token t = readToken(this->m->file);",
          "1445:             this->m->file->seek(this->m->file->getLastOffset(), SEEK_SET);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1440:  for (std::map<QPDFObjGen, QPDFXRefEntry>::iterator iter =",
          "1443:  {",
          "1444:      QPDFObjGen const& og = (*iter).first;",
          "1445:      QPDFXRefEntry const& entry = (*iter).second;",
          "",
          "[Removed Lines]",
          "1441:    this->xref_table.begin();",
          "1442:       iter != this->xref_table.end(); ++iter)",
          "",
          "[Added Lines]",
          "1456:    this->m->xref_table.begin();",
          "1457:       iter != this->m->xref_table.end(); ++iter)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1472:     if (length == 0)",
          "1473:     {",
          "1474:         warn(QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1477:     }",
          "1478:     else",
          "1479:     {",
          "1480:         warn(QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1482:                      \"recovered stream length: \" +",
          "1483:                      QUtil::int_to_string(length)));",
          "1484:     }",
          "",
          "[Removed Lines]",
          "1475:                      this->last_object_description, stream_offset,",
          "1476:                      \"unable to recover stream data; treating stream as empty\"));",
          "1481:                      this->last_object_description, stream_offset,",
          "",
          "[Added Lines]",
          "1490:                      this->m->last_object_description, stream_offset,",
          "1491:                      \"unable to recover stream data;\"",
          "1492:                      \" treating stream as empty\"));",
          "1497:                      this->m->last_object_description, stream_offset,",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1490: QPDFTokenizer::Token",
          "1491: QPDF::readToken(PointerHolder<InputSource> input, bool allow_bad)",
          "1492: {",
          "1495: }",
          "1497: QPDFObjectHandle",
          "",
          "[Removed Lines]",
          "1493:     return this->tokenizer.readToken(",
          "1494:         input, this->last_object_description, allow_bad);",
          "",
          "[Added Lines]",
          "1509:     return this->m->tokenizer.readToken(",
          "1510:         input, this->m->last_object_description, allow_bad);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1500:     int exp_objid, int exp_generation,",
          "1501:     int& objid, int& generation)",
          "1502: {",
          "1504:     {",
          "1505:         try_recovery = false;",
          "1506:     }",
          "",
          "[Removed Lines]",
          "1503:     if (! this->attempt_recovery)",
          "",
          "[Added Lines]",
          "1519:     if (! this->m->attempt_recovery)",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1514:     if (offset == 0)",
          "1515:     {",
          "1516:         QTC::TC(\"qpdf\", \"QPDF bogus 0 offset\", 0);",
          "1519:        \"object has offset 0\"));",
          "1520:         return QPDFObjectHandle::newNull();",
          "1521:     }",
          "1529:     bool objidok = (tobjid.getType() == QPDFTokenizer::tt_integer);",
          "1530:     int genok = (tgen.getType() == QPDFTokenizer::tt_integer);",
          "",
          "[Removed Lines]",
          "1517:  warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1518:        this->last_object_description, 0,",
          "1523:     this->file->seek(offset, SEEK_SET);",
          "1525:     QPDFTokenizer::Token tobjid = readToken(this->file);",
          "1526:     QPDFTokenizer::Token tgen = readToken(this->file);",
          "1527:     QPDFTokenizer::Token tobj = readToken(this->file);",
          "",
          "[Added Lines]",
          "1533:  warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1534:        this->m->last_object_description, 0,",
          "1539:     this->m->file->seek(offset, SEEK_SET);",
          "1541:     QPDFTokenizer::Token tobjid = readToken(this->m->file);",
          "1542:     QPDFTokenizer::Token tgen = readToken(this->m->file);",
          "1543:     QPDFTokenizer::Token tobj = readToken(this->m->file);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1539:  if (! (objidok && genok && objok))",
          "1540:  {",
          "1541:      QTC::TC(\"qpdf\", \"QPDF expected n n obj\");",
          "1544:      \"expected n n obj\");",
          "1545:  }",
          "1546:  objid = atoi(tobjid.getValue().c_str());",
          "",
          "[Removed Lines]",
          "1542:      throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1543:      this->last_object_description, offset,",
          "",
          "[Added Lines]",
          "1558:      throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1559:      this->m->last_object_description, offset,",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1549:         if (objid == 0)",
          "1550:         {",
          "1551:             QTC::TC(\"qpdf\", \"QPDF object id 0\");",
          "1554:                           \"object with ID 0\");",
          "1555:         }",
          "",
          "[Removed Lines]",
          "1552:             throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1553:                           this->last_object_description, offset,",
          "",
          "[Added Lines]",
          "1568:             throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1569:                           this->m->last_object_description, offset,",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1558:      (! ((objid == exp_objid) && (generation == exp_generation))))",
          "1559:  {",
          "1560:      QTC::TC(\"qpdf\", \"QPDF err wrong objid/generation\");",
          "1563:                       std::string(\"expected \") +",
          "1564:                       QUtil::int_to_string(exp_objid) + \" \" +",
          "1565:                       QUtil::int_to_string(exp_generation) + \" obj\");",
          "",
          "[Removed Lines]",
          "1561:      QPDFExc e(qpdf_e_damaged_pdf, this->file->getName(),",
          "1562:                       this->last_object_description, offset,",
          "",
          "[Added Lines]",
          "1577:      QPDFExc e(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1578:                       this->m->last_object_description, offset,",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1584:      reconstruct_xref(e);",
          "1585:      QPDFObjGen og(exp_objid, exp_generation);",
          "1588:      {",
          "1590:   QPDFObjectHandle result = readObjectAtOffset(",
          "1591:       false, new_offset, description,",
          "1592:       exp_objid, exp_generation, objid, generation);",
          "",
          "[Removed Lines]",
          "1586:      if (this->xref_table.count(og) &&",
          "1587:   (this->xref_table[og].getType() == 1))",
          "1589:   qpdf_offset_t new_offset = this->xref_table[og].getOffset();",
          "",
          "[Added Lines]",
          "1602:      if (this->m->xref_table.count(og) &&",
          "1603:   (this->m->xref_table[og].getType() == 1))",
          "1605:   qpdf_offset_t new_offset = this->m->xref_table[og].getOffset();",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1597:      {",
          "1598:   QTC::TC(\"qpdf\", \"QPDF object gone after xref reconstruction\");",
          "1599:   warn(QPDFExc(",
          "1601:     \"\", 0,",
          "1602:     std::string(",
          "1603:         \"object \" +",
          "",
          "[Removed Lines]",
          "1600:     qpdf_e_damaged_pdf, this->file->getName(),",
          "",
          "[Added Lines]",
          "1616:     qpdf_e_damaged_pdf, this->m->file->getName(),",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1616:     }",
          "1618:     QPDFObjectHandle oh = readObject(",
          "1622:     QPDFTokenizer::Token(QPDFTokenizer::tt_word, \"endobj\")))",
          "1623:     {",
          "1624:  QTC::TC(\"qpdf\", \"QPDF err expected endobj\");",
          "1627:        \"expected endobj\"));",
          "1628:     }",
          "1630:     QPDFObjGen og(objid, generation);",
          "1632:     {",
          "",
          "[Removed Lines]",
          "1619:  this->file, description, objid, generation, false);",
          "1621:     if (! (readToken(this->file) ==",
          "1625:  warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1626:        this->last_object_description, this->file->getLastOffset(),",
          "1631:     if (! this->obj_cache.count(og))",
          "",
          "[Added Lines]",
          "1635:  this->m->file, description, objid, generation, false);",
          "1637:     if (! (readToken(this->m->file) ==",
          "1641:  warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1642:        this->m->last_object_description,",
          "1643:                      this->m->file->getLastOffset(),",
          "1648:     if (! this->m->obj_cache.count(og))",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1646:  while (true)",
          "1647:  {",
          "1648:      char ch;",
          "1650:      {",
          "1651:   if (! isspace(static_cast<unsigned char>(ch)))",
          "1652:   {",
          "1654:       break;",
          "1655:   }",
          "1656:      }",
          "1657:      else",
          "1658:      {",
          "1661:          \"EOF after endobj\");",
          "1662:      }",
          "1663:  }",
          "1667:      ObjCache(QPDFObjectHandle::ObjAccessor::getObject(oh),",
          "1668:        end_before_space, end_after_space);",
          "1669:     }",
          "",
          "[Removed Lines]",
          "1643:  qpdf_offset_t end_before_space = this->file->tell();",
          "1649:      if (this->file->read(&ch, 1))",
          "1653:       this->file->seek(-1, SEEK_CUR);",
          "1659:   throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1660:          this->last_object_description, offset,",
          "1664:  qpdf_offset_t end_after_space = this->file->tell();",
          "1666:  this->obj_cache[og] =",
          "",
          "[Added Lines]",
          "1660:  qpdf_offset_t end_before_space = this->m->file->tell();",
          "1666:      if (this->m->file->read(&ch, 1))",
          "1670:       this->m->file->seek(-1, SEEK_CUR);",
          "1676:   throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1677:          this->m->last_object_description, offset,",
          "1681:  qpdf_offset_t end_after_space = this->m->file->tell();",
          "1683:  this->m->obj_cache[og] =",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1680:     QPDFObjGen og(objid, generation);",
          "1682:     {",
          "1686:  QTC::TC(\"qpdf\", \"QPDF recursion loop in resolve\");",
          "1689:        \"loop detected resolving object \" +",
          "1690:        QUtil::int_to_string(objid) + \" \" +",
          "1691:        QUtil::int_to_string(generation)));",
          "",
          "[Removed Lines]",
          "1681:     if (this->resolving.count(og))",
          "1687:  warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1688:        \"\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "1698:     if (this->m->resolving.count(og))",
          "1704:  warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1705:        \"\", this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1693:     }",
          "1694:     ResolveRecorder rr(this, og);",
          "1697:     {",
          "1699:  {",
          "1701:      return new QPDF_Null;",
          "1702:  }",
          "1705:         bool success = false;",
          "1706:         try",
          "1707:         {",
          "",
          "[Removed Lines]",
          "1696:     if (! this->obj_cache.count(og))",
          "1698:  if (! this->xref_table.count(og))",
          "1704:  QPDFXRefEntry const& entry = this->xref_table[og];",
          "",
          "[Added Lines]",
          "1713:     if (! this->m->obj_cache.count(og))",
          "1715:  if (! this->m->xref_table.count(og))",
          "1721:  QPDFXRefEntry const& entry = this->m->xref_table[og];",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1724:                 break;",
          "1726:               default:",
          "1728:                               \"object \" +",
          "1729:                               QUtil::int_to_string(objid) + \"/\" +",
          "1730:                               QUtil::int_to_string(generation) +",
          "",
          "[Removed Lines]",
          "1727:                 throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(), \"\", 0,",
          "",
          "[Added Lines]",
          "1744:                 throw QPDFExc(qpdf_e_damaged_pdf,",
          "1745:                               this->m->file->getName(), \"\", 0,",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1738:         }",
          "1739:         catch (std::exception& e)",
          "1740:         {",
          "1742:                          \"object \" +",
          "1743:                          QUtil::int_to_string(objid) + \"/\" +",
          "1744:                          QUtil::int_to_string(generation) +",
          "",
          "[Removed Lines]",
          "1741:             warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(), \"\", 0,",
          "",
          "[Added Lines]",
          "1759:             warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(), \"\", 0,",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "1748:         {",
          "1749:             QTC::TC(\"qpdf\", \"QPDF resolve failure to null\");",
          "1750:             QPDFObjectHandle oh = QPDFObjectHandle::newNull();",
          "1752:                 ObjCache(QPDFObjectHandle::ObjAccessor::getObject(oh), -1, -1);",
          "1753:         }",
          "1754:     }",
          "1757: }",
          "1759: void",
          "",
          "[Removed Lines]",
          "1751:             this->obj_cache[og] =",
          "1756:     return this->obj_cache[og].object;",
          "",
          "[Added Lines]",
          "1769:             this->m->obj_cache[og] =",
          "1774:     return this->m->obj_cache[og].object;",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "1763:     QPDFObjectHandle obj_stream = getObjectByID(obj_stream_number, 0);",
          "1764:     if (! obj_stream.isStream())",
          "1765:     {",
          "1769:         \"supposed object stream \" +",
          "1770:         QUtil::int_to_string(obj_stream_number) +",
          "1771:         \" is not a stream\");",
          "",
          "[Removed Lines]",
          "1766:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1767:         this->last_object_description,",
          "1768:         this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "1784:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1785:         this->m->last_object_description,",
          "1786:         this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "1776:     QPDFObjGen stream_og(obj_stream_number, 0);",
          "1777:     qpdf_offset_t end_before_space =",
          "1779:     qpdf_offset_t end_after_space =",
          "1782:     QPDFObjectHandle dict = obj_stream.getDict();",
          "1783:     if (! (dict.getKey(\"/Type\").isName() &&",
          "1784:     dict.getKey(\"/Type\").getName() == \"/ObjStm\"))",
          "1785:     {",
          "1786:  QTC::TC(\"qpdf\", \"QPDF ERR object stream with wrong type\");",
          "1790:         \"supposed object stream \" +",
          "1791:         QUtil::int_to_string(obj_stream_number) +",
          "1792:         \" has wrong type\");",
          "",
          "[Removed Lines]",
          "1778:         this->obj_cache[stream_og].end_before_space;",
          "1780:         this->obj_cache[stream_og].end_after_space;",
          "1787:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1788:         this->last_object_description,",
          "1789:         this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "1796:         this->m->obj_cache[stream_og].end_before_space;",
          "1798:         this->m->obj_cache[stream_og].end_after_space;",
          "1805:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1806:         this->m->last_object_description,",
          "1807:         this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "1795:     if (! (dict.getKey(\"/N\").isInteger() &&",
          "1796:     dict.getKey(\"/First\").isInteger()))",
          "1797:     {",
          "1801:         \"object stream \" +",
          "1802:         QUtil::int_to_string(obj_stream_number) +",
          "1803:         \" has incorrect keys\");",
          "",
          "[Removed Lines]",
          "1798:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1799:         this->last_object_description,",
          "1800:         this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "1816:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1817:         this->m->last_object_description,",
          "1818:         this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "1821:         (toffset.getType() == QPDFTokenizer::tt_integer)))",
          "1822:  {",
          "1823:      throw QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1825:      \"expected integer in object stream header\");",
          "1826:  }",
          "",
          "[Removed Lines]",
          "1824:      this->last_object_description, input->getLastOffset(),",
          "",
          "[Added Lines]",
          "1842:      this->m->last_object_description,",
          "1843:                           input->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "1840:     {",
          "1841:  int obj = (*iter).first;",
          "1842:  QPDFObjGen og(obj, 0);",
          "1844:         if ((entry.getType() == 2) &&",
          "1845:             (entry.getObjStreamNumber() == obj_stream_number))",
          "1846:         {",
          "1847:             int offset = (*iter).second;",
          "1848:             input->seek(offset, SEEK_SET);",
          "1849:             QPDFObjectHandle oh = readObject(input, \"\", obj, 0, true);",
          "1851:                 ObjCache(QPDFObjectHandle::ObjAccessor::getObject(oh),",
          "1852:                          end_before_space, end_after_space);",
          "1853:         }",
          "",
          "[Removed Lines]",
          "1843:         QPDFXRefEntry const& entry = this->xref_table[og];",
          "1850:             this->obj_cache[og] =",
          "",
          "[Added Lines]",
          "1862:         QPDFXRefEntry const& entry = this->m->xref_table[og];",
          "1869:             this->m->obj_cache[og] =",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "1862: QPDF::makeIndirectObject(QPDFObjectHandle oh)",
          "1863: {",
          "1864:     QPDFObjGen o1(0, 0);",
          "1866:     {",
          "1868:     }",
          "1870:     QTC::TC(\"qpdf\", \"QPDF indirect last obj from xref\",",
          "1871:      (o2.getObj() > o1.getObj()) ? 1 : 0);",
          "1872:     int max_objid = std::max(o1.getObj(), o2.getObj());",
          "1873:     QPDFObjGen next(max_objid + 1, 0);",
          "1875:  ObjCache(QPDFObjectHandle::ObjAccessor::getObject(oh), -1, -1);",
          "1876:     return QPDFObjectHandle::Factory::newIndirect(",
          "1877:         this, next.getObj(), next.getGen());",
          "",
          "[Removed Lines]",
          "1865:     if (! this->obj_cache.empty())",
          "1867:  o1 = (*(this->obj_cache.rbegin())).first;",
          "1869:     QPDFObjGen o2 = (*(this->xref_table.rbegin())).first;",
          "1874:     this->obj_cache[next] =",
          "",
          "[Added Lines]",
          "1884:     if (! this->m->obj_cache.empty())",
          "1886:  o1 = (*(this->m->obj_cache.rbegin())).first;",
          "1888:     QPDFObjGen o2 = (*(this->m->xref_table.rbegin())).first;",
          "1893:     this->m->obj_cache[next] =",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "1912:     QPDFObjGen og(objid, generation);",
          "1914:  ObjCache(QPDFObjectHandle::ObjAccessor::getObject(oh), -1, -1);",
          "1915: }",
          "",
          "[Removed Lines]",
          "1913:     this->obj_cache[og] =",
          "",
          "[Added Lines]",
          "1932:     this->m->obj_cache[og] =",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "1946:             \"QPDF::copyForeign called with object from this QPDF\");",
          "1947:     }",
          "1950:     if (! obj_copier.visiting.empty())",
          "1951:     {",
          "1952:         throw std::logic_error(\"obj_copier.visiting is not empty\"",
          "",
          "[Removed Lines]",
          "1949:     ObjCopier& obj_copier = this->object_copiers[other];",
          "",
          "[Added Lines]",
          "1968:     ObjCopier& obj_copier = this->m->object_copiers[other];",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2016:             QTC::TC(\"qpdf\", \"QPDF loop reserving objects\");",
          "2017:             return;",
          "2018:         }",
          "2020:         {",
          "2021:             QTC::TC(\"qpdf\", \"QPDF already reserved object\");",
          "2022:             return;",
          "",
          "[Removed Lines]",
          "2019:         if (obj_copier.object_map.find(foreign_og) != obj_copier.object_map.end())",
          "",
          "[Added Lines]",
          "2038:         if (obj_copier.object_map.find(foreign_og) !=",
          "2039:             obj_copier.object_map.end())",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2139:                 replaceForeignIndirectObjects(",
          "2140:                     old_dict.getKey(*iter), obj_copier, false));",
          "2141:  }",
          "2143:         {",
          "2146:         }",
          "2147:         QPDFObjGen local_og(result.getObjGen());",
          "2149:             local_og, foreign);",
          "2151:                                  dict.getKey(\"/Filter\"),",
          "2152:                                  dict.getKey(\"/DecodeParms\"));",
          "2153:     }",
          "",
          "[Removed Lines]",
          "2142:         if (this->copied_stream_data_provider == 0)",
          "2144:             this->copied_stream_data_provider = new CopiedStreamDataProvider();",
          "2145:             this->copied_streams = this->copied_stream_data_provider;",
          "2148:         this->copied_stream_data_provider->registerForeignStream(",
          "2150:         result.replaceStreamData(this->copied_streams,",
          "",
          "[Added Lines]",
          "2162:         if (this->m->copied_stream_data_provider == 0)",
          "2164:             this->m->copied_stream_data_provider =",
          "2165:                 new CopiedStreamDataProvider();",
          "2166:             this->m->copied_streams = this->m->copied_stream_data_provider;",
          "2169:         this->m->copied_stream_data_provider->registerForeignStream(",
          "2171:         result.replaceStreamData(this->m->copied_streams,",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2181:     resolve(objid2, generation2);",
          "2182:     QPDFObjGen og1(objid1, generation1);",
          "2183:     QPDFObjGen og2(objid2, generation2);",
          "2187: }",
          "2189: std::string",
          "2190: QPDF::getFilename() const",
          "2191: {",
          "2193: }",
          "2195: std::string",
          "2196: QPDF::getPDFVersion() const",
          "2197: {",
          "2199: }",
          "2201: int",
          "",
          "[Removed Lines]",
          "2184:     ObjCache t = this->obj_cache[og1];",
          "2185:     this->obj_cache[og1] = this->obj_cache[og2];",
          "2186:     this->obj_cache[og2] = t;",
          "2192:     return this->file->getName();",
          "2198:     return this->pdf_version;",
          "",
          "[Added Lines]",
          "2205:     ObjCache t = this->m->obj_cache[og1];",
          "2206:     this->m->obj_cache[og1] = this->m->obj_cache[og2];",
          "2207:     this->m->obj_cache[og2] = t;",
          "2213:     return this->m->file->getName();",
          "2219:     return this->m->pdf_version;",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2225: QPDFObjectHandle",
          "2226: QPDF::getTrailer()",
          "2227: {",
          "2229: }",
          "2231: QPDFObjectHandle",
          "2232: QPDF::getRoot()",
          "2233: {",
          "2235:     if (! root.isDictionary())",
          "2236:     {",
          "2239:                       \"unable to find /Root dictionary\");",
          "2240:     }",
          "2241:     return root;",
          "",
          "[Removed Lines]",
          "2228:     return this->trailer;",
          "2234:     QPDFObjectHandle root = this->trailer.getKey(\"/Root\");",
          "2237:         throw QPDFExc(qpdf_e_damaged_pdf, file->getName(),",
          "2238:                       \"\", file->getLastOffset(),",
          "",
          "[Added Lines]",
          "2249:     return this->m->trailer;",
          "2255:     QPDFObjectHandle root = this->m->trailer.getKey(\"/Root\");",
          "2258:         throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "2259:                       \"\", this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2245: QPDF::getObjectStreamData(std::map<int, int>& omap)",
          "2246: {",
          "2247:     for (std::map<QPDFObjGen, QPDFXRefEntry>::iterator iter =",
          "2250:     {",
          "2251:  QPDFObjGen const& og = (*iter).first;",
          "2252:  QPDFXRefEntry const& entry = (*iter).second;",
          "",
          "[Removed Lines]",
          "2248:       this->xref_table.begin();",
          "2249:   iter != this->xref_table.end(); ++iter)",
          "",
          "[Added Lines]",
          "2269:       this->m->xref_table.begin();",
          "2270:   iter != this->m->xref_table.end(); ++iter)",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2274:     QPDFObjGen encryption_dict_og = encryption_dict.getObjGen();",
          "2276:     std::set<QPDFObjGen> visited;",
          "2277:     std::list<QPDFObjectHandle> queue;",
          "2279:     std::vector<QPDFObjGen> result;",
          "2280:     while (! queue.empty())",
          "2281:     {",
          "",
          "[Removed Lines]",
          "2273:     QPDFObjectHandle encryption_dict = trailer.getKey(\"/Encrypt\");",
          "2278:     queue.push_front(this->trailer);",
          "",
          "[Added Lines]",
          "2294:     QPDFObjectHandle encryption_dict =",
          "2295:         this->m->trailer.getKey(\"/Encrypt\");",
          "2300:     queue.push_front(this->m->trailer);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2353: {",
          "2354:     bool success = false;",
          "2355:     std::vector<PointerHolder<Pipeline> > to_delete;",
          "2357:     {",
          "2358:  decryptStream(pipeline, objid, generation, stream_dict, to_delete);",
          "2359:     }",
          "2361:     try",
          "2362:     {",
          "2364:  char buf[10240];",
          "2365:  while (length > 0)",
          "2366:  {",
          "2367:      size_t to_read = (sizeof(buf) < length ? sizeof(buf) : length);",
          "2369:      if (len == 0)",
          "2370:      {",
          "2371:   throw QPDFExc(qpdf_e_damaged_pdf,",
          "2375:          \"unexpected EOF reading stream data\");",
          "2376:      }",
          "2377:      length -= len;",
          "",
          "[Removed Lines]",
          "2356:     if (this->encrypted)",
          "2363:  this->file->seek(offset, SEEK_SET);",
          "2368:      size_t len = this->file->read(buf, to_read);",
          "2372:          this->file->getName(),",
          "2373:          this->last_object_description,",
          "2374:          this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "2378:     if (this->m->encrypted)",
          "2385:  this->m->file->seek(offset, SEEK_SET);",
          "2390:      size_t len = this->m->file->read(buf, to_read);",
          "2394:          this->m->file->getName(),",
          "2395:          this->m->last_object_description,",
          "2396:          this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2392:         if (! suppress_warnings)",
          "2393:         {",
          "2394:             QTC::TC(\"qpdf\", \"QPDF decoding error warning\");",
          "2397:                          \"error decoding stream data for object \" +",
          "2398:                          QUtil::int_to_string(objid) + \" \" +",
          "2399:                          QUtil::int_to_string(generation) + \": \" + e.what()));",
          "",
          "[Removed Lines]",
          "2395:             warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "2396:                          \"\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "2417:             warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "2418:                          \"\", this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2442:             item.getKey(\"/EF\").getKey(\"/F\").isStream())",
          "2443:         {",
          "2444:             QPDFObjectHandle stream = item.getKey(\"/EF\").getKey(\"/F\");",
          "2446:         }",
          "2447:     }",
          "2448: }",
          "",
          "[Removed Lines]",
          "2445:             this->attachment_streams.insert(stream.getObjGen());",
          "",
          "[Added Lines]",
          "2467:             this->m->attachment_streams.insert(stream.getObjGen());",
          "",
          "---------------"
        ],
        "libqpdf/QPDF_encryption.cc||libqpdf/QPDF_encryption.cc": [
          "File: libqpdf/QPDF_encryption.cc -> libqpdf/QPDF_encryption.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "760:     if (cf.isName())",
          "761:     {",
          "762:  std::string filter = cf.getName();",
          "764:  {",
          "766:  }",
          "767:  else if (filter == \"/Identity\")",
          "768:  {",
          "",
          "[Removed Lines]",
          "763:  if (this->crypt_filters.count(filter) != 0)",
          "765:      return this->crypt_filters[filter];",
          "",
          "[Added Lines]",
          "763:  if (this->m->crypt_filters.count(filter) != 0)",
          "765:      return this->m->crypt_filters[filter];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "783: void",
          "784: QPDF::initializeEncryption()",
          "785: {",
          "787:     {",
          "788:  return;",
          "789:     }",
          "798:     {",
          "799:  return;",
          "800:     }",
          "807:     std::string id1;",
          "809:     if ((id_obj.isArray() &&",
          "810:          (id_obj.getArrayNItems() == 2) &&",
          "811:          id_obj.getArrayItem(0).isString()))",
          "",
          "[Removed Lines]",
          "786:     if (this->encryption_initialized)",
          "790:     this->encryption_initialized = true;",
          "797:     if (! this->trailer.hasKey(\"/Encrypt\"))",
          "805:     this->encrypted = true;",
          "808:     QPDFObjectHandle id_obj = this->trailer.getKey(\"/ID\");",
          "",
          "[Added Lines]",
          "786:     if (this->m->encryption_initialized)",
          "790:     this->m->encryption_initialized = true;",
          "797:     if (! this->m->trailer.hasKey(\"/Encrypt\"))",
          "805:     this->m->encrypted = true;",
          "808:     QPDFObjectHandle id_obj = this->m->trailer.getKey(\"/ID\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "822:                      \"invalid /ID in trailer dictionary\"));",
          "823:     }",
          "826:     if (! encryption_dict.isDictionary())",
          "827:     {",
          "831:         \"/Encrypt in trailer dictionary is not a dictionary\");",
          "832:     }",
          "834:     if (! (encryption_dict.getKey(\"/Filter\").isName() &&",
          "835:     (encryption_dict.getKey(\"/Filter\").getName() == \"/Standard\")))",
          "836:     {",
          "839:         \"unsupported encryption filter\");",
          "840:     }",
          "841:     if (! encryption_dict.getKey(\"/SubFilter\").isNull())",
          "842:     {",
          "845:        \"file uses encryption SubFilters,\"",
          "846:        \" which qpdf does not support\"));",
          "847:     }",
          "",
          "[Removed Lines]",
          "820:  warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "821:                      \"trailer\", this->file->getLastOffset(),",
          "825:     QPDFObjectHandle encryption_dict = this->trailer.getKey(\"/Encrypt\");",
          "828:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "829:         this->last_object_description,",
          "830:         this->file->getLastOffset(),",
          "837:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "838:         \"encryption dictionary\", this->file->getLastOffset(),",
          "843:  warn(QPDFExc(qpdf_e_unsupported, this->file->getName(),",
          "844:        \"encryption dictionary\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "820:  warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "821:                      \"trailer\", this->m->file->getLastOffset(),",
          "825:     QPDFObjectHandle encryption_dict = this->m->trailer.getKey(\"/Encrypt\");",
          "828:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "829:         this->m->last_object_description,",
          "830:         this->m->file->getLastOffset(),",
          "837:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "838:         \"encryption dictionary\", this->m->file->getLastOffset(),",
          "843:  warn(QPDFExc(qpdf_e_unsupported, this->m->file->getName(),",
          "844:        \"encryption dictionary\", this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "852:     encryption_dict.getKey(\"/U\").isString() &&",
          "853:     encryption_dict.getKey(\"/P\").isInteger()))",
          "854:     {",
          "857:         \"some encryption dictionary parameters are missing \"",
          "858:         \"or the wrong type\");",
          "859:     }",
          "",
          "[Removed Lines]",
          "855:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "856:         \"encryption dictionary\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "855:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "856:         \"encryption dictionary\", this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "869:     if (! (((R >= 2) && (R <= 6)) &&",
          "870:     ((V == 1) || (V == 2) || (V == 4) || (V == 5))))",
          "871:     {",
          "874:         \"Unsupported /R or /V in encryption dictionary; R = \" +",
          "875:                       QUtil::int_to_string(R) + \" (max 6), V = \" +",
          "876:                       QUtil::int_to_string(V) + \" (max 5)\");",
          "877:     }",
          "883:     std::string OE;",
          "",
          "[Removed Lines]",
          "872:  throw QPDFExc(qpdf_e_unsupported, this->file->getName(),",
          "873:         \"encryption dictionary\", this->file->getLastOffset(),",
          "879:     this->encryption_V = V;",
          "880:     this->encryption_R = R;",
          "",
          "[Added Lines]",
          "872:  throw QPDFExc(qpdf_e_unsupported, this->m->file->getName(),",
          "873:         \"encryption dictionary\", this->m->file->getLastOffset(),",
          "879:     this->m->encryption_V = V;",
          "880:     this->m->encryption_R = R;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "890:         pad_short_parameter(U, key_bytes);",
          "891:         if (! ((O.length() == key_bytes) && (U.length() == key_bytes)))",
          "892:         {",
          "895:                           \"incorrect length for /O and/or /U in \"",
          "896:                           \"encryption dictionary\");",
          "897:         }",
          "",
          "[Removed Lines]",
          "893:             throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "894:                           \"encryption dictionary\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "893:             throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "894:                           \"encryption dictionary\",",
          "895:                           this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "902:                encryption_dict.getKey(\"/UE\").isString() &&",
          "903:                encryption_dict.getKey(\"/Perms\").isString()))",
          "904:         {",
          "907:                           \"some V=5 encryption dictionary parameters are \"",
          "908:                           \"missing or the wrong type\");",
          "909:         }",
          "",
          "[Removed Lines]",
          "905:             throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "906:                           \"encryption dictionary\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "906:             throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "907:                           \"encryption dictionary\",",
          "908:                           this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "922:             (UE.length() < OUE_key_bytes_V5) ||",
          "923:             (Perms.length() < Perms_key_bytes_V5))",
          "924:         {",
          "927:                           \"incorrect length for some of\"",
          "928:                           \" /O, /U, /OE, /UE, or /Perms in\"",
          "929:                           \" encryption dictionary\");",
          "",
          "[Removed Lines]",
          "925:             throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "926:                           \"encryption dictionary\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "927:             throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "928:                           \"encryption dictionary\",",
          "929:                           this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "936:  Length = encryption_dict.getKey(\"/Length\").getIntValue();",
          "937:  if ((Length % 8) || (Length < 40) || (Length > 256))",
          "938:  {",
          "941:      \"invalid /Length value in encryption dictionary\");",
          "942:  }",
          "943:     }",
          "946:     if ((V >= 4) && (encryption_dict.getKey(\"/EncryptMetadata\").isBool()))",
          "947:     {",
          "949:      encryption_dict.getKey(\"/EncryptMetadata\").getBoolValue();",
          "950:     }",
          "",
          "[Removed Lines]",
          "939:      throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "940:      \"encryption dictionary\", this->file->getLastOffset(),",
          "945:     this->encrypt_metadata = true;",
          "948:  this->encrypt_metadata =",
          "",
          "[Added Lines]",
          "942:      throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "943:      \"encryption dictionary\",",
          "944:                           this->m->file->getLastOffset(),",
          "949:     this->m->encrypt_metadata = true;",
          "952:  this->m->encrypt_metadata =",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "986:    method = e_unknown;",
          "987:       }",
          "988:   }",
          "990:      }",
          "991:  }",
          "993:  QPDFObjectHandle StmF = encryption_dict.getKey(\"/StmF\");",
          "994:  QPDFObjectHandle StrF = encryption_dict.getKey(\"/StrF\");",
          "995:  QPDFObjectHandle EFF = encryption_dict.getKey(\"/EFF\");",
          "998:  if (EFF.isName())",
          "999:  {",
          "1001:  }",
          "1002:  else",
          "1003:  {",
          "1005:  }",
          "1006:     }",
          "1008:     EncryptionData data(V, R, Length / 8, P, O, U, OE, UE, Perms,",
          "1010:     if (check_owner_password(",
          "1012:     {",
          "1015:     }",
          "1017:     {",
          "1019:     }",
          "1020:     else",
          "1021:     {",
          "1023:         \"\", 0, \"invalid password\");",
          "1024:     }",
          "",
          "[Removed Lines]",
          "989:   this->crypt_filters[filter] = method;",
          "996:  this->cf_stream = interpretCF(StmF);",
          "997:  this->cf_string = interpretCF(StrF);",
          "1000:      this->cf_file = interpretCF(EFF);",
          "1004:      this->cf_file = this->cf_stream;",
          "1009:                         id1, this->encrypt_metadata);",
          "1011:      this->user_password, this->provided_password, data))",
          "1016:     else if (check_user_password(this->provided_password, data))",
          "1018:  this->user_password = this->provided_password;",
          "1022:  throw QPDFExc(qpdf_e_password, this->file->getName(),",
          "",
          "[Added Lines]",
          "993:   this->m->crypt_filters[filter] = method;",
          "1000:  this->m->cf_stream = interpretCF(StmF);",
          "1001:  this->m->cf_string = interpretCF(StrF);",
          "1004:      this->m->cf_file = interpretCF(EFF);",
          "1008:      this->m->cf_file = this->m->cf_stream;",
          "1013:                         id1, this->m->encrypt_metadata);",
          "1015:      this->m->user_password, this->m->provided_password, data))",
          "1020:     else if (check_user_password(this->m->provided_password, data))",
          "1022:  this->m->user_password = this->m->provided_password;",
          "1026:  throw QPDFExc(qpdf_e_password, this->m->file->getName(),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1033:     }",
          "1034:     else",
          "1035:     {",
          "",
          "[Removed Lines]",
          "1031:         this->encryption_key = compute_encryption_key(",
          "1032:             this->user_password, data);",
          "",
          "[Added Lines]",
          "1035:         this->m->encryption_key = compute_encryption_key(",
          "1036:             this->m->user_password, data);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1039:         bool perms_valid;",
          "1042:         if (! perms_valid)",
          "1043:         {",
          "1046:                          \"/Perms field in encryption dictionary\"",
          "1047:                          \" doesn't match expected value\"));",
          "1048:         }",
          "",
          "[Removed Lines]",
          "1040:         this->encryption_key = recover_encryption_key_with_password(",
          "1041:             this->provided_password, data, perms_valid);",
          "1044:             warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1045:                          \"encryption dictionary\", this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "1044:         this->m->encryption_key = recover_encryption_key_with_password(",
          "1045:             this->m->provided_password, data, perms_valid);",
          "1048:             warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1049:                          \"encryption dictionary\",",
          "1050:                          this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1052: std::string",
          "1053: QPDF::getKeyForObject(int objid, int generation, bool use_aes)",
          "1054: {",
          "1056:     {",
          "1057:  throw std::logic_error(",
          "1058:      \"request for encryption key in non-encrypted PDF\");",
          "1059:     }",
          "1063:     {",
          "1069:     }",
          "1072: }",
          "1074: void",
          "",
          "[Removed Lines]",
          "1055:     if (! this->encrypted)",
          "1061:     if (! ((objid == this->cached_key_objid) &&",
          "1062:     (generation == this->cached_key_generation)))",
          "1064:  this->cached_object_encryption_key =",
          "1065:      compute_data_key(this->encryption_key, objid, generation,",
          "1066:                              use_aes, this->encryption_V, this->encryption_R);",
          "1067:  this->cached_key_objid = objid;",
          "1068:  this->cached_key_generation = generation;",
          "1071:     return this->cached_object_encryption_key;",
          "",
          "[Added Lines]",
          "1060:     if (! this->m->encrypted)",
          "1066:     if (! ((objid == this->m->cached_key_objid) &&",
          "1067:     (generation == this->m->cached_key_generation)))",
          "1069:  this->m->cached_object_encryption_key =",
          "1070:      compute_data_key(this->m->encryption_key, objid, generation,",
          "1071:                              use_aes, this->m->encryption_V,",
          "1072:                              this->m->encryption_R);",
          "1073:  this->m->cached_key_objid = objid;",
          "1074:  this->m->cached_key_generation = generation;",
          "1077:     return this->m->cached_object_encryption_key;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1079:  return;",
          "1080:     }",
          "1081:     bool use_aes = false;",
          "1083:     {",
          "1085:  {",
          "1086:    case e_none:",
          "1087:      return;",
          "",
          "[Removed Lines]",
          "1082:     if (this->encryption_V >= 4)",
          "1084:  switch (this->cf_string)",
          "",
          "[Added Lines]",
          "1088:     if (this->m->encryption_V >= 4)",
          "1090:  switch (this->m->cf_string)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1098:      break;",
          "1100:    default:",
          "1104:     \"unknown encryption filter for strings\"",
          "1105:     \" (check /StrF in /Encrypt dictionary);\"",
          "1106:     \" strings may be decrypted improperly\"));",
          "1110:      break;",
          "1111:  }",
          "1112:     }",
          "",
          "[Removed Lines]",
          "1101:      warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1102:     this->last_object_description,",
          "1103:     this->file->getLastOffset(),",
          "1109:      this->cf_string = e_aes;",
          "",
          "[Added Lines]",
          "1107:      warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1108:     this->m->last_object_description,",
          "1109:     this->m->file->getLastOffset(),",
          "1115:      this->m->cf_string = e_aes;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1145:     }",
          "1146:     catch (std::runtime_error& e)",
          "1147:     {",
          "1151:         \"error decrypting string for object \" +",
          "1152:         QUtil::int_to_string(objid) + \" \" +",
          "1153:         QUtil::int_to_string(generation) + \": \" + e.what());",
          "",
          "[Removed Lines]",
          "1148:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1149:         this->last_object_description,",
          "1150:         this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "1154:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1155:         this->m->last_object_description,",
          "1156:         this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1170:  return;",
          "1171:     }",
          "1172:     bool use_aes = false;",
          "1174:     {",
          "1175:  encryption_method_e method = e_unknown;",
          "1176:  std::string method_source = \"/StmF from /Encrypt dictionary\";",
          "",
          "[Removed Lines]",
          "1173:     if (this->encryption_V >= 4)",
          "",
          "[Added Lines]",
          "1179:     if (this->m->encryption_V >= 4)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1222:  if (method == e_unknown)",
          "1223:  {",
          "1225:      {",
          "1226:   QTC::TC(\"qpdf\", \"QPDF_encryption cleartext metadata\");",
          "1227:   method = e_none;",
          "1228:      }",
          "1229:      else",
          "1230:      {",
          "1232:                         QPDFObjGen(objid, generation)) > 0)",
          "1233:                 {",
          "1235:                 }",
          "1236:                 else",
          "1237:                 {",
          "1239:                 }",
          "1240:      }",
          "1241:  }",
          "",
          "[Removed Lines]",
          "1224:      if ((! this->encrypt_metadata) && (type == \"/Metadata\"))",
          "1231:                 if (this->attachment_streams.count(",
          "1234:                     method = this->cf_file;",
          "1238:                     method = this->cf_stream;",
          "",
          "[Added Lines]",
          "1230:      if ((! this->m->encrypt_metadata) && (type == \"/Metadata\"))",
          "1237:                 if (this->m->attachment_streams.count(",
          "1240:                     method = this->m->cf_file;",
          "1244:                     method = this->m->cf_stream;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1260:    default:",
          "1265:     \"unknown encryption filter for streams\"",
          "1266:     \" (check \" + method_source + \");\"",
          "1267:     \" streams may be decrypted improperly\"));",
          "1271:      break;",
          "1272:  }",
          "1273:     }",
          "",
          "[Removed Lines]",
          "1262:      warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "1263:     this->last_object_description,",
          "1264:     this->file->getLastOffset(),",
          "1270:      this->cf_stream = e_aes;",
          "",
          "[Added Lines]",
          "1268:      warn(QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "1269:     this->m->last_object_description,",
          "1270:     this->m->file->getLastOffset(),",
          "1276:      this->m->cf_stream = e_aes;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1331: std::string const&",
          "1332: QPDF::getPaddedUserPassword() const",
          "1333: {",
          "1335: }",
          "1337: std::string",
          "1338: QPDF::getTrimmedUserPassword() const",
          "1339: {",
          "1341:     trim_user_password(result);",
          "1342:     return result;",
          "1343: }",
          "",
          "[Removed Lines]",
          "1334:     return this->user_password;",
          "1340:     std::string result = this->user_password;",
          "",
          "[Added Lines]",
          "1340:     return this->m->user_password;",
          "1346:     std::string result = this->m->user_password;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1345: std::string",
          "1346: QPDF::getEncryptionKey() const",
          "1347: {",
          "1349: }",
          "1351: bool",
          "1352: QPDF::isEncrypted() const",
          "1353: {",
          "1355: }",
          "1357: bool",
          "",
          "[Removed Lines]",
          "1348:     return this->encryption_key;",
          "1354:     return this->encrypted;",
          "",
          "[Added Lines]",
          "1354:     return this->m->encryption_key;",
          "1360:     return this->m->encrypted;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1368:                   encryption_method_e& string_method,",
          "1369:                   encryption_method_e& file_method)",
          "1370: {",
          "1372:     {",
          "1373:  QPDFObjectHandle trailer = getTrailer();",
          "1374:  QPDFObjectHandle encrypt = trailer.getKey(\"/Encrypt\");",
          "",
          "[Removed Lines]",
          "1371:     if (this->encrypted)",
          "",
          "[Added Lines]",
          "1377:     if (this->m->encrypted)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1378:  P = Pkey.getIntValue();",
          "1379:  R = Rkey.getIntValue();",
          "1380:         V = Vkey.getIntValue();",
          "1384:  return true;",
          "1385:     }",
          "1386:     else",
          "",
          "[Removed Lines]",
          "1381:         stream_method = this->cf_stream;",
          "1382:         string_method = this->cf_stream;",
          "1383:         file_method = this->cf_file;",
          "",
          "[Added Lines]",
          "1387:         stream_method = this->m->cf_stream;",
          "1388:         string_method = this->m->cf_stream;",
          "1389:         file_method = this->m->cf_file;",
          "",
          "---------------"
        ],
        "libqpdf/QPDF_linearization.cc||libqpdf/QPDF_linearization.cc": [
          "File: libqpdf/QPDF_linearization.cc -> libqpdf/QPDF_linearization.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     static int const tbuf_size = 1025;",
          "97:     char* buf = new char[tbuf_size];",
          "99:     PointerHolder<char> b(true, buf);",
          "100:     memset(buf, '\\0', tbuf_size);",
          "103:     int lindict_obj = -1;",
          "104:     char* p = buf;",
          "",
          "[Removed Lines]",
          "98:     this->file->seek(0, SEEK_SET);",
          "101:     this->file->read(buf, tbuf_size - 1);",
          "",
          "[Added Lines]",
          "98:     this->m->file->seek(0, SEEK_SET);",
          "101:     this->m->file->read(buf, tbuf_size - 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:         }",
          "119:         while (((p - buf) < tbuf_size) && QUtil::is_digit(*p))",
          "120:         {",
          "121:             ++p;",
          "122:         }",
          "128:         if ((t1.getType() == QPDFTokenizer::tt_integer) &&",
          "129:             (t2.getType() == QPDFTokenizer::tt_integer) &&",
          "130:             (t3 == QPDFTokenizer::Token(QPDFTokenizer::tt_word, \"obj\")) &&",
          "",
          "[Removed Lines]",
          "118:         this->file->seek(p - buf, SEEK_SET);",
          "124:         QPDFTokenizer::Token t1 = readToken(this->file, true);",
          "125:         QPDFTokenizer::Token t2 = readToken(this->file, true);",
          "126:         QPDFTokenizer::Token t3 = readToken(this->file, true);",
          "127:         QPDFTokenizer::Token t4 = readToken(this->file, true);",
          "",
          "[Added Lines]",
          "118:         this->m->file->seek(p - buf, SEEK_SET);",
          "124:         QPDFTokenizer::Token t1 = readToken(this->m->file, true);",
          "125:         QPDFTokenizer::Token t2 = readToken(this->m->file, true);",
          "126:         QPDFTokenizer::Token t3 = readToken(this->m->file, true);",
          "127:         QPDFTokenizer::Token t4 = readToken(this->m->file, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:     if (L.isInteger())",
          "159:     {",
          "160:  qpdf_offset_t Li = L.getIntValue();",
          "163:  {",
          "164:      QTC::TC(\"qpdf\", \"QPDF /L mismatch\");",
          "165:      return false;",
          "166:  }",
          "167:  else",
          "168:  {",
          "170:  }",
          "171:     }",
          "175:     return true;",
          "176: }",
          "",
          "[Removed Lines]",
          "161:  this->file->seek(0, SEEK_END);",
          "162:  if (Li != this->file->tell())",
          "169:      this->linp.file_size = Li;",
          "173:     this->lindict = candidate;",
          "",
          "[Added Lines]",
          "161:  this->m->file->seek(0, SEEK_END);",
          "162:  if (Li != this->m->file->tell())",
          "169:      this->m->linp.file_size = Li;",
          "173:     this->m->lindict = candidate;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:     }",
          "201:     if (! (H.isArray() &&",
          "202:     O.isInteger() &&",
          "",
          "[Removed Lines]",
          "194:     QPDFObjectHandle H = lindict.getKey(\"/H\");",
          "195:     QPDFObjectHandle O = lindict.getKey(\"/O\");",
          "196:     QPDFObjectHandle E = lindict.getKey(\"/E\");",
          "197:     QPDFObjectHandle N = lindict.getKey(\"/N\");",
          "198:     QPDFObjectHandle T = lindict.getKey(\"/T\");",
          "199:     QPDFObjectHandle P = lindict.getKey(\"/P\");",
          "",
          "[Added Lines]",
          "194:     QPDFObjectHandle H = this->m->lindict.getKey(\"/H\");",
          "195:     QPDFObjectHandle O = this->m->lindict.getKey(\"/O\");",
          "196:     QPDFObjectHandle E = this->m->lindict.getKey(\"/E\");",
          "197:     QPDFObjectHandle N = this->m->lindict.getKey(\"/N\");",
          "198:     QPDFObjectHandle T = this->m->lindict.getKey(\"/T\");",
          "199:     QPDFObjectHandle P = this->m->lindict.getKey(\"/P\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "205:     T.isInteger() &&",
          "206:     (P.isInteger() || P.isNull())))",
          "207:     {",
          "209:         \"linearization dictionary\",",
          "211:         \"some keys in linearization dictionary are of \"",
          "212:         \"the wrong type\");",
          "213:     }",
          "",
          "[Removed Lines]",
          "208:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "210:         this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "208:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "210:         this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "216:     unsigned int n_H_items = H.getArrayNItems();",
          "217:     if (! ((n_H_items == 2) || (n_H_items == 4)))",
          "218:     {",
          "220:         \"linearization dictionary\",",
          "222:         \"H has the wrong number of items\");",
          "223:     }",
          "",
          "[Removed Lines]",
          "219:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "221:         this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "219:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "221:         this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "232:  }",
          "233:  else",
          "234:  {",
          "236:      \"linearization dictionary\",",
          "238:      \"some H items are of the wrong type\");",
          "239:  }",
          "240:     }",
          "",
          "[Removed Lines]",
          "235:      throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "237:      this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "235:      throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "237:      this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "273:     if (N.getIntValue() != static_cast<long long>(getAllPages().size()))",
          "274:     {",
          "276:                       \"linearization hint table\",",
          "278:                       \"/N does not match number of pages\");",
          "279:     }",
          "",
          "[Removed Lines]",
          "275:         throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "277:                       this->file->getLastOffset(),",
          "282:     this->linp.first_page_object = O.getIntValue();",
          "283:     this->linp.first_page_end = E.getIntValue();",
          "284:     this->linp.npages = N.getIntValue();",
          "285:     this->linp.xref_zero_offset = T.getIntValue();",
          "286:     this->linp.first_page = first_page;",
          "287:     this->linp.H_offset = H0_offset;",
          "288:     this->linp.H_length = H0_length;",
          "",
          "[Added Lines]",
          "275:         throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "277:                       this->m->file->getLastOffset(),",
          "282:     this->m->linp.first_page_object = O.getIntValue();",
          "283:     this->m->linp.first_page_end = E.getIntValue();",
          "284:     this->m->linp.npages = N.getIntValue();",
          "285:     this->m->linp.xref_zero_offset = T.getIntValue();",
          "286:     this->m->linp.first_page = first_page;",
          "287:     this->m->linp.H_offset = H0_offset;",
          "288:     this->m->linp.H_length = H0_length;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "320:     int HSi = HS.getIntValue();",
          "321:     if ((HSi < 0) || (HSi >= h_size))",
          "322:     {",
          "324:                       \"linearization hint table\",",
          "326:                       \"/S (shared object) offset is out of bounds\");",
          "327:     }",
          "328:     readHSharedObject(BitStream(h_buf + HSi, h_size - HSi));",
          "",
          "[Removed Lines]",
          "323:         throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "325:                       this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "323:         throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "325:                       this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "332:  int HOi = HO.getIntValue();",
          "333:         if ((HOi < 0) || (HOi >= h_size))",
          "334:         {",
          "336:                           \"linearization hint table\",",
          "338:                           \"/O (outline) offset is out of bounds\");",
          "339:         }",
          "340:  readHGeneric(BitStream(h_buf + HOi, h_size - HOi),",
          "342:     }",
          "343: }",
          "",
          "[Removed Lines]",
          "335:             throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "337:                           this->file->getLastOffset(),",
          "341:        this->outline_hints);",
          "",
          "[Added Lines]",
          "335:             throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "337:                           this->m->file->getLastOffset(),",
          "341:        this->m->outline_hints);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "349:     int gen;",
          "350:     QPDFObjectHandle H = readObjectAtOffset(",
          "351:  false, offset, \"linearization hint stream\", -1, 0, obj, gen);",
          "353:     qpdf_offset_t min_end_offset = oc.end_before_space;",
          "354:     qpdf_offset_t max_end_offset = oc.end_after_space;",
          "355:     if (! H.isStream())",
          "356:     {",
          "358:         \"linearization dictionary\",",
          "360:         \"hint table is not a stream\");",
          "361:     }",
          "",
          "[Removed Lines]",
          "352:     ObjCache& oc = this->obj_cache[QPDFObjGen(obj, gen)];",
          "357:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "359:         this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "352:     ObjCache& oc = this->m->obj_cache[QPDFObjGen(obj, gen)];",
          "357:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "359:         this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "373:  QTC::TC(\"qpdf\", \"QPDF hint table length indirect\");",
          "375:  (void) length_obj.getIntValue();",
          "377:  min_end_offset = oc.end_before_space;",
          "378:  max_end_offset = oc.end_after_space;",
          "379:     }",
          "",
          "[Removed Lines]",
          "376:  ObjCache& oc = this->obj_cache[length_obj.getObjGen()];",
          "",
          "[Added Lines]",
          "376:  ObjCache& oc = this->m->obj_cache[length_obj.getObjGen()];",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "385:     if ((computed_end < min_end_offset) ||",
          "386:  (computed_end > max_end_offset))",
          "387:     {",
          "392:         \"linearization dictionary\",",
          "394:         \"hint table length mismatch\");",
          "395:     }",
          "396:     H.pipeStreamData(&pl, 0, qpdf_dl_specialized);",
          "",
          "[Removed Lines]",
          "389:       << \"; actual = \" << min_end_offset << \"..\"",
          "390:       << max_end_offset << std::endl;",
          "391:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "393:         this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "389:                              << \"; actual = \" << min_end_offset << \"..\"",
          "390:                              << max_end_offset << std::endl;",
          "391:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "393:         this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "408:     t.min_nobjects = h.getBits(32);         // 1",
          "409:     t.first_page_offset = h.getBits(32);      // 2",
          "",
          "[Removed Lines]",
          "406:     HPageOffset& t = this->page_offset_hints;",
          "",
          "[Added Lines]",
          "406:     HPageOffset& t = this->m->page_offset_hints;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "422:     std::vector<HPageOffsetEntry>& entries = t.entries;",
          "423:     entries.clear();",
          "425:     load_vector_int(h, nitems, entries,",
          "426:       t.nbits_delta_nobjects,",
          "427:       &HPageOffsetEntry::delta_nobjects);",
          "",
          "[Removed Lines]",
          "424:     unsigned int nitems = this->linp.npages;",
          "",
          "[Added Lines]",
          "424:     unsigned int nitems = this->m->linp.npages;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "450: void",
          "451: QPDF::readHSharedObject(BitStream h)",
          "452: {",
          "455:     t.first_shared_obj = h.getBits(32);       // 1",
          "456:     t.first_shared_offset = h.getBits(32);      // 2",
          "",
          "[Removed Lines]",
          "453:     HSharedObject& t = this->shared_object_hints;",
          "",
          "[Added Lines]",
          "453:     HSharedObject& t = this->m->shared_object_hints;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "512:     LinParameters& p = this->linp;",
          "",
          "[Added Lines]",
          "512:     LinParameters& p = this->m->linp;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "533:     {",
          "534:  QPDFObjectHandle const& page = pages.at(i);",
          "535:  QPDFObjGen og(page.getObjGen());",
          "537:  {",
          "538:      errors.push_back(\"page dictionary for page \" +",
          "539:         QUtil::int_to_string(i) + \" is compressed\");",
          "",
          "[Removed Lines]",
          "536:  if (this->xref_table[og].getType() == 2)",
          "",
          "[Added Lines]",
          "536:  if (this->m->xref_table[og].getType() == 2)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "541:     }",
          "545:     while (1)",
          "546:     {",
          "547:  char ch;",
          "549:  if (! ((ch == ' ') || (ch == '\\r') || (ch == '\\n')))",
          "550:  {",
          "552:      break;",
          "553:  }",
          "554:     }",
          "556:     {",
          "557:  QTC::TC(\"qpdf\", \"QPDF err /T mismatch\");",
          "558:  errors.push_back(\"space before first xref item (/T) mismatch \"",
          "559:     \"(computed = \" +",
          "561:     \"; file = \" +",
          "563:     }",
          "",
          "[Removed Lines]",
          "544:     this->file->seek(p.xref_zero_offset, SEEK_SET);",
          "548:  this->file->read(&ch, 1);",
          "551:      this->file->seek(-1, SEEK_CUR);",
          "555:     if (this->file->tell() != this->first_xref_item_offset)",
          "560:     QUtil::int_to_string(this->first_xref_item_offset) +",
          "562:     QUtil::int_to_string(this->file->tell()));",
          "",
          "[Added Lines]",
          "544:     this->m->file->seek(p.xref_zero_offset, SEEK_SET);",
          "548:  this->m->file->read(&ch, 1);",
          "551:      this->m->file->seek(-1, SEEK_CUR);",
          "555:     if (this->m->file->tell() != this->m->first_xref_item_offset)",
          "560:     QUtil::int_to_string(this->m->first_xref_item_offset) +",
          "562:     QUtil::int_to_string(this->m->file->tell()));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "574:     {",
          "575:  errors.push_back(\"linearized file contains an uncompressed object\"",
          "576:     \" after a compressed one in a cross-reference stream\");",
          "",
          "[Removed Lines]",
          "573:     if (this->uncompressed_after_compressed)",
          "",
          "[Added Lines]",
          "573:     if (this->m->uncompressed_after_compressed)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "584:     { // local scope",
          "585:  std::map<int, int> object_stream_data;",
          "586:  for (std::map<QPDFObjGen, QPDFXRefEntry>::const_iterator iter =",
          "589:  {",
          "590:      QPDFObjGen const& og = (*iter).first;",
          "591:      QPDFXRefEntry const& entry = (*iter).second;",
          "",
          "[Removed Lines]",
          "587:    this->xref_table.begin();",
          "588:       iter != this->xref_table.end(); ++iter)",
          "",
          "[Added Lines]",
          "587:    this->m->xref_table.begin();",
          "588:       iter != this->m->xref_table.end(); ++iter)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "613:     {",
          "614:         throw std::logic_error(\"linearization part 6 unexpectedly empty\");",
          "615:     }",
          "616:     qpdf_offset_t min_E = -1;",
          "617:     qpdf_offset_t max_E = -1;",
          "620:     {",
          "621:  QPDFObjGen og((*iter).getObjGen());",
          "623:         {",
          "625:             throw std::logic_error(\"linearization part6 object not in cache\");",
          "626:         }",
          "628:  min_E = std::max(min_E, oc.end_before_space);",
          "629:  max_E = std::max(max_E, oc.end_after_space);",
          "630:     }",
          "",
          "[Removed Lines]",
          "612:     if (this->part6.empty())",
          "618:     for (std::vector<QPDFObjectHandle>::iterator iter = this->part6.begin();",
          "619:   iter != this->part6.end(); ++iter)",
          "622:  if (this->obj_cache.count(og) == 0)",
          "627:  ObjCache const& oc = this->obj_cache[og];",
          "",
          "[Added Lines]",
          "612:     if (this->m->part6.empty())",
          "618:     for (std::vector<QPDFObjectHandle>::iterator iter = this->m->part6.begin();",
          "619:   iter != this->m->part6.end(); ++iter)",
          "622:  if (this->m->obj_cache.count(og) == 0)",
          "627:  ObjCache const& oc = this->m->obj_cache[og];",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "675: qpdf_offset_t",
          "676: QPDF::maxEnd(ObjUser const& ou)",
          "677: {",
          "680:     qpdf_offset_t end = 0;",
          "681:     for (std::set<QPDFObjGen>::const_iterator iter = ogs.begin();",
          "682:   iter != ogs.end(); ++iter)",
          "683:     {",
          "684:  QPDFObjGen const& og = *iter;",
          "687:     }",
          "688:     return end;",
          "689: }",
          "",
          "[Removed Lines]",
          "678:     assert(this->obj_user_to_objects.count(ou) > 0);",
          "679:     std::set<QPDFObjGen> const& ogs = this->obj_user_to_objects[ou];",
          "685:  assert(this->obj_cache.count(og) > 0);",
          "686:  end = std::max(end, this->obj_cache[og].end_after_space);",
          "",
          "[Added Lines]",
          "678:     assert(this->m->obj_user_to_objects.count(ou) > 0);",
          "679:     std::set<QPDFObjGen> const& ogs = this->m->obj_user_to_objects[ou];",
          "685:  assert(this->m->obj_cache.count(og) > 0);",
          "686:  end = std::max(end, this->m->obj_cache[og].end_after_space);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "691: qpdf_offset_t",
          "692: QPDF::getLinearizationOffset(QPDFObjGen const& og)",
          "693: {",
          "695:     qpdf_offset_t result = 0;",
          "696:     switch (entry.getType())",
          "697:     {",
          "",
          "[Removed Lines]",
          "694:     QPDFXRefEntry entry = this->xref_table[og];",
          "",
          "[Added Lines]",
          "694:     QPDFXRefEntry entry = this->m->xref_table[og];",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "737:     for (int i = 0; i < n; ++i)",
          "738:     {",
          "739:  QPDFObjGen og(first_object + i, 0);",
          "741:  {",
          "742:      errors.push_back(",
          "743:   \"no xref table entry for \" +",
          "",
          "[Removed Lines]",
          "740:  if (this->xref_table.count(og) == 0)",
          "",
          "[Added Lines]",
          "740:  if (this->m->xref_table.count(og) == 0)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "745:  }",
          "746:  else",
          "747:  {",
          "750:   getLinearizationOffset(og);",
          "751:  }",
          "752:     }",
          "",
          "[Removed Lines]",
          "748:      assert(this->obj_cache.count(og) > 0);",
          "749:      length += this->obj_cache[og].end_after_space -",
          "",
          "[Added Lines]",
          "748:      assert(this->m->obj_cache.count(og) > 0);",
          "749:      length += this->m->obj_cache[og].end_after_space -",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "779:     unsigned int npages = pages.size();",
          "780:     int table_offset = adjusted_offset(",
          "782:     QPDFObjGen first_page_og(pages.at(0).getObjGen());",
          "784:     int offset = getLinearizationOffset(first_page_og);",
          "785:     if (table_offset != offset)",
          "786:     {",
          "",
          "[Removed Lines]",
          "781:  this->page_offset_hints.first_page_offset);",
          "783:     assert(this->xref_table.count(first_page_og) > 0);",
          "",
          "[Added Lines]",
          "781:  this->m->page_offset_hints.first_page_offset);",
          "783:     assert(this->m->xref_table.count(first_page_og) > 0);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "791:     {",
          "792:  QPDFObjGen page_og(pages.at(pageno).getObjGen());",
          "793:  int first_object = page_og.getObj();",
          "795:  offset = getLinearizationOffset(page_og);",
          "799:  int h_nobjects = he.delta_nobjects +",
          "801:  if (h_nobjects != ce.nobjects)",
          "802:  {",
          "",
          "[Removed Lines]",
          "794:  assert(this->xref_table.count(page_og) > 0);",
          "797:  HPageOffsetEntry& he = this->page_offset_hints.entries.at(pageno);",
          "798:  CHPageOffsetEntry& ce = this->c_page_offset_data.entries.at(pageno);",
          "800:      this->page_offset_hints.min_nobjects;",
          "",
          "[Added Lines]",
          "794:  assert(this->m->xref_table.count(page_og) > 0);",
          "797:  HPageOffsetEntry& he = this->m->page_offset_hints.entries.at(pageno);",
          "798:  CHPageOffsetEntry& ce = this->m->c_page_offset_data.entries.at(pageno);",
          "800:      this->m->page_offset_hints.min_nobjects;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "813:  int length = lengthNextN(first_object, h_nobjects, errors);",
          "814:  int h_length = he.delta_page_length +",
          "816:  if (length != h_length)",
          "817:  {",
          "",
          "[Removed Lines]",
          "815:      this->page_offset_hints.min_page_length;",
          "",
          "[Added Lines]",
          "815:      this->m->page_offset_hints.min_page_length;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "853:  for (int i = 0; i < ce.nshared_objects; ++i)",
          "854:  {",
          "855:      int idx = ce.shared_identifiers.at(i);",
          "857:             {",
          "858:                 throw std::logic_error(",
          "859:                     \"index out of bounds for shared object hint table\");",
          "860:             }",
          "862:      computed_shared.insert(obj);",
          "863:  }",
          "",
          "[Removed Lines]",
          "856:      if (idx >= this->c_shared_object_data.nshared_total)",
          "861:      int obj = this->c_shared_object_data.entries.at(idx).object;",
          "",
          "[Added Lines]",
          "856:      if (idx >= this->m->c_shared_object_data.nshared_total)",
          "861:      int obj = this->m->c_shared_object_data.entries.at(idx).object;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "920:     if (so.nshared_total < so.nshared_first_page)",
          "921:     {",
          "922:  errors.push_back(\"shared object hint table: ntotal < nfirst_page\");",
          "",
          "[Removed Lines]",
          "919:     HSharedObject& so = this->shared_object_hints;",
          "",
          "[Added Lines]",
          "919:     HSharedObject& so = this->m->shared_object_hints;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "932:      if (i == so.nshared_first_page)",
          "933:      {",
          "934:   QTC::TC(\"qpdf\", \"QPDF lin check shared past first page\");",
          "936:   {",
          "937:       errors.push_back(",
          "938:    \"part 8 is empty but nshared_total > \"",
          "",
          "[Removed Lines]",
          "935:   if (this->part8.empty())",
          "",
          "[Added Lines]",
          "935:   if (this->m->part8.empty())",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "940:   }",
          "941:   else",
          "942:   {",
          "944:       if (obj != so.first_shared_obj)",
          "945:       {",
          "946:    errors.push_back(",
          "",
          "[Removed Lines]",
          "943:       int obj = this->part8.at(0).getObjectID();",
          "",
          "[Added Lines]",
          "943:       int obj = this->m->part8.at(0).getObjectID();",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "955:   cur_object = so.first_shared_obj;",
          "957:   QPDFObjGen og(cur_object, 0);",
          "959:   int offset = getLinearizationOffset(og);",
          "960:   int h_offset = adjusted_offset(so.first_shared_offset);",
          "961:   if (offset != h_offset)",
          "",
          "[Removed Lines]",
          "958:   assert(this->xref_table.count(og) > 0);",
          "",
          "[Added Lines]",
          "958:   assert(this->m->xref_table.count(og) > 0);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1000:     {",
          "1002:  {",
          "1003:      return;",
          "1004:  }",
          "1008:  {",
          "1010:      QPDFObjectHandle outlines = getRoot().getKey(\"/Outlines\");",
          "",
          "[Removed Lines]",
          "999:     if (this->c_outline_data.nobjects == this->outline_hints.nobjects)",
          "1001:  if (this->c_outline_data.nobjects == 0)",
          "1006:  if (this->c_outline_data.first_object ==",
          "1007:      this->outline_hints.first_object)",
          "",
          "[Added Lines]",
          "999:     if (this->m->c_outline_data.nobjects == this->m->outline_hints.nobjects)",
          "1001:  if (this->m->c_outline_data.nobjects == 0)",
          "1006:  if (this->m->c_outline_data.first_object ==",
          "1007:      this->m->outline_hints.first_object)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1018:                 return;",
          "1019:             }",
          "1020:      QPDFObjGen og(outlines.getObjGen());",
          "1022:      int offset = getLinearizationOffset(og);",
          "1023:      ObjUser ou(ObjUser::ou_root_key, \"/Outlines\");",
          "1024:      int length = maxEnd(ou) - offset;",
          "1025:      int table_offset =",
          "1027:      if (offset != table_offset)",
          "1028:      {",
          "1029:   warnings.push_back(",
          "",
          "[Removed Lines]",
          "1021:      assert(this->xref_table.count(og) > 0);",
          "1026:   adjusted_offset(this->outline_hints.first_object_offset);",
          "",
          "[Added Lines]",
          "1021:      assert(this->m->xref_table.count(og) > 0);",
          "1026:   adjusted_offset(this->m->outline_hints.first_object_offset);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1031:       QUtil::int_to_string(table_offset) +",
          "1032:       \"; computed = \" + QUtil::int_to_string(offset));",
          "1033:      }",
          "1035:      if (length != table_length)",
          "1036:      {",
          "1037:   warnings.push_back(",
          "",
          "[Removed Lines]",
          "1034:      int table_length = this->outline_hints.group_length;",
          "",
          "[Added Lines]",
          "1034:      int table_length = this->m->outline_hints.group_length;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1063:     }",
          "1064:     catch (QPDFExc& e)",
          "1065:     {",
          "1067:     }",
          "1068: }",
          "1070: void",
          "1071: QPDF::dumpLinearizationDataInternal()",
          "1072: {",
          "1085:  << std::endl;",
          "1089:     dumpHPageOffset();",
          "1093:     dumpHSharedObject();",
          "1096:     {",
          "1101:     }",
          "1102: }",
          "",
          "[Removed Lines]",
          "1074:   << std::endl;",
          "1077:  << \"file_size: \" << this->linp.file_size << std::endl",
          "1078:  << \"first_page_object: \" << this->linp.first_page_object << std::endl",
          "1079:  << \"first_page_end: \" << this->linp.first_page_end << std::endl",
          "1080:  << \"npages: \" << this->linp.npages << std::endl",
          "1081:  << \"xref_zero_offset: \" << this->linp.xref_zero_offset << std::endl",
          "1082:  << \"first_page: \" << this->linp.first_page << std::endl",
          "1083:  << \"H_offset: \" << this->linp.H_offset << std::endl",
          "1084:  << \"H_length: \" << this->linp.H_length << std::endl",
          "1088:   << std::endl;",
          "1091:   << \"Shared Objects Hint Table\" << std::endl",
          "1092:   << std::endl;",
          "1095:     if (this->outline_hints.nobjects > 0)",
          "1098:       << \"Outlines Hint Table\" << std::endl",
          "1099:       << std::endl;",
          "1100:  dumpHGeneric(this->outline_hints);",
          "",
          "[Added Lines]",
          "1074:         << this->m->file->getName() << \": linearization data:\" << std::endl",
          "1075:         << std::endl;",
          "1078:  << \"file_size: \" << this->m->linp.file_size << std::endl",
          "1079:  << \"first_page_object: \" << this->m->linp.first_page_object << std::endl",
          "1080:  << \"first_page_end: \" << this->m->linp.first_page_end << std::endl",
          "1081:  << \"npages: \" << this->m->linp.npages << std::endl",
          "1082:  << \"xref_zero_offset: \" << this->m->linp.xref_zero_offset << std::endl",
          "1083:  << \"first_page: \" << this->m->linp.first_page << std::endl",
          "1084:  << \"H_offset: \" << this->m->linp.H_offset << std::endl",
          "1085:  << \"H_length: \" << this->m->linp.H_length << std::endl",
          "1089:                          << std::endl;",
          "1092:                          << \"Shared Objects Hint Table\" << std::endl",
          "1093:                          << std::endl;",
          "1096:     if (this->m->outline_hints.nobjects > 0)",
          "1099:                              << \"Outlines Hint Table\" << std::endl",
          "1100:                              << std::endl;",
          "1101:  dumpHGeneric(this->m->outline_hints);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1111:     {",
          "1113:     }",
          "1114:     return offset;",
          "1115: }",
          "",
          "[Removed Lines]",
          "1110:     if (offset >= this->linp.H_offset)",
          "1112:  return offset + this->linp.H_length;",
          "",
          "[Added Lines]",
          "1111:     if (offset >= this->m->linp.H_offset)",
          "1113:  return offset + this->m->linp.H_length;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1118: void",
          "1119: QPDF::dumpHPageOffset()",
          "1120: {",
          "1123:  << \"min_nobjects: \" << t.min_nobjects",
          "1124:  << std::endl",
          "1125:  << \"first_page_offset: \" << adjusted_offset(t.first_page_offset)",
          "",
          "[Removed Lines]",
          "1121:     HPageOffset& t = this->page_offset_hints;",
          "",
          "[Added Lines]",
          "1122:     HPageOffset& t = this->m->page_offset_hints;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1147:  << \"shared_denominator: \" << t.shared_denominator",
          "1148:  << std::endl;",
          "1151:     {",
          "1152:  HPageOffsetEntry& pe = t.entries.at(i1);",
          "1154:      << \"Page \" << i1 << \":\" << std::endl",
          "1155:      << \"  nobjects: \" << pe.delta_nobjects + t.min_nobjects",
          "1156:      << std::endl",
          "",
          "[Removed Lines]",
          "1150:     for (int i1 = 0; i1 < this->linp.npages; ++i1)",
          "",
          "[Added Lines]",
          "1151:     for (int i1 = 0; i1 < this->m->linp.npages; ++i1)",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1164:      << \"  nshared_objects: \" << pe.nshared_objects << std::endl;",
          "1165:  for (int i2 = 0; i2 < pe.nshared_objects; ++i2)",
          "1166:  {",
          "1171:  }",
          "1172:     }",
          "1173: }",
          "",
          "[Removed Lines]",
          "1168:    << pe.shared_identifiers.at(i2) << std::endl;",
          "1170:    << pe.shared_numerators.at(i2) << std::endl;",
          "",
          "[Added Lines]",
          "1169:                                  << pe.shared_identifiers.at(i2) << std::endl;",
          "1171:                                  << pe.shared_numerators.at(i2) << std::endl;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1175: void",
          "1176: QPDF::dumpHSharedObject()",
          "1177: {",
          "1180:  << \"first_shared_obj: \" << t.first_shared_obj",
          "1181:  << std::endl",
          "1182:  << \"first_shared_offset: \" << adjusted_offset(t.first_shared_offset)",
          "",
          "[Removed Lines]",
          "1178:     HSharedObject& t = this->shared_object_hints;",
          "",
          "[Added Lines]",
          "1179:     HSharedObject& t = this->m->shared_object_hints;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1195:     for (int i = 0; i < t.nshared_total; ++i)",
          "1196:     {",
          "1197:  HSharedObjectEntry& se = t.entries.at(i);",
          "1203:  if (se.signature_present)",
          "1204:  {",
          "1206:  }",
          "1207:  if (se.nobjects_minus_one != 0)",
          "1208:  {",
          "1211:  }",
          "1212:     }",
          "1213: }",
          "",
          "[Removed Lines]",
          "1200:       << se.delta_group_length + t.min_group_length << std::endl;",
          "1210:    << se.nobjects_minus_one + 1 << std::endl;",
          "",
          "[Added Lines]",
          "1200:             << \"Shared Object \" << i << \":\" << std::endl",
          "1201:             << \"  group length: \"",
          "1202:             << se.delta_group_length + t.min_group_length << std::endl;",
          "1212:                                  << se.nobjects_minus_one + 1 << std::endl;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1246:     {",
          "",
          "[Removed Lines]",
          "1245:     if (this->object_to_obj_users.empty())",
          "",
          "[Added Lines]",
          "1247:     if (this->m->object_to_obj_users.empty())",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1311:     QPDFObjectHandle root = getRoot();",
          "1312:     bool outlines_in_first_page = false;",
          "",
          "[Removed Lines]",
          "1301:     this->part4.clear();",
          "1302:     this->part6.clear();",
          "1303:     this->part7.clear();",
          "1304:     this->part8.clear();",
          "1305:     this->part9.clear();",
          "1306:     this->c_linp = LinParameters();",
          "1307:     this->c_page_offset_data = CHPageOffset();",
          "1308:     this->c_shared_object_data = CHSharedObject();",
          "1309:     this->c_outline_data = HGeneric();",
          "",
          "[Added Lines]",
          "1303:     this->m->part4.clear();",
          "1304:     this->m->part6.clear();",
          "1305:     this->m->part7.clear();",
          "1306:     this->m->part8.clear();",
          "1307:     this->m->part9.clear();",
          "1308:     this->m->c_linp = LinParameters();",
          "1309:     this->m->c_page_offset_data = CHPageOffset();",
          "1310:     this->m->c_shared_object_data = CHSharedObject();",
          "1311:     this->m->c_outline_data = HGeneric();",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1349:     std::set<QPDFObjGen> lc_root;",
          "1351:     for (std::map<QPDFObjGen, std::set<ObjUser> >::iterator oiter =",
          "1354:     {",
          "1355:  QPDFObjGen const& og = (*oiter).first;",
          "",
          "[Removed Lines]",
          "1352:       this->object_to_obj_users.begin();",
          "1353:   oiter != this->object_to_obj_users.end(); ++oiter)",
          "",
          "[Added Lines]",
          "1354:       this->m->object_to_obj_users.begin();",
          "1355:   oiter != this->m->object_to_obj_users.end(); ++oiter)",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1513:     assert(lc_root.size() == 1);",
          "1515:     for (std::set<QPDFObjGen>::iterator iter = lc_open_document.begin();",
          "1516:   iter != lc_open_document.end(); ++iter)",
          "1517:     {",
          "1519:     }",
          "",
          "[Removed Lines]",
          "1508:     this->c_linp.npages = npages;",
          "1509:     this->c_page_offset_data.entries = std::vector<CHPageOffsetEntry>(npages);",
          "1514:     this->part4.push_back(objGenToIndirect(*(lc_root.begin())));",
          "1518:  this->part4.push_back(objGenToIndirect(*iter));",
          "",
          "[Added Lines]",
          "1510:     this->m->c_linp.npages = npages;",
          "1511:     this->m->c_page_offset_data.entries =",
          "1512:         std::vector<CHPageOffsetEntry>(npages);",
          "1517:     this->m->part4.push_back(objGenToIndirect(*(lc_root.begin())));",
          "1521:  this->m->part4.push_back(objGenToIndirect(*iter));",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1533:      \"object not in lc_first_page_private\");",
          "1534:     }",
          "1535:     lc_first_page_private.erase(first_page_og);",
          "",
          "[Removed Lines]",
          "1536:     this->c_linp.first_page_object = pages.at(0).getObjectID();",
          "1537:     this->part6.push_back(pages.at(0));",
          "",
          "[Added Lines]",
          "1539:     this->m->c_linp.first_page_object = pages.at(0).getObjectID();",
          "1540:     this->m->part6.push_back(pages.at(0));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1544:     for (std::set<QPDFObjGen>::iterator iter = lc_first_page_private.begin();",
          "1545:   iter != lc_first_page_private.end(); ++iter)",
          "1546:     {",
          "1548:     }",
          "1550:     for (std::set<QPDFObjGen>::iterator iter = lc_first_page_shared.begin();",
          "1551:   iter != lc_first_page_shared.end(); ++iter)",
          "1552:     {",
          "1554:     }",
          "1557:     if (outlines_in_first_page)",
          "1558:     {",
          "1560:     }",
          "",
          "[Removed Lines]",
          "1547:  this->part6.push_back(objGenToIndirect(*iter));",
          "1553:  this->part6.push_back(objGenToIndirect(*iter));",
          "1559:  pushOutlinesToPart(this->part6, lc_outlines, object_stream_data);",
          "",
          "[Added Lines]",
          "1550:  this->m->part6.push_back(objGenToIndirect(*iter));",
          "1556:  this->m->part6.push_back(objGenToIndirect(*iter));",
          "1562:  pushOutlinesToPart(this->m->part6, lc_outlines, object_stream_data);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1568:     this->c_page_offset_data.entries.at(0).nobjects = this->part6.size();",
          "",
          "[Added Lines]",
          "1571:     this->m->c_page_offset_data.entries.at(0).nobjects = this->m->part6.size();",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1583:   QUtil::int_to_string(i) + \" not in lc_other_page_private\");",
          "1584:  }",
          "1585:  lc_other_page_private.erase(page_og);",
          "1593:  ObjUser ou(ObjUser::ou_page, i);",
          "1596:  for (std::set<QPDFObjGen>::iterator iter = ogs.begin();",
          "1597:       iter != ogs.end(); ++iter)",
          "1598:  {",
          "",
          "[Removed Lines]",
          "1586:  this->part7.push_back(pages.at(i));",
          "1591:  this->c_page_offset_data.entries.at(i).nobjects = 1;",
          "1594:  assert(this->obj_user_to_objects.count(ou) > 0);",
          "1595:  std::set<QPDFObjGen> ogs = this->obj_user_to_objects[ou];",
          "",
          "[Added Lines]",
          "1589:  this->m->part7.push_back(pages.at(i));",
          "1594:  this->m->c_page_offset_data.entries.at(i).nobjects = 1;",
          "1597:  assert(this->m->obj_user_to_objects.count(ou) > 0);",
          "1598:  std::set<QPDFObjGen> ogs = this->m->obj_user_to_objects[ou];",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1600:      if (lc_other_page_private.count(og))",
          "1601:      {",
          "1602:   lc_other_page_private.erase(og);",
          "1605:      }",
          "1606:  }",
          "1607:     }",
          "",
          "[Removed Lines]",
          "1603:   this->part7.push_back(objGenToIndirect(og));",
          "1604:   ++this->c_page_offset_data.entries.at(i).nobjects;",
          "",
          "[Added Lines]",
          "1606:   this->m->part7.push_back(objGenToIndirect(og));",
          "1607:   ++this->m->c_page_offset_data.entries.at(i).nobjects;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1620:     for (std::set<QPDFObjGen>::iterator iter = lc_other_page_shared.begin();",
          "1621:   iter != lc_other_page_shared.end(); ++iter)",
          "1622:     {",
          "1624:     }",
          "",
          "[Removed Lines]",
          "1623:  this->part8.push_back(objGenToIndirect(*iter));",
          "",
          "[Added Lines]",
          "1626:  this->m->part8.push_back(objGenToIndirect(*iter));",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1636:     std::set<QPDFObjGen> pages_ogs =",
          "1638:     assert(! pages_ogs.empty());",
          "1639:     for (std::set<QPDFObjGen>::iterator iter = pages_ogs.begin();",
          "1640:   iter != pages_ogs.end(); ++iter)",
          "",
          "[Removed Lines]",
          "1637:  this->obj_user_to_objects[ObjUser(ObjUser::ou_root_key, \"/Pages\")];",
          "",
          "[Added Lines]",
          "1640:  this->m->obj_user_to_objects[ObjUser(ObjUser::ou_root_key, \"/Pages\")];",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1643:  if (lc_other.count(og))",
          "1644:  {",
          "1645:      lc_other.erase(og);",
          "1647:  }",
          "1648:     }",
          "",
          "[Removed Lines]",
          "1646:      this->part9.push_back(objGenToIndirect(og));",
          "",
          "[Added Lines]",
          "1649:      this->m->part9.push_back(objGenToIndirect(og));",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1661:      if (lc_thumbnail_private.count(thumb_og))",
          "1662:      {",
          "1663:   lc_thumbnail_private.erase(thumb_og);",
          "1665:      }",
          "1666:      else",
          "1667:      {",
          "",
          "[Removed Lines]",
          "1664:   this->part9.push_back(thumb);",
          "",
          "[Added Lines]",
          "1667:   this->m->part9.push_back(thumb);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1674:      }",
          "1675:      std::set<QPDFObjGen>& ogs =",
          "1677:      for (std::set<QPDFObjGen>::iterator iter = ogs.begin();",
          "1678:    iter != ogs.end(); ++iter)",
          "1679:      {",
          "",
          "[Removed Lines]",
          "1676:   this->obj_user_to_objects[ObjUser(ObjUser::ou_thumb, i)];",
          "",
          "[Added Lines]",
          "1679:   this->m->obj_user_to_objects[ObjUser(ObjUser::ou_thumb, i)];",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1681:   if (lc_thumbnail_private.count(og))",
          "1682:   {",
          "1683:       lc_thumbnail_private.erase(og);",
          "1685:   }",
          "1686:      }",
          "1687:  }",
          "",
          "[Removed Lines]",
          "1684:       this->part9.push_back(objGenToIndirect(og));",
          "",
          "[Added Lines]",
          "1687:       this->m->part9.push_back(objGenToIndirect(og));",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1698:     for (std::set<QPDFObjGen>::iterator iter = lc_thumbnail_shared.begin();",
          "1699:   iter != lc_thumbnail_shared.end(); ++iter)",
          "1700:     {",
          "1702:     }",
          "1705:     if (! outlines_in_first_page)",
          "1706:     {",
          "1708:     }",
          "1711:     for (std::set<QPDFObjGen>::iterator iter = lc_other.begin();",
          "1712:   iter != lc_other.end(); ++iter)",
          "1713:     {",
          "1715:     }",
          "1719:     unsigned int num_placed =",
          "1723:     if (num_placed != num_wanted)",
          "1724:     {",
          "1725:  throw std::logic_error(",
          "",
          "[Removed Lines]",
          "1701:  this->part9.push_back(objGenToIndirect(*iter));",
          "1707:  pushOutlinesToPart(this->part9, lc_outlines, object_stream_data);",
          "1714:  this->part9.push_back(objGenToIndirect(*iter));",
          "1720:         this->part4.size() + this->part6.size() + this->part7.size() +",
          "1721:         this->part8.size() + this->part9.size();",
          "1722:     unsigned int num_wanted = this->object_to_obj_users.size();",
          "",
          "[Added Lines]",
          "1704:  this->m->part9.push_back(objGenToIndirect(*iter));",
          "1710:  pushOutlinesToPart(this->m->part9, lc_outlines, object_stream_data);",
          "1717:  this->m->part9.push_back(objGenToIndirect(*iter));",
          "1723:         this->m->part4.size() + this->m->part6.size() + this->m->part7.size() +",
          "1724:         this->m->part8.size() + this->m->part9.size();",
          "1725:     unsigned int num_wanted = this->m->object_to_obj_users.size();",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1744:     std::map<int, int> obj_to_index;",
          "1750:     std::vector<CHSharedObjectEntry>& shared =",
          "1754:     {",
          "1755:  QPDFObjectHandle& oh = *iter;",
          "1756:  int obj = oh.getObjectID();",
          "1757:  obj_to_index[obj] = shared.size();",
          "1758:  shared.push_back(CHSharedObjectEntry(obj));",
          "1759:     }",
          "1762:     {",
          "1765:  for (std::vector<QPDFObjectHandle>::iterator iter =",
          "1768:  {",
          "1769:      QPDFObjectHandle& oh = *iter;",
          "1770:      int obj = oh.getObjectID();",
          "",
          "[Removed Lines]",
          "1746:     this->c_shared_object_data.nshared_first_page = this->part6.size();",
          "1747:     this->c_shared_object_data.nshared_total =",
          "1748:  this->c_shared_object_data.nshared_first_page + this->part8.size();",
          "1751:  this->c_shared_object_data.entries;",
          "1752:     for (std::vector<QPDFObjectHandle>::iterator iter = this->part6.begin();",
          "1753:   iter != this->part6.end(); ++iter)",
          "1760:     QTC::TC(\"qpdf\", \"QPDF lin part 8 empty\", this->part8.empty() ? 1 : 0);",
          "1761:     if (! this->part8.empty())",
          "1763:  this->c_shared_object_data.first_shared_obj =",
          "1764:      this->part8.at(0).getObjectID();",
          "1766:    this->part8.begin();",
          "1767:       iter != this->part8.end(); ++iter)",
          "",
          "[Added Lines]",
          "1749:     this->m->c_shared_object_data.nshared_first_page = this->m->part6.size();",
          "1750:     this->m->c_shared_object_data.nshared_total =",
          "1751:  this->m->c_shared_object_data.nshared_first_page +",
          "1752:         this->m->part8.size();",
          "1755:  this->m->c_shared_object_data.entries;",
          "1756:     for (std::vector<QPDFObjectHandle>::iterator iter = this->m->part6.begin();",
          "1757:   iter != this->m->part6.end(); ++iter)",
          "1764:     QTC::TC(\"qpdf\", \"QPDF lin part 8 empty\", this->m->part8.empty() ? 1 : 0);",
          "1765:     if (! this->m->part8.empty())",
          "1767:  this->m->c_shared_object_data.first_shared_obj =",
          "1768:      this->m->part8.at(0).getObjectID();",
          "1770:    this->m->part8.begin();",
          "1771:       iter != this->m->part8.end(); ++iter)",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1772:      shared.push_back(CHSharedObjectEntry(obj));",
          "1773:  }",
          "1774:     }",
          "1777:     {",
          "1778:         throw std::logic_error(",
          "1779:             \"shared object hint table has wrong number of entries\");",
          "",
          "[Removed Lines]",
          "1775:     if (static_cast<size_t>(this->c_shared_object_data.nshared_total) !=",
          "1776:         this->c_shared_object_data.entries.size())",
          "",
          "[Added Lines]",
          "1779:     if (static_cast<size_t>(this->m->c_shared_object_data.nshared_total) !=",
          "1780:         this->m->c_shared_object_data.entries.size())",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1785:     for (unsigned int i = 1; i < npages; ++i)",
          "1786:     {",
          "1788:  ObjUser ou(ObjUser::ou_page, i);",
          "1791:  for (std::set<QPDFObjGen>::const_iterator iter = ogs.begin();",
          "1792:       iter != ogs.end(); ++iter)",
          "1793:  {",
          "1794:      QPDFObjGen const& og = *iter;",
          "1796:   (obj_to_index.count(og.getObj()) > 0))",
          "1797:      {",
          "1798:   int idx = obj_to_index[og.getObj()];",
          "",
          "[Removed Lines]",
          "1787:  CHPageOffsetEntry& pe = this->c_page_offset_data.entries.at(i);",
          "1789:  assert(this->obj_user_to_objects.count(ou) > 0);",
          "1790:  std::set<QPDFObjGen> const& ogs = this->obj_user_to_objects[ou];",
          "1795:      if ((this->object_to_obj_users[og].size() > 1) &&",
          "",
          "[Added Lines]",
          "1791:  CHPageOffsetEntry& pe = this->m->c_page_offset_data.entries.at(i);",
          "1793:  assert(this->m->obj_user_to_objects.count(ou) > 0);",
          "1794:  std::set<QPDFObjGen> const& ogs = this->m->obj_user_to_objects[ou];",
          "1799:      if ((this->m->object_to_obj_users[og].size() > 1) &&",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1818:     outlines = getUncompressedObject(outlines, object_stream_data);",
          "1819:     QPDFObjGen outlines_og(outlines.getObjGen());",
          "1820:     QTC::TC(\"qpdf\", \"QPDF lin outlines in part\",",
          "1823:       : 9999));  // can't happen",
          "1826:     lc_outlines.erase(outlines_og);",
          "1827:     part.push_back(outlines);",
          "1828:     for (std::set<QPDFObjGen>::iterator iter = lc_outlines.begin();",
          "1829:   iter != lc_outlines.end(); ++iter)",
          "1830:     {",
          "1831:  part.push_back(objGenToIndirect(*iter));",
          "1833:     }",
          "1834: }",
          "",
          "[Removed Lines]",
          "1821:      ((&part == (&this->part6)) ? 0",
          "1822:       : (&part == (&this->part9)) ? 1",
          "1824:     this->c_outline_data.first_object = outlines_og.getObj();",
          "1825:     this->c_outline_data.nobjects = 1;",
          "1832:  ++this->c_outline_data.nobjects;",
          "",
          "[Added Lines]",
          "1825:      ((&part == (&this->m->part6)) ? 0",
          "1826:       : (&part == (&this->m->part9)) ? 1",
          "1828:     this->m->c_outline_data.first_object = outlines_og.getObj();",
          "1829:     this->m->c_outline_data.nobjects = 1;",
          "1836:  ++this->m->c_outline_data.nobjects;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1843:     std::vector<QPDFObjectHandle>& part9)",
          "1844: {",
          "1845:     calculateLinearizationData(object_stream_data);",
          "1851: }",
          "1853: static inline int nbits(int val)",
          "",
          "[Removed Lines]",
          "1846:     part4 = this->part4;",
          "1847:     part6 = this->part6;",
          "1848:     part7 = this->part7;",
          "1849:     part8 = this->part8;",
          "1850:     part9 = this->part9;",
          "",
          "[Added Lines]",
          "1850:     part4 = this->m->part4;",
          "1851:     part6 = this->m->part6;",
          "1852:     part7 = this->m->part7;",
          "1853:     part8 = this->m->part8;",
          "1854:     part9 = this->m->part9;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1890:     std::vector<QPDFObjectHandle> const& pages = getAllPages();",
          "1891:     unsigned int npages = pages.size();",
          "1893:     std::vector<CHPageOffsetEntry>& cphe = cph.entries;",
          "",
          "[Removed Lines]",
          "1892:     CHPageOffset& cph = this->c_page_offset_data;",
          "",
          "[Added Lines]",
          "1896:     CHPageOffset& cph = this->m->c_page_offset_data;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1902:     int max_length = min_length;",
          "1903:     int max_shared = cphe.at(0).nshared_objects;",
          "1906:     std::vector<HPageOffsetEntry>& phe = ph.entries;",
          "1908:     phe = std::vector<HPageOffsetEntry>(npages);",
          "",
          "[Removed Lines]",
          "1905:     HPageOffset& ph = this->page_offset_hints;",
          "",
          "[Added Lines]",
          "1909:     HPageOffset& ph = this->m->page_offset_hints;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1940:     ph.nbits_delta_page_length = nbits(max_length - min_length);",
          "1941:     ph.nbits_nshared_objects = nbits(max_shared);",
          "1942:     ph.nbits_shared_identifier =",
          "1944:     ph.shared_denominator = 4; // doesn't matter",
          "",
          "[Removed Lines]",
          "1943:  nbits(this->c_shared_object_data.nshared_total);",
          "",
          "[Added Lines]",
          "1947:  nbits(this->m->c_shared_object_data.nshared_total);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1975:     std::map<int, qpdf_offset_t> const& lengths,",
          "1976:     std::map<int, int> const& obj_renumber)",
          "1977: {",
          "1979:     std::vector<CHSharedObjectEntry>& csoe = cso.entries;",
          "1981:     std::vector<HSharedObjectEntry>& soe = so.entries;",
          "1982:     soe.clear();",
          "",
          "[Removed Lines]",
          "1978:     CHSharedObject& cso = this->c_shared_object_data;",
          "1980:     HSharedObject& so = this->shared_object_hints;",
          "",
          "[Added Lines]",
          "1982:     CHSharedObject& cso = this->m->c_shared_object_data;",
          "1984:     HSharedObject& so = this->m->shared_object_hints;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2026:     std::map<int, qpdf_offset_t> const& lengths,",
          "2027:     std::map<int, int> const& obj_renumber)",
          "2028: {",
          "2031:     if (cho.nobjects == 0)",
          "2032:     {",
          "2033:  return;",
          "2034:     }",
          "2038:     ho.first_object =",
          "2039:  (*(obj_renumber.find(cho.first_object))).second;",
          "",
          "[Removed Lines]",
          "2029:     HGeneric& cho = this->c_outline_data;",
          "2036:     HGeneric& ho = this->outline_hints;",
          "",
          "[Added Lines]",
          "2033:     HGeneric& cho = this->m->c_outline_data;",
          "2040:     HGeneric& ho = this->m->outline_hints;",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2083: void",
          "2084: QPDF::writeHPageOffset(BitWriter& w)",
          "2085: {",
          "2088:     w.writeBits(t.min_nobjects, 32);       // 1",
          "2089:     w.writeBits(t.first_page_offset, 32);      // 2",
          "",
          "[Removed Lines]",
          "2086:     HPageOffset& t = this->page_offset_hints;",
          "",
          "[Added Lines]",
          "2090:     HPageOffset& t = this->m->page_offset_hints;",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2130: void",
          "2131: QPDF::writeHSharedObject(BitWriter& w)",
          "2132: {",
          "2135:     w.writeBits(t.first_shared_obj, 32);      // 1",
          "2136:     w.writeBits(t.first_shared_offset, 32);      // 2",
          "",
          "[Removed Lines]",
          "2133:     HSharedObject& t = this->shared_object_hints;",
          "",
          "[Added Lines]",
          "2137:     HSharedObject& t = this->m->shared_object_hints;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2193:     S = c.getCount();",
          "2194:     writeHSharedObject(w);",
          "2195:     O = 0;",
          "2197:     {",
          "2198:  O = c.getCount();",
          "2200:     }",
          "2201:     c.finish();",
          "",
          "[Removed Lines]",
          "2196:     if (this->outline_hints.nobjects > 0)",
          "2199:  writeHGeneric(w, this->outline_hints);",
          "",
          "[Added Lines]",
          "2200:     if (this->m->outline_hints.nobjects > 0)",
          "2203:  writeHGeneric(w, this->m->outline_hints);",
          "",
          "---------------"
        ],
        "libqpdf/QPDF_optimization.cc||libqpdf/QPDF_optimization.cc": [
          "File: libqpdf/QPDF_optimization.cc -> libqpdf/QPDF_optimization.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: QPDF::optimize(std::map<int, int> const& object_stream_data,",
          "63:         bool allow_changes)",
          "64: {",
          "66:     {",
          "68:  return;",
          "",
          "[Removed Lines]",
          "65:     if (! this->obj_user_to_objects.empty())",
          "",
          "[Added Lines]",
          "65:     if (! this->m->obj_user_to_objects.empty())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     }",
          "87:     pushInheritedAttributesToPage(allow_changes, false);",
          "91:     for (int pageno = 0; pageno < n; ++pageno)",
          "92:     {",
          "93:         updateObjectMaps(ObjUser(ObjUser::ou_page, pageno),",
          "95:     }",
          "99:     for (std::set<std::string>::iterator iter = keys.begin();",
          "100:   iter != keys.end(); ++iter)",
          "101:     {",
          "",
          "[Removed Lines]",
          "90:     int n = this->all_pages.size();",
          "94:                          this->all_pages.at(pageno));",
          "98:     std::set<std::string> keys = this->trailer.getKeys();",
          "",
          "[Added Lines]",
          "90:     int n = this->m->all_pages.size();",
          "94:                          this->m->all_pages.at(pageno));",
          "98:     std::set<std::string> keys = this->m->trailer.getKeys();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:  else",
          "108:  {",
          "109:      updateObjectMaps(ObjUser(ObjUser::ou_trailer_key, key),",
          "111:  }",
          "112:     }",
          "",
          "[Removed Lines]",
          "110:         this->trailer.getKey(key));",
          "",
          "[Added Lines]",
          "110:         this->m->trailer.getKey(key));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130:     ObjUser root_ou = ObjUser(ObjUser::ou_root);",
          "131:     QPDFObjGen root_og = QPDFObjGen(root.getObjGen());",
          "135:     filterCompressedObjects(object_stream_data);",
          "136: }",
          "",
          "[Removed Lines]",
          "132:     obj_user_to_objects[root_ou].insert(root_og);",
          "133:     object_to_obj_users[root_og].insert(root_ou);",
          "",
          "[Added Lines]",
          "132:     this->m->obj_user_to_objects[root_ou].insert(root_og);",
          "133:     this->m->object_to_obj_users[root_og].insert(root_ou);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:     {",
          "156:         return;",
          "157:     }",
          "",
          "[Removed Lines]",
          "154:     if (this->pushed_inherited_attributes_to_pages && (! warn_skipped_keys))",
          "",
          "[Added Lines]",
          "154:     if (this->m->pushed_inherited_attributes_to_pages && (! warn_skipped_keys))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161:     std::map<std::string, std::vector<QPDFObjectHandle> > key_ancestors;",
          "163:     pushInheritedAttributesToPageInternal(",
          "166:     assert(key_ancestors.empty());",
          "168: }",
          "170: void",
          "",
          "[Removed Lines]",
          "162:     this->all_pages.clear();",
          "164:         this->trailer.getKey(\"/Root\").getKey(\"/Pages\"),",
          "165:         key_ancestors, this->all_pages, allow_changes, warn_skipped_keys);",
          "167:     this->pushed_inherited_attributes_to_pages = true;",
          "",
          "[Added Lines]",
          "162:     this->m->all_pages.clear();",
          "164:         this->m->trailer.getKey(\"/Root\").getKey(\"/Pages\"),",
          "165:         key_ancestors, this->m->all_pages, allow_changes, warn_skipped_keys);",
          "167:     this->m->pushed_inherited_attributes_to_pages = true;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "192:     if (visited.count(this_og) > 0)",
          "193:     {",
          "194:         throw QPDFExc(",
          "197:             \"Loop detected in /Pages structure (inherited attributes)\");",
          "198:     }",
          "199:     visited.insert(this_og);",
          "",
          "[Removed Lines]",
          "195:             qpdf_e_pages, this->file->getName(),",
          "196:             this->last_object_description, 0,",
          "",
          "[Added Lines]",
          "195:             qpdf_e_pages, this->m->file->getName(),",
          "196:             this->m->last_object_description, 0,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "219:      {",
          "220:   if (! allow_changes)",
          "221:   {",
          "225:       \"optimize detected an \"",
          "226:                                   \"inheritable attribute when called \"",
          "227:       \"in no-change mode\");",
          "",
          "[Removed Lines]",
          "222:       throw QPDFExc(qpdf_e_internal, this->file->getName(),",
          "223:       this->last_object_description,",
          "224:       this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "222:       throw QPDFExc(qpdf_e_internal, this->m->file->getName(),",
          "223:       this->m->last_object_description,",
          "224:       this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "269:                     setLastObjectDescription(\"Pages object\",",
          "270:                                              cur_pages.getObjectID(),",
          "271:                                              cur_pages.getGeneration());",
          "274:                                  \"Unknown key \" + key + \" in /Pages object\"",
          "275:                                  \" is being discarded as a result of\"",
          "276:                                  \" flattening the /Pages tree\"));",
          "",
          "[Removed Lines]",
          "272:                     warn(QPDFExc(qpdf_e_pages, this->file->getName(),",
          "273:                                  this->last_object_description, 0,",
          "",
          "[Added Lines]",
          "272:                     warn(QPDFExc(qpdf_e_pages, this->m->file->getName(),",
          "273:                                  this->m->last_object_description, 0,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "337:     }",
          "338:     else",
          "339:     {",
          "343:         \"invalid Type \" + type + \" in page tree\");",
          "344:     }",
          "345:     visited.erase(this_og);",
          "",
          "[Removed Lines]",
          "340:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "341:         this->last_object_description,",
          "342:         this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "340:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "341:         this->m->last_object_description,",
          "342:         this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "382:      QTC::TC(\"qpdf\", \"QPDF opt loop detected\");",
          "383:      return;",
          "384:  }",
          "387:  visited.insert(og);",
          "388:     }",
          "",
          "[Removed Lines]",
          "385:  this->obj_user_to_objects[ou].insert(og);",
          "386:  this->object_to_obj_users[og].insert(ou);",
          "",
          "[Added Lines]",
          "385:  this->m->obj_user_to_objects[ou].insert(og);",
          "386:  this->m->object_to_obj_users[og].insert(ou);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "445:     std::map<QPDFObjGen, std::set<ObjUser> > t_object_to_obj_users;",
          "447:     for (std::map<ObjUser, std::set<QPDFObjGen> >::iterator i1 =",
          "450:     {",
          "451:  ObjUser const& ou = (*i1).first;",
          "452:  std::set<QPDFObjGen> const& objects = (*i1).second;",
          "",
          "[Removed Lines]",
          "448:       this->obj_user_to_objects.begin();",
          "449:   i1 != this->obj_user_to_objects.end(); ++i1)",
          "",
          "[Added Lines]",
          "448:       this->m->obj_user_to_objects.begin();",
          "449:   i1 != this->m->obj_user_to_objects.end(); ++i1)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "468:     }",
          "470:     for (std::map<QPDFObjGen, std::set<ObjUser> >::iterator i1 =",
          "473:     {",
          "474:  QPDFObjGen const& og = (*i1).first;",
          "475:  std::set<ObjUser> const& objusers = (*i1).second;",
          "",
          "[Removed Lines]",
          "471:       this->object_to_obj_users.begin();",
          "472:   i1 != this->object_to_obj_users.end(); ++i1)",
          "",
          "[Added Lines]",
          "471:       this->m->object_to_obj_users.begin();",
          "472:   i1 != this->m->object_to_obj_users.end(); ++i1)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "490:  }",
          "491:     }",
          "495: }",
          "",
          "[Removed Lines]",
          "493:     this->obj_user_to_objects = t_obj_user_to_objects;",
          "494:     this->object_to_obj_users = t_object_to_obj_users;",
          "",
          "[Added Lines]",
          "493:     this->m->obj_user_to_objects = t_obj_user_to_objects;",
          "494:     this->m->object_to_obj_users = t_object_to_obj_users;",
          "",
          "---------------"
        ],
        "libqpdf/QPDF_pages.cc||libqpdf/QPDF_pages.cc": [
          "File: libqpdf/QPDF_pages.cc -> libqpdf/QPDF_pages.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: QPDF::getAllPages()",
          "45: {",
          "49:     {",
          "51:     }",
          "53: }",
          "55: void",
          "",
          "[Removed Lines]",
          "48:     if (this->all_pages.empty())",
          "50:  getAllPagesInternal(getRoot().getKey(\"/Pages\"), this->all_pages);",
          "52:     return this->all_pages;",
          "",
          "[Added Lines]",
          "48:     if (this->m->all_pages.empty())",
          "50:  getAllPagesInternal(getRoot().getKey(\"/Pages\"), this->m->all_pages);",
          "52:     return this->m->all_pages;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     if (visited.count(this_og) > 0)",
          "70:     {",
          "71:         throw QPDFExc(",
          "74:             \"Loop detected in /Pages structure (getAllPages)\");",
          "75:     }",
          "76:     visited.insert(this_og);",
          "",
          "[Removed Lines]",
          "72:             qpdf_e_pages, this->file->getName(),",
          "73:             this->last_object_description, 0,",
          "",
          "[Added Lines]",
          "72:             qpdf_e_pages, this->m->file->getName(),",
          "73:             this->m->last_object_description, 0,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:     }",
          "104:     else",
          "105:     {",
          "109:         \"invalid Type \" + type + \" in page tree\");",
          "110:     }",
          "111:     visited.erase(this_og);",
          "",
          "[Removed Lines]",
          "106:  throw QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
          "107:         this->last_object_description,",
          "108:         this->file->getLastOffset(),",
          "",
          "[Added Lines]",
          "106:  throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),",
          "107:         this->m->last_object_description,",
          "108:         this->m->file->getLastOffset(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:     QTC::TC(\"qpdf\", \"QPDF updateAllPagesCache\");",
          "125:     getAllPages();",
          "126: }",
          "",
          "[Removed Lines]",
          "122:     this->all_pages.clear();",
          "123:     this->pageobj_to_pages_pos.clear();",
          "124:     this->pushed_inherited_attributes_to_pages = false;",
          "",
          "[Added Lines]",
          "122:     this->m->all_pages.clear();",
          "123:     this->m->pageobj_to_pages_pos.clear();",
          "124:     this->m->pushed_inherited_attributes_to_pages = false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:     {",
          "136:         return;",
          "137:     }",
          "141:     pushInheritedAttributesToPage(true, true);",
          "143:     QPDFObjectHandle pages = getRoot().getKey(\"/Pages\");",
          "146:     for (int pos = 0; pos < len; ++pos)",
          "147:     {",
          "151:     }",
          "155:     if (pages.getKey(\"/Count\").getIntValue() != len)",
          "156:     {",
          "",
          "[Removed Lines]",
          "134:     if (! this->pageobj_to_pages_pos.empty())",
          "145:     int const len = this->all_pages.size();",
          "149:         insertPageobjToPage(this->all_pages.at(pos), pos, true);",
          "150:         this->all_pages.at(pos).replaceKey(\"/Parent\", pages);",
          "153:     pages.replaceKey(\"/Kids\", QPDFObjectHandle::newArray(this->all_pages));",
          "",
          "[Added Lines]",
          "134:     if (! this->m->pageobj_to_pages_pos.empty())",
          "145:     int const len = this->m->all_pages.size();",
          "149:         insertPageobjToPage(this->m->all_pages.at(pos), pos, true);",
          "150:         this->m->all_pages.at(pos).replaceKey(\"/Parent\", pages);",
          "153:     pages.replaceKey(\"/Kids\", QPDFObjectHandle::newArray(this->m->all_pages));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "165:     QPDFObjGen og(obj.getObjGen());",
          "166:     if (check_duplicate)",
          "167:     {",
          "169:         {",
          "170:             QTC::TC(\"qpdf\", \"QPDF duplicate page reference\");",
          "171:             setLastObjectDescription(\"page \" + QUtil::int_to_string(pos) +",
          "172:                                      \" (numbered from zero)\",",
          "173:                                      og.getObj(), og.getGen());",
          "176:                           \"duplicate page reference found;\"",
          "177:                           \" this would cause loss of data\");",
          "178:         }",
          "179:     }",
          "180:     else",
          "181:     {",
          "183:     }",
          "184: }",
          "",
          "[Removed Lines]",
          "168:         if (! this->pageobj_to_pages_pos.insert(std::make_pair(og, pos)).second)",
          "174:             throw QPDFExc(qpdf_e_pages, this->file->getName(),",
          "175:                           this->last_object_description, 0,",
          "182:         this->pageobj_to_pages_pos[og] = pos;",
          "",
          "[Added Lines]",
          "168:         if (! this->m->pageobj_to_pages_pos.insert(",
          "169:                 std::make_pair(og, pos)).second)",
          "175:             throw QPDFExc(qpdf_e_pages, this->m->file->getName(),",
          "176:                           this->m->last_object_description, 0,",
          "183:         this->m->pageobj_to_pages_pos[og] = pos;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "195:     if (! newpage.isIndirect())",
          "196:     {",
          "197:         QTC::TC(\"qpdf\", \"QPDF insert non-indirect page\");",
          "199:     }",
          "200:     else if (newpage.getOwningQPDF() != this)",
          "201:     {",
          "202:         QTC::TC(\"qpdf\", \"QPDF insert foreign page\");",
          "203:         newpage.getOwningQPDF()->pushInheritedAttributesToPage();",
          "205:     }",
          "206:     else",
          "207:     {",
          "",
          "[Removed Lines]",
          "198:         newpage = this->makeIndirectObject(newpage);",
          "204:         newpage = this->copyForeignObject(newpage, true);",
          "",
          "[Added Lines]",
          "199:         newpage = makeIndirectObject(newpage);",
          "205:         newpage = copyForeignObject(newpage, true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "211:     QTC::TC(\"qpdf\", \"QPDF insert page\",",
          "212:             (pos == 0) ? 0 :                      // insert at beginning",
          "214:             2);                                   // insert in middle",
          "216:     QPDFObjectHandle pages = getRoot().getKey(\"/Pages\");",
          "217:     QPDFObjectHandle kids = pages.getKey(\"/Kids\");",
          "218:     assert ((pos >= 0) &&",
          "221:     newpage.replaceKey(\"/Parent\", pages);",
          "222:     kids.insertItem(pos, newpage);",
          "223:     int npages = kids.getArrayNItems();",
          "224:     pages.replaceKey(\"/Count\", QPDFObjectHandle::newInteger(npages));",
          "227:     for (int i = pos + 1; i < npages; ++i)",
          "228:     {",
          "230:     }",
          "231:     insertPageobjToPage(newpage, pos, true);",
          "233: }",
          "235: void",
          "",
          "[Removed Lines]",
          "213:             (pos == static_cast<int>(this->all_pages.size())) ? 1 : // at end",
          "219:             (static_cast<size_t>(pos) <= this->all_pages.size()));",
          "225:     this->all_pages.insert(this->all_pages.begin() + pos, newpage);",
          "226:     assert(this->all_pages.size() == static_cast<size_t>(npages));",
          "229:         insertPageobjToPage(this->all_pages.at(i), i, false);",
          "232:     assert(this->pageobj_to_pages_pos.size() == static_cast<size_t>(npages));",
          "",
          "[Added Lines]",
          "214:             (pos == static_cast<int>(this->m->all_pages.size())) ? 1 : // at end",
          "220:             (static_cast<size_t>(pos) <= this->m->all_pages.size()));",
          "226:     this->m->all_pages.insert(this->m->all_pages.begin() + pos, newpage);",
          "227:     assert(this->m->all_pages.size() == static_cast<size_t>(npages));",
          "230:         insertPageobjToPage(this->m->all_pages.at(i), i, false);",
          "233:     assert(this->m->pageobj_to_pages_pos.size() == static_cast<size_t>(npages));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "238:     int pos = findPage(page); // also ensures flat /Pages",
          "239:     QTC::TC(\"qpdf\", \"QPDF remove page\",",
          "240:             (pos == 0) ? 0 :                            // remove at beginning",
          "242:             2);                                         // remove in middle",
          "244:     QPDFObjectHandle pages = getRoot().getKey(\"/Pages\");",
          "",
          "[Removed Lines]",
          "241:             (pos == static_cast<int>(this->all_pages.size() - 1)) ? 1 : // end",
          "",
          "[Added Lines]",
          "242:             (pos == static_cast<int>(",
          "243:                 this->m->all_pages.size() - 1)) ? 1 :   // end",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "247:     kids.eraseItem(pos);",
          "248:     int npages = kids.getArrayNItems();",
          "249:     pages.replaceKey(\"/Count\", QPDFObjectHandle::newInteger(npages));",
          "254:     for (int i = pos; i < npages; ++i)",
          "255:     {",
          "257:     }",
          "258: }",
          "",
          "[Removed Lines]",
          "250:     this->all_pages.erase(this->all_pages.begin() + pos);",
          "251:     assert(this->all_pages.size() == static_cast<size_t>(npages));",
          "252:     this->pageobj_to_pages_pos.erase(page.getObjGen());",
          "253:     assert(this->pageobj_to_pages_pos.size() == static_cast<size_t>(npages));",
          "256:         insertPageobjToPage(this->all_pages.at(i), i, false);",
          "",
          "[Added Lines]",
          "252:     this->m->all_pages.erase(this->m->all_pages.begin() + pos);",
          "253:     assert(this->m->all_pages.size() == static_cast<size_t>(npages));",
          "254:     this->m->pageobj_to_pages_pos.erase(page.getObjGen());",
          "255:     assert(this->m->pageobj_to_pages_pos.size() == static_cast<size_t>(npages));",
          "258:         insertPageobjToPage(this->m->all_pages.at(i), i, false);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "295: {",
          "296:     flattenPagesTree();",
          "297:     std::map<QPDFObjGen, int>::iterator it =",
          "300:     {",
          "301:         setLastObjectDescription(\"page object\", og.getObj(), og.getGen());",
          "304:                       \"page object not referenced in /Pages tree\");",
          "305:     }",
          "306:     return (*it).second;",
          "",
          "[Removed Lines]",
          "298:         this->pageobj_to_pages_pos.find(og);",
          "299:     if (it == this->pageobj_to_pages_pos.end())",
          "302:         throw QPDFExc(qpdf_e_pages, this->file->getName(),",
          "303:                       this->last_object_description, 0,",
          "",
          "[Added Lines]",
          "300:         this->m->pageobj_to_pages_pos.find(og);",
          "301:     if (it == this->m->pageobj_to_pages_pos.end())",
          "304:         throw QPDFExc(qpdf_e_pages, this->m->file->getName(),",
          "305:                       this->m->last_object_description, 0,",
          "",
          "---------------"
        ]
      }
    }
  ]
}