{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d4de9f7b1e9a7864691f4b6a785628749d5c461a",
      "candidate_info": {
        "commit_hash": "d4de9f7b1e9a7864691f4b6a785628749d5c461a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4de9f7b1e9a7864691f4b6a785628749d5c461a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/pcache1.c",
          "src/utf.c"
        ],
        "message": "Fix an obsolete comment and other minor issues from code inspection.\n\nFossilOrigin-Name: cd084427319394386844d6651479256a2fd57a412fccb79ba53172ce76693eb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/pcache1.c||src/pcache1.c",
          "src/utf.c||src/utf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c3932e66040bf4c82727a26a976291fab219e8bc8a6d7579e19304538cc6df18",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1322: static With *withDup(sqlite3 *db, With *p){",
          "1323:   With *pRet = 0;",
          "1324:   if( p ){",
          "1326:     pRet = sqlite3DbMallocZero(db, nByte);",
          "1327:     if( pRet ){",
          "1328:       int i;",
          "",
          "[Removed Lines]",
          "1325:     int nByte = sizeof(*p) + sizeof(p->a[0]) * (p->nCte-1);",
          "",
          "[Added Lines]",
          "1325:     sqlite3_int64 nByte = sizeof(*p) + sizeof(p->a[0]) * (p->nCte-1);",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c"
        ],
        "src/utf.c||src/utf.c": [
          "File: src/utf.c -> src/utf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:     pMem->n &= ~1;",
          "257:   }else{",
          "264:   }",
          "",
          "[Removed Lines]",
          "256:     len = pMem->n * 2 + 1;",
          "263:     len = pMem->n * 2 + 2;",
          "",
          "[Added Lines]",
          "256:     len = 2 * (sqlite3_int64)pMem->n + 1;",
          "263:     len = 2 * (sqlite3_int64)pMem->n + 2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70738712deac70dbadd5692edd6135494eed6a12",
      "candidate_info": {
        "commit_hash": "70738712deac70dbadd5692edd6135494eed6a12",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/70738712deac70dbadd5692edd6135494eed6a12",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved type information display when tracing VDBE execution.\n\nFossilOrigin-Name: ee83d8e30d6f9ca8f1cce653ee094ff151f633f4b6a21dd814ab07e8cfb901eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6fe0367f9a337b7c62886b7771f3ce0642faa13f4e4f3d9a0c848abbab514cd0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ]
      }
    },
    {
      "candidate_hash": "03e025e21716751fb69ec6f5b93735bce3612e37",
      "candidate_info": {
        "commit_hash": "03e025e21716751fb69ec6f5b93735bce3612e37",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/03e025e21716751fb69ec6f5b93735bce3612e37",
        "files": [
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/vdbeaux.c"
        ],
        "message": "Fix a problem with running ALTER TABLE ADD COLUMN statements within a transaction that writes to one or more virtual tables.\n\nFossilOrigin-Name: 31e85fbbc4cfd09a98b4a6dc6624f863816f376c6a4eef1fafc657c8e1abbc36",
        "before_after_code_files": [
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     WHERE rank = (SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*reads'));",
          "60: } {1 {no such cursor: 1}}",
          "62: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: #-------------------------------------------------------------------------",
          "63: reset_db",
          "64: do_execsql_test 2.0 {",
          "65:   CREATE TABLE t0(c0);",
          "66:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "67: }",
          "68: do_execsql_test 2.1.1 {",
          "69:   BEGIN TRANSACTION;",
          "70:   INSERT INTO vt0(c0) VALUES ('xyz');",
          "71: }",
          "72: do_execsql_test 2.1.2 {",
          "73:   ALTER TABLE t0 ADD COLUMN c5;",
          "74: }",
          "75: do_execsql_test 2.1.3 {",
          "76:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "77: }",
          "78: do_execsql_test 2.1.4 {",
          "79:   INSERT INTO vt0(c0) VALUES ('abc');",
          "80:   COMMIT",
          "81: }",
          "82: do_execsql_test 2.1.5 {",
          "83:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "84: }",
          "86: reset_db",
          "87: do_execsql_test 2.2.1 {",
          "88:   CREATE TABLE t0(c0);",
          "89:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "90:   BEGIN TRANSACTION;",
          "91:   INSERT INTO vt0(c0) VALUES ('xyz');",
          "92: }",
          "94: breakpoint",
          "95: do_execsql_test 2.2.2 {",
          "96:   ALTER TABLE t0 RENAME TO t1;",
          "97: }",
          "98: do_execsql_test 2.2.3 {",
          "99:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "100: }",
          "101: do_execsql_test 2.2.4 {",
          "102:   INSERT INTO vt0(c0) VALUES ('abc');",
          "103:   COMMIT;",
          "104: }",
          "105: do_execsql_test 2.2.5 {",
          "106:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "107: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 32fba11ab72f6300391267eaad64e92fa767c289029e668e4bd6c9165acf1487",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:     goto exit_begin_add_column;",
          "436:   }",
          "438:   assert( pTab->addColOffset>0 );",
          "439:   iDb = sqlite3SchemaToIndex(db, pTab->pSchema);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:   sqlite3MayAbort(pParse);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "640:     int opcode = pOp->opcode;",
          "641:     if( opcode==OP_Destroy || opcode==OP_VUpdate || opcode==OP_VRename",
          "642:      || opcode==OP_VDestroy",
          "644:      || ((opcode==OP_Halt || opcode==OP_HaltIfNull)",
          "645:       && ((pOp->p1)!=SQLITE_OK && pOp->p2==OE_Abort))",
          "646:     ){",
          "",
          "[Removed Lines]",
          "643:      || (opcode==OP_Function0 && pOp->p4.pFunc->funcFlags&SQLITE_FUNC_INTERNAL)",
          "",
          "[Added Lines]",
          "643:      || (opcode==OP_ParseSchema && pOp->p4.z==0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f9adee289fcc8de83054332212c90f389609d4a",
      "candidate_info": {
        "commit_hash": "4f9adee289fcc8de83054332212c90f389609d4a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4f9adee289fcc8de83054332212c90f389609d4a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/walker.c",
          "src/window.c",
          "test/filter1.test"
        ],
        "message": "Rework the FILTER clause implementation to share more code with window functions.\n\nFossilOrigin-Name: 5dac8c38dfc3f41c5c8fb49ca35de7fd1b21f269d72e8ba6ba59ed0a4030a54d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/walker.c||src/walker.c",
          "src/window.c||src/window.c",
          "test/filter1.test||test/filter1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 86ab963cc5743867e0535b78a5776e18c13835aa44bf2009f77642df8407cb3f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1028:   assert( !ExprHasProperty(p, EP_WinFunc) || p->y.pWin!=0 || db->mallocFailed );",
          "1029:   assert( p->op!=TK_FUNCTION || ExprHasProperty(p, EP_TokenOnly|EP_Reduced)",
          "1031: #ifdef SQLITE_DEBUG",
          "1032:   if( ExprHasProperty(p, EP_Leaf) && !ExprHasProperty(p, EP_TokenOnly) ){",
          "1033:     assert( p->pLeft==0 );",
          "",
          "[Removed Lines]",
          "1030:           || p->y.pWin==0 || ExprHasProperty(p, EP_WinFunc|EP_Filter) );",
          "",
          "[Added Lines]",
          "1030:           || p->y.pWin==0 || ExprHasProperty(p, EP_WinFunc) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1040:     assert( p->x.pList==0 || p->pRight==0 );",
          "1041:     if( p->pLeft && p->op!=TK_SELECT_COLUMN ) sqlite3ExprDeleteNN(db, p->pLeft);",
          "1042:     if( p->pRight ){",
          "1044:       sqlite3ExprDeleteNN(db, p->pRight);",
          "1045:     }else if( ExprHasProperty(p, EP_xIsSelect) ){",
          "1047:       sqlite3SelectDelete(db, p->x.pSelect);",
          "1048:     }else{",
          "1049:       sqlite3ExprListDelete(db, p->x.pList);",
          "1050: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1059:       }",
          "1060: #endif",
          "1061:     }",
          "",
          "[Removed Lines]",
          "1043:       assert( !ExprHasProperty(p, (EP_WinFunc|EP_Filter)) );",
          "1046:       assert( !ExprHasProperty(p, (EP_WinFunc|EP_Filter)) );",
          "1051:       if( ExprHasProperty(p, (EP_WinFunc|EP_Filter)) ){",
          "1052:         if( ExprHasProperty(p, EP_WinFunc) ){",
          "1053:           assert( p->op==TK_FUNCTION && !ExprHasProperty(p, EP_Filter) );",
          "1054:           sqlite3WindowDelete(db, p->y.pWin);",
          "1055:         }else{",
          "1056:           assert( p->op==TK_FUNCTION || p->op==TK_AGG_FUNCTION );",
          "1057:           sqlite3ExprDeleteNN(db, p->y.pFilter);",
          "1058:         }",
          "",
          "[Added Lines]",
          "1043:       assert( !ExprHasProperty(p, EP_WinFunc) );",
          "1046:       assert( !ExprHasProperty(p, EP_WinFunc) );",
          "1051:       if( ExprHasProperty(p, EP_WinFunc) ){",
          "1052:         sqlite3WindowDelete(db, p->y.pWin);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1273:     }",
          "1277:       zAlloc += dupedExprNodeSize(p, dupFlags);",
          "1278:       if( !ExprHasProperty(pNew, EP_TokenOnly|EP_Leaf) ){",
          "1279:         pNew->pLeft = p->pLeft ?",
          "",
          "[Removed Lines]",
          "1276:     if( ExprHasProperty(pNew, EP_Reduced|EP_TokenOnly|EP_WinFunc|EP_Filter) ){",
          "",
          "[Added Lines]",
          "1270:     if( ExprHasProperty(pNew, EP_Reduced|EP_TokenOnly|EP_WinFunc) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1286:         pNew->y.pWin = sqlite3WindowDup(db, pNew, p->y.pWin);",
          "1287:         assert( ExprHasProperty(pNew, EP_WinFunc) );",
          "1288:       }",
          "1294:       if( pzBuffer ){",
          "",
          "[Removed Lines]",
          "1289:       if( ExprHasProperty(p, EP_Filter) ){",
          "1290:         pNew->y.pFilter = sqlite3ExprDup(db, p->y.pFilter, 0);",
          "1291:         assert( ExprHasProperty(pNew, EP_Filter) );",
          "1292:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1347: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1348:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1349:     assert( pExpr->y.pWin );",
          "1350:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1351:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "1352:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1340:     assert( IsWindowFunc(pExpr) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4852:     return 2;",
          "4853:   }",
          "4854:   if( pA->op!=TK_COLUMN && pA->op!=TK_AGG_COLUMN && pA->u.zToken ){",
          "4856:       if( sqlite3StrICmp(pA->u.zToken,pB->u.zToken)!=0 ) return 2;",
          "4857: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4867:       if( ExprHasProperty(pA,EP_WinFunc) ){",
          "4869:       }",
          "4870: #endif",
          "4871:     }else if( pA->op==TK_NULL ){",
          "",
          "[Removed Lines]",
          "4855:     if( pA->op==TK_FUNCTION ){",
          "4866:       assert( ExprHasProperty(pA,EP_WinFunc)==ExprHasProperty(pB,EP_WinFunc) );",
          "4868:         if( sqlite3WindowCompare(pParse,pA->y.pWin,pB->y.pWin)!=0 ) return 2;",
          "",
          "[Added Lines]",
          "4846:     if( pA->op==TK_FUNCTION || pA->op==TK_AGG_FUNCTION ){",
          "4849:       assert( pA->op==pB->op );",
          "4850:       if( ExprHasProperty(pA,EP_WinFunc)!=ExprHasProperty(pB,EP_WinFunc) ){",
          "4851:         return 2;",
          "4852:       }",
          "4854:         if( sqlite3WindowCompare(pParse, pA->y.pWin, pB->y.pWin, 1)!=0 ){",
          "4855:           return 2;",
          "4856:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4875:     }else if( ALWAYS(pB->u.zToken!=0) && strcmp(pA->u.zToken,pB->u.zToken)!=0 ){",
          "4876:       return 2;",
          "4877:     }",
          "4886:   }",
          "4887:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "4888:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "",
          "[Removed Lines]",
          "4878: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4879:     else if( pA->op==TK_AGG_FUNCTION ){",
          "4880:       assert( ExprHasProperty(pA, EP_WinFunc)==0 );",
          "4881:       if( sqlite3ExprCompare(pParse, pA->y.pFilter, pB->y.pFilter, iTab) ){",
          "4882:         return 2;",
          "4883:       }",
          "4884:     }",
          "4885: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044: }",
          "1046: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "1058:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1060: }",
          "1062:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1064: }",
          "1065: %endif",
          "",
          "[Removed Lines]",
          "1047: %type filter_over {",
          "1048:   struct FunctionTail {",
          "1049:     Window *pWin;",
          "1050:     Expr *pFilter;",
          "1051:   }",
          "1052: }",
          "1053: %destructor filter_over {",
          "1054:   sqlite3WindowDelete(pParse->db, $$.pWin);",
          "1055:   sqlite3ExprDelete(pParse->db, $$.pFilter);",
          "1056: }",
          "1057: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_over(F). {",
          "1059:   sqlite3WindowAttach(pParse, A, F.pFilter, F.pWin);",
          "1061: expr(A) ::= id(X) LP STAR RP filter_over(F). {",
          "1063:   sqlite3WindowAttach(pParse, A, F.pFilter, F.pWin);",
          "",
          "[Added Lines]",
          "1047: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_over(Z). {",
          "1049:   sqlite3WindowAttach(pParse, A, Z);",
          "1051: expr(A) ::= id(X) LP STAR RP filter_over(Z). {",
          "1053:   sqlite3WindowAttach(pParse, A, Z);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1673: %type over_clause {Window*}",
          "1674: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "1676: %type range_or_rows {int}",
          "1678: %type frame_bound {struct FrameBound}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1666: %type filter_over {Window*}",
          "1667: %destructor filter_over {sqlite3WindowDelete(pParse->db, $$);}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1737: %destructor window_clause {sqlite3WindowListDelete(pParse->db, $$);}",
          "1738: window_clause(A) ::= WINDOW windowdefn_list(B). { A = B; }",
          "1743: }",
          "1747: }",
          "1751: }",
          "1753: over_clause(A) ::= OVER LP window(Z) RP. {",
          "",
          "[Removed Lines]",
          "1740: filter_over(F) ::= filter_clause(A) over_clause(B). {",
          "1741:   F.pFilter = A;",
          "1742:   F.pWin = B;",
          "1744: filter_over(F) ::= over_clause(B). {",
          "1745:   F.pFilter = 0;",
          "1746:   F.pWin = B;",
          "1748: filter_over(F) ::= filter_clause(A). {",
          "1749:   F.pFilter = A;",
          "1750:   F.pWin = 0;",
          "",
          "[Added Lines]",
          "1733: filter_over(A) ::= filter_clause(F) over_clause(O). {",
          "1734:   O->pFilter = F;",
          "1735:   A = O;",
          "1737: filter_over(A) ::= over_clause(O). {",
          "1738:   A = O;",
          "1740: filter_over(A) ::= filter_clause(F). {",
          "1741:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1742:   if( A ){",
          "1743:     A->eFrmType = TK_FILTER;",
          "1744:     A->pFilter = F;",
          "1745:   }",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751:       int savedAllowFlags = (pNC->ncFlags & (NC_AllowAgg | NC_AllowWin));",
          "753:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "754:       zId = pExpr->u.zToken;",
          "755:       nId = sqlite3Strlen30(zId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "753:       Window *pWin = (IsWindowFunc(pExpr) ? pExpr->y.pWin : 0);",
          "754: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "827:       if( 0==IN_RENAME_OBJECT ){",
          "828: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "830:         assert( is_agg==0 || (pDef->funcFlags & SQLITE_FUNC_MINMAX)",
          "831:           || (pDef->xValue==0 && pDef->xInverse==0)",
          "832:           || (pDef->xValue && pDef->xInverse && pDef->xSFunc && pDef->xFinalize)",
          "",
          "[Removed Lines]",
          "829:         Window *pWin = (ExprHasProperty(pExpr, EP_WinFunc) ? pExpr->y.pWin : 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "850:           sqlite3ErrorMsg(pParse, \"misuse of %s function %.*s()\",zType,nId,zId);",
          "851:           pNC->nErr++;",
          "852:           is_agg = 0;",
          "854:           sqlite3ErrorMsg(pParse,",
          "855:               \"filter clause may not be used with non-aggregate %.*s()\",",
          "856:               nId, zId",
          "",
          "[Removed Lines]",
          "853:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_Filter) ){",
          "",
          "[Added Lines]",
          "854:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "855:           assert( !IsWindowFunc(pExpr) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "890:       sqlite3WalkExprList(pWalker, pList);",
          "891:       if( is_agg ){",
          "892: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "894:           Select *pSel = pNC->pWinSelect;",
          "895:           if( IN_RENAME_OBJECT==0 ){",
          "897:           }",
          "901:           if( 0==pSel->pWin",
          "903:           ){",
          "904:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "905:             pSel->pWin = pExpr->y.pWin;",
          "",
          "[Removed Lines]",
          "893:         if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "896:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "898:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pPartition);",
          "899:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pOrderBy);",
          "900:           sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "902:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pExpr->y.pWin)",
          "",
          "[Added Lines]",
          "895:         if( pWin ){",
          "898:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "900:           sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "901:           sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "902:           sqlite3WalkExpr(pWalker, pWin->pFilter);",
          "904:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "912:           pExpr->op = TK_AGG_FUNCTION;",
          "913:           pExpr->op2 = 0;",
          "914: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "916: #endif",
          "917:           while( pNC2 && !sqlite3FunctionUsesThisSrc(pExpr, pNC2->pSrcList) ){",
          "918:             pExpr->op2++;",
          "",
          "[Removed Lines]",
          "915:           sqlite3WalkExpr(pWalker, pExpr->y.pFilter);",
          "",
          "[Added Lines]",
          "917:           if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "918:             sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "919:           }",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4404:   assert( *ppMinMax==0 );",
          "4405:   assert( pFunc->op==TK_AGG_FUNCTION );",
          "4407:     return eRet;",
          "4408:   }",
          "4409:   zFunc = pFunc->u.zToken;",
          "",
          "[Removed Lines]",
          "4406:   if( pEList==0 || pEList->nExpr!=1 || ExprHasProperty(pFunc, EP_Filter) ){",
          "",
          "[Added Lines]",
          "4406:   assert( !IsWindowFunc(pFunc) );",
          "4407:   if( pEList==0 || pEList->nExpr!=1 || ExprHasProperty(pFunc, EP_WinFunc) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4452:   if( pExpr->op!=TK_AGG_FUNCTION ) return 0;",
          "4453:   if( NEVER(pAggInfo->nFunc==0) ) return 0;",
          "4454:   if( (pAggInfo->aFunc[0].pFunc->funcFlags&SQLITE_FUNC_COUNT)==0 ) return 0;",
          "4457:   return pTab;",
          "4458: }",
          "",
          "[Removed Lines]",
          "4455:   if( ExprHasProperty(pExpr, EP_Distinct|EP_Filter) ) return 0;",
          "",
          "[Added Lines]",
          "4456:   if( ExprHasProperty(pExpr, EP_Distinct|EP_WinFunc) ) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5332:     int regAgg;",
          "5333:     ExprList *pList = pF->pExpr->x.pList;",
          "5334:     assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );",
          "5337:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5338:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5339:     }",
          "",
          "[Removed Lines]",
          "5335:     if( ExprHasProperty(pF->pExpr, EP_Filter) ){",
          "5336:       Expr *pFilter = pF->pExpr->y.pFilter;",
          "",
          "[Added Lines]",
          "5336:     assert( !IsWindowFunc(pF->pExpr) );",
          "5337:     if( ExprHasProperty(pF->pExpr, EP_WinFunc) ){",
          "5338:       Expr *pFilter = pF->pExpr->y.pWin->pFilter;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6236:       sNC.ncFlags |= NC_InAggFunc;",
          "6237:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6238: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6242:       }",
          "6243: #endif",
          "6244:       sNC.ncFlags &= ~NC_InAggFunc;",
          "",
          "[Removed Lines]",
          "6239:       assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "6240:       if( pExpr->y.pFilter ){",
          "6241:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "",
          "[Added Lines]",
          "6241:       assert( !IsWindowFunc(pExpr) );",
          "6242:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "6243:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pWin->pFilter);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2586: #define IsWindowFunc(p) ( \\",
          "2587:     ExprHasProperty((p), EP_WinFunc) && p->y.pWin->eFrmType!=TK_FILTER \\",
          "2588: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3604: void sqlite3WindowDelete(sqlite3*, Window*);",
          "3605: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3606: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3609: void sqlite3WindowCodeInit(Parse*, Window*);",
          "3610: void sqlite3WindowCodeStep(Parse*, Select*, WhereInfo*, int, int);",
          "3611: int sqlite3WindowRewrite(Parse*, Select*);",
          "",
          "[Removed Lines]",
          "3607: void sqlite3WindowAttach(Parse*, Expr*, Expr*, Window*);",
          "3608: int sqlite3WindowCompare(Parse*, Window*, Window*);",
          "",
          "[Added Lines]",
          "3613: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "3614: int sqlite3WindowCompare(Parse*, Window*, Window*, int);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3619: #else",
          "3620: # define sqlite3WindowDelete(a,b)",
          "3621: # define sqlite3WindowFunctions()",
          "3623: #endif",
          "",
          "[Removed Lines]",
          "3622: # define sqlite3WindowAttach(a,b,c,d)",
          "",
          "[Added Lines]",
          "3628: # define sqlite3WindowAttach(a,b,c)",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:       if( pExpr->pLeft && walkExpr(pWalker, pExpr->pLeft) ) return WRC_Abort;",
          "64:        assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "65:       if( pExpr->pRight ){",
          "67:         pExpr = pExpr->pRight;",
          "68:         continue;",
          "69:       }else if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "71:         if( sqlite3WalkSelect(pWalker, pExpr->x.pSelect) ) return WRC_Abort;",
          "72:       }else{",
          "73:         if( pExpr->x.pList ){",
          "74:           if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "75:         }",
          "76: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "83:         }",
          "84: #endif",
          "85:       }",
          "",
          "[Removed Lines]",
          "66:         assert( !ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) );",
          "70:         assert( !ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) );",
          "77:         if( ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) ){",
          "78:           if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "79:             if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "80:           }else if( ExprHasProperty(pExpr, EP_Filter) ){",
          "81:             if( walkExpr(pWalker, pExpr->y.pFilter) ) return WRC_Abort;",
          "82:           }",
          "",
          "[Added Lines]",
          "66:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "70:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "77:         if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "78:           if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1197:   if( p ){",
          "1198:     assert( p->op==TK_FUNCTION );",
          "1211:     }",
          "1212:   }else{",
          "1213:     sqlite3WindowDelete(pParse->db, pWin);",
          "1215:   }",
          "1216: }",
          "",
          "[Removed Lines]",
          "1196: void sqlite3WindowAttach(Parse *pParse, Expr *p, Expr *pFilter, Window *pWin){",
          "1199:     if( pWin ){",
          "1200:       p->y.pWin = pWin;",
          "1201:       ExprSetProperty(p, EP_WinFunc);",
          "1202:       pWin->pOwner = p;",
          "1203:       if( p->flags & EP_Distinct ){",
          "1204:         sqlite3ErrorMsg(pParse,",
          "1205:            \"DISTINCT is not supported for window functions\");",
          "1206:       }",
          "1207:       pWin->pFilter = pFilter;",
          "1208:     }else if( pFilter ){",
          "1209:       p->y.pFilter = pFilter;",
          "1210:       ExprSetProperty(p, EP_Filter);",
          "1214:     sqlite3ExprDelete(pParse->db, pFilter);",
          "",
          "[Added Lines]",
          "1196: void sqlite3WindowAttach(Parse *pParse, Expr *p, Window *pWin){",
          "1199:     assert( pWin );",
          "1200:     p->y.pWin = pWin;",
          "1201:     ExprSetProperty(p, EP_WinFunc);",
          "1202:     pWin->pOwner = p;",
          "1203:     if( (p->flags & EP_Distinct) && pWin->eFrmType!=TK_FILTER ){",
          "1204:       sqlite3ErrorMsg(pParse,",
          "1205:           \"DISTINCT is not supported for window functions\"",
          "1206:       );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1223:   if( p1->eFrmType!=p2->eFrmType ) return 1;",
          "1224:   if( p1->eStart!=p2->eStart ) return 1;",
          "1225:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "",
          "[Removed Lines]",
          "1222: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2){",
          "",
          "[Added Lines]",
          "1217: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2, int bFilter){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1228:   if( sqlite3ExprCompare(pParse, p1->pEnd, p2->pEnd, -1) ) return 1;",
          "1229:   if( sqlite3ExprListCompare(p1->pPartition, p2->pPartition, -1) ) return 1;",
          "1230:   if( sqlite3ExprListCompare(p1->pOrderBy, p2->pOrderBy, -1) ) return 1;",
          "1231:   return 0;",
          "1232: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1226:   if( bFilter ){",
          "1227:     if( sqlite3ExprCompare(pParse, p1->pFilter, p2->pFilter, -1) ) return 1;",
          "1228:   }",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   SELECT count(*) FILTER (WHERE a!=5) FROM t1",
          "56: } {8}",
          "59:   SELECT min(a) FILTER (WHERE a>3) FROM t1 GROUP BY (a%2) ORDER BY 1;",
          "60: } {4 5}",
          "63: #-------------------------------------------------------------------------",
          "64: # Test some errors:",
          "",
          "[Removed Lines]",
          "58: do_execsql_test 1.6 {",
          "",
          "[Added Lines]",
          "58: do_execsql_test 1.7 {",
          "62: do_execsql_test 1.8 {",
          "63:   CREATE VIEW vv AS",
          "64:   SELECT sum(a) FILTER( WHERE a>9 ),",
          "65:          sum(a) FILTER( WHERE a>8 ),",
          "66:          sum(a) FILTER( WHERE a>7 ),",
          "67:          sum(a) FILTER( WHERE a>6 ),",
          "68:          sum(a) FILTER( WHERE a>5 ),",
          "69:          sum(a) FILTER( WHERE a>4 ),",
          "70:          sum(a) FILTER( WHERE a>3 ),",
          "71:          sum(a) FILTER( WHERE a>2 ),",
          "72:          sum(a) FILTER( WHERE a>1 ),",
          "73:          sum(a) FILTER( WHERE a>0 )",
          "74:   FROM t1;",
          "75:   SELECT * FROM vv;",
          "76: } {{} 9 17 24 30 35 39 42 44 45}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80ac9cb3c034c130957f6f279e8239f6e7bf4ae7",
      "candidate_info": {
        "commit_hash": "80ac9cb3c034c130957f6f279e8239f6e7bf4ae7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/80ac9cb3c034c130957f6f279e8239f6e7bf4ae7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c"
        ],
        "message": "Correctly initialize the loadable extension thunk.\n\nFossilOrigin-Name: 4fca46ded7873d4939d7c6bff363ded41667f2255a4ab624a1a24bebbae733eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9cac5ac145d62117c918539baaa8a3c124230e031842e35fa1ba59f658c99518",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:   sqlite3_create_window_function,",
          "457: #ifdef SQLITE_ENABLE_NORMALIZE",
          "459: #else",
          "461: #endif",
          "462: };",
          "",
          "[Removed Lines]",
          "458:   sqlite3_normalized_sql",
          "460:   0",
          "",
          "[Added Lines]",
          "458:   sqlite3_normalized_sql,",
          "460:   0,",
          "463:   sqlite3_stmt_isexplain,",
          "464:   sqlite3_value_frombind",
          "",
          "---------------"
        ]
      }
    }
  ]
}