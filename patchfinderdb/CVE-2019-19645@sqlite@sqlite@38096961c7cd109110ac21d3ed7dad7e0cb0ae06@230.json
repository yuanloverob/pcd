{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "81506b88b8b286c50940bbba66e6abaac5d64b62",
      "candidate_info": {
        "commit_hash": "81506b88b8b286c50940bbba66e6abaac5d64b62",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/81506b88b8b286c50940bbba66e6abaac5d64b62",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "One of two options on how to address ticket [61c853857f40da49].  In this mode, we back out the documentation change of [https://www.sqlite.org/docsrc/info/07b7749da88d54e5|&#91;07b7749da88d54e5&#93;] and change the core to work as it has been documented to work since 2017, rather than how it has actually worked since 2009.\n\nFossilOrigin-Name: 09cd0c0c6e6c963e0039a733876e5149adb3cd10e9b92699fa1dcb0633e997a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a29f2a7d07beff64e489e8f824babc6228c4a499fadc0ee701caa60a63baadcd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2160:       addrTop = sqlite3VdbeCurrentAddr(v) + 1;",
          "2161:       sqlite3VdbeAddOp3(v, OP_InitCoroutine, regYield, 0, addrTop);",
          "2162:       if( pParse->nErr ) return;",
          "2164:       if( pSelTab==0 ) return;",
          "2165:       assert( p->aCol==0 );",
          "2166:       p->nCol = pSelTab->nCol;",
          "",
          "[Removed Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect);",
          "",
          "[Added Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect, SQLITE_AFF_BLOB);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2424: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "2425:     xAuth = db->xAuth;",
          "2426:     db->xAuth = 0;",
          "2428:     db->xAuth = xAuth;",
          "2429: #else",
          "2431: #endif",
          "2432:     pParse->nTab = n;",
          "2433:     if( pTable->pCheck ){",
          "",
          "[Removed Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "",
          "[Added Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, 0);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2443:        && pParse->nErr==0",
          "2444:        && pTable->nCol==pSel->pEList->nExpr",
          "2445:       ){",
          "2447:       }",
          "2448:     }else if( pSelTab ){",
          "",
          "[Removed Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel);",
          "",
          "[Added Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel, 0);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     }",
          "89:     for(n=0; n<pIdx->nColumn; n++){",
          "90:       i16 x = pIdx->aiColumn[n];",
          "91:       if( x>=0 ){",
          "93:       }else if( x==XN_ROWID ){",
          "95:       }else{",
          "97:         assert( x==XN_EXPR );",
          "98:         assert( pIdx->aColExpr!=0 );",
          "99:         aff = sqlite3ExprAffinity(pIdx->aColExpr->a[n].pExpr);",
          "102:       }",
          "103:     }",
          "104:     pIdx->zColAff[n] = 0;",
          "105:   }",
          "",
          "[Removed Lines]",
          "92:         pIdx->zColAff[n] = pTab->aCol[x].affinity;",
          "94:         pIdx->zColAff[n] = SQLITE_AFF_INTEGER;",
          "96:         char aff;",
          "100:         if( aff==0 ) aff = SQLITE_AFF_BLOB;",
          "101:         pIdx->zColAff[n] = aff;",
          "",
          "[Added Lines]",
          "91:       char aff;",
          "93:         aff = pTab->aCol[x].affinity;",
          "95:         aff = SQLITE_AFF_INTEGER;",
          "101:       if( aff==0 ) aff = SQLITE_AFF_BLOB;",
          "102:       pIdx->zColAff[n] = aff;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2068:         pCol->colFlags |= COLFLAG_HASTYPE;",
          "2069:       }",
          "2070:     }",
          "2072:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "2073:     if( pColl && pCol->zColl==0 ){",
          "2074:       pCol->zColl = sqlite3DbStrDup(db, pColl->zName);",
          "",
          "[Removed Lines]",
          "2071:     if( pCol->affinity==0 ) pCol->affinity = SQLITE_AFF_BLOB;",
          "",
          "[Added Lines]",
          "2072:     if( pCol->affinity==0 ) pCol->affinity = aff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2085:   Table *pTab;",
          "2086:   sqlite3 *db = pParse->db;",
          "2087:   u64 savedFlags;",
          "",
          "[Removed Lines]",
          "2084: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){",
          "",
          "[Added Lines]",
          "2085: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect, char aff){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2101:   pTab->zName = 0;",
          "2102:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "2103:   sqlite3ColumnsFromExprList(pParse, pSelect->pEList, &pTab->nCol, &pTab->aCol);",
          "2105:   pTab->iPKey = -1;",
          "2106:   if( db->mallocFailed ){",
          "2107:     sqlite3DeleteTable(db, pTab);",
          "",
          "[Removed Lines]",
          "2104:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect);",
          "",
          "[Added Lines]",
          "2105:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect, aff);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5195:       Select *pSel = pFrom->pSelect;",
          "5196:       if( pSel ){",
          "5197:         while( pSel->pPrior ) pSel = pSel->pPrior;",
          "5199:       }",
          "5200:     }",
          "5201:   }",
          "",
          "[Removed Lines]",
          "5198:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel);",
          "",
          "[Added Lines]",
          "5199:         sqlite3SelectAddColumnTypeAndCollation(",
          "5200:           pParse, pTab, pSel, SQLITE_AFF_BLOB",
          "5201:         );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3911: void sqlite3CommitInternalChanges(sqlite3*);",
          "3912: void sqlite3DeleteColumnNames(sqlite3*,Table*);",
          "3913: int sqlite3ColumnsFromExprList(Parse*,ExprList*,i16*,Column**);",
          "3916: void sqlite3OpenMasterTable(Parse *, int);",
          "3917: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3918: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "",
          "[Removed Lines]",
          "3914: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*);",
          "3915: Table *sqlite3ResultSetOfSelect(Parse*,Select*);",
          "",
          "[Added Lines]",
          "3914: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*,char);",
          "3915: Table *sqlite3ResultSetOfSelect(Parse*,Select*,char);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "994:       p->pSrc->a[0].pSelect = pSub;",
          "995:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "996:       pSub->selFlags |= SF_Expanded;",
          "998:       if( pTab2==0 ){",
          "999:         rc = SQLITE_NOMEM;",
          "1000:       }else{",
          "",
          "[Removed Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub);",
          "",
          "[Added Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub, SQLITE_AFF_BLOB);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e47d5ca73798e364c09a83abed038ecfbe28e96c",
      "candidate_info": {
        "commit_hash": "e47d5ca73798e364c09a83abed038ecfbe28e96c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e47d5ca73798e364c09a83abed038ecfbe28e96c",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/speed-check.sh"
        ],
        "message": "Add --multithread, --serialized, and --singlethread options to the speed-check.sh test script.\n\nFossilOrigin-Name: c17078af6046ba3cb0d7819c915a800c851d7368e13d149140db2a124df32bab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/speed-check.sh||tool/speed-check.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5ef64b0f55d952c7b0016055eaf6bbc1b5b7afc09a62ee8e5e694ffa9863ac7c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/speed-check.sh||tool/speed-check.sh": [
          "File: tool/speed-check.sh -> tool/speed-check.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     --nomemstat)",
          "66:         SPEEDTEST_OPTS=\"$SPEEDTEST_OPTS $1\"",
          "67:         ;;",
          "68:     --temp)",
          "69:         SPEEDTEST_OPTS=\"$SPEEDTEST_OPTS --temp 6\"",
          "70:         ;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     --multithread)",
          "69:         SPEEDTEST_OPTS=\"$SPEEDTEST_OPTS $1\"",
          "70:         ;;",
          "71:     --singlethread)",
          "72:         SPEEDTEST_OPTS=\"$SPEEDTEST_OPTS $1\"",
          "73:         ;;",
          "74:     --serialized)",
          "75:         SPEEDTEST_OPTS=\"$SPEEDTEST_OPTS $1\"",
          "76:         ;;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "291508f62b9906adf7be3058b296d56edcc5b01f",
      "candidate_info": {
        "commit_hash": "291508f62b9906adf7be3058b296d56edcc5b01f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/291508f62b9906adf7be3058b296d56edcc5b01f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Remove an ALWAYS() that was previously added by check-in [a0819086] but which turns out can sometimes be false.\n\nFossilOrigin-Name: ad8fc5d8b440c49df95328df0408be699dde5a1dbd195b3f1f32e5f765578032",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 74eba2558a81f9e790d95a12a0c5379d4f80b43c8698ef9d6a31ff8d160a53d8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1630:   top = get2byte(&data[hdr+5]);",
          "1632:   if( gap>top ){",
          "1634:       top = 65536;",
          "1635:     }else{",
          "1636:       return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Removed Lines]",
          "1633:     if( top==0 && ALWAYS(pPage->pBt->usableSize==65536) ){",
          "",
          "[Added Lines]",
          "1633:     if( top==0 && pPage->pBt->usableSize==65536 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40d6c827e96737dbdfb5c54c803ee54560876290",
      "candidate_info": {
        "commit_hash": "40d6c827e96737dbdfb5c54c803ee54560876290",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/40d6c827e96737dbdfb5c54c803ee54560876290",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest_data.tcl"
        ],
        "message": "Have wapptest.tcl run at least one threadtest with an SQLITE_ENABLE_MEMORY_MANAGEMENT build.\n\nFossilOrigin-Name: d6131caf6471ad41fa5a28b0067d759ac1cc9dba1170678534488b416f9a1157",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest_data.tcl||test/releasetest_data.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5ea3f6fc88cf66824128aa64f777a7abb4f6ed55f214d7a135f36e306a32487c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:     \"User-Auth\"               tcltest",
          "247:     \"Update-Delete-Limit\"     test",
          "248:     \"Extra-Robustness\"        test",
          "250:     \"No-lookaside\"            test",
          "251:     \"Devkit\"                  test",
          "252:     \"Apple\"                   test",
          "",
          "[Removed Lines]",
          "249:     \"Device-Two\"              test",
          "",
          "[Added Lines]",
          "249:     \"Device-Two\"              \"threadtest test\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ee94147f086fc9cd4bcf2bcdbb1fab6d1d1f921",
      "candidate_info": {
        "commit_hash": "9ee94147f086fc9cd4bcf2bcdbb1fab6d1d1f921",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ee94147f086fc9cd4bcf2bcdbb1fab6d1d1f921",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "New tokens ALWAYS, GENERATED, and STORED used by generated columns should all be fallback tokens.\n\nFossilOrigin-Name: 13fe6978b7de208d2e27460d824f7fc778cf6ea0aabfe566b32bb410b8816f63",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d424f3047b48fc441475137f30a719d2f079390c86fe2617710ddfb05c5e240",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:   CURRENT FOLLOWING PARTITION PRECEDING RANGE UNBOUNDED",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "222: %endif SQLITE_OMIT_WINDOWFUNC",
          "223:   REINDEX RENAME CTIME_KW IF",
          "224:   .",
          "225: %wildcard ANY.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: %ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "224:   GENERATED ALWAYS STORED",
          "225: %endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}