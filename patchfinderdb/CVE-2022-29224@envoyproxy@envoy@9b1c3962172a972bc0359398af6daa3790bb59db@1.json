{
  "cve_id": "CVE-2022-29224",
  "cve_desc": "Envoy is a cloud-native high-performance proxy. Versions of envoy prior to 1.22.1 are subject to a segmentation fault in the GrpcHealthCheckerImpl. Envoy can perform various types of upstream health checking. One of them uses gRPC. Envoy also has a feature which can \u201chold\u201d (prevent removal) upstream hosts obtained via service discovery until configured active health checking fails. If an attacker controls an upstream host and also controls service discovery of that host (via DNS, the EDS API, etc.), an attacker can crash Envoy by forcing removal of the host from service discovery, and then failing the gRPC health check request. This will crash Envoy via a null pointer dereference. Users are advised to upgrade to resolve this vulnerability. Users unable to upgrade may disable gRPC health checking and/or replace it with a different health checking type as a mitigation.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "9b1c3962172a972bc0359398af6daa3790bb59db",
  "patch_info": {
    "commit_hash": "9b1c3962172a972bc0359398af6daa3790bb59db",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/9b1c3962172a972bc0359398af6daa3790bb59db",
    "files": [
      "source/common/upstream/health_checker_impl.cc",
      "test/common/upstream/health_checker_impl_test.cc"
    ],
    "message": "healthcheck: fix grpc inline removal crashes (#749)\n\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
    "before_after_code_files": [
      "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc",
      "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc": [
      "File: source/common/upstream/health_checker_impl.cc -> source/common/upstream/health_checker_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "816:   if (request_encoder_) {",
      "817:     handleFailure(envoy::data::core::v3::NETWORK);",
      "820:   }",
      "822: }",
      "824: bool GrpcHealthCheckerImpl::GrpcActiveHealthCheckSession::isHealthCheckSucceeded(",
      "",
      "[Removed Lines]",
      "818:     expect_reset_ = true;",
      "819:     request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
      "821:   client_->close();",
      "",
      "[Added Lines]",
      "820:     if (request_encoder_ != nullptr) {",
      "821:       expect_reset_ = true;",
      "822:       request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
      "823:     }",
      "824:   }",
      "826:   if (client_ != nullptr) {",
      "827:     client_->close();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "852:   if (end_stream) {",
      "853:     resetState();",
      "854:   } else {",
      "858:   }",
      "861:     client_->close();",
      "862:   }",
      "863: }",
      "",
      "[Removed Lines]",
      "856:     expect_reset_ = true;",
      "857:     request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
      "860:   if (!parent_.reuse_connection_ || goaway) {",
      "",
      "[Added Lines]",
      "864:     if (request_encoder_ != nullptr) {",
      "866:       expect_reset_ = true;",
      "867:       request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
      "868:     }",
      "872:   if (client_ != nullptr && (!parent_.reuse_connection_ || goaway)) {",
      "",
      "---------------"
    ],
    "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc": [
      "File: test/common/upstream/health_checker_impl_test.cc -> test/common/upstream/health_checker_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "4737:   expectHostHealthy(true);",
      "4738: }",
      "4741: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFail) {",
      "4742:   setupHC();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4742: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFailViaRpcRemoveHostInCallback) {",
      "4743:   setupHC();",
      "4744:   cluster_->prioritySet().getMockHostSet(0)->hosts_ = {",
      "4745:       makeTestHost(cluster_->info_, \"tcp://127.0.0.1:80\", simTime())};",
      "4747:   expectSessionCreate();",
      "4748:   expectHealthcheckStart(0);",
      "4749:   EXPECT_CALL(event_logger_, logUnhealthy(_, _, _, true));",
      "4750:   health_checker_->start();",
      "4752:   EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Changed))",
      "4753:       .WillOnce(Invoke([&](HostSharedPtr host, HealthTransition) {",
      "4754:         cluster_->prioritySet().getMockHostSet(0)->hosts_ = {};",
      "4755:         cluster_->prioritySet().runUpdateCallbacks(0, {}, {host});",
      "4756:       }));",
      "4757:   EXPECT_CALL(event_logger_, logEjectUnhealthy(_, _, _));",
      "4758:   test_sessions_[0]->codec_client_->raiseGoAway(Http::GoAwayErrorCode::NoError);",
      "4759:   respondServiceStatus(0, grpc::health::v1::HealthCheckResponse::NOT_SERVING);",
      "4760: }",
      "4763: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFailViaGoawayRemoveHostInCallback) {",
      "4764:   setupHCWithUnhealthyThreshold(/*threshold=*/1);",
      "4765:   cluster_->prioritySet().getMockHostSet(0)->hosts_ = {",
      "4766:       makeTestHost(cluster_->info_, \"tcp://127.0.0.1:80\", simTime())};",
      "4768:   expectSessionCreate();",
      "4769:   expectHealthcheckStart(0);",
      "4770:   EXPECT_CALL(event_logger_, logUnhealthy(_, _, _, true));",
      "4771:   health_checker_->start();",
      "4773:   EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Changed))",
      "4774:       .WillOnce(Invoke([&](HostSharedPtr host, HealthTransition) {",
      "4775:         cluster_->prioritySet().getMockHostSet(0)->hosts_ = {};",
      "4776:         cluster_->prioritySet().runUpdateCallbacks(0, {}, {host});",
      "4777:       }));",
      "4778:   EXPECT_CALL(event_logger_, logEjectUnhealthy(_, _, _));",
      "4779:   test_sessions_[0]->codec_client_->raiseGoAway(Http::GoAwayErrorCode::Other);",
      "4780: }",
      "4783: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFailViaBadResponseRemoveHostInCallback) {",
      "4784:   setupHCWithUnhealthyThreshold(/*threshold=*/1);",
      "4785:   cluster_->prioritySet().getMockHostSet(0)->hosts_ = {",
      "4786:       makeTestHost(cluster_->info_, \"tcp://127.0.0.1:80\", simTime())};",
      "4788:   expectSessionCreate();",
      "4789:   expectHealthcheckStart(0);",
      "4790:   EXPECT_CALL(event_logger_, logUnhealthy(_, _, _, true));",
      "4791:   health_checker_->start();",
      "4793:   EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Changed))",
      "4794:       .WillOnce(Invoke([&](HostSharedPtr host, HealthTransition) {",
      "4795:         cluster_->prioritySet().getMockHostSet(0)->hosts_ = {};",
      "4796:         cluster_->prioritySet().runUpdateCallbacks(0, {}, {host});",
      "4797:       }));",
      "4798:   EXPECT_CALL(event_logger_, logEjectUnhealthy(_, _, _));",
      "4799:   std::unique_ptr<Http::TestResponseHeaderMapImpl> response_headers(",
      "4800:       new Http::TestResponseHeaderMapImpl{{\":status\", \"500\"}});",
      "4801:   test_sessions_[0]->stream_response_callbacks_->decodeHeaders(std::move(response_headers), false);",
      "4802: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "209bc16c5ef2d87816cf488de4a0d085f29c2bf4",
      "candidate_info": {
        "commit_hash": "209bc16c5ef2d87816cf488de4a0d085f29c2bf4",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/209bc16c5ef2d87816cf488de4a0d085f29c2bf4",
        "files": [
          "source/common/upstream/health_checker_impl.cc",
          "test/common/upstream/health_checker_impl_test.cc"
        ],
        "message": "healthcheck: fix grpc inline removal crashes (#749)\n\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
        "before_after_code_files": [
          "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc",
          "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc",
            "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc"
          ],
          "candidate": [
            "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc",
            "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc": [
          "File: source/common/upstream/health_checker_impl.cc -> source/common/upstream/health_checker_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "789:   if (request_encoder_) {",
          "790:     handleFailure(envoy::data::core::v3::NETWORK);",
          "793:   }",
          "795: }",
          "797: bool GrpcHealthCheckerImpl::GrpcActiveHealthCheckSession::isHealthCheckSucceeded(",
          "",
          "[Removed Lines]",
          "791:     expect_reset_ = true;",
          "792:     request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
          "794:   client_->close();",
          "",
          "[Added Lines]",
          "793:     if (request_encoder_ != nullptr) {",
          "794:       expect_reset_ = true;",
          "795:       request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
          "796:     }",
          "797:   }",
          "799:   if (client_ != nullptr) {",
          "800:     client_->close();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "825:   if (end_stream) {",
          "826:     resetState();",
          "827:   } else {",
          "831:   }",
          "834:     client_->close();",
          "835:   }",
          "836: }",
          "",
          "[Removed Lines]",
          "829:     expect_reset_ = true;",
          "830:     request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
          "833:   if (!parent_.reuse_connection_ || goaway) {",
          "",
          "[Added Lines]",
          "837:     if (request_encoder_ != nullptr) {",
          "839:       expect_reset_ = true;",
          "840:       request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
          "841:     }",
          "845:   if (client_ != nullptr && (!parent_.reuse_connection_ || goaway)) {",
          "",
          "---------------"
        ],
        "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc": [
          "File: test/common/upstream/health_checker_impl_test.cc -> test/common/upstream/health_checker_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4529:   expectHostHealthy(true);",
          "4530: }",
          "4533: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFail) {",
          "4534:   setupHC();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4534: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFailViaRpcRemoveHostInCallback) {",
          "4535:   setupHC();",
          "4536:   cluster_->prioritySet().getMockHostSet(0)->hosts_ = {",
          "4537:       makeTestHost(cluster_->info_, \"tcp://127.0.0.1:80\", simTime())};",
          "4539:   expectSessionCreate();",
          "4540:   expectHealthcheckStart(0);",
          "4541:   EXPECT_CALL(event_logger_, logUnhealthy(_, _, _, true));",
          "4542:   health_checker_->start();",
          "4544:   EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Changed))",
          "4545:       .WillOnce(Invoke([&](HostSharedPtr host, HealthTransition) {",
          "4546:         cluster_->prioritySet().getMockHostSet(0)->hosts_ = {};",
          "4547:         cluster_->prioritySet().runUpdateCallbacks(0, {}, {host});",
          "4548:       }));",
          "4549:   EXPECT_CALL(event_logger_, logEjectUnhealthy(_, _, _));",
          "4550:   test_sessions_[0]->codec_client_->raiseGoAway(Http::GoAwayErrorCode::NoError);",
          "4551:   respondServiceStatus(0, grpc::health::v1::HealthCheckResponse::NOT_SERVING);",
          "4552: }",
          "4555: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFailViaGoawayRemoveHostInCallback) {",
          "4556:   setupHCWithUnhealthyThreshold(/*threshold=*/1);",
          "4557:   cluster_->prioritySet().getMockHostSet(0)->hosts_ = {",
          "4558:       makeTestHost(cluster_->info_, \"tcp://127.0.0.1:80\", simTime())};",
          "4560:   expectSessionCreate();",
          "4561:   expectHealthcheckStart(0);",
          "4562:   EXPECT_CALL(event_logger_, logUnhealthy(_, _, _, true));",
          "4563:   health_checker_->start();",
          "4565:   EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Changed))",
          "4566:       .WillOnce(Invoke([&](HostSharedPtr host, HealthTransition) {",
          "4567:         cluster_->prioritySet().getMockHostSet(0)->hosts_ = {};",
          "4568:         cluster_->prioritySet().runUpdateCallbacks(0, {}, {host});",
          "4569:       }));",
          "4570:   EXPECT_CALL(event_logger_, logEjectUnhealthy(_, _, _));",
          "4571:   test_sessions_[0]->codec_client_->raiseGoAway(Http::GoAwayErrorCode::Other);",
          "4572: }",
          "4575: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFailViaBadResponseRemoveHostInCallback) {",
          "4576:   setupHCWithUnhealthyThreshold(/*threshold=*/1);",
          "4577:   cluster_->prioritySet().getMockHostSet(0)->hosts_ = {",
          "4578:       makeTestHost(cluster_->info_, \"tcp://127.0.0.1:80\", simTime())};",
          "4580:   expectSessionCreate();",
          "4581:   expectHealthcheckStart(0);",
          "4582:   EXPECT_CALL(event_logger_, logUnhealthy(_, _, _, true));",
          "4583:   health_checker_->start();",
          "4585:   EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Changed))",
          "4586:       .WillOnce(Invoke([&](HostSharedPtr host, HealthTransition) {",
          "4587:         cluster_->prioritySet().getMockHostSet(0)->hosts_ = {};",
          "4588:         cluster_->prioritySet().runUpdateCallbacks(0, {}, {host});",
          "4589:       }));",
          "4590:   EXPECT_CALL(event_logger_, logEjectUnhealthy(_, _, _));",
          "4591:   std::unique_ptr<Http::TestResponseHeaderMapImpl> response_headers(",
          "4592:       new Http::TestResponseHeaderMapImpl{{\":status\", \"500\"}});",
          "4593:   test_sessions_[0]->stream_response_callbacks_->decodeHeaders(std::move(response_headers), false);",
          "4594: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "580721253b9b43f458bb4ec2e237bea467189cb4",
      "candidate_info": {
        "commit_hash": "580721253b9b43f458bb4ec2e237bea467189cb4",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/580721253b9b43f458bb4ec2e237bea467189cb4",
        "files": [
          "source/common/upstream/health_checker_impl.cc",
          "test/common/upstream/health_checker_impl_test.cc"
        ],
        "message": "healthcheck: fix grpc inline removal crashes (#749)\n\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
        "before_after_code_files": [
          "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc",
          "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc",
            "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc"
          ],
          "candidate": [
            "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc",
            "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc": [
          "File: source/common/upstream/health_checker_impl.cc -> source/common/upstream/health_checker_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:   if (request_encoder_) {",
          "780:     handleFailure(envoy::data::core::v3::NETWORK);",
          "783:   }",
          "785: }",
          "787: bool GrpcHealthCheckerImpl::GrpcActiveHealthCheckSession::isHealthCheckSucceeded(",
          "",
          "[Removed Lines]",
          "781:     expect_reset_ = true;",
          "782:     request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
          "784:   client_->close();",
          "",
          "[Added Lines]",
          "783:     if (request_encoder_ != nullptr) {",
          "784:       expect_reset_ = true;",
          "785:       request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
          "786:     }",
          "787:   }",
          "789:   if (client_ != nullptr) {",
          "790:     client_->close();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "815:   if (end_stream) {",
          "816:     resetState();",
          "817:   } else {",
          "821:   }",
          "824:     client_->close();",
          "825:   }",
          "826: }",
          "",
          "[Removed Lines]",
          "819:     expect_reset_ = true;",
          "820:     request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
          "823:   if (!parent_.reuse_connection_ || goaway) {",
          "",
          "[Added Lines]",
          "827:     if (request_encoder_ != nullptr) {",
          "829:       expect_reset_ = true;",
          "830:       request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
          "831:     }",
          "835:   if (client_ != nullptr && (!parent_.reuse_connection_ || goaway)) {",
          "",
          "---------------"
        ],
        "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc": [
          "File: test/common/upstream/health_checker_impl_test.cc -> test/common/upstream/health_checker_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4528:   expectHostHealthy(true);",
          "4529: }",
          "4532: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFail) {",
          "4533:   setupHC();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4533: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFailViaRpcRemoveHostInCallback) {",
          "4534:   setupHC();",
          "4535:   cluster_->prioritySet().getMockHostSet(0)->hosts_ = {",
          "4536:       makeTestHost(cluster_->info_, \"tcp://127.0.0.1:80\", simTime())};",
          "4538:   expectSessionCreate();",
          "4539:   expectHealthcheckStart(0);",
          "4540:   EXPECT_CALL(event_logger_, logUnhealthy(_, _, _, true));",
          "4541:   health_checker_->start();",
          "4543:   EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Changed))",
          "4544:       .WillOnce(Invoke([&](HostSharedPtr host, HealthTransition) {",
          "4545:         cluster_->prioritySet().getMockHostSet(0)->hosts_ = {};",
          "4546:         cluster_->prioritySet().runUpdateCallbacks(0, {}, {host});",
          "4547:       }));",
          "4548:   EXPECT_CALL(event_logger_, logEjectUnhealthy(_, _, _));",
          "4549:   test_sessions_[0]->codec_client_->raiseGoAway(Http::GoAwayErrorCode::NoError);",
          "4550:   respondServiceStatus(0, grpc::health::v1::HealthCheckResponse::NOT_SERVING);",
          "4551: }",
          "4554: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFailViaGoawayRemoveHostInCallback) {",
          "4555:   setupHCWithUnhealthyThreshold(/*threshold=*/1);",
          "4556:   cluster_->prioritySet().getMockHostSet(0)->hosts_ = {",
          "4557:       makeTestHost(cluster_->info_, \"tcp://127.0.0.1:80\", simTime())};",
          "4559:   expectSessionCreate();",
          "4560:   expectHealthcheckStart(0);",
          "4561:   EXPECT_CALL(event_logger_, logUnhealthy(_, _, _, true));",
          "4562:   health_checker_->start();",
          "4564:   EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Changed))",
          "4565:       .WillOnce(Invoke([&](HostSharedPtr host, HealthTransition) {",
          "4566:         cluster_->prioritySet().getMockHostSet(0)->hosts_ = {};",
          "4567:         cluster_->prioritySet().runUpdateCallbacks(0, {}, {host});",
          "4568:       }));",
          "4569:   EXPECT_CALL(event_logger_, logEjectUnhealthy(_, _, _));",
          "4570:   test_sessions_[0]->codec_client_->raiseGoAway(Http::GoAwayErrorCode::Other);",
          "4571: }",
          "4574: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFailViaBadResponseRemoveHostInCallback) {",
          "4575:   setupHCWithUnhealthyThreshold(/*threshold=*/1);",
          "4576:   cluster_->prioritySet().getMockHostSet(0)->hosts_ = {",
          "4577:       makeTestHost(cluster_->info_, \"tcp://127.0.0.1:80\", simTime())};",
          "4579:   expectSessionCreate();",
          "4580:   expectHealthcheckStart(0);",
          "4581:   EXPECT_CALL(event_logger_, logUnhealthy(_, _, _, true));",
          "4582:   health_checker_->start();",
          "4584:   EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Changed))",
          "4585:       .WillOnce(Invoke([&](HostSharedPtr host, HealthTransition) {",
          "4586:         cluster_->prioritySet().getMockHostSet(0)->hosts_ = {};",
          "4587:         cluster_->prioritySet().runUpdateCallbacks(0, {}, {host});",
          "4588:       }));",
          "4589:   EXPECT_CALL(event_logger_, logEjectUnhealthy(_, _, _));",
          "4590:   std::unique_ptr<Http::TestResponseHeaderMapImpl> response_headers(",
          "4591:       new Http::TestResponseHeaderMapImpl{{\":status\", \"500\"}});",
          "4592:   test_sessions_[0]->stream_response_callbacks_->decodeHeaders(std::move(response_headers), false);",
          "4593: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cac90b833ebf5601a6536984dfddd0c5a37fa71",
      "candidate_info": {
        "commit_hash": "9cac90b833ebf5601a6536984dfddd0c5a37fa71",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/9cac90b833ebf5601a6536984dfddd0c5a37fa71",
        "files": [
          "source/common/upstream/health_checker_impl.cc",
          "test/common/upstream/health_checker_impl_test.cc"
        ],
        "message": "healthcheck: fix grpc inline removal crashes (#749)\n\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>\n\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc",
          "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc",
            "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc"
          ],
          "candidate": [
            "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc",
            "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/upstream/health_checker_impl.cc||source/common/upstream/health_checker_impl.cc": [
          "File: source/common/upstream/health_checker_impl.cc -> source/common/upstream/health_checker_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:   if (request_encoder_) {",
          "780:     handleFailure(envoy::data::core::v3::NETWORK);",
          "783:   }",
          "785: }",
          "787: bool GrpcHealthCheckerImpl::GrpcActiveHealthCheckSession::isHealthCheckSucceeded(",
          "",
          "[Removed Lines]",
          "781:     expect_reset_ = true;",
          "782:     request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
          "784:   client_->close();",
          "",
          "[Added Lines]",
          "783:     if (request_encoder_ != nullptr) {",
          "784:       expect_reset_ = true;",
          "785:       request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
          "786:     }",
          "787:   }",
          "789:   if (client_ != nullptr) {",
          "790:     client_->close();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "815:   if (end_stream) {",
          "816:     resetState();",
          "817:   } else {",
          "821:   }",
          "824:     client_->close();",
          "825:   }",
          "826: }",
          "",
          "[Removed Lines]",
          "819:     expect_reset_ = true;",
          "820:     request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
          "823:   if (!parent_.reuse_connection_ || goaway) {",
          "",
          "[Added Lines]",
          "827:     if (request_encoder_ != nullptr) {",
          "829:       expect_reset_ = true;",
          "830:       request_encoder_->getStream().resetStream(Http::StreamResetReason::LocalReset);",
          "831:     }",
          "835:   if (client_ != nullptr && (!parent_.reuse_connection_ || goaway)) {",
          "",
          "---------------"
        ],
        "test/common/upstream/health_checker_impl_test.cc||test/common/upstream/health_checker_impl_test.cc": [
          "File: test/common/upstream/health_checker_impl_test.cc -> test/common/upstream/health_checker_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4528:   expectHostHealthy(true);",
          "4529: }",
          "4532: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFail) {",
          "4533:   setupHC();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4533: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFailViaRpcRemoveHostInCallback) {",
          "4534:   setupHC();",
          "4535:   cluster_->prioritySet().getMockHostSet(0)->hosts_ = {",
          "4536:       makeTestHost(cluster_->info_, \"tcp://127.0.0.1:80\", simTime())};",
          "4538:   expectSessionCreate();",
          "4539:   expectHealthcheckStart(0);",
          "4540:   EXPECT_CALL(event_logger_, logUnhealthy(_, _, _, true));",
          "4541:   health_checker_->start();",
          "4543:   EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Changed))",
          "4544:       .WillOnce(Invoke([&](HostSharedPtr host, HealthTransition) {",
          "4545:         cluster_->prioritySet().getMockHostSet(0)->hosts_ = {};",
          "4546:         cluster_->prioritySet().runUpdateCallbacks(0, {}, {host});",
          "4547:       }));",
          "4548:   EXPECT_CALL(event_logger_, logEjectUnhealthy(_, _, _));",
          "4549:   test_sessions_[0]->codec_client_->raiseGoAway(Http::GoAwayErrorCode::NoError);",
          "4550:   respondServiceStatus(0, grpc::health::v1::HealthCheckResponse::NOT_SERVING);",
          "4551: }",
          "4554: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFailViaGoawayRemoveHostInCallback) {",
          "4555:   setupHCWithUnhealthyThreshold(/*threshold=*/1);",
          "4556:   cluster_->prioritySet().getMockHostSet(0)->hosts_ = {",
          "4557:       makeTestHost(cluster_->info_, \"tcp://127.0.0.1:80\", simTime())};",
          "4559:   expectSessionCreate();",
          "4560:   expectHealthcheckStart(0);",
          "4561:   EXPECT_CALL(event_logger_, logUnhealthy(_, _, _, true));",
          "4562:   health_checker_->start();",
          "4564:   EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Changed))",
          "4565:       .WillOnce(Invoke([&](HostSharedPtr host, HealthTransition) {",
          "4566:         cluster_->prioritySet().getMockHostSet(0)->hosts_ = {};",
          "4567:         cluster_->prioritySet().runUpdateCallbacks(0, {}, {host});",
          "4568:       }));",
          "4569:   EXPECT_CALL(event_logger_, logEjectUnhealthy(_, _, _));",
          "4570:   test_sessions_[0]->codec_client_->raiseGoAway(Http::GoAwayErrorCode::Other);",
          "4571: }",
          "4574: TEST_F(GrpcHealthCheckerImplTest, GrpcHealthFailViaBadResponseRemoveHostInCallback) {",
          "4575:   setupHCWithUnhealthyThreshold(/*threshold=*/1);",
          "4576:   cluster_->prioritySet().getMockHostSet(0)->hosts_ = {",
          "4577:       makeTestHost(cluster_->info_, \"tcp://127.0.0.1:80\", simTime())};",
          "4579:   expectSessionCreate();",
          "4580:   expectHealthcheckStart(0);",
          "4581:   EXPECT_CALL(event_logger_, logUnhealthy(_, _, _, true));",
          "4582:   health_checker_->start();",
          "4584:   EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Changed))",
          "4585:       .WillOnce(Invoke([&](HostSharedPtr host, HealthTransition) {",
          "4586:         cluster_->prioritySet().getMockHostSet(0)->hosts_ = {};",
          "4587:         cluster_->prioritySet().runUpdateCallbacks(0, {}, {host});",
          "4588:       }));",
          "4589:   EXPECT_CALL(event_logger_, logEjectUnhealthy(_, _, _));",
          "4590:   std::unique_ptr<Http::TestResponseHeaderMapImpl> response_headers(",
          "4591:       new Http::TestResponseHeaderMapImpl{{\":status\", \"500\"}});",
          "4592:   test_sessions_[0]->stream_response_callbacks_->decodeHeaders(std::move(response_headers), false);",
          "4593: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}