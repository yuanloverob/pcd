{
  "cve_id": "CVE-2021-29522",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. The `tf.raw_ops.Conv3DBackprop*` operations fail to validate that the input tensors are not empty. In turn, this would result in a division by 0. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/a91bb59769f19146d5a0c20060244378e878f140/tensorflow/core/kernels/conv_grad_ops_3d.cc#L430-L450) does not check that the divisor used in computing the shard size is not zero. Thus, if attacker controls the input sizes, they can trigger a denial of service via a division by zero error. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "311403edbc9816df80274bd1ea8b3c0c0f22c3fa",
  "patch_info": {
    "commit_hash": "311403edbc9816df80274bd1ea8b3c0c0f22c3fa",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/311403edbc9816df80274bd1ea8b3c0c0f22c3fa",
    "files": [
      "tensorflow/core/kernels/conv_grad_ops_3d.cc"
    ],
    "message": "Eliminate a division by 0 in 3D convolutions.\n\nAlso prevent a CHECK failed introduced in the most recent change.\n\nPiperOrigin-RevId: 369322073\nChange-Id: I4f609c028f89565fb2b49c3fdd20b63496582bae",
    "before_after_code_files": [
      "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc": [
      "File: tensorflow/core/kernels/conv_grad_ops_3d.cc -> tensorflow/core/kernels/conv_grad_ops_3d.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:       input_shape = context->input(0).shape();",
      "240:     }",
      "242:     OP_REQUIRES(",
      "243:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
      "244:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "242:     OP_REQUIRES(context, input_shape.dims() == 5,",
      "243:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
      "244:     OP_REQUIRES(",
      "245:         context, filter_shape.dims() == 5,",
      "246:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
      "247:     OP_REQUIRES(",
      "248:         context, out_backprop_shape.dims() == 5,",
      "249:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "360:       input_shape = context->input(0).shape();",
      "361:     }",
      "363:     OP_REQUIRES(",
      "364:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
      "365:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "371:     OP_REQUIRES(context, input_shape.dims() == 5,",
      "372:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
      "373:     OP_REQUIRES(",
      "374:         context, filter_shape.dims() == 5,",
      "375:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
      "376:     OP_REQUIRES(",
      "377:         context, out_backprop_shape.dims() == 5,",
      "378:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "445:     const bool use_parallel_contraction = dims.batch_size == 1;",
      "447:     const size_t shard_size =",
      "448:         use_parallel_contraction",
      "449:             ? 1",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "463:     OP_REQUIRES(",
      "464:         context, work_unit_size > 0,",
      "465:         errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"",
      "466:                                 \"must all have at least 1 element\"));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "724:       filter_shape = context->input(1).shape();",
      "725:     }",
      "727:     OP_REQUIRES(",
      "728:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
      "729:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "748:     OP_REQUIRES(context, input_shape.dims() == 5,",
      "749:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
      "750:     OP_REQUIRES(",
      "751:         context, filter_shape.dims() == 5,",
      "752:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
      "753:     OP_REQUIRES(",
      "754:         context, out_backprop_shape.dims() == 5,",
      "755:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "850:       filter_shape = context->input(1).shape();",
      "851:     }",
      "853:     OP_REQUIRES(",
      "854:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
      "855:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "882:     OP_REQUIRES(context, input_shape.dims() == 5,",
      "883:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
      "884:     OP_REQUIRES(",
      "885:         context, filter_shape.dims() == 5,",
      "886:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
      "887:     OP_REQUIRES(",
      "888:         context, out_backprop_shape.dims() == 5,",
      "889:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "937:     const int64 work_unit_size = size_A + size_B + size_C;",
      "939:     const size_t shard_size =",
      "940:         (target_working_set_size + work_unit_size - 1) / work_unit_size;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "976:     OP_REQUIRES(",
      "977:         context, work_unit_size > 0,",
      "978:         errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"",
      "979:                                 \"must all have at least 1 element\"));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "00098c35b388da38903c7a83db8defa859e311ad",
      "candidate_info": {
        "commit_hash": "00098c35b388da38903c7a83db8defa859e311ad",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/00098c35b388da38903c7a83db8defa859e311ad",
        "files": [
          "tensorflow/core/kernels/conv_grad_ops_3d.cc"
        ],
        "message": "Eliminate a division by 0 in 3D convolutions.",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc": [
          "File: tensorflow/core/kernels/conv_grad_ops_3d.cc -> tensorflow/core/kernels/conv_grad_ops_3d.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:       input_shape = context->input(0).shape();",
          "239:     }",
          "241:     ConvBackpropDimensions dims;",
          "242:     OP_REQUIRES_OK(context, ConvBackpropComputeDimensions(",
          "243:                                 \"Conv3DBackpropInputOp\", /*num_spatial_dims=*/3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "242:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "243:     OP_REQUIRES(",
          "244:         context, filter_shape.dims() == 5,",
          "245:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "246:     OP_REQUIRES(",
          "247:         context, out_backprop_shape.dims() == 5,",
          "248:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "249:     OP_REQUIRES(",
          "250:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "251:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "252:                                 \"number of channels. Got \",",
          "253:                                 input_shape.dim_size(4), \" for input and \",",
          "254:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "255:     OP_REQUIRES(",
          "256:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "257:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "258:                                 \"same number of channels. Got \",",
          "259:                                 out_backprop_shape.dim_size(4),",
          "260:                                 \" for out_backprop and \",",
          "261:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:       input_shape = context->input(0).shape();",
          "346:     }",
          "348:     ConvBackpropDimensions dims;",
          "349:     OP_REQUIRES_OK(context, ConvBackpropComputeDimensions(",
          "350:                                 \"Conv3DBackpropInputOp\", /*num_spatial_dims=*/3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "371:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "372:     OP_REQUIRES(",
          "373:         context, filter_shape.dims() == 5,",
          "374:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "375:     OP_REQUIRES(",
          "376:         context, out_backprop_shape.dims() == 5,",
          "377:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "378:     OP_REQUIRES(",
          "379:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "380:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "381:                                 \"number of channels. Got \",",
          "382:                                 input_shape.dim_size(4), \" for input and \",",
          "383:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "384:     OP_REQUIRES(",
          "385:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "386:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "387:                                 \"same number of channels. Got \",",
          "388:                                 out_backprop_shape.dim_size(4),",
          "389:                                 \" for out_backprop and \",",
          "390:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "416:     const bool use_parallel_contraction = dims.batch_size == 1;",
          "418:     const size_t shard_size =",
          "419:         use_parallel_contraction",
          "420:             ? 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "462:     OP_REQUIRES(",
          "463:         context, work_unit_size > 0,",
          "464:         errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"",
          "465:                                 \"must all have at least 1 element\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "695:       filter_shape = context->input(1).shape();",
          "696:     }",
          "698:     ConvBackpropDimensions dims;",
          "699:     OP_REQUIRES_OK(context,",
          "700:                    ConvBackpropComputeDimensions(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747: <<<<<<< HEAD",
          "748: =======",
          "749:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "750:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "751:     OP_REQUIRES(",
          "752:         context, filter_shape.dims() == 5,",
          "753:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "754:     OP_REQUIRES(",
          "755:         context, out_backprop_shape.dims() == 5,",
          "756:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "757:     OP_REQUIRES(",
          "758:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "759:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "760:                                 \"number of channels. Got \",",
          "761:                                 input_shape.dim_size(4), \" for input and \",",
          "762:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "763:     OP_REQUIRES(",
          "764:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "765:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "766:                                 \"same number of channels. Got \",",
          "767:                                 out_backprop_shape.dim_size(4),",
          "768:                                 \" for out_backprop and \",",
          "769:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "771: >>>>>>> 311403edbc9 (Eliminate a division by 0 in 3D convolutions.)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "807:       filter_shape = context->input(1).shape();",
          "808:     }",
          "810:     ConvBackpropDimensions dims;",
          "811:     OP_REQUIRES_OK(context,",
          "812:                    ConvBackpropComputeDimensions(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "884: <<<<<<< HEAD",
          "885: =======",
          "886:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "887:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "888:     OP_REQUIRES(",
          "889:         context, filter_shape.dims() == 5,",
          "890:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "891:     OP_REQUIRES(",
          "892:         context, out_backprop_shape.dims() == 5,",
          "893:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "894:     OP_REQUIRES(",
          "895:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "896:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "897:                                 \"number of channels. Got \",",
          "898:                                 input_shape.dim_size(4), \" for input and \",",
          "899:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "900:     OP_REQUIRES(",
          "901:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "902:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "903:                                 \"same number of channels. Got \",",
          "904:                                 out_backprop_shape.dim_size(4),",
          "905:                                 \" for out_backprop and \",",
          "906:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "908: >>>>>>> 311403edbc9 (Eliminate a division by 0 in 3D convolutions.)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "880:     const int64 work_unit_size = size_A + size_B + size_C;",
          "882:     const size_t shard_size =",
          "883:         (target_working_set_size + work_unit_size - 1) / work_unit_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "981:     OP_REQUIRES(",
          "982:         context, work_unit_size > 0,",
          "983:         errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"",
          "984:                                 \"must all have at least 1 element\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ec246e2d68702655ded527a339b31b6bbf80927",
      "candidate_info": {
        "commit_hash": "4ec246e2d68702655ded527a339b31b6bbf80927",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/4ec246e2d68702655ded527a339b31b6bbf80927",
        "files": [
          "tensorflow/core/kernels/conv_grad_ops_3d.cc"
        ],
        "message": "Eliminate a division by 0 in 3D convolutions.",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc": [
          "File: tensorflow/core/kernels/conv_grad_ops_3d.cc -> tensorflow/core/kernels/conv_grad_ops_3d.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:       input_shape = context->input(0).shape();",
          "240:     }",
          "242:     ConvBackpropDimensions dims;",
          "243:     OP_REQUIRES_OK(context, ConvBackpropComputeDimensions(",
          "244:                                 \"Conv3DBackpropInputOp\", /*num_spatial_dims=*/3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "243:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "244:     OP_REQUIRES(",
          "245:         context, filter_shape.dims() == 5,",
          "246:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "247:     OP_REQUIRES(",
          "248:         context, out_backprop_shape.dims() == 5,",
          "249:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "250:     OP_REQUIRES(",
          "251:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "252:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "253:                                 \"number of channels. Got \",",
          "254:                                 input_shape.dim_size(4), \" for input and \",",
          "255:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "256:     OP_REQUIRES(",
          "257:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "258:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "259:                                 \"same number of channels. Got \",",
          "260:                                 out_backprop_shape.dim_size(4),",
          "261:                                 \" for out_backprop and \",",
          "262:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346:       input_shape = context->input(0).shape();",
          "347:     }",
          "349:     ConvBackpropDimensions dims;",
          "350:     OP_REQUIRES_OK(context, ConvBackpropComputeDimensions(",
          "351:                                 \"Conv3DBackpropInputOp\", /*num_spatial_dims=*/3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "372:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "373:     OP_REQUIRES(",
          "374:         context, filter_shape.dims() == 5,",
          "375:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "376:     OP_REQUIRES(",
          "377:         context, out_backprop_shape.dims() == 5,",
          "378:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "379:     OP_REQUIRES(",
          "380:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "381:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "382:                                 \"number of channels. Got \",",
          "383:                                 input_shape.dim_size(4), \" for input and \",",
          "384:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "385:     OP_REQUIRES(",
          "386:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "387:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "388:                                 \"same number of channels. Got \",",
          "389:                                 out_backprop_shape.dim_size(4),",
          "390:                                 \" for out_backprop and \",",
          "391:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "417:     const bool use_parallel_contraction = dims.batch_size == 1;",
          "419:     const size_t shard_size =",
          "420:         use_parallel_contraction",
          "421:             ? 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463:     OP_REQUIRES(",
          "464:         context, work_unit_size > 0,",
          "465:         errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"",
          "466:                                 \"must all have at least 1 element\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "696:       filter_shape = context->input(1).shape();",
          "697:     }",
          "699:     ConvBackpropDimensions dims;",
          "700:     OP_REQUIRES_OK(context,",
          "701:                    ConvBackpropComputeDimensions(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748: <<<<<<< HEAD",
          "749: =======",
          "750:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "751:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "752:     OP_REQUIRES(",
          "753:         context, filter_shape.dims() == 5,",
          "754:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "755:     OP_REQUIRES(",
          "756:         context, out_backprop_shape.dims() == 5,",
          "757:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "758:     OP_REQUIRES(",
          "759:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "760:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "761:                                 \"number of channels. Got \",",
          "762:                                 input_shape.dim_size(4), \" for input and \",",
          "763:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "764:     OP_REQUIRES(",
          "765:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "766:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "767:                                 \"same number of channels. Got \",",
          "768:                                 out_backprop_shape.dim_size(4),",
          "769:                                 \" for out_backprop and \",",
          "770:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "772: >>>>>>> 311403edbc9 (Eliminate a division by 0 in 3D convolutions.)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "808:       filter_shape = context->input(1).shape();",
          "809:     }",
          "811:     ConvBackpropDimensions dims;",
          "812:     OP_REQUIRES_OK(context,",
          "813:                    ConvBackpropComputeDimensions(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885: <<<<<<< HEAD",
          "886: =======",
          "887:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "888:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "889:     OP_REQUIRES(",
          "890:         context, filter_shape.dims() == 5,",
          "891:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "892:     OP_REQUIRES(",
          "893:         context, out_backprop_shape.dims() == 5,",
          "894:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "895:     OP_REQUIRES(",
          "896:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "897:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "898:                                 \"number of channels. Got \",",
          "899:                                 input_shape.dim_size(4), \" for input and \",",
          "900:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "901:     OP_REQUIRES(",
          "902:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "903:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "904:                                 \"same number of channels. Got \",",
          "905:                                 out_backprop_shape.dim_size(4),",
          "906:                                 \" for out_backprop and \",",
          "907:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "909: >>>>>>> 311403edbc9 (Eliminate a division by 0 in 3D convolutions.)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "881:     const int64 work_unit_size = size_A + size_B + size_C;",
          "883:     const size_t shard_size =",
          "884:         (target_working_set_size + work_unit_size - 1) / work_unit_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "982:     OP_REQUIRES(",
          "983:         context, work_unit_size > 0,",
          "984:         errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"",
          "985:                                 \"must all have at least 1 element\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "518b73f51f838e730859fbd8782600b1bb47ada0",
      "candidate_info": {
        "commit_hash": "518b73f51f838e730859fbd8782600b1bb47ada0",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/518b73f51f838e730859fbd8782600b1bb47ada0",
        "files": [
          "tensorflow/core/kernels/conv_grad_ops_3d.cc"
        ],
        "message": "Eliminate a division by 0 in 3D convolutions.",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc": [
          "File: tensorflow/core/kernels/conv_grad_ops_3d.cc -> tensorflow/core/kernels/conv_grad_ops_3d.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:       input_shape = context->input(0).shape();",
          "237:     }",
          "239:     ConvBackpropDimensions dims;",
          "240:     OP_REQUIRES_OK(context, ConvBackpropComputeDimensions(",
          "241:                                 \"Conv3DBackpropInputOp\", /*num_spatial_dims=*/3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "240:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "241:     OP_REQUIRES(",
          "242:         context, filter_shape.dims() == 5,",
          "243:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "244:     OP_REQUIRES(",
          "245:         context, out_backprop_shape.dims() == 5,",
          "246:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "247:     OP_REQUIRES(",
          "248:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "249:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "250:                                 \"number of channels. Got \",",
          "251:                                 input_shape.dim_size(4), \" for input and \",",
          "252:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "253:     OP_REQUIRES(",
          "254:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "255:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "256:                                 \"same number of channels. Got \",",
          "257:                                 out_backprop_shape.dim_size(4),",
          "258:                                 \" for out_backprop and \",",
          "259:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:       input_shape = context->input(0).shape();",
          "343:     }",
          "345:     ConvBackpropDimensions dims;",
          "346:     OP_REQUIRES_OK(context, ConvBackpropComputeDimensions(",
          "347:                                 \"Conv3DBackpropInputOp\", /*num_spatial_dims=*/3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "368:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "369:     OP_REQUIRES(",
          "370:         context, filter_shape.dims() == 5,",
          "371:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "372:     OP_REQUIRES(",
          "373:         context, out_backprop_shape.dims() == 5,",
          "374:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "375:     OP_REQUIRES(",
          "376:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "377:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "378:                                 \"number of channels. Got \",",
          "379:                                 input_shape.dim_size(4), \" for input and \",",
          "380:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "381:     OP_REQUIRES(",
          "382:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "383:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "384:                                 \"same number of channels. Got \",",
          "385:                                 out_backprop_shape.dim_size(4),",
          "386:                                 \" for out_backprop and \",",
          "387:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "413:     const bool use_parallel_contraction = dims.batch_size == 1;",
          "415:     const size_t shard_size =",
          "416:         use_parallel_contraction",
          "417:             ? 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:     OP_REQUIRES(",
          "460:         context, work_unit_size > 0,",
          "461:         errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"",
          "462:                                 \"must all have at least 1 element\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "692:       filter_shape = context->input(1).shape();",
          "693:     }",
          "695:     ConvBackpropDimensions dims;",
          "696:     OP_REQUIRES_OK(context,",
          "697:                    ConvBackpropComputeDimensions(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744: <<<<<<< HEAD",
          "745: =======",
          "746:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "747:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "748:     OP_REQUIRES(",
          "749:         context, filter_shape.dims() == 5,",
          "750:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "751:     OP_REQUIRES(",
          "752:         context, out_backprop_shape.dims() == 5,",
          "753:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "754:     OP_REQUIRES(",
          "755:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "756:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "757:                                 \"number of channels. Got \",",
          "758:                                 input_shape.dim_size(4), \" for input and \",",
          "759:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "760:     OP_REQUIRES(",
          "761:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "762:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "763:                                 \"same number of channels. Got \",",
          "764:                                 out_backprop_shape.dim_size(4),",
          "765:                                 \" for out_backprop and \",",
          "766:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "768: >>>>>>> 311403edbc9 (Eliminate a division by 0 in 3D convolutions.)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "804:       filter_shape = context->input(1).shape();",
          "805:     }",
          "807:     ConvBackpropDimensions dims;",
          "808:     OP_REQUIRES_OK(context,",
          "809:                    ConvBackpropComputeDimensions(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "881: <<<<<<< HEAD",
          "882: =======",
          "883:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "884:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "885:     OP_REQUIRES(",
          "886:         context, filter_shape.dims() == 5,",
          "887:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "888:     OP_REQUIRES(",
          "889:         context, out_backprop_shape.dims() == 5,",
          "890:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "891:     OP_REQUIRES(",
          "892:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "893:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "894:                                 \"number of channels. Got \",",
          "895:                                 input_shape.dim_size(4), \" for input and \",",
          "896:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "897:     OP_REQUIRES(",
          "898:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "899:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "900:                                 \"same number of channels. Got \",",
          "901:                                 out_backprop_shape.dim_size(4),",
          "902:                                 \" for out_backprop and \",",
          "903:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "905: >>>>>>> 311403edbc9 (Eliminate a division by 0 in 3D convolutions.)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "877:     const int64 work_unit_size = size_A + size_B + size_C;",
          "879:     const size_t shard_size =",
          "880:         (target_working_set_size + work_unit_size - 1) / work_unit_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "978:     OP_REQUIRES(",
          "979:         context, work_unit_size > 0,",
          "980:         errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"",
          "981:                                 \"must all have at least 1 element\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b8b8145abf396866ff5e98100dcbd7635554662",
      "candidate_info": {
        "commit_hash": "4b8b8145abf396866ff5e98100dcbd7635554662",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/4b8b8145abf396866ff5e98100dcbd7635554662",
        "files": [
          "tensorflow/core/kernels/conv_grad_ops_3d.cc"
        ],
        "message": "CherryPick2.5 error: could not apply 311403edbc9... Eliminate a division by 0 in 3D convolutions",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc": [
          "File: tensorflow/core/kernels/conv_grad_ops_3d.cc -> tensorflow/core/kernels/conv_grad_ops_3d.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:       input_shape = context->input(0).shape();",
          "240:     }",
          "242:     ConvBackpropDimensions dims;",
          "243:     OP_REQUIRES_OK(context, ConvBackpropComputeDimensions(",
          "244:                                 \"Conv3DBackpropInputOp\", /*num_spatial_dims=*/3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "243:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "244:     OP_REQUIRES(",
          "245:         context, filter_shape.dims() == 5,",
          "246:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "247:     OP_REQUIRES(",
          "248:         context, out_backprop_shape.dims() == 5,",
          "249:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "250:     OP_REQUIRES(",
          "251:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "252:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "253:                                 \"number of channels. Got \",",
          "254:                                 input_shape.dim_size(4), \" for input and \",",
          "255:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "256:     OP_REQUIRES(",
          "257:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "258:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "259:                                 \"same number of channels. Got \",",
          "260:                                 out_backprop_shape.dim_size(4),",
          "261:                                 \" for out_backprop and \",",
          "262:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346:       input_shape = context->input(0).shape();",
          "347:     }",
          "349:     ConvBackpropDimensions dims;",
          "350:     OP_REQUIRES_OK(context, ConvBackpropComputeDimensions(",
          "351:                                 \"Conv3DBackpropInputOp\", /*num_spatial_dims=*/3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "372:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "373:     OP_REQUIRES(",
          "374:         context, filter_shape.dims() == 5,",
          "375:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "376:     OP_REQUIRES(",
          "377:         context, out_backprop_shape.dims() == 5,",
          "378:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "379:     OP_REQUIRES(",
          "380:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "381:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "382:                                 \"number of channels. Got \",",
          "383:                                 input_shape.dim_size(4), \" for input and \",",
          "384:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "385:     OP_REQUIRES(",
          "386:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "387:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "388:                                 \"same number of channels. Got \",",
          "389:                                 out_backprop_shape.dim_size(4),",
          "390:                                 \" for out_backprop and \",",
          "391:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "417:     const bool use_parallel_contraction = dims.batch_size == 1;",
          "419:     const size_t shard_size =",
          "420:         use_parallel_contraction",
          "421:             ? 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463:     OP_REQUIRES(",
          "464:         context, work_unit_size > 0,",
          "465:         errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"",
          "466:                                 \"must all have at least 1 element\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "696:       filter_shape = context->input(1).shape();",
          "697:     }",
          "699:     ConvBackpropDimensions dims;",
          "700:     OP_REQUIRES_OK(context,",
          "701:                    ConvBackpropComputeDimensions(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "749:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "750:     OP_REQUIRES(",
          "751:         context, filter_shape.dims() == 5,",
          "752:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "753:     OP_REQUIRES(",
          "754:         context, out_backprop_shape.dims() == 5,",
          "755:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "756:     OP_REQUIRES(",
          "757:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "758:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "759:                                 \"number of channels. Got \",",
          "760:                                 input_shape.dim_size(4), \" for input and \",",
          "761:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "762:     OP_REQUIRES(",
          "763:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "764:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "765:                                 \"same number of channels. Got \",",
          "766:                                 out_backprop_shape.dim_size(4),",
          "767:                                 \" for out_backprop and \",",
          "768:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "808:       filter_shape = context->input(1).shape();",
          "809:     }",
          "811:     ConvBackpropDimensions dims;",
          "812:     OP_REQUIRES_OK(context,",
          "813:                    ConvBackpropComputeDimensions(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "882:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "883:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "884:     OP_REQUIRES(",
          "885:         context, filter_shape.dims() == 5,",
          "886:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "887:     OP_REQUIRES(",
          "888:         context, out_backprop_shape.dims() == 5,",
          "889:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "890:     OP_REQUIRES(",
          "891:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "892:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "893:                                 \"number of channels. Got \",",
          "894:                                 input_shape.dim_size(4), \" for input and \",",
          "895:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "896:     OP_REQUIRES(",
          "897:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "898:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "899:                                 \"same number of channels. Got \",",
          "900:                                 out_backprop_shape.dim_size(4),",
          "901:                                 \" for out_backprop and \",",
          "902:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "881:     const int64 work_unit_size = size_A + size_B + size_C;",
          "883:     const size_t shard_size =",
          "884:         (target_working_set_size + work_unit_size - 1) / work_unit_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "976:     OP_REQUIRES(",
          "977:         context, work_unit_size > 0,",
          "978:         errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"",
          "979:                                 \"must all have at least 1 element\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9fe8aecb8df6f8b4a1f43c8b50390ffa54cec27",
      "candidate_info": {
        "commit_hash": "d9fe8aecb8df6f8b4a1f43c8b50390ffa54cec27",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d9fe8aecb8df6f8b4a1f43c8b50390ffa54cec27",
        "files": [
          "tensorflow/core/kernels/conv_grad_ops_3d.cc"
        ],
        "message": "Eliminate a division by 0 in 3D convolutions.",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc": [
          "File: tensorflow/core/kernels/conv_grad_ops_3d.cc -> tensorflow/core/kernels/conv_grad_ops_3d.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:       input_shape = context->input(0).shape();",
          "240:     }",
          "242:     ConvBackpropDimensions dims;",
          "243:     OP_REQUIRES_OK(context, ConvBackpropComputeDimensions(",
          "244:                                 \"Conv3DBackpropInputOp\", /*num_spatial_dims=*/3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "243:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "244:     OP_REQUIRES(",
          "245:         context, filter_shape.dims() == 5,",
          "246:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "247:     OP_REQUIRES(",
          "248:         context, out_backprop_shape.dims() == 5,",
          "249:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "250:     OP_REQUIRES(",
          "251:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "252:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "253:                                 \"number of channels. Got \",",
          "254:                                 input_shape.dim_size(4), \" for input and \",",
          "255:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "256:     OP_REQUIRES(",
          "257:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "258:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "259:                                 \"same number of channels. Got \",",
          "260:                                 out_backprop_shape.dim_size(4),",
          "261:                                 \" for out_backprop and \",",
          "262:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346:       input_shape = context->input(0).shape();",
          "347:     }",
          "349:     ConvBackpropDimensions dims;",
          "350:     OP_REQUIRES_OK(context, ConvBackpropComputeDimensions(",
          "351:                                 \"Conv3DBackpropInputOp\", /*num_spatial_dims=*/3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "372:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "373:     OP_REQUIRES(",
          "374:         context, filter_shape.dims() == 5,",
          "375:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "376:     OP_REQUIRES(",
          "377:         context, out_backprop_shape.dims() == 5,",
          "378:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "379:     OP_REQUIRES(",
          "380:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "381:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "382:                                 \"number of channels. Got \",",
          "383:                                 input_shape.dim_size(4), \" for input and \",",
          "384:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "385:     OP_REQUIRES(",
          "386:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "387:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "388:                                 \"same number of channels. Got \",",
          "389:                                 out_backprop_shape.dim_size(4),",
          "390:                                 \" for out_backprop and \",",
          "391:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "417:     const bool use_parallel_contraction = dims.batch_size == 1;",
          "419:     const size_t shard_size =",
          "420:         use_parallel_contraction",
          "421:             ? 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463:     OP_REQUIRES(",
          "464:         context, work_unit_size > 0,",
          "465:         errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"",
          "466:                                 \"must all have at least 1 element\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "696:       filter_shape = context->input(1).shape();",
          "697:     }",
          "699:     ConvBackpropDimensions dims;",
          "700:     OP_REQUIRES_OK(context,",
          "701:                    ConvBackpropComputeDimensions(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748: <<<<<<< HEAD",
          "749: =======",
          "750:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "751:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "752:     OP_REQUIRES(",
          "753:         context, filter_shape.dims() == 5,",
          "754:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "755:     OP_REQUIRES(",
          "756:         context, out_backprop_shape.dims() == 5,",
          "757:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "758:     OP_REQUIRES(",
          "759:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "760:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "761:                                 \"number of channels. Got \",",
          "762:                                 input_shape.dim_size(4), \" for input and \",",
          "763:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "764:     OP_REQUIRES(",
          "765:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "766:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "767:                                 \"same number of channels. Got \",",
          "768:                                 out_backprop_shape.dim_size(4),",
          "769:                                 \" for out_backprop and \",",
          "770:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "772: >>>>>>> 311403edbc9 (Eliminate a division by 0 in 3D convolutions.)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "808:       filter_shape = context->input(1).shape();",
          "809:     }",
          "811:     ConvBackpropDimensions dims;",
          "812:     OP_REQUIRES_OK(context,",
          "813:                    ConvBackpropComputeDimensions(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885: <<<<<<< HEAD",
          "886: =======",
          "887:     OP_REQUIRES(context, input_shape.dims() == 5,",
          "888:                 errors::InvalidArgument(\"input tensor must have 5 dimensions\"));",
          "889:     OP_REQUIRES(",
          "890:         context, filter_shape.dims() == 5,",
          "891:         errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));",
          "892:     OP_REQUIRES(",
          "893:         context, out_backprop_shape.dims() == 5,",
          "894:         errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));",
          "895:     OP_REQUIRES(",
          "896:         context, input_shape.dim_size(4) == filter_shape.dim_size(3),",
          "897:         errors::InvalidArgument(\"input and filter_sizes must have the same \"",
          "898:                                 \"number of channels. Got \",",
          "899:                                 input_shape.dim_size(4), \" for input and \",",
          "900:                                 filter_shape.dim_size(3), \" for filter_sizes\"));",
          "901:     OP_REQUIRES(",
          "902:         context, out_backprop_shape.dim_size(4) == filter_shape.dim_size(4),",
          "903:         errors::InvalidArgument(\"out_backprop and filter_sizes must have the \"",
          "904:                                 \"same number of channels. Got \",",
          "905:                                 out_backprop_shape.dim_size(4),",
          "906:                                 \" for out_backprop and \",",
          "907:                                 filter_shape.dim_size(4), \" for filter_sizes\"));",
          "909: >>>>>>> 311403edbc9 (Eliminate a division by 0 in 3D convolutions.)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "881:     const int64 work_unit_size = size_A + size_B + size_C;",
          "883:     const size_t shard_size =",
          "884:         (target_working_set_size + work_unit_size - 1) / work_unit_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "982:     OP_REQUIRES(",
          "983:         context, work_unit_size > 0,",
          "984:         errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"",
          "985:                                 \"must all have at least 1 element\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}