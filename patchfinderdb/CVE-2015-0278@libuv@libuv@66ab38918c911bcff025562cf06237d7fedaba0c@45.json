{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "525dbb5e31be95774e00c89cff613d7a80d55d9a",
      "candidate_info": {
        "commit_hash": "525dbb5e31be95774e00c89cff613d7a80d55d9a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/525dbb5e31be95774e00c89cff613d7a80d55d9a",
        "files": [
          "include/uv.h",
          "src/unix/udp.c",
          "src/uv-common.c",
          "src/uv-common.h",
          "src/win/udp.c",
          "test/benchmark-udp-pummel.c",
          "test/test-getsockname.c",
          "test/test-ref.c",
          "test/test-udp-ipv6.c",
          "test/test-udp-multicast-join.c",
          "test/test-udp-multicast-ttl.c",
          "test/test-udp-open.c",
          "test/test-udp-options.c",
          "test/test-udp-send-and-recv.c"
        ],
        "message": "include: uv_udp_bind{6} now takes sockaddr_in*\n\nPassing or returning structs as values makes life hard for people that\nwork with libuv through a foreign function interface. Switch to a\npointer-based approach.\n\nFixes #684.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/udp.c||src/unix/udp.c",
          "src/uv-common.c||src/uv-common.c",
          "src/uv-common.h||src/uv-common.h",
          "src/win/udp.c||src/win/udp.c",
          "test/benchmark-udp-pummel.c||test/benchmark-udp-pummel.c",
          "test/test-getsockname.c||test/test-getsockname.c",
          "test/test-ref.c||test/test-ref.c",
          "test/test-udp-ipv6.c||test/test-udp-ipv6.c",
          "test/test-udp-multicast-join.c||test/test-udp-multicast-join.c",
          "test/test-udp-multicast-ttl.c||test/test-udp-multicast-ttl.c",
          "test/test-udp-open.c||test/test-udp-open.c",
          "test/test-udp-options.c||test/test-udp-options.c",
          "test/test-udp-send-and-recv.c||test/test-udp-send-and-recv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "893: UV_EXTERN int uv_udp_bind(uv_udp_t* handle, struct sockaddr_in addr,",
          "894:     unsigned flags);",
          "",
          "[Added Lines]",
          "893: UV_EXTERN int uv_udp_bind(uv_udp_t* handle,",
          "894:                           const struct sockaddr_in* addr,",
          "895:                           unsigned flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "910: UV_EXTERN int uv_udp_getsockname(uv_udp_t* handle, struct sockaddr* name,",
          "911:     int* namelen);",
          "",
          "[Removed Lines]",
          "907: UV_EXTERN int uv_udp_bind6(uv_udp_t* handle, struct sockaddr_in6 addr,",
          "908:     unsigned flags);",
          "",
          "[Added Lines]",
          "908: UV_EXTERN int uv_udp_bind6(uv_udp_t* handle,",
          "909:                            const struct sockaddr_in6* addr,",
          "910:                            unsigned flags);",
          "",
          "---------------"
        ],
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305: }",
          "313:   int err;",
          "314:   int yes;",
          "315:   int fd;",
          "",
          "[Removed Lines]",
          "308: static int uv__bind(uv_udp_t* handle,",
          "309:                     int domain,",
          "310:                     struct sockaddr* addr,",
          "311:                     socklen_t len,",
          "312:                     unsigned flags) {",
          "",
          "[Added Lines]",
          "308: int uv__udp_bind(uv_udp_t* handle,",
          "309:                  const struct sockaddr* addr,",
          "310:                  unsigned int addrlen,",
          "311:                  unsigned int flags) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:     return -EINVAL;",
          "326:     return -EINVAL;",
          "328:   fd = handle->io_watcher.fd;",
          "329:   if (fd == -1) {",
          "331:     if (fd == -1)",
          "332:       return -errno;",
          "333:     handle->io_watcher.fd = fd;",
          "",
          "[Removed Lines]",
          "325:   if ((flags & UV_UDP_IPV6ONLY) && domain != AF_INET6)",
          "330:     fd = uv__socket(domain, SOCK_DGRAM, 0);",
          "",
          "[Added Lines]",
          "324:   if ((flags & UV_UDP_IPV6ONLY) && addr->sa_family != AF_INET6)",
          "329:     fd = uv__socket(addr->sa_family, SOCK_DGRAM, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "350: #endif",
          "351:   }",
          "354:     err = -errno;",
          "355:     goto out;",
          "356:   }",
          "",
          "[Removed Lines]",
          "353:   if (bind(fd, addr, len) == -1) {",
          "",
          "[Added Lines]",
          "352:   if (bind(fd, addr, addrlen)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "397:     abort();",
          "398:   }",
          "401: }",
          "",
          "[Removed Lines]",
          "400:   return uv__bind(handle, domain, (struct sockaddr*)&taddr, addrlen, 0);",
          "",
          "[Added Lines]",
          "399:   return uv__udp_bind(handle, (const struct sockaddr*) &taddr, addrlen, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "452: }",
          "473: int uv_udp_open(uv_udp_t* handle, uv_os_sock_t sock) {",
          "474:   int err;",
          "",
          "[Removed Lines]",
          "455: int uv__udp_bind(uv_udp_t* handle, struct sockaddr_in addr, unsigned flags) {",
          "456:   return uv__bind(handle,",
          "457:                   AF_INET,",
          "458:                   (struct sockaddr*)&addr,",
          "459:                   sizeof addr,",
          "460:                   flags);",
          "461: }",
          "464: int uv__udp_bind6(uv_udp_t* handle, struct sockaddr_in6 addr, unsigned flags) {",
          "465:   return uv__bind(handle,",
          "466:                   AF_INET6,",
          "467:                   (struct sockaddr*)&addr,",
          "468:                   sizeof addr,",
          "469:                   flags);",
          "470: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203: int uv_udp_bind(uv_udp_t* handle,",
          "205:                 unsigned int flags) {",
          "210: }",
          "213: int uv_udp_bind6(uv_udp_t* handle,",
          "215:                  unsigned int flags) {",
          "220: }",
          "",
          "[Removed Lines]",
          "204:                 struct sockaddr_in addr,",
          "206:   if (handle->type != UV_UDP || addr.sin_family != AF_INET)",
          "207:     return UV_EINVAL;",
          "208:   else",
          "209:     return uv__udp_bind(handle, addr, flags);",
          "214:                  struct sockaddr_in6 addr,",
          "216:   if (handle->type != UV_UDP || addr.sin6_family != AF_INET6)",
          "217:     return UV_EINVAL;",
          "218:   else",
          "219:     return uv__udp_bind6(handle, addr, flags);",
          "",
          "[Added Lines]",
          "204:                 const struct sockaddr_in* addr,",
          "206:   if (handle->type == UV_UDP && addr->sin_family == AF_INET) {",
          "207:     return uv__udp_bind(handle,",
          "208:                         (const struct sockaddr*) addr,",
          "209:                         sizeof(*addr),",
          "210:                         flags);",
          "211:   }",
          "212:   return UV_EINVAL;",
          "217:                  const struct sockaddr_in6* addr,",
          "219:   if (handle->type == UV_UDP && addr->sin6_family == AF_INET6) {",
          "220:     return uv__udp_bind(handle,",
          "221:                         (const struct sockaddr*) addr,",
          "222:                         sizeof(*addr),",
          "223:                         flags);",
          "224:   }",
          "225:   return UV_EINVAL;",
          "",
          "---------------"
        ],
        "src/uv-common.h||src/uv-common.h": [
          "File: src/uv-common.h -> src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:                  const struct sockaddr* addr,",
          "64:                  unsigned int addrlen);",
          "69: int uv__tcp_connect(uv_connect_t* req,",
          "70:                    uv_tcp_t* handle,",
          "71:                    const struct sockaddr* addr,",
          "72:                    unsigned int addrlen,",
          "73:                    uv_connect_cb cb);",
          "75: int uv__udp_send(uv_udp_send_t* req,",
          "76:                  uv_udp_t* handle,",
          "77:                  uv_buf_t bufs[],",
          "",
          "[Removed Lines]",
          "66: int uv__udp_bind(uv_udp_t* handle, struct sockaddr_in addr, unsigned flags);",
          "67: int uv__udp_bind6(uv_udp_t* handle, struct sockaddr_in6 addr, unsigned flags);",
          "",
          "[Added Lines]",
          "72: int uv__udp_bind(uv_udp_t* handle,",
          "73:                  const struct sockaddr* addr,",
          "74:                  unsigned int  addrlen,",
          "75:                  unsigned int flags);",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167: }",
          "175:   int r;",
          "176:   int err;",
          "177:   DWORD no = 0;",
          "181:     return ERROR_INVALID_PARAMETER;",
          "182:   }",
          "184:   if (handle->socket == INVALID_SOCKET) {",
          "186:     if (sock == INVALID_SOCKET) {",
          "187:       return WSAGetLastError();",
          "188:     }",
          "191:     if (err) {",
          "192:       closesocket(sock);",
          "193:       return err;",
          "194:     }",
          "197:       handle->flags |= UV_HANDLE_IPV6;",
          "198:   }",
          "",
          "[Removed Lines]",
          "170: static int uv__bind(uv_udp_t* handle,",
          "171:                     int family,",
          "172:                     struct sockaddr* addr,",
          "173:                     int addrsize,",
          "174:                     unsigned int flags) {",
          "179:   if ((flags & UV_UDP_IPV6ONLY) && family != AF_INET6) {",
          "185:     SOCKET sock = socket(family, SOCK_DGRAM, 0);",
          "190:     err = uv_udp_set_socket(handle->loop, handle, sock, family);",
          "196:     if (family == AF_INET6)",
          "200:   if (family == AF_INET6 && !(flags & UV_UDP_IPV6ONLY)) {",
          "",
          "[Added Lines]",
          "170: static int uv_udp_try_bind(uv_udp_t* handle,",
          "171:                            const struct sockaddr* addr,",
          "172:                            unsigned int addrlen,",
          "173:                            unsigned int flags) {",
          "178:   if ((flags & UV_UDP_IPV6ONLY) && addr->sa_family != AF_INET6) {",
          "184:     SOCKET sock = socket(addr->sa_family, SOCK_DGRAM, 0);",
          "189:     err = uv_udp_set_socket(handle->loop, handle, sock, addr->sa_family);",
          "195:     if (addr->sa_family == AF_INET6)",
          "199:   if (addr->sa_family == AF_INET6 && !(flags & UV_UDP_IPV6ONLY)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:                sizeof no);",
          "212:   }",
          "215:   if (r == SOCKET_ERROR) {",
          "216:     return WSAGetLastError();",
          "217:   }",
          "",
          "[Removed Lines]",
          "214:   r = bind(handle->socket, addr, addrsize);",
          "",
          "[Added Lines]",
          "213:   r = bind(handle->socket, addr, addrlen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222: }",
          "255: static void uv_udp_queue_recv(uv_loop_t* loop, uv_udp_t* handle) {",
          "256:   uv_req_t* req;",
          "257:   uv_buf_t buf;",
          "",
          "[Removed Lines]",
          "225: int uv__udp_bind(uv_udp_t* handle,",
          "226:                  struct sockaddr_in addr,",
          "227:                  unsigned int flags) {",
          "228:   int err;",
          "230:   err = uv__bind(handle,",
          "231:                  AF_INET,",
          "232:                  (struct sockaddr*) &addr,",
          "233:                  sizeof(addr),",
          "234:                  flags);",
          "236:   return uv_translate_sys_error(err);",
          "237: }",
          "240: int uv__udp_bind6(uv_udp_t* handle,",
          "241:                   struct sockaddr_in6 addr,",
          "242:                   unsigned int flags) {",
          "243:   int err;",
          "245:   err = uv__bind(handle,",
          "246:                  AF_INET6,",
          "247:                  (struct sockaddr*) &addr,",
          "248:                  sizeof(addr),",
          "249:                  flags);",
          "251:   return uv_translate_sys_error(err);",
          "252: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "355:   }",
          "357:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "359:     if (err)",
          "360:       return err;",
          "361:   }",
          "",
          "[Removed Lines]",
          "358:     err = uv_udp_bind(handle, uv_addr_ip4_any_, 0);",
          "",
          "[Added Lines]",
          "327:     err = uv_udp_try_bind(handle,",
          "328:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "329:                           sizeof(uv_addr_ip4_any_),",
          "330:                           0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "433:   int err;",
          "435:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "437:     if (err)",
          "438:       return err;",
          "439:   }",
          "",
          "[Removed Lines]",
          "436:     err = uv_udp_bind(handle, uv_addr_ip4_any_, 0);",
          "",
          "[Added Lines]",
          "408:     err = uv_udp_try_bind(handle,",
          "409:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "410:                           sizeof(uv_addr_ip4_any_),",
          "411:                           0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "453:   int err;",
          "455:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "457:     if (err)",
          "458:       return err;",
          "459:   }",
          "",
          "[Removed Lines]",
          "456:     err = uv_udp_bind6(handle, uv_addr_ip6_any_, 0);",
          "",
          "[Added Lines]",
          "431:     err = uv_udp_try_bind(handle,",
          "432:                           (const struct sockaddr*) &uv_addr_ip6_any_,",
          "433:                           sizeof(uv_addr_ip6_any_),",
          "434:                           0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "604:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "606:     if (err)",
          "607:       return uv_translate_sys_error(err);",
          "608:   }",
          "",
          "[Removed Lines]",
          "605:     err = uv__udp_bind(handle, uv_addr_ip4_any_, 0);",
          "",
          "[Added Lines]",
          "583:     err = uv_udp_try_bind(handle,",
          "584:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "585:                           sizeof(uv_addr_ip4_any_),",
          "586:                           0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "652:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "654:     if (err)",
          "655:       return uv_translate_sys_error(err);",
          "656:   }",
          "",
          "[Removed Lines]",
          "653:     err = uv__udp_bind(handle, uv_addr_ip4_any_, 0);",
          "",
          "[Added Lines]",
          "634:     err = uv_udp_try_bind(handle,",
          "635:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "636:                           sizeof(uv_addr_ip4_any_),",
          "637:                           0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "701:                                                                               \\",
          "703:     if (!(handle->flags & UV_HANDLE_BOUND)) {                                 \\",
          "705:       if (err)                                                                \\",
          "706:         return uv_translate_sys_error(err);                                   \\",
          "707:     }                                                                         \\",
          "",
          "[Removed Lines]",
          "704:       err = uv__udp_bind(handle, uv_addr_ip4_any_, 0);                        \\",
          "",
          "[Added Lines]",
          "688:       err = uv_udp_try_bind(handle,                                           \\",
          "689:                             (const struct sockaddr*) &uv_addr_ip4_any_,       \\",
          "690:                             sizeof(uv_addr_ip4_any_),                         \\",
          "691:                             0);                                               \\",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "749: #undef VALIDATE_TTL",
          "750: #undef VALIDATE_MULTICAST_TTL",
          "751: #undef VALIDATE_MULTICAST_LOOP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744: int uv__udp_bind(uv_udp_t* handle,",
          "745:                  const struct sockaddr* addr,",
          "746:                  unsigned int addrlen,",
          "747:                  unsigned int flags) {",
          "748:   int err;",
          "750:   err = uv_udp_try_bind(handle, addr, addrlen, flags);",
          "751:   if (err)",
          "752:     return uv_translate_sys_error(err);",
          "754:   return 0;",
          "755: }",
          "",
          "---------------"
        ],
        "test/benchmark-udp-pummel.c||test/benchmark-udp-pummel.c": [
          "File: test/benchmark-udp-pummel.c -> test/benchmark-udp-pummel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:     struct sockaddr_in addr;",
          "175:     ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", BASE_PORT + i, &addr));",
          "176:     ASSERT(0 == uv_udp_init(loop, &s->udp_handle));",
          "178:     ASSERT(0 == uv_udp_recv_start(&s->udp_handle, alloc_cb, recv_cb));",
          "179:     uv_unref((uv_handle_t*)&s->udp_handle);",
          "180:   }",
          "",
          "[Removed Lines]",
          "177:     ASSERT(0 == uv_udp_bind(&s->udp_handle, addr, 0));",
          "",
          "[Added Lines]",
          "177:     ASSERT(0 == uv_udp_bind(&s->udp_handle, &addr, 0));",
          "",
          "---------------"
        ],
        "test/test-getsockname.c||test/test-getsockname.c": [
          "File: test/test-getsockname.c -> test/test-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     return 1;",
          "280:   }",
          "283:   if (r) {",
          "284:     fprintf(stderr, \"Bind error\\n\");",
          "285:     return 1;",
          "",
          "[Removed Lines]",
          "282:   r = uv_udp_bind(&udpServer, addr, 0);",
          "",
          "[Added Lines]",
          "282:   r = uv_udp_bind(&udpServer, &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-ref.c||test/test-ref.c": [
          "File: test/test-ref.c -> test/test-ref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:   uv_udp_t h;",
          "303:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "304:   uv_udp_init(uv_default_loop(), &h);",
          "306:   uv_udp_recv_start(&h, (uv_alloc_cb)fail_cb, (uv_udp_recv_cb)fail_cb);",
          "307:   uv_unref((uv_handle_t*)&h);",
          "308:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "305:   uv_udp_bind(&h, addr, 0);",
          "",
          "[Added Lines]",
          "305:   uv_udp_bind(&h, &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-udp-ipv6.c||test/test-udp-ipv6.c": [
          "File: test/test-udp-ipv6.c -> test/test-udp-ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   r = uv_udp_init(uv_default_loop(), &server);",
          "109:   ASSERT(r == 0);",
          "112:   ASSERT(r == 0);",
          "114:   r = uv_udp_recv_start(&server, alloc_cb, recv_cb);",
          "",
          "[Removed Lines]",
          "111:   r = uv_udp_bind6(&server, addr6, bind_flags);",
          "",
          "[Added Lines]",
          "111:   r = uv_udp_bind6(&server, &addr6, bind_flags);",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-join.c||test/test-udp-multicast-join.c": [
          "File: test/test-udp-multicast-join.c -> test/test-udp-multicast-join.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:   ASSERT(r == 0);",
          "115:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "114:   r = uv_udp_bind(&client, addr, 0);",
          "",
          "[Added Lines]",
          "114:   r = uv_udp_bind(&client, &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-ttl.c||test/test-udp-multicast-ttl.c": [
          "File: test/test-udp-multicast-ttl.c -> test/test-udp-multicast-ttl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   ASSERT(r == 0);",
          "65:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", 0, &addr));",
          "67:   ASSERT(r == 0);",
          "69:   r = uv_udp_set_multicast_ttl(&server, 32);",
          "",
          "[Removed Lines]",
          "66:   r = uv_udp_bind(&server, addr, 0);",
          "",
          "[Added Lines]",
          "66:   r = uv_udp_bind(&server, &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-udp-open.c||test/test-udp-open.c": [
          "File: test/test-udp-open.c -> test/test-udp-open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:   r = uv_udp_open(&client, sock);",
          "141:   ASSERT(r == 0);",
          "144:   ASSERT(r == 0);",
          "146:   r = uv_udp_recv_start(&client, alloc_cb, recv_cb);",
          "",
          "[Removed Lines]",
          "143:   r = uv_udp_bind(&client, addr, 0);",
          "",
          "[Added Lines]",
          "143:   r = uv_udp_bind(&client, &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-udp-options.c||test/test-udp-options.c": [
          "File: test/test-udp-options.c -> test/test-udp-options.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   ASSERT(r == 0);",
          "49:   r = uv_udp_set_broadcast(&h, 1);",
          "",
          "[Removed Lines]",
          "46:   r = uv_udp_bind(&h, addr, 0);",
          "",
          "[Added Lines]",
          "46:   r = uv_udp_bind(&h, &addr, 0);",
          "",
          "---------------"
        ],
        "test/test-udp-send-and-recv.c||test/test-udp-send-and-recv.c": [
          "File: test/test-udp-send-and-recv.c -> test/test-udp-send-and-recv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   r = uv_udp_init(uv_default_loop(), &server);",
          "176:   ASSERT(r == 0);",
          "179:   ASSERT(r == 0);",
          "181:   r = uv_udp_recv_start(&server, alloc_cb, sv_recv_cb);",
          "",
          "[Removed Lines]",
          "178:   r = uv_udp_bind(&server, addr, 0);",
          "",
          "[Added Lines]",
          "178:   r = uv_udp_bind(&server, &addr, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfba45d2855688145fe1bba23cb4bb02f0beb29c",
      "candidate_info": {
        "commit_hash": "bfba45d2855688145fe1bba23cb4bb02f0beb29c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/bfba45d2855688145fe1bba23cb4bb02f0beb29c",
        "files": [
          "src/unix/process.c"
        ],
        "message": "linux: include grp.h for setgroups()",
        "before_after_code_files": [
          "src/unix/process.c||src/unix/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [
            "src/unix/process.c||src/unix/process.c"
          ],
          "candidate": [
            "src/unix/process.c||src/unix/process.c"
          ]
        }
      },
      "candidate_diff": {
        "src/unix/process.c||src/unix/process.c": [
          "File: src/unix/process.c -> src/unix/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: extern char **environ;",
          "41: #endif",
          "44: static QUEUE* uv__process_queue(uv_loop_t* loop, int pid) {",
          "45:   assert(pid > 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #ifdef __linux__",
          "44: # include <grp.h>",
          "45: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ece8fb85ff73d9db9028743760044fe058cc38c",
      "candidate_info": {
        "commit_hash": "1ece8fb85ff73d9db9028743760044fe058cc38c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1ece8fb85ff73d9db9028743760044fe058cc38c",
        "files": [
          "src/win/tcp.c"
        ],
        "message": "windows: return bind error immediately when implicitly binding\n\nIf a TCP handle is bound automatically when calling uv_listen or\nuv_connect, there is a remote possibility that it fails, return\nthe error if so.",
        "before_after_code_files": [
          "src/win/tcp.c||src/win/tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:                           0);",
          "540:     if (err)",
          "541:       return err;",
          "542:   }",
          "544:   if (!handle->func_acceptex) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:     if (handle->flags & UV_HANDLE_BIND_ERROR)",
          "543:       return handle->bind_error;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "725:     err = uv_tcp_try_bind(handle, bind_addr, addrlen, 0);",
          "726:     if (err)",
          "727:       return err;",
          "728:   }",
          "730:   if (!handle->func_connectex) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "730:     if (handle->flags & UV_HANDLE_BIND_ERROR)",
          "731:       return handle->bind_error;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "244546781033d21aa48f60392cf4d4fcb48fae14",
      "candidate_info": {
        "commit_hash": "244546781033d21aa48f60392cf4d4fcb48fae14",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/244546781033d21aa48f60392cf4d4fcb48fae14",
        "files": [
          "README.md",
          "android-configure",
          "gyp_uv",
          "gyp_uv.py",
          "vcbuild.bat"
        ],
        "message": "build: fix windows smp build with gyp\n\nGyp will try a parallel build if it detect the system has >1 processor.\nThis functionality depends on the Python \"multiprocessing\" package. The\nmultiprocessing package on Windows requires that the top-level module is\nimportable as a module, see:\n\n  http://docs.python.org/2/library/multiprocessing.html#windows\n\nThis fixes issue #984.",
        "before_after_code_files": [
          "vcbuild.bat||vcbuild.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "vcbuild.bat||vcbuild.bat": [
          "File: vcbuild.bat -> vcbuild.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: :have_gyp",
          "93: if not defined PYTHON set PYTHON=\"python\"",
          "95: if errorlevel 1 goto create-msvs-files-failed",
          "96: if not exist uv.sln goto create-msvs-files-failed",
          "97: echo Project files generated.",
          "",
          "[Removed Lines]",
          "94: %PYTHON% gyp_uv -Dtarget_arch=%target_arch% -Dlibrary=%library%",
          "",
          "[Added Lines]",
          "94: %PYTHON% gyp_uv.py -Dtarget_arch=%target_arch% -Dlibrary=%library%",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ab5ee2f398b133e39e85aaf8a7788977ea9aa8d",
      "candidate_info": {
        "commit_hash": "9ab5ee2f398b133e39e85aaf8a7788977ea9aa8d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/9ab5ee2f398b133e39e85aaf8a7788977ea9aa8d",
        "files": [
          "include/uv.h"
        ],
        "message": "include: document pipe path truncation behavior\n\nDocument the fact that the maximum path length for UNIX domain socket\npaths is much less than _POSIX_PATH_MAX.\n\nFor most file systems, _POSIX_PATH_MAX is 1024 or 4096 bytes while\n`sizeof(sockaddr_un.sun_path)` is typically between 92 and 108 bytes.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ]
      }
    }
  ]
}