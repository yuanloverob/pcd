{
  "cve_id": "CVE-2020-26271",
  "cve_desc": "In affected versions of TensorFlow under certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The MakeEdge function creates an edge between one output tensor of the src node (given by output_index) and the input slot of the dst node (given by input_index). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding DataType values and comparing these for equality. However, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays. In most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library. This is fixed in versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2, and 2.4.0.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "0cc38aaa4064fd9e79101994ce9872c6d91f816b",
  "patch_info": {
    "commit_hash": "0cc38aaa4064fd9e79101994ce9872c6d91f816b",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/0cc38aaa4064fd9e79101994ce9872c6d91f816b",
    "files": [
      "tensorflow/core/common_runtime/graph_constructor.cc"
    ],
    "message": "Prevent unitialized memory access in `GraphConstructor::MakeEdge`\n\nThe `MakeEdge` implementation assumes that there exists an output at `output_index` of `src` node and an input at `input_index` of `dst` node. However, if this is not the case this results in accessing data out of bounds. Because we are accessing an array that is a private member of a class and only in read only mode, this usually results only in unitialized memory access. However, it is reasonable to think that malicious users could manipulate these indexes to actually read data outside the class, thus resulting in information leakage and further exploits.\n\nPiperOrigin-RevId: 346343288\nChange-Id: I2127da27c2023d27f26efd39afa6c853385cab6f",
    "before_after_code_files": [
      "tensorflow/core/common_runtime/graph_constructor.cc||tensorflow/core/common_runtime/graph_constructor.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/common_runtime/graph_constructor.cc||tensorflow/core/common_runtime/graph_constructor.cc": [
      "File: tensorflow/core/common_runtime/graph_constructor.cc -> tensorflow/core/common_runtime/graph_constructor.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: #include \"tensorflow/core/lib/gtl/inlined_vector.h\"",
      "45: #include \"tensorflow/core/lib/strings/scanner.h\"",
      "46: #include \"tensorflow/core/lib/strings/str_util.h\"",
      "47: #include \"tensorflow/core/platform/logging.h\"",
      "48: #include \"tensorflow/core/platform/macros.h\"",
      "49: #include \"tensorflow/core/public/version.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: #include \"tensorflow/core/platform/errors.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1426: Status GraphConstructor::MakeEdge(Node* src, int output_index, Node* dst,",
      "1427:                                   int input_index) {",
      "1428:   DataType src_out = src->output_type(output_index);",
      "1429:   DataType dst_in = dst->input_type(input_index);",
      "1430:   if (!TypesCompatible(dst_in, src_out)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1429:   if (output_index >= src->num_outputs()) {",
      "1430:     return errors::InvalidArgument(",
      "1431:         \"Output \", output_index, \" of node \", src->name(),",
      "1432:         \" does not exist. Node only has \", src->num_outputs(), \" outputs.\");",
      "1433:   }",
      "1434:   if (input_index >= dst->num_inputs()) {",
      "1435:     return errors::InvalidArgument(",
      "1436:         \"Input \", input_index, \" of node \", dst->name(),",
      "1437:         \" does not exist. Node only has \", dst->num_inputs(), \" inputs.\");",
      "1438:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a6954b6ccc1e3e3ca8ceb31079cdccf7a90b14d5",
      "candidate_info": {
        "commit_hash": "a6954b6ccc1e3e3ca8ceb31079cdccf7a90b14d5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a6954b6ccc1e3e3ca8ceb31079cdccf7a90b14d5",
        "files": [
          "tensorflow/core/graph/graph_constructor.cc"
        ],
        "message": "Prevent unitialized memory access in `GraphConstructor::MakeEdge`\n\nThe `MakeEdge` implementation assumes that there exists an output at `output_index` of `src` node and an input at `input_index` of `dst` node. However, if this is not the case this results in accessing data out of bounds. Because we are accessing an array that is a private member of a class and only in read only mode, this usually results only in unitialized memory access. However, it is reasonable to think that malicious users could manipulate these indexes to actually read data outside the class, thus resulting in information leakage and further exploits.\n\nPiperOrigin-RevId: 346343288\nChange-Id: I2127da27c2023d27f26efd39afa6c853385cab6f",
        "before_after_code_files": [
          "tensorflow/core/graph/graph_constructor.cc||tensorflow/core/graph/graph_constructor.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tensorflow/core/graph/graph_constructor.cc||tensorflow/core/graph/graph_constructor.cc": [
          "File: tensorflow/core/graph/graph_constructor.cc -> tensorflow/core/graph/graph_constructor.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1400: Status GraphConstructor::MakeEdge(Node* src, int output_index, Node* dst,",
          "1401:                                   int input_index) {",
          "1402:   DataType src_out = src->output_type(output_index);",
          "1403:   DataType dst_in = dst->input_type(input_index);",
          "1404:   if (!TypesCompatible(dst_in, src_out)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1402:   if (output_index >= src->num_outputs()) {",
          "1403:     return errors::InvalidArgument(",
          "1404:         \"Output \", output_index, \" of node \", src->name(),",
          "1405:         \" does not exist. Node only has \", src->num_outputs(), \" outputs.\");",
          "1406:   }",
          "1407:   if (input_index >= dst->num_inputs()) {",
          "1408:     return errors::InvalidArgument(",
          "1409:         \"Input \", input_index, \" of node \", dst->name(),",
          "1410:         \" does not exist. Node only has \", dst->num_inputs(), \" inputs.\");",
          "1411:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}