{
  "cve_id": "CVE-2015-5685",
  "cve_desc": "The lazy_bdecode function in BitTorrent DHT bootstrap server (bootstrap-dht ) allows remote attackers to execute arbitrary code via a crafted packet, related to \"improper indexing.\"",
  "repo": "bittorrent/bootstrap-dht",
  "patch_hash": "e809ea80e3527e32c40756eddd8b2ae44bc3af1a",
  "patch_info": {
    "commit_hash": "e809ea80e3527e32c40756eddd8b2ae44bc3af1a",
    "repo": "bittorrent/bootstrap-dht",
    "commit_url": "https://github.com/bittorrent/bootstrap-dht/commit/e809ea80e3527e32c40756eddd8b2ae44bc3af1a",
    "files": [
      "lazy_bdecode.cpp"
    ],
    "message": "Check for out-of-bounds bencoded lengths before advancing buffer pointer",
    "before_after_code_files": [
      "lazy_bdecode.cpp||lazy_bdecode.cpp"
    ]
  },
  "patch_diff": {
    "lazy_bdecode.cpp||lazy_bdecode.cpp": [
      "File: lazy_bdecode.cpp -> lazy_bdecode.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "150:      if (e)",
      "151:       TORRENT_FAIL_BDECODE(e);",
      "154:       TORRENT_FAIL_BDECODE(bdecode_errors::unexpected_eof);",
      "156:      if (len < 0)",
      "",
      "[Removed Lines]",
      "153:      if (start + len + 1 > end)",
      "",
      "[Added Lines]",
      "154:      const ptrdiff_t buff_size = end - start - 1;",
      "155:      if (len > buff_size)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:      start = parse_int(start, end, ':', len, e);",
      "217:      if (e)",
      "218:       TORRENT_FAIL_BDECODE(e);",
      "220:       TORRENT_FAIL_BDECODE(bdecode_errors::unexpected_eof);",
      "221:      if (len < 0)",
      "222:       TORRENT_FAIL_BDECODE(bdecode_errors::overflow);",
      "224:      ++start;",
      "225:      top->construct_string(start, int(len));",
      "226:      stack.pop_back();",
      "227:      start += len;",
      "",
      "[Removed Lines]",
      "219:      if (start + len + 1 > end)",
      "",
      "[Added Lines]",
      "223:      const ptrdiff_t buff_size = end - start - 1;",
      "224:      if (len > buff_size)",
      "230:      if (start == end) TORRENT_FAIL_BDECODE(bdecode_errors::unexpected_eof);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bbc0b7191e3f48461ca6e5b1b34bdf4b3f1e79a9",
      "candidate_info": {
        "commit_hash": "bbc0b7191e3f48461ca6e5b1b34bdf4b3f1e79a9",
        "repo": "bittorrent/bootstrap-dht",
        "commit_url": "https://github.com/bittorrent/bootstrap-dht/commit/bbc0b7191e3f48461ca6e5b1b34bdf4b3f1e79a9",
        "files": [
          "lazy_bdecode.cpp",
          "lazy_entry.hpp"
        ],
        "message": "update version of lazy_bdecode from libtorrent",
        "before_after_code_files": [
          "lazy_bdecode.cpp||lazy_bdecode.cpp",
          "lazy_entry.hpp||lazy_entry.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lazy_bdecode.cpp||lazy_bdecode.cpp"
          ],
          "candidate": [
            "lazy_bdecode.cpp||lazy_bdecode.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lazy_bdecode.cpp||lazy_bdecode.cpp": [
          "File: lazy_bdecode.cpp -> lazy_bdecode.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: All rights reserved.",
          "6: Redistribution and use in source and binary forms, with or without",
          "",
          "[Removed Lines]",
          "3: Copyright (c) 2008-2012, Arvid Norberg",
          "",
          "[Added Lines]",
          "3: Copyright (c) 2008-2014, Arvid Norberg",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: namespace libtorrent",
          "46: {",
          "58:  }",
          "69:  {",
          "70:   while (start < end && *start != delimiter)",
          "71:   {",
          "73:    val *= 10;",
          "75:    ++start;",
          "76:   }",
          "77:   return start;",
          "78:  }",
          "",
          "[Removed Lines]",
          "48: #define TORRENT_FAIL_BDECODE(code) \\",
          "49:  { \\",
          "50:   ec = make_error_code(code); \\",
          "51:   while (!stack.empty()) { \\",
          "52:    top = stack.back(); \\",
          "53:    if (top->type() == lazy_entry::dict_t || top->type() == lazy_entry::list_t) top->pop(); \\",
          "54:    stack.pop_back(); \\",
          "55:   } \\",
          "56:   if (error_pos) *error_pos = start - orig_start; \\",
          "57:   return -1; \\",
          "60:  bool is_digit(char c) { return c >= '0' && c <= '9'; }",
          "62:  bool is_print(char c) { return c >= 32 && c < 127; }",
          "68:  char const* parse_int(char const* start, char const* end, char delimiter, boost::int64_t& val)",
          "72:    if (!is_digit(*start)) { return 0; }",
          "74:    val += *start - '0';",
          "",
          "[Added Lines]",
          "48:  namespace",
          "49:  {",
          "50:   int fail(int* error_pos",
          "51:    , std::vector<lazy_entry*>& stack",
          "52:    , char const* start",
          "53:    , char const* orig_start)",
          "54:   {",
          "55:    while (!stack.empty()) {",
          "56:     lazy_entry* top = stack.back();",
          "57:     if (top->type() == lazy_entry::dict_t || top->type() == lazy_entry::list_t)",
          "58:     {",
          "59:      top->pop();",
          "60:      break;",
          "61:     }",
          "62:     stack.pop_back();",
          "63:    }",
          "64:    if (error_pos) *error_pos = start - orig_start;",
          "65:    return -1;",
          "66:   }",
          "69: #define TORRENT_FAIL_BDECODE(code) do { ec = make_error_code(code); return fail(error_pos, stack, start, orig_start); } while (false)",
          "71:  namespace { bool numeric(char c) { return c >= '0' && c <= '9'; } }",
          "77:  char const* parse_int(char const* start, char const* end, char delimiter",
          "78:   , boost::int64_t& val, bdecode_errors::error_code_enum& ec)",
          "82:    if (!numeric(*start))",
          "83:    {",
          "84:     ec = bdecode_errors::expected_string;",
          "85:     return start;",
          "86:    }",
          "87:    if (val > INT64_MAX / 10)",
          "88:    {",
          "89:     ec = bdecode_errors::overflow;",
          "90:     return start;",
          "91:    }",
          "93:    int digit = *start - '0';",
          "94:    if (val > INT64_MAX - digit)",
          "95:    {",
          "96:     ec = bdecode_errors::overflow;",
          "97:     return start;",
          "98:    }",
          "99:    val += digit;",
          "102:   if (*start != delimiter)",
          "103:    ec = bdecode_errors::expected_colon;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:   std::vector<lazy_entry*> stack;",
          "96:   stack.push_back(&ret);",
          "98:   {",
          "99:    if (stack.empty()) break; // done!",
          "",
          "[Removed Lines]",
          "97:   while (start < end)",
          "",
          "[Added Lines]",
          "124:   while (start <= end)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:       stack.pop_back();",
          "117:       continue;",
          "118:      }",
          "120:      boost::int64_t len = t - '0';",
          "124:      ++start;",
          "125:      if (start == end) TORRENT_FAIL_BDECODE(bdecode_errors::unexpected_eof);",
          "126:      lazy_entry* ent = top->dict_append(start);",
          "",
          "[Removed Lines]",
          "119:      if (!is_digit(t)) TORRENT_FAIL_BDECODE(bdecode_errors::expected_string);",
          "121:      start = parse_int(start, end, ':', len);",
          "122:      if (start == 0 || start + len + 3 > end || *start != ':')",
          "123:       TORRENT_FAIL_BDECODE(bdecode_errors::expected_colon);",
          "",
          "[Added Lines]",
          "146:      if (!numeric(t)) TORRENT_FAIL_BDECODE(bdecode_errors::expected_string);",
          "148:      bdecode_errors::error_code_enum e = bdecode_errors::no_error;",
          "149:      start = parse_int(start, end, ':', len, e);",
          "150:      if (e)",
          "151:       TORRENT_FAIL_BDECODE(e);",
          "153:      if (start + len + 1 > end)",
          "154:       TORRENT_FAIL_BDECODE(bdecode_errors::unexpected_eof);",
          "156:      if (len < 0)",
          "157:       TORRENT_FAIL_BDECODE(bdecode_errors::overflow);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:     }",
          "174:     default:",
          "175:     {",
          "177:       TORRENT_FAIL_BDECODE(bdecode_errors::expected_value);",
          "179:      boost::int64_t len = t - '0';",
          "183:      ++start;",
          "184:      top->construct_string(start, int(len));",
          "185:      stack.pop_back();",
          "",
          "[Removed Lines]",
          "176:      if (!is_digit(t))",
          "180:      start = parse_int(start, end, ':', len);",
          "181:      if (start == 0 || start + len + 1 > end || *start != ':')",
          "182:       TORRENT_FAIL_BDECODE(bdecode_errors::expected_colon);",
          "",
          "[Added Lines]",
          "211:      if (!numeric(t))",
          "215:      bdecode_errors::error_code_enum e = bdecode_errors::no_error;",
          "216:      start = parse_int(start, end, ':', len, e);",
          "217:      if (e)",
          "218:       TORRENT_FAIL_BDECODE(e);",
          "219:      if (start + len + 1 > end)",
          "220:       TORRENT_FAIL_BDECODE(bdecode_errors::unexpected_eof);",
          "221:      if (len < 0)",
          "222:       TORRENT_FAIL_BDECODE(bdecode_errors::overflow);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "198:   boost::int64_t val = 0;",
          "199:   bool negative = false;",
          "200:   if (*m_data.start == '-') negative = true;",
          "202:   if (negative) val = -val;",
          "203:   return val;",
          "204:  }",
          "",
          "[Removed Lines]",
          "201:   parse_int(negative?m_data.start+1:m_data.start, m_data.start + m_size, 'e', val);",
          "",
          "[Added Lines]",
          "242:   bdecode_errors::error_code_enum ec = bdecode_errors::no_error;",
          "243:   parse_int(m_data.start + negative",
          "244:    , m_data.start + m_size, 'e', val, ec);",
          "245:   if (ec) return 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "331:   return e;",
          "332:  }",
          "334:  lazy_entry const* lazy_entry::dict_find_list(char const* name) const",
          "335:  {",
          "336:   lazy_entry const* e = dict_find(name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "378:  lazy_entry const* lazy_entry::dict_find_dict(std::string const& name) const",
          "379:  {",
          "380:   lazy_entry const* e = dict_find(name);",
          "381:   if (e == 0 || e->type() != lazy_entry::dict_t) return 0;",
          "382:   return e;",
          "383:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "350:   return 0;",
          "351:  }",
          "353:  lazy_entry* lazy_entry::list_append()",
          "354:  {",
          "355:   TORRENT_ASSERT(m_type == list_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:  lazy_entry* lazy_entry::dict_find(std::string const& name)",
          "405:  {",
          "406:   TORRENT_ASSERT(m_type == dict_t);",
          "407:   for (int i = 0; i < int(m_size); ++i)",
          "408:   {",
          "409:    lazy_dict_entry& e = m_data.dict[i];",
          "410:    if (name.size() != e.val.m_begin - e.name) continue;",
          "411:    if (std::equal(name.begin(), name.end(), e.name))",
          "412:     return &e.val;",
          "413:   }",
          "414:   return 0;",
          "415:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "492:     char const* str = e.string_ptr();",
          "493:     for (int i = 0; i < e.string_length(); ++i)",
          "494:     {",
          "497:      printable = false;",
          "498:      break;",
          "499:     }",
          "500:     ret += \"'\";",
          "501:     if (printable)",
          "502:     {",
          "504:      ret += \"'\";",
          "505:      return ret;",
          "506:     }",
          "508:     {",
          "512:     }",
          "513:     ret += \"'\";",
          "514:     return ret;",
          "",
          "[Removed Lines]",
          "495:      using namespace std;",
          "496:      if (is_print((unsigned char)str[i])) continue;",
          "503:      ret += e.string_value();",
          "507:     for (int i = 0; i < e.string_length(); ++i)",
          "509:      char tmp[5];",
          "510:      snprintf(tmp, sizeof(tmp), \"%02x\", (unsigned char)str[i]);",
          "511:      ret += tmp;",
          "",
          "[Added Lines]",
          "559:      char c = str[i];",
          "560:      if (c >= 32 && c < 127) continue;",
          "567:      if (single_line && e.string_length() > 30)",
          "568:      {",
          "569:       ret.append(e.string_ptr(), 14);",
          "570:       ret += \"...\";",
          "571:       ret.append(e.string_ptr() + e.string_length()-14, 14);",
          "572:      }",
          "573:      else",
          "574:       ret.append(e.string_ptr(), e.string_length());",
          "578:     if (single_line && e.string_length() > 20)",
          "580:      for (int i = 0; i < 9; ++i)",
          "581:      {",
          "582:       char tmp[5];",
          "583:       snprintf(tmp, sizeof(tmp), \"%02x\", (unsigned char)str[i]);",
          "584:       ret += tmp;",
          "585:      }",
          "586:      ret += \"...\";",
          "587:      for (int i = e.string_length() - 9",
          "588:       , len(e.string_length()); i < len; ++i)",
          "589:      {",
          "590:       char tmp[5];",
          "591:       snprintf(tmp, sizeof(tmp), \"%02x\", (unsigned char)str[i]);",
          "592:       ret += tmp;",
          "593:      }",
          "594:     }",
          "595:     else",
          "596:     {",
          "597:      for (int i = 0; i < e.string_length(); ++i)",
          "598:      {",
          "599:       char tmp[5];",
          "600:       snprintf(tmp, sizeof(tmp), \"%02x\", (unsigned char)str[i]);",
          "601:       ret += tmp;",
          "602:      }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "577:    \"expected value (list, dict, int or string) in bencoded string\",",
          "578:    \"bencoded nesting depth exceeded\",",
          "579:    \"bencoded item count limit exceeded\",",
          "580:   };",
          "581:   if (ev < 0 || ev >= int(sizeof(msgs)/sizeof(msgs[0])))",
          "582:    return \"Unknown error\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "671:    \"integer overflow\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "589:   return bdecode_category;",
          "590:  }",
          "592: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "684:  namespace bdecode_errors",
          "685:  {",
          "686:   boost::system::error_code make_error_code(error_code_enum e)",
          "687:   {",
          "688:    return boost::system::error_code(e, get_bdecode_category());",
          "689:   }",
          "690:  }",
          "",
          "---------------"
        ],
        "lazy_entry.hpp||lazy_entry.hpp": [
          "File: lazy_entry.hpp -> lazy_entry.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: All rights reserved.",
          "6: Redistribution and use in source and binary forms, with or without",
          "",
          "[Removed Lines]",
          "3: Copyright (c) 2003-2012, Arvid Norberg",
          "",
          "[Added Lines]",
          "3: Copyright (c) 2003-2014, Arvid Norberg",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: #include <vector>",
          "38: #include <string>",
          "39: #include <cstring>",
          "40: #include <boost/system/error_code.hpp>",
          "42: #define TORRENT_EXPORT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #include <algorithm>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "221:   lazy_entry* dict_find(char const* name);",
          "222:   lazy_entry const* dict_find(char const* name) const",
          "223:   { return const_cast<lazy_entry*>(this)->dict_find(name); }",
          "224:   lazy_entry const* dict_find_string(char const* name) const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:   lazy_entry* dict_find(std::string const& name);",
          "227:   lazy_entry const* dict_find(std::string const& name) const",
          "228:   { return const_cast<lazy_entry*>(this)->dict_find(name); }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235:   boost::int64_t dict_find_int_value(char const* name, boost::int64_t default_val = 0) const;",
          "236:   lazy_entry const* dict_find_int(char const* name) const;",
          "238:   lazy_entry const* dict_find_dict(char const* name) const;",
          "239:   lazy_entry const* dict_find_list(char const* name) const;",
          "243:   std::pair<std::string, lazy_entry const*> dict_at(int i) const;",
          "246:   int dict_size() const",
          "247:   {",
          "248:    TORRENT_ASSERT(m_type == dict_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:   lazy_entry const* dict_find_dict(std::string const& name) const;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "361:   lazy_entry val;",
          "362:  };",
          "365:   , bool single_line = false, int indent = 0);",
          "367:  TORRENT_EXPORT boost::system::error_category& get_bdecode_category();",
          "369:  namespace bdecode_errors",
          "",
          "[Removed Lines]",
          "364:  TORRENT_EXTRA_EXPORT std::string print_entry(lazy_entry const& e",
          "",
          "[Added Lines]",
          "391:  TORRENT_EXPORT std::string print_entry(lazy_entry const& e",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "386:    depth_exceeded,",
          "388:    limit_exceeded,",
          "391:    error_code_max",
          "392:   };",
          "399:  }",
          "400: }",
          "402: #endif",
          "",
          "[Removed Lines]",
          "395:   inline boost::system::error_code make_error_code(error_code_enum e)",
          "396:   {",
          "397:    return boost::system::error_code(e, get_bdecode_category());",
          "398:   }",
          "",
          "[Added Lines]",
          "418:    overflow,",
          "425:   TORRENT_EXPORT boost::system::error_code make_error_code(error_code_enum e);",
          "428:  TORRENT_EXTRA_EXPORT char const* parse_int(char const* start",
          "429:   , char const* end, char delimiter, boost::int64_t& val",
          "430:   , bdecode_errors::error_code_enum& ec);",
          "",
          "---------------"
        ]
      }
    }
  ]
}