{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a11bf99ce0dae4d8f4de8a9c0c32159c1a9ecfbf",
      "candidate_info": {
        "commit_hash": "a11bf99ce0dae4d8f4de8a9c0c32159c1a9ecfbf",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a11bf99ce0dae4d8f4de8a9c0c32159c1a9ecfbf",
        "files": [
          "doc/api/os.markdown",
          "lib/os.js",
          "test/simple/test-os.js"
        ],
        "message": "Fix #3407 os.tmpDir()",
        "before_after_code_files": [
          "lib/os.js||lios.js",
          "test/simple/test-os.js||test/simple/test-os.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/os.js||lios.js": [
          "File: lib/os.js -> lios.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: exports.type = binding.getOSType;",
          "31: exports.release = binding.getOSRelease;",
          "32: exports.networkInterfaces = binding.getInterfaceAddresses;",
          "33: exports.arch = function() {",
          "34:   return process.arch;",
          "35: };",
          "36: exports.platform = function() {",
          "37:   return process.platform;",
          "38: };",
          "40: exports.getNetworkInterfaces = function() {",
          "41:   return exports.networkInterfaces();",
          "42: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-os.js||test/simple/test-os.js": [
          "File: test/simple/test-os.js -> test/simple/test-os.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: var os = require('os');",
          "30: var hostname = os.hostname();",
          "31: console.log('hostname = %s', hostname);",
          "32: assert.ok(hostname.length > 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: process.env.TMPDIR = '/tmpdir';",
          "31: process.env.TMP = '/tmp';",
          "32: process.env.TEMP = '/temp';",
          "33: var t = ( process.platform === 'win32' ? 'c:\\\\windows\\\\temp' : '/tmp' );",
          "34: assert.equal(os.tmpDir(), '/tmpdir');",
          "35: process.env.TMPDIR = '';",
          "36: assert.equal(os.tmpDir(), '/tmp');",
          "37: process.env.TMP = '';",
          "38: assert.equal(os.tmpDir(), '/temp');",
          "39: process.env.TEMP = '';",
          "40: assert.equal(os.tmpDir(), t);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12a90e98bfc347d78e622f0839898c065ed31dc1",
      "candidate_info": {
        "commit_hash": "12a90e98bfc347d78e622f0839898c065ed31dc1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/12a90e98bfc347d78e622f0839898c065ed31dc1",
        "files": [
          "benchmark/http_bench.js"
        ],
        "message": "bench: add continuous stress test\n\nUseful in tracking down or at least demonstrating memory leaks.",
        "before_after_code_files": [
          "benchmark/http_bench.js||benchmark/http_bench.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/http_bench.js||benchmark/http_bench.js": [
          "File: benchmark/http_bench.js -> benchmark/http_bench.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var spawn = require('child_process').spawn;",
          "23: var cluster = require('cluster');",
          "24: var http = require('http');",
          "26: var options = {",
          "27:   mode: 'master',",
          "28:   host: '127.0.0.1',",
          "29:   port: 22344,",
          "30:   path: '/',",
          "31:   servers: 1,",
          "32:   clients: 1",
          "33: };",
          "35: for (var i = 2; i < process.argv.length; ++i) {",
          "36:   var args = process.argv[i].split('=', 2);",
          "37:   var key = args[0];",
          "38:   var val = args[1];",
          "39:   options[key] = val;",
          "40: }",
          "42: switch (options.mode) {",
          "43: case 'master': startMaster(); break;",
          "44: case 'server': startServer(); break;",
          "45: case 'client': startClient(); break;",
          "46: default: throw new Error('Bad mode: ' + options.mode);",
          "47: }",
          "49: process.title = 'http_bench[' + options.mode + ']';",
          "52: console.log = patch(console.log);",
          "53: console.trace = patch(console.trace);",
          "54: console.error = patch(console.error);",
          "56: function patch(fun) {",
          "57:   var prefix = process.title + '[' + process.pid + '] ';",
          "58:   return function() {",
          "59:     var args = Array.prototype.slice.call(arguments);",
          "60:     args[0] = prefix + args[0];",
          "61:     return fun.apply(console, args);",
          "62:   };",
          "63: }",
          "65: function startMaster() {",
          "66:   if (!cluster.isMaster) return startServer();",
          "68:   for (var i = ~~options.servers; i > 0; --i) cluster.fork();",
          "70:   for (var i = ~~options.clients; i > 0; --i) {",
          "71:     var cp = spawn(process.execPath, [__filename, 'mode=client']);",
          "72:     cp.stdout.pipe(process.stdout);",
          "73:     cp.stderr.pipe(process.stderr);",
          "74:   }",
          "75: }",
          "77: function startServer() {",
          "78:   http.createServer(onRequest).listen(options.port, options.host);",
          "80:   var body = Array(1024).join('x');",
          "81:   var headers = {'Content-Length': '' + body.length};",
          "83:   function onRequest(req, res) {",
          "84:     req.on('error', onError);",
          "85:     res.on('error', onError);",
          "86:     res.writeHead(200, headers);",
          "87:     res.end(body);",
          "88:   }",
          "90:   function onError(err) {",
          "91:     console.error(err.stack);",
          "92:   }",
          "93: }",
          "95: function startClient() {",
          "98:   sendRequest();",
          "99:   sendRequest();",
          "101:   function sendRequest() {",
          "102:     var req = http.request(options, onConnection);",
          "103:     req.on('error', onError);",
          "104:     req.end();",
          "105:   }",
          "109:   function relaxedSendRequest() {",
          "110:     setTimeout(sendRequest, 1);",
          "111:   }",
          "113:   function onConnection(res) {",
          "114:     res.on('error', onError);",
          "115:     res.on('data', onData);",
          "116:     res.on('end', relaxedSendRequest);",
          "117:   }",
          "119:   function onError(err) {",
          "120:     console.error(err.stack);",
          "121:     relaxedSendRequest();",
          "122:   }",
          "124:   function onData(data) {",
          "126:   }",
          "127: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bec3febd848c4917c22c68d9de6d737f945b81f",
      "candidate_info": {
        "commit_hash": "8bec3febd848c4917c22c68d9de6d737f945b81f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8bec3febd848c4917c22c68d9de6d737f945b81f",
        "files": [
          "tools/installer.js"
        ],
        "message": "build: Add node.d and node.1 to installer",
        "before_after_code_files": [
          "tools/installer.js||tools/installer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/installer.js||tools/installer.js": [
          "File: tools/installer.js -> tools/installer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     'deps/uv/include/uv.h'",
          "102:   ], 'include/node/');",
          "105:   copy([",
          "106:     'deps/uv/include/uv-private/eio.h', 'deps/uv/include/uv-private/ev.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:   copy(['doc/node.1'], 'share/man/man1/');",
          "108:   if (!process.platform.match(/^linux/)) {",
          "109:     copy(['src/node.d'], 'lib/dtrace/');",
          "110:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147: } else {",
          "148:   remove([",
          "149:      'bin/node', 'bin/npm', 'bin/node-waf',",
          "151:   ]);",
          "152: }",
          "",
          "[Removed Lines]",
          "150:      'include/node/*', 'lib/node_modules', 'lib/node'",
          "",
          "[Added Lines]",
          "158:      'include/node/*', 'lib/node_modules', 'lib/node',",
          "159:      'lib/dtrace/node.d', 'share/man/man1/node.1'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ae0d473a6b6ac8cb3e55d665528667566cd8e60",
      "candidate_info": {
        "commit_hash": "7ae0d473a6b6ac8cb3e55d665528667566cd8e60",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7ae0d473a6b6ac8cb3e55d665528667566cd8e60",
        "files": [
          "test/simple/test-tls-over-http-tunnel.js"
        ],
        "message": "test: fix test-tls-over-http-tunnel with v0.7",
        "before_after_code_files": [
          "test/simple/test-tls-over-http-tunnel.js||test/simple/test-tls-over-http-tunnel.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-tls-over-http-tunnel.js||test/simple/test-tls-over-http-tunnel.js": [
          "File: test/simple/test-tls-over-http-tunnel.js -> test/simple/test-tls-over-http-tunnel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     if (!serverSocket) {",
          "66:       assert.equal('CONNECT localhost:' + common.PORT + ' HTTP/1.1\\r\\n' +",
          "69:                    chunk);",
          "71:       console.log('PROXY: got CONNECT request');",
          "",
          "[Removed Lines]",
          "67:                    'Proxy-Connections: keep-alive\\r\\nContent-Length:' +",
          "68:                    ' 0\\r\\nHost: localhost:' + proxyPort + '\\r\\n\\r\\n',",
          "",
          "[Added Lines]",
          "67:                    'Proxy-Connections: keep-alive\\r\\n' +",
          "68:                    'Host: localhost:' + proxyPort + '\\r\\n\\r\\n',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103: proxy.listen(proxyPort, function() {",
          "104:   console.log('CLIENT: Making CONNECT request');",
          "107:     port: proxyPort,",
          "108:     method: 'CONNECT',",
          "109:     path: 'localhost:' + common.PORT,",
          "110:     headers: {",
          "113:     }",
          "115:     assert.equal(200, res.statusCode);",
          "116:     console.log('CLIENT: got CONNECT response');",
          "129:     console.log('CLIENT: Making HTTPS request');",
          "",
          "[Removed Lines]",
          "106:   http.request({",
          "111:       'Proxy-Connections': 'keep-alive',",
          "112:       'Content-Length': 0",
          "114:   }, function(res) {",
          "119:     res.socket.emit('agentRemove');",
          "120:     res.socket.removeAllListeners('data');",
          "121:     res.socket.removeAllListeners('close');",
          "122:     res.socket.removeAllListeners('error');",
          "123:     res.socket.removeAllListeners('drain');",
          "124:     res.socket.removeAllListeners('end');",
          "125:     res.socket.ondata = null;",
          "126:     res.socket.onend = null;",
          "127:     res.socket.ondrain = null;",
          "",
          "[Added Lines]",
          "106:   var req = http.request({",
          "111:       'Proxy-Connections': 'keep-alive'",
          "113:   });",
          "114:   req.useChunkedEncodingByDefault = false; // for v0.6",
          "115:   req.on('response', onResponse); // for v0.6",
          "116:   req.on('upgrade', onUpgrade);   // for v0.6",
          "117:   req.on('connect', onConnect);   // for v0.7 or later",
          "118:   req.end();",
          "120:   function onResponse(res) {",
          "122:     res.upgrade = true;",
          "123:   }",
          "125:   function onUpgrade(res, socket, head) {",
          "127:     process.nextTick(function() {",
          "128:       onConnect(res, socket, head);",
          "129:     });",
          "130:   }",
          "132:   function onConnect(res, socket, header) {",
          "137:     socket.removeAllListeners('data');",
          "138:     socket.removeAllListeners('close');",
          "139:     socket.removeAllListeners('error');",
          "140:     socket.removeAllListeners('drain');",
          "141:     socket.removeAllListeners('end');",
          "142:     socket.ondata = null;",
          "143:     socket.onend = null;",
          "144:     socket.ondrain = null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:       path: '/foo',",
          "133:       key: key,",
          "134:       cert: cert,",
          "136:       agent: false",
          "137:     }, function(res) {",
          "138:       assert.equal(200, res.statusCode);",
          "",
          "[Removed Lines]",
          "135:       socket: res.socket,  // reuse the socket",
          "",
          "[Added Lines]",
          "152:       socket: socket,  // reuse the socket",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:         server.close();",
          "149:       });",
          "150:     }).end();",
          "152: });",
          "154: process.on('exit', function() {",
          "",
          "[Removed Lines]",
          "151:   }).end();",
          "",
          "[Added Lines]",
          "168:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a15147bc53849417f8737dd873877d497867c9f",
      "candidate_info": {
        "commit_hash": "8a15147bc53849417f8737dd873877d497867c9f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8a15147bc53849417f8737dd873877d497867c9f",
        "files": [
          "src/node.js"
        ],
        "message": "Reapply \"debug: Wait 50ms before running the main module\"\n\nThis reapplies commit c781f17742170f2e127f9ee6652c56b406c30586\nThis reverts commit 00224771e32e4d051e5ea33b7e854f0031359912",
        "before_after_code_files": [
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:       }",
          "91:       var Module = NativeModule.require('module');",
          "97:     } else {",
          "98:       var Module = NativeModule.require('module');",
          "",
          "[Removed Lines]",
          "95:       process.nextTick(Module.runMain);",
          "",
          "[Added Lines]",
          "93:       if (global.v8debug &&",
          "94:           process.execArgv.some(function(arg) {",
          "95:             return arg.match(/^--debug-brk(=[0-9]*)?$/);",
          "96:           })) {",
          "109:         setTimeout(Module.runMain, 50);",
          "111:       } else {",
          "115:         process.nextTick(Module.runMain);",
          "116:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}