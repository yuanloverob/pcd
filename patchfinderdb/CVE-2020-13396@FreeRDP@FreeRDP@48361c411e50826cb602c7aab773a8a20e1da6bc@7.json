{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6dfd915004b63e91c417f569af9f8516f7f942fc",
      "candidate_info": {
        "commit_hash": "6dfd915004b63e91c417f569af9f8516f7f942fc",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6dfd915004b63e91c417f569af9f8516f7f942fc",
        "files": [
          "libfreerdp/primitives/prim_colors.c"
        ],
        "message": "Fixed undefined behaviour\n\n(cherry picked from commit c15929d821ce99aa8c1069f790f4addbe9439593)",
        "before_after_code_files": [
          "libfreerdp/primitives/prim_colors.c||libfreerdp/primitives/prim_colors.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/primitives/prim_colors.c||libfreerdp/primitives/prim_colors.c": [
          "File: libfreerdp/primitives/prim_colors.c -> libfreerdp/primitives/prim_colors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   {",
          "51:    INT16 R, G, B;",
          "52:    const INT32 divisor = 16;",
          "54:    const INT32 Cb = (*pCb++);",
          "55:    const INT32 Cr = (*pCr++);",
          "60:    R = ((INT16)((CrR + Y) >> divisor) >> 5);",
          "61:    G = ((INT16)((Y - CbG - CrG) >> divisor) >> 5);",
          "62:    B = ((INT16)((CbB + Y) >> divisor) >> 5);",
          "",
          "[Removed Lines]",
          "53:    const INT32 Y = ((*pY++) + 4096) << divisor;",
          "56:    const INT32 CrR = Cr * (INT32)(1.402525f * (1 << divisor));",
          "57:    const INT32 CrG = Cr * (INT32)(0.714401f * (1 << divisor));",
          "58:    const INT32 CbG = Cb * (INT32)(0.343730f * (1 << divisor));",
          "59:    const INT32 CbB = Cb * (INT32)(1.769905f * (1 << divisor));",
          "",
          "[Added Lines]",
          "53:    const INT32 Y = (INT32)((UINT32)((*pY++) + 4096) << divisor);",
          "56:    const INT64 CrR = Cr * (INT64)(1.402525f * (1 << divisor)) * 1LL;",
          "57:    const INT64 CrG = Cr * (INT64)(0.714401f * (1 << divisor)) * 1LL;",
          "58:    const INT64 CbG = Cb * (INT64)(0.343730f * (1 << divisor)) * 1LL;",
          "59:    const INT64 CbB = Cb * (INT64)(1.769905f * (1 << divisor)) * 1LL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:  {",
          "91:   for (x = 0; x < roi->width; x++)",
          "92:   {",
          "94:    const INT32 divisor = 16;",
          "96:    const INT32 Cb = (*pCb++);",
          "97:    const INT32 Cr = (*pCr++);",
          "105:    pRGB = (*writePixel)(pRGB, formatSize, DstFormat, CLIP(R), CLIP(G), CLIP(B), 0xFF);",
          "106:   }",
          "",
          "[Removed Lines]",
          "93:    INT16 R, G, B;",
          "95:    const INT32 Y = ((*pY++) + 4096) << divisor;",
          "98:    const INT32 CrR = Cr * (INT32)(1.402525f * (1 << divisor));",
          "99:    const INT32 CrG = Cr * (INT32)(0.714401f * (1 << divisor));",
          "100:    const INT32 CbG = Cb * (INT32)(0.343730f * (1 << divisor));",
          "101:    const INT32 CbB = Cb * (INT32)(1.769905f * (1 << divisor));",
          "102:    R = ((INT16)((CrR + Y) >> divisor) >> 5);",
          "103:    G = ((INT16)((Y - CbG - CrG) >> divisor) >> 5);",
          "104:    B = ((INT16)((CbB + Y) >> divisor) >> 5);",
          "",
          "[Added Lines]",
          "93:    INT64 R, G, B;",
          "95:    const INT32 Y = (INT32)((UINT32)((*pY++) + 4096) << divisor);",
          "98:    const INT64 CrR = Cr * (INT64)(1.402525f * (1 << divisor)) * 1LL;",
          "99:    const INT64 CrG = Cr * (INT64)(0.714401f * (1 << divisor)) * 1LL;",
          "100:    const INT64 CbG = Cb * (INT64)(0.343730f * (1 << divisor)) * 1LL;",
          "101:    const INT64 CbB = Cb * (INT64)(1.769905f * (1 << divisor)) * 1LL;",
          "102:    R = (INT64)((CrR + Y) >> (divisor + 5));",
          "103:    G = (INT64)((Y - CbG - CrG) >> (divisor + 5));",
          "104:    B = (INT64)((CbB + Y) >> (divisor + 5));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:    INT32 y = (INT32)(*yptr++);",
          "171:    INT32 cb = (INT32)(*cbptr++);",
          "172:    INT32 cr = (INT32)(*crptr++);",
          "",
          "[Removed Lines]",
          "173:    INT32 r, g, b;",
          "",
          "[Added Lines]",
          "173:    INT64 r, g, b;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "194:    y = (y + 4096) << 16;",
          "195:    r = y + cr * 91947;",
          "196:    g = y - cb * 22544 - cr * 46792;",
          "197:    b = y + cb * 115998;",
          "",
          "[Added Lines]",
          "194:    y = (INT32)((UINT32)(y + 4096) << 16);",
          "195:    r = y + cr * 91947LL;",
          "196:    g = y - cb * 22544LL - cr * 46792LL;",
          "197:    b = y + cb * 115998LL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e87805869fdea325b50cd9119d458161ed9520e",
      "candidate_info": {
        "commit_hash": "6e87805869fdea325b50cd9119d458161ed9520e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6e87805869fdea325b50cd9119d458161ed9520e",
        "files": [
          "libfreerdp/codec/progressive.c"
        ],
        "message": "codec: fix typo in progressive codec log\n\n(cherry picked from commit 8d72051ab157d89af3f919a441170ca57bf67e84)",
        "before_after_code_files": [
          "libfreerdp/codec/progressive.c||libfreerdp/codec/progressive.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/progressive.c||libfreerdp/codec/progressive.c": [
          "File: libfreerdp/codec/progressive.c -> libfreerdp/codec/progressive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1995:  len -= region->tileDataSize;",
          "1996:  if (len > 0)",
          "1997:   WLog_Print(progressive->log, WLOG_DEBUG,",
          "1999:  return 0;",
          "2000: }",
          "",
          "[Removed Lines]",
          "1998:              \"Unused byes detected, %\" PRIuz \" bytes not processed\", len);",
          "",
          "[Added Lines]",
          "1998:              \"Unused bytes detected, %\" PRIuz \" bytes not processed\", len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77b5043d21c1b839728c1acbf11bfb7c077f2427",
      "candidate_info": {
        "commit_hash": "77b5043d21c1b839728c1acbf11bfb7c077f2427",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/77b5043d21c1b839728c1acbf11bfb7c077f2427",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c",
          "channels/rdpgfx/client/rdpgfx_main.c"
        ],
        "message": "Reset pointer to NULL after free.\n\n(cherry picked from commit 33c7f808154c6682d3b84526a46d79f3e8d5c1ac)",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c",
          "channels/rdpgfx/client/rdpgfx_main.c||channels/rdpgfx/client/rdpgfx_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:   if (channel->channel_callback)",
          "348:   {",
          "349:    IFCALL(channel->channel_callback->OnClose, channel->channel_callback);",
          "350:   }",
          "352:   if (channel->status == CHANNEL_RC_OK)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350:    channel->channel_callback = NULL;",
          "",
          "---------------"
        ],
        "channels/rdpgfx/client/rdpgfx_main.c||channels/rdpgfx/client/rdpgfx_main.c": [
          "File: channels/rdpgfx/client/rdpgfx_main.c -> channels/rdpgfx/client/rdpgfx_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1826:  free_surfaces(context, gfx->SurfaceTable);",
          "1827:  evict_cache_slots(context, gfx->MaxCacheSlots, gfx->CacheSlots);",
          "1835:  free(callback);",
          "1836:  gfx->UnacknowledgedFrames = 0;",
          "1837:  gfx->TotalDecodedFrames = 0;",
          "",
          "[Removed Lines]",
          "1829:  if (gfx->listener_callback)",
          "1830:  {",
          "1831:   free(gfx->listener_callback);",
          "1832:   gfx->listener_callback = NULL;",
          "1833:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e24cca0568115bf683507841882b475e689a3d7",
      "candidate_info": {
        "commit_hash": "4e24cca0568115bf683507841882b475e689a3d7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/4e24cca0568115bf683507841882b475e689a3d7",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Fixed rdp_read_info_packet unaligned access and size checks\n\n(cherry picked from commit c75d08d70e878d35cd12ffac2aefcda405576092)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:  return ret;",
          "477: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479: static BOOL rdp_read_info_string(UINT32 flags, wStream* s, size_t cbLenNonNull, CHAR** dst,",
          "480:                                  size_t max)",
          "481: {",
          "482:  union",
          "483:  {",
          "484:   char c;",
          "485:   WCHAR w;",
          "486:   BYTE b[2];",
          "487:  } terminator;",
          "488:  CHAR* ret = NULL;",
          "490:  const BOOL unicode = flags & INFO_UNICODE;",
          "491:  const size_t nullSize = unicode ? sizeof(WCHAR) : sizeof(CHAR);",
          "493:  if (Stream_GetRemainingLength(s) < (size_t)(cbLenNonNull + nullSize))",
          "494:   return FALSE;",
          "496:  if (cbLenNonNull > 0)",
          "497:  {",
          "498:   WCHAR domain[512 / sizeof(WCHAR) + sizeof(WCHAR)] = { 0 };",
          "503:   if ((cbLenNonNull % 2) || (cbLenNonNull > (max - nullSize)))",
          "504:   {",
          "505:    WLog_ERR(TAG, \"protocol error: invalid value: %\" PRIuz \"\", cbLenNonNull);",
          "506:    return FALSE;",
          "507:   }",
          "509:   Stream_Read(s, domain, cbLenNonNull);",
          "511:   if (unicode)",
          "512:   {",
          "513:    if (ConvertFromUnicode(CP_UTF8, 0, domain, cbLenNonNull, &ret, 0, NULL, NULL) < 1)",
          "514:    {",
          "515:     WLog_ERR(TAG, \"failed to convert Domain string\");",
          "516:     return FALSE;",
          "517:    }",
          "518:   }",
          "519:   else",
          "520:   {",
          "521:    ret = calloc(cbLenNonNull + 1, nullSize);",
          "522:    if (!ret)",
          "523:     return FALSE;",
          "524:    memcpy(ret, domain, cbLenNonNull);",
          "525:   }",
          "526:  }",
          "528:  terminator.w = L'\\0';",
          "529:  Stream_Read(s, terminator.b, nullSize);",
          "531:  if (terminator.w != L'\\0')",
          "532:  {",
          "533:   WLog_ERR(TAG, \"protocol error: Domain must be null terminated\");",
          "534:   free(ret);",
          "535:   return FALSE;",
          "536:  }",
          "539:  return TRUE;",
          "540: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "486: static BOOL rdp_read_info_packet(rdpRdp* rdp, wStream* s, UINT16 tpktlength)",
          "487: {",
          "488:  UINT32 flags;",
          "489:  UINT16 cbDomain;",
          "490:  UINT16 cbUserName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:  BOOL small = FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "493:  UINT16 cbWorkingDir;",
          "494:  UINT32 CompressionLevel;",
          "495:  rdpSettings* settings = rdp->settings;",
          "501:  if (Stream_GetRemainingLength(s) < 18)",
          "502:   return FALSE;",
          "",
          "[Removed Lines]",
          "496:  union {",
          "497:   BYTE* bp;",
          "498:   WCHAR* wp;",
          "499:  } ptrconv;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "522:   settings->CompressionLevel = CompressionLevel;",
          "523:  }",
          "",
          "[Removed Lines]",
          "525:  if (!(flags & INFO_UNICODE))",
          "526:  {",
          "527:   WLog_ERR(TAG, \"Client without INFO_UNICODE flag: this is currently not supported\");",
          "528:   return FALSE;",
          "529:  }",
          "",
          "[Added Lines]",
          "586:  if (settings->RdpVersion < RDP_VERSION_5_PLUS)",
          "587:   small = TRUE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "538:   return FALSE;",
          "572:   return FALSE;",
          "606:   return FALSE;",
          "640:   return FALSE;",
          "676:   return FALSE;",
          "710:  if (settings->RdpVersion >= RDP_VERSION_5_PLUS)",
          "",
          "[Removed Lines]",
          "537:  if (Stream_GetRemainingLength(s) < (size_t)(cbDomain + 2))",
          "540:  if (cbDomain > 0)",
          "541:  {",
          "546:   if ((cbDomain % 2) || cbDomain > 512)",
          "547:   {",
          "548:    WLog_ERR(TAG, \"protocol error: invalid cbDomain value: %\" PRIu16 \"\", cbDomain);",
          "549:    return FALSE;",
          "550:   }",
          "552:   ptrconv.bp = Stream_Pointer(s);",
          "554:   if (ptrconv.wp[cbDomain / 2])",
          "555:   {",
          "556:    WLog_ERR(TAG, \"protocol error: Domain must be null terminated\");",
          "557:    return FALSE;",
          "558:   }",
          "560:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &settings->Domain, 0, NULL, NULL) < 1)",
          "561:   {",
          "562:    WLog_ERR(TAG, \"failed to convert Domain string\");",
          "563:    return FALSE;",
          "564:   }",
          "566:   Stream_Seek(s, cbDomain);",
          "567:  }",
          "569:  Stream_Seek(s, 2);",
          "571:  if (Stream_GetRemainingLength(s) < (size_t)(cbUserName + 2))",
          "574:  if (cbUserName > 0)",
          "575:  {",
          "580:   if ((cbUserName % 2) || cbUserName > 512)",
          "581:   {",
          "582:    WLog_ERR(TAG, \"protocol error: invalid cbUserName value: %\" PRIu16 \"\", cbUserName);",
          "583:    return FALSE;",
          "584:   }",
          "586:   ptrconv.bp = Stream_Pointer(s);",
          "588:   if (ptrconv.wp[cbUserName / 2])",
          "589:   {",
          "590:    WLog_ERR(TAG, \"protocol error: UserName must be null terminated\");",
          "591:    return FALSE;",
          "592:   }",
          "594:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &settings->Username, 0, NULL, NULL) < 1)",
          "595:   {",
          "596:    WLog_ERR(TAG, \"failed to convert UserName string\");",
          "597:    return FALSE;",
          "598:   }",
          "600:   Stream_Seek(s, cbUserName);",
          "601:  }",
          "603:  Stream_Seek(s, 2);",
          "605:  if (Stream_GetRemainingLength(s) < (size_t)(cbPassword + 2))",
          "608:  if (cbPassword > 0)",
          "609:  {",
          "614:   if ((cbPassword % 2) || cbPassword > LB_PASSWORD_MAX_LENGTH)",
          "615:   {",
          "616:    WLog_ERR(TAG, \"protocol error: invalid cbPassword value: %\" PRIu16 \"\", cbPassword);",
          "617:    return FALSE;",
          "618:   }",
          "620:   ptrconv.bp = Stream_Pointer(s);",
          "622:   if (ptrconv.wp[cbPassword / 2])",
          "623:   {",
          "624:    WLog_ERR(TAG, \"protocol error: Password must be null terminated\");",
          "625:    return FALSE;",
          "626:   }",
          "628:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &settings->Password, 0, NULL, NULL) < 1)",
          "629:   {",
          "630:    WLog_ERR(TAG, \"failed to convert Password string\");",
          "631:    return FALSE;",
          "632:   }",
          "634:   Stream_Seek(s, cbPassword);",
          "635:  }",
          "637:  Stream_Seek(s, 2);",
          "639:  if (Stream_GetRemainingLength(s) < (size_t)(cbAlternateShell + 2))",
          "642:  if (cbAlternateShell > 0)",
          "643:  {",
          "648:   if ((cbAlternateShell % 2) || cbAlternateShell > 512)",
          "649:   {",
          "650:    WLog_ERR(TAG, \"protocol error: invalid cbAlternateShell value: %\" PRIu16 \"\",",
          "651:             cbAlternateShell);",
          "652:    return FALSE;",
          "653:   }",
          "655:   ptrconv.bp = Stream_Pointer(s);",
          "657:   if (ptrconv.wp[cbAlternateShell / 2])",
          "658:   {",
          "659:    WLog_ERR(TAG, \"protocol error: AlternateShell must be null terminated\");",
          "660:    return FALSE;",
          "661:   }",
          "663:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &settings->AlternateShell, 0, NULL,",
          "664:                          NULL) < 1)",
          "665:   {",
          "666:    WLog_ERR(TAG, \"failed to convert AlternateShell string\");",
          "667:    return FALSE;",
          "668:   }",
          "670:   Stream_Seek(s, cbAlternateShell);",
          "671:  }",
          "673:  Stream_Seek(s, 2);",
          "675:  if (Stream_GetRemainingLength(s) < (size_t)(cbWorkingDir + 2))",
          "678:  if (cbWorkingDir > 0)",
          "679:  {",
          "684:   if ((cbWorkingDir % 2) || cbWorkingDir > 512)",
          "685:   {",
          "686:    WLog_ERR(TAG, \"protocol error: invalid cbWorkingDir value: %\" PRIu16 \"\", cbWorkingDir);",
          "687:    return FALSE;",
          "688:   }",
          "690:   ptrconv.bp = Stream_Pointer(s);",
          "692:   if (ptrconv.wp[cbWorkingDir / 2])",
          "693:   {",
          "694:    WLog_ERR(TAG, \"protocol error: WorkingDir must be null terminated\");",
          "695:    return FALSE;",
          "696:   }",
          "698:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &settings->ShellWorkingDirectory, 0,",
          "699:                          NULL, NULL) < 1)",
          "700:   {",
          "701:    WLog_ERR(TAG, \"failed to convert AlternateShell string\");",
          "702:    return FALSE;",
          "703:   }",
          "705:   Stream_Seek(s, cbWorkingDir);",
          "706:  }",
          "708:  Stream_Seek(s, 2);",
          "",
          "[Added Lines]",
          "595:  if (!rdp_read_info_string(flags, s, cbDomain, &settings->Domain, small ? 52 : 512))",
          "598:  if (!rdp_read_info_string(flags, s, cbUserName, &settings->Username, small ? 44 : 512))",
          "601:  if (!rdp_read_info_string(flags, s, cbPassword, &settings->Password, small ? 32 : 512))",
          "604:  if (!rdp_read_info_string(flags, s, cbAlternateShell, &settings->AlternateShell, 512))",
          "607:  if (!rdp_read_info_string(flags, s, cbWorkingDir, &settings->ShellWorkingDirectory, 512))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "865239967e8e95b84d1811fc884bf2a22792c1a8",
      "candidate_info": {
        "commit_hash": "865239967e8e95b84d1811fc884bf2a22792c1a8",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/865239967e8e95b84d1811fc884bf2a22792c1a8",
        "files": [
          "winpr/libwinpr/crt/test/TestAlignment.c"
        ],
        "message": "Fixed issues with clang sanitizers and alignemt offsets.\n\n(cherry picked from commit 4c1011fec37459ecc11f6c4453bcd693ed614e5d)",
        "before_after_code_files": [
          "winpr/libwinpr/crt/test/TestAlignment.c||winpr/libwinpr/crt/test/TestAlignment.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/crt/test/TestAlignment.c||winpr/libwinpr/crt/test/TestAlignment.c": [
          "File: winpr/libwinpr/crt/test/TestAlignment.c -> winpr/libwinpr/crt/test/TestAlignment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  alignment = 16;",
          "",
          "[Removed Lines]",
          "15:  offset = 5;",
          "",
          "[Added Lines]",
          "15:  offset = 8;",
          "",
          "---------------"
        ]
      }
    }
  ]
}