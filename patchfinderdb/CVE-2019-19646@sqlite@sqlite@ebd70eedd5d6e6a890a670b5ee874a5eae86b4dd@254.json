{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a31d3554c5daaff3c9e8d411879c6185b75073a0",
      "candidate_info": {
        "commit_hash": "a31d3554c5daaff3c9e8d411879c6185b75073a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a31d3554c5daaff3c9e8d411879c6185b75073a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Revise the VDBE comments for NULL-scan so that they also work make sense when reading a NULLS FIRST plan.\n\nFossilOrigin-Name: bfe793780fa6fc7a1e7d0ee60606dda272985de9573887dca118e9510fc609f2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1383680d927d7d703933be7653c0019199845e7f7e82bcc76d9ca3808093e9d8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1691:       }",
          "1692:       if( regBignull ){",
          "1693:         sqlite3VdbeAddOp2(v, OP_Integer, 1, regBignull);",
          "1695:       }",
          "1697:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "",
          "[Removed Lines]",
          "1694:         VdbeComment((v, \"NULL-scan needed flag\"));",
          "",
          "[Added Lines]",
          "1694:         VdbeComment((v, \"NULL-scan pass ctr\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1769:       if( regBignull ){",
          "1771:         sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1773:         VdbeCoverage(v);",
          "1774:       }",
          "1775:       op = aEndOp[bRev*2 + endEq];",
          "",
          "[Removed Lines]",
          "1772:         VdbeComment((v, \"If NULL-scan active\"));",
          "",
          "[Added Lines]",
          "1772:         VdbeComment((v, \"If NULL-scan 2nd pass\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1786:       assert( bSeekPastNull+bStopAtNull==1 );",
          "1787:       assert( nConstraint+bSeekPastNull>0 );",
          "1788:       sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1790:       VdbeCoverage(v);",
          "1791:       op = aEndOp[bRev*2 + bSeekPastNull];",
          "1792:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase,",
          "",
          "[Removed Lines]",
          "1789:       VdbeComment((v, \"If NULL-scan pending\"));",
          "",
          "[Added Lines]",
          "1789:       VdbeComment((v, \"If NULL-scan 1st pass\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c70f71e12bfaf07d851d1263ff872eb46bc8501",
      "candidate_info": {
        "commit_hash": "1c70f71e12bfaf07d851d1263ff872eb46bc8501",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1c70f71e12bfaf07d851d1263ff872eb46bc8501",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid redefining types u32 and u16 when fossildelta.c is compiled as part of the amalgamation.\n\nFossilOrigin-Name: d8e88248e3204b5f2b95b9b8921ee7ee2f7574ae81e6abd5b4f2ddf187f7d71b",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include \"sqlite3ext.h\"",
          "37: SQLITE_EXTENSION_INIT1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #ifndef SQLITE_AMALGAMATION",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f60a83069168899dcfd706b4d0901084c7ce92d85277950317e962a8a98ec668",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8614259c17898e60a8f8da73d14bc404c0ebded",
      "candidate_info": {
        "commit_hash": "a8614259c17898e60a8f8da73d14bc404c0ebded",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a8614259c17898e60a8f8da73d14bc404c0ebded",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/index_usage.c"
        ],
        "message": "Add the --progress, --using, and -q options to the index_usage utility program.\n\nFossilOrigin-Name: a5e6be7cbc5d931308ddcc073c9cd6275c9711cae055d72a7c4aa71c1d15914c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/index_usage.c||tool/index_usage.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 19c739b4a8a43d894e37a99fa34838f3e3fa1fe0d019aefbc33f1d38d76af1a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/index_usage.c||tool/index_usage.c": [
          "File: tool/index_usage.c -> tool/index_usage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <string.h>",
          "23: static void usage(const char *argv0){",
          "25:   printf(",
          "26:     \"DATABASE is an SQLite database against which various statements\\n\"",
          "27:     \"have been run.  The SQL text is stored in LOG.  LOG is an SQLite\\n\"",
          "",
          "[Removed Lines]",
          "24:   printf(\"Usage: %s DATABASE LOG\\n\\n\", argv0);",
          "",
          "[Added Lines]",
          "24:   printf(\"Usage: %s [OPTIONS] DATABASE LOG\\n\\n\", argv0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     \"DATABASE only needs to contain the schema used by the statements in\\n\"",
          "37:     \"LOG. The content can be removed from DATABASE.\\n\"",
          "38:   );",
          "39:   printf(\"\\nAnalysis will be done by SQLite version %s dated %.20s\\n\"",
          "40:          \"checkin number %.40s. Different versions\\n\"",
          "41:          \"of SQLite might use different indexes.\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:   printf(",
          "40:     \"\\nOPTIONS:\\n\\n\"",
          "41:     \"    --progress N   Show a progress message after every N input rows\\n\"",
          "42:     \"    -q             Omit error message when parsing log entries\\n\"",
          "43:     \"    --using NAME   Print SQL statements that use index NAME\\n\"",
          "44:   );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   char *zSql;",
          "50:   int nErr = 0;",
          "51:   int rc;",
          "53:   if( argc!=3 ) usage(argv[0]);",
          "54:   rc = sqlite3_open_v2(argv[1], &db, SQLITE_OPEN_READONLY, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   int bQuiet = 0;",
          "59:   int i, j;",
          "60:   const char *zUsing = 0;",
          "61:   sqlite3_stmt *pIncrCnt = 0;",
          "62:   int nRow = 0;",
          "63:   int iProgress = 0;",
          "65:   for(i=j=1; i<argc; i++){",
          "66:     const char *z = argv[i];",
          "67:     if( z[0]=='-' ){",
          "68:       z++;",
          "69:       if( z[0]=='-' ) z++;",
          "70:       if( strcmp(z,\"progress\")==0 ){",
          "71:         if( i+1<argc ){",
          "72:           iProgress = strtol(argv[++i],0,0);",
          "73:           continue;",
          "74:         }",
          "75:         printf(\"The --progress option requires an argument\\n\");",
          "76:         exit(0);",
          "77:       }",
          "78:       if( strcmp(z,\"q\")==0 ){",
          "79:         bQuiet = 1;",
          "80:         continue;",
          "81:       }",
          "82:       if( strcmp(z,\"using\")==0 ){",
          "83:         if( i+1<argc ){",
          "84:           zUsing = argv[++i];",
          "85:           continue;",
          "86:         }",
          "87:         printf(\"The --using option requires an argument\\n\");",
          "88:         exit(0);",
          "89:       }",
          "90:       if( strcmp(z, \"help\")==0 || strcmp(z, \"?\")==0 ){",
          "91:         usage(argv[0]);",
          "92:       }",
          "93:       printf(\"Unknown command-line option: \\\"%s\\\"\\n\", argv[i]);",
          "94:       exit(0);",
          "95:     }else{",
          "96:       if( j<i ) argv[j++] = argv[i];",
          "97:     }",
          "98:   }",
          "99:   argc = j;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66:   pStmt = 0;",
          "67:   rc = sqlite3_exec(db,",
          "68:      \"CREATE TABLE temp.idxu(\\n\"",
          "71:      \"  cnt INT,\\n\"",
          "72:      \"  PRIMARY KEY(idx)\\n\"",
          "73:      \") WITHOUT ROWID;\", 0, 0, 0);",
          "",
          "[Removed Lines]",
          "69:      \"  tbl TEXT,\\n\"",
          "70:      \"  idx TEXT,\\n\"",
          "",
          "[Added Lines]",
          "117:      \"  tbl TEXT COLLATE nocase,\\n\"",
          "118:      \"  idx TEXT COLLATE nocase,\\n\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:     goto errorOut;",
          "101:   }",
          "104:   while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "105:     const char *zLog = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   rc = sqlite3_prepare_v2(db,",
          "152:     \"UPDATE temp.idxu SET cnt=cnt+1 WHERE idx=?1\",",
          "153:     -1, &pIncrCnt, 0);",
          "154:   if( rc ){",
          "155:     printf(\"Cannot prepare a statement to increment a counter for \"",
          "156:            \"indexes used\\n\");",
          "157:     goto errorOut;",
          "158:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "109:     rc = sqlite3_prepare_v2(db, zSql, -1, &pS2, 0);",
          "110:     sqlite3_free(zSql);",
          "111:     if( rc ){",
          "113:              sqlite3_column_int(pStmt, 1), zLog, sqlite3_errmsg(db));",
          "114:       nErr++;",
          "115:     }else{",
          "116:       while( sqlite3_step(pS2)==SQLITE_ROW ){",
          "117:         const char *zExplain = (const char*)sqlite3_column_text(pS2,3);",
          "118:         const char *z1, *z2;",
          "",
          "[Removed Lines]",
          "112:       printf(\"Cannot compile LOG entry %d (%s): %s\\n\",",
          "",
          "[Added Lines]",
          "169:       if( !bQuiet ){",
          "170:         printf(\"Cannot compile LOG entry %d (%s): %s\\n\",",
          "172:         fflush(stdout);",
          "173:       }",
          "176:       nRow++;",
          "177:       if( iProgress>0 && (nRow%iProgress)==0 ){",
          "178:         printf(\"%d...\\n\", nRow);",
          "179:         fflush(stdout);",
          "180:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "123:         z1 += 13;",
          "124:         for(z2=z1+1; z2[1] && z2[1]!='('; z2++){}",
          "125:         n = z2 - z1;",
          "132:       }",
          "133:     }",
          "134:     sqlite3_finalize(pS2);",
          "",
          "[Removed Lines]",
          "126:         zSql = sqlite3_mprintf(",
          "127:           \"UPDATE temp.idxu SET cnt=cnt+1 WHERE idx='%.*q'\", n, z1",
          "128:         );",
          "130:         sqlite3_exec(db, zSql, 0, 0, 0);",
          "131:         sqlite3_free(zSql);",
          "",
          "[Added Lines]",
          "191:         if( zUsing && sqlite3_strnicmp(zUsing, z1, n)==0 ){",
          "192:           printf(\"Using %s:\\n%s\\n\", zUsing, zLog);",
          "193:           fflush(stdout);",
          "194:         }",
          "195:         sqlite3_bind_text(pIncrCnt,1,z1,n,SQLITE_STATIC);",
          "196:         sqlite3_step(pIncrCnt);",
          "197:         sqlite3_reset(pIncrCnt);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "160:   pStmt = 0;",
          "162: errorOut:",
          "163:   sqlite3_finalize(pStmt);",
          "164:   sqlite3_close(db);",
          "165:   return nErr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:   sqlite3_finalize(pIncrCnt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ced89124d866cd865a8546291f6588f74be2ec36",
      "candidate_info": {
        "commit_hash": "ced89124d866cd865a8546291f6588f74be2ec36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ced89124d866cd865a8546291f6588f74be2ec36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/window1.test"
        ],
        "message": "Ensure that all the new window-function keywords can still be used as SQL identifiers.\n\nFossilOrigin-Name: a6d61dfd4780eccfce5f7a5ead6c04e3b78bc4a461551fd7dd602550e0d51084",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fbddf01b1c3fff95b05e2f2f709754e2b514296060b4846518791e7161d9ddb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: %endif SQLITE_OMIT_COMPOUND_SELECT",
          "219: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "220:   CURRENT FOLLOWING PARTITION PRECEDING RANGE UNBOUNDED",
          "221: %endif SQLITE_OMIT_WINDOWFUNC",
          "222:   REINDEX RENAME CTIME_KW IF",
          "223:   .",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "924:   ) FROM t1 ORDER BY a ASC;",
          "925: } {{} 200 {} 200 1 3 2 6 3 10 4 14 5 12 a 6 b 7 c 8 d 9 e 10}",
          "927: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927: #-------------------------------------------------------------------------",
          "928: do_execsql_test 21.0 {",
          "929:   CREATE TABLE keyword_tab(",
          "930:     current, exclude, filter, following, groups, no, others, over,",
          "931:     partition, preceding, range, ties, unbounded, window",
          "932:   );",
          "933: }",
          "934: do_execsql_test 21.1 {",
          "935:   SELECT",
          "936:     current, exclude, filter, following, groups, no, others, over,",
          "937:     partition, preceding, range, ties, unbounded, window",
          "938:   FROM keyword_tab",
          "939: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95d5a880584bfb6f21fc3843737f9a6f4aed3cf1",
      "candidate_info": {
        "commit_hash": "95d5a880584bfb6f21fc3843737f9a6f4aed3cf1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95d5a880584bfb6f21fc3843737f9a6f4aed3cf1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/indexexpr2.test"
        ],
        "message": "Make indexes on CAST(...) expressions work.\n\nFossilOrigin-Name: 3ef711d98fb239cf24472f124e7b36b0dde33355de5a2c9a3a978bbdd042a735",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9faf9033910927c74553e66c474d84ed3386f263cef3eec299e25d8306f410d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:     if( iColumn==XN_EXPR ){",
          "349:       pScan->pIdxExpr = pIdx->aColExpr->a[j].pExpr;",
          "350:       pScan->zCollName = pIdx->azColl[j];",
          "351:     }else if( iColumn==pIdx->pTable->iPKey ){",
          "352:       iColumn = XN_ROWID;",
          "353:     }else if( iColumn>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:       pScan->idxaff = sqlite3ExprAffinity(pScan->pIdxExpr);",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "250: } {2 4 3 9}",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: #-------------------------------------------------------------------------",
          "253: do_execsql_test 6.0 {",
          "254:   CREATE TABLE x1(a INTEGER PRIMARY KEY, b);",
          "255:   INSERT INTO x1 VALUES",
          "256:       (1, 123), (2, '123'), (3, '123abc'), (4, 123.0), (5, 1234);",
          "257: }",
          "259: do_execsql_test 6.1.1 {",
          "260:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "261: } {1 123   2 123   3 123abc  4 123.0}",
          "262: do_execsql_test 6.1.2 {",
          "263:   CREATE INDEX x1i ON x1( CAST(b AS INTEGER) );",
          "264:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "265: } {1 123   2 123   3 123abc  4 123.0}",
          "266: do_eqp_test 6.1.3 {",
          "267:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "268: } {SEARCH TABLE x1 USING INDEX x1i (<expr>=?)}",
          "270: do_execsql_test 6.2.1 {",
          "271:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "272: } {1 123   2 123}",
          "273: do_execsql_test 6.2.2 {",
          "274:   CREATE INDEX x1i2 ON x1( CAST(b AS TEXT) );",
          "275:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "276: } {1 123   2 123}",
          "277: do_eqp_test 6.2.3 {",
          "278:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "279: } {SEARCH TABLE x1 USING INDEX x1i2 (<expr>=?)}",
          "",
          "---------------"
        ]
      }
    }
  ]
}