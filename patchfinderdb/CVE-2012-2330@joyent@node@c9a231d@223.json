{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02ff9741cce9185c6cacc23baba407401e16d78c",
      "candidate_info": {
        "commit_hash": "02ff9741cce9185c6cacc23baba407401e16d78c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/02ff9741cce9185c6cacc23baba407401e16d78c",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on 0.8.4",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define NODE_MAJOR_VERSION 0",
          "26: #define NODE_MINOR_VERSION 8",
          "30: #ifndef NODE_STRINGIFY",
          "31: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "27: #define NODE_PATCH_VERSION 3",
          "28: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "27: #define NODE_PATCH_VERSION 4",
          "28: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "332fea5ac1816e498030109c4211bca24a7fa667",
      "candidate_info": {
        "commit_hash": "332fea5ac1816e498030109c4211bca24a7fa667",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/332fea5ac1816e498030109c4211bca24a7fa667",
        "files": [
          "lib/dgram.js"
        ],
        "message": "dgram: make .bind() always asynchronous",
        "before_after_code_files": [
          "lib/dgram.js||lidgram.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/dgram.js||lidgram.js": [
          "File: lib/dgram.js -> lidgram.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: function lookup(address, family, callback) {",
          "51:   if (!dns)",
          "52:     dns = require('dns');",
          "",
          "[Removed Lines]",
          "47:   var matchedFamily = isIP(address);",
          "48:   if (matchedFamily)",
          "49:     return callback(null, address, matchedFamily);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111: };",
          "115:   var self = this;",
          "117:   self._healthCheck();",
          "120:   self._handle.lookup(address, function(err, ip) {",
          "132:     if (err) {",
          "138:     }",
          "139:   });",
          "140: };",
          "",
          "[Removed Lines]",
          "114: Socket.prototype.bind = function(port, address) {",
          "121:     if (!err) {",
          "122:       if (self._handle.bind(ip, port || 0, /*flags=*/0)) {",
          "123:         err = errnoException(errno, 'bind');",
          "124:       }",
          "125:       else {",
          "126:         self._bound = true;",
          "127:         self._startReceiving();",
          "128:         self.emit('listening');",
          "129:       }",
          "130:     }",
          "135:       process.nextTick(function() {",
          "136:         self.emit('error', err);",
          "137:       });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:   callback = callback || noop;",
          "176:   self._healthCheck();",
          "179:   self._handle.lookup(address, function(err, ip) {",
          "180:     if (err) {",
          "",
          "[Removed Lines]",
          "177:   self._startReceiving();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309: };",
          "331: Socket.prototype._stopReceiving = function() {",
          "332:   if (!this._receiving)",
          "333:     return;",
          "",
          "[Removed Lines]",
          "312: Socket.prototype._startReceiving = function() {",
          "313:   if (this._receiving)",
          "314:     return;",
          "316:   if (!this._bound) {",
          "317:     this.bind(); // bind to random port",
          "320:     if (!this._bound)",
          "321:       throw new Error('implicit bind failed');",
          "322:   }",
          "324:   this._handle.onmessage = onMessage;",
          "325:   this._handle.recvStart();",
          "326:   this._receiving = true;",
          "327:   this.fd = -42; // compatibility hack",
          "328: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d71e74491081f2682224ce0b92079faf2f97782",
      "candidate_info": {
        "commit_hash": "9d71e74491081f2682224ce0b92079faf2f97782",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9d71e74491081f2682224ce0b92079faf2f97782",
        "files": [
          "src/node_isolate.cc",
          "src/node_isolate.h"
        ],
        "message": "isolates: rename node::Isolate member isolate_ to v8_isolate_",
        "before_after_code_files": [
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   SLIST_INIT(&at_exit_callbacks_);",
          "39:   loop_ = loop;",
          "45:   }",
          "50:   globals_init(&globals_);",
          "51: }",
          "",
          "[Removed Lines]",
          "41:   isolate_ = v8::Isolate::GetCurrent();",
          "42:   if (isolate_ == NULL) {",
          "43:     isolate_ = v8::Isolate::New();",
          "44:     isolate_->Enter();",
          "47:   assert(isolate_->GetData() == NULL);",
          "48:   isolate_->SetData(this);",
          "",
          "[Added Lines]",
          "41:   v8_isolate_ = v8::Isolate::GetCurrent();",
          "42:   if (v8_isolate_ == NULL) {",
          "43:     v8_isolate_ = v8::Isolate::New();",
          "44:     v8_isolate_->Enter();",
          "47:   assert(v8_isolate_->GetData() == NULL);",
          "48:   v8_isolate_->SetData(this);",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     return loop_;",
          "58:   }",
          "61:     NODE_ISOLATE_CHECK(this);",
          "63:   }",
          "",
          "[Removed Lines]",
          "60:   operator v8::Isolate*() {",
          "62:     return isolate_;",
          "",
          "[Added Lines]",
          "60:   v8::Isolate* GetV8Isolate() {",
          "62:     return v8_isolate_;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   };",
          "84:   SLIST_HEAD(AtExitCallbacks, AtExitCallbackInfo) at_exit_callbacks_;",
          "86:   uv_loop_t* loop_;",
          "",
          "[Removed Lines]",
          "85:   v8::Isolate* isolate_;",
          "",
          "[Added Lines]",
          "85:   v8::Isolate* v8_isolate_;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b6164ab491e48f30286f739a8a0e66587499bfd",
      "candidate_info": {
        "commit_hash": "4b6164ab491e48f30286f739a8a0e66587499bfd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4b6164ab491e48f30286f739a8a0e66587499bfd",
        "files": [
          "deps/uv/src/unix/udp.c"
        ],
        "message": "uv: upgrade to 332b72e",
        "before_after_code_files": [
          "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c": [
          "File: deps/uv/src/unix/udp.c -> deps/uv/src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527:     return 0;                                                                 \\",
          "528:   }",
          "531: X(broadcast, SOL_SOCKET, SO_BROADCAST)",
          "533: #undef X",
          "537: #if __sun",
          "539: #else",
          "541: #endif",
          "543: #if __sun",
          "545:     uv__set_sys_error(handle->loop, EINVAL);",
          "546:     return -1;",
          "547:   }",
          "",
          "[Removed Lines]",
          "530: X(multicast_loop, IPPROTO_IP, IP_MULTICAST_LOOP)",
          "536: static int uv__udp_set_ttl(uv_udp_t* handle, int option, int ttl) {",
          "538:   char arg = ttl;",
          "540:   int arg = ttl;",
          "544:   if (ttl < 0 || ttl > 255) {",
          "",
          "[Added Lines]",
          "531: X(ttl, IPPROTO_IP, IP_TTL)",
          "536: static int uv__setsockopt_maybe_char(uv_udp_t* handle, int option, int val) {",
          "538:   char arg = val;",
          "540:   int arg = val;",
          "544:   if (val < 0 || val > 255) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "556: }",
          "561: }",
          "566: }",
          "",
          "[Removed Lines]",
          "559: int uv_udp_set_ttl(uv_udp_t* handle, int ttl) {",
          "560:   return uv__udp_set_ttl(handle, IP_TTL, ttl);",
          "564: int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl) {",
          "565:   return uv__udp_set_ttl(handle, IP_MULTICAST_TTL, ttl);",
          "",
          "[Added Lines]",
          "559: int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl) {",
          "560:   return uv__setsockopt_maybe_char(handle, IP_MULTICAST_TTL, ttl);",
          "564: int uv_udp_set_multicast_loop(uv_udp_t* handle, int on) {",
          "565:   return uv__setsockopt_maybe_char(handle, IP_MULTICAST_LOOP, on);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e0bf7d57de318f45a097e05644efa49beb65209",
      "candidate_info": {
        "commit_hash": "7e0bf7d57de318f45a097e05644efa49beb65209",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7e0bf7d57de318f45a097e05644efa49beb65209",
        "files": [
          "lib/module.js"
        ],
        "message": "Process symlinked shared library as .node",
        "before_after_code_files": [
          "lib/module.js||limodule.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/module.js||limodule.js": [
          "File: lib/module.js -> limodule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "467: };",
          "471: Module._extensions['.node'] = function(module, filename) {",
          "472:   process.dlopen(filename, module.exports);",
          "473: };",
          "477: Module.runMain = function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}