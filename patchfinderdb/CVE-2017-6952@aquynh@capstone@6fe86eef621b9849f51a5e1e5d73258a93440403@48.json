{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f3cf9dbdbe8f11bd67958b39540603800350777c",
      "candidate_info": {
        "commit_hash": "f3cf9dbdbe8f11bd67958b39540603800350777c",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f3cf9dbdbe8f11bd67958b39540603800350777c",
        "files": [
          "msvc/test_basic/test_basic.vcxproj"
        ],
        "message": "fix that version was for 2013; should be 2010",
        "before_after_code_files": [
          "msvc/test_basic/test_basic.vcxproj||msvc/test_basic/test_basic.vcxproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "msvc/test_basic/test_basic.vcxproj||msvc/test_basic/test_basic.vcxproj": [
          "File: msvc/test_basic/test_basic.vcxproj -> msvc/test_basic/test_basic.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \ufeff<?xml version=\"1.0\" encoding=\"utf-8\"?>",
          "3:   <ItemGroup Label=\"ProjectConfigurations\">",
          "4:     <ProjectConfiguration Include=\"Debug|Win32\">",
          "5:       <Configuration>Debug</Configuration>",
          "",
          "[Removed Lines]",
          "2: <Project DefaultTargets=\"Build\" ToolsVersion=\"12.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">",
          "",
          "[Added Lines]",
          "2: <Project DefaultTargets=\"Build\" ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     <ConfigurationType>Application</ConfigurationType>",
          "30:     <UseDebugLibraries>true</UseDebugLibraries>",
          "31:     <CharacterSet>Unicode</CharacterSet>",
          "33:   </PropertyGroup>",
          "34:   <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">",
          "35:     <ConfigurationType>Application</ConfigurationType>",
          "36:     <UseDebugLibraries>true</UseDebugLibraries>",
          "37:     <CharacterSet>Unicode</CharacterSet>",
          "39:   </PropertyGroup>",
          "40:   <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">",
          "41:     <ConfigurationType>Application</ConfigurationType>",
          "42:     <UseDebugLibraries>false</UseDebugLibraries>",
          "43:     <WholeProgramOptimization>true</WholeProgramOptimization>",
          "44:     <CharacterSet>Unicode</CharacterSet>",
          "46:   </PropertyGroup>",
          "47:   <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">",
          "48:     <ConfigurationType>Application</ConfigurationType>",
          "49:     <UseDebugLibraries>false</UseDebugLibraries>",
          "50:     <WholeProgramOptimization>true</WholeProgramOptimization>",
          "51:     <CharacterSet>Unicode</CharacterSet>",
          "53:   </PropertyGroup>",
          "54:   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />",
          "55:   <ImportGroup Label=\"ExtensionSettings\">",
          "",
          "[Removed Lines]",
          "32:     <PlatformToolset>v120</PlatformToolset>",
          "38:     <PlatformToolset>v120</PlatformToolset>",
          "45:     <PlatformToolset>v120</PlatformToolset>",
          "52:     <PlatformToolset>v120</PlatformToolset>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33f39e1632370f8ea3a6e23ec31cbf673a1d03da",
      "candidate_info": {
        "commit_hash": "33f39e1632370f8ea3a6e23ec31cbf673a1d03da",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/33f39e1632370f8ea3a6e23ec31cbf673a1d03da",
        "files": [
          "MCInst.c",
          "utils.c"
        ],
        "message": "Fix undefined behavior when disassembling ud0 x86 instructions (#1032)\n\n* fix undefined behavior due to uninitialized memory\n\n* fix bad calloc call",
        "before_after_code_files": [
          "MCInst.c||MCInst.c",
          "utils.c||utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "MCInst.c||MCInst.c": [
          "File: MCInst.c -> MCInst.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: void MCInst_Init(MCInst *inst)",
          "18: {",
          "19:  inst->OpcodePub = 0;",
          "20:  inst->size = 0;",
          "21:  inst->has_imm = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  inst->Opcode = 0;",
          "",
          "---------------"
        ],
        "utils.c||utils.c": [
          "File: utils.c -> utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  unsigned short max_id = insns[size - 1].id;",
          "18:  unsigned short i;",
          "22:  for (i = 1; i < size; i++)",
          "23:   cache[insns[i].id] = i;",
          "",
          "[Removed Lines]",
          "20:  unsigned short *cache = (unsigned short *)cs_mem_malloc(sizeof(*cache) * (max_id + 1));",
          "",
          "[Added Lines]",
          "20:  unsigned short *cache = (unsigned short *)cs_mem_calloc(max_id + 1, sizeof(*cache));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16477206564745782854e0ec5c68defa02429dd8",
      "candidate_info": {
        "commit_hash": "16477206564745782854e0ec5c68defa02429dd8",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/16477206564745782854e0ec5c68defa02429dd8",
        "files": [
          "bindings/python/capstone/__init__.py",
          "bindings/python/capstone/arm.py",
          "bindings/python/capstone/arm64.py",
          "bindings/python/capstone/mips.py",
          "bindings/python/capstone/ppc.py",
          "bindings/python/capstone/sparc.py",
          "bindings/python/capstone/systemz.py",
          "bindings/python/capstone/x86.py",
          "bindings/python/capstone/xcore.py"
        ],
        "message": "Python bindings: Changes to how structures are copied so that capstone works correctly in PyPy",
        "before_after_code_files": [
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py",
          "bindings/python/capstone/arm.py||bindings/python/capstone/arm.py",
          "bindings/python/capstone/arm64.py||bindings/python/capstone/arm64.py",
          "bindings/python/capstone/mips.py||bindings/python/capstone/mips.py",
          "bindings/python/capstone/ppc.py||bindings/python/capstone/ppc.py",
          "bindings/python/capstone/sparc.py||bindings/python/capstone/sparc.py",
          "bindings/python/capstone/systemz.py||bindings/python/capstone/systemz.py",
          "bindings/python/capstone/x86.py||bindings/python/capstone/x86.py",
          "bindings/python/capstone/xcore.py||bindings/python/capstone/xcore.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: _python2 = sys.version_info[0] < 3",
          "5: if _python2:",
          "6:     range = xrange",
          "9: __all__ = [",
          "10:     'Cs',",
          "",
          "[Removed Lines]",
          "7: from . import arm, arm64, mips, ppc, sparc, systemz, x86, xcore",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253: # low-level structure for C code",
          "254: class _cs_arch(ctypes.Union):",
          "255:     _fields_ = (",
          "256:         ('arm64', arm64.CsArm64),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254: def copy_ctypes(src):",
          "255:     \"\"\"Returns a new ctypes object which is a bitwise copy of an existing one\"\"\"",
          "256:     dst = type(src)()",
          "257:     ctypes.memmove(ctypes.byref(dst), ctypes.byref(src), ctypes.sizeof(type(src)))",
          "258:     return dst",
          "260: def copy_ctypes_list(src):",
          "261:     return [copy_ctypes(n) for n in src]",
          "263: # Weird import placement because these modules are needed by the below code but need the above functions",
          "264: from . import arm, arm64, mips, ppc, sparc, systemz, x86, xcore",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "435:         raise CsError(status)",
          "446: # Python-style class to disasm code",
          "447: class CsInsn(object):",
          "448:     def __init__(self, cs, all_info):",
          "",
          "[Removed Lines]",
          "438: # alternately",
          "439: def copy_ctypes(src):",
          "440:     \"\"\"Returns a new ctypes object which is a bitwise copy of an existing one\"\"\"",
          "441:     dst = type(src)()",
          "442:     ctypes.pointer(dst)[0] = src",
          "443:     return dst",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bindings/python/capstone/arm.py||bindings/python/capstone/arm.py": [
          "File: bindings/python/capstone/arm.py -> bindings/python/capstone/arm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .arm_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: def get_arch_info(a):",
          "76:     return (a.usermode, a.vector_size, a.vector_data, a.cps_mode, a.cps_flag, a.cc, a.update_flags, \\",
          "",
          "[Removed Lines]",
          "77:         a.writeback, a.mem_barrier, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "78:         a.writeback, a.mem_barrier, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/arm64.py||bindings/python/capstone/arm64.py": [
          "File: bindings/python/capstone/arm64.py -> bindings/python/capstone/arm64.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .arm64_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     )",
          "86: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "87:     return (a.cc, a.update_flags, a.writeback, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "88:     return (a.cc, a.update_flags, a.writeback, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/mips.py||bindings/python/capstone/mips.py": [
          "File: bindings/python/capstone/mips.py -> bindings/python/capstone/mips.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .mips_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     )",
          "45: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "46:     return copy.deepcopy(a.operands[:a.op_count])",
          "",
          "[Added Lines]",
          "47:     return copy_ctypes_list(a.operands[:a.op_count])",
          "",
          "---------------"
        ],
        "bindings/python/capstone/ppc.py||bindings/python/capstone/ppc.py": [
          "File: bindings/python/capstone/ppc.py -> bindings/python/capstone/ppc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .ppc_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     )",
          "60: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "61:     return (a.bc, a.bh, a.update_cr0, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "62:     return (a.bc, a.bh, a.update_cr0, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/sparc.py||bindings/python/capstone/sparc.py": [
          "File: bindings/python/capstone/sparc.py -> bindings/python/capstone/sparc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .sparc_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     )",
          "48: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "49:     return (a.cc, a.hint, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "50:     return (a.cc, a.hint, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/systemz.py||bindings/python/capstone/systemz.py": [
          "File: bindings/python/capstone/systemz.py -> bindings/python/capstone/systemz.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .sysz_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     )",
          "48: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "49:     return (a.cc, copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "50:     return (a.cc, copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/x86.py||bindings/python/capstone/x86.py": [
          "File: bindings/python/capstone/x86.py -> bindings/python/capstone/x86.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .x86_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     return (a.prefix[:], a.opcode[:], a.rex, a.addr_size, \\",
          "72:             a.modrm, a.sib, a.disp, a.sib_index, a.sib_scale, \\",
          "73:             a.sib_base, a.sse_cc, a.avx_cc, a.avx_sae, a.avx_rm, \\",
          "",
          "[Removed Lines]",
          "74:             copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "75:             copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ],
        "bindings/python/capstone/xcore.py||bindings/python/capstone/xcore.py": [
          "File: bindings/python/capstone/xcore.py -> bindings/python/capstone/xcore.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Capstone Python bindings, by Nguyen Anh Quynnh <aquynh@gmail.com>",
          "4: from .xcore_const import *",
          "6: # define the API",
          "",
          "[Removed Lines]",
          "3: import ctypes, copy",
          "",
          "[Added Lines]",
          "3: import ctypes",
          "4: from . import copy_ctypes_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     )",
          "47: def get_arch_info(a):",
          "",
          "[Removed Lines]",
          "48:     return (copy.deepcopy(a.operands[:a.op_count]))",
          "",
          "[Added Lines]",
          "49:     return (copy_ctypes_list(a.operands[:a.op_count]))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51c8c5082a516856e110eac2f9e878dbcf49e797",
      "candidate_info": {
        "commit_hash": "51c8c5082a516856e110eac2f9e878dbcf49e797",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/51c8c5082a516856e110eac2f9e878dbcf49e797",
        "files": [
          "cstool/Makefile",
          "cstool/README",
          "cstool/cstool.c"
        ],
        "message": "cstool 1.0 (#788)\n\n* first cstool -- Segmentation fault: 11\n\n* Modify the format of output.\n\n* Preprocess the input from user. The result of converting looks right but the disassembly is not unsatisfactory.\n\n* Skip the character not in set A = {'a'~'f','A'~'F','0'~'9'}.\ni Please enter the commit message for your changes. Lines starting\n\n* delete cstool binary\n\n* using isxdigit() to tests for any hexadecimal-digit character\n\n* write README\n\n* final version 1.0 for cstool",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #include <stdio.h>",
          "3: #include <inttypes.h>",
          "4: #include <string.h>",
          "5: #include <ctype.h>",
          "6: #include <errno.h>",
          "8: #include <capstone/capstone.h>",
          "12: static uint8_t char_to_hexnum(char c)",
          "13: {",
          "14:     if (c >= '0' && c <= '9') {",
          "15:         return (uint8_t)(c - '0');",
          "16:     }",
          "18:     if (c >= 'a' && c <= 'f') {",
          "19:         return (uint8_t)(10 + c - 'a');",
          "20:     }",
          "23:     return (uint8_t)(10 + c - 'A');",
          "24: }",
          "27: static uint8_t *preprocess(char *code, size_t *size)",
          "28: {",
          "29:     size_t i, j = 0;",
          "30:     uint8_t high, low;",
          "31:     uint8_t *result;",
          "32:     result = (uint8_t *)malloc(strlen(code));",
          "34:     if (result != NULL) {",
          "35:         while (code[i] != '\\0') {",
          "36:             if (isxdigit(code[i]) && isxdigit(code[i+1])) {",
          "37:                 high = 16 * char_to_hexnum(code[i]);",
          "38:                 low = char_to_hexnum(code[i+1]);",
          "39:                 result[j] = high + low;",
          "40:                 i++;",
          "41:                 j++;",
          "42:             }",
          "43:             i++;",
          "44:         }",
          "46:     }",
          "48:     return result;",
          "49: }",
          "51: static void usage(char * prog)",
          "52: {",
          "53:     printf(\"Syntax: %s <arch+mode> <assembler-string> [start-address-in-hex-format]\\n\", prog);",
          "54:     printf(\"\\nThe following <arch+mode> options are supported:\\n\");",
          "56:     if (cs_support(CS_ARCH_ARM)) {",
          "57:         printf(\"        arm:       arm\\n\");",
          "58:         printf(\"        armb:      arm + big endian\\n\");",
          "59:         printf(\"        arml:      arm + little endian\\n\");",
          "60:         printf(\"        thumb:     thumb mode\\n\");",
          "61:         printf(\"        thumbbe:   thumb + big endian\\n\");",
          "62:         printf(\"        thumble:   thumb + billtle endian\\n\");",
          "63:     }",
          "65:     if (cs_support(CS_ARCH_ARM64)) {",
          "66:          printf(\"        arm64:     aarch64 mode\\n\");",
          "67:     }",
          "69:     if (cs_support(CS_ARCH_MIPS)) {",
          "70:         printf(\"        mips:      mips32 + little endian\\n\");",
          "71:         printf(\"        mipsbe:    mips32 + big endian\\n\");",
          "72:         printf(\"        mips64:    mips64 + little endian\\n\");",
          "73:         printf(\"        mips64be:  mips64 + big endian\\n\");",
          "74:     }",
          "76:     if (cs_support(CS_ARCH_X86)) {",
          "77:          printf(\"        x16:       16-bit mode (X86)\\n\");",
          "78:          printf(\"        x32:       32-bit mode (X86)\\n\");",
          "79:          printf(\"        x64:       64-bit mode (X86)\\n\");",
          "80:          printf(\"        x16att:    16-bit mode (X86) syntax-att\\n\");",
          "81:          printf(\"        x32att:    32-bit mode (X86) syntax-att\\n\");",
          "82:          printf(\"        x64att:    64-bit mode (X86) syntax-att\\n\");",
          "83:     }",
          "85:     if (cs_support(CS_ARCH_PPC)) {",
          "86:         printf(\"        ppc64:     ppc64 + little endian\\n\");",
          "87:         printf(\"        ppc64be:   ppc64 + big endian\\n\");",
          "88:     }",
          "90:     if (cs_support(CS_ARCH_SPARC)) {",
          "91:         printf(\"        sparc:     sparc\\n\");",
          "92:     }",
          "94:     if (cs_support(CS_ARCH_SYSZ)) {",
          "95:        printf(\"        systemz:   systemz (s390x)\\n\");",
          "96:     }",
          "98:     if (cs_support(CS_ARCH_XCORE)) {",
          "99:         printf(\"        xcore:     xcore\\n\");",
          "100:     }",
          "102:     printf(\"\\n\");",
          "103: }",
          "105: int main(int argc, char **argv)",
          "106: {",
          "107:     csh handle;",
          "108:     char *mode;",
          "109:     uint8_t *assembly;",
          "110:     size_t count, size;",
          "111:     uint64_t address = 0;",
          "112:     cs_insn *insn;",
          "113:     cs_err err;",
          "115:     if (argc != 3 && argc != 4) {",
          "116:         usage(argv[0]);",
          "117:         return -1;",
          "118:     }",
          "120:     mode = argv[1];",
          "121:     assembly = preprocess(argv[2], &size);",
          "122:     if (assembly == NULL) {",
          "123:         printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "124:         return -3;",
          "125:     }",
          "127:     if (argc == 4) {",
          "129:         char *temp;",
          "130:         address = strtoull(argv[3], &temp, 16);",
          "131:         if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "132:             printf(\"ERROR: invalid address argument, quit!\\n\");",
          "133:             return -2;",
          "134:         }",
          "135:     }",
          "137:     if (!strcmp(mode, \"arm\")) {",
          "138:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "139:     }",
          "141:     if (!strcmp(mode, \"armb\")) {",
          "142:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "143:     }",
          "145:     if (!strcmp(mode, \"arml\")) {",
          "146:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "147:     }",
          "149:     if (!strcmp(mode, \"thumb\")) {",
          "150:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "151:     }",
          "153:     if (!strcmp(mode, \"thumbbe\")) {",
          "154:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "155:     }",
          "157:     if (!strcmp(mode, \"thumble\")) {",
          "158:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "159:     }",
          "161:     if (!strcmp(mode, \"arm64\")) {",
          "162:         err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "163:     }",
          "165:     if (!strcmp(mode, \"mips\")) {",
          "166:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "167:     }",
          "169:     if (!strcmp(mode, \"mipsbe\")) {",
          "170:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "171:     }",
          "173:     if (!strcmp(mode, \"mips64\")) {",
          "174:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "175:     }",
          "177:     if (!strcmp(mode, \"mips64be\")) {",
          "178:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "179:     }",
          "181:     if (!strcmp(mode, \"x16\")) {",
          "182:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "183:     }",
          "185:     if (!strcmp(mode, \"x32\")) {",
          "186:         err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "187:     }",
          "189:     if (!strcmp(mode, \"x64\")) {",
          "190:         err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "191:     }",
          "193:     if (!strcmp(mode, \"x16att\")) {",
          "194:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "195:         if (!err) {",
          "196:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "197:         }",
          "198:     }",
          "200:     if (!strcmp(mode,\"x32att\")) {",
          "201:         err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "202:         if (!err) {",
          "203:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "204:         }",
          "205:     }",
          "207:     if (!strcmp(mode,\"x64att\")) {",
          "208:         err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "209:         if (!err) {",
          "210:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "211:         }",
          "212:     }",
          "214:     if (!strcmp(mode,\"ppc64\")) {",
          "215:         err = cs_open(CS_ARCH_PPC, CS_MODE_64+CS_MODE_LITTLE_ENDIAN, &handle);",
          "216:     }",
          "218:     if (!strcmp(mode,\"ppc64be\")) {",
          "219:         err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "220:     }",
          "222:     if (!strcmp(mode,\"sparc\")) {",
          "223:         err = cs_open(CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, &handle);",
          "224:     }",
          "226:     if (!strcmp(mode, \"systemz\") || !strcmp(mode, \"sysz\") || !strcmp(mode, \"s390x\")) {",
          "227:         err = cs_open(CS_ARCH_SYSZ, CS_MODE_BIG_ENDIAN, &handle);",
          "228:     }",
          "230:     if (!strcmp(mode,\"xcore\")) {",
          "231:         err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "232:     }",
          "234:     if (err) {",
          "235:         printf(\"ERROR: Failed on cs_open()\\n\");",
          "236:         usage(argv[0]);",
          "237:         return -1;",
          "238:     }",
          "240:     count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "241:     if (count > 0) {",
          "242:         size_t j;",
          "243:         int i;",
          "245:         printf(\"\\n\");",
          "246:         for (j = 0; j < count; j++) {",
          "247:             printf(\"%\"PRIx64 \"\\t\", insn[j].address);",
          "248:             for (i = 0; i < insn[j].size; i++) {",
          "249:                 printf(\"%02x\", insn[j].bytes[i]);",
          "250:             }",
          "251:             printf(\"\\t%s\\t%s\\n\", insn[j].mnemonic, insn[j].op_str);",
          "252:         }",
          "253:         cs_free(insn, count);",
          "254:     } else {",
          "255:         printf(\"ERROR: no any assembly instrution corresponding to your input, please check your input, quit!\\n\");",
          "256:         return(-4);",
          "257:     }",
          "259:     cs_close(&handle);",
          "260:     return 0;",
          "261: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da6b5f35ec00fffcd4412ac6c894162006c2a9ed",
      "candidate_info": {
        "commit_hash": "da6b5f35ec00fffcd4412ac6c894162006c2a9ed",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/da6b5f35ec00fffcd4412ac6c894162006c2a9ed",
        "files": [
          "arch/M68K/M68KDisassembler.c",
          "arch/X86/X86ATTInstPrinter.c",
          "arch/X86/X86IntelInstPrinter.c",
          "arch/X86/X86Mapping.c"
        ],
        "message": "Append LL for all > 32bit numeric immediates",
        "before_after_code_files": [
          "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c",
          "arch/X86/X86ATTInstPrinter.c||arch/X86/X86ATTInstPrinter.c",
          "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c",
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c": [
          "File: arch/M68K/M68KDisassembler.c -> arch/M68K/M68KDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: {",
          "208:  const uint64_t addr = (address - info->baseAddress) & info->address_mask;",
          "209:  if (addr > (info->code_len - 8)) {",
          "211:  }",
          "212:  return m68k_read_disassembler_64(info, addr);",
          "213: }",
          "",
          "[Removed Lines]",
          "210:   return 0xaaaaaaaaaaaaaaaa;",
          "",
          "[Added Lines]",
          "210:   return 0xaaaaaaaaaaaaaaaaLL;",
          "",
          "---------------"
        ],
        "arch/X86/X86ATTInstPrinter.c||arch/X86/X86ATTInstPrinter.c": [
          "File: arch/X86/X86ATTInstPrinter.c -> arch/X86/X86ATTInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "654:      else",
          "655:       SStream_concat(O, \"$%\"PRIu64, imm);",
          "656:     } else {",
          "658:       SStream_concat0(O, \"$0x8000000000000000\");",
          "659:      else if (imm < -HEX_THRESHOLD)",
          "660:       SStream_concat(O, \"$-0x%\"PRIx64, -imm);",
          "",
          "[Removed Lines]",
          "657:      if (imm == 0x8000000000000000)  // imm == -imm",
          "",
          "[Added Lines]",
          "657:      if (imm == 0x8000000000000000LL)  // imm == -imm",
          "",
          "---------------"
        ],
        "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c": [
          "File: arch/X86/X86IntelInstPrinter.c -> arch/X86/X86IntelInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:   if (syntax == CS_OPT_SYNTAX_MASM) {",
          "369:    if (imm < 0) {",
          "371:      SStream_concat0(O, \"8000000000000000h\");",
          "372:     else if (need_zero_prefix(imm))",
          "373:      SStream_concat(O, \"0%\"PRIx64\"h\", imm);",
          "",
          "[Removed Lines]",
          "370:     if (imm == 0x8000000000000000)  // imm == -imm",
          "",
          "[Added Lines]",
          "370:     if (imm == 0x8000000000000000LL)  // imm == -imm",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395:  } else {",
          "396:   if (syntax == CS_OPT_SYNTAX_MASM) {",
          "397:    if (imm < 0) {",
          "399:      SStream_concat0(O, \"8000000000000000h\");",
          "400:     else if (imm < -HEX_THRESHOLD) {",
          "401:      if (need_zero_prefix(imm))",
          "",
          "[Removed Lines]",
          "398:     if (imm == 0x8000000000000000)  // imm == -imm",
          "",
          "[Added Lines]",
          "398:     if (imm == 0x8000000000000000LL)  // imm == -imm",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "415:    }",
          "416:   } else { // Intel syntax",
          "417:    if (imm < 0) {",
          "419:      SStream_concat0(O, \"0x8000000000000000\");",
          "420:     else if (imm < -HEX_THRESHOLD)",
          "421:      SStream_concat(O, \"-0x%\"PRIx64, -imm);",
          "",
          "[Removed Lines]",
          "418:     if (imm == 0x8000000000000000)  // imm == -imm",
          "",
          "[Added Lines]",
          "418:     if (imm == 0x8000000000000000LL)  // imm == -imm",
          "",
          "---------------"
        ],
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  0,",
          "18:  0xffffffff,",
          "19:  0, 0, 0,",
          "21: };",
          "23: static x86_reg sib_base_map[] = {",
          "",
          "[Removed Lines]",
          "20:  0xffffffffffffffff",
          "",
          "[Added Lines]",
          "20:  0xffffffffffffffffLL",
          "",
          "---------------"
        ]
      }
    }
  ]
}