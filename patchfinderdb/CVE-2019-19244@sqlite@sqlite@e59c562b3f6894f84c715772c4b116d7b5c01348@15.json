{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f202c6cdcfdc96fb2959133903d3ed5026b733d2",
      "candidate_info": {
        "commit_hash": "f202c6cdcfdc96fb2959133903d3ed5026b733d2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f202c6cdcfdc96fb2959133903d3ed5026b733d2",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/dbtotxt.c"
        ],
        "message": "Relax the minimum size database file constraint on the dbtotxt utility program.\n\nFossilOrigin-Name: 97e723d746eeb2159f5bf1701532271ac6a4620879c82d496f4499c178b64479",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 35f04235c477501390acea126d07a730d81d03cdf7abcd82d861e397b3f75b0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   fseek(in, 0, SEEK_END);",
          "94:   szFile = ftell(in);",
          "95:   rewind(in);",
          "98:     exit(1);",
          "99:   }",
          "100:   if( fread(aHdr, 100, 1, in)!=1 ){",
          "",
          "[Removed Lines]",
          "96:   if( szFile<512 ){",
          "97:     fprintf(stderr, \"File too short. Minimum size is 512 bytes.\\n\");",
          "",
          "[Added Lines]",
          "96:   if( szFile<100 ){",
          "97:     fprintf(stderr, \"File too short. Minimum size is 100 bytes.\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5989723ba9b6510728d8a50f35347dc8aa4ee6b",
      "candidate_info": {
        "commit_hash": "e5989723ba9b6510728d8a50f35347dc8aa4ee6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e5989723ba9b6510728d8a50f35347dc8aa4ee6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/main.c",
          "src/sqliteInt.h"
        ],
        "message": "Honor key query parameters for SEE on the URI filename for ATTACH and VACUUM INTO.\n\nFossilOrigin-Name: 2e01096b8933a2315e3dffcd7d0de84c744c1b4be1d909388c61f0fd636ddb99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/main.c||src/main.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 69b0b2ee536fda8975f60643f7f1891db4649958aca476822ea2a632ce731992",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     assert( pVfs );",
          "156:     flags |= SQLITE_OPEN_MAIN_DB;",
          "157:     rc = sqlite3BtreeOpen(pVfs, zPath, db, &pNew->pBt, 0, flags);",
          "159:     db->nDb++;",
          "160:   }",
          "161:   db->noSharedCache = 0;",
          "162:   if( rc==SQLITE_CONSTRAINT ){",
          "",
          "[Removed Lines]",
          "158:     sqlite3_free( zPath );",
          "",
          "[Added Lines]",
          "159:     pNew->zDbSName = sqlite3DbStrDup(db, zName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:     sqlite3BtreeLeave(pNew->pBt);",
          "185:   }",
          "186:   pNew->safety_level = SQLITE_DEFAULT_SYNCHRONOUS+1;",
          "188:   if( rc==SQLITE_OK && pNew->zDbSName==0 ){",
          "189:     rc = SQLITE_NOMEM_BKPT;",
          "190:   }",
          "",
          "[Removed Lines]",
          "187:   if( !REOPEN_AS_MEMDB(db) ) pNew->zDbSName = sqlite3DbStrDup(db, zName);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212:         break;",
          "214:       case SQLITE_NULL:",
          "219:         }",
          "220:         break;",
          "221:     }",
          "222:   }",
          "223: #endif",
          "",
          "[Removed Lines]",
          "216:         sqlite3CodecGetKey(db, 0, (void**)&zKey, &nKey);",
          "217:         if( nKey || sqlite3BtreeGetOptimalReserve(db->aDb[0].pBt)>0 ){",
          "218:           rc = sqlite3CodecAttach(db, db->nDb-1, zKey, nKey);",
          "",
          "[Added Lines]",
          "216:         if( sqlite3CodecQueryParameters(db, zName, zPath)==0 ){",
          "217:           sqlite3CodecGetKey(db, 0, (void**)&zKey, &nKey);",
          "218:           if( nKey || sqlite3BtreeGetOptimalReserve(db->aDb[0].pBt)>0 ){",
          "219:             rc = sqlite3CodecAttach(db, db->nDb-1, zKey, nKey);",
          "220:           }",
          "226:   sqlite3_free( zPath );",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2942:   return rc;",
          "2943: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2945: #if defined(SQLITE_HAS_CODEC)",
          "2951: int sqlite3CodecQueryParameters(",
          "2955: ){",
          "2956:   const char *zKey;",
          "2957:   if( (zKey = sqlite3_uri_parameter(zUri, \"hexkey\"))!=0 && zKey[0] ){",
          "2958:     u8 iByte;",
          "2959:     int i;",
          "2960:     char zDecoded[40];",
          "2961:     for(i=0, iByte=0; i<sizeof(zDecoded)*2 && sqlite3Isxdigit(zKey[i]); i++){",
          "2962:       iByte = (iByte<<4) + sqlite3HexToInt(zKey[i]);",
          "2963:       if( (i&1)!=0 ) zDecoded[i/2] = iByte;",
          "2964:     }",
          "2965:     sqlite3_key_v2(db, zDb, zDecoded, i/2);",
          "2966:     return 1;",
          "2967:   }else if( (zKey = sqlite3_uri_parameter(zUri, \"key\"))!=0 ){",
          "2968:     sqlite3_key_v2(db, zDb, zKey, sqlite3Strlen30(zKey));",
          "2969:     return 1;",
          "2970:   }else if( (zKey = sqlite3_uri_parameter(zUri, \"textkey\"))!=0 ){",
          "2971:     sqlite3_key_v2(db, zDb, zKey, -1);",
          "2972:     return 1;",
          "2973:   }else{",
          "2974:     return 0;",
          "2975:   }",
          "2976: }",
          "2977: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3287:   }",
          "3288: #endif",
          "3289: #if defined(SQLITE_HAS_CODEC)",
          "3305: #endif",
          "3306:   sqlite3_free(zOpen);",
          "3307:   return rc & 0xff;",
          "3308: }",
          "",
          "[Removed Lines]",
          "3290:   if( rc==SQLITE_OK ){",
          "3291:     const char *zKey;",
          "3292:     if( (zKey = sqlite3_uri_parameter(zOpen, \"hexkey\"))!=0 && zKey[0] ){",
          "3293:       u8 iByte;",
          "3294:       int i;",
          "3295:       char zDecoded[40];",
          "3296:       for(i=0, iByte=0; i<sizeof(zDecoded)*2 && sqlite3Isxdigit(zKey[i]); i++){",
          "3297:         iByte = (iByte<<4) + sqlite3HexToInt(zKey[i]);",
          "3298:         if( (i&1)!=0 ) zDecoded[i/2] = iByte;",
          "3299:       }",
          "3300:       sqlite3_key_v2(db, 0, zDecoded, i/2);",
          "3301:     }else if( (zKey = sqlite3_uri_parameter(zOpen, \"key\"))!=0 ){",
          "3302:       sqlite3_key_v2(db, 0, zKey, sqlite3Strlen30(zKey));",
          "3303:     }",
          "3304:   }",
          "",
          "[Added Lines]",
          "3324:   if( rc==SQLITE_OK ) sqlite3CodecQueryParameters(db, 0, zOpen);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3882: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "3883: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "3884:                     sqlite3_vfs**,char**,char **);",
          "3885: Btree *sqlite3DbNameToBtree(sqlite3*,const char*);",
          "3887: #ifdef SQLITE_UNTESTABLE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3885: #ifdef SQLITE_HAS_CODEC",
          "3886:   int sqlite3CodecQueryParameters(sqlite3*,const char*,const char*);",
          "3887: #else",
          "3888: # define sqlite3CodecQueryParameters(A,B,C) 0",
          "3889: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
      "candidate_info": {
        "commit_hash": "8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "Basic UPDATE functionality working for VIRTUAL tables.\n\nFossilOrigin-Name: c21959d4eb5d742a097a98e1874c0bf132dc962a97a65be1ab22d6ca3cf2b261",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7bfe0f679d8951b3e925bdf549efa0f8d6b514eddeaca69cbfddbd9476cfff5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:         }else if( pPk && (pTab->aCol[j].colFlags & COLFLAG_PRIMKEY)!=0 ){",
          "309:           chngPk = 1;",
          "310:         }",
          "311:         aXRef[j] = i;",
          "312:         break;",
          "313:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "312:         else if( pTab->aCol[j].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL) ){",
          "313:           sqlite3ErrorMsg(pParse,",
          "314:              \"cannot UPDATE generated column \\\"%s\\\"\",",
          "315:              pTab->aCol[j].zName);",
          "316:           goto update_cleanup;",
          "317:         }",
          "318: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "623:     oldmask |= sqlite3TriggerColmask(pParse,",
          "624:         pTrigger, pChanges, 0, TRIGGER_BEFORE|TRIGGER_AFTER, pTab, onError",
          "625:     );",
          "627:       if( oldmask==0xffffffff",
          "628:        || (i<32 && (oldmask & MASKBIT32(i))!=0)",
          "630:       ){",
          "631:         testcase(  oldmask!=0xffffffff && i==31 );",
          "633:       }else{",
          "635:       }",
          "636:     }",
          "637:     if( chngRowid==0 && pPk==0 ){",
          "",
          "[Removed Lines]",
          "626:     for(i=0; i<pTab->nCol; i++){",
          "629:        || (pTab->aCol[i].colFlags & COLFLAG_PRIMKEY)!=0",
          "632:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regOld+i);",
          "634:         sqlite3VdbeAddOp2(v, OP_Null, 0, regOld+i);",
          "",
          "[Added Lines]",
          "634:     for(i=0, k=regOld; i<pTab->nCol; i++, k++){",
          "635:       u32 colFlags = pTab->aCol[i].colFlags;",
          "636:       if( colFlags & COLFLAG_VIRTUAL ){",
          "637:         k--;",
          "638:         continue;",
          "639:       }",
          "642:        || (colFlags & COLFLAG_PRIMKEY)!=0",
          "645:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "647:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "655:   newmask = sqlite3TriggerColmask(",
          "656:       pParse, pTrigger, pChanges, 1, TRIGGER_BEFORE, pTab, onError",
          "657:   );",
          "659:     if( i==pTab->iPKey ){",
          "661:     }else{",
          "662:       j = aXRef[i];",
          "663:       if( j>=0 ){",
          "665:       }else if( 0==(tmask&TRIGGER_BEFORE) || i>31 || (newmask & MASKBIT32(i)) ){",
          "",
          "[Removed Lines]",
          "658:   for(i=0; i<pTab->nCol; i++){",
          "660:       sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "664:         sqlite3ExprCode(pParse, pChanges->a[j].pExpr, regNew+i);",
          "",
          "[Added Lines]",
          "671:   for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "673:       sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "674:     }else if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "675:       k--;",
          "679:         sqlite3ExprCode(pParse, pChanges->a[j].pExpr, k);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "671:         testcase( i==31 );",
          "672:         testcase( i==32 );",
          "674:       }else{",
          "676:       }",
          "677:     }",
          "678:   }",
          "",
          "[Removed Lines]",
          "673:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "675:         sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "",
          "[Added Lines]",
          "688:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "690:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "714:       }",
          "715:     }",
          "716:   }",
          "",
          "[Removed Lines]",
          "711:     for(i=0; i<pTab->nCol; i++){",
          "712:       if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "713:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "726:     for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "727:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "728:         k--;",
          "729:       }else if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "730:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "993b48e2b7990d615616843224dd994fd4866d99",
      "candidate_info": {
        "commit_hash": "993b48e2b7990d615616843224dd994fd4866d99",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/993b48e2b7990d615616843224dd994fd4866d99",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Call ioctl() with the correct signature on both Android and stock Linux.\n\nFossilOrigin-Name: 2422534908a85a4cd11784e4c23a74ad121404f73dade587bf27efde1e2b982b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 52f463d29407fad691c42b13462880e7605603c9be9f480d18e953a0ef78149a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521: #if defined(__linux__) && defined(SQLITE_ENABLE_BATCH_ATOMIC_WRITE)",
          "522: # ifdef __ANDROID__",
          "523:   { \"ioctl\", (sqlite3_syscall_ptr)(int(*)(int, int, ...))ioctl, 0 },",
          "524: # else",
          "525:   { \"ioctl\",         (sqlite3_syscall_ptr)ioctl,          0 },",
          "526: # endif",
          "527: #else",
          "528:   { \"ioctl\",         (sqlite3_syscall_ptr)0,              0 },",
          "529: #endif",
          "",
          "[Removed Lines]",
          "530: #define osIoctl ((int(*)(int,int,...))aSyscall[28].pCurrent)",
          "",
          "[Added Lines]",
          "524: #define osIoctl ((int(*)(int,int,...))aSyscall[28].pCurrent)",
          "527: #define osIoctl ((int(*)(int,unsigned long,...))aSyscall[28].pCurrent)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9042ff214b1b7f42d77cff6d8c1d1c22aa0b5428",
      "candidate_info": {
        "commit_hash": "9042ff214b1b7f42d77cff6d8c1d1c22aa0b5428",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9042ff214b1b7f42d77cff6d8c1d1c22aa0b5428",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tokenize.c",
          "test/normalize.test"
        ],
        "message": "Fix issues with the new normalizer.\n\nFossilOrigin-Name: 057d7d40c56b7416a59a79cb627b2b3e5837eca2d6dbcb50127baaadf1941f51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tokenize.c||src/tokenize.c",
          "test/normalize.test||test/normalize.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a4c890b0af9786295e6df05022009d8946550adb873535c610be805c2b7a4083",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "799:         break;",
          "800:       }",
          "801:       case TK_ID: {",
          "802:         j = pStr->nChar;",
          "803:         if( sqlite3Isquote(zSql[i]) ){",
          "804:           char *zId = sqlite3DbStrNDup(db, zSql+i, n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:         iStartIN = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "829:         }",
          "830:         break;",
          "831:       }",
          "832:       default: {",
          "833:         if( sqlite3IsIdChar(zSql[i]) ) addSpaceSeparator(pStr);",
          "834:         j = pStr->nChar;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "833:       case TK_SELECT: {",
          "834:         iStartIN = 0;",
          "836:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "841:       }",
          "842:     }",
          "843:   }",
          "844:   return sqlite3_str_finish(pStr);",
          "845: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "849:   if( tokenType!=TK_SEMI ) sqlite3_str_append(pStr, \";\", 1);",
          "",
          "---------------"
        ],
        "test/normalize.test||test/normalize.test": [
          "File: test/normalize.test -> test/normalize.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:   430",
          "208:   {SELECT \"a\" FROM t1 WHERE \"x\" IN (\"1\",\"2\",'3');}",
          "209:   0x2",
          "212:   440",
          "213:   {SELECT 'a' FROM t1 WHERE 'x';}",
          "",
          "[Removed Lines]",
          "210:   {0 {SELECT\"a\"FROM t1 WHERE\"x\"IN(?,?,?);}}",
          "",
          "[Added Lines]",
          "210:   {0 {SELECT a FROM t1 WHERE x IN(?,?,?);}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:   450",
          "218:   {SELECT [a] FROM t1 WHERE [x];}",
          "219:   0x2",
          "222:   460",
          "223:   {SELECT * FROM t1 WHERE x IN (x);}",
          "",
          "[Removed Lines]",
          "220:   {0 {SELECT\"a\"FROM t1 WHERE\"x\";}}",
          "",
          "[Added Lines]",
          "220:   {0 {SELECT a FROM t1 WHERE x;}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:   480",
          "233:   {SELECT * FROM t1 WHERE x IN ([x],\"a\");}",
          "234:   0x2",
          "237:   500",
          "238:   {SELECT * FROM t1 WHERE x IN ([x],\"a\",'b',sqlite_version());}",
          "239:   0x2",
          "242:   520",
          "243:   {SELECT * FROM t1 WHERE x IN (SELECT x FROM t1);}",
          "",
          "[Removed Lines]",
          "235:   {0 {SELECT*FROM t1 WHERE x IN(\"x\",\"a\");}}",
          "240:   {0 {SELECT*FROM t1 WHERE x IN(\"x\",\"a\",?,sqlite_version());}}",
          "",
          "[Added Lines]",
          "235:   {0 {SELECT*FROM t1 WHERE x IN(x,a);}}",
          "240:   {0 {SELECT*FROM t1 WHERE x IN(x,a,?,sqlite_version());}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:   540",
          "248:   {SELECT * FROM t1 WHERE x IN ((SELECT x FROM t1));}",
          "249:   0x2",
          "252:   550",
          "253:   {SELECT a, a+1, a||'b', a+\"b\" FROM t1;}",
          "254:   0x2",
          "257:   570",
          "258:   {SELECT * FROM t1 WHERE x IN (1);}",
          "",
          "[Removed Lines]",
          "250:   {0 {SELECT*FROM t1 WHERE x IN(?,?,?);}}",
          "255:   {0 {SELECT a,a+?,a||?,a+\"b\"FROM t1;}}",
          "",
          "[Added Lines]",
          "250:   {0 {SELECT*FROM t1 WHERE x IN((SELECT x FROM t1));}}",
          "255:   {0 {SELECT a,a+?,a||?,a+b FROM t1;}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:   680",
          "317:   {SELECT a, \"col f\" FROM t1 LEFT OUTER JOIN t2 ON [t1].[col f] == [t2].[col y];}",
          "318:   0x2",
          "321:   690",
          "322:   {SELECT * FROM ( WITH x AS ( SELECT * FROM t1 WHERE x IN ( 1)) SELECT 10);}",
          "",
          "[Removed Lines]",
          "319:   {0 {SELECT a,\"col f\"FROM t1 LEFT OUTER JOIN t2 ON\"t1\".\"col f\"==\"t2\".\"col y\";}}",
          "",
          "[Added Lines]",
          "319:   {0 {SELECT a,\"col f\"FROM t1 LEFT OUTER JOIN t2 ON t1.\"col f\"==t2.\"col y\";}}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "346:   760",
          "347:   {SELECT x FROM t1 WHERE x IN ([x] IS NOT NULL, NULL, 1, 'a', \"b\", x'00');}",
          "348:   0x2",
          "350: } {",
          "351:   do_test $tnum {",
          "352:     set code [catch {",
          "",
          "[Removed Lines]",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(\"x\"IS NOT NULL,?,?,?,\"b\",?);}}",
          "",
          "[Added Lines]",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(x IS NOT NULL,?,?,?,b,?);}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}