{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "90078aa018ca13cf80d7ccaaa15a8360631b5110",
      "candidate_info": {
        "commit_hash": "90078aa018ca13cf80d7ccaaa15a8360631b5110",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/90078aa018ca13cf80d7ccaaa15a8360631b5110",
        "files": [
          "crypto/threads_pthread.c"
        ],
        "message": "Compile fix on platforms with missing pthread_rwlock_t.\n\nFix compilation on platforms with missing pthread_rwlock_t implementation by replacing it with pthread_mutex_t. An example of such platform can be Android OS 2.0 - 2.1, API level 5 (Eclair), Android NDK platform - android-5 where pthread_rwlock_t is not implemented and is missing in pthread.h.\n\nIn case of missing pthread_rwlock_t implementation CRYPTO_RWLOCK will work as exclusive lock in write-only mode of pthread_rwlock_t lock.\n\nThe implementation based on pthread_mutex_t must be using PTHREAD_MUTEX_RECURSIVE mode to be compatible with recursive behavior of pthread_rwlock_rdlock.\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1981)\n(cherry picked from commit 2accf3f7e013c3d02312afc27cc2edbd1f149db3)",
        "before_after_code_files": [
          "crypto/threads_pthread.c||crypto/threads_pthread.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/threads_pthread.c||crypto/threads_pthread.c": [
          "File: crypto/threads_pthread.c -> crypto/threads_pthread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #if defined(OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG) && !defined(OPENSSL_SYS_WINDOWS)",
          "14: CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)",
          "15: {",
          "16:     CRYPTO_RWLOCK *lock = OPENSSL_zalloc(sizeof(pthread_rwlock_t));",
          "17:     if (lock == NULL)",
          "18:         return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #ifdef PTHREAD_RWLOCK_INITIALIZER",
          "15:     #define OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "16: #endif",
          "20: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:         OPENSSL_free(lock);",
          "22:         return NULL;",
          "23:     }",
          "25:     return lock;",
          "26: }",
          "28: int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)",
          "29: {",
          "30:     if (pthread_rwlock_rdlock(lock) != 0)",
          "31:         return 0;",
          "33:     return 1;",
          "34: }",
          "36: int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)",
          "37: {",
          "38:     if (pthread_rwlock_wrlock(lock) != 0)",
          "39:         return 0;",
          "41:     return 1;",
          "42: }",
          "44: int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)",
          "45: {",
          "46:     if (pthread_rwlock_unlock(lock) != 0)",
          "47:         return 0;",
          "49:     return 1;",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #else",
          "30:     CRYPTO_RWLOCK *lock = OPENSSL_zalloc(sizeof(pthread_mutex_t));",
          "31:     if (lock == NULL)",
          "32:         return NULL;",
          "34:     pthread_mutexattr_t attr;",
          "35:     pthread_mutexattr_init(&attr);",
          "36:     pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);",
          "38:     if (pthread_mutex_init(lock, &attr) != 0) {",
          "39:         pthread_mutexattr_destroy(&attr);",
          "40:         OPENSSL_free(lock);",
          "41:         return NULL;",
          "42:     }",
          "44:     pthread_mutexattr_destroy(&attr);",
          "45: #endif",
          "52: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "55: #else",
          "56:     if (pthread_mutex_lock(lock) != 0)",
          "57:         return 0;",
          "58: #endif",
          "65: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "68: #else",
          "69:     if (pthread_mutex_lock(lock) != 0)",
          "70:         return 0;",
          "71: #endif",
          "78: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "81: #else",
          "82:     if (pthread_mutex_unlock(lock) != 0)",
          "83:         return 0;",
          "84: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:     if (lock == NULL)",
          "55:         return;",
          "57:     pthread_rwlock_destroy(lock);",
          "58:     OPENSSL_free(lock);",
          "60:     return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "96: #else",
          "97:     pthread_mutex_destroy(lock);",
          "98: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffb1e659b2546cb704ef56ae01176b9062ef1c6f",
      "candidate_info": {
        "commit_hash": "ffb1e659b2546cb704ef56ae01176b9062ef1c6f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ffb1e659b2546cb704ef56ae01176b9062ef1c6f",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0f-dev\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010005fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-fips  16 Feb 2017\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e  16 Feb 2017\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100060L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0f-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0f-dev  xx XXX xxxx\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0453163e9a9052884cce288ff3e2acb77725a239",
      "candidate_info": {
        "commit_hash": "0453163e9a9052884cce288ff3e2acb77725a239",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0453163e9a9052884cce288ff3e2acb77725a239",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0e release\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100050L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-dev  xx XXX xxxx\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010005fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-fips  16 Feb 2017\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e  16 Feb 2017\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "256315dee11b187bc0390d75082f0231c4263eac",
      "candidate_info": {
        "commit_hash": "256315dee11b187bc0390d75082f0231c4263eac",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/256315dee11b187bc0390d75082f0231c4263eac",
        "files": [
          "test/recipes/80-test_ssl_old.t"
        ],
        "message": "Rework how protocol specific ciphers in 80-test_ssl_old.t are picked out\n\nThe code to do this incorrectly assumed that the protocol version\ncould be used as a valid cipher suite  for the 'openssl cipher'\ncommand.  While this is true in some cases, that isn't something to be\ntrusted.  Replace that assumption with code that takes the full\n'openssl ciphers' command output and parses it to find the ciphers we\nlook for.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2956)\n(cherry picked from commit 9ea6d56d044a95459e563abdc85aed26149e6ee9)",
        "before_after_code_files": [
          "test/recipes/80-test_ssl_old.t||test/recipes/80-test_ssl_old.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/80-test_ssl_old.t||test/recipes/80-test_ssl_old.t": [
          "File: test/recipes/80-test_ssl_old.t -> test/recipes/80-test_ssl_old.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:         }",
          "447:  my @protocols = ();",
          "461:         plan skip_all => \"None of the ciphersuites to test are available in this OpenSSL build\"",
          "464:         # The count of protocols is because in addition to the ciphersuits",
          "465:         # we got above, we're running a weak DH test for each protocol",
          "469:      note \"Testing ciphersuites for $protocol\";",
          "470:      foreach my $cipher (@{$ciphersuites{$protocol}}) {",
          "472:                     note \"*****SKIPPING $protocol $cipher\";",
          "473:                     ok(1);",
          "474:                 } else {",
          "",
          "[Removed Lines]",
          "448:  # FIXME: I feel unsure about the following line, is that really just TLSv1.2, or is it all of the SSLv3/TLS protocols?",
          "449:         push(@protocols, \"TLSv1.2\") unless $no_tls1_2;",
          "450:         push(@protocols, \"SSLv3\") unless $no_ssl3;",
          "451:  my $protocolciphersuitcount = 0;",
          "452:  my %ciphersuites =",
          "453:      map { my @c =",
          "454:         map { split(/:/, $_) }",
          "455:         run(app([\"openssl\", \"ciphers\", \"${_}:$ciphers\"]),",
          "456:                           capture => 1);",
          "457:     map { s/\\R//; } @c;  # chomp @c;",
          "458:     $protocolciphersuitcount += scalar @c;",
          "459:     $_ => [ @c ] } @protocols;",
          "462:             if $protocolciphersuitcount + scalar(@protocols) == 0;",
          "466:  plan tests => $protocolciphersuitcount + scalar(@protocols);",
          "468:  foreach my $protocol (@protocols) {",
          "471:                 if ($protocol eq \"SSLv3\" && $cipher =~ /ECDH/ ) {",
          "",
          "[Added Lines]",
          "448:  # We only use the flags that ssltest_old understands",
          "449:  push @protocols, \"-tls1_2\" unless $no_tls1_2;",
          "450:  push @protocols, \"-tls1\" unless $no_tls1;",
          "451:  push @protocols, \"-ssl3\" unless $no_ssl3;",
          "452:  my $protocolciphersuitecount = 0;",
          "453:  my %ciphersuites = ();",
          "454:  foreach my $protocol (@protocols) {",
          "455:      $ciphersuites{$protocol} =",
          "456:   [ map { s|\\R||; split(/:/, $_) }",
          "457:     run(app([\"openssl\", \"ciphers\", \"-s\", $protocol,",
          "458:       \"ALL:$ciphers\"]), capture => 1) ];",
          "459:      $protocolciphersuitecount += scalar @{$ciphersuites{$protocol}};",
          "460:  }",
          "463:             if $protocolciphersuitecount + scalar(keys %ciphersuites) == 0;",
          "467:  plan tests => $protocolciphersuitecount + scalar(keys %ciphersuites);",
          "469:  foreach my $protocol (sort keys %ciphersuites) {",
          "472:                 if ($protocol eq \"-ssl3\" && $cipher =~ /ECDH/ ) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d1ab3f5c87e44f9092f3eafe88dc5014e1af2f1",
      "candidate_info": {
        "commit_hash": "6d1ab3f5c87e44f9092f3eafe88dc5014e1af2f1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6d1ab3f5c87e44f9092f3eafe88dc5014e1af2f1",
        "files": [
          "crypto/rand/rand_lib.c"
        ],
        "message": "rand/rand_lib.c: keep fixing no-engine configuration.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit ce57ac431964f7692af674fd124103d6fe07af2e)",
        "before_after_code_files": [
          "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c": [
          "File: crypto/rand/rand_lib.c -> crypto/rand/rand_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:         meth->cleanup();",
          "119:     RAND_set_rand_method(NULL);",
          "120:     CRYPTO_THREAD_lock_free(rand_meth_lock);",
          "121:     CRYPTO_THREAD_lock_free(rand_engine_lock);",
          "122: }",
          "124: void RAND_seed(const void *buf, int num)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: #ifndef OPENSSL_NO_ENGINE",
          "123: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}