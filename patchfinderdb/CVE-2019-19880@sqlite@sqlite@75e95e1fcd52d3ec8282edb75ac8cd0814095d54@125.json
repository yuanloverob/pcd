{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9fc45534dec6b6a5e8047285d8d8527ac963bdb",
      "candidate_info": {
        "commit_hash": "b9fc45534dec6b6a5e8047285d8d8527ac963bdb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b9fc45534dec6b6a5e8047285d8d8527ac963bdb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Early detection out-of-bounds page numbers on the direct-overflow-read optimization gives consistent error messages regardless of whether or not the optimization is enabled.\n\nFossilOrigin-Name: b517a52fa36df0a0854a75858b5e81861771d2e9032a5a0ad79aa76ae64130a2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d41ca7d6efbdac70890a8d4159488fc7f59bf78a550b00597b4df990c4fcaef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4880:           memcpy(aSave, aWrite, 4);",
          "4881:           rc = sqlite3OsRead(fd, aWrite, a+4, (i64)pBt->pageSize*(nextPage-1));",
          "4882:           nextPage = get4byte(aWrite);",
          "4883:           memcpy(aWrite, aSave, 4);",
          "4884:         }else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4882:           if( rc && nextPage>pBt->nPage ) rc = SQLITE_CORRUPT_BKPT;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "818a3b548647d7a314771f455c93be5ff6440047",
      "candidate_info": {
        "commit_hash": "818a3b548647d7a314771f455c93be5ff6440047",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/818a3b548647d7a314771f455c93be5ff6440047",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h"
        ],
        "message": "Fix sqlite3ExprCompare() so that it ignores differences in the Expr.iTable field for IN operators, as otherwise it can lead to false negatives, which is usually harmless, but can cause problems for an assert() in the window function logic.\n\nFossilOrigin-Name: 6a204b192a6c6f21988cab217366f21b14c672b81ceadc43675761a6d8c4484f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 352878fe1cbcf7b6803624544bba5a95565d1638d4dd09e91764ddad17889301",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4957:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "4958:       if( pA->op2!=pB->op2 ) return 2;",
          "4959:       if( pA->iTable!=pB->iTable",
          "4960:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "4961:     }",
          "4962:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4960:        && pA->op!=TK_IN",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "844b9004917ac2843eb1eb15c4b2e5cfbf8b5a7b",
      "candidate_info": {
        "commit_hash": "844b9004917ac2843eb1eb15c4b2e5cfbf8b5a7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/844b9004917ac2843eb1eb15c4b2e5cfbf8b5a7b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tokenize.c"
        ],
        "message": "Fix harmless compiler warning.\n\nFossilOrigin-Name: dddda685f3443d8a38901f758543fcde73d7b8cfe72b0ad5f419cd7459343bf5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tokenize.c||src/tokenize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1aee70d6de8a9b17ebb74a7cb1dad65139cde1b615dcce4d15d3a476fda8676b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c"
        ]
      }
    },
    {
      "candidate_hash": "38e3853240798ae59815320f745a6325f1da10cc",
      "candidate_info": {
        "commit_hash": "38e3853240798ae59815320f745a6325f1da10cc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38e3853240798ae59815320f745a6325f1da10cc",
        "files": [
          "ext/fts5/test/fts5circref.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add tests for the use of SQLITE_PREPARE_NO_VTAB in fts5.\n\nFossilOrigin-Name: 1999612010e310fc2430d1f00076f69fade0c66d202771dbb0f3d5597ac0a03c",
        "before_after_code_files": [
          "ext/fts5/test/fts5circref.test||ext/fts5/test/fts5circref.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5circref.test||ext/fts5/test/fts5circref.test": [
          "File: ext/fts5/test/fts5circref.test -> ext/fts5/test/fts5circref.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 Dec 22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5circref",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE tt USING fts5(a);",
          "26:   SELECT name FROM sqlite_master ORDER BY 1;",
          "27: } {",
          "28:   tt tt_config tt_content tt_data tt_docsize tt_idx",
          "29: }",
          "30: db_save_and_close",
          "32: foreach {tn schema sql} {",
          "33:   1 {",
          "34:     CREATE TRIGGER tr1 AFTER INSERT ON tt_config BEGIN",
          "35:       SELECT * FROM tt;",
          "36:     END;",
          "37:   } {",
          "38:     INSERT INTO tt(tt, rank) VALUES('usermerge', 4);",
          "39:   }",
          "41:   2 {",
          "42:     CREATE TRIGGER tr1 AFTER INSERT ON tt_docsize BEGIN",
          "43:       SELECT * FROM tt;",
          "44:     END;",
          "45:   } {",
          "46:     INSERT INTO tt(a) VALUES('one two three');",
          "47:   }",
          "49:   3 {",
          "50:     CREATE TRIGGER tr1 AFTER INSERT ON tt_content BEGIN",
          "51:       SELECT * FROM tt;",
          "52:     END;",
          "53:   } {",
          "54:     INSERT INTO tt(a) VALUES('one two three');",
          "55:   }",
          "57:   4 {",
          "58:     CREATE TRIGGER tr1 AFTER INSERT ON tt_data BEGIN",
          "59:       SELECT * FROM tt;",
          "60:     END;",
          "61:   } {",
          "62:     INSERT INTO tt(a) VALUES('one two three');",
          "63:   }",
          "65:   5 {",
          "66:     CREATE TRIGGER tr1 AFTER INSERT ON tt_idx BEGIN",
          "67:       SELECT * FROM tt;",
          "68:     END;",
          "69:   } {",
          "70:     INSERT INTO tt(a) VALUES('one two three');",
          "71:   }",
          "72: } {",
          "73:   db_restore_and_reopen",
          "74:   do_execsql_test 1.1.$tn.1 $schema",
          "75:   do_catchsql_test 1.1.$tn.2 $sql {1 {SQL logic error}}",
          "76:   db close",
          "77: }",
          "80: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 25666e3d03950caf753295cdb55df162e07dbcf6840b05875c6e0b127c469ecb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c542fa85735fbea00c9620f72e551041855e4505",
      "candidate_info": {
        "commit_hash": "c542fa85735fbea00c9620f72e551041855e4505",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c542fa85735fbea00c9620f72e551041855e4505",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/with1.test"
        ],
        "message": "Add test cases for the fix in the previous commit.\n\nFossilOrigin-Name: c1057b2a60add08e5c80ef2a53932a690b096f2eb03c7de863844deaa8fc9d53",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d2fe370cafa9b11f6c3eb4e1c3be48d9d2610b9d2f9d9ebf9e50267f9079dfc0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1117:   SELECT * FROM v3;",
          "1118: } {1 A C D E 1 A F G H 1 B C D E 1 B F G H 2 A C D E 2 A F G H 2 B C D E 2 B F G H 3 A C D E 3 A F G H 3 B C D E 3 B F G H 4 A C D E 4 A F G H 4 B C D E 4 B F G H 5 A C D E 5 A F G H 5 B C D E 5 B F G H}",
          "1120: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120: #-------------------------------------------------------------------------",
          "1121: reset_db",
          "1122: do_execsql_test 24.1 {",
          "1123:   CREATE TABLE t1(a, b, c);",
          "1124:   CREATE VIEW v1 AS SELECT max(a), min(b) FROM t1 GROUP BY c;",
          "1125: }",
          "1126: do_test 24.1 {",
          "1127:   set program [db eval {EXPLAIN SELECT 1 FROM v1,v1,v1}]",
          "1128:   expr [lsearch $program OpenDup]>0",
          "1129: } {1}",
          "1130: do_execsql_test 24.2 {",
          "1131:   ATTACH \"\" AS aux;",
          "1132:   CREATE VIEW aux.v3 AS VALUES(1);",
          "1133:   CREATE VIEW main.v3 AS VALUES(3);",
          "1135:   CREATE VIEW aux.v2 AS SELECT * FROM v3;",
          "1136:   CREATE VIEW main.v2 AS SELECT * FROM v3;",
          "1138:   SELECT * FROM main.v2 AS a, aux.v2 AS b, aux.v2 AS c, main.v2 AS d;",
          "1139: } {",
          "1140:   3 1 1 3",
          "1141: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}