{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "860d2b08c6990b8d56fc2d846ba59be7b42ef4fb",
      "candidate_info": {
        "commit_hash": "860d2b08c6990b8d56fc2d846ba59be7b42ef4fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/860d2b08c6990b8d56fc2d846ba59be7b42ef4fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h"
        ],
        "message": "Make sure the MEM_FromBind bit inthe Mem.flags field is not included in the MEM_TypeMask.  This critical changes was omitted from the previous two check-ins by mistake, and so those check-ins are not fully functional.\n\nFossilOrigin-Name: f7ba2daf91c96ba16958188d6084a0ff129310d348932de493d326f1d24679cd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6f122faf8a34b986e58ba4622cff918c6d133d6f91d4b723b50bd086d5bed8e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ]
      }
    },
    {
      "candidate_hash": "af94adf049218f9d3675fd796663aa3e021f7d88",
      "candidate_info": {
        "commit_hash": "af94adf049218f9d3675fd796663aa3e021f7d88",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af94adf049218f9d3675fd796663aa3e021f7d88",
        "files": [
          "autoconf/Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update the autoconf makefile for MSVC.\n\nFossilOrigin-Name: 9455643eecb74c8ac93ad3b3566f30e380dd912cdce3de993da5af42973ac59c",
        "before_after_code_files": [
          "autoconf/Makefile.msc||autoconf/Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "autoconf/Makefile.msc||autoconf/Makefile.msc": [
          "File: autoconf/Makefile.msc -> autoconf/Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "282: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1",
          "283: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1",
          "284: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBSTAT_VTAB=1",
          "286: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DESERIALIZE=1",
          "287: !ENDIF",
          "288: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_COLUMN_METADATA=1",
          "",
          "[Removed Lines]",
          "285: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_INTROSPECTION_PRAGMAS=1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 73a82114733af2a316f20eb8578badef307d14286c6ec03197744a6793425161",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab3c5f26ab72222c4ab0fdcee559b3e3a7c0d53b",
      "candidate_info": {
        "commit_hash": "ab3c5f26ab72222c4ab0fdcee559b3e3a7c0d53b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ab3c5f26ab72222c4ab0fdcee559b3e3a7c0d53b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c"
        ],
        "message": "Fix the table_info and table_xinfo pragmas so that they work with virtual columns.  Table_info omits virtual columns.  Table_xinfo gives them a \"hidden\" flag of 2, and 3 for STORED columns.\n\nFossilOrigin-Name: 069351b85f9a706f60d3e98fbc8aaf40c374356b967c0464aede30ead3d9d18b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 64db39f92d68d1b9f23e48af35e16b969c38b58041fbe900066eeb3ddb291cef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1100:       sqlite3CodeVerifySchema(pParse, iTabDb);",
          "1101:       sqlite3ViewGetColumnNames(pParse, pTab);",
          "1102:       for(i=0, pCol=pTab->aCol; i<pTab->nCol; i++, pCol++){",
          "1105:           nHidden++;",
          "1107:         }",
          "1108:         if( (pCol->colFlags & COLFLAG_PRIMKEY)==0 ){",
          "1109:           k = 0;",
          "",
          "[Removed Lines]",
          "1103:         int isHidden = IsHiddenColumn(pCol);",
          "1104:         if( isHidden && pPragma->iArg==0 ){",
          "1106:           continue;",
          "",
          "[Added Lines]",
          "1103:         int isHidden = 0;",
          "1104:         if( pCol->colFlags & COLFLAG_NOINSERT ){",
          "1106:           if( pPragma->iArg==0 ) continue;",
          "1107:           if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "1109:           }else if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "1111:           }else{",
          "1113:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1112:         }else{",
          "1113:           for(k=1; k<=pTab->nCol && pPk->aiColumn[k-1]!=i; k++){}",
          "1114:         }",
          "1116:         sqlite3VdbeMultiLoad(v, 1, pPragma->iArg ? \"issisii\" : \"issisi\",",
          "1117:                i-nHidden,",
          "1118:                pCol->zName,",
          "1119:                sqlite3ColumnType(pCol,\"\"),",
          "1120:                pCol->notNull ? 1 : 0,",
          "1122:                k,",
          "1123:                isHidden);",
          "1124:       }",
          "",
          "[Removed Lines]",
          "1115:         assert( pCol->pDflt==0 || pCol->pDflt->op==TK_SPAN );",
          "1121:                pCol->pDflt ? pCol->pDflt->u.zToken : 0,",
          "",
          "[Added Lines]",
          "1122:         assert( pCol->pDflt==0 || pCol->pDflt->op==TK_SPAN || isHidden>=2 );",
          "1128:                pCol->pDflt && isHidden<2 ? pCol->pDflt->u.zToken : 0,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21b9225ff595a1ec121ac18ebb5ab066257a9893",
      "candidate_info": {
        "commit_hash": "21b9225ff595a1ec121ac18ebb5ab066257a9893",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21b9225ff595a1ec121ac18ebb5ab066257a9893",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "src/sqliteInt.h",
          "src/tokenize.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "test/normalize.test"
        ],
        "message": "Refactor the sqlite3_normalized_sql() implementation.\n\nFossilOrigin-Name: 06e955e5d2b857b9ce94a73fb174b620c101bdb160842f9a0e958bdb48e8c987",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tokenize.c||src/tokenize.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/normalize.test||test/normalize.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c878d741733a897d47a1a0b57b454bc9095ce302b48cc01089336d5d20e2a24c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "709:   return rc;",
          "710: }",
          "",
          "[Removed Lines]",
          "712: #ifdef SQLITE_ENABLE_NORMALIZE",
          "721: static int estimateNormalizedSize(",
          "724: ){",
          "725:   int nOut = nSql + 4;",
          "726:   const char *z = zSql;",
          "727:   while( nOut<nSql*5 ){",
          "728:     while( z[0]!=0 && z[0]!='I' && z[0]!='i' ){ z++; }",
          "729:     if( z[0]==0 ) break;",
          "730:     z++;",
          "731:     if( z[0]!='N' && z[0]!='n' ) break;",
          "732:     z++;",
          "733:     while( sqlite3Isspace(z[0]) ){ z++; }",
          "734:     if( z[0]!='(' ) break;",
          "735:     z++;",
          "737:   }",
          "738:   return nOut;",
          "739: }",
          "747: static void copyNormalizedToken(",
          "754: ){",
          "755:   int bQuoted = tokenFlags & SQLITE_TOKEN_QUOTED;",
          "756:   int bKeyword = tokenFlags & SQLITE_TOKEN_KEYWORD;",
          "757:   int j = *piOut, k = 0;",
          "758:   for(; k<nToken; k++){",
          "759:     if( bQuoted ){",
          "760:       if( k==0 && iIn>0 ){",
          "761:         zOut[j++] = '\"';",
          "762:         continue;",
          "763:       }else if( k==nToken-1 ){",
          "764:         zOut[j++] = '\"';",
          "765:         continue;",
          "766:       }",
          "767:     }",
          "768:     if( bKeyword ){",
          "769:       zOut[j++] = sqlite3Toupper(zSql[iIn+k]);",
          "770:     }else{",
          "771:       zOut[j++] = sqlite3Tolower(zSql[iIn+k]);",
          "772:     }",
          "773:   }",
          "775: }",
          "782: char *sqlite3Normalize(",
          "786: ){",
          "799:   db = sqlite3VdbeDb(pVdbe);",
          "800:   assert( db!=0 );",
          "801:   if( zSql==0 ) return 0;",
          "802:   nZ = estimateNormalizedSize(zSql, nSql);",
          "803:   z = sqlite3DbMallocRawNN(db, nZ);",
          "804:   if( z==0 ) goto normalizeError;",
          "805:   for(i=j=0; i<nSql && zSql[i]; i+=n){",
          "806:     int flags = 0;",
          "807:     if( tokenType!=TK_SPACE ) prevTokenType = tokenType;",
          "808:     n = sqlite3GetTokenNormalized((unsigned char*)zSql+i, &tokenType, &flags);",
          "809:     switch( tokenType ){",
          "810:       case TK_SPACE: {",
          "811:         break;",
          "812:       }",
          "813:       case TK_ILLEGAL: {",
          "814:         goto normalizeError;",
          "815:       }",
          "816:       case TK_STRING:",
          "817:       case TK_INTEGER:",
          "818:       case TK_FLOAT:",
          "819:       case TK_VARIABLE:",
          "820:       case TK_BLOB: {",
          "821:         z[j++] = '?';",
          "822:         break;",
          "823:       }",
          "824:       case TK_LP:",
          "825:       case TK_RP: {",
          "826:         if( tokenType==TK_LP ){",
          "827:           nParen++;",
          "828:           if( prevTokenType==TK_IN ){",
          "829:             iStartIN = j;",
          "830:             nParenAtIN = nParen;",
          "831:           }",
          "832:         }else{",
          "833:           if( iStartIN>0 && nParen==nParenAtIN ){",
          "834:             assert( iStartIN+6<nZ );",
          "835:             memcpy(z+iStartIN+1, \"?,?,?\", 5);",
          "836:             j = iStartIN+6;",
          "837:             assert( nZ-1-j>=0 );",
          "838:             assert( nZ-1-j<nZ );",
          "839:             memset(z+j, 0, nZ-1-j);",
          "840:             iStartIN = 0;",
          "841:           }",
          "842:           nParen--;",
          "843:         }",
          "844:         assert( nParen>=0 );",
          "846:       }",
          "847:       case TK_MINUS:",
          "848:       case TK_SEMI:",
          "849:       case TK_PLUS:",
          "850:       case TK_STAR:",
          "851:       case TK_SLASH:",
          "852:       case TK_REM:",
          "853:       case TK_EQ:",
          "854:       case TK_LE:",
          "855:       case TK_NE:",
          "856:       case TK_LSHIFT:",
          "857:       case TK_LT:",
          "858:       case TK_RSHIFT:",
          "859:       case TK_GT:",
          "860:       case TK_GE:",
          "861:       case TK_BITOR:",
          "862:       case TK_CONCAT:",
          "863:       case TK_COMMA:",
          "864:       case TK_BITAND:",
          "865:       case TK_BITNOT:",
          "866:       case TK_DOT:",
          "867:       case TK_IN:",
          "868:       case TK_IS:",
          "869:       case TK_NOT:",
          "870:       case TK_NULL:",
          "871:       case TK_ID: {",
          "872:         if( tokenType==TK_NULL ){",
          "873:           if( prevTokenType==TK_IS || prevTokenType==TK_NOT ){",
          "875:           }else{",
          "877:             z[j++] = '?';",
          "878:             break;",
          "879:           }",
          "880:         }",
          "881:         if( j>0 && sqlite3IsIdChar(z[j-1]) && sqlite3IsIdChar(zSql[i]) ){",
          "882:           z[j++] = ' ';",
          "883:         }",
          "884:         if( tokenType==TK_ID ){",
          "885:           if( zSql[i]=='\"'",
          "886:            && sqlite3VdbeUsesDoubleQuotedString(db,pVdbe,zSql+i,n)",
          "887:           ){",
          "888:             z[j++] = '?';",
          "889:             break;",
          "890:           }",
          "891:           if( nParen==nParenAtIN ) iStartIN = 0;",
          "892:         }",
          "893:         copyNormalizedToken(zSql, i, n, flags, z, &j);",
          "894:         break;",
          "895:       }",
          "896:     }",
          "897:   }",
          "898:   assert( j<nZ && \"one\" );",
          "899:   while( j>0 && z[j-1]==' ' ){ j--; }",
          "900:   if( j>0 && z[j-1]!=';' ){ z[j++] = ';'; }",
          "901:   z[j] = 0;",
          "902:   assert( j<nZ && \"two\" );",
          "903:   return z;",
          "905: normalizeError:",
          "906:   sqlite3DbFree(db, z);",
          "907:   return 0;",
          "908: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4255: void sqlite3AlterRenameTable(Parse*, SrcList*, Token*);",
          "4256: void sqlite3AlterRenameColumn(Parse*, SrcList*, Token*, Token*);",
          "4257: int sqlite3GetToken(const unsigned char *, int *);",
          "4261: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4262: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4263: int sqlite3CodeSubselect(Parse*, Expr *, int, int);",
          "",
          "[Removed Lines]",
          "4258: #ifdef SQLITE_ENABLE_NORMALIZE",
          "4259: int sqlite3GetTokenNormalized(const unsigned char *, int *, int *);",
          "4260: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:   return i;",
          "546: }",
          "",
          "[Removed Lines]",
          "548: #ifdef SQLITE_ENABLE_NORMALIZE",
          "560: int sqlite3GetTokenNormalized(",
          "561:   const unsigned char *z,",
          "562:   int *tokenType,",
          "563:   int *flags",
          "564: ){",
          "565:   int n;",
          "566:   unsigned char iClass = aiClass[*z];",
          "567:   if( iClass==CC_KYWD ){",
          "568:     int i;",
          "569:     for(i=1; aiClass[z[i]]<=CC_KYWD; i++){}",
          "570:     if( IdChar(z[i]) ){",
          "574:       i++;",
          "575:       while( IdChar(z[i]) ){ i++; }",
          "577:       return i;",
          "578:     }",
          "580:     n = keywordCode((char*)z, i, tokenType);",
          "585:     switch( *tokenType ){",
          "586:       case TK_ID: {",
          "588:         break;",
          "589:       }",
          "590:       case TK_IN:",
          "591:       case TK_IS:",
          "592:       case TK_NOT:",
          "593:       case TK_NULL: {",
          "595:         break;",
          "596:       }",
          "597:       default: {",
          "600:         break;",
          "601:       }",
          "602:     }",
          "603:   }else{",
          "604:     n = sqlite3GetToken(z, tokenType);",
          "607:     if( *tokenType==TK_ID && (iClass==CC_QUOTE || iClass==CC_QUOTE2) ){",
          "609:     }",
          "610:   }",
          "611:   return n;",
          "612: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:   assert( nErr==0 || pParse->rc!=SQLITE_OK );",
          "782:   return nErr;",
          "783: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719: #ifdef SQLITE_ENABLE_NORMALIZE",
          "724: static void addSpaceSeparator(sqlite3_str *pStr){",
          "725:   if( pStr->nChar && sqlite3IsIdChar(pStr->zText[pStr->nChar-1]) ){",
          "726:     sqlite3_str_append(pStr, \" \", 1);",
          "727:   }",
          "728: }",
          "735: char *sqlite3Normalize(",
          "739: ){",
          "751:   if( zSql==0 || nSql==0 ) return 0;",
          "752:   db = sqlite3VdbeDb(pVdbe);",
          "753:   tokenType = -1;",
          "754:   nParen = iStartIN = nParenAtIN = 0;",
          "755:   pStr = sqlite3_str_new(db);",
          "756:   for(i=0; i<nSql && pStr->accError==0; i+=n){",
          "757:     if( tokenType!=TK_SPACE ){",
          "758:       prevType = tokenType;",
          "759:     }",
          "760:     n = sqlite3GetToken((unsigned char*)zSql+i, &tokenType);",
          "761:     if( NEVER(n<=0) ) break;",
          "762:     switch( tokenType ){",
          "763:       case TK_SPACE: {",
          "764:         break;",
          "765:       }",
          "766:       case TK_NULL: {",
          "767:         if( prevType==TK_IS || prevType==TK_NOT ){",
          "768:           sqlite3_str_append(pStr, \" NULL\", 5);",
          "769:           break;",
          "770:         }",
          "772:       }",
          "773:       case TK_STRING:",
          "774:       case TK_INTEGER:",
          "775:       case TK_FLOAT:",
          "776:       case TK_VARIABLE:",
          "777:       case TK_BLOB: {",
          "778:         sqlite3_str_append(pStr, \"?\", 1);",
          "779:         break;",
          "780:       }",
          "781:       case TK_LP: {",
          "782:         nParen++;",
          "783:         if( prevType==TK_IN ){",
          "784:           iStartIN = pStr->nChar;",
          "785:           nParenAtIN = nParen;",
          "786:         }",
          "787:         sqlite3_str_append(pStr, \"(\", 1);",
          "788:         break;",
          "789:       }",
          "790:       case TK_RP: {",
          "791:         if( iStartIN>0 && nParen==nParenAtIN ){",
          "792:           assert( pStr->nChar>=iStartIN );",
          "793:           pStr->nChar = iStartIN+1;",
          "794:           sqlite3_str_append(pStr, \"?,?,?\", 5);",
          "795:           iStartIN = 0;",
          "796:         }",
          "797:         nParen--;",
          "798:         sqlite3_str_append(pStr, \")\", 1);",
          "799:         break;",
          "800:       }",
          "801:       case TK_ID: {",
          "802:         iStartIN = 0;",
          "803:         j = pStr->nChar;",
          "804:         if( sqlite3Isquote(zSql[i]) ){",
          "805:           char *zId = sqlite3DbStrNDup(db, zSql+i, n);",
          "806:           int nId;",
          "807:           int eType = 0;",
          "808:           if( zId==0 ) break;",
          "809:           sqlite3Dequote(zId);",
          "810:           if( zSql[i]=='\"' && sqlite3VdbeUsesDoubleQuotedString(pVdbe, zId) ){",
          "811:             sqlite3_str_append(pStr, \"?\", 1);",
          "812:             sqlite3DbFree(db, zId);",
          "813:             break;",
          "814:           }",
          "815:           nId = sqlite3Strlen30(zId);",
          "816:           if( sqlite3GetToken((u8*)zId, &eType)==nId && eType==TK_ID ){",
          "817:             addSpaceSeparator(pStr);",
          "818:             sqlite3_str_append(pStr, zId, nId);",
          "819:           }else{",
          "820:             sqlite3_str_appendf(pStr, \"\\\"%w\\\"\", zId);",
          "821:           }",
          "822:           sqlite3DbFree(db, zId);",
          "823:         }else{",
          "824:           addSpaceSeparator(pStr);",
          "825:           sqlite3_str_append(pStr, zSql+i, n);",
          "826:         }",
          "827:         while( j<pStr->nChar ){",
          "828:           pStr->zText[j] = sqlite3Tolower(pStr->zText[j]);",
          "829:           j++;",
          "830:         }",
          "831:         break;",
          "832:       }",
          "833:       case TK_SELECT: {",
          "834:         iStartIN = 0;",
          "836:       }",
          "837:       default: {",
          "838:         if( sqlite3IsIdChar(zSql[i]) ) addSpaceSeparator(pStr);",
          "839:         j = pStr->nChar;",
          "840:         sqlite3_str_append(pStr, zSql+i, n);",
          "841:         while( j<pStr->nChar ){",
          "842:           pStr->zText[j] = sqlite3Toupper(pStr->zText[j]);",
          "843:           j++;",
          "844:         }",
          "845:         break;",
          "846:       }",
          "847:     }",
          "848:   }",
          "849:   if( tokenType!=TK_SEMI ) sqlite3_str_append(pStr, \";\", 1);",
          "850:   return sqlite3_str_finish(pStr);",
          "851: }",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "253: void sqlite3VdbeSetSql(Vdbe*, const char *z, int n, u8);",
          "254: #ifdef SQLITE_ENABLE_NORMALIZE",
          "255: void sqlite3VdbeAddDblquoteStr(sqlite3*,Vdbe*,const char*);",
          "257: #endif",
          "258: void sqlite3VdbeSwap(Vdbe*,Vdbe*);",
          "259: VdbeOp *sqlite3VdbeTakeOpArray(Vdbe*, int*, int*);",
          "",
          "[Removed Lines]",
          "256: int sqlite3VdbeUsesDoubleQuotedString(sqlite3*,Vdbe*,const char*,int);",
          "",
          "[Added Lines]",
          "256: int sqlite3VdbeUsesDoubleQuotedString(Vdbe*,const char*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: int sqlite3VdbeUsesDoubleQuotedString(",
          "104: ){",
          "106:   DblquoteStr *pStr;",
          "107:   assert( zId!=0 );",
          "111:   if( pVdbe->pDblStr==0 ) return 0;",
          "115:   for(pStr=pVdbe->pDblStr; pStr; pStr=pStr->pNextStr){",
          "117:   }",
          "120: }",
          "121: #endif",
          "",
          "[Removed Lines]",
          "105:   char *z;",
          "108:   assert( zId[0]=='\"' );",
          "109:   assert( nId>=2 );",
          "110:   assert( zId[nId-1]=='\"' );",
          "112:   z = sqlite3DbStrNDup(db, zId, nId);",
          "113:   if( z==0 ) return 0;",
          "114:   sqlite3Dequote(z);",
          "116:     if( strcmp(z, pStr->z)==0 ) break;",
          "118:   sqlite3DbFree(db, z);",
          "119:   return pStr!=0;",
          "",
          "[Added Lines]",
          "107:     if( strcmp(zId, pStr->z)==0 ) return 1;",
          "109:   return 0;",
          "",
          "---------------"
        ],
        "test/normalize.test||test/normalize.test": [
          "File: test/normalize.test -> test/normalize.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:   430",
          "208:   {SELECT \"a\" FROM t1 WHERE \"x\" IN (\"1\",\"2\",'3');}",
          "209:   0x2",
          "212:   440",
          "213:   {SELECT 'a' FROM t1 WHERE 'x';}",
          "",
          "[Removed Lines]",
          "210:   {0 {SELECT\"a\"FROM t1 WHERE\"x\"IN(?,?,?);}}",
          "",
          "[Added Lines]",
          "210:   {0 {SELECT a FROM t1 WHERE x IN(?,?,?);}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:   450",
          "218:   {SELECT [a] FROM t1 WHERE [x];}",
          "219:   0x2",
          "222:   460",
          "223:   {SELECT * FROM t1 WHERE x IN (x);}",
          "",
          "[Removed Lines]",
          "220:   {0 {SELECT\"a\"FROM t1 WHERE\"x\";}}",
          "",
          "[Added Lines]",
          "220:   {0 {SELECT a FROM t1 WHERE x;}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:   480",
          "233:   {SELECT * FROM t1 WHERE x IN ([x],\"a\");}",
          "234:   0x2",
          "237:   500",
          "238:   {SELECT * FROM t1 WHERE x IN ([x],\"a\",'b',sqlite_version());}",
          "239:   0x2",
          "242:   520",
          "243:   {SELECT * FROM t1 WHERE x IN (SELECT x FROM t1);}",
          "",
          "[Removed Lines]",
          "235:   {0 {SELECT*FROM t1 WHERE x IN(\"x\",\"a\");}}",
          "240:   {0 {SELECT*FROM t1 WHERE x IN(\"x\",\"a\",?,sqlite_version());}}",
          "",
          "[Added Lines]",
          "235:   {0 {SELECT*FROM t1 WHERE x IN(x,a);}}",
          "240:   {0 {SELECT*FROM t1 WHERE x IN(x,a,?,sqlite_version());}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:   540",
          "248:   {SELECT * FROM t1 WHERE x IN ((SELECT x FROM t1));}",
          "249:   0x2",
          "252:   550",
          "253:   {SELECT a, a+1, a||'b', a+\"b\" FROM t1;}",
          "254:   0x2",
          "257:   570",
          "258:   {SELECT * FROM t1 WHERE x IN (1);}",
          "",
          "[Removed Lines]",
          "250:   {0 {SELECT*FROM t1 WHERE x IN(?,?,?);}}",
          "255:   {0 {SELECT a,a+?,a||?,a+\"b\"FROM t1;}}",
          "",
          "[Added Lines]",
          "250:   {0 {SELECT*FROM t1 WHERE x IN((SELECT x FROM t1));}}",
          "255:   {0 {SELECT a,a+?,a||?,a+b FROM t1;}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:   680",
          "317:   {SELECT a, \"col f\" FROM t1 LEFT OUTER JOIN t2 ON [t1].[col f] == [t2].[col y];}",
          "318:   0x2",
          "321:   690",
          "322:   {SELECT * FROM ( WITH x AS ( SELECT * FROM t1 WHERE x IN ( 1)) SELECT 10);}",
          "",
          "[Removed Lines]",
          "319:   {0 {SELECT a,\"col f\"FROM t1 LEFT OUTER JOIN t2 ON\"t1\".\"col f\"==\"t2\".\"col y\";}}",
          "",
          "[Added Lines]",
          "319:   {0 {SELECT a,\"col f\"FROM t1 LEFT OUTER JOIN t2 ON t1.\"col f\"==t2.\"col y\";}}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "346:   760",
          "347:   {SELECT x FROM t1 WHERE x IN ([x] IS NOT NULL, NULL, 1, 'a', \"b\", x'00');}",
          "348:   0x2",
          "350: } {",
          "351:   do_test $tnum {",
          "352:     set code [catch {",
          "",
          "[Removed Lines]",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(\"x\"IS NOT NULL,?,?,?,\"b\",?);}}",
          "",
          "[Added Lines]",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(x IS NOT NULL,?,?,?,b,?);}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08e2e8e680147a52909b292d4c0628a94f928207",
      "candidate_info": {
        "commit_hash": "08e2e8e680147a52909b292d4c0628a94f928207",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/08e2e8e680147a52909b292d4c0628a94f928207",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Mark an unreachable branch using ALWAYS().\n\nFossilOrigin-Name: 0fff105a3e501fd91877d67761459eb0323e6cf79916242027cce0d05697f554",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85fd70fead834aed16cffbea892b2255b4e10dd677f4dbbb96062d5ff42efdeb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:   rc = sParse.rc;",
          "637: #ifndef SQLITE_OMIT_EXPLAIN",
          "639:     static const char * const azColName[] = {",
          "640:        \"addr\", \"opcode\", \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"comment\",",
          "641:        \"id\", \"parent\", \"notused\", \"detail\"",
          "",
          "[Removed Lines]",
          "638:   if( sParse.explain && rc==SQLITE_OK && sParse.pVdbe ){",
          "",
          "[Added Lines]",
          "641:   if( sParse.explain && rc==SQLITE_OK && ALWAYS(sParse.pVdbe) ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}