{
  "cve_id": "CVE-2016-2156",
  "cve_desc": "calendar/externallib.php in Moodle through 2.6.11, 2.7.x before 2.7.13, 2.8.x before 2.8.11, 2.9.x before 2.9.5, and 3.0.x before 3.0.3 provides calendar-event data without considering whether an activity is hidden, which allows remote authenticated users to obtain sensitive information via a web-service request.",
  "repo": "moodle/moodle",
  "patch_hash": "39b851376337b853c8d403dcba64645d16f0a9bd",
  "patch_info": {
    "commit_hash": "39b851376337b853c8d403dcba64645d16f0a9bd",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/39b851376337b853c8d403dcba64645d16f0a9bd",
    "files": [
      "calendar/externallib.php",
      "calendar/tests/externallib_test.php"
    ],
    "message": "MDL-52808 calendar: Do not return events for hidden activities",
    "before_after_code_files": [
      "calendar/externallib.php||calendar/externallib.php",
      "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
    ]
  },
  "patch_diff": {
    "calendar/externallib.php||calendar/externallib.php": [
      "File: calendar/externallib.php -> calendar/externallib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "227:             $params['options']['timeend'] = PHP_INT_MAX;",
      "228:         }",
      "230:         $eventlist = calendar_get_events($params['options']['timestart'], $params['options']['timeend'], $funcparam['users'], $funcparam['groups'],",
      "231:                 $funcparam['courses'], true, $params['options']['ignorehidden']);",
      "233:         $events = array();",
      "241:             $event = (array) $eventobj;",
      "245:             if ($hassystemcap) {",
      "247:                 $events[$eventid] = $event;",
      "",
      "[Removed Lines]",
      "234:         foreach ($eventlist as $id => $event) {",
      "235:             $events[$id] = (array) $event;",
      "236:         }",
      "239:         $eventsbyid = calendar_get_events_by_id($params['events']['eventids']);",
      "240:         foreach ($eventsbyid as $eventid => $eventobj) {",
      "242:             if (isset($events[$eventid])) {",
      "243:                    continue;",
      "244:             }",
      "",
      "[Added Lines]",
      "238:         if ($eventsbyid = calendar_get_events_by_id($params['events']['eventids'])) {",
      "239:             $eventlist += $eventsbyid;",
      "240:         }",
      "242:         foreach ($eventlist as $eventid => $eventobj) {",
      "",
      "---------------"
    ],
    "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php": [
      "File: calendar/tests/externallib_test.php -> calendar/tests/externallib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "370:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
      "371:         $this->assertEquals(1, count($events['events']));",
      "372:         $this->assertEquals(0, count($events['warnings']));",
      "373:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "375:         $this->setAdminUser();",
      "376:         $nexttime = time() + DAYSECS;",
      "377:         $assign = $this->getDataGenerator()->create_module('assign', array('course' => $course->id, 'duedate' => $nexttime));",
      "379:         $this->setUser($user);",
      "380:         $paramevents = array ('courseids' => array($course->id));",
      "381:         $options = array ('siteevents' => true, 'userevents' => true, 'timeend' => time() + WEEKSECS);",
      "382:         $events = core_calendar_external::get_calendar_events($paramevents, $options);",
      "383:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
      "385:         $this->assertCount(5, $events['events']);",
      "388:         set_coursemodule_visible($assign->cmid, 0);",
      "390:         accesslib_clear_all_caches_for_unit_testing();",
      "391:         course_modinfo::clear_instance_cache();",
      "393:         $events = core_calendar_external::get_calendar_events($paramevents, $options);",
      "394:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
      "396:         $this->assertCount(4, $events['events']);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "783e695e00689d67925d6f83722d344c0bd6de94",
      "candidate_info": {
        "commit_hash": "783e695e00689d67925d6f83722d344c0bd6de94",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/783e695e00689d67925d6f83722d344c0bd6de94",
        "files": [
          "calendar/externallib.php",
          "calendar/tests/externallib_test.php"
        ],
        "message": "MDL-52808 calendar: Do not return events for hidden activities",
        "before_after_code_files": [
          "calendar/externallib.php||calendar/externallib.php",
          "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
          ],
          "candidate": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "calendar/externallib.php||calendar/externallib.php": [
          "File: calendar/externallib.php -> calendar/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:             $params['options']['timeend'] = PHP_INT_MAX;",
          "228:         }",
          "230:         $eventlist = calendar_get_events($params['options']['timestart'], $params['options']['timeend'], $funcparam['users'], $funcparam['groups'],",
          "231:                 $funcparam['courses'], true, $params['options']['ignorehidden']);",
          "233:         $events = array();",
          "241:             $event = (array) $eventobj;",
          "245:             if ($hassystemcap) {",
          "247:                 $events[$eventid] = $event;",
          "",
          "[Removed Lines]",
          "234:         foreach ($eventlist as $id => $event) {",
          "235:             $events[$id] = (array) $event;",
          "236:         }",
          "239:         $eventsbyid = calendar_get_events_by_id($params['events']['eventids']);",
          "240:         foreach ($eventsbyid as $eventid => $eventobj) {",
          "242:             if (isset($events[$eventid])) {",
          "243:                    continue;",
          "244:             }",
          "",
          "[Added Lines]",
          "238:         if ($eventsbyid = calendar_get_events_by_id($params['events']['eventids'])) {",
          "239:             $eventlist += $eventsbyid;",
          "240:         }",
          "242:         foreach ($eventlist as $eventid => $eventobj) {",
          "",
          "---------------"
        ],
        "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php": [
          "File: calendar/tests/externallib_test.php -> calendar/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
          "371:         $this->assertEquals(1, count($events['events']));",
          "372:         $this->assertEquals(0, count($events['warnings']));",
          "373:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375:         $this->setAdminUser();",
          "376:         $nexttime = time() + DAYSECS;",
          "377:         $assign = $this->getDataGenerator()->create_module('assign', array('course' => $course->id, 'duedate' => $nexttime));",
          "379:         $this->setUser($user);",
          "380:         $paramevents = array ('courseids' => array($course->id));",
          "381:         $options = array ('siteevents' => true, 'userevents' => true, 'timeend' => time() + WEEKSECS);",
          "382:         $events = core_calendar_external::get_calendar_events($paramevents, $options);",
          "383:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
          "385:         $this->assertCount(5, $events['events']);",
          "388:         set_coursemodule_visible($assign->cmid, 0);",
          "390:         accesslib_clear_all_caches_for_unit_testing();",
          "391:         course_modinfo::clear_instance_cache();",
          "393:         $events = core_calendar_external::get_calendar_events($paramevents, $options);",
          "394:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
          "396:         $this->assertCount(4, $events['events']);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d63ac148b95e5f909618e75efd76f6b5032da158",
      "candidate_info": {
        "commit_hash": "d63ac148b95e5f909618e75efd76f6b5032da158",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/d63ac148b95e5f909618e75efd76f6b5032da158",
        "files": [
          "calendar/externallib.php",
          "calendar/tests/externallib_test.php"
        ],
        "message": "MDL-52808 calendar: Do not return events for hidden activities",
        "before_after_code_files": [
          "calendar/externallib.php||calendar/externallib.php",
          "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
          ],
          "candidate": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "calendar/externallib.php||calendar/externallib.php": [
          "File: calendar/externallib.php -> calendar/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:             $funcparam['courses'][] = $SITE->id;",
          "223:         }",
          "225:         $eventlist = calendar_get_events($params['options']['timestart'], $params['options']['timeend'], $funcparam['users'], $funcparam['groups'],",
          "226:                 $funcparam['courses'], true, $params['options']['ignorehidden']);",
          "228:         $events = array();",
          "236:             $event = (array) $eventobj;",
          "240:             if ($hassystemcap) {",
          "242:                 $events[$eventid] = $event;",
          "",
          "[Removed Lines]",
          "229:         foreach ($eventlist as $id => $event) {",
          "230:             $events[$id] = (array) $event;",
          "231:         }",
          "234:         $eventsbyid = calendar_get_events_by_id($params['events']['eventids']);",
          "235:         foreach ($eventsbyid as $eventid => $eventobj) {",
          "237:             if (isset($events[$eventid])) {",
          "238:                    continue;",
          "239:             }",
          "",
          "[Added Lines]",
          "233:         if ($eventsbyid = calendar_get_events_by_id($params['events']['eventids'])) {",
          "234:             $eventlist += $eventsbyid;",
          "235:         }",
          "237:         foreach ($eventlist as $eventid => $eventobj) {",
          "",
          "---------------"
        ],
        "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php": [
          "File: calendar/tests/externallib_test.php -> calendar/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
          "371:         $this->assertEquals(1, count($events['events']));",
          "372:         $this->assertEquals(0, count($events['warnings']));",
          "373:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375:         $this->setAdminUser();",
          "376:         $nexttime = time() + DAYSECS;",
          "377:         $assign = $this->getDataGenerator()->create_module('assign', array('course' => $course->id, 'duedate' => $nexttime));",
          "379:         $this->setUser($user);",
          "380:         $paramevents = array ('courseids' => array($course->id));",
          "381:         $options = array ('siteevents' => true, 'userevents' => true, 'timeend' => time() + WEEKSECS);",
          "382:         $events = core_calendar_external::get_calendar_events($paramevents, $options);",
          "383:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
          "385:         $this->assertCount(5, $events['events']);",
          "388:         set_coursemodule_visible($assign->cmid, 0);",
          "390:         accesslib_clear_all_caches_for_unit_testing();",
          "391:         course_modinfo::clear_instance_cache();",
          "393:         $events = core_calendar_external::get_calendar_events($paramevents, $options);",
          "394:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
          "396:         $this->assertCount(4, $events['events']);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c631b112d6e729c84f5d559371a399fe54502ba3",
      "candidate_info": {
        "commit_hash": "c631b112d6e729c84f5d559371a399fe54502ba3",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/c631b112d6e729c84f5d559371a399fe54502ba3",
        "files": [
          "calendar/externallib.php",
          "calendar/tests/externallib_test.php"
        ],
        "message": "MDL-52808 calendar: Do not return events for hidden activities",
        "before_after_code_files": [
          "calendar/externallib.php||calendar/externallib.php",
          "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
          ],
          "candidate": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "calendar/externallib.php||calendar/externallib.php": [
          "File: calendar/externallib.php -> calendar/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:         if (!$hassystemcap) {",
          "176:             foreach ($params['events']['courseids'] as $id) {",
          "177:                try {",
          "178:                     $context = context_course::instance($id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:             $courses = enrol_get_my_courses('id');",
          "177:             $courses = array_keys($courses);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:             $funcparam['courses'][] = $SITE->id;",
          "222:         }",
          "224:         $eventlist = calendar_get_events($params['options']['timestart'], $params['options']['timeend'], $funcparam['users'], $funcparam['groups'],",
          "225:                 $funcparam['courses'], true, $params['options']['ignorehidden']);",
          "227:         $events = array();",
          "235:             $event = (array) $eventobj;",
          "239:             if ($hassystemcap) {",
          "241:                 $events[$eventid] = $event;",
          "",
          "[Removed Lines]",
          "228:         foreach ($eventlist as $id => $event) {",
          "229:             $events[$id] = (array) $event;",
          "230:         }",
          "233:         $eventsbyid = calendar_get_events_by_id($params['events']['eventids']);",
          "234:         foreach ($eventsbyid as $eventid => $eventobj) {",
          "236:             if (isset($events[$eventid])) {",
          "237:                    continue;",
          "238:             }",
          "",
          "[Added Lines]",
          "234:         if ($eventsbyid = calendar_get_events_by_id($params['events']['eventids'])) {",
          "235:             $eventlist += $eventsbyid;",
          "236:         }",
          "238:         foreach ($eventlist as $eventid => $eventobj) {",
          "",
          "---------------"
        ],
        "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php": [
          "File: calendar/tests/externallib_test.php -> calendar/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
          "364:         $this->assertEquals(1, count($events['events'])); // site.",
          "365:         $this->assertEquals(0, count($events['warnings']));",
          "366:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368:         $this->setAdminUser();",
          "369:         $nexttime = time() + DAYSECS;",
          "370:         $assign = $this->getDataGenerator()->create_module('assign', array('course' => $course->id, 'duedate' => $nexttime));",
          "372:         $this->setUser($user);",
          "373:         $paramevents = array ('courseids' => array($course->id));",
          "374:         $options = array ('siteevents' => true, 'userevents' => true, 'timeend' => time() + WEEKSECS);",
          "375:         $events = core_calendar_external::get_calendar_events($paramevents, $options);",
          "376:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
          "378:         $this->assertCount(5, $events['events']);",
          "381:         set_coursemodule_visible($assign->cmid, 0);",
          "383:         accesslib_clear_all_caches_for_unit_testing();",
          "384:         course_modinfo::clear_instance_cache();",
          "386:         $events = core_calendar_external::get_calendar_events($paramevents, $options);",
          "387:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
          "389:         $this->assertCount(4, $events['events']);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "854e7b8ed0a84eb91ca455ca290427d22bc20baf",
      "candidate_info": {
        "commit_hash": "854e7b8ed0a84eb91ca455ca290427d22bc20baf",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/854e7b8ed0a84eb91ca455ca290427d22bc20baf",
        "files": [
          "calendar/externallib.php",
          "calendar/tests/externallib_test.php"
        ],
        "message": "MDL-52808 calendar: Do not return events for hidden activities",
        "before_after_code_files": [
          "calendar/externallib.php||calendar/externallib.php",
          "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
          ],
          "candidate": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "calendar/externallib.php||calendar/externallib.php": [
          "File: calendar/externallib.php -> calendar/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:             $params['options']['timeend'] = PHP_INT_MAX;",
          "228:         }",
          "230:         $eventlist = calendar_get_events($params['options']['timestart'], $params['options']['timeend'], $funcparam['users'], $funcparam['groups'],",
          "231:                 $funcparam['courses'], true, $params['options']['ignorehidden']);",
          "233:         $events = array();",
          "241:             $event = (array) $eventobj;",
          "245:             if ($hassystemcap) {",
          "247:                 $events[$eventid] = $event;",
          "",
          "[Removed Lines]",
          "234:         foreach ($eventlist as $id => $event) {",
          "235:             $events[$id] = (array) $event;",
          "236:         }",
          "239:         $eventsbyid = calendar_get_events_by_id($params['events']['eventids']);",
          "240:         foreach ($eventsbyid as $eventid => $eventobj) {",
          "242:             if (isset($events[$eventid])) {",
          "243:                    continue;",
          "244:             }",
          "",
          "[Added Lines]",
          "238:         if ($eventsbyid = calendar_get_events_by_id($params['events']['eventids'])) {",
          "239:             $eventlist += $eventsbyid;",
          "240:         }",
          "242:         foreach ($eventlist as $eventid => $eventobj) {",
          "",
          "---------------"
        ],
        "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php": [
          "File: calendar/tests/externallib_test.php -> calendar/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
          "371:         $this->assertEquals(1, count($events['events']));",
          "372:         $this->assertEquals(0, count($events['warnings']));",
          "373:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375:         $this->setAdminUser();",
          "376:         $nexttime = time() + DAYSECS;",
          "377:         $assign = $this->getDataGenerator()->create_module('assign', array('course' => $course->id, 'duedate' => $nexttime));",
          "379:         $this->setUser($user);",
          "380:         $paramevents = array ('courseids' => array($course->id));",
          "381:         $options = array ('siteevents' => true, 'userevents' => true, 'timeend' => time() + WEEKSECS);",
          "382:         $events = core_calendar_external::get_calendar_events($paramevents, $options);",
          "383:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
          "385:         $this->assertCount(5, $events['events']);",
          "388:         set_coursemodule_visible($assign->cmid, 0);",
          "390:         accesslib_clear_all_caches_for_unit_testing();",
          "391:         course_modinfo::clear_instance_cache();",
          "393:         $events = core_calendar_external::get_calendar_events($paramevents, $options);",
          "394:         $events = external_api::clean_returnvalue(core_calendar_external::get_calendar_events_returns(), $events);",
          "396:         $this->assertCount(4, $events['events']);",
          "",
          "---------------"
        ]
      }
    }
  ]
}