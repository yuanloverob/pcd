{
  "cve_id": "CVE-2018-12436",
  "cve_desc": "wolfcrypt/src/ecc.c in wolfSSL before 3.15.1.patch allows a memory-cache side-channel attack on ECDSA signatures, aka the Return Of the Hidden Number Problem or ROHNP. To discover an ECDSA key, the attacker needs access to either the local machine or a different virtual machine on the same physical host.",
  "repo": "wolfSSL/wolfssl",
  "patch_hash": "9b9568d500f31f964af26ba8d01e542e1f27e5ca",
  "patch_info": {
    "commit_hash": "9b9568d500f31f964af26ba8d01e542e1f27e5ca",
    "repo": "wolfSSL/wolfssl",
    "commit_url": "https://github.com/wolfSSL/wolfssl/commit/9b9568d500f31f964af26ba8d01e542e1f27e5ca",
    "files": [
      "wolfcrypt/src/ecc.c"
    ],
    "message": "Change ECDSA signing to use blinding.",
    "before_after_code_files": [
      "wolfcrypt/src/ecc.c||wolfcrypt/src/ecc.c"
    ]
  },
  "patch_diff": {
    "wolfcrypt/src/ecc.c||wolfcrypt/src/ecc.c": [
      "File: wolfcrypt/src/ecc.c -> wolfcrypt/src/ecc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3139:     if (err == 0)",
      "3140:         err = mp_read_unsigned_bin(k, (byte*)buf, size);",
      "3149:     if (err == MP_OKAY) {",
      "3150:         if (mp_cmp(k, order) != MP_LT) {",
      "",
      "[Removed Lines]",
      "3143:     if (err == MP_OKAY) {",
      "3144:         if (mp_iszero(k) == MP_YES)",
      "3145:           err = MP_ZERO_E;",
      "3146:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3152:         }",
      "3153:     }",
      "3155:     ForceZero(buf, ECC_MAXSIZE);",
      "3156: #ifdef WOLFSSL_SMALL_STACK",
      "3157:     XFREE(buf, NULL, DYNAMIC_TYPE_ECC_BUFFER);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3150:     if (err == MP_OKAY) {",
      "3151:         if (mp_iszero(k) == MP_YES)",
      "3152:           err = MP_ZERO_E;",
      "3153:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3926:        if ((err = wc_ecc_init_ex(&pubkey, key->heap, INVALID_DEVID)) == MP_OKAY) {",
      "3927:        #ifdef WOLFSSL_CUSTOM_CURVES",
      "3930:                err = wc_ecc_set_custom_curve(&pubkey, key->dp);",
      "3931:            }",
      "3932:        #endif",
      "3934:            for (; err == MP_OKAY;) {",
      "3935:                if (++loop_check > 64) {",
      "3936:                     err = RNG_FAILURE_E;",
      "3937:                     break;",
      "3938:                }",
      "3939:                err = wc_ecc_make_key_ex(rng, key->dp->size, &pubkey,",
      "3941:                if (err != MP_OKAY) break;",
      "",
      "[Removed Lines]",
      "3929:            if (key->idx == ECC_CUSTOM_IDX) {",
      "3940:                                                               key->dp->id);",
      "",
      "[Added Lines]",
      "3927:            mp_int b;",
      "3929:            if (err == MP_OKAY) {",
      "3930:                err = mp_init(&b);",
      "3931:            }",
      "3935:            if (err == MP_OKAY && key->idx == ECC_CUSTOM_IDX) {",
      "3940:            if (err == MP_OKAY) {",
      "3942:                do {",
      "3943:                    if (++loop_check > 64) {",
      "3944:                         err = RNG_FAILURE_E;",
      "3945:                         break;",
      "3946:                    }",
      "3948:                    err = wc_ecc_gen_k(rng, key->dp->size, &b, curve->order);",
      "3949:                }",
      "3950:                while (err == MP_ZERO_E);",
      "3951:                loop_check = 0;",
      "3952:            }",
      "3960:                                                                    key->dp->id);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3953:                    mp_forcezero(&pubkey.k);",
      "3954:                }",
      "3955:                else {",
      "3957:                    err = mp_invmod(&pubkey.k, curve->order, &pubkey.k);",
      "3958:                    if (err != MP_OKAY) break;",
      "3961:                    err = mp_mulmod(&key->k, r, curve->order, s);",
      "3962:                    if (err != MP_OKAY) break;",
      "3965:                    err = mp_add(e, s, s);",
      "3966:                    if (err != MP_OKAY) break;",
      "3970:                    if (err != MP_OKAY) break;",
      "3975:                    if (mp_iszero(s) == MP_NO)",
      "3976:                        break;",
      "3977:                 }",
      "3978:            }",
      "3979:            wc_ecc_free(&pubkey);",
      "3980:        }",
      "3981:    }",
      "",
      "[Removed Lines]",
      "3969:                    err = mp_mod(s, curve->order, s);",
      "3973:                    err = mp_mulmod(s, &pubkey.k, curve->order, s);",
      "",
      "[Added Lines]",
      "3980:                    err = mp_mulmod(&pubkey.k, &b, curve->order, &pubkey.k);",
      "3981:                    if (err != MP_OKAY) break;",
      "3992:                    err = mp_mulmod(&pubkey.k, s, curve->order, s);",
      "3993:                    if (err != MP_OKAY) break;",
      "3996:                    err = mp_mulmod(&pubkey.k, e, curve->order, e);",
      "3997:                    if (err != MP_OKAY) break;",
      "4006:                    err = mp_mulmod(s, &b, curve->order, s);",
      "4010:                    err = mp_mod(s, curve->order, s);",
      "4011:                    if (err != MP_OKAY) break;",
      "4018:            mp_clear(&b);",
      "4019:            mp_free(&b);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e6c22fbd85e4cb78cdd290d10f5359bc5a08874b",
      "candidate_info": {
        "commit_hash": "e6c22fbd85e4cb78cdd290d10f5359bc5a08874b",
        "repo": "wolfSSL/wolfssl",
        "commit_url": "https://github.com/wolfSSL/wolfssl/commit/e6c22fbd85e4cb78cdd290d10f5359bc5a08874b",
        "files": [
          "wolfcrypt/src/ecc.c",
          "wolfssl/wolfcrypt/ecc.h"
        ],
        "message": "Small stack support in ECC\n\nSmall stack builds now dynamically allocate large stack variables.\nCache option added to avoid repeated allocation of temporaries in add\npoints, double point and map.\nCached memory allocated in mulmod and mul2add.",
        "before_after_code_files": [
          "wolfcrypt/src/ecc.c||wolfcrypt/src/ecc.c",
          "wolfssl/wolfcrypt/ecc.h||wolfssl/wolfcrypt/ecc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wolfcrypt/src/ecc.c||wolfcrypt/src/ecc.c"
          ],
          "candidate": [
            "wolfcrypt/src/ecc.c||wolfcrypt/src/ecc.c"
          ]
        }
      },
      "candidate_diff": {
        "wolfcrypt/src/ecc.c||wolfcrypt/src/ecc.c": [
          "File: wolfcrypt/src/ecc.c -> wolfcrypt/src/ecc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1222:         static wolfSSL_Mutex ecc_curve_cache_mutex;",
          "1223:     #endif",
          "1226: #else",
          "1228:         mp_int spec_ints[(intcount)]; \\",
          "1229:         ecc_curve_spec curve_lcl; \\",
          "1230:         ecc_curve_spec* curve = &curve_lcl; \\",
          "1231:         XMEMSET(curve, 0, sizeof(ecc_curve_spec)); \\",
          "1232:         curve->spec_ints = spec_ints; \\",
          "1236: static void _wc_ecc_curve_free(ecc_curve_spec* curve)",
          "",
          "[Removed Lines]",
          "1225:     #define DECLARE_CURVE_SPECS(intcount) ecc_curve_spec* curve = NULL;",
          "1227:     #define DECLARE_CURVE_SPECS(intcount) \\",
          "1233:         curve->spec_count = intcount;",
          "",
          "[Added Lines]",
          "1225:     #define DECLARE_CURVE_SPECS(curve, intcount) ecc_curve_spec* curve = NULL",
          "1226:     #define ALLOC_CURVE_SPECS(intcount)",
          "1227:     #define FREE_CURVE_SPECS()",
          "1228: #elif defined(WOLFSSL_SMALL_STACK)",
          "1229:     #define DECLARE_CURVE_SPECS(curve, intcount)                        \\",
          "1230:         mp_int* spec_ints = NULL;                                       \\",
          "1231:         ecc_curve_spec curve_lcl;                                       \\",
          "1232:         ecc_curve_spec* curve = &curve_lcl;                             \\",
          "1233:         XMEMSET(curve, 0, sizeof(ecc_curve_spec));                      \\",
          "1234:         curve->spec_count = intcount",
          "1236:     #define ALLOC_CURVE_SPECS(intcount)                                 \\",
          "1237:         spec_ints = (mp_int*)XMALLOC(sizeof(mp_int) * (intcount), NULL, \\",
          "1238:                             DYNAMIC_TYPE_ECC);                          \\",
          "1239:         if (spec_ints == NULL)                                          \\",
          "1240:             return MEMORY_E;                                            \\",
          "1241:         curve->spec_ints = spec_ints",
          "1242:     #define FREE_CURVE_SPECS()                                          \\",
          "1243:         XFREE(spec_ints, NULL, DYNAMIC_TYPE_ECC)",
          "1245:     #define DECLARE_CURVE_SPECS(curve, intcount) \\",
          "1251:         curve->spec_count = intcount",
          "1252:     #define ALLOC_CURVE_SPECS(intcount)",
          "1253:     #define FREE_CURVE_SPECS()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1505:                              mp_int* a, mp_int* modulus, mp_digit mp)",
          "1506: {",
          "1507: #ifndef WOLFSSL_SP_MATH",
          "1509: #ifdef ALT_ECC_SIZE",
          "1511: #endif",
          "1515:    if (P == NULL || Q == NULL || R == NULL || modulus == NULL) {",
          "1516:        return ECC_BAD_ARG_E;",
          "",
          "[Removed Lines]",
          "1508:    mp_int t1, t2;",
          "1510:    mp_int rx, ry, rz;",
          "1512:    mp_int *x, *y, *z;",
          "1513:    int    err;",
          "",
          "[Added Lines]",
          "1528: #ifdef WOLFSSL_SMALL_STACK",
          "1529:    mp_int* t1 = NULL;",
          "1530:    mp_int* t2 = NULL;",
          "1532:    mp_int* rx = NULL;",
          "1533:    mp_int* ry = NULL;",
          "1534:    mp_int* rz = NULL;",
          "1536: #else",
          "1537:    mp_int  t1[1], t2[1];",
          "1538: #ifdef ALT_ECC_SIZE",
          "1539:    mp_int  rx[1], ry[1], rz[1];",
          "1540: #endif",
          "1541: #endif",
          "1542:    mp_int  *x, *y, *z;",
          "1543:    int     err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1523:       Q = tPt;",
          "1524:    }",
          "1527:       return err;",
          "1528:    }",
          "1531:    if (err == MP_OKAY)",
          "1533:    if (err == MP_OKAY) {",
          "1534:        if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&",
          "1535:             (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&",
          "1539:           return ecc_projective_dbl_point(P, R, a, modulus, mp);",
          "1540:        }",
          "1541:    }",
          "",
          "[Removed Lines]",
          "1526:    if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {",
          "1532:        err = mp_sub(modulus, Q->y, &t1);",
          "1536:             (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, &t1) == MP_EQ)) {",
          "1537:            mp_clear(&t1);",
          "1538:            mp_clear(&t2);",
          "",
          "[Added Lines]",
          "1556: #ifdef WOLFSSL_SMALL_STACK",
          "1557: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "1558:    if (R->key != NULL) {",
          "1559:        t1 = R->key->t1;",
          "1560:        t2 = R->key->t2;",
          "1561: #ifdef ALT_ECC_SIZE",
          "1562:        rx = R->key->x;",
          "1563:        ry = R->key->y;",
          "1564:        rz = R->key->z;",
          "1565: #endif",
          "1566:    }",
          "1567:    else",
          "1569:    {",
          "1570:        t1 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "1571:        t2 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "1572:        if (t1 == NULL || t2 == NULL) {",
          "1573:            XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "1574:            XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "1575:            return MEMORY_E;",
          "1576:        }",
          "1577: #ifdef ALT_ECC_SIZE",
          "1578:        rx = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "1579:        ry = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "1580:        rz = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "1581:        if (rx == NULL || ry == NULL || rz == NULL) {",
          "1582:            XFREE(rz, NULL, DYNAMIC_TYPE_ECC);",
          "1583:            XFREE(ry, NULL, DYNAMIC_TYPE_ECC);",
          "1584:            XFREE(rx, NULL, DYNAMIC_TYPE_ECC);",
          "1585:            XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "1586:            XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "1587:            return MEMORY_E;",
          "1588:        }",
          "1589: #endif",
          "1590:    }",
          "1593:    if ((err = mp_init_multi(t1, t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {",
          "1594: #ifdef WOLFSSL_SMALL_STACK",
          "1595:    #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "1596:        if (R->key == NULL)",
          "1597:    #endif",
          "1598:        {",
          "1599:        #ifdef ALT_ECC_SIZE",
          "1600:           XFREE(rz, NULL, DYNAMIC_TYPE_ECC);",
          "1601:           XFREE(ry, NULL, DYNAMIC_TYPE_ECC);",
          "1602:           XFREE(rx, NULL, DYNAMIC_TYPE_ECC);",
          "1603:        #endif",
          "1604:           XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "1605:           XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "1606:        }",
          "1607: #endif",
          "1613:        err = mp_sub(modulus, Q->y, t1);",
          "1617:             (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, t1) == MP_EQ)) {",
          "1618:            mp_clear(t1);",
          "1619:            mp_clear(t2);",
          "1620:     #ifdef WOLFSSL_SMALL_STACK",
          "1621:        #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "1622:            if (R->key == NULL)",
          "1623:        #endif",
          "1624:            {",
          "1625:             #ifdef ALT_ECC_SIZE",
          "1626:                XFREE(rz, NULL, DYNAMIC_TYPE_ECC);",
          "1627:                XFREE(ry, NULL, DYNAMIC_TYPE_ECC);",
          "1628:                XFREE(rx, NULL, DYNAMIC_TYPE_ECC);",
          "1629:             #endif",
          "1630:                XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "1631:                XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "1632:            }",
          "1633:         #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1549: #ifdef ALT_ECC_SIZE",
          "1555:    if ((err = mp_init_multi(x, y, z, NULL, NULL, NULL)) != MP_OKAY) {",
          "1556:       goto done;",
          "",
          "[Removed Lines]",
          "1551:    x = &rx;",
          "1552:    y = &ry;",
          "1553:    z = &rz;",
          "",
          "[Added Lines]",
          "1646:    x = rx;",
          "1647:    y = ry;",
          "1648:    z = rz;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1573:    if (err == MP_OKAY) {",
          "1574:        if (!mp_iszero(Q->z)) {",
          "1577:            if (err == MP_OKAY)",
          "1581:            if (err == MP_OKAY)",
          "1583:            if (err == MP_OKAY)",
          "1584:                err = mp_montgomery_reduce(x, modulus, mp);",
          "1587:            if (err == MP_OKAY)",
          "1589:            if (err == MP_OKAY)",
          "1593:            if (err == MP_OKAY)",
          "1595:            if (err == MP_OKAY)",
          "1596:                err = mp_montgomery_reduce(y, modulus, mp);",
          "1597:        }",
          "",
          "[Removed Lines]",
          "1576:            err = mp_sqr(Q->z, &t1);",
          "1578:                err = mp_montgomery_reduce(&t1, modulus, mp);",
          "1582:                err = mp_mul(&t1, x, x);",
          "1588:                err = mp_mul(Q->z, &t1, &t1);",
          "1590:                err = mp_montgomery_reduce(&t1, modulus, mp);",
          "1594:                err = mp_mul(&t1, y, y);",
          "",
          "[Added Lines]",
          "1671:            err = mp_sqr(Q->z, t1);",
          "1673:                err = mp_montgomery_reduce(t1, modulus, mp);",
          "1677:                err = mp_mul(t1, x, x);",
          "1683:                err = mp_mul(Q->z, t1, t1);",
          "1685:                err = mp_montgomery_reduce(t1, modulus, mp);",
          "1689:                err = mp_mul(t1, y, y);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1601:    if (err == MP_OKAY)",
          "1603:    if (err == MP_OKAY)",
          "1607:    if (err == MP_OKAY)",
          "1609:    if (err == MP_OKAY)",
          "1613:    if (err == MP_OKAY)",
          "1615:    if (err == MP_OKAY)",
          "1619:    if (err == MP_OKAY)",
          "1621:    if (err == MP_OKAY)",
          "1625:    if (err == MP_OKAY)",
          "1627:    if (err == MP_OKAY) {",
          "1628:        if (mp_isneg(y))",
          "1629:            err = mp_add(y, modulus, y);",
          "1630:    }",
          "1632:    if (err == MP_OKAY)",
          "1634:    if (err == MP_OKAY) {",
          "1637:    }",
          "1639:    if (err == MP_OKAY)",
          "1641:    if (err == MP_OKAY) {",
          "1644:    }",
          "1646:    if (err == MP_OKAY)",
          "1648:    if (err == MP_OKAY) {",
          "1649:        if (mp_isneg(x))",
          "1650:            err = mp_add(x, modulus, x);",
          "1651:    }",
          "1653:    if (err == MP_OKAY)",
          "1655:    if (err == MP_OKAY) {",
          "1658:    }",
          "1660:    if (err == MP_OKAY)",
          "1662:    if (err == MP_OKAY) {",
          "1665:    }",
          "1667:    if (err == MP_OKAY) {",
          "",
          "[Removed Lines]",
          "1602:        err = mp_sqr(z, &t1);",
          "1604:        err = mp_montgomery_reduce(&t1, modulus, mp);",
          "1608:        err = mp_mul(Q->x, &t1, &t2);",
          "1610:        err = mp_montgomery_reduce(&t2, modulus, mp);",
          "1614:        err = mp_mul(z, &t1, &t1);",
          "1616:        err = mp_montgomery_reduce(&t1, modulus, mp);",
          "1620:        err = mp_mul(Q->y, &t1, &t1);",
          "1622:        err = mp_montgomery_reduce(&t1, modulus, mp);",
          "1626:        err = mp_sub(y, &t1, y);",
          "1633:        err = mp_add(&t1, &t1, &t1);",
          "1635:        if (mp_cmp(&t1, modulus) != MP_LT)",
          "1636:            err = mp_sub(&t1, modulus, &t1);",
          "1640:        err = mp_add(&t1, y, &t1);",
          "1642:        if (mp_cmp(&t1, modulus) != MP_LT)",
          "1643:            err = mp_sub(&t1, modulus, &t1);",
          "1647:        err = mp_sub(x, &t2, x);",
          "1654:        err = mp_add(&t2, &t2, &t2);",
          "1656:        if (mp_cmp(&t2, modulus) != MP_LT)",
          "1657:            err = mp_sub(&t2, modulus, &t2);",
          "1661:        err = mp_add(&t2, x, &t2);",
          "1663:        if (mp_cmp(&t2, modulus) != MP_LT)",
          "1664:            err = mp_sub(&t2, modulus, &t2);",
          "",
          "[Added Lines]",
          "1697:        err = mp_sqr(z, t1);",
          "1699:        err = mp_montgomery_reduce(t1, modulus, mp);",
          "1703:        err = mp_mul(Q->x, t1, t2);",
          "1705:        err = mp_montgomery_reduce(t2, modulus, mp);",
          "1709:        err = mp_mul(z, t1, t1);",
          "1711:        err = mp_montgomery_reduce(t1, modulus, mp);",
          "1715:        err = mp_mul(Q->y, t1, t1);",
          "1717:        err = mp_montgomery_reduce(t1, modulus, mp);",
          "1721:        err = mp_sub(y, t1, y);",
          "1728:        err = mp_add(t1, t1, t1);",
          "1730:        if (mp_cmp(t1, modulus) != MP_LT)",
          "1731:            err = mp_sub(t1, modulus, t1);",
          "1735:        err = mp_add(t1, y, t1);",
          "1737:        if (mp_cmp(t1, modulus) != MP_LT)",
          "1738:            err = mp_sub(t1, modulus, t1);",
          "1742:        err = mp_sub(x, t2, x);",
          "1749:        err = mp_add(t2, t2, t2);",
          "1751:        if (mp_cmp(t2, modulus) != MP_LT)",
          "1752:            err = mp_sub(t2, modulus, t2);",
          "1756:        err = mp_add(t2, x, t2);",
          "1758:        if (mp_cmp(t2, modulus) != MP_LT)",
          "1759:            err = mp_sub(t2, modulus, t2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1683:    if (err == MP_OKAY)",
          "1685:    if (err == MP_OKAY)",
          "1689:    if (err == MP_OKAY)",
          "",
          "[Removed Lines]",
          "1684:        err = mp_mul(&t1, x, &t1);",
          "1686:        err = mp_montgomery_reduce(&t1, modulus, mp);",
          "",
          "[Added Lines]",
          "1779:        err = mp_mul(t1, x, t1);",
          "1781:        err = mp_montgomery_reduce(t1, modulus, mp);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1695:    if (err == MP_OKAY)",
          "1697:    if (err == MP_OKAY)",
          "1701:    if (err == MP_OKAY)",
          "1703:    if (err == MP_OKAY)",
          "1707:    if (err == MP_OKAY)",
          "",
          "[Removed Lines]",
          "1696:        err = mp_mul(&t2, x, &t2);",
          "1698:        err = mp_montgomery_reduce(&t2, modulus, mp);",
          "1702:        err = mp_mul(&t1, x, &t1);",
          "1704:        err = mp_montgomery_reduce(&t1, modulus, mp);",
          "",
          "[Added Lines]",
          "1791:        err = mp_mul(t2, x, t2);",
          "1793:        err = mp_montgomery_reduce(t2, modulus, mp);",
          "1797:        err = mp_mul(t1, x, t1);",
          "1799:        err = mp_montgomery_reduce(t1, modulus, mp);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1713:    if (err == MP_OKAY)",
          "1715:    if (err == MP_OKAY) {",
          "1716:        if (mp_isneg(x))",
          "1717:            err = mp_add(x, modulus, x);",
          "1718:    }",
          "1720:    if (err == MP_OKAY)",
          "1722:    if (err == MP_OKAY) {",
          "1725:    }",
          "1727:    if (err == MP_OKAY)",
          "1729:    if (err == MP_OKAY) {",
          "1732:    }",
          "1734:    if (err == MP_OKAY)",
          "1736:    if (err == MP_OKAY)",
          "1740:    if (err == MP_OKAY)",
          "1742:    if (err == MP_OKAY) {",
          "1743:        if (mp_isneg(y))",
          "1744:            err = mp_add(y, modulus, y);",
          "",
          "[Removed Lines]",
          "1714:        err = mp_sub(x, &t2, x);",
          "1721:        err = mp_sub(&t2, x, &t2);",
          "1723:        if (mp_isneg(&t2))",
          "1724:            err = mp_add(&t2, modulus, &t2);",
          "1728:        err = mp_sub(&t2, x, &t2);",
          "1730:        if (mp_isneg(&t2))",
          "1731:            err = mp_add(&t2, modulus, &t2);",
          "1735:        err = mp_mul(&t2, y, &t2);",
          "1737:        err = mp_montgomery_reduce(&t2, modulus, mp);",
          "1741:        err = mp_sub(&t2, &t1, y);",
          "",
          "[Added Lines]",
          "1809:        err = mp_sub(x, t2, x);",
          "1816:        err = mp_sub(t2, x, t2);",
          "1818:        if (mp_isneg(t2))",
          "1819:            err = mp_add(t2, modulus, t2);",
          "1823:        err = mp_sub(t2, x, t2);",
          "1825:        if (mp_isneg(t2))",
          "1826:            err = mp_add(t2, modulus, t2);",
          "1830:        err = mp_mul(t2, y, t2);",
          "1832:        err = mp_montgomery_reduce(t2, modulus, mp);",
          "1836:        err = mp_sub(t2, t1, y);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1763: done:",
          "1769:    return err;",
          "1770: #else",
          "",
          "[Removed Lines]",
          "1766:    mp_clear(&t1);",
          "1767:    mp_clear(&t2);",
          "",
          "[Added Lines]",
          "1861:    mp_clear(t1);",
          "1862:    mp_clear(t2);",
          "1863: #ifdef WOLFSSL_SMALL_STACK",
          "1864: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "1865:    if (R->key == NULL)",
          "1866: #endif",
          "1867:    {",
          "1868:    #ifdef ALT_ECC_SIZE",
          "1869:       XFREE(rz, NULL, DYNAMIC_TYPE_ECC);",
          "1870:       XFREE(ry, NULL, DYNAMIC_TYPE_ECC);",
          "1871:       XFREE(rx, NULL, DYNAMIC_TYPE_ECC);",
          "1872:    #endif",
          "1873:       XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "1874:       XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "1875:    }",
          "1876: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1811:                                        mp_int* modulus, mp_digit mp)",
          "1812: {",
          "1813: #ifndef WOLFSSL_SP_MATH",
          "1815: #ifdef ALT_ECC_SIZE",
          "1817: #endif",
          "1818:    mp_int *x, *y, *z;",
          "1819:    int    err;",
          "",
          "[Removed Lines]",
          "1814:    mp_int t1, t2;",
          "1816:    mp_int rx, ry, rz;",
          "",
          "[Added Lines]",
          "1923: #ifdef WOLFSSL_SMALL_STACK",
          "1924:    mp_int* t1 = NULL;",
          "1925:    mp_int* t2 = NULL;",
          "1927:    mp_int* rx = NULL;",
          "1928:    mp_int* ry = NULL;",
          "1929:    mp_int* rz = NULL;",
          "1930: #endif",
          "1931: #else",
          "1932:    mp_int  t1[1], t2[1];",
          "1933: #ifdef ALT_ECC_SIZE",
          "1934:    mp_int  rx[1], ry[1], rz[1];",
          "1935: #endif",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1821:    if (P == NULL || R == NULL || modulus == NULL)",
          "1822:        return ECC_BAD_ARG_E;",
          "1825:       return err;",
          "1826:    }",
          "",
          "[Removed Lines]",
          "1824:    if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {",
          "",
          "[Added Lines]",
          "1943: #ifdef WOLFSSL_SMALL_STACK",
          "1944: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "1945:    if (R->key != NULL) {",
          "1946:        t1 = R->key->t1;",
          "1947:        t2 = R->key->t2;",
          "1948:    #ifdef ALT_ECC_SIZE",
          "1949:        rx = R->key->x;",
          "1950:        ry = R->key->y;",
          "1951:        rz = R->key->z;",
          "1952:    #endif",
          "1953:    }",
          "1954:    else",
          "1956:    {",
          "1957:        t1 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "1958:        t2 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "1959:        if (t1 == NULL || t2 == NULL) {",
          "1960:            XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "1961:            XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "1962:            return MEMORY_E;",
          "1963:        }",
          "1964:     #ifdef ALT_ECC_SIZE",
          "1965:        rx = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "1966:        ry = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "1967:        rz = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "1968:        if (rx == NULL || ry == NULL || rz == NULL) {",
          "1969:            XFREE(rz, NULL, DYNAMIC_TYPE_ECC);",
          "1970:            XFREE(ry, NULL, DYNAMIC_TYPE_ECC);",
          "1971:            XFREE(rx, NULL, DYNAMIC_TYPE_ECC);",
          "1972:            XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "1973:            XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "1974:            return MEMORY_E;",
          "1975:        }",
          "1976:     #endif",
          "1977:     }",
          "1978: #endif",
          "1980:    if ((err = mp_init_multi(t1, t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {",
          "1981: #ifdef WOLFSSL_SMALL_STACK",
          "1982: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "1983:     if (R->key == NULL)",
          "1984: #endif",
          "1985:     {",
          "1986:     #ifdef ALT_ECC_SIZE",
          "1987:        XFREE(rz, NULL, DYNAMIC_TYPE_ECC);",
          "1988:        XFREE(ry, NULL, DYNAMIC_TYPE_ECC);",
          "1989:        XFREE(rx, NULL, DYNAMIC_TYPE_ECC);",
          "1990:     #endif",
          "1991:        XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "1992:        XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "1993:      }",
          "1994: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1830: #ifdef ALT_ECC_SIZE",
          "1836:    if ((err = mp_init_multi(x, y, z, NULL, NULL, NULL)) != MP_OKAY) {",
          "1839:        return err;",
          "1840:    }",
          "1841: #else",
          "",
          "[Removed Lines]",
          "1832:    x = &rx;",
          "1833:    y = &ry;",
          "1834:    z = &rz;",
          "1837:        mp_clear(&t1);",
          "1838:        mp_clear(&t2);",
          "",
          "[Added Lines]",
          "2002:    x = rx;",
          "2003:    y = ry;",
          "2004:    z = rz;",
          "2007:        mp_clear(t1);",
          "2008:        mp_clear(t2);",
          "2009:     #ifdef WOLFSSL_SMALL_STACK",
          "2010:     #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2011:        if (R->key == NULL)",
          "2012:     #endif",
          "2013:        {",
          "2014:        #ifdef ALT_ECC_SIZE",
          "2015:           XFREE(rz, NULL, DYNAMIC_TYPE_ECC);",
          "2016:           XFREE(ry, NULL, DYNAMIC_TYPE_ECC);",
          "2017:           XFREE(rx, NULL, DYNAMIC_TYPE_ECC);",
          "2018:        #endif",
          "2019:           XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "2020:           XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "2021:        }",
          "2022:     #endif",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1856:    if (err == MP_OKAY)",
          "1858:    if (err == MP_OKAY)",
          "1862:    if (err == MP_OKAY)",
          "",
          "[Removed Lines]",
          "1857:        err = mp_sqr(z, &t1);",
          "1859:        err = mp_montgomery_reduce(&t1, modulus, mp);",
          "",
          "[Added Lines]",
          "2041:        err = mp_sqr(z, t1);",
          "2043:        err = mp_montgomery_reduce(t1, modulus, mp);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1876: #ifdef WOLFSSL_CUSTOM_CURVES",
          "1877:    if (err == MP_OKAY) {",
          "1880:    }",
          "1885:       if (err == MP_OKAY)",
          "1887:       if (err == MP_OKAY)",
          "1890:       if (err == MP_OKAY)",
          "1893:       if (err == MP_OKAY)",
          "1895:       if (err == MP_OKAY)",
          "1898:       if (err == MP_OKAY)",
          "1900:       if (err == MP_OKAY) {",
          "1903:       }",
          "1905:       if (err == MP_OKAY)",
          "1907:       if (err == MP_OKAY) {",
          "1910:       }",
          "1912:       if (err == MP_OKAY)",
          "1914:       if (err == MP_OKAY) {",
          "1917:       }",
          "1918:    }",
          "1919:    else",
          "",
          "[Removed Lines]",
          "1879:       err = mp_submod(modulus, a, modulus, &t2);",
          "1881:    if (err == MP_OKAY && mp_cmp_d(&t2, 3) != MP_EQ) {",
          "1886:           err = mp_sqr(&t1, &t2);",
          "1888:           err = mp_montgomery_reduce(&t2, modulus, mp);",
          "1891:           err = mp_mulmod(&t2, a, modulus, &t1);",
          "1894:           err = mp_sqr(x, &t2);",
          "1896:           err = mp_montgomery_reduce(&t2, modulus, mp);",
          "1899:           err = mp_add(&t1, &t2, &t1);",
          "1901:          if (mp_cmp(&t1, modulus) != MP_LT)",
          "1902:             err = mp_sub(&t1, modulus, &t1);",
          "1906:           err = mp_add(&t1, &t2, &t1);",
          "1908:           if (mp_cmp(&t1, modulus) != MP_LT)",
          "1909:               err = mp_sub(&t1, modulus, &t1);",
          "1913:           err = mp_add(&t1, &t2, &t1);",
          "1915:          if (mp_cmp(&t1, modulus) != MP_LT)",
          "1916:             err = mp_sub(&t1, modulus, &t1);",
          "",
          "[Added Lines]",
          "2063:       err = mp_submod(modulus, a, modulus, t2);",
          "2065:    if (err == MP_OKAY && mp_cmp_d(t2, 3) != MP_EQ) {",
          "2070:           err = mp_sqr(t1, t2);",
          "2072:           err = mp_montgomery_reduce(t2, modulus, mp);",
          "2075:           err = mp_mulmod(t2, a, modulus, t1);",
          "2078:           err = mp_sqr(x, t2);",
          "2080:           err = mp_montgomery_reduce(t2, modulus, mp);",
          "2083:           err = mp_add(t1, t2, t1);",
          "2085:          if (mp_cmp(t1, modulus) != MP_LT)",
          "2086:             err = mp_sub(t1, modulus, t1);",
          "2090:           err = mp_add(t1, t2, t1);",
          "2092:           if (mp_cmp(t1, modulus) != MP_LT)",
          "2093:               err = mp_sub(t1, modulus, t1);",
          "2097:           err = mp_add(t1, t2, t1);",
          "2099:          if (mp_cmp(t1, modulus) != MP_LT)",
          "2100:             err = mp_sub(t1, modulus, t1);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1926:       if (err == MP_OKAY)",
          "1928:       if (err == MP_OKAY) {",
          "1931:       }",
          "1933:       if (err == MP_OKAY)",
          "1935:       if (err == MP_OKAY) {",
          "1938:       }",
          "1940:       if (err == MP_OKAY)",
          "1942:       if (err == MP_OKAY)",
          "1946:       if (err == MP_OKAY)",
          "1948:       if (err == MP_OKAY) {",
          "1951:       }",
          "1953:       if (err == MP_OKAY)",
          "1955:       if (err == MP_OKAY) {",
          "1958:       }",
          "1959:    }",
          "",
          "[Removed Lines]",
          "1927:           err = mp_sub(x, &t1, &t2);",
          "1929:           if (mp_isneg(&t2))",
          "1930:               err = mp_add(&t2, modulus, &t2);",
          "1934:           err = mp_add(&t1, x, &t1);",
          "1936:           if (mp_cmp(&t1, modulus) != MP_LT)",
          "1937:               err = mp_sub(&t1, modulus, &t1);",
          "1941:           err = mp_mul(&t1, &t2, &t2);",
          "1943:           err = mp_montgomery_reduce(&t2, modulus, mp);",
          "1947:           err = mp_add(&t2, &t2, &t1);",
          "1949:           if (mp_cmp(&t1, modulus) != MP_LT)",
          "1950:               err = mp_sub(&t1, modulus, &t1);",
          "1954:           err = mp_add(&t1, &t2, &t1);",
          "1956:           if (mp_cmp(&t1, modulus) != MP_LT)",
          "1957:               err = mp_sub(&t1, modulus, &t1);",
          "",
          "[Added Lines]",
          "2111:           err = mp_sub(x, t1, t2);",
          "2113:           if (mp_isneg(t2))",
          "2114:               err = mp_add(t2, modulus, t2);",
          "2118:           err = mp_add(t1, x, t1);",
          "2120:           if (mp_cmp(t1, modulus) != MP_LT)",
          "2121:               err = mp_sub(t1, modulus, t1);",
          "2125:           err = mp_mul(t1, t2, t2);",
          "2127:           err = mp_montgomery_reduce(t2, modulus, mp);",
          "2131:           err = mp_add(t2, t2, t1);",
          "2133:           if (mp_cmp(t1, modulus) != MP_LT)",
          "2134:               err = mp_sub(t1, modulus, t1);",
          "2138:           err = mp_add(t1, t2, t1);",
          "2140:           if (mp_cmp(t1, modulus) != MP_LT)",
          "2141:               err = mp_sub(t1, modulus, t1);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1975:    if (err == MP_OKAY)",
          "1977:    if (err == MP_OKAY)",
          "1981:    if (err == MP_OKAY) {",
          "1984:    }",
          "1985:    if (err == MP_OKAY)",
          "1989:    if (err == MP_OKAY)",
          "",
          "[Removed Lines]",
          "1976:        err = mp_sqr(y, &t2);",
          "1978:        err = mp_montgomery_reduce(&t2, modulus, mp);",
          "1982:        if (mp_isodd(&t2) == MP_YES)",
          "1983:            err = mp_add(&t2, modulus, &t2);",
          "1986:        err = mp_div_2(&t2, &t2);",
          "",
          "[Added Lines]",
          "2160:        err = mp_sqr(y, t2);",
          "2162:        err = mp_montgomery_reduce(t2, modulus, mp);",
          "2166:        if (mp_isodd(t2) == MP_YES)",
          "2167:            err = mp_add(t2, modulus, t2);",
          "2170:        err = mp_div_2(t2, t2);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1995:    if (err == MP_OKAY)",
          "1997:    if (err == MP_OKAY)",
          "1998:        err = mp_montgomery_reduce(x, modulus, mp);",
          "",
          "[Removed Lines]",
          "1996:        err = mp_sqr(&t1, x);",
          "",
          "[Added Lines]",
          "2180:        err = mp_sqr(t1, x);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2021:    }",
          "2023:    if (err == MP_OKAY)",
          "2025:    if (err == MP_OKAY)",
          "2026:        err = mp_montgomery_reduce(y, modulus, mp);",
          "2029:    if (err == MP_OKAY)",
          "2031:    if (err == MP_OKAY) {",
          "2032:        if (mp_isneg(y))",
          "2033:            err = mp_add(y, modulus, y);",
          "",
          "[Removed Lines]",
          "2024:        err = mp_mul(y, &t1, y);",
          "2030:        err = mp_sub(y, &t2, y);",
          "",
          "[Added Lines]",
          "2208:        err = mp_mul(y, t1, y);",
          "2214:        err = mp_sub(y, t2, y);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2043: #endif",
          "2049:    return err;",
          "2050: #else",
          "",
          "[Removed Lines]",
          "2046:    mp_clear(&t1);",
          "2047:    mp_clear(&t2);",
          "",
          "[Added Lines]",
          "2230:    mp_clear(t1);",
          "2231:    mp_clear(t2);",
          "2233: #ifdef WOLFSSL_SMALL_STACK",
          "2234: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2235:    if (R->key == NULL)",
          "2236: #endif",
          "2237:    {",
          "2238:     #ifdef ALT_ECC_SIZE",
          "2239:        XFREE(rz, NULL, DYNAMIC_TYPE_ECC);",
          "2240:        XFREE(ry, NULL, DYNAMIC_TYPE_ECC);",
          "2241:        XFREE(rx, NULL, DYNAMIC_TYPE_ECC);",
          "2242:     #endif",
          "2243:        XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "2244:        XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "2245:     }",
          "2246: #endif",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2069: int ecc_map(ecc_point* P, mp_int* modulus, mp_digit mp)",
          "2070: {",
          "2071: #ifndef WOLFSSL_SP_MATH",
          "2073: #ifdef ALT_ECC_SIZE",
          "2075: #endif",
          "2076:    mp_int *x, *y, *z;",
          "2077:    int    err;",
          "",
          "[Removed Lines]",
          "2072:    mp_int t1, t2;",
          "2074:    mp_int rx, ry, rz;",
          "",
          "[Added Lines]",
          "2271: #ifdef WOLFSSL_SMALL_STACK",
          "2272:    mp_int* t1 = NULL;",
          "2273:    mp_int* t2 = NULL;",
          "2275:    mp_int* rx = NULL;",
          "2276:    mp_int* ry = NULL;",
          "2277:    mp_int* rz = NULL;",
          "2279: #else",
          "2280:    mp_int  t1[1], t2[1];",
          "2281: #ifdef ALT_ECC_SIZE",
          "2282:    mp_int  rx[1], ry[1], rz[1];",
          "2283: #endif",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2089:        return err;",
          "2090:    }",
          "2093:       return MEMORY_E;",
          "2094:    }",
          "2096: #ifdef ALT_ECC_SIZE",
          "2102:    if ((err = mp_init_multi(x, y, z, NULL, NULL, NULL)) != MP_OKAY) {",
          "2103:        goto done;",
          "",
          "[Removed Lines]",
          "2092:    if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {",
          "2098:    x = &rx;",
          "2099:    y = &ry;",
          "2100:    z = &rz;",
          "",
          "[Added Lines]",
          "2301: #ifdef WOLFSSL_SMALL_STACK",
          "2302: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2303:    if (P->key != NULL) {",
          "2304:        t1 = P->key->t1;",
          "2305:        t2 = P->key->t2;",
          "2306:    #ifdef ALT_ECC_SIZE",
          "2307:        rx = P->key->x;",
          "2308:        ry = P->key->y;",
          "2309:        rz = P->key->z;",
          "2310:    #endif",
          "2311:    }",
          "2312:    else",
          "2314:    {",
          "2315:        t1 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "2316:        t2 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "2317:        if (t1 == NULL || t2 == NULL) {",
          "2318:            XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "2319:            XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "2320:            return MEMORY_E;",
          "2321:        }",
          "2322: #ifdef ALT_ECC_SIZE",
          "2323:        rx = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "2324:        ry = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "2325:        rz = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "2326:        if (rx == NULL || ry == NULL || rz == NULL) {",
          "2327:            XFREE(rz, NULL, DYNAMIC_TYPE_ECC);",
          "2328:            XFREE(ry, NULL, DYNAMIC_TYPE_ECC);",
          "2329:            XFREE(rx, NULL, DYNAMIC_TYPE_ECC);",
          "2330:            XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "2331:            XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "2332:            return MEMORY_E;",
          "2333:        }",
          "2334: #endif",
          "2335:    }",
          "2338:    if ((err = mp_init_multi(t1, t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {",
          "2339: #ifdef WOLFSSL_SMALL_STACK",
          "2340: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2341:       if (P->key == NULL)",
          "2342: #endif",
          "2343:       {",
          "2344:       #ifdef ALT_ECC_SIZE",
          "2345:          XFREE(rz, NULL, DYNAMIC_TYPE_ECC);",
          "2346:          XFREE(ry, NULL, DYNAMIC_TYPE_ECC);",
          "2347:          XFREE(rx, NULL, DYNAMIC_TYPE_ECC);",
          "2348:       #endif",
          "2349:          XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "2350:          XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "2351:       }",
          "2352: #endif",
          "2358:    x = rx;",
          "2359:    y = ry;",
          "2360:    z = rz;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2127:    if (err == MP_OKAY)",
          "2131:    if (err == MP_OKAY)",
          "2133:    if (err == MP_OKAY)",
          "2135:    if (err == MP_OKAY)",
          "2137:    if (err == MP_OKAY)",
          "2141:    if (err == MP_OKAY)",
          "2143:    if (err == MP_OKAY)",
          "2144:        err = mp_montgomery_reduce(x, modulus, mp);",
          "2145:    if (err == MP_OKAY)",
          "2147:    if (err == MP_OKAY)",
          "2148:        err = mp_montgomery_reduce(y, modulus, mp);",
          "",
          "[Removed Lines]",
          "2128:        err = mp_invmod(z, modulus, &t1);",
          "2132:        err = mp_sqr(&t1, &t2);",
          "2134:        err = mp_mod(&t2, modulus, &t2);",
          "2136:        err = mp_mul(&t1, &t2, &t1);",
          "2138:        err = mp_mod(&t1, modulus, &t1);",
          "2142:        err = mp_mul(x, &t2, x);",
          "2146:        err = mp_mul(y, &t1, y);",
          "",
          "[Added Lines]",
          "2388:        err = mp_invmod(z, modulus, t1);",
          "2392:        err = mp_sqr(t1, t2);",
          "2394:        err = mp_mod(t2, modulus, t2);",
          "2396:        err = mp_mul(t1, t2, t1);",
          "2398:        err = mp_mod(t1, modulus, t1);",
          "2402:        err = mp_mul(x, t2, x);",
          "2406:        err = mp_mul(y, t1, y);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2163: #endif",
          "2169:    return err;",
          "2170: #else",
          "",
          "[Removed Lines]",
          "2166:    mp_clear(&t1);",
          "2167:    mp_clear(&t2);",
          "",
          "[Added Lines]",
          "2426:    mp_clear(t1);",
          "2427:    mp_clear(t2);",
          "2429: #ifdef WOLFSSL_SMALL_STACK",
          "2430: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2431:    if (P->key == NULL)",
          "2432: #endif",
          "2433:    {",
          "2434:    #ifdef ALT_ECC_SIZE",
          "2435:       XFREE(rz, NULL, DYNAMIC_TYPE_ECC);",
          "2436:       XFREE(ry, NULL, DYNAMIC_TYPE_ECC);",
          "2437:       XFREE(rx, NULL, DYNAMIC_TYPE_ECC);",
          "2438:    #endif",
          "2439:       XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "2440:       XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "2441:    }",
          "2442: #endif",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2216:    ecc_point     *tG, *M[M_POINTS];",
          "2217:    int           i, err;",
          "2219:    mp_digit      mp;",
          "2220:    mp_digit      buf;",
          "2221:    int           bitcnt = 0, mode = 0, digidx = 0;",
          "",
          "[Removed Lines]",
          "2218:    mp_int        mu;",
          "",
          "[Added Lines]",
          "2493: #ifdef WOLFSSL_SMALL_STACK",
          "2494:    mp_int*       mu = NULL;",
          "2495: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2496:    ecc_key       key;",
          "2497: #endif",
          "2498: #else",
          "2499:    mp_int        mu[1];",
          "2500: #endif",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2228:    tG = NULL;",
          "2229:    XMEMSET(M, 0, sizeof(M));",
          "2232:    if ((err = mp_montgomery_setup(modulus, &mp)) != MP_OKAY) {",
          "2233:        return err;",
          "2234:    }",
          "2237:        return err;",
          "2238:    }",
          "2241:        return err;",
          "2242:    }",
          "",
          "[Removed Lines]",
          "2236:    if ((err = mp_init(&mu)) != MP_OKAY) {",
          "2239:    if ((err = mp_montgomery_calc_normalization(&mu, modulus)) != MP_OKAY) {",
          "2240:        mp_clear(&mu);",
          "",
          "[Added Lines]",
          "2512: #ifdef WOLFSSL_SMALL_STACK",
          "2513:    mu = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);",
          "2514:    if (mu == NULL)",
          "2515:        return MEMORY_E;",
          "2516: #endif",
          "2517: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2518:    key.t1 = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);",
          "2519:    key.t2 = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);",
          "2520: #ifdef ALT_ECC_SIZE",
          "2521:    key.x = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);",
          "2522:    key.y = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);",
          "2523:    key.z = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);",
          "2524: #endif",
          "2525:    if (key.t1 == NULL || key.t2 == NULL",
          "2526: #ifdef ALT_ECC_SIZE",
          "2527:       || key.x == NULL || key.y == NULL || key.z == NULL",
          "2528: #endif",
          "2529:    ) {",
          "2530: #ifdef ALT_ECC_SIZE",
          "2531:        XFREE(key.z, heap, DYNAMIC_TYPE_ECC);",
          "2532:        XFREE(key.y, heap, DYNAMIC_TYPE_ECC);",
          "2533:        XFREE(key.x, heap, DYNAMIC_TYPE_ECC);",
          "2534: #endif",
          "2535:        XFREE(key.t2, heap, DYNAMIC_TYPE_ECC);",
          "2536:        XFREE(key.t1, heap, DYNAMIC_TYPE_ECC);",
          "2537:        XFREE(mu, heap, DYNAMIC_TYPE_ECC);",
          "2538:        return MEMORY_E;",
          "2539:    }",
          "2544: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2545: #ifdef ALT_ECC_SIZE",
          "2546:        XFREE(key.z, heap, DYNAMIC_TYPE_ECC);",
          "2547:        XFREE(key.y, heap, DYNAMIC_TYPE_ECC);",
          "2548:        XFREE(key.x, heap, DYNAMIC_TYPE_ECC);",
          "2549: #endif",
          "2550:        XFREE(key.t2, heap, DYNAMIC_TYPE_ECC);",
          "2551:        XFREE(key.t1, heap, DYNAMIC_TYPE_ECC);",
          "2553: #ifdef WOLFSSL_SMALL_STACK",
          "2554:        XFREE(mu, heap, DYNAMIC_TYPE_ECC);",
          "2555: #endif",
          "2559:    if ((err = mp_init(mu)) != MP_OKAY) {",
          "2560: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2561: #ifdef ALT_ECC_SIZE",
          "2562:        XFREE(key.z, heap, DYNAMIC_TYPE_ECC);",
          "2563:        XFREE(key.y, heap, DYNAMIC_TYPE_ECC);",
          "2564:        XFREE(key.x, heap, DYNAMIC_TYPE_ECC);",
          "2565: #endif",
          "2566:        XFREE(key.t2, heap, DYNAMIC_TYPE_ECC);",
          "2567:        XFREE(key.t1, heap, DYNAMIC_TYPE_ECC);",
          "2569: #ifdef WOLFSSL_SMALL_STACK",
          "2570:        XFREE(mu, heap, DYNAMIC_TYPE_ECC);",
          "2571: #endif",
          "2574:    if ((err = mp_montgomery_calc_normalization(mu, modulus)) != MP_OKAY) {",
          "2575:        mp_clear(mu);",
          "2576: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2577: #ifdef ALT_ECC_SIZE",
          "2578:        XFREE(key.z, heap, DYNAMIC_TYPE_ECC);",
          "2579:        XFREE(key.y, heap, DYNAMIC_TYPE_ECC);",
          "2580:        XFREE(key.x, heap, DYNAMIC_TYPE_ECC);",
          "2581: #endif",
          "2582:        XFREE(key.t2, heap, DYNAMIC_TYPE_ECC);",
          "2583:        XFREE(key.t1, heap, DYNAMIC_TYPE_ECC);",
          "2585: #ifdef WOLFSSL_SMALL_STACK",
          "2586:        XFREE(mu, heap, DYNAMIC_TYPE_ECC);",
          "2587: #endif",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2245:   for (i = 0; i < M_POINTS; i++) {",
          "2246:       M[i] = wc_ecc_new_point_h(heap);",
          "2247:       if (M[i] == NULL) {",
          "2249:          err = MEMORY_E; goto exit;",
          "2250:       }",
          "2251:   }",
          "",
          "[Removed Lines]",
          "2248:          mp_clear(&mu);",
          "",
          "[Added Lines]",
          "2595:          mp_clear(mu);",
          "2598: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2599:       M[i]->key = &key;",
          "2600: #endif",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2259:    if (err == MP_OKAY) {",
          "2261:            err = mp_copy(G->x, tG->x);",
          "2262:            if (err == MP_OKAY)",
          "2263:                err = mp_copy(G->y, tG->y);",
          "2264:            if (err == MP_OKAY)",
          "2265:                err = mp_copy(G->z, tG->z);",
          "2266:        } else {",
          "2268:            if (err == MP_OKAY)",
          "2270:            if (err == MP_OKAY)",
          "2272:        }",
          "2273:    }",
          "2278: #ifndef ECC_TIMING_RESISTANT",
          "",
          "[Removed Lines]",
          "2260:        if (mp_cmp_d(&mu, 1) == MP_EQ) {",
          "2267:            err = mp_mulmod(G->x, &mu, modulus, tG->x);",
          "2269:                err = mp_mulmod(G->y, &mu, modulus, tG->y);",
          "2271:                err = mp_mulmod(G->z, &mu, modulus, tG->z);",
          "2276:    mp_clear(&mu);",
          "",
          "[Added Lines]",
          "2610:        if (mp_cmp_d(mu, 1) == MP_EQ) {",
          "2617:            err = mp_mulmod(G->x, mu, modulus, tG->x);",
          "2619:                err = mp_mulmod(G->y, mu, modulus, tG->y);",
          "2621:                err = mp_mulmod(G->z, mu, modulus, tG->z);",
          "2626:    mp_clear(mu);",
          "2628: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2629:    R->key = &key;",
          "2630: #endif",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2536:    for (i = 0; i < M_POINTS; i++) {",
          "2537:        wc_ecc_del_point_h(M[i], heap);",
          "2538:    }",
          "2540:    return err;",
          "2541: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2892: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "2893:    R->key = NULL;",
          "2894: #ifdef ALT_ECC_SIZE",
          "2895:    XFREE(key.z, heap, DYNAMIC_TYPE_ECC);",
          "2896:    XFREE(key.y, heap, DYNAMIC_TYPE_ECC);",
          "2897:    XFREE(key.x, heap, DYNAMIC_TYPE_ECC);",
          "2898: #endif",
          "2899:    XFREE(key.t2, heap, DYNAMIC_TYPE_ECC);",
          "2900:    XFREE(key.t1, heap, DYNAMIC_TYPE_ECC);",
          "2902: #ifdef WOLFSSL_SMALL_STACK",
          "2903:    XFREE(mu, heap, DYNAMIC_TYPE_ECC);",
          "2904: #endif",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2820:                             const byte* param, word32 paramSz)",
          "2821: {",
          "2822:     int err = MP_OKAY;",
          "2825:     if (param == NULL || curveParam == NULL)",
          "2826:         return BAD_FUNC_ARG;",
          "2829:         return err;",
          "2831:     if (err == MP_OKAY)",
          "2834:     if (err == MP_OKAY)",
          "2837:     if (err == MP_OKAY) {",
          "2839:             err = -1;",
          "2840:         } else {",
          "2841:             err = MP_EQ;",
          "2842:         }",
          "2843:     }",
          "2848:     return err;",
          "2849: }",
          "",
          "[Removed Lines]",
          "2823:     mp_int a, b;",
          "2828:     if ((err = mp_init_multi(&a, &b, NULL, NULL, NULL, NULL)) != MP_OKAY)",
          "2832:         err = mp_read_unsigned_bin(&a, param, paramSz);",
          "2835:         err = mp_read_radix(&b, curveParam, MP_RADIX_HEX);",
          "2838:         if (mp_cmp(&a, &b) != MP_EQ) {",
          "2845:     mp_clear(&a);",
          "2846:     mp_clear(&b);",
          "",
          "[Added Lines]",
          "3189: #ifdef WOLFSSL_SMALL_STACK",
          "3190:     mp_int* a = NULL;",
          "3191:     mp_int* b = NULL;",
          "3192: #else",
          "3193:     mp_int  a[1], b[1];",
          "3194: #endif",
          "3199: #ifdef WOLFSSL_SMALL_STACK",
          "3200:     a = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "3201:     if (a == NULL)",
          "3202:         return MEMORY_E;",
          "3203:     b = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "3204:     if (b == NULL) {",
          "3205:         XFREE(a, NULL, DYNAMIC_TYPE_ECC);",
          "3206:         return MEMORY_E;",
          "3207:     }",
          "3208: #endif",
          "3210:     if ((err = mp_init_multi(a, b, NULL, NULL, NULL, NULL)) != MP_OKAY)",
          "3214:         err = mp_read_unsigned_bin(a, param, paramSz);",
          "3217:         err = mp_read_radix(b, curveParam, MP_RADIX_HEX);",
          "3220:         if (mp_cmp(a, b) != MP_EQ) {",
          "3227:     mp_clear(a);",
          "3228:     mp_clear(b);",
          "3229: #ifdef WOLFSSL_SMALL_STACK",
          "3230:     XFREE(b, NULL, DYNAMIC_TYPE_ECC);",
          "3231:     XFREE(a, NULL, DYNAMIC_TYPE_ECC);",
          "3232: #endif",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3160:                                                     byte* out, word32 *outlen)",
          "3161: {",
          "3162:     int err;",
          "3165:     if (private_key == NULL || point == NULL || out == NULL ||",
          "3166:                                                             outlen == NULL) {",
          "3167:         return BAD_FUNC_ARG;",
          "3168:     }",
          "3171:     err = wc_ecc_curve_load(private_key->dp, &curve,",
          "3172:         (ECC_CURVE_FIELD_PRIME | ECC_CURVE_FIELD_AF));",
          "3174:         return err;",
          "3176: #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_ECC)",
          "3177:     if (private_key->asyncDev.marker == WOLFSSL_ASYNC_MARKER_ECC) {",
          "",
          "[Removed Lines]",
          "3163:     DECLARE_CURVE_SPECS(2)",
          "3173:     if (err != MP_OKAY)",
          "",
          "[Added Lines]",
          "3549:     DECLARE_CURVE_SPECS(curve, 2);",
          "3556:     ALLOC_CURVE_SPECS(2);",
          "3561:     if (err != MP_OKAY) {",
          "3562:         FREE_CURVE_SPECS();",
          "3564:     }",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3186:     }",
          "3188:     wc_ecc_curve_free(curve);",
          "3190:     return err;",
          "3191: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3579:     FREE_CURVE_SPECS();",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3350:     ecc_point* base = NULL;",
          "3351: #endif",
          "3352:     ecc_point* pub;",
          "3354: #endif",
          "3356:     if (key == NULL) {",
          "",
          "[Removed Lines]",
          "3353:     DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT)",
          "",
          "[Added Lines]",
          "3744:     DECLARE_CURVE_SPECS(curve, ECC_CURVE_FIELD_COUNT);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3374:         curve = curveIn;",
          "3375:     }",
          "3376:     else {",
          "3378:         if (err == MP_OKAY)",
          "3379:             err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3769:         ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3449:     if (curveIn == NULL) {",
          "3450:         wc_ecc_curve_free(curve);",
          "3451:     }",
          "3453: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3845:     #ifndef WOLFSSL_ATECC508A",
          "3846:         FREE_CURVE_SPECS();",
          "3847:     #endif",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3484: {",
          "3485:     int            err;",
          "3486: #ifndef WOLFSSL_ATECC508A",
          "3488: #endif",
          "3490:     if (key == NULL || rng == NULL) {",
          "",
          "[Removed Lines]",
          "3487:     DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT)",
          "",
          "[Added Lines]",
          "3884: #ifndef WOLFSSL_SP_MATH",
          "3885:     DECLARE_CURVE_SPECS(curve, ECC_CURVE_FIELD_COUNT);",
          "3886: #endif",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3548:         err = WC_KEY_SIZE_E;",
          "3549: #else",
          "3550:     {",
          "3552:         err = mp_init(&key->k);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3950:         ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3576:         wc_ecc_curve_free(curve);",
          "3577:     }",
          "3578: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3978:     #ifndef WOLFSSL_ATECC508A",
          "3979:         FREE_CURVE_SPECS();",
          "3980:     #endif",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3806: {",
          "3807:     int err;",
          "3808:     mp_int *r = NULL, *s = NULL;",
          "3810:     mp_int r_lcl, s_lcl;",
          "3811: #endif",
          "",
          "[Removed Lines]",
          "3809: #ifndef WOLFSSL_ASYNC_CRYPT",
          "",
          "[Added Lines]",
          "4213: #if !defined(WOLFSSL_ASYNC_CRYPT) && !defined(WOLFSSL_SMALL_STACK)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3829:         return err;",
          "3830:     r = key->r;",
          "3831:     s = key->s;",
          "3833:     r = &r_lcl;",
          "3834:     s = &s_lcl;",
          "3835: #endif",
          "3837:     switch(key->state) {",
          "",
          "[Removed Lines]",
          "3832: #else",
          "",
          "[Added Lines]",
          "4236: #elif !defined(WOLFSSL_SMALL_STACK)",
          "4239: #else",
          "4240:     r = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);",
          "4241:     if (r == NULL)",
          "4242:         return MEMORY_E;",
          "4243:     s = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);",
          "4244:     if (s == NULL) {",
          "4245:         XFREE(r, key->heap, DYNAMIC_TYPE_ECC);",
          "4246:         return MEMORY_E;",
          "4247:     }",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3879:             mp_clear(r);",
          "3880:             mp_clear(s);",
          "3881:             break;",
          "3883:         default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4294:         #if !defined(WOLFSSL_ASYNC_CRYPT) && defined(WOLFSSL_SMALL_STACK)",
          "4295:             XFREE(s, key->heap, DYNAMIC_TYPE_ECC);",
          "4296:             XFREE(r, key->heap, DYNAMIC_TYPE_ECC);",
          "4297:         #endif",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3917:    int    err;",
          "3918: #ifndef WOLFSSL_SP_MATH",
          "3919:    mp_int* e;",
          "3921:    mp_int  e_lcl;",
          "3922: #endif",
          "3927:    if (in == NULL || r == NULL || s == NULL || key == NULL || rng == NULL)",
          "3928:        return ECC_BAD_ARG_E;",
          "",
          "[Removed Lines]",
          "3920: #if !defined(WOLFSSL_ASYNC_CRYPT) || !defined(HAVE_CAVIUM_V)",
          "3925:    DECLARE_CURVE_SPECS(1)",
          "",
          "[Added Lines]",
          "4337: #if (!defined(WOLFSSL_ASYNC_CRYPT) || !defined(HAVE_CAVIUM_V)) && \\",
          "4338:                                                    !defined(WOLFSSL_SMALL_STACK)",
          "4341:    DECLARE_CURVE_SPECS(curve, 1);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3973:     }",
          "3974: #endif",
          "3976: #if defined(WOLFSSL_ASYNC_CRYPT) && defined(HAVE_CAVIUM_V)",
          "3977:    err = wc_ecc_alloc_mpint(key, &key->e);",
          "3979:       return err;",
          "3980:    e = key->e;",
          "3982:    e = &e_lcl;",
          "3983: #endif",
          "3987:    if ((err = mp_init(e)) != MP_OKAY) {",
          "3988:       return err;",
          "3989:    }",
          "",
          "[Removed Lines]",
          "3978:    if (err != 0)",
          "3981: #else",
          "",
          "[Added Lines]",
          "4393:    ALLOC_CURVE_SPECS(1);",
          "4397:    if (err != 0) {",
          "4398:       FREE_CURVE_SPECS();",
          "4400:    }",
          "4402: #elif !defined(WOLFSSL_SMALL_STACK)",
          "4404: #else",
          "4405:    e = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);",
          "4406:    if (e == NULL) {",
          "4407:       FREE_CURVE_SPECS();",
          "4408:       return MEMORY_E;",
          "4409:    }",
          "4415:    #ifdef WOLFSSL_SMALL_STACK",
          "4416:       XFREE(e, key->heap, DYNAMIC_TYPE_ECC);",
          "4417:    #endif",
          "4418:       FREE_CURVE_SPECS();",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "4010:    if (err == MP_OKAY) {",
          "4014:    #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_ECC)",
          "4015:         if (key->asyncDev.marker == WOLFSSL_ASYNC_MARKER_ECC) {",
          "",
          "[Removed Lines]",
          "4011:        int loop_check = 0;",
          "4012:        ecc_key pubkey;",
          "",
          "[Added Lines]",
          "4442:        int      loop_check = 0;",
          "4443:    #ifdef WOLFSSL_SMALL_STACK",
          "4444:        ecc_key* pubkey = NULL;",
          "4445:    #else",
          "4446:        ecc_key  pubkey[1];",
          "4447:    #endif",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "4077:                mp_clear(k);",
          "4078:            #endif",
          "4079:                wc_ecc_curve_free(curve);",
          "4081:                return err;",
          "4082:            }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4515:                FREE_CURVE_SPECS();",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "4084:        }",
          "4091:            if (err == MP_OKAY) {",
          "4093:            }",
          "4095:        #ifdef WOLFSSL_CUSTOM_CURVES",
          "4097:            if (err == MP_OKAY && key->idx == ECC_CUSTOM_IDX) {",
          "4099:            }",
          "4100:        #endif",
          "",
          "[Removed Lines]",
          "4088:        if ((err = wc_ecc_init_ex(&pubkey, key->heap, INVALID_DEVID)) == MP_OKAY) {",
          "4089:            mp_int b;",
          "4092:                err = mp_init(&b);",
          "4098:                err = wc_ecc_set_custom_curve(&pubkey, key->dp);",
          "",
          "[Added Lines]",
          "4523:    #ifdef WOLFSSL_SMALL_STACK",
          "4524:        pubkey = (ecc_key*)XMALLOC(sizeof(ecc_key), key->heap, DYNAMIC_TYPE_ECC);",
          "4525:        if (pubkey == NULL)",
          "4526:            err = MEMORY_E;",
          "4527:    #endif",
          "4530:        if (err == MP_OKAY && (err = wc_ecc_init_ex(pubkey, key->heap,",
          "4531:                                                    INVALID_DEVID)) == MP_OKAY) {",
          "4532:        #ifdef WOLFSSL_SMALL_STACK",
          "4533:            mp_int* b = NULL;",
          "4534:        #else",
          "4535:            mp_int  b[1];",
          "4536:        #endif",
          "4538:        #ifdef WOLFSSL_SMALL_STACK",
          "4539:            if (err == MP_OKAY) {",
          "4540:                b = (mp_int*)XMALLOC(sizeof(mp_int), key->heap,",
          "4541:                                                               DYNAMIC_TYPE_ECC);",
          "4542:                if (b == NULL)",
          "4543:                    err = MEMORY_E;",
          "4544:            }",
          "4545:        #endif",
          "4548:                err = mp_init(b);",
          "4554:                err = wc_ecc_set_custom_curve(pubkey, key->dp);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "4107:                         break;",
          "4108:                    }",
          "4111:                }",
          "4112:                while (err == MP_ZERO_E);",
          "4113:                loop_check = 0;",
          "",
          "[Removed Lines]",
          "4110:                    err = wc_ecc_gen_k(rng, key->dp->size, &b, curve->order);",
          "",
          "[Added Lines]",
          "4566:                    err = wc_ecc_gen_k(rng, key->dp->size, b, curve->order);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "4118:                     err = RNG_FAILURE_E;",
          "4119:                     break;",
          "4120:                }",
          "4122:                                                                    key->dp->id);",
          "4123:                if (err != MP_OKAY) break;",
          "4127:                if (err != MP_OKAY) break;",
          "4129:                if (mp_iszero(r) == MP_YES) {",
          "4130:                 #ifndef ALT_ECC_SIZE",
          "4134:                 #endif",
          "4136:                }",
          "4137:                else {",
          "4143:                    if (err != MP_OKAY) break;",
          "4147:                    if (err != MP_OKAY) break;",
          "",
          "[Removed Lines]",
          "4121:                err = wc_ecc_make_key_ex(rng, key->dp->size, &pubkey,",
          "4126:                err = mp_mod(pubkey.pubkey.x, curve->order, r);",
          "4131:                    mp_clear(pubkey.pubkey.x);",
          "4132:                    mp_clear(pubkey.pubkey.y);",
          "4133:                    mp_clear(pubkey.pubkey.z);",
          "4135:                    mp_forcezero(&pubkey.k);",
          "4142:                    err = mp_mulmod(&pubkey.k, &b, curve->order, &pubkey.k);",
          "4146:                    err = mp_invmod(&pubkey.k, curve->order, &pubkey.k);",
          "",
          "[Added Lines]",
          "4577:                err = wc_ecc_make_key_ex(rng, key->dp->size, pubkey,",
          "4582:                err = mp_mod(pubkey->pubkey.x, curve->order, r);",
          "4587:                    mp_clear(pubkey->pubkey.x);",
          "4588:                    mp_clear(pubkey->pubkey.y);",
          "4589:                    mp_clear(pubkey->pubkey.z);",
          "4591:                    mp_forcezero(&pubkey->k);",
          "4598:                    err = mp_mulmod(&pubkey->k, b, curve->order, &pubkey->k);",
          "4602:                    err = mp_invmod(&pubkey->k, curve->order, &pubkey->k);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "4151:                    if (err != MP_OKAY) break;",
          "4155:                    if (err != MP_OKAY) break;",
          "4159:                    if (err != MP_OKAY) break;",
          "",
          "[Removed Lines]",
          "4154:                    err = mp_mulmod(&pubkey.k, s, curve->order, s);",
          "4158:                    err = mp_mulmod(&pubkey.k, e, curve->order, e);",
          "",
          "[Added Lines]",
          "4610:                    err = mp_mulmod(&pubkey->k, s, curve->order, s);",
          "4614:                    err = mp_mulmod(&pubkey->k, e, curve->order, e);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "4169:                    if (err != MP_OKAY) break;",
          "",
          "[Removed Lines]",
          "4168:                    err = mp_mulmod(s, &b, curve->order, s);",
          "",
          "[Added Lines]",
          "4624:                    err = mp_mulmod(s, b, curve->order, s);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "4176:                        break;",
          "4177:                 }",
          "4178:            }",
          "4182:        }",
          "4183:    }",
          "4185:    mp_clear(e);",
          "4186:    wc_ecc_curve_free(curve);",
          "4189:    return err;",
          "",
          "[Removed Lines]",
          "4179:            wc_ecc_free(&pubkey);",
          "4180:            mp_clear(&b);",
          "4181:            mp_free(&b);",
          "",
          "[Added Lines]",
          "4635:            mp_clear(b);",
          "4636:            mp_free(b);",
          "4637:        #ifdef WOLFSSL_SMALL_STACK",
          "4638:            XFREE(b, key->heap, DYNAMIC_TYPE_ECC);",
          "4639:        #endif",
          "4640:            wc_ecc_free(pubkey);",
          "4641:        #ifdef WOLFSSL_SMALL_STACK",
          "4642:            XFREE(pubkey, key->heap, DYNAMIC_TYPE_ECC);",
          "4643:        #endif",
          "4649: #ifdef WOLFSSL_SMALL_STACK",
          "4650:    XFREE(e, key->heap, DYNAMIC_TYPE_ECC);",
          "4651: #endif",
          "4652:    FREE_CURVE_SPECS();",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "4275:                     void* heap)",
          "4276: #endif",
          "4277: {",
          "4279:   unsigned       bitbufA, bitbufB, lenA, lenB, len, nA, nB, nibble;",
          "4280:   unsigned char* tA;",
          "4281:   unsigned char* tB;",
          "4282:   int            err = MP_OKAY, first, x, y;",
          "4286:   if (A == NULL || kA == NULL || B == NULL || kB == NULL || C == NULL ||",
          "",
          "[Removed Lines]",
          "4278:   ecc_point*     precomp[16];",
          "4283:   mp_digit mp = 0;",
          "",
          "[Added Lines]",
          "4744: #ifdef WOLFSSL_SMALL_STACK",
          "4745:   ecc_point**    precomp = NULL;",
          "4746: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "4747:   ecc_key        key;",
          "4748: #endif",
          "4749: #else",
          "4750:   ecc_point*     precomp[SHAMIR_PRECOMP_SZ];",
          "4751: #endif",
          "4756:   mp_digit       mp = 0;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "4298:      XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);",
          "4299:      return GEN_MEM_ERR;",
          "4300:   }",
          "4303:   XMEMSET(tA, 0, ECC_BUFSIZE);",
          "4304:   XMEMSET(tB, 0, ECC_BUFSIZE);",
          "4305:   XMEMSET(precomp, 0, sizeof(precomp));",
          "4308:   lenA = mp_unsigned_bin_size(kA);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4774: #ifdef WOLFSSL_SMALL_STACK",
          "4775:   precomp = (ecc_point**)XMALLOC(sizeof(ecc_point*) * SHAMIR_PRECOMP_SZ, heap,",
          "4776:                                                        DYNAMIC_TYPE_ECC_BUFFER);",
          "4777:   if (precomp == NULL) {",
          "4778:      XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);",
          "4779:      XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);",
          "4780:      return GEN_MEM_ERR;",
          "4781:   }",
          "4782: #endif",
          "4783: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "4784:   key.t1 = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);",
          "4785:   key.t2 = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);",
          "4786: #ifdef ALT_ECC_SIZE",
          "4787:   key.x = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);",
          "4788:   key.y = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);",
          "4789:   key.z = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);",
          "4790: #endif",
          "4791:   if (key.t1 == NULL || key.t2 == NULL",
          "4792: #ifdef ALT_ECC_SIZE",
          "4793:      || key.x == NULL || key.y == NULL || key.z == NULL",
          "4794: #endif",
          "4795:   ) {",
          "4796: #ifdef ALT_ECC_SIZE",
          "4797:       XFREE(key.z, heap, DYNAMIC_TYPE_ECC);",
          "4798:       XFREE(key.y, heap, DYNAMIC_TYPE_ECC);",
          "4799:       XFREE(key.x, heap, DYNAMIC_TYPE_ECC);",
          "4800: #endif",
          "4801:       XFREE(key.t2, heap, DYNAMIC_TYPE_ECC);",
          "4802:       XFREE(key.t1, heap, DYNAMIC_TYPE_ECC);",
          "4803:       XFREE(precomp, heap, DYNAMIC_TYPE_ECC_BUFFER);",
          "4804:       XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);",
          "4805:       XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);",
          "4806:       return MEMORY_E;",
          "4807:   }",
          "4808:   C->key = &key;",
          "4814: #ifndef WOLFSSL_SMALL_STACK",
          "4816: #else",
          "4817:   XMEMSET(precomp, 0, sizeof(ecc_point*) * SHAMIR_PRECOMP_SZ);",
          "4818: #endif",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "4326:     if (err == MP_OKAY) {",
          "4328:             precomp[x] = wc_ecc_new_point_h(heap);",
          "4329:             if (precomp[x] == NULL) {",
          "4330:                 err = GEN_MEM_ERR;",
          "4331:                 break;",
          "4332:             }",
          "4333:         }",
          "4334:     }",
          "4335:   }",
          "",
          "[Removed Lines]",
          "4327:         for (x = 0; x < 16; x++) {",
          "",
          "[Added Lines]",
          "4840:         for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {",
          "4846:         #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "4847:             precomp[x]->key = &key;",
          "4848:         #endif",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "4339:     err = mp_montgomery_setup(modulus, &mp);",
          "4341:   if (err == MP_OKAY) {",
          "4344:     if (err == MP_OKAY) {",
          "4347:       if (err == MP_OKAY)",
          "4351:       if (err == MP_OKAY)",
          "4353:       if (err == MP_OKAY)",
          "4356:       if (err == MP_OKAY)",
          "4358:       if (err == MP_OKAY)",
          "4360:       if (err == MP_OKAY)",
          "4365:     }",
          "4366:   }",
          "",
          "[Removed Lines]",
          "4342:     mp_int mu;",
          "4343:     err = mp_init(&mu);",
          "4345:       err = mp_montgomery_calc_normalization(&mu, modulus);",
          "4349:         err = mp_mulmod(A->x, &mu, modulus, precomp[1]->x);",
          "4352:         err = mp_mulmod(A->y, &mu, modulus, precomp[1]->y);",
          "4354:         err = mp_mulmod(A->z, &mu, modulus, precomp[1]->z);",
          "4357:         err = mp_mulmod(B->x, &mu, modulus, precomp[1<<2]->x);",
          "4359:         err = mp_mulmod(B->y, &mu, modulus, precomp[1<<2]->y);",
          "4361:         err = mp_mulmod(B->z, &mu, modulus, precomp[1<<2]->z);",
          "4364:       mp_clear(&mu);",
          "",
          "[Added Lines]",
          "4858:   #ifdef WOLFSSL_SMALL_STACK",
          "4859:     mp_int* mu = NULL;",
          "4860:   #else",
          "4861:     mp_int  mu[1];",
          "4862:   #endif",
          "4863:   #ifdef WOLFSSL_SMALL_STACK",
          "4864:     mu = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);",
          "4865:     if (mu == NULL)",
          "4866:         err = MEMORY_E;",
          "4867:   #endif",
          "4868:     if (err == MP_OKAY) {",
          "4869:         err = mp_init(mu);",
          "4870:     }",
          "4872:       err = mp_montgomery_calc_normalization(mu, modulus);",
          "4876:         err = mp_mulmod(A->x, mu, modulus, precomp[1]->x);",
          "4879:         err = mp_mulmod(A->y, mu, modulus, precomp[1]->y);",
          "4881:         err = mp_mulmod(A->z, mu, modulus, precomp[1]->z);",
          "4884:         err = mp_mulmod(B->x, mu, modulus, precomp[1<<2]->x);",
          "4886:         err = mp_mulmod(B->y, mu, modulus, precomp[1<<2]->y);",
          "4888:         err = mp_mulmod(B->z, mu, modulus, precomp[1<<2]->z);",
          "4891:       mp_clear(mu);",
          "4892:   #ifdef WOLFSSL_SMALL_STACK",
          "4893:       XFREE(mu, heap, DYNAMIC_TYPE_ECC);",
          "4894:   #endif",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "4383:   if (err == MP_OKAY) {",
          "4385:     for (x = 1; x < 4; x++) {",
          "4390:         }",
          "4391:     }",
          "4392:   }",
          "",
          "[Removed Lines]",
          "4386:         for (y = 1; y < 4; y++) {",
          "4387:             if (err == MP_OKAY)",
          "4388:                 err = ecc_projective_add_point(precomp[x], precomp[(y<<2)],",
          "4389:                                                precomp[x+(y<<2)], a, modulus, mp);",
          "",
          "[Added Lines]",
          "4916:       for (y = 1; y < 4; y++) {",
          "4917:         if (err == MP_OKAY) {",
          "4918:           err = ecc_projective_add_point(precomp[x], precomp[(y<<2)],",
          "4919:                                              precomp[x+(y<<2)], a, modulus, mp);",
          "4921:       }",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "4462:     err = ecc_map(C, modulus, mp);",
          "4466:      wc_ecc_del_point_h(precomp[x], heap);",
          "4467:   }",
          "4469:   ForceZero(tA, ECC_BUFSIZE);",
          "4470:   ForceZero(tB, ECC_BUFSIZE);",
          "4472:   XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);",
          "4474:   return err;",
          "4475: }",
          "",
          "[Removed Lines]",
          "4465:   for (x = 0; x < 16; x++) {",
          "4471:   XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);",
          "",
          "[Added Lines]",
          "4996:   for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {",
          "5002: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "5003: #ifdef ALT_ECC_SIZE",
          "5004:   XFREE(key.z, heap, DYNAMIC_TYPE_ECC);",
          "5005:   XFREE(key.y, heap, DYNAMIC_TYPE_ECC);",
          "5006:   XFREE(key.x, heap, DYNAMIC_TYPE_ECC);",
          "5007: #endif",
          "5008:   XFREE(key.t2, heap, DYNAMIC_TYPE_ECC);",
          "5009:   XFREE(key.t1, heap, DYNAMIC_TYPE_ECC);",
          "5010:   C->key = NULL;",
          "5011: #endif",
          "5012: #ifdef WOLFSSL_SMALL_STACK",
          "5013:   XFREE(precomp, heap, DYNAMIC_TYPE_ECC_BUFFER);",
          "5014: #endif",
          "5016:   XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "4506:     int err;",
          "4507:     mp_int *r = NULL, *s = NULL;",
          "4508: #ifndef WOLFSSL_ASYNC_CRYPT",
          "4510: #endif",
          "4512:     if (sig == NULL || hash == NULL || res == NULL || key == NULL) {",
          "",
          "[Removed Lines]",
          "4509:     mp_int r_lcl, s_lcl;",
          "",
          "[Added Lines]",
          "5053: #ifndef WOLFSSL_SMALL_STACK",
          "5054:     mp_int r_lcl[1], s_lcl[1];",
          "5055: #endif",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "4528:     r = key->r;",
          "4529:     s = key->s;",
          "4530: #else",
          "4533: #endif",
          "4535:     switch(key->state) {",
          "",
          "[Removed Lines]",
          "4531:     r = &r_lcl;",
          "4532:     s = &s_lcl;",
          "",
          "[Added Lines]",
          "5077: #ifndef WOLFSSL_SMALL_STACK",
          "5078:     r = r_lcl;",
          "5079:     s = s_lcl;",
          "5080: #else",
          "5081:     r = XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);",
          "5082:     if (r == NULL)",
          "5083:         return MEMORY_E;",
          "5084:     s = XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);",
          "5085:     if (s == NULL) {",
          "5086:         XFREE(r, key->heap, DYNAMIC_TYPE_ECC);",
          "5087:         return MEMORY_E;",
          "5088:     }",
          "5089: #endif",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "4561:             mp_clear(r);",
          "4562:             mp_clear(s);",
          "4563:         #endif",
          "4565:             if (err < 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5120:         #ifdef WOLFSSL_SMALL_STACK",
          "5121:             XFREE(s, key->heap, DYNAMIC_TYPE_ECC);",
          "5122:             XFREE(r, key->heap, DYNAMIC_TYPE_ECC);",
          "5123:         #endif",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "4612: #elif !defined(WOLFSSL_SP_MATH)",
          "4613:    int          did_init = 0;",
          "4614:    ecc_point    *mG = NULL, *mQ = NULL;",
          "4620: #if !defined(WOLFSSL_ASYNC_CRYPT) || !defined(HAVE_CAVIUM_V)",
          "4622: #endif",
          "4624: #endif",
          "4626:    if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)",
          "",
          "[Removed Lines]",
          "4615:    mp_int        v;",
          "4616:    mp_int        w;",
          "4617:    mp_int        u1;",
          "4618:    mp_int        u2;",
          "4619:    mp_int*       e;",
          "4621:    mp_int        e_lcl;",
          "4623:    DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT)",
          "",
          "[Added Lines]",
          "5176: #ifdef WOLFSSL_SMALL_STACK",
          "5177:    mp_int*       v = NULL;",
          "5178:    mp_int*       w = NULL;",
          "5179:    mp_int*       u1 = NULL;",
          "5180:    mp_int*       u2 = NULL;",
          "5182:    mp_int*       e_lcl = NULL;",
          "5185:    mp_int        v[1];",
          "5186:    mp_int        w[1];",
          "5187:    mp_int        u1[1];",
          "5188:    mp_int        u2[1];",
          "5189: #if !defined(WOLFSSL_ASYNC_CRYPT) || !defined(HAVE_CAVIUM_V)",
          "5190:    mp_int        e_lcl[1];",
          "5191: #endif",
          "5193:    mp_int*       e;",
          "5194:    DECLARE_CURVE_SPECS(curve, ECC_CURVE_FIELD_COUNT);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "4698:             return sp_ecc_verify_256(hash, hashlen, key->pubkey.x, key->pubkey.y,",
          "4699:                                      key->pubkey.z,r, s, res, key->heap);",
          "4700:     }",
          "4704: #if defined(WOLFSSL_ASYNC_CRYPT) && defined(HAVE_CAVIUM_V)",
          "4705:    err = wc_ecc_alloc_mpint(key, &key->e);",
          "4707:       return err;",
          "4708:    e = key->e;",
          "4709: #else",
          "4711: #endif",
          "4713:    err = mp_init(e);",
          "",
          "[Removed Lines]",
          "4701: #endif",
          "4702: #endif",
          "4706:    if (err != 0)",
          "4710:    e = &e_lcl;",
          "",
          "[Added Lines]",
          "5274:    ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);",
          "5278:    if (err != 0) {",
          "5279:       FREE_CURVE_SPECS();",
          "5281:    }",
          "5284: #ifdef WOLFSSL_SMALL_STACK",
          "5285:    e_lcl = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);",
          "5286:    if (e_lcl == NULL) {",
          "5287:        FREE_CURVE_SPECS();",
          "5288:        return MEMORY_E;",
          "5289:    }",
          "5290: #endif",
          "5291:    e = e_lcl;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "4772:           mp_clear(e);",
          "4773:       #endif",
          "4774:           wc_ecc_curve_free(curve);",
          "4776:           return err;",
          "4777:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5356:           FREE_CURVE_SPECS();",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "4779:    }",
          "4783:    if (err == MP_OKAY) {",
          "4785:           err = MEMORY_E;",
          "4786:        }",
          "4787:        did_init = 1;",
          "",
          "[Removed Lines]",
          "4784:        if ((err = mp_init_multi(&v, &w, &u1, &u2, NULL, NULL)) != MP_OKAY) {",
          "",
          "[Added Lines]",
          "5364: #ifdef WOLFSSL_SMALL_STACK",
          "5365:    if (err == MP_OKAY) {",
          "5366:        v = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);",
          "5367:        if (v == NULL)",
          "5368:            err = MEMORY_E;",
          "5369:    }",
          "5370:    if (err == MP_OKAY) {",
          "5371:        w = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);",
          "5372:        if (w == NULL)",
          "5373:            err = MEMORY_E;",
          "5374:    }",
          "5375:    if (err == MP_OKAY) {",
          "5376:        u1 = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);",
          "5377:        if (u1 == NULL)",
          "5378:            err = MEMORY_E;",
          "5379:    }",
          "5380:    if (err == MP_OKAY) {",
          "5381:        u2 = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);",
          "5382:        if (u2 == NULL)",
          "5383:            err = MEMORY_E;",
          "5384:    }",
          "5385: #endif",
          "5389:        if ((err = mp_init_multi(v, w, u1, u2, NULL, NULL)) != MP_OKAY) {",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "4799:    if (err == MP_OKAY)",
          "4803:    if (err == MP_OKAY)",
          "4807:    if (err == MP_OKAY)",
          "4811:    if (err == MP_OKAY)",
          "",
          "[Removed Lines]",
          "4800:        err = mp_invmod(s, curve->order, &w);",
          "4804:        err = mp_mulmod(e, &w, curve->order, &u1);",
          "4808:        err = mp_mulmod(r, &w, curve->order, &u2);",
          "",
          "[Added Lines]",
          "5405:        err = mp_invmod(s, curve->order, w);",
          "5409:        err = mp_mulmod(e, w, curve->order, u1);",
          "5413:        err = mp_mulmod(r, w, curve->order, u2);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "4825: #ifdef FREESCALE_LTC_ECC",
          "4827:    if (err == MP_OKAY)",
          "4829:    if (err == MP_OKAY)",
          "4831:    if (err == MP_OKAY)",
          "4832:        err = wc_ecc_point_add(mG, mQ, mG, curve->prime);",
          "4833: #else",
          "",
          "[Removed Lines]",
          "4828:        err = wc_ecc_mulmod_ex(&u1, mG, mG, curve->Af, curve->prime, 0, key->heap);",
          "4830:        err = wc_ecc_mulmod_ex(&u2, mQ, mQ, curve->Af, curve->prime, 0, key->heap);",
          "",
          "[Added Lines]",
          "5433:        err = wc_ecc_mulmod_ex(u1, mG, mG, curve->Af, curve->prime, 0, key->heap);",
          "5435:        err = wc_ecc_mulmod_ex(u2, mQ, mQ, curve->Af, curve->prime, 0, key->heap);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "4839:         if (err == MP_OKAY) {",
          "4841:                                                                      key->heap);",
          "4842:         }",
          "4843:         if (err == MP_OKAY) {",
          "4845:                                                                      key->heap);",
          "4846:         }",
          "",
          "[Removed Lines]",
          "4840:             err = wc_ecc_mulmod_ex(&u1, mG, mG, curve->Af, curve->prime, 0,",
          "4844:             err = wc_ecc_mulmod_ex(&u2, mQ, mQ, curve->Af, curve->prime, 0,",
          "",
          "[Added Lines]",
          "5445:             err = wc_ecc_mulmod_ex(u1, mG, mG, curve->Af, curve->prime, 0,",
          "5449:             err = wc_ecc_mulmod_ex(u2, mQ, mQ, curve->Af, curve->prime, 0,",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "4861: #else",
          "4863:         if (err == MP_OKAY) {",
          "4865:                                                                     key->heap);",
          "4866:         }",
          "4870:    if (err == MP_OKAY)",
          "4874:    if (err == MP_OKAY) {",
          "4877:    }",
          "",
          "[Removed Lines]",
          "4864:             err = ecc_mul2add(mG, &u1, mQ, &u2, mG, curve->Af, curve->prime,",
          "4871:        err = mp_mod(mG->x, curve->order, &v);",
          "4875:        if (mp_cmp(&v, r) == MP_EQ)",
          "",
          "[Added Lines]",
          "5469:             err = ecc_mul2add(mG, u1, mQ, u2, mG, curve->Af, curve->prime,",
          "5476:        err = mp_mod(mG->x, curve->order, v);",
          "5480:        if (mp_cmp(v, r) == MP_EQ)",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "4883:    mp_clear(e);",
          "4884:    if (did_init) {",
          "4889:    }",
          "4891:    wc_ecc_curve_free(curve);",
          "",
          "[Removed Lines]",
          "4885:        mp_clear(&v);",
          "4886:        mp_clear(&w);",
          "4887:        mp_clear(&u1);",
          "4888:        mp_clear(&u2);",
          "",
          "[Added Lines]",
          "5490:        mp_clear(v);",
          "5491:        mp_clear(w);",
          "5492:        mp_clear(u1);",
          "5493:        mp_clear(u2);",
          "5495: #ifdef WOLFSSL_SMALL_STACK",
          "5496:    XFREE(u2, key->heap, DYNAMIC_TYPE_ECC);",
          "5497:    XFREE(u1, key->heap, DYNAMIC_TYPE_ECC);",
          "5498:    XFREE(w, key->heap, DYNAMIC_TYPE_ECC);",
          "5499:    XFREE(v, key->heap, DYNAMIC_TYPE_ECC);",
          "5500: #if !defined(WOLFSSL_ASYNC_CRYPT) || !defined(HAVE_CAVIUM_V)",
          "5501:    XFREE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);",
          "5502: #endif",
          "5503: #endif",
          "5506:    FREE_CURVE_SPECS();",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "4967: #ifndef WOLFSSL_SP_MATH",
          "4968:         int did_init = 0;",
          "4969:         mp_int t1, t2;",
          "4972:         if (mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL) != MP_OKAY)",
          "4973:             err = MEMORY_E;",
          "",
          "[Removed Lines]",
          "4970:         DECLARE_CURVE_SPECS(3)",
          "",
          "[Added Lines]",
          "5585:         DECLARE_CURVE_SPECS(curve, 3);",
          "5587:         ALLOC_CURVE_SPECS(3);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "5017:         }",
          "5019:         wc_ecc_curve_free(curve);",
          "5020: #else",
          "5021:         sp_ecc_uncompress_256(point->x, pointType, point->y);",
          "5022: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5637:         FREE_CURVE_SPECS();",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "5226: {",
          "5227: #ifndef WOLFSSL_SP_MATH",
          "5228:    int err;",
          "5232:       return err;",
          "5233:    }",
          "5236:    if (err == MP_OKAY)",
          "5240:    if (err == MP_OKAY)",
          "5242:    if (err == MP_OKAY)",
          "5244:    if (err == MP_OKAY)",
          "5248:    if (err == MP_OKAY)",
          "5252: #ifdef WOLFSSL_CUSTOM_CURVES",
          "5253:    if (err == MP_OKAY) {",
          "5256:       if (err == MP_OKAY)",
          "5258:    }",
          "5261:       if (err == MP_OKAY)",
          "5263:       if (err == MP_OKAY)",
          "5265:    }",
          "5266:    else",
          "",
          "[Removed Lines]",
          "5229:    mp_int t1, t2;",
          "5231:    if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {",
          "5237:        err = mp_sqr(ecp->y, &t1);",
          "5241:        err = mp_sqr(ecp->x, &t2);",
          "5243:        err = mp_mod(&t2, prime, &t2);",
          "5245:        err = mp_mul(ecp->x, &t2, &t2);",
          "5249:        err = mp_sub(&t1, &t2, &t1);",
          "5255:       err = mp_set(&t2, 0);",
          "5257:           err = mp_submod(prime, a, prime, &t2);",
          "5259:    if (err == MP_OKAY && mp_cmp_d(&t2, 3) != MP_EQ) {",
          "5262:           err = mp_mulmod(&t2, ecp->x, prime, &t2);",
          "5264:           err = mp_addmod(&t1, &t2, prime, &t1);",
          "",
          "[Added Lines]",
          "5847: #ifdef WOLFSSL_SMALL_STACK",
          "5848:    mp_int* t1 = NULL;",
          "5849:    mp_int* t2 = NULL;",
          "5850: #else",
          "5851:    mp_int  t1[1], t2[1];",
          "5852: #endif",
          "5854: #ifdef WOLFSSL_SMALL_STACK",
          "5855:    t1 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "5856:    if (t1 == NULL)",
          "5857:        return MEMORY_E;",
          "5858:    t2 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "5859:    if (t2 == NULL) {",
          "5860:        XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "5861:        return MEMORY_E;",
          "5862:    }",
          "5863: #endif",
          "5865:    if ((err = mp_init_multi(t1, t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {",
          "5866:    #ifdef WOLFSSL_SMALL_STACK",
          "5867:       XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "5868:       XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "5869:    #endif",
          "5875:        err = mp_sqr(ecp->y, t1);",
          "5879:        err = mp_sqr(ecp->x, t2);",
          "5881:        err = mp_mod(t2, prime, t2);",
          "5883:        err = mp_mul(ecp->x, t2, t2);",
          "5887:        err = mp_sub(t1, t2, t1);",
          "5893:       err = mp_set(t2, 0);",
          "5895:           err = mp_submod(prime, a, prime, t2);",
          "5897:    if (err == MP_OKAY && mp_cmp_d(t2, 3) != MP_EQ) {",
          "5900:           err = mp_mulmod(t2, ecp->x, prime, t2);",
          "5902:           err = mp_addmod(t1, t2, prime, t1);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "5273:       if (err == MP_OKAY)",
          "5275:       if (err == MP_OKAY)",
          "5277:       if (err == MP_OKAY)",
          "5279:       if (err == MP_OKAY)",
          "5281:   }",
          "5286:    }",
          "5289:    }",
          "5292:    if (err == MP_OKAY) {",
          "5294:           err = MP_VAL;",
          "5295:        } else {",
          "5296:           err = MP_OKAY;",
          "5297:        }",
          "5298:    }",
          "5303:    return err;",
          "5304: #else",
          "",
          "[Removed Lines]",
          "5274:           err = mp_add(&t1, ecp->x, &t1);",
          "5276:           err = mp_add(&t1, ecp->x, &t1);",
          "5278:           err = mp_add(&t1, ecp->x, &t1);",
          "5280:           err = mp_mod(&t1, prime, &t1);",
          "5284:    while (err == MP_OKAY && mp_isneg(&t1)) {",
          "5285:       err = mp_add(&t1, prime, &t1);",
          "5287:    while (err == MP_OKAY && mp_cmp(&t1, prime) != MP_LT) {",
          "5288:       err = mp_sub(&t1, prime, &t1);",
          "5293:        if (mp_cmp(&t1, b) != MP_EQ) {",
          "5300:    mp_clear(&t1);",
          "5301:    mp_clear(&t2);",
          "",
          "[Added Lines]",
          "5912:           err = mp_add(t1, ecp->x, t1);",
          "5914:           err = mp_add(t1, ecp->x, t1);",
          "5916:           err = mp_add(t1, ecp->x, t1);",
          "5918:           err = mp_mod(t1, prime, t1);",
          "5922:    while (err == MP_OKAY && mp_isneg(t1)) {",
          "5923:       err = mp_add(t1, prime, t1);",
          "5925:    while (err == MP_OKAY && mp_cmp(t1, prime) != MP_LT) {",
          "5926:       err = mp_sub(t1, prime, t1);",
          "5931:        if (mp_cmp(t1, b) != MP_EQ) {",
          "5938:    mp_clear(t1);",
          "5939:    mp_clear(t2);",
          "5940: #ifdef WOLFSSL_SMALL_STACK",
          "5941:    XFREE(t2, NULL, DYNAMIC_TYPE_ECC);",
          "5942:    XFREE(t1, NULL, DYNAMIC_TYPE_ECC);",
          "5943: #endif",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "5317:     int        err = MP_OKAY;",
          "5318:     ecc_point* base = NULL;",
          "5319:     ecc_point* res  = NULL;",
          "5322:     if (key == NULL)",
          "5323:         return BAD_FUNC_ARG;",
          "5325:     res = wc_ecc_new_point_h(key->heap);",
          "5326:     if (res == NULL)",
          "5327:         err = MEMORY_E;",
          "",
          "[Removed Lines]",
          "5320:     DECLARE_CURVE_SPECS(2)",
          "",
          "[Added Lines]",
          "5962:     DECLARE_CURVE_SPECS(curve, 2);",
          "5967:     ALLOC_CURVE_SPECS(2);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "5371:     wc_ecc_curve_free(curve);",
          "5372:     wc_ecc_del_point_h(res, key->heap);",
          "5373:     wc_ecc_del_point_h(base, key->heap);",
          "5375:     return err;",
          "5376: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6018:     FREE_CURVE_SPECS();",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "5383: {",
          "5384:     int    err;",
          "5385: #ifndef WOLFSSL_ATECC508A",
          "5387: #endif",
          "5389:     if (key == NULL)",
          "",
          "[Removed Lines]",
          "5386:     DECLARE_CURVE_SPECS(2)",
          "",
          "[Added Lines]",
          "6031:     DECLARE_CURVE_SPECS(curve, 2);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "5394:     err = BAD_COND_E;",
          "5396: #else",
          "5399:     err = wc_ecc_curve_load(key->dp, &curve,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6042:     ALLOC_CURVE_SPECS(curve, 2);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "5403:         err = ecc_check_privkey_gen(key, curve->Af, curve->prime);",
          "5405:     wc_ecc_curve_free(curve);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6052:     FREE_CURVE_SPECS();",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "5462:     int    err;",
          "5463: #ifndef WOLFSSL_SP_MATH",
          "5464: #ifndef WOLFSSL_ATECC508A",
          "5466: #ifdef USE_ECC_B_PARAM",
          "5468: #else",
          "5469:     mp_int b_lcl;",
          "5473: #endif",
          "5476:     if (key == NULL)",
          "",
          "[Removed Lines]",
          "5465:     mp_int* b;",
          "5467:     DECLARE_CURVE_SPECS(4)",
          "5470:     DECLARE_CURVE_SPECS(3)",
          "5471:     b = &b_lcl;",
          "5472:     XMEMSET(b, 0, sizeof(mp_int));",
          "",
          "[Added Lines]",
          "6112:     mp_int* b = NULL;",
          "6114:     DECLARE_CURVE_SPECS(curve, 4);",
          "6116: #ifndef WOLFSSL_SMALL_STACK",
          "6119:     DECLARE_CURVE_SPECS(curve, 3);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "5486: #else",
          "5491:         return ECC_INF_E;",
          "5494:     err = wc_ecc_curve_load(key->dp, &curve, (ECC_CURVE_FIELD_PRIME |",
          "",
          "[Removed Lines]",
          "5490:     if (wc_ecc_point_is_at_infinity(&key->pubkey))",
          "",
          "[Added Lines]",
          "6134:     #ifdef USE_ECC_B_PARAM",
          "6135:         ALLOC_CURVE_SPECS(4);",
          "6136:     #else",
          "6137:         ALLOC_CURVE_SPECS(3);",
          "6138:         #ifndef WOLFSSL_SMALL_STACK",
          "6139:             b = &b_lcl;",
          "6140:         #else",
          "6141:             b = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);",
          "6142:             if (b == NULL) {",
          "6143:                 FREE_CURVE_SPECS();",
          "6144:                 return MEMORY_E;",
          "6145:             }",
          "6146:         #endif",
          "6147:         XMEMSET(b, 0, sizeof(mp_int));",
          "6148:     #endif",
          "6152:     if (wc_ecc_point_is_at_infinity(&key->pubkey)) {",
          "6153:     #ifdef WOLFSSL_SMALL_STACK",
          "6154:         XFREE(b, key->heap, DYNAMIC_TYPE_ECC);",
          "6155:     #endif",
          "6156:         FREE_CURVE_SPECS();",
          "6158:     }",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "5538: #ifndef USE_ECC_B_PARAM",
          "5539:     mp_clear(b);",
          "5540: #endif",
          "5543: #else",
          "5544:     if (key == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6207:     #ifdef WOLFSSL_SMALL_STACK",
          "6208:         XFREE(b, key->heap, DYNAMIC_TYPE_ECC);",
          "6209:     #endif",
          "6212:     FREE_CURVE_SPECS();",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "5635:         mp_int t1, t2;",
          "5636:         int did_init = 0;",
          "5640:         if (mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL) != MP_OKAY)",
          "5641:             err = MEMORY_E;",
          "",
          "[Removed Lines]",
          "5638:         DECLARE_CURVE_SPECS(3)",
          "",
          "[Added Lines]",
          "6310:         DECLARE_CURVE_SPECS(curve, 3);",
          "6311:         ALLOC_CURVE_SPECS(3);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "5687:         }",
          "5689:         wc_ecc_curve_free(curve);",
          "5690: #else",
          "5691:         sp_ecc_uncompress_256(key->pubkey.x, pointType, key->pubkey.y);",
          "5692: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6363:         FREE_CURVE_SPECS();",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "5932: int wc_ecc_rs_to_sig(const char* r, const char* s, byte* out, word32* outlen)",
          "5933: {",
          "5934:     int err;",
          "5938:     if (r == NULL || s == NULL || out == NULL || outlen == NULL)",
          "5939:         return ECC_BAD_ARG_E;",
          "5943:         return err;",
          "5946:     if (err == MP_OKAY)",
          "5950:     if (err == MP_OKAY)",
          "5953:     if (err == MP_OKAY) {",
          "5955:             err = MP_ZERO_E;",
          "5956:     }",
          "5961:     return err;",
          "5962: }",
          "",
          "[Removed Lines]",
          "5935:     mp_int rtmp;",
          "5936:     mp_int stmp;",
          "5941:     err = mp_init_multi(&rtmp, &stmp, NULL, NULL, NULL, NULL);",
          "5942:     if (err != MP_OKAY)",
          "5945:     err = mp_read_radix(&rtmp, r, MP_RADIX_HEX);",
          "5947:         err = mp_read_radix(&stmp, s, MP_RADIX_HEX);",
          "5951:         err = StoreECC_DSA_Sig(out, outlen, &rtmp, &stmp);",
          "5954:         if (mp_iszero(&rtmp) == MP_YES || mp_iszero(&stmp) == MP_YES)",
          "5958:     mp_clear(&rtmp);",
          "5959:     mp_clear(&stmp);",
          "",
          "[Added Lines]",
          "6609: #ifdef WOLFSSL_SMALL_STACK",
          "6610:     mp_int* rtmp = NULL;",
          "6611:     mp_int* stmp = NULL;",
          "6612: #else",
          "6613:     mp_int  rtmp[1];",
          "6614:     mp_int  stmp[1];",
          "6615: #endif",
          "6620: #ifdef WOLFSSL_SMALL_STACK",
          "6621:     rtmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "6622:     if (rtmp == NULL)",
          "6623:         return MEMORY_E;",
          "6624:     stmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "6625:     if (stmp == NULL) {",
          "6626:         XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);",
          "6627:         return MEMORY_E;",
          "6628:     }",
          "6629: #endif",
          "6631:     err = mp_init_multi(rtmp, stmp, NULL, NULL, NULL, NULL);",
          "6632:     if (err != MP_OKAY) {",
          "6633:     #ifdef WOLFSSL_SMALL_STACK",
          "6634:         XFREE(stmp, NULL, DYNAMIC_TYPE_ECC);",
          "6635:         XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);",
          "6636:     #endif",
          "6638:     }",
          "6640:     err = mp_read_radix(rtmp, r, MP_RADIX_HEX);",
          "6642:         err = mp_read_radix(stmp, s, MP_RADIX_HEX);",
          "6646:         err = StoreECC_DSA_Sig(out, outlen, rtmp, stmp);",
          "6649:         if (mp_iszero(rtmp) == MP_YES || mp_iszero(stmp) == MP_YES)",
          "6653:     mp_clear(rtmp);",
          "6654:     mp_clear(stmp);",
          "6655: #ifdef WOLFSSL_SMALL_STACK",
          "6656:     XFREE(stmp, NULL, DYNAMIC_TYPE_ECC);",
          "6657:     XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);",
          "6658: #endif",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "5975:     byte* out, word32* outlen)",
          "5976: {",
          "5977:     int err;",
          "5981:     if (r == NULL || s == NULL || out == NULL || outlen == NULL)",
          "5982:         return ECC_BAD_ARG_E;",
          "5986:         return err;",
          "5989:     if (err == MP_OKAY)",
          "5993:     if (err == MP_OKAY)",
          "5996:     if (err == MP_OKAY) {",
          "5998:             err = MP_ZERO_E;",
          "5999:     }",
          "6004:     return err;",
          "6005: }",
          "",
          "[Removed Lines]",
          "5978:     mp_int rtmp;",
          "5979:     mp_int stmp;",
          "5984:     err = mp_init_multi(&rtmp, &stmp, NULL, NULL, NULL, NULL);",
          "5985:     if (err != MP_OKAY)",
          "5988:     err = mp_read_unsigned_bin(&rtmp, r, rSz);",
          "5990:         err = mp_read_unsigned_bin(&stmp, s, sSz);",
          "5994:         err = StoreECC_DSA_Sig(out, outlen, &rtmp, &stmp);",
          "5997:         if (mp_iszero(&rtmp) == MP_YES || mp_iszero(&stmp) == MP_YES)",
          "6001:     mp_clear(&rtmp);",
          "6002:     mp_clear(&stmp);",
          "",
          "[Added Lines]",
          "6677: #ifdef WOLFSSL_SMALL_STACK",
          "6678:     mp_int* rtmp = NULL;",
          "6679:     mp_int* stmp = NULL;",
          "6680: #else",
          "6681:     mp_int  rtmp[1];",
          "6682:     mp_int  stmp[1];",
          "6683: #endif",
          "6688: #ifdef WOLFSSL_SMALL_STACK",
          "6689:     rtmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "6690:     if (rtmp == NULL)",
          "6691:         return MEMORY_E;",
          "6692:     stmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "6693:     if (stmp == NULL) {",
          "6694:         XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);",
          "6695:         return MEMORY_E;",
          "6696:     }",
          "6697: #endif",
          "6699:     err = mp_init_multi(rtmp, stmp, NULL, NULL, NULL, NULL);",
          "6700:     if (err != MP_OKAY) {",
          "6701:     #ifdef WOLFSSL_SMALL_STACK",
          "6702:         XFREE(stmp, NULL, DYNAMIC_TYPE_ECC);",
          "6703:         XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);",
          "6704:     #endif",
          "6706:     }",
          "6708:     err = mp_read_unsigned_bin(rtmp, r, rSz);",
          "6710:         err = mp_read_unsigned_bin(stmp, s, sSz);",
          "6714:         err = StoreECC_DSA_Sig(out, outlen, rtmp, stmp);",
          "6717:         if (mp_iszero(rtmp) == MP_YES || mp_iszero(stmp) == MP_YES)",
          "6721:     mp_clear(rtmp);",
          "6722:     mp_clear(stmp);",
          "6723: #ifdef WOLFSSL_SMALL_STACK",
          "6724:     XFREE(stmp, NULL, DYNAMIC_TYPE_ECC);",
          "6725:     XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);",
          "6726: #endif",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "6019: {",
          "6020:     int err;",
          "6021:     word32 x = 0;",
          "6025:     if (sig == NULL || r == NULL || rLen == NULL || s == NULL || sLen == NULL)",
          "6026:         return ECC_BAD_ARG_E;",
          "6031:     if (err == MP_OKAY) {",
          "6033:         if (*rLen < x)",
          "6034:             err = BUFFER_E;",
          "6036:         if (err == MP_OKAY) {",
          "6039:         }",
          "6040:     }",
          "6043:     if (err == MP_OKAY) {",
          "6045:         if (*sLen < x)",
          "6046:             err = BUFFER_E;",
          "6048:         if (err == MP_OKAY) {",
          "6051:         }",
          "6052:     }",
          "6057:     return err;",
          "6058: }",
          "",
          "[Removed Lines]",
          "6022:     mp_int rtmp;",
          "6023:     mp_int stmp;",
          "6028:     err = DecodeECC_DSA_Sig(sig, sigLen, &rtmp, &stmp);",
          "6032:         x = mp_unsigned_bin_size(&rtmp);",
          "6038:             err = mp_to_unsigned_bin(&rtmp, r);",
          "6044:         x = mp_unsigned_bin_size(&stmp);",
          "6050:             err = mp_to_unsigned_bin(&stmp, s);",
          "6054:     mp_clear(&rtmp);",
          "6055:     mp_clear(&stmp);",
          "",
          "[Added Lines]",
          "6746: #ifdef WOLFSSL_SMALL_STACK",
          "6747:     mp_int* rtmp = NULL;",
          "6748:     mp_int* stmp = NULL;",
          "6749: #else",
          "6750:     mp_int  rtmp[1];",
          "6751:     mp_int  stmp[1];",
          "6752: #endif",
          "6757: #ifdef WOLFSSL_SMALL_STACK",
          "6758:     rtmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "6759:     if (rtmp == NULL)",
          "6760:         return MEMORY_E;",
          "6761:     stmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);",
          "6762:     if (stmp == NULL) {",
          "6763:         XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);",
          "6764:         return MEMORY_E;",
          "6765:     }",
          "6766: #endif",
          "6768:     err = DecodeECC_DSA_Sig(sig, sigLen, rtmp, stmp);",
          "6772:         x = mp_unsigned_bin_size(rtmp);",
          "6778:             err = mp_to_unsigned_bin(rtmp, r);",
          "6784:         x = mp_unsigned_bin_size(stmp);",
          "6790:             err = mp_to_unsigned_bin(stmp, s);",
          "6794:     mp_clear(rtmp);",
          "6795:     mp_clear(stmp);",
          "6796: #ifdef WOLFSSL_SMALL_STACK",
          "6797:     XFREE(stmp, NULL, DYNAMIC_TYPE_ECC);",
          "6798:     XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);",
          "6799: #endif",
          "",
          "---------------"
        ],
        "wolfssl/wolfcrypt/ecc.h||wolfssl/wolfcrypt/ecc.h": [
          "File: wolfssl/wolfcrypt/ecc.h -> wolfssl/wolfcrypt/ecc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:     ECC_POINT_COMP_EVEN = 0x02,",
          "136:     ECC_POINT_COMP_ODD = 0x03,",
          "137:     ECC_POINT_UNCOMP = 0x04,",
          "138: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     SHAMIR_PRECOMP_SZ = 16,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "301: } alt_fp_int;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: #ifndef WC_ECCKEY_TYPE_DEFINED",
          "308:     typedef struct ecc_key ecc_key;",
          "309:     #define WC_ECCKEY_TYPE_DEFINED",
          "310: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316:     alt_fp_int xyz[3];",
          "317: #endif",
          "318: } ecc_point;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "327:     ecc_key* key;",
          "328: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "361:     #endif",
          "368: #endif",
          "",
          "[Removed Lines]",
          "363: };",
          "365: #ifndef WC_ECCKEY_TYPE_DEFINED",
          "366:     typedef struct ecc_key ecc_key;",
          "367:     #define WC_ECCKEY_TYPE_DEFINED",
          "",
          "[Added Lines]",
          "374: #ifdef WOLFSSL_SMALL_STACK_CACHE",
          "375:     mp_int* t1;",
          "376:     mp_int* t2;",
          "377: #ifdef ALT_ECC_SIZE",
          "378:     mp_int* x;",
          "379:     mp_int* y;",
          "380:     mp_int* z;",
          "381: #endif",
          "383: };",
          "",
          "---------------"
        ]
      }
    }
  ]
}