{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "45f3b3cf1de9fcc80e2abfa6fd9924d472fc1199",
      "candidate_info": {
        "commit_hash": "45f3b3cf1de9fcc80e2abfa6fd9924d472fc1199",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/45f3b3cf1de9fcc80e2abfa6fd9924d472fc1199",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Stregthen an assert() in the WHERE clause code generator for the min/max optimization.\n\nFossilOrigin-Name: 1bd4b97d6405c9b093f3bfed914c56088ee13e4a2242be62b74a86660f74f533",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/wherecode.c||src/wherecode.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/wherecode.c||src/wherecode.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d465c3eef458c851d97eea6e4117247d9c69386b276168080dbff7bb64070c93",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1706:         sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1708:         op = aStartOp[(start_constraints<<2) + (1<<1) + bRev];",
          "1710:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1711:         VdbeCoverage(v);",
          "1712:         VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "",
          "[Removed Lines]",
          "1709:         assert( op!=0 );",
          "",
          "[Added Lines]",
          "1709:         assert( op==OP_SeekGE || op==OP_SeekLE );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2d2ad6ece4611d7e548e14ab61bf0fe1d70bf11",
      "candidate_info": {
        "commit_hash": "e2d2ad6ece4611d7e548e14ab61bf0fe1d70bf11",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2d2ad6ece4611d7e548e14ab61bf0fe1d70bf11",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Update the test/fuzzdata8.db database with new interesting cases from dbsqlfuzz.\n\nFossilOrigin-Name: e467e4c8fa256ddd6c26c1f21bc26289a21f18b781737eaf706bc813ed8234fa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b0da6e0dd1f9a9ba7646ee6bb3c14945e570303c9a42d20fa8a653570e12c3f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "666a42ffb3ad492e049ad3e1020299218f66a53b",
      "candidate_info": {
        "commit_hash": "666a42ffb3ad492e049ad3e1020299218f66a53b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/666a42ffb3ad492e049ad3e1020299218f66a53b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Minor performance improvement for balance_nonroot().\n\nFossilOrigin-Name: d7434cae3edc321e2f1f8d340a0e656b1613b736f8400fb271a0e80f59401b9e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 156d612800a7282fe0ebb20feb31d3fd577f4ab60fab8c00940c87143997aefb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6992:   while( 1 /*Exit by break*/ ){",
          "6993:     int sz, rc;",
          "6994:     u8 *pSlot;",
          "6996:     if( (aData[1]==0 && aData[2]==0) || (pSlot = pageFindSlot(pPg,sz,&rc))==0 ){",
          "6997:       if( (pData - pBegin)<sz ) return 1;",
          "6998:       pData -= sz;",
          "",
          "[Removed Lines]",
          "6995:     sz = cachedCellSize(pCArray, i);",
          "",
          "[Added Lines]",
          "6995:     assert( pCArray->szCell[i]!=0 );",
          "6996:     sz = pCArray->szCell[i];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7153:         memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);",
          "7154:       }",
          "7155:       nCell++;",
          "7156:       if( pageInsertArray(",
          "7157:             pPg, pBegin, &pData, pCellptr,",
          "7158:             iCell+iNew, 1, pCArray",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7157:       cachedCellSize(pCArray, iCell+iNew);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38587159ddabc116c5b85acf05d1aebbfb777845",
      "candidate_info": {
        "commit_hash": "38587159ddabc116c5b85acf05d1aebbfb777845",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38587159ddabc116c5b85acf05d1aebbfb777845",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbesort.c"
        ],
        "message": "Omit a pointless memory allocation in vdbeSorterSort().\n\nFossilOrigin-Name: 5d76dbc5b0584c15d7d59e5c079868f2077f32b865f406b40ec837b8ab6ef2e1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbesort.c||src/vdbesort.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 31e85fbbc4cfd09a98b4a6dc6624f863816f376c6a4eef1fafc657c8e1abbc36",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1397: static int vdbeSorterSort(SortSubtask *pTask, SorterList *pList){",
          "1398:   int i;",
          "1400:   SorterRecord *p;",
          "1401:   int rc;",
          "1403:   rc = vdbeSortAllocUnpacked(pTask);",
          "1404:   if( rc!=SQLITE_OK ) return rc;",
          "1406:   p = pList->pList;",
          "1407:   pTask->xCompare = vdbeSorterGetCompare(pTask->pSorter);",
          "1414:   while( p ){",
          "1415:     SorterRecord *pNext;",
          "",
          "[Removed Lines]",
          "1399:   SorterRecord **aSlot;",
          "1409:   aSlot = (SorterRecord **)sqlite3MallocZero(64 * sizeof(SorterRecord *));",
          "1410:   if( !aSlot ){",
          "1411:     return SQLITE_NOMEM_BKPT;",
          "1412:   }",
          "",
          "[Added Lines]",
          "1401:   SorterRecord *aSlot[64];",
          "1408:   memset(aSlot, 0, sizeof(aSlot));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1434:   }",
          "1436:   p = 0;",
          "1438:     if( aSlot[i]==0 ) continue;",
          "1439:     p = p ? vdbeSorterMerge(pTask, p, aSlot[i]) : aSlot[i];",
          "1440:   }",
          "1441:   pList->pList = p;",
          "1444:   assert( pTask->pUnpacked->errCode==SQLITE_OK",
          "1445:        || pTask->pUnpacked->errCode==SQLITE_NOMEM",
          "1446:   );",
          "",
          "[Removed Lines]",
          "1437:   for(i=0; i<64; i++){",
          "1443:   sqlite3_free(aSlot);",
          "",
          "[Added Lines]",
          "1433:   for(i=0; i<ArraySize(aSlot); i++){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "679c9613f61a9af9a2c6c5c9d8295ebe28b9d6c6",
      "candidate_info": {
        "commit_hash": "679c9613f61a9af9a2c6c5c9d8295ebe28b9d6c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/679c9613f61a9af9a2c6c5c9d8295ebe28b9d6c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/view.test"
        ],
        "message": "Remove use of the affinity() function from view.test, as it is only available in SQLITE_DEBUG builds.\n\nFossilOrigin-Name: 7f2246a17be9915b3492624a3d8deff56694bdc372f7627e3f16c1869415b1a3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/view.test||test/view.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f5d0436d8dc650cadb61a5fe76fd1a0d68dabba54ff0c2a8c138f9dfbdab1c3f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "733: }",
          "735: do_execsql_test view-27.1 {",
          "737: } {",
          "740: }",
          "742: do_execsql_test view-27.2 { SELECT c0<c1 FROM v0 } 1",
          "",
          "[Removed Lines]",
          "736:   SELECT c0, typeof(c0), affinity(c0), c1, typeof(c1), affinity(c1) FROM v0;",
          "738:   -1   text text",
          "739:    0.0 real none",
          "",
          "[Added Lines]",
          "736:   SELECT c0, typeof(c0), c1, typeof(c1) FROM v0;",
          "738:   -1   text",
          "739:    0.0 real",
          "",
          "---------------"
        ]
      }
    }
  ]
}