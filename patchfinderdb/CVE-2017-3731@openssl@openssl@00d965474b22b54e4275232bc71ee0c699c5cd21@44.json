{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1ec574ae25a754d88f810304be3bfcb7b23101a8",
      "candidate_info": {
        "commit_hash": "1ec574ae25a754d88f810304be3bfcb7b23101a8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1ec574ae25a754d88f810304be3bfcb7b23101a8",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0d-dev\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010003fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0c-fips  10 Nov 2016\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0c  10 Nov 2016\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100040L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d-dev  xx XXX xxxx\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b431b094330da3e54805c49fb262192e34bc3864",
      "candidate_info": {
        "commit_hash": "b431b094330da3e54805c49fb262192e34bc3864",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b431b094330da3e54805c49fb262192e34bc3864",
        "files": [
          "crypto/x509/x_all.c",
          "crypto/x509/x_crl.c"
        ],
        "message": "X509_CRL_digest() - ensure precomputed sha1 hash before returning it\n\nX509_CRL_digest() didn't check if the precomputed sha1 hash was actually\npresent.  This also makes sure there's an appropriate flag to check.\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2314)\n(cherry picked from commit 6195848b2eea627c47f74b63eb2ba3dc3d5b6436)",
        "before_after_code_files": [
          "crypto/x509/x_all.c||crypto/x509/x_all.c",
          "crypto/x509/x_crl.c||crypto/x509/x_crl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377: int X509_CRL_digest(const X509_CRL *data, const EVP_MD *type,",
          "378:                     unsigned char *md, unsigned int *len)",
          "379: {",
          "382:         if (len != NULL)",
          "",
          "[Removed Lines]",
          "380:     if (type == EVP_sha1()) {",
          "",
          "[Added Lines]",
          "380:     if (type == EVP_sha1() && (data->flags & EXFLAG_SET) != 0) {",
          "",
          "---------------"
        ],
        "crypto/x509/x_crl.c||crypto/x509/x_crl.c": [
          "File: crypto/x509/x_crl.c -> crypto/x509/x_crl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:             if (crl->meth->crl_init(crl) == 0)",
          "227:                 return 0;",
          "228:         }",
          "229:         break;",
          "231:     case ASN1_OP_FREE_POST:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:         crl->flags |= EXFLAG_SET;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "daa67522e0d33deadf6ac130ebe08805bb78c3a3",
      "candidate_info": {
        "commit_hash": "daa67522e0d33deadf6ac130ebe08805bb78c3a3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/daa67522e0d33deadf6ac130ebe08805bb78c3a3",
        "files": [
          "crypto/bn/bn_recp.c"
        ],
        "message": "Missing BN_RECP_CTX field init.\n\nBN_RECP_CTX_new direclty use bn_init to avoid twice memset calls\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1879)\n(cherry picked from commit 318447bceb3aa2c50ac0081bdb4e917f8704e7da)",
        "before_after_code_files": [
          "crypto/bn/bn_recp.c||crypto/bn/bn_recp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_recp.c||crypto/bn/bn_recp.c": [
          "File: crypto/bn/bn_recp.c -> crypto/bn/bn_recp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: void BN_RECP_CTX_init(BN_RECP_CTX *recp)",
          "14: {",
          "15:     bn_init(&(recp->N));",
          "16:     bn_init(&(recp->Nr));",
          "19: }",
          "21: BN_RECP_CTX *BN_RECP_CTX_new(void)",
          "",
          "[Removed Lines]",
          "17:     recp->num_bits = 0;",
          "18:     recp->flags = 0;",
          "",
          "[Added Lines]",
          "15:     memset(recp, 0, sizeof(*recp));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     if ((ret = OPENSSL_zalloc(sizeof(*ret))) == NULL)",
          "26:         return (NULL);",
          "29:     ret->flags = BN_FLG_MALLOCED;",
          "30:     return (ret);",
          "31: }",
          "",
          "[Removed Lines]",
          "28:     BN_RECP_CTX_init(ret);",
          "",
          "[Added Lines]",
          "27:     bn_init(&(ret->N));",
          "28:     bn_init(&(ret->Nr));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c25d172a5845824e225db91ef87c7f8d0ea803e6",
      "candidate_info": {
        "commit_hash": "c25d172a5845824e225db91ef87c7f8d0ea803e6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c25d172a5845824e225db91ef87c7f8d0ea803e6",
        "files": [
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Fix SSL_VERIFY_CLIENT_ONCE\n\nThe flag SSL_VERIFY_CLIENT_ONCE is documented as follows:\n\n  B<Server mode:> only request a client certificate on the initial TLS/SSL\n  handshake. Do not ask for a client certificate again in case of a\n  renegotiation. This flag must be used together with SSL_VERIFY_PEER.\n\n  B<Client mode:> ignored\n\nBut the implementation actually did nothing. After the server sends its\nServerKeyExchange message, the code was checking s->session->peer to see if\nit is NULL. If it was set then it did not ask for another client\ncertificate. However s->session->peer will only be set in the event of a\nresumption, but a ServerKeyExchange message is only sent in the event of a\nfull handshake (i.e. no resumption).\n\nThe documentation suggests that the original intention was for this to\nhave an effect on renegotiation, and resumption doesn't come into it.\n\nThe fix is to properly check for renegotiation, not whether there is already\na client certificate in the session.\n\nAs far as I can tell this has been broken for a *long* time.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1983)",
        "before_after_code_files": [
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:                !(s->verify_mode & SSL_VERIFY_CLIENT_ONCE))",
          "",
          "[Removed Lines]",
          "279:            && ((s->session->peer == NULL) ||",
          "",
          "[Added Lines]",
          "279:            && (s->s3->tmp.finish_md_len == 0 ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa7130eb6832bcdccb335dd0f6bb535fe9a3e868",
      "candidate_info": {
        "commit_hash": "fa7130eb6832bcdccb335dd0f6bb535fe9a3e868",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fa7130eb6832bcdccb335dd0f6bb535fe9a3e868",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0e-dev\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010004fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d-fips  26 Jan 2017\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d  26 Jan 2017\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100050L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-dev  xx XXX xxxx\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}