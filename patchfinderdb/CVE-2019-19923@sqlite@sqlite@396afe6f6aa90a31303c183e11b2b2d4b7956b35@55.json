{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7fc296aa662e02fc715facf50b6fb095794d7641",
      "candidate_info": {
        "commit_hash": "7fc296aa662e02fc715facf50b6fb095794d7641",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7fc296aa662e02fc715facf50b6fb095794d7641",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Early detection of a corrupt R-Tree in the R-Tree search algorithm.\n\nFossilOrigin-Name: 2bf5a4c16457562dc942bcc6ec06d9b4e795ef3ea8e31550e18857bbebd08a76",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1595:       x.iLevel = p->iLevel - 1;",
          "1596:       if( x.iLevel ){",
          "1597:         x.id = readInt64(pCellData);",
          "1598:         x.iCell = 0;",
          "1599:       }else{",
          "1600:         x.id = p->id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1598:         for(ii=0; ii<pCur->nPoint; ii++){",
          "1599:           if( pCur->aPoint[ii].id==x.id ){",
          "1600:             RTREE_IS_CORRUPT(pRtree);",
          "1601:             return SQLITE_CORRUPT_VTAB;",
          "1602:           }",
          "1603:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4e34e3615ff31f4a6432033797b2e1a6604007ea0e501d714ecb362632776150",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e20945729559e42520d786652c09b00cc9e414f2",
      "candidate_info": {
        "commit_hash": "e20945729559e42520d786652c09b00cc9e414f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e20945729559e42520d786652c09b00cc9e414f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Consolidate the removal of Window objects from the Select.pWin list into a single subroutine.\n\nFossilOrigin-Name: e46b2afc99329c43de08d4a2e6ade4d2239d7409c5d5626bf272a3e0dd24d1b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 05080344dceafcfb670fbf01f7d69a1d713a54b6845f968a9cfe941fb53b13af",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1306:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1307:     Window *pWin = pExpr->y.pWin;",
          "1313:   }",
          "1314:   return WRC_Continue;",
          "1315: }",
          "",
          "[Removed Lines]",
          "1308:     if( pWin->ppThis ){",
          "1310:       if( pWin->pNextWin ) pWin->pNextWin->ppThis = pWin->ppThis;",
          "1311:       pWin->ppThis = 0;",
          "1312:     }",
          "",
          "[Added Lines]",
          "1308:     sqlite3WindowUnlinkFromSelect(pWin);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3615: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "3616: void sqlite3WindowDelete(sqlite3*, Window*);",
          "3617: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3618: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3619: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3617: void sqlite3WindowUnlinkFromSelect(Window*);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1017:   return rc;",
          "1018: }",
          "1023: void sqlite3WindowDelete(sqlite3 *db, Window *p){",
          "1024:   if( p ){",
          "1029:     sqlite3ExprDelete(db, p->pFilter);",
          "1030:     sqlite3ExprListDelete(db, p->pPartition);",
          "1031:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "",
          "[Removed Lines]",
          "1025:     if( p->ppThis ){",
          "1027:       if( p->pNextWin ) p->pNextWin->ppThis = p->ppThis;",
          "1028:     }",
          "",
          "[Added Lines]",
          "1024: void sqlite3WindowUnlinkFromSelect(Window *p){",
          "1025:   if( p->ppThis ){",
          "1027:     if( p->pNextWin ) p->pNextWin->ppThis = p->ppThis;",
          "1028:     p->ppThis = 0;",
          "1029:   }",
          "1030: }",
          "1037:     sqlite3WindowUnlinkFromSelect(p);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "169f077e07f312172cb0e5d6cb291b91b61d9164",
      "candidate_info": {
        "commit_hash": "169f077e07f312172cb0e5d6cb291b91b61d9164",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/169f077e07f312172cb0e5d6cb291b91b61d9164",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeapi.c",
          "src/vdbeaux.c",
          "src/vdbemem.c",
          "src/vdbetrace.c"
        ],
        "message": "Make MEM_IntReal a completely independent type, meaning a floating point value stored as an integer.  This fixes a problem with arithmetic within arguments to string functions on indexes of expressions.  But it is a big change and needs lots of new testcase() macros for MC/DC and so it is initially put on this branch.\n\nFossilOrigin-Name: dba836e31cb29d339b4520acb06188a892a52e45c50aba9742966b01108e251a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbemem.c||src/vdbemem.c",
          "src/vdbetrace.c||src/vdbetrace.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48889530a9de22fee536edfd1627be62396ed18d842d5fd6d91e010b4337be95",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   double rValue;",
          "296:   i64 iValue;",
          "297:   u8 enc = pRec->enc;",
          "299:   if( sqlite3AtoF(pRec->z, &rValue, pRec->n, enc)==0 ) return;",
          "300:   if( 0==sqlite3Atoi64(pRec->z, &iValue, pRec->n, enc) ){",
          "301:     pRec->u.i = iValue;",
          "",
          "[Removed Lines]",
          "298:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real))==MEM_Str );",
          "",
          "[Added Lines]",
          "298:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real|MEM_IntReal))==MEM_Str );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:         sqlite3VdbeMemStringify(pRec, enc, 1);",
          "357:       }",
          "358:     }",
          "360:   }",
          "361: }",
          "",
          "[Removed Lines]",
          "355:       if( (pRec->flags&(MEM_Real|MEM_Int)) ){",
          "359:     pRec->flags &= ~(MEM_Real|MEM_Int);",
          "",
          "[Added Lines]",
          "355:       if( (pRec->flags&(MEM_Real|MEM_Int|MEM_IntReal)) ){",
          "359:     pRec->flags &= ~(MEM_Real|MEM_Int|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "397: static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){",
          "399:   assert( (pMem->flags & (MEM_Str|MEM_Blob))!=0 );",
          "400:   ExpandBlob(pMem);",
          "401:   if( sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc)==0 ){",
          "",
          "[Removed Lines]",
          "398:   assert( (pMem->flags & (MEM_Int|MEM_Real))==0 );",
          "",
          "[Added Lines]",
          "398:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal))==0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417: static u16 numericType(Mem *pMem){",
          "420:   }",
          "421:   if( pMem->flags & (MEM_Str|MEM_Blob) ){",
          "422:     return computeNumericType(pMem);",
          "",
          "[Removed Lines]",
          "418:   if( pMem->flags & (MEM_Int|MEM_Real) ){",
          "419:     return pMem->flags & (MEM_Int|MEM_Real);",
          "",
          "[Added Lines]",
          "418:   if( pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal) ){",
          "419:     return pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "514:     printf(p->flags & MEM_Zero ? \" NULL-nochng\" : \" NULL\");",
          "515:   }else if( (p->flags & (MEM_Int|MEM_Str))==(MEM_Int|MEM_Str) ){",
          "516:     printf(\" si:%lld\", p->u.i);",
          "518:     printf(\" ir:%lld\", p->u.i);",
          "519:   }else if( p->flags & MEM_Int ){",
          "520:     printf(\" i:%lld\", p->u.i);",
          "",
          "[Removed Lines]",
          "517:   }else if( (p->flags & (MEM_Int|MEM_IntReal))==(MEM_Int|MEM_IntReal) ){",
          "",
          "[Added Lines]",
          "517:   }else if( (p->flags & (MEM_IntReal))!=0 ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1630:     }",
          "1631:     pOut->u.r = rB;",
          "1632:     MemSetTypeFlag(pOut, MEM_Real);",
          "1634:       sqlite3VdbeIntegerAffinity(pOut);",
          "1635:     }",
          "1636: #endif",
          "",
          "[Removed Lines]",
          "1633:     if( ((type1|type2)&MEM_Real)==0 && !bIntint ){",
          "",
          "[Added Lines]",
          "1633:     if( ((type1|type2)&(MEM_Real|MEM_IntReal))==0 && !bIntint ){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1803:   pIn1 = &aMem[pOp->p1];",
          "1805:     sqlite3VdbeMemRealify(pIn1);",
          "1806:   }",
          "1807:   break;",
          "",
          "[Removed Lines]",
          "1804:   if( pIn1->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "1804:   if( pIn1->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1993:     affinity = pOp->p5 & SQLITE_AFF_MASK;",
          "1994:     if( affinity>=SQLITE_AFF_NUMERIC ){",
          "1995:       if( (flags1 | flags3)&MEM_Str ){",
          "1997:           applyNumericAffinity(pIn1,0);",
          "1998:           assert( flags3==pIn3->flags );",
          "",
          "[Removed Lines]",
          "1996:         if( (flags1 & (MEM_Int|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Added Lines]",
          "1996:         if( (flags1 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2004:           flags3 = pIn3->flags;",
          "2005:         }",
          "2007:           applyNumericAffinity(pIn3,0);",
          "2008:         }",
          "2009:       }",
          "",
          "[Removed Lines]",
          "2006:         if( (flags3 & (MEM_Int|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Added Lines]",
          "2006:         if( (flags3 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2016:         goto compare_op;",
          "2017:       }",
          "2018:     }else if( affinity==SQLITE_AFF_TEXT ){",
          "2020:         testcase( pIn1->flags & MEM_Int );",
          "2021:         testcase( pIn1->flags & MEM_Real );",
          "2022:         sqlite3VdbeMemStringify(pIn1, encoding, 1);",
          "2023:         testcase( (flags1&MEM_Dyn) != (pIn1->flags&MEM_Dyn) );",
          "2024:         flags1 = (pIn1->flags & ~MEM_TypeMask) | (flags1 & MEM_TypeMask);",
          "2025:         assert( pIn1!=pIn3 );",
          "2026:       }",
          "2028:         testcase( pIn3->flags & MEM_Int );",
          "2029:         testcase( pIn3->flags & MEM_Real );",
          "2030:         sqlite3VdbeMemStringify(pIn3, encoding, 1);",
          "2031:         testcase( (flags3&MEM_Dyn) != (pIn3->flags&MEM_Dyn) );",
          "2032:         flags3 = (pIn3->flags & ~MEM_TypeMask) | (flags3 & MEM_TypeMask);",
          "",
          "[Removed Lines]",
          "2019:       if( (flags1 & MEM_Str)==0 && (flags1 & (MEM_Int|MEM_Real))!=0 ){",
          "2027:       if( (flags3 & MEM_Str)==0 && (flags3 & (MEM_Int|MEM_Real))!=0 ){",
          "",
          "[Added Lines]",
          "2019:       if( (flags1 & MEM_Str)==0 && (flags1&(MEM_Int|MEM_Real|MEM_IntReal))!=0 ){",
          "2022:         testcase( pIn1->flags & MEM_IntReal );",
          "2028:       if( (flags3 & MEM_Str)==0 && (flags3&(MEM_Int|MEM_Real|MEM_IntReal))!=0 ){",
          "2031:         testcase( pIn3->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2792:       pIn1->flags |= MEM_IntReal;",
          "2793:     }",
          "2794:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "2795:     zAffinity++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2795:       pIn1->flags &= ~MEM_Int;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3989:     pIn3 = &aMem[pOp->p3];",
          "3991:       applyNumericAffinity(pIn3, 0);",
          "3992:     }",
          "3993:     iKey = sqlite3VdbeIntValue(pIn3);",
          "3998:       if( (pIn3->flags & MEM_Real)==0 ){",
          "",
          "[Removed Lines]",
          "3990:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_Str))==MEM_Str ){",
          "3997:     if( (pIn3->flags & MEM_Int)==0 ){",
          "",
          "[Added Lines]",
          "3993:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4000:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4379:   u64 iKey;",
          "4381:   pIn3 = &aMem[pOp->p3];",
          "",
          "[Removed Lines]",
          "4382:   if( (pIn3->flags & MEM_Int)==0 ){",
          "",
          "[Added Lines]",
          "4385:   if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:     int eType = SQLITE_BLOB;",
          "305:     if( pVal->flags & MEM_Null ){",
          "306:       eType = SQLITE_NULL;",
          "310:       eType = SQLITE_FLOAT;",
          "311:     }else if( pVal->flags & MEM_Str ){",
          "312:       eType = SQLITE_TEXT;",
          "313:     }",
          "",
          "[Removed Lines]",
          "307:     }else if( pVal->flags & MEM_Int ){",
          "308:       eType = (pVal->flags & MEM_IntReal) ? SQLITE_FLOAT : SQLITE_INTEGER;",
          "309:     }else if( pVal->flags & MEM_Real ){",
          "",
          "[Added Lines]",
          "307:     }else if( pVal->flags & (MEM_Real|MEM_IntReal) ){",
          "309:     }else if( pVal->flags & MEM_Int ){",
          "310:       eType = SQLITE_INTEGER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1849:   }else if( iIdx>=p->pUnpacked->nField ){",
          "1851:   }else if( p->pTab->aCol[iIdx].affinity==SQLITE_AFF_REAL ){",
          "1853:       sqlite3VdbeMemRealify(pMem);",
          "1854:     }",
          "1855:   }",
          "",
          "[Removed Lines]",
          "1852:     if( pMem->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "1852:     if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1534:       Mem *pMem = pOp->p4.pMem;",
          "1535:       if( pMem->flags & MEM_Str ){",
          "1536:         zP4 = pMem->z;",
          "1538:         sqlite3_str_appendf(&x, \"%lld\", pMem->u.i);",
          "1539:       }else if( pMem->flags & MEM_Real ){",
          "1540:         sqlite3_str_appendf(&x, \"%.16g\", pMem->u.r);",
          "",
          "[Removed Lines]",
          "1537:       }else if( pMem->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "1537:       }else if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3433:     return 0;",
          "3434:   }",
          "3437: #   define MAX_6BYTE ((((i64)0x00008000)<<32)-1)",
          "3438:     i64 i = pMem->u.i;",
          "",
          "[Removed Lines]",
          "3435:   if( flags&MEM_Int ){",
          "",
          "[Added Lines]",
          "3435:   if( flags&(MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4116:       if( pMem1->u.i < pMem2->u.i ) return -1;",
          "4117:       if( pMem1->u.i > pMem2->u.i ) return +1;",
          "4118:       return 0;",
          "",
          "[Removed Lines]",
          "4114:   if( combined_flags&(MEM_Int|MEM_Real) ){",
          "4115:     if( (f1 & f2 & MEM_Int)!=0 ){",
          "",
          "[Added Lines]",
          "4114:   if( combined_flags&(MEM_Int|MEM_Real|MEM_IntReal) ){",
          "4115:     if( (f1 & f2 & (MEM_Int|MEM_IntReal))!=0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4122:       if( pMem1->u.r > pMem2->u.r ) return +1;",
          "4123:       return 0;",
          "4124:     }",
          "4126:       if( (f2&MEM_Real)!=0 ){",
          "4127:         return sqlite3IntFloatCompare(pMem1->u.i, pMem2->u.r);",
          "4128:       }else{",
          "4129:         return -1;",
          "4130:       }",
          "4131:     }",
          "4132:     if( (f1&MEM_Real)!=0 ){",
          "4134:         return -sqlite3IntFloatCompare(pMem2->u.i, pMem1->u.r);",
          "4135:       }else{",
          "4136:         return -1;",
          "",
          "[Removed Lines]",
          "4125:     if( (f1&MEM_Int)!=0 ){",
          "4133:       if( (f2&MEM_Int)!=0 ){",
          "",
          "[Added Lines]",
          "4125:     if( (f1&(MEM_Int|MEM_IntReal))!=0 ){",
          "4128:       }else if( (f2&(MEM_Int|MEM_IntReal))!=0 ){",
          "4129:         if( pMem1->u.i < pMem2->u.i ) return -1;",
          "4130:         if( pMem1->u.i > pMem2->u.i ) return +1;",
          "4131:         return 0;",
          "4137:       if( (f2&(MEM_Int|MEM_IntReal))!=0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4279:     u32 serial_type;",
          "4283:       serial_type = aKey1[idx1];",
          "4284:       testcase( serial_type==12 );",
          "4285:       if( serial_type>=10 ){",
          "",
          "[Removed Lines]",
          "4282:     if( pRhs->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "4286:     if( pRhs->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4624:     testcase( flags & MEM_Real );",
          "4625:     testcase( flags & MEM_Null );",
          "4626:     testcase( flags & MEM_Blob );",
          "4628:       assert( flags & MEM_Str );",
          "4629:       return vdbeRecordCompareString;",
          "4630:     }",
          "",
          "[Removed Lines]",
          "4627:     if( (flags & (MEM_Real|MEM_Null|MEM_Blob))==0 && p->pKeyInfo->aColl[0]==0 ){",
          "",
          "[Added Lines]",
          "4631:     if( (flags & (MEM_Real|MEM_IntReal|MEM_Null|MEM_Blob))==0",
          "4632:      && p->pKeyInfo->aColl[0]==0",
          "4633:     ){",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"sqliteInt.h\"",
          "19: #include \"vdbeInt.h\"",
          "21: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #define ISPOWEROF2(X)  (((X)&((X)-1))==0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   assert( (p->flags & MEM_Dyn)==0 || p->szMalloc==0 );",
          "43:   if( p->flags & MEM_Null ){",
          "",
          "[Removed Lines]",
          "41:   assert( (p->flags & (MEM_Int|MEM_Real))!=(MEM_Int|MEM_Real) );",
          "",
          "[Added Lines]",
          "46:   assert( ISPOWEROF2(p->flags & (MEM_Int|MEM_Real|MEM_IntReal)) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93: #endif",
          "99: static void vdbeMemRenderNum(int sz, char *zBuf, Mem *p){",
          "100:   StrAccum acc;",
          "102:   sqlite3StrAccumInit(&acc, 0, zBuf, sz, 0);",
          "106:     sqlite3_str_appendf(&acc, \"%lld\", p->u.i);",
          "107:   }else{",
          "108:     sqlite3_str_appendf(&acc, \"%!.15g\", p->u.r);",
          "109:   }",
          "",
          "[Removed Lines]",
          "101:   assert( p->flags & (MEM_Int|MEM_Real) );",
          "103:   if( p->flags & MEM_IntReal ){",
          "104:     sqlite3_str_appendf(&acc, \"%!.15g\", (double)p->u.i);",
          "105:   }else if( p->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "106:   assert( p->flags & (MEM_Int|MEM_Real|MEM_IntReal) );",
          "108:   if( p->flags & MEM_Int ){",
          "110:   }else if( p->flags & MEM_IntReal ){",
          "111:     sqlite3_str_appendf(&acc, \"%!.15g\", (double)p->u.i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:   char *z;",
          "137:   int i, j, incr;",
          "138:   if( (p->flags & MEM_Str)==0 ) return 1;",
          "140:   vdbeMemRenderNum(sizeof(zBuf), zBuf, p);",
          "141:   z = p->z;",
          "142:   i = j = 0;",
          "",
          "[Removed Lines]",
          "139:   if( (p->flags & (MEM_Int|MEM_Real))==0 ) return 1;",
          "",
          "[Added Lines]",
          "144:   if( (p->flags & (MEM_Int|MEM_Real|MEM_IntReal))==0 ) return 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "369:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "370:   assert( !(pMem->flags&MEM_Zero) );",
          "371:   assert( !(pMem->flags&(MEM_Str|MEM_Blob)) );",
          "373:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "374:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "",
          "[Removed Lines]",
          "372:   assert( pMem->flags&(MEM_Int|MEM_Real) );",
          "",
          "[Added Lines]",
          "377:   assert( pMem->flags&(MEM_Int|MEM_Real|MEM_IntReal) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "558:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "559:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "560:   flags = pMem->flags;",
          "562:     return pMem->u.i;",
          "563:   }else if( flags & MEM_Real ){",
          "564:     return doubleToInt64(pMem->u.r);",
          "",
          "[Removed Lines]",
          "561:   if( flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "566:   if( flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "587:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "588:   if( pMem->flags & MEM_Real ){",
          "589:     return pMem->u.r;",
          "591:     return (double)pMem->u.i;",
          "592:   }else if( pMem->flags & (MEM_Str|MEM_Blob) ){",
          "593:     return memRealValue(pMem);",
          "",
          "[Removed Lines]",
          "590:   }else if( pMem->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "595:   }else if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "604: int sqlite3VdbeBooleanValue(Mem *pMem, int ifNull){",
          "606:   if( pMem->flags & MEM_Null ) return ifNull;",
          "607:   return sqlite3VdbeRealValue(pMem)!=0.0;",
          "608: }",
          "",
          "[Removed Lines]",
          "605:   if( pMem->flags & MEM_Int ) return pMem->u.i!=0;",
          "",
          "[Added Lines]",
          "610:   if( pMem->flags & (MEM_Int|MEM_IntReal) ) return pMem->u.i!=0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "685: int sqlite3VdbeMemNumerify(Mem *pMem){",
          "687:     int rc;",
          "688:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "689:     assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "",
          "[Removed Lines]",
          "686:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))==0 ){",
          "",
          "[Added Lines]",
          "691:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))==0 ){",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "701:       }",
          "702:     }",
          "703:   }",
          "705:   pMem->flags &= ~(MEM_Str|MEM_Blob|MEM_Zero);",
          "706:   return SQLITE_OK;",
          "707: }",
          "",
          "[Removed Lines]",
          "704:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))!=0 );",
          "",
          "[Added Lines]",
          "709:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))!=0 );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "930:       u16 mFlags = pMem->flags & pX->flags & pX->mScopyFlags;",
          "932:       assert( (mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r );",
          "933:       assert( (mFlags&MEM_Str)==0  || (pMem->n==pX->n && pMem->z==pX->z) );",
          "934:       assert( (mFlags&MEM_Blob)==0  || sqlite3BlobCompare(pMem,pX)==0 );",
          "",
          "[Removed Lines]",
          "931:       assert( (mFlags&MEM_Int)==0 || pMem->u.i==pX->u.i );",
          "",
          "[Added Lines]",
          "936:       assert( (mFlags&(MEM_Int|MEM_IntReal))==0 || pMem->u.i==pX->u.i );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1491:     }else{",
          "1492:       sqlite3ValueApplyAffinity(pVal, affinity, SQLITE_UTF8);",
          "1493:     }",
          "1495:     if( enc!=SQLITE_UTF8 ){",
          "1496:       rc = sqlite3VdbeChangeEncoding(pVal, enc);",
          "1497:     }",
          "",
          "[Removed Lines]",
          "1494:     if( pVal->flags & (MEM_Int|MEM_Real) ) pVal->flags &= ~MEM_Str;",
          "",
          "[Added Lines]",
          "1499:     if( pVal->flags & (MEM_Int|MEM_IntReal|MEM_Real) ) pVal->flags &= ~MEM_Str;",
          "",
          "---------------"
        ],
        "src/vdbetrace.c||src/vdbetrace.c": [
          "File: src/vdbetrace.c -> src/vdbetrace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:       pVar = &p->aVar[idx-1];",
          "131:       if( pVar->flags & MEM_Null ){",
          "132:         sqlite3_str_append(&out, \"NULL\", 4);",
          "134:         sqlite3_str_appendf(&out, \"%lld\", pVar->u.i);",
          "135:       }else if( pVar->flags & MEM_Real ){",
          "136:         sqlite3_str_appendf(&out, \"%!.15g\", pVar->u.r);",
          "",
          "[Removed Lines]",
          "133:       }else if( pVar->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "133:       }else if( pVar->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
      "candidate_info": {
        "commit_hash": "5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
        "files": [
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "test/fts3atoken.test"
        ],
        "message": "The two-argument version of fts3_tokenizer() works regardless of the value of SQLITE_DBCONFIG_ENABLE_FT3_TOKENIZER as long as the second argument is a bind parameter.\n\nFossilOrigin-Name: ab76e3a90e56bd36a17ded9c7a77e88632ca12d3bd73f197df747a634c81e0cf",
        "before_after_code_files": [
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   nName = sqlite3_value_bytes(argv[0])+1;",
          "81:   if( argc==2 ){",
          "83:       void *pOld;",
          "84:       int n = sqlite3_value_bytes(argv[1]);",
          "85:       if( zName==0 || n!=sizeof(pPtr) ){",
          "",
          "[Removed Lines]",
          "82:     if( fts3TokenizerEnabled(context) ){",
          "",
          "[Added Lines]",
          "82:     if( fts3TokenizerEnabled(context) || sqlite3_value_frombind(argv[1]) ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98da62dfdacc6b3c490c387d1f8a74cc5daa978776967e264ad4800c380b0ddf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   }",
          "87: } {{There was movement at the station}}",
          "89: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 0",
          "90: do_catchsql_test 1.6 {",
          "91:   SELECT fts3_tokenizer('blah', fts3_tokenizer('simple')) IS NULL;",
          "92: } {1 {fts3tokenize disabled}}",
          "95: #--------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: unset -nocomplain simple",
          "90: set simple [db one {SELECT fts3_tokenizer('simple')}]",
          "95: do_test fts3atoken-1.7 {",
          "96:   execsql {",
          "97:     SELECT fts3_tokenizer('blah2', $simple) IS NULL;",
          "98:   }",
          "99: } {1}",
          "100: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "101: do_test fts3atoken-1.8 {",
          "102:   execsql {",
          "103:     SELECT fts3_tokenizer('blah2') == fts3_tokenizer('simple');",
          "104:   }",
          "105: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b13365bbadb5e16da3579fcb8941799760817c1",
      "candidate_info": {
        "commit_hash": "9b13365bbadb5e16da3579fcb8941799760817c1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9b13365bbadb5e16da3579fcb8941799760817c1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Ensure that a key comparison does not read a collating sequence past the end of the KeyInfo, even if the key field of an index is corrupted by having a string in the last column instead of the ROWID.\n\nFossilOrigin-Name: 058a8006dceda78a894ea9446f057aa60b6d38e96506d4d91bda0ee2f9314ba3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ecaaee69f49e43d38047b7d53b82689eba7f7d33541fcac3c32b6dc8a568458",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3906:     if( rc!=0 ){",
          "3908:       if( pKeyInfo->aSortOrder[i] ){",
          "",
          "[Removed Lines]",
          "3905:     rc = sqlite3MemCompare(&mem1, &pPKey2->aMem[i], pKeyInfo->aColl[i]);",
          "",
          "[Added Lines]",
          "3905:     rc = sqlite3MemCompare(&mem1, &pPKey2->aMem[i],",
          "3906:                            pKeyInfo->nAllField>i ? pKeyInfo->aColl[i] : 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4333:         mem1.n = (serial_type - 12) / 2;",
          "4334:         testcase( (d1+mem1.n)==(unsigned)nKey1 );",
          "4335:         testcase( (d1+mem1.n+1)==(unsigned)nKey1 );",
          "4337:           pPKey2->errCode = (u8)SQLITE_CORRUPT_BKPT;",
          "4340:           mem1.enc = pKeyInfo->enc;",
          "4341:           mem1.db = pKeyInfo->db;",
          "4342:           mem1.flags = MEM_Str;",
          "",
          "[Removed Lines]",
          "4336:         if( (d1+mem1.n) > (unsigned)nKey1 ){",
          "4339:         }else if( (pKeyInfo = pPKey2->pKeyInfo)->aColl[i] ){",
          "",
          "[Added Lines]",
          "4337:         if( (d1+mem1.n) > (unsigned)nKey1",
          "4338:          || (pKeyInfo = pPKey2->pKeyInfo)->nAllField<=i",
          "4339:         ){",
          "4342:         }else if( pKeyInfo->aColl[i] ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}