{
  "cve_id": "CVE-2015-6819",
  "cve_desc": "Multiple integer underflows in the ff_mjpeg_decode_frame function in libavcodec/mjpegdec.c in FFmpeg before 2.7.2 allow remote attackers to cause a denial of service (out-of-bounds array access) or possibly have unspecified other impact via crafted MJPEG data.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "84afc6b70d24fc0bf686e43138c96cf60a9445fe",
  "patch_info": {
    "commit_hash": "84afc6b70d24fc0bf686e43138c96cf60a9445fe",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/84afc6b70d24fc0bf686e43138c96cf60a9445fe",
    "files": [
      "libavcodec/mjpegdec.c"
    ],
    "message": "avcodec/mjpegdec: Fix small picture upscale\n\nFixes out of array access\n\nFixes: asan_heap-oob_1dd60fd_267_cov_2954683513_5baad44ca4702949724234e35c5bb341.jpg\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
    ]
  },
  "patch_diff": {
    "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c": [
      "File: libavcodec/mjpegdec.c -> libavcodec/mjpegdec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2195:                     }",
      "2196:                 } else if (s->upscale_h[p] == 2) {",
      "2197:                     if (is16bit) {",
      "2200:                     } else {",
      "2203:                     }",
      "2204:                     for (index = w - 3; index > 0; index--) {",
      "2205:                         line[index] = (line[index / 3] + line[(index + 1) / 3] + line[(index + 2) / 3] + 1) / 3;",
      "",
      "[Removed Lines]",
      "2198:                         ((uint16_t*)line)[w - 1] =",
      "2199:                         ((uint16_t*)line)[w - 2] = ((uint16_t*)line)[(w - 1) / 3];",
      "2201:                         line[w - 1] =",
      "2202:                         line[w - 2] = line[(w - 1) / 3];",
      "",
      "[Added Lines]",
      "2198:                         ((uint16_t*)line)[w - 1] = ((uint16_t*)line)[(w - 1) / 3];",
      "2199:                         if (w > 1)",
      "2200:                             ((uint16_t*)line)[w - 2] = ((uint16_t*)line)[w - 1];",
      "2202:                         line[w - 1] = line[(w - 1) / 3];",
      "2203:                         if (w > 1)",
      "2204:                             line[w - 2] = line[w - 1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1fbe29e51c4bda5419eb7b9239acf8055e7b0e8",
      "candidate_info": {
        "commit_hash": "b1fbe29e51c4bda5419eb7b9239acf8055e7b0e8",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/b1fbe29e51c4bda5419eb7b9239acf8055e7b0e8",
        "files": [
          "libavcodec/mjpegdec.c"
        ],
        "message": "avcodec/mjpegdec: Support 31111100 sampling\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ],
          "candidate": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c": [
          "File: libavcodec/mjpegdec.c -> libavcodec/mjpegdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "518:             s->avctx->color_range = s->cs_itu601 ? AVCOL_RANGE_MPEG : AVCOL_RANGE_JPEG;",
          "519:         }",
          "520:         break;",
          "521:     case 0x22121100:",
          "522:     case 0x22111200:",
          "523:         if (s->bits <= 8) s->avctx->pix_fmt = s->cs_itu601 ? AV_PIX_FMT_YUV422P : AV_PIX_FMT_YUVJ422P;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521:     case 0x31111100:",
          "522:         if (s->bits > 8)",
          "523:             goto unk_pixfmt;",
          "524:         s->avctx->pix_fmt = s->cs_itu601 ? AV_PIX_FMT_YUV444P : AV_PIX_FMT_YUVJ444P;",
          "525:         s->avctx->color_range = s->cs_itu601 ? AVCOL_RANGE_MPEG : AVCOL_RANGE_JPEG;",
          "526:         s->upscale_h[1] = s->upscale_h[2] = 2;",
          "527:         break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2162:                 h = (h+1)>>1;",
          "2163:             av_assert0(w > 0);",
          "2164:             for (i = 0; i < h; i++) {",
          "2172:                 }",
          "2173:                 line += s->linesize[p];",
          "2174:             }",
          "",
          "[Removed Lines]",
          "2165:                 if (is16bit) ((uint16_t*)line)[w - 1] = ((uint16_t*)line)[(w - 1) / 2];",
          "2166:                 else                      line[w - 1] = line[(w - 1) / 2];",
          "2167:                 for (index = w - 2; index > 0; index--) {",
          "2168:                     if (is16bit)",
          "2169:                         ((uint16_t*)line)[index] = (((uint16_t*)line)[index / 2] + ((uint16_t*)line)[(index + 1) / 2]) >> 1;",
          "2170:                     else",
          "2171:                         line[index] = (line[index / 2] + line[(index + 1) / 2]) >> 1;",
          "",
          "[Added Lines]",
          "2172:                 if (s->upscale_h[p] == 1) {",
          "2173:                     if (is16bit) ((uint16_t*)line)[w - 1] = ((uint16_t*)line)[(w - 1) / 2];",
          "2174:                     else                      line[w - 1] = line[(w - 1) / 2];",
          "2175:                     for (index = w - 2; index > 0; index--) {",
          "2176:                         if (is16bit)",
          "2177:                             ((uint16_t*)line)[index] = (((uint16_t*)line)[index / 2] + ((uint16_t*)line)[(index + 1) / 2]) >> 1;",
          "2178:                         else",
          "2179:                             line[index] = (line[index / 2] + line[(index + 1) / 2]) >> 1;",
          "2180:                     }",
          "2181:                 } else if (s->upscale_h[p] == 2) {",
          "2182:                     if (is16bit) {",
          "2183:                         ((uint16_t*)line)[w - 1] =",
          "2184:                         ((uint16_t*)line)[w - 2] = ((uint16_t*)line)[(w - 1) / 3];",
          "2185:                     } else {",
          "2186:                         line[w - 1] =",
          "2187:                         line[w - 2] = line[(w - 1) / 3];",
          "2188:                     }",
          "2189:                     for (index = w - 3; index > 0; index--) {",
          "2190:                         line[index] = (line[index / 3] + line[(index + 1) / 3] + line[(index + 2) / 3] + 1) / 3;",
          "2191:                     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9059ce79441c15623ec0b4d4567b36fbf14e7ae",
      "candidate_info": {
        "commit_hash": "f9059ce79441c15623ec0b4d4567b36fbf14e7ae",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/f9059ce79441c15623ec0b4d4567b36fbf14e7ae",
        "files": [
          "libavcodec/mjpegdec.c"
        ],
        "message": "avcodec/mjpegdec: upgrade upscale_h to support multiple planes\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ],
          "candidate": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c": [
          "File: libavcodec/mjpegdec.c -> libavcodec/mjpegdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:             goto unk_pixfmt;",
          "416:         s->avctx->color_range = s->cs_itu601 ? AVCOL_RANGE_MPEG : AVCOL_RANGE_JPEG;",
          "417:         s->upscale_v = 2;",
          "419:         s->chroma_height = s->height;",
          "420:         break;",
          "421:     case 0x21211100:",
          "",
          "[Removed Lines]",
          "418:         s->upscale_h = (pix_fmt_id == 0x22122100);",
          "",
          "[Added Lines]",
          "418:         s->upscale_h = 2*(pix_fmt_id == 0x22122100);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:             goto unk_pixfmt;",
          "426:         s->avctx->color_range = s->cs_itu601 ? AVCOL_RANGE_MPEG : AVCOL_RANGE_JPEG;",
          "427:         s->upscale_v = (pix_fmt_id == 0x22211200);",
          "429:         s->chroma_height = s->height;",
          "430:         break;",
          "431:     case 0x22221100:",
          "",
          "[Removed Lines]",
          "428:         s->upscale_h = 2;",
          "",
          "[Added Lines]",
          "428:         s->upscale_h = 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "434:             goto unk_pixfmt;",
          "435:         s->avctx->color_range = s->cs_itu601 ? AVCOL_RANGE_MPEG : AVCOL_RANGE_JPEG;",
          "436:         s->upscale_v = 2;",
          "438:         s->chroma_height = s->height / 2;",
          "439:         break;",
          "440:     case 0x11000000:",
          "",
          "[Removed Lines]",
          "437:         s->upscale_h = 2;",
          "",
          "[Added Lines]",
          "437:         s->upscale_h = 4;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "458:         else",
          "459:             goto unk_pixfmt;",
          "460:         s->avctx->color_range = s->cs_itu601 ? AVCOL_RANGE_MPEG : AVCOL_RANGE_JPEG;",
          "462:         s->chroma_height = s->height / 2;",
          "463:         break;",
          "464:     case 0x21111100:",
          "",
          "[Removed Lines]",
          "461:         s->upscale_h = (pix_fmt_id == 0x22211100) * 2 + (pix_fmt_id == 0x22112100);",
          "",
          "[Added Lines]",
          "461:         s->upscale_h = 4 * (pix_fmt_id == 0x22211100) + 2 * (pix_fmt_id == 0x22112100);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2035:     return ret;",
          "2036: the_end:",
          "2037:     if (s->upscale_h) {",
          "2039:         av_assert0(avctx->pix_fmt == AV_PIX_FMT_YUVJ444P ||",
          "2040:                    avctx->pix_fmt == AV_PIX_FMT_YUV444P  ||",
          "2041:                    avctx->pix_fmt == AV_PIX_FMT_YUVJ440P ||",
          "2042:                    avctx->pix_fmt == AV_PIX_FMT_YUV440P);",
          "2047:         }",
          "2048:     }",
          "2049:     if (s->upscale_v) {",
          "",
          "[Removed Lines]",
          "2038:         uint8_t *line = s->picture_ptr->data[s->upscale_h];",
          "2043:         for (i = 0; i < s->chroma_height; i++) {",
          "2044:             for (index = s->width - 1; index; index--)",
          "2045:                 line[index] = (line[index / 2] + line[(index + 1) / 2]) >> 1;",
          "2046:             line += s->linesize[s->upscale_h];",
          "",
          "[Added Lines]",
          "2038:         int p;",
          "2043:         for (p = 1; p<4; p++) {",
          "2044:             uint8_t *line = s->picture_ptr->data[p];",
          "2045:             if (!(s->upscale_h & (1<<p)))",
          "2046:                 continue;",
          "2047:             for (i = 0; i < s->chroma_height; i++) {",
          "2048:                 for (index = s->width - 1; index; index--)",
          "2049:                     line[index] = (line[index / 2] + line[(index + 1) / 2]) >> 1;",
          "2050:                 line += s->linesize[p];",
          "2051:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}