{
  "cve_id": "CVE-2016-0798",
  "cve_desc": "Memory leak in the SRP_VBASE_get_by_user implementation in OpenSSL 1.0.1 before 1.0.1s and 1.0.2 before 1.0.2g allows remote attackers to cause a denial of service (memory consumption) by providing an invalid username in a connection attempt, related to apps/s_server.c and crypto/srp/srp_vfy.c.",
  "repo": "openssl/openssl",
  "patch_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
  "patch_info": {
    "commit_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "files": [
      "CHANGES",
      "apps/s_server.c",
      "crypto/srp/srp_vfy.c",
      "include/openssl/srp.h",
      "util/libeay.num"
    ],
    "message": "CVE-2016-0798: avoid memory leak in SRP\n\nThe SRP user database lookup method SRP_VBASE_get_by_user had confusing\nmemory management semantics; the returned pointer was sometimes newly\nallocated, and sometimes owned by the callee. The calling code has no\nway of distinguishing these two cases.\n\nSpecifically, SRP servers that configure a secret seed to hide valid\nlogin information are vulnerable to a memory leak: an attacker\nconnecting with an invalid username can cause a memory leak of around\n300 bytes per connection.\n\nServers that do not configure SRP, or configure SRP but do not configure\na seed are not vulnerable.\n\nIn Apache, the seed directive is known as SSLSRPUnknownUserSeed.\n\nTo mitigate the memory leak, the seed handling in SRP_VBASE_get_by_user\nis now disabled even if the user has configured a seed.\n\nApplications are advised to migrate to SRP_VBASE_get1_by_user. However,\nnote that OpenSSL makes no strong guarantees about the\nindistinguishability of valid and invalid logins. In particular,\ncomputations are currently not carried out in constant time.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "apps/s_server.c||apps/s_server.c",
      "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
      "include/openssl/srp.h||include/openssl/srp.h",
      "util/libeay.num||util/libeay.num"
    ]
  },
  "patch_diff": {
    "apps/s_server.c||apps/s_server.c": [
      "File: apps/s_server.c -> apps/s_server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352: static int ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)",
      "353: {",
      "354:     srpsrvparm *p = (srpsrvparm *) arg;",
      "355:     if (p->login == NULL && p->user == NULL) {",
      "356:         p->login = SSL_get_srp_username(s);",
      "357:         BIO_printf(bio_err, \"SRP username = \\\"%s\\\"\\n\", p->login);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355:     int ret = SSL3_AL_FATAL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:     if (p->user == NULL) {",
      "362:         BIO_printf(bio_err, \"User %s doesn't exist\\n\", p->login);",
      "364:     }",
      "365:     if (SSL_set_srp_server_param",
      "366:         (s, p->user->N, p->user->g, p->user->s, p->user->v,",
      "367:          p->user->info) < 0) {",
      "370:     }",
      "371:     BIO_printf(bio_err,",
      "372:                \"SRP parameters set: username = \\\"%s\\\" info=\\\"%s\\\" \\n\",",
      "373:                p->login, p->user->info);",
      "375:     p->user = NULL;",
      "376:     p->login = NULL;",
      "378: }",
      "380: #endif",
      "",
      "[Removed Lines]",
      "363:         return SSL3_AL_FATAL;",
      "369:         return SSL3_AL_FATAL;",
      "377:     return SSL_ERROR_NONE;",
      "",
      "[Added Lines]",
      "365:         goto err;",
      "372:         goto err;",
      "377:     ret = SSL_ERROR_NONE;",
      "379: err:",
      "380:     SRP_user_pwd_free(p->user);",
      "383:     return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2325: #ifndef OPENSSL_NO_SRP",
      "2326:                 while (SSL_get_error(con, k) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2327:                     BIO_printf(bio_s_out, \"LOOKUP renego during write\\n\");",
      "2328:                     srp_callback_parm.user =",
      "2331:                     if (srp_callback_parm.user)",
      "2332:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2333:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2329:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2330:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2334:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2336:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2337:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2393: #ifndef OPENSSL_NO_SRP",
      "2394:                 while (SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2395:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2396:                     srp_callback_parm.user =",
      "2399:                     if (srp_callback_parm.user)",
      "2400:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2401:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2397:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2398:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2403:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2405:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2406:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2520:         while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2521:             BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
      "2522:                        srp_callback_parm.login);",
      "2523:             srp_callback_parm.user =",
      "2526:             if (srp_callback_parm.user)",
      "2527:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2528:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2524:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2525:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2531:             SRP_user_pwd_free(srp_callback_parm.user);",
      "2533:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2534:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2732:                 if (BIO_should_io_special(io)",
      "2733:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "2734:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2735:                     srp_callback_parm.user =",
      "2738:                     if (srp_callback_parm.user)",
      "2739:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2740:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2736:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2737:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2744:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2746:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2747:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3093:         if (BIO_should_io_special(io)",
      "3094:             && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3095:             BIO_printf(bio_s_out, \"LOOKUP renego during accept\\n\");",
      "3096:             srp_callback_parm.user =",
      "3099:             if (srp_callback_parm.user)",
      "3100:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3101:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3097:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3098:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3106:             SRP_user_pwd_free(srp_callback_parm.user);",
      "3108:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3109:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3121:                 if (BIO_should_io_special(io)",
      "3122:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3123:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "3124:                     srp_callback_parm.user =",
      "3127:                     if (srp_callback_parm.user)",
      "3128:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3129:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3125:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3126:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3135:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "3137:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3138:                                                srp_callback_parm.login);",
      "",
      "---------------"
    ],
    "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
      "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "184:     return olddst;",
      "185: }",
      "188: {",
      "189:     if (user_pwd == NULL)",
      "190:         return;",
      "",
      "[Removed Lines]",
      "187: static void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "[Added Lines]",
      "187: void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:     return (vinfo->s != NULL && vinfo->v != NULL);",
      "247: }",
      "249: SRP_VBASE *SRP_VBASE_new(char *seed_key)",
      "250: {",
      "251:     SRP_VBASE *vb = OPENSSL_malloc(sizeof(*vb));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249: static SRP_user_pwd *srp_user_pwd_dup(SRP_user_pwd *src)",
      "250: {",
      "251:     SRP_user_pwd *ret;",
      "253:     if (src == NULL)",
      "254:         return NULL;",
      "255:     if ((ret = SRP_user_pwd_new()) == NULL)",
      "256:         return NULL;",
      "258:     SRP_user_pwd_set_gN(ret, src->g, src->N);",
      "259:     if (!SRP_user_pwd_set_ids(ret, src->id, src->info)",
      "260:         || !SRP_user_pwd_set_sv_BN(ret, BN_dup(src->s), BN_dup(src->v))) {",
      "261:             SRP_user_pwd_free(ret);",
      "262:             return NULL;",
      "263:     }",
      "264:     return ret;",
      "265: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "468: }",
      "471: {",
      "472:     int i;",
      "473:     SRP_user_pwd *user;",
      "478:     if (vb == NULL)",
      "479:         return NULL;",
      "480:     for (i = 0; i < sk_SRP_user_pwd_num(vb->users_pwd); i++) {",
      "481:         user = sk_SRP_user_pwd_value(vb->users_pwd, i);",
      "482:         if (strcmp(user->id, username) == 0)",
      "483:             return user;",
      "484:     }",
      "485:     if ((vb->seed_key == NULL) ||",
      "486:         (vb->default_g == NULL) || (vb->default_N == NULL))",
      "487:         return NULL;",
      "",
      "[Removed Lines]",
      "470: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "474:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "475:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "476:     EVP_MD_CTX *ctxt = NULL;",
      "",
      "[Added Lines]",
      "488: static SRP_user_pwd *find_user(SRP_VBASE *vb, char *username)",
      "502:     return NULL;",
      "503: }",
      "511: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "512: {",
      "513:     return find_user(vb, username);",
      "514: }",
      "520: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)",
      "521: {",
      "522:     SRP_user_pwd *user;",
      "523:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "524:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "525:     EVP_MD_CTX *ctxt = NULL;",
      "527:     if (vb == NULL)",
      "528:         return NULL;",
      "530:     if ((user = find_user(vb, username)) != NULL)",
      "531:         return srp_user_pwd_dup(user);",
      "",
      "---------------"
    ],
    "include/openssl/srp.h||include/openssl/srp.h": [
      "File: include/openssl/srp.h -> include/openssl/srp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: DEFINE_STACK_OF(SRP_gN_cache)",
      "87: typedef struct SRP_user_pwd_st {",
      "88:     char *id;",
      "89:     BIGNUM *s;",
      "90:     BIGNUM *v;",
      "91:     const BIGNUM *g;",
      "92:     const BIGNUM *N;",
      "93:     char *info;",
      "94: } SRP_user_pwd;",
      "96: DEFINE_STACK_OF(SRP_user_pwd)",
      "98: typedef struct SRP_VBASE_st {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99: void SRP_user_pwd_free(SRP_user_pwd *user_pwd);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118: SRP_VBASE *SRP_VBASE_new(char *seed_key);",
      "119: void SRP_VBASE_free(SRP_VBASE *vb);",
      "120: int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);",
      "122: char *SRP_create_verifier(const char *user, const char *pass, char **salt,",
      "123:                           char **verifier, const char *N, const char *g);",
      "124: int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,",
      "",
      "[Removed Lines]",
      "121: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username);",
      "",
      "[Added Lines]",
      "128: DEPRECATEDIN_1_1_0(SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username))",
      "130: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);",
      "",
      "---------------"
    ],
    "util/libeay.num||util/libeay.num": [
      "File: util/libeay.num -> util/libeay.num",
      "--- Hunk 1 ---",
      "[Context before]",
      "4073: OPENSSL_strncasecmp                     4566 1_1_0 EXIST::FUNCTION:",
      "4074: OPENSSL_gmtime                          4567 1_1_0 EXIST::FUNCTION:",
      "4075: OPENSSL_gmtime_adj                      4568 1_1_0 EXIST::FUNCTION:",
      "4077: SRP_Calc_server_key                     4570 1_1_0 EXIST::FUNCTION:SRP",
      "4078: SRP_create_verifier                     4571 1_1_0 EXIST::FUNCTION:SRP",
      "4079: SRP_create_verifier_BN                  4572 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Removed Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Added Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:DEPRECATEDIN_1_1_0,SRP",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4711: OPENSSL_INIT_new                        5215 1_1_0 EXIST::FUNCTION:",
      "4712: OPENSSL_INIT_free                       5216 1_1_0 EXIST::FUNCTION:",
      "4713: OPENSSL_INIT_set_config_filename        5217 1_1_0 EXIST::FUNCTION:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4714: SRP_user_pwd_free                       5218 1_1_0 EXIST::FUNCTION:SRP",
      "4715: SRP_VBASE_get1_by_user                  5219 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c41ee7c6530b23267ed20f95143a2a682796fef",
      "candidate_info": {
        "commit_hash": "6c41ee7c6530b23267ed20f95143a2a682796fef",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6c41ee7c6530b23267ed20f95143a2a682796fef",
        "files": [
          "util/libeay.num"
        ],
        "message": "make update\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4592: X509_REQ_get_version                    4951 EXIST::FUNCTION:",
          "4593: X509_REQ_get_subject_name               4952 EXIST::FUNCTION:",
          "4594: X509_CRL_up_ref                         4953 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4595: X509_get_extension_flags                4954 EXIST::FUNCTION:",
          "4596: X509_get_extended_key_usage             4955 EXIST::FUNCTION:",
          "4597: X509_get_key_usage                      4956 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e25dd6da17eefb3c0c31ac4ad436b70f6d39f86",
      "candidate_info": {
        "commit_hash": "7e25dd6da17eefb3c0c31ac4ad436b70f6d39f86",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7e25dd6da17eefb3c0c31ac4ad436b70f6d39f86",
        "files": [
          "apps/s_client.c",
          "apps/s_server.c"
        ],
        "message": "Add s_server and s_client async support\n\nA new -async option is added which activates SSL_MODE_ASYNC. Also\nSSL_WANT_ASYNC errors are handled appropriately.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "apps/s_client.c||apps/s_client.c",
          "apps/s_server.c||apps/s_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "apps/s_server.c||apps/s_server.c"
          ],
          "candidate": [
            "apps/s_server.c||apps/s_server.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: extern int verify_return_error;",
          "183: extern int verify_quiet;",
          "185: static int c_nbio = 0;",
          "186: static int c_tlsextdebug = 0;",
          "187: static int c_status_req = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: static int async = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "472:     OPT_CHAINCAFILE, OPT_VERIFYCAFILE, OPT_NEXTPROTONEG, OPT_ALPN,",
          "473:     OPT_SERVERINFO, OPT_STARTTLS, OPT_SERVERNAME, OPT_JPAKE,",
          "474:     OPT_USE_SRTP, OPT_KEYMATEXPORT, OPT_KEYMATEXPORTLEN, OPT_SMTPHOST,",
          "475:     OPT_V_ENUM,",
          "476:     OPT_X_ENUM,",
          "477:     OPT_S_ENUM,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "476:     OPT_ASYNC,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "557:      \"types  Send empty ClientHello extensions (comma-separated numbers)\"},",
          "558:     {\"alpn\", OPT_ALPN, 's',",
          "559:      \"Enable ALPN extension, considering named protocols supported (comma-separated list)\"},",
          "560:     OPT_S_OPTIONS,",
          "561:     OPT_V_OPTIONS,",
          "562:     OPT_X_OPTIONS,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:     {\"async\", OPT_ASYNC, '-', \"Support asynchronous operation\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1061:         case OPT_KEYMATEXPORTLEN:",
          "1062:             keymatexportlen = atoi(opt_arg());",
          "1063:             break;",
          "1064:         }",
          "1065:     }",
          "1066:     argc = opt_num_rest();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1067:         case OPT_ASYNC:",
          "1068:             async = 1;",
          "1069:             break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1199:         goto end;",
          "1200:     }",
          "1202:     if (!config_ctx(cctx, ssl_args, ctx, 1, jpake_secret == NULL))",
          "1203:         goto end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1208:     if (async)",
          "1209:         SSL_CTX_set_mode(ctx, SSL_MODE_ASYNC);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1883:                 write_ssl = 1;",
          "1884:                 read_tty = 0;",
          "1885:                 break;",
          "1886:             case SSL_ERROR_WANT_READ:",
          "1887:                 BIO_printf(bio_c_out, \"write R BLOCK\\n\");",
          "1888:                 write_tty = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1895:             case SSL_ERROR_WANT_ASYNC:",
          "1896:                 BIO_printf(bio_c_out, \"write A BLOCK\\n\");",
          "1897:                 write_ssl = 1;",
          "1898:                 read_tty = 0;",
          "1899:                 break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1965:                 read_ssl = 0;",
          "1966:                 write_tty = 1;",
          "1967:                 break;",
          "1968:             case SSL_ERROR_WANT_WRITE:",
          "1969:                 BIO_printf(bio_c_out, \"read W BLOCK\\n\");",
          "1970:                 write_ssl = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1982:             case SSL_ERROR_WANT_ASYNC:",
          "1983:                 BIO_printf(bio_c_out, \"read A BLOCK\\n\");",
          "1984:                 write_tty = 0;",
          "1985:                 read_ssl = 1;",
          "1986:                 if ((read_tty == 0) && (write_ssl == 0))",
          "1987:                     write_ssl = 1;",
          "1988:                 break;",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "252: static char *keymatexportlabel = NULL;",
          "253: static int keymatexportlen = 20;",
          "255: #ifndef OPENSSL_NO_ENGINE",
          "256: static char *engine_id = NULL;",
          "257: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255: static int async = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "402:     s_msg = 0;",
          "403:     s_quiet = 0;",
          "404:     s_brief = 0;",
          "405: #ifndef OPENSSL_NO_ENGINE",
          "406:     engine_id = NULL;",
          "407: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     async = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "805:     OPT_SECURITY_DEBUG, OPT_SECURITY_DEBUG_VERBOSE, OPT_STATE, OPT_CRLF,",
          "806:     OPT_QUIET, OPT_BRIEF, OPT_NO_TMP_RSA, OPT_NO_DHE, OPT_NO_ECDHE,",
          "807:     OPT_NO_RESUME_EPHEMERAL, OPT_PSK_HINT, OPT_PSK, OPT_SRPVFILE,",
          "809:     OPT_SSL3,",
          "810:     OPT_TLS1_2, OPT_TLS1_1, OPT_TLS1, OPT_DTLS, OPT_DTLS1,",
          "811:     OPT_DTLS1_2, OPT_TIMEOUT, OPT_MTU, OPT_CHAIN, OPT_LISTEN,",
          "",
          "[Removed Lines]",
          "808:     OPT_SRPUSERSEED, OPT_REV, OPT_WWW, OPT_UPPER_WWW, OPT_HTTP,",
          "",
          "[Added Lines]",
          "811:     OPT_SRPUSERSEED, OPT_REV, OPT_WWW, OPT_UPPER_WWW, OPT_HTTP, OPT_ASYNC,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "914:     {\"security_debug_verbose\", OPT_SECURITY_DEBUG_VERBOSE, '-'},",
          "915:     {\"brief\", OPT_BRIEF, '-'},",
          "916:     {\"rev\", OPT_REV, '-'},",
          "917:     OPT_S_OPTIONS,",
          "918:     OPT_V_OPTIONS,",
          "919:     OPT_X_OPTIONS,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "920:     {\"async\", OPT_ASYNC, '-', \"Operate in asynchronous mode\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1438:         case OPT_KEYMATEXPORTLEN:",
          "1439:             keymatexportlen = atoi(opt_arg());",
          "1440:             break;",
          "1441:         }",
          "1442:     }",
          "1443:     argc = opt_num_rest();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1445:         case OPT_ASYNC:",
          "1446:             async = 1;",
          "1447:             break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1650:     else",
          "1651:         SSL_CTX_sess_set_cache_size(ctx, 128);",
          "1653: #ifndef OPENSSL_NO_SRTP",
          "1654:     if (srtp_profiles != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1660:     if (async)",
          "1661:         SSL_CTX_set_mode(ctx, SSL_MODE_ASYNC);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1721:         else",
          "1722:             SSL_CTX_sess_set_cache_size(ctx2, 128);",
          "1724:         if ((!SSL_CTX_load_verify_locations(ctx2, CAfile, CApath)) ||",
          "1725:             (!SSL_CTX_set_default_verify_paths(ctx2))) {",
          "1726:             ERR_print_errors(bio_err);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1734:         if (async)",
          "1735:    SSL_CTX_set_mode(ctx2, SSL_MODE_ASYNC);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2281:                 switch (SSL_get_error(con, k)) {",
          "2282:                 case SSL_ERROR_NONE:",
          "2283:                     break;",
          "2284:                 case SSL_ERROR_WANT_WRITE:",
          "2285:                 case SSL_ERROR_WANT_READ:",
          "2286:                 case SSL_ERROR_WANT_X509_LOOKUP:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2297:                 case SSL_ERROR_WANT_ASYNC:",
          "2298:                     BIO_printf(bio_s_out, \"Write BLOCK (Async)\\n\");",
          "2299:                     break;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2345:                     if (SSL_pending(con))",
          "2346:                         goto again;",
          "2347:                     break;",
          "2348:                 case SSL_ERROR_WANT_WRITE:",
          "2349:                 case SSL_ERROR_WANT_READ:",
          "2350:                     BIO_printf(bio_s_out, \"Read BLOCK\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2364:                 case SSL_ERROR_WANT_ASYNC:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2423:         }",
          "2424:     } else",
          "2425: #endif",
          "2426:         i = SSL_accept(con);",
          "2428: #ifdef CERT_CB_TEST_RETRY",
          "2433:                        \"LOOKUP from certificate callback during accept\\n\");",
          "2435:         }",
          "2437: #endif",
          "2438: #ifndef OPENSSL_NO_SRP",
          "2452: #endif",
          "2454:     if (i <= 0) {",
          "2455:         if ((dtlslisten && i == 0)",
          "",
          "[Removed Lines]",
          "2429:     {",
          "2430:         while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP",
          "2431:                && SSL_get_state(con) == TLS_ST_SR_CLNT_HELLO) {",
          "2432:             BIO_printf(bio_err,",
          "2434:             i = SSL_accept(con);",
          "2436:     }",
          "2439:     while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
          "2440:         BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
          "2441:                    srp_callback_parm.login);",
          "2442:         srp_callback_parm.user =",
          "2443:             SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "2444:                                   srp_callback_parm.login);",
          "2445:         if (srp_callback_parm.user)",
          "2446:             BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2447:                        srp_callback_parm.user->info);",
          "2448:         else",
          "2449:             BIO_printf(bio_s_out, \"LOOKUP not successful\\n\");",
          "2450:         i = SSL_accept(con);",
          "2451:     }",
          "",
          "[Added Lines]",
          "2444:     do {",
          "2448:         {",
          "2449:             while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP",
          "2450:                     && SSL_get_state(con) == TLS_ST_SR_CLNT_HELLO) {",
          "2451:                 BIO_printf(bio_err,",
          "2453:                 i = SSL_accept(con);",
          "2454:             }",
          "2459:         while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
          "2460:             BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
          "2461:                        srp_callback_parm.login);",
          "2462:             srp_callback_parm.user =",
          "2463:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "2464:                                       srp_callback_parm.login);",
          "2465:             if (srp_callback_parm.user)",
          "2466:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2467:                            srp_callback_parm.user->info);",
          "2468:             else",
          "2469:                 BIO_printf(bio_s_out, \"LOOKUP not successful\\n\");",
          "2470:             i = SSL_accept(con);",
          "2471:         }",
          "2473:     } while (i < 0 && SSL_waiting_for_async(con));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59a908f1e8380412a81392c468b83bf6071beb2a",
      "candidate_info": {
        "commit_hash": "59a908f1e8380412a81392c468b83bf6071beb2a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/59a908f1e8380412a81392c468b83bf6071beb2a",
        "files": [
          "CHANGES",
          "apps/s_server.c",
          "crypto/srp/srp.h",
          "crypto/srp/srp_vfy.c",
          "util/libeay.num"
        ],
        "message": "CVE-2016-0798: avoid memory leak in SRP\n\nThe SRP user database lookup method SRP_VBASE_get_by_user had confusing\nmemory management semantics; the returned pointer was sometimes newly\nallocated, and sometimes owned by the callee. The calling code has no\nway of distinguishing these two cases.\n\nSpecifically, SRP servers that configure a secret seed to hide valid\nlogin information are vulnerable to a memory leak: an attacker\nconnecting with an invalid username can cause a memory leak of around\n300 bytes per connection.\n\nServers that do not configure SRP, or configure SRP but do not configure\na seed are not vulnerable.\n\nIn Apache, the seed directive is known as SSLSRPUnknownUserSeed.\n\nTo mitigate the memory leak, the seed handling in SRP_VBASE_get_by_user\nis now disabled even if the user has configured a seed.\n\nApplications are advised to migrate to SRP_VBASE_get1_by_user. However,\nnote that OpenSSL makes no strong guarantees about the\nindistinguishability of valid and invalid logins. In particular,\ncomputations are currently not carried out in constant time.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "apps/s_server.c||apps/s_server.c",
          "crypto/srp/srp.h||crypto/srp/srp.h",
          "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "apps/s_server.c||apps/s_server.c",
            "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "apps/s_server.c||apps/s_server.c",
            "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416: static int MS_CALLBACK ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)",
          "417: {",
          "418:     srpsrvparm *p = (srpsrvparm *) arg;",
          "419:     if (p->login == NULL && p->user == NULL) {",
          "420:         p->login = SSL_get_srp_username(s);",
          "421:         BIO_printf(bio_err, \"SRP username = \\\"%s\\\"\\n\", p->login);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419:     int ret = SSL3_AL_FATAL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:     if (p->user == NULL) {",
          "426:         BIO_printf(bio_err, \"User %s doesn't exist\\n\", p->login);",
          "428:     }",
          "429:     if (SSL_set_srp_server_param",
          "430:         (s, p->user->N, p->user->g, p->user->s, p->user->v,",
          "431:          p->user->info) < 0) {",
          "434:     }",
          "435:     BIO_printf(bio_err,",
          "436:                \"SRP parameters set: username = \\\"%s\\\" info=\\\"%s\\\" \\n\",",
          "437:                p->login, p->user->info);",
          "439:     p->user = NULL;",
          "440:     p->login = NULL;",
          "442: }",
          "444: #endif",
          "",
          "[Removed Lines]",
          "427:         return SSL3_AL_FATAL;",
          "433:         return SSL3_AL_FATAL;",
          "441:     return SSL_ERROR_NONE;",
          "",
          "[Added Lines]",
          "429:         goto err;",
          "436:         goto err;",
          "441:     ret = SSL_ERROR_NONE;",
          "443: err:",
          "444:     SRP_user_pwd_free(p->user);",
          "447:     return ret;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2244: #ifndef OPENSSL_NO_SRP",
          "2245:                 while (SSL_get_error(con, k) == SSL_ERROR_WANT_X509_LOOKUP) {",
          "2246:                     BIO_printf(bio_s_out, \"LOOKUP renego during write\\n\");",
          "2247:                     srp_callback_parm.user =",
          "2250:                     if (srp_callback_parm.user)",
          "2251:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2252:                                    srp_callback_parm.user->info);",
          "",
          "[Removed Lines]",
          "2248:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "2249:                                               srp_callback_parm.login);",
          "",
          "[Added Lines]",
          "2253:                     SRP_user_pwd_free(srp_callback_parm.user);",
          "2255:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "2256:                                                srp_callback_parm.login);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2300: #ifndef OPENSSL_NO_SRP",
          "2301:                 while (SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
          "2302:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
          "2303:                     srp_callback_parm.user =",
          "2306:                     if (srp_callback_parm.user)",
          "2307:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2308:                                    srp_callback_parm.user->info);",
          "",
          "[Removed Lines]",
          "2304:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "2305:                                               srp_callback_parm.login);",
          "",
          "[Added Lines]",
          "2310:                     SRP_user_pwd_free(srp_callback_parm.user);",
          "2312:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "2313:                                                srp_callback_parm.login);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2387:     while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
          "2388:         BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
          "2389:                    srp_callback_parm.login);",
          "2390:         srp_callback_parm.user =",
          "2393:         if (srp_callback_parm.user)",
          "2394:             BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2395:                        srp_callback_parm.user->info);",
          "",
          "[Removed Lines]",
          "2391:             SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "2392:                                   srp_callback_parm.login);",
          "",
          "[Added Lines]",
          "2398:         SRP_user_pwd_free(srp_callback_parm.user);",
          "2400:             SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "2401:                                    srp_callback_parm.login);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2616:                    && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
          "2617:                 BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
          "2618:                            srp_callback_parm.login);",
          "2619:                 srp_callback_parm.user =",
          "2622:                 if (srp_callback_parm.user)",
          "2623:                     BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2624:                                srp_callback_parm.user->info);",
          "",
          "[Removed Lines]",
          "2620:                     SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "2621:                                           srp_callback_parm.login);",
          "",
          "[Added Lines]",
          "2628:                 SRP_user_pwd_free(srp_callback_parm.user);",
          "2630:                     SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "2631:                                            srp_callback_parm.login);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2658:                 if (BIO_should_io_special(io)",
          "2659:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
          "2660:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
          "2661:                     srp_callback_parm.user =",
          "2664:                     if (srp_callback_parm.user)",
          "2665:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2666:                                    srp_callback_parm.user->info);",
          "",
          "[Removed Lines]",
          "2662:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "2663:                                               srp_callback_parm.login);",
          "",
          "[Added Lines]",
          "2671:                     SRP_user_pwd_free(srp_callback_parm.user);",
          "2673:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "2674:                                                srp_callback_parm.login);",
          "",
          "---------------"
        ],
        "crypto/srp/srp.h||crypto/srp/srp.h": [
          "File: crypto/srp/srp.h -> crypto/srp/srp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: DECLARE_STACK_OF(SRP_gN_cache)",
          "84: typedef struct SRP_user_pwd_st {",
          "85:     char *id;",
          "86:     BIGNUM *s;",
          "87:     BIGNUM *v;",
          "88:     const BIGNUM *g;",
          "89:     const BIGNUM *N;",
          "90:     char *info;",
          "91: } SRP_user_pwd;",
          "93: DECLARE_STACK_OF(SRP_user_pwd)",
          "95: typedef struct SRP_VBASE_st {",
          "96:     STACK_OF(SRP_user_pwd) *users_pwd;",
          "97:     STACK_OF(SRP_gN_cache) *gN_cache;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: void SRP_user_pwd_free(SRP_user_pwd *user_pwd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: SRP_VBASE *SRP_VBASE_new(char *seed_key);",
          "116: int SRP_VBASE_free(SRP_VBASE *vb);",
          "117: int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);",
          "118: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username);",
          "119: char *SRP_create_verifier(const char *user, const char *pass, char **salt,",
          "120:                           char **verifier, const char *N, const char *g);",
          "121: int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);",
          "",
          "---------------"
        ],
        "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
          "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     return olddst;",
          "186: }",
          "189: {",
          "190:     if (user_pwd == NULL)",
          "191:         return;",
          "",
          "[Removed Lines]",
          "188: static void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
          "",
          "[Added Lines]",
          "188: void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:     return (vinfo->s != NULL && vinfo->v != NULL);",
          "248: }",
          "250: SRP_VBASE *SRP_VBASE_new(char *seed_key)",
          "251: {",
          "252:     SRP_VBASE *vb = (SRP_VBASE *)OPENSSL_malloc(sizeof(SRP_VBASE));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250: static SRP_user_pwd *srp_user_pwd_dup(SRP_user_pwd *src)",
          "251: {",
          "252:     SRP_user_pwd *ret;",
          "254:     if (src == NULL)",
          "255:         return NULL;",
          "256:     if ((ret = SRP_user_pwd_new()) == NULL)",
          "257:         return NULL;",
          "259:     SRP_user_pwd_set_gN(ret, src->g, src->N);",
          "260:     if (!SRP_user_pwd_set_ids(ret, src->id, src->info)",
          "261:         || !SRP_user_pwd_set_sv_BN(ret, BN_dup(src->s), BN_dup(src->v))) {",
          "262:             SRP_user_pwd_free(ret);",
          "263:             return NULL;",
          "264:     }",
          "265:     return ret;",
          "266: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "469: }",
          "472: {",
          "473:     int i;",
          "474:     SRP_user_pwd *user;",
          "479:     if (vb == NULL)",
          "480:         return NULL;",
          "481:     for (i = 0; i < sk_SRP_user_pwd_num(vb->users_pwd); i++) {",
          "482:         user = sk_SRP_user_pwd_value(vb->users_pwd, i);",
          "483:         if (strcmp(user->id, username) == 0)",
          "484:             return user;",
          "485:     }",
          "486:     if ((vb->seed_key == NULL) ||",
          "487:         (vb->default_g == NULL) || (vb->default_N == NULL))",
          "488:         return NULL;",
          "",
          "[Removed Lines]",
          "471: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
          "475:     unsigned char digv[SHA_DIGEST_LENGTH];",
          "476:     unsigned char digs[SHA_DIGEST_LENGTH];",
          "477:     EVP_MD_CTX ctxt;",
          "",
          "[Added Lines]",
          "489: static SRP_user_pwd *find_user(SRP_VBASE *vb, char *username)",
          "503:     return NULL;",
          "504: }",
          "511: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
          "512: {",
          "513:     return find_user(vb, username);",
          "514: }",
          "520: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)",
          "521: {",
          "522:     SRP_user_pwd *user;",
          "523:     unsigned char digv[SHA_DIGEST_LENGTH];",
          "524:     unsigned char digs[SHA_DIGEST_LENGTH];",
          "525:     EVP_MD_CTX ctxt;",
          "527:     if (vb == NULL)",
          "528:         return NULL;",
          "530:     if ((user = find_user(vb, username)) != NULL)",
          "531:         return srp_user_pwd_dup(user);",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "1807: X509_REQ_digest                         2362 EXIST::FUNCTION:EVP",
          "1808: X509_CRL_digest                         2391 EXIST::FUNCTION:EVP",
          "1809: ASN1_STRING_clear_free                  2392 EXIST::FUNCTION:",
          "1810: d2i_ASN1_SET_OF_PKCS7                   2397 NOEXIST::FUNCTION:",
          "1811: X509_ALGOR_cmp                          2398 EXIST::FUNCTION:",
          "1812: EVP_CIPHER_CTX_set_key_length           2399 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1810: SRP_VBASE_get1_by_user                  2393 EXIST::FUNCTION:SRP",
          "1811: SRP_user_pwd_free                       2394 EXIST::FUNCTION:SRP",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "259b664f950c2ba66fbf4b0fe5281327904ead21",
      "candidate_info": {
        "commit_hash": "259b664f950c2ba66fbf4b0fe5281327904ead21",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/259b664f950c2ba66fbf4b0fe5281327904ead21",
        "files": [
          "CHANGES",
          "apps/s_server.c",
          "crypto/srp/srp.h",
          "crypto/srp/srp_vfy.c",
          "util/libeay.num"
        ],
        "message": "CVE-2016-0798: avoid memory leak in SRP\n\nThe SRP user database lookup method SRP_VBASE_get_by_user had confusing\nmemory management semantics; the returned pointer was sometimes newly\nallocated, and sometimes owned by the callee. The calling code has no\nway of distinguishing these two cases.\n\nSpecifically, SRP servers that configure a secret seed to hide valid\nlogin information are vulnerable to a memory leak: an attacker\nconnecting with an invalid username can cause a memory leak of around\n300 bytes per connection.\n\nServers that do not configure SRP, or configure SRP but do not configure\na seed are not vulnerable.\n\nIn Apache, the seed directive is known as SSLSRPUnknownUserSeed.\n\nTo mitigate the memory leak, the seed handling in SRP_VBASE_get_by_user\nis now disabled even if the user has configured a seed.\n\nApplications are advised to migrate to SRP_VBASE_get1_by_user. However,\nnote that OpenSSL makes no strong guarantees about the\nindistinguishability of valid and invalid logins. In particular,\ncomputations are currently not carried out in constant time.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "apps/s_server.c||apps/s_server.c",
          "crypto/srp/srp.h||crypto/srp/srp.h",
          "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "apps/s_server.c||apps/s_server.c",
            "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "apps/s_server.c||apps/s_server.c",
            "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "429: static int MS_CALLBACK ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)",
          "430: {",
          "431:     srpsrvparm *p = (srpsrvparm *) arg;",
          "432:     if (p->login == NULL && p->user == NULL) {",
          "433:         p->login = SSL_get_srp_username(s);",
          "434:         BIO_printf(bio_err, \"SRP username = \\\"%s\\\"\\n\", p->login);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:     int ret = SSL3_AL_FATAL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:     if (p->user == NULL) {",
          "439:         BIO_printf(bio_err, \"User %s doesn't exist\\n\", p->login);",
          "441:     }",
          "442:     if (SSL_set_srp_server_param",
          "443:         (s, p->user->N, p->user->g, p->user->s, p->user->v,",
          "444:          p->user->info) < 0) {",
          "447:     }",
          "448:     BIO_printf(bio_err,",
          "449:                \"SRP parameters set: username = \\\"%s\\\" info=\\\"%s\\\" \\n\",",
          "450:                p->login, p->user->info);",
          "452:     p->user = NULL;",
          "453:     p->login = NULL;",
          "455: }",
          "457: #endif",
          "",
          "[Removed Lines]",
          "440:         return SSL3_AL_FATAL;",
          "446:         return SSL3_AL_FATAL;",
          "454:     return SSL_ERROR_NONE;",
          "",
          "[Added Lines]",
          "442:         goto err;",
          "449:         goto err;",
          "454:     ret = SSL_ERROR_NONE;",
          "456: err:",
          "457:     SRP_user_pwd_free(p->user);",
          "460:     return ret;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2452: #ifndef OPENSSL_NO_SRP",
          "2453:                 while (SSL_get_error(con, k) == SSL_ERROR_WANT_X509_LOOKUP) {",
          "2454:                     BIO_printf(bio_s_out, \"LOOKUP renego during write\\n\");",
          "2455:                     srp_callback_parm.user =",
          "2458:                     if (srp_callback_parm.user)",
          "2459:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2460:                                    srp_callback_parm.user->info);",
          "",
          "[Removed Lines]",
          "2456:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "2457:                                               srp_callback_parm.login);",
          "",
          "[Added Lines]",
          "2461:                     SRP_user_pwd_free(srp_callback_parm.user);",
          "2463:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "2464:                                                srp_callback_parm.login);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2508: #ifndef OPENSSL_NO_SRP",
          "2509:                 while (SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
          "2510:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
          "2511:                     srp_callback_parm.user =",
          "2514:                     if (srp_callback_parm.user)",
          "2515:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2516:                                    srp_callback_parm.user->info);",
          "",
          "[Removed Lines]",
          "2512:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "2513:                                               srp_callback_parm.login);",
          "",
          "[Added Lines]",
          "2518:                     SRP_user_pwd_free(srp_callback_parm.user);",
          "2520:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "2521:                                                srp_callback_parm.login);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2605:     while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
          "2606:         BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
          "2607:                    srp_callback_parm.login);",
          "2608:         srp_callback_parm.user =",
          "2611:         if (srp_callback_parm.user)",
          "2612:             BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2613:                        srp_callback_parm.user->info);",
          "",
          "[Removed Lines]",
          "2609:             SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "2610:                                   srp_callback_parm.login);",
          "",
          "[Added Lines]",
          "2616:         SRP_user_pwd_free(srp_callback_parm.user);",
          "2618:             SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "2619:                                    srp_callback_parm.login);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2849:                    && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
          "2850:                 BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
          "2851:                            srp_callback_parm.login);",
          "2852:                 srp_callback_parm.user =",
          "2855:                 if (srp_callback_parm.user)",
          "2856:                     BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2857:                                srp_callback_parm.user->info);",
          "",
          "[Removed Lines]",
          "2853:                     SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "2854:                                           srp_callback_parm.login);",
          "",
          "[Added Lines]",
          "2861:                 SRP_user_pwd_free(srp_callback_parm.user);",
          "2863:                     SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "2864:                                            srp_callback_parm.login);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2891:                 if (BIO_should_io_special(io)",
          "2892:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
          "2893:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
          "2894:                     srp_callback_parm.user =",
          "2897:                     if (srp_callback_parm.user)",
          "2898:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2899:                                    srp_callback_parm.user->info);",
          "",
          "[Removed Lines]",
          "2895:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "2896:                                               srp_callback_parm.login);",
          "",
          "[Added Lines]",
          "2904:                     SRP_user_pwd_free(srp_callback_parm.user);",
          "2906:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "2907:                                                srp_callback_parm.login);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3236:         if (BIO_should_io_special(io)",
          "3237:             && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
          "3238:             BIO_printf(bio_s_out, \"LOOKUP renego during accept\\n\");",
          "3239:             srp_callback_parm.user =",
          "3242:             if (srp_callback_parm.user)",
          "3243:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "3244:                            srp_callback_parm.user->info);",
          "",
          "[Removed Lines]",
          "3240:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "3241:                                       srp_callback_parm.login);",
          "",
          "[Added Lines]",
          "3250:             SRP_user_pwd_free(srp_callback_parm.user);",
          "3252:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "3253:                                        srp_callback_parm.login);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3264:                 if (BIO_should_io_special(io)",
          "3265:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
          "3266:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
          "3267:                     srp_callback_parm.user =",
          "3270:                     if (srp_callback_parm.user)",
          "3271:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "3272:                                    srp_callback_parm.user->info);",
          "",
          "[Removed Lines]",
          "3268:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
          "3269:                                               srp_callback_parm.login);",
          "",
          "[Added Lines]",
          "3279:                     SRP_user_pwd_free(srp_callback_parm.user);",
          "3281:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "3282:                                                srp_callback_parm.login);",
          "",
          "---------------"
        ],
        "crypto/srp/srp.h||crypto/srp/srp.h": [
          "File: crypto/srp/srp.h -> crypto/srp/srp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: DECLARE_STACK_OF(SRP_gN_cache)",
          "84: typedef struct SRP_user_pwd_st {",
          "85:     char *id;",
          "86:     BIGNUM *s;",
          "87:     BIGNUM *v;",
          "88:     const BIGNUM *g;",
          "89:     const BIGNUM *N;",
          "90:     char *info;",
          "91: } SRP_user_pwd;",
          "93: DECLARE_STACK_OF(SRP_user_pwd)",
          "95: typedef struct SRP_VBASE_st {",
          "96:     STACK_OF(SRP_user_pwd) *users_pwd;",
          "97:     STACK_OF(SRP_gN_cache) *gN_cache;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: void SRP_user_pwd_free(SRP_user_pwd *user_pwd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: SRP_VBASE *SRP_VBASE_new(char *seed_key);",
          "116: int SRP_VBASE_free(SRP_VBASE *vb);",
          "117: int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);",
          "118: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username);",
          "119: char *SRP_create_verifier(const char *user, const char *pass, char **salt,",
          "120:                           char **verifier, const char *N, const char *g);",
          "121: int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);",
          "",
          "---------------"
        ],
        "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
          "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     return olddst;",
          "186: }",
          "189: {",
          "190:     if (user_pwd == NULL)",
          "191:         return;",
          "",
          "[Removed Lines]",
          "188: static void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
          "",
          "[Added Lines]",
          "188: void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:     return (vinfo->s != NULL && vinfo->v != NULL);",
          "248: }",
          "250: SRP_VBASE *SRP_VBASE_new(char *seed_key)",
          "251: {",
          "252:     SRP_VBASE *vb = (SRP_VBASE *)OPENSSL_malloc(sizeof(SRP_VBASE));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250: static SRP_user_pwd *srp_user_pwd_dup(SRP_user_pwd *src)",
          "251: {",
          "252:     SRP_user_pwd *ret;",
          "254:     if (src == NULL)",
          "255:         return NULL;",
          "256:     if ((ret = SRP_user_pwd_new()) == NULL)",
          "257:         return NULL;",
          "259:     SRP_user_pwd_set_gN(ret, src->g, src->N);",
          "260:     if (!SRP_user_pwd_set_ids(ret, src->id, src->info)",
          "261:         || !SRP_user_pwd_set_sv_BN(ret, BN_dup(src->s), BN_dup(src->v))) {",
          "262:             SRP_user_pwd_free(ret);",
          "263:             return NULL;",
          "264:     }",
          "265:     return ret;",
          "266: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "469: }",
          "472: {",
          "473:     int i;",
          "474:     SRP_user_pwd *user;",
          "479:     if (vb == NULL)",
          "480:         return NULL;",
          "481:     for (i = 0; i < sk_SRP_user_pwd_num(vb->users_pwd); i++) {",
          "482:         user = sk_SRP_user_pwd_value(vb->users_pwd, i);",
          "483:         if (strcmp(user->id, username) == 0)",
          "484:             return user;",
          "485:     }",
          "486:     if ((vb->seed_key == NULL) ||",
          "487:         (vb->default_g == NULL) || (vb->default_N == NULL))",
          "488:         return NULL;",
          "",
          "[Removed Lines]",
          "471: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
          "475:     unsigned char digv[SHA_DIGEST_LENGTH];",
          "476:     unsigned char digs[SHA_DIGEST_LENGTH];",
          "477:     EVP_MD_CTX ctxt;",
          "",
          "[Added Lines]",
          "489: static SRP_user_pwd *find_user(SRP_VBASE *vb, char *username)",
          "503:     return NULL;",
          "504: }",
          "511: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
          "512: {",
          "513:     return find_user(vb, username);",
          "514: }",
          "520: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)",
          "521: {",
          "522:     SRP_user_pwd *user;",
          "523:     unsigned char digv[SHA_DIGEST_LENGTH];",
          "524:     unsigned char digs[SHA_DIGEST_LENGTH];",
          "525:     EVP_MD_CTX ctxt;",
          "527:     if (vb == NULL)",
          "528:         return NULL;",
          "530:     if ((user = find_user(vb, username)) != NULL)",
          "531:         return srp_user_pwd_dup(user);",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "1807: X509_REQ_digest                         2362 EXIST::FUNCTION:EVP",
          "1808: X509_CRL_digest                         2391 EXIST::FUNCTION:EVP",
          "1809: ASN1_STRING_clear_free                  2392 EXIST::FUNCTION:",
          "1810: d2i_ASN1_SET_OF_PKCS7                   2397 NOEXIST::FUNCTION:",
          "1811: X509_ALGOR_cmp                          2398 EXIST::FUNCTION:",
          "1812: EVP_CIPHER_CTX_set_key_length           2399 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1810: SRP_VBASE_get1_by_user                  2393 EXIST::FUNCTION:SRP",
          "1811: SRP_user_pwd_free                       2394 EXIST::FUNCTION:SRP",
          "",
          "---------------"
        ]
      }
    }
  ]
}