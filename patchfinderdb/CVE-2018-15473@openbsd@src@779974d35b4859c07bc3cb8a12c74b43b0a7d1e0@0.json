{
  "cve_id": "CVE-2018-15473",
  "cve_desc": "OpenSSH through 7.7 is prone to a user enumeration vulnerability due to not delaying bailout for an invalid authenticating user until after the packet containing the request has been fully parsed, related to auth2-gss.c, auth2-hostbased.c, and auth2-pubkey.c.",
  "repo": "openbsd/src",
  "patch_hash": "779974d35b4859c07bc3cb8a12c74b43b0a7d1e0",
  "patch_info": {
    "commit_hash": "779974d35b4859c07bc3cb8a12c74b43b0a7d1e0",
    "repo": "openbsd/src",
    "commit_url": "https://github.com/openbsd/src/commit/779974d35b4859c07bc3cb8a12c74b43b0a7d1e0",
    "files": [
      "usr.bin/ssh/auth2-gss.c",
      "usr.bin/ssh/auth2-hostbased.c",
      "usr.bin/ssh/auth2-pubkey.c"
    ],
    "message": "delay bailout for invalid authenticating user until after the packet containing the request has been fully parsed. Reported by Dariusz Tytko and Micha\u0142 Sajdak; ok deraadt",
    "before_after_code_files": [
      "usr.bin/ssh/auth2-gss.c||usr.bin/ssh/auth2-gss.c",
      "usr.bin/ssh/auth2-hostbased.c||usr.bin/ssh/auth2-hostbased.c",
      "usr.bin/ssh/auth2-pubkey.c||usr.bin/ssh/auth2-pubkey.c"
    ]
  },
  "patch_diff": {
    "usr.bin/ssh/auth2-gss.c||usr.bin/ssh/auth2-gss.c": [
      "File: usr.bin/ssh/auth2-gss.c -> usr.bin/ssh/auth2-gss.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:  size_t len;",
      "66:  u_char *doid = NULL;",
      "71:  if ((r = sshpkt_get_u32(ssh, &mechs)) != 0)",
      "72:   fatal(\"%s: %s\", __func__, ssh_err(r));",
      "",
      "[Removed Lines]",
      "68:  if (!authctxt->valid || authctxt->user == NULL)",
      "69:   return (0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101:   return (0);",
      "102:  }",
      "104:  if (GSS_ERROR(PRIVSEP(ssh_gssapi_server_ctx(&ctxt, &goid)))) {",
      "105:   if (ctxt != NULL)",
      "106:    ssh_gssapi_delete_ctx(&ctxt);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "101:  if (!authctxt->valid || authctxt->user == NULL) {",
      "102:   debug2(\"%s: disabled because of invalid user\", __func__);",
      "103:   free(doid);",
      "104:   return (0);",
      "105:  }",
      "",
      "---------------"
    ],
    "usr.bin/ssh/auth2-hostbased.c||usr.bin/ssh/auth2-hostbased.c": [
      "File: usr.bin/ssh/auth2-hostbased.c -> usr.bin/ssh/auth2-hostbased.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "66:  size_t alen, blen, slen;",
      "67:  int r, pktype, authenticated = 0;",
      "74:  if ((r = sshpkt_get_cstring(ssh, &pkalg, &alen)) != 0 ||",
      "75:      (r = sshpkt_get_string(ssh, &pkblob, &blen)) != 0 ||",
      "",
      "[Removed Lines]",
      "69:  if (!authctxt->valid) {",
      "70:   debug2(\"%s: disabled because of invalid user\", __func__);",
      "71:   return 0;",
      "72:  }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "116:   goto done;",
      "117:  }",
      "119:  if ((b = sshbuf_new()) == NULL)",
      "120:   fatal(\"%s: sshbuf_new failed\", __func__);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:  if (!authctxt->valid || authctxt->user == NULL) {",
      "116:   debug2(\"%s: disabled because of invalid user\", __func__);",
      "117:   goto done;",
      "118:  }",
      "",
      "---------------"
    ],
    "usr.bin/ssh/auth2-pubkey.c||usr.bin/ssh/auth2-pubkey.c": [
      "File: usr.bin/ssh/auth2-pubkey.c -> usr.bin/ssh/auth2-pubkey.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "86: {",
      "87:  Authctxt *authctxt = ssh->authctxt;",
      "88:  struct passwd *pw = authctxt->pw;",
      "90:  struct sshkey *key = NULL;",
      "93:  size_t blen, slen;",
      "94:  int r, pktype;",
      "95:  int authenticated = 0;",
      "96:  struct sshauthopt *authopts = NULL;",
      "102:  if ((r = sshpkt_get_u8(ssh, &have_sig)) != 0 ||",
      "103:      (r = sshpkt_get_cstring(ssh, &pkalg, NULL)) != 0 ||",
      "104:      (r = sshpkt_get_string(ssh, &pkblob, &blen)) != 0)",
      "",
      "[Removed Lines]",
      "89:  struct sshbuf *b;",
      "91:  char *pkalg, *userstyle = NULL, *key_s = NULL, *ca_s = NULL;",
      "92:  u_char *pkblob, *sig, have_sig;",
      "98:  if (!authctxt->valid) {",
      "99:   debug2(\"%s: disabled because of invalid user\", __func__);",
      "100:   return 0;",
      "101:  }",
      "",
      "[Added Lines]",
      "89:  struct sshbuf *b = NULL;",
      "91:  char *pkalg = NULL, *userstyle = NULL, *key_s = NULL, *ca_s = NULL;",
      "92:  u_char *pkblob = NULL, *sig = NULL, have_sig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "164:     fatal(\"%s: sshbuf_put_string session id: %s\",",
      "165:         __func__, ssh_err(r));",
      "166:   }",
      "168:   xasprintf(&userstyle, \"%s%s%s\", authctxt->user,",
      "169:       authctxt->style ? \":\" : \"\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:   if (!authctxt->valid || authctxt->user == NULL) {",
      "164:    debug2(\"%s: disabled because of invalid user\",",
      "165:        __func__);",
      "166:    goto done;",
      "167:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "191:    authenticated = 1;",
      "192:   }",
      "193:   sshbuf_free(b);",
      "195:   auth2_record_key(authctxt, authenticated, key);",
      "196:  } else {",
      "197:   debug(\"%s: test pkalg %s pkblob %s%s%s\",",
      "",
      "[Removed Lines]",
      "194:   free(sig);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "202:   if ((r = sshpkt_get_end(ssh)) != 0)",
      "203:    fatal(\"%s: %s\", __func__, ssh_err(r));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "204:   if (!authctxt->valid || authctxt->user == NULL) {",
      "205:    debug2(\"%s: disabled because of invalid user\",",
      "206:        __func__);",
      "207:    goto done;",
      "208:   }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "235:  free(pkblob);",
      "236:  free(key_s);",
      "237:  free(ca_s);",
      "238:  return authenticated;",
      "239: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "242:  free(sig);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "672fe979a97fd7692fe5dc383491eee200cc82a4",
      "candidate_info": {
        "commit_hash": "672fe979a97fd7692fe5dc383491eee200cc82a4",
        "repo": "openbsd/src",
        "commit_url": "https://github.com/openbsd/src/commit/672fe979a97fd7692fe5dc383491eee200cc82a4",
        "files": [
          "usr.bin/ssh/auth2-hostbased.c",
          "usr.bin/ssh/auth2-pubkey.c",
          "usr.bin/ssh/auth2.c",
          "usr.bin/ssh/authfd.c",
          "usr.bin/ssh/channels.c",
          "usr.bin/ssh/clientloop.c",
          "usr.bin/ssh/compat.c",
          "usr.bin/ssh/compat.h",
          "usr.bin/ssh/kex.c",
          "usr.bin/ssh/monitor.c",
          "usr.bin/ssh/serverloop.c",
          "usr.bin/ssh/ssh-agent.c",
          "usr.bin/ssh/ssh-dss.c",
          "usr.bin/ssh/ssh.c",
          "usr.bin/ssh/sshconnect.c",
          "usr.bin/ssh/sshconnect2.c",
          "usr.bin/ssh/sshd.c"
        ],
        "message": "Drop compatibility hacks for some ancient SSH implementations, including ssh.com <=2.* and OpenSSH <= 3.*.\n\nThese versions were all released in or before 2001 and predate the\nfinal SSH RFCs. The hacks in question aren't necessary for RFC-\ncompliant SSH implementations.\n\nok markus@",
        "before_after_code_files": [
          "usr.bin/ssh/auth2-hostbased.c||usr.bin/ssh/auth2-hostbased.c",
          "usr.bin/ssh/auth2-pubkey.c||usr.bin/ssh/auth2-pubkey.c",
          "usr.bin/ssh/auth2.c||usr.bin/ssh/auth2.c",
          "usr.bin/ssh/authfd.c||usr.bin/ssh/authfd.c",
          "usr.bin/ssh/channels.c||usr.bin/ssh/channels.c",
          "usr.bin/ssh/clientloop.c||usr.bin/ssh/clientloop.c",
          "usr.bin/ssh/compat.c||usr.bin/ssh/compat.c",
          "usr.bin/ssh/compat.h||usr.bin/ssh/compat.h",
          "usr.bin/ssh/kex.c||usr.bin/ssh/kex.c",
          "usr.bin/ssh/monitor.c||usr.bin/ssh/monitor.c",
          "usr.bin/ssh/serverloop.c||usr.bin/ssh/serverloop.c",
          "usr.bin/ssh/ssh-agent.c||usr.bin/ssh/ssh-agent.c",
          "usr.bin/ssh/ssh-dss.c||usr.bin/ssh/ssh-dss.c",
          "usr.bin/ssh/ssh.c||usr.bin/ssh/ssh.c",
          "usr.bin/ssh/sshconnect.c||usr.bin/ssh/sshconnect.c",
          "usr.bin/ssh/sshconnect2.c||usr.bin/ssh/sshconnect2.c",
          "usr.bin/ssh/sshd.c||usr.bin/ssh/sshd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usr.bin/ssh/auth2-hostbased.c||usr.bin/ssh/auth2-hostbased.c",
            "usr.bin/ssh/auth2-pubkey.c||usr.bin/ssh/auth2-pubkey.c"
          ],
          "candidate": [
            "usr.bin/ssh/auth2-hostbased.c||usr.bin/ssh/auth2-hostbased.c",
            "usr.bin/ssh/auth2-pubkey.c||usr.bin/ssh/auth2-pubkey.c"
          ]
        }
      },
      "candidate_diff": {
        "usr.bin/ssh/auth2-hostbased.c||usr.bin/ssh/auth2-hostbased.c": [
          "File: usr.bin/ssh/auth2-hostbased.c -> usr.bin/ssh/auth2-hostbased.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  Authctxt *authctxt = ssh->authctxt;",
          "62:  struct sshbuf *b;",
          "63:  struct sshkey *key = NULL;",
          "65:  u_char *pkblob, *sig;",
          "66:  size_t alen, blen, slen;",
          "67:  int r, pktype, authenticated = 0;",
          "",
          "[Removed Lines]",
          "64:  char *pkalg, *cuser, *chost, *service;",
          "",
          "[Added Lines]",
          "64:  char *pkalg, *cuser, *chost;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:   goto done;",
          "118:  }",
          "122:  if ((b = sshbuf_new()) == NULL)",
          "123:   fatal(\"%s: sshbuf_new failed\", __func__);",
          "125:  if ((r = sshbuf_put_string(b, session_id2, session_id2_len)) != 0 ||",
          "126:      (r = sshbuf_put_u8(b, SSH2_MSG_USERAUTH_REQUEST)) != 0 ||",
          "127:      (r = sshbuf_put_cstring(b, authctxt->user)) != 0 ||",
          "129:      (r = sshbuf_put_cstring(b, \"hostbased\")) != 0 ||",
          "130:      (r = sshbuf_put_string(b, pkalg, alen)) != 0 ||",
          "131:      (r = sshbuf_put_string(b, pkblob, blen)) != 0 ||",
          "",
          "[Removed Lines]",
          "120:  service = ssh->compat & SSH_BUG_HBSERVICE ? \"ssh-userauth\" :",
          "121:      authctxt->service;",
          "128:      (r = sshbuf_put_cstring(b, service)) != 0 ||",
          "",
          "[Added Lines]",
          "126:      (r = sshbuf_put_cstring(b, authctxt->service)) != 0 ||",
          "",
          "---------------"
        ],
        "usr.bin/ssh/auth2-pubkey.c||usr.bin/ssh/auth2-pubkey.c": [
          "File: usr.bin/ssh/auth2-pubkey.c -> usr.bin/ssh/auth2-pubkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:   debug2(\"%s: disabled because of invalid user\", __func__);",
          "98:   return 0;",
          "99:  }",
          "120:  pktype = sshkey_type_from_name(pkalg);",
          "121:  if (pktype == KEY_UNSPEC) {",
          "",
          "[Removed Lines]",
          "100:  if ((r = sshpkt_get_u8(ssh, &have_sig)) != 0)",
          "101:   fatal(\"%s: sshpkt_get_u8 failed: %s\", __func__, ssh_err(r));",
          "102:  if (ssh->compat & SSH_BUG_PKAUTH) {",
          "103:   debug2(\"%s: SSH_BUG_PKAUTH\", __func__);",
          "104:   if ((b = sshbuf_new()) == NULL)",
          "105:    fatal(\"%s: sshbuf_new failed\", __func__);",
          "109:   if ((r = sshpkt_get_string(ssh, &pkblob, &blen)) != 0 ||",
          "110:       (r = sshbuf_put(b, pkblob, blen)) != 0 ||",
          "111:       (r = sshbuf_get_cstring(b, &pkalg, NULL)) != 0)",
          "112:    fatal(\"%s: failed: %s\", __func__, ssh_err(r));",
          "113:   sshbuf_free(b);",
          "114:  } else {",
          "115:   if ((r = sshpkt_get_cstring(ssh, &pkalg, NULL)) != 0 ||",
          "116:       (r = sshpkt_get_string(ssh, &pkblob, &blen)) != 0)",
          "117:    fatal(\"%s: sshpkt_get_cstring failed: %s\",",
          "118:        __func__, ssh_err(r));",
          "119:  }",
          "",
          "[Added Lines]",
          "100:  if ((r = sshpkt_get_u8(ssh, &have_sig)) != 0 ||",
          "101:      (r = sshpkt_get_cstring(ssh, &pkalg, NULL)) != 0 ||",
          "102:      (r = sshpkt_get_string(ssh, &pkblob, &blen)) != 0)",
          "103:   fatal(\"%s: parse request failed: %s\", __func__, ssh_err(r));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:       authctxt->style ? authctxt->style : \"\");",
          "186:   if ((r = sshbuf_put_u8(b, SSH2_MSG_USERAUTH_REQUEST)) != 0 ||",
          "187:       (r = sshbuf_put_cstring(b, userstyle)) != 0 ||",
          "204:    fatal(\"%s: build packet failed: %s\",",
          "205:        __func__, ssh_err(r));",
          "206: #ifdef DEBUG_PK",
          "",
          "[Removed Lines]",
          "188:       (r = sshbuf_put_cstring(b, ssh->compat & SSH_BUG_PKSERVICE ?",
          "189:       \"ssh-userauth\" : authctxt->service)) != 0)",
          "190:    fatal(\"%s: build packet failed: %s\",",
          "191:        __func__, ssh_err(r));",
          "192:   if (ssh->compat & SSH_BUG_PKAUTH) {",
          "193:    if ((r = sshbuf_put_u8(b, have_sig)) != 0)",
          "194:     fatal(\"%s: build packet failed: %s\",",
          "195:         __func__, ssh_err(r));",
          "196:   } else {",
          "197:    if ((r = sshbuf_put_cstring(b, \"publickey\")) != 0 ||",
          "198:        (r = sshbuf_put_u8(b, have_sig)) != 0 ||",
          "199:        (r = sshbuf_put_cstring(b, pkalg) != 0))",
          "200:     fatal(\"%s: build packet failed: %s\",",
          "201:         __func__, ssh_err(r));",
          "202:   }",
          "203:   if ((r = sshbuf_put_string(b, pkblob, blen)) != 0)",
          "",
          "[Added Lines]",
          "172:       (r = sshbuf_put_cstring(b, authctxt->service)) != 0 ||",
          "173:       (r = sshbuf_put_cstring(b, \"publickey\")) != 0 ||",
          "174:       (r = sshbuf_put_u8(b, have_sig)) != 0 ||",
          "175:       (r = sshbuf_put_cstring(b, pkalg) != 0) ||",
          "176:       (r = sshbuf_put_string(b, pkblob, blen)) != 0)",
          "",
          "---------------"
        ],
        "usr.bin/ssh/auth2.c||usr.bin/ssh/auth2.c": [
          "File: usr.bin/ssh/auth2.c -> usr.bin/ssh/auth2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: {",
          "137:  char *banner = NULL;",
          "140:   return;",
          "142:  if ((banner = PRIVSEP(auth2_read_banner())) == NULL)",
          "",
          "[Removed Lines]",
          "139:  if (options.banner == NULL || (datafellows & SSH_BUG_BANNER) != 0)",
          "",
          "[Added Lines]",
          "139:  if (options.banner == NULL)",
          "",
          "---------------"
        ],
        "usr.bin/ssh/authfd.c||usr.bin/ssh/authfd.c": [
          "File: usr.bin/ssh/authfd.c -> usr.bin/ssh/authfd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:  if (datalen > SSH_KEY_MAX_SIGN_DATA_SIZE)",
          "353:   return SSH_ERR_INVALID_ARGUMENT;",
          "356:  if ((msg = sshbuf_new()) == NULL)",
          "357:   return SSH_ERR_ALLOC_FAIL;",
          "358:  if ((r = sshkey_to_blob(key, &blob, &blen)) != 0)",
          "",
          "[Removed Lines]",
          "354:  if (compat & SSH_BUG_SIGBLOB)",
          "355:   flags |= SSH_AGENT_OLD_SIGNATURE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usr.bin/ssh/channels.c||usr.bin/ssh/channels.c": [
          "File: usr.bin/ssh/channels.c -> usr.bin/ssh/channels.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1572:      SSH_CHANNEL_OPENING, newsock, newsock, -1,",
          "1573:      c->local_window_max, c->local_maxpacket, 0, buf, 1);",
          "1574:  open_preamble(ssh, __func__, nc, \"x11\");",
          "1582:   fatal(\"%s: channel %i: reply %s\", __func__,",
          "1583:       c->self, ssh_err(r));",
          "1584:  }",
          "",
          "[Removed Lines]",
          "1575:  if ((r = sshpkt_put_cstring(ssh, remote_ipaddr)) != 0) {",
          "1576:   fatal(\"%s: channel %i: reply %s\", __func__,",
          "1577:       c->self, ssh_err(r));",
          "1578:  }",
          "1579:  if ((datafellows & SSH_BUG_X11FWD) != 0)",
          "1580:   debug2(\"channel %d: ssh2 x11 bug compat mode\", nc->self);",
          "1581:  else if ((r = sshpkt_put_u32(ssh, remote_port)) != 0) {",
          "",
          "[Added Lines]",
          "1575:  if ((r = sshpkt_put_cstring(ssh, remote_ipaddr)) != 0 ||",
          "1576:      (r = sshpkt_put_u32(ssh, remote_port)) != 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1814:    if ((r = sshpkt_start(ssh,",
          "1815:        SSH2_MSG_CHANNEL_OPEN_FAILURE)) != 0 ||",
          "1816:        (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||",
          "1824:     fatal(\"%s: channel %i: failure: %s\", __func__,",
          "1825:         c->self, ssh_err(r));",
          "1826:    if ((r = sshpkt_send(ssh)) != 0)",
          "1827:     fatal(\"%s: channel %i: %s\", __func__, c->self,",
          "1828:         ssh_err(r));",
          "",
          "[Removed Lines]",
          "1817:        (r = sshpkt_put_u32(ssh, SSH2_OPEN_CONNECT_FAILED))",
          "1818:        != 0)",
          "1819:     fatal(\"%s: channel %i: failure: %s\", __func__,",
          "1820:         c->self, ssh_err(r));",
          "1821:    if ((datafellows & SSH_BUG_OPENFAILURE) == 0 &&",
          "1822:        ((r = sshpkt_put_cstring(ssh, strerror(err))) != 0 ||",
          "1823:        (r = sshpkt_put_cstring(ssh, \"\")) != 0))",
          "",
          "[Added Lines]",
          "1812:        (r = sshpkt_put_u32(ssh,",
          "1813:        SSH2_OPEN_CONNECT_FAILED)) != 0 ||",
          "1814:        (r = sshpkt_put_cstring(ssh, strerror(err))) != 0 ||",
          "1815:        (r = sshpkt_put_cstring(ssh, \"\")) != 0) {",
          "1818:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3079:   error(\"%s: reason: %s\", __func__, ssh_err(r));",
          "3080:   packet_disconnect(\"Invalid open failure message\");",
          "3081:  }",
          "3089:  }",
          "3090:  ssh_packet_check_eom(ssh);",
          "3091:  logit(\"channel %d: open failed: %s%s%s\", c->self,",
          "",
          "[Removed Lines]",
          "3082:  if ((datafellows & SSH_BUG_OPENFAILURE) == 0) {",
          "3084:   if ((r = sshpkt_get_cstring(ssh, &msg, NULL)) != 0 ||",
          "3085:       (r = sshpkt_get_string_direct(ssh, NULL, NULL)) != 0) {",
          "3086:    error(\"%s: message/lang: %s\", __func__, ssh_err(r));",
          "3087:    packet_disconnect(\"Invalid open failure message\");",
          "3088:   }",
          "",
          "[Added Lines]",
          "3076:  if ((r = sshpkt_get_cstring(ssh, &msg, NULL)) != 0 ||",
          "3077:      (r = sshpkt_get_string_direct(ssh, NULL, NULL)) != 0) {",
          "3078:   error(\"%s: message/lang: %s\", __func__, ssh_err(r));",
          "3079:   packet_disconnect(\"Invalid open failure message\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3625: channel_rfwd_bind_host(const char *listen_host)",
          "3626: {",
          "3627:  if (listen_host == NULL) {",
          "3632:  } else if (*listen_host == '\\0' || strcmp(listen_host, \"*\") == 0) {",
          "3637:  } else",
          "3638:   return listen_host;",
          "3639: }",
          "",
          "[Removed Lines]",
          "3628:   if (datafellows & SSH_BUG_RFWD_ADDR)",
          "3629:    return \"127.0.0.1\";",
          "3630:   else",
          "3631:    return \"localhost\";",
          "3633:   if (datafellows & SSH_BUG_RFWD_ADDR)",
          "3634:    return \"0.0.0.0\";",
          "3635:   else",
          "3636:    return \"\";",
          "",
          "[Added Lines]",
          "3619:   return \"localhost\";",
          "3621:   return \"\";",
          "",
          "---------------"
        ],
        "usr.bin/ssh/clientloop.c||usr.bin/ssh/clientloop.c": [
          "File: usr.bin/ssh/clientloop.c -> usr.bin/ssh/clientloop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1532:   return NULL;",
          "1533:  }",
          "1534:  originator = packet_get_string(NULL);",
          "1541:  packet_check_eom();",
          "1543:  debug(\"client_request_x11: request from %s %d\", originator,",
          "",
          "[Removed Lines]",
          "1535:  if (datafellows & SSH_BUG_X11FWD) {",
          "1536:   debug2(\"buggy server: x11 request w/o originator_port\");",
          "1537:   originator_port = 0;",
          "1538:  } else {",
          "1539:   originator_port = packet_get_int();",
          "1540:  }",
          "",
          "[Added Lines]",
          "1535:  originator_port = packet_get_int();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1663:   packet_start(SSH2_MSG_CHANNEL_OPEN_FAILURE);",
          "1664:   packet_put_int(rchan);",
          "1665:   packet_put_int(SSH2_OPEN_ADMINISTRATIVELY_PROHIBITED);",
          "1670:   packet_send();",
          "1671:  }",
          "1672:  free(ctype);",
          "",
          "[Removed Lines]",
          "1666:   if (!(datafellows & SSH_BUG_OPENFAILURE)) {",
          "1667:    packet_put_cstring(\"open failed\");",
          "1668:    packet_put_cstring(\"\");",
          "1669:   }",
          "",
          "[Added Lines]",
          "1661:   packet_put_cstring(\"open failed\");",
          "1662:   packet_put_cstring(\"\");",
          "",
          "---------------"
        ],
        "usr.bin/ssh/compat.c||usr.bin/ssh/compat.c": [
          "File: usr.bin/ssh/compat.c -> usr.bin/ssh/compat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   char *pat;",
          "49:   int bugs;",
          "50:  } check[] = {",
          "74:   { \"OpenSSH_2.*,\"",
          "75:     \"OpenSSH_3.0*,\"",
          "76:     \"OpenSSH_3.1*\", SSH_BUG_EXTEOF|SSH_OLD_FORWARD_ADDR},",
          "77:   { \"OpenSSH_3.*\", SSH_OLD_FORWARD_ADDR },",
          "78:   { \"Sun_SSH_1.0*\", SSH_BUG_NOREKEY|SSH_BUG_EXTEOF},",
          "80:   { \"OpenSSH_5*\",  SSH_NEW_OPENSSH|SSH_BUG_DYNAMIC_RPORT},",
          "81:   { \"OpenSSH_6.6.1*\", SSH_NEW_OPENSSH},",
          "82:   { \"OpenSSH_6.5*,\"",
          "83:     \"OpenSSH_6.6*\", SSH_NEW_OPENSSH|SSH_BUG_CURVE25519PAD},",
          "84:   { \"OpenSSH*\",  SSH_NEW_OPENSSH },",
          "85:   { \"*MindTerm*\",  0 },",
          "128:   { \"3.0.*\",  SSH_BUG_DEBUG },",
          "129:   { \"3.0 SecureCRT*\", SSH_OLD_SESSIONID },",
          "130:   { \"1.7 SecureFX*\", SSH_OLD_SESSIONID },",
          "",
          "[Removed Lines]",
          "51:   { \"OpenSSH-2.0*,\"",
          "52:     \"OpenSSH-2.1*,\"",
          "53:     \"OpenSSH_2.1*,\"",
          "54:     \"OpenSSH_2.2*\", SSH_OLD_SESSIONID|SSH_BUG_BANNER|",
          "55:      SSH_OLD_DHGEX|SSH_BUG_NOREKEY|",
          "56:      SSH_BUG_EXTEOF|SSH_OLD_FORWARD_ADDR},",
          "57:   { \"OpenSSH_2.3.0*\", SSH_BUG_BANNER|SSH_BUG_BIGENDIANAES|",
          "58:      SSH_OLD_DHGEX|SSH_BUG_NOREKEY|",
          "59:      SSH_BUG_EXTEOF|SSH_OLD_FORWARD_ADDR},",
          "60:   { \"OpenSSH_2.3.*\", SSH_BUG_BIGENDIANAES|SSH_OLD_DHGEX|",
          "61:      SSH_BUG_NOREKEY|SSH_BUG_EXTEOF|",
          "62:      SSH_OLD_FORWARD_ADDR},",
          "63:   { \"OpenSSH_2.5.0p1*,\"",
          "64:     \"OpenSSH_2.5.1p1*\",",
          "65:      SSH_BUG_BIGENDIANAES|SSH_OLD_DHGEX|",
          "66:      SSH_BUG_NOREKEY|SSH_BUG_EXTEOF|",
          "67:      SSH_OLD_FORWARD_ADDR},",
          "68:   { \"OpenSSH_2.5.0*,\"",
          "69:     \"OpenSSH_2.5.1*,\"",
          "70:     \"OpenSSH_2.5.2*\", SSH_OLD_DHGEX|SSH_BUG_NOREKEY|",
          "71:      SSH_BUG_EXTEOF|SSH_OLD_FORWARD_ADDR},",
          "72:   { \"OpenSSH_2.5.3*\", SSH_BUG_NOREKEY|SSH_BUG_EXTEOF|",
          "73:      SSH_OLD_FORWARD_ADDR},",
          "79:   { \"OpenSSH_4*\",  0 },",
          "86:   { \"2.1.0*\",  SSH_BUG_SIGBLOB|SSH_BUG_HMAC|",
          "87:      SSH_OLD_SESSIONID|SSH_BUG_DEBUG|",
          "88:      SSH_BUG_RSASIGMD5|SSH_BUG_HBSERVICE|",
          "89:      SSH_BUG_FIRSTKEX },",
          "90:   { \"2.1 *\",  SSH_BUG_SIGBLOB|SSH_BUG_HMAC|",
          "91:      SSH_OLD_SESSIONID|SSH_BUG_DEBUG|",
          "92:      SSH_BUG_RSASIGMD5|SSH_BUG_HBSERVICE|",
          "93:      SSH_BUG_FIRSTKEX },",
          "94:   { \"2.0.13*,\"",
          "95:     \"2.0.14*,\"",
          "96:     \"2.0.15*,\"",
          "97:     \"2.0.16*,\"",
          "98:     \"2.0.17*,\"",
          "99:     \"2.0.18*,\"",
          "100:     \"2.0.19*\",  SSH_BUG_SIGBLOB|SSH_BUG_HMAC|",
          "101:      SSH_OLD_SESSIONID|SSH_BUG_DEBUG|",
          "102:      SSH_BUG_PKSERVICE|SSH_BUG_X11FWD|",
          "103:      SSH_BUG_PKOK|SSH_BUG_RSASIGMD5|",
          "104:      SSH_BUG_HBSERVICE|SSH_BUG_OPENFAILURE|",
          "105:      SSH_BUG_DUMMYCHAN|SSH_BUG_FIRSTKEX },",
          "106:   { \"2.0.11*,\"",
          "107:     \"2.0.12*\",  SSH_BUG_SIGBLOB|SSH_BUG_HMAC|",
          "108:      SSH_OLD_SESSIONID|SSH_BUG_DEBUG|",
          "109:      SSH_BUG_PKSERVICE|SSH_BUG_X11FWD|",
          "110:      SSH_BUG_PKAUTH|SSH_BUG_PKOK|",
          "111:      SSH_BUG_RSASIGMD5|SSH_BUG_OPENFAILURE|",
          "112:      SSH_BUG_DUMMYCHAN|SSH_BUG_FIRSTKEX },",
          "113:   { \"2.0.*\",  SSH_BUG_SIGBLOB|SSH_BUG_HMAC|",
          "114:      SSH_OLD_SESSIONID|SSH_BUG_DEBUG|",
          "115:      SSH_BUG_PKSERVICE|SSH_BUG_X11FWD|",
          "116:      SSH_BUG_PKAUTH|SSH_BUG_PKOK|",
          "117:      SSH_BUG_RSASIGMD5|SSH_BUG_OPENFAILURE|",
          "118:      SSH_BUG_DERIVEKEY|SSH_BUG_DUMMYCHAN|",
          "119:      SSH_BUG_FIRSTKEX },",
          "120:   { \"2.2.0*,\"",
          "121:     \"2.3.0*\",  SSH_BUG_HMAC|SSH_BUG_DEBUG|",
          "122:      SSH_BUG_RSASIGMD5|SSH_BUG_FIRSTKEX },",
          "123:   { \"2.3.*\",  SSH_BUG_DEBUG|SSH_BUG_RSASIGMD5|",
          "124:      SSH_BUG_FIRSTKEX },",
          "126:   { \"2.*\",  SSH_BUG_DEBUG|SSH_BUG_FIRSTKEX|",
          "127:      SSH_BUG_RFWD_ADDR },",
          "",
          "[Added Lines]",
          "56:   { \"OpenSSH_2*,\"",
          "57:     \"OpenSSH_3*,\"",
          "58:     \"OpenSSH_4*\",  0 },",
          "",
          "---------------"
        ],
        "usr.bin/ssh/compat.h||usr.bin/ssh/compat.h": [
          "File: usr.bin/ssh/compat.h -> usr.bin/ssh/compat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define SSH_PROTO_1_PREFERRED 0x02",
          "33: #define SSH_PROTO_2  0x04",
          "39: #define SSH_OLD_SESSIONID 0x00000010",
          "41: #define SSH_BUG_DEBUG  0x00000040",
          "43: #define SSH_BUG_IGNOREMSG 0x00000100",
          "45: #define SSH_BUG_PASSWORDPAD 0x00000400",
          "46: #define SSH_BUG_SCANNER  0x00000800",
          "47: #define SSH_BUG_BIGENDIANAES 0x00001000",
          "48: #define SSH_BUG_RSASIGMD5 0x00002000",
          "49: #define SSH_OLD_DHGEX  0x00004000",
          "50: #define SSH_BUG_NOREKEY  0x00008000",
          "55: #define SSH_BUG_EXTEOF  0x00200000",
          "56: #define SSH_BUG_PROBE  0x00400000",
          "58: #define SSH_OLD_FORWARD_ADDR 0x01000000",
          "60: #define SSH_NEW_OPENSSH  0x04000000",
          "61: #define SSH_BUG_DYNAMIC_RPORT 0x08000000",
          "62: #define SSH_BUG_CURVE25519PAD 0x10000000",
          "",
          "[Removed Lines]",
          "35: #define SSH_BUG_SIGBLOB  0x00000001",
          "36: #define SSH_BUG_PKSERVICE 0x00000002",
          "37: #define SSH_BUG_HMAC  0x00000004",
          "38: #define SSH_BUG_X11FWD  0x00000008",
          "40: #define SSH_BUG_PKAUTH  0x00000020",
          "42: #define SSH_BUG_BANNER  0x00000080",
          "44: #define SSH_BUG_PKOK  0x00000200",
          "51: #define SSH_BUG_HBSERVICE 0x00010000",
          "52: #define SSH_BUG_OPENFAILURE 0x00020000",
          "53: #define SSH_BUG_DERIVEKEY 0x00040000",
          "54: #define SSH_BUG_DUMMYCHAN 0x00100000",
          "57: #define SSH_BUG_FIRSTKEX 0x00800000",
          "59: #define SSH_BUG_RFWD_ADDR 0x02000000",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usr.bin/ssh/kex.c||usr.bin/ssh/kex.c": [
          "File: usr.bin/ssh/kex.c -> usr.bin/ssh/kex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:   free(name);",
          "662:   return SSH_ERR_INTERNAL_ERROR;",
          "663:  }",
          "667:  mac->name = name;",
          "668:  mac->key = NULL;",
          "669:  mac->enabled = 0;",
          "",
          "[Removed Lines]",
          "665:  if (ssh->compat & SSH_BUG_HMAC)",
          "666:   mac->key_len = 16;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "852:  kex->dh_need = dh_need;",
          "857:   ssh->dispatch_skip_packets = 1;",
          "858:  r = 0;",
          "859:  out:",
          "",
          "[Removed Lines]",
          "855:  if (first_kex_follows && !proposals_match(my, peer) &&",
          "856:      !(ssh->compat & SSH_BUG_FIRSTKEX))",
          "",
          "[Added Lines]",
          "852:  if (first_kex_follows && !proposals_match(my, peer))",
          "",
          "---------------"
        ],
        "usr.bin/ssh/monitor.c||usr.bin/ssh/monitor.c": [
          "File: usr.bin/ssh/monitor.c -> usr.bin/ssh/monitor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "964:  free(userstyle);",
          "965:  free(cp);",
          "966:  buffer_skip_string(&b);",
          "979:  buffer_skip_string(&b);",
          "980:  if (buffer_len(&b) != 0)",
          "981:   fail++;",
          "",
          "[Removed Lines]",
          "967:  if (datafellows & SSH_BUG_PKAUTH) {",
          "968:   if (!buffer_get_char(&b))",
          "969:    fail++;",
          "970:  } else {",
          "971:   cp = buffer_get_cstring(&b, NULL);",
          "972:   if (strcmp(\"publickey\", cp) != 0)",
          "973:    fail++;",
          "974:   free(cp);",
          "975:   if (!buffer_get_char(&b))",
          "976:    fail++;",
          "977:   buffer_skip_string(&b);",
          "978:  }",
          "",
          "[Added Lines]",
          "967:  cp = buffer_get_cstring(&b, NULL);",
          "968:  if (strcmp(\"publickey\", cp) != 0)",
          "969:   fail++;",
          "970:  free(cp);",
          "971:  if (!buffer_get_char(&b))",
          "972:   fail++;",
          "973:  buffer_skip_string(&b);",
          "",
          "---------------"
        ],
        "usr.bin/ssh/serverloop.c||usr.bin/ssh/serverloop.c": [
          "File: usr.bin/ssh/serverloop.c -> usr.bin/ssh/serverloop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "644:   packet_start(SSH2_MSG_CHANNEL_OPEN_FAILURE);",
          "645:   packet_put_int(rchan);",
          "646:   packet_put_int(reason);",
          "651:   packet_send();",
          "652:  }",
          "653:  free(ctype);",
          "",
          "[Removed Lines]",
          "647:   if (!(datafellows & SSH_BUG_OPENFAILURE)) {",
          "648:    packet_put_cstring(errmsg ? errmsg : \"open failed\");",
          "649:    packet_put_cstring(\"\");",
          "650:   }",
          "",
          "[Added Lines]",
          "647:   packet_put_cstring(errmsg ? errmsg : \"open failed\");",
          "648:   packet_put_cstring(\"\");",
          "",
          "---------------"
        ],
        "usr.bin/ssh/ssh-agent.c||usr.bin/ssh/ssh-agent.c": [
          "File: usr.bin/ssh/ssh-agent.c -> usr.bin/ssh/ssh-agent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:   goto send;",
          "278:  }",
          "282:  if ((id = lookup_identity(key)) == NULL) {",
          "283:   verbose(\"%s: %s key not found\", __func__, sshkey_type(key));",
          "284:   goto send;",
          "",
          "[Removed Lines]",
          "280:  if (flags & SSH_AGENT_OLD_SIGNATURE)",
          "281:   compat = SSH_BUG_SIGBLOB;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usr.bin/ssh/ssh-dss.c||usr.bin/ssh/ssh-dss.c": [
          "File: usr.bin/ssh/ssh-dss.c -> usr.bin/ssh/ssh-dss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:  BN_bn2bin(sig->r, sigblob + SIGBLOB_LEN - INTBLOB_LEN - rlen);",
          "81:  BN_bn2bin(sig->s, sigblob + SIGBLOB_LEN - slen);",
          "97:    ret = SSH_ERR_ALLOC_FAIL;",
          "98:    goto out;",
          "99:   }",
          "114:  }",
          "115:  out:",
          "116:  explicit_bzero(digest, sizeof(digest));",
          "117:  if (sig != NULL)",
          "",
          "[Removed Lines]",
          "83:  if (compat & SSH_BUG_SIGBLOB) {",
          "84:   if (sigp != NULL) {",
          "85:    if ((*sigp = malloc(SIGBLOB_LEN)) == NULL) {",
          "86:     ret = SSH_ERR_ALLOC_FAIL;",
          "87:     goto out;",
          "88:    }",
          "89:    memcpy(*sigp, sigblob, SIGBLOB_LEN);",
          "90:   }",
          "91:   if (lenp != NULL)",
          "93:   ret = 0;",
          "94:  } else {",
          "96:   if ((b = sshbuf_new()) == NULL) {",
          "100:   if ((ret = sshbuf_put_cstring(b, \"ssh-dss\")) != 0 ||",
          "101:       (ret = sshbuf_put_string(b, sigblob, SIGBLOB_LEN)) != 0)",
          "102:    goto out;",
          "103:   len = sshbuf_len(b);",
          "104:   if (sigp != NULL) {",
          "105:    if ((*sigp = malloc(len)) == NULL) {",
          "106:     ret = SSH_ERR_ALLOC_FAIL;",
          "107:     goto out;",
          "108:    }",
          "109:    memcpy(*sigp, sshbuf_ptr(b), len);",
          "110:   }",
          "111:   if (lenp != NULL)",
          "113:   ret = 0;",
          "",
          "[Added Lines]",
          "83:  if ((b = sshbuf_new()) == NULL) {",
          "84:   ret = SSH_ERR_ALLOC_FAIL;",
          "85:   goto out;",
          "86:  }",
          "87:  if ((ret = sshbuf_put_cstring(b, \"ssh-dss\")) != 0 ||",
          "88:      (ret = sshbuf_put_string(b, sigblob, SIGBLOB_LEN)) != 0)",
          "89:   goto out;",
          "91:  len = sshbuf_len(b);",
          "92:  if (sigp != NULL) {",
          "93:   if ((*sigp = malloc(len)) == NULL) {",
          "97:   memcpy(*sigp, sshbuf_ptr(b), len);",
          "99:  if (lenp != NULL)",
          "101:  ret = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:   return SSH_ERR_INTERNAL_ERROR;",
          "165:  }",
          "167:  if (len != SIGBLOB_LEN) {",
          "",
          "[Removed Lines]",
          "143:  if (compat & SSH_BUG_SIGBLOB) {",
          "144:   if ((sigblob = malloc(signaturelen)) == NULL)",
          "145:    return SSH_ERR_ALLOC_FAIL;",
          "146:   memcpy(sigblob, signature, signaturelen);",
          "147:   len = signaturelen;",
          "148:  } else {",
          "150:   if ((b = sshbuf_from(signature, signaturelen)) == NULL)",
          "151:    return SSH_ERR_ALLOC_FAIL;",
          "152:   if (sshbuf_get_cstring(b, &ktype, NULL) != 0 ||",
          "153:       sshbuf_get_string(b, &sigblob, &len) != 0) {",
          "154:    ret = SSH_ERR_INVALID_FORMAT;",
          "155:    goto out;",
          "156:   }",
          "157:   if (strcmp(\"ssh-dss\", ktype) != 0) {",
          "158:    ret = SSH_ERR_KEY_TYPE_MISMATCH;",
          "159:    goto out;",
          "160:   }",
          "161:   if (sshbuf_len(b) != 0) {",
          "162:    ret = SSH_ERR_UNEXPECTED_TRAILING_DATA;",
          "163:    goto out;",
          "164:   }",
          "",
          "[Added Lines]",
          "130:  if ((b = sshbuf_from(signature, signaturelen)) == NULL)",
          "131:   return SSH_ERR_ALLOC_FAIL;",
          "132:  if (sshbuf_get_cstring(b, &ktype, NULL) != 0 ||",
          "133:      sshbuf_get_string(b, &sigblob, &len) != 0) {",
          "134:   ret = SSH_ERR_INVALID_FORMAT;",
          "135:   goto out;",
          "136:  }",
          "137:  if (strcmp(\"ssh-dss\", ktype) != 0) {",
          "138:   ret = SSH_ERR_KEY_TYPE_MISMATCH;",
          "139:   goto out;",
          "140:  }",
          "141:  if (sshbuf_len(b) != 0) {",
          "142:   ret = SSH_ERR_UNEXPECTED_TRAILING_DATA;",
          "143:   goto out;",
          "",
          "---------------"
        ],
        "usr.bin/ssh/ssh.c||usr.bin/ssh/ssh.c": [
          "File: usr.bin/ssh/ssh.c -> usr.bin/ssh/ssh.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1881:  if (options.control_persist && muxserver_sock == -1)",
          "1882:   ssh_init_stdio_forwarding(ssh);",
          "1885:   id = ssh_session2_open(ssh);",
          "1886:  else {",
          "1887:   packet_set_interactive(",
          "",
          "[Removed Lines]",
          "1884:  if (!no_shell_flag || (datafellows & SSH_BUG_DUMMYCHAN))",
          "",
          "[Added Lines]",
          "1884:  if (!no_shell_flag)",
          "",
          "---------------"
        ],
        "usr.bin/ssh/sshconnect.c||usr.bin/ssh/sshconnect.c": [
          "File: usr.bin/ssh/sshconnect.c -> usr.bin/ssh/sshconnect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "605:  if (mismatch)",
          "606:   fatal(\"Protocol major versions differ: %d vs. %d\",",
          "607:       PROTOCOL_MAJOR_2, remote_major);",
          "611:  if ((datafellows & SSH_BUG_RSASIGMD5) != 0)",
          "612:   logit(\"Server version \\\"%.100s\\\" uses unsafe RSA signature \"",
          "613:       \"scheme; disabling use of RSA keys\", remote_version);",
          "",
          "[Removed Lines]",
          "608:  if ((datafellows & SSH_BUG_DERIVEKEY) != 0)",
          "609:   fatal(\"Server version \\\"%.100s\\\" uses unsafe key agreement; \"",
          "610:       \"refusing connection\", remote_version);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usr.bin/ssh/sshconnect2.c||usr.bin/ssh/sshconnect2.c": [
          "File: usr.bin/ssh/sshconnect2.c -> usr.bin/ssh/sshconnect2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:  Authctxt *authctxt = ssh->authctxt;",
          "571:  struct sshkey *key = NULL;",
          "572:  Identity *id = NULL;",
          "574:  int pktype, sent = 0;",
          "575:  u_int alen, blen;",
          "576:  char *pkalg, *fp;",
          "",
          "[Removed Lines]",
          "573:  Buffer b;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "579:  if (authctxt == NULL)",
          "580:   fatal(\"input_userauth_pk_ok: no authentication context\");",
          "593:  packet_check_eom();",
          "595:  debug(\"Server accepts key: pkalg %s blen %u\", pkalg, blen);",
          "",
          "[Removed Lines]",
          "581:  if (datafellows & SSH_BUG_PKOK) {",
          "583:   debug2(\"input_userauth_pk_ok: SSH_BUG_PKOK\");",
          "584:   pkblob = packet_get_string(&blen);",
          "585:   buffer_init(&b);",
          "586:   buffer_append(&b, pkblob, blen);",
          "587:   pkalg = buffer_get_string(&b, &alen);",
          "588:   buffer_free(&b);",
          "589:  } else {",
          "590:   pkalg = packet_get_string(&alen);",
          "591:   pkblob = packet_get_string(&blen);",
          "592:  }",
          "",
          "[Added Lines]",
          "581:  pkalg = packet_get_string(&alen);",
          "582:  pkblob = packet_get_string(&blen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1092:  }",
          "1093:  buffer_put_char(&b, SSH2_MSG_USERAUTH_REQUEST);",
          "1094:  buffer_put_cstring(&b, authctxt->server_user);",
          "1106:  buffer_put_string(&b, blob, bloblen);",
          "",
          "[Removed Lines]",
          "1095:  buffer_put_cstring(&b,",
          "1096:      datafellows & SSH_BUG_PKSERVICE ?",
          "1097:      \"ssh-userauth\" :",
          "1098:      authctxt->service);",
          "1099:  if (datafellows & SSH_BUG_PKAUTH) {",
          "1100:   buffer_put_char(&b, have_sig);",
          "1101:  } else {",
          "1102:   buffer_put_cstring(&b, authctxt->method->name);",
          "1103:   buffer_put_char(&b, have_sig);",
          "1104:   buffer_put_cstring(&b, key_sign_encode(id->key));",
          "1105:  }",
          "",
          "[Added Lines]",
          "1085:  buffer_put_cstring(&b, authctxt->service);",
          "1086:  buffer_put_cstring(&b, authctxt->method->name);",
          "1087:  buffer_put_char(&b, have_sig);",
          "1088:  buffer_put_cstring(&b, key_sign_encode(id->key));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1162: #ifdef DEBUG_PK",
          "1163:  buffer_dump(&b);",
          "1164: #endif",
          "1178:  free(blob);",
          "",
          "[Removed Lines]",
          "1165:  if (datafellows & SSH_BUG_PKSERVICE) {",
          "1166:   buffer_clear(&b);",
          "1167:   buffer_append(&b, session_id2, session_id2_len);",
          "1168:   skip = session_id2_len;",
          "1169:   buffer_put_char(&b, SSH2_MSG_USERAUTH_REQUEST);",
          "1170:   buffer_put_cstring(&b, authctxt->server_user);",
          "1171:   buffer_put_cstring(&b, authctxt->service);",
          "1172:   buffer_put_cstring(&b, authctxt->method->name);",
          "1173:   buffer_put_char(&b, have_sig);",
          "1174:   if (!(datafellows & SSH_BUG_PKAUTH))",
          "1175:    buffer_put_cstring(&b, key_ssh_name(id->key));",
          "1176:   buffer_put_string(&b, blob, bloblen);",
          "1177:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1216:  packet_put_cstring(authctxt->service);",
          "1217:  packet_put_cstring(authctxt->method->name);",
          "1218:  packet_put_char(have_sig);",
          "1221:  packet_put_string(blob, bloblen);",
          "1222:  free(blob);",
          "1223:  packet_send();",
          "",
          "[Removed Lines]",
          "1219:  if (!(datafellows & SSH_BUG_PKAUTH))",
          "1220:   packet_put_cstring(key_sign_encode(id->key));",
          "",
          "[Added Lines]",
          "1189:  packet_put_cstring(key_sign_encode(id->key));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1733:  struct ssh *ssh = active_state;",
          "1734:  struct sshkey *private = NULL;",
          "1735:  struct sshbuf *b = NULL;",
          "1737:  u_char *sig = NULL, *keyblob = NULL;",
          "1738:  char *fp = NULL, *chost = NULL, *lname = NULL;",
          "1739:  size_t siglen = 0, keylen = 0;",
          "",
          "[Removed Lines]",
          "1736:  const char *service;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1804:  xasprintf(&chost, \"%s.\", lname);",
          "1805:  debug2(\"%s: chost %s\", __func__, chost);",
          "1811:  if ((b = sshbuf_new()) == NULL) {",
          "1812:   error(\"%s: sshbuf_new failed\", __func__);",
          "",
          "[Removed Lines]",
          "1807:  service = datafellows & SSH_BUG_HBSERVICE ? \"ssh-userauth\" :",
          "1808:      authctxt->service;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1819:  if ((r = sshbuf_put_string(b, session_id2, session_id2_len)) != 0 ||",
          "1820:      (r = sshbuf_put_u8(b, SSH2_MSG_USERAUTH_REQUEST)) != 0 ||",
          "1821:      (r = sshbuf_put_cstring(b, authctxt->server_user)) != 0 ||",
          "1823:      (r = sshbuf_put_cstring(b, authctxt->method->name)) != 0 ||",
          "1824:      (r = sshbuf_put_cstring(b, key_ssh_name(private))) != 0 ||",
          "1825:      (r = sshbuf_put_string(b, keyblob, keylen)) != 0 ||",
          "",
          "[Removed Lines]",
          "1822:      (r = sshbuf_put_cstring(b, service)) != 0 ||",
          "",
          "[Added Lines]",
          "1787:      (r = sshbuf_put_cstring(b, authctxt->service)) != 0 ||",
          "",
          "---------------"
        ],
        "usr.bin/ssh/sshd.c||usr.bin/ssh/sshd.c": [
          "File: usr.bin/ssh/sshd.c -> usr.bin/ssh/sshd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "422:   logit(\"Client version \\\"%.100s\\\" uses unsafe RSA signature \"",
          "423:       \"scheme; disabling use of RSA keys\", remote_version);",
          "424:  }",
          "430:  chop(server_version_string);",
          "431:  debug(\"Local version string %.200s\", server_version_string);",
          "",
          "[Removed Lines]",
          "425:  if ((ssh->compat & SSH_BUG_DERIVEKEY) != 0) {",
          "426:   fatal(\"Client version \\\"%.100s\\\" uses unsafe key agreement; \"",
          "427:       \"refusing connection\", remote_version);",
          "428:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "234e08ab7c89dfeb7e91f623d6deb31758d32825",
      "candidate_info": {
        "commit_hash": "234e08ab7c89dfeb7e91f623d6deb31758d32825",
        "repo": "openbsd/src",
        "commit_url": "https://github.com/openbsd/src/commit/234e08ab7c89dfeb7e91f623d6deb31758d32825",
        "files": [
          "usr.bin/ssh/auth2-gss.c",
          "usr.bin/ssh/gss-genr.c",
          "usr.bin/ssh/gss-serv-krb5.c",
          "usr.bin/ssh/gss-serv.c"
        ],
        "message": "sshd: switch GSSAPI to sshbuf API; ok djm@",
        "before_after_code_files": [
          "usr.bin/ssh/auth2-gss.c||usr.bin/ssh/auth2-gss.c",
          "usr.bin/ssh/gss-genr.c||usr.bin/ssh/gss-genr.c",
          "usr.bin/ssh/gss-serv-krb5.c||usr.bin/ssh/gss-serv-krb5.c",
          "usr.bin/ssh/gss-serv.c||usr.bin/ssh/gss-serv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usr.bin/ssh/auth2-gss.c||usr.bin/ssh/auth2-gss.c"
          ],
          "candidate": [
            "usr.bin/ssh/auth2-gss.c||usr.bin/ssh/auth2-gss.c"
          ]
        }
      },
      "candidate_diff": {
        "usr.bin/ssh/auth2-gss.c||usr.bin/ssh/auth2-gss.c": [
          "File: usr.bin/ssh/auth2-gss.c -> usr.bin/ssh/auth2-gss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <sys/types.h>",
          "31: #include \"xmalloc.h\"",
          "33: #include \"hostfile.h\"",
          "34: #include \"auth.h\"",
          "35: #include \"ssh2.h\"",
          "36: #include \"log.h\"",
          "37: #include \"dispatch.h\"",
          "39: #include \"servconf.h\"",
          "40: #include \"packet.h\"",
          "41: #include \"ssh-gss.h\"",
          "",
          "[Removed Lines]",
          "32: #include \"key.h\"",
          "38: #include \"buffer.h\"",
          "",
          "[Added Lines]",
          "32: #include \"sshkey.h\"",
          "38: #include \"sshbuf.h\"",
          "39: #include \"ssherr.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:  Authctxt *authctxt = ssh->authctxt;",
          "59:  gss_OID_desc goid = {0, NULL};",
          "60:  Gssctxt *ctxt = NULL;",
          "63:  OM_uint32 ms;",
          "65:  u_char *doid = NULL;",
          "67:  if (!authctxt->valid || authctxt->user == NULL)",
          "68:   return (0);",
          "71:  if (mechs == 0) {",
          "72:   debug(\"Mechanism negotiation is not supported\");",
          "73:   return (0);",
          "",
          "[Removed Lines]",
          "61:  int mechs;",
          "62:  int present;",
          "64:  u_int len;",
          "70:  mechs = packet_get_int();",
          "",
          "[Added Lines]",
          "62:  int r, present;",
          "63:  u_int mechs;",
          "65:  size_t len;",
          "71:  if ((r = sshpkt_get_u32(ssh, &mechs)) != 0)",
          "72:   fatal(\"%s: %s\", __func__, ssh_err(r));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:   free(doid);",
          "81:   present = 0;",
          "84:   if (len > 2 && doid[0] == SSH_GSS_OIDTYPE &&",
          "85:       doid[1] == len - 2) {",
          "",
          "[Removed Lines]",
          "82:   doid = packet_get_string(&len);",
          "",
          "[Added Lines]",
          "85:   if ((r = sshpkt_get_string(ssh, &doid, &len)) != 0)",
          "86:    fatal(\"%s: %s\", __func__, ssh_err(r));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:  authctxt->methoddata = (void *)ctxt;",
          "116:  free(doid);",
          "118:  ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, &input_gssapi_token);",
          "",
          "[Removed Lines]",
          "110:  packet_start(SSH2_MSG_USERAUTH_GSSAPI_RESPONSE);",
          "113:  packet_put_string(doid, len);",
          "115:  packet_send();",
          "",
          "[Added Lines]",
          "115:  if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_GSSAPI_RESPONSE)) != 0 ||",
          "116:      (r = sshpkt_put_string(ssh, doid, len)) != 0 ||",
          "117:      (r = sshpkt_send(ssh)) != 0)",
          "118:   fatal(\"%s: %s\", __func__, ssh_err(r));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:  gss_buffer_desc send_tok = GSS_C_EMPTY_BUFFER;",
          "131:  gss_buffer_desc recv_tok;",
          "132:  OM_uint32 maj_status, min_status, flags;",
          "135:  if (authctxt == NULL || (authctxt->methoddata == NULL && !use_privsep))",
          "136:   fatal(\"No authentication or GSSAPI context\");",
          "138:  gssctxt = authctxt->methoddata;",
          "144:  maj_status = PRIVSEP(ssh_gssapi_accept_ctx(gssctxt, &recv_tok,",
          "145:      &send_tok, &flags));",
          "149:  if (GSS_ERROR(maj_status)) {",
          "150:   if (send_tok.length != 0) {",
          "154:   }",
          "155:   authctxt->postponed = 0;",
          "156:   ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, NULL);",
          "157:   userauth_finish(ssh, 0, \"gssapi-with-mic\", NULL);",
          "158:  } else {",
          "159:   if (send_tok.length != 0) {",
          "163:   }",
          "164:   if (maj_status == GSS_S_COMPLETE) {",
          "165:    ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, NULL);",
          "",
          "[Removed Lines]",
          "133:  u_int len;",
          "139:  recv_tok.value = packet_get_string(&len);",
          "142:  packet_check_eom();",
          "147:  free(recv_tok.value);",
          "151:    packet_start(SSH2_MSG_USERAUTH_GSSAPI_ERRTOK);",
          "152:    packet_put_string(send_tok.value, send_tok.length);",
          "153:    packet_send();",
          "160:    packet_start(SSH2_MSG_USERAUTH_GSSAPI_TOKEN);",
          "161:    packet_put_string(send_tok.value, send_tok.length);",
          "162:    packet_send();",
          "",
          "[Added Lines]",
          "137:  u_char *p;",
          "138:  size_t len;",
          "139:  int r;",
          "145:  if ((r = sshpkt_get_string(ssh, &p, &len)) != 0 ||",
          "146:      (r = sshpkt_get_end(ssh)) != 0)",
          "147:   fatal(\"%s: %s\", __func__, ssh_err(r));",
          "149:  recv_tok.value = p;",
          "150:  recv_tok.length = len;",
          "154:  free(p);",
          "158:    if ((r = sshpkt_start(ssh,",
          "159:        SSH2_MSG_USERAUTH_GSSAPI_ERRTOK)) != 0 ||",
          "160:        (r = sshpkt_put_string(ssh, send_tok.value,",
          "161:        send_tok.length)) != 0 ||",
          "162:        (r = sshpkt_send(ssh)) != 0)",
          "163:     fatal(\"%s: %s\", __func__, ssh_err(r));",
          "170:    if ((r = sshpkt_start(ssh,",
          "171:        SSH2_MSG_USERAUTH_GSSAPI_TOKEN)) != 0 ||",
          "172:        (r = sshpkt_put_string(ssh, send_tok.value,",
          "173:        send_tok.length)) != 0 ||",
          "174:        (r = sshpkt_send(ssh)) != 0)",
          "175:     fatal(\"%s: %s\", __func__, ssh_err(r));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "185:  gss_buffer_desc send_tok = GSS_C_EMPTY_BUFFER;",
          "186:  gss_buffer_desc recv_tok;",
          "187:  OM_uint32 maj_status;",
          "190:  if (authctxt == NULL || (authctxt->methoddata == NULL && !use_privsep))",
          "191:   fatal(\"No authentication or GSSAPI context\");",
          "193:  gssctxt = authctxt->methoddata;",
          "200:  maj_status = PRIVSEP(ssh_gssapi_accept_ctx(gssctxt, &recv_tok,",
          "",
          "[Removed Lines]",
          "188:  u_int len;",
          "194:  recv_tok.value = packet_get_string(&len);",
          "195:  recv_tok.length = len;",
          "197:  packet_check_eom();",
          "",
          "[Added Lines]",
          "201:  int r;",
          "207:  if ((r = sshpkt_get_string(ssh,",
          "208:      &recv_tok.value, &recv_tok.length)) != 0 ||",
          "209:      (r = sshpkt_get_end(ssh)) != 0)",
          "210:   fatal(\"%s: %s\", __func__, ssh_err(r));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "238:  authenticated = PRIVSEP(ssh_gssapi_userok(authctxt->user));",
          "",
          "[Removed Lines]",
          "236:  packet_check_eom();",
          "",
          "[Added Lines]",
          "249:  if ((r = sshpkt_get_end(ssh)) != 0)",
          "250:   fatal(\"%s: %s\", __func__, ssh_err(r));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "255: {",
          "256:  Authctxt *authctxt = ssh->authctxt;",
          "257:  Gssctxt *gssctxt;",
          "260:  gss_buffer_desc mic, gssbuf;",
          "262:  const char *displayname;",
          "264:  if (authctxt == NULL || (authctxt->methoddata == NULL && !use_privsep))",
          "",
          "[Removed Lines]",
          "258:  int authenticated = 0;",
          "259:  Buffer b;",
          "261:  u_int len;",
          "",
          "[Added Lines]",
          "272:  int r, authenticated = 0;",
          "273:  struct sshbuf *b;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "267:  gssctxt = authctxt->methoddata;",
          "273:      \"gssapi-with-mic\");",
          "278:  if (!GSS_ERROR(PRIVSEP(ssh_gssapi_checkmic(gssctxt, &gssbuf, &mic))))",
          "279:   authenticated = PRIVSEP(ssh_gssapi_userok(authctxt->user));",
          "280:  else",
          "281:   logit(\"GSSAPI MIC check failed\");",
          "284:  free(mic.value);",
          "286:  if ((!use_privsep || mm_is_monitor()) &&",
          "",
          "[Removed Lines]",
          "269:  mic.value = packet_get_string(&len);",
          "270:  mic.length = len;",
          "272:  ssh_gssapi_buildmic(&b, authctxt->user, authctxt->service,",
          "275:  gssbuf.value = buffer_ptr(&b);",
          "276:  gssbuf.length = buffer_len(&b);",
          "283:  buffer_free(&b);",
          "",
          "[Added Lines]",
          "282:  if ((r = sshpkt_get_string(ssh, &mic.value, &mic.length)) != 0)",
          "283:   fatal(\"%s: %s\", __func__, ssh_err(r));",
          "284:  if ((b = sshbuf_new()) == NULL)",
          "285:   fatal(\"%s: sshbuf_new failed\", __func__);",
          "286:  ssh_gssapi_buildmic(b, authctxt->user, authctxt->service,",
          "289:  if ((gssbuf.value = sshbuf_mutable_ptr(b)) == NULL)",
          "290:   fatal(\"%s: sshbuf_mutable_ptr failed\", __func__);",
          "291:  gssbuf.length = sshbuf_len(b);",
          "298:  sshbuf_free(b);",
          "",
          "---------------"
        ],
        "usr.bin/ssh/gss-genr.c||usr.bin/ssh/gss-genr.c": [
          "File: usr.bin/ssh/gss-genr.c -> usr.bin/ssh/gss-genr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <limits.h>",
          "34: #include \"xmalloc.h\"",
          "36: #include \"log.h\"",
          "37: #include \"ssh2.h\"",
          "",
          "[Removed Lines]",
          "35: #include \"buffer.h\"",
          "",
          "[Added Lines]",
          "35: #include \"ssherr.h\"",
          "36: #include \"sshbuf.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:  OM_uint32 lmin;",
          "90:  gss_buffer_desc msg = GSS_C_EMPTY_BUFFER;",
          "91:  OM_uint32 ctx;",
          "93:  char *ret;",
          "97:  if (major_status != NULL)",
          "",
          "[Removed Lines]",
          "92:  Buffer b;",
          "95:  buffer_init(&b);",
          "",
          "[Added Lines]",
          "93:  struct sshbuf *b;",
          "95:  int r;",
          "97:  if ((b = sshbuf_new()) == NULL)",
          "98:   fatal(\"%s: sshbuf_new failed\", __func__);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:   gss_display_status(&lmin, ctxt->major,",
          "106:       GSS_C_GSS_CODE, ctxt->oid, &ctx, &msg);",
          "111:   gss_release_buffer(&lmin, &msg);",
          "112:  } while (ctx != 0);",
          "",
          "[Removed Lines]",
          "108:   buffer_append(&b, msg.value, msg.length);",
          "109:   buffer_put_char(&b, '\\n');",
          "",
          "[Added Lines]",
          "111:   if ((r = sshbuf_put(b, msg.value, msg.length)) != 0 ||",
          "112:       (r = sshbuf_put_u8(b, '\\n')) != 0)",
          "113:    fatal(\"%s: buffer error: %s\", __func__, ssh_err(r));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:   gss_display_status(&lmin, ctxt->minor,",
          "117:       GSS_C_MECH_CODE, ctxt->oid, &ctx, &msg);",
          "122:   gss_release_buffer(&lmin, &msg);",
          "123:  } while (ctx != 0);",
          "129:  return (ret);",
          "130: }",
          "",
          "[Removed Lines]",
          "119:   buffer_append(&b, msg.value, msg.length);",
          "120:   buffer_put_char(&b, '\\n');",
          "125:  buffer_put_char(&b, '\\0');",
          "126:  ret = xmalloc(buffer_len(&b));",
          "127:  buffer_get(&b, ret, buffer_len(&b));",
          "128:  buffer_free(&b);",
          "",
          "[Added Lines]",
          "123:   if ((r = sshbuf_put(b, msg.value, msg.length)) != 0 ||",
          "124:       (r = sshbuf_put_u8(b, '\\n')) != 0)",
          "125:    fatal(\"%s: buffer error: %s\", __func__, ssh_err(r));",
          "130:  if ((r = sshbuf_put_u8(b, '\\n')) != 0)",
          "131:   fatal(\"%s: buffer error: %s\", __func__, ssh_err(r));",
          "132:  ret = xstrdup((const char *)sshbuf_ptr(b));",
          "133:  sshbuf_free(b);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233: }",
          "235: void",
          "237:     const char *context)",
          "238: {",
          "245: }",
          "247: int",
          "",
          "[Removed Lines]",
          "236: ssh_gssapi_buildmic(Buffer *b, const char *user, const char *service,",
          "239:  buffer_init(b);",
          "240:  buffer_put_string(b, session_id2, session_id2_len);",
          "241:  buffer_put_char(b, SSH2_MSG_USERAUTH_REQUEST);",
          "242:  buffer_put_cstring(b, user);",
          "243:  buffer_put_cstring(b, service);",
          "244:  buffer_put_cstring(b, context);",
          "",
          "[Added Lines]",
          "241: ssh_gssapi_buildmic(struct sshbuf *b, const char *user, const char *service,",
          "244:  int r;",
          "246:  sshbuf_reset(b);",
          "247:  if ((r = sshbuf_put_string(b, session_id2, session_id2_len)) != 0 ||",
          "248:      (r = sshbuf_put_u8(b, SSH2_MSG_USERAUTH_REQUEST)) != 0 ||",
          "249:      (r = sshbuf_put_cstring(b, user)) != 0 ||",
          "250:      (r = sshbuf_put_cstring(b, service)) != 0 ||",
          "251:      (r = sshbuf_put_cstring(b, context)) != 0)",
          "252:   fatal(\"%s: buffer error: %s\", __func__, ssh_err(r));",
          "",
          "---------------"
        ],
        "usr.bin/ssh/gss-serv-krb5.c||usr.bin/ssh/gss-serv-krb5.c": [
          "File: usr.bin/ssh/gss-serv-krb5.c -> usr.bin/ssh/gss-serv-krb5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <sys/types.h>",
          "32: #include \"xmalloc.h\"",
          "34: #include \"hostfile.h\"",
          "35: #include \"auth.h\"",
          "36: #include \"log.h\"",
          "39: #include \"ssh-gss.h\"",
          "41: #include <krb5.h>",
          "",
          "[Removed Lines]",
          "33: #include \"key.h\"",
          "38: #include \"buffer.h\"",
          "",
          "[Added Lines]",
          "33: #include \"sshkey.h\"",
          "",
          "---------------"
        ],
        "usr.bin/ssh/gss-serv.c||usr.bin/ssh/gss-serv.c": [
          "File: usr.bin/ssh/gss-serv.c -> usr.bin/ssh/gss-serv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <string.h>",
          "34: #include \"xmalloc.h\"",
          "37: #include \"hostfile.h\"",
          "38: #include \"auth.h\"",
          "39: #include \"log.h\"",
          "",
          "[Removed Lines]",
          "35: #include \"buffer.h\"",
          "36: #include \"key.h\"",
          "",
          "[Added Lines]",
          "35: #include \"sshkey.h\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a022a94d67704bd91d31f30beb9f5e4c1b748614",
      "candidate_info": {
        "commit_hash": "a022a94d67704bd91d31f30beb9f5e4c1b748614",
        "repo": "openbsd/src",
        "commit_url": "https://github.com/openbsd/src/commit/a022a94d67704bd91d31f30beb9f5e4c1b748614",
        "files": [
          "usr.bin/ssh/auth2-pubkey.c"
        ],
        "message": "include signature type and CA key (if applicable) in some debug messages",
        "before_after_code_files": [
          "usr.bin/ssh/auth2-pubkey.c||usr.bin/ssh/auth2-pubkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usr.bin/ssh/auth2-pubkey.c||usr.bin/ssh/auth2-pubkey.c"
          ],
          "candidate": [
            "usr.bin/ssh/auth2-pubkey.c||usr.bin/ssh/auth2-pubkey.c"
          ]
        }
      },
      "candidate_diff": {
        "usr.bin/ssh/auth2-pubkey.c||usr.bin/ssh/auth2-pubkey.c": [
          "File: usr.bin/ssh/auth2-pubkey.c -> usr.bin/ssh/auth2-pubkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: extern u_char *session_id2;",
          "71: extern u_int session_id2_len;",
          "73: static int",
          "74: userauth_pubkey(struct ssh *ssh)",
          "75: {",
          "76:  Authctxt *authctxt = ssh->authctxt;",
          "77:  struct sshbuf *b;",
          "78:  struct sshkey *key = NULL;",
          "80:  u_char *pkblob, *sig, have_sig;",
          "81:  size_t blen, slen;",
          "82:  int r, pktype;",
          "",
          "[Removed Lines]",
          "79:  char *pkalg, *userstyle = NULL, *fp = NULL;",
          "",
          "[Added Lines]",
          "73: static char *",
          "74: format_key(const struct sshkey *key)",
          "75: {",
          "76:  char *ret, *fp = sshkey_fingerprint(key,",
          "77:      options.fingerprint_hash, SSH_FP_DEFAULT);",
          "79:  xasprintf(&ret, \"%s %s\", sshkey_type(key), fp);",
          "80:  free(fp);",
          "81:  return ret;",
          "82: }",
          "90:  char *pkalg, *userstyle = NULL, *key_s = NULL, *ca_s = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:       \"signature scheme\");",
          "133:   goto done;",
          "134:  }",
          "136:  if (auth2_key_already_used(authctxt, key)) {",
          "137:   logit(\"refusing previously-used %s key\", sshkey_type(key));",
          "138:   goto done;",
          "",
          "[Removed Lines]",
          "135:  fp = sshkey_fingerprint(key, options.fingerprint_hash, SSH_FP_DEFAULT);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:   goto done;",
          "145:  }",
          "147:  if (have_sig) {",
          "150:   if ((r = sshpkt_get_string(ssh, &sig, &slen)) != 0 ||",
          "151:       (r = sshpkt_get_end(ssh)) != 0)",
          "152:    fatal(\"%s: %s\", __func__, ssh_err(r));",
          "",
          "[Removed Lines]",
          "148:   debug3(\"%s: have signature for %s %s\",",
          "149:       __func__, sshkey_type(key), fp);",
          "",
          "[Added Lines]",
          "157:  key_s = format_key(key);",
          "158:  if (sshkey_is_cert(key))",
          "159:   ca_s = format_key(key->cert->signature_key);",
          "162:   debug3(\"%s: have %s signature for %s%s%s\",",
          "163:       __func__, pkalg, key_s,",
          "164:       ca_s == NULL ? \"\" : \" CA \",",
          "165:       ca_s == NULL ? \"\" : ca_s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:   free(sig);",
          "203:   auth2_record_key(authctxt, authenticated, key);",
          "204:  } else {",
          "207:   if ((r = sshpkt_get_end(ssh)) != 0)",
          "208:    fatal(\"%s: %s\", __func__, ssh_err(r));",
          "",
          "[Removed Lines]",
          "205:   debug(\"%s: test whether pkalg/pkblob are acceptable for %s %s\",",
          "206:       __func__, sshkey_type(key), fp);",
          "",
          "[Added Lines]",
          "221:   debug(\"%s: test pkalg %s pkblob %s%s%s\",",
          "222:       __func__, pkalg, key_s,",
          "223:       ca_s == NULL ? \"\" : \" CA \",",
          "224:       ca_s == NULL ? \"\" : ca_s);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "234:  free(userstyle);",
          "235:  free(pkalg);",
          "236:  free(pkblob);",
          "238:  return authenticated;",
          "239: }",
          "",
          "[Removed Lines]",
          "237:  free(fp);",
          "",
          "[Added Lines]",
          "256:  free(key_s);",
          "257:  free(ca_s);",
          "",
          "---------------"
        ]
      }
    }
  ]
}