{
  "cve_id": "CVE-2020-29373",
  "cve_desc": "An issue was discovered in fs/io_uring.c in the Linux kernel before 5.6. It unsafely handles the root directory during path lookups, and thus a process inside a mount namespace can escape to unintended filesystem locations, aka CID-ff002b30181d.",
  "repo": "torvalds/linux",
  "patch_hash": "ff002b30181d30cdfbca316dadd099c3ca0d739c",
  "patch_info": {
    "commit_hash": "ff002b30181d30cdfbca316dadd099c3ca0d739c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/ff002b30181d30cdfbca316dadd099c3ca0d739c",
    "files": [
      "fs/io_uring.c"
    ],
    "message": "io_uring: grab ->fs as part of async preparation\n\nThis passes it in to io-wq, so it assumes the right fs_struct when\nexecuting async work that may need to do lookups.\n\nCc: stable@vger.kernel.org # 5.3+\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
    "before_after_code_files": [
      "fs/io_uring.c||fs/io_uring.c"
    ]
  },
  "patch_diff": {
    "fs/io_uring.c||fs/io_uring.c": [
      "File: fs/io_uring.c -> fs/io_uring.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "75: #include <linux/fsnotify.h>",
      "76: #include <linux/fadvise.h>",
      "77: #include <linux/eventpoll.h>",
      "79: #define CREATE_TRACE_POINTS",
      "80: #include <trace/events/io_uring.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78: #include <linux/fs_struct.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "611:  unsigned  not_supported : 1;",
      "613:  unsigned  file_table : 1;",
      "614: };",
      "616: static const struct io_op_def io_op_defs[] = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "616:  unsigned  needs_fs : 1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "653:   .needs_mm  = 1,",
      "654:   .needs_file  = 1,",
      "655:   .unbound_nonreg_file = 1,",
      "656:  },",
      "657:  [IORING_OP_RECVMSG] = {",
      "658:   .async_ctx  = 1,",
      "659:   .needs_mm  = 1,",
      "660:   .needs_file  = 1,",
      "661:   .unbound_nonreg_file = 1,",
      "662:  },",
      "663:  [IORING_OP_TIMEOUT] = {",
      "664:   .async_ctx  = 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "659:   .needs_fs  = 1,",
      "666:   .needs_fs  = 1,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "689:   .needs_file  = 1,",
      "690:   .fd_non_neg  = 1,",
      "691:   .file_table  = 1,",
      "692:  },",
      "693:  [IORING_OP_CLOSE] = {",
      "694:   .needs_file  = 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "697:   .needs_fs  = 1,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "702:   .needs_mm  = 1,",
      "703:   .needs_file  = 1,",
      "704:   .fd_non_neg  = 1,",
      "705:  },",
      "706:  [IORING_OP_READ] = {",
      "707:   .needs_mm  = 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "711:   .needs_fs  = 1,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "733:   .needs_file  = 1,",
      "734:   .fd_non_neg  = 1,",
      "735:   .file_table  = 1,",
      "736:  },",
      "737:  [IORING_OP_EPOLL_CTL] = {",
      "738:   .unbound_nonreg_file = 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "743:   .needs_fs  = 1,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "907:  }",
      "908:  if (!req->work.creds)",
      "909:   req->work.creds = get_current_cred();",
      "910: }",
      "912: static inline void io_req_work_drop_env(struct io_kiocb *req)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "918:  if (!req->work.fs && def->needs_fs) {",
      "919:   spin_lock(&current->fs->lock);",
      "920:   if (!current->fs->in_exec) {",
      "921:    req->work.fs = current->fs;",
      "922:    req->work.fs->users++;",
      "923:   } else {",
      "924:    req->work.flags |= IO_WQ_WORK_CANCEL;",
      "925:   }",
      "926:   spin_unlock(&current->fs->lock);",
      "927:  }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "919:   put_cred(req->work.creds);",
      "920:   req->work.creds = NULL;",
      "921:  }",
      "922: }",
      "924: static inline bool io_prep_async_work(struct io_kiocb *req,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "940:  if (req->work.fs) {",
      "941:   struct fs_struct *fs = req->work.fs;",
      "943:   spin_lock(&req->work.fs->lock);",
      "944:   if (--fs->users)",
      "945:    fs = NULL;",
      "946:   spin_unlock(&req->work.fs->lock);",
      "947:   if (fs)",
      "948:    free_fs_struct(fs);",
      "949:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cbdcb4357c000861b77369c34e110fa893d23607",
      "candidate_info": {
        "commit_hash": "cbdcb4357c000861b77369c34e110fa893d23607",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/cbdcb4357c000861b77369c34e110fa893d23607",
        "files": [
          "fs/io_uring.c"
        ],
        "message": "io_uring: do grab_env() just before punting\n\nCurrently io_steal_work() is disabled, and every linked request should\ngo through task_work for initialisation. Do io_req_work_grab_env()\njust before io-wq punting and for the whole link, so any request\nreachable by io_steal_work() is prepared.\n\nThis is also interesting for another reason -- it localises\nio_req_work_grab_env() into one place just before io-wq punting, helping\nto to better manage req->work lifetime and add some neat\ncleanup/optimisations later.\n\nSigned-off-by: Pavel Begunkov <asml.silence@gmail.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1101:  }",
          "1102: }",
          "1105: {",
          "1106:  const struct io_op_def *def = &io_op_defs[req->opcode];",
          "",
          "[Removed Lines]",
          "1104: static inline void io_req_work_grab_env(struct io_kiocb *req)",
          "",
          "[Added Lines]",
          "1104: static void io_req_work_grab_env(struct io_kiocb *req)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1150:  }",
          "1151: }",
          "1155: {",
          "1156:  const struct io_op_def *def = &io_op_defs[req->opcode];",
          "",
          "[Removed Lines]",
          "1153: static inline void io_prep_async_work(struct io_kiocb *req,",
          "1154:           struct io_kiocb **link)",
          "",
          "[Added Lines]",
          "1153: static void io_prep_async_work(struct io_kiocb *req)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1164:  }",
          "1166:  io_req_work_grab_env(req);",
          "1168: }",
          "1171: {",
          "1177:  trace_io_uring_queue_async_work(ctx, io_wq_is_hashed(&req->work), req,",
          "1178:      &req->work, req->flags);",
          "",
          "[Removed Lines]",
          "1170: static inline void io_queue_async_work(struct io_kiocb *req)",
          "1172:  struct io_ring_ctx *ctx = req->ctx;",
          "1173:  struct io_kiocb *link;",
          "1175:  io_prep_async_work(req, &link);",
          "",
          "[Added Lines]",
          "1168: static void io_prep_async_link(struct io_kiocb *req)",
          "1170:  struct io_kiocb *cur;",
          "1172:  io_prep_async_work(req);",
          "1173:  if (req->flags & REQ_F_LINK_HEAD)",
          "1174:   list_for_each_entry(cur, &req->link_list, link_list)",
          "1175:    io_prep_async_work(cur);",
          "1176: }",
          "1178: static void __io_queue_async_work(struct io_kiocb *req)",
          "1179: {",
          "1180:  struct io_ring_ctx *ctx = req->ctx;",
          "1181:  struct io_kiocb *link = io_prep_linked_timeout(req);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1182:   io_queue_linked_timeout(link);",
          "1183: }",
          "1185: static void io_kill_timeout(struct io_kiocb *req)",
          "1186: {",
          "1187:  int ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1191: static void io_queue_async_work(struct io_kiocb *req)",
          "1192: {",
          "1194:  io_prep_async_link(req);",
          "1195:  __io_queue_async_work(req);",
          "1196: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1215:   if (req_need_defer(req))",
          "1216:    break;",
          "1217:   list_del_init(&req->list);",
          "1219:  } while (!list_empty(&ctx->defer_list));",
          "1220: }",
          "",
          "[Removed Lines]",
          "1218:   io_queue_async_work(req);",
          "",
          "[Added Lines]",
          "1232:   __io_queue_async_work(req);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1792: static struct io_wq_work *io_steal_work(struct io_kiocb *req)",
          "1793: {",
          "",
          "[Removed Lines]",
          "1794:  struct io_kiocb *nxt = NULL;",
          "",
          "[Added Lines]",
          "1808:  struct io_kiocb *timeout, *nxt = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1805:  if (!nxt)",
          "1806:   return NULL;",
          "1820: }",
          "",
          "[Removed Lines]",
          "1808:  if ((nxt->flags & REQ_F_ISREG) && io_op_defs[nxt->opcode].hash_reg_file)",
          "1809:   io_wq_hash_work(&nxt->work, file_inode(nxt->file));",
          "1811:  io_req_task_queue(nxt);",
          "1819:  return NULL;",
          "",
          "[Added Lines]",
          "1822:  timeout = io_prep_linked_timeout(nxt);",
          "1823:  if (timeout)",
          "1824:   nxt->flags |= REQ_F_QUEUE_TIMEOUT;",
          "1825:  return &nxt->work;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5369:   ret = io_req_defer_prep(req, sqe);",
          "5370:   if (ret < 0)",
          "5371:    return ret;",
          "5373:  }",
          "5375:  spin_lock_irq(&ctx->completion_lock);",
          "5376:  if (!req_need_defer(req) && list_empty(&ctx->defer_list)) {",
          "",
          "[Removed Lines]",
          "5372:   io_req_work_grab_env(req);",
          "",
          "[Added Lines]",
          "5379:  io_prep_async_link(req);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5984:    ret = io_req_defer_prep(req, sqe);",
          "5985:    if (unlikely(ret < 0))",
          "5986:     goto fail_req;",
          "5988:   }",
          "",
          "[Removed Lines]",
          "5987:    io_req_work_grab_env(req);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4edf20f9990230e9b85e79954d5cd28fc93616e9",
      "candidate_info": {
        "commit_hash": "4edf20f9990230e9b85e79954d5cd28fc93616e9",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4edf20f9990230e9b85e79954d5cd28fc93616e9",
        "files": [
          "fs/io_uring.c"
        ],
        "message": "io_uring: dig out COMP_LOCK from deep call chain\n\nio_req_clean_work() checks REQ_F_COMP_LOCK to pass this two layers up.\nMove the check up into __io_free_req(), so at least it doesn't looks so\nugly and would facilitate further changes.\n\nSigned-off-by: Pavel Begunkov <asml.silence@gmail.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1181:  }",
          "1182: }",
          "1189: {",
          "1190:  if (!(req->flags & REQ_F_WORK_INITIALIZED))",
          "1193:  req->flags &= ~REQ_F_WORK_INITIALIZED;",
          "",
          "[Removed Lines]",
          "1188: static bool io_req_clean_work(struct io_kiocb *req)",
          "1191:   return false;",
          "",
          "[Added Lines]",
          "1184: static void io_req_clean_work(struct io_kiocb *req)",
          "1187:   return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1207:  if (req->work.fs) {",
          "1208:   struct fs_struct *fs = req->work.fs;",
          "1213:   spin_lock(&req->work.fs->lock);",
          "1214:   if (--fs->users)",
          "1215:    fs = NULL;",
          "",
          "[Removed Lines]",
          "1210:   if (req->flags & REQ_F_COMP_LOCKED)",
          "1211:    return true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1218:    free_fs_struct(fs);",
          "1219:   req->work.fs = NULL;",
          "1220:  }",
          "1223: }",
          "1225: static void io_prep_async_work(struct io_kiocb *req)",
          "",
          "[Removed Lines]",
          "1222:  return false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1699:   fput(file);",
          "1700: }",
          "1703: {",
          "1704:  io_clean_op(req);",
          "",
          "[Removed Lines]",
          "1702: static bool io_dismantle_req(struct io_kiocb *req)",
          "",
          "[Added Lines]",
          "1693: static void io_dismantle_req(struct io_kiocb *req)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1708:  if (req->file)",
          "1709:   io_put_file(req, req->file, (req->flags & REQ_F_FIXED_FILE));",
          "1712: }",
          "1714: static void __io_free_req_finish(struct io_kiocb *req)",
          "",
          "[Removed Lines]",
          "1711:  return io_req_clean_work(req);",
          "",
          "[Added Lines]",
          "1702:  io_req_clean_work(req);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1731: static void io_req_task_file_table_put(struct callback_head *cb)",
          "1732: {",
          "1733:  struct io_kiocb *req = container_of(cb, struct io_kiocb, task_work);",
          "1743:  __io_free_req_finish(req);",
          "1744: }",
          "1746: static void __io_free_req(struct io_kiocb *req)",
          "1747: {",
          "1749:   __io_free_req_finish(req);",
          "1750:  } else {",
          "1751:   int ret;",
          "",
          "[Removed Lines]",
          "1734:  struct fs_struct *fs = req->work.fs;",
          "1736:  spin_lock(&req->work.fs->lock);",
          "1737:  if (--fs->users)",
          "1738:   fs = NULL;",
          "1739:  spin_unlock(&req->work.fs->lock);",
          "1740:  if (fs)",
          "1741:   free_fs_struct(fs);",
          "1742:  req->work.fs = NULL;",
          "1748:  if (!io_dismantle_req(req)) {",
          "",
          "[Added Lines]",
          "1726:  io_dismantle_req(req);",
          "1732:  if (!(req->flags & REQ_F_COMP_LOCKED)) {",
          "1733:   io_dismantle_req(req);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2057:  }",
          "2058:  rb->task_refs++;",
          "2061:  rb->reqs[rb->to_free++] = req;",
          "2062:  if (unlikely(rb->to_free == ARRAY_SIZE(rb->reqs)))",
          "2063:   __io_req_free_batch_flush(req->ctx, rb);",
          "",
          "[Removed Lines]",
          "2060:  WARN_ON_ONCE(io_dismantle_req(req));",
          "",
          "[Added Lines]",
          "2045:  io_dismantle_req(req);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dca9cf8b87f55c96f072c1fc6bc90e2b97a8e19f",
      "candidate_info": {
        "commit_hash": "dca9cf8b87f55c96f072c1fc6bc90e2b97a8e19f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/dca9cf8b87f55c96f072c1fc6bc90e2b97a8e19f",
        "files": [
          "fs/io_uring.c"
        ],
        "message": "io_uring: inline io_req_work_grab_env()\n\nThe only caller of io_req_work_grab_env() is io_prep_async_work(), and\nthey are both initialising req->work. Inline grab_env(), it's easier\nto keep this way, moreover there already were bugs with misplacing\nio_req_init_async().\n\nSigned-off-by: Pavel Begunkov <asml.silence@gmail.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1115:  }",
          "1116: }",
          "1143: {",
          "1144:  if (!(req->flags & REQ_F_WORK_INITIALIZED))",
          "1145:   return;",
          "",
          "[Removed Lines]",
          "1118: static void io_req_work_grab_env(struct io_kiocb *req)",
          "1119: {",
          "1120:  const struct io_op_def *def = &io_op_defs[req->opcode];",
          "1122:  io_req_init_async(req);",
          "1124:  if (!req->work.mm && def->needs_mm) {",
          "1125:   mmgrab(current->mm);",
          "1126:   req->work.mm = current->mm;",
          "1127:  }",
          "1128:  if (!req->work.creds)",
          "1129:   req->work.creds = get_current_cred();",
          "1130:  if (!req->work.fs && def->needs_fs) {",
          "1131:   spin_lock(&current->fs->lock);",
          "1132:   if (!current->fs->in_exec) {",
          "1133:    req->work.fs = current->fs;",
          "1134:    req->work.fs->users++;",
          "1135:   } else {",
          "1136:    req->work.flags |= IO_WQ_WORK_CANCEL;",
          "1137:   }",
          "1138:   spin_unlock(&current->fs->lock);",
          "1139:  }",
          "1140: }",
          "1142: static inline void io_req_work_drop_env(struct io_kiocb *req)",
          "",
          "[Added Lines]",
          "1118: static void io_req_clean_work(struct io_kiocb *req)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1177:   if (def->unbound_nonreg_file)",
          "1178:    req->work.flags |= IO_WQ_WORK_UNBOUND;",
          "1179:  }",
          "1182: }",
          "1184: static void io_prep_async_link(struct io_kiocb *req)",
          "",
          "[Removed Lines]",
          "1181:  io_req_work_grab_env(req);",
          "",
          "[Added Lines]",
          "1156:  if (!req->work.mm && def->needs_mm) {",
          "1157:   mmgrab(current->mm);",
          "1158:   req->work.mm = current->mm;",
          "1159:  }",
          "1160:  if (!req->work.creds)",
          "1161:   req->work.creds = get_current_cred();",
          "1162:  if (!req->work.fs && def->needs_fs) {",
          "1163:   spin_lock(&current->fs->lock);",
          "1164:   if (!current->fs->in_exec) {",
          "1165:    req->work.fs = current->fs;",
          "1166:    req->work.fs->users++;",
          "1167:   } else {",
          "1168:    req->work.flags |= IO_WQ_WORK_CANCEL;",
          "1169:   }",
          "1170:   spin_unlock(&current->fs->lock);",
          "1171:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1547:  if (req->file)",
          "1548:   io_put_file(req, req->file, (req->flags & REQ_F_FIXED_FILE));",
          "1549:  __io_put_req_task(req);",
          "1552:  if (req->flags & REQ_F_INFLIGHT) {",
          "1553:   struct io_ring_ctx *ctx = req->ctx;",
          "",
          "[Removed Lines]",
          "1550:  io_req_work_drop_env(req);",
          "",
          "[Added Lines]",
          "1540:  io_req_clean_work(req);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4965:  __poll_t mask;",
          "4969:  req->flags &= ~REQ_F_WORK_INITIALIZED;",
          "4971:  INIT_HLIST_NODE(&req->hash_node);",
          "",
          "[Removed Lines]",
          "4968:  io_req_work_drop_env(req);",
          "",
          "[Added Lines]",
          "4958:  io_req_clean_work(req);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91d8f5191e8fe6fc6a87aa5353b36f5a7409fbec",
      "candidate_info": {
        "commit_hash": "91d8f5191e8fe6fc6a87aa5353b36f5a7409fbec",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/91d8f5191e8fe6fc6a87aa5353b36f5a7409fbec",
        "files": [
          "fs/io-wq.c",
          "fs/io-wq.h",
          "fs/io_uring.c"
        ],
        "message": "io_uring: add blkcg accounting to offloaded operations\n\nThere are a few operations that are offloaded to the worker threads. In\nthis case, we lose process context and end up in kthread context. This\nresults in ios to be not accounted to the issuing cgroup and\nconsequently end up as issued by root. Just like others, adopt the\npersonality of the blkcg too when issuing via the workqueues.\n\nFor the SQPOLL thread, it will live and attach in the inited cgroup's\ncontext.\n\nSigned-off-by: Dennis Zhou <dennis@kernel.org>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io-wq.c||fs/io-wq.c",
          "fs/io-wq.h||fs/io-wq.h",
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io-wq.c||fs/io-wq.c": [
          "File: fs/io-wq.c -> fs/io-wq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <linux/rculist_nulls.h>",
          "18: #include <linux/fs_struct.h>",
          "19: #include <linux/task_work.h>",
          "21: #include \"io-wq.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <linux/blk-cgroup.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:  struct rcu_head rcu;",
          "59:  struct mm_struct *mm;",
          "60:  const struct cred *cur_creds;",
          "61:  const struct cred *saved_creds;",
          "62:  struct files_struct *restore_files;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #ifdef CONFIG_BLK_CGROUP",
          "62:  struct cgroup_subsys_state *blkcg_css;",
          "63: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:   worker->mm = NULL;",
          "178:  }",
          "180:  return dropped_lock;",
          "181: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184: #ifdef CONFIG_BLK_CGROUP",
          "185:  if (worker->blkcg_css) {",
          "186:   kthread_associate_blkcg(NULL);",
          "187:   worker->blkcg_css = NULL;",
          "188:  }",
          "189: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439:  work->flags |= IO_WQ_WORK_CANCEL;",
          "440: }",
          "442: static void io_wq_switch_creds(struct io_worker *worker,",
          "443:           struct io_wq_work *work)",
          "444: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453: static inline void io_wq_switch_blkcg(struct io_worker *worker,",
          "454:           struct io_wq_work *work)",
          "455: {",
          "456: #ifdef CONFIG_BLK_CGROUP",
          "457:  if (work->blkcg_css != worker->blkcg_css) {",
          "458:   kthread_associate_blkcg(work->blkcg_css);",
          "459:   worker->blkcg_css = work->blkcg_css;",
          "460:  }",
          "461: #endif",
          "462: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "467:  if (worker->cur_creds != work->creds)",
          "468:   io_wq_switch_creds(worker, work);",
          "469:  current->signal->rlim[RLIMIT_FSIZE].rlim_cur = work->fsize;",
          "470: }",
          "472: static void io_assign_current_work(struct io_worker *worker,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:  io_wq_switch_blkcg(worker, work);",
          "",
          "---------------"
        ],
        "fs/io-wq.h||fs/io-wq.h": [
          "File: fs/io-wq.h -> fs/io-wq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:  struct io_wq_work_node list;",
          "88:  struct files_struct *files;",
          "89:  struct mm_struct *mm;",
          "90:  const struct cred *creds;",
          "91:  struct nsproxy *nsproxy;",
          "92:  struct fs_struct *fs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: #ifdef CONFIG_BLK_CGROUP",
          "91:  struct cgroup_subsys_state *blkcg_css;",
          "92: #endif",
          "",
          "---------------"
        ],
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: #include <linux/task_work.h>",
          "81: #include <linux/pagemap.h>",
          "82: #include <linux/io_uring.h>",
          "84: #define CREATE_TRACE_POINTS",
          "85: #include <trace/events/io_uring.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: #include <linux/blk-cgroup.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "301:  struct mm_struct *mm_account;",
          "305:  struct wait_queue_head sqo_sq_wait;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304: #ifdef CONFIG_BLK_CGROUP",
          "305:  struct cgroup_subsys_state *sqo_blkcg_css;",
          "306: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "748:  unsigned  needs_fsize : 1;",
          "750:  unsigned  needs_async_data : 1;",
          "752:  unsigned short  async_size;",
          "753: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "757:  unsigned  needs_blkcg : 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "761:   .pollin   = 1,",
          "762:   .buffer_select  = 1,",
          "763:   .needs_async_data = 1,",
          "764:   .async_size  = sizeof(struct io_async_rw),",
          "765:  },",
          "766:  [IORING_OP_WRITEV] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771:   .needs_blkcg  = 1,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "771:   .pollout  = 1,",
          "772:   .needs_fsize  = 1,",
          "773:   .needs_async_data = 1,",
          "774:   .async_size  = sizeof(struct io_async_rw),",
          "775:  },",
          "776:  [IORING_OP_FSYNC] = {",
          "777:   .needs_file  = 1,",
          "778:  },",
          "779:  [IORING_OP_READ_FIXED] = {",
          "780:   .needs_file  = 1,",
          "781:   .unbound_nonreg_file = 1,",
          "782:   .pollin   = 1,",
          "783:   .async_size  = sizeof(struct io_async_rw),",
          "784:  },",
          "785:  [IORING_OP_WRITE_FIXED] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782:   .needs_blkcg  = 1,",
          "787:   .needs_blkcg  = 1,",
          "793:   .needs_blkcg  = 1,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "788:   .unbound_nonreg_file = 1,",
          "789:   .pollout  = 1,",
          "790:   .needs_fsize  = 1,",
          "791:   .async_size  = sizeof(struct io_async_rw),",
          "792:  },",
          "793:  [IORING_OP_POLL_ADD] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:   .needs_blkcg  = 1,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "797:  [IORING_OP_POLL_REMOVE] = {},",
          "798:  [IORING_OP_SYNC_FILE_RANGE] = {",
          "799:   .needs_file  = 1,",
          "800:  },",
          "801:  [IORING_OP_SENDMSG] = {",
          "802:   .needs_mm  = 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:   .needs_blkcg  = 1,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "805:   .needs_fs  = 1,",
          "806:   .pollout  = 1,",
          "807:   .needs_async_data = 1,",
          "808:   .async_size  = sizeof(struct io_async_msghdr),",
          "809:  },",
          "810:  [IORING_OP_RECVMSG] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "821:   .needs_blkcg  = 1,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "815:   .pollin   = 1,",
          "816:   .buffer_select  = 1,",
          "817:   .needs_async_data = 1,",
          "818:   .async_size  = sizeof(struct io_async_msghdr),",
          "819:  },",
          "820:  [IORING_OP_TIMEOUT] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "832:   .needs_blkcg  = 1,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "847:  [IORING_OP_FALLOCATE] = {",
          "848:   .needs_file  = 1,",
          "849:   .needs_fsize  = 1,",
          "850:  },",
          "851:  [IORING_OP_OPENAT] = {",
          "852:   .file_table  = 1,",
          "853:   .needs_fs  = 1,",
          "854:  },",
          "855:  [IORING_OP_CLOSE] = {",
          "856:   .needs_file  = 1,",
          "857:   .needs_file_no_error = 1,",
          "858:   .file_table  = 1,",
          "859:  },",
          "860:  [IORING_OP_FILES_UPDATE] = {",
          "861:   .needs_mm  = 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "865:   .needs_blkcg  = 1,",
          "870:   .needs_blkcg  = 1,",
          "876:   .needs_blkcg  = 1,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "865:   .needs_mm  = 1,",
          "866:   .needs_fs  = 1,",
          "867:   .file_table  = 1,",
          "868:  },",
          "869:  [IORING_OP_READ] = {",
          "870:   .needs_mm  = 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "886:   .needs_blkcg  = 1,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "872:   .unbound_nonreg_file = 1,",
          "873:   .pollin   = 1,",
          "874:   .buffer_select  = 1,",
          "875:   .async_size  = sizeof(struct io_async_rw),",
          "876:  },",
          "877:  [IORING_OP_WRITE] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "894:   .needs_blkcg  = 1,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "880:   .unbound_nonreg_file = 1,",
          "881:   .pollout  = 1,",
          "882:   .needs_fsize  = 1,",
          "883:   .async_size  = sizeof(struct io_async_rw),",
          "884:  },",
          "885:  [IORING_OP_FADVISE] = {",
          "886:   .needs_file  = 1,",
          "887:  },",
          "888:  [IORING_OP_MADVISE] = {",
          "889:   .needs_mm  = 1,",
          "890:  },",
          "891:  [IORING_OP_SEND] = {",
          "892:   .needs_mm  = 1,",
          "893:   .needs_file  = 1,",
          "894:   .unbound_nonreg_file = 1,",
          "895:   .pollout  = 1,",
          "896:  },",
          "897:  [IORING_OP_RECV] = {",
          "898:   .needs_mm  = 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903:   .needs_blkcg  = 1,",
          "908:   .needs_blkcg  = 1,",
          "912:   .needs_blkcg  = 1,",
          "919:   .needs_blkcg  = 1,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "900:   .unbound_nonreg_file = 1,",
          "901:   .pollin   = 1,",
          "902:   .buffer_select  = 1,",
          "903:  },",
          "904:  [IORING_OP_OPENAT2] = {",
          "905:   .file_table  = 1,",
          "906:   .needs_fs  = 1,",
          "907:  },",
          "908:  [IORING_OP_EPOLL_CTL] = {",
          "909:   .unbound_nonreg_file = 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927:   .needs_blkcg  = 1,",
          "932:   .needs_blkcg  = 1,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "913:   .needs_file  = 1,",
          "914:   .hash_reg_file  = 1,",
          "915:   .unbound_nonreg_file = 1,",
          "916:  },",
          "917:  [IORING_OP_PROVIDE_BUFFERS] = {},",
          "918:  [IORING_OP_REMOVE_BUFFERS] = {},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "942:   .needs_blkcg  = 1,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1011:  return __io_sq_thread_acquire_mm(ctx);",
          "1012: }",
          "1014: static inline void req_set_fail_links(struct io_kiocb *req)",
          "1015: {",
          "1016:  if ((req->flags & (REQ_F_LINK | REQ_F_HARDLINK)) == REQ_F_LINK)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1041: static void io_sq_thread_associate_blkcg(struct io_ring_ctx *ctx,",
          "1042:       struct cgroup_subsys_state **cur_css)",
          "1044: {",
          "1045: #ifdef CONFIG_BLK_CGROUP",
          "1047:  if (*cur_css != ctx->sqo_blkcg_css) {",
          "1048:   kthread_associate_blkcg(ctx->sqo_blkcg_css);",
          "1050:  }",
          "1051: #endif",
          "1052: }",
          "1054: static void io_sq_thread_unassociate_blkcg(void)",
          "1055: {",
          "1056: #ifdef CONFIG_BLK_CGROUP",
          "1057:  kthread_associate_blkcg(NULL);",
          "1058: #endif",
          "1059: }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1148:   mmdrop(req->work.mm);",
          "1149:   req->work.mm = NULL;",
          "1150:  }",
          "1151:  if (req->work.creds) {",
          "1152:   put_cred(req->work.creds);",
          "1153:   req->work.creds = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1198: #ifdef CONFIG_BLK_CGROUP",
          "1199:  if (req->work.blkcg_css)",
          "1200:   css_put(req->work.blkcg_css);",
          "1201: #endif",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1187:   mmgrab(current->mm);",
          "1188:   req->work.mm = current->mm;",
          "1189:  }",
          "1190:  if (!req->work.creds)",
          "1191:   req->work.creds = get_current_cred();",
          "1192:  if (!req->work.fs && def->needs_fs) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1241: #ifdef CONFIG_BLK_CGROUP",
          "1242:  if (!req->work.blkcg_css && def->needs_blkcg) {",
          "1243:   rcu_read_lock();",
          "1244:   req->work.blkcg_css = blkcg_css();",
          "1249:   if (!css_tryget_online(req->work.blkcg_css))",
          "1250:    req->work.blkcg_css = NULL;",
          "1251:   rcu_read_unlock();",
          "1252:  }",
          "1253: #endif",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6790: static int io_sq_thread(void *data)",
          "6791: {",
          "6792:  const struct cred *old_cred = NULL;",
          "6793:  struct io_sq_data *sqd = data;",
          "6794:  struct io_ring_ctx *ctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6856:  struct cgroup_subsys_state *cur_css = NULL;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6818:      revert_creds(old_cred);",
          "6819:     old_cred = override_creds(ctx->creds);",
          "6820:    }",
          "6822:    ret |= __io_sq_thread(ctx, start_jiffies, cap_entries);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6886:    io_sq_thread_associate_blkcg(ctx, &cur_css);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6842:  io_run_task_work();",
          "6844:  if (old_cred)",
          "6845:   revert_creds(old_cred);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6910:  if (cur_css)",
          "6911:   io_sq_thread_unassociate_blkcg();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "8304:   ctx->mm_account = NULL;",
          "8305:  }",
          "8307:  io_sqe_files_unregister(ctx);",
          "8308:  io_eventfd_unregister(ctx);",
          "8309:  io_destroy_buffers(ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8375: #ifdef CONFIG_BLK_CGROUP",
          "8376:  if (ctx->sqo_blkcg_css)",
          "8377:   css_put(ctx->sqo_blkcg_css);",
          "8378: #endif",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "9288:  mmgrab(current->mm);",
          "9289:  ctx->mm_account = current->mm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9364: #ifdef CONFIG_BLK_CGROUP",
          "9371:  rcu_read_lock();",
          "9372:  ctx->sqo_blkcg_css = blkcg_css();",
          "9373:  ret = css_tryget_online(ctx->sqo_blkcg_css);",
          "9374:  rcu_read_unlock();",
          "9375:  if (!ret) {",
          "9377:   ctx->sqo_blkcg_css = NULL;",
          "9378:   ret = -ENODEV;",
          "9379:   goto err;",
          "9380:  }",
          "9381: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14587a46646d30d2b4a6b69865682cfe6bbdcd1f",
      "candidate_info": {
        "commit_hash": "14587a46646d30d2b4a6b69865682cfe6bbdcd1f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/14587a46646d30d2b4a6b69865682cfe6bbdcd1f",
        "files": [
          "fs/io_uring.c"
        ],
        "message": "io_uring: enable file table usage for SQPOLL rings\n\nNow that SQPOLL supports non-registered files and grabs the file table,\nwe can relax the restriction on open/close/accept/connect and allow\nthem on a ring that is setup with IORING_SETUP_SQPOLL.\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "869:  },",
          "870:  [IORING_OP_OPENAT] = {",
          "871:   .work_flags  = IO_WQ_WORK_FILES | IO_WQ_WORK_BLKCG |",
          "873:  },",
          "874:  [IORING_OP_CLOSE] = {",
          "875:   .needs_file  = 1,",
          "",
          "[Removed Lines]",
          "872:       IO_WQ_WORK_FS,",
          "",
          "[Added Lines]",
          "872:       IO_WQ_WORK_FS | IO_WQ_WORK_MM,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "921:  },",
          "922:  [IORING_OP_OPENAT2] = {",
          "923:   .work_flags  = IO_WQ_WORK_FILES | IO_WQ_WORK_FS |",
          "925:  },",
          "926:  [IORING_OP_EPOLL_CTL] = {",
          "927:   .unbound_nonreg_file = 1,",
          "",
          "[Removed Lines]",
          "924:       IO_WQ_WORK_BLKCG,",
          "",
          "[Added Lines]",
          "924:       IO_WQ_WORK_BLKCG | IO_WQ_WORK_MM,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3897: {",
          "3898:  u64 flags, mode;",
          "3901:   return -EINVAL;",
          "3902:  mode = READ_ONCE(sqe->len);",
          "3903:  flags = READ_ONCE(sqe->open_flags);",
          "",
          "[Removed Lines]",
          "3900:  if (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))",
          "",
          "[Added Lines]",
          "3900:  if (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3911:  size_t len;",
          "3912:  int ret;",
          "3915:   return -EINVAL;",
          "3916:  how = u64_to_user_ptr(READ_ONCE(sqe->addr2));",
          "3917:  len = READ_ONCE(sqe->len);",
          "",
          "[Removed Lines]",
          "3914:  if (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))",
          "",
          "[Added Lines]",
          "3914:  if (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4305:  io_req_init_async(req);",
          "4306:  req->work.flags |= IO_WQ_WORK_NO_CANCEL;",
          "4309:   return -EINVAL;",
          "4310:  if (sqe->ioprio || sqe->off || sqe->addr || sqe->len ||",
          "4311:      sqe->rw_flags || sqe->buf_index)",
          "",
          "[Removed Lines]",
          "4308:  if (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))",
          "",
          "[Added Lines]",
          "4308:  if (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4786: {",
          "4787:  struct io_accept *accept = &req->accept;",
          "4790:   return -EINVAL;",
          "4791:  if (sqe->ioprio || sqe->len || sqe->buf_index)",
          "4792:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "4789:  if (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))",
          "",
          "[Added Lines]",
          "4789:  if (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4827:  struct io_connect *conn = &req->connect;",
          "4828:  struct io_async_connect *io = req->async_data;",
          "4831:   return -EINVAL;",
          "4832:  if (sqe->ioprio || sqe->len || sqe->buf_index || sqe->rw_flags)",
          "4833:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "4830:  if (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))",
          "",
          "[Added Lines]",
          "4830:  if (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))",
          "",
          "---------------"
        ]
      }
    }
  ]
}