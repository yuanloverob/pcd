{
  "cve_id": "CVE-2017-0196",
  "cve_desc": "An information disclosure vulnerability in Microsoft scripting engine allows remote attackers to obtain sensitive information from process memory via a crafted web site, aka \"Microsoft Browser Information Disclosure Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
  "patch_info": {
    "commit_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/065b7978c40ded35c356ced6cd922a40156c9c46",
    "files": [
      "lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js"
    ],
    "message": "[CVE-2017-0196] Fixing an heap overread during slice.\n\nThe MissingItem check is happening on the array in a loop. It is possible that we get called into script and that mutates the array. So the Array's head is newly created with length.\nHowever the loop is still performing over the old length.\nFixed this by checking the length In IsMissingItem function.\nAdded a unittest.",
    "before_after_code_files": [
      "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
    ]
  },
  "patch_diff": {
    "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
      "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "478:     bool JavascriptArray::IsMissingItem(uint32 index)",
      "479:     {",
      "480:         bool isIntArray = false, isFloatArray = false;",
      "481:         this->GetArrayTypeAndConvert(&isIntArray, &isFloatArray);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:         if (this->length <= index)",
      "481:         {",
      "482:             return false;",
      "483:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5768:         if (!pArr->HasNoMissingValues())",
      "5769:         {",
      "5771:             {",
      "",
      "[Removed Lines]",
      "5770:             for (uint32 i = 0; i < newLen; i++)",
      "",
      "[Added Lines]",
      "5775:             for (uint32 i = 0; i < newLen && (i + start) < pArr->length; i++)",
      "",
      "---------------"
    ],
    "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js": [
      "File: test/Array/Array_TypeConfusion_bugs.js -> test/Array/Array_TypeConfusion_bugs.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "593:             assert.areEqual(101, arr.length);",
      "594:         }",
      "595:     },",
      "596: ];",
      "597: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "596:     {",
      "597:         name: \"Heap overread when splice mutates the array when executing slice\",",
      "598:         body: function ()",
      "599:         {",
      "600:             var getterCalled = false;",
      "601:             var a = [1, 2];",
      "602:             for (var i = 0; i < 100 * 1024; i++) {",
      "603:                 a.push(i);",
      "604:             }",
      "605:             delete a[0]; // Make a missing item",
      "606:             var protoObj = [11];",
      "607:             Object.defineProperty(protoObj, '0', {",
      "608:                 get : function () {",
      "609:                     getterCalled = true;",
      "610:                     Object.setPrototypeOf(a, Array.prototype);",
      "611:                     a.splice(0); // head seg is now length=0",
      "612:                     return 42;",
      "613:                 },",
      "614:                 configurable : true",
      "615:             });",
      "616:             Object.setPrototypeOf(a, protoObj);",
      "617:             var b = a.slice();",
      "618:             assert.isTrue(getterCalled);",
      "619:             assert.areEqual(0, a.length, \"Getter will splice the array to zero length\");",
      "620:             assert.areEqual(100 * 1024 + 2, b.length, \"Validating that slice will return the full array even though splice is deleting the whole array\");",
      "621:         }",
      "622:     },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ae7da2ce38cee9f9297537603c555d4d1bd63298",
      "candidate_info": {
        "commit_hash": "ae7da2ce38cee9f9297537603c555d4d1bd63298",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/ae7da2ce38cee9f9297537603c555d4d1bd63298",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h"
        ],
        "message": "Change argument type of EntryPopJavascriptArray from Var to JavascriptArray",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4806:     {",
          "4807:         if (JavascriptArray::Is(object))",
          "4808:         {",
          "4810:         }",
          "4811:         else",
          "4812:         {",
          "",
          "[Removed Lines]",
          "4809:             return EntryPopJavascriptArray(scriptContext, object);",
          "",
          "[Added Lines]",
          "4809:             return EntryPopJavascriptArray(scriptContext, JavascriptArray::FromVar(object));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4814:         }",
          "4815:     }",
          "4818:     {",
          "4819:         JS_REENTRANCY_LOCK(jsReentLock, scriptContext->GetThreadContext());",
          "4821:         uint32 length = arr->length;",
          "4823:         if (length == 0)",
          "",
          "[Removed Lines]",
          "4817:     Var JavascriptArray::EntryPopJavascriptArray(ScriptContext * scriptContext, Var object)",
          "4820:         JavascriptArray * arr = JavascriptArray::FromVar(object);",
          "",
          "[Added Lines]",
          "4817:     Var JavascriptArray::EntryPopJavascriptArray(ScriptContext * scriptContext, JavascriptArray* arr)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4911:         if (JavascriptArray::Is(args[0]))",
          "4912:         {",
          "4914:         }",
          "4915:         else",
          "4916:         {",
          "",
          "[Removed Lines]",
          "4913:             JS_REENTRANT_UNLOCK(jsReentLock, return EntryPopJavascriptArray(scriptContext, args.Values[0]));",
          "",
          "[Added Lines]",
          "4912:             JS_REENTRANT_UNLOCK(jsReentLock, return EntryPopJavascriptArray(scriptContext, JavascriptArray::FromVar(args.Values[0])));",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h": [
          "File: lib/Runtime/Library/JavascriptArray.h -> lib/Runtime/Library/JavascriptArray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:         static Var Pop(ScriptContext * scriptContext, Var object);",
          "307:         static Var EntryPopNonJavascriptArray(ScriptContext * scriptContext, Var object);",
          "309: #if DEBUG",
          "",
          "[Removed Lines]",
          "306:         static Var EntryPopJavascriptArray(ScriptContext * scriptContext, Var object);",
          "",
          "[Added Lines]",
          "306:         static Var EntryPopJavascriptArray(ScriptContext * scriptContext, JavascriptArray* arr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9443bab6173969dc3bcea55a6fc9b01ba603a5be",
      "candidate_info": {
        "commit_hash": "9443bab6173969dc3bcea55a6fc9b01ba603a5be",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/9443bab6173969dc3bcea55a6fc9b01ba603a5be",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h",
          "test/Array/bug_9575461.js",
          "test/Array/rlexe.xml"
        ],
        "message": "bug-fix: 9575461 - 'IsConcatSpreadable is called twice'",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h",
          "test/Array/bug_9575461.js||test/Array/bug_9575461.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2997:     }",
          "2999:     template<typename T>",
          "3001:     {",
          "3003:         Throw::InternalError();",
          "",
          "[Removed Lines]",
          "3000:     void JavascriptArray::ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext, uint start, BigIndex startIdxDest, BOOL FirstPromotedItemIsSpreadable, BigIndex FirstPromotedItemLength)",
          "",
          "[Added Lines]",
          "3000:     void JavascriptArray::ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds,",
          "3001:         Js::Arguments& args, ScriptContext* scriptContext, uint start, BigIndex startIdxDest,",
          "3002:         BOOL FirstPromotedItemIsSpreadable, BigIndex FirstPromotedItemLength, bool spreadableCheckedAndTrue)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3008:     template<typename T>",
          "3010:     {",
          "3011:         JavascriptArray* pDestArray = nullptr;",
          "",
          "[Removed Lines]",
          "3009:     void JavascriptArray::ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext, uint start, uint startIdxDest, BOOL firstPromotedItemIsSpreadable, BigIndex firstPromotedItemLength)",
          "",
          "[Added Lines]",
          "3011:     void JavascriptArray::ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds,",
          "3012:         Js::Arguments& args, ScriptContext* scriptContext, uint start, uint startIdxDest,",
          "3013:         BOOL firstPromotedItemIsSpreadable, BigIndex firstPromotedItemLength, bool spreadableCheckedAndTrue)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3019:         for (uint idxArg = start; idxArg < args.Info.Count; idxArg++)",
          "3020:         {",
          "3021:             Var aItem = args[idxArg];",
          "3024:             {",
          "",
          "[Removed Lines]",
          "3022:             BOOL spreadable = false;",
          "3023:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled())",
          "",
          "[Added Lines]",
          "3026:             bool spreadable = spreadableCheckedAndTrue;",
          "3027:             if (!spreadable && scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3034:                     continue;",
          "3035:                 }",
          "3036:             }",
          "3038:             if (pDestArray && JavascriptArray::IsDirectAccessArray(aItem) && JavascriptArray::IsDirectAccessArray(pDestArray)",
          "3039:                 && BigIndex(idxDest + JavascriptArray::FromVar(aItem)->length).IsSmallIndex()) // Fast path",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3041:             else",
          "3042:             {",
          "3043:                 spreadableCheckedAndTrue = false; // if it was `true`, reset after the first use",
          "3044:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3173:         for (uint idxArg = 0; idxArg < args.Info.Count; idxArg++)",
          "3174:         {",
          "3175:             Var aItem = args[idxArg];",
          "3178:             {",
          "3182:                 {",
          "3185:                 }",
          "3187:             }",
          "3189:             if (JavascriptNativeIntArray::Is(aItem)) // Fast path",
          "",
          "[Removed Lines]",
          "3177:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled() && !JavascriptOperators::IsConcatSpreadable(aItem))",
          "3179:                 pDestArray->SetItem(idxDest, aItem, PropertyOperation_ThrowIfNotExtensible);",
          "3180:                 idxDest = idxDest + 1;",
          "3181:                 if (!JavascriptNativeIntArray::Is(pDestArray)) // SetItem could convert pDestArray to a var array if aItem is not an integer if so fall back",
          "3183:                     ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg + 1, idxDest);",
          "3184:                     return pDestArray;",
          "3186:                 continue;",
          "",
          "[Added Lines]",
          "3185:             bool spreadableCheckedAndTrue = false;",
          "3187:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled())",
          "3189:                 if (JavascriptOperators::IsConcatSpreadable(aItem))",
          "3191:                     spreadableCheckedAndTrue = true;",
          "3192:                 }",
          "3193:                 else",
          "3194:                 {",
          "3195:                     pDestArray->SetItem(idxDest, aItem, PropertyOperation_ThrowIfNotExtensible);",
          "3196:                     idxDest = idxDest + 1;",
          "3197:                     if (!JavascriptNativeIntArray::Is(pDestArray)) // SetItem could convert pDestArray to a var array if aItem is not an integer if so fall back",
          "3198:                     {",
          "3199:                         ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg + 1, idxDest);",
          "3200:                         return pDestArray;",
          "3201:                     }",
          "3202:                     continue;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3220:             else",
          "3221:             {",
          "3222:                 JavascriptArray *pVarDestArray = JavascriptNativeIntArray::ConvertToVarArray(pDestArray);",
          "3224:                 return pVarDestArray;",
          "3225:             }",
          "3226:         }",
          "",
          "[Removed Lines]",
          "3223:                 ConcatArgs<uint>(pVarDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest);",
          "",
          "[Added Lines]",
          "3240:                 ConcatArgs<uint>(pVarDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest, spreadableCheckedAndTrue);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3238:         {",
          "3239:             Var aItem = args[idxArg];",
          "3248:                 {",
          "3251:                 }",
          "3253:             }",
          "3255:             bool converted;",
          "",
          "[Removed Lines]",
          "3241:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled() && !JavascriptOperators::IsConcatSpreadable(aItem))",
          "3242:             {",
          "3244:                 pDestArray->SetItem(idxDest, aItem, PropertyOperation_ThrowIfNotExtensible);",
          "3246:                 idxDest = idxDest + 1;",
          "3247:                 if (!JavascriptNativeFloatArray::Is(pDestArray)) // SetItem could convert pDestArray to a var array if aItem is not an integer if so fall back",
          "3249:                     ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg + 1, idxDest);",
          "3250:                     return pDestArray;",
          "3252:                 continue;",
          "",
          "[Added Lines]",
          "3258:             bool spreadableCheckedAndTrue = false;",
          "3260:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled())",
          "3261:             {",
          "3262:                 if (JavascriptOperators::IsConcatSpreadable(aItem))",
          "3264:                     spreadableCheckedAndTrue = true;",
          "3265:                 }",
          "3266:                 else",
          "3267:                 {",
          "3268:                     pDestArray->SetItem(idxDest, aItem, PropertyOperation_ThrowIfNotExtensible);",
          "3270:                     idxDest = idxDest + 1;",
          "3271:                     if (!JavascriptNativeFloatArray::Is(pDestArray)) // SetItem could convert pDestArray to a var array if aItem is not an integer if so fall back",
          "3272:                     {",
          "3273:                         ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg + 1, idxDest);",
          "3274:                         return pDestArray;",
          "3275:                     }",
          "3276:                     continue;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3270:                 else",
          "3271:                 {",
          "3272:                     JavascriptArray *pVarDestArray = JavascriptNativeFloatArray::ConvertToVarArray(pDestArray);",
          "3274:                     return pVarDestArray;",
          "3275:                 }",
          "3276:                 if (converted)",
          "3277:                 {",
          "",
          "[Removed Lines]",
          "3273:                     ConcatArgs<uint>(pVarDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest);",
          "",
          "[Added Lines]",
          "3298:                     ConcatArgs<uint>(pVarDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest, spreadableCheckedAndTrue);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h": [
          "File: lib/Runtime/Library/JavascriptArray.h -> lib/Runtime/Library/JavascriptArray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:         static void SetConcatItem(Var aItem, uint idxArg, JavascriptArray* pDestArray, RecyclableObject* pDestObj, T idxDest, ScriptContext *scriptContext);",
          "782:         template<typename T>",
          "784:         template<typename T>",
          "786:         static JavascriptArray* ConcatIntArgs(JavascriptNativeIntArray* pDestArray, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext);",
          "787:         static bool PromoteToBigIndex(BigIndex lhs, BigIndex rhs);",
          "788:         static bool PromoteToBigIndex(BigIndex lhs, uint32 rhs);",
          "",
          "[Removed Lines]",
          "783:         static void ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext, uint start, BigIndex startIdxDest, BOOL firstPromotedItemIsSpreadable, BigIndex firstPromotedItemLength);",
          "785:         static void ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext, uint start = 0, uint startIdxDest = 0u, BOOL FirstPromotedItemIsSpreadable = false, BigIndex FirstPromotedItemLength = 0u);",
          "",
          "[Added Lines]",
          "783:         static void ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext, uint start, BigIndex startIdxDest, BOOL firstPromotedItemIsSpreadable, BigIndex firstPromotedItemLength, bool spreadableCheckedAndTrue = false);",
          "785:         static void ConcatArgs(RecyclableObject* pDestObj, TypeId* remoteTypeIds, Js::Arguments& args, ScriptContext* scriptContext, uint start = 0, uint startIdxDest = 0u, BOOL FirstPromotedItemIsSpreadable = false, BigIndex FirstPromotedItemLength = 0u, bool spreadableCheckedAndTrue = false);",
          "",
          "---------------"
        ],
        "test/Array/bug_9575461.js||test/Array/bug_9575461.js": [
          "File: test/Array/bug_9575461.js -> test/Array/bug_9575461.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: var obj = [1, 2, 3];",
          "7: var cc_base = [-2, -1, 0];",
          "8: var isCS = false;",
          "9: var counter = 0;",
          "11: Object.defineProperty(obj, Symbol.isConcatSpreadable, {",
          "12:     get : function () {",
          "13:         counter++;",
          "14:         obj[2] = isCS ? \"Some String inserted\" : 123;",
          "15:         isCS = !isCS;",
          "16:         return isCS;",
          "17:     }",
          "18: });",
          "20: var MAY_THROW = function(n, result) {",
          "21:     if (!result) throw new Error(n + \". FAILED\");",
          "22: };",
          "24: MAY_THROW(0, cc_base.concat(obj).length == 6);",
          "25: MAY_THROW(1, cc_base.concat(obj).length == 4);",
          "26: MAY_THROW(2, counter == 2 && !isCS);",
          "28: print(\"PASS\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52bea55ead7e5a5bf5f7214d5fd787cfc00459b3",
      "candidate_info": {
        "commit_hash": "52bea55ead7e5a5bf5f7214d5fd787cfc00459b3",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/52bea55ead7e5a5bf5f7214d5fd787cfc00459b3",
        "files": [
          "lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Library/ArrayBuffer.cpp",
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptPromise.cpp",
          "lib/Runtime/Library/RegexHelper.cpp",
          "lib/Runtime/Library/SharedArrayBuffer.cpp",
          "lib/Runtime/Library/TypedArray.cpp",
          "lib/Runtime/Library/TypedArray.h",
          "test/es6/proxyconstructor.js",
          "test/es6/rlexe.xml"
        ],
        "message": "fix couple bugs with proxy constructors",
        "before_after_code_files": [
          "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Library/ArrayBuffer.cpp||lib/Runtime/Library/ArrayBuffer.cpp",
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptPromise.cpp||lib/Runtime/Library/JavascriptPromise.cpp",
          "lib/Runtime/Library/RegexHelper.cpp||lib/Runtime/Library/RegexHelper.cpp",
          "lib/Runtime/Library/SharedArrayBuffer.cpp||lib/Runtime/Library/SharedArrayBuffer.cpp",
          "lib/Runtime/Library/TypedArray.cpp||lib/Runtime/Library/TypedArray.cpp",
          "lib/Runtime/Library/TypedArray.h||lib/Runtime/Library/TypedArray.h",
          "test/es6/proxyconstructor.js||test/es6/proxyconstructor.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp": [
          "File: lib/Runtime/Language/JavascriptOperators.cpp -> lib/Runtime/Language/JavascriptOperators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1330:             DynamicObject::IsAnyArrayTypeId(remoteTypeId));",
          "1331:     }",
          "1334:     {",
          "1336:         JavascriptProxy * proxy = instance;",
          "",
          "[Removed Lines]",
          "1333:     BOOL JavascriptOperators::IsArray(_In_ JavascriptProxy * instance)",
          "",
          "[Added Lines]",
          "1333:     bool JavascriptOperators::IsArray(_In_ JavascriptProxy * instance)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1345:         }",
          "1346:     }",
          "1349:     {",
          "1350:         if (DynamicObject::IsAnyArray(instance))",
          "1351:         {",
          "",
          "[Removed Lines]",
          "1348:     BOOL JavascriptOperators::IsArray(_In_ RecyclableObject* instance)",
          "",
          "[Added Lines]",
          "1348:     bool JavascriptOperators::IsArray(_In_ RecyclableObject* instance)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1361:         return IsRemoteArray(instance);",
          "1362:     }",
          "1365:     {",
          "1371:     }",
          "1374:     {",
          "1376:         {",
          "1378:         }",
          "1381:         if (proxy)",
          "1382:         {",
          "1384:         }",
          "1392:     }",
          "1394:     BOOL JavascriptOperators::IsConcatSpreadable(Var instanceVar)",
          "",
          "[Removed Lines]",
          "1364:     BOOL JavascriptOperators::IsArray(_In_ Var instanceVar)",
          "1366:         if (!RecyclableObject::Is(instanceVar))",
          "1367:         {",
          "1368:             return FALSE;",
          "1369:         }",
          "1370:         return IsArray(RecyclableObject::FromVar(instanceVar));",
          "1373:     BOOL JavascriptOperators::IsConstructor(Var instanceVar)",
          "1375:         if (!RecyclableObject::Is(instanceVar))",
          "1377:             return FALSE;",
          "1380:         JavascriptProxy* proxy = JavascriptOperators::TryFromVar<JavascriptProxy>(instanceVar);",
          "1383:             return IsConstructor(proxy->GetTarget());",
          "1386:         JavascriptFunction * function = JavascriptOperators::TryFromVar<JavascriptFunction>(instanceVar);",
          "1387:         if (!function)",
          "1388:         {",
          "1389:             return FALSE;",
          "1390:         }",
          "1391:         return function->IsConstructor();",
          "",
          "[Added Lines]",
          "1364:     bool JavascriptOperators::IsArray(_In_ Var instanceVar)",
          "1366:         RecyclableObject* instanceObj = TryFromVar<RecyclableObject>(instanceVar);",
          "1367:         return instanceObj && IsArray(instanceObj);",
          "1370:     bool JavascriptOperators::IsConstructor(_In_ JavascriptProxy * instance)",
          "1373:         JavascriptProxy * proxy = instance;",
          "1374:         while (true)",
          "1376:             RecyclableObject* targetInstance = proxy->GetTarget();",
          "1377:             proxy = JavascriptOperators::TryFromVar<JavascriptProxy>(targetInstance);",
          "1378:             if (proxy == nullptr)",
          "1379:             {",
          "1380:                 JavascriptFunction* function = JavascriptOperators::TryFromVar<JavascriptFunction>(targetInstance);",
          "1381:                 return function && function->IsConstructor();",
          "1382:             }",
          "1384:     }",
          "1386:     bool JavascriptOperators::IsConstructor(_In_ RecyclableObject* instanceObj)",
          "1387:     {",
          "1388:         JavascriptProxy* proxy = JavascriptOperators::TryFromVar<JavascriptProxy>(instanceObj);",
          "1391:             return IsConstructor(proxy);",
          "1394:         JavascriptFunction* function = JavascriptOperators::TryFromVar<JavascriptFunction>(instanceObj);",
          "1395:         return function && function->IsConstructor();",
          "1396:     }",
          "1398:     bool JavascriptOperators::IsConstructor(_In_ Var instanceVar)",
          "1399:     {",
          "1400:         RecyclableObject* instanceObj = TryFromVar<RecyclableObject>(instanceVar);",
          "1401:         return instanceObj && IsConstructor(instanceObj);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9735:     }",
          "9739:     {",
          "9741:         Assert(JavascriptOperators::IsObject(object));",
          "",
          "[Removed Lines]",
          "9738:     Var JavascriptOperators::SpeciesConstructor(RecyclableObject* object, Var defaultConstructor, ScriptContext* scriptContext)",
          "",
          "[Added Lines]",
          "9748:     RecyclableObject* JavascriptOperators::SpeciesConstructor(_In_ RecyclableObject* object, _In_ JavascriptFunction* defaultConstructor, _In_ ScriptContext* scriptContext)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9769:             constructor = species;",
          "9770:         }",
          "9773:         {",
          "9775:         }",
          "9777:         JavascriptError::ThrowTypeError(scriptContext, JSERR_NotAConstructor, _u(\"constructor[Symbol.species]\"));",
          "",
          "[Removed Lines]",
          "9772:         if (JavascriptOperators::IsConstructor(constructor))",
          "9774:             return constructor;",
          "",
          "[Added Lines]",
          "9782:         RecyclableObject* constructorObj = JavascriptOperators::TryFromVar<RecyclableObject>(constructor);",
          "9783:         if (constructorObj && JavascriptOperators::IsConstructor(constructorObj))",
          "9785:             return constructorObj;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h": [
          "File: lib/Runtime/Language/JavascriptOperators.h -> lib/Runtime/Language/JavascriptOperators.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     {",
          "104:     public:",
          "109:         static BOOL IsConcatSpreadable(Var instanceVar);",
          "110:         static bool IsConstructorSuperCall(Arguments args);",
          "111:         static bool GetAndAssertIsConstructorSuperCall(Arguments args);",
          "",
          "[Removed Lines]",
          "105:         static BOOL IsArray(_In_ RecyclableObject* instanceObj);",
          "106:         static BOOL IsArray(_In_ Var instanceVar);",
          "107:         static BOOL IsArray(_In_ JavascriptProxy * proxy);",
          "108:         static BOOL IsConstructor(Var instanceVar);",
          "",
          "[Added Lines]",
          "105:         static bool IsArray(_In_ RecyclableObject* instanceObj);",
          "106:         static bool IsArray(_In_ Var instanceVar);",
          "107:         static bool IsArray(_In_ JavascriptProxy * proxy);",
          "108:         static bool IsConstructor(_In_ RecyclableObject* instanceObj);",
          "109:         static bool IsConstructor(_In_ Var instanceVar);",
          "110:         static bool IsConstructor(_In_ JavascriptProxy * proxy);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "623:             __out_bcount(length*elementSize) byte* contentBuffer,",
          "624:             Js::ScriptContext* scriptContext);",
          "627:         static Var GetSpecies(RecyclableObject* constructor, ScriptContext* scriptContext);",
          "629:     private:",
          "",
          "[Removed Lines]",
          "626:         static Var SpeciesConstructor(RecyclableObject* object, Var defaultConstructor, ScriptContext* scriptContext);",
          "",
          "[Added Lines]",
          "628:         static RecyclableObject* SpeciesConstructor(_In_ RecyclableObject* object, _In_ JavascriptFunction* defaultConstructor, _In_ ScriptContext* scriptContext);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/ArrayBuffer.cpp||lib/Runtime/Library/ArrayBuffer.cpp": [
          "File: lib/Runtime/Library/ArrayBuffer.cpp -> lib/Runtime/Library/ArrayBuffer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "509:         if (scriptContext->GetConfig()->IsES6SpeciesEnabled())",
          "510:         {",
          "515:             Js::Var constructorArgs[] = {constructor, JavascriptNumber::ToVar(byteLength, scriptContext)};",
          "516:             Js::CallInfo constructorCallInfo(Js::CallFlags_New, _countof(constructorArgs));",
          "",
          "[Removed Lines]",
          "511:             Var constructorVar = JavascriptOperators::SpeciesConstructor(arrayBuffer, scriptContext->GetLibrary()->GetArrayBufferConstructor(), scriptContext);",
          "513:             JavascriptFunction* constructor = JavascriptFunction::FromVar(constructorVar);",
          "",
          "[Added Lines]",
          "511:             RecyclableObject* constructor = JavascriptOperators::SpeciesConstructor(arrayBuffer, scriptContext->GetLibrary()->GetArrayBufferConstructor(), scriptContext);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6205:         if (isTypedArrayEntryPoint)",
          "6206:         {",
          "6207:             JS_REENTRANT(jsReentLock,",
          "6209:             isBuiltinArrayCtor = false;",
          "6211:             AssertAndFailFast(pArr == nullptr);",
          "",
          "[Removed Lines]",
          "6208:                 Var constructor = JavascriptOperators::SpeciesConstructor(typedArrayBase, TypedArrayBase::GetDefaultConstructor(args[0], scriptContext), scriptContext));",
          "",
          "[Added Lines]",
          "6208:                 RecyclableObject* constructor = JavascriptOperators::SpeciesConstructor(typedArrayBase, TypedArrayBase::GetDefaultConstructor(args[0], scriptContext), scriptContext));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9405:         if (isTypedArrayEntryPoint)",
          "9406:         {",
          "9407:             JS_REENTRANT(jsReentLock,",
          "9409:                     typedArrayBase, TypedArrayBase::GetDefaultConstructor(args[0], scriptContext), scriptContext));",
          "9411:             isBuiltinArrayCtor = false;",
          "",
          "[Removed Lines]",
          "9408:                 Var constructor = JavascriptOperators::SpeciesConstructor(",
          "",
          "[Added Lines]",
          "9408:                 RecyclableObject* constructor = JavascriptOperators::SpeciesConstructor(",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptPromise.cpp||lib/Runtime/Library/JavascriptPromise.cpp": [
          "File: lib/Runtime/Library/JavascriptPromise.cpp -> lib/Runtime/Library/JavascriptPromise.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     Var JavascriptPromise::CreateThenPromise(JavascriptPromise* sourcePromise, RecyclableObject* fulfillmentHandler, RecyclableObject* rejectionHandler, ScriptContext* scriptContext)",
          "824:     {",
          "826:         JavascriptPromiseCapability* promiseCapability = NewPromiseCapability(constructor, scriptContext);",
          "828:         JavascriptPromiseReaction* resolveReaction = JavascriptPromiseReaction::New(promiseCapability, fulfillmentHandler, scriptContext);",
          "",
          "[Removed Lines]",
          "825:         Var constructor = JavascriptOperators::SpeciesConstructor(sourcePromise, scriptContext->GetLibrary()->GetPromiseConstructor(), scriptContext);",
          "",
          "[Added Lines]",
          "825:         RecyclableObject* constructor = JavascriptOperators::SpeciesConstructor(sourcePromise, scriptContext->GetLibrary()->GetPromiseConstructor(), scriptContext);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/RegexHelper.cpp||lib/Runtime/Library/RegexHelper.cpp": [
          "File: lib/Runtime/Library/RegexHelper.cpp -> lib/Runtime/Library/RegexHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1576:     {",
          "1577:         PCWSTR const varName = _u(\"RegExp.prototype[Symbol.split]\");",
          "1581:             thisObj,",
          "1582:             defaultConstructor,",
          "1583:             scriptContext);",
          "",
          "[Removed Lines]",
          "1579:         Var defaultConstructor = scriptContext->GetLibrary()->GetRegExpConstructor();",
          "1580:         Var speciesConstructor = JavascriptOperators::SpeciesConstructor(",
          "",
          "[Added Lines]",
          "1579:         JavascriptFunction* defaultConstructor = scriptContext->GetLibrary()->GetRegExpConstructor();",
          "1580:         RecyclableObject* speciesConstructor = JavascriptOperators::SpeciesConstructor(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1589:         bool unicode = wcsstr(flags->GetString(), _u(\"u\")) != nullptr;",
          "1590:         flags = AppendStickyToFlagsIfNeeded(flags, scriptContext);",
          "1593:         {",
          "1594:             Js::Var args[] = { speciesConstructor, thisObj, flags };",
          "1595:             Js::CallInfo callInfo(Js::CallFlags_New, _countof(args));",
          "",
          "[Removed Lines]",
          "1592:         Var regEx = JavascriptOperators::NewObjectCreationHelper_ReentrancySafe(RecyclableObject::FromVar(speciesConstructor), defaultConstructor, scriptContext->GetThreadContext(), [=]()->Js::Var",
          "",
          "[Added Lines]",
          "1592:         Var regEx = JavascriptOperators::NewObjectCreationHelper_ReentrancySafe(speciesConstructor, defaultConstructor, scriptContext->GetThreadContext(), [=]()->Js::Var",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/SharedArrayBuffer.cpp||lib/Runtime/Library/SharedArrayBuffer.cpp": [
          "File: lib/Runtime/Library/SharedArrayBuffer.cpp -> lib/Runtime/Library/SharedArrayBuffer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:         if (scriptContext->GetConfig()->IsES6SpeciesEnabled())",
          "178:         {",
          "183:             Js::Var constructorArgs[] = { constructor, JavascriptNumber::ToVar(newbyteLength, scriptContext) };",
          "184:             Js::CallInfo constructorCallInfo(Js::CallFlags_New, _countof(constructorArgs));",
          "",
          "[Removed Lines]",
          "179:             Var constructorVar = JavascriptOperators::SpeciesConstructor(currentBuffer, scriptContext->GetLibrary()->GetSharedArrayBufferConstructor(), scriptContext);",
          "181:             JavascriptFunction* constructor = JavascriptFunction::FromVar(constructorVar);",
          "",
          "[Added Lines]",
          "179:             RecyclableObject* constructor = JavascriptOperators::SpeciesConstructor(currentBuffer, scriptContext->GetLibrary()->GetSharedArrayBufferConstructor(), scriptContext);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/TypedArray.cpp||lib/Runtime/Library/TypedArray.cpp": [
          "File: lib/Runtime/Library/TypedArray.cpp -> lib/Runtime/Library/TypedArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1627:         if (scriptContext->GetConfig()->IsES6SpeciesEnabled())",
          "1628:         {",
          "1632:             Js::Var constructorArgs[] = { constructor, buffer, JavascriptNumber::ToVar(beginByteOffset, scriptContext), JavascriptNumber::ToVar(newLength, scriptContext) };",
          "1633:             Js::CallInfo constructorCallInfo(Js::CallFlags_New, _countof(constructorArgs));",
          "",
          "[Removed Lines]",
          "1629:             JavascriptFunction* constructor =",
          "1630:                 JavascriptFunction::FromVar(JavascriptOperators::SpeciesConstructor(this, TypedArrayBase::GetDefaultConstructor(this, scriptContext), scriptContext));",
          "",
          "[Added Lines]",
          "1629:             RecyclableObject* constructor = JavascriptOperators::SpeciesConstructor(this, TypedArrayBase::GetDefaultConstructor(this, scriptContext), scriptContext);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1999:             uint32 captured = tempList->Count();",
          "2002:                 typedArrayBase, TypedArrayBase::GetDefaultConstructor(args[0], scriptContext), scriptContext);",
          "2004:             Js::Var constructorArgs[] = { constructor, JavascriptNumber::ToVar(captured, scriptContext) };",
          "",
          "[Removed Lines]",
          "2001:             Var constructor = JavascriptOperators::SpeciesConstructor(",
          "",
          "[Added Lines]",
          "2000:             RecyclableObject* constructor = JavascriptOperators::SpeciesConstructor(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2680:     }",
          "2684:     {",
          "2688:         {",
          "2689:         case TypeId::TypeIds_Int8Array:",
          "2692:         case TypeId::TypeIds_Uint8Array:",
          "2695:         case TypeId::TypeIds_Uint8ClampedArray:",
          "2698:         case TypeId::TypeIds_Int16Array:",
          "2701:         case TypeId::TypeIds_Uint16Array:",
          "2704:         case TypeId::TypeIds_Int32Array:",
          "2707:         case TypeId::TypeIds_Uint32Array:",
          "2710:         case TypeId::TypeIds_Float32Array:",
          "2713:         case TypeId::TypeIds_Float64Array:",
          "2716:         default:",
          "2718:         }",
          "2720:     }",
          "2722:     Var TypedArrayBase::FindMinOrMax(Js::ScriptContext * scriptContext, TypeId typeId, bool findMax)",
          "",
          "[Removed Lines]",
          "2683:     Var TypedArrayBase::GetDefaultConstructor(Var object, ScriptContext* scriptContext)",
          "2685:         TypeId typeId = JavascriptOperators::GetTypeId(object);",
          "2686:         Var defaultConstructor = nullptr;",
          "2687:         switch (typeId)",
          "2690:             defaultConstructor = scriptContext->GetLibrary()->GetInt8ArrayConstructor();",
          "2691:             break;",
          "2693:             defaultConstructor = scriptContext->GetLibrary()->GetUint8ArrayConstructor();",
          "2694:             break;",
          "2696:             defaultConstructor = scriptContext->GetLibrary()->GetUint8ClampedArrayConstructor();",
          "2697:             break;",
          "2699:             defaultConstructor = scriptContext->GetLibrary()->GetInt16ArrayConstructor();",
          "2700:             break;",
          "2702:             defaultConstructor = scriptContext->GetLibrary()->GetUint16ArrayConstructor();",
          "2703:             break;",
          "2705:             defaultConstructor = scriptContext->GetLibrary()->GetInt32ArrayConstructor();",
          "2706:             break;",
          "2708:             defaultConstructor = scriptContext->GetLibrary()->GetUint32ArrayConstructor();",
          "2709:             break;",
          "2711:             defaultConstructor = scriptContext->GetLibrary()->GetFloat32ArrayConstructor();",
          "2712:             break;",
          "2714:             defaultConstructor = scriptContext->GetLibrary()->GetFloat64ArrayConstructor();",
          "2715:             break;",
          "2717:             Assert(false);",
          "2719:         return defaultConstructor;",
          "",
          "[Added Lines]",
          "2682:     JavascriptFunction* TypedArrayBase::GetDefaultConstructor(Var object, ScriptContext* scriptContext)",
          "2684:         switch (JavascriptOperators::GetTypeId(object))",
          "2687:             return scriptContext->GetLibrary()->GetInt8ArrayConstructor();",
          "2689:             return scriptContext->GetLibrary()->GetUint8ArrayConstructor();",
          "2691:             return scriptContext->GetLibrary()->GetUint8ClampedArrayConstructor();",
          "2693:             return scriptContext->GetLibrary()->GetInt16ArrayConstructor();",
          "2695:             return scriptContext->GetLibrary()->GetUint16ArrayConstructor();",
          "2697:             return scriptContext->GetLibrary()->GetInt32ArrayConstructor();",
          "2699:             return scriptContext->GetLibrary()->GetUint32ArrayConstructor();",
          "2701:             return scriptContext->GetLibrary()->GetFloat32ArrayConstructor();",
          "2703:             return scriptContext->GetLibrary()->GetFloat64ArrayConstructor();",
          "2705:             Assert(UNREACHED);",
          "2706:             return nullptr;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/TypedArray.h||lib/Runtime/Library/TypedArray.h": [
          "File: lib/Runtime/Library/TypedArray.h -> lib/Runtime/Library/TypedArray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:         DEFINE_VTABLE_CTOR_ABSTRACT(TypedArrayBase, ArrayBufferParent);",
          "23:     public:",
          "26:         class EntryInfo",
          "27:         {",
          "",
          "[Removed Lines]",
          "24:         static Var GetDefaultConstructor(Var object, ScriptContext* scriptContext);",
          "",
          "[Added Lines]",
          "24:         static JavascriptFunction* GetDefaultConstructor(Var object, ScriptContext* scriptContext);",
          "",
          "---------------"
        ],
        "test/es6/proxyconstructor.js||test/es6/proxyconstructor.js": [
          "File: test/es6/proxyconstructor.js -> test/es6/proxyconstructor.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: let arr = new ArrayBuffer(10);",
          "7: arr.constructor = new Proxy(ArrayBuffer, {});",
          "9: arr.slice(1,2);",
          "11: let p = new Proxy(Object, {});",
          "12: for (let  i=0; i<20000; ++i)",
          "13: {",
          "14:     p = new Proxy(p, {});",
          "15: }",
          "16: let a = null;",
          "17: try",
          "18: {",
          "20:     a = new p();",
          "21:     print(typeof a === \"object\" ? \"Pass\" : \"Fail\");",
          "22: }",
          "23: catch(e)",
          "24: {",
          "25:     print(\"Pass\")",
          "26: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f95aa762f89adb4c5ae187e2ee11c37add784ee9",
      "candidate_info": {
        "commit_hash": "f95aa762f89adb4c5ae187e2ee11c37add784ee9",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/f95aa762f89adb4c5ae187e2ee11c37add784ee9",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "test/Array/concat2.baseline",
          "test/Array/concat2.js",
          "test/es6/es6toLength.js"
        ],
        "message": "[CVE-2017-0252] CopyNativeIntArrayElementsToVar overflow\n\nArray length mutation introduced by copy-from-prototype\nreentrancy can cause heap overflow in concat fast paths.\nFix by excluding copy-from-prototype cases from fast paths.\nAdjust unit tests to avoid excessively long run time.",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "test/Array/concat2.baseline||test/Array/concat2.baseline",
          "test/Array/concat2.js||test/Array/concat2.js",
          "test/es6/es6toLength.js||test/es6/es6toLength.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3066:             }",
          "3068:             if (pDestArray && JavascriptArray::IsDirectAccessArray(aItem) && JavascriptArray::IsDirectAccessArray(pDestArray)",
          "3070:             {",
          "3071:                 if (JavascriptNativeIntArray::Is(aItem))",
          "3072:                 {",
          "",
          "[Removed Lines]",
          "3069:                 && BigIndex(idxDest + JavascriptArray::FromVar(aItem)->length).IsSmallIndex()) // Fast path",
          "",
          "[Added Lines]",
          "3069:                 && BigIndex(idxDest + JavascriptArray::FromVar(aItem)->length).IsSmallIndex() && !JavascriptArray::FromVar(aItem)->IsFillFromPrototypes()) // Fast path",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3200:         for (uint idxArg = 0; idxArg < args.Info.Count; idxArg++)",
          "3201:         {",
          "3202:             Var aItem = args[idxArg];",
          "3204:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled())",
          "3205:             {",
          "3207:                 if (!JavascriptNativeIntArray::Is(pDestArray))",
          "3208:                 {",
          "3209:                     ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest);",
          "",
          "[Removed Lines]",
          "3206:                 JS_REENTRANT(jsReentLock, BOOL isConcatSpreadable = JavascriptOperators::IsConcatSpreadable(aItem));",
          "",
          "[Added Lines]",
          "3203:             BOOL isConcatSpreadable = false;",
          "3207:                 JS_REENTRANT(jsReentLock, isConcatSpreadable = JavascriptOperators::IsConcatSpreadable(aItem));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3222:                 }",
          "3223:             }",
          "3226:             {",
          "3227:                 JavascriptNativeIntArray* pItemArray = JavascriptNativeIntArray::FromVar(aItem);",
          "",
          "[Removed Lines]",
          "3225:             if (JavascriptNativeIntArray::Is(aItem)) // Fast path",
          "",
          "[Added Lines]",
          "3226:             if (JavascriptNativeIntArray::Is(aItem) && !JavascriptNativeIntArray::FromVar(aItem)->IsFillFromPrototypes()) // Fast path",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3258:             else",
          "3259:             {",
          "3260:                 JavascriptArray *pVarDestArray = JavascriptNativeIntArray::ConvertToVarArray(pDestArray);",
          "3262:                 return pVarDestArray;",
          "3263:             }",
          "3264:         }",
          "",
          "[Removed Lines]",
          "3261:                 JS_REENTRANT(jsReentLock, ConcatArgs<uint>(pVarDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest));",
          "",
          "[Added Lines]",
          "3262:                 BigIndex length;",
          "3263:                 JS_REENTRANT(jsReentLock, length = OP_GetLength(aItem, scriptContext),",
          "3264:                     ConcatArgs<uint>(pVarDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest, isConcatSpreadable, length));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3276:         for (uint idxArg = 0; idxArg < args.Info.Count; idxArg++)",
          "3277:         {",
          "3278:             Var aItem = args[idxArg];",
          "3280:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled())",
          "3281:             {",
          "3283:                 if (!JavascriptNativeFloatArray::Is(pDestArray))",
          "3284:                 {",
          "3285:                     ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest);",
          "",
          "[Removed Lines]",
          "3282:                 JS_REENTRANT(jsReentLock, BOOL isConcatSpreadable = JavascriptOperators::IsConcatSpreadable(aItem));",
          "",
          "[Added Lines]",
          "3282:             BOOL isConcatSpreadable = false;",
          "3286:                 JS_REENTRANT(jsReentLock, isConcatSpreadable = JavascriptOperators::IsConcatSpreadable(aItem));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3299:                 }",
          "3300:             }",
          "3303:             if (JavascriptArray::IsAnyArray(aItem) || remoteTypeIds[idxArg] == TypeIds_Array)",
          "3304:             {",
          "3306:                 {",
          "3307:                     JavascriptNativeIntArray *pIntArray = JavascriptNativeIntArray::FromVar(aItem);",
          "",
          "[Removed Lines]",
          "3302:             bool converted;",
          "3305:                 if (JavascriptNativeIntArray::Is(aItem)) // Fast path",
          "",
          "[Added Lines]",
          "3306:             bool converted = false;",
          "3309:                 if (JavascriptNativeIntArray::Is(aItem) && !JavascriptArray::FromVar(aItem)->IsFillFromPrototypes()) // Fast path",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3311:                     idxDest = idxDest + pIntArray->length;",
          "3312:                 }",
          "3314:                 {",
          "3315:                     JavascriptNativeFloatArray* pItemArray = JavascriptNativeFloatArray::FromVar(aItem);",
          "",
          "[Removed Lines]",
          "3313:                 else if (JavascriptNativeFloatArray::Is(aItem))",
          "",
          "[Added Lines]",
          "3317:                 else if (JavascriptNativeFloatArray::Is(aItem) && !JavascriptArray::FromVar(aItem)->IsFillFromPrototypes())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3322:                 {",
          "3323:                     JavascriptArray *pVarDestArray = JavascriptNativeFloatArray::ConvertToVarArray(pDestArray);",
          "3327:                     return pVarDestArray;",
          "3328:                 }",
          "",
          "[Removed Lines]",
          "3325:                     JS_REENTRANT(jsReentLock, ConcatArgs<uint>(pVarDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest));",
          "",
          "[Added Lines]",
          "3329:                     BigIndex length;",
          "3330:                     JS_REENTRANT(jsReentLock, length = OP_GetLength(aItem, scriptContext),",
          "3331:                         ConcatArgs<uint>(pVarDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest, isConcatSpreadable, length));",
          "",
          "---------------"
        ],
        "test/Array/concat2.baseline||test/Array/concat2.baseline": [
          "File: test/Array/concat2.baseline -> test/Array/concat2.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: -------concat Small-------------",
          "2: - concat 101, 102, 103, 104, 105",
          "10: - arr.concat(arr)",
          "24: -------test prototype lookup-------------",
          "25: a: 200,101,202,203,204,105,106,207",
          "26: r: 200,101,202,203,204,105,106,207,300,301,302,303,304",
          "",
          "[Removed Lines]",
          "3: length: 2147483647",
          "4:   2147483641: 100",
          "5:   2147483642: 101",
          "6:   2147483643: 102",
          "7:   2147483644: 103",
          "8:   2147483645: 104",
          "9:   2147483646: 105",
          "11: length: 4294967294",
          "12:   2147483641: 100",
          "13:   2147483642: 101",
          "14:   2147483643: 102",
          "15:   2147483644: 103",
          "16:   2147483645: 104",
          "17:   2147483646: 105",
          "18:   4294967288: 100",
          "19:   4294967289: 101",
          "20:   4294967290: 102",
          "21:   4294967291: 103",
          "22:   4294967292: 104",
          "23:   4294967293: 105",
          "",
          "[Added Lines]",
          "3: length: 505",
          "4:   499: 100",
          "5:   500: 101",
          "6:   501: 102",
          "7:   502: 103",
          "8:   503: 104",
          "9:   504: 105",
          "11: length: 1010",
          "12:   499: 100",
          "13:   500: 101",
          "14:   501: 102",
          "15:   502: 103",
          "16:   503: 104",
          "17:   504: 105",
          "18:   1004: 100",
          "19:   1005: 101",
          "20:   1006: 102",
          "21:   1007: 103",
          "22:   1008: 104",
          "23:   1009: 105",
          "",
          "---------------"
        ],
        "test/Array/concat2.js||test/Array/concat2.js": [
          "File: test/Array/concat2.js -> test/Array/concat2.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: }",
          "40: echo(\"-------concat Small-------------\");",
          "",
          "[Removed Lines]",
          "41: test_concat(2147483642);",
          "",
          "[Added Lines]",
          "41: test_concat(500);",
          "",
          "---------------"
        ],
        "test/es6/es6toLength.js||test/es6/es6toLength.js": [
          "File: test/es6/es6toLength.js -> test/es6/es6toLength.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:        {",
          "13:             var c = [];",
          "14:             c[0] = 1;",
          "16:             var oNeg = { length : -1, 0 : 3, 1: 4, [Symbol.isConcatSpreadable] : true};",
          "17:             c = c.concat(oNeg);",
          "18:             assert.areEqual(1, c[0], \"confirm indices of array concated to did not change\")",
          "21:        }",
          "22:    },",
          "23:    {",
          "",
          "[Removed Lines]",
          "15:             c[4294967293] = 2;",
          "19:             assert.areEqual(2, c[4294967293], \"confirm indices of array concated to did not change\");",
          "20:             assert.areEqual(undefined, c[4294967294], \"Length of oNeg is coerced to 0 nothing is concated here\");",
          "",
          "[Added Lines]",
          "15:             c[100] = 2;",
          "19:             assert.areEqual(2, c[100], \"confirm indices of array concated to did not change\");",
          "20:             assert.areEqual(undefined, c[101], \"Length of oNeg is coerced to 0 nothing is concated here\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c5bcaeac8c4322efd65e3d3535d364ed2708e3b",
      "candidate_info": {
        "commit_hash": "8c5bcaeac8c4322efd65e3d3535d364ed2708e3b",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/8c5bcaeac8c4322efd65e3d3535d364ed2708e3b",
        "files": [
          "lib/Runtime/Debug/DiagStackFrame.cpp",
          "lib/Runtime/Language/Arguments.h",
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptProxy.cpp",
          "lib/Runtime/Library/TypedArray.cpp"
        ],
        "message": "Refactoring JavascriptFunction::CallFunction callsites",
        "before_after_code_files": [
          "lib/Runtime/Debug/DiagStackFrame.cpp||lib/Runtime/Debug/DiagStackFrame.cpp",
          "lib/Runtime/Language/Arguments.h||lib/Runtime/Language/Arguments.h",
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptProxy.cpp||lib/Runtime/Library/JavascriptProxy.cpp",
          "lib/Runtime/Library/TypedArray.cpp||lib/Runtime/Library/TypedArray.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Debug/DiagStackFrame.cpp||lib/Runtime/Debug/DiagStackFrame.cpp": [
          "File: lib/Runtime/Debug/DiagStackFrame.cpp -> lib/Runtime/Debug/DiagStackFrame.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "359:             varThis = scriptContext->GetLibrary()->GetNull();",
          "360:         }",
          "365:         debugManager->UpdateConsoleScope(dummyObject, scriptContext);",
          "",
          "[Removed Lines]",
          "362:         Js::Arguments args(1, (Js::Var*) &varThis);",
          "363:         varResult = pfuncScript->CallFunction(args);",
          "",
          "[Added Lines]",
          "362:         varResult = CALL_FUNCTION(pfuncScript->GetScriptContext()->GetThreadContext(), pfuncScript, CallInfo(1), varThis);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/Arguments.h||lib/Runtime/Language/Arguments.h": [
          "File: lib/Runtime/Language/Arguments.h -> lib/Runtime/Language/Arguments.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     CALL_ENTRYPOINT_NOASSERT(function->GetEntryPoint(), \\",
          "86:                     function, callInfo, ##__VA_ARGS__)",
          "89: #define CALL_FUNCTION(threadContext, function, callInfo, ...) \\",
          "90:     (threadContext->AssertJsReentrancy(), \\",
          "91:     CALL_FUNCTION_NOASSERT(function, callInfo, ##__VA_ARGS__));",
          "92: #define CALL_ENTRYPOINT(threadContext, entryPoint, function, callInfo, ...) \\",
          "93:     (threadContext->AssertJsReentrancy(), \\",
          "94:     CALL_ENTRYPOINT_NOASSERT(entryPoint, function, callInfo, ##__VA_ARGS__));",
          "",
          "[Removed Lines]",
          "88: #if ENABLE_JS_REENTRANCY_CHECK",
          "",
          "[Added Lines]",
          "88: #if ENABLE_JS_REENTRANCY_CHECK && DBG && ENABLE_NATIVE_CODEGEN",
          "89: #define CALL_FUNCTION(threadContext, function, callInfo, ...) \\",
          "90:     (threadContext->AssertJsReentrancy(), \\",
          "91:     CheckIsExecutable(function, function->GetEntryPoint()), \\",
          "92:     CALL_FUNCTION_NOASSERT(function, callInfo, ##__VA_ARGS__));",
          "93: #elif ENABLE_JS_REENTRANCY_CHECK",
          "97: #else",
          "98: #define CALL_FUNCTION(threadContext, function, callInfo, ...) \\",
          "99:     CALL_FUNCTION_NOASSERT(function, callInfo, ##__VA_ARGS__);",
          "100: #endif",
          "102: #if ENABLE_JS_REENTRANCY_CHECK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102: #define JS_REENTRANCY_LOCK(reentrancyLock, threadContext) \\",
          "103:     JsReentLock reentrancyLock(threadContext);",
          "104: #else",
          "107: #define CALL_ENTRYPOINT(threadContext, entryPoint, function, callInfo, ...) \\",
          "108:     CALL_ENTRYPOINT_NOASSERT(entryPoint, function, callInfo, ##__VA_ARGS__);",
          "109: #define JS_REENTRANT(reentrancyLock, ...) \\",
          "",
          "[Removed Lines]",
          "105: #define CALL_FUNCTION(threadContext, function, callInfo, ...) \\",
          "106:     CALL_FUNCTION_NOASSERT(function, callInfo, ##__VA_ARGS__);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10224:                     Assert(mapFn != nullptr);",
          "10225:                     Assert(mapFnThisArg != nullptr);",
          "10230:                 }",
          "10232:                 if (newArr)",
          "",
          "[Removed Lines]",
          "10227:                     Js::Var mapFnArgs[] = { mapFnThisArg, nextValue, JavascriptNumber::ToVar(k, scriptContext) };",
          "10228:                     Js::CallInfo mapFnCallInfo(Js::CallFlags_Value, _countof(mapFnArgs));",
          "10229:                     nextValue = mapFn->CallFunction(Js::Arguments(mapFnCallInfo, mapFnArgs));",
          "",
          "[Added Lines]",
          "10227:                     Var kVar = JavascriptNumber::ToVar(k, scriptContext);",
          "10228:                     nextValue = CALL_FUNCTION(scriptContext->GetThreadContext(), mapFn, CallInfo(CallFlags_Value, 3), mapFnThisArg, nextValue, kVar);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10295:                     Assert(mapFn != nullptr);",
          "10296:                     Assert(mapFnThisArg != nullptr);",
          "10301:                 }",
          "10303:                 if (newArr)",
          "",
          "[Removed Lines]",
          "10298:                     Js::Var mapFnArgs[] = { mapFnThisArg, kValue, JavascriptNumber::ToVar(k, scriptContext) };",
          "10299:                     Js::CallInfo mapFnCallInfo(Js::CallFlags_Value, _countof(mapFnArgs));",
          "10300:                     JS_REENTRANT(jsReentLock, kValue = mapFn->CallFunction(Js::Arguments(mapFnCallInfo, mapFnArgs)));",
          "",
          "[Added Lines]",
          "10297:                     Var kVar = JavascriptNumber::ToVar(k, scriptContext);",
          "10298:                     JS_REENTRANT(jsReentLock, kValue = CALL_FUNCTION(scriptContext->GetThreadContext(), mapFn, CallInfo(CallFlags_Value, 3), mapFnThisArg, kValue, kVar));",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptProxy.cpp||lib/Runtime/Library/JavascriptProxy.cpp": [
          "File: lib/Runtime/Library/JavascriptProxy.cpp -> lib/Runtime/Library/JavascriptProxy.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:         }",
          "230:         PropertyId propertyId = getPropertyId();",
          "243:         Js::ImplicitCallFlags saveImplicitCallFlags = threadContext->GetImplicitCallFlags();",
          "245:         threadContext->SetImplicitCallFlags((Js::ImplicitCallFlags)(saveImplicitCallFlags | ImplicitCall_Accessor));",
          "247:         TypeId getResultTypeId = JavascriptOperators::GetTypeId(getResult);",
          "",
          "[Removed Lines]",
          "231:         CallInfo callInfo(CallFlags_Value, 3);",
          "232:         Var varArgs[3];",
          "233:         Js::Arguments arguments(callInfo, varArgs);",
          "234:         varArgs[0] = handlerObj;",
          "235:         varArgs[1] = targetObj;",
          "236:         varArgs[2] = GetName(requestContext, propertyId);",
          "238:         Assert(JavascriptString::Is(varArgs[2]) || JavascriptSymbol::Is(varArgs[2]));",
          "244:         getResult = JavascriptFunction::FromVar(gOPDMethod)->CallFunction(arguments);",
          "",
          "[Added Lines]",
          "231:         Var propertyName = GetName(requestContext, propertyId);",
          "233:         Assert(JavascriptString::Is(propertyName) || JavascriptSymbol::Is(propertyName));",
          "239:         getResult = CALL_FUNCTION(threadContext, gOPDMethod, CallInfo(CallFlags_Value, 3), handlerObj, targetObj, propertyName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:         PropertyId propertyId = getPropertyId();",
          "351:         propertyDescriptor->SetFromProxy(true);",
          "360:         Js::ImplicitCallFlags saveImplicitCallFlags = threadContext->GetImplicitCallFlags();",
          "362:         threadContext->SetImplicitCallFlags((Js::ImplicitCallFlags)(saveImplicitCallFlags | ImplicitCall_Accessor));",
          "",
          "[Removed Lines]",
          "352:         CallInfo callInfo(CallFlags_Value, 4);",
          "353:         Var varArgs[4];",
          "354:         Js::Arguments arguments(callInfo, varArgs);",
          "355:         varArgs[0] = handlerObj;",
          "356:         varArgs[1] = targetObj;",
          "357:         varArgs[2] = GetName(requestContext, propertyId);",
          "358:         varArgs[3] = instance;",
          "361:         getGetResult = getGetMethod->CallFunction(arguments);",
          "",
          "[Added Lines]",
          "347:         Var propertyName = GetName(requestContext, propertyId);",
          "350:         getGetResult = CALL_FUNCTION(threadContext, getGetMethod, CallInfo(CallFlags_Value, 4), handlerObj, targetObj, propertyName, instance);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:         }",
          "435:         PropertyId propertyId = getPropertyId();",
          "443:         Js::ImplicitCallFlags saveImplicitCallFlags = threadContext->GetImplicitCallFlags();",
          "445:         threadContext->SetImplicitCallFlags((Js::ImplicitCallFlags)(saveImplicitCallFlags | ImplicitCall_Accessor));",
          "",
          "[Removed Lines]",
          "436:         CallInfo callInfo(CallFlags_Value, 3);",
          "437:         Var varArgs[3];",
          "438:         Js::Arguments arguments(callInfo, varArgs);",
          "439:         varArgs[0] = handlerObj;",
          "440:         varArgs[1] = targetObj;",
          "441:         varArgs[2] = GetName(requestContext, propertyId);",
          "444:         getHasResult = hasMethod->CallFunction(arguments);",
          "",
          "[Added Lines]",
          "425:         Var propertyName = GetName(requestContext, propertyId);",
          "428:         getHasResult = CALL_FUNCTION(threadContext, hasMethod, CallInfo(CallFlags_Value, 3), handlerObj, targetObj, propertyName);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "814:         Js::ImplicitCallFlags saveImplicitCallFlags = threadContext->GetImplicitCallFlags();",
          "816:         threadContext->SetImplicitCallFlags((Js::ImplicitCallFlags)(saveImplicitCallFlags | ImplicitCall_Accessor));",
          "818:         BOOL trapResult = JavascriptConversion::ToBoolean(deletePropertyResult, requestContext);",
          "",
          "[Removed Lines]",
          "807:         CallInfo callInfo(CallFlags_Value, 3);",
          "808:         Var varArgs[3];",
          "809:         Js::Arguments arguments(callInfo, varArgs);",
          "810:         varArgs[0] = handlerObj;",
          "811:         varArgs[1] = targetObj;",
          "812:         varArgs[2] = GetName(requestContext, propertyId);",
          "815:         deletePropertyResult = deleteMethod->CallFunction(arguments);",
          "",
          "[Added Lines]",
          "792:         Var propertyName = GetName(requestContext, propertyId);",
          "795:         deletePropertyResult = CALL_FUNCTION(threadContext, deleteMethod, CallInfo(CallFlags_Value, 3), handlerObj, targetObj, propertyName);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1158:         {",
          "1159:             return targetObj->IsExtensible();",
          "1160:         }",
          "1167:         Js::ImplicitCallFlags saveImplicitCallFlags = threadContext->GetImplicitCallFlags();",
          "1169:         threadContext->SetImplicitCallFlags((Js::ImplicitCallFlags)(saveImplicitCallFlags | ImplicitCall_Accessor));",
          "1171:         BOOL trapResult = JavascriptConversion::ToBoolean(isExtensibleResult, requestContext);",
          "",
          "[Removed Lines]",
          "1161:         CallInfo callInfo(CallFlags_Value, 2);",
          "1162:         Var varArgs[2];",
          "1163:         Js::Arguments arguments(callInfo, varArgs);",
          "1164:         varArgs[0] = handlerObj;",
          "1165:         varArgs[1] = targetObj;",
          "1168:         Var isExtensibleResult = isExtensibleMethod->CallFunction(arguments);",
          "",
          "[Added Lines]",
          "1143:         Var isExtensibleResult = CALL_FUNCTION(threadContext, isExtensibleMethod, CallInfo(CallFlags_Value, 2), handlerObj, targetObj);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1218:         {",
          "1219:             return targetObj->PreventExtensions();",
          "1220:         }",
          "",
          "[Removed Lines]",
          "1221:         CallInfo callInfo(CallFlags_Value, 2);",
          "1222:         Var varArgs[2];",
          "1223:         Js::Arguments arguments(callInfo, varArgs);",
          "1224:         varArgs[0] = handlerObj;",
          "1225:         varArgs[1] = targetObj;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1233:         Js::ImplicitCallFlags saveImplicitCallFlags = threadContext->GetImplicitCallFlags();",
          "1235:         threadContext->SetImplicitCallFlags((Js::ImplicitCallFlags)(saveImplicitCallFlags | ImplicitCall_Accessor));",
          "1237:         BOOL trapResult = JavascriptConversion::ToBoolean(preventExtensionsResult, requestContext);",
          "",
          "[Removed Lines]",
          "1234:         Var preventExtensionsResult = preventExtensionsMethod->CallFunction(arguments);",
          "",
          "[Added Lines]",
          "1204:         Var preventExtensionsResult = CALL_FUNCTION(threadContext, preventExtensionsMethod, CallInfo(CallFlags_Value, 2), handlerObj, targetObj);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1486:         {",
          "1487:             return RecyclableObject::FromVar(JavascriptObject::GetPrototypeOf(targetObj, requestContext));",
          "1488:         }",
          "1495:         Js::ImplicitCallFlags saveImplicitCallFlags = threadContext->GetImplicitCallFlags();",
          "1497:         threadContext->SetImplicitCallFlags((Js::ImplicitCallFlags)(saveImplicitCallFlags | ImplicitCall_Accessor));",
          "1499:         TypeId prototypeTypeId = JavascriptOperators::GetTypeId(getPrototypeOfResult);",
          "",
          "[Removed Lines]",
          "1489:         CallInfo callInfo(CallFlags_Value, 2);",
          "1490:         Var varArgs[2];",
          "1491:         Js::Arguments arguments(callInfo, varArgs);",
          "1492:         varArgs[0] = handlerObj;",
          "1493:         varArgs[1] = targetObj;",
          "1496:         getPrototypeOfResult = getPrototypeOfMethod->CallFunction(arguments);",
          "",
          "[Added Lines]",
          "1461:         getPrototypeOfResult = CALL_FUNCTION(threadContext, getPrototypeOfMethod, CallInfo(CallFlags_Value, 2), handlerObj, targetObj);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1575:             return TRUE;",
          "1576:         }",
          "1585:         Js::ImplicitCallFlags saveImplicitCallFlags = threadContext->GetImplicitCallFlags();",
          "1587:         threadContext->SetImplicitCallFlags((Js::ImplicitCallFlags)(saveImplicitCallFlags | ImplicitCall_Accessor));",
          "",
          "[Removed Lines]",
          "1578:         CallInfo callInfo(CallFlags_Value, 3);",
          "1579:         Var varArgs[3];",
          "1580:         Js::Arguments arguments(callInfo, varArgs);",
          "1581:         varArgs[0] = handlerObj;",
          "1582:         varArgs[1] = targetObj;",
          "1583:         varArgs[2] = newPrototype;",
          "1586:         Var setPrototypeResult = setPrototypeOfMethod->CallFunction(arguments);",
          "",
          "[Added Lines]",
          "1545:         Var setPrototypeResult = CALL_FUNCTION(threadContext, setPrototypeOfMethod, CallInfo(CallFlags_Value, 3), handlerObj, targetObj, newPrototype);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1746:             descVar = JavascriptOperators::FromPropertyDescriptor(descriptor, requestContext);",
          "1747:         }",
          "1757:         Js::ImplicitCallFlags saveImplicitCallFlags = threadContext->GetImplicitCallFlags();",
          "1759:         threadContext->SetImplicitCallFlags((Js::ImplicitCallFlags)(saveImplicitCallFlags | ImplicitCall_Accessor));",
          "1761:         BOOL defineResult = JavascriptConversion::ToBoolean(definePropertyResult, requestContext);",
          "",
          "[Removed Lines]",
          "1749:         CallInfo callInfo(CallFlags_Value, 4);",
          "1750:         Var varArgs[4];",
          "1751:         Js::Arguments arguments(callInfo, varArgs);",
          "1752:         varArgs[0] = handlerObj;",
          "1753:         varArgs[1] = targetObj;",
          "1754:         varArgs[2] = GetName(requestContext, propId);",
          "1755:         varArgs[3] = descVar;",
          "1758:         definePropertyResult = defineOwnPropertyMethod->CallFunction(arguments);",
          "",
          "[Added Lines]",
          "1708:         Var propertyName = GetName(requestContext, propId);",
          "1711:         definePropertyResult = CALL_FUNCTION(threadContext, defineOwnPropertyMethod, CallInfo(CallFlags_Value, 4), handlerObj, targetObj, propertyName, descVar);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1874:                 return JavascriptOperators::SetPropertyWPCache(receiver, targetObj, propertyId, newValue, requestContext, PropertyOperationFlags::PropertyOperation_None, &propertyValueInfo);",
          "1875:             }",
          "1876:             default:",
          "1878:             }",
          "1879:         }",
          "",
          "[Removed Lines]",
          "1877:                 Assert(FALSE);",
          "",
          "[Added Lines]",
          "1830:                 AnalysisAssert(FALSE);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1894:         Js::ImplicitCallFlags saveImplicitCallFlags = threadContext->GetImplicitCallFlags();",
          "1896:         threadContext->SetImplicitCallFlags((Js::ImplicitCallFlags)(saveImplicitCallFlags | ImplicitCall_Accessor));",
          "1898:         BOOL setResult = JavascriptConversion::ToBoolean(setPropertyResult, requestContext);",
          "",
          "[Removed Lines]",
          "1885:         CallInfo callInfo(CallFlags_Value, 5);",
          "1886:         Var varArgs[5];",
          "1887:         Js::Arguments arguments(callInfo, varArgs);",
          "1888:         varArgs[0] = handlerObj;",
          "1889:         varArgs[1] = targetObj;",
          "1890:         varArgs[2] = GetName(requestContext, propertyId);",
          "1891:         varArgs[3] = newValue;",
          "1892:         varArgs[4] = receiver;",
          "1895:         setPropertyResult = setMethod->CallFunction(arguments);",
          "",
          "[Added Lines]",
          "1838:         Var propertyName = GetName(requestContext, propertyId);",
          "1841:         setPropertyResult = CALL_FUNCTION(threadContext, setMethod, CallInfo(CallFlags_Value, 5), handlerObj, targetObj, propertyName, newValue, receiver);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2303:         Js::ImplicitCallFlags saveImplicitCallFlags = threadContext->GetImplicitCallFlags();",
          "2305:         threadContext->SetImplicitCallFlags((Js::ImplicitCallFlags)(saveImplicitCallFlags | ImplicitCall_Accessor));",
          "2307:         if (!JavascriptOperators::IsObject(ownKeysResult))",
          "",
          "[Removed Lines]",
          "2297:         CallInfo callInfo(CallFlags_Value, 2);",
          "2298:         Var varArgs[2];",
          "2299:         Js::Arguments arguments(callInfo, varArgs);",
          "2300:         varArgs[0] = handlerObj;",
          "2301:         varArgs[1] = targetObj;",
          "2304:         Var ownKeysResult = ownKeysMethod->CallFunction(arguments);",
          "",
          "[Added Lines]",
          "2245:         Var ownKeysResult = CALL_FUNCTION(threadContext, ownKeysMethod, CallInfo(CallFlags_Value, 2), handlerObj, targetObj);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/TypedArray.cpp||lib/Runtime/Library/TypedArray.cpp": [
          "File: lib/Runtime/Library/TypedArray.cpp -> lib/Runtime/Library/TypedArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1605:                         Assert(mapFn != nullptr);",
          "1606:                         Assert(mapFnThisArg != nullptr);",
          "1611:                     }",
          "",
          "[Removed Lines]",
          "1608:                         Js::Var mapFnArgs[] = { mapFnThisArg, kValue, JavascriptNumber::ToVar(k, scriptContext) };",
          "1609:                         Js::CallInfo mapFnCallInfo(Js::CallFlags_Value, _countof(mapFnArgs));",
          "1610:                         kValue = mapFn->CallFunction(Js::Arguments(mapFnCallInfo, mapFnArgs));",
          "",
          "[Added Lines]",
          "1608:                         Var kVar = JavascriptNumber::ToVar(k, scriptContext);",
          "1609:                         kValue = CALL_FUNCTION(scriptContext->GetThreadContext(), mapFn, CallInfo(CallFlags_Value, 3), mapFnThisArg, kValue, kVar);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1683:                     Assert(mapFn != nullptr);",
          "1684:                     Assert(mapFnThisArg != nullptr);",
          "1689:                 }",
          "",
          "[Removed Lines]",
          "1686:                     Js::Var mapFnArgs[] = { mapFnThisArg, kValue, JavascriptNumber::ToVar(k, scriptContext) };",
          "1687:                     Js::CallInfo mapFnCallInfo(Js::CallFlags_Value, _countof(mapFnArgs));",
          "1688:                     kValue = mapFn->CallFunction(Js::Arguments(mapFnCallInfo, mapFnArgs));",
          "",
          "[Added Lines]",
          "1685:                     Var kVar = JavascriptNumber::ToVar(k, scriptContext);",
          "1686:                     kValue = CALL_FUNCTION(scriptContext->GetThreadContext(), mapFn, CallInfo(CallFlags_Value, 3), mapFnThisArg, kValue, kVar);",
          "",
          "---------------"
        ]
      }
    }
  ]
}