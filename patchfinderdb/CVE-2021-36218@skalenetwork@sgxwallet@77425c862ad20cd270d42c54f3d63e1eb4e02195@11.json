{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8a8cd25c183f221920af54540303b085afcc670",
      "candidate_info": {
        "commit_hash": "f8a8cd25c183f221920af54540303b085afcc670",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/f8a8cd25c183f221920af54540303b085afcc670",
        "files": [
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "abstractstubserver.h",
          "secure_enclave/.deps/DKGUtils.Po",
          "secure_enclave/DH_dkg.c",
          "secure_enclave/DH_dkg.h",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/DKGUtils.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "spec.json",
          "stubclient.h",
          "testw.cpp"
        ],
        "message": "SKALE-1512-add-DKG-to-SGX add recursive mutex to server functions and add dkg verification",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "abstractstubserver.h||abstractstubserver.h",
          "secure_enclave/.deps/DKGUtils.Po||secure_enclave/.deps/DKGUtils.Po",
          "secure_enclave/DH_dkg.c||secure_enclave/DH_dkg.c",
          "secure_enclave/DH_dkg.h||secure_enclave/DH_dkg.h",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/DKGUtils.h||secure_enclave/DKGUtils.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"sgxwallet.h\"",
          "8: #include <iostream>",
          "10: std::vector<std::string> SplitString(const char* koefs, const char symbol){",
          "11:   std::string str(koefs);",
          "12:   std::string delim;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <memory>",
          "11: #include \"SGXWalletServer.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:   return pub_shares_vect;",
          "101: }",
          "104:   char* errMsg1 = (char*) calloc(1024,1);",
          "105:   int err_status = 0;",
          "",
          "[Removed Lines]",
          "103: std::string get_secret_shares( const char* encryptedPolyHex, const std::string& publicKeys, int n, int t){",
          "",
          "[Added Lines]",
          "106: std::string get_secret_shares(const std::string& polyName, const char* encryptedPolyHex, const std::string& publicKeys, int n, int t){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg1, encr_dkg_poly);",
          "114:   std::string result;",
          "115:   for ( int i = 0; i < n; i++){",
          "116:     uint8_t encrypted_skey[BUF_LEN];",
          "117:     uint32_t dec_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:     result += cur_share;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:     uint32_t enc_len = BUF_LEN;",
          "134:     carray2Hex(encrypted_skey, enc_len, hexEncrKey);",
          "137:     std::string name = \"DKG_DH_KEY_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:   }",
          "135:   return result;",
          "136: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:   free(encr_dkg_poly);",
          "149:   free(errMsg1);",
          "150:   free(hexEncrKey);",
          "153: }",
          "155: bool VerifyShares(const char* encryptedPolyHex, const char* encr_sshare, const char * encryptedKeyHex, int t, int n, int ind ){",
          "156:     char* errMsg1 = (char*) calloc(1024,1);",
          "157:     int err_status = 0;",
          "159:     uint64_t poly_len = 0;",
          "160:     uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "161:     hex2carray2(encryptedPolyHex, &poly_len, encr_dkg_poly, 6100);",
          "163:     uint64_t dec_key_len ;",
          "164:     uint8_t encr_key[BUF_LEN];",
          "165:     hex2carray(encryptedKeyHex, &dec_key_len, encr_key);",
          "169:     int result ;",
          "170:     dkg_verification(eid, &err_status, errMsg1, encr_dkg_poly, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "172:     std::cerr << \"errMsg1: \" << errMsg1 << std::endl;",
          "174:     free(errMsg1);",
          "175:     free(encr_dkg_poly);",
          "177:     std::cerr << \"result is \" << result << std::endl;",
          "178:     return result;",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: std::vector<std::string> SplitString(const char* koefs, const char symbol);",
          "19: #endif //SGXD_DKGCRYPTO_H",
          "",
          "[Removed Lines]",
          "17: std::string get_secret_shares( const char* encryptedPolyHex, const std::string& publicKeys, int n, int t);",
          "",
          "[Added Lines]",
          "17: std::string get_secret_shares(const std::string& polyName, const char* encryptedPolyHex, const std::string& publicKeys, int n, int t);",
          "19: bool VerifyShares(const char* encryptedPolyHex, const char* encr_sshare, const char * encryptedKeyHex,  int t, int n, int ind);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:     try {",
          "304:         std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName, \"DKGPoly:\");",
          "307:         result[\"SecretShare\"] = s;",
          "",
          "[Removed Lines]",
          "305:         std::string s = get_secret_shares( encr_poly_ptr->c_str(), publicKeys, n, t);",
          "",
          "[Added Lines]",
          "305:         std::string s = get_secret_shares(polyName, encr_poly_ptr->c_str(), publicKeys, n, t);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:     return result;",
          "317: }",
          "319: Json::Value SGXWalletServer::generateDKGPoly(const std::string& polyName, int t){",
          "321: }",
          "323: Json::Value SGXWalletServer::getVerificationVector(const std::string& polyName, int n, int t){",
          "324:   return getVerificationVectorImpl(polyName, n, t);",
          "325: }",
          "327: Json::Value SGXWalletServer::getSecretShare(const std::string& polyName, const std::string& publicKeys, int n, int t){",
          "328:     return getSecretShareImpl(polyName, publicKeys, n, t);",
          "329: }",
          "332: Json::Value SGXWalletServer::generateECDSAKey(const std::string &_keyName) {",
          "333:     return generateECDSAKeyImpl(_keyName);",
          "334: }",
          "336: Json::Value SGXWalletServer::getPublicECDSAKey(const std::string &_keyName) {",
          "337:   return getPublicECDSAKeyImpl(_keyName);",
          "338: }",
          "340: Json::Value SGXWalletServer::ecdsaSignMessageHash(int base, const std::string &_keyName, const std::string &messageHash ) {",
          "341:     std::cerr << \"entered ecdsaSignMessageHash\" << std::endl;",
          "342:     std::cerr << \"MessageHash first \" << messageHash << std::endl;",
          "343:     return ecdsaSignMessageHashImpl(base,_keyName, messageHash);",
          "",
          "[Removed Lines]",
          "320:     return generateDKGPolyImpl(polyName, t);",
          "",
          "[Added Lines]",
          "319: Json::Value DKGVerificationImpl(const std::string& polyName, const std::string& EthKeyName,",
          "320:                                   const std::string& SecretShare, int t, int n, int ind){",
          "322:   Json::Value result;",
          "323:   result[\"status\"] = 0;",
          "324:   result[\"errorMessage\"] = \"\";",
          "325:   result[\"result\"] = true;",
          "327:   try {",
          "328:     std::shared_ptr<std::string> encryptedPolyHex_ptr = readFromDb(polyName, \"DKGPoly:\");",
          "329:     std::string keyName = polyName + \"_\" + std::to_string(ind);",
          "331:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readECDSAKey(\"test_key1\");",
          "333:     if ( !VerifyShares(encryptedPolyHex_ptr->c_str(), SecretShare.c_str(), encryptedKeyHex_ptr->c_str(),  t, n, ind )){",
          "334:       result[\"result\"] = false;",
          "335:     }",
          "338:   } catch (RPCException &_e) {",
          "339:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "340:     result[\"status\"] = _e.status;",
          "341:     result[\"errorMessage\"] = _e.errString;",
          "342:     result[\"result\"] = false;",
          "343:   }",
          "345:   return result;",
          "346: }",
          "349:   lock_guard<recursive_mutex> lock(m);",
          "350:   return generateDKGPolyImpl(polyName, t);",
          "354:   lock_guard<recursive_mutex> lock(m);",
          "359:     lock_guard<recursive_mutex> lock(m);",
          "363: Json::Value  SGXWalletServer::DKGVerification( const std::string& polyName, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index){",
          "364:   lock_guard<recursive_mutex> lock(m);",
          "365:   return DKGVerificationImpl(polyName, EthKeyName, SecretShare, t, n, index);",
          "366: }",
          "370:   lock_guard<recursive_mutex> lock(m);",
          "375:   lock_guard<recursive_mutex> lock(m);",
          "380:     lock_guard<recursive_mutex> lock(m);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "347: Json::Value",
          "348: SGXWalletServer::importBLSKeyShare(int index, const std::string &_keyShare, const std::string &_keyShareName, int n,",
          "349:                                    int t) {",
          "350:     return importBLSKeyShareImpl(index, _keyShare, _keyShareName, n, t);",
          "351: }",
          "353: Json::Value SGXWalletServer::blsSignMessageHash(const std::string &keyShareName, const std::string &messageHash,int n,",
          "354:                                        int t, int signerIndex) {",
          "355:     return blsSignMessageHashImpl(keyShareName, messageHash, n,t, signerIndex);",
          "356: }",
          "358: Json::Value SGXWalletServer::importECDSAKey(const std::string &key, const std::string &keyName) {",
          "360: }",
          "",
          "[Removed Lines]",
          "359:     return importECDSAKeyImpl(key, keyName);",
          "",
          "[Added Lines]",
          "390:     lock_guard<recursive_mutex> lock(m);",
          "396:     lock_guard<recursive_mutex> lock(m);",
          "401:   lock_guard<recursive_mutex> lock(m);",
          "402:   return importECDSAKeyImpl(key, keyName);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "443:     throw new RPCException(KEY_SHARE_ALREADY_EXISTS, \"Poly with this name already exists\");",
          "444:   }",
          "446:   levelDb->writeString(key, value);",
          "447: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:   levelDb->writeString(key, value);",
          "490: }",
          "492: void writeDataToDB(const string & Name, const string &value) {",
          "493:   Json::Value val;",
          "494:   Json::FastWriter writer;",
          "496:   val[\"value\"] = value;",
          "497:   std::string json = writer.write(val);",
          "499:   auto key = Name;",
          "501:   if (levelDb->readString(Name) != nullptr) {",
          "502:     std::cerr << \"already exists\" << std::endl;",
          "503:     throw new RPCException(KEY_SHARE_ALREADY_EXISTS, \"Data with this name already exists\");",
          "504:   }",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"abstractstubserver.h\"",
          "9: using namespace jsonrpc;",
          "10: using namespace std;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include <mutex>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:     SGXWalletServer* server = nullptr;",
          "18: public:",
          "19:     SGXWalletServer(AbstractServerConnector &connector, serverVersion_t type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:     std::recursive_mutex m;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29:     virtual Json::Value generateDKGPoly(const std::string& polyName, int t);",
          "30:     virtual Json::Value getVerificationVector(const std::string& polyName, int n, int t);",
          "31:     virtual Json::Value getSecretShare(const std::string& polyName, const std::string& publicKeys, int n, int t);",
          "34: };",
          "36: shared_ptr<string> readFromDb(const string & name, const string & prefix);",
          "38: void writeKeyShare(const string &_keyShareName, const string &value, int index, int n, int t);",
          "39: shared_ptr<std::string> readKeyShare(const string& _keyShare);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:     virtual Json::Value DKGVerification(const std::string& polyName, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "40: void writeDataToDB(const string & Name, const string &value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "55: Json::Value generateDKGPolyImpl(const std::string& polyName, int t);",
          "56: Json::Value getVerificationVectorImpl(const std::string& polyName, int n, int t);",
          "57: Json::Value getSecretShareImpl(const std::string& polyName, const std::string& publicKeys, int n, int t);",
          "59: #endif //SGXWALLET_SGXWALLETSERVER_HPP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: Json::Value DKGVerificationImpl(const std::string& polyName, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "",
          "---------------"
        ],
        "abstractstubserver.h||abstractstubserver.h": [
          "File: abstractstubserver.h -> abstractstubserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     public:",
          "13:         AbstractStubServer(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<AbstractStubServer>(conn, type)",
          "14:         {",
          "26:         inline virtual void importBLSKeyShareI(const Json::Value &request, Json::Value &response)",
          "27:         {",
          "",
          "[Removed Lines]",
          "15:             this->bindAndAddMethod(jsonrpc::Procedure(\"importBLSKeyShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"index\",jsonrpc::JSON_INTEGER,\"keyShare\",jsonrpc::JSON_STRING,\"keyShareName\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::importBLSKeyShareI);",
          "16:             this->bindAndAddMethod(jsonrpc::Procedure(\"blsSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyShareName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"signerIndex\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::blsSignMessageHashI);",
          "17:             this->bindAndAddMethod(jsonrpc::Procedure(\"importECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"key\",jsonrpc::JSON_STRING,\"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::importECDSAKeyI);",
          "18:             this->bindAndAddMethod(jsonrpc::Procedure(\"generateECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::generateECDSAKeyI);",
          "19:             this->bindAndAddMethod(jsonrpc::Procedure(\"getPublicECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::getPublicECDSAKeyI);",
          "20:             this->bindAndAddMethod(jsonrpc::Procedure(\"ecdsaSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"base\",jsonrpc::JSON_INTEGER,\"keyName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::ecdsaSignMessageHashI);",
          "21:             this->bindAndAddMethod(jsonrpc::Procedure(\"generateDKGPoly\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::generateDKGPolyI);",
          "22:             this->bindAndAddMethod(jsonrpc::Procedure(\"getVerificationVector\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"polyName\",jsonrpc::JSON_STRING, \"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getVerificationVectorI);",
          "23:             this->bindAndAddMethod(jsonrpc::Procedure(\"getSecretShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"publicKeys\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getSecretShareI);",
          "24:         }",
          "",
          "[Added Lines]",
          "15:           this->bindAndAddMethod(jsonrpc::Procedure(\"importBLSKeyShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"index\",jsonrpc::JSON_INTEGER,\"keyShare\",jsonrpc::JSON_STRING,\"keyShareName\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::importBLSKeyShareI);",
          "16:           this->bindAndAddMethod(jsonrpc::Procedure(\"blsSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyShareName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"signerIndex\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::blsSignMessageHashI);",
          "18:           this->bindAndAddMethod(jsonrpc::Procedure(\"importECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"key\",jsonrpc::JSON_STRING,\"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::importECDSAKeyI);",
          "19:           this->bindAndAddMethod(jsonrpc::Procedure(\"generateECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::generateECDSAKeyI);",
          "20:           this->bindAndAddMethod(jsonrpc::Procedure(\"getPublicECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::getPublicECDSAKeyI);",
          "21:           this->bindAndAddMethod(jsonrpc::Procedure(\"ecdsaSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"base\",jsonrpc::JSON_INTEGER,\"keyName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::ecdsaSignMessageHashI);",
          "23:           this->bindAndAddMethod(jsonrpc::Procedure(\"generateDKGPoly\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::generateDKGPolyI);",
          "24:           this->bindAndAddMethod(jsonrpc::Procedure(\"getVerificationVector\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"polyName\",jsonrpc::JSON_STRING, \"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getVerificationVectorI);",
          "25:           this->bindAndAddMethod(jsonrpc::Procedure(\"getSecretShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"publicKeys\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getSecretShareI);",
          "26:           this->bindAndAddMethod(jsonrpc::Procedure(\"DKGVerification\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, \"n\",jsonrpc::JSON_INTEGER, \"index\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::DKGVerificationI);",
          "27:        }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:         {",
          "60:             response = this->getSecretShare(request[\"polyName\"].asString(), request[\"publicKeys\"].asString(), request[\"n\"].asInt(),request[\"t\"].asInt());",
          "61:         }",
          "62:         virtual Json::Value importBLSKeyShare(int index, const std::string& keyShare, const std::string& keyShareName, int n, int t) = 0;",
          "63:         virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int n, int signerIndex, int t) = 0;",
          "64:         virtual Json::Value importECDSAKey(const std::string& key, const std::string& keyName) = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:         inline virtual void DKGVerificationI(const Json::Value &request, Json::Value &response)",
          "66:         {",
          "67:             response = this->DKGVerification(request[\"polyName\"].asString(), request[\"EthKeyName\"].asString(), request[\"SecretShare\"].asString(), request[\"t\"].asInt(), request[\"n\"].asInt(), request[\"index\"].asInt());",
          "68:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:         virtual Json::Value generateDKGPoly(const std::string& polyName, int t) = 0;",
          "69:         virtual Json::Value getVerificationVector(const std::string& polyName, int n, int t) = 0;",
          "70:         virtual Json::Value getSecretShare(const std::string& polyName, const std::string& publicKeys, int n, int t) = 0;",
          "71: };",
          "73: #endif //JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         virtual Json::Value DKGVerification( const std::string& polyName, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index) = 0;",
          "",
          "---------------"
        ],
        "secure_enclave/.deps/DKGUtils.Po||secure_enclave/.deps/DKGUtils.Po": [
          "File: secure_enclave/.deps/DKGUtils.Po -> secure_enclave/.deps/DKGUtils.Po",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: DKGUtils.o: DKGUtils.cpp DKGUtils.h \\",
          "5:  ../sgx-sdk-build/sgxsdk/include/libcxx/__config \\",
          "6:  ../sgx-sdk-build/sgxsdk/include/libcxx/__sgx \\",
          "7:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/endian.h \\",
          "8:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/assert.h \\",
          "9:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/cdefs.h \\",
          "11:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/wchar.h \\",
          "12:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/_types.h \\",
          "13:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/stdint.h \\",
          "14:  ../sgx-sdk-build/sgxsdk/include/libcxx/__bit_reference \\",
          "15:  ../sgx-sdk-build/sgxsdk/include/libcxx/algorithm \\",
          "16:  ../sgx-sdk-build/sgxsdk/include/libcxx/initializer_list \\",
          "17:  ../sgx-sdk-build/sgxsdk/include/libcxx/cstddef \\",
          "19:  ../sgx-sdk-build/sgxsdk/include/libcxx/type_traits \\",
          "20:  ../sgx-sdk-build/sgxsdk/include/libcxx/cstring \\",
          "21:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/string.h \\",
          "",
          "[Removed Lines]",
          "2:  ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp \\",
          "3:  ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g1.hpp \\",
          "4:  ../sgx-sdk-build/sgxsdk/include/libcxx/vector \\",
          "10:  ../sgx-sdk-build/sgxsdk/include/libcxx/iosfwd \\",
          "18:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stddef.h \\",
          "",
          "[Added Lines]",
          "2:  /home/kladko/sgxwallet/tgmp-build/include/sgx_tgmp.h \\",
          "3:  ../sgx-sdk-build/sgxsdk/include/libcxx/iosfwd \\",
          "12:  ../sgx-sdk-build/sgxsdk/include/libcxx/cstdio \\",
          "13:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdio.h \\",
          "14:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdarg.h \\",
          "15:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stddef.h \\",
          "16:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/limits.h \\",
          "17:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/limits.h \\",
          "18:  ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp \\",
          "19:  ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g1.hpp \\",
          "20:  ../sgx-sdk-build/sgxsdk/include/libcxx/vector \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  ../sgx-sdk-build/sgxsdk/include/libcxx/cstdlib \\",
          "49:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdlib.h \\",
          "50:  ../sgx-sdk-build/sgxsdk/include/libcxx/climits \\",
          "53:  ../sgx-sdk-build/sgxsdk/include/libcxx/__split_buffer \\",
          "54:  ../trusted_libff/libff/common/utils.hpp \\",
          "55:  ../sgx-sdk-build/sgxsdk/include/libcxx/cassert \\",
          "56:  ../sgx-sdk-build/sgxsdk/include/libcxx/iostream \\",
          "57:  ../sgx-sdk-build/sgxsdk/include/libcxx/sstream \\",
          "58:  ../sgx-sdk-build/sgxsdk/include/libcxx/string \\",
          "62:  ../sgx-sdk-build/sgxsdk/include/libcxx/cwchar \\",
          "63:  ../sgx-sdk-build/sgxsdk/include/libcxx/cwctype \\",
          "64:  ../sgx-sdk-build/sgxsdk/include/libcxx/cctype \\",
          "",
          "[Removed Lines]",
          "51:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/limits.h \\",
          "52:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/limits.h \\",
          "59:  ../sgx-sdk-build/sgxsdk/include/libcxx/cstdio \\",
          "60:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdio.h \\",
          "61:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdarg.h \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:  ../trusted_libff/libff/algebra/fields/fp.hpp \\",
          "71:  ../trusted_libff/libff/algebra/exponentiation/exponentiation.hpp \\",
          "72:  ../trusted_libff/libff/algebra/fields/bigint.hpp \\",
          "74:  ../trusted_libff/libff/algebra/fields/bigint.tcc \\",
          "75:  ../sgx-sdk-build/sgxsdk/include/libcxx/random \\",
          "76:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/sgx_trts.h \\",
          "",
          "[Removed Lines]",
          "73:  /home/kladko/sgxwallet/tgmp-build/include/sgx_tgmp.h \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99: DKGUtils.h:",
          "107: ../sgx-sdk-build/sgxsdk/include/libcxx/__config:",
          "",
          "[Removed Lines]",
          "101: ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp:",
          "103: ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g1.hpp:",
          "105: ../sgx-sdk-build/sgxsdk/include/libcxx/vector:",
          "",
          "[Added Lines]",
          "101: /home/kladko/sgxwallet/tgmp-build/include/sgx_tgmp.h:",
          "103: ../sgx-sdk-build/sgxsdk/include/libcxx/iosfwd:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/cdefs.h:",
          "119: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/wchar.h:",
          "121: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/_types.h:",
          "123: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/stdint.h:",
          "125: ../sgx-sdk-build/sgxsdk/include/libcxx/__bit_reference:",
          "127: ../sgx-sdk-build/sgxsdk/include/libcxx/algorithm:",
          "",
          "[Removed Lines]",
          "117: ../sgx-sdk-build/sgxsdk/include/libcxx/iosfwd:",
          "",
          "[Added Lines]",
          "121: ../sgx-sdk-build/sgxsdk/include/libcxx/cstdio:",
          "123: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdio.h:",
          "125: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdarg.h:",
          "127: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stddef.h:",
          "129: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/limits.h:",
          "131: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/limits.h:",
          "133: ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp:",
          "135: ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g1.hpp:",
          "137: ../sgx-sdk-build/sgxsdk/include/libcxx/vector:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "131: ../sgx-sdk-build/sgxsdk/include/libcxx/cstddef:",
          "135: ../sgx-sdk-build/sgxsdk/include/libcxx/type_traits:",
          "137: ../sgx-sdk-build/sgxsdk/include/libcxx/cstring:",
          "",
          "[Removed Lines]",
          "133: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stddef.h:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "197: ../sgx-sdk-build/sgxsdk/include/libcxx/climits:",
          "203: ../sgx-sdk-build/sgxsdk/include/libcxx/__split_buffer:",
          "205: ../trusted_libff/libff/common/utils.hpp:",
          "",
          "[Removed Lines]",
          "199: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/limits.h:",
          "201: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/limits.h:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "213: ../sgx-sdk-build/sgxsdk/include/libcxx/string:",
          "221: ../sgx-sdk-build/sgxsdk/include/libcxx/cwchar:",
          "223: ../sgx-sdk-build/sgxsdk/include/libcxx/cwctype:",
          "",
          "[Removed Lines]",
          "215: ../sgx-sdk-build/sgxsdk/include/libcxx/cstdio:",
          "217: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdio.h:",
          "219: /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdarg.h:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "241: ../trusted_libff/libff/algebra/fields/bigint.hpp:",
          "245: ../trusted_libff/libff/algebra/fields/bigint.tcc:",
          "247: ../sgx-sdk-build/sgxsdk/include/libcxx/random:",
          "",
          "[Removed Lines]",
          "243: /home/kladko/sgxwallet/tgmp-build/include/sgx_tgmp.h:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "secure_enclave/DH_dkg.c||secure_enclave/DH_dkg.c": [
          "File: secure_enclave/DH_dkg.c -> secure_enclave/DH_dkg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     free(pb_keyB_y);",
          "54: }",
          "56: void xor_encrypt(char* key, char* message, char* cypher){",
          "58:    uint8_t cypher_bin[33];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: void session_key_recover(const char *skey_str, const char* sshare, char* common_key){",
          "57:     char* pb_keyB_x = (char*)malloc(65);",
          "58:     strncpy(pb_keyB_x, sshare + 64, 64);",
          "60:     char* pb_keyB_y = (char*)malloc(65);",
          "61:     strncpy(pb_keyB_y, sshare + 128, 64);",
          "63:     domain_parameters curve = domain_parameters_init();",
          "64:     domain_parameters_load_curve(curve, secp256k1);",
          "66:     mpz_t skey;",
          "67:     mpz_init(skey);",
          "68:     mpz_set_str(skey, skey_str, 16);",
          "70:     point pub_keyB = point_init();",
          "71:     point_set_hex(pub_keyB, pb_keyB_x, pb_keyB_y);",
          "73:     point session_key = point_init();",
          "74:     point_multiplication(session_key, skey, pub_keyB, curve);",
          "76:     char arr_x[mpz_sizeinbase (session_key->x, 16) + 2];",
          "77:     char* x = mpz_get_str(arr_x, 16, session_key->x);",
          "79:     int n_zeroes = 64 - strlen(arr_x);",
          "80:     for ( int i = 0; i < n_zeroes; i++){",
          "81:         common_key[i] = '0';",
          "82:     }",
          "83:     strncpy(common_key + n_zeroes, arr_x, strlen(arr_x));",
          "86:     mpz_clear(skey);",
          "87:     point_clear(pub_keyB);",
          "88:     domain_parameters_clear(curve);",
          "89:     free(pb_keyB_x);",
          "90:     free(pb_keyB_y);",
          "91: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:    free(key_bin);",
          "77: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: void xor_decrypt(char* key, char* cypher, char* message){",
          "118:     uint8_t msg_bin[33];",
          "121:     uint8_t* key_bin = (uint8_t*)malloc(33);",
          "122:     uint64_t key_length;",
          "123:     hex2carray(key, &key_length, key_bin);",
          "125:     uint64_t cypher_length;",
          "126:     uint8_t cypher_bin[33];//[ECDSA_BIN_LEN];",
          "127:     hex2carray(cypher, &cypher_length, cypher_bin);",
          "130:     for (int i = 0; i < 32; i++){",
          "131:         msg_bin[i] = cypher_bin[i] ^ key_bin[i];",
          "132:     }",
          "134:     carray2Hex(msg_bin, 32, message);",
          "136:     free(key_bin);",
          "137: }",
          "",
          "---------------"
        ],
        "secure_enclave/DH_dkg.h||secure_enclave/DH_dkg.h": [
          "File: secure_enclave/DH_dkg.h -> secure_enclave/DH_dkg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: void gen_session_key(char* skey, char* pub_keyB, char* common_key);",
          "11: void xor_encrypt(char* key, char* message, char* cypher);",
          "14: #endif //SGXD_DRIVE_KEY_DKG_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: void session_key_recover(const char *skey_str, const char* sshare, char* common_key);",
          "15: void xor_decrypt(char* key, char* cypher, char* message);",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:     result += \",\";",
          "152:   }",
          "153:   strncpy(public_shares, result.c_str(), result.length());",
          "155: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: }",
          "158: int Verification (char * decrypted_koefs, mpz_t decr_secret_share, int _t, int ind ){",
          "160:   libff::init_alt_bn128_params();",
          "161:   char symbol = ':';",
          "162:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, symbol);",
          "163:   std::vector<libff::alt_bn128_G2> pub_shares;",
          "164:   for (size_t i = 0; i < _t; ++i) {",
          "165:     libff::alt_bn128_G2 pub_share = poly.at(i) * libff::alt_bn128_G2::one();",
          "166:     pub_shares.push_back(pub_share);",
          "167:   }",
          "169:   libff::alt_bn128_G2 val = libff::alt_bn128_G2::zero();",
          "170:    for (int i = 0; i < _t; ++i) {",
          "171:     val = val + power(libff::alt_bn128_Fr(ind + 1), i) * pub_shares[i];",
          "172:   }",
          "174:   char arr[mpz_sizeinbase (decr_secret_share, 10) + 2];",
          "175:   char * tmp = mpz_get_str(arr, 10, decr_secret_share);",
          "176:   libff::alt_bn128_Fr sshare(tmp);",
          "180:   libff::alt_bn128_G2  val2 = sshare * libff::alt_bn128_G2::one();",
          "181:   strncpy(decrypted_koefs, ConvertToString(val2.X.c0).c_str(), 1024);",
          "183:   return (val == sshare * libff::alt_bn128_G2::one());",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.h||secure_enclave/DKGUtils.h": [
          "File: secure_enclave/DKGUtils.h -> secure_enclave/DKGUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #define EXTERNC",
          "12: #endif",
          "14: EXTERNC void gen_dkg_poly( char* secret, unsigned _t);",
          "16: EXTERNC void calc_secret_shares(const char* decrypted_koefs, char * secret_shares,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include <sgx_tgmp.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: EXTERNC void calc_public_shares(const char* decrypted_koefs, char * public_shares,",
          "23:                         unsigned _t);",
          "25: #endif //SGXD_DKGUTILS_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: EXTERNC int Verification (char * decrypted_koefs, mpz_t decr_secret_share, int _t, int ind );",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "612:   free(cypher);",
          "613: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615: void dkg_verification(int *err_status, char* err_string, const uint8_t * encrypted_dkg_secret, const char* s_share,",
          "616:                       uint8_t* encrypted_key, uint64_t key_len, unsigned _t, int _ind, int * result){",
          "618:   char* decrypted_dkg_secret = (char*)malloc(DKG_BUFER_LENGTH);",
          "620:   uint32_t decr_len ;",
          "621:   decrypt_dkg_secret(err_status, err_string, encrypted_dkg_secret, (uint8_t*)decrypted_dkg_secret, &decr_len);",
          "622:   if (*err_status != 0) {",
          "623:     snprintf(err_string, BUF_LEN,\"sgx_unseal_poly failed with status %d\", *err_status);",
          "624:     return;",
          "625:   }",
          "628:   char skey[ECDSA_SKEY_LEN];",
          "629:   sgx_status_t status = sgx_unseal_data(",
          "630:       (const sgx_sealed_data_t *)encrypted_key, NULL, 0, (uint8_t*)skey, &key_len);",
          "631:   if (status != SGX_SUCCESS) {",
          "632:     snprintf(err_string, BUF_LEN,\"sgx_unseal_key failed with status %d\", status);",
          "633:     return;",
          "634:   }",
          "636:   char encr_sshare[65];",
          "637:   strncpy(encr_sshare, s_share, 64);",
          "638:   encr_sshare[64] = 0;",
          "640:   char common_key[65];",
          "641:   char decr_sshare[65];",
          "642:   session_key_recover(skey, s_share, common_key);",
          "643:   common_key[64] = 0;",
          "645:   xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "651:   mpz_t s;",
          "652:   mpz_init(s);",
          "653:   mpz_set_str(s, decr_sshare, 16);",
          "657:   snprintf(err_string, BUF_LEN,\"val is %s\", decrypted_dkg_secret);",
          "659:   free(decrypted_dkg_secret);",
          "660: }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:          public void get_public_shares (",
          "87:                                 [user_check] int *err_status,",
          "88:                                 [out, count = 1024] char* err_string,",
          "90:                                 uint32_t enc_len,",
          "91:                                 [out, count = 10000] char* public_shares,",
          "92:                                 unsigned _t,",
          "",
          "[Removed Lines]",
          "89:                                 [in, count = 3050] uint8_t* decrypted_dkg_secret,",
          "",
          "[Added Lines]",
          "89:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:                                 uint8_t _t,",
          "118:                                 uint8_t _n,",
          "119:                                 uint8_t ind);",
          "120:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:          public void dkg_verification(",
          "122:                                 [user_check] int *err_status,",
          "123:                                 [out, count = 1024] char* err_string,",
          "124:                                 [in, count = 3050] const uint8_t* encrypted_dkg_secret,",
          "125:                                 [in, count = 129] const char* s_share,",
          "126:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "127:                                 uint64_t key_len,",
          "128:                                 unsigned _t,",
          "129:                                 int _ind,",
          "130:                                 [user_check] int* result);",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:             else",
          "95:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "96:         }",
          "98:         {",
          "99:             Json::Value p;",
          "101:             p[\"n\"] = n;",
          "112:             p[\"polyName\"] = polyName;",
          "115:             p[\"t\"] = t;",
          "117:             if (result.isObject())",
          "118:                 return result;",
          "119:             else",
          "",
          "[Removed Lines]",
          "97:         Json::Value getVerificationVector(const std::string& polyName, int n, int t) throw (jsonrpc::JsonRpcException)",
          "100:             p[\"polyName\"] = polyName;",
          "102:             p[\"t\"] = t;",
          "103:             Json::Value result = this->CallMethod(\"getVerificationVector\",p);",
          "104:             if (result.isObject())",
          "105:                 return result;",
          "106:             else",
          "107:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "108:         }",
          "109:         Json::Value getSecretShare(const std::string& polyName, const std::string& publicKeys, int n, int t) throw (jsonrpc::JsonRpcException)",
          "110:         {",
          "111:             Json::Value p;",
          "113:             p[\"publicKeys\"] = publicKeys;",
          "114:             p[\"n\"] = n;",
          "116:             Json::Value result = this->CallMethod(\"getSecretShare\",p);",
          "",
          "[Added Lines]",
          "97:     Json::Value getVerificationVector(const std::string& polyName, int n, int t) throw (jsonrpc::JsonRpcException)",
          "98:     {",
          "99:         Json::Value p;",
          "100:         p[\"polyName\"] = polyName;",
          "101:         p[\"n\"] = n;",
          "102:         p[\"t\"] = t;",
          "103:         Json::Value result = this->CallMethod(\"getVerificationVector\",p);",
          "104:         if (result.isObject())",
          "105:             return result;",
          "106:         else",
          "107:             throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "108:     }",
          "109:     Json::Value getSecretShare(const std::string& polyName, const std::string& publicKeys, int n, int t) throw (jsonrpc::JsonRpcException)",
          "110:     {",
          "111:         Json::Value p;",
          "112:         p[\"polyName\"] = polyName;",
          "113:         p[\"publicKeys\"] = publicKeys;",
          "114:         p[\"n\"] = n;",
          "115:         p[\"t\"] = t;",
          "116:         Json::Value result = this->CallMethod(\"getSecretShare\",p);",
          "117:         if (result.isObject())",
          "118:             return result;",
          "119:         else",
          "120:             throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "121:     }",
          "122:         Json::Value DKGVerification(const std::string& polyName, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index) throw (jsonrpc::JsonRpcException)",
          "125:             p[\"EthKeyName\"] = EthKeyName;",
          "126:             p[\"SecretShare\"] = SecretShare;",
          "127:             p[\"index\"] = index;",
          "131:             Json::Value result = this->CallMethod(\"DKGVerification\",p);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:   std::cerr << \"secret share is \" << result << std::endl;",
          "532: }",
          "535: TEST_CASE(\"ECDSA keygen and signature test\", \"[ecdsa_test]\") {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534: TEST_CASE( \"DKG verification test\", \"[dkg-verify]\" ) {",
          "537:   init_enclave();",
          "538:   uint8_t *encrypted_key = (uint8_t *) calloc(BUF_LEN, 1);",
          "540:   char *errMsg = (char *)calloc(1024, 1);",
          "541:   char *result = (char *)calloc(130, 1);",
          "543:   int err_status = 0;",
          "544:   uint32_t enc_len = 0;",
          "547:   uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "550:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, 2);",
          "551:   REQUIRE(status == SGX_SUCCESS);",
          "552:   std::cerr << \" poly generated\" << std::endl;",
          "554:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg, encrypted_dkg_secret);",
          "555:   REQUIRE(status == SGX_SUCCESS);",
          "556:   std::cerr << \" poly set\" << std::endl;",
          "558:   uint8_t *encr_pr_DHkey = (uint8_t *)calloc(1024, 1);",
          "559:   char *pub_key_x = (char *)calloc(1024, 1);",
          "560:   char *pub_key_y = (char *)calloc(1024, 1);",
          "562:   char *pub_keyB = \"c0152c48bf640449236036075d65898fded1e242c00acb45519ad5f788ea7cbf9a5df1559e7fc87932eee5478b1b9023de19df654395574a690843988c3ff475\";",
          "564:   status = get_encr_sshare(eid, &err_status, errMsg, encr_pr_DHkey, &enc_len, result,",
          "565:                            pub_keyB, 2, 2, 1);",
          "566:   REQUIRE(status == SGX_SUCCESS);",
          "567:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "569:   std::cerr << \"secret share is \" << result << std::endl;",
          "570: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688:     } catch (JsonRpcException &e) {",
          "689:         cerr << e.what() << endl;",
          "690:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "729:       std::string share_big = \"03f749e2fcc28021895d757ec16d1636784446f5effcd3096b045136d8ab02657b32adc577f421330b81f5b7063df3b08a0621a897df2584b9046ca416e50ecc27e8c3277e981f7e650f8640289be128eecf0105f89a20e5ffb164744c45cf191d627ce9ab6c44e2ef96f230f2a4de742ea43b6f74b56849138026610b2d965605ececba527048a0f29f46334b1cec1d23df036248b24eccca99057d24764acee66c1a3f2f44771d0d237bf9d18c4177277e3ce3dc4e83686a2647fce1565ee0\";",
          "730:       std::string share = share_big.substr(0, 192);",
          "732:       cout << c.DKGVerification(\"p2\", \"test_key1\", share, 2, 2, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97dc071c60458b98e4f5c0e6dfd72b1d66d0af40",
      "candidate_info": {
        "commit_hash": "97dc071c60458b98e4f5c0e6dfd72b1d66d0af40",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/97dc071c60458b98e4f5c0e6dfd72b1d66d0af40",
        "files": [
          "ECDSACrypto.cpp",
          "ECDSACrypto.h",
          "SGXWalletServer.cpp",
          "spec.json",
          "testw.cpp"
        ],
        "message": "Add signing to api",
        "before_after_code_files": [
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "ECDSACrypto.h||ECDSACrypto.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   char *pub_key_y = (char *)calloc(1024, 1);",
          "16:   uint32_t enc_len = 0;",
          "19:   std::vector<std::string> keys(2);",
          "21:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "",
          "[Removed Lines]",
          "18:   status = generate_ecdsa_key(eid, &err_status, errMsg, (uint8_t*)encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "",
          "[Added Lines]",
          "18:   status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:   return keys;",
          "27: }",
          "30:   std::vector<std::string> signature_vect(3);",
          "32:   char *errMsg = (char *)calloc(1024, 1);",
          "",
          "[Removed Lines]",
          "29: std::vector<std::string> ecdsa_sign_hash(const char* encryptedKey, const char* hashHex){",
          "",
          "[Added Lines]",
          "29: std::vector<std::string> ecdsa_sign_hash(const char* encryptedKeyHex, const char* hashHex){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:   char* signature_r = (char*)malloc(1024);",
          "35:   char* signature_s = (char*)malloc(1024);",
          "36:   char* signature_v = (char*)calloc(4,1);",
          "41:   signature_vect.at(0) = signature_v;",
          "42:   signature_vect.at(1) = \"0x\" + std::string(signature_r);",
          "",
          "[Removed Lines]",
          "37:   uint32_t dec_len = 0;",
          "39:   status = ecdsa_sign1(eid, &err_status, errMsg, (uint8_t*)encryptedKey, dec_len, (unsigned char*)hashHex, signature_r, signature_s, signature_v );",
          "",
          "[Added Lines]",
          "37:   uint64_t dec_len = 0;",
          "39:   uint8_t encr_key[BUF_LEN];",
          "40:   hex2carray(encryptedKeyHex, &dec_len, encr_key);",
          "42:   status = ecdsa_sign1(eid, &err_status, errMsg, encr_key, dec_len, (unsigned char*)hashHex, signature_r, signature_s, signature_v );",
          "",
          "---------------"
        ],
        "ECDSACrypto.h||ECDSACrypto.h": [
          "File: ECDSACrypto.h -> ECDSACrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: std::vector<std::string> gen_ecdsa_key();",
          "23: #endif //SGXD_ECDSACRYPTO_H",
          "",
          "[Removed Lines]",
          "21: std::vector<std::string> ecdsa_sign_hash(const char* encryptedKey, const char* hashHex);",
          "",
          "[Added Lines]",
          "21: std::vector<std::string> ecdsa_sign_hash(const char* encryptedKeyHex, const char* hashHex);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:     result[\"signature_r\"] = \"\";",
          "187:     result[\"signature_s\"] = \"\";",
          "192:     try {",
          "193:        std::shared_ptr<std::string> key_ptr = readECDSAKey(_keyName);",
          "",
          "[Removed Lines]",
          "189:     std::vector<std::string> sign_vect;",
          "",
          "[Added Lines]",
          "189:     std::vector<std::string> sign_vect(3);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263: }",
          "265: shared_ptr <std::string> readECDSAKey(const string &_keyName) {",
          "268:   if (keyStr == nullptr) {",
          "269:     throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Key share with this name does not exists\");",
          "",
          "[Removed Lines]",
          "266:   auto keyStr = levelDb->readString(\"ECDSAKEY::\" + _keyName);",
          "",
          "[Added Lines]",
          "265:   auto keyStr = levelDb->readString(\"ECDSAKEY:\" + _keyName);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:     cerr << \"Client inited\" << endl;",
          "429:     try {",
          "431:     } catch (JsonRpcException &e) {",
          "432:         cerr << e.what() << endl;",
          "433:     }",
          "440: }",
          "",
          "[Removed Lines]",
          "430:         cout << c.generateECDSAKey(\"test_key1\") << endl;",
          "437:     if (key_ptr == nullptr) cerr<< \" key is null\" << endl;",
          "",
          "[Added Lines]",
          "431:         cout << c.ecdsaSignMessageHash(\"test_key\",\"38433e5ce087dcc1be82fcc834eae83c256b3db87d34f84440d0b708daa0c6f7\" );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7906ecc1d2f05865d5305ba469419d1d2625d37f",
      "candidate_info": {
        "commit_hash": "7906ecc1d2f05865d5305ba469419d1d2625d37f",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/7906ecc1d2f05865d5305ba469419d1d2625d37f",
        "files": [
          "secure_enclave/AESUtils.c",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3228",
        "before_after_code_files": [
          "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
          "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
          "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
          "",
          "[Removed Lines]",
          "658:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
          "",
          "[Added Lines]",
          "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "725a97229272442cd3022061349a368624899c05",
      "candidate_info": {
        "commit_hash": "725a97229272442cd3022061349a368624899c05",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/725a97229272442cd3022061349a368624899c05",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         goto clean;}",
          "88: snprintf(errString, BUF_LEN, __ERRMESSAGE__); \\",
          "89: LOG_ERROR(errString); \\",
          "91: goto clean; \\",
          "97: LOG_ERROR(errString); \\",
          "99: goto clean; \\",
          "103: void *(*gmp_realloc_func)(void *, size_t, size_t);",
          "",
          "[Removed Lines]",
          "87: #define CHECK_STATUS(__STATUS__, __ERRMESSAGE__) if (__STATUS__ != SGX_SUCCESS) { \\",
          "92: }",
          "95: #define CHECK_STATUS2(__STATUS__, __ERRMESSAGE__, __PARAM__) if (__STATUS__ != SGX_SUCCESS) { \\",
          "96: snprintf(errString, BUF_LEN, __ERRMESSAGE__, __PARAM__); \\",
          "100: }",
          "",
          "[Added Lines]",
          "84: #define CHECK_STATUS(__ERRMESSAGE__) if (status != SGX_SUCCESS) { \\",
          "89: };",
          "92: #define CHECK_STATUS2(__ERRMESSAGE__) if (status != SGX_SUCCESS) { \\",
          "93: snprintf(errString, BUF_LEN, __ERRMESSAGE__, status); \\",
          "97: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200: void trustedGenerateSEK(int *errStatus, char *errString,",
          "201:                         uint8_t *encrypted_SEK, uint32_t *enc_len, char *SEK_hex) {",
          "203:     INIT_ERROR_STATE",
          "205:     CHECK_STATE(encrypted_SEK);",
          "206:     CHECK_STATE(SEK_hex);",
          "212:     SAFE_CHAR_BUF(SEK_raw, SGX_AESGCM_KEY_SIZE);;",
          "",
          "[Removed Lines]",
          "202:     LOG_DEBUG(__FUNCTION__);",
          "208:     CHECK_STATE(encrypted_SEK);",
          "209:     CHECK_STATE(SEK_hex);",
          "",
          "[Added Lines]",
          "196:     LOG_INFO(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:     sgx_status_t status = sgx_seal_data(0, NULL, hex_aes_key_length + 1, (uint8_t *) SEK_hex, sealedLen,",
          "224:                                         (sgx_sealed_data_t *) encrypted_SEK);",
          "",
          "[Removed Lines]",
          "225:     CHECK_STATUS(status, \"seal SEK failed\");",
          "",
          "[Added Lines]",
          "216:     CHECK_STATUS(\"seal SEK failed\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "232: }",
          "234: void trustedSetSEK(int *errStatus, char *errString, uint8_t *encrypted_SEK, uint64_t encr_len) {",
          "236:     INIT_ERROR_STATE",
          "237:     CHECK_STATE(encrypted_SEK);",
          "238:     SAFE_CHAR_BUF(aes_key_hex, BUF_LEN);",
          "",
          "[Removed Lines]",
          "235:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Added Lines]",
          "226:     LOG_INFO(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "240:     sgx_status_t status = sgx_unseal_data(",
          "241:             (const sgx_sealed_data_t *) encrypted_SEK, NULL, 0, aes_key_hex, &encr_len);",
          "245:     uint64_t len;",
          "247:     hex2carray(aes_key_hex, &len, (uint8_t *) AES_key);",
          "249:     SET_SUCCESS",
          "251:     clean:",
          "252:     ;",
          "253: }",
          "255: void trustedSetSEK_backup(int *errStatus, char *errString,",
          "256:                           uint8_t *encrypted_SEK, uint32_t *enc_len, const char *SEK_hex) {",
          "258:     INIT_ERROR_STATE",
          "260:     CHECK_STATE(encrypted_SEK);",
          "",
          "[Removed Lines]",
          "243:     CHECK_STATUS2(status,  \"sgx unseal SEK failed with status %d\", status );",
          "257:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Added Lines]",
          "234:     CHECK_STATUS2(\"sgx unseal SEK failed with status %d\");",
          "247:     LOG_INFO(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "268:     sgx_status_t status = sgx_seal_data(0, NULL, strlen(SEK_hex) + 1, (uint8_t *) SEK_hex, sealedLen,",
          "269:                                         (sgx_sealed_data_t *) encrypted_SEK);",
          "279:     SET_SUCCESS",
          "281:     clean:",
          "283:     ;",
          "285: }",
          "287: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
          "288:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "290:     INIT_ERROR_STATE",
          "292:     CHECK_STATE(encryptedPrivateKey);",
          "",
          "[Removed Lines]",
          "270:     if (status != SGX_SUCCESS) {",
          "271:         snprintf(errString, BUF_LEN, \"seal SEK failed with status %d\", status);",
          "273:         LOG_ERROR(errString);",
          "274:         goto clean;",
          "275:     }",
          "289:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Added Lines]",
          "261:     CHECK_STATUS2(\"seal SEK failed with status %d\")",
          "272:     LOG_INFO(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "338:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
          "339:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", strlen(skey_str));",
          "361:     SET_SUCCESS",
          "363:     clean:",
          "364:     mpz_clear(seed);",
          "365:     mpz_clear(skey);",
          "",
          "[Removed Lines]",
          "341:     int stat = AES_encrypt(skey_str, encryptedPrivateKey, BUF_LEN);",
          "343:     if (stat != 0) {",
          "344:         snprintf(errString, BUF_LEN, \"ecdsa private key encryption failed\");",
          "346:         LOG_ERROR(errString);",
          "347:         goto clean;",
          "348:     }",
          "352:     stat = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
          "354:     if (stat != 0) {",
          "355:         snprintf(errString, BUF_LEN, \"ecdsa private key decr failed with status %d\", stat);",
          "357:         LOG_ERROR(errString);",
          "358:         goto clean;",
          "359:     }",
          "",
          "[Added Lines]",
          "323:     int status = AES_encrypt(skey_str, encryptedPrivateKey, BUF_LEN);",
          "324:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
          "328:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
          "330:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "378:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "381:     mpz_t privateKeyMpz;",
          "382:     mpz_init(privateKeyMpz);",
          "383:     point Pkey = point_init();",
          "386:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "396:     strncpy(errString, skey, 1024);",
          "406:     signature_extract_public_key(Pkey, privateKeyMpz, curve);",
          "",
          "[Removed Lines]",
          "387:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "389:     if (status != 0) {",
          "390:         snprintf(errString, BUF_LEN, \"AES_decrypt failed with status %d\", status);",
          "392:         LOG_ERROR(errString);",
          "393:         goto clean;",
          "394:     }",
          "398:     if (mpz_set_str(privateKeyMpz, skey, ECDSA_SKEY_BASE) == -1) {",
          "399:         snprintf(errString, BUF_LEN, \"wrong string to init private key\");",
          "400:         LOG_ERROR(errString);",
          "402:         goto clean;",
          "403:     }",
          "",
          "[Added Lines]",
          "355:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
          "357:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "360:     status = mpz_set_str(privateKeyMpz, skey, ECDSA_SKEY_BASE);",
          "362:     CHECK_STATUS(\"mpz_set_str failed for private key\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "467:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "476:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "",
          "[Removed Lines]",
          "469:     if (status != 0) {",
          "471:         snprintf(errString, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "472:         LOG_ERROR(status);",
          "473:         goto clean;",
          "474:     }",
          "",
          "[Added Lines]",
          "425:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "528:     clean:",
          "530:     mpz_clear(privateKeyMpz);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "557:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
          "568:     uint64_t decryptedKeyLen = strnlen(decryptedKey, MAX_KEY_LENGTH);",
          "",
          "[Removed Lines]",
          "547:     int stat = AES_encrypt(key, encryptedPrivateKey, BUF_LEN);",
          "548:     if (stat != 0) {",
          "550:         snprintf(errString, BUF_LEN, \"AES encrypt failed with status %d\", stat);",
          "551:         LOG_ERROR(errString);",
          "552:         goto clean;",
          "553:     }",
          "559:     stat = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
          "561:     if (stat != 0) {",
          "563:         snprintf(errString, BUF_LEN, \"trustedDecryptKey failed with status %d\", stat);",
          "564:         LOG_ERROR(errString);",
          "565:         goto clean;",
          "566:     }",
          "",
          "[Added Lines]",
          "497:     int status = AES_encrypt(key, encryptedPrivateKey, BUF_LEN);",
          "499:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
          "505:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
          "507:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "581:         goto clean;",
          "582:     }",
          "586:     clean:",
          "587:     ;",
          "588: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "619:     }",
          "621:     SET_SUCCESS",
          "623:     clean:",
          "624:     ;",
          "626: }",
          "628: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "629:                               uint32_t enc_len, char *_hashX,",
          "630:                               char *_hashY, char *signature) {",
          "631:     LOG_DEBUG(__FUNCTION__);",
          "636:     CHECK_STATE(encryptedPrivateKey);",
          "637:     CHECK_STATE(_hashX);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "643:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, BUF_LEN);",
          "652:     enclave_sign(key, _hashX, _hashY, sig);",
          "",
          "[Removed Lines]",
          "645:     if (status != 0) {",
          "647:         strncpy(errString, \"AES decrypt failed\", BUF_LEN);",
          "648:         LOG_ERROR(errString);",
          "649:         goto clean;",
          "650:     }",
          "",
          "[Added Lines]",
          "580:     CHECK_STATUS(\"AES decrypt failed\")",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "661:     }",
          "663:     SET_SUCCESS",
          "665:     clean:",
          "666:     ;",
          "667: }",
          "669: void",
          "670: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "673:     INIT_ERROR_STATE",
          "675:     CHECK_STATE(encrypted_dkg_secret);",
          "677:     SAFE_CHAR_BUF(dkg_secret, DKG_BUFER_LENGTH);",
          "",
          "[Removed Lines]",
          "671:     LOG_DEBUG(__FUNCTION__);",
          "680:     if (gen_dkg_poly(dkg_secret, _t) != 0) {",
          "682:         strncpy(errString, \"gen_dkg_poly failed\", BUF_LEN);",
          "683:         LOG_ERROR(errString);",
          "684:         goto clean;",
          "685:     }",
          "687:     int status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
          "689:     if (status != SGX_SUCCESS) {",
          "690:         snprintf(errString, BUF_LEN, \"SGX AES encrypt DKG poly failed\");",
          "691:         LOG_ERROR(errString);",
          "693:         goto clean;",
          "694:     }",
          "",
          "[Added Lines]",
          "600:     LOG_INFO(__FUNCTION__);",
          "607:     int status = gen_dkg_poly(dkg_secret, _t);",
          "609:     CHECK_STATUS(\"gen_dkg_poly failed\")",
          "611:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
          "613:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "700:     status = AES_decrypt(encrypted_dkg_secret, *enc_len, decr_dkg_secret,",
          "701:                          DKG_BUFER_LENGTH);",
          "709:     if (strcmp(dkg_secret, decr_dkg_secret) != 0) {",
          "710:         snprintf(errString, BUF_LEN,",
          "",
          "[Removed Lines]",
          "702:     if (status != SGX_SUCCESS) {",
          "703:         snprintf(errString, BUF_LEN, \"aes decrypt dkg poly failed\");",
          "704:         LOG_ERROR(errString);",
          "706:         goto clean;",
          "707:     }",
          "",
          "[Added Lines]",
          "622:     CHECK_STATUS(\"aes decrypt dkg poly failed\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "724: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
          "725:                            uint32_t enc_len,",
          "726:                            uint8_t *decrypted_dkg_secret) {",
          "728:     INIT_ERROR_STATE",
          "732:     CHECK_STATE(encrypted_dkg_secret);",
          "733:     CHECK_STATE(decrypted_dkg_secret);",
          "735:     int status = AES_decrypt(encrypted_dkg_secret, enc_len, (char *) decrypted_dkg_secret,",
          "736:                              3072);",
          "745:     SET_SUCCESS",
          "",
          "[Removed Lines]",
          "730:     LOG_DEBUG(__FUNCTION__);",
          "738:     if (status != SGX_SUCCESS) {",
          "739:         snprintf(errString, BUF_LEN, \"aes decrypt data - encrypted_dkg_secret failed with status %d\", status);",
          "740:         LOG_ERROR(errString);",
          "742:         goto clean;",
          "743:     }",
          "",
          "[Added Lines]",
          "641:     LOG_INFO(__FUNCTION__);",
          "650:     CHECK_STATUS2(\"aes decrypt data - encrypted_dkg_secret failed with status %d\")",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "752: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
          "755:     INIT_ERROR_STATE",
          "757:     CHECK_STATE(encrypted_poly);",
          "759:     memset(getThreadLocalDecryptedDkgPoly(), 0, DKG_BUFER_LENGTH);",
          "760:     int status = AES_decrypt(encrypted_poly, enc_len, (char *) getThreadLocalDecryptedDkgPoly(),",
          "761:                              DKG_BUFER_LENGTH);",
          "772:     clean:",
          "773:     ;",
          "774: }",
          "",
          "[Removed Lines]",
          "753:     LOG_DEBUG(__FUNCTION__);",
          "763:     if (status != SGX_SUCCESS) {",
          "765:         snprintf(errString, BUF_LEN, \"sgx_unseal_data - encrypted_poly failed with status %d\", status);",
          "766:         LOG_ERROR(errString);",
          "767:         goto clean;",
          "768:     }",
          "",
          "[Added Lines]",
          "660:     LOG_INFO(__FUNCTION__);",
          "670:     CHECK_STATUS2(\"sgx_unseal_data - encrypted_poly failed with status %d\")",
          "672:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "778:                                        uint8_t ind) {",
          "780:     LOG_DEBUG(__FUNCTION__);",
          "782:     uint32_t enc_len;",
          "783:     int status;",
          "787:     CHECK_STATE(encrypted_skey);",
          "788:     CHECK_STATE(result_str);",
          "789:     CHECK_STATE(s_shareG2);",
          "",
          "[Removed Lines]",
          "785:     INIT_ERROR_STATE",
          "",
          "[Added Lines]",
          "682:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "798:     trustedGenerateEcdsaKeyAES(&status, errString, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "807:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
          "809:     skey[ECDSA_SKEY_LEN - 1] = 0;",
          "",
          "[Removed Lines]",
          "800:     if (status != 0) {",
          "801:         snprintf(errString, BUF_LEN, \"trustedGenerateEcdsaKeyAES failed\");",
          "803:         LOG_ERROR(errString);",
          "804:         goto clean;",
          "805:     }",
          "811:     if (status != SGX_SUCCESS) {",
          "812:         snprintf(errString, BUF_LEN, \"AES_decrypt failed (in trustedGetEncryptedSecretShareAES) with status %d\",",
          "813:                  status);",
          "814:         LOG_ERROR(errString);",
          "816:         goto clean;",
          "817:     }",
          "",
          "[Added Lines]",
          "700:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
          "706:     CHECK_STATUS2(\"AES_decrypt failed (in trustedGetEncryptedSecretShareAES) with status %d\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "824:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
          "840:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
          "841:     xor_encrypt(common_key, s_share, cypher);",
          "",
          "[Removed Lines]",
          "826:     if (calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind) != 0) {",
          "828:         snprintf(errString, BUF_LEN, \"calc secret share failed\");",
          "829:         LOG_ERROR(errString);",
          "830:         goto clean;",
          "831:     }",
          "833:     if (calc_secret_shareG2(s_share, s_shareG2) != 0) {",
          "835:         snprintf(errString, BUF_LEN, \"invalid decr secret share\");",
          "836:         LOG_ERROR(errString);",
          "837:         goto clean;",
          "838:     }",
          "",
          "[Added Lines]",
          "715:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
          "716:     CHECK_STATUS(\"calc secret share failed\")",
          "719:     status = calc_secret_shareG2(s_share, s_shareG2);",
          "720:     CHECK_STATUS(\"invalid decr secret share\");",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "853: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "854:                                char *public_shares,",
          "855:                                unsigned _t, unsigned _n) {",
          "858:     INIT_ERROR_STATE",
          "",
          "[Removed Lines]",
          "856:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Added Lines]",
          "738:     LOG_INFO(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "866:     int status = AES_decrypt(encrypted_dkg_secret, enc_len, decrypted_dkg_secret,",
          "867:                              DKG_MAX_SEALED_LEN);",
          "883:     SET_SUCCESS",
          "",
          "[Removed Lines]",
          "869:     if (status != SGX_SUCCESS) {",
          "870:         snprintf(errString, BUF_LEN, \"aes decrypt data - encrypted_dkg_secret failed with status %d\", status);",
          "872:         LOG_ERROR(errString);",
          "873:         goto clean;",
          "874:     }",
          "876:     if (calc_public_shares(decrypted_dkg_secret, public_shares, _t) != 0) {",
          "878:         snprintf(errString, BUF_LEN, \"t does not match polynomial in db\");",
          "879:         LOG_ERROR(errString);",
          "880:         goto clean;",
          "881:     }",
          "",
          "[Added Lines]",
          "751:     CHECK_STATUS2(\"aes decrypt data - encrypted_dkg_secret failed with status %d\");",
          "753:     status = calc_public_shares(decrypted_dkg_secret, public_shares, _t) != 0;",
          "754:     CHECK_STATUS(\"t does not match polynomial in db\");",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "889: void trustedDkgVerifyAES(int *errStatus, char *errString, const char *public_shares, const char *s_share,",
          "890:                          uint8_t *encryptedPrivateKey, uint64_t enc_len, unsigned _t, int _ind, int *result) {",
          "893:     INIT_ERROR_STATE",
          "",
          "[Removed Lines]",
          "891:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Added Lines]",
          "764:     LOG_INFO(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "904:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "913:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
          "",
          "[Removed Lines]",
          "906:     if (status != SGX_SUCCESS) {",
          "907:         snprintf(errString, BUF_LEN, \"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\", status);",
          "909:         LOG_ERROR(errString);",
          "910:         goto clean;",
          "911:     }",
          "",
          "[Added Lines]",
          "779:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "923:     xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "934:     SET_SUCCESS",
          "936:     clean:",
          "937:     mpz_clear(s);",
          "938: }",
          "940: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
          "941:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
          "942:                             uint32_t *enc_bls_key_len) {",
          "948:     CHECK_STATE(s_shares);",
          "949:     CHECK_STATE(encryptedPrivateKey);",
          "",
          "[Removed Lines]",
          "925:     if (mpz_set_str(s, decr_sshare, 16) == -1) {",
          "927:         snprintf(errString, BUF_LEN, \"invalid decr secret share\");",
          "928:         LOG_ERROR(errString);",
          "929:         goto clean;",
          "930:     }",
          "943:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Added Lines]",
          "793:     status  = mpz_set_str(s, decr_sshare, 16);",
          "794:     CHECK_STATUS(\"invalid decr secret share\");",
          "808:     LOG_INFO(__FUNCTION__);",
          "810:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "966:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
          "974:     skey[ECDSA_SKEY_LEN - 1] = 0;",
          "",
          "[Removed Lines]",
          "967:     if (status != SGX_SUCCESS) {",
          "969:         snprintf(errString, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "970:         LOG_ERROR(errString);",
          "971:         goto clean;",
          "972:     }",
          "",
          "[Added Lines]",
          "831:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1025:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
          "",
          "[Removed Lines]",
          "1027:     if (status != SGX_SUCCESS) {",
          "1029:         snprintf(errString, BUF_LEN, \"aes encrypt bls private key failed with status %d \", status);",
          "1030:         LOG_ERROR(errString);",
          "1031:         goto clean;",
          "1032:     }",
          "",
          "[Added Lines]",
          "886:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1054:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
          "1056:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
          "1064:     skey_hex[ECDSA_SKEY_LEN - 1] = 0;",
          "1073:     SET_SUCCESS",
          "1074:     clean:",
          "",
          "[Removed Lines]",
          "1057:     if (status != SGX_SUCCESS) {",
          "1059:         snprintf(errString, BUF_LEN, \"aes_decrypt failed with status %d\", status);",
          "1060:         LOG_ERROR(errString);",
          "1061:         goto clean;",
          "1062:     }",
          "1066:     if (calc_bls_public_key(skey_hex, bls_pub_key) != 0) {",
          "1068:         snprintf(errString, BUF_LEN, \"could not calculate bls public key\");",
          "1069:         LOG_ERROR(errString);",
          "1070:         goto clean;",
          "1071:     }",
          "",
          "[Added Lines]",
          "912:     CHECK_STATUS2(\"AES decrypt failed %d\");",
          "916:     status = calc_bls_public_key(skey_hex, bls_pub_key);",
          "918:     CHECK_STATUS(\"could not calculate bls public key\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a1e503207b6838b20b76fdb7da3e17c5e5e7c10",
      "candidate_info": {
        "commit_hash": "8a1e503207b6838b20b76fdb7da3e17c5e5e7c10",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/8a1e503207b6838b20b76fdb7da3e17c5e5e7c10",
        "files": [
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "ECDSACrypto.cpp",
          "LevelDB.cpp",
          "LevelDB.h",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "abstractstubserver.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "spec.json",
          "stubclient.cpp",
          "stubclient.h",
          "testw.cpp"
        ],
        "message": "SKALE-1779-Change-generateECDSAKey-in-SGX",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "LevelDB.cpp||LevelDB.cpp",
          "LevelDB.h||LevelDB.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "abstractstubserver.h||abstractstubserver.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "stubclient.cpp||stubclient.cpp",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:     get_bls_pub_key(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "232:     std::string result = pub_key;",
          "235: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232: }",
          "234: std::pair<std::string, std::string> response_to_complaint(const std::string& polyName, const char* encryptedPolyHex, int n, int t, int ind){",
          "236:   char* errMsg1 = (char*) calloc(1024,1);",
          "237:   int err_status = 0;",
          "239:   uint64_t enc_len = 0;",
          "241:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "242:   hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100);",
          "244:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg1, encr_dkg_poly);",
          "246:   std::string DH_key_name = polyName + \"_\" + std::to_string(ind) + \":\";",
          "247:   std::shared_ptr<std::string> hexEncrKey_ptr = readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "249:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "251:   uint64_t DH_enc_len = 0;",
          "252:   uint8_t encrypted_DHkey[BUF_LEN];",
          "253:   hex2carray(hexEncrKey_ptr->c_str(), &DH_enc_len, encrypted_DHkey);",
          "256:   uint32_t dec_len;",
          "257:   char decrpyted_DHkey[ECDSA_SKEY_LEN];",
          "258:   char s_shareG2[257];",
          "260:   status = complaint_response(eid, &err_status, errMsg1, encrypted_DHkey, encr_dkg_poly, &dec_len,",
          "261:                        decrpyted_DHkey, s_shareG2, t, n, ind);",
          "263:   std::pair<std::string, std::string> result;",
          "264:   result.first = decrpyted_DHkey;",
          "265:   result.second = s_shareG2;",
          "274:   free(encr_dkg_poly);",
          "275:   free(errMsg1);",
          "276:   free(hexEncrKey);",
          "278:   return result;",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: bool VerifyShares(const char* publicShares, const char* encr_sshare, const char * encryptedKeyHex,  int t, int n, int ind);",
          "21: bool CreateBLSShare( const std::string& BLSKeyName, const char * s_shares, const char * encryptedKeyHex);",
          "23: std::string GetBLSPubKey(const char * encryptedKeyHex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: std::pair<std::string, std::string> response_to_complaint(const std::string& polyName, const char* encryptedPolyHex, int n, int t, int ind);",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"sgxwallet.h\"",
          "8: #include <iostream>",
          "11: std::vector<std::string> gen_ecdsa_key(){",
          "12:   char *errMsg = (char *)calloc(1024, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <gmp.h>",
          "11: #include <random>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   uint32_t enc_len = 0;",
          "19:   status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "21:   std::cerr << \"account key is \" << errMsg << std::endl;",
          "22:   char *hexEncrKey = (char *) calloc(2*BUF_LEN, 1);",
          "23:   carray2Hex(encr_pr_key, enc_len, hexEncrKey);",
          "",
          "[Removed Lines]",
          "20:   std::vector<std::string> keys(2);",
          "",
          "[Added Lines]",
          "22:   std::vector<std::string> keys(3);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30:   free(errMsg);",
          "31:   free(pub_key_x);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:   std::default_random_engine rand_gen((unsigned int) time(0));",
          "32:   unsigned long seed = rand_gen();",
          "33:   gmp_randstate_t state;",
          "34:   gmp_randinit_default(state);",
          "36:   gmp_randseed_ui(state, seed);",
          "38:   mpz_t rand32;",
          "39:   mpz_init(rand32);",
          "40:   mpz_urandomb(rand32, state, 257);",
          "42:   char arr[mpz_sizeinbase (rand32, 16) + 2];",
          "43:   char * rand_str = mpz_get_str(arr, 16, rand32);",
          "45:   keys.at(2) = rand_str;",
          "47:   gmp_randclear(state);",
          "48:   mpz_clear(rand32);",
          "",
          "---------------"
        ],
        "LevelDB.cpp||LevelDB.cpp": [
          "File: LevelDB.cpp -> LevelDB.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     std::cerr << \"key deleted \" << full_key << std::endl;",
          "104: }",
          "107: void LevelDB::writeByteArray(const char *_key, size_t _keyLen, const char *value,",
          "108:                              size_t _valueLen) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: void LevelDB::deleteTempNEK(const std::string &_key){",
          "108:     std::lock_guard<std::recursive_mutex> lock(mutex);",
          "110:     std::string prefix = _key.substr(0,8);",
          "111:     if (prefix != \"tmp_NEK:\") {",
          "112:       return;",
          "113:     }",
          "115:     auto status = db->Delete(writeOptions, Slice(_key));",
          "117:     throwExceptionOnError(status);",
          "119:     std::cerr << \"key deleted \" << _key << std::endl;",
          "120: }",
          "",
          "---------------"
        ],
        "LevelDB.h||LevelDB.h": [
          "File: LevelDB.h -> LevelDB.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     void deleteOlegKey (const std::string &_key);",
          "65: public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     void deleteTempNEK (const std::string &_key);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "144: }",
          "149:     Json::Value result;",
          "150:     result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "147: Json::Value generateECDSAKeyImpl(const std::string &_keyName) {",
          "",
          "[Added Lines]",
          "147: Json::Value generateECDSAKeyImpl() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:             throw RPCException(UNKNOWN_ERROR, \"\");",
          "163:         }",
          "166:     } catch (RPCException &_e) {",
          "167:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "168:         result[\"status\"] = _e.status;",
          "169:         result[\"errorMessage\"] = _e.errString;",
          "170:     }",
          "179: }",
          "",
          "[Removed Lines]",
          "165:         writeECDSAKey(_keyName, keys.at(0));",
          "172:     result[\"encryptedKey\"] = keys.at(0);",
          "173:     result[\"PublicKey\"] = keys.at(1);",
          "178:     return result;",
          "",
          "[Added Lines]",
          "164:         std::string keyName = \"tmp_NEK:\" + keys.at(2);",
          "166:         writeDataToDB(keyName, keys.at(0));",
          "168:         result[\"encryptedKey\"] = keys.at(0);",
          "169:         result[\"PublicKey\"] = keys.at(1);",
          "170:         result[\"KeyName\"] = keyName;",
          "179:     return result;",
          "180: }",
          "182: Json::Value renameESDSAKeyImpl(const std::string& KeyName, const std::string& tempKeyName){",
          "183:   Json::Value result;",
          "184:   result[\"status\"] = 0;",
          "185:   result[\"errorMessage\"] = \"\";",
          "186:   result[\"encryptedKey\"] = \"\";",
          "188:   try {",
          "190:     std::string prefix = tempKeyName.substr(0,8);",
          "191:     if (prefix != \"tmp_NEK:\") {",
          "192:      throw RPCException(UNKNOWN_ERROR, \"\");",
          "193:     }",
          "194:     prefix = KeyName.substr(0,5);",
          "195:     if (prefix != \"NODE_\") {",
          "196:       throw RPCException(UNKNOWN_ERROR, \"\");",
          "197:     }",
          "198:     std::string chain_str = \"CHAIN_\";",
          "199:     if ( KeyName.find(chain_str) == std::string::npos){",
          "200:       throw RPCException(UNKNOWN_ERROR, \"\");",
          "201:     }",
          "203:     std::shared_ptr<std::string> key_ptr = readFromDb(tempKeyName,\"\");//readECDSAKey(_keyName);",
          "204:     writeDataToDB(KeyName, *key_ptr);",
          "205:     levelDb->deleteTempNEK(tempKeyName);",
          "207:   } catch (RPCException &_e) {",
          "208:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "209:     result[\"status\"] = _e.status;",
          "210:     result[\"errorMessage\"] = _e.errString;",
          "211:   }",
          "213:   return result;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "397:          std::cerr << \"error \" << std::endl;",
          "398:      }",
          "401:        std::string name = polyName + \"_\" + std::to_string(i) + \":\";",
          "402:        levelDb -> deleteDHDKGKey(name);",
          "405:   } catch (RPCException &_e) {",
          "406:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:      for ( int i = 0; i < n; i++){",
          "438:      }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "432:     return result;",
          "433: }",
          "435: Json::Value SGXWalletServer::generateDKGPoly(const std::string& polyName, int t){",
          "437:   lock_guard<recursive_mutex> lock(m);",
          "438:   return generateDKGPolyImpl(polyName, t);",
          "439: }",
          "",
          "[Removed Lines]",
          "436:   std::cerr << \"entered generateECDSAKey\" << std::endl;",
          "",
          "[Added Lines]",
          "470: Json::Value ComplaintResponseImpl(const std::string& polyName, int n, int t, int ind){",
          "471:   Json::Value result;",
          "472:   result[\"status\"] = 0;",
          "473:   result[\"errorMessage\"] = \"\";",
          "474:   try {",
          "475:     std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName, \"DKGPoly:\");",
          "476:     std::pair<std::string, std::string> response = response_to_complaint(polyName, encr_poly_ptr->c_str(), n, t, ind);",
          "478:     result[\"share*G2\"] = response.second;",
          "479:     result[\"DHKey\"] = response.first;",
          "481:   } catch (RPCException &_e) {",
          "482:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "483:     result[\"status\"] = _e.status;",
          "484:     result[\"errorMessage\"] = _e.errString;",
          "485:   }",
          "487:   return result;",
          "489: }",
          "493:   std::cerr << \"entered generateDKGPoly\" << std::endl;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "469:   lock_guard<recursive_mutex> lock(m);",
          "471: }",
          "473: Json::Value SGXWalletServer::getPublicECDSAKey(const std::string &_keyName) {",
          "",
          "[Removed Lines]",
          "468: Json::Value SGXWalletServer::generateECDSAKey(const std::string &_keyName) {",
          "470:     return generateECDSAKeyImpl(_keyName);",
          "",
          "[Added Lines]",
          "525: Json::Value SGXWalletServer::generateECDSAKey() {",
          "527:     return generateECDSAKeyImpl();",
          "528: }",
          "530: Json::Value SGXWalletServer::renameESDSAKey(const std::string& KeyName, const std::string& tempKeyName){",
          "531:   lock_guard<recursive_mutex> lock(m);",
          "532:   return renameESDSAKeyImpl(KeyName, tempKeyName);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "476: }",
          "487: Json::Value",
          "",
          "[Removed Lines]",
          "479:   Json::Value SGXWalletServer::ecdsaSignMessageHash(int base, const std::string &_keyName, const std::string &messageHash ) {",
          "480:     lock_guard<recursive_mutex> lock(m);",
          "481:     std::cerr << \"entered ecdsaSignMessageHash\" << std::endl;",
          "482:     std::cerr << \"MessageHash first \" << messageHash << std::endl;",
          "483:     return ecdsaSignMessageHashImpl(base,_keyName, messageHash);",
          "484:   }",
          "",
          "[Added Lines]",
          "541: Json::Value SGXWalletServer::ecdsaSignMessageHash(int base, const std::string &_keyName, const std::string &messageHash ) {",
          "542:   lock_guard<recursive_mutex> lock(m);",
          "543:   std::cerr << \"entered ecdsaSignMessageHash\" << std::endl;",
          "544:   std::cerr << \"MessageHash first \" << messageHash << std::endl;",
          "545:   return ecdsaSignMessageHashImpl(base,_keyName, messageHash);",
          "546: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "502:   return importECDSAKeyImpl(key, keyName);",
          "503: }",
          "506: shared_ptr<string> readFromDb(const string & name, const string & prefix) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567: Json::Value SGXWalletServer::ComplaintResponse(const std::string& polyName, int n, int t, int ind){",
          "568:   lock_guard<recursive_mutex> lock(m);",
          "569:   return ComplaintResponseImpl(polyName, n, t, ind);",
          "570: }",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int n, int t, int signerIndex);",
          "26:     virtual Json::Value importECDSAKey(const std::string& key, const std::string& keyName);",
          "28:     virtual Json::Value ecdsaSignMessageHash(int base, const std::string& keyShareName, const std::string& messageHash);",
          "29:     virtual Json::Value getPublicECDSAKey(const std::string& keyName);",
          "",
          "[Removed Lines]",
          "27:     virtual Json::Value generateECDSAKey(const std::string& keyName);",
          "",
          "[Added Lines]",
          "27:     virtual Json::Value generateECDSAKey();",
          "28:     virtual Json::Value renameESDSAKey(const std::string& KeyName, const std::string& tempKeyName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     virtual Json::Value DKGVerification(const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "35:     virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "36:     virtual Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName);",
          "38: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     virtual Json::Value ComplaintResponse(const std::string& polyName, int n, int t, int ind);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: Json::Value blsSignMessageHashImpl(const std::string& keyShareName, const std::string& messageHash, int n, int t, int signerIndex);",
          "55: Json::Value importECDSAKeyImpl(const std::string& key, const std::string& keyName);",
          "57: Json::Value ecdsaSignMessageHashImpl(int base, const std::string& keyName, const std::string& messageHash);",
          "58: Json::Value getPublicECDSAKeyImpl(const std::string& keyName);",
          "",
          "[Removed Lines]",
          "56: Json::Value generateECDSAKeyImpl(const std::string& keyName);",
          "",
          "[Added Lines]",
          "58: Json::Value generateECDSAKeyImpl();",
          "59: Json::Value renameESDSAKeyImpl(const std::string& KeyName, const std::string& tempKeyName);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63: Json::Value DKGVerificationImpl(const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "64: Json::Value CreateBLSPrivateKeyImpl(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "65: Json::Value GetBLSPublicKeyShareImpl(const std::string & BLSKeyName);",
          "67: #endif //SGXWALLET_SGXWALLETSERVER_HPP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: Json::Value ComplaintResponseImpl(const std::string& polyName, int n, int t, int ind);",
          "",
          "---------------"
        ],
        "abstractstubserver.h||abstractstubserver.h": [
          "File: abstractstubserver.h -> abstractstubserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:           this->bindAndAddMethod(jsonrpc::Procedure(\"blsSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyShareName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"signerIndex\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::blsSignMessageHashI);",
          "18:           this->bindAndAddMethod(jsonrpc::Procedure(\"importECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"key\",jsonrpc::JSON_STRING,\"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::importECDSAKeyI);",
          "20:           this->bindAndAddMethod(jsonrpc::Procedure(\"getPublicECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::getPublicECDSAKeyI);",
          "21:           this->bindAndAddMethod(jsonrpc::Procedure(\"ecdsaSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"base\",jsonrpc::JSON_INTEGER,\"keyName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::ecdsaSignMessageHashI);",
          "",
          "[Removed Lines]",
          "19:           this->bindAndAddMethod(jsonrpc::Procedure(\"generateECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::generateECDSAKeyI);",
          "",
          "[Added Lines]",
          "19:           this->bindAndAddMethod(jsonrpc::Procedure(\"generateECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,  NULL), &AbstractStubServer::generateECDSAKeyI);",
          "20:           this->bindAndAddMethod(jsonrpc::Procedure(\"renameESDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"KeyName\",jsonrpc::JSON_STRING,\"tempKeyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::renameESDSAKeyI);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:         }",
          "44:         inline virtual void generateECDSAKeyI(const Json::Value &request, Json::Value &response)",
          "45:         {",
          "47:         }",
          "49:         {",
          "50:             response = this->getPublicECDSAKey(request[\"keyName\"].asString());",
          "51:         }",
          "",
          "[Removed Lines]",
          "46:             response = this->generateECDSAKey(request[\"keyName\"].asString());",
          "48:         inline virtual void getPublicECDSAKeyI(const Json::Value &request, Json::Value &response)",
          "",
          "[Added Lines]",
          "47:           (void)request;",
          "48:           response = this->generateECDSAKey();",
          "50:         inline virtual void renameESDSAKeyI(const Json::Value &request, Json::Value &response)",
          "51:         {",
          "52:           response = this->renameESDSAKey(request[\"KeyName\"].asString(), request[\"tempKeyName\"].asString());",
          "53:         }",
          "54:          inline virtual void getPublicECDSAKeyI(const Json::Value &request, Json::Value &response)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:         virtual Json::Value importBLSKeyShare(int index, const std::string& keyShare, const std::string& keyShareName, int n, int t) = 0;",
          "82:         virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int n, int signerIndex, int t) = 0;",
          "83:         virtual Json::Value importECDSAKey(const std::string& key, const std::string& keyName) = 0;",
          "85:         virtual Json::Value getPublicECDSAKey(const std::string& keyName) = 0;",
          "86:         virtual Json::Value ecdsaSignMessageHash(int base, const std::string& keyName, const std::string& messageHash) = 0;",
          "",
          "[Removed Lines]",
          "84:         virtual Json::Value generateECDSAKey(const std::string& keyName) = 0;",
          "",
          "[Added Lines]",
          "90:         virtual Json::Value generateECDSAKey() = 0;",
          "91:         virtual Json::Value renameESDSAKey(const std::string& KeyName, const std::string& tempKeyName) = 0;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:   free(cypher);",
          "619: }",
          "624:   uint32_t enc_len;",
          "626:   sgx_status_t status = sgx_unseal_data(",
          "629:   if (status != SGX_SUCCESS) {",
          "630:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", status);",
          "631:     return;",
          "632:   }",
          "641: void dkg_verification(int *err_status, char* err_string, const char * public_shares, const char* s_share,",
          "642:                       uint8_t* encrypted_key, uint64_t key_len, unsigned _t, int _ind, int * result){",
          "",
          "[Removed Lines]",
          "622:                     char* s_key, char* s_shareG2, uint8_t _t, uint8_t _n, uint8_t ind1, uint8_t ind2){",
          "627:       (const sgx_sealed_data_t *)encrypted_DHkey, NULL, 0, (uint8_t *)skey, &enc_len);",
          "634:   char* s_shareG2 = (char *)malloc(196);",
          "635:   calc_secret_shareG2(decrypted_koefs, s_shareG2, _t, ind2);",
          "638:   free(s_shareG2);",
          "",
          "[Added Lines]",
          "621: void complaint_response(int *err_status, char *err_string, uint8_t *encrypted_DHkey, uint8_t *encrypted_dkg_secret, uint32_t* dec_len,",
          "622:                     char* DH_key, char* s_shareG2, uint8_t _t, uint8_t _n, uint8_t ind1){",
          "627:       (const sgx_sealed_data_t *)encrypted_DHkey, NULL, 0, (uint8_t *)DH_key, &enc_len);",
          "633:   char* decrypted_dkg_secret = (char*)malloc(DKG_BUFER_LENGTH);",
          "634:   uint32_t decr_len;",
          "635:   decrypt_dkg_secret(err_status, err_string, encrypted_dkg_secret, (uint8_t*)decrypted_dkg_secret, &decr_len);",
          "636:   if (*err_status != 0) {",
          "637:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", *err_status);",
          "638:     return;",
          "639:   }",
          "641:   calc_secret_shareG2(decrypted_dkg_secret, s_shareG2, _t, ind1);",
          "642:   free(decrypted_dkg_secret);",
          "643: }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "144:                                 uint64_t key_len,",
          "145:                                 [out, count = 320] char* bls_pub_key);",
          "146:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:          public void complaint_response(",
          "148:                                 [user_check] int *err_status,",
          "149:                                 [out, count = 1024]  char* err_string,",
          "150:                                 [in, count = 1024] uint8_t *encrypted_DHkey,",
          "151:                                 [in, count = 3050] uint8_t *encrypted_dkg_secret,",
          "152:                                 [user_check] uint32_t* dec_len,",
          "153:                                 [out, count = 65] char* DH_key,",
          "154:                                 [out, count = 257] char* s_shareG2,",
          "155:                                 uint8_t _t,",
          "156:                                 uint8_t _n,",
          "157:                                 uint8_t ind1);",
          "",
          "---------------"
        ],
        "stubclient.cpp||stubclient.cpp": [
          "File: stubclient.cpp -> stubclient.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     Json::Value params;",
          "19:     try {",
          "21:     } catch (JsonRpcException &e) {",
          "22:         cerr << e.what() << endl;",
          "23:     }",
          "",
          "[Removed Lines]",
          "20:         cout << c.generateECDSAKey(\"test_key\") << endl;",
          "",
          "[Added Lines]",
          "20:         cout << c.generateECDSAKey() << endl;",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:             else",
          "52:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "53:         }",
          "55:         {",
          "63:         }",
          "64:         Json::Value getPublicECDSAKey(const std::string& keyName) throw (jsonrpc::JsonRpcException)",
          "65:         {",
          "",
          "[Removed Lines]",
          "54:         Json::Value generateECDSAKey(const std::string& keyName) throw (jsonrpc::JsonRpcException)",
          "56:             Json::Value p;",
          "57:             p[\"keyName\"] = keyName;",
          "58:             Json::Value result = this->CallMethod(\"generateECDSAKey\",p);",
          "59:             if (result.isObject())",
          "60:                 return result;",
          "61:             else",
          "62:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "",
          "[Added Lines]",
          "54:         Json::Value generateECDSAKey() throw (jsonrpc::JsonRpcException)",
          "56:           Json::Value p;",
          "57:           p = Json::nullValue;",
          "58:           Json::Value result = this->CallMethod(\"generateECDSAKey\",p);",
          "59:           if (result.isObject())",
          "60:             return result;",
          "61:           else",
          "62:             throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "63:         }",
          "64:         Json::Value renameESDSAKey(const std::string& KeyName, const std::string& tempKeyName) throw (jsonrpc::JsonRpcException)",
          "65:         {",
          "66:           Json::Value p;",
          "67:           p[\"KeyName\"] = KeyName;",
          "68:           p[\"tempKeyName\"] = tempKeyName;",
          "69:           Json::Value result = this->CallMethod(\"renameESDSAKey\",p);",
          "70:           if (result.isObject())",
          "71:             return result;",
          "72:           else",
          "73:             throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727:         cout << c.generateECDSAKey() << endl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "755:       std::string share = share_big.substr(0, 192);",
          "757:       std::string publicShares = \"1fc8154abcbf0c2ebf559571d7b57a8995c0e293a73d4676a8f76051a0d0ace30e00a87c9f087254c9c860c3215c4f11e8f85a3e8fae19358f06a0cbddf3df1924b1347b9b58f5bcb20958a19bdbdd832181cfa9f9e9fd698f6a485051cb47b829d10f75b6e227a7d7366dd02825b5718072cd42c39f0352071808622b7db6421b1069f519527e49052a8da6e3720cbda9212fc656eef945f5e56a4159c3b9622d883400460a9eff07fe1873f9b1ec50f6cf70098b9da0b90625b176f12329fa2ecc65082c626dc702d9cfb23a06770d4a2c7867e269efe84e3709b11001fb380a32d609855d1d46bc60f21140c636618b8ff55ed06d7788b6f81b498f96d3f9\";",
          "",
          "[Removed Lines]",
          "758:       cout << c.DKGVerification(publicShares, \"test_key1\", \"37092c06c423b627c38ff86d1e66608bdc1496ef855b86e9f773441ac0b285d92aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b76\", 2, 2, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}