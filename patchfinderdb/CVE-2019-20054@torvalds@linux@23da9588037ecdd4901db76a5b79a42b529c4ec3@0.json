{
  "cve_id": "CVE-2019-20054",
  "cve_desc": "In the Linux kernel before 5.0.6, there is a NULL pointer dereference in drop_sysctl_table() in fs/proc/proc_sysctl.c, related to put_links, aka CID-23da9588037e.",
  "repo": "torvalds/linux",
  "patch_hash": "23da9588037ecdd4901db76a5b79a42b529c4ec3",
  "patch_info": {
    "commit_hash": "23da9588037ecdd4901db76a5b79a42b529c4ec3",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/23da9588037ecdd4901db76a5b79a42b529c4ec3",
    "files": [
      "fs/proc/proc_sysctl.c"
    ],
    "message": "fs/proc/proc_sysctl.c: fix NULL pointer dereference in put_links\n\nSyzkaller reports:\n\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN PTI\nCPU: 1 PID: 5373 Comm: syz-executor.0 Not tainted 5.0.0-rc8+ #3\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nRIP: 0010:put_links+0x101/0x440 fs/proc/proc_sysctl.c:1599\nCode: 00 0f 85 3a 03 00 00 48 8b 43 38 48 89 44 24 20 48 83 c0 38 48 89 c2 48 89 44 24 28 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 fe 02 00 00 48 8b 74 24 20 48 c7 c7 60 2a 9d 91\nRSP: 0018:ffff8881d828f238 EFLAGS: 00010202\nRAX: dffffc0000000000 RBX: ffff8881e01b1140 RCX: ffffffff8ee98267\nRDX: 0000000000000007 RSI: ffffc90001479000 RDI: ffff8881e01b1178\nRBP: dffffc0000000000 R08: ffffed103ee27259 R09: ffffed103ee27259\nR10: 0000000000000001 R11: ffffed103ee27258 R12: fffffffffffffff4\nR13: 0000000000000006 R14: ffff8881f59838c0 R15: dffffc0000000000\nFS:  00007f072254f700(0000) GS:ffff8881f7100000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007fff8b286668 CR3: 00000001f0542002 CR4: 00000000007606e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\n drop_sysctl_table+0x152/0x9f0 fs/proc/proc_sysctl.c:1629\n get_subdir fs/proc/proc_sysctl.c:1022 [inline]\n __register_sysctl_table+0xd65/0x1090 fs/proc/proc_sysctl.c:1335\n br_netfilter_init+0xbc/0x1000 [br_netfilter]\n do_one_initcall+0xfa/0x5ca init/main.c:887\n do_init_module+0x204/0x5f6 kernel/module.c:3460\n load_module+0x66b2/0x8570 kernel/module.c:3808\n __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902\n do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007f072254ec58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139\nRAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 0000000020000280 RDI: 0000000000000003\nRBP: 00007f072254ec70 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007f072254f6bc\nR13: 00000000004bcefa R14: 00000000006f6fb0 R15: 0000000000000004\nModules linked in: br_netfilter(+) dvb_usb_dibusb_mc_common dib3000mc dibx000_common dvb_usb_dibusb_common dvb_usb_dw2102 dvb_usb classmate_laptop palmas_regulator cn videobuf2_v4l2 v4l2_common snd_soc_bd28623 mptbase snd_usb_usx2y snd_usbmidi_lib snd_rawmidi wmi libnvdimm lockd sunrpc grace rc_kworld_pc150u rc_core rtc_da9063 sha1_ssse3 i2c_cros_ec_tunnel adxl34x_spi adxl34x nfnetlink lib80211 i5500_temp dvb_as102 dvb_core videobuf2_common videodev media videobuf2_vmalloc videobuf2_memops udc_core lnbp22 leds_lp3952 hid_roccat_ryos s1d13xxxfb mtd vport_geneve openvswitch nf_conncount nf_nat_ipv6 nsh geneve udp_tunnel ip6_udp_tunnel snd_soc_mt6351 sis_agp phylink snd_soc_adau1761_spi snd_soc_adau1761 snd_soc_adau17x1 snd_soc_core snd_pcm_dmaengine ac97_bus snd_compress snd_soc_adau_utils snd_soc_sigmadsp_regmap snd_soc_sigmadsp raid_class hid_roccat_konepure hid_roccat_common hid_roccat c2port_duramar2150 core mdio_bcm_unimac iptable_security iptable_raw iptable_mangle\n iptable_nat nf_nat_ipv4 nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_vti ip_gre ipip sit tunnel4 ip_tunnel hsr veth netdevsim devlink vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon dummy team bonding vcan bridge stp llc ip6_gre gre ip6_tunnel tunnel6 tun crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel joydev mousedev ide_pci_generic piix aesni_intel aes_x86_64 ide_core crypto_simd atkbd cryptd glue_helper serio_raw ata_generic pata_acpi i2c_piix4 floppy sch_fq_codel ip_tables x_tables ipv6 [last unloaded: lm73]\nDumping ftrace buffer:\n   (ftrace buffer empty)\n---[ end trace 770020de38961fd0 ]---\n\nA new dir entry can be created in get_subdir and its 'header->parent' is\nset to NULL.  Only after insert_header success, it will be set to 'dir',\notherwise 'header->parent' is set to NULL and drop_sysctl_table is called.\nHowever in err handling path of get_subdir, drop_sysctl_table also be\ncalled on 'new->header' regardless its value of parent pointer.  Then\nput_links is called, which triggers NULL-ptr deref when access member of\nheader->parent.\n\nIn fact we have multiple error paths which call drop_sysctl_table() there,\nupon failure on insert_links() we also call drop_sysctl_table().And even\nin the successful case on __register_sysctl_table() we still always call\ndrop_sysctl_table().This patch fix it.\n\nLink: http://lkml.kernel.org/r/20190314085527.13244-1-yuehaibing@huawei.com\nFixes: 0e47c99d7fe25 (\"sysctl: Replace root_list with links between sysctl_table_sets\")\nSigned-off-by: YueHaibing <yuehaibing@huawei.com>\nReported-by: Hulk Robot <hulkci@huawei.com>\nAcked-by: Luis Chamberlain <mcgrof@kernel.org>\nCc: Kees Cook <keescook@chromium.org>\nCc: Alexey Dobriyan <adobriyan@gmail.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nCc: Eric W. Biederman <ebiederm@xmission.com>\nCc: <stable@vger.kernel.org>    [3.4+]\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "fs/proc/proc_sysctl.c||fs/proc/proc_sysctl.c"
    ]
  },
  "patch_diff": {
    "fs/proc/proc_sysctl.c||fs/proc/proc_sysctl.c": [
      "File: fs/proc/proc_sysctl.c -> fs/proc/proc_sysctl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1626:  if (--header->nreg)",
      "1627:   return;",
      "1630:  start_unregistering(header);",
      "1631:  if (!--header->count)",
      "1632:   kfree_rcu(header, rcu);",
      "",
      "[Removed Lines]",
      "1629:  put_links(header);",
      "",
      "[Added Lines]",
      "1629:  if (parent)",
      "1630:   put_links(header);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01ca667133d019edc9f0a1f70a272447c84ec41f",
      "candidate_info": {
        "commit_hash": "01ca667133d019edc9f0a1f70a272447c84ec41f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/01ca667133d019edc9f0a1f70a272447c84ec41f",
        "files": [
          "drivers/net/ethernet/intel/fm10k/fm10k_main.c"
        ],
        "message": "fm10k: Fix a potential NULL pointer dereference\n\nSyzkaller report this:\n\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN PTI\nCPU: 0 PID: 4378 Comm: syz-executor.0 Tainted: G         C        5.0.0+ #5\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nRIP: 0010:__lock_acquire+0x95b/0x3200 kernel/locking/lockdep.c:3573\nCode: 00 0f 85 28 1e 00 00 48 81 c4 08 01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f c3 4c 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 cc 24 00 00 49 81 7d 00 e0 de 03 a6 41 bc 00 00\nRSP: 0018:ffff8881e3c07a40 EFLAGS: 00010002\nRAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000\nRDX: 0000000000000010 RSI: 0000000000000000 RDI: 0000000000000080\nRBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000000\nR10: ffff8881e3c07d98 R11: ffff8881c7f21f80 R12: 0000000000000001\nR13: 0000000000000080 R14: 0000000000000000 R15: 0000000000000001\nFS:  00007fce2252e700(0000) GS:ffff8881f2400000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007fffc7eb0228 CR3: 00000001e5bea002 CR4: 00000000007606f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\n lock_acquire+0xff/0x2c0 kernel/locking/lockdep.c:4211\n __mutex_lock_common kernel/locking/mutex.c:925 [inline]\n __mutex_lock+0xdf/0x1050 kernel/locking/mutex.c:1072\n drain_workqueue+0x24/0x3f0 kernel/workqueue.c:2934\n destroy_workqueue+0x23/0x630 kernel/workqueue.c:4319\n __do_sys_delete_module kernel/module.c:1018 [inline]\n __se_sys_delete_module kernel/module.c:961 [inline]\n __x64_sys_delete_module+0x30c/0x480 kernel/module.c:961\n do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007fce2252dc58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0\nRAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020000140\nRBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007fce2252e6bc\nR13: 00000000004bcca9 R14: 00000000006f6b48 R15: 00000000ffffffff\n\nIf alloc_workqueue fails, it should return -ENOMEM, otherwise may\ntrigger this NULL pointer dereference while unloading drivers.\n\nReported-by: Hulk Robot <hulkci@huawei.com>\nFixes: 0a38c17a21a0 (\"fm10k: Remove create_workqueue\")\nSigned-off-by: Yue Haibing <yuehaibing@huawei.com>\nTested-by: Andrew Bowers <andrewx.bowers@intel.com>\nSigned-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>",
        "before_after_code_files": [
          "drivers/net/ethernet/intel/fm10k/fm10k_main.c||drivers/net/ethernet/intel/fm10k/fm10k_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/ethernet/intel/fm10k/fm10k_main.c||drivers/net/ethernet/intel/fm10k/fm10k_main.c": [
          "File: drivers/net/ethernet/intel/fm10k/fm10k_main.c -> drivers/net/ethernet/intel/fm10k/fm10k_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  fm10k_workqueue = alloc_workqueue(\"%s\", WQ_MEM_RECLAIM, 0,",
          "43:        fm10k_driver_name);",
          "45:  fm10k_dbg_init();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:  if (!fm10k_workqueue)",
          "45:   return -ENOMEM;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58ccd2d31e502c37e108b285bf3d343eb00c235b",
      "candidate_info": {
        "commit_hash": "58ccd2d31e502c37e108b285bf3d343eb00c235b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/58ccd2d31e502c37e108b285bf3d343eb00c235b",
        "files": [
          "drivers/block/paride/pf.c"
        ],
        "message": "paride/pf: Fix potential NULL pointer dereference\n\nSyzkaller report this:\n\npf: pf version 1.04, major 47, cluster 64, nice 0\npf: No ATAPI disk detected\nkasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN PTI\nCPU: 0 PID: 9887 Comm: syz-executor.0 Tainted: G         C        5.1.0-rc3+ #8\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nRIP: 0010:pf_init+0x7af/0x1000 [pf]\nCode: 46 77 d2 48 89 d8 48 c1 e8 03 80 3c 28 00 74 08 48 89 df e8 03 25 a6 d2 4c 8b 23 49 8d bc 24 80 05 00 00 48 89 f8 48 c1 e8 03 <80> 3c 28 00 74 05 e8 e6 24 a6 d2 49 8b bc 24 80 05 00 00 e8 79 34\nRSP: 0018:ffff8881abcbf998 EFLAGS: 00010202\nRAX: 00000000000000b0 RBX: ffffffffc1e4a8a8 RCX: ffffffffaec50788\nRDX: 0000000000039b10 RSI: ffffc9000153c000 RDI: 0000000000000580\nRBP: dffffc0000000000 R08: ffffed103ee44e59 R09: ffffed103ee44e59\nR10: 0000000000000001 R11: ffffed103ee44e58 R12: 0000000000000000\nR13: ffffffffc1e4b028 R14: 0000000000000000 R15: 0000000000000020\nFS:  00007f1b78a91700(0000) GS:ffff8881f7200000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007f6d72b207f8 CR3: 00000001d5790004 CR4: 00000000007606f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\n ? 0xffffffffc1e50000\n do_one_initcall+0xbc/0x47d init/main.c:901\n do_init_module+0x1b5/0x547 kernel/module.c:3456\n load_module+0x6405/0x8c10 kernel/module.c:3804\n __do_sys_finit_module+0x162/0x190 kernel/module.c:3898\n do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007f1b78a90c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139\nRAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 0000000020000180 RDI: 0000000000000003\nRBP: 00007f1b78a90c70 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007f1b78a916bc\nR13: 00000000004bcefa R14: 00000000006f6fb0 R15: 0000000000000004\nModules linked in: pf(+) paride gpio_tps65218 tps65218 i2c_cht_wc ati_remote dc395x act_meta_skbtcindex act_ife ife ecdh_generic rc_xbox_dvd sky81452_regulator v4l2_fwnode leds_blinkm snd_usb_hiface comedi(C) aes_ti slhc cfi_cmdset_0020 mtd cfi_util sx8654 mdio_gpio of_mdio fixed_phy mdio_bitbang libphy alcor_pci matrix_keymap hid_uclogic usbhid scsi_transport_fc videobuf2_v4l2 videobuf2_dma_sg snd_soc_pcm179x_spi snd_soc_pcm179x_codec i2c_demux_pinctrl mdev snd_indigodj isl6405 mii enc28j60 cmac adt7316_i2c(C) adt7316(C) fmc_trivial fmc nf_reject_ipv4 authenc rc_dtt200u rtc_ds1672 dvb_usb_dibusb_mc dvb_usb_dibusb_mc_common dib3000mc dibx000_common dvb_usb_dibusb_common dvb_usb dvb_core videobuf2_common videobuf2_vmalloc videobuf2_memops regulator_haptic adf7242 mac802154 ieee802154 s5h1409 da9034_ts snd_intel8x0m wmi cx24120 usbcore sdhci_cadence sdhci_pltfm sdhci mmc_core joydev i2c_algo_bit scsi_transport_iscsi iscsi_boot_sysfs ves1820 lockd grace nfs_acl auth_rpcgss sunrp\n c\n ip_vs snd_soc_adau7002 snd_cs4281 snd_rawmidi gameport snd_opl3_lib snd_seq_device snd_hwdep snd_ac97_codec ad7418 hid_primax hid snd_soc_cs4265 snd_soc_core snd_pcm_dmaengine snd_pcm snd_timer ac97_bus snd_compress snd soundcore ti_adc108s102 eeprom_93cx6 i2c_algo_pca mlxreg_hotplug st_pressure st_sensors industrialio_triggered_buffer kfifo_buf industrialio v4l2_common videodev media snd_soc_adau_utils rc_pinnacle_grey rc_core pps_gpio leds_lm3692x nandcore ledtrig_pattern iptable_security iptable_raw iptable_mangle iptable_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_vti ip_gre ipip sit tunnel4 ip_tunnel hsr veth netdevsim vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon dummy team bonding vcan bridge stp llc ip6_gre gre ip6_tunnel tunnel6 tun mousedev ppdev tpm kvm_intel kvm irqbypass crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel aesni_intel ide_pci_generic aes_x86_64 piix crypto_simd input_leds psmouse cryp\n td\n glue_helper ide_core intel_agp serio_raw intel_gtt agpgart ata_generic i2c_piix4 pata_acpi parport_pc parport rtc_cmos floppy sch_fq_codel ip_tables x_tables sha1_ssse3 sha1_generic ipv6 [last unloaded: paride]\nDumping ftrace buffer:\n  (ftrace buffer empty)\n---[ end trace 7a818cf5f210d79e ]---\n\nIf alloc_disk fails in pf_init_units, pf->disk will be\nNULL, however in pf_detect and pf_exit, it's not check\nthis before free.It may result a NULL pointer dereference.\n\nAlso when register_blkdev failed, blk_cleanup_queue() and\nblk_mq_free_tag_set() should be called to free resources.\n\nReported-by: Hulk Robot <hulkci@huawei.com>\nFixes: 6ce59025f118 (\"paride/pf: cleanup queues when detection fails\")\nSigned-off-by: YueHaibing <yuehaibing@huawei.com>\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "drivers/block/paride/pf.c||drivers/block/paride/pf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/block/paride/pf.c||drivers/block/paride/pf.c": [
          "File: drivers/block/paride/pf.c -> drivers/block/paride/pf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "763:  printk(\"%s: No ATAPI disk detected\\n\", name);",
          "764:  for (pf = units, unit = 0; unit < PF_UNITS; pf++, unit++) {",
          "765:   blk_cleanup_queue(pf->disk->queue);",
          "766:   pf->disk->queue = NULL;",
          "767:   blk_mq_free_tag_set(&pf->tag_set);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "765:   if (!pf->disk)",
          "766:    continue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1029:  pf_busy = 0;",
          "1031:  if (register_blkdev(major, name)) {",
          "1033:    put_disk(pf->disk);",
          "1034:   return -EBUSY;",
          "1035:  }",
          "",
          "[Removed Lines]",
          "1032:   for (pf = units, unit = 0; unit < PF_UNITS; pf++, unit++)",
          "",
          "[Added Lines]",
          "1034:   for (pf = units, unit = 0; unit < PF_UNITS; pf++, unit++) {",
          "1035:    if (!pf->disk)",
          "1036:     continue;",
          "1037:    blk_cleanup_queue(pf->disk->queue);",
          "1038:    blk_mq_free_tag_set(&pf->tag_set);",
          "1040:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1051:  int unit;",
          "1052:  unregister_blkdev(major, name);",
          "1053:  for (pf = units, unit = 0; unit < PF_UNITS; pf++, unit++) {",
          "1054:   if (pf->present)",
          "1055:    del_gendisk(pf->disk);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1061:   if (!pf->disk)",
          "1062:    continue;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a145b5b0e48783d0cd3ee605ed00b133d5c8ffed",
      "candidate_info": {
        "commit_hash": "a145b5b0e48783d0cd3ee605ed00b133d5c8ffed",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a145b5b0e48783d0cd3ee605ed00b133d5c8ffed",
        "files": [
          "drivers/gpu/drm/i915/i915_debugfs.c"
        ],
        "message": "drm/i915: Always backoff after a drm_modeset_lock() deadlock\n\nIf drm_modeset_lock() reports a deadlock it sets the ctx->contexted\nfield and insists that the caller calls drm_modeset_backoff() or else it\ngenerates a WARN on cleanup.\n\n<4> [1601.870376] WARNING: CPU: 3 PID: 8445 at drivers/gpu/drm/drm_modeset_lock.c:228 drm_modeset_drop_locks+0x35/0x40\n<4> [1601.870395] Modules linked in: vgem snd_hda_codec_hdmi snd_hda_codec_realtek snd_hda_codec_generic x86_pkg_temp_thermal i915 coretemp crct10dif_pclmul\n<6> [1601.870403] Console: switching\n<4> [1601.870403]  snd_hda_intel\n<4> [1601.870406] to colour frame buffer device 320x90\n<4> [1601.870406]  crc32_pclmul snd_hda_codec snd_hwdep ghash_clmulni_intel e1000e snd_hda_core cdc_ether ptp usbnet mii pps_core snd_pcm i2c_i801 mei_me mei prime_numbers\n<4> [1601.870422] CPU: 3 PID: 8445 Comm: cat Tainted: G     U            5.0.0-rc7-CI-CI_DRM_5650+ #1\n<4> [1601.870424] Hardware name: Intel Corporation Ice Lake Client Platform/IceLake U DDR4 SODIMM PD RVP TLC, BIOS ICLSFWR1.R00.2402.AD3.1810170014 10/17/2018\n<4> [1601.870427] RIP: 0010:drm_modeset_drop_locks+0x35/0x40\n<4> [1601.870430] Code: 29 48 8b 43 60 48 8d 6b 60 48 39 c5 74 19 48 8b 43 60 48 8d b8 70 ff ff ff e8 87 ff ff ff 48 8b 43 60 48 39 c5 75 e7 5b 5d c3 <0f> 0b eb d3 0f 1f 80 00 00 00 00 41 56 41 55 41 54 55 53 48 8b 6f\n<4> [1601.870432] RSP: 0018:ffffc90000d67ce8 EFLAGS: 00010282\n<4> [1601.870435] RAX: 00000000ffffffdd RBX: ffffc90000d67d00 RCX: 5dbbe23d00000000\n<4> [1601.870437] RDX: 0000000000000000 RSI: 0000000093e6194a RDI: ffffc90000d67d00\n<4> [1601.870439] RBP: ffff88849e62e678 R08: 0000000003b7329a R09: 0000000000000001\n<4> [1601.870441] R10: 0000000000000000 R11: 0000000000000000 R12: ffff888492100410\n<4> [1601.870442] R13: ffff88849ea50958 R14: ffff8884a67eb028 R15: ffff8884a67eb028\n<4> [1601.870445] FS:  00007fa7a27745c0(0000) GS:ffff8884aff80000(0000) knlGS:0000000000000000\n<4> [1601.870447] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n<4> [1601.870449] CR2: 000055af07e66000 CR3: 00000004a8cc2006 CR4: 0000000000760ee0\n<4> [1601.870451] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n<4> [1601.870453] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n<4> [1601.870454] PKRU: 55555554\n<4> [1601.870456] Call Trace:\n<4> [1601.870505]  i915_dsc_fec_support_show+0x91/0x190 [i915]\n<4> [1601.870522]  seq_read+0xdb/0x3c0\n<4> [1601.870531]  full_proxy_read+0x51/0x80\n<4> [1601.870538]  __vfs_read+0x31/0x190\n<4> [1601.870546]  ? __se_sys_newfstat+0x3c/0x60\n<4> [1601.870552]  vfs_read+0x9e/0x150\n<4> [1601.870557]  ksys_read+0x50/0xc0\n<4> [1601.870564]  do_syscall_64+0x55/0x190\n<4> [1601.870569]  entry_SYSCALL_64_after_hwframe+0x49/0xbe\n<4> [1601.870572] RIP: 0033:0x7fa7a226d081\n<4> [1601.870574] Code: fe ff ff 48 8d 3d 67 9c 0a 00 48 83 ec 08 e8 a6 4c 02 00 66 0f 1f 44 00 00 48 8d 05 81 08 2e 00 8b 00 85 c0 75 13 31 c0 0f 05 <48> 3d 00 f0 ff ff 77 57 f3 c3 0f 1f 44 00 00 41 54 55 49 89 d4 53\n<4> [1601.870576] RSP: 002b:00007ffcc05140c8 EFLAGS: 00000246 ORIG_RAX: 0000000000000000\n<4> [1601.870579] RAX: ffffffffffffffda RBX: 0000000000020000 RCX: 00007fa7a226d081\n<4> [1601.870581] RDX: 0000000000020000 RSI: 000055af07e63000 RDI: 0000000000000007\n<4> [1601.870583] RBP: 0000000000020000 R08: 000000000000007b R09: 0000000000000000\n<4> [1601.870585] R10: 000055af07e60010 R11: 0000000000000246 R12: 000055af07e63000\n<4> [1601.870587] R13: 0000000000000007 R14: 000055af07e634bf R15: 0000000000020000\n\nBugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=109745\nFixes: e845f099f1c6 (\"drm/i915/dsc: Add Per connector debugfs node for DSC support/enable\")\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nCc: Rodrigo Vivi <rodrigo.vivi@intel.com>\nCc: Ville Syrjala <ville.syrjala@linux.intel.com>\nCc: Anusha Srivatsa <anusha.srivatsa@intel.com>\nCc: Lyude Paul <lyude@redhat.com>\nCc: Manasi Navare <manasi.d.navare@intel.com>\nReviewed-by: Manasi Navare <manasi.d.navare@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20190329165152.29259-1-chris@chris-wilson.co.uk\n(cherry picked from commit ee6df5694a9a2e30566ae05e9c145a0f6d5e087f)\nSigned-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/i915_debugfs.c||drivers/gpu/drm/i915/i915_debugfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/i915_debugfs.c||drivers/gpu/drm/i915/i915_debugfs.c": [
          "File: drivers/gpu/drm/i915/i915_debugfs.c -> drivers/gpu/drm/i915/i915_debugfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4830:   ret = drm_modeset_lock(&dev->mode_config.connection_mutex,",
          "4831:            &ctx);",
          "4832:   if (ret) {",
          "4834:    break;",
          "4835:   }",
          "4836:   crtc = connector->state->crtc;",
          "",
          "[Removed Lines]",
          "4833:    ret = -EINTR;",
          "",
          "[Added Lines]",
          "4833:    if (ret == -EDEADLK && !drm_modeset_backoff(&ctx)) {",
          "4834:     try_again = true;",
          "4835:     continue;",
          "4836:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2011fccfb61bbd1d7c8864b2b3ed7012342e9ba3",
      "candidate_info": {
        "commit_hash": "2011fccfb61bbd1d7c8864b2b3ed7012342e9ba3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2011fccfb61bbd1d7c8864b2b3ed7012342e9ba3",
        "files": [
          "kernel/bpf/verifier.c"
        ],
        "message": "bpf: Support variable offset stack access from helpers\n\nCurrently there is a difference in how verifier checks memory access for\nhelper arguments for PTR_TO_MAP_VALUE and PTR_TO_STACK with regard to\nvariable part of offset.\n\ncheck_map_access, that is used for PTR_TO_MAP_VALUE, can handle variable\noffsets just fine, so that BPF program can call a helper like this:\n\n  some_helper(map_value_ptr + off, size);\n\n, where offset is unknown at load time, but is checked by program to be\nin a safe rage (off >= 0 && off + size < map_value_size).\n\nBut it's not the case for check_stack_boundary, that is used for\nPTR_TO_STACK, and same code with pointer to stack is rejected by\nverifier:\n\n  some_helper(stack_value_ptr + off, size);\n\nFor example:\n  0: (7a) *(u64 *)(r10 -16) = 0\n  1: (7a) *(u64 *)(r10 -8) = 0\n  2: (61) r2 = *(u32 *)(r1 +0)\n  3: (57) r2 &= 4\n  4: (17) r2 -= 16\n  5: (0f) r2 += r10\n  6: (18) r1 = 0xffff888111343a80\n  8: (85) call bpf_map_lookup_elem#1\n  invalid variable stack read R2 var_off=(0xfffffffffffffff0; 0x4)\n\nAdd support for variable offset access to check_stack_boundary so that\nif offset is checked by program to be in a safe range it's accepted by\nverifier.\n\nSigned-off-by: Andrey Ignatov <rdna@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
        "before_after_code_files": [
          "kernel/bpf/verifier.c||kernel/bpf/verifier.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kernel/bpf/verifier.c||kernel/bpf/verifier.c": [
          "File: kernel/bpf/verifier.c -> kernel/bpf/verifier.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2157:     BPF_SIZE(insn->code), BPF_WRITE, -1, true);",
          "2158: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2160: static int __check_stack_boundary(struct bpf_verifier_env *env, u32 regno,",
          "2161:       int off, int access_size,",
          "2162:       bool zero_size_allowed)",
          "2163: {",
          "2164:  struct bpf_reg_state *reg = reg_state(env, regno);",
          "2166:  if (off >= 0 || off < -MAX_BPF_STACK || off + access_size > 0 ||",
          "2167:      access_size < 0 || (access_size == 0 && !zero_size_allowed)) {",
          "2168:   if (tnum_is_const(reg->var_off)) {",
          "2169:    verbose(env, \"invalid stack type R%d off=%d access_size=%d\\n\",",
          "2170:     regno, off, access_size);",
          "2171:   } else {",
          "2172:    char tn_buf[48];",
          "2174:    tnum_strn(tn_buf, sizeof(tn_buf), reg->var_off);",
          "2175:    verbose(env, \"invalid stack type R%d var_off=%s access_size=%d\\n\",",
          "2176:     regno, tn_buf, access_size);",
          "2177:   }",
          "2178:   return -EACCES;",
          "2179:  }",
          "2180:  return 0;",
          "2181: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2169: {",
          "2170:  struct bpf_reg_state *reg = reg_state(env, regno);",
          "2171:  struct bpf_func_state *state = func(env, reg);",
          "2174:  if (reg->type != PTR_TO_STACK) {",
          "",
          "[Removed Lines]",
          "2172:  int off, i, slot, spi;",
          "",
          "[Added Lines]",
          "2195:  int err, min_off, max_off, i, slot, spi;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2183:   return -EACCES;",
          "2184:  }",
          "2201:  }",
          "2203:  if (meta && meta->raw_mode) {",
          "",
          "[Removed Lines]",
          "2187:  if (!tnum_is_const(reg->var_off)) {",
          "2188:   char tn_buf[48];",
          "2190:   tnum_strn(tn_buf, sizeof(tn_buf), reg->var_off);",
          "2191:   verbose(env, \"invalid variable stack read R%d var_off=%s\\n\",",
          "2192:    regno, tn_buf);",
          "2193:   return -EACCES;",
          "2194:  }",
          "2195:  off = reg->off + reg->var_off.value;",
          "2196:  if (off >= 0 || off < -MAX_BPF_STACK || off + access_size > 0 ||",
          "2197:      access_size < 0 || (access_size == 0 && !zero_size_allowed)) {",
          "2198:   verbose(env, \"invalid stack type R%d off=%d access_size=%d\\n\",",
          "2199:    regno, off, access_size);",
          "2200:   return -EACCES;",
          "",
          "[Added Lines]",
          "2209:  if (tnum_is_const(reg->var_off)) {",
          "2210:   min_off = max_off = reg->var_off.value + reg->off;",
          "2211:   err = __check_stack_boundary(env, regno, min_off, access_size,",
          "2212:           zero_size_allowed);",
          "2213:   if (err)",
          "2214:    return err;",
          "2215:  } else {",
          "2216:   min_off = reg->smin_value + reg->off;",
          "2217:   max_off = reg->umax_value + reg->off;",
          "2218:   err = __check_stack_boundary(env, regno, min_off, access_size,",
          "2219:           zero_size_allowed);",
          "2220:   if (err)",
          "2221:    return err;",
          "2222:   err = __check_stack_boundary(env, regno, max_off, access_size,",
          "2223:           zero_size_allowed);",
          "2224:   if (err)",
          "2225:    return err;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2206:   return 0;",
          "2207:  }",
          "2210:   u8 *stype;",
          "2213:   spi = slot / BPF_REG_SIZE;",
          "2214:   if (state->allocated_stack <= slot)",
          "2215:    goto err;",
          "",
          "[Removed Lines]",
          "2209:  for (i = 0; i < access_size; i++) {",
          "2212:   slot = -(off + i) - 1;",
          "",
          "[Added Lines]",
          "2234:  for (i = min_off; i < max_off + access_size; i++) {",
          "2237:   slot = -i - 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2222:    goto mark;",
          "2223:   }",
          "2224: err:",
          "2227:   return -EACCES;",
          "2228: mark:",
          "",
          "[Removed Lines]",
          "2225:   verbose(env, \"invalid indirect read from stack off %d+%d size %d\\n\",",
          "2226:    off, i, access_size);",
          "",
          "[Added Lines]",
          "2250:   if (tnum_is_const(reg->var_off)) {",
          "2251:    verbose(env, \"invalid indirect read from stack off %d+%d size %d\\n\",",
          "2252:     min_off, i - min_off, access_size);",
          "2253:   } else {",
          "2254:    char tn_buf[48];",
          "2256:    tnum_strn(tn_buf, sizeof(tn_buf), reg->var_off);",
          "2257:    verbose(env, \"invalid indirect read from stack var_off %s+%d size %d\\n\",",
          "2258:     tn_buf, i - min_off, access_size);",
          "2259:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2232:   mark_reg_read(env, &state->stack[spi].spilled_ptr,",
          "2233:          state->stack[spi].spilled_ptr.parent);",
          "2234:  }",
          "2236: }",
          "2238: static int check_helper_mem_access(struct bpf_verifier_env *env, int regno,",
          "",
          "[Removed Lines]",
          "2235:  return update_stack_depth(env, state, off);",
          "",
          "[Added Lines]",
          "2268:  return update_stack_depth(env, state, min_off);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee6df5694a9a2e30566ae05e9c145a0f6d5e087f",
      "candidate_info": {
        "commit_hash": "ee6df5694a9a2e30566ae05e9c145a0f6d5e087f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ee6df5694a9a2e30566ae05e9c145a0f6d5e087f",
        "files": [
          "drivers/gpu/drm/i915/i915_debugfs.c"
        ],
        "message": "drm/i915: Always backoff after a drm_modeset_lock() deadlock\n\nIf drm_modeset_lock() reports a deadlock it sets the ctx->contexted\nfield and insists that the caller calls drm_modeset_backoff() or else it\ngenerates a WARN on cleanup.\n\n<4> [1601.870376] WARNING: CPU: 3 PID: 8445 at drivers/gpu/drm/drm_modeset_lock.c:228 drm_modeset_drop_locks+0x35/0x40\n<4> [1601.870395] Modules linked in: vgem snd_hda_codec_hdmi snd_hda_codec_realtek snd_hda_codec_generic x86_pkg_temp_thermal i915 coretemp crct10dif_pclmul\n<6> [1601.870403] Console: switching\n<4> [1601.870403]  snd_hda_intel\n<4> [1601.870406] to colour frame buffer device 320x90\n<4> [1601.870406]  crc32_pclmul snd_hda_codec snd_hwdep ghash_clmulni_intel e1000e snd_hda_core cdc_ether ptp usbnet mii pps_core snd_pcm i2c_i801 mei_me mei prime_numbers\n<4> [1601.870422] CPU: 3 PID: 8445 Comm: cat Tainted: G     U            5.0.0-rc7-CI-CI_DRM_5650+ #1\n<4> [1601.870424] Hardware name: Intel Corporation Ice Lake Client Platform/IceLake U DDR4 SODIMM PD RVP TLC, BIOS ICLSFWR1.R00.2402.AD3.1810170014 10/17/2018\n<4> [1601.870427] RIP: 0010:drm_modeset_drop_locks+0x35/0x40\n<4> [1601.870430] Code: 29 48 8b 43 60 48 8d 6b 60 48 39 c5 74 19 48 8b 43 60 48 8d b8 70 ff ff ff e8 87 ff ff ff 48 8b 43 60 48 39 c5 75 e7 5b 5d c3 <0f> 0b eb d3 0f 1f 80 00 00 00 00 41 56 41 55 41 54 55 53 48 8b 6f\n<4> [1601.870432] RSP: 0018:ffffc90000d67ce8 EFLAGS: 00010282\n<4> [1601.870435] RAX: 00000000ffffffdd RBX: ffffc90000d67d00 RCX: 5dbbe23d00000000\n<4> [1601.870437] RDX: 0000000000000000 RSI: 0000000093e6194a RDI: ffffc90000d67d00\n<4> [1601.870439] RBP: ffff88849e62e678 R08: 0000000003b7329a R09: 0000000000000001\n<4> [1601.870441] R10: 0000000000000000 R11: 0000000000000000 R12: ffff888492100410\n<4> [1601.870442] R13: ffff88849ea50958 R14: ffff8884a67eb028 R15: ffff8884a67eb028\n<4> [1601.870445] FS:  00007fa7a27745c0(0000) GS:ffff8884aff80000(0000) knlGS:0000000000000000\n<4> [1601.870447] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n<4> [1601.870449] CR2: 000055af07e66000 CR3: 00000004a8cc2006 CR4: 0000000000760ee0\n<4> [1601.870451] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n<4> [1601.870453] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n<4> [1601.870454] PKRU: 55555554\n<4> [1601.870456] Call Trace:\n<4> [1601.870505]  i915_dsc_fec_support_show+0x91/0x190 [i915]\n<4> [1601.870522]  seq_read+0xdb/0x3c0\n<4> [1601.870531]  full_proxy_read+0x51/0x80\n<4> [1601.870538]  __vfs_read+0x31/0x190\n<4> [1601.870546]  ? __se_sys_newfstat+0x3c/0x60\n<4> [1601.870552]  vfs_read+0x9e/0x150\n<4> [1601.870557]  ksys_read+0x50/0xc0\n<4> [1601.870564]  do_syscall_64+0x55/0x190\n<4> [1601.870569]  entry_SYSCALL_64_after_hwframe+0x49/0xbe\n<4> [1601.870572] RIP: 0033:0x7fa7a226d081\n<4> [1601.870574] Code: fe ff ff 48 8d 3d 67 9c 0a 00 48 83 ec 08 e8 a6 4c 02 00 66 0f 1f 44 00 00 48 8d 05 81 08 2e 00 8b 00 85 c0 75 13 31 c0 0f 05 <48> 3d 00 f0 ff ff 77 57 f3 c3 0f 1f 44 00 00 41 54 55 49 89 d4 53\n<4> [1601.870576] RSP: 002b:00007ffcc05140c8 EFLAGS: 00000246 ORIG_RAX: 0000000000000000\n<4> [1601.870579] RAX: ffffffffffffffda RBX: 0000000000020000 RCX: 00007fa7a226d081\n<4> [1601.870581] RDX: 0000000000020000 RSI: 000055af07e63000 RDI: 0000000000000007\n<4> [1601.870583] RBP: 0000000000020000 R08: 000000000000007b R09: 0000000000000000\n<4> [1601.870585] R10: 000055af07e60010 R11: 0000000000000246 R12: 000055af07e63000\n<4> [1601.870587] R13: 0000000000000007 R14: 000055af07e634bf R15: 0000000000020000\n\nBugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=109745\nFixes: e845f099f1c6 (\"drm/i915/dsc: Add Per connector debugfs node for DSC support/enable\")\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nCc: Rodrigo Vivi <rodrigo.vivi@intel.com>\nCc: Ville Syrjala <ville.syrjala@linux.intel.com>\nCc: Anusha Srivatsa <anusha.srivatsa@intel.com>\nCc: Lyude Paul <lyude@redhat.com>\nCc: Manasi Navare <manasi.d.navare@intel.com>\nReviewed-by: Manasi Navare <manasi.d.navare@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20190329165152.29259-1-chris@chris-wilson.co.uk",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/i915_debugfs.c||drivers/gpu/drm/i915/i915_debugfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/i915_debugfs.c||drivers/gpu/drm/i915/i915_debugfs.c": [
          "File: drivers/gpu/drm/i915/i915_debugfs.c -> drivers/gpu/drm/i915/i915_debugfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4787:   ret = drm_modeset_lock(&dev->mode_config.connection_mutex,",
          "4788:            &ctx);",
          "4789:   if (ret) {",
          "4791:    break;",
          "4792:   }",
          "4793:   crtc = connector->state->crtc;",
          "",
          "[Removed Lines]",
          "4790:    ret = -EINTR;",
          "",
          "[Added Lines]",
          "4790:    if (ret == -EDEADLK && !drm_modeset_backoff(&ctx)) {",
          "4791:     try_again = true;",
          "4792:     continue;",
          "4793:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}