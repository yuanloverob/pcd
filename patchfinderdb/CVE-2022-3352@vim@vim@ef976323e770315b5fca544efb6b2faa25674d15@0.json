{
  "cve_id": "CVE-2022-3352",
  "cve_desc": "Use After Free in GitHub repository vim/vim prior to 9.0.0614.",
  "repo": "vim/vim",
  "patch_hash": "ef976323e770315b5fca544efb6b2faa25674d15",
  "patch_info": {
    "commit_hash": "ef976323e770315b5fca544efb6b2faa25674d15",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/ef976323e770315b5fca544efb6b2faa25674d15",
    "files": [
      "src/buffer.c",
      "src/spell.c",
      "src/testdir/test_autocmd.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.0614: SpellFileMissing autocmd may delete buffer\n\nProblem:    SpellFileMissing autocmd may delete buffer.\nSolution:   Disallow deleting the current buffer to avoid using freed memory.",
    "before_after_code_files": [
      "src/buffer.c||src/buffer.c",
      "src/spell.c||src/spell.c",
      "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/buffer.c||src/buffer.c": [
      "File: src/buffer.c -> src/buffer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "468:      }",
      "469:     }",
      "470:     if (!can_unload)",
      "472:     return can_unload;",
      "473: }",
      "",
      "[Removed Lines]",
      "471:  semsg(_(e_attempt_to_delete_buffer_that_is_in_use_str), buf->b_fname);",
      "",
      "[Added Lines]",
      "471:     {",
      "472:  char_u *fname = buf->b_fname != NULL ? buf->b_fname : buf->b_ffname;",
      "474:  semsg(_(e_attempt_to_delete_buffer_that_is_in_use_str),",
      "475:     fname != NULL ? fname : (char_u *)\"[No Name]\");",
      "476:     }",
      "",
      "---------------"
    ],
    "src/spell.c||src/spell.c": [
      "File: src/spell.c -> src/spell.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1568:     sl.sl_slang = NULL;",
      "1569:     sl.sl_nobreak = FALSE;",
      "1573:     for (round = 1; round <= 2; ++round)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1573:     ++curbuf->b_locked;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1621:  STRCPY(fname_enc + STRLEN(fname_enc) - 3, \"add.spl\");",
      "1622:  do_in_runtimepath(fname_enc, DIP_ALL, spell_load_cb, &sl);",
      "1623:     }",
      "1624: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1629:     --curbuf->b_locked;",
      "",
      "---------------"
    ],
    "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim": [
      "File: src/testdir/test_autocmd.vim -> src/testdir/test_autocmd.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "2880:   setglobal spellfile=",
      "2881: endfunc",
      "2883: \" Test closing a window or editing another buffer from a FileChangedRO handler",
      "2884: \" in a readonly buffer",
      "2885: func Test_FileChangedRO_winclose()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2883: \" this was wiping out the current buffer and using freed memory",
      "2884: func Test_SpellFileMissing_bwipe()",
      "2885:   next 0",
      "2886:   au SpellFileMissing 0 bwipe",
      "2887:   call assert_fails('set spell spelllang=0', 'E937:')",
      "2889:   au! SpellFileMissing",
      "2890:   bwipe",
      "2891: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "700: static int included_patches[] =",
      "703:     613,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "703:     614,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1474d801bbdb73406dd3d1f931f515f99e86dfa",
      "candidate_info": {
        "commit_hash": "f1474d801bbdb73406dd3d1f931f515f99e86dfa",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/f1474d801bbdb73406dd3d1f931f515f99e86dfa",
        "files": [
          "src/alloc.c",
          "src/arglist.c",
          "src/autocmd.c",
          "src/blob.c",
          "src/blowfish.c",
          "src/buffer.c",
          "src/bufwrite.c",
          "src/errors.h",
          "src/version.c"
        ],
        "message": "patch 8.2.3960: error messages are spread out\n\nProblem:    Error messages are spread out.\nSolution:   Move more errors to errors.h.",
        "before_after_code_files": [
          "src/alloc.c||src/alloc.c",
          "src/arglist.c||src/arglist.c",
          "src/autocmd.c||src/autocmd.c",
          "src/blob.c||src/blob.c",
          "src/blowfish.c||src/blowfish.c",
          "src/buffer.c||src/buffer.c",
          "src/bufwrite.c||src/bufwrite.c",
          "src/errors.h||src/errors.h",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/buffer.c||src/buffer.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/buffer.c||src/buffer.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/alloc.c||src/alloc.c": [
          "File: src/alloc.c -> src/alloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:     {",
          "226:  emsg_silent = 0;",
          "228:  return NULL;",
          "229:     }",
          "",
          "[Removed Lines]",
          "227:  iemsg(_(\"E341: Internal error: lalloc(0, )\"));",
          "",
          "[Added Lines]",
          "227:  iemsg(_(e_internal_error_lalloc_zero));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:  did_outofmem_msg = TRUE;",
          "344:  if (starting == NO_SCREEN)",
          "",
          "[Removed Lines]",
          "342:  semsg(_(\"E342: Out of memory!  (allocating %lu bytes)\"), (long_u)size);",
          "",
          "[Added Lines]",
          "342:  semsg(_(e_out_of_memory_allocating_nr_bytes), (long_u)size);",
          "",
          "---------------"
        ],
        "src/arglist.c||src/arglist.c": [
          "File: src/arglist.c -> src/arglist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "839:  {",
          "840:      if (curwin->w_arg_idx >= ARGCOUNT)",
          "841:      {",
          "843:   return;",
          "844:      }",
          "845:      eap->line1 = eap->line2 = curwin->w_arg_idx + 1;",
          "",
          "[Removed Lines]",
          "842:   emsg(_(\"E610: No argument to delete\"));",
          "",
          "[Added Lines]",
          "842:   emsg(_(e_no_argument_to_delete));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1129:    else if (wpnext->w_frame->fr_parent",
          "1130:        != curwin->w_frame->fr_parent)",
          "1131:    {",
          "1133:        i = count;",
          "1134:        break;",
          "1135:    }",
          "",
          "[Removed Lines]",
          "1132:        emsg(_(\"E249: window layout changed unexpectedly\"));",
          "",
          "[Added Lines]",
          "1132:        emsg(_(e_window_layout_changed_unexpectedly));",
          "",
          "---------------"
        ],
        "src/autocmd.c||src/autocmd.c": [
          "File: src/autocmd.c -> src/autocmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:     i = au_find_group(name);",
          "517:     if (i == AUGROUP_ERROR) // the group doesn't exist",
          "519:     else if (i == current_augroup)",
          "521:     else",
          "522:     {",
          "523:  event_T event;",
          "",
          "[Removed Lines]",
          "518:  semsg(_(\"E367: No such group: \\\"%s\\\"\"), name);",
          "520:  emsg(_(\"E936: Cannot delete the current group\"));",
          "",
          "[Added Lines]",
          "518:  semsg(_(e_no_such_group_str), name);",
          "520:  emsg(_(e_cannot_delete_current_group));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1205:   if (is_buflocal && (buflocal_nr == 0",
          "1206:           || buflist_findnr(buflocal_nr) == NULL))",
          "1207:   {",
          "1210:       return FAIL;",
          "1211:   }",
          "",
          "[Removed Lines]",
          "1208:       semsg(_(\"E680: <buffer=%d>: invalid buffer number \"),",
          "1209:          buflocal_nr);",
          "",
          "[Added Lines]",
          "1208:       semsg(_(e_buffer_nr_invalid_buffer_number), buflocal_nr);",
          "",
          "---------------"
        ],
        "src/blob.c||src/blob.c": [
          "File: src/blob.c -> src/blob.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:     if (n2 - n1 + 1 != blob_len(src->vval.v_blob))",
          "401:     {",
          "403:  return FAIL;",
          "404:     }",
          "",
          "[Removed Lines]",
          "402:  emsg(_(\"E972: Blob value does not have the right number of bytes\"));",
          "",
          "[Added Lines]",
          "402:  emsg(_(e_blob_value_does_not_have_right_number_of_bytes));",
          "",
          "---------------"
        ],
        "src/blowfish.c||src/blowfish.c": [
          "File: src/blowfish.c -> src/blowfish.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416:     keylen = (int)STRLEN(key) / 2;",
          "417:     if (keylen == 0)",
          "418:     {",
          "420:  return;",
          "421:     }",
          "422:     for (i = 0; i < keylen; i++)",
          "",
          "[Removed Lines]",
          "419:  iemsg(_(\"E831: bf_key_init() called with empty password\"));",
          "",
          "[Added Lines]",
          "419:  iemsg(_(e_bf_key_init_called_with_empty_password));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "520:     if (ui != 0xffffffffUL || ui + 1 != 0) {",
          "521:  err++;",
          "523:     }",
          "525:     if (!bf_check_tables(pax_init, sbx_init, 0x6ffa520a))",
          "",
          "[Removed Lines]",
          "522:  emsg(_(\"E820: sizeof(uint32_t) != 4\"));",
          "",
          "[Added Lines]",
          "522:  emsg(_(e_sizeof_uint32_isnot_four));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "540:  if (memcmp(bk.uc, bf_test_data[i].cryptxt, 8) != 0)",
          "541:  {",
          "542:      if (err == 0 && memcmp(bk.uc, bf_test_data[i].badcryptxt, 8) == 0)",
          "544:      err++;",
          "545:  }",
          "546:     }",
          "",
          "[Removed Lines]",
          "543:   emsg(_(\"E817: Blowfish big/little endian use wrong\"));",
          "",
          "[Added Lines]",
          "543:   emsg(_(e_blowfish_big_little_endian_use_wrong));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "672: {",
          "673:     if (sha256_self_test() == FAIL)",
          "674:     {",
          "676:  return FAIL;",
          "677:     }",
          "678:     if (bf_self_test() == FAIL)",
          "679:     {",
          "681:  return FAIL;",
          "682:     }",
          "683:     return OK;",
          "",
          "[Removed Lines]",
          "675:  emsg(_(\"E818: sha256 test failed\"));",
          "680:  emsg(_(\"E819: Blowfish test failed\"));",
          "",
          "[Added Lines]",
          "675:  emsg(_(e_sha256_test_failed));",
          "680:  emsg(_(e_blowfish_test_failed));",
          "",
          "---------------"
        ],
        "src/buffer.c||src/buffer.c": [
          "File: src/buffer.c -> src/buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: static char *msg_loclist = N_(\"[Location List]\");",
          "64: static char *msg_qflist = N_(\"[Quickfix List]\");",
          "65: #endif",
          "69: static int buf_free_count = 0;",
          "",
          "[Removed Lines]",
          "66: static char *e_auabort = N_(\"E855: Autocommands caused command to abort\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427: {",
          "428:     sprintf((char *)buf->b_key, \"%x\", buf->b_fnum);",
          "429:     if (hash_add(&buf_hashtab, buf->b_key) == FAIL)",
          "431: }",
          "433:     static void",
          "",
          "[Removed Lines]",
          "430:  emsg(_(\"E931: Buffer cannot be registered\"));",
          "",
          "[Added Lines]",
          "429:  emsg(_(e_buffer_cannot_be_registered));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "461:      }",
          "462:     }",
          "463:     if (!can_unload)",
          "466:     return can_unload;",
          "467: }",
          "",
          "[Removed Lines]",
          "464:  semsg(_(\"E937: Attempt to delete a buffer that is in use: %s\"),",
          "465:          buf->b_fname);",
          "",
          "[Added Lines]",
          "463:  semsg(_(e_attempt_to_delete_buffer_that_is_in_use_str), buf->b_fname);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "594:  {",
          "596: aucmd_abort:",
          "598:      return FALSE;",
          "599:  }",
          "600:  --buf->b_locked;",
          "",
          "[Removed Lines]",
          "597:      emsg(_(e_auabort));",
          "",
          "[Added Lines]",
          "595:      emsg(_(e_autocommands_caused_command_to_abort));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1660:  if (deleted == 0)",
          "1661:  {",
          "1662:      if (command == DOBUF_UNLOAD)",
          "1664:      else if (command == DOBUF_DEL)",
          "1666:      else",
          "1668:      errormsg = (char *)IObuff;",
          "1669:  }",
          "1670:  else if (deleted >= p_report)",
          "",
          "[Removed Lines]",
          "1663:   STRCPY(IObuff, _(\"E515: No buffers were unloaded\"));",
          "1665:   STRCPY(IObuff, _(\"E516: No buffers were deleted\"));",
          "1667:   STRCPY(IObuff, _(\"E517: No buffers were wiped out\"));",
          "",
          "[Added Lines]",
          "1661:   STRCPY(IObuff, _(e_no_buffers_were_unloaded));",
          "1663:   STRCPY(IObuff, _(e_no_buffers_were_deleted));",
          "1665:   STRCPY(IObuff, _(e_no_buffers_were_wiped_out));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1905: {",
          "1906: #ifdef FEAT_TERMINAL",
          "1907:     if (term_job_running(curbuf->b_term))",
          "1909:     else",
          "1910: #endif",
          "1911:  emsg(_(e_no_write_since_last_change_add_bang_to_override));",
          "",
          "[Removed Lines]",
          "1908:  emsg(_(\"E948: Job still running (add ! to end the job)\"));",
          "",
          "[Added Lines]",
          "1906:  emsg(_(e_job_still_running_add_bang_to_end_the_job));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1916: {",
          "1917: #ifdef FEAT_TERMINAL",
          "1918:     if (term_job_running(buf->b_term))",
          "1920:     else",
          "1921: #endif",
          "1922:  emsg(_(e_no_write_since_last_change));",
          "",
          "[Removed Lines]",
          "1919:  emsg(_(\"E948: Job still running\"));",
          "",
          "[Added Lines]",
          "1917:  emsg(_(e_job_still_running));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5661: {",
          "5662:     if (bt_dontwrite(buf))",
          "5663:     {",
          "5665:  return TRUE;",
          "5666:     }",
          "5667:     return FALSE;",
          "",
          "[Removed Lines]",
          "5664:  emsg(_(\"E382: Cannot write, 'buftype' option is set\"));",
          "",
          "[Added Lines]",
          "5662:  emsg(_(e_cannot_write_buftype_option_is_set));",
          "",
          "---------------"
        ],
        "src/bufwrite.c||src/bufwrite.c": [
          "File: src/bufwrite.c -> src/bufwrite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "667:     int      prev_got_int = got_int;",
          "668:     int      checking_conversion;",
          "669:     int      file_readonly = FALSE;  // overwritten file is read-only",
          "671: #if defined(UNIX)       // XXX fix me sometime?",
          "672:     int      made_writable = FALSE;  // 'w' bit has been set",
          "673: #endif",
          "",
          "[Removed Lines]",
          "670:     static char     *err_readonly = \"is read-only (cannot override: \\\"W\\\" in 'cpoptions')\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "897:      --no_wait_return;",
          "898:      msg_scroll = msg_save;",
          "899:      if (nofile_err)",
          "902:      if (nofile_err",
          "903: #ifdef FEAT_EVAL",
          "",
          "[Removed Lines]",
          "900:   emsg(_(\"E676: No matching autocommands for acwrite buffer\"));",
          "",
          "[Added Lines]",
          "899:   emsg(_(e_no_matching_autocommands_for_acwrite_buffer));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "995:      else",
          "996:      {",
          "997:   errnum = (char_u *)\"E656: \";",
          "999:   buffer = NULL;",
          "1000:   goto fail;",
          "1001:      }",
          "",
          "[Removed Lines]",
          "998:   errmsg = (char_u *)_(\"NetBeans disallows writes of unmodified buffers\");",
          "",
          "[Added Lines]",
          "997:   errmsg = (char_u *)_(e_netbeans_disallows_writes_of_unmodified_buffers);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1003:  else",
          "1004:  {",
          "1005:      errnum = (char_u *)\"E657: \";",
          "1007:      buffer = NULL;",
          "1008:      goto fail;",
          "1009:  }",
          "",
          "[Removed Lines]",
          "1006:      errmsg = (char_u *)_(\"Partial writes disallowed for NetBeans buffers\");",
          "",
          "[Added Lines]",
          "1005:      errmsg = (char_u *)_(e_partial_writes_disallowed_for_netbeans_buffers);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1050:      if (S_ISDIR(st_old.st_mode))",
          "1051:      {",
          "1052:   errnum = (char_u *)\"E502: \";",
          "1054:   goto fail;",
          "1055:      }",
          "1056:      if (mch_nodetype(fname) != NODE_WRITABLE)",
          "1057:      {",
          "1058:   errnum = (char_u *)\"E503: \";",
          "1060:   goto fail;",
          "1061:      }",
          "",
          "[Removed Lines]",
          "1053:   errmsg = (char_u *)_(\"is a directory\");",
          "1059:   errmsg = (char_u *)_(\"is not a file or writable device\");",
          "",
          "[Added Lines]",
          "1052:   errmsg = (char_u *)_(e_is_a_directory);",
          "1058:   errmsg = (char_u *)_(e_is_not_file_or_writable_device);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1072:     if (c == NODE_OTHER)",
          "1073:     {",
          "1074:  errnum = (char_u *)\"E503: \";",
          "1076:  goto fail;",
          "1077:     }",
          "1078:     if (c == NODE_WRITABLE)",
          "",
          "[Removed Lines]",
          "1075:  errmsg = (char_u *)_(\"is not a file or writable device\");",
          "",
          "[Added Lines]",
          "1074:  errmsg = (char_u *)_(e_is_not_file_or_writable_device);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1083:  if (!p_odev)",
          "1084:  {",
          "1085:      errnum = (char_u *)\"E796: \";",
          "1087:      goto fail;",
          "1088:  }",
          "1089: # endif",
          "",
          "[Removed Lines]",
          "1086:      errmsg = (char_u *)_(\"writing to device disabled with 'opendevice' option\");",
          "",
          "[Added Lines]",
          "1085:      errmsg = (char_u *)_(e_writing_to_device_disabled_with_opendevice_option);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1099:  else if (mch_isdir(fname))",
          "1100:  {",
          "1101:      errnum = (char_u *)\"E502: \";",
          "1103:      goto fail;",
          "1104:  }",
          "1105:  if (overwriting)",
          "",
          "[Removed Lines]",
          "1102:      errmsg = (char_u *)_(\"is a directory\");",
          "",
          "[Added Lines]",
          "1101:      errmsg = (char_u *)_(e_is_a_directory);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1118:      if (vim_strchr(p_cpo, CPO_FWRITE) != NULL)",
          "1119:      {",
          "1120:   errnum = (char_u *)\"E504: \";",
          "1122:      }",
          "1123:      else",
          "1124:      {",
          "1125:   errnum = (char_u *)\"E505: \";",
          "1127:      }",
          "1128:      goto fail;",
          "1129:  }",
          "",
          "[Removed Lines]",
          "1121:   errmsg = (char_u *)_(err_readonly);",
          "1126:   errmsg = (char_u *)_(\"is read-only (add ! to override)\");",
          "",
          "[Added Lines]",
          "1120:   errmsg = (char_u *)_(e_is_read_only_cannot_override_W_in_cpoptions);",
          "1125:   errmsg = (char_u *)_(e_is_read_only_add_bang_to_override);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1477:    {",
          "1478:        if (buf_write_bytes(&write_info) == FAIL)",
          "1479:        {",
          "1481:     break;",
          "1482:        }",
          "1483:        ui_breakcheck();",
          "",
          "[Removed Lines]",
          "1480:     errmsg = (char_u *)_(\"E506: Can't write to backup file (add ! to override)\");",
          "",
          "[Added Lines]",
          "1479:     errmsg = (char_u *)_(e_canot_write_to_backup_file_add_bang_to_override);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1489:    }",
          "1491:    if (close(bfd) < 0 && errmsg == NULL)",
          "1493:    if (write_info.bw_len < 0)",
          "1495: #ifdef UNIX",
          "1496:    set_file_time(backup, st_old.st_atime, st_old.st_mtime);",
          "1497: #endif",
          "",
          "[Removed Lines]",
          "1492:        errmsg = (char_u *)_(\"E507: Close error for backup file (add ! to override)\");",
          "1494:        errmsg = (char_u *)_(\"E508: Can't read file for backup (add ! to override)\");",
          "",
          "[Added Lines]",
          "1491:        errmsg = (char_u *)_(e_close_error_for_backup_file_add_bang_to_write_anyway);",
          "1493:        errmsg = (char_u *)_(e_cant_read_file_for_backup_add_bang_to_write_anyway);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1513:      vim_free(copybuf);",
          "1515:      if (backup == NULL && errmsg == NULL)",
          "1518:      if ((some_error || errmsg != NULL) && !forceit)",
          "1519:      {",
          "",
          "[Removed Lines]",
          "1516:   errmsg = (char_u *)_(\"E509: Cannot create backup file (add ! to override)\");",
          "",
          "[Added Lines]",
          "1515:   errmsg = (char_u *)_(e_cannot_create_backup_file_add_bang_to_write_anyway);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1536:      if (file_readonly && vim_strchr(p_cpo, CPO_FWRITE) != NULL)",
          "1537:      {",
          "1538:   errnum = (char_u *)\"E504: \";",
          "1540:   goto fail;",
          "1541:      }",
          "",
          "[Removed Lines]",
          "1539:   errmsg = (char_u *)_(err_readonly);",
          "",
          "[Added Lines]",
          "1538:   errmsg = (char_u *)_(e_is_read_only_cannot_override_W_in_cpoptions);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1608:      }",
          "1609:      if (backup == NULL && !forceit)",
          "1610:      {",
          "1612:   goto fail;",
          "1613:      }",
          "1614:  }",
          "",
          "[Removed Lines]",
          "1611:   errmsg = (char_u *)_(\"E510: Can't make backup file (add ! to override)\");",
          "",
          "[Added Lines]",
          "1610:   errmsg = (char_u *)_(e_cant_make_backup_file_add_bang_to_write_anyway);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1903:    && st.st_ino != st_old.st_ino)",
          "1904:   {",
          "1905:       close(fd);",
          "1907:       goto fail;",
          "1908:   }",
          "1909:      }",
          "",
          "[Removed Lines]",
          "1906:       errmsg = (char_u *)_(\"E949: File changed while writing\");",
          "",
          "[Added Lines]",
          "1905:       errmsg = (char_u *)_(e_file_changed_while_writing);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2229: #endif",
          "2230:  if (close(fd) != 0)",
          "2231:  {",
          "2233:      end = 0;",
          "2234:  }",
          "",
          "[Removed Lines]",
          "2232:      errmsg = (char_u *)_(\"E512: Close failed\");",
          "",
          "[Added Lines]",
          "2231:      errmsg = (char_u *)_(e_close_failed);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2286:      if (write_info.bw_conv_error)",
          "2287:      {",
          "2288:   if (write_info.bw_conv_error_lnum == 0)",
          "2290:   else",
          "2291:   {",
          "2292:       errmsg_allocated = TRUE;",
          "2293:       errmsg = alloc(300);",
          "2295:       (long)write_info.bw_conv_error_lnum);",
          "2296:   }",
          "2297:      }",
          "2298:      else if (got_int)",
          "2299:   errmsg = (char_u *)_(e_interr);",
          "2300:      else",
          "2302:  }",
          "",
          "[Removed Lines]",
          "2289:       errmsg = (char_u *)_(\"E513: write error, conversion failed (make 'fenc' empty to override)\");",
          "2294:       vim_snprintf((char *)errmsg, 300, _(\"E513: write error, conversion failed in line %ld (make 'fenc' empty to override)\"),",
          "2301:   errmsg = (char_u *)_(\"E514: write error (file system full?)\");",
          "",
          "[Added Lines]",
          "2288:       errmsg = (char_u *)_(e_write_error_conversion_failed_make_fenc_empty_to_override);",
          "2293:       vim_snprintf((char *)errmsg, 300, _(e_write_error_conversion_failed_in_line_nr_make_fenc_empty_to_override),",
          "2300:   errmsg = (char_u *)_(e_write_error_file_system_full);",
          "",
          "---------------"
        ],
        "src/errors.h||src/errors.h": [
          "File: src/errors.h -> src/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:  INIT(= N_(\"E229: Cannot start the GUI\"));",
          "498: #if defined(FEAT_GUI) || defined(FEAT_TERMGUICOLORS)",
          "499: EXTERN char e_cannot_allocate_color_str[]",
          "500:  INIT(= N_(\"E254: Cannot allocate color %s\"));",
          "501: #endif",
          "502: EXTERN char e_ambiguous_use_of_user_defined_command[]",
          "503:  INIT(= N_(\"E464: Ambiguous use of user-defined command\"));",
          "504: EXTERN char e_invalid_command[]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498: EXTERN char e_window_layout_changed_unexpectedly[]",
          "499:  INIT(= N_(\"E249: window layout changed unexpectedly\"));",
          "505: EXTERN char e_internal_error_lalloc_zero[]",
          "506:  INIT(= N_(\"E341: Internal error: lalloc(0, )\"));",
          "507: EXTERN char e_out_of_memory_allocating_nr_bytes[]",
          "508:  INIT(= N_(\"E342: Out of memory!  (allocating %lu bytes)\"));",
          "509: EXTERN char e_no_such_group_str[]",
          "510:  INIT(= N_(\"E367: No such group: \\\"%s\\\"\"));",
          "511: EXTERN char e_cannot_write_buftype_option_is_set[]",
          "512:  INIT(= N_(\"E382: Cannot write, 'buftype' option is set\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "506: #ifdef FEAT_EVAL",
          "507: EXTERN char e_invalid_command_str[]",
          "508:  INIT(= N_(\"E476: Invalid command: %s\"));",
          "509: EXTERN char e_cannot_index_a_funcref[]",
          "510:  INIT(= N_(\"E695: Cannot index a Funcref\"));",
          "511: EXTERN char e_list_value_has_more_items_than_targets[]",
          "512:  INIT(= N_(\"E710: List value has more items than targets\"));",
          "513: EXTERN char e_list_value_does_not_have_enough_items[]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523: EXTERN char e_is_a_directory[]",
          "524:  INIT(= N_(\"is a directory\"));",
          "526: EXTERN char e_is_not_file_or_writable_device[]",
          "527:  INIT(= N_(\"is not a file or writable device\"));",
          "530: EXTERN char e_is_read_only_cannot_override_W_in_cpoptions[]",
          "531:  INIT(= N_(\"is read-only (cannot override: \\\"W\\\" in 'cpoptions')\"));",
          "533: EXTERN char e_is_read_only_add_bang_to_override[]",
          "534:  INIT(= N_(\"is read-only (add ! to override)\"));",
          "535: EXTERN char e_canot_write_to_backup_file_add_bang_to_override[]",
          "536:  INIT(= N_(\"E506: Can't write to backup file (add ! to override)\"));",
          "537: EXTERN char e_close_error_for_backup_file_add_bang_to_write_anyway[]",
          "538:  INIT(= N_(\"E507: Close error for backup file (add ! to write anyway)\"));",
          "539: EXTERN char e_cant_read_file_for_backup_add_bang_to_write_anyway[]",
          "540:  INIT(= N_(\"E508: Can't read file for backup (add ! to write anyway)\"));",
          "541: EXTERN char e_cannot_create_backup_file_add_bang_to_write_anyway[]",
          "542:  INIT(= N_(\"E509: Cannot create backup file (add ! to override)\"));",
          "543: EXTERN char e_cant_make_backup_file_add_bang_to_write_anyway[]",
          "544:  INIT(= N_(\"E510: Can't make backup file (add ! to write anyway)\"));",
          "545: EXTERN char e_close_failed[]",
          "546:  INIT(= N_(\"E512: Close failed\"));",
          "547: EXTERN char e_write_error_conversion_failed_make_fenc_empty_to_override[]",
          "548:  INIT(= N_(\"E513: write error, conversion failed (make 'fenc' empty to override)\"));",
          "549: EXTERN char e_write_error_conversion_failed_in_line_nr_make_fenc_empty_to_override[]",
          "550:  INIT(= N_(\"E513: write error, conversion failed in line %ld (make 'fenc' empty to override)\"));",
          "551: EXTERN char e_write_error_file_system_full[]",
          "552:  INIT(= N_(\"E514: write error (file system full?)\"));",
          "553: EXTERN char e_no_buffers_were_unloaded[]",
          "554:  INIT(= N_(\"E515: No buffers were unloaded\"));",
          "555: EXTERN char e_no_buffers_were_deleted[]",
          "556:  INIT(= N_(\"E516: No buffers were deleted\"));",
          "557: EXTERN char e_no_buffers_were_wiped_out[]",
          "558:  INIT(= N_(\"E517: No buffers were wiped out\"));",
          "560: EXTERN char e_no_argument_to_delete[]",
          "561:  INIT(= N_(\"E610: No argument to delete\"));",
          "562: #ifdef FEAT_NETBEANS_INTG",
          "564: EXTERN char e_netbeans_disallows_writes_of_unmodified_buffers[]",
          "565:  INIT(= N_(\"NetBeans disallows writes of unmodified buffers\"));",
          "567: EXTERN char e_partial_writes_disallowed_for_netbeans_buffers[]",
          "568:  INIT(= N_(\"Partial writes disallowed for NetBeans buffers\"));",
          "569: #endif",
          "570: EXTERN char e_no_matching_autocommands_for_acwrite_buffer[]",
          "571:  INIT(= N_(\"E676: No matching autocommands for acwrite buffer\"));",
          "572: EXTERN char e_buffer_nr_invalid_buffer_number[]",
          "573:  INIT(= N_(\"E680: <buffer=%d>: invalid buffer number\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "528:  INIT(= N_(\"E794: Cannot set variable in the sandbox: \\\"%s\\\"\"));",
          "529: EXTERN char e_cannot_delete_variable[]",
          "530:  INIT(= N_(\"E795: Cannot delete variable\"));",
          "531: EXTERN char e_cannot_delete_variable_str[]",
          "532:  INIT(= N_(\"E795: Cannot delete variable %s\"));",
          "533: #endif",
          "534: EXTERN char e_conflicts_with_value_of_listchars[]",
          "535:  INIT(= N_(\"E834: Conflicts with value of 'listchars'\"));",
          "536: EXTERN char e_conflicts_with_value_of_fillchars[]",
          "537:  INIT(= N_(\"E835: Conflicts with value of 'fillchars'\"));",
          "538: #ifdef FEAT_EVAL",
          "539: EXTERN char e_assert_fails_second_arg[]",
          "540:  INIT(= N_(\"E856: \\\"assert_fails()\\\" second argument must be a string or a list with one or two strings\"));",
          "541: EXTERN char e_using_invalid_value_as_string_str[]",
          "542:  INIT(= N_(\"E908: using an invalid value as a String: %s\"));",
          "543: EXTERN char e_cannot_index_special_variable[]",
          "544:  INIT(= N_(\"E909: Cannot index a special variable\"));",
          "545: #endif",
          "546: EXTERN char_u e_invalid_column_number_nr[]",
          "547:  INIT(= N_(\"E964: Invalid column number: %ld\"));",
          "548: EXTERN char_u e_invalid_line_number_nr[]",
          "549:  INIT(= N_(\"E966: Invalid line number: %ld\"));",
          "550: EXTERN char e_command_not_supported_in_vim9_script_missing_var_str[]",
          "551:  INIT(= N_(\"E1100: Command not supported in Vim9 script (missing :var?): %s\"));",
          "552: #ifdef FEAT_EVAL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598: EXTERN char e_writing_to_device_disabled_with_opendevice_option[]",
          "599:  INIT(= N_(\"writing to device disabled with 'opendevice' option\"));",
          "604: EXTERN char e_blowfish_big_little_endian_use_wrong[]",
          "605:  INIT(= N_(\"E817: Blowfish big/little endian use wrong\"));",
          "606: EXTERN char e_sha256_test_failed[]",
          "607:  INIT(= N_(\"E818: sha256 test failed\"));",
          "608: EXTERN char e_blowfish_test_failed[]",
          "609:  INIT(= N_(\"E819: Blowfish test failed\"));",
          "610: EXTERN char e_sizeof_uint32_isnot_four[]",
          "611:  INIT(= N_(\"E820: sizeof(uint32_t) != 4\"));",
          "612: EXTERN char e_bf_key_init_called_with_empty_password[]",
          "613:  INIT(= N_(\"E831: bf_key_init() called with empty password\"));",
          "618: EXTERN char e_autocommands_caused_command_to_abort[]",
          "619:  INIT(= N_(\"E855: Autocommands caused command to abort\"));",
          "629: EXTERN char e_buffer_cannot_be_registered[]",
          "630:  INIT(= N_(\"E931: Buffer cannot be registered\"));",
          "631: EXTERN char e_cannot_delete_current_group[]",
          "632:  INIT(= N_(\"E936: Cannot delete the current group\"));",
          "633: EXTERN char e_attempt_to_delete_buffer_that_is_in_use_str[]",
          "634:  INIT(= N_(\"E937: Attempt to delete a buffer that is in use: %s\"));",
          "635: #ifdef FEAT_TERMINAL",
          "636: EXTERN char e_job_still_running[]",
          "637:  INIT(= N_(\"E948: Job still running\"));",
          "638: EXTERN char e_job_still_running_add_bang_to_end_the_job[]",
          "639:  INIT(= N_(\"E948: Job still running (add ! to end the job)\"));",
          "640: EXTERN char e_file_changed_while_writing[]",
          "641:  INIT(= N_(\"E949: File changed while writing\"));",
          "642: #endif",
          "647: EXTERN char e_blob_value_does_not_have_right_number_of_bytes[]",
          "648:  INIT(= N_(\"E972: Blob value does not have the right number of bytes\"));",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "750: static int included_patches[] =",
          "753:     3959,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:     3960,",
          "",
          "---------------"
        ]
      }
    }
  ]
}