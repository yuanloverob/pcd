{
  "cve_id": "CVE-2018-5336",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.3 and 2.2.0 to 2.2.11, the JSON, XML, NTP, XMPP, and GDB dissectors could crash. This was addressed in epan/tvbparse.c by limiting the recursion depth.",
  "repo": "wireshark/wireshark",
  "patch_hash": "94479aded162aecce6289bdf26f95073bed0dc55",
  "patch_info": {
    "commit_hash": "94479aded162aecce6289bdf26f95073bed0dc55",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/94479aded162aecce6289bdf26f95073bed0dc55",
    "files": [
      "epan/tvbparse.c",
      "epan/tvbparse.h"
    ],
    "message": "Limit tvbparse recursion.\n\nAdd a recursion check to tvbparse so that we don't overflow our stack.\n\nBug: 14253\nChange-Id: I0f667c3720311318267a1184b33e33253f8ff729\nReviewed-on: https://code.wireshark.org/review/25202\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/tvbparse.c||epan/tvbparse.c",
      "epan/tvbparse.h||epan/tvbparse.h"
    ]
  },
  "patch_diff": {
    "epan/tvbparse.c||epan/tvbparse.c": [
      "File: epan/tvbparse.c -> epan/tvbparse.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "80: #define TVBPARSE_DEBUG (TVBPARSE_DEBUG_SOME)",
      "83: static tvbparse_elem_t* new_tok(tvbparse_t* tt,",
      "84:                                 int id,",
      "85:                                 int offset,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "83: #define TVBPARSE_MAX_RECURSION_DEPTH 100 // Arbitrary. Matches DAAP and PNIO.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "410:     if ( offset > tt->end_offset )",
      "411:         return -1;",
      "413:     for(i=0; i < wanted->control.elems->len; i++) {",
      "414:         tvbparse_wanted_t* w = (tvbparse_wanted_t *)g_ptr_array_index(wanted->control.elems,i);",
      "415:         tvbparse_elem_t* new_elem = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "415:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
      "416:         return -1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "486:     if ( offset > tt->end_offset )",
      "487:         return -1;",
      "489:     key_len = wanted->control.hash.key->condition(tt, offset, wanted->control.hash.key,  &key_elem);",
      "491:     if (key_len < 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "494:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
      "495:         return -1;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "574:     int start = offset;",
      "575:     tvbparse_elem_t* ret_tok = NULL;",
      "579: #ifdef TVBPARSE_DEBUG",
      "580:     if (TVBPARSE_DEBUG & TVBPARSE_DEBUG_SEQ) ws_g_warning(\"cond_seq: START\");",
      "581: #endif",
      "583:     for(i=0; i < wanted->control.elems->len; i++) {",
      "584:         tvbparse_wanted_t* w = (tvbparse_wanted_t *)g_ptr_array_index(wanted->control.elems,i);",
      "585:         tvbparse_elem_t* new_elem = NULL;",
      "",
      "[Removed Lines]",
      "577:     if ( offset > tt->end_offset )",
      "578:         return -1;",
      "",
      "[Added Lines]",
      "589:     if ( offset > tt->end_offset )",
      "590:         return -1;",
      "592:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
      "593:         return -1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "657:     if ( offset > tt->end_offset )",
      "658:         return -1;",
      "660:     if ( wanted->min == 0 ) {",
      "661:         ret_tok = new_tok(tt,wanted->id,offset,0,wanted);",
      "662:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
      "673:         return -1;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "744:     if ( offset + wanted->control.until.subelem->len > tt->end_offset )",
      "745:         return -1;",
      "747:     do {",
      "748:         len = wanted->control.until.subelem->condition(tt, target_offset++, wanted->control.until.subelem,  &new_elem);",
      "749:     } while(len < 0  && target_offset+1 < tt->end_offset);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "762:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
      "763:         return -1;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1202:     tt->end_offset = offset + len;",
      "1203:     tt->data = data;",
      "1204:     tt->ignore = ignore;",
      "1205:     return tt;",
      "1206: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1223:     tt->recursion_depth = 0;",
      "",
      "---------------"
    ],
    "epan/tvbparse.h||epan/tvbparse.h": [
      "File: epan/tvbparse.h -> epan/tvbparse.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "148:     int end_offset;",
      "149:     void* data;",
      "150:     const tvbparse_wanted_t* ignore;",
      "151: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "151:     int recursion_depth;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "374e3d4bcf22abc0cb26feec2ac4978ccec61351",
      "candidate_info": {
        "commit_hash": "374e3d4bcf22abc0cb26feec2ac4978ccec61351",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/374e3d4bcf22abc0cb26feec2ac4978ccec61351",
        "files": [
          "epan/tvbparse.c",
          "epan/tvbparse.h"
        ],
        "message": "Limit tvbparse recursion.\n\nAdd a recursion check to tvbparse so that we don't overflow our stack.\n\nBug: 14253\nChange-Id: I0f667c3720311318267a1184b33e33253f8ff729\nReviewed-on: https://code.wireshark.org/review/25202\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 94479aded162aecce6289bdf26f95073bed0dc55)\nReviewed-on: https://code.wireshark.org/review/25211\nPetri-Dish: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/tvbparse.c||epan/tvbparse.c",
          "epan/tvbparse.h||epan/tvbparse.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/tvbparse.c||epan/tvbparse.c",
            "epan/tvbparse.h||epan/tvbparse.h"
          ],
          "candidate": [
            "epan/tvbparse.c||epan/tvbparse.c",
            "epan/tvbparse.h||epan/tvbparse.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/tvbparse.c||epan/tvbparse.c": [
          "File: epan/tvbparse.c -> epan/tvbparse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: #define TVBPARSE_DEBUG (TVBPARSE_DEBUG_SOME)",
          "83: static tvbparse_elem_t* new_tok(tvbparse_t* tt,",
          "84:                                 int id,",
          "85:                                 int offset,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: #define TVBPARSE_MAX_RECURSION_DEPTH 100 // Arbitrary. Matches DAAP and PNIO.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "410:     if ( offset > tt->end_offset )",
          "411:         return -1;",
          "413:     for(i=0; i < wanted->control.elems->len; i++) {",
          "414:         tvbparse_wanted_t* w = (tvbparse_wanted_t *)g_ptr_array_index(wanted->control.elems,i);",
          "415:         tvbparse_elem_t* new_elem = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "415:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
          "416:         return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "486:     if ( offset > tt->end_offset )",
          "487:         return -1;",
          "489:     key_len = wanted->control.hash.key->condition(tt, offset, wanted->control.hash.key,  &key_elem);",
          "491:     if (key_len < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
          "495:         return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "574:     int start = offset;",
          "575:     tvbparse_elem_t* ret_tok = NULL;",
          "579: #ifdef TVBPARSE_DEBUG",
          "580:     if (TVBPARSE_DEBUG & TVBPARSE_DEBUG_SEQ) ws_g_warning(\"cond_seq: START\");",
          "581: #endif",
          "583:     for(i=0; i < wanted->control.elems->len; i++) {",
          "584:         tvbparse_wanted_t* w = (tvbparse_wanted_t *)g_ptr_array_index(wanted->control.elems,i);",
          "585:         tvbparse_elem_t* new_elem = NULL;",
          "",
          "[Removed Lines]",
          "577:     if ( offset > tt->end_offset )",
          "578:         return -1;",
          "",
          "[Added Lines]",
          "589:     if ( offset > tt->end_offset )",
          "590:         return -1;",
          "592:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
          "593:         return -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "657:     if ( offset > tt->end_offset )",
          "658:         return -1;",
          "660:     if ( wanted->min == 0 ) {",
          "661:         ret_tok = new_tok(tt,wanted->id,offset,0,wanted);",
          "662:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "672:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
          "673:         return -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "744:     if ( offset + wanted->control.until.subelem->len > tt->end_offset )",
          "745:         return -1;",
          "747:     do {",
          "748:         len = wanted->control.until.subelem->condition(tt, target_offset++, wanted->control.until.subelem,  &new_elem);",
          "749:     } while(len < 0  && target_offset+1 < tt->end_offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
          "763:         return -1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1202:     tt->end_offset = offset + len;",
          "1203:     tt->data = data;",
          "1204:     tt->ignore = ignore;",
          "1205:     return tt;",
          "1206: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1223:     tt->recursion_depth = 0;",
          "",
          "---------------"
        ],
        "epan/tvbparse.h||epan/tvbparse.h": [
          "File: epan/tvbparse.h -> epan/tvbparse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     int end_offset;",
          "149:     void* data;",
          "150:     const tvbparse_wanted_t* ignore;",
          "151: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:     int recursion_depth;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f4c95cf46ba6adbd10b09747e10742801bc706b",
      "candidate_info": {
        "commit_hash": "4f4c95cf46ba6adbd10b09747e10742801bc706b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4f4c95cf46ba6adbd10b09747e10742801bc706b",
        "files": [
          "epan/tvbparse.c",
          "epan/tvbparse.h"
        ],
        "message": "Limit tvbparse recursion.\n\nAdd a recursion check to tvbparse so that we don't overflow our stack.\n\nBug: 14253\nChange-Id: I0f667c3720311318267a1184b33e33253f8ff729\nReviewed-on: https://code.wireshark.org/review/25202\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 94479aded162aecce6289bdf26f95073bed0dc55)\nReviewed-on: https://code.wireshark.org/review/25212\nPetri-Dish: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/tvbparse.c||epan/tvbparse.c",
          "epan/tvbparse.h||epan/tvbparse.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/tvbparse.c||epan/tvbparse.c",
            "epan/tvbparse.h||epan/tvbparse.h"
          ],
          "candidate": [
            "epan/tvbparse.c||epan/tvbparse.c",
            "epan/tvbparse.h||epan/tvbparse.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/tvbparse.c||epan/tvbparse.c": [
          "File: epan/tvbparse.c -> epan/tvbparse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:     if ( offset > tt->end_offset )",
          "410:         return -1;",
          "412:     for(i=0; i < wanted->control.elems->len; i++) {",
          "413:         tvbparse_wanted_t* w = (tvbparse_wanted_t *)g_ptr_array_index(wanted->control.elems,i);",
          "414:         tvbparse_elem_t* new_elem = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
          "415:         return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "485:     if ( offset > tt->end_offset )",
          "486:         return -1;",
          "488:     key_len = wanted->control.hash.key->condition(tt, offset, wanted->control.hash.key,  &key_elem);",
          "490:     if (key_len < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
          "494:         return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "573:     int start = offset;",
          "574:     tvbparse_elem_t* ret_tok = NULL;",
          "578: #ifdef TVBPARSE_DEBUG",
          "579:     if (TVBPARSE_DEBUG & TVBPARSE_DEBUG_SEQ) g_warning(\"cond_seq: START\");",
          "580: #endif",
          "582:     for(i=0; i < wanted->control.elems->len; i++) {",
          "583:         tvbparse_wanted_t* w = (tvbparse_wanted_t *)g_ptr_array_index(wanted->control.elems,i);",
          "584:         tvbparse_elem_t* new_elem = NULL;",
          "",
          "[Removed Lines]",
          "576:     if ( offset > tt->end_offset )",
          "577:         return -1;",
          "",
          "[Added Lines]",
          "588:     if ( offset > tt->end_offset )",
          "589:         return -1;",
          "591:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
          "592:         return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "656:     if ( offset > tt->end_offset )",
          "657:         return -1;",
          "659:     if ( wanted->min == 0 ) {",
          "660:         ret_tok = new_tok(tt,wanted->id,offset,0,wanted);",
          "661:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "671:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
          "672:         return -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "743:     if ( offset + wanted->control.until.subelem->len > tt->end_offset )",
          "744:         return -1;",
          "746:     do {",
          "747:         len = wanted->control.until.subelem->condition(tt, target_offset++, wanted->control.until.subelem,  &new_elem);",
          "748:     } while(len < 0  && target_offset+1 < tt->end_offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:     if (++tt->recursion_depth > TVBPARSE_MAX_RECURSION_DEPTH)",
          "762:         return -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1201:     tt->end_offset = offset + len;",
          "1202:     tt->data = data;",
          "1203:     tt->ignore = ignore;",
          "1204:     return tt;",
          "1205: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1222:     tt->recursion_depth = 0;",
          "",
          "---------------"
        ],
        "epan/tvbparse.h||epan/tvbparse.h": [
          "File: epan/tvbparse.h -> epan/tvbparse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     int end_offset;",
          "149:     void* data;",
          "150:     const tvbparse_wanted_t* ignore;",
          "151: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:     int recursion_depth;",
          "",
          "---------------"
        ]
      }
    }
  ]
}