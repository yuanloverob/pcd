{
  "cve_id": "CVE-2020-15212",
  "cve_desc": "In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger writes outside of bounds of heap allocated buffers by inserting negative elements in the segment ids tensor. Users having access to `segment_ids_data` can alter `output_index` and then write to outside of `output_data` buffer. This might result in a segmentation fault but it can also be used to further corrupt the memory and can be chained with other vulnerabilities to create more advanced exploits. The issue is patched in commit 204945b19e44b57906c9344c0d00120eeeae178a and is released in TensorFlow versions 2.2.1, or 2.3.1. A potential workaround would be to add a custom `Verifier` to the model loading code to ensure that the segment ids are all positive, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "204945b19e44b57906c9344c0d00120eeeae178a",
  "patch_info": {
    "commit_hash": "204945b19e44b57906c9344c0d00120eeeae178a",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a",
    "files": [
      "tensorflow/lite/kernels/segment_sum.cc",
      "tensorflow/lite/kernels/segment_sum_test.cc"
    ],
    "message": "[tflite] Validate segment ids for segment_sum.\n\nSegment identifiers in segment_sum should be in a 1-D tensor of same size as the first dimension of the input. The values of the tensor should be integers from {0, 1, 2, ... k-1}, where k is the first dimension of the input. The segment identifiers must not contain jumps and must be increasing.\n\nSee https://www.tensorflow.org/api_docs/python/tf/math#Segmentation as the source for these constraints.\n\nPiperOrigin-RevId: 332510942\nChange-Id: I898beaba00642c918bcd4b4d4ce893ebb190d869",
    "before_after_code_files": [
      "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc",
      "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc": [
      "File: tensorflow/lite/kernels/segment_sum.cc -> tensorflow/lite/kernels/segment_sum.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:                                 const TfLiteTensor* data,",
      "35:                                 const TfLiteTensor* segment_ids,",
      "36:                                 TfLiteTensor* output) {",
      "38:   const int segment_id_size = segment_ids->dims->data[0];",
      "41:   }",
      "42:   const int data_rank = NumDimensions(data);",
      "43:   TfLiteIntArray* output_shape = TfLiteIntArrayCreate(NumDimensions(data));",
      "44:   output_shape->data[0] = max_index + 1;",
      "",
      "[Removed Lines]",
      "37:   int max_index = -1;",
      "39:   if (segment_id_size > 0) {",
      "40:     max_index = segment_ids->data.i32[segment_id_size - 1];",
      "",
      "[Added Lines]",
      "40:   TF_LITE_ENSURE_EQ(context, segment_id_size, data->dims->data[0]);",
      "41:   int previous_segment_id = -1;",
      "42:   for (int i = 0; i < segment_id_size; i++) {",
      "43:     const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];",
      "44:     if (i == 0) {",
      "45:       TF_LITE_ENSURE_EQ(context, current_segment_id, 0);",
      "46:     } else {",
      "47:       int delta = current_segment_id - previous_segment_id;",
      "48:       TF_LITE_ENSURE(context, delta == 0 || delta == 1);",
      "49:     }",
      "50:     previous_segment_id = current_segment_id;",
      "53:   const int max_index = previous_segment_id;",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc": [
      "File: tensorflow/lite/kernels/segment_sum_test.cc -> tensorflow/lite/kernels/segment_sum_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "110:   EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2, 2, 1}));",
      "111: }",
      "113: }  // namespace",
      "114: }  // namespace tflite",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "113: TEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNotSorted) {",
      "114:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},",
      "115:                                    {TensorType_INT32, {3}});",
      "116:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
      "117:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 3, 1});",
      "118:   ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);",
      "119: }",
      "121: TEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNotConsecutive) {",
      "122:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},",
      "123:                                    {TensorType_INT32, {3}});",
      "124:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
      "125:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 3, 5});",
      "126:   ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);",
      "127: }",
      "129: TEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNegative) {",
      "130:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},",
      "131:                                    {TensorType_INT32, {3}});",
      "132:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
      "133:   model.PopulateTensor<int32_t>(model.segment_ids(), {-1, 0, 1});",
      "134:   ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);",
      "135: }",
      "137: TEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNotTheRightCardinality) {",
      "138:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},",
      "139:                                    {TensorType_INT32, {2}});",
      "140:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
      "141:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 1});",
      "142:   ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);",
      "143: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e07863b456abff13b9499335b7cd8f0379c06c32",
      "candidate_info": {
        "commit_hash": "e07863b456abff13b9499335b7cd8f0379c06c32",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/e07863b456abff13b9499335b7cd8f0379c06c32",
        "files": [
          "tensorflow/lite/builtin_ops.h",
          "tensorflow/lite/core/api/flatbuffer_conversions.cc",
          "tensorflow/lite/kernels/BUILD",
          "tensorflow/lite/kernels/builtin_op_kernels.h",
          "tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "tensorflow/lite/kernels/register.cc",
          "tensorflow/lite/kernels/register_ref.cc",
          "tensorflow/lite/kernels/segment_sum.cc",
          "tensorflow/lite/kernels/segment_sum_test.cc",
          "tensorflow/lite/schema/schema.fbs",
          "tensorflow/lite/schema/schema_generated.h",
          "tensorflow/lite/toco/model.h",
          "tensorflow/lite/toco/tflite/op_version.cc"
        ],
        "message": "Add segment_sum op to Tensorflow Lite\n\nPiperOrigin-RevId: 289377531\nChange-Id: Ie8aa95ca9d6b32eb2c5eb8a11c96d6ed3b3464d9",
        "before_after_code_files": [
          "tensorflow/lite/builtin_ops.h||tensorflow/lite/builtin_ops.h",
          "tensorflow/lite/core/api/flatbuffer_conversions.cc||tensorflow/lite/core/api/flatbuffer_conversions.cc",
          "tensorflow/lite/kernels/builtin_op_kernels.h||tensorflow/lite/kernels/builtin_op_kernels.h",
          "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "tensorflow/lite/kernels/register.cc||tensorflow/lite/kernels/register.cc",
          "tensorflow/lite/kernels/register_ref.cc||tensorflow/lite/kernels/register_ref.cc",
          "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc",
          "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc",
          "tensorflow/lite/schemschema.fbs||tensorflow/lite/schema/schema.fbs",
          "tensorflow/lite/schemschema_generated.h||tensorflow/lite/schema/schema_generated.h",
          "tensorflow/lite/toco/model.h||tensorflow/lite/toco/model.h",
          "tensorflow/lite/toco/tflite/op_version.cc||tensorflow/lite/toco/tflite/op_version.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc",
            "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc",
            "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/builtin_ops.h||tensorflow/lite/builtin_ops.h": [
          "File: tensorflow/lite/builtin_ops.h -> tensorflow/lite/builtin_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:   kTfLiteBuiltinScatterNd = 122,",
          "152:   kTfLiteBuiltinSelectV2 = 123,",
          "153:   kTfLiteBuiltinDensify = 124,",
          "154: } TfLiteBuiltinOperator;",
          "156: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:   kTfLiteBuiltinSegmentSum = 125,",
          "",
          "---------------"
        ],
        "tensorflow/lite/core/api/flatbuffer_conversions.cc||tensorflow/lite/core/api/flatbuffer_conversions.cc": [
          "File: tensorflow/lite/core/api/flatbuffer_conversions.cc -> tensorflow/lite/core/api/flatbuffer_conversions.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "826:     case BuiltinOperator_NON_MAX_SUPPRESSION_V5:",
          "827:     case BuiltinOperator_SCATTER_ND:",
          "828:     case BuiltinOperator_DENSIFY:",
          "829:       break;",
          "830:   }",
          "831:   return kTfLiteOk;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829:     case BuiltinOperator_SEGMENT_SUM:",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/builtin_op_kernels.h||tensorflow/lite/kernels/builtin_op_kernels.h": [
          "File: tensorflow/lite/kernels/builtin_op_kernels.h -> tensorflow/lite/kernels/builtin_op_kernels.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: TfLiteRegistration* Register_ROUND();",
          "119: TfLiteRegistration* Register_RSQRT();",
          "120: TfLiteRegistration* Register_SCATTER_ND();",
          "121: TfLiteRegistration* Register_SELECT();",
          "122: TfLiteRegistration* Register_SELECT_V2();",
          "123: TfLiteRegistration* Register_SHAPE();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: TfLiteRegistration* Register_SEGMENT_SUM();",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3033:   }",
          "3034: }",
          "3036: }  // namespace reference_ops",
          "3037: }  // namespace tflite",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3036: template <typename T>",
          "3037: inline void SegmentSum(const RuntimeShape& input_shape, const T* input_data,",
          "3038:                        const RuntimeShape& segment_ids_shape,",
          "3039:                        const int32_t* segment_ids_data,",
          "3040:                        const RuntimeShape& output_shape, T* output_data) {",
          "3041:   const int segment_flat_size =",
          "3042:       MatchingFlatSizeSkipDim(input_shape, 0, output_shape);",
          "3044:   memset(output_data, 0, sizeof(T) * output_shape.FlatSize());",
          "3046:   for (int i = 0; i < input_shape.Dims(0); i++) {",
          "3047:     int output_index = segment_ids_data[i];",
          "3048:     for (int j = 0; j < segment_flat_size; ++j) {",
          "3049:       output_data[output_index * segment_flat_size + j] +=",
          "3050:           input_data[i * segment_flat_size + j];",
          "3051:     }",
          "3052:   }",
          "3053: }",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/register.cc||tensorflow/lite/kernels/register.cc": [
          "File: tensorflow/lite/kernels/register.cc -> tensorflow/lite/kernels/register.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:              Register_NON_MAX_SUPPRESSION_V5());",
          "282:   AddBuiltin(BuiltinOperator_SCATTER_ND, Register_SCATTER_ND());",
          "283:   AddBuiltin(BuiltinOperator_DENSIFY, Register_DENSIFY());",
          "284:   AddCustom(\"NumericVerify\", tflite::ops::custom::Register_NUMERIC_VERIFY());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:   AddBuiltin(BuiltinOperator_SEGMENT_SUM, Register_SEGMENT_SUM());",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/register_ref.cc||tensorflow/lite/kernels/register_ref.cc": [
          "File: tensorflow/lite/kernels/register_ref.cc -> tensorflow/lite/kernels/register_ref.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: TfLiteRegistration* Register_HARD_SWISH_REF();",
          "134: TfLiteRegistration* Register_DEPTH_TO_SPACE_REF();",
          "135: TfLiteRegistration* Register_SELECT_V2();",
          "137: namespace {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: TfLiteRegistration* Register_SEGMENT_SUM();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:   AddBuiltin(BuiltinOperator_QUANTIZE, Register_QUANTIZE());",
          "287:   AddBuiltin(BuiltinOperator_HARD_SWISH, Register_HARD_SWISH_REF());",
          "288:   AddBuiltin(BuiltinOperator_SELECT_V2, Register_SELECT_V2());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:   AddBuiltin(BuiltinOperator_SEGMENT_SUM, Register_SEGMENT_SUM());",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc": [
          "File: tensorflow/lite/kernels/segment_sum.cc -> tensorflow/lite/kernels/segment_sum.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #include \"tensorflow/lite/c/builtin_op_data.h\"",
          "17: #include \"tensorflow/lite/c/common.h\"",
          "18: #include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"",
          "19: #include \"tensorflow/lite/kernels/internal/tensor.h\"",
          "20: #include \"tensorflow/lite/kernels/kernel_util.h\"",
          "22: namespace tflite {",
          "23: namespace ops {",
          "24: namespace builtin {",
          "25: namespace segment_sum {",
          "27: static const int kInputDataTensor = 0;",
          "28: static const int kInputSegmentIdsTensor = 1;",
          "29: static const int kOutputTensor = 0;",
          "31: TfLiteStatus ResizeOutputTensor(TfLiteContext* context,",
          "32:                                 const TfLiteTensor* data,",
          "33:                                 const TfLiteTensor* segment_ids,",
          "34:                                 TfLiteTensor* output) {",
          "35:   int max_index = -1;",
          "36:   const int segment_id_size = segment_ids->dims->data[0];",
          "37:   if (segment_id_size > 0) {",
          "38:     max_index = segment_ids->data.i32[segment_id_size - 1];",
          "39:   }",
          "40:   const int data_rank = NumDimensions(data);",
          "41:   TfLiteIntArray* output_shape = TfLiteIntArrayCreate(NumDimensions(data));",
          "42:   output_shape->data[0] = max_index + 1;",
          "43:   for (int i = 1; i < data_rank; ++i) {",
          "44:     output_shape->data[i] = data->dims->data[i];",
          "45:   }",
          "46:   return context->ResizeTensor(context, output, output_shape);",
          "47: }",
          "49: TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {",
          "50:   TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);",
          "51:   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);",
          "52:   const TfLiteTensor* data = GetInput(context, node, kInputDataTensor);",
          "53:   const TfLiteTensor* segment_ids =",
          "54:       GetInput(context, node, kInputSegmentIdsTensor);",
          "55:   TfLiteTensor* output = GetOutput(context, node, kOutputTensor);",
          "57:   TF_LITE_ENSURE(context,",
          "58:                  data->type == kTfLiteInt32 || data->type == kTfLiteFloat32);",
          "59:   TF_LITE_ENSURE_EQ(context, segment_ids->type, kTfLiteInt32);",
          "61:   if (!IsConstantTensor(data) || !IsConstantTensor(segment_ids)) {",
          "62:     SetTensorToDynamic(output);",
          "63:     return kTfLiteOk;",
          "64:   }",
          "66:   return ResizeOutputTensor(context, data, segment_ids, output);",
          "67: }",
          "69: TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {",
          "70:   const TfLiteTensor* data = GetInput(context, node, kInputDataTensor);",
          "71:   const TfLiteTensor* segment_ids =",
          "72:       GetInput(context, node, kInputSegmentIdsTensor);",
          "73:   TfLiteTensor* output = GetOutput(context, node, kOutputTensor);",
          "75:   if (IsDynamicTensor(output)) {",
          "76:     TF_LITE_ENSURE_OK(context,",
          "77:                       ResizeOutputTensor(context, data, segment_ids, output));",
          "78:   }",
          "80: #define TF_LITE_SEGMENT_SUM(dtype)                                      \\",
          "81:   reference_ops::SegmentSum<dtype>(                                     \\",
          "82:       GetTensorShape(data), GetTensorData<dtype>(data),                 \\",
          "83:       GetTensorShape(segment_ids), GetTensorData<int32_t>(segment_ids), \\",
          "84:       GetTensorShape(output), GetTensorData<dtype>(output));",
          "85:   switch (data->type) {",
          "86:     case kTfLiteInt32:",
          "87:       TF_LITE_SEGMENT_SUM(int32_t);",
          "88:       break;",
          "89:     case kTfLiteFloat32:",
          "90:       TF_LITE_SEGMENT_SUM(float);",
          "91:       break;",
          "92:     default:",
          "93:       context->ReportError(context,",
          "94:                            \"Currently SegmentSum doesn't support type: %s\",",
          "95:                            TfLiteTypeGetName(data->type));",
          "96:       return kTfLiteError;",
          "97:   }",
          "98: #undef TF_LITE_SEGMENT_SUM",
          "99:   return kTfLiteOk;",
          "100: }",
          "102: }  // namespace segment_sum",
          "104: TfLiteRegistration* Register_SEGMENT_SUM() {",
          "105:   static TfLiteRegistration r = {nullptr, nullptr, segment_sum::Prepare,",
          "106:                                  segment_sum::Eval};",
          "107:   return &r;",
          "108: }",
          "110: }  // namespace builtin",
          "111: }  // namespace ops",
          "112: }  // namespace tflite",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc": [
          "File: tensorflow/lite/kernels/segment_sum_test.cc -> tensorflow/lite/kernels/segment_sum_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "15: #include <gtest/gtest.h>",
          "16: #include \"tensorflow/lite/interpreter.h\"",
          "17: #include \"tensorflow/lite/kernels/register.h\"",
          "18: #include \"tensorflow/lite/kernels/test_util.h\"",
          "19: #include \"tensorflow/lite/model.h\"",
          "21: namespace tflite {",
          "22: namespace {",
          "24: using ::testing::ElementsAreArray;",
          "26: template <typename T>",
          "27: class SegmentSumOpModel : public SingleOpModel {",
          "28:  public:",
          "29:   SegmentSumOpModel(const TensorData& data, const TensorData& segment_ids) {",
          "30:     data_id_ = AddInput(data);",
          "31:     segment_ids_id_ = AddInput(segment_ids);",
          "32:     output_id_ = AddOutput(data.type);",
          "33:     SetBuiltinOp(BuiltinOperator_SEGMENT_SUM, BuiltinOptions_NONE, 0);",
          "34:     BuildInterpreter({GetShape(data_id_), GetShape(segment_ids_id_)});",
          "35:   }",
          "37:   int data() const { return data_id_; }",
          "38:   int segment_ids() const { return segment_ids_id_; }",
          "39:   std::vector<T> GetOutput() { return ExtractVector<T>(output_id_); }",
          "40:   std::vector<int32_t> GetOutputShape() { return GetTensorShape(output_id_); }",
          "42:  protected:",
          "43:   int data_id_;",
          "44:   int segment_ids_id_;",
          "45:   int output_id_;",
          "46: };",
          "48: TEST(SegmentSumOpModelTest, Int32Test_Simple) {",
          "49:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 4}},",
          "50:                                    {TensorType_INT32, {3}});",
          "51:   model.PopulateTensor<int32_t>(model.data(),",
          "52:                                 {1, 2, 3, 4, 4, 3, 2, 1, 5, 6, 7, 8});",
          "53:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 0, 1});",
          "54:   model.Invoke();",
          "55:   EXPECT_THAT(model.GetOutput(), ElementsAreArray({5, 5, 5, 5, 5, 6, 7, 8}));",
          "56:   EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2, 4}));",
          "57: }",
          "59: TEST(SegmentSumOpModelTest, Int32Test_OneDimension) {",
          "60:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3}},",
          "61:                                    {TensorType_INT32, {3}});",
          "62:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3});",
          "63:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 0, 1});",
          "64:   model.Invoke();",
          "65:   EXPECT_THAT(model.GetOutput(), ElementsAreArray({3, 3}));",
          "66:   EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2}));",
          "67: }",
          "69: TEST(SegmentSumOpModelTest, Int32Test_ThreeDimensions) {",
          "70:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2, 1}},",
          "71:                                    {TensorType_INT32, {3}});",
          "72:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
          "73:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 0, 1});",
          "74:   model.Invoke();",
          "75:   EXPECT_THAT(model.GetOutput(), ElementsAreArray({4, 6, 5, 6}));",
          "76:   EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2, 2, 1}));",
          "77: }",
          "79: TEST(SegmentSumOpModelTest, Float32Test_Simple) {",
          "80:   SegmentSumOpModel<float> model({TensorType_FLOAT32, {3, 4}},",
          "81:                                  {TensorType_INT32, {3}});",
          "82:   model.PopulateTensor<float>(model.data(),",
          "83:                               {1, 2, 3, 4, 4, 3, 2, 1, 5, 6, 7, 8});",
          "84:   model.PopulateTensor<int>(model.segment_ids(), {0, 0, 1});",
          "85:   model.Invoke();",
          "86:   EXPECT_THAT(model.GetOutput(), ElementsAreArray({5.0f, 5.0f, 5.0f, 5.0f, 5.0f,",
          "87:                                                    6.0f, 7.0f, 8.0f}));",
          "88:   EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2, 4}));",
          "89: }",
          "91: TEST(SegmentSumOpModelTest, Float32Test_OneDimension) {",
          "92:   SegmentSumOpModel<float> model({TensorType_FLOAT32, {3}},",
          "93:                                  {TensorType_INT32, {3}});",
          "94:   model.PopulateTensor<float>(model.data(), {1, 2, 3});",
          "95:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 0, 1});",
          "96:   model.Invoke();",
          "97:   EXPECT_THAT(model.GetOutput(), ElementsAreArray({3.0f, 3.0f}));",
          "98:   EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2}));",
          "99: }",
          "101: TEST(SegmentSumOpModelTest, Float32Test_ThreeDimensions) {",
          "102:   SegmentSumOpModel<float> model({TensorType_FLOAT32, {3, 2, 1}},",
          "103:                                  {TensorType_INT32, {3}});",
          "104:   model.PopulateTensor<float>(model.data(), {1, 2, 3, 4, 5, 6});",
          "105:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 0, 1});",
          "106:   model.Invoke();",
          "107:   EXPECT_THAT(model.GetOutput(), ElementsAreArray({4.0f, 6.0f, 5.0f, 6.0f}));",
          "108:   EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2, 2, 1}));",
          "109: }",
          "111: }  // namespace",
          "112: }  // namespace tflite",
          "",
          "---------------"
        ],
        "tensorflow/lite/schemschema.fbs||tensorflow/lite/schema/schema.fbs": [
          "File: tensorflow/lite/schemschema.fbs -> tensorflow/lite/schema/schema.fbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320:   DENSIFY = 124,",
          "321:   SEGMENT_SUM = 125",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425:   DensifyOptions,",
          "426:   SegmentSumOptions",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916: table SegmentSumOptions {",
          "917: }",
          "",
          "---------------"
        ],
        "tensorflow/lite/schemschema_generated.h||tensorflow/lite/schema/schema_generated.h": [
          "File: tensorflow/lite/schemschema_generated.h -> tensorflow/lite/schema/schema_generated.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337: struct SegmentSumOptions;",
          "338: struct SegmentSumOptionsT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "651:   BuiltinOperator_SEGMENT_SUM = 125,",
          "653:   BuiltinOperator_MAX = BuiltinOperator_SEGMENT_SUM",
          "656: inline const BuiltinOperator (&EnumValuesBuiltinOperator())[126] {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782:     BuiltinOperator_DENSIFY,",
          "783:     BuiltinOperator_SEGMENT_SUM",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "915:     \"SEGMENT_SUM\",",
          "922:   if (e < BuiltinOperator_ADD || e > BuiltinOperator_SEGMENT_SUM) return \"\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1028:   BuiltinOptions_SegmentSumOptions = 100,",
          "1030:   BuiltinOptions_MAX = BuiltinOptions_SegmentSumOptions",
          "1033: inline const BuiltinOptions (&EnumValuesBuiltinOptions())[101] {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1134:     BuiltinOptions_DensifyOptions,",
          "1135:     BuiltinOptions_SegmentSumOptions",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1242:     \"SegmentSumOptions\",",
          "1249:   if (e < BuiltinOptions_NONE || e > BuiltinOptions_SegmentSumOptions) return \"\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1654: template<> struct BuiltinOptionsTraits<SegmentSumOptions> {",
          "1655:   static const BuiltinOptions enum_value = BuiltinOptions_SegmentSumOptions;",
          "1656: };",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2482:   SegmentSumOptionsT *AsSegmentSumOptions() {",
          "2483:     return type == BuiltinOptions_SegmentSumOptions ?",
          "2484:       reinterpret_cast<SegmentSumOptionsT *>(value) : nullptr;",
          "2485:   }",
          "2486:   const SegmentSumOptionsT *AsSegmentSumOptions() const {",
          "2487:     return type == BuiltinOptions_SegmentSumOptions ?",
          "2488:       reinterpret_cast<const SegmentSumOptionsT *>(value) : nullptr;",
          "2489:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8683: struct SegmentSumOptionsT : public flatbuffers::NativeTable {",
          "8684:   typedef SegmentSumOptions TableType;",
          "8685:   SegmentSumOptionsT() {",
          "8686:   }",
          "8687: };",
          "8689: struct SegmentSumOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {",
          "8690:   typedef SegmentSumOptionsT NativeTableType;",
          "8691:   bool Verify(flatbuffers::Verifier &verifier) const {",
          "8692:     return VerifyTableStart(verifier) &&",
          "8693:            verifier.EndTable();",
          "8694:   }",
          "8695:   SegmentSumOptionsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;",
          "8696:   void UnPackTo(SegmentSumOptionsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;",
          "8697:   static flatbuffers::Offset<SegmentSumOptions> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SegmentSumOptionsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);",
          "8698: };",
          "8700: struct SegmentSumOptionsBuilder {",
          "8701:   flatbuffers::FlatBufferBuilder &fbb_;",
          "8702:   flatbuffers::uoffset_t start_;",
          "8703:   explicit SegmentSumOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb)",
          "8704:         : fbb_(_fbb) {",
          "8705:     start_ = fbb_.StartTable();",
          "8706:   }",
          "8707:   SegmentSumOptionsBuilder &operator=(const SegmentSumOptionsBuilder &);",
          "8708:   flatbuffers::Offset<SegmentSumOptions> Finish() {",
          "8709:     const auto end = fbb_.EndTable(start_);",
          "8710:     auto o = flatbuffers::Offset<SegmentSumOptions>(end);",
          "8711:     return o;",
          "8712:   }",
          "8713: };",
          "8715: inline flatbuffers::Offset<SegmentSumOptions> CreateSegmentSumOptions(",
          "8716:     flatbuffers::FlatBufferBuilder &_fbb) {",
          "8717:   SegmentSumOptionsBuilder builder_(_fbb);",
          "8718:   return builder_.Finish();",
          "8719: }",
          "8721: flatbuffers::Offset<SegmentSumOptions> CreateSegmentSumOptions(flatbuffers::FlatBufferBuilder &_fbb, const SegmentSumOptionsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9156:   const SegmentSumOptions *builtin_options_as_SegmentSumOptions() const {",
          "9157:     return builtin_options_type() == BuiltinOptions_SegmentSumOptions ? static_cast<const SegmentSumOptions *>(builtin_options()) : nullptr;",
          "9158:   }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9591: template<> inline const SegmentSumOptions *Operator::builtin_options_as<SegmentSumOptions>() const {",
          "9592:   return builtin_options_as_SegmentSumOptions();",
          "9593: }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12889: inline SegmentSumOptionsT *SegmentSumOptions::UnPack(const flatbuffers::resolver_function_t *_resolver) const {",
          "12890:   auto _o = new SegmentSumOptionsT();",
          "12891:   UnPackTo(_o, _resolver);",
          "12892:   return _o;",
          "12893: }",
          "12895: inline void SegmentSumOptions::UnPackTo(SegmentSumOptionsT *_o, const flatbuffers::resolver_function_t *_resolver) const {",
          "12896:   (void)_o;",
          "12897:   (void)_resolver;",
          "12898: }",
          "12900: inline flatbuffers::Offset<SegmentSumOptions> SegmentSumOptions::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SegmentSumOptionsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {",
          "12901:   return CreateSegmentSumOptions(_fbb, _o, _rehasher);",
          "12902: }",
          "12904: inline flatbuffers::Offset<SegmentSumOptions> CreateSegmentSumOptions(flatbuffers::FlatBufferBuilder &_fbb, const SegmentSumOptionsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {",
          "12905:   (void)_rehasher;",
          "12906:   (void)_o;",
          "12907:   struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SegmentSumOptionsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;",
          "12908:   return tflite::CreateSegmentSumOptions(",
          "12909:       _fbb);",
          "12910: }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13601:     case BuiltinOptions_SegmentSumOptions: {",
          "13602:       auto ptr = reinterpret_cast<const SegmentSumOptions *>(obj);",
          "13603:       return verifier.VerifyTable(ptr);",
          "13604:     }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14019:     case BuiltinOptions_SegmentSumOptions: {",
          "14020:       auto ptr = reinterpret_cast<const SegmentSumOptions *>(obj);",
          "14021:       return ptr->UnPack(resolver);",
          "14022:     }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14425:     case BuiltinOptions_SegmentSumOptions: {",
          "14426:       auto ptr = reinterpret_cast<const SegmentSumOptionsT *>(value);",
          "14427:       return CreateSegmentSumOptions(_fbb, ptr, _rehasher).Union();",
          "14428:     }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14831:     case BuiltinOptions_SegmentSumOptions: {",
          "14832:       value = new SegmentSumOptionsT(*reinterpret_cast<SegmentSumOptionsT *>(u.value));",
          "14833:       break;",
          "14834:     }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15337:     case BuiltinOptions_SegmentSumOptions: {",
          "15338:       auto ptr = reinterpret_cast<SegmentSumOptionsT *>(value);",
          "15339:       delete ptr;",
          "15340:       break;",
          "15341:     }",
          "",
          "---------------"
        ],
        "tensorflow/lite/toco/model.h||tensorflow/lite/toco/model.h": [
          "File: tensorflow/lite/toco/model.h -> tensorflow/lite/toco/model.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:   kReorderAxes,",
          "149:   kSelect,",
          "150:   kSelectV2,",
          "151:   kSparseToDense,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:   kSegmentSum,",
          "",
          "---------------"
        ],
        "tensorflow/lite/toco/tflite/op_version.cc||tensorflow/lite/toco/tflite/op_version.cc": [
          "File: tensorflow/lite/toco/tflite/op_version.cc -> tensorflow/lite/toco/tflite/op_version.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:           {{OperatorType::kLess, 2}, \"1.14.0\"},",
          "198:           {{OperatorType::kLessEqual, 1}, \"1.14.0\"},",
          "199:           {{OperatorType::kLessEqual, 2}, \"1.14.0\"},",
          "200:           {{OperatorType::kSelect, 1}, \"1.14.0\"},",
          "201:           {{OperatorType::kSelect, 2}, \"1.14.0\"},",
          "202:           {{OperatorType::kSelectV2, 1}, kPendingReleaseOpVersion},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:           {{OperatorType::kSegmentSum, 1}, kPendingReleaseOpVersion},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a",
      "candidate_info": {
        "commit_hash": "00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a",
        "files": [
          "tensorflow/lite/kernels/segment_sum.cc",
          "tensorflow/lite/kernels/segment_sum_test.cc"
        ],
        "message": "[tflite] Validate segment ids for segment_sum.\n\nSegment identifiers in segment_sum should be in a 1-D tensor of same size as the first dimension of the input. The values of the tensor should be integers from {0, 1, 2, ... k-1}, where k is the first dimension of the input. The segment identifiers must not contain jumps and must be increasing.\n\nSee https://www.tensorflow.org/api_docs/python/tf/math#Segmentation as the source for these constraints.\n\nPiperOrigin-RevId: 332510942\nChange-Id: I898beaba00642c918bcd4b4d4ce893ebb190d869",
        "before_after_code_files": [
          "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc",
          "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc",
            "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc",
            "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc": [
          "File: tensorflow/lite/kernels/segment_sum.cc -> tensorflow/lite/kernels/segment_sum.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:                                 const TfLiteTensor* data,",
          "35:                                 const TfLiteTensor* segment_ids,",
          "36:                                 TfLiteTensor* output) {",
          "38:   const int segment_id_size = segment_ids->dims->data[0];",
          "41:   }",
          "42:   const int data_rank = NumDimensions(data);",
          "43:   TfLiteIntArray* output_shape = TfLiteIntArrayCreate(NumDimensions(data));",
          "44:   output_shape->data[0] = max_index + 1;",
          "",
          "[Removed Lines]",
          "37:   int max_index = -1;",
          "39:   if (segment_id_size > 0) {",
          "40:     max_index = segment_ids->data.i32[segment_id_size - 1];",
          "",
          "[Added Lines]",
          "40:   TF_LITE_ENSURE_EQ(context, segment_id_size, data->dims->data[0]);",
          "41:   int previous_segment_id = -1;",
          "42:   for (int i = 0; i < segment_id_size; i++) {",
          "43:     const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];",
          "44:     if (i == 0) {",
          "45:       TF_LITE_ENSURE_EQ(context, current_segment_id, 0);",
          "46:     } else {",
          "47:       int delta = current_segment_id - previous_segment_id;",
          "48:       TF_LITE_ENSURE(context, delta == 0 || delta == 1);",
          "49:     }",
          "50:     previous_segment_id = current_segment_id;",
          "53:   const int max_index = previous_segment_id;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc": [
          "File: tensorflow/lite/kernels/segment_sum_test.cc -> tensorflow/lite/kernels/segment_sum_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2, 2, 1}));",
          "111: }",
          "113: }  // namespace",
          "114: }  // namespace tflite",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113: TEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNotSorted) {",
          "114:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},",
          "115:                                    {TensorType_INT32, {3}});",
          "116:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
          "117:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 3, 1});",
          "118:   ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);",
          "119: }",
          "121: TEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNotConsecutive) {",
          "122:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},",
          "123:                                    {TensorType_INT32, {3}});",
          "124:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
          "125:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 3, 5});",
          "126:   ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);",
          "127: }",
          "129: TEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNegative) {",
          "130:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},",
          "131:                                    {TensorType_INT32, {3}});",
          "132:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
          "133:   model.PopulateTensor<int32_t>(model.segment_ids(), {-1, 0, 1});",
          "134:   ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);",
          "135: }",
          "137: TEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNotTheRightCardinality) {",
          "138:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},",
          "139:                                    {TensorType_INT32, {2}});",
          "140:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
          "141:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 1});",
          "142:   ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);",
          "143: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4030d8ba3692c438997c27be2dd95f3d5f54827",
      "candidate_info": {
        "commit_hash": "a4030d8ba3692c438997c27be2dd95f3d5f54827",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827",
        "files": [
          "tensorflow/lite/kernels/segment_sum.cc",
          "tensorflow/lite/kernels/segment_sum_test.cc"
        ],
        "message": "[tflite] Validate segment ids for segment_sum.\n\nSegment identifiers in segment_sum should be in a 1-D tensor of same size as the first dimension of the input. The values of the tensor should be integers from {0, 1, 2, ... k-1}, where k is the first dimension of the input. The segment identifiers must not contain jumps and must be increasing.\n\nSee https://www.tensorflow.org/api_docs/python/tf/math#Segmentation as the source for these constraints.\n\nPiperOrigin-RevId: 332510942\nChange-Id: I898beaba00642c918bcd4b4d4ce893ebb190d869",
        "before_after_code_files": [
          "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc",
          "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc",
            "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc",
            "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/segment_sum.cc||tensorflow/lite/kernels/segment_sum.cc": [
          "File: tensorflow/lite/kernels/segment_sum.cc -> tensorflow/lite/kernels/segment_sum.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:                                 const TfLiteTensor* data,",
          "33:                                 const TfLiteTensor* segment_ids,",
          "34:                                 TfLiteTensor* output) {",
          "36:   const int segment_id_size = segment_ids->dims->data[0];",
          "39:   }",
          "40:   const int data_rank = NumDimensions(data);",
          "41:   TfLiteIntArray* output_shape = TfLiteIntArrayCreate(NumDimensions(data));",
          "42:   output_shape->data[0] = max_index + 1;",
          "",
          "[Removed Lines]",
          "35:   int max_index = -1;",
          "37:   if (segment_id_size > 0) {",
          "38:     max_index = segment_ids->data.i32[segment_id_size - 1];",
          "",
          "[Added Lines]",
          "38:   TF_LITE_ENSURE_EQ(context, segment_id_size, data->dims->data[0]);",
          "39:   int previous_segment_id = -1;",
          "40:   for (int i = 0; i < segment_id_size; i++) {",
          "41:     const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];",
          "42:     if (i == 0) {",
          "43:       TF_LITE_ENSURE_EQ(context, current_segment_id, 0);",
          "44:     } else {",
          "45:       int delta = current_segment_id - previous_segment_id;",
          "46:       TF_LITE_ENSURE(context, delta == 0 || delta == 1);",
          "47:     }",
          "48:     previous_segment_id = current_segment_id;",
          "51:   const int max_index = previous_segment_id;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/segment_sum_test.cc||tensorflow/lite/kernels/segment_sum_test.cc": [
          "File: tensorflow/lite/kernels/segment_sum_test.cc -> tensorflow/lite/kernels/segment_sum_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2, 2, 1}));",
          "109: }",
          "111: }  // namespace",
          "112: }  // namespace tflite",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111: TEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNotSorted) {",
          "112:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},",
          "113:                                    {TensorType_INT32, {3}});",
          "114:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
          "115:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 3, 1});",
          "116:   ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);",
          "117: }",
          "119: TEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNotConsecutive) {",
          "120:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},",
          "121:                                    {TensorType_INT32, {3}});",
          "122:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
          "123:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 3, 5});",
          "124:   ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);",
          "125: }",
          "127: TEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNegative) {",
          "128:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},",
          "129:                                    {TensorType_INT32, {3}});",
          "130:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
          "131:   model.PopulateTensor<int32_t>(model.segment_ids(), {-1, 0, 1});",
          "132:   ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);",
          "133: }",
          "135: TEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNotTheRightCardinality) {",
          "136:   SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},",
          "137:                                    {TensorType_INT32, {2}});",
          "138:   model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});",
          "139:   model.PopulateTensor<int32_t>(model.segment_ids(), {0, 1});",
          "140:   ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);",
          "141: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}