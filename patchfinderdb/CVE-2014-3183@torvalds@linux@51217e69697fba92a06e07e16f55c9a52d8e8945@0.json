{
  "cve_id": "CVE-2014-3183",
  "cve_desc": "Heap-based buffer overflow in the logi_dj_ll_raw_request function in drivers/hid/hid-logitech-dj.c in the Linux kernel before 3.16.2 allows physically proximate attackers to cause a denial of service (system crash) or possibly execute arbitrary code via a crafted device that specifies a large report size for an LED report.",
  "repo": "torvalds/linux",
  "patch_hash": "51217e69697fba92a06e07e16f55c9a52d8e8945",
  "patch_info": {
    "commit_hash": "51217e69697fba92a06e07e16f55c9a52d8e8945",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/51217e69697fba92a06e07e16f55c9a52d8e8945",
    "files": [
      "drivers/hid/hid-logitech-dj.c"
    ],
    "message": "HID: logitech: fix bounds checking on LED report size\n\nThe check on report size for REPORT_TYPE_LEDS in logi_dj_ll_raw_request()\nis wrong; the current check doesn't make any sense -- the report allocated\nby HID core in hid_hw_raw_request() can be much larger than\nDJREPORT_SHORT_LENGTH, and currently logi_dj_ll_raw_request() doesn't\nhandle this properly at all.\n\nFix the check by actually trimming down the report size properly if it is\ntoo large.\n\nCc: stable@vger.kernel.org\nReported-by: Ben Hawkes <hawkes@google.com>\nReviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>\nSigned-off-by: Jiri Kosina <jkosina@suse.cz>",
    "before_after_code_files": [
      "drivers/hid/hid-logitech-dj.c||drivers/hid/hid-logitech-dj.c"
    ]
  },
  "patch_diff": {
    "drivers/hid/hid-logitech-dj.c||drivers/hid/hid-logitech-dj.c": [
      "File: drivers/hid/hid-logitech-dj.c -> drivers/hid/hid-logitech-dj.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "557:  if (!out_buf)",
      "558:   return -ENOMEM;",
      "561:   count = DJREPORT_SHORT_LENGTH - 2;",
      "563:  out_buf[0] = REPORT_ID_DJ_SHORT;",
      "",
      "[Removed Lines]",
      "560:  if (count < DJREPORT_SHORT_LENGTH - 2)",
      "",
      "[Added Lines]",
      "560:  if (count > DJREPORT_SHORT_LENGTH - 2)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0e40d35637d68f654b66f4562c9a914be7d06bd1",
      "candidate_info": {
        "commit_hash": "0e40d35637d68f654b66f4562c9a914be7d06bd1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0e40d35637d68f654b66f4562c9a914be7d06bd1",
        "files": [
          "drivers/hid/hid-logitech-dj.c"
        ],
        "message": "HID: logitech-dj: remove hidinput_input_event\n\nhid-logitech-dj uses its own ->hidinput_input_event() instead of\nthe generic binding in hid-input.\nMoving the handling of LEDs towards logi_dj_output_hidraw_report()\nallows two things:\n- remove hidinput_input_event in struct hid_device\n- hidraw user space programs can also set the LEDs\n\nSigned-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>\nSigned-off-by: Jiri Kosina <jkosina@suse.cz>",
        "before_after_code_files": [
          "drivers/hid/hid-logitech-dj.c||drivers/hid/hid-logitech-dj.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/hid/hid-logitech-dj.c||drivers/hid/hid-logitech-dj.c"
          ],
          "candidate": [
            "drivers/hid/hid-logitech-dj.c||drivers/hid/hid-logitech-dj.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/hid/hid-logitech-dj.c||drivers/hid/hid-logitech-dj.c": [
          "File: drivers/hid/hid-logitech-dj.c -> drivers/hid/hid-logitech-dj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "544:      size_t count,",
          "545:      unsigned char report_type)",
          "546: {",
          "551: }",
          "553: static void rdcat(char *rdesc, unsigned int *rsize, const char *data, unsigned int size)",
          "",
          "[Removed Lines]",
          "548:  dbg_hid(\"%s\\n\", __func__);",
          "550:  return 0;",
          "",
          "[Added Lines]",
          "551:  struct dj_device *djdev = hid->driver_data;",
          "552:  struct dj_receiver_dev *djrcv_dev = djdev->dj_receiver_dev;",
          "553:  u8 *out_buf;",
          "554:  int ret;",
          "556:  if (buf[0] != REPORT_TYPE_LEDS)",
          "557:   return -EINVAL;",
          "559:  out_buf = kzalloc(DJREPORT_SHORT_LENGTH, GFP_ATOMIC);",
          "560:  if (!out_buf)",
          "561:   return -ENOMEM;",
          "563:  if (count < DJREPORT_SHORT_LENGTH - 2)",
          "564:   count = DJREPORT_SHORT_LENGTH - 2;",
          "566:  out_buf[0] = REPORT_ID_DJ_SHORT;",
          "567:  out_buf[1] = djdev->device_index;",
          "568:  memcpy(out_buf + 2, buf, count);",
          "577:  ret = hid_hw_raw_request(djrcv_dev->hdev, out_buf[0], out_buf,",
          "578:   DJREPORT_SHORT_LENGTH, report_type, HID_REQ_SET_REPORT);",
          "580:  kfree(out_buf);",
          "581:  return ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613:  return retval;",
          "614: }",
          "668: static int logi_dj_ll_start(struct hid_device *hid)",
          "669: {",
          "670:  dbg_hid(\"%s\\n\", __func__);",
          "",
          "[Removed Lines]",
          "616: static int logi_dj_ll_input_event(struct input_dev *dev, unsigned int type,",
          "617:       unsigned int code, int value)",
          "618: {",
          "620:  struct hid_device *dj_hiddev = input_get_drvdata(dev);",
          "621:  struct dj_device *dj_dev = dj_hiddev->driver_data;",
          "623:  struct dj_receiver_dev *djrcv_dev =",
          "624:      dev_get_drvdata(dj_hiddev->dev.parent);",
          "625:  struct hid_device *dj_rcv_hiddev = djrcv_dev->hdev;",
          "626:  struct hid_report_enum *output_report_enum;",
          "628:  struct hid_field *field;",
          "629:  struct hid_report *report;",
          "630:  unsigned char *data;",
          "631:  int offset;",
          "633:  dbg_hid(\"%s: %s, type:%d | code:%d | value:%d\\n\",",
          "634:   __func__, dev->phys, type, code, value);",
          "636:  if (type != EV_LED)",
          "637:   return -1;",
          "639:  offset = hidinput_find_field(dj_hiddev, type, code, &field);",
          "641:  if (offset == -1) {",
          "642:   dev_warn(&dev->dev, \"event field not found\\n\");",
          "643:   return -1;",
          "644:  }",
          "645:  hid_set_field(field, offset, value);",
          "647:  data = hid_alloc_report_buf(field->report, GFP_ATOMIC);",
          "648:  if (!data) {",
          "649:   dev_warn(&dev->dev, \"failed to allocate report buf memory\\n\");",
          "650:   return -1;",
          "651:  }",
          "653:  hid_output_report(field->report, &data[0]);",
          "655:  output_report_enum = &dj_rcv_hiddev->report_enum[HID_OUTPUT_REPORT];",
          "656:  report = output_report_enum->report_id_hash[REPORT_ID_DJ_SHORT];",
          "657:  hid_set_field(report->field[0], 0, dj_dev->device_index);",
          "658:  hid_set_field(report->field[0], 1, REPORT_TYPE_LEDS);",
          "659:  hid_set_field(report->field[0], 2, data[1]);",
          "661:  hid_hw_request(dj_rcv_hiddev, report, HID_REQ_SET_REPORT);",
          "663:  kfree(data);",
          "665:  return 0;",
          "666: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "683:  .stop = logi_dj_ll_stop,",
          "684:  .open = logi_dj_ll_open,",
          "685:  .close = logi_dj_ll_close,",
          "687: };",
          "",
          "[Removed Lines]",
          "686:  .hidinput_input_event = logi_dj_ll_input_event,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}