{
  "cve_id": "CVE-2018-7420",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.12 and 2.4.0 to 2.4.4, the pcapng file parser could crash. This was addressed in wiretap/pcapng.c by adding a block-size check for sysdig event blocks.",
  "repo": "wireshark/wireshark",
  "patch_hash": "f73ae69ba917abd34db434b7ead03d4bc0e9c279",
  "patch_info": {
    "commit_hash": "f73ae69ba917abd34db434b7ead03d4bc0e9c279",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/f73ae69ba917abd34db434b7ead03d4bc0e9c279",
    "files": [
      "wiretap/pcapng.c"
    ],
    "message": "Do the maximum block size check in pcap_read_block().\n\nDo it before we even *try* to read the block, so that it's done in one\nplace rather than having to be done in every routine to handle\nparticular block types.\n\nThe check was missing in the routine to read sysdig event blocks, so if\nwe got a huge sysdig even block we'd try to allocate a huge amount of\nmemory.\n\nBug: 14403\nChange-Id: Iff0fb0387e4499420598361be6d241f2832042d7\nReviewed-on: https://code.wireshark.org/review/25702\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "wiretap/pcapng.c||wiretap/pcapng.c"
    ]
  },
  "patch_diff": {
    "wiretap/pcapng.c||wiretap/pcapng.c": [
      "File: wiretap/pcapng.c -> wiretap/pcapng.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "726:         return FALSE;",
      "727:     }",
      "745:     if (!wtap_read_bytes(fh, &idb, sizeof idb, err, err_info)) {",
      "746:         pcapng_debug(\"pcapng_read_if_descr_block: failed to read IDB\");",
      "",
      "[Removed Lines]",
      "730:        that might fail and, even if it succeeds, it might not leave",
      "731:        any address space or memory+backing store for anything else.",
      "733:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
      "734:        We check for this *after* checking the SHB for its byte",
      "735:        order magic number, so that non-pcapng files are less",
      "737:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
      "740:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
      "741:         return FALSE;",
      "742:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1065:     option_handler *handler;",
      "1066: #endif",
      "1084:     if (enhanced) {",
      "",
      "[Removed Lines]",
      "1069:        that might fail and, even if it succeeds, it might not leave",
      "1070:        any address space or memory+backing store for anything else.",
      "1072:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
      "1073:        We check for this *after* checking the SHB for its byte",
      "1074:        order magic number, so that non-pcapng files are less",
      "1076:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
      "1079:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
      "1080:         return FALSE;",
      "1081:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1432:         return FALSE;",
      "1433:     }",
      "1451:     if (!wtap_read_bytes(fh, &spb, sizeof spb, err, err_info)) {",
      "1452:         pcapng_debug(\"pcapng_read_simple_packet_block: failed to read packet data\");",
      "",
      "[Removed Lines]",
      "1436:        that might fail and, even if it succeeds, it might not leave",
      "1437:        any address space or memory+backing store for anything else.",
      "1439:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
      "1440:        We check for this *after* checking the SHB for its byte",
      "1441:        order magic number, so that non-pcapng files are less",
      "1443:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
      "1446:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
      "1447:         return FALSE;",
      "1448:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1655:         return FALSE;",
      "1656:     }",
      "1675:     pcapng_debug(\"pcapng_read_name_resolution_block, total %d bytes\", bh->block_total_length);",
      "",
      "[Removed Lines]",
      "1659:        that might fail and, even if it succeeds, it might not leave",
      "1660:        any address space or memory+backing store for anything else.",
      "1662:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
      "1663:        We check for this *after* checking the SHB for its byte",
      "1664:        order magic number, so that non-pcapng files are less",
      "1666:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
      "1669:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
      "1670:         return FALSE;",
      "1671:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1969:         return FALSE;",
      "1970:     }",
      "1988:     if (!wtap_read_bytes(fh, &isb, sizeof isb, err, err_info)) {",
      "1989:         pcapng_debug(\"pcapng_read_interface_statistics_block: failed to read packet data\");",
      "",
      "[Removed Lines]",
      "1973:        that might fail and, even if it succeeds, it might not leave",
      "1974:        any address space or memory+backing store for anything else.",
      "1976:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
      "1977:        We check for this *after* checking the SHB for its byte",
      "1978:        order magic number, so that non-pcapng files are less",
      "1980:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
      "1983:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
      "1984:         return FALSE;",
      "1985:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2438:             return PCAPNG_BLOCK_NOT_SHB;",
      "2439:         }",
      "2440:         switch (bh.block_type) {",
      "2441:             case(BLOCK_TYPE_IDB):",
      "2442:                 if (!pcapng_read_if_descr_block(wth, fh, &bh, pn, wblock, err, err_info))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2367:            that might fail and, even if it succeeds, it might not leave",
      "2368:            any address space or memory+backing store for anything else.",
      "2371:         if (bh.block_total_length > MAX_BLOCK_SIZE) {",
      "2374:                                         bh.block_total_length, MAX_BLOCK_SIZE);",
      "2375:             return PCAPNG_BLOCK_ERROR;",
      "2376:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "52ac26f1316ee738a63d298d77b9ec9a3a5b485c",
      "candidate_info": {
        "commit_hash": "52ac26f1316ee738a63d298d77b9ec9a3a5b485c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/52ac26f1316ee738a63d298d77b9ec9a3a5b485c",
        "files": [
          "wiretap/pcapng.c"
        ],
        "message": "Do the maximum block size check in pcap_read_block().\n\nDo it before we even *try* to read the block, so that it's done in one\nplace rather than having to be done in every routine to handle\nparticular block types.\n\nThe check was missing in the routine to read sysdig event blocks, so if\nwe got a huge sysdig even block we'd try to allocate a huge amount of\nmemory.\n\nBug: 14403\nChange-Id: Iff0fb0387e4499420598361be6d241f2832042d7\nReviewed-on: https://code.wireshark.org/review/25702\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit f73ae69ba917abd34db434b7ead03d4bc0e9c279)\nReviewed-on: https://code.wireshark.org/review/25703",
        "before_after_code_files": [
          "wiretap/pcapng.c||wiretap/pcapng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "696:         return FALSE;",
          "697:     }",
          "715:     if (!wtap_read_bytes(fh, &idb, sizeof idb, err, err_info)) {",
          "716:         pcapng_debug(\"pcapng_read_if_descr_block: failed to read IDB\");",
          "",
          "[Removed Lines]",
          "700:        that might fail and, even if it succeeds, it might not leave",
          "701:        any address space or memory+backing store for anything else.",
          "703:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "704:        We check for this *after* checking the SHB for its byte",
          "705:        order magic number, so that non-pcap-ng files are less",
          "707:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "710:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "711:         return FALSE;",
          "712:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1030:     option_handler *handler;",
          "1031: #endif",
          "1049:     if (enhanced) {",
          "",
          "[Removed Lines]",
          "1034:        that might fail and, even if it succeeds, it might not leave",
          "1035:        any address space or memory+backing store for anything else.",
          "1037:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1038:        We check for this *after* checking the SHB for its byte",
          "1039:        order magic number, so that non-pcap-ng files are less",
          "1041:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1044:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "1045:         return FALSE;",
          "1046:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1391:         return FALSE;",
          "1392:     }",
          "1410:     if (!wtap_read_bytes(fh, &spb, sizeof spb, err, err_info)) {",
          "1411:         pcapng_debug(\"pcapng_read_simple_packet_block: failed to read packet data\");",
          "",
          "[Removed Lines]",
          "1395:        that might fail and, even if it succeeds, it might not leave",
          "1396:        any address space or memory+backing store for anything else.",
          "1398:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1399:        We check for this *after* checking the SHB for its byte",
          "1400:        order magic number, so that non-pcap-ng files are less",
          "1402:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1405:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "1406:         return FALSE;",
          "1407:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1608:         return FALSE;",
          "1609:     }",
          "1628:     pcapng_debug(\"pcapng_read_name_resolution_block, total %d bytes\", bh->block_total_length);",
          "",
          "[Removed Lines]",
          "1612:        that might fail and, even if it succeeds, it might not leave",
          "1613:        any address space or memory+backing store for anything else.",
          "1615:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1616:        We check for this *after* checking the SHB for its byte",
          "1617:        order magic number, so that non-pcap-ng files are less",
          "1619:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1622:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "1623:         return FALSE;",
          "1624:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1916:         return FALSE;",
          "1917:     }",
          "1935:     if (!wtap_read_bytes(fh, &isb, sizeof isb, err, err_info)) {",
          "1936:         pcapng_debug(\"pcapng_read_interface_statistics_block: failed to read packet data\");",
          "",
          "[Removed Lines]",
          "1920:        that might fail and, even if it succeeds, it might not leave",
          "1921:        any address space or memory+backing store for anything else.",
          "1923:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1924:        We check for this *after* checking the SHB for its byte",
          "1925:        order magic number, so that non-pcap-ng files are less",
          "1927:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1930:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "1931:         return FALSE;",
          "1932:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2363:             return PCAPNG_BLOCK_NOT_SHB;",
          "2364:         }",
          "2365:         switch (bh.block_type) {",
          "2366:             case(BLOCK_TYPE_IDB):",
          "2367:                 if (!pcapng_read_if_descr_block(wth, fh, &bh, pn, wblock, err, err_info))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2292:            that might fail and, even if it succeeds, it might not leave",
          "2293:            any address space or memory+backing store for anything else.",
          "2296:         if (bh.block_total_length > MAX_BLOCK_SIZE) {",
          "2299:                                         bh.block_total_length, MAX_BLOCK_SIZE);",
          "2300:             return PCAPNG_BLOCK_ERROR;",
          "2301:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "129e41f9f63885ad8224ef413c2860788fb9e849",
      "candidate_info": {
        "commit_hash": "129e41f9f63885ad8224ef413c2860788fb9e849",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/129e41f9f63885ad8224ef413c2860788fb9e849",
        "files": [
          "wiretap/pcapng.c"
        ],
        "message": "Do the maximum block size check in pcap_read_block().\n\nDo it before we even *try* to read the block, so that it's done in one\nplace rather than having to be done in every routine to handle\nparticular block types.\n\nThe check was missing in the routine to read sysdig event blocks, so if\nwe got a huge sysdig even block we'd try to allocate a huge amount of\nmemory.\n\nBug: 14403\nChange-Id: Iff0fb0387e4499420598361be6d241f2832042d7\nReviewed-on: https://code.wireshark.org/review/25702\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit f73ae69ba917abd34db434b7ead03d4bc0e9c279)\nReviewed-on: https://code.wireshark.org/review/25704",
        "before_after_code_files": [
          "wiretap/pcapng.c||wiretap/pcapng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "695:         return FALSE;",
          "696:     }",
          "714:     if (!wtap_read_bytes(fh, &idb, sizeof idb, err, err_info)) {",
          "715:         pcapng_debug(\"pcapng_read_if_descr_block: failed to read IDB\");",
          "",
          "[Removed Lines]",
          "699:        that might fail and, even if it succeeds, it might not leave",
          "700:        any address space or memory+backing store for anything else.",
          "702:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "703:        We check for this *after* checking the SHB for its byte",
          "704:        order magic number, so that non-pcap-ng files are less",
          "706:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "709:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "710:         return FALSE;",
          "711:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1029:     option_handler *handler;",
          "1030: #endif",
          "1048:     if (enhanced) {",
          "",
          "[Removed Lines]",
          "1033:        that might fail and, even if it succeeds, it might not leave",
          "1034:        any address space or memory+backing store for anything else.",
          "1036:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1037:        We check for this *after* checking the SHB for its byte",
          "1038:        order magic number, so that non-pcap-ng files are less",
          "1040:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1043:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "1044:         return FALSE;",
          "1045:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1388:         return FALSE;",
          "1389:     }",
          "1407:     if (!wtap_read_bytes(fh, &spb, sizeof spb, err, err_info)) {",
          "1408:         pcapng_debug(\"pcapng_read_simple_packet_block: failed to read packet data\");",
          "",
          "[Removed Lines]",
          "1392:        that might fail and, even if it succeeds, it might not leave",
          "1393:        any address space or memory+backing store for anything else.",
          "1395:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1396:        We check for this *after* checking the SHB for its byte",
          "1397:        order magic number, so that non-pcap-ng files are less",
          "1399:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1402:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "1403:         return FALSE;",
          "1404:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1604:         return FALSE;",
          "1605:     }",
          "1624:     pcapng_debug(\"pcapng_read_name_resolution_block, total %d bytes\", bh->block_total_length);",
          "",
          "[Removed Lines]",
          "1608:        that might fail and, even if it succeeds, it might not leave",
          "1609:        any address space or memory+backing store for anything else.",
          "1611:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1612:        We check for this *after* checking the SHB for its byte",
          "1613:        order magic number, so that non-pcap-ng files are less",
          "1615:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1618:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "1619:         return FALSE;",
          "1620:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1912:         return FALSE;",
          "1913:     }",
          "1931:     if (!wtap_read_bytes(fh, &isb, sizeof isb, err, err_info)) {",
          "1932:         pcapng_debug(\"pcapng_read_interface_statistics_block: failed to read packet data\");",
          "",
          "[Removed Lines]",
          "1916:        that might fail and, even if it succeeds, it might not leave",
          "1917:        any address space or memory+backing store for anything else.",
          "1919:        We do that by imposing a maximum block size of MAX_BLOCK_SIZE.",
          "1920:        We check for this *after* checking the SHB for its byte",
          "1921:        order magic number, so that non-pcap-ng files are less",
          "1923:     if (bh->block_total_length > MAX_BLOCK_SIZE) {",
          "1926:                                     bh->block_total_length, MAX_BLOCK_SIZE);",
          "1927:         return FALSE;",
          "1928:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2359:             return PCAPNG_BLOCK_NOT_SHB;",
          "2360:         }",
          "2361:         switch (bh.block_type) {",
          "2362:             case(BLOCK_TYPE_IDB):",
          "2363:                 if (!pcapng_read_if_descr_block(wth, fh, &bh, pn, wblock, err, err_info))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2288:            that might fail and, even if it succeeds, it might not leave",
          "2289:            any address space or memory+backing store for anything else.",
          "2292:         if (bh.block_total_length > MAX_BLOCK_SIZE) {",
          "2295:                                         bh.block_total_length, MAX_BLOCK_SIZE);",
          "2296:             return PCAPNG_BLOCK_ERROR;",
          "2297:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30c86f8b34233b1cf262c14660d32388bc7362d9",
      "candidate_info": {
        "commit_hash": "30c86f8b34233b1cf262c14660d32388bc7362d9",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/30c86f8b34233b1cf262c14660d32388bc7362d9",
        "files": [
          "ui/gtk/file_import_dlg.c",
          "ui/tap_export_pdu.c",
          "wiretap/erf.c",
          "wiretap/file_access.c",
          "wiretap/merge.c",
          "wiretap/nettrace_3gpp_32_423.c",
          "wiretap/pcapng.c",
          "wiretap/wtap.c",
          "wiretap/wtap.h"
        ],
        "message": "Don't keep the pcap/pcapng link-layer header type as interface data.\n\nEither 1) it can be determined from the libwiretap encapsulation type,\nin which case it's redundant information or 2) there *is* no pcap/pcapng\nlink-layer header type for that encapsulation type, in which case you\nneed to check for the attempt to determine it failing and handle that\nfailure appropriately.\n\nChange-Id: Ie9557b513365c1fc8c6df74b9c8239e29aad46bc\nReviewed-on: https://code.wireshark.org/review/21924\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "ui/gtk/file_import_dlg.c||ui/gtk/file_import_dlg.c",
          "ui/tap_export_pdu.c||ui/tap_export_pdu.c",
          "wiretap/erf.c||wiretap/erf.c",
          "wiretap/file_access.c||wiretap/file_access.c",
          "wiretap/merge.c||wiretap/merge.c",
          "wiretap/nettrace_3gpp_32_423.c||wiretap/nettrace_3gpp_32_423.c",
          "wiretap/pcapng.c||wiretap/pcapng.c",
          "wiretap/wtap.c||wiretap/wtap.c",
          "wiretap/wtap.h||wiretap/wtap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "ui/gtk/file_import_dlg.c||ui/gtk/file_import_dlg.c": [
          "File: ui/gtk/file_import_dlg.c -> ui/gtk/file_import_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:     int_data_mand = (wtapng_if_descr_mandatory_t*)wtap_block_get_mandatory_data(int_data);",
          "502:     int_data_mand->wtap_encap            = info->encapsulation;",
          "505:     int_data_mand->snap_len              = WTAP_MAX_PACKET_SIZE;",
          "506:     wtap_block_add_string_option(int_data, OPT_IDB_NAME, \"Fake IF File->Import\", strlen(\"Fake IF File->Import\"));",
          "",
          "[Removed Lines]",
          "504:     int_data_mand->link_type             = wtap_wtap_encap_to_pcap_encap(info->encapsulation);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/tap_export_pdu.c||ui/tap_export_pdu.c": [
          "File: ui/tap_export_pdu.c -> ui/tap_export_pdu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:     int_data_mand = (wtapng_if_descr_mandatory_t*)wtap_block_get_mandatory_data(int_data);",
          "147:     int_data_mand->wtap_encap      = WTAP_ENCAP_WIRESHARK_UPPER_PDU;",
          "150:     int_data_mand->snap_len        = WTAP_MAX_PACKET_SIZE;",
          "152:     wtap_block_add_string_option(int_data, OPT_IDB_NAME, \"Fake IF, PDU->Export\", strlen(\"Fake IF, PDU->Export\"));",
          "",
          "[Removed Lines]",
          "149:     int_data_mand->link_type       = wtap_wtap_encap_to_pcap_encap(WTAP_ENCAP_WIRESHARK_UPPER_PDU);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wiretap/erf.c||wiretap/erf.c": [
          "File: wiretap/erf.c -> wiretap/erf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:     int_data_mand->wtap_encap = WTAP_ENCAP_ERF;",
          "",
          "[Removed Lines]",
          "956:     int_data_mand->link_type = wtap_wtap_encap_to_pcap_encap(WTAP_ENCAP_ERF);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1242:   int_data_mand->wtap_encap = WTAP_ENCAP_ERF;",
          "",
          "[Removed Lines]",
          "1245:   int_data_mand->link_type = wtap_wtap_encap_to_pcap_encap(WTAP_ENCAP_ERF);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wiretap/file_access.c||wiretap/file_access.c": [
          "File: wiretap/file_access.c -> wiretap/file_access.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1126:    descr_mand->tsprecision = WTAP_TSPREC_USEC;",
          "1127:   }",
          "1129:   descr_mand->snap_len = wth->snapshot_length;",
          "",
          "[Removed Lines]",
          "1128:   descr_mand->link_type = wtap_wtap_encap_to_pcap_encap(wth->file_encap);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2221:    if ((encap != WTAP_ENCAP_PER_PACKET) && (encap != file_int_data_mand->wtap_encap)) {",
          "2222:     descr_mand = (wtapng_if_descr_mandatory_t*)wtap_block_get_mandatory_data(descr);",
          "2223:     descr_mand->wtap_encap = encap;",
          "2225:    }",
          "2226:    g_array_append_val(wdh->interface_data, descr);",
          "2227:   }",
          "",
          "[Removed Lines]",
          "2224:     descr_mand->link_type = wtap_wtap_encap_to_pcap_encap(encap);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2230:   descr_mand = (wtapng_if_descr_mandatory_t*)wtap_block_get_mandatory_data(descr);",
          "2231:   descr_mand->wtap_encap = encap;",
          "2234:   descr_mand->snap_len = snaplen;",
          "2236:   descr_mand->interface_statistics = NULL;",
          "",
          "[Removed Lines]",
          "2233:   descr_mand->link_type = wtap_wtap_encap_to_pcap_encap(encap);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wiretap/merge.c||wiretap/merge.c": [
          "File: wiretap/merge.c -> wiretap/merge.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "460:         return FALSE;",
          "461:     }",
          "471:     merge_debug(\"idb1_mand->time_units_per_second == idb2_mand->time_units_per_second: %s\",",
          "472:                  (idb1_mand->time_units_per_second == idb2_mand->time_units_per_second) ? \"TRUE\":\"FALSE\");",
          "473:     if (idb1_mand->time_units_per_second != idb2_mand->time_units_per_second) {",
          "",
          "[Removed Lines]",
          "463:     merge_debug(\"idb1_mand->link_type == idb2_mand->link_type: %s\",",
          "464:                  (idb1_mand->link_type == idb2_mand->link_type) ? \"TRUE\":\"FALSE\");",
          "465:     if (idb1_mand->link_type != idb2_mand->link_type) {",
          "467:         merge_debug(\"merge::is_duplicate_idb() returning FALSE\");",
          "468:         return FALSE;",
          "469:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wiretap/nettrace_3gpp_32_423.c||wiretap/nettrace_3gpp_32_423.c": [
          "File: wiretap/nettrace_3gpp_32_423.c -> wiretap/nettrace_3gpp_32_423.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "788:  int_data_mand = (wtapng_if_descr_mandatory_t*)wtap_block_get_mandatory_data(int_data);",
          "789:  int_data_mand->wtap_encap = WTAP_ENCAP_WIRESHARK_UPPER_PDU;",
          "792:  int_data_mand->snap_len = WTAP_MAX_PACKET_SIZE;",
          "793:  wtap_block_add_string_option(int_data, OPT_IDB_NAME, \"Fake IF\", strlen(\"Fake IF\"));",
          "",
          "[Removed Lines]",
          "791:  int_data_mand->link_type = wtap_wtap_encap_to_pcap_encap(WTAP_ENCAP_WIRESHARK_UPPER_PDU);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "677:     guint to_read, opt_cont_buf_len;",
          "678:     pcapng_interface_description_block_t idb;",
          "679:     wtapng_if_descr_mandatory_t* if_descr_mand;",
          "680:     pcapng_option_header_t oh;",
          "682:     gchar* tmp_content;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "680:     guint   link_type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "720:     wblock->block = wtap_block_create(WTAP_BLOCK_IF_DESCR);",
          "721:     if_descr_mand = (wtapng_if_descr_mandatory_t*)wtap_block_get_mandatory_data(wblock->block);",
          "722:     if (pn->byte_swapped) {",
          "724:         if_descr_mand->snap_len  = GUINT32_SWAP_LE_BE(idb.snaplen);",
          "725:     } else {",
          "727:         if_descr_mand->snap_len  = idb.snaplen;",
          "728:     }",
          "731:     if_descr_mand->time_units_per_second = time_units_per_second;",
          "732:     if_descr_mand->tsprecision = tsprecision;",
          "734:     pcapng_debug(\"pcapng_read_if_descr_block: IDB link_type %u (%s), snap %u\",",
          "736:                   wtap_encap_string(if_descr_mand->wtap_encap),",
          "737:                   if_descr_mand->snap_len);",
          "",
          "[Removed Lines]",
          "723:         if_descr_mand->link_type = GUINT16_SWAP_LE_BE(idb.linktype);",
          "726:         if_descr_mand->link_type = idb.linktype;",
          "730:     if_descr_mand->wtap_encap = wtap_pcap_encap_to_wtap_encap(if_descr_mand->link_type);",
          "735:                   if_descr_mand->link_type,",
          "",
          "[Added Lines]",
          "724:         link_type = GUINT16_SWAP_LE_BE(idb.linktype);",
          "727:         link_type = idb.linktype;",
          "731:     if_descr_mand->wtap_encap = wtap_pcap_encap_to_wtap_encap(link_type);",
          "736:                   link_type,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3970:     pcapng_write_block_t block_data;",
          "3971:     struct pcapng_option_header option_hdr;",
          "3972:     wtapng_if_descr_mandatory_t* mand_data = (wtapng_if_descr_mandatory_t*)wtap_block_get_mandatory_data(int_data);",
          "3974:     pcapng_debug(\"pcapng_write_if_descr_block: encap = %d (%s), snaplen = %d\",",
          "3977:                   mand_data->snap_len);",
          "3981:         return FALSE;",
          "3982:     }",
          "",
          "[Removed Lines]",
          "3975:                   mand_data->link_type,",
          "3976:                   wtap_encap_string(wtap_pcap_encap_to_wtap_encap(mand_data->link_type)),",
          "3979:     if (mand_data->link_type == (guint16)-1) {",
          "",
          "[Added Lines]",
          "3974:     int link_type;",
          "3977:                   mand_data->wtap_encap,",
          "3978:                   wtap_encap_string(mand_data->wtap_encap),",
          "3981:     link_type = wtap_wtap_encap_to_pcap_encap(mand_data->wtap_encap);",
          "3982:     if (link_type == -1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4000:     wdh->bytes_dumped += sizeof bh;",
          "4004:     idb.reserved    = 0;",
          "4005:     idb.snaplen     = mand_data->snap_len;",
          "",
          "[Removed Lines]",
          "4003:     idb.linktype    = mand_data->link_type;",
          "",
          "[Added Lines]",
          "4006:     idb.linktype    = link_type;",
          "",
          "---------------"
        ],
        "wiretap/wtap.c||wiretap/wtap.c": [
          "File: wiretap/wtap.c -> wiretap/wtap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:  }",
          "256:  g_string_append_printf(info,",
          "258:    wtap_encap_string(if_descr_mand->wtap_encap),",
          "259:    if_descr_mand->wtap_encap,",
          "261:    wtap_encap_short_string(if_descr_mand->wtap_encap),",
          "262:    line_end);",
          "",
          "[Removed Lines]",
          "257:    \"%*cEncapsulation = %s (%d/%u - %s)%s\", indent, ' ',",
          "260:    if_descr_mand->link_type,",
          "",
          "[Added Lines]",
          "257:    \"%*cEncapsulation = %s (%d - %s)%s\", indent, ' ',",
          "",
          "---------------"
        ],
        "wiretap/wtap.h||wiretap/wtap.h": [
          "File: wiretap/wtap.h -> wiretap/wtap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1286:     guint64                time_units_per_second;",
          "1290:     guint32                snap_len;",
          "1292:     guint8                 num_stat_entries;",
          "",
          "[Removed Lines]",
          "1289:     guint16                link_type;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}