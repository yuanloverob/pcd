{
  "cve_id": "CVE-2021-39191",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
  "patch_info": {
    "commit_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "auth_openidc.conf",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "auth_openidc.conf||auth_openidc.conf",
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "auth_openidc.conf||auth_openidc.conf": [
      "File: auth_openidc.conf -> auth_openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "918: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
      "920: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
      "923: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
      "924: # or:",
      "925: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
      "",
      "[Removed Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, e.g.:",
      "",
      "[Added Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in",
      "923: # 3rd-party initiated logins, e.g.:",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:  return TRUE;",
      "2458: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2460: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2462: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2463:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2464:   char **err_desc) {",
      "2465:  apr_uri_t uri;",
      "2466:  const char *c_host = NULL;",
      "2467:  apr_hash_index_t *hi = NULL;",
      "2468:  size_t i = 0;",
      "2469:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2472:  for (i = 0; i < strlen(url); i++)",
      "2473:   if (url[i] == '\\\\')",
      "2474:    url[i] = '/';",
      "2476:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2479:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2480:   return FALSE;",
      "2481:  }",
      "2483:  if (c->redirect_urls_allowed != NULL) {",
      "2484:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2485:     apr_hash_next(hi)) {",
      "2486:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2487:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2488:      NULL, err_str) == TRUE)",
      "2489:     break;",
      "2490:   }",
      "2491:   if (hi == NULL) {",
      "2494:      apr_psprintf(r->pool,",
      "2495:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2496:        url);",
      "2497:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2498:    return FALSE;",
      "2499:   }",
      "2500:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2501:   c_host = oidc_get_current_url_host(r);",
      "2502:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2503:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2506:      apr_psprintf(r->pool,",
      "2507:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2508:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2509:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2510:    return FALSE;",
      "2511:   }",
      "2512:  }",
      "2514:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "2517:     apr_psprintf(r->pool,",
      "2518:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "2519:       url);",
      "2520:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2521:   return FALSE;",
      "2522:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "2525:     \"No hostname was parsed and starting with '//': %s\", url);",
      "2526:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2527:   return FALSE;",
      "2528:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "2531:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "2532:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2533:   return FALSE;",
      "2534:  }",
      "2537:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "2540:     apr_psprintf(r->pool,",
      "2541:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "2542:       url);",
      "2543:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2544:   return FALSE;",
      "2545:  }",
      "2547:  return TRUE;",
      "2548: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2469:  oidc_provider_t *provider = NULL;",
      "2471:  oidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);",
      "2472:  oidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:  char *error_str = NULL;",
      "2561:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2519:     HTTP_UNAUTHORIZED);",
      "2520:  }",
      "2523:  if (c->metadata_dir == NULL) {",
      "2524:   if ((oidc_provider_static_config(r, c, &provider) == TRUE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2615:  if (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,",
      "2616:    &error_description) == FALSE) {",
      "2617:   return oidc_util_html_send_error(r, c->error_template, error_str,",
      "2618:     error_description,",
      "2619:     HTTP_UNAUTHORIZED);",
      "2620:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2947:  return rc;",
      "2948: }",
      "",
      "[Removed Lines]",
      "2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2953:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2954:   char **err_desc) {",
      "2955:  apr_uri_t uri;",
      "2956:  const char *c_host = NULL;",
      "2957:  apr_hash_index_t *hi = NULL;",
      "2958:  size_t i = 0;",
      "2959:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2962:  for (i = 0; i < strlen(url); i++)",
      "2963:   if (url[i] == '\\\\')",
      "2964:    url[i] = '/';",
      "2966:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2969:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2970:   return FALSE;",
      "2971:  }",
      "2973:  if (c->redirect_urls_allowed != NULL) {",
      "2974:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2975:     apr_hash_next(hi)) {",
      "2976:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2977:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2978:      NULL, err_str) == TRUE)",
      "2979:     break;",
      "2980:   }",
      "2981:   if (hi == NULL) {",
      "2984:      apr_psprintf(r->pool,",
      "2985:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2986:        url);",
      "2987:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2988:    return FALSE;",
      "2989:   }",
      "2990:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2991:   c_host = oidc_get_current_url_host(r);",
      "2992:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2993:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2996:      apr_psprintf(r->pool,",
      "2997:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2998:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2999:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3000:    return FALSE;",
      "3001:   }",
      "3002:  }",
      "3004:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "3007:     apr_psprintf(r->pool,",
      "3008:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3009:       url);",
      "3010:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3011:   return FALSE;",
      "3012:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "3015:     \"No hostname was parsed and starting with '//': %s\", url);",
      "3016:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3017:   return FALSE;",
      "3018:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3021:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "3022:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3023:   return FALSE;",
      "3024:  }",
      "3027:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3030:     apr_psprintf(r->pool,",
      "3031:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3032:       url);",
      "3033:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3034:   return FALSE;",
      "3035:  }",
      "3037:  return TRUE;",
      "3038: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4f98511debd04243b284ca426fe79393addb73d1",
      "candidate_info": {
        "commit_hash": "4f98511debd04243b284ca426fe79393addb73d1",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/4f98511debd04243b284ca426fe79393addb73d1",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "fix Redis command retry after a reconnect; thanks @iainh\n\nrelease 2.4.9.1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d9473b45dcdf402719a6e1aac21ac278df847ce",
      "candidate_info": {
        "commit_hash": "6d9473b45dcdf402719a6e1aac21ac278df847ce",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/6d9473b45dcdf402719a6e1aac21ac278df847ce",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "bump to 2.4.7rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.7-dev],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.7rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "143b63b8b25b2625730fa5db1941aee5613fcd70",
      "candidate_info": {
        "commit_hash": "143b63b8b25b2625730fa5db1941aee5613fcd70",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/143b63b8b25b2625730fa5db1941aee5613fcd70",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/util.c",
          "test/test.c"
        ],
        "message": "add check for Sec-Fetch-Dest header != \"document\" value\n\nto auto-detect requests that are not capable of handling an\nauthentication round trip to the Provider;\nsee https://github.com/zmartzone/mod_auth_openidc/discussions/714;\nthanks @studersi;\nbump to 2.4.10rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "809: # Useful in Location/Directory/Proxy path contexts that serve AJAX/Javascript calls and for \"anonymous access\"",
          "810: #",
          "811: # When not defined the default is \"auth\" with auto-detection of XML HTTP requests, which would get \"401\".",
          "816: #",
          "817: # Only for Apache >= 2.4.x:",
          "818: # Since verson 2.4.4 a boolean Apache expression as the second parameter to specify which requests",
          "",
          "[Removed Lines]",
          "812: # The default auto-detection algorithm looks for the \"X-Requested-With: XMLHttpRequest\" header/value,",
          "813: # the presence of Sec-Fetch-Mode header with a value that is not equal to \"navigate\", and/or the absence of",
          "814: \" \"Accept\" header with any of the values \"text/html\" \"application/xhtml+xml\" or \"*/*\"",
          "815: # and returns 401 for such non-browser/non-html clients. See: https://github.com/zmartzone/mod_auth_openidc/wiki/Cookies#tldr",
          "",
          "[Added Lines]",
          "812: # The default auto-detection algorithm looks for the \"X-Requested-With: XMLHttpRequest\" header/value, or",
          "813: # the presence of a Sec-Fetch-Mode header with a value that is not equal to \"navigate\", or the presence of",
          "814: # a Sec-Fetch-Dest header with a value that is not equal to \"document\" or the absence of",
          "815: # an \"Accept\" header with any of the values \"text/html\" \"application/xhtml+xml\" or \"*/*\"",
          "816: # and returns 401 for such non-browser/non-html clients.",
          "817: # See: https://github.com/zmartzone/mod_auth_openidc/wiki/Cookies#tldr",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "820: # See also: https://httpd.apache.org/docs/2.4/expr.html.",
          "821: # E.g to return 401 for cURL based user agents and \"auth\" for any other browsers/user agents:",
          "822: #   OIDCUnAuthAction 401 \"%{HTTP_USER_AGENT} =~ /curl/\"",
          "824: #   OIDCUnAuthAction 401 \"%{HTTP:X-Requested-With} == 'XMLHttpRequest'\"",
          "825: # to return 401 for all user agents that do not send an Accept header that includes a \"text/html\" value:",
          "826: #   OIDCUnAuthAction 401 \"%{HTTP_ACCEPT} !~ m#text/html#\"",
          "831: # To disable auto-detection of XML HTTP request altogether and uncondtionally return \"auth\" for all clients:",
          "832: #   OIDCUnAuthAction auth true",
          "833: # Note that actually *any* expression value in \"OIDCUnAuthAction auth <expr>\" will *always* render \"auth\"",
          "",
          "[Removed Lines]",
          "823: # to effectively override the default XML request detection algorithm by ignoring the Sec-Fetch-Mode and Accept headers:",
          "827: # to return 401 for requests in an iframe or requests that load an image:",
          "828: #   OIDCUnAuthAction 401 \"%{HTTP:Sec-Fetch-Dest} == 'iframe' || %{HTTP:Sec-Fetch-Dest} == 'image'\"",
          "829: # or just as a more complex example, which equals the default XML request detection algorithm:",
          "830: #   OIDCUnAuthAction 401 \"%{HTTP:X-Requested-With} == 'XMLHttpRequest' || ( -n %{HTTP:Sec-Fetch-Mode} && %{HTTP:Sec-Fetch-Mode} != 'navigate' ) || ( ( %{HTTP_ACCEPT} !~ m#text/html# ) && ( %{HTTP_ACCEPT} !~ m#application/xhtml\\+xml# ) && ( %{HTTP_ACCEPT} !~ m#\\*/\\*# ) )\"",
          "",
          "[Added Lines]",
          "825: # to effectively override the default XML request detection algorithm by ignoring the Sec-Fetch-Mode,",
          "826: # Sec-Fetch-Dest and Accept headers:",
          "830: # or as a more complex example, which equals the default XML request detection algorithm:",
          "831: #   OIDCUnAuthAction 401 \"%{HTTP:X-Requested-With} == 'XMLHttpRequest' \\",
          "832: #                     || ( -n %{HTTP:Sec-Fetch-Mode} && %{HTTP:Sec-Fetch-Mode} != 'navigate' ) \\",
          "833: #                     || ( -n %{HTTP:Sec-Fetch-Dest} && %{HTTP:Sec-Fetch-Dest} != 'document' ) \\",
          "834: #                     || (    ( %{HTTP_ACCEPT} !~ m#text/html# ) \\",
          "835: #                          && ( %{HTTP_ACCEPT} !~ m#application/xhtml\\+xml# ) \\",
          "836: #                          && ( %{HTTP_ACCEPT} !~ m#\\*/\\*# ) \\",
          "837: #                        )\"",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.5rc8],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "852: }",
          "859:  if ((oidc_util_hdr_in_x_requested_with_get(r) != NULL)",
          "860:    && (apr_strnatcasecmp(oidc_util_hdr_in_x_requested_with_get(r),",
          "861:      OIDC_HTTP_HDR_VAL_XML_HTTP_REQUEST) == 0))",
          "864:  if ((oidc_util_hdr_in_sec_fetch_mode_get(r) != NULL)",
          "865:    && (apr_strnatcasecmp(oidc_util_hdr_in_sec_fetch_mode_get(r),",
          "866:           OIDC_HTTP_HDR_VAL_NAVIGATE) != 0))",
          "869:  if ((oidc_util_hdr_in_accept_contains(r, OIDC_CONTENT_TYPE_TEXT_HTML)",
          "870:    == FALSE) && (oidc_util_hdr_in_accept_contains(r,",
          "871:      OIDC_CONTENT_TYPE_APP_XHTML_XML) == FALSE)",
          "872:      && (oidc_util_hdr_in_accept_contains(r,",
          "873:        OIDC_CONTENT_TYPE_ANY) == FALSE))",
          "877: }",
          "",
          "[Removed Lines]",
          "857: apr_byte_t oidc_is_xml_http_request(request_rec *r) {",
          "862:   return TRUE;",
          "867:   return TRUE;",
          "874:   return TRUE;",
          "876:  return FALSE;",
          "",
          "[Added Lines]",
          "857: apr_byte_t oidc_is_auth_capable_request(request_rec *r) {",
          "862:   return FALSE;",
          "867:   return FALSE;",
          "869:  if ((oidc_util_hdr_in_sec_fetch_dest_get(r) != NULL)",
          "870:    && (apr_strnatcasecmp(oidc_util_hdr_in_sec_fetch_dest_get(r),",
          "871:           OIDC_HTTP_HDR_VAL_DOCUMENT) != 0))",
          "872:   return FALSE;",
          "879:   return FALSE;",
          "881:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "910:   if ((oidc_dir_cfg_unauth_expr_is_set(r) == FALSE)",
          "912:    return HTTP_UNAUTHORIZED;",
          "913:  }",
          "",
          "[Removed Lines]",
          "911:     && (oidc_is_xml_http_request(r) == TRUE))",
          "",
          "[Added Lines]",
          "916:     && (oidc_is_auth_capable_request(r) == FALSE))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3995:    break;",
          "3996:   case OIDC_UNAUTZ_AUTHENTICATE:",
          "4003:     return AUTHZ_DENIED;",
          "4004:    break;",
          "4005:  }",
          "",
          "[Removed Lines]",
          "4002:    if (oidc_is_xml_http_request(r) == TRUE)",
          "",
          "[Added Lines]",
          "4007:    if (oidc_is_auth_capable_request(r) == FALSE)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4116:    return HTTP_UNAUTHORIZED;",
          "4117:  }",
          "",
          "[Removed Lines]",
          "4115:   if (oidc_is_xml_http_request(r) == TRUE)",
          "",
          "[Added Lines]",
          "4120:   if (oidc_is_auth_capable_request(r) == FALSE)",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "827: #define OIDC_HTTP_HDR_CONTENT_LENGTH                    \"Content-Length\"",
          "828: #define OIDC_HTTP_HDR_X_REQUESTED_WITH                  \"X-Requested-With\"",
          "829: #define OIDC_HTTP_HDR_SEC_FETCH_MODE                    \"Sec-Fetch-Mode\"",
          "830: #define OIDC_HTTP_HDR_ACCEPT                            \"Accept\"",
          "831: #define OIDC_HTTP_HDR_AUTHORIZATION                     \"Authorization\"",
          "832: #define OIDC_HTTP_HDR_X_FORWARDED_PROTO                 \"X-Forwarded-Proto\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "830: #define OIDC_HTTP_HDR_SEC_FETCH_DEST                    \"Sec-Fetch-Dest\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "845: #define OIDC_HTTP_HDR_VAL_XML_HTTP_REQUEST \"XMLHttpRequest\"",
          "846: #define OIDC_HTTP_HDR_VAL_NAVIGATE         \"navigate\"",
          "848: void oidc_util_hdr_in_set(const request_rec *r, const char *name, const char *value);",
          "849: const char *oidc_util_hdr_in_cookie_get(const request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "848: #define OIDC_HTTP_HDR_VAL_DOCUMENT         \"document\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "854: const char *oidc_util_hdr_in_content_length_get(const request_rec *r);",
          "855: const char *oidc_util_hdr_in_x_requested_with_get(const request_rec *r);",
          "856: const char* oidc_util_hdr_in_sec_fetch_mode_get(const request_rec *r);",
          "857: const char *oidc_util_hdr_in_accept_get(const request_rec *r);",
          "858: const char *oidc_util_hdr_in_authorization_get(const request_rec *r);",
          "859: const char *oidc_util_hdr_in_x_forwarded_proto_get(const request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "859: const char* oidc_util_hdr_in_sec_fetch_dest_get(const request_rec *r);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "926: void oidc_session_set_issuer(request_rec *r, oidc_session_t *z, const char *issuer);",
          "927: const char * oidc_session_get_issuer(request_rec *r, oidc_session_t *z);",
          "928: void oidc_session_set_client_id(request_rec *r, oidc_session_t *z, const char *client_id);",
          "930: char *oidc_parse_base64(apr_pool_t *pool, const char *input, char **output, int *output_len);",
          "",
          "[Removed Lines]",
          "929: apr_byte_t oidc_is_xml_http_request(request_rec *r);",
          "",
          "[Added Lines]",
          "932: apr_byte_t oidc_is_auth_capable_request(request_rec *r);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2627:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_SEC_FETCH_MODE);",
          "2628: }",
          "2630: const char* oidc_util_hdr_in_accept_get(const request_rec *r) {",
          "2631:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_ACCEPT);",
          "2632: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2630: const char* oidc_util_hdr_in_sec_fetch_dest_get(const request_rec *r) {",
          "2631:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_SEC_FETCH_DEST);",
          "2632: }",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:  return 0;",
          "1521: }",
          "1524:  apr_byte_t rc = FALSE;",
          "1526:  apr_table_set(r->headers_in, \"Accept\", \"*/*\");",
          "1530:  apr_table_set(r->headers_in, \"X-Requested-With\", \"XMLHttpRequest\");",
          "1533:  apr_table_unset(r->headers_in, \"X-Requested-With\");",
          "1535:  apr_table_set(r->headers_in, \"Sec-Fetch-Mode\", \"navigate\");",
          "1538:  apr_table_unset(r->headers_in, \"Sec-Fetch-Mode\");",
          "1540:  apr_table_set(r->headers_in, \"Sec-Fetch-Mode\", \"cors\");",
          "1543:  apr_table_unset(r->headers_in, \"Sec-Fetch-Mode\");",
          "1545:  return 0;",
          "1546: }",
          "",
          "[Removed Lines]",
          "1523: static char* test_is_xml_http_request(request_rec *r) {",
          "1527:  rc = oidc_is_xml_http_request(r);",
          "1528:  TST_ASSERT(\"test oidc_is_xml_http_request (1)\", rc == FALSE);",
          "1531:  rc = oidc_is_xml_http_request(r);",
          "1532:  TST_ASSERT(\"test oidc_is_xml_http_request (2)\", rc == TRUE);",
          "1536:  rc = oidc_is_xml_http_request(r);",
          "1537:  TST_ASSERT(\"test oidc_is_xml_http_request (3)\", rc == FALSE);",
          "1541:  rc = oidc_is_xml_http_request(r);",
          "1542:  TST_ASSERT(\"test oidc_is_xml_http_request (4)\", rc == TRUE);",
          "",
          "[Added Lines]",
          "1523: static char* test_is_auth_capable_request(request_rec *r) {",
          "1527:  rc = oidc_is_auth_capable_request(r);",
          "1528:  TST_ASSERT(\"test oidc_is_auth_capable_request (1)\", rc == TRUE);",
          "1531:  rc = oidc_is_auth_capable_request(r);",
          "1532:  TST_ASSERT(\"test oidc_is_auth_capable_request (2)\", rc == FALSE);",
          "1536:  rc = oidc_is_auth_capable_request(r);",
          "1537:  TST_ASSERT(\"test oidc_is_auth_capable_request (3)\", rc == TRUE);",
          "1541:  rc = oidc_is_auth_capable_request(r);",
          "1542:  TST_ASSERT(\"test oidc_is_auth_capable_request (4)\", rc == FALSE);",
          "1545:  apr_table_set(r->headers_in, \"Sec-Fetch-Dest\", \"iframe\");",
          "1546:  rc = oidc_is_auth_capable_request(r);",
          "1547:  TST_ASSERT(\"test oidc_is_auth_capable_request (5)\", rc == FALSE);",
          "1548:  apr_table_unset(r->headers_in, \"Sec-Fetch-Dest\");",
          "1550:  apr_table_set(r->headers_in, \"Sec-Fetch-Dest\", \"image\");",
          "1551:  rc = oidc_is_auth_capable_request(r);",
          "1552:  TST_ASSERT(\"test oidc_is_auth_capable_request (6)\", rc == FALSE);",
          "1553:  apr_table_unset(r->headers_in, \"Sec-Fetch-Dest\");",
          "1555:  apr_table_set(r->headers_in, \"Sec-Fetch-Dest\", \"document\");",
          "1556:  rc = oidc_is_auth_capable_request(r);",
          "1557:  TST_ASSERT(\"test oidc_is_auth_capable_request (7)\", rc == TRUE);",
          "1558:  apr_table_unset(r->headers_in, \"Sec-Fetch-Dest\");",
          "1560:  apr_table_set(r->headers_in, \"Accept\", \"application/json\");",
          "1561:  rc = oidc_is_auth_capable_request(r);",
          "1562:  TST_ASSERT(\"test oidc_is_auth_capable_request (8)\", rc == FALSE);",
          "1563:  apr_table_unset(r->headers_in, \"Accept\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1581:  TST_RUN(test_decode_json_object, r);",
          "1583:  TST_RUN(test_remote_user, r);",
          "1586: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1587:  TST_RUN(test_authz_worker, r);",
          "",
          "[Removed Lines]",
          "1584:  TST_RUN(test_is_xml_http_request, r);",
          "",
          "[Added Lines]",
          "1604:  TST_RUN(test_is_auth_capable_request, r);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5959d767b0eec4856d561cbaa6d2262a52da551",
      "candidate_info": {
        "commit_hash": "f5959d767b0eec4856d561cbaa6d2262a52da551",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/f5959d767b0eec4856d561cbaa6d2262a52da551",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "avoid appending 401 HTML document text on step-up authentication\n\n- applies to Apache 2.4 HTML refresh with an authorization request\n- closes #484\n- bump to 2.4.5rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.4.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4097:     location);",
          "4098:   oidc_util_html_send(r, \"Stepup Authentication\", html_head, NULL, NULL,",
          "4099:     HTTP_UNAUTHORIZED);",
          "4100:  }",
          "4102:  return AUTHZ_DENIED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4104:   r->header_only = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d01f0b5a3e58a731adcea580d65a4e3ac9cfb49",
      "candidate_info": {
        "commit_hash": "5d01f0b5a3e58a731adcea580d65a4e3ac9cfb49",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/5d01f0b5a3e58a731adcea580d65a4e3ac9cfb49",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/common.c",
          "src/proto.c",
          "src/session.c"
        ],
        "message": "don't strip the header from encrypted JWTs\n\nas future versions of cjose may use compact encoding for JWEs; this\nslightly increases state cookie size, by-value session cookies and\nencrypted cache contents again at the benefit of forward cjose\ncompatibility; bump to 2.4.11.2rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/common.c||src/cache/common.c",
          "src/proto.c||src/proto.c",
          "src/session.c||src/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.2rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/common.c||src/cache/common.c": [
          "File: src/cache/common.c -> src/cache/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:  json = json_object();",
          "246:  json_object_set_new(json, OIDC_CACHE_CRYPTO_JSON_KEY, json_string(plaintext));",
          "250:  if (json)",
          "251:   json_decref(json);",
          "",
          "[Removed Lines]",
          "248:  rv = oidc_util_jwt_create(r, (const char*) key, json, result, TRUE);",
          "",
          "[Added Lines]",
          "248:  rv = oidc_util_jwt_create(r, (const char*) key, json, result, FALSE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:  apr_byte_t rv = FALSE;",
          "263:  json_t *json = NULL;",
          "266:  if (rv == FALSE)",
          "267:   goto end;",
          "",
          "[Removed Lines]",
          "265:  rv = oidc_util_jwt_verify(r, (const char*) key, cache_value, &json, TRUE);",
          "",
          "[Added Lines]",
          "265:  rv = oidc_util_jwt_verify(r, (const char*) key, cache_value, &json, FALSE);",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "965: oidc_proto_state_t* oidc_proto_state_from_cookie(request_rec *r, oidc_cfg *c,",
          "966:   const char *cookieValue) {",
          "967:  json_t *result = NULL;",
          "969:  return result;",
          "970: }",
          "972: char* oidc_proto_state_to_cookie(request_rec *r, oidc_cfg *c, oidc_proto_state_t *proto_state) {",
          "973:  char *cookieValue = NULL;",
          "975:  return cookieValue;",
          "976: }",
          "",
          "[Removed Lines]",
          "968:  oidc_util_jwt_verify(r, c->crypto_passphrase, cookieValue, &result, TRUE);",
          "974:  oidc_util_jwt_create(r, c->crypto_passphrase, proto_state, &cookieValue, TRUE);",
          "",
          "[Added Lines]",
          "968:  oidc_util_jwt_verify(r, c->crypto_passphrase, cookieValue, &result, FALSE);",
          "974:  oidc_util_jwt_create(r, c->crypto_passphrase, proto_state, &cookieValue, FALSE);",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   return (*s_value != NULL);",
          "67:  }",
          "70:   return FALSE;",
          "72:  return TRUE;",
          "",
          "[Removed Lines]",
          "69:  if (oidc_util_jwt_create(r, c->crypto_passphrase, z->state, s_value, TRUE) == FALSE)",
          "",
          "[Added Lines]",
          "69:  if (oidc_util_jwt_create(r, c->crypto_passphrase, z->state, s_value, FALSE) == FALSE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   return oidc_util_decode_json_object(r, s_json, &z->state);",
          "80:  }",
          "83:   oidc_error(r, \"could not verify secure JWT: cache value possibly corrupted\");",
          "84:   return FALSE;",
          "85:  }",
          "",
          "[Removed Lines]",
          "82:  if (oidc_util_jwt_verify(r, c->crypto_passphrase, s_json, &z->state, TRUE) == FALSE) {",
          "",
          "[Added Lines]",
          "82:  if (oidc_util_jwt_verify(r, c->crypto_passphrase, s_json, &z->state, FALSE) == FALSE) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}