{
  "cve_id": "CVE-2019-15222",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.2.8. There is a NULL pointer dereference caused by a malicious USB device in the sound/usb/helper.c (motu_microbookii) driver.",
  "repo": "torvalds/linux",
  "patch_hash": "5d78e1c2b7f4be00bbe62141603a631dc7812f35",
  "patch_info": {
    "commit_hash": "5d78e1c2b7f4be00bbe62141603a631dc7812f35",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/5d78e1c2b7f4be00bbe62141603a631dc7812f35",
    "files": [
      "sound/usb/helper.c"
    ],
    "message": "ALSA: usb-audio: Fix gpf in snd_usb_pipe_sanity_check\n\nsyzbot found the following crash on:\n\n  general protection fault: 0000 [#1] SMP KASAN\n  RIP: 0010:snd_usb_pipe_sanity_check+0x80/0x130 sound/usb/helper.c:75\n  Call Trace:\n    snd_usb_motu_microbookii_communicate.constprop.0+0xa0/0x2fb  sound/usb/quirks.c:1007\n    snd_usb_motu_microbookii_boot_quirk sound/usb/quirks.c:1051 [inline]\n    snd_usb_apply_boot_quirk.cold+0x163/0x370 sound/usb/quirks.c:1280\n    usb_audio_probe+0x2ec/0x2010 sound/usb/card.c:576\n    usb_probe_interface+0x305/0x7a0 drivers/usb/core/driver.c:361\n    really_probe+0x281/0x650 drivers/base/dd.c:548\n    ....\n\nIt was introduced in commit 801ebf1043ae for checking pipe and endpoint\ntypes. It is fixed by adding a check of the ep pointer in question.\n\nBugLink: https://syzkaller.appspot.com/bug?extid=d59c4387bfb6eced94e2\nReported-by: syzbot <syzbot+d59c4387bfb6eced94e2@syzkaller.appspotmail.com>\nFixes: 801ebf1043ae (\"ALSA: usb-audio: Sanity checks for each pipe and EP types\")\nCc: Andrey Konovalov <andreyknvl@google.com>\nSigned-off-by: Hillf Danton <hdanton@sina.com>\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
    "before_after_code_files": [
      "sound/usb/helper.c||sound/usb/helper.c"
    ]
  },
  "patch_diff": {
    "sound/usb/helper.c||sound/usb/helper.c": [
      "File: sound/usb/helper.c -> sound/usb/helper.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:  struct usb_host_endpoint *ep;",
      "74:  ep = usb_pipe_endpoint(dev, pipe);",
      "76:   return -EINVAL;",
      "77:  return 0;",
      "78: }",
      "",
      "[Removed Lines]",
      "75:  if (usb_pipetype(pipe) != pipetypes[usb_endpoint_type(&ep->desc)])",
      "",
      "[Added Lines]",
      "75:  if (!ep || usb_pipetype(pipe) != pipetypes[usb_endpoint_type(&ep->desc)])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf134ca6c8eafd7ddc28840f767259b97e950bac",
      "candidate_info": {
        "commit_hash": "bf134ca6c8eafd7ddc28840f767259b97e950bac",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/bf134ca6c8eafd7ddc28840f767259b97e950bac",
        "files": [
          "tools/perf/examples/bpf/augmented_raw_syscalls.c"
        ],
        "message": "perf augmented_raw_syscalls: Switch to using BPF_MAP_TYPE_PROG_ARRAY\n\nTrying to control what arguments to copy, which ones were strings, etc\nall from userspace via maps went nowhere, lots of difficulties to get\nthe verifier satisfied, so use what the fine BPF guys designed for such\na syscall handling mechanism: bpf_tail_call + BPF_MAP_TYPE_PROG_ARRAY.\n\nThe series leading to this should have explained it thoroughly, but the\nend result, explained via gdb should help understand this:\n\n  Breakpoint 1, syscall_arg__scnprintf_filename (bf=0xc002b1 \"\", size=2031, arg=0x7fffffff7970) at builtin-trace.c:1268\n  1268\t{\n  (gdb) n\n  1269\t\tunsigned long ptr = arg->val;\n  (gdb) n\n  1271\t\tif (arg->augmented.args)\n  (gdb) n\n  1272\t\t\treturn syscall_arg__scnprintf_augmented_string(arg, bf, size);\n  (gdb) s\n  syscall_arg__scnprintf_augmented_string (arg=0x7fffffff7970, bf=0xc002b1 \"\", size=2031) at builtin-trace.c:1251\n  1251\t{\n  (gdb) n\n  1252\t\tstruct augmented_arg *augmented_arg = arg->augmented.args;\n  (gdb) n\n  1253\t\tsize_t printed = scnprintf(bf, size, \"\\\"%.*s\\\"\", augmented_arg->size, augmented_arg->value);\n  (gdb) n\n  1258\t\tint consumed = sizeof(*augmented_arg) + augmented_arg->size;\n  (gdb) p bf\n  $1 = 0xc002b1 \"\\\"/etc/ld.so.cache\\\"\"\n  (gdb) bt\n  #0  syscall_arg__scnprintf_augmented_string (arg=0x7fffffff7970, bf=0xc002b1 \"\\\"/etc/ld.so.cache\\\"\", size=2031) at builtin-trace.c:1258\n  #1  0x0000000000492634 in syscall_arg__scnprintf_filename (bf=0xc002b1 \"\\\"/etc/ld.so.cache\\\"\", size=2031, arg=0x7fffffff7970) at builtin-trace.c:1272\n  #2  0x0000000000493cd7 in syscall__scnprintf_val (sc=0xc0de68, bf=0xc002b1 \"\\\"/etc/ld.so.cache\\\"\", size=2031, arg=0x7fffffff7970, val=140737354091036) at builtin-trace.c:1689\n  #3  0x000000000049404f in syscall__scnprintf_args (sc=0xc0de68, bf=0xc002a7 \"AT_FDCWD, \\\"/etc/ld.so.cache\\\"\", size=2041, args=0x7ffff6cbf1ec \"\\234\\377\\377\\377\", augmented_args=0x7ffff6cbf21c, augmented_args_size=28, trace=0x7fffffffa170,\n      thread=0xbff940) at builtin-trace.c:1756\n  #4  0x0000000000494a97 in trace__sys_enter (trace=0x7fffffffa170, evsel=0xbe1900, event=0x7ffff6cbf1a0, sample=0x7fffffff7b00) at builtin-trace.c:1975\n  #5  0x0000000000496ff1 in trace__handle_event (trace=0x7fffffffa170, event=0x7ffff6cbf1a0, sample=0x7fffffff7b00) at builtin-trace.c:2685\n  #6  0x0000000000497edb in __trace__deliver_event (trace=0x7fffffffa170, event=0x7ffff6cbf1a0) at builtin-trace.c:3029\n  #7  0x000000000049801e in trace__deliver_event (trace=0x7fffffffa170, event=0x7ffff6cbf1a0) at builtin-trace.c:3056\n  #8  0x00000000004988de in trace__run (trace=0x7fffffffa170, argc=2, argv=0x7fffffffd660) at builtin-trace.c:3258\n  #9  0x000000000049c2d3 in cmd_trace (argc=2, argv=0x7fffffffd660) at builtin-trace.c:4220\n  #10 0x00000000004dcb6c in run_builtin (p=0xa18e00 <commands+576>, argc=5, argv=0x7fffffffd660) at perf.c:304\n  #11 0x00000000004dcdd9 in handle_internal_command (argc=5, argv=0x7fffffffd660) at perf.c:356\n  #12 0x00000000004dcf20 in run_argv (argcp=0x7fffffffd4bc, argv=0x7fffffffd4b0) at perf.c:400\n  #13 0x00000000004dd28c in main (argc=5, argv=0x7fffffffd660) at perf.c:522\n  (gdb)\n  (gdb) continue\n  Continuing.\n  openat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\n\nNow its a matter of automagically assigning the BPF programs copying\nsyscall arg pointers to functions that are \"open\"-like (i.e. that need\nonly the first syscall arg copied as a string), or \"openat\"-like (2nd\narg, etc).\n\nEnd result in tool output:\n\n  # perf trace -e open* ls /tmp/notthere\n  LLVM: dumping /home/acme/git/perf/tools/perf/examples/bpf/augmented_raw_syscalls.o\n  openat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\n  openat(AT_FDCWD, \"/lib64/libselinux.so.1\", O_RDONLY|O_CLOEXEC) = 3\n  openat(AT_FDCWD, \"/lib64/libcap.so.2\", O_RDONLY|O_CLOEXEC) = 3\n  openat(AT_FDCWD, \"/lib64/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3\n  openat(AT_FDCWD, \"/lib64/libpcre2-8.so.0\", O_RDONLY|O_CLOEXEC) = 3\n  openat(AT_FDCWD, \"/lib64/libdl.so.2\", O_RDONLY|O_CLOEXEC) = 3\n  openat(AT_FDCWD, \"/lib64/libpthread.so.0\", O_RDONLY|O_CLOEXEC) = 3\n  openat(AT_FDCWD, \"\", O_RDONLY|O_CLOEXEC) = 3\n  openat(AT_FDCWD, \"/usr/share/locale/locale.alias\", O_RDONLY|O_CLOEXEC) = 3\n  openat(AT_FDCWD, \"/usr/share/locale/en_US.UTF-8/LC_MESSAGES/coreutils.mo\", O_RDONLY) = ls: cannot access '/tmp/notthere'-1 ENOENT (No such file or directory)\n  openat(AT_FDCWD, \"/usr/share/locale/en_US.utf8/LC_MESSAGES/coreutils.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\n  openat(AT_FDCWD, \"/usr/share/locale/en_US/LC_MESSAGES/coreutils.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\n  openat(AT_FDCWD, \"/usr/share/locale/en.UTF-8/LC_MESSAGES/coreutils.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\n  openat(AT_FDCWD, \"/usr/share/locale/en.utf8/LC_MESSAGES/coreutils.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\n  openat(AT_FDCWD, \"/usr/share/locale/en/LC_MESSAGES/coreutils.mo\", O_RDONLY: No such file or directory) =\n  -1 ENOENT (No such file or directory)\n  openat(AT_FDCWD, \"/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\n  openat(AT_FDCWD, \"/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\n  openat(AT_FDCWD, \"/usr/share/locale/en_US/LC_MESSAGES/libc.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\n  openat(AT_FDCWD, \"/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\n  openat(AT_FDCWD, \"/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\n  openat(AT_FDCWD, \"/usr/share/locale/en/LC_MESSAGES/libc.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\n  #\n\nCc: Adrian Hunter <adrian.hunter@intel.com>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Luis Cl\u00e1udio Gon\u00e7alves <lclaudio@redhat.com>\nCc: Namhyung Kim <namhyung@kernel.org>\nLink: https://lkml.kernel.org/n/tip-snc7ry99cl6r0pqaspjim98x@git.kernel.org\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
        "before_after_code_files": [
          "tools/perf/examples/bpf/augmented_raw_syscalls.c||tools/perf/examples/bpf/augmented_raw_syscalls.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/perf/examples/bpf/augmented_raw_syscalls.c||tools/perf/examples/bpf/augmented_raw_syscalls.c": [
          "File: tools/perf/examples/bpf/augmented_raw_syscalls.c -> tools/perf/examples/bpf/augmented_raw_syscalls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:  probe_read(&augmented_args->args, sizeof(augmented_args->args), args);",
          "284: }",
          "286: SEC(\"raw_syscalls:sys_exit\")",
          "287: int sys_exit(struct syscall_exit_args *args)",
          "288: {",
          "289:  struct syscall_exit_args exit_args;",
          "292:  if (pid_filter__has(&pids_filtered, getpid()))",
          "293:   return 0;",
          "295:  probe_read(&exit_args, sizeof(exit_args), args);",
          "302: }",
          "304: license(GPL);",
          "",
          "[Removed Lines]",
          "177:  syscall = bpf_map_lookup_elem(&syscalls, &augmented_args->args.syscall_nr);",
          "178:  if (syscall == NULL || !syscall->enabled)",
          "179:   return 0;",
          "227:  u8 arg;",
          "228: #pragma clang loop unroll(full)",
          "229:  for (arg = 0; arg < 6; ++arg) {",
          "230:   if (syscall->string_args_len[arg] != 0) {",
          "231:    filename_len = syscall->string_args_len[arg];",
          "232:    filename_arg = (const void *)args->args[arg];",
          "233:    __asm__ __volatile__(\"\": : :\"memory\");",
          "234:    break;",
          "235:   }",
          "236:  }",
          "238:  verifier log:",
          "240: ; if (syscall->string_args_len[arg] != 0) {",
          "241: 37: (69) r3 = *(u16 *)(r0 +2)",
          "242:  R0=map_value(id=0,off=0,ks=4,vs=14,imm=0) R1_w=inv0 R2_w=map_value(id=0,off=2,ks=4,vs=14,imm=0) R6=ctx(id=0,off=0,imm=0) R7=map_value(id=0,off=0,ks=4,vs=4168,imm=0) R10=fp0,call_-1 fp-8=mmmmmmmm",
          "243: ; if (syscall->string_args_len[arg] != 0) {",
          "244: 38: (55) if r3 != 0x0 goto pc+5",
          "245:  R0=map_value(id=0,off=0,ks=4,vs=14,imm=0) R1=inv0 R2=map_value(id=0,off=2,ks=4,vs=14,imm=0) R3=inv0 R6=ctx(id=0,off=0,imm=0) R7=map_value(id=0,off=0,ks=4,vs=4168,imm=0) R10=fp0,call_-1 fp-8=mmmmmmmm",
          "246: 39: (b7) r1 = 1",
          "247: ; if (syscall->string_args_len[arg] != 0) {",
          "248: 40: (bf) r2 = r0",
          "249: 41: (07) r2 += 4",
          "250: 42: (69) r3 = *(u16 *)(r0 +4)",
          "251:  R0=map_value(id=0,off=0,ks=4,vs=14,imm=0) R1_w=inv1 R2_w=map_value(id=0,off=4,ks=4,vs=14,imm=0) R3_w=inv0 R6=ctx(id=0,off=0,imm=0) R7=map_value(id=0,off=0,ks=4,vs=4168,imm=0) R10=fp0,call_-1 fp-8=mmmmmmmm",
          "252: ; if (syscall->string_args_len[arg] != 0) {",
          "253: 43: (15) if r3 == 0x0 goto pc+32",
          "254:  R0=map_value(id=0,off=0,ks=4,vs=14,imm=0) R1=inv1 R2=map_value(id=0,off=4,ks=4,vs=14,imm=0) R3=inv(id=0,umax_value=65535,var_off=(0x0; 0xffff)) R6=ctx(id=0,off=0,imm=0) R7=map_value(id=0,off=0,ks=4,vs=4168,imm=0) R10=fp0,call_-1 fp-8=mmmmmmmm",
          "255: ; filename_arg = (const void *)args->args[arg];",
          "256: 44: (67) r1 <<= 3",
          "257: 45: (bf) r3 = r6",
          "258: 46: (0f) r3 += r1",
          "259: 47: (b7) r5 = 64",
          "260: 48: (79) r3 = *(u64 *)(r3 +16)",
          "261: dereference of modified ctx ptr R3 off=8 disallowed",
          "262: processed 46 insns (limit 1000000) max_states_per_insn 0 total_states 12 peak_states 12 mark_read 7",
          "265: #define __loop_iter(arg) \\",
          "266:  if (syscall->string_args_len[arg] != 0) { \\",
          "267:   unsigned int filename_len = syscall->string_args_len[arg]; \\",
          "268:   const void *filename_arg = (const void *)args->args[arg]; \\",
          "269:   if (filename_len <= sizeof(augmented_args->filename.value)) \\",
          "270:    len += augmented_filename__read(&augmented_args->filename, filename_arg, filename_len);",
          "271: #define loop_iter_first() __loop_iter(0); }",
          "272: #define loop_iter(arg) else __loop_iter(arg); }",
          "273: #define loop_iter_last(arg) else __loop_iter(arg); __asm__ __volatile__(\"\": : :\"memory\"); }",
          "275:  loop_iter_first()",
          "276:  loop_iter(1)",
          "277:  loop_iter(2)",
          "278:  loop_iter(3)",
          "279:  loop_iter(4)",
          "280:  loop_iter_last(5)",
          "283:  return perf_event_output(args, &__augmented_syscalls__, BPF_F_CURRENT_CPU, augmented_args, len);",
          "290:  struct syscall *syscall;",
          "297:  syscall = bpf_map_lookup_elem(&syscalls, &exit_args.syscall_nr);",
          "298:  if (syscall == NULL || !syscall->enabled)",
          "299:   return 0;",
          "301:  return 1;",
          "",
          "[Added Lines]",
          "182:  bpf_tail_call(args, &syscalls_sys_enter, augmented_args->args.syscall_nr);",
          "185:  return 0;",
          "202:  bpf_tail_call(args, &syscalls_sys_exit, exit_args.syscall_nr);",
          "206:  return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55b40dbf0e76b4bfb9d8b3a16a0208640a9a45df",
      "candidate_info": {
        "commit_hash": "55b40dbf0e76b4bfb9d8b3a16a0208640a9a45df",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/55b40dbf0e76b4bfb9d8b3a16a0208640a9a45df",
        "files": [
          "net/core/dev.c"
        ],
        "message": "net: fix ifindex collision during namespace removal\n\nCommit aca51397d014 (\"netns: Fix arbitrary net_device-s corruptions\non net_ns stop.\") introduced a possibility to hit a BUG in case device\nis returning back to init_net and two following conditions are met:\n1) dev->ifindex value is used in a name of another \"dev%d\"\n   device in init_net.\n2) dev->name is used by another device in init_net.\n\nUnder real life circumstances this is hard to get. Therefore this has\nbeen present happily for over 10 years. To reproduce:\n\n$ ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: dummy0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 86:89:3f:86:61:29 brd ff:ff:ff:ff:ff:ff\n3: enp0s2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 52:54:00:12:34:56 brd ff:ff:ff:ff:ff:ff\n$ ip netns add ns1\n$ ip -n ns1 link add dummy1ns1 type dummy\n$ ip -n ns1 link add dummy2ns1 type dummy\n$ ip link set enp0s2 netns ns1\n$ ip -n ns1 link set enp0s2 name dummy0\n[  100.858894] virtio_net virtio0 dummy0: renamed from enp0s2\n$ ip link add dev4 type dummy\n$ ip -n ns1 a\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: dummy1ns1: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 16:63:4c:38:3e:ff brd ff:ff:ff:ff:ff:ff\n3: dummy2ns1: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether aa:9e:86:dd:6b:5d brd ff:ff:ff:ff:ff:ff\n4: dummy0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 52:54:00:12:34:56 brd ff:ff:ff:ff:ff:ff\n$ ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: dummy0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 86:89:3f:86:61:29 brd ff:ff:ff:ff:ff:ff\n4: dev4: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 5a:e1:4a:b6:ec:f8 brd ff:ff:ff:ff:ff:ff\n$ ip netns del ns1\n[  158.717795] default_device_exit: failed to move dummy0 to init_net: -17\n[  158.719316] ------------[ cut here ]------------\n[  158.720591] kernel BUG at net/core/dev.c:9824!\n[  158.722260] invalid opcode: 0000 [#1] SMP KASAN PTI\n[  158.723728] CPU: 0 PID: 56 Comm: kworker/u2:1 Not tainted 5.3.0-rc1+ #18\n[  158.725422] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-2.fc30 04/01/2014\n[  158.727508] Workqueue: netns cleanup_net\n[  158.728915] RIP: 0010:default_device_exit.cold+0x1d/0x1f\n[  158.730683] Code: 84 e8 18 c9 3e fe 0f 0b e9 70 90 ff ff e8 36 e4 52 fe 89 d9 4c 89 e2 48 c7 c6 80 d6 25 84 48 c7 c7 20 c0 25 84 e8 f4 c8 3e\n[  158.736854] RSP: 0018:ffff8880347e7b90 EFLAGS: 00010282\n[  158.738752] RAX: 000000000000003b RBX: 00000000ffffffef RCX: 0000000000000000\n[  158.741369] RDX: 0000000000000000 RSI: ffffffff8128013d RDI: ffffed10068fcf64\n[  158.743418] RBP: ffff888033550170 R08: 000000000000003b R09: fffffbfff0b94b9c\n[  158.745626] R10: fffffbfff0b94b9b R11: ffffffff85ca5cdf R12: ffff888032f28000\n[  158.748405] R13: dffffc0000000000 R14: ffff8880335501b8 R15: 1ffff110068fcf72\n[  158.750638] FS:  0000000000000000(0000) GS:ffff888036000000(0000) knlGS:0000000000000000\n[  158.752944] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  158.755245] CR2: 00007fe8b45d21d0 CR3: 00000000340b4005 CR4: 0000000000360ef0\n[  158.757654] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n[  158.760012] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n[  158.762758] Call Trace:\n[  158.763882]  ? dev_change_net_namespace+0xbb0/0xbb0\n[  158.766148]  ? devlink_nl_cmd_set_doit+0x520/0x520\n[  158.768034]  ? dev_change_net_namespace+0xbb0/0xbb0\n[  158.769870]  ops_exit_list.isra.0+0xa8/0x150\n[  158.771544]  cleanup_net+0x446/0x8f0\n[  158.772945]  ? unregister_pernet_operations+0x4a0/0x4a0\n[  158.775294]  process_one_work+0xa1a/0x1740\n[  158.776896]  ? pwq_dec_nr_in_flight+0x310/0x310\n[  158.779143]  ? do_raw_spin_lock+0x11b/0x280\n[  158.780848]  worker_thread+0x9e/0x1060\n[  158.782500]  ? process_one_work+0x1740/0x1740\n[  158.784454]  kthread+0x31b/0x420\n[  158.786082]  ? __kthread_create_on_node+0x3f0/0x3f0\n[  158.788286]  ret_from_fork+0x3a/0x50\n[  158.789871] ---[ end trace defd6c657c71f936 ]---\n[  158.792273] RIP: 0010:default_device_exit.cold+0x1d/0x1f\n[  158.795478] Code: 84 e8 18 c9 3e fe 0f 0b e9 70 90 ff ff e8 36 e4 52 fe 89 d9 4c 89 e2 48 c7 c6 80 d6 25 84 48 c7 c7 20 c0 25 84 e8 f4 c8 3e\n[  158.804854] RSP: 0018:ffff8880347e7b90 EFLAGS: 00010282\n[  158.807865] RAX: 000000000000003b RBX: 00000000ffffffef RCX: 0000000000000000\n[  158.811794] RDX: 0000000000000000 RSI: ffffffff8128013d RDI: ffffed10068fcf64\n[  158.816652] RBP: ffff888033550170 R08: 000000000000003b R09: fffffbfff0b94b9c\n[  158.820930] R10: fffffbfff0b94b9b R11: ffffffff85ca5cdf R12: ffff888032f28000\n[  158.825113] R13: dffffc0000000000 R14: ffff8880335501b8 R15: 1ffff110068fcf72\n[  158.829899] FS:  0000000000000000(0000) GS:ffff888036000000(0000) knlGS:0000000000000000\n[  158.834923] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  158.838164] CR2: 00007fe8b45d21d0 CR3: 00000000340b4005 CR4: 0000000000360ef0\n[  158.841917] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n[  158.845149] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n\nFix this by checking if a device with the same name exists in init_net\nand fallback to original code - dev%d to allocate name - in case it does.\n\nThis was found using syzkaller.\n\nFixes: aca51397d014 (\"netns: Fix arbitrary net_device-s corruptions on net_ns stop.\")\nSigned-off-by: Jiri Pirko <jiri@mellanox.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/core/dev.c||net/core/dev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/core/dev.c||net/core/dev.c": [
          "File: net/core/dev.c -> net/core/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9703:   snprintf(fb_name, IFNAMSIZ, \"dev%d\", dev->ifindex);",
          "9704:   err = dev_change_net_namespace(dev, &init_net, fb_name);",
          "9705:   if (err) {",
          "9706:    pr_emerg(\"%s: failed to move %s to init_net: %d\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9704:   if (__dev_get_by_name(&init_net, fb_name))",
          "9705:    snprintf(fb_name, IFNAMSIZ, \"dev%%d\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "801ebf1043ae7b182588554cc9b9ad3c14bc2ab5",
      "candidate_info": {
        "commit_hash": "801ebf1043ae7b182588554cc9b9ad3c14bc2ab5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/801ebf1043ae7b182588554cc9b9ad3c14bc2ab5",
        "files": [
          "sound/usb/helper.c",
          "sound/usb/helper.h",
          "sound/usb/quirks.c"
        ],
        "message": "ALSA: usb-audio: Sanity checks for each pipe and EP types\n\nThe recent USB core code performs sanity checks for the given pipe and\nEP types, and it can be hit by manipulated USB descriptors by syzbot.\nFor making syzbot happier, this patch introduces a local helper for a\nsanity check in the driver side and calls it at each place before the\nmessage handling, so that we can avoid the WARNING splats.\n\nReported-by: syzbot+d952e5e28f5fb7718d23@syzkaller.appspotmail.com\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
        "before_after_code_files": [
          "sound/usb/helper.c||sound/usb/helper.c",
          "sound/usb/helper.h||sound/usb/helper.h",
          "sound/usb/quirks.c||sound/usb/quirks.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sound/usb/helper.c||sound/usb/helper.c"
          ],
          "candidate": [
            "sound/usb/helper.c||sound/usb/helper.c"
          ]
        }
      },
      "candidate_diff": {
        "sound/usb/helper.c||sound/usb/helper.c": [
          "File: sound/usb/helper.c -> sound/usb/helper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:  return NULL;",
          "77: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: int snd_usb_pipe_sanity_check(struct usb_device *dev, unsigned int pipe)",
          "81: {",
          "82:  static const int pipetypes[4] = {",
          "83:   PIPE_CONTROL, PIPE_ISOCHRONOUS, PIPE_BULK, PIPE_INTERRUPT",
          "84:  };",
          "85:  struct usb_host_endpoint *ep;",
          "87:  ep = usb_pipe_endpoint(dev, pipe);",
          "88:  if (usb_pipetype(pipe) != pipetypes[usb_endpoint_type(&ep->desc)])",
          "89:   return -EINVAL;",
          "90:  return 0;",
          "91: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:  void *buf = NULL;",
          "89:  int timeout;",
          "91:  if (size > 0) {",
          "92:   buf = kmemdup(data, size, GFP_KERNEL);",
          "93:   if (!buf)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:  if (snd_usb_pipe_sanity_check(dev, pipe))",
          "106:   return -EINVAL;",
          "",
          "---------------"
        ],
        "sound/usb/helper.h||sound/usb/helper.h": [
          "File: sound/usb/helper.h -> sound/usb/helper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: void *snd_usb_find_desc(void *descstart, int desclen, void *after, u8 dtype);",
          "8: void *snd_usb_find_csint_desc(void *descstart, int desclen, void *after, u8 dsubtype);",
          "10: int snd_usb_ctl_msg(struct usb_device *dev, unsigned int pipe,",
          "11:       __u8 request, __u8 requesttype, __u16 value, __u16 index,",
          "12:       void *data, __u16 size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: int snd_usb_pipe_sanity_check(struct usb_device *dev, unsigned int pipe);",
          "",
          "---------------"
        ],
        "sound/usb/quirks.c||sound/usb/quirks.c": [
          "File: sound/usb/quirks.c -> sound/usb/quirks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "840: static int snd_usb_accessmusic_boot_quirk(struct usb_device *dev)",
          "841: {",
          "842:  int err, actual_length;",
          "845:  static const u8 seq[] = { 0x4e, 0x73, 0x52, 0x01 };",
          "848:  if (!buf)",
          "849:   return -ENOMEM;",
          "850:  err = usb_interrupt_msg(dev, usb_sndintpipe(dev, 0x05), buf,",
          "",
          "[Removed Lines]",
          "847:  void *buf = kmemdup(seq, ARRAY_SIZE(seq), GFP_KERNEL);",
          "",
          "[Added Lines]",
          "845:  void *buf;",
          "847:  if (snd_usb_pipe_sanity_check(dev, usb_sndintpipe(dev, 0x05)))",
          "848:   return -EINVAL;",
          "849:  buf = kmemdup(seq, ARRAY_SIZE(seq), GFP_KERNEL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "870: static int snd_usb_nativeinstruments_boot_quirk(struct usb_device *dev)",
          "871: {",
          "873:       0xaf, USB_TYPE_VENDOR | USB_RECIP_DEVICE,",
          "874:       1, 0, NULL, 0, 1000);",
          "",
          "[Removed Lines]",
          "872:  int ret = usb_control_msg(dev, usb_sndctrlpipe(dev, 0),",
          "",
          "[Added Lines]",
          "874:  int ret;",
          "876:  if (snd_usb_pipe_sanity_check(dev, usb_sndctrlpipe(dev, 0)))",
          "877:   return -EINVAL;",
          "878:  ret = usb_control_msg(dev, usb_sndctrlpipe(dev, 0),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "977:  dev_dbg(&dev->dev, \"Waiting for Axe-Fx III to boot up...\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "985:  if (snd_usb_pipe_sanity_check(dev, usb_sndctrlpipe(dev, 0)))",
          "986:   return -EINVAL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1008: {",
          "1009:  int err, actual_length;",
          "1011:  err = usb_interrupt_msg(dev, usb_sndintpipe(dev, 0x01), buf, *length,",
          "1012:     &actual_length, 1000);",
          "1013:  if (err < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1019:  if (snd_usb_pipe_sanity_check(dev, usb_sndintpipe(dev, 0x01)))",
          "1020:   return -EINVAL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1019:  memset(buf, 0, buf_size);",
          "1021:  err = usb_interrupt_msg(dev, usb_rcvintpipe(dev, 0x82), buf, buf_size,",
          "1022:     &actual_length, 1000);",
          "1023:  if (err < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1031:  if (snd_usb_pipe_sanity_check(dev, usb_rcvintpipe(dev, 0x82)))",
          "1032:   return -EINVAL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}