{
  "cve_id": "CVE-2013-1819",
  "cve_desc": "The _xfs_buf_find function in fs/xfs/xfs_buf.c in the Linux kernel before 3.7.6 does not validate block numbers, which allows local users to cause a denial of service (NULL pointer dereference and system crash) or possibly have unspecified other impact by leveraging the ability to mount an XFS filesystem containing a metadata inode with an invalid extent map.",
  "repo": "torvalds/linux",
  "patch_hash": "eb178619f930fa2ba2348de332a1ff1c66a31424",
  "patch_info": {
    "commit_hash": "eb178619f930fa2ba2348de332a1ff1c66a31424",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/eb178619f930fa2ba2348de332a1ff1c66a31424",
    "files": [
      "fs/xfs/xfs_buf.c"
    ],
    "message": "xfs: fix _xfs_buf_find oops on blocks beyond the filesystem end\n\nWhen _xfs_buf_find is passed an out of range address, it will fail\nto find a relevant struct xfs_perag and oops with a null\ndereference. This can happen when trying to walk a filesystem with a\nmetadata inode that has a partially corrupted extent map (i.e. the\nblock number returned is corrupt, but is otherwise intact) and we\ntry to read from the corrupted block address.\n\nIn this case, just fail the lookup. If it is readahead being issued,\nit will simply not be done, but if it is real read that fails we\nwill get an error being reported.  Ideally this case should result\nin an EFSCORRUPTED error being reported, but we cannot return an\nerror through xfs_buf_read() or xfs_buf_get() so this lookup failure\nmay result in ENOMEM or EIO errors being reported instead.\n\nSigned-off-by: Dave Chinner <dchinner@redhat.com>\nReviewed-by: Brian Foster <bfoster@redhat.com>\nReviewed-by: Ben Myers <bpm@sgi.com>\nSigned-off-by: Ben Myers <bpm@sgi.com>",
    "before_after_code_files": [
      "fs/xfs/xfs_buf.c||fs/xfs/xfs_buf.c"
    ]
  },
  "patch_diff": {
    "fs/xfs/xfs_buf.c||fs/xfs/xfs_buf.c": [
      "File: fs/xfs/xfs_buf.c -> fs/xfs/xfs_buf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:  struct rb_node  *parent;",
      "488:  xfs_buf_t  *bp;",
      "489:  xfs_daddr_t  blkno = map[0].bm_bn;",
      "490:  int   numblks = 0;",
      "491:  int   i;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490:  xfs_daddr_t  eofs;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "498:  ASSERT(!(numbytes < (1 << btp->bt_sshift)));",
      "499:  ASSERT(!(BBTOB(blkno) & (xfs_off_t)btp->bt_smask));",
      "502:  pag = xfs_perag_get(btp->bt_mount,",
      "503:     xfs_daddr_to_agno(btp->bt_mount, blkno));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "506:  eofs = XFS_FSB_TO_BB(btp->bt_mount, btp->bt_mount->m_sb.sb_dblocks);",
      "507:  if (blkno >= eofs) {",
      "513:   xfs_alert(btp->bt_mount,",
      "514:      \"%s: Block out of range: block 0x%llx, EOFS 0x%llx \",",
      "515:      __func__, blkno, eofs);",
      "516:   return NULL;",
      "517:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "10616b806d1d7835b1d23b8d75ef638f92cb98b6",
      "candidate_info": {
        "commit_hash": "10616b806d1d7835b1d23b8d75ef638f92cb98b6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/10616b806d1d7835b1d23b8d75ef638f92cb98b6",
        "files": [
          "fs/xfs/xfs_buf.c"
        ],
        "message": "xfs: fix _xfs_buf_find oops on blocks beyond the filesystem end\n\nWhen _xfs_buf_find is passed an out of range address, it will fail\nto find a relevant struct xfs_perag and oops with a null\ndereference. This can happen when trying to walk a filesystem with a\nmetadata inode that has a partially corrupted extent map (i.e. the\nblock number returned is corrupt, but is otherwise intact) and we\ntry to read from the corrupted block address.\n\nIn this case, just fail the lookup. If it is readahead being issued,\nit will simply not be done, but if it is real read that fails we\nwill get an error being reported.  Ideally this case should result\nin an EFSCORRUPTED error being reported, but we cannot return an\nerror through xfs_buf_read() or xfs_buf_get() so this lookup failure\nmay result in ENOMEM or EIO errors being reported instead.\n\nSigned-off-by: Dave Chinner <dchinner@redhat.com>\nReviewed-by: Brian Foster <bfoster@redhat.com>\nReviewed-by: Ben Myers <bpm@sgi.com>\nSigned-off-by: Ben Myers <bpm@sgi.com>",
        "before_after_code_files": [
          "fs/xfs/xfs_buf.c||fs/xfs/xfs_buf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "fs/xfs/xfs_buf.c||fs/xfs/xfs_buf.c"
          ],
          "candidate": [
            "fs/xfs/xfs_buf.c||fs/xfs/xfs_buf.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/xfs/xfs_buf.c||fs/xfs/xfs_buf.c": [
          "File: fs/xfs/xfs_buf.c -> fs/xfs/xfs_buf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:  struct rb_node  *parent;",
          "488:  xfs_buf_t  *bp;",
          "489:  xfs_daddr_t  blkno = map[0].bm_bn;",
          "490:  int   numblks = 0;",
          "491:  int   i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:  xfs_daddr_t  eofs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "498:  ASSERT(!(numbytes < (1 << btp->bt_sshift)));",
          "499:  ASSERT(!(BBTOB(blkno) & (xfs_off_t)btp->bt_smask));",
          "502:  pag = xfs_perag_get(btp->bt_mount,",
          "503:     xfs_daddr_to_agno(btp->bt_mount, blkno));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:  eofs = XFS_FSB_TO_BB(btp->bt_mount, btp->bt_mount->m_sb.sb_dblocks);",
          "507:  if (blkno >= eofs) {",
          "513:   xfs_alert(btp->bt_mount,",
          "514:      \"%s: Block out of range: block 0x%llx, EOFS 0x%llx \",",
          "515:      __func__, blkno, eofs);",
          "516:   return NULL;",
          "517:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}