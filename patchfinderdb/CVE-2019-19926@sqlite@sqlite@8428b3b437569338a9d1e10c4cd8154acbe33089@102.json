{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f10c535fa5de97318abfec7d325a6a8a35919fd0",
      "candidate_info": {
        "commit_hash": "f10c535fa5de97318abfec7d325a6a8a35919fd0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f10c535fa5de97318abfec7d325a6a8a35919fd0",
        "files": [
          "ext/fts3/README.tokenizers",
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "test/fts3atoken.test"
        ],
        "message": "The fts3_tokenizer() function returns NULL if the SQLITE_DBCONFIG_ENABLE_FTS_TOKENIZER setting is disabled, which is is by default.\n\nFossilOrigin-Name: f5732f4caf7a37a6445c61ae0d0ac14cc9deb897376e73aa36a1ead025b92c69",
        "before_after_code_files": [
          "ext/fts3/README.tokenizers||ext/fts3/README.tokenizers",
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/README.tokenizers||ext/fts3/README.tokenizers": [
          "File: ext/fts3/README.tokenizers -> ext/fts3/README.tokenizers",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   SECURITY: If the fts3 extension is used in an environment where potentially",
          "54:     malicious users may execute arbitrary SQL (i.e. gears), they should be",
          "58:   See \"Sample code\" below for an example of calling the fts3_tokenizer()",
          "59:   function from C code.",
          "",
          "[Removed Lines]",
          "55:     prevented from invoking the fts3_tokenizer() function, possibly using the",
          "56:     authorisation callback.",
          "",
          "[Added Lines]",
          "55:     prevented from invoking the fts3_tokenizer() function.  The",
          "56:     fts3_tokenizer() function is disabled by default. It is only enabled",
          "57:     by SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER. Do not enable it in",
          "58:     security sensitive environments.",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:       return;",
          "107:     }",
          "108:   }",
          "110: }",
          "112: int sqlite3Fts3IsIdChar(char c){",
          "",
          "[Removed Lines]",
          "109:   sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "",
          "[Added Lines]",
          "109:   if( fts3TokenizerEnabled(context) ){",
          "110:     sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "111:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9a0a93c89d3fdd0f9000a9226388e2e53f299165e043913f40b83bf597bfea04",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: # simple input string via the built-in test function. This is as much",
          "108: # to test the test function as the tokenizer implementations.",
          "109: #",
          "110: do_test fts3atoken-3.1 {",
          "111:   execsql {",
          "112:     SELECT fts3_tokenizer_test('simple', 'I don''t see how');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
      "candidate_info": {
        "commit_hash": "9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Always use the symbolic name SQLITE_IDXTYPE_PRIMARYKEY rather than a hard-coded magic number 2.\n\nFossilOrigin-Name: 55d43adc894a6b1e0f77bf481dad6dd604a0dc0022e72bbf2e3037f97351971e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a6509ca3dc2602c7d0376230ee63c1bb4c4066f007e77e9ac20d8eee966e5e13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1669:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regIdx, pIdx->nColumn, aRegIdx[ix]);",
          "1670:     VdbeComment((v, \"for %s\", pIdx->zName));",
          "1671: #ifdef SQLITE_ENABLE_NULL_TRIM",
          "1673: #endif",
          "",
          "[Removed Lines]",
          "1672:     if( pIdx->idxType==2 ) sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "",
          "[Added Lines]",
          "1672:     if( pIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "1673:       sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "1674:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2410:         sqlite3VdbeAddOp1(v, OP_SeekEnd, iDest);",
          "2411:       }",
          "2412:     }",
          "2414:       idxInsFlags |= OPFLAG_NCHANGE;",
          "2415:     }",
          "2416:     sqlite3VdbeAddOp2(v, OP_IdxInsert, iDest, regData);",
          "",
          "[Removed Lines]",
          "2413:     if( !HasRowid(pSrc) && pDestIdx->idxType==2 ){",
          "",
          "[Added Lines]",
          "2415:     if( !HasRowid(pSrc) && pDestIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
      "candidate_info": {
        "commit_hash": "fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid a left-shift of a negative value (undefined behaviour) when dealing with a corrupt database in fts3.\n\nFossilOrigin-Name: b851d12474035328df8354c7da8d81bc78833c8c704153f9f573c19b47a8487e",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338: }",
          "340: #define GETVARINT_STEP(v, ptr, shift, mask1, mask2, var, ret) \\",
          "342:   if( (v & mask2)==0 ){ var = v; return ret; }",
          "343: #define GETVARINT_INIT(v, ptr, shift, mask1, mask2, var, ret) \\",
          "344:   v = (*ptr++);                                               \\",
          "",
          "[Removed Lines]",
          "341:   v = (v & mask1) | ( (*ptr++) << shift );                    \\",
          "",
          "[Added Lines]",
          "341:   v = (v & mask1) | ( (*(ptr++)) << shift );  \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378: int sqlite3Fts3GetVarint32(const char *p, int *pi){",
          "379:   u32 a;",
          "381: #ifndef fts3GetVarint32",
          "383: #else",
          "385:   assert( a & 0x80 );",
          "386: #endif",
          "391:   a = (a & 0x0FFFFFFF );",
          "393:   assert( 0==(a & 0x80000000) );",
          "394:   assert( *pi>=0 );",
          "395:   return 5;",
          "",
          "[Removed Lines]",
          "382:   GETVARINT_INIT(a, p, 0,  0x00,     0x80, *pi, 1);",
          "384:   a = (*p++);",
          "388:   GETVARINT_STEP(a, p, 7,  0x7F,     0x4000, *pi, 2);",
          "389:   GETVARINT_STEP(a, p, 14, 0x3FFF,   0x200000, *pi, 3);",
          "390:   GETVARINT_STEP(a, p, 21, 0x1FFFFF, 0x10000000, *pi, 4);",
          "",
          "[Added Lines]",
          "379:   const unsigned char *ptr = (const unsigned char*)p;",
          "383:   GETVARINT_INIT(a, ptr, 0,  0x00,     0x80, *pi, 1);",
          "385:   a = (*ptr++);",
          "389:   GETVARINT_STEP(a, ptr, 7,  0x7F,     0x4000, *pi, 2);",
          "390:   GETVARINT_STEP(a, ptr, 14, 0x3FFF,   0x200000, *pi, 3);",
          "391:   GETVARINT_STEP(a, ptr, 21, 0x1FFFFF, 0x10000000, *pi, 4);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cad5da1bf5f65ad87d97b72e9a84081fde455ba4085e79943fdf6c0144b1ef83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6dc1e5b7016dcf90360c7688ccbc739293c0fcb",
      "candidate_info": {
        "commit_hash": "e6dc1e5b7016dcf90360c7688ccbc739293c0fcb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6dc1e5b7016dcf90360c7688ccbc739293c0fcb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/sqliteInt.h",
          "test/altertab3.test"
        ],
        "message": "Fix a problem in ALTER TABLE that could occur if an index, view or trigger in the schema features an expression of the form ((SELECT ...) IN ()) where the SELECT statement uses a CTE.\n\nFossilOrigin-Name: 7e5ad8e0ab7ee91a5ccb19a9654d6a036233f74d2fdc45f7315feb3d9d035fd4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d43e0efb9642037dd751cfed13438e71cfceb50e14a0ec603880c6c3be2e93b1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "697:   RenameToken *pNew;",
          "698:   assert( pPtr || pParse->db->mallocFailed );",
          "699:   renameTokenCheckAll(pParse, pPtr);",
          "706:   }",
          "708:   return pPtr;",
          "",
          "[Removed Lines]",
          "700:   pNew = sqlite3DbMallocZero(pParse->db, sizeof(RenameToken));",
          "701:   if( pNew ){",
          "702:     pNew->p = pPtr;",
          "703:     pNew->t = *pToken;",
          "704:     pNew->pNext = pParse->pRename;",
          "705:     pParse->pRename = pNew;",
          "",
          "[Added Lines]",
          "700:   if( pParse->eParseMode!=PARSE_MODE_UNMAP ){",
          "701:     pNew = sqlite3DbMallocZero(pParse->db, sizeof(RenameToken));",
          "702:     if( pNew ){",
          "703:       pNew->p = pPtr;",
          "704:       pNew->t = *pToken;",
          "705:       pNew->pNext = pParse->pRename;",
          "706:       pParse->pRename = pNew;",
          "707:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "783: void sqlite3RenameExprUnmap(Parse *pParse, Expr *pExpr){",
          "784:   Walker sWalker;",
          "785:   memset(&sWalker, 0, sizeof(Walker));",
          "786:   sWalker.pParse = pParse;",
          "787:   sWalker.xExprCallback = renameUnmapExprCb;",
          "788:   sWalker.xSelectCallback = renameUnmapSelectCb;",
          "789:   sqlite3WalkExpr(&sWalker, pExpr);",
          "790: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786:   u8 eMode = pParse->eParseMode;",
          "792:   pParse->eParseMode = PARSE_MODE_UNMAP;",
          "794:   pParse->eParseMode = eMode;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "992:   memset(p, 0, sizeof(Parse));",
          "994:   p->db = db;",
          "995:   p->nQueryLoop = 1;",
          "996:   rc = sqlite3RunParser(p, zSql, &zErr);",
          "",
          "[Removed Lines]",
          "993:   p->eParseMode = (bTable ? PARSE_MODE_RENAME_TABLE : PARSE_MODE_RENAME_COLUMN);",
          "",
          "[Added Lines]",
          "998:   p->eParseMode = PARSE_MODE_RENAME;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3236: #define PARSE_MODE_NORMAL        0",
          "3237: #define PARSE_MODE_DECLARE_VTAB  1",
          "",
          "[Removed Lines]",
          "3238: #define PARSE_MODE_RENAME_COLUMN 2",
          "3239: #define PARSE_MODE_RENAME_TABLE  3",
          "",
          "[Added Lines]",
          "3238: #define PARSE_MODE_RENAME        2",
          "3239: #define PARSE_MODE_UNMAP         3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3258: #if defined(SQLITE_OMIT_ALTERTABLE)",
          "3259:   #define IN_RENAME_OBJECT 0",
          "3260: #else",
          "3262: #endif",
          "3264: #if defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_OMIT_ALTERTABLE)",
          "",
          "[Removed Lines]",
          "3261:   #define IN_RENAME_OBJECT (pParse->eParseMode>=PARSE_MODE_RENAME_COLUMN)",
          "",
          "[Added Lines]",
          "3261:   #define IN_RENAME_OBJECT (pParse->eParseMode>=PARSE_MODE_RENAME)",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:   ALTER TABLE s RENAME a TO a2;",
          "476: } {1 {error in index k: no tables specified}}",
          "478: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478: #------------------------------------------------------------------------",
          "479: #",
          "480: reset_db",
          "481: do_execsql_test 21.1 {",
          "482:   CREATE TABLE s(col);",
          "483:   CREATE VIEW v AS SELECT (",
          "484:     WITH x(a) AS(SELECT * FROM s) VALUES(RIGHT)",
          "485:   ) IN() ;",
          "486:   CREATE TABLE a(a);",
          "487:   ALTER TABLE a RENAME a TO b;",
          "488: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1dd3db537e98720fc840422f066e6a121983565",
      "candidate_info": {
        "commit_hash": "b1dd3db537e98720fc840422f066e6a121983565",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1dd3db537e98720fc840422f066e6a121983565",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/cg_anno.tcl"
        ],
        "message": "Tweak the tool/cg_anno.tcl script so that it can run on systems without /usr/bin/tclsh.\n\nFossilOrigin-Name: a026189aa46114d2de4f1da5882aeef9cf446a5aa6ea068d51c27df0d7302ddb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/cg_anno.tcl||tool/cg_anno.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cbb7e60272cda518fa1bd8d3e3cd02e031b657fef92a9d4d7ed8c2bfb97be7c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/cg_anno.tcl||tool/cg_anno.tcl": [
          "File: tool/cg_anno.tcl -> tool/cg_anno.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # A wrapper around cg_annotate that sets appropriate command-line options",
          "4: # and rearranges the output so that annotated files occur in a consistent",
          "",
          "[Removed Lines]",
          "1: #!/usr/bin/tclsh",
          "",
          "[Added Lines]",
          "1: #!/bin/sh",
          "2: # \\",
          "3: exec tclsh \"$0\" ${1+\"$@\"}",
          "",
          "---------------"
        ]
      }
    }
  ]
}