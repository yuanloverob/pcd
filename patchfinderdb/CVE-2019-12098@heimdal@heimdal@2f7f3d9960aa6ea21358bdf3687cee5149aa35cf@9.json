{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "90801574137eac288451caf4ac014395143b7c35",
      "candidate_info": {
        "commit_hash": "90801574137eac288451caf4ac014395143b7c35",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/90801574137eac288451caf4ac014395143b7c35",
        "files": [
          "lib/hdb/db.c",
          "lib/hdb/db3.c",
          "lib/hdb/hdb-ldap.c",
          "lib/hdb/hdb-mdb.c",
          "lib/hdb/hdb-mitdb.c",
          "lib/hdb/hdb-sqlite.c",
          "lib/hdb/hdb.h"
        ],
        "message": "Add hdb_set_sync() method\n\n(cherry picked from commit 5bcbe2125b18160f6ad348b15f8036ffedc15770)",
        "before_after_code_files": [
          "lib/hdb/db.c||lib/hdb/db.c",
          "lib/hdb/db3.c||lib/hdb/db3.c",
          "lib/hdb/hdb-ldap.c||lib/hdb/hdb-ldap.c",
          "lib/hdb/hdb-mdb.c||lib/hdb/hdb-mdb.c",
          "lib/hdb/hdb-mitdb.c||lib/hdb/hdb-mitdb.c",
          "lib/hdb/hdb-sqlite.c||lib/hdb/hdb-sqlite.c",
          "lib/hdb/hdb.h||lib/hdb/hdb.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hdb/db.c||lib/hdb/db.c": [
          "File: lib/hdb/db.c -> lib/hdb/db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     return ret;",
          "77: }",
          "79: static krb5_error_code",
          "80: DB_lock(krb5_context context, HDB *db, int operation)",
          "81: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: static krb5_error_code",
          "81: DB_set_sync(krb5_context context, HDB *db, int on)",
          "82: {",
          "83:     DB1_HDB *db1 = (DB1_HDB *)db;",
          "84:     DB *d = (DB*)db->hdb_db;",
          "85:     krb5_error_code ret = 0;",
          "87:     db1->do_sync = on;",
          "88:     if (on) {",
          "89:         ret = (*d->sync)(d, 0);",
          "90:         if (ret == -1) {",
          "91:             ret = errno;",
          "92:             krb5_set_error_message(context, ret, \"Database %s put sync error: %s\",",
          "93:                                    db->hdb_name, strerror(ret));",
          "94:         }",
          "95:     }",
          "96:     return ret;",
          "97: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203: DB__put(krb5_context context, HDB *db, int replace,",
          "204:  krb5_data key, krb5_data value)",
          "205: {",
          "206:     DB *d = (DB*)db->hdb_db;",
          "207:     DBT k, v;",
          "208:     int code;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:     DB1_HDB *db1 = (DB1_HDB *)db;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:     if(code == 1) {",
          "223:  return HDB_ERR_EXISTS;",
          "224:     }",
          "233: }",
          "235: static krb5_error_code",
          "236: DB__del(krb5_context context, HDB *db, krb5_data key)",
          "237: {",
          "238:     DB *d = (DB*)db->hdb_db;",
          "239:     DBT k;",
          "240:     krb5_error_code code;",
          "",
          "[Removed Lines]",
          "225:     code = (*d->sync)(d, 0);",
          "226:     if (code == -1) {",
          "227:  code = errno;",
          "228:  krb5_set_error_message(context, code, \"Database %s put sync error: %s\",",
          "229:           db->hdb_name, strerror(code));",
          "230:  return code;",
          "231:     }",
          "232:     return 0;",
          "",
          "[Added Lines]",
          "247:     return db->hdb_set_sync(context, db, db1->do_sync);",
          "253:     DB1_HDB *db1 = (DB1_HDB *)db;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "250:           db->hdb_name, strerror(code));",
          "251:  return code;",
          "252:     }",
          "261: }",
          "263: static DB *",
          "",
          "[Removed Lines]",
          "253:     code = (*d->sync)(d, 0);",
          "254:     if (code == -1) {",
          "255:  code = errno;",
          "256:  krb5_set_error_message(context, code, \"Database %s del sync error: %s\",",
          "257:           db->hdb_name, strerror(code));",
          "258:  return code;",
          "259:     }",
          "260:     return 0;",
          "",
          "[Added Lines]",
          "269:     return db->hdb_set_sync(context, db, db1->do_sync);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "371:     (*db)->hdb__put = DB__put;",
          "372:     (*db)->hdb__del = DB__del;",
          "373:     (*db)->hdb_destroy = DB_destroy;",
          "375:     (*db1)->lock_fd = -1;",
          "376:     return 0;",
          "377: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383:     (*db)->hdb_set_sync = DB_set_sync;",
          "386:     (*db1)->do_sync = 1;",
          "",
          "---------------"
        ],
        "lib/hdb/db3.c||lib/hdb/db3.c": [
          "File: lib/hdb/db3.c -> lib/hdb/db3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     return ret;",
          "92: }",
          "94: static krb5_error_code",
          "95: DB_lock(krb5_context context, HDB *db, int operation)",
          "96: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: static krb5_error_code",
          "96: DB_set_sync(krb5_context context, HDB *db, int on)",
          "97: {",
          "98:     DB3_HDB *db3 = (DB3_HDB *)db;",
          "99:     DB *d = (DB*)db->hdb_db;",
          "100:     krb5_error_code ret = 0;",
          "102:     db3->do_sync = on;",
          "103:     if (on) {",
          "104:         ret = (*d->sync)(d, 0);",
          "105:         if (ret) {",
          "106:             if (ret == EACCES || ret == ENOSPC || ret == EINVAL) {",
          "107:                 krb5_set_error_message(context, ret,",
          "108:                                        \"Database %s put sync error: %s\",",
          "109:                                        db->hdb_name, strerror(ret));",
          "110:             } else {",
          "111:                 ret = HDB_ERR_UK_SERROR;",
          "112:                 krb5_set_error_message(context, ret,",
          "113:                                        \"Database %s put sync error: unknown (%d)\",",
          "114:                                        db->hdb_name, ret);",
          "115:             }",
          "116:         }",
          "117:     }",
          "118:     return ret;",
          "119: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220: DB__put(krb5_context context, HDB *db, int replace,",
          "221:  krb5_data key, krb5_data value)",
          "222: {",
          "223:     DB *d = (DB*)db->hdb_db;",
          "224:     DBT k, v;",
          "225:     int code;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:     DB3_HDB *db3 = (DB3_HDB *)db;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "261:         }",
          "262:  return code;",
          "263:     }",
          "279: }",
          "281: static krb5_error_code",
          "282: DB__del(krb5_context context, HDB *db, krb5_data key)",
          "283: {",
          "284:     DB *d = (DB*)db->hdb_db;",
          "285:     DBT k;",
          "286:     krb5_error_code code;",
          "",
          "[Removed Lines]",
          "264:     code = (*d->sync)(d, 0);",
          "265:     if (code) {",
          "266:         if (code == EACCES || code == ENOSPC || code == EINVAL) {",
          "267:             krb5_set_error_message(context, code,",
          "268:                                    \"Database %s put sync error: %s\",",
          "269:                                    db->hdb_name, strerror(code));",
          "270:         } else {",
          "271:             code = HDB_ERR_UK_SERROR;",
          "272:             krb5_set_error_message(context, code,",
          "273:                                    \"Database %s put sync error: unknown (%d)\",",
          "274:                                    db->hdb_name, code);",
          "275:         }",
          "276:         return code;",
          "277:     }",
          "278:     return 0;",
          "",
          "[Added Lines]",
          "292:     return db->hdb_set_sync(context, db, db3->do_sync);",
          "298:     DB3_HDB *db3 = (DB3_HDB *)db;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "304:         }",
          "305:  return code;",
          "306:     }",
          "322: }",
          "",
          "[Removed Lines]",
          "307:     code = (*d->sync)(d, 0);",
          "308:     if (code) {",
          "309:         if (code == EACCES || code == ENOSPC || code == EINVAL) {",
          "310:             krb5_set_error_message(context, code,",
          "311:                                    \"Database %s del sync error: %s\",",
          "312:                                    db->hdb_name, strerror(code));",
          "313:         } else {",
          "314:             code = HDB_ERR_UK_SERROR;",
          "315:             krb5_set_error_message(context, code,",
          "316:                                    \"Database %s del sync error: unknown (%d)\",",
          "317:                                    db->hdb_name, code);",
          "318:         }",
          "319:         return code;",
          "320:     }",
          "321:     return 0;",
          "",
          "[Added Lines]",
          "322:     return db->hdb_set_sync(context, db, db3->do_sync);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "485:     (*db)->hdb__put = DB__put;",
          "486:     (*db)->hdb__del = DB__del;",
          "487:     (*db)->hdb_destroy = DB_destroy;",
          "489:     (*db3)->lock_fd = -1;",
          "490:     return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:     (*db)->hdb_set_sync = DB_set_sync;",
          "",
          "---------------"
        ],
        "lib/hdb/hdb-ldap.c||lib/hdb/hdb-ldap.c": [
          "File: lib/hdb/hdb-ldap.c -> lib/hdb/hdb-ldap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1886:     return ret;",
          "1887: }",
          "1889: static krb5_error_code",
          "1890: hdb_ldap_common(krb5_context context,",
          "1891:   HDB ** db,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1889: static krb5_error_code",
          "1890: LDAP_set_sync(krb5_context context, HDB * db, int on)",
          "1891: {",
          "1892:     (void)on;",
          "1893:     return 0;",
          "1894: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2020:     (*db)->hdb__put = NULL;",
          "2021:     (*db)->hdb__del = NULL;",
          "2022:     (*db)->hdb_destroy = LDAP_destroy;",
          "2024:     return 0;",
          "2025: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2030:     (*db)->hdb_set_sync = LDAP_set_sync;",
          "",
          "---------------"
        ],
        "lib/hdb/hdb-mdb.c||lib/hdb/hdb-mdb.c": [
          "File: lib/hdb/hdb-mdb.c -> lib/hdb/hdb-mdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     return ret;",
          "76: }",
          "78: static krb5_error_code",
          "79: DB_lock(krb5_context context, HDB *db, int operation)",
          "80: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: static krb5_error_code",
          "79: DB_set_sync(krb5_context context, HDB *db, int on)",
          "80: {",
          "81:     mdb_info *mi = (mdb_info *)db->hdb_db;",
          "83:     mdb_env_set_flags(mi->e, MDB_NOSYNC, !on);",
          "84:     return mdb_env_sync(mi->e, 0);",
          "85: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:     (*db)->hdb__put = DB__put;",
          "395:     (*db)->hdb__del = DB__del;",
          "396:     (*db)->hdb_destroy = DB_destroy;",
          "397:     return 0;",
          "398: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414:     (*db)->hdb_set_sync = DB_set_sync;",
          "",
          "---------------"
        ],
        "lib/hdb/hdb-mitdb.c||lib/hdb/hdb-mitdb.c": [
          "File: lib/hdb/hdb-mitdb.c -> lib/hdb/hdb-mitdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: #include \"hdb_locl.h\"",
          "94: static void",
          "95: attr_to_flags(unsigned attr, HDBFlags *flags)",
          "96: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: typedef struct MITDB {",
          "97: } MITDB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697:     return ret;",
          "698: }",
          "700: static krb5_error_code",
          "701: mdb_lock(krb5_context context, HDB *db, int operation)",
          "702: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "705: static krb5_error_code",
          "706: mdb_set_sync(krb5_context context, HDB *db, int on)",
          "707: {",
          "708:     MITDB *mdb = (MITDB *)db;",
          "709:     DB *d = (DB*)db->hdb_db;",
          "711:     mdb->do_sync = on;",
          "712:     if (on)",
          "713:         return fsync((*d->fd)(d));",
          "714:     return 0;",
          "715: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "861: mdb__put(krb5_context context, HDB *db, int replace,",
          "862:  krb5_data key, krb5_data value)",
          "863: {",
          "864:     DB *d = (DB*)db->hdb_db;",
          "865:     DBT k, v;",
          "866:     int code;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "881:     MITDB *mdb = (MITDB *)db;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "873:     if(code)",
          "874:  return code;",
          "875:     code = (*d->put)(d, &k, &v, replace ? 0 : R_NOOVERWRITE);",
          "876:     db->hdb_unlock(context, db);",
          "877:     if(code < 0) {",
          "878:  code = errno;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "894:     if (code == 0) {",
          "895:         code = mdb_set_sync(context, db, mdb->do_sync);",
          "896:         db->hdb_unlock(context, db);",
          "897:         return code;",
          "898:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "880:           db->hdb_name, strerror(code));",
          "881:  return code;",
          "882:     }",
          "888: }",
          "890: static krb5_error_code",
          "891: mdb__del(krb5_context context, HDB *db, krb5_data key)",
          "892: {",
          "893:     DB *d = (DB*)db->hdb_db;",
          "894:     DBT k;",
          "895:     krb5_error_code code;",
          "",
          "[Removed Lines]",
          "883:     if(code == 1) {",
          "884:  krb5_clear_error_message(context);",
          "885:  return HDB_ERR_EXISTS;",
          "886:     }",
          "887:     return 0;",
          "",
          "[Added Lines]",
          "906:     krb5_clear_error_message(context);",
          "907:     return HDB_ERR_EXISTS;",
          "913:     MITDB *mdb = (MITDB *)db;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "899:     if(code)",
          "900:  return code;",
          "901:     code = (*d->del)(d, &k, 0);",
          "902:     db->hdb_unlock(context, db);",
          "903:     if(code == 1) {",
          "904:  code = errno;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "923:     if (code == 0) {",
          "924:         code = mdb_set_sync(context, db, mdb->do_sync);",
          "925:         db->hdb_unlock(context, db);",
          "926:         return code;",
          "927:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1090: hdb_mitdb_create(krb5_context context, HDB **db,",
          "1091:    const char *filename)",
          "1092: {",
          "1095:  krb5_set_error_message(context, ENOMEM, \"malloc: out of memory\");",
          "1096:  return ENOMEM;",
          "1097:     }",
          "",
          "[Removed Lines]",
          "1094:     if (*db == NULL) {",
          "",
          "[Added Lines]",
          "1119:     MITDB **mdb (MITDB **)db;",
          "1121:     if (*mdb == NULL) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1104:  krb5_set_error_message(context, ENOMEM, \"malloc: out of memory\");",
          "1105:  return ENOMEM;",
          "1106:     }",
          "1107:     (*db)->hdb_master_key_set = 0;",
          "1108:     (*db)->hdb_openp = 0;",
          "1109:     (*db)->hdb_capability_flags = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1134:     (*mdb)->do_sync = 1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1121:     (*db)->hdb__put = mdb__put;",
          "1122:     (*db)->hdb__del = mdb__del;",
          "1123:     (*db)->hdb_destroy = mdb_destroy;",
          "1124:     return 0;",
          "1125: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1152:     (*db)->hdb_set_sync = mdb_set_sync;",
          "",
          "---------------"
        ],
        "lib/hdb/hdb-sqlite.c||lib/hdb/hdb-sqlite.c": [
          "File: lib/hdb/hdb-sqlite.c -> lib/hdb/hdb-sqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "807:     return ret ? ret : ret2;",
          "808: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "810: static krb5_error_code",
          "811: hdb_sqlite_set_sync(krb5_context context, HDB *db, int on)",
          "812: {",
          "813:     return hdb_sqlite_exec_stmt(context, (hdb_sqlite_db*)(db->hdb_db),",
          "814:                                 on ?  \"PRAGMA main.synchronous = NORMAL\" :",
          "815:                                       \"PRAGMA main.synchronous = OFF\",",
          "816:                                 HDB_ERR_UK_SERROR);",
          "817: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1035:     (*db)->hdb_remove = hdb_sqlite_remove;",
          "1036:     (*db)->hdb_destroy = hdb_sqlite_destroy;",
          "1037:     (*db)->hdb_rename = hdb_sqlite_rename;",
          "1038:     (*db)->hdb__get = NULL;",
          "1039:     (*db)->hdb__put = NULL;",
          "1040:     (*db)->hdb__del = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1047:     (*db)->hdb_set_sync = hdb_sqlite_set_sync;",
          "",
          "---------------"
        ],
        "lib/hdb/hdb.h||lib/hdb/hdb.h": [
          "File: lib/hdb/hdb.h -> lib/hdb/hdb.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:     krb5_error_code (*hdb_check_s4u2self)(krb5_context, struct HDB *, hdb_entry_ex *, krb5_const_principal);",
          "274: }HDB;",
          "278: struct hdb_method {",
          "279:     int   version;",
          "",
          "[Removed Lines]",
          "276: #define HDB_INTERFACE_VERSION 9",
          "",
          "[Added Lines]",
          "281:     krb5_error_code (*hdb_set_sync)(krb5_context, struct HDB *, int);",
          "284: #define HDB_INTERFACE_VERSION 10",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9dbafc06742dc2fc8667573249e78db0df46727c",
      "candidate_info": {
        "commit_hash": "9dbafc06742dc2fc8667573249e78db0df46727c",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/9dbafc06742dc2fc8667573249e78db0df46727c",
        "files": [
          "lib/wind/gen-punycode-examples.py"
        ],
        "message": "lib/wind: get-punycode-examples.py whitespace fix\n\nChange-Id: I89e82539578fd9436ee735c124401fa019369eee\n(cherry picked from commit 4d57ee72f322352c19497bdea1849b42034cb2a2)",
        "before_after_code_files": [
          "lib/wind/gen-punycode-examples.py||lib/wind/gen-punycode-examples.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/wind/gen-punycode-examples.py||lib/wind/gen-punycode-examples.py": [
          "File: lib/wind/gen-punycode-examples.py -> lib/wind/gen-punycode-examples.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:             else:",
          "72:                 m = re.search('^ *([uU]+.*) *$', l)",
          "73:                 if m:",
          "75:                 else:",
          "76:                     m = re.search('^ *Punycode: (.*) *$', l)",
          "77:                     if m:",
          "",
          "[Removed Lines]",
          "74:       codes.extend(m.group(1).split(' '))",
          "",
          "[Added Lines]",
          "74:                     codes.extend(m.group(1).split(' '))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:     examples_c.file.write(",
          "115:         \"  {%u, {%s}, \\\"%s\\\", \\\"%s\\\"},\\n\" %",
          "116:         (len(cp),",
          "118:          pc,",
          "119:          desc))",
          "",
          "[Removed Lines]",
          "117:   \",\".join([re.sub('[uU]\\+', '0x', x) for x in cp]),",
          "",
          "[Added Lines]",
          "117:          \",\".join([re.sub('[uU]\\+', '0x', x) for x in cp]),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c859ac64fba8e59d27af0aca3efca7b79a7b4a8",
      "candidate_info": {
        "commit_hash": "9c859ac64fba8e59d27af0aca3efca7b79a7b4a8",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/9c859ac64fba8e59d27af0aca3efca7b79a7b4a8",
        "files": [
          "lib/hcrypto/evp-pkcs11.c"
        ],
        "message": "hcrypto PKCS#11 backend: allow digest update with NULL (#378)\n\nSome callers of EVP_DigestUpdate (such as libntlm) pass NULL as the\ndata argument. PKCS#11 returns CKR_ARGUMENTS_BAD which may poison\nthe context. Pass an empty string to C_DigestUpdate work around this.\n\n(cherry picked from commit 590be3d7dadb8e17a15261bce9275f37f6dfc917)",
        "before_after_code_files": [
          "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c": [
          "File: lib/hcrypto/evp-pkcs11.c -> lib/hcrypto/evp-pkcs11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:     assert(p11_module != NULL);",
          "395:     return rv == CKR_OK;",
          "396: }",
          "",
          "[Removed Lines]",
          "393:     rv = p11_module->C_DigestUpdate(p11ctx->hSession, (unsigned char *)data, length);",
          "",
          "[Added Lines]",
          "393:     rv = p11_module->C_DigestUpdate(p11ctx->hSession,",
          "394:                                     data ? (CK_BYTE_PTR)data : (CK_BYTE_PTR)\"\",",
          "395:                                     length);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "423f6835d7321c4bbfd36c5d47521a0896749e81",
      "candidate_info": {
        "commit_hash": "423f6835d7321c4bbfd36c5d47521a0896749e81",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/423f6835d7321c4bbfd36c5d47521a0896749e81",
        "files": [
          "kdc/kerberos5.c",
          "kuser/kinit.c",
          "kuser/kuser_locl.h",
          "lib/krb5/krb5_locl.h",
          "lib/krb5/libkrb5-exports.def.in",
          "lib/krb5/principal.c",
          "lib/krb5/ticket.c",
          "lib/krb5/version-script.map"
        ],
        "message": "krb5: _krb5_principal_is_anonymous() helper API\n\nAdd _krb5_principal_is_anonymous() private API for checking if a principal is\nanonymous or not. The third argument determines whether to match authenticated\nanonymous, unauthenticated anonymous, or both types of principal.\n\n(cherry picked from commit bcc90f1b87dd9e79577c0790a4d76efdaf6c6c51)",
        "before_after_code_files": [
          "kdc/kerberos5.c||kdc/kerberos5.c",
          "kuser/kinit.c||kuser/kinit.c",
          "kuser/kuser_locl.h||kuser/kuser_locl.h",
          "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
          "lib/krb5/libkrb5-exports.def.in||lib/krb5/libkrb5-exports.def.in",
          "lib/krb5/principal.c||lib/krb5/principal.c",
          "lib/krb5/ticket.c||lib/krb5/ticket.c",
          "lib/krb5/version-script.map||lib/krb5/version-script.map"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [
            "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h"
          ],
          "candidate": [
            "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h"
          ]
        }
      },
      "candidate_diff": {
        "kdc/kerberos5.c||kdc/kerberos5.c": [
          "File: kdc/kerberos5.c -> kdc/kerberos5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1551: krb5_boolean",
          "1552: _kdc_is_anonymous(krb5_context context, krb5_const_principal principal)",
          "1553: {",
          "1561: }",
          "1563: static int",
          "",
          "[Removed Lines]",
          "1554:     if ((principal->name.name_type != KRB5_NT_WELLKNOWN &&",
          "1555:   principal->name.name_type != KRB5_NT_UNKNOWN) ||",
          "1556:  principal->name.name_string.len != 2 ||",
          "1557:  strcmp(principal->name.name_string.val[0], KRB5_WELLKNOWN_NAME) != 0 ||",
          "1558:  strcmp(principal->name.name_string.val[1], KRB5_ANON_NAME) != 0)",
          "1559:  return 0;",
          "1560:     return 1;",
          "",
          "[Added Lines]",
          "1554:     return _krb5_principal_is_anonymous(context, principal, KRB5_ANON_MATCH_ANY);",
          "",
          "---------------"
        ],
        "kuser/kinit.c||kuser/kinit.c": [
          "File: kuser/kinit.c -> kuser/kinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425: }",
          "426: #endif",
          "440: static krb5_error_code",
          "441: get_new_tickets(krb5_context context,",
          "442:   krb5_principal principal,",
          "",
          "[Removed Lines]",
          "428: static krb5_boolean",
          "429: is_anonymous_princ_p(krb5_const_principal principal)",
          "430: {",
          "431:     if ((principal->name.name_type != KRB5_NT_WELLKNOWN &&",
          "432:  principal->name.name_type != KRB5_NT_UNKNOWN) ||",
          "433:  principal->name.name_string.len != 2 ||",
          "434:  strcmp(principal->name.name_string.val[0], KRB5_WELLKNOWN_NAME) != 0 ||",
          "435:  strcmp(principal->name.name_string.val[1], KRB5_ANON_NAME) != 0)",
          "436:  return 0;",
          "437:     return 1;",
          "438: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "641:      krb5_warn(context, ret, \"krb5_init_creds_set_keytab\");",
          "642:      goto out;",
          "643:  }",
          "646:     } else if (!interactive && passwd[0] == '\\0') {",
          "647:  static int already_warned = 0;",
          "",
          "[Removed Lines]",
          "644:     } else if (pk_user_id || ent_user_id || is_anonymous_princ_p(principal)) {",
          "",
          "[Added Lines]",
          "632:     } else if (pk_user_id || ent_user_id ||",
          "633:         _krb5_principal_is_anonymous(context, principal, KRB5_ANON_MATCH_ANY)) {",
          "",
          "---------------"
        ],
        "kuser/kuser_locl.h||kuser/kuser_locl.h": [
          "File: kuser/kuser_locl.h -> kuser/kuser_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: #include <parse_time.h>",
          "73: #include <err.h>",
          "74: #include <krb5.h>",
          "76: #if defined(HAVE_SYS_IOCTL_H) && SunOS != 40",
          "77: #include <sys/ioctl.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: #include \"krb5_locl.h\"",
          "",
          "---------------"
        ],
        "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
          "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "377: # define ISPATHSEP(x) (x == '/')",
          "378: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383: #define KRB5_ANON_MATCH_ANY  ( KRB5_ANON_MATCH_AUTHENTICATED | KRB5_ANON_MATCH_UNAUTHENTICATED )",
          "",
          "---------------"
        ],
        "lib/krb5/libkrb5-exports.def.in||lib/krb5/libkrb5-exports.def.in": [
          "File: lib/krb5/libkrb5-exports.def.in -> lib/krb5/libkrb5-exports.def.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "762:  _krb5_pk_octetstring2key",
          "763:  _krb5_plugin_run_f",
          "764:  _krb5_enctype_requires_random_salt",
          "765:  _krb5_principal2principalname",
          "766:  _krb5_principalname2krb5_principal",
          "767:  _krb5_put_int",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "765:  _krb5_principal_is_anonymous",
          "",
          "---------------"
        ],
        "lib/krb5/principal.c||lib/krb5/principal.c": [
          "File: lib/krb5/principal.c -> lib/krb5/principal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1247:  strcmp(p->name.name_string.val[1], p->realm) == 0;",
          "1248: }",
          "1250: static int",
          "1251: tolower_ascii(int c)",
          "1252: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1256: krb5_boolean KRB5_LIB_FUNCTION",
          "1257: _krb5_principal_is_anonymous(krb5_context context,",
          "1258:         krb5_const_principal p,",
          "1259:         unsigned int flags)",
          "1260: {",
          "1261:     int anon_realm;",
          "1263:     if ((p->name.name_type != KRB5_NT_WELLKNOWN &&",
          "1264:          p->name.name_type != KRB5_NT_UNKNOWN) ||",
          "1265:         p->name.name_string.len != 2 ||",
          "1266:         strcmp(p->name.name_string.val[0], KRB5_WELLKNOWN_NAME) != 0 ||",
          "1267:         strcmp(p->name.name_string.val[1], KRB5_ANON_NAME) != 0)",
          "1268:         return FALSE;",
          "1270:     anon_realm = strcmp(p->realm, KRB5_ANON_REALM) == 0;",
          "1272:     return ((flags & KRB5_ANON_MATCH_AUTHENTICATED) && !anon_realm) ||",
          "1273:     ((flags & KRB5_ANON_MATCH_UNAUTHENTICATED) && anon_realm);",
          "1274: }",
          "",
          "---------------"
        ],
        "lib/krb5/ticket.c||lib/krb5/ticket.c": [
          "File: lib/krb5/ticket.c -> lib/krb5/ticket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527: }",
          "",
          "[Removed Lines]",
          "530: static krb5_boolean",
          "531: is_anonymous_principal(krb5_context context, krb5_const_principal principal)",
          "532: {",
          "533:     if ((principal->name.name_type != KRB5_NT_WELLKNOWN &&",
          "534:          principal->name.name_type != KRB5_NT_UNKNOWN) ||",
          "535:         principal->name.name_string.len != 2 ||",
          "536:         strcmp(principal->name.name_string.val[0], KRB5_WELLKNOWN_NAME) != 0 ||",
          "537:         strcmp(principal->name.name_string.val[1], KRB5_ANON_NAME) != 0)",
          "538:         return 0;",
          "539:     return 1;",
          "540: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:         krb5_keyblock const * key)",
          "552: {",
          "553:     if (rep->enc_part.flags.anonymous) {",
          "555:      krb5_set_error_message(context, KRB5KRB_AP_ERR_MODIFIED,",
          "556:        N_(\"Anonymous ticket does not contain anonymous \"",
          "557:           \"principal\", \"\"));",
          "",
          "[Removed Lines]",
          "554:  if (!is_anonymous_principal(context, mapped)) {",
          "",
          "[Added Lines]",
          "542:  if (!_krb5_principal_is_anonymous(context, mapped, KRB5_ANON_MATCH_ANY)) {",
          "",
          "---------------"
        ],
        "lib/krb5/version-script.map||lib/krb5/version-script.map": [
          "File: lib/krb5/version-script.map -> lib/krb5/version-script.map",
          "--- Hunk 1 ---",
          "[Context before]",
          "757:   _krb5_plugin_find;",
          "758:   _krb5_plugin_free;",
          "759:   _krb5_plugin_run_f;",
          "760:   _krb5_principal2principalname;",
          "761:   _krb5_principalname2krb5_principal;",
          "762:   _krb5_put_int;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760:   _krb5_principal_is_anonymous;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3adbd831c721ec8aba068fcbc9ac2637093dfaf7",
      "candidate_info": {
        "commit_hash": "3adbd831c721ec8aba068fcbc9ac2637093dfaf7",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/3adbd831c721ec8aba068fcbc9ac2637093dfaf7",
        "files": [
          "lib/kadm5/ipropd_master.c"
        ],
        "message": "Don't send diffs to slaves with not yet know version\n\n(cherry picked from commit d383fd3b5677ed87090adb5cf68a03c8ea9f29f5)",
        "before_after_code_files": [
          "lib/kadm5/ipropd_master.c||lib/kadm5/ipropd_master.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/kadm5/ipropd_master.c||lib/kadm5/ipropd_master.c": [
          "File: lib/kadm5/ipropd_master.c -> lib/kadm5/ipropd_master.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     unsigned long flags;",
          "134: #define SLAVE_F_DEAD 0x1",
          "135: #define SLAVE_F_AYT 0x2",
          "136:     struct slave *next;",
          "137: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: #define SLAVE_F_READY   0x4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "680:     krb5_data data;",
          "681:     int ret = 0;",
          "683:     if (s->flags & SLAVE_F_DEAD) {",
          "684:         krb5_warnx(context, \"not sending diffs to dead slave %s\", s->name);",
          "685:         return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "688:     if ((s->flags & SLAVE_F_READY) == 0)",
          "689:         return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "903:      krb5_warnx(context, \"process_msg: client send too little I_HAVE data\");",
          "904:      break;",
          "905:  }",
          "908:      if (current_version < tmp) {",
          "909:   krb5_warnx(context, \"Slave %s (version %u) has later version \"",
          "910:       \"than the master (version %u) OUT OF SYNC\",",
          "911:       s->name, tmp, current_version);",
          "912:      }",
          "916:      s->version = tmp;",
          "917:  }",
          "918:         if ((s->version_ack = tmp) < s->version)",
          "919:             break;",
          "",
          "[Removed Lines]",
          "907:  if (s->version == 0 && tmp != 0) {",
          "913:             if (verbose)",
          "914:                 krb5_warnx(context, \"slave %s updated from %u to %u\",",
          "915:                            s->name, s->version, tmp);",
          "",
          "[Added Lines]",
          "929:  if (!(s->flags & SLAVE_F_READY)) {",
          "942:             s->flags |= SLAVE_F_READY;",
          "943:             if (verbose)",
          "944:                 krb5_warnx(context, \"slave %s ready for updates from version %u\",",
          "945:                            s->name, tmp);",
          "",
          "---------------"
        ]
      }
    }
  ]
}