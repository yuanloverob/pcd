{
  "cve_id": "CVE-2021-37671",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.Map*` and `tf.raw_ops.OrderedMap*` operations. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L222-L248) has a check in place to ensure that `indices` is in ascending order, but does not check that `indices` is not empty. We have patched the issue in GitHub commit 532f5c5a547126c634fefd43bbad1dc6417678ac. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "532f5c5a547126c634fefd43bbad1dc6417678ac",
  "patch_info": {
    "commit_hash": "532f5c5a547126c634fefd43bbad1dc6417678ac",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/532f5c5a547126c634fefd43bbad1dc6417678ac",
    "files": [
      "tensorflow/core/kernels/map_stage_op.cc"
    ],
    "message": "Prevent nullptr deref in validation of indexes in map ops.\n\nPiperOrigin-RevId: 387738023\nChange-Id: I83d18d36a7b82ffd2a40b5124a4e5b4c72238f27",
    "before_after_code_files": [
      "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc": [
      "File: tensorflow/core/kernels/map_stage_op.cc -> tensorflow/core/kernels/map_stage_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "210:                                    const OptionalTuple& tuple)",
      "211:       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {",
      "212:     if (tuple[index].has_value()) {",
      "214:           \"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),",
      "216:     }",
      "218:     return Status::OK();",
      "",
      "[Removed Lines]",
      "213:       return Status(errors::InvalidArgument(",
      "215:           \"' was already initialized '\", dtypes_.size(), \"'.\"));",
      "",
      "[Added Lines]",
      "213:       return errors::InvalidArgument(",
      "215:           \"' was already initialized '\", dtypes_.size(), \"'.\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "222:   Status check_index_ordering(const Tensor& indices) {",
      "223:     auto findices = indices.flat<int>();",
      "225:     for (std::size_t i = 0; i < findices.dimension(0) - 1; ++i) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:     if (indices.NumElements() == 0) {",
      "224:       return errors::InvalidArgument(\"Indices are empty\");",
      "225:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "227:         continue;",
      "228:       }",
      "232:     }",
      "234:     return Status::OK();",
      "",
      "[Removed Lines]",
      "230:       return Status(",
      "231:           errors::InvalidArgument(\"Indices are not strictly ordered\"));",
      "",
      "[Added Lines]",
      "234:       return errors::InvalidArgument(\"Indices are not strictly ordered\");",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "238:   Status check_memory_limit(std::size_t bytes)",
      "239:       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {",
      "240:     if (has_memory_limit() && bytes > memory_limit_) {",
      "242:           \"Attempted to insert tensors with combined size of '\", bytes,",
      "243:           \"' bytes into Staging Area with a memory limit of '\", memory_limit_,",
      "245:     }",
      "247:     return Status::OK();",
      "",
      "[Removed Lines]",
      "241:       return Status(errors::ResourceExhausted(",
      "244:           \"'.\"));",
      "",
      "[Added Lines]",
      "244:       return errors::ResourceExhausted(",
      "247:           \"'.\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "140ef9ff65d0bcfd8f22722a7013feb38f0db13f",
      "candidate_info": {
        "commit_hash": "140ef9ff65d0bcfd8f22722a7013feb38f0db13f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/140ef9ff65d0bcfd8f22722a7013feb38f0db13f",
        "files": [
          "tensorflow/core/kernels/map_stage_op.cc"
        ],
        "message": "Prevent nullptr deref in validation of indexes in map ops.\n\nPiperOrigin-RevId: 387738023\nChange-Id: I83d18d36a7b82ffd2a40b5124a4e5b4c72238f27",
        "before_after_code_files": [
          "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc": [
          "File: tensorflow/core/kernels/map_stage_op.cc -> tensorflow/core/kernels/map_stage_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:                                    const OptionalTuple& tuple)",
          "211:       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {",
          "212:     if (tuple[index].has_value()) {",
          "214:           \"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),",
          "216:     }",
          "218:     return Status::OK();",
          "",
          "[Removed Lines]",
          "213:       return Status(errors::InvalidArgument(",
          "215:           \"' was already initialized '\", dtypes_.size(), \"'.\"));",
          "",
          "[Added Lines]",
          "213:       return errors::InvalidArgument(",
          "215:           \"' was already initialized '\", dtypes_.size(), \"'.\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:   Status check_index_ordering(const Tensor& indices) {",
          "223:     auto findices = indices.flat<int>();",
          "225:     for (std::size_t i = 0; i < findices.dimension(0) - 1; ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     if (indices.NumElements() == 0) {",
          "224:       return errors::InvalidArgument(\"Indices are empty\");",
          "225:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:         continue;",
          "228:       }",
          "232:     }",
          "234:     return Status::OK();",
          "",
          "[Removed Lines]",
          "230:       return Status(",
          "231:           errors::InvalidArgument(\"Indices are not strictly ordered\"));",
          "",
          "[Added Lines]",
          "234:       return errors::InvalidArgument(\"Indices are not strictly ordered\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238:   Status check_memory_limit(std::size_t bytes)",
          "239:       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {",
          "240:     if (has_memory_limit() && bytes > memory_limit_) {",
          "242:           \"Attempted to insert tensors with combined size of '\", bytes,",
          "243:           \"' bytes into Staging Area with a memory limit of '\", memory_limit_,",
          "245:     }",
          "247:     return Status::OK();",
          "",
          "[Removed Lines]",
          "241:       return Status(errors::ResourceExhausted(",
          "244:           \"'.\"));",
          "",
          "[Added Lines]",
          "244:       return errors::ResourceExhausted(",
          "247:           \"'.\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f781b45b0e8429c4c41be86cf0410555e6471ff8",
      "candidate_info": {
        "commit_hash": "f781b45b0e8429c4c41be86cf0410555e6471ff8",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/f781b45b0e8429c4c41be86cf0410555e6471ff8",
        "files": [
          "tensorflow/core/kernels/map_stage_op.cc"
        ],
        "message": "Prevent nullptr deref in validation of indexes in map ops.\n\nPiperOrigin-RevId: 387738023\nChange-Id: I83d18d36a7b82ffd2a40b5124a4e5b4c72238f27",
        "before_after_code_files": [
          "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc": [
          "File: tensorflow/core/kernels/map_stage_op.cc -> tensorflow/core/kernels/map_stage_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:                                    const OptionalTuple& tuple)",
          "211:       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {",
          "212:     if (tuple[index].has_value()) {",
          "214:           \"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),",
          "216:     }",
          "218:     return Status::OK();",
          "",
          "[Removed Lines]",
          "213:       return Status(errors::InvalidArgument(",
          "215:           \"' was already initialized '\", dtypes_.size(), \"'.\"));",
          "",
          "[Added Lines]",
          "213:       return errors::InvalidArgument(",
          "215:           \"' was already initialized '\", dtypes_.size(), \"'.\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:   Status check_index_ordering(const Tensor& indices) {",
          "223:     auto findices = indices.flat<int>();",
          "225:     for (std::size_t i = 0; i < findices.dimension(0) - 1; ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     if (indices.NumElements() == 0) {",
          "224:       return errors::InvalidArgument(\"Indices are empty\");",
          "225:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:         continue;",
          "228:       }",
          "232:     }",
          "234:     return Status::OK();",
          "",
          "[Removed Lines]",
          "230:       return Status(",
          "231:           errors::InvalidArgument(\"Indices are not strictly ordered\"));",
          "",
          "[Added Lines]",
          "234:       return errors::InvalidArgument(\"Indices are not strictly ordered\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238:   Status check_memory_limit(std::size_t bytes)",
          "239:       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {",
          "240:     if (has_memory_limit() && bytes > memory_limit_) {",
          "242:           \"Attempted to insert tensors with combined size of '\", bytes,",
          "243:           \"' bytes into Staging Area with a memory limit of '\", memory_limit_,",
          "245:     }",
          "247:     return Status::OK();",
          "",
          "[Removed Lines]",
          "241:       return Status(errors::ResourceExhausted(",
          "244:           \"'.\"));",
          "",
          "[Added Lines]",
          "244:       return errors::ResourceExhausted(",
          "247:           \"'.\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c32bc472471cdd8f4d85c91cf840db7e13359728",
      "candidate_info": {
        "commit_hash": "c32bc472471cdd8f4d85c91cf840db7e13359728",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c32bc472471cdd8f4d85c91cf840db7e13359728",
        "files": [
          "tensorflow/core/kernels/map_stage_op.cc"
        ],
        "message": "Prevent nullptr deref in validation of indexes in map ops.\n\nPiperOrigin-RevId: 387738023\nChange-Id: I83d18d36a7b82ffd2a40b5124a4e5b4c72238f27",
        "before_after_code_files": [
          "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc": [
          "File: tensorflow/core/kernels/map_stage_op.cc -> tensorflow/core/kernels/map_stage_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:                                    const OptionalTuple& tuple)",
          "211:       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {",
          "212:     if (tuple[index].has_value()) {",
          "214:           \"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),",
          "216:     }",
          "218:     return Status::OK();",
          "",
          "[Removed Lines]",
          "213:       return Status(errors::InvalidArgument(",
          "215:           \"' was already initialized '\", dtypes_.size(), \"'.\"));",
          "",
          "[Added Lines]",
          "213:       return errors::InvalidArgument(",
          "215:           \"' was already initialized '\", dtypes_.size(), \"'.\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:   Status check_index_ordering(const Tensor& indices) {",
          "223:     auto findices = indices.flat<int>();",
          "225:     for (std::size_t i = 0; i < findices.dimension(0) - 1; ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     if (indices.NumElements() == 0) {",
          "224:       return errors::InvalidArgument(\"Indices are empty\");",
          "225:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:         continue;",
          "228:       }",
          "232:     }",
          "234:     return Status::OK();",
          "",
          "[Removed Lines]",
          "230:       return Status(",
          "231:           errors::InvalidArgument(\"Indices are not strictly ordered\"));",
          "",
          "[Added Lines]",
          "234:       return errors::InvalidArgument(\"Indices are not strictly ordered\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238:   Status check_memory_limit(std::size_t bytes)",
          "239:       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {",
          "240:     if (has_memory_limit() && bytes > memory_limit_) {",
          "242:           \"Attempted to insert tensors with combined size of '\", bytes,",
          "243:           \"' bytes into Staging Area with a memory limit of '\", memory_limit_,",
          "245:     }",
          "247:     return Status::OK();",
          "",
          "[Removed Lines]",
          "241:       return Status(errors::ResourceExhausted(",
          "244:           \"'.\"));",
          "",
          "[Added Lines]",
          "244:       return errors::ResourceExhausted(",
          "247:           \"'.\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "206b030ff6e2b5bedcdbc5b06dfbf3e568654327",
      "candidate_info": {
        "commit_hash": "206b030ff6e2b5bedcdbc5b06dfbf3e568654327",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/206b030ff6e2b5bedcdbc5b06dfbf3e568654327",
        "files": [
          "tensorflow/core/kernels/map_stage_op.cc"
        ],
        "message": "Prevent nullptr deref in validation of indexes in map ops.\n\nPiperOrigin-RevId: 387738023\nChange-Id: I83d18d36a7b82ffd2a40b5124a4e5b4c72238f27",
        "before_after_code_files": [
          "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/map_stage_op.cc||tensorflow/core/kernels/map_stage_op.cc": [
          "File: tensorflow/core/kernels/map_stage_op.cc -> tensorflow/core/kernels/map_stage_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:                                    const OptionalTuple& tuple)",
          "211:       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {",
          "212:     if (tuple[index].has_value()) {",
          "214:           \"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),",
          "216:     }",
          "218:     return Status::OK();",
          "",
          "[Removed Lines]",
          "213:       return Status(errors::InvalidArgument(",
          "215:           \"' was already initialized '\", dtypes_.size(), \"'.\"));",
          "",
          "[Added Lines]",
          "213:       return errors::InvalidArgument(",
          "215:           \"' was already initialized '\", dtypes_.size(), \"'.\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:   Status check_index_ordering(const Tensor& indices) {",
          "223:     auto findices = indices.flat<int>();",
          "225:     for (std::size_t i = 0; i < findices.dimension(0) - 1; ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     if (indices.NumElements() == 0) {",
          "224:       return errors::InvalidArgument(\"Indices are empty\");",
          "225:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:         continue;",
          "228:       }",
          "232:     }",
          "234:     return Status::OK();",
          "",
          "[Removed Lines]",
          "230:       return Status(",
          "231:           errors::InvalidArgument(\"Indices are not strictly ordered\"));",
          "",
          "[Added Lines]",
          "234:       return errors::InvalidArgument(\"Indices are not strictly ordered\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238:   Status check_memory_limit(std::size_t bytes)",
          "239:       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {",
          "240:     if (has_memory_limit() && bytes > memory_limit_) {",
          "242:           \"Attempted to insert tensors with combined size of '\", bytes,",
          "243:           \"' bytes into Staging Area with a memory limit of '\", memory_limit_,",
          "245:     }",
          "247:     return Status::OK();",
          "",
          "[Removed Lines]",
          "241:       return Status(errors::ResourceExhausted(",
          "244:           \"'.\"));",
          "",
          "[Added Lines]",
          "244:       return errors::ResourceExhausted(",
          "247:           \"'.\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}