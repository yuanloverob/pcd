{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "55e4d54927536e6f796de87c0ab266a74b9e1c81",
      "candidate_info": {
        "commit_hash": "55e4d54927536e6f796de87c0ab266a74b9e1c81",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/55e4d54927536e6f796de87c0ab266a74b9e1c81",
        "files": [
          "lib/child_process.js",
          "src/process_wrap.cc"
        ],
        "message": "Child process: support the `gid` and `uid` options",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "src/process_wrap.cc||src/process_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:     windowsVerbatimArguments: !!(options && options.windowsVerbatimArguments),",
          "347:     envPairs: envPairs,",
          "348:     customFds: options ? options.customFds : null,",
          "350:   });",
          "352:   return child;",
          "",
          "[Removed Lines]",
          "349:     stdinStream: options ? options.stdinStream : null",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: using v8::Context;",
          "54: using v8::Arguments;",
          "55: using v8::Integer;",
          "58: class ProcessWrap : public HandleWrap {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: using v8::Exception;",
          "57: using v8::ThrowException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     Local<Object> js_options = args[0]->ToObject();",
          "102:     memset(&options, 0, sizeof(uv_process_options_t));",
          "104:     options.exit_cb = OnExit;",
          "",
          "[Removed Lines]",
          "101:     uv_process_options_t options;",
          "",
          "[Added Lines]",
          "103:     uv_process_options2_t options;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:     if (!file_v.IsEmpty() && file_v->IsString()) {",
          "111:       String::Utf8Value file(file_v->ToString());",
          "112:       options.file = strdup(*file);",
          "113:     }",
          "117:     if (!argv_v.IsEmpty() && argv_v->IsArray()) {",
          "118:       Local<Array> js_argv = Local<Array>::Cast(argv_v);",
          "119:       int argc = js_argv->Length();",
          "",
          "[Removed Lines]",
          "109:     Local<Value> file_v = js_options->Get(String::New(\"file\"));",
          "116:     Local<Value> argv_v = js_options->Get(String::New(\"args\"));",
          "",
          "[Added Lines]",
          "111:     Local<Value> file_v = js_options->Get(String::NewSymbol(\"file\"));",
          "115:     } else {",
          "116:       return ThrowException(Exception::TypeError(String::New(\"Bad argument\")));",
          "120:     Local<Value> argv_v = js_options->Get(String::NewSymbol(\"args\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:     }",
          "131:     if (!cwd_v.IsEmpty() && cwd_v->IsString()) {",
          "132:       String::Utf8Value cwd(cwd_v->ToString());",
          "133:       if (cwd.length() > 0) {",
          "",
          "[Removed Lines]",
          "130:     Local<Value> cwd_v = js_options->Get(String::New(\"cwd\"));",
          "",
          "[Added Lines]",
          "134:     Local<Value> cwd_v = js_options->Get(String::NewSymbol(\"cwd\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:     }",
          "140:     if (!env_v.IsEmpty() && env_v->IsArray()) {",
          "141:       Local<Array> env = Local<Array>::Cast(env_v);",
          "142:       int envc = env->Length();",
          "",
          "[Removed Lines]",
          "139:     Local<Value> env_v = js_options->Get(String::New(\"envPairs\"));",
          "",
          "[Added Lines]",
          "143:     Local<Value> env_v = js_options->Get(String::NewSymbol(\"envPairs\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "149:     }",
          "153:     if (!stdin_stream_v.IsEmpty() && stdin_stream_v->IsObject()) {",
          "154:       PipeWrap* stdin_wrap = PipeWrap::Unwrap(stdin_stream_v->ToObject());",
          "155:       options.stdin_stream = stdin_wrap->UVHandle();",
          "156:     }",
          "160:     if (!stdout_stream_v.IsEmpty() && stdout_stream_v->IsObject()) {",
          "161:       PipeWrap* stdout_wrap = PipeWrap::Unwrap(stdout_stream_v->ToObject());",
          "162:       options.stdout_stream = stdout_wrap->UVHandle();",
          "163:     }",
          "167:     if (!stderr_stream_v.IsEmpty() && stderr_stream_v->IsObject()) {",
          "168:       PipeWrap* stderr_wrap = PipeWrap::Unwrap(stderr_stream_v->ToObject());",
          "169:       options.stderr_stream = stderr_wrap->UVHandle();",
          "170:     }",
          "180:     if (r) {",
          "181:       SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Removed Lines]",
          "152:     Local<Value> stdin_stream_v = js_options->Get(String::New(\"stdinStream\"));",
          "159:     Local<Value> stdout_stream_v = js_options->Get(String::New(\"stdoutStream\"));",
          "166:     Local<Value> stderr_stream_v = js_options->Get(String::New(\"stderrStream\"));",
          "173: #if defined(_WIN32)",
          "174:     options.windows_verbatim_arguments = js_options->",
          "175:         Get(String::NewSymbol(\"windowsVerbatimArguments\"))->IsTrue();",
          "176: #endif",
          "178:     int r = uv_spawn(uv_default_loop(), &wrap->process_, options);",
          "",
          "[Added Lines]",
          "156:     Local<Value> stdin_stream_v = js_options->Get(",
          "157:         String::NewSymbol(\"stdinStream\"));",
          "164:     Local<Value> stdout_stream_v = js_options->Get(",
          "165:         String::NewSymbol(\"stdoutStream\"));",
          "172:     Local<Value> stderr_stream_v = js_options->Get(",
          "173:         String::NewSymbol(\"stderrStream\"));",
          "180:     if (js_options->Get(String::NewSymbol(\"windowsVerbatimArguments\"))->",
          "181:           IsTrue()) {",
          "182:       options.flags |= UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS;",
          "183:     }",
          "186:     Local<Value> uid_v = js_options->Get(String::NewSymbol(\"uid\"));",
          "187:     if (uid_v->IsInt32()) {",
          "188:       int32_t uid = uid_v->Int32Value();",
          "189:       if (uid & ~((uv_uid_t) ~0)) {",
          "190:         return ThrowException(Exception::RangeError(",
          "191:             String::New(\"options.uid is out of range\")));",
          "192:       }",
          "193:       options.flags |= UV_PROCESS_SETUID;",
          "194:       options.uid = (uv_uid_t) uid;",
          "195:     } else if (!uid_v->IsUndefined() && !uid_v->IsNull()) {",
          "196:       return ThrowException(Exception::TypeError(",
          "197:           String::New(\"options.uid should be a number\")));",
          "198:     }",
          "201:     Local<Value> gid_v = js_options->Get(String::NewSymbol(\"gid\"));",
          "202:     if (gid_v->IsInt32()) {",
          "203:       int32_t gid = gid_v->Int32Value();",
          "204:       if (gid & ~((uv_gid_t) ~0)) {",
          "205:         return ThrowException(Exception::RangeError(",
          "206:            String::New(\"options.gid is out of range\")));",
          "207:       }",
          "208:       options.flags |= UV_PROCESS_SETGID;",
          "209:       options.gid = (uv_gid_t) gid;",
          "210:     } else if (!gid_v->IsUndefined() && !gid_v->IsNull()) {",
          "211:       return ThrowException(Exception::TypeError(",
          "212:           String::New(\"options.gid should be a number\")));",
          "213:     }",
          "215:     int r = uv_spawn2(uv_default_loop(), &wrap->process_, options);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd5d2473a463cec5d2d1eeeac4770aa1b20a692a",
      "candidate_info": {
        "commit_hash": "cd5d2473a463cec5d2d1eeeac4770aa1b20a692a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/cd5d2473a463cec5d2d1eeeac4770aa1b20a692a",
        "files": [
          "lib/net.js",
          "test/simple/test-net-write-connect-write.js"
        ],
        "message": "net: fix race write() before and after connect()\n\nFixes #2827.",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-write-connect-write.js||test/simple/test-net-write-connect-write.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "647:       handle.readStart();",
          "648:     }",
          "652:     if (self._connectQueue) {",
          "653:       debug('Drain the connect queue');",
          "654:       for (var i = 0; i < self._connectQueue.length; i++) {",
          "",
          "[Removed Lines]",
          "650:     self.emit('connect');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "657:       self._connectQueueCleanUp();",
          "658:     }",
          "660:     if (self._flags & FLAG_SHUTDOWNQUED) {",
          "662:       self._flags &= ~FLAG_SHUTDOWNQUED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-write-connect-write.js||test/simple/test-net-write-connect-write.js": [
          "File: test/simple/test-net-write-connect-write.js -> test/simple/test-net-write-connect-write.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var net = require('net');",
          "26: var received = '';",
          "28: var server = net.createServer(function(socket) {",
          "29:   socket.pipe(socket);",
          "30: }).listen(common.PORT, function() {",
          "31:   var conn = net.connect(common.PORT);",
          "32:   conn.setEncoding('utf8');",
          "33:   conn.write('before');",
          "34:   conn.on('connect', function() {",
          "35:     conn.write('after');",
          "36:   });",
          "37:   conn.on('data', function(buf) {",
          "38:     received += buf;",
          "39:     conn.end();",
          "40:   });",
          "41:   conn.on('end', function() {",
          "42:     server.close();",
          "43:   });",
          "44: });",
          "46: process.on('exit', function() {",
          "47:   assert.equal(received, 'before' + 'after');",
          "48: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13304194466eca3e85cc5e7cc16f102c2759eeb7",
      "candidate_info": {
        "commit_hash": "13304194466eca3e85cc5e7cc16f102c2759eeb7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/13304194466eca3e85cc5e7cc16f102c2759eeb7",
        "files": [
          "tools/license2rtf.js",
          "vcbuild.bat"
        ],
        "message": "Windows: add build step that generates license.rtf from LICENSE",
        "before_after_code_files": [
          "tools/license2rtf.js||tools/license2rtf.js",
          "vcbuild.bat||vcbuild.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/license2rtf.js||tools/license2rtf.js": [
          "File: tools/license2rtf.js -> tools/license2rtf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: var assert = require('assert'),",
          "3:     Stream = require('stream'),",
          "4:     inherits = require('util').inherits;",
          "10: function LineSplitter() {",
          "11:   var self = this,",
          "12:       buffer = \"\";",
          "14:   Stream.call(this);",
          "15:   this.writable = true;",
          "17:   this.write = function(data) {",
          "18:     var lines = (buffer + data).split(/\\r\\n|\\n\\r|\\n|\\r/);",
          "19:     for (var i = 0; i < lines.length - 1; i++) {",
          "20:       self.emit('data', lines[i]);",
          "21:     }",
          "22:     buffer = lines[lines.length - 1];",
          "23:     return true;",
          "24:   };",
          "26:   this.end = function(data) {",
          "27:     this.write(data || '');",
          "28:     if (buffer) {",
          "29:       self.emit('data', buffer);",
          "30:     }",
          "31:     self.emit('end');",
          "32:   };",
          "33: }",
          "34: inherits(LineSplitter, Stream);",
          "40: function ParagraphParser() {",
          "41:   var self = this,",
          "42:       block_is_license_block = false,",
          "43:       block_has_c_style_comment,",
          "44:       is_first_line_in_paragraph,",
          "45:       paragraph_line_indent,",
          "46:       paragraph;",
          "48:    Stream.call(this);",
          "49:    this.writable = true;",
          "51:    resetBlock(false);",
          "53:    this.write = function(data) {",
          "54:      parseLine(data + '');",
          "55:      return true;",
          "56:    };",
          "58:    this.end = function(data) {",
          "59:      if (data) {",
          "60:        parseLine(data + '');",
          "61:      }",
          "62:      flushParagraph();",
          "63:      self.emit('end');",
          "64:    };",
          "66:   function resetParagraph() {",
          "67:     is_first_line_in_paragraph = true;",
          "68:     paragraph_line_indent = -1;",
          "70:     paragraph = {",
          "71:       li: '',",
          "72:       in_license_block: block_is_license_block,",
          "73:       lines: []",
          "74:     };",
          "75:   }",
          "77:   function resetBlock(is_license_block) {",
          "78:     block_is_license_block = is_license_block;",
          "79:     block_has_c_style_comment = false;",
          "80:     resetParagraph();",
          "81:   }",
          "83:   function flushParagraph() {",
          "84:     if (paragraph.lines.length || paragraph.li) {",
          "85:       self.emit('data', paragraph);",
          "86:     }",
          "87:     resetParagraph();",
          "88:   }",
          "90:   function parseLine(line) {",
          "92:     line = line.replace(/\\s*$/, '');",
          "95:     if (/^\\s*(=|\"){3,}\\s*$/.test(line)) {",
          "96:       flushParagraph();",
          "97:       resetBlock(!block_is_license_block);",
          "98:       return;",
          "99:     }",
          "102:     if (block_is_license_block) {",
          "103:       if (!block_has_c_style_comment)",
          "104:         block_has_c_style_comment = /^\\s*(\\/\\*)/.test(line);",
          "105:       if (block_has_c_style_comment) {",
          "106:         var prev = line;",
          "107:         line = line.replace(/^(\\s*?)(?:\\s?\\*\\/|\\/\\*\\s|\\s\\*\\s?)/, '$1');",
          "108:         if (prev == line)",
          "109:           line = line.replace(/^\\s{2}/, '');",
          "110:         if (/\\*\\//.test(prev))",
          "111:           block_has_c_style_comment = false;",
          "112:       } else {",
          "114:         line = line.replace(/^(\\s*)(?:\\/\\/\\s?|#\\s?)/, '$1');",
          "115:       }",
          "116:     }",
          "119:     if (!/\\S/.test(line)) {",
          "120:       flushParagraph();",
          "121:       return;",
          "122:     }",
          "126:     if (/^\\s*[=*\\-]{5,}\\s*$/.test(line)) {",
          "127:       flushParagraph();",
          "128:       return;",
          "129:     }",
          "132:     var result = /^(\\s*)(\\d+\\.|\\*|-)?\\s*/.exec(line);",
          "133:     assert.ok(result);",
          "136:     var line_strip_length = result[0].length;",
          "139:     var line_indent = Math.floor(result[0].length / 2) * 2;",
          "141:     var level = Math.floor(result[1].length / 2);",
          "143:     var line_li = result[2];",
          "146:     if (line_li || (line_indent != paragraph_line_indent &&",
          "147:                     paragraph_line_indent != -1)) {",
          "148:       flushParagraph();",
          "149:       paragraph.li = line_li;",
          "150:     }",
          "155:     if (!line_li && paragraph_line_indent != -1) {",
          "156:       paragraph_line_indent = line_indent;",
          "157:     }",
          "160:     if (paragraph.level === undefined)",
          "161:       paragraph.level = level;",
          "164:     line = line.slice(line_strip_length);",
          "166:     if (line)",
          "167:       paragraph.lines.push(line);",
          "169:     is_first_line_in_paragraph = false;",
          "170:   }",
          "171: }",
          "172: inherits(ParagraphParser, Stream);",
          "179: function Unwrapper() {",
          "180:   var self = this;",
          "182:   Stream.call(this);",
          "183:   this.writable = true;",
          "185:   this.write = function(paragraph) {",
          "186:     var lines = paragraph.lines,",
          "187:         break_after = [],",
          "188:         i;",
          "190:     for (i = 0; i < lines.length - 1; i++) {",
          "191:       var line = lines[i];",
          "195:       if (line.length < 50)  {",
          "198:         var next_first_word_length = lines[i + 1].replace(/\\s.*$/, '').length;",
          "199:         if (line.length + next_first_word_length < 60) {",
          "200:           break_after[i] = true;",
          "201:         }",
          "202:       }",
          "203:     }",
          "205:     for (i = 0; i < lines.length - 1; ) {",
          "206:       if (!break_after[i]) {",
          "207:         lines[i] += ' ' + lines.splice(i + 1, 1)[0];",
          "208:       } else {",
          "209:         i++;",
          "210:       }",
          "211:     }",
          "213:     self.emit('data', paragraph);",
          "214:   };",
          "216:   this.end = function(data) {",
          "217:     if (data)",
          "218:       self.write(data);",
          "219:     self.emit('end');",
          "220:   };",
          "221: }",
          "222: inherits(Unwrapper, Stream);",
          "228: function RtfGenerator() {",
          "229:   var self = this,",
          "230:       did_write_anything = false;",
          "232:   Stream.call(this);",
          "233:   this.writable = true;",
          "235:   this.write = function(paragraph) {",
          "236:     if (!did_write_anything) {",
          "237:       emitHeader();",
          "238:       did_write_anything = true;",
          "239:     }",
          "241:     var li = paragraph.li,",
          "242:         level = paragraph.level + (li ? 1 : 0),",
          "243:         lic = paragraph.in_license_block;",
          "245:     var rtf = \"\\\\pard\";",
          "246:     rtf += '\\\\sa150\\\\sl300\\\\slmult1';",
          "247:     if (level > 0)",
          "248:       rtf += '\\\\li' + (level * 240);",
          "249:     if (li) {",
          "250:       rtf += '\\\\tx' + (level) * 240;",
          "251:       rtf += '\\\\fi-240';",
          "252:     }",
          "253:     if (lic)",
          "254:       rtf += '\\\\ri240';",
          "255:     if (!lic)",
          "256:       rtf += '\\\\b';",
          "257:     if (li)",
          "258:       rtf += ' ' + li + '\\\\tab';",
          "259:     rtf += ' ';",
          "260:     rtf += paragraph.lines.map(rtfEscape).join('\\\\line ');",
          "261:     if (!lic)",
          "262:       rtf += '\\\\b0';",
          "263:     rtf += '\\\\par\\n';",
          "265:     self.emit('data', rtf);",
          "266:   };",
          "268:   this.end = function(data) {",
          "269:     if (data)",
          "270:       self.write(data);",
          "271:     if (did_write_anything)",
          "272:       emitFooter();",
          "273:     self.emit('end');",
          "274:   };",
          "276:   function toHex(number, length) {",
          "277:     var hex = (~~number).toString(16);",
          "278:     while (hex.length < length)",
          "279:       hex = '0' + hex;",
          "280:     return hex;",
          "281:   }",
          "283:   function rtfEscape(string) {",
          "284:     return string",
          "285:       .replace(/[\\\\\\{\\}]/g, function(m) {",
          "286:        return '\\\\' + m;",
          "287:       })",
          "288:       .replace(/\\t/g, function() {",
          "289:         return '\\\\tab ';",
          "290:       })",
          "291:       .replace(/[\\x00-\\x1f\\x7f-\\xff]/g, function(m) {",
          "292:         return '\\\\\\'' + toHex(m.charCodeAt(0), 2);",
          "293:       })",
          "294:       .replace(/\\ufeff/g, '')",
          "295:       .replace(/[\\u0100-\\uffff]/g, function(m) {",
          "296:         return '\\\\u' + toHex(m.charCodeAt(0), 4) + '?';",
          "297:      });",
          "298:   }",
          "300:   function emitHeader() {",
          "301:     self.emit('data', '{\\\\rtf1\\\\ansi\\\\ansicpg1252\\\\uc1\\\\deff0\\\\deflang1033' +",
          "302:                       '{\\\\fonttbl{\\\\f0\\\\fswiss\\\\fcharset0 Tahoma;}}\\\\fs20\\n' +",
          "303:                       '{\\\\*\\\\generator txt2rtf 0.0.1;}\\n');",
          "304:   }",
          "306:   function emitFooter() {",
          "307:     self.emit('data', '}');",
          "308:   }",
          "309: }",
          "310: inherits(RtfGenerator, Stream);",
          "313: var stdin = process.stdin,",
          "314:     stdout = process.stdout,",
          "315:     line_splitter = new LineSplitter(),",
          "316:     paragraph_parser = new ParagraphParser(),",
          "317:     unwrapper = new Unwrapper(),",
          "318:     rtf_generator = new RtfGenerator();",
          "320: stdin.setEncoding('utf-8');",
          "321: stdin.resume();",
          "323: stdin.pipe(line_splitter);",
          "324: line_splitter.pipe(paragraph_parser);",
          "325: paragraph_parser.pipe(unwrapper);",
          "326: unwrapper.pipe(rtf_generator);",
          "327: rtf_generator.pipe(stdout);",
          "",
          "---------------"
        ],
        "vcbuild.bat||vcbuild.bat": [
          "File: vcbuild.bat -> vcbuild.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: set test=",
          "23: set test_args=",
          "24: set msi=",
          "25: set upload=",
          "27: :next-arg",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: set licensertf=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: if /i \"%1\"==\"nobuild\"       set nobuild=1&goto arg-ok",
          "37: if /i \"%1\"==\"nosign\"        set nosign=1&goto arg-ok",
          "38: if /i \"%1\"==\"nosnapshot\"    set nosnapshot=1&goto arg-ok",
          "39: if /i \"%1\"==\"test-uv\"       set test=test-uv&goto arg-ok",
          "40: if /i \"%1\"==\"test-internet\" set test=test-internet&goto arg-ok",
          "41: if /i \"%1\"==\"test-pummel\"   set test=test-pummel&goto arg-ok",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: if /i \"%1\"==\"licensertf\"    set licensertf=1&goto arg-ok",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43: if /i \"%1\"==\"test-message\"  set test=test-message&goto arg-ok",
          "44: if /i \"%1\"==\"test-all\"      set test=test-all&goto arg-ok",
          "45: if /i \"%1\"==\"test\"          set test=test&goto arg-ok",
          "47: if /i \"%1\"==\"upload\"        set upload=1&goto arg-ok",
          "49: echo Warning: ignoring invalid command line option `%1`.",
          "",
          "[Removed Lines]",
          "46: if /i \"%1\"==\"msi\"           set msi=1&goto arg-ok",
          "",
          "[Added Lines]",
          "48: if /i \"%1\"==\"msi\"           set msi=1&set licensertf=1&goto arg-ok",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76: :msbuild",
          "77: @rem Skip project generation if requested.",
          "80: @rem Bail out early if not running in VS build env.",
          "81: if defined VCINSTALLDIR goto msbuild-found",
          "",
          "[Removed Lines]",
          "78: if defined nobuild goto msi",
          "",
          "[Added Lines]",
          "80: if defined nobuild goto sign",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "94: msbuild node.sln /t:%target% /p:Configuration=%config% /clp:NoSummary;NoItemAndPropertyList;Verbosity=minimal /nologo",
          "95: if errorlevel 1 goto exit",
          "98: signtool sign /a Release\\node.exe",
          "100: :msi",
          "101: @rem Skip msi generation if not requested",
          "102: if not defined msi goto run",
          "",
          "[Removed Lines]",
          "97: if defined nosign goto msi",
          "",
          "[Added Lines]",
          "99: :sign",
          "100: @rem Skip signing if the `nosign` option was specified.",
          "101: if defined nosign goto licensertf",
          "105: :licensertf",
          "106: @rem Skip license.rtf generation if not requested.",
          "107: if not defined licensertf goto msi",
          "109: %config%\\node tools\\license2rtf.js < LICENSE > %config%\\license.rtf",
          "110: if errorlevel 1 echo Failed to generate license.rtf&goto exit",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63c2391984b74bf04bc7f68e346e857ca9d63329",
      "candidate_info": {
        "commit_hash": "63c2391984b74bf04bc7f68e346e857ca9d63329",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/63c2391984b74bf04bc7f68e346e857ca9d63329",
        "files": [
          "test/pummel/test-fs-watch-file.js"
        ],
        "message": "test: make test-fs-watch-file write to tmp dir\n\nWrite temp files to test/tmp, not test/fixtures.",
        "before_after_code_files": [
          "test/pummel/test-fs-watch-file.js||test/pummel/test-fs-watch-file.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/pummel/test-fs-watch-file.js||test/pummel/test-fs-watch-file.js": [
          "File: test/pummel/test-fs-watch-file.js -> test/pummel/test-fs-watch-file.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: var watchSeenThree = 0;",
          "31: var startDir = process.cwd();",
          "34: var filenameOne = 'watch.txt';",
          "35: var filepathOne = path.join(testDir, filenameOne);",
          "",
          "[Removed Lines]",
          "32: var testDir = common.fixturesDir;",
          "",
          "[Added Lines]",
          "32: var testDir = common.tmpDir;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d329fc7b09890876030542c53f932a510219bc0b",
      "candidate_info": {
        "commit_hash": "d329fc7b09890876030542c53f932a510219bc0b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d329fc7b09890876030542c53f932a510219bc0b",
        "files": [
          "src/node.cc"
        ],
        "message": "isolates: add process.tid property, pass args to isolate",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: namespace node {",
          "132: static int option_end_index;",
          "133: static unsigned long max_stack_size;",
          "134: static unsigned short debug_port = 5858;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: #define TICK_TIME(n) tick_times[(tick_time_head - (n)) % RPM_SAMPLES]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: static const char* eval_string;",
          "138: static bool print_eval;",
          "146: static void StartGCTimer () {",
          "147:   if (!uv_is_active((uv_handle_t*) &gc_timer)) {",
          "",
          "[Removed Lines]",
          "142: #define TICK_TIME(n) tick_times[(tick_time_head - (n)) % RPM_SAMPLES]",
          "144: static void CheckStatus(uv_timer_t* watcher, int status);",
          "",
          "[Added Lines]",
          "142: static void CheckStatus(uv_timer_t* watcher, int status);",
          "143: static unsigned long NewThreadId();",
          "145: void StartThread(unsigned long thread_id,",
          "146:                  Isolate* isolate,",
          "147:                  int argc,",
          "148:                  char** argv);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1846: }",
          "1849: static void RunIsolate(void* arg) {",
          "1850:   uv_loop_t* loop = uv_loop_new();",
          "1851:   Isolate* isolate = Isolate::New(loop);",
          "1852: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1854: static struct {",
          "1855:   uv_mutex_t lock_;",
          "1856:   unsigned long counter_;",
          "1857: } thread_id_generator_;",
          "1860: static unsigned long NewThreadId() {",
          "1861:   unsigned long thread_id;",
          "1863:   uv_mutex_lock(&thread_id_generator_.lock_);",
          "1864:   thread_id = ++thread_id_generator_.counter_;",
          "1865:   uv_mutex_unlock(&thread_id_generator_.lock_);",
          "1867:   return thread_id;",
          "1868: }",
          "1871: struct ThreadInfo {",
          "1872:   unsigned long thread_id_;",
          "1873:   uv_thread_t thread_;",
          "1874:   char** argv_;",
          "1875:   int argc_;",
          "1877:   ThreadInfo(int argc, char** argv) {",
          "1878:     argc_ = argc;",
          "1879:     argv_ = new char*[argc_ + 1];",
          "1881:     for (int i = 0; i < argc_; ++i) {",
          "1882:       size_t size = 1 + strlen(argv[i]);",
          "1883:       argv_[i] = new char[size];",
          "1884:       memcpy(argv_[i], argv[i], size);",
          "1885:     }",
          "1886:     argv_[argc_] = NULL;",
          "1887:   }",
          "1889:   ThreadInfo(Handle<Array> args) {",
          "1890:     argc_ = args->Length();",
          "1891:     argv_ = new char*[argc_ + 1];",
          "1893:     for (int i = 0; i < argc_; ++i) {",
          "1894:       String::Utf8Value str(args->Get(i));",
          "1895:       size_t size = 1 + strlen(*str);",
          "1896:       argv_[i] = new char[size];",
          "1897:       memcpy(argv_[i], *str, size);",
          "1898:     }",
          "1899:     argv_[argc_] = NULL;",
          "1900:   }",
          "1902:   ~ThreadInfo() {",
          "1903:     for (int i = 0; i < argc_; ++i) {",
          "1904:       delete[] argv_[i];",
          "1905:     }",
          "1906:     delete argv_;",
          "1907:   }",
          "1908: };",
          "1912:   ThreadInfo* ti = reinterpret_cast<ThreadInfo*>(arg);",
          "1917:   StartThread(ti->thread_id_, isolate, ti->argc_, ti->argv_);",
          "1918:   delete ti;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1858: static Handle<Value> NewIsolate(const Arguments& args) {",
          "1859:   HandleScope scope;",
          "1864:     return Null();",
          "1866:   Local<ObjectTemplate> tpl = ObjectTemplate::New();",
          "1867:   tpl->SetInternalFieldCount(2);",
          "1869:   Local<Object> obj = tpl->NewInstance();",
          "1870:   obj->SetPointerInInternalField(0, magic_isolate_cookie_);",
          "1873:   return scope.Close(obj);",
          "1874: }",
          "",
          "[Removed Lines]",
          "1861:   uv_thread_t* tid = new uv_thread_t;",
          "1863:   if (uv_thread_create(tid, RunIsolate, NULL))",
          "1871:   obj->SetPointerInInternalField(1, tid);",
          "",
          "[Added Lines]",
          "1928:   assert(args[0]->IsArray());",
          "1930:   Local<Array> argv = args[0].As<Array>();",
          "1931:   assert(argv->Length() >= 2);",
          "1933:   ThreadInfo* ti = new ThreadInfo(argv);",
          "1934:   ti->thread_id_ = NewThreadId();",
          "1936:   if (uv_thread_create(&ti->thread_, RunIsolate, ti)) {",
          "1937:     delete ti;",
          "1939:   }",
          "1946:   obj->SetPointerInInternalField(1, ti);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1883:   assert(obj->InternalFieldCount() == 2);",
          "1884:   assert(obj->GetPointerFromInternalField(0) == magic_isolate_cookie_);",
          "1889:     return False(); // error",
          "1890:   else",
          "1891:     return True();  // ok",
          "",
          "[Removed Lines]",
          "1886:   uv_thread_t* tid = (uv_thread_t*) obj->GetPointerFromInternalField(1);",
          "1888:   if (uv_thread_join(tid))",
          "",
          "[Added Lines]",
          "1961:   ThreadInfo* ti = reinterpret_cast<ThreadInfo*>(",
          "1962:       obj->GetPointerFromInternalField(1));",
          "1964:   if (uv_thread_join(&ti->thread_))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2634: }",
          "2640:   uv_prepare_init(loop, &prepare_tick_watcher);",
          "2641:   uv_prepare_start(&prepare_tick_watcher, PrepareTick);",
          "2642:   uv_unref(loop);",
          "",
          "[Removed Lines]",
          "2637: void StartThread(Isolate* isolate, int argc, char** argv) {",
          "2638:   uv_loop_t* loop = isolate->GetLoop();",
          "",
          "[Added Lines]",
          "2713: void StartThread(unsigned long thread_id,",
          "2714:                  Isolate* isolate,",
          "2715:                  int argc,",
          "2716:                  char** argv) {",
          "2717:   HandleScope scope;",
          "2719:   v8::Isolate::Scope isolate_scope(isolate->GetV8Isolate());",
          "2720:   v8::Context::Scope context_scope(isolate->GetV8Context());",
          "2722:   uv_loop_t* loop = isolate->GetLoop();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2688:   }",
          "2690:   Handle<Object> process_l = SetupProcessObject(argc, argv);",
          "",
          "[Removed Lines]",
          "2691:   v8_typed_array::AttachBindings(v8::Context::GetCurrent()->Global());",
          "",
          "[Added Lines]",
          "2775:   process_l->Set(String::NewSymbol(\"tid\"),",
          "2776:                  Integer::NewFromUnsigned(thread_id));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2708: int Start(int argc, char *argv[]) {",
          "2710:   argv = ProcessInit(argc, argv);",
          "2712:   v8::V8::Initialize();",
          "2713:   v8::HandleScope handle_scope;",
          "2720:   Isolate* isolate = Isolate::New(uv_default_loop());",
          "2722:   isolate->Dispose();",
          "2724: #ifndef NDEBUG",
          "2727:   V8::Dispose();",
          "2728: #endif  // NDEBUG",
          "",
          "[Removed Lines]",
          "2716:   Persistent<v8::Context> context = v8::Context::New();",
          "2717:   v8::Context::Scope context_scope(context);",
          "2721:   StartThread(isolate, argc, argv);",
          "2726:   context.Dispose();",
          "",
          "[Added Lines]",
          "2797:   if (uv_mutex_init(&thread_id_generator_.lock_)) abort();",
          "2807:   StartThread(NewThreadId(), isolate, argc, argv);",
          "",
          "---------------"
        ]
      }
    }
  ]
}