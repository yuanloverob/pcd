{
  "cve_id": "CVE-2019-12068",
  "cve_desc": "In QEMU 1:4.1-1, 1:2.1+dfsg-12+deb8u6, 1:2.8+dfsg-6+deb9u8, 1:3.1+dfsg-8~deb10u1, 1:3.1+dfsg-8+deb10u2, and 1:2.1+dfsg-12+deb8u12 (fixed), when executing script in lsi_execute_script(), the LSI scsi adapter emulator advances 's->dsp' index to read next opcode. This can lead to an infinite loop if the next opcode is empty. Move the existing loop exit after 10k iterations so that it covers no-op opcodes as well.",
  "repo": "qemu/qemu",
  "patch_hash": "de594e47659029316bbf9391efb79da0a1a08e08",
  "patch_info": {
    "commit_hash": "de594e47659029316bbf9391efb79da0a1a08e08",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/de594e47659029316bbf9391efb79da0a1a08e08",
    "files": [
      "hw/scsi/lsi53c895a.c"
    ],
    "message": "scsi: lsi: exit infinite loop while executing script (CVE-2019-12068)\n\nWhen executing script in lsi_execute_script(), the LSI scsi adapter\nemulator advances 's->dsp' index to read next opcode. This can lead\nto an infinite loop if the next opcode is empty. Move the existing\nloop exit after 10k iterations so that it covers no-op opcodes as\nwell.\n\nReported-by: Bugs SysSec <bugs-syssec@rub.de>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>\nSigned-off-by: Prasad J Pandit <pjp@fedoraproject.org>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "before_after_code_files": [
      "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c"
    ]
  },
  "patch_diff": {
    "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c": [
      "File: hw/scsi/lsi53c895a.c -> hw/scsi/lsi53c895a.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "187: #define LSI_TAG_VALID     (1 << 16)",
      "189: typedef struct lsi_request {",
      "190:     SCSIRequest *req;",
      "191:     uint32_t tag;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "190: #define LSI_MAX_INSN    10000",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1134:     s->istat1 |= LSI_ISTAT1_SRUN;",
      "1135: again:",
      "1137:     insn = read_dword(s, s->dsp);",
      "1138:     if (!insn) {",
      "",
      "[Removed Lines]",
      "1136:     insn_processed++;",
      "",
      "[Added Lines]",
      "1139:     if (++insn_processed > LSI_MAX_INSN) {",
      "1141:            location to change.  If we have been executed a lot of code then",
      "1142:            assume this is the case and force an unexpected device disconnect.",
      "1143:            This is apparently sufficient to beat the drivers into submission.",
      "1145:         if (!(s->sien0 & LSI_SIST0_UDC)) {",
      "1146:             qemu_log_mask(LOG_GUEST_ERROR,",
      "1147:                           \"lsi_scsi: inf. loop with UDC masked\");",
      "1148:         }",
      "1149:         lsi_script_scsi_interrupt(s, LSI_SIST0_UDC, 0);",
      "1150:         lsi_disconnect(s);",
      "1151:         trace_lsi_execute_script_stop();",
      "1152:         return;",
      "1153:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1570:             }",
      "1571:         }",
      "1572:     }",
      "1586:         if (s->dcntl & LSI_DCNTL_SSM) {",
      "1587:             lsi_script_dma_interrupt(s, LSI_DSTAT_SSI);",
      "1588:         } else {",
      "",
      "[Removed Lines]",
      "1573:     if (insn_processed > 10000 && s->waiting == LSI_NOWAIT) {",
      "1575:            location to change.  If we have been executed a lot of code then",
      "1576:            assume this is the case and force an unexpected device disconnect.",
      "1577:            This is apparently sufficient to beat the drivers into submission.",
      "1579:         if (!(s->sien0 & LSI_SIST0_UDC)) {",
      "1580:             qemu_log_mask(LOG_GUEST_ERROR,",
      "1581:                           \"lsi_scsi: inf. loop with UDC masked\");",
      "1582:         }",
      "1583:         lsi_script_scsi_interrupt(s, LSI_SIST0_UDC, 0);",
      "1584:         lsi_disconnect(s);",
      "1585:     } else if (s->istat1 & LSI_ISTAT1_SRUN && s->waiting == LSI_NOWAIT) {",
      "",
      "[Added Lines]",
      "1590:     if (s->istat1 & LSI_ISTAT1_SRUN && s->waiting == LSI_NOWAIT) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "051c9b3cbcb4beb42a6ed017c2146ec3e7a754fb",
      "candidate_info": {
        "commit_hash": "051c9b3cbcb4beb42a6ed017c2146ec3e7a754fb",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/051c9b3cbcb4beb42a6ed017c2146ec3e7a754fb",
        "files": [
          "hw/scsi/lsi53c895a.c"
        ],
        "message": "scsi: lsi: exit infinite loop while executing script (CVE-2019-12068)\n\nWhen executing script in lsi_execute_script(), the LSI scsi adapter\nemulator advances 's->dsp' index to read next opcode. This can lead\nto an infinite loop if the next opcode is empty. Move the existing\nloop exit after 10k iterations so that it covers no-op opcodes as\nwell.\n\nReported-by: Bugs SysSec <bugs-syssec@rub.de>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>\nSigned-off-by: Prasad J Pandit <pjp@fedoraproject.org>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>\n(cherry picked from commit de594e47659029316bbf9391efb79da0a1a08e08)\nSigned-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>",
        "before_after_code_files": [
          "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c"
          ],
          "candidate": [
            "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c": [
          "File: hw/scsi/lsi53c895a.c -> hw/scsi/lsi53c895a.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: #define LSI_TAG_VALID     (1 << 16)",
          "188: typedef struct lsi_request {",
          "189:     SCSIRequest *req;",
          "190:     uint32_t tag;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189: #define LSI_MAX_INSN    10000",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1133:     s->istat1 |= LSI_ISTAT1_SRUN;",
          "1134: again:",
          "1136:     insn = read_dword(s, s->dsp);",
          "1137:     if (!insn) {",
          "",
          "[Removed Lines]",
          "1135:     insn_processed++;",
          "",
          "[Added Lines]",
          "1138:     if (++insn_processed > LSI_MAX_INSN) {",
          "1140:            location to change.  If we have been executed a lot of code then",
          "1141:            assume this is the case and force an unexpected device disconnect.",
          "1142:            This is apparently sufficient to beat the drivers into submission.",
          "1144:         if (!(s->sien0 & LSI_SIST0_UDC)) {",
          "1145:             qemu_log_mask(LOG_GUEST_ERROR,",
          "1146:                           \"lsi_scsi: inf. loop with UDC masked\");",
          "1147:         }",
          "1148:         lsi_script_scsi_interrupt(s, LSI_SIST0_UDC, 0);",
          "1149:         lsi_disconnect(s);",
          "1150:         trace_lsi_execute_script_stop();",
          "1151:         return;",
          "1152:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1569:             }",
          "1570:         }",
          "1571:     }",
          "1585:         if (s->dcntl & LSI_DCNTL_SSM) {",
          "1586:             lsi_script_dma_interrupt(s, LSI_DSTAT_SSI);",
          "1587:         } else {",
          "",
          "[Removed Lines]",
          "1572:     if (insn_processed > 10000 && s->waiting == LSI_NOWAIT) {",
          "1574:            location to change.  If we have been executed a lot of code then",
          "1575:            assume this is the case and force an unexpected device disconnect.",
          "1576:            This is apparently sufficient to beat the drivers into submission.",
          "1578:         if (!(s->sien0 & LSI_SIST0_UDC)) {",
          "1579:             qemu_log_mask(LOG_GUEST_ERROR,",
          "1580:                           \"lsi_scsi: inf. loop with UDC masked\");",
          "1581:         }",
          "1582:         lsi_script_scsi_interrupt(s, LSI_SIST0_UDC, 0);",
          "1583:         lsi_disconnect(s);",
          "1584:     } else if (s->istat1 & LSI_ISTAT1_SRUN && s->waiting == LSI_NOWAIT) {",
          "",
          "[Added Lines]",
          "1589:     if (s->istat1 & LSI_ISTAT1_SRUN && s->waiting == LSI_NOWAIT) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b65e78320bba2655b60355739ed1a1da2ccc6c78",
      "candidate_info": {
        "commit_hash": "b65e78320bba2655b60355739ed1a1da2ccc6c78",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/b65e78320bba2655b60355739ed1a1da2ccc6c78",
        "files": [
          "hw/scsi/lsi53c895a.c"
        ],
        "message": "scsi: lsi: exit infinite loop while executing script (CVE-2019-12068)\n\nWhen executing script in lsi_execute_script(), the LSI scsi adapter\nemulator advances 's->dsp' index to read next opcode. This can lead\nto an infinite loop if the next opcode is empty. Move the existing\nloop exit after 10k iterations so that it covers no-op opcodes as\nwell.\n\nReported-by: Bugs SysSec <bugs-syssec@rub.de>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>\nSigned-off-by: Prasad J Pandit <pjp@fedoraproject.org>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>\n(cherry picked from commit de594e47659029316bbf9391efb79da0a1a08e08)\nSigned-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>",
        "before_after_code_files": [
          "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c"
          ],
          "candidate": [
            "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c": [
          "File: hw/scsi/lsi53c895a.c -> hw/scsi/lsi53c895a.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "185: #define LSI_TAG_VALID     (1 << 16)",
          "187: typedef struct lsi_request {",
          "188:     SCSIRequest *req;",
          "189:     uint32_t tag;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: #define LSI_MAX_INSN    10000",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1132:     s->istat1 |= LSI_ISTAT1_SRUN;",
          "1133: again:",
          "1135:     insn = read_dword(s, s->dsp);",
          "1136:     if (!insn) {",
          "",
          "[Removed Lines]",
          "1134:     insn_processed++;",
          "",
          "[Added Lines]",
          "1137:     if (++insn_processed > LSI_MAX_INSN) {",
          "1139:            location to change.  If we have been executed a lot of code then",
          "1140:            assume this is the case and force an unexpected device disconnect.",
          "1141:            This is apparently sufficient to beat the drivers into submission.",
          "1143:         if (!(s->sien0 & LSI_SIST0_UDC)) {",
          "1144:             qemu_log_mask(LOG_GUEST_ERROR,",
          "1145:                           \"lsi_scsi: inf. loop with UDC masked\");",
          "1146:         }",
          "1147:         lsi_script_scsi_interrupt(s, LSI_SIST0_UDC, 0);",
          "1148:         lsi_disconnect(s);",
          "1149:         trace_lsi_execute_script_stop();",
          "1150:         return;",
          "1151:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1568:             }",
          "1569:         }",
          "1570:     }",
          "1584:         if (s->dcntl & LSI_DCNTL_SSM) {",
          "1585:             lsi_script_dma_interrupt(s, LSI_DSTAT_SSI);",
          "1586:         } else {",
          "",
          "[Removed Lines]",
          "1571:     if (insn_processed > 10000 && s->waiting == LSI_NOWAIT) {",
          "1573:            location to change.  If we have been executed a lot of code then",
          "1574:            assume this is the case and force an unexpected device disconnect.",
          "1575:            This is apparently sufficient to beat the drivers into submission.",
          "1577:         if (!(s->sien0 & LSI_SIST0_UDC)) {",
          "1578:             qemu_log_mask(LOG_GUEST_ERROR,",
          "1579:                           \"lsi_scsi: inf. loop with UDC masked\");",
          "1580:         }",
          "1581:         lsi_script_scsi_interrupt(s, LSI_SIST0_UDC, 0);",
          "1582:         lsi_disconnect(s);",
          "1583:     } else if (s->istat1 & LSI_ISTAT1_SRUN && s->waiting == LSI_NOWAIT) {",
          "",
          "[Added Lines]",
          "1588:     if (s->istat1 & LSI_ISTAT1_SRUN && s->waiting == LSI_NOWAIT) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c921370b22cba70ada74cef43f7d36c011648ec6",
      "candidate_info": {
        "commit_hash": "c921370b22cba70ada74cef43f7d36c011648ec6",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/c921370b22cba70ada74cef43f7d36c011648ec6",
        "files": [
          "hw/scsi/lsi53c895a.c",
          "hw/scsi/trace-events"
        ],
        "message": "lsi53c895a: convert to trace-events\n\nSigned-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>\nMessage-Id: <20180917053229.4853-1-mark.cave-ayland@ilande.co.uk>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c"
          ],
          "candidate": [
            "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/scsi/lsi53c895a.c||hw/scsi/lsi53c895a.c": [
          "File: hw/scsi/lsi53c895a.c -> hw/scsi/lsi53c895a.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"hw/scsi/scsi.h\"",
          "21: #include \"sysemu/dma.h\"",
          "22: #include \"qemu/log.h\"",
          "38: static const char *names[] = {",
          "39:     \"SCNTL0\", \"SCNTL1\", \"SCNTL2\", \"SCNTL3\", \"SCID\", \"SXFER\", \"SDID\", \"GPREG\",",
          "",
          "[Removed Lines]",
          "27: #ifdef DEBUG_LSI",
          "28: #define DPRINTF(fmt, ...) \\",
          "29: do { printf(\"lsi_scsi: \" fmt , ## __VA_ARGS__); } while (0)",
          "30: #define BADF(fmt, ...) \\",
          "31: do { fprintf(stderr, \"lsi_scsi: error: \" fmt , ## __VA_ARGS__); exit(1);} while (0)",
          "32: #else",
          "33: #define DPRINTF(fmt, ...) do {} while(0)",
          "34: #define BADF(fmt, ...) \\",
          "35: do { fprintf(stderr, \"lsi_scsi: error: \" fmt , ## __VA_ARGS__);} while (0)",
          "36: #endif",
          "",
          "[Added Lines]",
          "23: #include \"trace.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314: static void lsi_soft_reset(LSIState *s)",
          "315: {",
          "317:     s->carry = 0;",
          "319:     s->msg_action = 0;",
          "",
          "[Removed Lines]",
          "316:     DPRINTF(\"Reset\\n\");",
          "",
          "[Added Lines]",
          "303:     trace_lsi_reset();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "484:         level = 1;",
          "486:     if (level != last_level) {",
          "489:         last_level = level;",
          "490:     }",
          "491:     lsi_set_irq(s, level);",
          "493:     if (!level && lsi_irq_on_rsl(s) && !(s->scntl1 & LSI_SCNTL1_CON)) {",
          "496:         QTAILQ_FOREACH(p, &s->queue, next) {",
          "497:             if (p->pending) {",
          "498:                 lsi_reselect(s, p);",
          "",
          "[Removed Lines]",
          "487:         DPRINTF(\"Update IRQ level %d dstat %02x sist %02x%02x\\n\",",
          "488:                 level, s->dstat, s->sist1, s->sist0);",
          "494:         DPRINTF(\"Handled IRQs & disconnected, looking for pending \"",
          "495:                 \"processes\\n\");",
          "",
          "[Added Lines]",
          "474:         trace_lsi_update_irq(level, s->dstat, s->sist1, s->sist0);",
          "480:         trace_lsi_update_irq_disconnected();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "508:     uint32_t mask0;",
          "509:     uint32_t mask1;",
          "513:     s->sist0 |= stat0;",
          "514:     s->sist1 |= stat1;",
          "",
          "[Removed Lines]",
          "511:     DPRINTF(\"SCSI Interrupt 0x%02x%02x prev 0x%02x%02x\\n\",",
          "512:             stat1, stat0, s->sist1, s->sist0);",
          "",
          "[Added Lines]",
          "496:     trace_lsi_script_scsi_interrupt(stat1, stat0, s->sist1, s->sist0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "528: static void lsi_script_dma_interrupt(LSIState *s, int stat)",
          "529: {",
          "531:     s->dstat |= stat;",
          "532:     lsi_update_irq(s);",
          "533:     lsi_stop_script(s);",
          "",
          "[Removed Lines]",
          "530:     DPRINTF(\"DMA Interrupt 0x%x prev 0x%x\\n\", stat, s->dstat);",
          "",
          "[Added Lines]",
          "514:     trace_lsi_script_dma_interrupt(stat, s->dstat);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "547:         } else {",
          "548:             s->dsp = (s->scntl2 & LSI_SCNTL2_WSR ? s->pmjad2 : s->pmjad1);",
          "549:         }",
          "551:     } else {",
          "553:         lsi_script_scsi_interrupt(s, LSI_SIST0_MA, 0);",
          "554:         lsi_stop_script(s);",
          "555:     }",
          "",
          "[Removed Lines]",
          "550:         DPRINTF(\"Data phase mismatch jump to %08x\\n\", s->dsp);",
          "552:         DPRINTF(\"Phase mismatch interrupt\\n\");",
          "",
          "[Added Lines]",
          "534:         trace_lsi_bad_phase_jump(s->dsp);",
          "536:         trace_lsi_bad_phase_interrupt();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "577: static void lsi_bad_selection(LSIState *s, uint32_t id)",
          "578: {",
          "580:     lsi_script_scsi_interrupt(s, 0, LSI_SIST1_STO);",
          "581:     lsi_disconnect(s);",
          "582: }",
          "",
          "[Removed Lines]",
          "579:     DPRINTF(\"Selected absent target %d\\n\", id);",
          "",
          "[Added Lines]",
          "563:     trace_lsi_bad_selection(id);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "591:     assert(s->current);",
          "592:     if (!s->current->dma_len) {",
          "595:         return;",
          "596:     }",
          "",
          "[Removed Lines]",
          "594:         DPRINTF(\"DMA no data available\\n\");",
          "",
          "[Added Lines]",
          "578:         trace_lsi_do_dma_unavailable();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "611:     else if (s->sbms)",
          "612:         addr |= ((uint64_t)s->sbms << 32);",
          "615:     s->csbc += count;",
          "616:     s->dnad += count;",
          "617:     s->dbc -= count;",
          "",
          "[Removed Lines]",
          "614:     DPRINTF(\"DMA addr=0x\" DMA_ADDR_FMT \" len=%d\\n\", addr, count);",
          "",
          "[Added Lines]",
          "598:     trace_lsi_do_dma(addr, count);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "640: {",
          "641:     lsi_request *p = s->current;",
          "644:     assert(s->current != NULL);",
          "645:     assert(s->current->dma_len == 0);",
          "646:     QTAILQ_INSERT_TAIL(&s->queue, s->current, next);",
          "",
          "[Removed Lines]",
          "643:     DPRINTF(\"Queueing tag=0x%x\\n\", p->tag);",
          "",
          "[Added Lines]",
          "627:     trace_lsi_queue_command(p->tag);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "654: static void lsi_add_msg_byte(LSIState *s, uint8_t data)",
          "655: {",
          "656:     if (s->msg_len >= LSI_MAX_MSGIN_LEN) {",
          "658:     } else {",
          "660:         s->msg[s->msg_len++] = data;",
          "661:     }",
          "662: }",
          "",
          "[Removed Lines]",
          "657:         BADF(\"MSG IN data too long\\n\");",
          "659:         DPRINTF(\"MSG IN 0x%02x\\n\", data);",
          "",
          "[Added Lines]",
          "641:         trace_lsi_add_msg_byte_error();",
          "643:         trace_lsi_add_msg_byte(data);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "676:     if (!(s->dcntl & LSI_DCNTL_COM)) {",
          "677:         s->sfbr = 1 << (id & 0x7);",
          "678:     }",
          "680:     s->scntl1 |= LSI_SCNTL1_CON;",
          "681:     lsi_set_phase(s, PHASE_MI);",
          "682:     s->msg_action = p->out ? 2 : 3;",
          "",
          "[Removed Lines]",
          "679:     DPRINTF(\"Reselected target %d\\n\", id);",
          "",
          "[Added Lines]",
          "663:     trace_lsi_reselect(id);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "732:     lsi_request *p = req->hba_private;",
          "734:     if (p->pending) {",
          "736:     }",
          "737:     p->pending = len;",
          "",
          "[Removed Lines]",
          "735:         BADF(\"Multiple IO pending for request %p\\n\", p);",
          "",
          "[Added Lines]",
          "719:         trace_lsi_queue_req_error(p);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "747:         lsi_reselect(s, p);",
          "748:         return 0;",
          "749:     } else {",
          "751:         p->pending = len;",
          "752:         return 1;",
          "753:     }",
          "",
          "[Removed Lines]",
          "750:         DPRINTF(\"Queueing IO tag=0x%x\\n\", p->tag);",
          "",
          "[Added Lines]",
          "734:         trace_lsi_queue_req(p->tag);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "760:     int out;",
          "762:     out = (s->sstat1 & PHASE_MASK) == PHASE_DO;",
          "764:     s->status = status;",
          "765:     s->command_complete = 2;",
          "766:     if (s->waiting && s->dbc != 0) {",
          "",
          "[Removed Lines]",
          "763:     DPRINTF(\"Command complete status=%d\\n\", (int)status);",
          "",
          "[Added Lines]",
          "747:     trace_lsi_command_complete(status);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "795:     out = (s->sstat1 & PHASE_MASK) == PHASE_DO;",
          "799:     s->current->dma_len = len;",
          "800:     s->command_complete = 1;",
          "801:     if (s->waiting) {",
          "",
          "[Removed Lines]",
          "798:     DPRINTF(\"Data ready tag=0x%x len=%d\\n\", req->tag, len);",
          "",
          "[Added Lines]",
          "782:     trace_lsi_transfer_data(req->tag, len);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "814:     uint32_t id;",
          "815:     int n;",
          "818:     if (s->dbc > 16)",
          "819:         s->dbc = 16;",
          "820:     pci_dma_read(PCI_DEVICE(s), s->dnad, buf, s->dbc);",
          "",
          "[Removed Lines]",
          "817:     DPRINTF(\"Send command len=%d\\n\", s->dbc);",
          "",
          "[Added Lines]",
          "801:     trace_lsi_do_command(s->dbc);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "862: static void lsi_do_status(LSIState *s)",
          "863: {",
          "864:     uint8_t status;",
          "868:     s->dbc = 1;",
          "869:     status = s->status;",
          "870:     s->sfbr = status;",
          "",
          "[Removed Lines]",
          "865:     DPRINTF(\"Get status len=%d status=%d\\n\", s->dbc, s->status);",
          "866:     if (s->dbc != 1)",
          "867:         BADF(\"Bad Status move\\n\");",
          "",
          "[Added Lines]",
          "849:     trace_lsi_do_status(s->dbc, s->status);",
          "850:     if (s->dbc != 1) {",
          "851:         trace_lsi_do_status_error();",
          "852:     }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "877: static void lsi_do_msgin(LSIState *s)",
          "878: {",
          "879:     int len;",
          "881:     s->sfbr = s->msg[0];",
          "882:     len = s->msg_len;",
          "883:     if (len > s->dbc)",
          "",
          "[Removed Lines]",
          "880:     DPRINTF(\"Message in len=%d/%d\\n\", s->dbc, s->msg_len);",
          "",
          "[Added Lines]",
          "865:     trace_lsi_do_msgin(s->dbc, s->msg_len);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "942:         current_req = lsi_find_by_tag(s, current_tag);",
          "943:     }",
          "946:     while (s->dbc) {",
          "947:         msg = lsi_get_msgbyte(s);",
          "948:         s->sfbr = msg;",
          "950:         switch (msg) {",
          "951:         case 0x04:",
          "953:             lsi_disconnect(s);",
          "954:             break;",
          "955:         case 0x08:",
          "957:             lsi_set_phase(s, PHASE_CMD);",
          "958:             break;",
          "959:         case 0x01:",
          "960:             len = lsi_get_msgbyte(s);",
          "961:             msg = lsi_get_msgbyte(s);",
          "964:             switch (msg) {",
          "965:             case 1:",
          "967:                 lsi_skip_msgbytes(s, 2);",
          "968:                 break;",
          "969:             case 3:",
          "971:                 lsi_skip_msgbytes(s, 1);",
          "972:                 break;",
          "973:             case 4:",
          "975:                 lsi_skip_msgbytes(s, 5);",
          "976:                 break;",
          "977:             default:",
          "",
          "[Removed Lines]",
          "945:     DPRINTF(\"MSG out len=%d\\n\", s->dbc);",
          "952:             DPRINTF(\"MSG: Disconnect\\n\");",
          "956:             DPRINTF(\"MSG: No Operation\\n\");",
          "963:             DPRINTF(\"Extended message 0x%x (len %d)\\n\", msg, len);",
          "966:                 DPRINTF(\"SDTR (ignored)\\n\");",
          "970:                 DPRINTF(\"WDTR (ignored)\\n\");",
          "974:                 DPRINTF(\"PPR (ignored)\\n\");",
          "",
          "[Added Lines]",
          "930:     trace_lsi_do_msgout(s->dbc);",
          "937:             trace_lsi_do_msgout_disconnect();",
          "941:             trace_lsi_do_msgout_noop();",
          "948:             trace_lsi_do_msgout_extended(msg, len);",
          "951:                 trace_lsi_do_msgout_ignored(\"SDTR\");",
          "955:                 trace_lsi_do_msgout_ignored(\"WDTR\");",
          "959:                 trace_lsi_do_msgout_ignored(\"PPR\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "980:             break;",
          "982:             s->select_tag |= lsi_get_msgbyte(s) | LSI_TAG_VALID;",
          "984:             break;",
          "987:             s->select_tag |= lsi_get_msgbyte(s) | LSI_TAG_VALID;",
          "988:             break;",
          "991:             s->select_tag |= lsi_get_msgbyte(s) | LSI_TAG_VALID;",
          "992:             break;",
          "993:         case 0x0d:",
          "996:             if (current_req) {",
          "997:                 scsi_req_cancel(current_req->req);",
          "998:             }",
          "",
          "[Removed Lines]",
          "983:             DPRINTF(\"SIMPLE queue tag=0x%x\\n\", s->select_tag & 0xff);",
          "986:             BADF(\"HEAD queue not implemented\\n\");",
          "990:             BADF(\"ORDERED queue not implemented\\n\");",
          "995:             DPRINTF(\"MSG: ABORT TAG tag=0x%x\\n\", current_tag);",
          "",
          "[Added Lines]",
          "968:             trace_lsi_do_msgout_simplequeue(s->select_tag & 0xff);",
          "971:             qemu_log_mask(LOG_UNIMP, \"lsi_scsi: HEAD queue not implemented\\n\");",
          "975:             qemu_log_mask(LOG_UNIMP,",
          "976:                           \"lsi_scsi: ORDERED queue not implemented\\n\");",
          "981:             trace_lsi_do_msgout_abort(current_tag);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1006:             if (msg == 0x06) {",
          "1008:             }",
          "1011:             if (msg == 0x0e) {",
          "1013:             }",
          "1016:             if (msg == 0x0c) {",
          "1018:             }",
          "",
          "[Removed Lines]",
          "1007:                 DPRINTF(\"MSG: ABORT tag=0x%x\\n\", current_tag);",
          "1012:                 DPRINTF(\"MSG: CLEAR QUEUE tag=0x%x\\n\", current_tag);",
          "1017:                 DPRINTF(\"MSG: BUS DEVICE RESET tag=0x%x\\n\", current_tag);",
          "",
          "[Added Lines]",
          "993:                 trace_lsi_do_msgout_abort(current_tag);",
          "998:                 trace_lsi_do_msgout_clearqueue(current_tag);",
          "1003:                 trace_lsi_do_msgout_busdevicereset(current_tag);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1042:                 goto bad;",
          "1043:             }",
          "1044:             s->current_lun = msg & 7;",
          "1046:             lsi_set_phase(s, PHASE_CMD);",
          "1047:             break;",
          "1048:         }",
          "1049:     }",
          "1050:     return;",
          "1051: bad:",
          "1053:     lsi_set_phase(s, PHASE_MI);",
          "1055:     s->msg_action = 0;",
          "",
          "[Removed Lines]",
          "1045:             DPRINTF(\"Select LUN %d\\n\", s->current_lun);",
          "1052:     BADF(\"Unimplemented message 0x%02x\\n\", msg);",
          "",
          "[Added Lines]",
          "1031:             trace_lsi_do_msgout_select(s->current_lun);",
          "1038:     qemu_log_mask(LOG_UNIMP, \"Unimplemented message 0x%02x\\n\", msg);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1061:     int n;",
          "1062:     uint8_t buf[LSI_BUF_SIZE];",
          "1065:     while (count) {",
          "1066:         n = (count > LSI_BUF_SIZE) ? LSI_BUF_SIZE : count;",
          "1067:         lsi_mem_read(s, src, buf, n);",
          "",
          "[Removed Lines]",
          "1064:     DPRINTF(\"memcpy dest 0x%08x src 0x%08x count %d\\n\", dest, src, count);",
          "",
          "[Added Lines]",
          "1050:     trace_lsi_memcpy(dest, src, count);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1076: {",
          "1077:     lsi_request *p;",
          "1081:     QTAILQ_FOREACH(p, &s->queue, next) {",
          "1082:         if (p->pending) {",
          "",
          "[Removed Lines]",
          "1079:     DPRINTF(\"Wait Reselect\\n\");",
          "",
          "[Added Lines]",
          "1065:     trace_lsi_wait_reselect();",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1109:     }",
          "1110:     addr = read_dword(s, s->dsp + 4);",
          "1111:     addr_high = 0;",
          "1113:     s->dsps = addr;",
          "1114:     s->dcmd = insn >> 24;",
          "1115:     s->dsp += 8;",
          "1116:     switch (insn >> 30) {",
          "1118:         if (s->sist1 & LSI_SIST1_STO) {",
          "1120:             lsi_stop_script(s);",
          "1121:             break;",
          "1122:         }",
          "",
          "[Removed Lines]",
          "1112:     DPRINTF(\"SCRIPTS dsp=%08x opcode %08x arg %08x\\n\", s->dsp, insn, addr);",
          "1119:             DPRINTF(\"Delayed select timeout\\n\");",
          "",
          "[Added Lines]",
          "1098:     trace_lsi_execute_script(s->dsp, insn, addr);",
          "1105:             trace_lsi_execute_script_blockmove_delayed();",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1171:                     addr_high = s->dbms;",
          "1172:                     break;",
          "1173:                 default:",
          "1176:                     break;",
          "1177:                 }",
          "1178:             }",
          "",
          "[Removed Lines]",
          "1174:                     BADF(\"Illegal selector specified (0x%x > 0x15)\"",
          "1175:                          \" for 64-bit DMA block move\", selector);",
          "",
          "[Added Lines]",
          "1160:                     qemu_log_mask(LOG_GUEST_ERROR,",
          "1161:                           \"lsi_scsi: Illegal selector specified (0x%x > 0x15) \"",
          "1162:                           \"for 64-bit DMA block move\", selector);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1184:             s->ia = s->dsp - 12;",
          "1185:         }",
          "1186:         if ((s->sstat1 & PHASE_MASK) != ((insn >> 24) & 7)) {",
          "1189:             lsi_script_scsi_interrupt(s, LSI_SIST0_MA, 0);",
          "1190:             break;",
          "1191:         }",
          "",
          "[Removed Lines]",
          "1187:             DPRINTF(\"Wrong phase got %d expected %d\\n\",",
          "1188:                     s->sstat1 & PHASE_MASK, (insn >> 24) & 7);",
          "",
          "[Added Lines]",
          "1174:             trace_lsi_execute_script_blockmove_badphase(s->sstat1 & PHASE_MASK,",
          "1175:                                                         (insn >> 24) & 7);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1217:             lsi_do_msgin(s);",
          "1218:             break;",
          "1219:         default:",
          "1222:         }",
          "1223:         s->dfifo = s->dbc & 0xff;",
          "1224:         s->ctest5 = (s->ctest5 & 0xfc) | ((s->dbc >> 8) & 3);",
          "",
          "[Removed Lines]",
          "1220:             BADF(\"Unimplemented phase %d\\n\", s->sstat1 & PHASE_MASK);",
          "1221:             exit(1);",
          "",
          "[Added Lines]",
          "1207:             qemu_log_mask(LOG_UNIMP, \"lsi_scsi: Unimplemented phase %d\\n\",",
          "1208:                           s->sstat1 & PHASE_MASK);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1247:                 s->sdid = id;",
          "1248:                 if (s->scntl1 & LSI_SCNTL1_CON) {",
          "1250:                     s->dsp = s->dnad;",
          "1251:                     break;",
          "1252:                 }",
          "",
          "[Removed Lines]",
          "1249:                     DPRINTF(\"Already reselected, jumping to alternative address\\n\");",
          "",
          "[Added Lines]",
          "1236:                     trace_lsi_execute_script_io_alreadyreselected();",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1256:                     lsi_bad_selection(s, id);",
          "1257:                     break;",
          "1258:                 }",
          "1262:                    it only applies in low-level mode (unimplemented).",
          "",
          "[Removed Lines]",
          "1259:                 DPRINTF(\"Selected target %d%s\\n\",",
          "1260:                         id, insn & (1 << 3) ? \" ATN\" : \"\");",
          "",
          "[Added Lines]",
          "1246:                 trace_lsi_execute_script_io_selected(id,",
          "1247:                                              insn & (1 << 3) ? \" ATN\" : \"\");",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1269:                 lsi_set_phase(s, PHASE_MO);",
          "1270:                 break;",
          "1273:                 s->scntl1 &= ~LSI_SCNTL1_CON;",
          "1274:                 break;",
          "",
          "[Removed Lines]",
          "1272:                 DPRINTF(\"Wait Disconnect\\n\");",
          "",
          "[Added Lines]",
          "1259:                 trace_lsi_execute_script_io_disconnect();",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1278:                 }",
          "1279:                 break;",
          "1282:                         insn & (1 << 3) ? \" ATN\" : \"\",",
          "1283:                         insn & (1 << 6) ? \" ACK\" : \"\",",
          "1284:                         insn & (1 << 9) ? \" TM\" : \"\",",
          "",
          "[Removed Lines]",
          "1281:                 DPRINTF(\"Set%s%s%s%s\\n\",",
          "",
          "[Added Lines]",
          "1268:                 trace_lsi_execute_script_io_set(",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1288:                     lsi_set_phase(s, PHASE_MO);",
          "1289:                 }",
          "1290:                 if (insn & (1 << 9)) {",
          "1293:                 }",
          "1294:                 if (insn & (1 << 10))",
          "1295:                     s->carry = 1;",
          "1296:                 break;",
          "1299:                         insn & (1 << 3) ? \" ATN\" : \"\",",
          "1300:                         insn & (1 << 6) ? \" ACK\" : \"\",",
          "1301:                         insn & (1 << 9) ? \" TM\" : \"\",",
          "",
          "[Removed Lines]",
          "1291:                     BADF(\"Target mode not implemented\\n\");",
          "1292:                     exit(1);",
          "1298:                 DPRINTF(\"Clear%s%s%s%s\\n\",",
          "",
          "[Added Lines]",
          "1278:                     qemu_log_mask(LOG_UNIMP,",
          "1279:                         \"lsi_scsi: Target mode not implemented\\n\");",
          "1285:                 trace_lsi_execute_script_io_clear(",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1313:             uint8_t data8;",
          "1314:             int reg;",
          "1315:             int operator;",
          "1317:             static const char *opcode_names[3] =",
          "1318:                 {\"Write\", \"Read\", \"Read-Modify-Write\"};",
          "1319:             static const char *operator_names[8] =",
          "1320:                 {\"MOV\", \"SHL\", \"OR\", \"XOR\", \"AND\", \"SHR\", \"ADD\", \"ADC\"};",
          "1323:             reg = ((insn >> 16) & 0x7f) | (insn & 0x80);",
          "1324:             data8 = (insn >> 8) & 0xff;",
          "1325:             opcode = (insn >> 27) & 7;",
          "1326:             operator = (insn >> 24) & 7;",
          "1328:                     opcode_names[opcode - 5], reg,",
          "1329:                     operator_names[operator], data8, s->sfbr,",
          "1330:                     (insn & (1 << 23)) ? \" SFBR\" : \"\");",
          "",
          "[Removed Lines]",
          "1316: #ifdef DEBUG_LSI",
          "1321: #endif",
          "1327:             DPRINTF(\"%s reg 0x%x %s data8=0x%02x sfbr=0x%02x%s\\n\",",
          "",
          "[Added Lines]",
          "1313:             trace_lsi_execute_script_io_opcode(",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1404:             int jmp;",
          "1406:             if ((insn & 0x002e0000) == 0) {",
          "1408:                 break;",
          "1409:             }",
          "1410:             if (s->sist1 & LSI_SIST1_STO) {",
          "1412:                 lsi_stop_script(s);",
          "1413:                 break;",
          "1414:             }",
          "1415:             cond = jmp = (insn & (1 << 19)) != 0;",
          "1416:             if (cond == jmp && (insn & (1 << 21))) {",
          "1418:                 cond = s->carry != 0;",
          "1419:             }",
          "1420:             if (cond == jmp && (insn & (1 << 17))) {",
          "1422:                         (s->sstat1 & PHASE_MASK),",
          "1423:                         jmp ? '=' : '!',",
          "1424:                         ((insn >> 24) & 7));",
          "",
          "[Removed Lines]",
          "1407:                 DPRINTF(\"NOP\\n\");",
          "1411:                 DPRINTF(\"Delayed select timeout\\n\");",
          "1417:                 DPRINTF(\"Compare carry %d\\n\", s->carry == jmp);",
          "1421:                 DPRINTF(\"Compare phase %d %c= %d\\n\",",
          "",
          "[Added Lines]",
          "1393:                 trace_lsi_execute_script_tc_nop();",
          "1397:                 trace_lsi_execute_script_tc_delayedselect_timeout();",
          "1403:                 trace_lsi_execute_script_tc_compc(s->carry == jmp);",
          "1407:                 trace_lsi_execute_script_tc_compp(",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1428:                 uint8_t mask;",
          "1430:                 mask = (~insn >> 8) & 0xff;",
          "1432:                         s->sfbr, mask, jmp ? '=' : '!', insn & mask);",
          "1433:                 cond = (s->sfbr & mask) == (insn & mask);",
          "1434:             }",
          "",
          "[Removed Lines]",
          "1431:                 DPRINTF(\"Compare data 0x%x & 0x%x %c= 0x%x\\n\",",
          "",
          "[Added Lines]",
          "1417:                 trace_lsi_execute_script_tc_compd(",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1439:                 }",
          "1440:                 switch ((insn >> 27) & 7) {",
          "1443:                     s->adder = addr;",
          "1444:                     s->dsp = addr;",
          "1445:                     break;",
          "1448:                     s->temp = s->dsp;",
          "1449:                     s->dsp = addr;",
          "1450:                     break;",
          "1453:                     s->dsp = s->temp;",
          "1454:                     break;",
          "1457:                     if ((insn & (1 << 20)) != 0) {",
          "1458:                         s->istat0 |= LSI_ISTAT0_INTF;",
          "1459:                         lsi_update_irq(s);",
          "",
          "[Removed Lines]",
          "1442:                     DPRINTF(\"Jump to 0x%08x\\n\", addr);",
          "1447:                     DPRINTF(\"Call 0x%08x\\n\", addr);",
          "1452:                     DPRINTF(\"Return to 0x%08x\\n\", s->temp);",
          "1456:                     DPRINTF(\"Interrupt 0x%08x\\n\", s->dsps);",
          "",
          "[Added Lines]",
          "1428:                     trace_lsi_execute_script_tc_jump(addr);",
          "1433:                     trace_lsi_execute_script_tc_call(addr);",
          "1438:                     trace_lsi_execute_script_tc_return(s->temp);",
          "1442:                     trace_lsi_execute_script_tc_interrupt(s->dsps);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1462:                     }",
          "1463:                     break;",
          "1464:                 default:",
          "1466:                     lsi_script_dma_interrupt(s, LSI_DSTAT_IID);",
          "1467:                     break;",
          "1468:                 }",
          "1469:             } else {",
          "1471:             }",
          "1472:         }",
          "1473:         break;",
          "",
          "[Removed Lines]",
          "1465:                     DPRINTF(\"Illegal transfer control\\n\");",
          "1470:                 DPRINTF(\"Control condition failed\\n\");",
          "",
          "[Added Lines]",
          "1451:                     trace_lsi_execute_script_tc_illegal();",
          "1456:                 trace_lsi_execute_script_tc_cc_failed();",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1495:             reg = (insn >> 16) & 0xff;",
          "1496:             if (insn & (1 << 24)) {",
          "1497:                 pci_dma_read(pci_dev, addr, data, n);",
          "1500:                 for (i = 0; i < n; i++) {",
          "1501:                     lsi_reg_writeb(s, reg + i, data[i]);",
          "1502:                 }",
          "1503:             } else {",
          "1505:                 for (i = 0; i < n; i++) {",
          "1506:                     data[i] = lsi_reg_readb(s, reg + i);",
          "1507:                 }",
          "",
          "[Removed Lines]",
          "1498:                 DPRINTF(\"Load reg 0x%x size %d addr 0x%08x = %08x\\n\", reg, n,",
          "1499:                         addr, *(int *)data);",
          "1504:                 DPRINTF(\"Store reg 0x%x size %d addr 0x%08x\\n\", reg, n, addr);",
          "",
          "[Added Lines]",
          "1484:                 trace_lsi_execute_script_mm_load(reg, n, addr, *(int *)data);",
          "1489:                 trace_lsi_execute_script_mm_store(reg, n, addr);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1515:            assume this is the case and force an unexpected device disconnect.",
          "1516:            This is apparently sufficient to beat the drivers into submission.",
          "1520:         lsi_script_scsi_interrupt(s, LSI_SIST0_UDC, 0);",
          "1521:         lsi_disconnect(s);",
          "1522:     } else if (s->istat1 & LSI_ISTAT1_SRUN && !s->waiting) {",
          "",
          "[Removed Lines]",
          "1518:         if (!(s->sien0 & LSI_SIST0_UDC))",
          "1519:             fprintf(stderr, \"inf. loop with UDC masked\\n\");",
          "",
          "[Added Lines]",
          "1503:         if (!(s->sien0 & LSI_SIST0_UDC)) {",
          "1504:             qemu_log_mask(LOG_GUEST_ERROR,",
          "1505:                           \"lsi_scsi: inf. loop with UDC masked\");",
          "1506:         }",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1526:             goto again;",
          "1527:         }",
          "1528:     }",
          "1530: }",
          "1532: static uint8_t lsi_reg_readb(LSIState *s, int offset)",
          "",
          "[Removed Lines]",
          "1529:     DPRINTF(\"SCRIPTS execution stopped\\n\");",
          "",
          "[Added Lines]",
          "1516:     trace_lsi_execute_script_stop();",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1761: #undef CASE_GET_REG24",
          "1762: #undef CASE_GET_REG32",
          "1769:     return ret;",
          "1770: }",
          "",
          "[Removed Lines]",
          "1764: #ifdef DEBUG_LSI_REG",
          "1765:     DPRINTF(\"Read reg %s %x = %02x\\n\",",
          "1766:             offset < ARRAY_SIZE(names) ? names[offset] : \"???\", offset, ret);",
          "1767: #endif",
          "",
          "[Added Lines]",
          "1751:     trace_lsi_reg_read(offset < ARRAY_SIZE(names) ? names[offset] : \"???\",",
          "1752:                        offset, ret);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1782:     case addr + 2: s->name &= 0xff00ffff; s->name |= val << 16; break; \\",
          "1783:     case addr + 3: s->name &= 0x00ffffff; s->name |= val << 24; break;",
          "1789:     switch (offset) {",
          "1791:         s->scntl0 = val;",
          "1792:         if (val & LSI_SCNTL0_START) {",
          "1794:         }",
          "1795:         break;",
          "1797:         s->scntl1 = val & ~LSI_SCNTL1_SST;",
          "1798:         if (val & LSI_SCNTL1_IARB) {",
          "1800:         }",
          "1801:         if (val & LSI_SCNTL1_RST) {",
          "1802:             if (!(s->sstat0 & LSI_SSTAT0_RST)) {",
          "",
          "[Removed Lines]",
          "1785: #ifdef DEBUG_LSI_REG",
          "1786:     DPRINTF(\"Write reg %s %x = %02x\\n\",",
          "1787:             offset < ARRAY_SIZE(names) ? names[offset] : \"???\", offset, val);",
          "1788: #endif",
          "1793:             BADF(\"Start sequence not implemented\\n\");",
          "1799:             BADF(\"Immediate Arbritration not implemented\\n\");",
          "",
          "[Added Lines]",
          "1770:     trace_lsi_reg_write(offset < ARRAY_SIZE(names) ? names[offset] : \"???\",",
          "1771:                         offset, val);",
          "1777:             qemu_log_mask(LOG_UNIMP,",
          "1778:                           \"lsi_scsi: Start sequence not implemented\\n\");",
          "1784:             qemu_log_mask(LOG_UNIMP,",
          "1785:                       \"lsi_scsi: Immediate Arbritration not implemented\\n\");",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1823:         break;",
          "1825:         if ((s->ssid & 0x80) && (val & 0xf) != (s->ssid & 0xf)) {",
          "1827:         }",
          "1828:         s->sdid = val & 0xf;",
          "1829:         break;",
          "",
          "[Removed Lines]",
          "1826:             BADF(\"Destination ID does not match SSID\\n\");",
          "",
          "[Added Lines]",
          "1812:             qemu_log_mask(LOG_GUEST_ERROR,",
          "1813:                           \"lsi_scsi: Destination ID does not match SSID\\n\");",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1851:             lsi_update_irq(s);",
          "1852:         }",
          "1853:         if (s->waiting == 1 && val & LSI_ISTAT0_SIGP) {",
          "1855:             s->waiting = 0;",
          "1856:             s->dsp = s->dnad;",
          "1857:             lsi_execute_script(s);",
          "",
          "[Removed Lines]",
          "1854:             DPRINTF(\"Woken by SIGP\\n\");",
          "",
          "[Added Lines]",
          "1841:             trace_lsi_awoken();",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1878:     CASE_SET_REG32(temp, 0x1c)",
          "1880:         if (val & 7) {",
          "1882:         }",
          "1883:         s->ctest4 = val;",
          "1884:         break;",
          "1886:         if (val & (LSI_CTEST5_ADCK | LSI_CTEST5_BBCK)) {",
          "1888:         }",
          "1889:         s->ctest5 = val;",
          "1890:         break;",
          "",
          "[Removed Lines]",
          "1881:            BADF(\"Unimplemented CTEST4-FBL 0x%x\\n\", val);",
          "1887:             BADF(\"CTEST5 DMA increment not implemented\\n\");",
          "",
          "[Added Lines]",
          "1868:             qemu_log_mask(LOG_UNIMP,",
          "1869:                           \"lsi_scsi: Unimplemented CTEST4-FBL 0x%x\\n\", val);",
          "1875:             qemu_log_mask(LOG_UNIMP,",
          "1876:                           \"lsi_scsi: CTEST5 DMA increment not implemented\\n\");",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1941:         break;",
          "1943:         if (val & 0xf) {",
          "1947:             lsi_script_scsi_interrupt(s, 0, LSI_SIST1_GEN);",
          "",
          "[Removed Lines]",
          "1944:             DPRINTF(\"General purpose timer not implemented\\n\");",
          "",
          "[Added Lines]",
          "1933:             qemu_log_mask(LOG_UNIMP,",
          "1934:                           \"lsi_scsi: General purpose timer not implemented\\n\");",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1958:         break;",
          "1960:         if (val & 1) {",
          "1962:         }",
          "1963:         s->stest2 = val;",
          "1964:         break;",
          "1966:         if (val & 0x41) {",
          "1968:         }",
          "1969:         s->stest3 = val;",
          "1970:         break;",
          "",
          "[Removed Lines]",
          "1961:             BADF(\"Low level mode not implemented\\n\");",
          "1967:             BADF(\"SCSI FIFO test mode not implemented\\n\");",
          "",
          "[Added Lines]",
          "1951:             qemu_log_mask(LOG_UNIMP,",
          "1952:                           \"lsi_scsi: Low level mode not implemented\\n\");",
          "1958:             qemu_log_mask(LOG_UNIMP,",
          "1959:                           \"lsi_scsi: SCSI FIFO test mode not implemented\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}