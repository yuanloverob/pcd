{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1ea0443c2ddb712d15c5ca7b505da947482af280",
      "candidate_info": {
        "commit_hash": "1ea0443c2ddb712d15c5ca7b505da947482af280",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1ea0443c2ddb712d15c5ca7b505da947482af280",
        "files": [
          "ext/fts3/fts3_write.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_storage.c",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/prepare.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/trigger.c",
          "test/fts3aa.test"
        ],
        "message": "Add new sqlite3_prepare_v3() flag SQLITE_PREPARE_NO_VTAB, for preparing statements that are not allowed to use any virtual tables. Use this to prevent circular references in triggers on virtual table shadow tables from causing resource leaks.\n\nFossilOrigin-Name: 25666e3d03950caf753295cdb55df162e07dbcf6840b05875c6e0b127c469ecb",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/prepare.c||src/prepare.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "test/fts3aa.test||test/fts3aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:   pStmt = p->aStmt[eStmt];",
          "398:   if( !pStmt ){",
          "399:     char *zSql;",
          "400:     if( eStmt==SQL_CONTENT_INSERT ){",
          "401:       zSql = sqlite3_mprintf(azSql[eStmt], p->zDb, p->zName, p->zWriteExprlist);",
          "402:     }else if( eStmt==SQL_SELECT_CONTENT_BY_ROWID ){",
          "403:       zSql = sqlite3_mprintf(azSql[eStmt], p->zReadExprlist);",
          "404:     }else{",
          "405:       zSql = sqlite3_mprintf(azSql[eStmt], p->zDb, p->zName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:     int f = SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB;",
          "404:       f &= ~SQLITE_PREPARE_NO_VTAB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:     if( !zSql ){",
          "408:       rc = SQLITE_NOMEM;",
          "409:     }else{",
          "412:       sqlite3_free(zSql);",
          "413:       assert( rc==SQLITE_OK || pStmt==0 );",
          "414:       p->aStmt[eStmt] = pStmt;",
          "",
          "[Removed Lines]",
          "410:       rc = sqlite3_prepare_v3(p->db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "411:                               &pStmt, NULL);",
          "",
          "[Added Lines]",
          "412:       rc = sqlite3_prepare_v3(p->db, zSql, -1, f, &pStmt, NULL);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "729:   if( p->rc==SQLITE_OK ){",
          "730:     if( zSql ){",
          "731:       p->rc = sqlite3_prepare_v3(p->pConfig->db, zSql, -1,",
          "733:     }else{",
          "734:       p->rc = SQLITE_NOMEM;",
          "735:     }",
          "",
          "[Removed Lines]",
          "732:                                  SQLITE_PREPARE_PERSISTENT, ppStmt, 0);",
          "",
          "[Added Lines]",
          "732:           SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB,",
          "733:           ppStmt, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "770:   if( p->rc!=SQLITE_OK ) return;",
          "772:   if( p->pDeleter==0 ){",
          "774:     Fts5Config *pConfig = p->pConfig;",
          "775:     char *zSql = sqlite3_mprintf(",
          "776:         \"DELETE FROM '%q'.'%q_data' WHERE id>=? AND id<=?\",",
          "777:           pConfig->zDb, pConfig->zName",
          "778:     );",
          "790:   }",
          "792:   sqlite3_bind_int64(p->pDeleter, 1, iFirst);",
          "",
          "[Removed Lines]",
          "773:     int rc;",
          "779:     if( zSql==0 ){",
          "780:       rc = SQLITE_NOMEM;",
          "781:     }else{",
          "782:       rc = sqlite3_prepare_v3(pConfig->db, zSql, -1,",
          "783:                               SQLITE_PREPARE_PERSISTENT, &p->pDeleter, 0);",
          "784:       sqlite3_free(zSql);",
          "785:     }",
          "786:     if( rc!=SQLITE_OK ){",
          "787:       p->rc = rc;",
          "788:       return;",
          "789:     }",
          "",
          "[Added Lines]",
          "779:     if( fts5IndexPrepareStmt(p, &p->pDeleter, zSql) ) return;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:     if( zSql==0 ){",
          "137:       rc = SQLITE_NOMEM;",
          "138:     }else{",
          "141:       sqlite3_free(zSql);",
          "142:       if( rc!=SQLITE_OK && pzErrMsg ){",
          "",
          "[Removed Lines]",
          "139:       rc = sqlite3_prepare_v3(pC->db, zSql, -1,",
          "140:                               SQLITE_PREPARE_PERSISTENT, &p->aStmt[eStmt], 0);",
          "",
          "[Added Lines]",
          "139:       int f = SQLITE_PREPARE_PERSISTENT;",
          "140:       if( eStmt>FTS5_STMT_LOOKUP ) f |= SQLITE_PREPARE_NO_VTAB;",
          "141:       rc = sqlite3_prepare_v3(pC->db, zSql, -1, f, &p->aStmt[eStmt], 0);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1abb83d29a06308c96bea379311b390240347c5f81824749348d18ad75840c96",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:   p = sqlite3FindTable(db, zName, zDbase);",
          "356:   if( p==0 ){",
          "358: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "368:     }",
          "369: #endif",
          "377:     }",
          "378:   }",
          "",
          "[Removed Lines]",
          "357:     const char *zMsg = flags & LOCATE_VIEW ? \"no such view\" : \"no such table\";",
          "362:     Module *pMod = (Module*)sqlite3HashFind(&db->aModule, zName);",
          "363:     if( pMod==0 && sqlite3_strnicmp(zName, \"pragma_\", 7)==0 ){",
          "364:       pMod = sqlite3PragmaVtabRegister(db, zName);",
          "365:     }",
          "366:     if( pMod && sqlite3VtabEponymousTableInit(pParse, pMod) ){",
          "367:       return pMod->pEpoTab;",
          "370:     if( (flags & LOCATE_NOERR)==0 ){",
          "371:       if( zDbase ){",
          "372:         sqlite3ErrorMsg(pParse, \"%s: %s.%s\", zMsg, zDbase, zName);",
          "373:       }else{",
          "374:         sqlite3ErrorMsg(pParse, \"%s: %s\", zMsg, zName);",
          "375:       }",
          "376:       pParse->checkSchema = 1;",
          "",
          "[Added Lines]",
          "361:     if( pParse->disableVtab==0 ){",
          "362:       Module *pMod = (Module*)sqlite3HashFind(&db->aModule, zName);",
          "363:       if( pMod==0 && sqlite3_strnicmp(zName, \"pragma_\", 7)==0 ){",
          "364:         pMod = sqlite3PragmaVtabRegister(db, zName);",
          "365:       }",
          "366:       if( pMod && sqlite3VtabEponymousTableInit(pParse, pMod) ){",
          "367:         return pMod->pEpoTab;",
          "368:       }",
          "371:     if( flags & LOCATE_NOERR ) return 0;",
          "372:     pParse->checkSchema = 1;",
          "373:   }else if( IsVirtual(p) && pParse->disableVtab ){",
          "374:     p = 0;",
          "375:   }",
          "377:   if( p==0 ){",
          "378:     const char *zMsg = flags & LOCATE_VIEW ? \"no such view\" : \"no such table\";",
          "379:     if( zDbase ){",
          "380:       sqlite3ErrorMsg(pParse, \"%s: %s.%s\", zMsg, zDbase, zName);",
          "381:     }else{",
          "382:       sqlite3ErrorMsg(pParse, \"%s: %s\", zMsg, zName);",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:     sParse.disableLookaside++;",
          "546:     db->lookaside.bDisable++;",
          "547:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:   sParse.disableVtab = (prepFlags & SQLITE_PREPARE_NO_VTAB)!=0;",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3641: #define SQLITE_PREPARE_PERSISTENT              0x01",
          "3642: #define SQLITE_PREPARE_NORMALIZE               0x02",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3648: #define SQLITE_PREPARE_NO_VTAB                 0x04",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "916:   pSubParse->zAuthContext = pTrigger->zName;",
          "917:   pSubParse->eTriggerOp = pTrigger->op;",
          "918:   pSubParse->nQueryLoop = pParse->nQueryLoop;",
          "920:   v = sqlite3GetVdbe(pSubParse);",
          "921:   if( v ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "919:   pSubParse->disableVtab = pParse->disableVtab;",
          "",
          "---------------"
        ],
        "test/fts3aa.test||test/fts3aa.test": [
          "File: test/fts3aa.test -> test/fts3aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:   CREATE VIRTUAL TABLE t10 USING fts3(<, b, c);",
          "251: }",
          "253: expand_all_sql db",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: do_execsql_test 10.0 {",
          "254:   CREATE VIRTUAL TABLE z1 USING fts3;",
          "255:   INSERT INTO z1 VALUES('one two three'),('four one five'),('six two five');",
          "256:   CREATE TRIGGER z1r1 AFTER DELETE ON z1_content BEGIN",
          "257:     DELETE FROM z1;",
          "258:   END;",
          "259: }",
          "260: do_catchsql_test 10.1 {",
          "261:   DELETE FROM z1;",
          "262: } {1 {SQL logic error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92107a38dccca75441fb080875e24822ec7a7695",
      "candidate_info": {
        "commit_hash": "92107a38dccca75441fb080875e24822ec7a7695",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/92107a38dccca75441fb080875e24822ec7a7695",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test",
          "test/walfault2.test",
          "test/walvfs.test"
        ],
        "message": "Add a few more test cases to walfault2.test and walvfs.test.\n\nFossilOrigin-Name: 3873941c4fb9aa2d0de1129722c5fcdf2be1ea261677d4841ed99f896c778459",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test",
          "test/walfault2.test||test/walfault2.test",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d9653380c455b4bf6c371540d677cbde6d17664c58662b5cc9a12929f46192dd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "437:   walmode.test walnoshm.test waloverwrite.test walpersist.test",
          "438:   walprotocol2.test walprotocol.test walro2.test walrofault.test",
          "439:   walro.test walshared.test walslow.test walvfs.test",
          "441:   nockpt.test",
          "442: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440:   walfault2.test",
          "",
          "---------------"
        ],
        "test/walfault2.test||test/walfault2.test": [
          "File: test/walfault2.test -> test/walfault2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2010 May 03",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the operation of the library in",
          "13: # \"PRAGMA journal_mode=WAL\" mode.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: source $testdir/malloc_common.tcl",
          "19: source $testdir/lock_common.tcl",
          "21: ifcapable !wal {finish_test ; return }",
          "22: set testprefix walfault2",
          "24: #-------------------------------------------------------------------------",
          "25: # Inject faults while truncating the wal file.",
          "26: #",
          "27: do_execsql_test 1.0 {",
          "28:   PRAGMA auto_vacuum = 0;",
          "29:   CREATE TABLE t1(a, b);",
          "30:   PRAGMA journal_mode = wal;",
          "31:   WITH s(i) AS (",
          "32:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 30",
          "33:   )",
          "34:   INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM s;",
          "35: } {wal}",
          "36: faultsim_save_and_close",
          "38: do_faultsim_test 1 -prep {",
          "39:   faultsim_restore",
          "40:   sqlite3 db file:test.db?psow=0 -uri 1",
          "41:   file_control_powersafe_overwrite db 0",
          "42:   execsql {",
          "43:     PRAGMA wal_checkpoint;",
          "44:     PRAGMA journal_size_limit = 10000;",
          "45:     PRAGMA synchronous = full;",
          "46:   }",
          "47: } -body {",
          "48:   execsql { INSERT INTO t1 VALUES(1,1) }",
          "49: } -test {",
          "50:   faultsim_test_result {0 {}}",
          "51: }",
          "53: #-------------------------------------------------------------------------",
          "54: # Inject faults while rewriting checksums.",
          "55: #",
          "56: reset_db",
          "57: do_execsql_test 2.0 {",
          "58:   PRAGMA auto_vacuum = 0;",
          "59:   CREATE TABLE t1(a, b);",
          "60:   PRAGMA journal_mode = wal;",
          "61:   WITH s(i) AS (",
          "62:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 30",
          "63:   )",
          "64:   INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM s;",
          "65: } {wal}",
          "66: faultsim_save_and_close",
          "68: do_faultsim_test 2 -prep {",
          "69:   faultsim_restore_and_reopen",
          "70:   execsql {",
          "71:     PRAGMA cache_size = 2;",
          "72:     BEGIN;",
          "73:     UPDATE t1 SET a=randomblob(400);",
          "74:     UPDATE t1 SET b=randomblob(400);",
          "75:     UPDATE t1 SET a=randomblob(400);",
          "76:     UPDATE t1 SET b=randomblob(400);",
          "77:     UPDATE t1 SET a=randomblob(400);",
          "78:     UPDATE t1 SET b=randomblob(400);",
          "79:     UPDATE t1 SET a=randomblob(400);",
          "80:     UPDATE t1 SET b=randomblob(400);",
          "81:   }",
          "82: } -body {",
          "83:   execsql COMMIT",
          "84: } -test {",
          "85:   faultsim_test_result {0 {}}",
          "86: }",
          "90: finish_test",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: #-------------------------------------------------------------------------",
          "239: # Cause an SQLITE_PROTOCOL while attempting to restart the wal file.",
          "240: reset_db",
          "241: tvfs filter {}",
          "242: db close",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:   INSERT INTO t1 VALUES(1);",
          "275: } {1 {locking protocol}}",
          "277: db close",
          "278: tvfs delete",
          "279: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278: #-------------------------------------------------------------------------",
          "279: # Check that a checkpoint fails if it cannot get the CHECKPOINTER lock",
          "280: #",
          "281: reset_db",
          "282: tvfs filter {}",
          "283: db close",
          "284: sqlite3 db test.db -vfs tvfs",
          "285: do_execsql_test 7.0 {",
          "286:   PRAGMA auto_vacuum = 0;",
          "287:   PRAGMA page_size = 1024;",
          "288:   CREATE TABLE t1(x);",
          "289:   PRAGMA journal_mode = wal;",
          "290:   WITH s(i) AS (",
          "291:       SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "292:   )",
          "293:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "294: } {wal}",
          "296: tvfs script xShmLock",
          "297: tvfs filter xShmLock",
          "298: proc xShmLock {method file handle spec} {",
          "299:   if {$spec==\"1 1 lock exclusive\"} {",
          "300:     return SQLITE_BUSY",
          "301:   }",
          "302:   return SQLITE_OK",
          "303: }",
          "305: do_execsql_test 7.1 {",
          "306:   PRAGMA wal_checkpoint",
          "307: } {1 -1 -1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d12db3dabb11873ba51e3e090e818d645c6d33d8",
      "candidate_info": {
        "commit_hash": "d12db3dabb11873ba51e3e090e818d645c6d33d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d12db3dabb11873ba51e3e090e818d645c6d33d8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Avoid reading off the front of a page buffer when balancing a corrupt btree page.\n\nFossilOrigin-Name: cb50509020d952fa9efed8df7fa08b07b71ae9bdbdefea216b6e660863291039",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 824f93246988ffa213bbd41a7de08886999b1a8ae00fdf6b9767acb6e3ec6a1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6663:     assert( idx >= pPage->cellOffset+2*pPage->nCell+2 || CORRUPT_DB );",
          "6664:     assert( idx+sz <= (int)pPage->pBt->usableSize );",
          "6665:     pPage->nFree -= (u16)(2 + sz);",
          "6667:     if( iChild ){",
          "6668:       put4byte(&data[idx], iChild);",
          "6669:     }",
          "6670:     pIns = pPage->aCellIdx + i*2;",
          "6671:     memmove(pIns+2, pIns, 2*(pPage->nCell - i));",
          "",
          "[Removed Lines]",
          "6666:     memcpy(&data[idx], pCell, sz);",
          "",
          "[Added Lines]",
          "6672:       memcpy(&data[idx+4], pCell+4, sz-4);",
          "6674:     }else{",
          "6675:       memcpy(&data[idx], pCell, sz);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1231b4773deac1c7d5c44b9119ed053f96c69e90",
      "candidate_info": {
        "commit_hash": "1231b4773deac1c7d5c44b9119ed053f96c69e90",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1231b4773deac1c7d5c44b9119ed053f96c69e90",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Remove code from the constraint checker that generates virtual column values with the incorrect time.  Turns out the the regular code for all other columns works correctly and so the incorrect special-case code is not actually needed.  Fix for ticket [3ea175512444b0d1].\n\nFossilOrigin-Name: 5b4c0f2ddc6f324e23bbde0ee3d1ab672cfe8ab5044c9b693f4c33cdd75c211e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 713fe86b8c9f3c9ef8af952019e99ba2f4741326226264de6a66baaeb1803d2a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1862:         x = regNewData;",
          "1863:         sqlite3VdbeAddOp2(v, OP_IntCopy, x, regIdx+i);",
          "1864:         VdbeComment((v, \"rowid\"));",
          "1872:       }else{",
          "1873:         testcase( sqlite3TableColumnToStorage(pTab, iField)!=iField );",
          "1874:         x = sqlite3TableColumnToStorage(pTab, iField) + regNewData + 1;",
          "",
          "[Removed Lines]",
          "1865: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1866:       }else if( pTab->aCol[iField].colFlags & COLFLAG_VIRTUAL ){",
          "1867:         pParse->iSelfTab = -(regNewData+1);",
          "1868:         sqlite3ExprCodeCopy(pParse, pTab->aCol[iField].pDflt, regIdx+i);",
          "1869:         pParse->iSelfTab = 0;",
          "1870:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1871: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a1ce4369f95cb09960e664e80a551f1f968c5f8",
      "candidate_info": {
        "commit_hash": "5a1ce4369f95cb09960e664e80a551f1f968c5f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5a1ce4369f95cb09960e664e80a551f1f968c5f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/indexexpr2.test"
        ],
        "message": "Fix a problem with bytecode generation when a query involves two or more indexes on expressions connected by OR. Ticket [d96eba87698a428c1ddd0790ea04]\n\nFossilOrigin-Name: 7e4ed8b5c2047b69bbb037497111e56e465a4d9f8afca3b337f9ac744471dc4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc42dd15100db28a9796254f69a4e367ea5eae29f546be055017cf3e12aa66ba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:     for(j=0; j<2 && !okToChngToIN; j++){",
          "780:       pOrTerm = pOrWc->a;",
          "781:       for(i=pOrWc->nTerm-1; i>=0; i--, pOrTerm++){",
          "782:         assert( pOrTerm->eOperator & WO_EQ );",
          "783:         pOrTerm->wtFlags &= ~TERM_OR_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:       Expr *pLeft = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "800:         }",
          "801:         iColumn = pOrTerm->u.leftColumn;",
          "802:         iCursor = pOrTerm->leftCursor;",
          "803:         break;",
          "804:       }",
          "805:       if( i<0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804:         pLeft = pOrTerm->pExpr->pLeft;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:         assert( pOrTerm->eOperator & WO_EQ );",
          "820:         if( pOrTerm->leftCursor!=iCursor ){",
          "821:           pOrTerm->wtFlags &= ~TERM_OR_OK;",
          "823:           okToChngToIN = 0;",
          "824:         }else{",
          "825:           int affLeft, affRight;",
          "",
          "[Removed Lines]",
          "822:         }else if( pOrTerm->u.leftColumn!=iColumn ){",
          "",
          "[Added Lines]",
          "824:         }else if( pOrTerm->u.leftColumn!=iColumn || (iColumn==XN_EXPR",
          "825:                && sqlite3ExprCompare(pParse, pOrTerm->pExpr->pLeft, pLeft, -1)",
          "826:         )){",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:   } {t2 t2abc t2cd t2def}",
          "232: }",
          "235: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234: #-------------------------------------------------------------------------",
          "235: # Test that ticket [d96eba87] has been fixed.",
          "236: #",
          "237: do_execsql_test 5.0 {",
          "238:   CREATE TABLE t5(a INTEGER, b INTEGER);",
          "239:   INSERT INTO t5 VALUES(2, 4), (3, 9);",
          "240: }",
          "241: do_execsql_test 5.1 {",
          "242:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "243: } {2 4 3 9}",
          "244: do_execsql_test 5.2 {",
          "245:   CREATE INDEX t5a ON t5( abs(a) );",
          "246:   CREATE INDEX t5b ON t5( abs(b) );",
          "247: }",
          "248: do_execsql_test 5.4 {",
          "249:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "250: } {2 4 3 9}",
          "",
          "---------------"
        ]
      }
    }
  ]
}