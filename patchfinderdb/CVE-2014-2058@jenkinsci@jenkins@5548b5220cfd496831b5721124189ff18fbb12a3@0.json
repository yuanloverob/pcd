{
  "cve_id": "CVE-2014-2058",
  "cve_desc": "BuildTrigger in Jenkins before 1.551 and LTS before 1.532.2 allows remote authenticated users to bypass access restrictions and execute arbitrary jobs by configuring a job to trigger another job. NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-7330.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "5548b5220cfd496831b5721124189ff18fbb12a3",
  "patch_info": {
    "commit_hash": "5548b5220cfd496831b5721124189ff18fbb12a3",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/5548b5220cfd496831b5721124189ff18fbb12a3",
    "files": [
      "core/src/main/java/jenkins/security/ApiTokenFilter.java"
    ],
    "message": "[FIXED SECURITY-89] When checking an API token, verify that the user actually exists.",
    "before_after_code_files": [
      "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java": [
      "File: core/src/main/java/jenkins/security/ApiTokenFilter.java -> core/src/main/java/jenkins/security/ApiTokenFilter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import hudson.model.User;",
      "4: import hudson.security.ACL;",
      "5: import hudson.util.Scrambler;",
      "6: import org.acegisecurity.context.SecurityContext;",
      "7: import org.acegisecurity.context.SecurityContextHolder;",
      "9: import javax.servlet.Filter;",
      "10: import javax.servlet.FilterChain;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: import hudson.security.UserMayOrMayNotExistException;",
      "7: import jenkins.model.Jenkins;",
      "10: import org.acegisecurity.userdetails.UsernameNotFoundException;",
      "11: import org.springframework.dao.DataAccessException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41:             int idx = uidpassword.indexOf(':');",
      "42:             if (idx >= 0) {",
      "43:                 String username = uidpassword.substring(0, idx);",
      "44:                 String password = uidpassword.substring(idx+1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:                 try {",
      "49:                     Jenkins.getInstance().getSecurityRealm().loadUserByUsername(username);",
      "50:                 } catch (UserMayOrMayNotExistException x) {",
      "52:                 } catch (UsernameNotFoundException x) {",
      "54:                     chain.doFilter(request, response);",
      "55:                     return;",
      "56:                 } catch (DataAccessException x) {",
      "57:                     throw new ServletException(x);",
      "58:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bded790f4651459b2ac41d9f96f2393204b41012",
      "candidate_info": {
        "commit_hash": "bded790f4651459b2ac41d9f96f2393204b41012",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/bded790f4651459b2ac41d9f96f2393204b41012",
        "files": [
          "core/src/main/java/hudson/model/User.java",
          "core/src/main/java/jenkins/security/ApiTokenFilter.java"
        ],
        "message": "User.impersonate() now does the loadUserDetailsByName call.\n\nSo ApiTokenFilter no longer needs to do that.",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java",
          "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
          "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:         try {",
          "258:             UserDetails u = Jenkins.getInstance().getSecurityRealm().loadUserByUsername(id);",
          "259:             return new UsernamePasswordAuthenticationToken(u.getUsername(), \"\", u.getAuthorities());",
          "",
          "[Removed Lines]",
          "256:     public Authentication impersonate() {",
          "",
          "[Added Lines]",
          "263:     public Authentication impersonate() throws UsernameNotFoundException {",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java": [
          "File: core/src/main/java/jenkins/security/ApiTokenFilter.java -> core/src/main/java/jenkins/security/ApiTokenFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import hudson.model.User;",
          "4: import hudson.security.ACL;",
          "6: import hudson.util.Scrambler;",
          "8: import org.acegisecurity.context.SecurityContext;",
          "9: import org.acegisecurity.context.SecurityContextHolder;",
          "10: import org.acegisecurity.userdetails.UsernameNotFoundException;",
          "",
          "[Removed Lines]",
          "5: import hudson.security.UserMayOrMayNotExistException;",
          "7: import jenkins.model.Jenkins;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:             int idx = uidpassword.indexOf(':');",
          "46:             if (idx >= 0) {",
          "47:                 String username = uidpassword.substring(0, idx);",
          "59:                 String password = uidpassword.substring(idx+1);",
          "62:                 User u = User.get(username);",
          "63:                 ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
          "64:                 if (t!=null && t.matchesPassword(password)) {",
          "68:                     try {",
          "71:                         return;",
          "74:                     }",
          "75:                 }",
          "76:             }",
          "",
          "[Removed Lines]",
          "48:                 try {",
          "49:                     Jenkins.getInstance().getSecurityRealm().loadUserByUsername(username);",
          "50:                 } catch (UserMayOrMayNotExistException x) {",
          "52:                 } catch (UsernameNotFoundException x) {",
          "54:                     chain.doFilter(request, response);",
          "55:                     return;",
          "56:                 } catch (DataAccessException x) {",
          "57:                     throw new ServletException(x);",
          "58:                 }",
          "67:                     SecurityContext oldContext = ACL.impersonate(u.impersonate());",
          "69:                         request.setAttribute(ApiTokenProperty.class.getName(), u);",
          "70:                         chain.doFilter(request,response);",
          "72:                     } finally {",
          "73:                         SecurityContextHolder.setContext(oldContext);",
          "",
          "[Added Lines]",
          "55:                         SecurityContext oldContext = ACL.impersonate(u.impersonate());",
          "56:                         try {",
          "57:                             request.setAttribute(ApiTokenProperty.class.getName(), u);",
          "58:                             chain.doFilter(request,response);",
          "59:                             return;",
          "60:                         } finally {",
          "61:                             SecurityContextHolder.setContext(oldContext);",
          "62:                         }",
          "63:                     } catch (UsernameNotFoundException x) {",
          "65:                         chain.doFilter(request, response);",
          "67:                     } catch (DataAccessException x) {",
          "68:                         throw new ServletException(x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38ab6192a87c61f241de358eb19ac749b3f80811",
      "candidate_info": {
        "commit_hash": "38ab6192a87c61f241de358eb19ac749b3f80811",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/38ab6192a87c61f241de358eb19ac749b3f80811",
        "files": [
          "core/src/main/java/jenkins/security/ApiTokenFilter.java"
        ],
        "message": "[ZD-19640] diagnostic improvement in case impersonation failed.\n\nI think this is an oversight in bded790f4651459b2ac41d9f96f2393204b41012. A random attacker wouldn't know the correct API token value,\nso given that it matched, I think the caller should know that it was the impersonation that failed, not the authentication.\n\nAlso log this at a higher level, since this indicates a problem in SecurityRealm.",
        "before_after_code_files": [
          "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java": [
          "File: core/src/main/java/jenkins/security/ApiTokenFilter.java -> core/src/main/java/jenkins/security/ApiTokenFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import javax.servlet.http.HttpServletRequest;",
          "18: import javax.servlet.http.HttpServletResponse;",
          "19: import java.io.IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.util.logging.Level;",
          "21: import java.util.logging.Logger;",
          "23: import static java.util.logging.Level.WARNING;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:                             SecurityContextHolder.setContext(oldContext);",
          "62:                         }",
          "63:                     } catch (UsernameNotFoundException x) {",
          "67:                     } catch (DataAccessException x) {",
          "68:                         throw new ServletException(x);",
          "69:                     }",
          "",
          "[Removed Lines]",
          "65:                         chain.doFilter(request, response);",
          "66:                         return;",
          "",
          "[Added Lines]",
          "70:                         LOGGER.log(WARNING, \"API token matched for user \"+username+\" but the impersonation failed\",x);",
          "71:                         throw new ServletException(x);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:     public void destroy() {",
          "78:     }",
          "79: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     private static final Logger LOGGER = Logger.getLogger(ApiTokenFilter.class.getName());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2a98f6bc6924d1fd25f7da583888c2f4f36d83c",
      "candidate_info": {
        "commit_hash": "b2a98f6bc6924d1fd25f7da583888c2f4f36d83c",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/b2a98f6bc6924d1fd25f7da583888c2f4f36d83c",
        "files": [
          "core/src/main/java/jenkins/security/ApiTokenFilter.java",
          "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java",
          "core/src/main/java/jenkins/security/BasicHeaderAuthenticator.java",
          "core/src/main/java/jenkins/security/BasicHeaderProcessor.java",
          "core/src/main/java/jenkins/security/BasicHeaderRealPasswordAuthenticator.java",
          "test/pom.xml",
          "test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java",
          "war/src/main/webapp/WEB-INF/security/SecurityFilters.groovy"
        ],
        "message": "Create a single point in which the basic authentication header is processed.\n\nPreviously, basic auth header was processed from two different servlet\nfilters in a single filter chain.\n\nIn case the 1st filter (ApiTokenFilter) manages to authenticate the\nrequest, the 2nd filter (BasicProcessingFilter) tries to avoid\ninterpreting the API token as the password and failing authentication\n(see BasicProcessingFilter.authenticationIsRequired), but the check\nfeels rather fragile.\n\nAlthough I did eventually discover that the original problem (ZD-19640)\nwas not caused by this, I've already implemented & tested this change,\nand this feels like a good work to be wasted, so I'm pushing this in\nanyway.\n\nRefrence: ZD-19640",
        "before_after_code_files": [
          "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java",
          "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java",
          "core/src/main/java/jenkins/security/BasicHeaderAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderAuthenticator.java",
          "core/src/main/java/jenkins/security/BasicHeaderProcessor.java||core/src/main/java/jenkins/security/BasicHeaderProcessor.java",
          "core/src/main/java/jenkins/security/BasicHeaderRealPasswordAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderRealPasswordAuthenticator.java",
          "test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java||test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java",
          "war/src/main/webapp/WEB-INF/security/SecurityFilters.groovy||war/src/main/webapp/WEB-INF/security/SecurityFilters.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/security/ApiTokenFilter.java||core/src/main/java/jenkins/security/ApiTokenFilter.java": [
          "File: core/src/main/java/jenkins/security/ApiTokenFilter.java -> core/src/main/java/jenkins/security/ApiTokenFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package jenkins.security;",
          "11: import javax.servlet.Filter;",
          "",
          "[Removed Lines]",
          "3: import hudson.model.User;",
          "4: import hudson.security.ACL;",
          "5: import hudson.util.Scrambler;",
          "6: import org.acegisecurity.context.SecurityContext;",
          "7: import org.acegisecurity.context.SecurityContextHolder;",
          "8: import org.acegisecurity.userdetails.UsernameNotFoundException;",
          "9: import org.springframework.dao.DataAccessException;",
          "12: import javax.servlet.FilterChain;",
          "13: import javax.servlet.FilterConfig;",
          "14: import javax.servlet.ServletException;",
          "15: import javax.servlet.ServletRequest;",
          "16: import javax.servlet.ServletResponse;",
          "17: import javax.servlet.http.HttpServletRequest;",
          "18: import javax.servlet.http.HttpServletResponse;",
          "19: import java.io.IOException;",
          "20: import java.util.logging.Level;",
          "21: import java.util.logging.Logger;",
          "23: import static java.util.logging.Level.WARNING;",
          "",
          "[Added Lines]",
          "4: import java.util.Collections;",
          "5: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     }",
          "86: }",
          "",
          "[Removed Lines]",
          "35: public class ApiTokenFilter implements Filter {",
          "36:     public void init(FilterConfig filterConfig) throws ServletException {",
          "37:     }",
          "39:     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {",
          "40:         HttpServletRequest req = (HttpServletRequest) request;",
          "41:         HttpServletResponse rsp = (HttpServletResponse) response;",
          "42:         String authorization = req.getHeader(\"Authorization\");",
          "44:         if (authorization!=null) {",
          "46:             String uidpassword = Scrambler.descramble(authorization.substring(6));",
          "47:             int idx = uidpassword.indexOf(':');",
          "48:             if (idx >= 0) {",
          "49:                 String username = uidpassword.substring(0, idx);",
          "50:                 String password = uidpassword.substring(idx+1);",
          "53:                 User u = User.get(username);",
          "54:                 ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
          "55:                 if (t!=null && t.matchesPassword(password)) {",
          "56:                     try {",
          "59:                         SecurityContext oldContext = ACL.impersonate(u.impersonate());",
          "60:                         try {",
          "61:                             request.setAttribute(ApiTokenProperty.class.getName(), u);",
          "62:                             chain.doFilter(request,response);",
          "63:                             return;",
          "64:                         } finally {",
          "65:                             SecurityContextHolder.setContext(oldContext);",
          "66:                         }",
          "67:                     } catch (UsernameNotFoundException x) {",
          "70:                         LOGGER.log(WARNING, \"API token matched for user \"+username+\" but the impersonation failed\",x);",
          "71:                         throw new ServletException(x);",
          "72:                     } catch (DataAccessException x) {",
          "73:                         throw new ServletException(x);",
          "74:                     }",
          "75:                 }",
          "76:             }",
          "77:         }",
          "79:         chain.doFilter(request,response);",
          "82:     public void destroy() {",
          "83:     }",
          "85:     private static final Logger LOGGER = Logger.getLogger(ApiTokenFilter.class.getName());",
          "",
          "[Added Lines]",
          "19: public class ApiTokenFilter extends BasicHeaderProcessor {",
          "20:     @Override",
          "21:     protected List<? extends BasicHeaderAuthenticator> all() {",
          "22:         return Collections.singletonList(new BasicHeaderApiTokenAuthenticator());",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java": [
          "File: core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java -> core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package jenkins.security;",
          "3: import hudson.Extension;",
          "4: import hudson.model.User;",
          "5: import org.acegisecurity.Authentication;",
          "6: import org.acegisecurity.userdetails.UsernameNotFoundException;",
          "7: import org.springframework.dao.DataAccessException;",
          "9: import javax.servlet.ServletException;",
          "10: import javax.servlet.http.HttpServletRequest;",
          "11: import javax.servlet.http.HttpServletResponse;",
          "12: import java.util.logging.Logger;",
          "14: import static java.util.logging.Level.*;",
          "22: @Extension",
          "23: public class BasicHeaderApiTokenAuthenticator extends BasicHeaderAuthenticator {",
          "24:     @Override",
          "25:     public Authentication authenticate(HttpServletRequest req, HttpServletResponse rsp, String username, String password) throws ServletException {",
          "27:         User u = User.get(username);",
          "28:         ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
          "29:         if (t!=null && t.matchesPassword(password)) {",
          "30:             try {",
          "31:                 return u.impersonate();",
          "32:             } catch (UsernameNotFoundException x) {",
          "35:                 LOGGER.log(WARNING, \"API token matched for user \"+username+\" but the impersonation failed\",x);",
          "36:                 throw new ServletException(x);",
          "37:             } catch (DataAccessException x) {",
          "38:                 throw new ServletException(x);",
          "39:             }",
          "40:         }",
          "42:         return null;",
          "43:     }",
          "45:     private static final Logger LOGGER = Logger.getLogger(BasicHeaderApiTokenAuthenticator.class.getName());",
          "46: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/BasicHeaderAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderAuthenticator.java": [
          "File: core/src/main/java/jenkins/security/BasicHeaderAuthenticator.java -> core/src/main/java/jenkins/security/BasicHeaderAuthenticator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package jenkins.security;",
          "3: import hudson.ExtensionList;",
          "4: import hudson.ExtensionPoint;",
          "5: import jenkins.model.Jenkins;",
          "6: import org.acegisecurity.Authentication;",
          "8: import javax.servlet.ServletException;",
          "9: import javax.servlet.http.HttpServletRequest;",
          "10: import javax.servlet.http.HttpServletResponse;",
          "11: import java.io.IOException;",
          "21: public abstract class BasicHeaderAuthenticator implements ExtensionPoint {",
          "39:     public abstract Authentication authenticate(HttpServletRequest req, HttpServletResponse rsp, String username, String password) throws IOException, ServletException;",
          "41:     public static ExtensionList<BasicHeaderAuthenticator> all() {",
          "42:         return Jenkins.getInstance().getExtensionList(BasicHeaderAuthenticator.class);",
          "43:     }",
          "44: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/BasicHeaderProcessor.java||core/src/main/java/jenkins/security/BasicHeaderProcessor.java": [
          "File: core/src/main/java/jenkins/security/BasicHeaderProcessor.java -> core/src/main/java/jenkins/security/BasicHeaderProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package jenkins.security;",
          "3: import hudson.security.ACL;",
          "4: import hudson.util.Scrambler;",
          "5: import org.acegisecurity.Authentication;",
          "6: import org.acegisecurity.AuthenticationManager;",
          "7: import org.acegisecurity.BadCredentialsException;",
          "8: import org.acegisecurity.context.SecurityContext;",
          "9: import org.acegisecurity.context.SecurityContextHolder;",
          "10: import org.acegisecurity.ui.AuthenticationEntryPoint;",
          "11: import org.acegisecurity.ui.rememberme.NullRememberMeServices;",
          "12: import org.acegisecurity.ui.rememberme.RememberMeServices;",
          "14: import javax.servlet.Filter;",
          "15: import javax.servlet.FilterChain;",
          "16: import javax.servlet.FilterConfig;",
          "17: import javax.servlet.ServletException;",
          "18: import javax.servlet.ServletRequest;",
          "19: import javax.servlet.ServletResponse;",
          "20: import javax.servlet.http.HttpServletRequest;",
          "21: import javax.servlet.http.HttpServletResponse;",
          "22: import java.io.IOException;",
          "23: import java.util.List;",
          "24: import java.util.logging.Logger;",
          "26: import static java.util.logging.Level.*;",
          "41: public class BasicHeaderProcessor implements Filter {",
          "43:     private AuthenticationEntryPoint authenticationEntryPoint;",
          "44:     private RememberMeServices rememberMeServices = new NullRememberMeServices();",
          "46:     public void init(FilterConfig filterConfig) throws ServletException {",
          "47:     }",
          "49:     public void setAuthenticationEntryPoint(AuthenticationEntryPoint authenticationEntryPoint) {",
          "50:         this.authenticationEntryPoint = authenticationEntryPoint;",
          "51:     }",
          "53:     public void setRememberMeServices(RememberMeServices rememberMeServices) {",
          "54:         this.rememberMeServices = rememberMeServices;",
          "55:     }",
          "57:     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {",
          "58:         HttpServletRequest req = (HttpServletRequest) request;",
          "59:         HttpServletResponse rsp = (HttpServletResponse) response;",
          "60:         String authorization = req.getHeader(\"Authorization\");",
          "62:         if (authorization!=null && authorization.startsWith(\"Basic \")) {",
          "64:             String uidpassword = Scrambler.descramble(authorization.substring(6));",
          "65:             int idx = uidpassword.indexOf(':');",
          "66:             if (idx >= 0) {",
          "67:                 String username = uidpassword.substring(0, idx);",
          "68:                 String password = uidpassword.substring(idx+1);",
          "70:                 for (BasicHeaderAuthenticator a : all()) {",
          "71:                     LOGGER.log(FINER, \"Attempting to authenticate with {0}\", a);",
          "72:                     Authentication auth = a.authenticate(req, rsp, username, password);",
          "73:                     if (auth!=null) {",
          "74:                         LOGGER.log(FINE, \"Request authenticated as {0} by {1}\", new Object[]{auth,a});",
          "75:                         success(req, rsp, chain, auth);",
          "76:                         return;",
          "77:                     }",
          "78:                 }",
          "80:                 fail(req, rsp, new BadCredentialsException(\"Invalid password/token for user: \" + username));",
          "81:             } else {",
          "82:                 fail(req, rsp, new BadCredentialsException(\"Malformed HTTP basic Authorization header\"));",
          "83:             }",
          "84:         } else {",
          "86:             chain.doFilter(request, response);",
          "87:         }",
          "88:     }",
          "90:     protected void success(HttpServletRequest req, HttpServletResponse rsp, FilterChain chain, Authentication auth) throws IOException, ServletException {",
          "91:         rememberMeServices.loginSuccess(req, rsp, auth);",
          "93:         SecurityContext old = ACL.impersonate(auth);",
          "94:         try {",
          "95:             chain.doFilter(req,rsp);",
          "96:         } finally {",
          "97:             SecurityContextHolder.setContext(old);",
          "98:         }",
          "99:     }",
          "101:     protected void fail(HttpServletRequest req, HttpServletResponse rsp, BadCredentialsException failure) throws IOException, ServletException {",
          "102:         LOGGER.log(FINE, \"Authentication of BASIC header failed\");",
          "104:         rememberMeServices.loginFail(req, rsp);",
          "106:         authenticationEntryPoint.commence(req, rsp, failure);",
          "107:     }",
          "109:     protected List<? extends BasicHeaderAuthenticator> all() {",
          "110:         return BasicHeaderAuthenticator.all();",
          "111:     }",
          "113:     public void destroy() {",
          "114:     }",
          "116:     private static final Logger LOGGER = Logger.getLogger(ApiTokenFilter.class.getName());",
          "117: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/BasicHeaderRealPasswordAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderRealPasswordAuthenticator.java": [
          "File: core/src/main/java/jenkins/security/BasicHeaderRealPasswordAuthenticator.java -> core/src/main/java/jenkins/security/BasicHeaderRealPasswordAuthenticator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: package jenkins.security;",
          "17: import hudson.Extension;",
          "18: import jenkins.ExtensionFilter;",
          "19: import jenkins.model.Jenkins;",
          "20: import org.acegisecurity.Authentication;",
          "21: import org.acegisecurity.AuthenticationException;",
          "22: import org.acegisecurity.context.SecurityContextHolder;",
          "23: import org.acegisecurity.providers.UsernamePasswordAuthenticationToken;",
          "24: import org.acegisecurity.providers.anonymous.AnonymousAuthenticationToken;",
          "25: import org.acegisecurity.ui.AuthenticationDetailsSource;",
          "26: import org.acegisecurity.ui.AuthenticationDetailsSourceImpl;",
          "28: import javax.servlet.ServletException;",
          "29: import javax.servlet.http.HttpServletRequest;",
          "30: import javax.servlet.http.HttpServletResponse;",
          "31: import java.io.IOException;",
          "32: import java.util.logging.Logger;",
          "34: import static java.util.logging.Level.*;",
          "43: @Extension",
          "44: public class BasicHeaderRealPasswordAuthenticator extends BasicHeaderAuthenticator {",
          "45:     private AuthenticationDetailsSource authenticationDetailsSource = new AuthenticationDetailsSourceImpl();",
          "47:     @Override",
          "48:     public Authentication authenticate(HttpServletRequest req, HttpServletResponse rsp, String username, String password) throws IOException, ServletException {",
          "49:         if (DISABLE)",
          "50:             return null;",
          "52:         if (!authenticationIsRequired(username))",
          "53:             return null;",
          "55:         UsernamePasswordAuthenticationToken authRequest =",
          "56:                 new UsernamePasswordAuthenticationToken(username, password);",
          "57:         authRequest.setDetails(authenticationDetailsSource.buildDetails(req));",
          "59:         try {",
          "60:             Authentication a = Jenkins.getInstance().getSecurityRealm().getSecurityComponents().manager.authenticate(authRequest);",
          "62:             LOGGER.log(FINER, \"Authentication success: {0}\", a);",
          "63:             return a;",
          "64:         } catch (AuthenticationException failed) {",
          "66:             LOGGER.log(FINER, \"Authentication request for user: {0} failed: {1}\", new Object[]{username,failed});",
          "67:             return null;",
          "68:         }",
          "69:     }",
          "72:     protected boolean authenticationIsRequired(String username) {",
          "75:         Authentication existingAuth = SecurityContextHolder.getContext().getAuthentication();",
          "77:         if(existingAuth == null || !existingAuth.isAuthenticated()) {",
          "78:             return true;",
          "79:         }",
          "84:         if (existingAuth instanceof UsernamePasswordAuthenticationToken && !existingAuth.getName().equals(username)) {",
          "85:             return true;",
          "86:         }",
          "95:         if (existingAuth instanceof AnonymousAuthenticationToken) {",
          "96:             return true;",
          "97:         }",
          "99:         return false;",
          "100:     }",
          "102:     private static final Logger LOGGER = Logger.getLogger(BasicHeaderRealPasswordAuthenticator.class.getName());",
          "108:     public static boolean DISABLE = Boolean.getBoolean(\"jenkins.security.ignoreBasicAuth\");",
          "109: }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java||test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java": [
          "File: test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java -> test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package jenkins.security;",
          "3: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "4: import com.gargoylesoftware.htmlunit.Page;",
          "5: import com.gargoylesoftware.htmlunit.WebRequestSettings;",
          "6: import hudson.model.UnprotectedRootAction;",
          "7: import hudson.model.User;",
          "8: import hudson.util.HttpResponses;",
          "9: import hudson.util.Scrambler;",
          "10: import org.junit.Assert;",
          "11: import org.junit.Rule;",
          "12: import org.junit.Test;",
          "13: import org.jvnet.hudson.test.JenkinsRule;",
          "14: import org.jvnet.hudson.test.JenkinsRule.WebClient;",
          "15: import org.jvnet.hudson.test.TestExtension;",
          "16: import org.kohsuke.stapler.HttpResponse;",
          "17: import org.xml.sax.SAXException;",
          "19: import java.io.IOException;",
          "20: import java.net.URL;",
          "25: public class BasicHeaderProcessorTest extends Assert {",
          "26:     @Rule",
          "27:     public JenkinsRule j = new JenkinsRule();",
          "29:     private WebClient wc;",
          "34:     @Test",
          "35:     public void testVariousWaysToCall() throws Exception {",
          "36:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
          "37:         User foo = User.get(\"foo\");",
          "38:         User bar = User.get(\"bar\");",
          "40:         wc = j.createWebClient();",
          "43:         makeRequestWithAuthAndVerify(null, \"anonymous\");",
          "46:         ApiTokenProperty t = foo.getProperty(ApiTokenProperty.class);",
          "47:         final String token = t.getApiToken();",
          "48:         makeRequestWithAuthAndVerify(\"foo:\"+token, \"foo\");",
          "51:         makeRequestAndFail(\"foo:abcd\"+token);",
          "54:         makeRequestWithAuthAndVerify(\"foo:foo\", \"foo\");",
          "57:         makeRequestAndFail(\"foo:bar\");",
          "60:         wc.login(\"bar\");",
          "61:         makeRequestWithAuthAndVerify(null, \"bar\");",
          "64:         makeRequestAndFail(\"foo:bar\");",
          "65:     }",
          "67:     private void makeRequestAndFail(String userAndPass) throws IOException, SAXException {",
          "68:         try {",
          "69:             makeRequestWithAuthAndVerify(userAndPass, \"-\");",
          "70:             fail();",
          "71:         } catch (FailingHttpStatusCodeException e) {",
          "72:             assertEquals(401, e.getStatusCode());",
          "73:         }",
          "74:     }",
          "76:     private void makeRequestWithAuthAndVerify(String userAndPass, String username) throws IOException, SAXException {",
          "77:         WebRequestSettings req = new WebRequestSettings(new URL(j.getURL(),\"test\"));",
          "78:         if (userAndPass!=null)",
          "79:             req.setAdditionalHeader(\"Authorization\",\"Basic \"+Scrambler.scramble(userAndPass));",
          "80:         Page p = wc.getPage(req);",
          "82:         assertEquals(username, p.getWebResponse().getContentAsString().trim());",
          "83:     }",
          "85:     @TestExtension",
          "86:     public static class WhoAmI implements UnprotectedRootAction {",
          "87:         @Override",
          "88:         public String getIconFileName() {",
          "89:             return null;",
          "90:         }",
          "92:         @Override",
          "93:         public String getDisplayName() {",
          "94:             return null;",
          "95:         }",
          "97:         @Override",
          "98:         public String getUrlName() {",
          "99:             return \"test\";",
          "100:         }",
          "102:         public HttpResponse doIndex() {",
          "103:             User u = User.current();",
          "104:             return HttpResponses.plainText(u!=null ? u.getId() : \"anonymous\");",
          "105:         }",
          "106:     }",
          "107: }",
          "",
          "---------------"
        ],
        "war/src/main/webapp/WEB-INF/security/SecurityFilters.groovy||war/src/main/webapp/WEB-INF/security/SecurityFilters.groovy": [
          "File: war/src/main/webapp/WEB-INF/security/SecurityFilters.groovy -> war/src/main/webapp/WEB-INF/security/SecurityFilters.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import hudson.security.ChainedServletFilter",
          "33: import hudson.security.UnwrapSecurityExceptionFilter",
          "34: import hudson.security.HudsonAuthenticationEntryPoint",
          "35: import org.acegisecurity.providers.anonymous.AnonymousProcessingFilter",
          "36: import jenkins.security.ExceptionTranslationFilter",
          "37: import org.acegisecurity.ui.basicauth.BasicProcessingFilter",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import jenkins.security.BasicHeaderProcessor",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:             allowSessionCreation = false;",
          "72:         },",
          "",
          "[Removed Lines]",
          "73:         bean(ApiTokenFilter),",
          "76:         Boolean.getBoolean(\"jenkins.security.ignoreBasicAuth\") ? bean(NoopFilter) :",
          "77:         bean(BasicProcessingFilter) {",
          "78:             authenticationManager = securityComponents.manager",
          "",
          "[Added Lines]",
          "75:         bean(BasicHeaderProcessor) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}