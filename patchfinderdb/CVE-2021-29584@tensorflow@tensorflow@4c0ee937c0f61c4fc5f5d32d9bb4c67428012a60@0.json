{
  "cve_id": "CVE-2021-29584",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger a denial of service via a `CHECK`-fail in caused by an integer overflow in constructing a new tensor shape. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/0908c2f2397c099338b901b067f6495a5b96760b/tensorflow/core/kernels/sparse_split_op.cc#L66-L70) builds a dense shape without checking that the dimensions would not result in overflow. The `TensorShape` constructor(https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a `CHECK` operation which triggers when `InitDims`(https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status. This is a legacy implementation of the constructor and operations should use `BuildTensorShapeBase` or `AddDimWithStatus` to prevent `CHECK`-failures in the presence of overflows. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60",
  "patch_info": {
    "commit_hash": "4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60",
    "files": [
      "tensorflow/core/kernels/sparse_split_op.cc"
    ],
    "message": "Prevent overflow in sparse op\n\nPiperOrigin-RevId: 372442006\nChange-Id: I60fe31cd7e56fb3501e97c63500caf902ddeee96",
    "before_after_code_files": [
      "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc": [
      "File: tensorflow/core/kernels/sparse_split_op.cc -> tensorflow/core/kernels/sparse_split_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "63:                                         input_shape.vec<int64>()(axis),",
      "64:                                         \"), got \", num_split_));",
      "66:     sparse::SparseTensor sparse_tensor;",
      "67:     OP_REQUIRES_OK(context,",
      "72:     std::vector<sparse::SparseTensor> outputs;",
      "73:     OP_REQUIRES_OK(context, sparse::SparseTensor::Split<T>(",
      "",
      "[Removed Lines]",
      "68:                    sparse::SparseTensor::Create(",
      "69:                        input_indices, input_values,",
      "70:                        TensorShape(input_shape.vec<int64>()), &sparse_tensor));",
      "",
      "[Added Lines]",
      "67:     TensorShape dense_shape;",
      "68:     const auto input_shape_flat = input_shape.flat<int64>();",
      "69:     for (int i = 0; i < input_shape.NumElements(); i++) {",
      "70:       OP_REQUIRES_OK(context,",
      "71:                      dense_shape.AddDimWithStatus(input_shape_flat(i)));",
      "72:     }",
      "76:                    sparse::SparseTensor::Create(input_indices, input_values,",
      "77:                                                 dense_shape, &sparse_tensor));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "142b99de7a736bdf037632b9eede884e49f7af50",
      "candidate_info": {
        "commit_hash": "142b99de7a736bdf037632b9eede884e49f7af50",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/142b99de7a736bdf037632b9eede884e49f7af50",
        "files": [
          "tensorflow/core/kernels/sparse_split_op.cc",
          "tensorflow/core/kernels/sparse_split_op.h"
        ],
        "message": "Refactor SparseSplitOp into a functor\n\n- This is in preparation for adding a GPU implementation.\n- No functional change.",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc",
          "tensorflow/core/kernels/sparse_split_op.h||tensorflow/core/kernels/sparse_split_op.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc": [
          "File: tensorflow/core/kernels/sparse_split_op.cc -> tensorflow/core/kernels/sparse_split_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #define EIGEN_USE_THREADS",
          "18: #include <vector>",
          "19: #include \"tensorflow/core/framework/op_kernel.h\"",
          "20: #include \"tensorflow/core/framework/register_types.h\"",
          "21: #include \"tensorflow/core/util/sparse/sparse_tensor.h\"",
          "23: namespace tensorflow {",
          "76:     sparse::SparseTensor sparse_tensor;",
          "77:     OP_REQUIRES_OK(context,",
          "78:                    sparse::SparseTensor::Create(input_indices, input_values,",
          "",
          "[Removed Lines]",
          "25: template <typename T>",
          "26: class SparseSplitOp : public OpKernel {",
          "27:  public:",
          "28:   explicit SparseSplitOp(OpKernelConstruction* context) : OpKernel(context) {",
          "29:     OP_REQUIRES_OK(context, context->GetAttr(\"num_split\", &num_split_));",
          "30:   }",
          "32:   void Compute(OpKernelContext* context) override {",
          "33:     const int64_t axis_input = context->input(0).scalar<int64_t>()();",
          "34:     const Tensor& input_indices = context->input(1);",
          "35:     const Tensor& input_values = context->input(2);",
          "36:     const Tensor& input_shape = context->input(3);",
          "38:     OP_REQUIRES(context, TensorShapeUtils::IsMatrix(input_indices.shape()),",
          "39:                 errors::InvalidArgument(",
          "40:                     \"Input indices should be a matrix but received shape \",",
          "41:                     input_indices.shape().DebugString()));",
          "42:     OP_REQUIRES(context, TensorShapeUtils::IsVector(input_values.shape()),",
          "43:                 errors::InvalidArgument(",
          "44:                     \"Input values should be a vector but received shape \",",
          "45:                     input_indices.shape().DebugString()));",
          "46:     OP_REQUIRES(context, TensorShapeUtils::IsVector(input_shape.shape()),",
          "47:                 errors::InvalidArgument(",
          "48:                     \"Input shape should be a vector but received shape \",",
          "49:                     input_shape.shape().DebugString()));",
          "51:     const int64_t input_rank = input_shape.vec<int64_t>().size();",
          "52:     const int64_t axis =",
          "53:         (axis_input < 0) ? input_rank + axis_input : axis_input;",
          "55:     OP_REQUIRES(",
          "56:         context, axis >= 0 && axis < input_rank,",
          "57:         errors::InvalidArgument(\"Input axis should be in range [\", -input_rank,",
          "58:                                 \", \", input_rank, \"), got \", axis_input));",
          "60:     OP_REQUIRES(",
          "61:         context,",
          "62:         num_split_ >= 1 && num_split_ <= input_shape.vec<int64_t>()(axis),",
          "63:         errors::InvalidArgument(\"Input num_split should be between 1 \"",
          "64:                                 \"and the splitting dimension size (\",",
          "65:                                 input_shape.vec<int64_t>()(axis), \"), got \",",
          "66:                                 num_split_));",
          "69:     TensorShape dense_shape;",
          "70:     const auto input_shape_flat = input_shape.flat<int64_t>();",
          "71:     for (int i = 0; i < input_shape.NumElements(); i++) {",
          "72:       OP_REQUIRES_OK(context,",
          "73:                      dense_shape.AddDimWithStatus(input_shape_flat(i)));",
          "74:     }",
          "",
          "[Added Lines]",
          "18: #include \"tensorflow/core/kernels/sparse_split_op.h\"",
          "28: typedef Eigen::ThreadPoolDevice CPUDevice;",
          "30: namespace functor {",
          "32: template <typename T>",
          "33: struct SparseSplitFunctor<CPUDevice, T> {",
          "34:   void operator()(OpKernelContext* context, const Tensor& input_indices,",
          "35:                   const Tensor& input_values, const TensorShape& dense_shape,",
          "36:                   const int64_t axis, const int num_split,",
          "37:                   typename AsyncOpKernel::DoneCallback done) {",
          "38:     (void)done;  // Unused (only used in GPU implementation)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     std::vector<sparse::SparseTensor> outputs;",
          "82:     OP_REQUIRES_OK(context, sparse::SparseTensor::Split<T>(",
          "86:       context->set_output(slice_index, outputs[slice_index].indices());",
          "88:                           outputs[slice_index].values());",
          "89:       Tensor* shape = nullptr;",
          "90:       OP_REQUIRES_OK(context, context->allocate_output(",
          "92:                                   {outputs[slice_index].dims()}, &shape));",
          "93:       auto output_shape = outputs[slice_index].shape();",
          "94:       for (int dim = 0; dim < outputs[slice_index].dims(); ++dim) {",
          "",
          "[Removed Lines]",
          "83:                                 sparse_tensor, axis, num_split_, &outputs));",
          "85:     for (int slice_index = 0; slice_index < num_split_; ++slice_index) {",
          "87:       context->set_output(slice_index + num_split_,",
          "91:                                   slice_index + 2 * num_split_,",
          "",
          "[Added Lines]",
          "46:                                 sparse_tensor, axis, num_split, &outputs));",
          "48:     for (int slice_index = 0; slice_index < num_split; ++slice_index) {",
          "50:       context->set_output(slice_index + num_split,",
          "54:                                   slice_index + 2 * num_split,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:       }",
          "97:     }",
          "98:   }",
          "100:  private:",
          "101:   int num_split_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: };",
          "64: }  // namespace functor",
          "66: namespace {",
          "68: template <typename Device, typename T>",
          "69: void SparseSplitOpImpl(OpKernelContext* context, int num_split,",
          "70:                        AsyncOpKernel::DoneCallback done = nullptr) {",
          "73:   if (!done) {",
          "74:     done = [] {};",
          "75:   }",
          "77:   const int64_t axis_input = context->input(0).scalar<int64_t>()();",
          "78:   const Tensor& input_indices = context->input(1);",
          "79:   const Tensor& input_values = context->input(2);",
          "80:   const Tensor& input_shape = context->input(3);",
          "82:   OP_REQUIRES_ASYNC(context, TensorShapeUtils::IsMatrix(input_indices.shape()),",
          "83:                     errors::InvalidArgument(",
          "84:                         \"Input indices should be a matrix but received shape \",",
          "85:                         input_indices.shape().DebugString()),",
          "86:                     done);",
          "87:   OP_REQUIRES_ASYNC(context, TensorShapeUtils::IsVector(input_values.shape()),",
          "88:                     errors::InvalidArgument(",
          "89:                         \"Input values should be a vector but received shape \",",
          "90:                         input_indices.shape().DebugString()),",
          "91:                     done);",
          "92:   OP_REQUIRES_ASYNC(context, TensorShapeUtils::IsVector(input_shape.shape()),",
          "93:                     errors::InvalidArgument(",
          "94:                         \"Input shape should be a vector but received shape \",",
          "95:                         input_shape.shape().DebugString()),",
          "96:                     done);",
          "98:   const int64_t input_rank = input_shape.vec<int64_t>().size();",
          "99:   const int64_t axis = (axis_input < 0) ? input_rank + axis_input : axis_input;",
          "101:   OP_REQUIRES_ASYNC(",
          "102:       context, axis >= 0 && axis < input_rank,",
          "103:       errors::InvalidArgument(\"Input axis should be in range [\", -input_rank,",
          "104:                               \", \", input_rank, \"), got \", axis_input),",
          "105:       done);",
          "107:   OP_REQUIRES_ASYNC(",
          "108:       context, num_split >= 1 && num_split <= input_shape.vec<int64_t>()(axis),",
          "109:       errors::InvalidArgument(\"Input num_split should be between 1 \"",
          "110:                               \"and the splitting dimension size (\",",
          "111:                               input_shape.vec<int64_t>()(axis), \"), got \",",
          "112:                               num_split),",
          "113:       done);",
          "116:   TensorShape dense_shape;",
          "117:   const auto input_shape_flat = input_shape.flat<int64_t>();",
          "118:   for (int i = 0; i < input_shape.NumElements(); i++) {",
          "119:     OP_REQUIRES_OK_ASYNC(",
          "120:         context, dense_shape.AddDimWithStatus(input_shape_flat(i)), done);",
          "121:   }",
          "123:   functor::SparseSplitFunctor<Device, T>()(context, input_indices, input_values,",
          "124:                                            dense_shape, axis, num_split, done);",
          "125: }",
          "127: }  // namespace",
          "129: template <typename T>",
          "130: class SparseSplitOp : public OpKernel {",
          "131:  public:",
          "132:   explicit SparseSplitOp(OpKernelConstruction* context) : OpKernel(context) {",
          "133:     OP_REQUIRES_OK(context, context->GetAttr(\"num_split\", &num_split_));",
          "134:   }",
          "136:   void Compute(OpKernelContext* context) override {",
          "137:     SparseSplitOpImpl<CPUDevice, T>(context, num_split_);",
          "138:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/sparse_split_op.h||tensorflow/core/kernels/sparse_split_op.h": [
          "File: tensorflow/core/kernels/sparse_split_op.h -> tensorflow/core/kernels/sparse_split_op.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #ifndef TENSORFLOW_CORE_KERNELS_SPARSE_SPLIT_OP_H_",
          "17: #define TENSORFLOW_CORE_KERNELS_SPARSE_SPLIT_OP_H_",
          "19: #include \"tensorflow/core/framework/op_kernel.h\"",
          "21: namespace tensorflow {",
          "23: namespace functor {",
          "25: template <typename Device, typename T>",
          "26: struct SparseSplitFunctor {",
          "27:   void operator()(OpKernelContext* context, const Tensor& input_indices,",
          "28:                   const Tensor& input_values, const TensorShape& dense_shape,",
          "29:                   const int64_t axis, const int num_split,",
          "30:                   typename AsyncOpKernel::DoneCallback done = nullptr);",
          "31: };",
          "33: }  // namespace functor",
          "35: }  // namespace tensorflow",
          "37: #endif  // TENSORFLOW_CORE_KERNELS_SPARSE_SPLIT_OP_H_",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46faa2ff1070ea841034d3196e157b0c8db442cc",
      "candidate_info": {
        "commit_hash": "46faa2ff1070ea841034d3196e157b0c8db442cc",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/46faa2ff1070ea841034d3196e157b0c8db442cc",
        "files": [
          "tensorflow/core/kernels/sparse_split_op.cc"
        ],
        "message": "Prevent overflow in sparse op\n\nPiperOrigin-RevId: 372442006\nChange-Id: I60fe31cd7e56fb3501e97c63500caf902ddeee96",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc": [
          "File: tensorflow/core/kernels/sparse_split_op.cc -> tensorflow/core/kernels/sparse_split_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:                                         input_shape.vec<int64>()(axis),",
          "64:                                         \"), got \", num_split_));",
          "66:     sparse::SparseTensor sparse_tensor;",
          "67:     OP_REQUIRES_OK(context,",
          "72:     std::vector<sparse::SparseTensor> outputs;",
          "73:     OP_REQUIRES_OK(context, sparse::SparseTensor::Split<T>(",
          "",
          "[Removed Lines]",
          "68:                    sparse::SparseTensor::Create(",
          "69:                        input_indices, input_values,",
          "70:                        TensorShape(input_shape.vec<int64>()), &sparse_tensor));",
          "",
          "[Added Lines]",
          "67:     TensorShape dense_shape;",
          "68:     const auto input_shape_flat = input_shape.flat<int64>();",
          "69:     for (int i = 0; i < input_shape.NumElements(); i++) {",
          "70:       OP_REQUIRES_OK(context,",
          "71:                      dense_shape.AddDimWithStatus(input_shape_flat(i)));",
          "72:     }",
          "76:                    sparse::SparseTensor::Create(input_indices, input_values,",
          "77:                                                 dense_shape, &sparse_tensor));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27279cd23c52585b0cdf28e26887074dc64d0823",
      "candidate_info": {
        "commit_hash": "27279cd23c52585b0cdf28e26887074dc64d0823",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/27279cd23c52585b0cdf28e26887074dc64d0823",
        "files": [
          "tensorflow/core/kernels/sparse_split_op.cc"
        ],
        "message": "Prevent overflow in sparse op\n\nPiperOrigin-RevId: 372442006\nChange-Id: I60fe31cd7e56fb3501e97c63500caf902ddeee96",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc": [
          "File: tensorflow/core/kernels/sparse_split_op.cc -> tensorflow/core/kernels/sparse_split_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:                                 input_shape.vec<int64>()(split_dim), \"), got \",",
          "64:                                 num_split_));",
          "66:     sparse::SparseTensor sparse_tensor;",
          "67:     OP_REQUIRES_OK(context,",
          "72:     std::vector<sparse::SparseTensor> outputs;",
          "73:     OP_REQUIRES_OK(context,",
          "",
          "[Removed Lines]",
          "68:                    sparse::SparseTensor::Create(",
          "69:                        input_indices, input_values,",
          "70:                        TensorShape(input_shape.vec<int64>()), &sparse_tensor));",
          "",
          "[Added Lines]",
          "67:     TensorShape dense_shape;",
          "68:     const auto input_shape_flat = input_shape.flat<int64>();",
          "69:     for (int i = 0; i < input_shape.NumElements(); i++) {",
          "70:       OP_REQUIRES_OK(context,",
          "71:                      dense_shape.AddDimWithStatus(input_shape_flat(i)));",
          "72:     }",
          "76:                    sparse::SparseTensor::Create(input_indices, input_values,",
          "77:                                                 dense_shape, &sparse_tensor));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68fd86131a7ba4706b0c786a44f96ad270b9e417",
      "candidate_info": {
        "commit_hash": "68fd86131a7ba4706b0c786a44f96ad270b9e417",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/68fd86131a7ba4706b0c786a44f96ad270b9e417",
        "files": [
          "tensorflow/core/kernels/sparse_split_op.cc"
        ],
        "message": "Prevent overflow in sparse op\n\nPiperOrigin-RevId: 372442006\nChange-Id: I60fe31cd7e56fb3501e97c63500caf902ddeee96",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc": [
          "File: tensorflow/core/kernels/sparse_split_op.cc -> tensorflow/core/kernels/sparse_split_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:                                         input_shape.vec<int64>()(axis),",
          "64:                                         \"), got \", num_split_));",
          "66:     sparse::SparseTensor sparse_tensor;",
          "67:     OP_REQUIRES_OK(context,",
          "72:     std::vector<sparse::SparseTensor> outputs;",
          "73:     OP_REQUIRES_OK(context, sparse::SparseTensor::Split<T>(",
          "",
          "[Removed Lines]",
          "68:                    sparse::SparseTensor::Create(",
          "69:                        input_indices, input_values,",
          "70:                        TensorShape(input_shape.vec<int64>()), &sparse_tensor));",
          "",
          "[Added Lines]",
          "67:     TensorShape dense_shape;",
          "68:     const auto input_shape_flat = input_shape.flat<int64>();",
          "69:     for (int i = 0; i < input_shape.NumElements(); i++) {",
          "70:       OP_REQUIRES_OK(context,",
          "71:                      dense_shape.AddDimWithStatus(input_shape_flat(i)));",
          "72:     }",
          "76:                    sparse::SparseTensor::Create(input_indices, input_values,",
          "77:                                                 dense_shape, &sparse_tensor));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "321733ea9e82d4cae65debde449181715d69408e",
      "candidate_info": {
        "commit_hash": "321733ea9e82d4cae65debde449181715d69408e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/321733ea9e82d4cae65debde449181715d69408e",
        "files": [
          "tensorflow/core/kernels/sparse_split_op.cc"
        ],
        "message": "Prevent overflow in sparse op\n\nPiperOrigin-RevId: 372442006\nChange-Id: I60fe31cd7e56fb3501e97c63500caf902ddeee96",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_split_op.cc||tensorflow/core/kernels/sparse_split_op.cc": [
          "File: tensorflow/core/kernels/sparse_split_op.cc -> tensorflow/core/kernels/sparse_split_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:                                 input_shape.vec<int64>()(split_dim), \"), got \",",
          "64:                                 num_split_));",
          "66:     sparse::SparseTensor sparse_tensor;",
          "67:     OP_REQUIRES_OK(context,",
          "72:     std::vector<sparse::SparseTensor> outputs;",
          "73:     OP_REQUIRES_OK(context,",
          "",
          "[Removed Lines]",
          "68:                    sparse::SparseTensor::Create(",
          "69:                        input_indices, input_values,",
          "70:                        TensorShape(input_shape.vec<int64>()), &sparse_tensor));",
          "",
          "[Added Lines]",
          "67:     TensorShape dense_shape;",
          "68:     const auto input_shape_flat = input_shape.flat<int64>();",
          "69:     for (int i = 0; i < input_shape.NumElements(); i++) {",
          "70:       OP_REQUIRES_OK(context,",
          "71:                      dense_shape.AddDimWithStatus(input_shape_flat(i)));",
          "72:     }",
          "76:                    sparse::SparseTensor::Create(input_indices, input_values,",
          "77:                                                 dense_shape, &sparse_tensor));",
          "",
          "---------------"
        ]
      }
    }
  ]
}