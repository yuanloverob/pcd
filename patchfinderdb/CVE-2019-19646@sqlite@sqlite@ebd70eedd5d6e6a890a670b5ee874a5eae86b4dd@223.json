{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bef06d2637b77a8b99c49a91656974049b86963a",
      "candidate_info": {
        "commit_hash": "bef06d2637b77a8b99c49a91656974049b86963a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bef06d2637b77a8b99c49a91656974049b86963a",
        "files": [
          "ext/fts5/fts5.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix errors in comments in fts5.h.\n\nFossilOrigin-Name: 4002790d9418289f3e090c694f651a89d8f523119c8ce2f396999b0387148241",
        "before_after_code_files": [
          "ext/fts5/fts5.h||ext/fts5/fts5.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5.h||ext/fts5/fts5.h": [
          "File: ext/fts5/fts5.h -> ext/fts5/fts5.h"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 27221c69901d2b4546167639c4a3c8f54b2e18820f1346870fa26b7c919027db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d985f7260b2f7b8a4977f1af330f49c110aa3f43",
      "candidate_info": {
        "commit_hash": "d985f7260b2f7b8a4977f1af330f49c110aa3f43",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d985f7260b2f7b8a4977f1af330f49c110aa3f43",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "CLI enhancements:  Add the \".filectrl\" command.  Make the \".testctrl\" command visible to \".help\".\n\nFossilOrigin-Name: 7b3a99fce8b4a757f2b2ef2f0b02d68566f2528d9ae1e30628522717f872466c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a477fd0c944440be03d23c667053b346c769c6a4f6ba1ef094b7581a08d7bd4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3513:   \".fullschema ?--indent?   Show schema and the content of sqlite_stat tables\",",
          "3514:   \".headers on|off          Turn display of headers on or off\",",
          "3515:   \".help ?-all? ?PATTERN?   Show help text for PATTERN\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3513:   \".filectrl CMD ...        Run various sqlite3_file_control() operations\",",
          "3514:   \"                           Run \\\".filectrl\\\" with no arguments for details\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3627: #endif",
          "3628:   \".tables ?TABLE?          List names of tables matching LIKE pattern TABLE\",",
          "3629:   \".testcase NAME           Begin redirecting output to 'testcase-out.txt'\",",
          "3630:   \".timeout MS              Try opening locked tables for MS milliseconds\",",
          "3631:   \".timer on|off            Turn SQL timer on or off\",",
          "3632: #ifndef SQLITE_OMIT_TRACE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3632:   \".testctrl CMD ...        Run various sqlite3_test_control() operations\",",
          "3633:   \"                           Run \\\".testctrl\\\" with no arguments for details\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7277:   }else",
          "7278: #endif",
          "7280:   if( c=='f' && strncmp(azArg[0], \"fullschema\", n)==0 ){",
          "7281:     ShellState data;",
          "7282:     char *zErrMsg = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7284:   if( c=='f' && strncmp(azArg[0], \"filectrl\", n)==0 ){",
          "7285:     static const struct {",
          "7289:     } aCtrl[] = {",
          "7290:       { \"size_limit\",     SQLITE_FCNTL_SIZE_LIMIT,      \"[LIMIT]\"        },",
          "7291:       { \"chunk_size\",     SQLITE_FCNTL_CHUNK_SIZE,      \"SIZE\"           },",
          "7293:       { \"persist_wal\",    SQLITE_FCNTL_PERSIST_WAL,     \"[BOOLEAN]\"      },",
          "7294:       { \"psow\",       SQLITE_FCNTL_POWERSAFE_OVERWRITE, \"[BOOLEAN]\"      },",
          "7296:       { \"tempfilename\",   SQLITE_FCNTL_TEMPFILENAME,    \"\"               },",
          "7297:       { \"has_moved\",      SQLITE_FCNTL_HAS_MOVED,       \"\"               },",
          "7298:       { \"lock_timeout\",   SQLITE_FCNTL_LOCK_TIMEOUT,    \"MILLISEC\"       },",
          "7299:     };",
          "7300:     int filectrl = -1;",
          "7301:     int iCtrl = -1;",
          "7304:     int n2, i;",
          "7305:     const char *zCmd = 0;",
          "7307:     open_db(p, 0);",
          "7308:     zCmd = nArg>=2 ? azArg[1] : \"help\";",
          "7311:     if( zCmd[0]=='-' && zCmd[1] ){",
          "7312:       zCmd++;",
          "7313:       if( zCmd[0]=='-' && zCmd[1] ) zCmd++;",
          "7314:     }",
          "7317:     if( strcmp(zCmd,\"help\")==0 ){",
          "7318:       utf8_printf(p->out, \"Available file-controls:\\n\");",
          "7319:       for(i=0; i<ArraySize(aCtrl); i++){",
          "7320:         utf8_printf(p->out, \"  .filectrl %s %s\\n\",",
          "7321:                     aCtrl[i].zCtrlName, aCtrl[i].zUsage);",
          "7322:       }",
          "7323:       rc = 1;",
          "7324:       goto meta_command_exit;",
          "7325:     }",
          "7329:     n2 = strlen30(zCmd);",
          "7330:     for(i=0; i<ArraySize(aCtrl); i++){",
          "7331:       if( strncmp(zCmd, aCtrl[i].zCtrlName, n2)==0 ){",
          "7332:         if( filectrl<0 ){",
          "7333:           filectrl = aCtrl[i].ctrlCode;",
          "7334:           iCtrl = i;",
          "7335:         }else{",
          "7336:           utf8_printf(stderr, \"Error: ambiguous file-control: \\\"%s\\\"\\n\"",
          "7337:                               \"Use \\\".filectrl --help\\\" for help\\n\", zCmd);",
          "7338:           rc = 1;",
          "7339:           goto meta_command_exit;",
          "7340:         }",
          "7341:       }",
          "7342:     }",
          "7343:     if( filectrl<0 ){",
          "7344:       utf8_printf(stderr,\"Error: unknown file-control: %s\\n\"",
          "7345:                          \"Use \\\".filectrl --help\\\" for help\\n\", zCmd);",
          "7346:     }else{",
          "7347:       switch(filectrl){",
          "7348:         case SQLITE_FCNTL_SIZE_LIMIT: {",
          "7349:           if( nArg!=2 && nArg!=3 ) break;",
          "7350:           iRes = nArg==3 ? integerValue(azArg[2]) : -1;",
          "7351:           sqlite3_file_control(p->db, 0, SQLITE_FCNTL_SIZE_LIMIT, &iRes);",
          "7352:           isOk = 1;",
          "7353:           break;",
          "7354:         }",
          "7355:         case SQLITE_FCNTL_LOCK_TIMEOUT:",
          "7356:         case SQLITE_FCNTL_CHUNK_SIZE: {",
          "7357:           int x;",
          "7358:           if( nArg!=3 ) break;",
          "7359:           x = (int)integerValue(azArg[2]);",
          "7360:           sqlite3_file_control(p->db, 0, filectrl, &x);",
          "7361:           isOk = 2;",
          "7362:           break;",
          "7363:         }",
          "7364:         case SQLITE_FCNTL_PERSIST_WAL:",
          "7365:         case SQLITE_FCNTL_POWERSAFE_OVERWRITE: {",
          "7366:           int x;",
          "7367:           if( nArg!=2 && nArg!=3 ) break;",
          "7368:           x = nArg==3 ? booleanValue(azArg[2]) : -1;",
          "7369:           sqlite3_file_control(p->db, 0, filectrl, &x);",
          "7370:           iRes = x;",
          "7371:           isOk = 1;",
          "7372:           break;",
          "7373:         }",
          "7374:         case SQLITE_FCNTL_HAS_MOVED: {",
          "7375:           int x;",
          "7376:           if( nArg!=2 ) break;",
          "7377:           sqlite3_file_control(p->db, 0, filectrl, &x);",
          "7378:           iRes = x;",
          "7379:           isOk = 1;",
          "7380:           break;",
          "7381:         }",
          "7382:         case SQLITE_FCNTL_TEMPFILENAME: {",
          "7383:           char *z = 0;",
          "7384:           if( nArg!=2 ) break;",
          "7385:           sqlite3_file_control(p->db, 0, filectrl, &z);",
          "7386:           if( z ){",
          "7387:             utf8_printf(p->out, \"%s\\n\", z);",
          "7388:             sqlite3_free(z);",
          "7389:           }",
          "7390:           isOk = 2;",
          "7391:           break;",
          "7392:         }",
          "7393:       }",
          "7394:     }",
          "7395:     if( isOk==0 && iCtrl>=0 ){",
          "7396:       utf8_printf(p->out, \"Usage: .filectrl %s %s\\n\", zCmd,aCtrl[iCtrl].zUsage);",
          "7397:       rc = 1;",
          "7398:     }else if( isOk==1 ){",
          "7399:       raw_printf(p->out, \"%lld\\n\", iRes);",
          "7400:     }",
          "7401:   }else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20c00823713980df47f51413c22e54294d0a5382",
      "candidate_info": {
        "commit_hash": "20c00823713980df47f51413c22e54294d0a5382",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/20c00823713980df47f51413c22e54294d0a5382",
        "files": [
          "ext/misc/csv.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a harmless compiler warning in the CSV extension.\n\nFossilOrigin-Name: fbcd72565f4425016cebbbf5dfd6aa510234cfb31c785cf364f04fff444aacae",
        "before_after_code_files": [
          "ext/misc/csv.c||ext/misc/csv.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/csv.c||ext/misc/csv.c": [
          "File: ext/misc/csv.c -> ext/misc/csv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:   }else if( pNew->zData ){",
          "622:     pNew->iStart = (int)sRdr.iIn;",
          "623:   }else{",
          "625:   }",
          "626:   csv_reader_reset(&sRdr);",
          "627:   rc = sqlite3_declare_vtab(db, CSV_SCHEMA);",
          "",
          "[Removed Lines]",
          "624:     pNew->iStart = ftell(sRdr.in) - sRdr.nIn + sRdr.iIn;",
          "",
          "[Added Lines]",
          "624:     pNew->iStart = (int)(ftell(sRdr.in) - sRdr.nIn + sRdr.iIn);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bef216dfa1456a787e3d9c74936ee1c6600827d4e252bd13e7a93046ce07469f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03e025e21716751fb69ec6f5b93735bce3612e37",
      "candidate_info": {
        "commit_hash": "03e025e21716751fb69ec6f5b93735bce3612e37",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/03e025e21716751fb69ec6f5b93735bce3612e37",
        "files": [
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/vdbeaux.c"
        ],
        "message": "Fix a problem with running ALTER TABLE ADD COLUMN statements within a transaction that writes to one or more virtual tables.\n\nFossilOrigin-Name: 31e85fbbc4cfd09a98b4a6dc6624f863816f376c6a4eef1fafc657c8e1abbc36",
        "before_after_code_files": [
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     WHERE rank = (SELECT highlight(t1, 4, '<b>', '</b>') FROM t1('*reads'));",
          "60: } {1 {no such cursor: 1}}",
          "62: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: #-------------------------------------------------------------------------",
          "63: reset_db",
          "64: do_execsql_test 2.0 {",
          "65:   CREATE TABLE t0(c0);",
          "66:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "67: }",
          "68: do_execsql_test 2.1.1 {",
          "69:   BEGIN TRANSACTION;",
          "70:   INSERT INTO vt0(c0) VALUES ('xyz');",
          "71: }",
          "72: do_execsql_test 2.1.2 {",
          "73:   ALTER TABLE t0 ADD COLUMN c5;",
          "74: }",
          "75: do_execsql_test 2.1.3 {",
          "76:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "77: }",
          "78: do_execsql_test 2.1.4 {",
          "79:   INSERT INTO vt0(c0) VALUES ('abc');",
          "80:   COMMIT",
          "81: }",
          "82: do_execsql_test 2.1.5 {",
          "83:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "84: }",
          "86: reset_db",
          "87: do_execsql_test 2.2.1 {",
          "88:   CREATE TABLE t0(c0);",
          "89:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "90:   BEGIN TRANSACTION;",
          "91:   INSERT INTO vt0(c0) VALUES ('xyz');",
          "92: }",
          "94: breakpoint",
          "95: do_execsql_test 2.2.2 {",
          "96:   ALTER TABLE t0 RENAME TO t1;",
          "97: }",
          "98: do_execsql_test 2.2.3 {",
          "99:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "100: }",
          "101: do_execsql_test 2.2.4 {",
          "102:   INSERT INTO vt0(c0) VALUES ('abc');",
          "103:   COMMIT;",
          "104: }",
          "105: do_execsql_test 2.2.5 {",
          "106:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "107: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 32fba11ab72f6300391267eaad64e92fa767c289029e668e4bd6c9165acf1487",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:     goto exit_begin_add_column;",
          "436:   }",
          "438:   assert( pTab->addColOffset>0 );",
          "439:   iDb = sqlite3SchemaToIndex(db, pTab->pSchema);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:   sqlite3MayAbort(pParse);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "640:     int opcode = pOp->opcode;",
          "641:     if( opcode==OP_Destroy || opcode==OP_VUpdate || opcode==OP_VRename",
          "642:      || opcode==OP_VDestroy",
          "644:      || ((opcode==OP_Halt || opcode==OP_HaltIfNull)",
          "645:       && ((pOp->p1)!=SQLITE_OK && pOp->p2==OE_Abort))",
          "646:     ){",
          "",
          "[Removed Lines]",
          "643:      || (opcode==OP_Function0 && pOp->p4.pFunc->funcFlags&SQLITE_FUNC_INTERNAL)",
          "",
          "[Added Lines]",
          "643:      || (opcode==OP_ParseSchema && pOp->p4.z==0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22de8357dfbc077ecedb1ebe7439a409f7903c6b",
      "candidate_info": {
        "commit_hash": "22de8357dfbc077ecedb1ebe7439a409f7903c6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/22de8357dfbc077ecedb1ebe7439a409f7903c6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: 34343c4b0657767f2676a2a9feb670cf000824e3eadfb1a6d87b57404191d8f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e6314e386c6877c669bd32788d3886253b0a187bee2c3889f4eaba219f5e52c7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "573:     assert( pExpr->y.pTab!=0 );",
          "574:     assert( pMatch->iCursor==pExpr->iTable );",
          "575:     if( pExpr->y.pTab->tabFlags & TF_HasGenerated ){",
          "578:     }",
          "579:     pMatch->colUsed |= ((Bitmask)1)<<n;",
          "580:   }",
          "",
          "[Removed Lines]",
          "576:       Column *pCol = pExpr->y.pTab->aCol + pExpr->iColumn;",
          "577:       if( pCol->colFlags & COLFLAG_GENERATED ) n = BMS-1;",
          "",
          "[Added Lines]",
          "576:       Column *pColumn = pExpr->y.pTab->aCol + pExpr->iColumn;",
          "577:       if( pColumn->colFlags & COLFLAG_GENERATED ) n = BMS-1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}