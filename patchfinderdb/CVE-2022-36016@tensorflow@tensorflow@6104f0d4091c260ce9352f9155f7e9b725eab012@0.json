{
  "cve_id": "CVE-2022-36016",
  "cve_desc": "TensorFlow is an open source platform for machine learning. When `tensorflow::full_type::SubstituteFromAttrs` receives a `FullTypeDef& t` that is not exactly three args, it triggers a `CHECK`-fail instead of returning a status. We have patched the issue in GitHub commit 6104f0d4091c260ce9352f9155f7e9b725eab012. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "6104f0d4091c260ce9352f9155f7e9b725eab012",
  "patch_info": {
    "commit_hash": "6104f0d4091c260ce9352f9155f7e9b725eab012",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/6104f0d4091c260ce9352f9155f7e9b725eab012",
    "files": [
      "tensorflow/core/framework/full_type_util.cc",
      "tensorflow/core/framework/full_type_util_test.cc"
    ],
    "message": "Strengthen input verification for SpecializeType by replacing DCHECK with explicit test/status return.\n\nPiperOrigin-RevId: 453436708",
    "before_after_code_files": [
      "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc",
      "tensorflow/core/framework/full_type_util_test.cc||tensorflow/core/framework/full_type_util_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc": [
      "File: tensorflow/core/framework/full_type_util.cc -> tensorflow/core/framework/full_type_util.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "175: }",
      "177: Status SubstituteForEach(AttrMap& attrs, FullTypeDef& t) {",
      "180:   const auto& cont = t.args(0);",
      "181:   const auto& tmpl = t.args(1);",
      "",
      "[Removed Lines]",
      "178:   DCHECK_EQ(t.args_size(), 3);",
      "",
      "[Added Lines]",
      "178:   if (t.args_size() != 3) {",
      "179:     return Status(error::INVALID_ARGUMENT,",
      "180:                   absl::StrCat(\"illegal FOR_EACH type, expected 3 args, got \",",
      "181:                                t.args_size()));",
      "182:   }",
      "",
      "---------------"
    ],
    "tensorflow/core/framework/full_type_util_test.cc||tensorflow/core/framework/full_type_util_test.cc": [
      "File: tensorflow/core/framework/full_type_util_test.cc -> tensorflow/core/framework/full_type_util_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "510:   EXPECT_EQ(t_actual.args(1).args(0).args(0).args_size(), 0);",
      "511: }",
      "513: TEST(SpecializeType, RemovesLegacyVariant) {",
      "514:   OpDef op;",
      "515:   FullTypeDef* t = op.add_output_arg()->mutable_experimental_full_type();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "513: TEST(SpecializeType, ForEachRejectsMalformedInput) {",
      "514:   OpDef op;",
      "515:   FullTypeDef* t = op.add_output_arg()->mutable_experimental_full_type();",
      "516:   t->set_type_id(TFT_FOR_EACH);",
      "517:   t->add_args()->set_type_id(TFT_PRODUCT);",
      "519:   NodeDef ndef;",
      "520:   AttrSlice attrs(ndef);",
      "522:   FullTypeDef ft;",
      "523:   EXPECT_FALSE(SpecializeType(attrs, op, ft).ok());",
      "524: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0657c83d08845cc434175934c642299de2c0f042",
      "candidate_info": {
        "commit_hash": "0657c83d08845cc434175934c642299de2c0f042",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/0657c83d08845cc434175934c642299de2c0f042",
        "files": [
          "tensorflow/core/framework/full_type_util.cc"
        ],
        "message": "Fix heap OOB read/write due to incorrect indexing.\n\nPiperOrigin-RevId: 408578046\nChange-Id: Ifc9ffea49e5890f55fcb2c27568611052c3ddcfa",
        "before_after_code_files": [
          "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc": [
          "File: tensorflow/core/framework/full_type_util.cc -> tensorflow/core/framework/full_type_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     for (int j = 0; j < t->args_size(); j++) {",
          "104:       if (arg->type_id() == TFT_VAR) {",
          "105:         const auto* attr = attrs.Find(arg->s());",
          "106:         if (attr == nullptr) {",
          "",
          "[Removed Lines]",
          "103:       auto* arg = t->mutable_args(i);",
          "",
          "[Added Lines]",
          "103:       auto* arg = t->mutable_args(j);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a813a3f1631e9c0e0e0cc3032349a03a6041526c",
      "candidate_info": {
        "commit_hash": "a813a3f1631e9c0e0e0cc3032349a03a6041526c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a813a3f1631e9c0e0e0cc3032349a03a6041526c",
        "files": [
          "tensorflow/core/framework/full_type_util.cc",
          "tensorflow/core/framework/tensor.cc",
          "tensorflow/core/framework/tensor.h",
          "tensorflow/core/framework/tensor_test.cc",
          "tensorflow/core/framework/types.cc",
          "tensorflow/core/framework/types.h"
        ],
        "message": "Add basic FullType info to the Tensor class. The field is presently in compatibility mode - translated for basic Tensor types. The intent of this change is to evaluate feasibility (mainly, memory impact). Once stable, specialized constructors that allow more specific types can be added (while maintaining backward compatibility).\n\nPiperOrigin-RevId: 391778512\nChange-Id: I272a922c6538913bf6fb73b05a2fa678aede4b40",
        "before_after_code_files": [
          "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc",
          "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc",
          "tensorflow/core/framework/tensor.h||tensorflow/core/framework/tensor.h",
          "tensorflow/core/framework/tensor_test.cc||tensorflow/core/framework/tensor_test.cc",
          "tensorflow/core/framework/types.cc||tensorflow/core/framework/types.cc",
          "tensorflow/core/framework/types.h||tensorflow/core/framework/types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc": [
          "File: tensorflow/core/framework/full_type_util.cc -> tensorflow/core/framework/full_type_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:           const auto& attr_list = attr->list();",
          "99:           arg->set_type_id(TFT_PRODUCT);",
          "100:           for (int i = 0; i < attr_list.type_size(); i++) {",
          "102:           }",
          "104:         } else if (attr->value_case() == AttrValue::kType) {",
          "107:         } else {",
          "108:           return Status(error::UNIMPLEMENTED,",
          "",
          "[Removed Lines]",
          "101:             DataTypeToFullType(attr_list.type(i), *(arg->add_args()));",
          "105:           DataTypeToFullType(attr->type(), *arg);",
          "",
          "[Added Lines]",
          "101:             map_dtype_to_tensor(attr_list.type(i), arg->add_args());",
          "105:           map_dtype_to_tensor(attr->type(), arg);",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc": [
          "File: tensorflow/core/framework/tensor.cc -> tensorflow/core/framework/tensor.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "649: Tensor::Tensor() : Tensor(DT_FLOAT) {}",
          "656: Tensor::Tensor(DataType type, const TensorShape& shape, TensorBuffer* buf)",
          "657:     : shape_(shape), buf_(buf) {",
          "",
          "[Removed Lines]",
          "651: Tensor::Tensor(DataType type) : shape_(type), buf_(nullptr) {",
          "652:   set_dtype(type);",
          "653:   DataTypeToFullType(type, type_);",
          "654: }",
          "",
          "[Added Lines]",
          "651: Tensor::Tensor(DataType type) : shape_(type), buf_(nullptr) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688:   CHECK_EQ(1, NumElements()) << \"Must have a one element tensor\";",
          "689: }",
          "696: Tensor::~Tensor() { UnrefIfNonNull(buf_); }",
          "698: Status Tensor::BitcastFrom(const Tensor& other, DataType dtype,",
          "",
          "[Removed Lines]",
          "691: void Tensor::set_dtype(DataType t) {",
          "692:   shape_.set_data_type(t);",
          "693:   DataTypeToFullType(t, type_);",
          "694: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor.h||tensorflow/core/framework/tensor.h": [
          "File: tensorflow/core/framework/tensor.h -> tensorflow/core/framework/tensor.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #define TENSORFLOW_CORE_FRAMEWORK_TENSOR_H_",
          "19: #include <cstdint>",
          "21: #include <type_traits>",
          "23: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "24: #include \"tensorflow/core/framework/allocator.h\"",
          "26: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "27: #include \"tensorflow/core/framework/tensor_types.h\"",
          "28: #include \"tensorflow/core/framework/types.h\"",
          "",
          "[Removed Lines]",
          "20: #include <iostream>",
          "25: #include \"tensorflow/core/framework/full_type.pb.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:   ~Tensor();",
          "266:   DataType dtype() const { return shape_.data_type(); }",
          "",
          "[Removed Lines]",
          "263:   const FullTypeDef& type() const { return type_; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "664:   void CheckType(DataType expected_dtype) const;",
          "665:   void CheckTypeAndIsAligned(DataType expected_dtype) const;",
          "666:   void CheckIsAlignedAndSingleElement() const;",
          "670:   static gtl::InlinedVector<int64_t, 4> ComputeFlatInnerDims(",
          "",
          "[Removed Lines]",
          "667:   void set_dtype(DataType t);",
          "",
          "[Added Lines]",
          "661:   void set_dtype(DataType t) { shape_.set_data_type(t); }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "673:       gtl::ArraySlice<int64_t> orig, int64_t num_out_dims);",
          "675:   TensorShape shape_;",
          "678:   TensorBuffer* buf_;",
          "680:   friend class DMAHelper;             // For access to buf_.",
          "",
          "[Removed Lines]",
          "677:   FullTypeDef type_;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "954: }",
          "956: inline Tensor::Tensor(const Tensor& other)",
          "958:   if (buf_) buf_->Ref();",
          "959: }",
          "961: inline Tensor::Tensor(Tensor&& other)",
          "965:   other.buf_ = nullptr;",
          "966: }",
          "",
          "[Removed Lines]",
          "957:     : shape_(other.shape()), type_(other.type_), buf_(other.buf_) {",
          "962:     : shape_(std::move(other.shape_)),",
          "963:       type_(std::move(other.type_)),",
          "964:       buf_(other.buf_) {",
          "",
          "[Added Lines]",
          "949:     : shape_(other.shape()), buf_(other.buf_) {",
          "954:     : shape_(std::move(other.shape_)), buf_(other.buf_) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1046:   if (&other != this) {",
          "1047:     shape_ = std::move(other.shape_);",
          "1049:     if (buf_) buf_->Unref();",
          "1050:     buf_ = other.buf_;",
          "1051:     other.buf_ = nullptr;",
          "",
          "[Removed Lines]",
          "1048:     type_ = std::move(other.type_);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor_test.cc||tensorflow/core/framework/tensor_test.cc": [
          "File: tensorflow/core/framework/tensor_test.cc -> tensorflow/core/framework/tensor_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: template <typename T>",
          "133: void TestCopies(const Tensor& t) {",
          "134:   {",
          "135:     Tensor t2(t.dtype());",
          "137:     ExpectEqual<T>(t, t2);",
          "139:   }",
          "140:   {",
          "141:     Tensor t2(t.dtype());",
          "142:     t2 = t;",
          "143:     ExpectEqual<T>(t, t2);",
          "145:   }",
          "146:   {",
          "147:     Tensor t2(t.dtype(), t.shape());",
          "148:     t2.flat<T>() = t.flat<T>();",
          "149:     ExpectEqual<T>(t, t2);",
          "151:   }",
          "152:   {",
          "153:     TensorProto proto;",
          "154:     t.AsProtoField(&proto);",
          "155:     Tensor t2(t.dtype());",
          "157:     ExpectEqual<T>(t, t2);",
          "159:   }",
          "160:   {",
          "161:     TensorProto proto;",
          "162:     t.AsProtoTensorContent(&proto);",
          "163:     Tensor t2(t.dtype());",
          "165:     ExpectEqual<T>(t, t2);",
          "170:     Tensor t3(t.dtype());",
          "174:   }",
          "175:   {",
          "176:     gtl::ArraySlice<T> values(t.flat<T>().data(), t.NumElements());",
          "177:     Tensor t2 = test::AsTensor(values, t.shape());",
          "178:     ExpectEqual<T>(t, t2);",
          "180:   }",
          "181:   {",
          "182:     Tensor t2 = t;",
          "183:     Tensor t3 = std::move(t2);",
          "184:     ExpectEqual<T>(t, t3);",
          "187:   }",
          "188:   {",
          "189:     Tensor t2 = t;",
          "190:     Tensor t3;",
          "191:     t3 = std::move(t2);",
          "192:     ExpectEqual<T>(t, t3);",
          "195:   }",
          "196:   {",
          "197:     Tensor t2 = t;",
          "198:     Tensor* t3 = &t2;",
          "200:     ExpectEqual<Variant>(t, *t3);",
          "203:   }",
          "204: }",
          "",
          "[Removed Lines]",
          "136:     EXPECT_TRUE(t2.CopyFrom(t, t.shape())) << \"CopyFrom\";",
          "138:     EXPECT_EQ(t.type(), t2.type()) << \"CopyFrom\";",
          "144:     EXPECT_EQ(t.type(), t2.type()) << \"operator=()\";",
          "150:     EXPECT_EQ(t.type(), t2.type()) << \"deep copy\";",
          "156:     EXPECT_TRUE(t2.FromProto(proto)) << \"AsProtoField()\";",
          "158:     EXPECT_EQ(t.type(), t2.type()) << \"AsProtoField()\";",
          "164:     EXPECT_TRUE(t2.FromProto(proto)) << \"AsProtoTensorContent()\";",
          "166:     EXPECT_EQ(t.type(), t2.type()) << \"AsProtoTensorContent()\";",
          "171:     EXPECT_TRUE(t3.FromProto(proto)) << \"AsProtoTensorContent() from copy\";",
          "172:     ExpectEqual<T>(t, t3);",
          "173:     EXPECT_EQ(t.type(), t2.type()) << \"AsProtoTensorContent() from copy\";",
          "179:     EXPECT_EQ(t.type(), t2.type()) << \"AsTensor\";",
          "185:     EXPECT_TRUE(t3.IsInitialized()) << \"Move constructor\";",
          "186:     EXPECT_EQ(t.type(), t3.type()) << \"Move constructor\";",
          "193:     EXPECT_TRUE(t3.IsInitialized()) << \"Move assignment\";",
          "194:     EXPECT_EQ(t.type(), t3.type()) << \"Move assignment\";",
          "201:     EXPECT_TRUE(t3->IsInitialized()) << \"Move self-assignment\";",
          "202:     EXPECT_EQ(t.type(), t3->type()) << \"Move self-assignment\";",
          "",
          "[Added Lines]",
          "135:     LOG(INFO) << \"CopyFrom()\";",
          "137:     EXPECT_TRUE(t2.CopyFrom(t, t.shape()));",
          "141:     LOG(INFO) << \"operator=()\";",
          "147:     LOG(INFO) << \"deep copy\";",
          "153:     LOG(INFO) << \"AsProtoField()\";",
          "157:     EXPECT_TRUE(t2.FromProto(proto));",
          "161:     LOG(INFO) << \"AsProtoTensorContent()\";",
          "165:     EXPECT_TRUE(t2.FromProto(proto));",
          "170:     EXPECT_TRUE(t3.FromProto(proto));",
          "171:     ExpectEqual<T>(t, t2);",
          "174:     LOG(INFO) << \"AsTensor\";",
          "180:     LOG(INFO) << \"Move constructor\";",
          "184:     EXPECT_TRUE(t3.IsInitialized());",
          "185:     EXPECT_FALSE(t2.IsInitialized());  // NOLINT(bugprone-use-after-move)",
          "188:     LOG(INFO) << \"Move assignment\";",
          "193:     EXPECT_TRUE(t3.IsInitialized());",
          "194:     EXPECT_FALSE(t2.IsInitialized());  // NOLINT(bugprone-use-after-move)",
          "197:     LOG(INFO) << \"Move self-assignment\";",
          "202:     EXPECT_TRUE(t3->IsInitialized());",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/types.cc||tensorflow/core/framework/types.cc": [
          "File: tensorflow/core/framework/types.cc -> tensorflow/core/framework/types.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/types.h\"",
          "19: #include \"tensorflow/core/framework/register_types.h\"",
          "20: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "21: #include \"tensorflow/core/lib/strings/strcat.h\"",
          "",
          "[Removed Lines]",
          "18: #include \"tensorflow/core/framework/full_type.pb.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: namespace tensorflow {",
          "26: bool DeviceType::operator<(const DeviceType& other) const {",
          "27:   return type_ < other.type_;",
          "28: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: struct DataTypeHasher {",
          "25:   std::size_t operator()(const DataType& k) const {",
          "26:     return std::hash<int>()(static_cast<int>(k));",
          "27:   }",
          "28: };",
          "33: auto* DT_TO_FT = new std::unordered_map<DataType, FullTypeId, DataTypeHasher>({",
          "34:     {DT_FLOAT, TFT_FLOAT},",
          "35:     {DT_DOUBLE, TFT_DOUBLE},",
          "36:     {DT_INT32, TFT_INT32},",
          "37:     {DT_UINT8, TFT_UINT8},",
          "38:     {DT_INT16, TFT_INT16},",
          "39:     {DT_INT8, TFT_INT8},",
          "40:     {DT_STRING, TFT_STRING},",
          "41:     {DT_COMPLEX64, TFT_COMPLEX64},",
          "42:     {DT_INT64, TFT_INT64},",
          "43:     {DT_BOOL, TFT_BOOL},",
          "44:     {DT_UINT16, TFT_UINT16},",
          "45:     {DT_COMPLEX128, TFT_COMPLEX128},",
          "46:     {DT_HALF, TFT_HALF},",
          "47:     {DT_UINT32, TFT_UINT32},",
          "48:     {DT_UINT64, TFT_UINT64},",
          "49: });",
          "51: void map_dtype_to_tensor(const DataType& dtype, FullTypeDef* t) {",
          "52:   t->set_type_id(TFT_TENSOR);",
          "55:   const auto& mapped = DT_TO_FT->find(dtype);",
          "56:   auto* arg = t->add_args();",
          "57:   if (mapped != DT_TO_FT->end()) {",
          "58:     arg->set_type_id(mapped->second);",
          "59:   } else {",
          "60:     arg->set_type_id(TFT_ANY);",
          "61:   }",
          "62: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:       return strings::StrCat(\"unknown dtype enum (\", dtype, \")\");",
          "105:   }",
          "106: }",
          "169: string DataTypeString(DataType dtype) {",
          "170:   if (IsRefType(dtype)) {",
          "",
          "[Removed Lines]",
          "108: void ToTensorOf(const FullTypeId& param, FullTypeDef& t) {",
          "109:   t.set_type_id(TFT_TENSOR);",
          "110:   t.clear_args();",
          "111:   t.add_args()->set_type_id(param);",
          "112: }",
          "114: }  // namespace",
          "116: void DataTypeToFullType(const DataType& dtype, FullTypeDef& t) {",
          "117:   switch (dtype) {",
          "118:     case DT_FLOAT:",
          "119:       ToTensorOf(TFT_FLOAT, t);",
          "120:       break;",
          "121:     case DT_DOUBLE:",
          "122:       ToTensorOf(TFT_DOUBLE, t);",
          "123:       break;",
          "124:     case DT_INT32:",
          "125:       ToTensorOf(TFT_INT32, t);",
          "126:       break;",
          "127:     case DT_UINT8:",
          "128:       ToTensorOf(TFT_UINT8, t);",
          "129:       break;",
          "130:     case DT_INT16:",
          "131:       ToTensorOf(TFT_INT16, t);",
          "132:       break;",
          "133:     case DT_INT8:",
          "134:       ToTensorOf(TFT_INT8, t);",
          "135:       break;",
          "136:     case DT_STRING:",
          "137:       ToTensorOf(TFT_STRING, t);",
          "138:       break;",
          "139:     case DT_COMPLEX64:",
          "140:       ToTensorOf(TFT_COMPLEX64, t);",
          "141:       break;",
          "142:     case DT_INT64:",
          "143:       ToTensorOf(TFT_INT64, t);",
          "144:       break;",
          "145:     case DT_BOOL:",
          "146:       ToTensorOf(TFT_BOOL, t);",
          "147:       break;",
          "148:     case DT_UINT16:",
          "149:       ToTensorOf(TFT_UINT16, t);",
          "150:       break;",
          "151:     case DT_COMPLEX128:",
          "152:       ToTensorOf(TFT_COMPLEX128, t);",
          "153:       break;",
          "154:     case DT_HALF:",
          "155:       ToTensorOf(TFT_HALF, t);",
          "156:       break;",
          "157:     case DT_UINT32:",
          "158:       ToTensorOf(TFT_UINT32, t);",
          "159:       break;",
          "160:     case DT_UINT64:",
          "161:       ToTensorOf(TFT_UINT64, t);",
          "162:       break;",
          "163:     default:",
          "164:       t.set_type_id(TFT_ANY);",
          "165:       t.clear_args();",
          "166:   }",
          "167: }",
          "",
          "[Added Lines]",
          "145: }  // end namespace",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/types.h||tensorflow/core/framework/types.h": [
          "File: tensorflow/core/framework/types.h -> tensorflow/core/framework/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: typedef gtl::InlinedVector<std::pair<DeviceType, int32>, 4>",
          "106:     PrioritizedDeviceTypeVector;",
          "115: std::string DataTypeString(DataType dtype);",
          "116: std::string DeviceTypeString(const DeviceType& device_type);",
          "",
          "[Removed Lines]",
          "112: void DataTypeToFullType(const DataType& dtype, FullTypeDef& t);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c3f96bf324cebe443a7eb814ce771c66c073998",
      "candidate_info": {
        "commit_hash": "7c3f96bf324cebe443a7eb814ce771c66c073998",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/7c3f96bf324cebe443a7eb814ce771c66c073998",
        "files": [
          "tensorflow/c/python_api.cc",
          "tensorflow/core/framework/BUILD",
          "tensorflow/core/framework/full_type.proto",
          "tensorflow/core/framework/full_type_util.cc",
          "tensorflow/core/framework/full_type_util.h",
          "tensorflow/core/framework/shape_inference.cc",
          "tensorflow/core/framework/shape_inference.h",
          "tensorflow/core/framework/types.proto",
          "tensorflow/core/graph/node_builder.cc",
          "tensorflow/core/ops/dataset_ops.cc",
          "tensorflow/core/ops/list_ops.cc",
          "tensorflow/python/framework/cpp_shape_inference.proto",
          "tensorflow/python/kernel_tests/list_ops_test.py",
          "tensorflow/python/kernel_tests/resource_variable_ops_test.py",
          "tensorflow/python/ops/list_ops.py",
          "tensorflow/python/ops/parallel_for/pfor.py"
        ],
        "message": "Upgrade SpecializedType to FullType. Move the type constructor execution to shape inference, making type information available to the shape inference functions.\n\nPiperOrigin-RevId: 380190719\nChange-Id: Ib7fa05d005f5839fb1a1ae5699fe67ec17b10f70",
        "before_after_code_files": [
          "tensorflow/c/python_api.cc||tensorflow/c/python_api.cc",
          "tensorflow/core/framework/full_type.proto||tensorflow/core/framework/full_type.proto",
          "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc",
          "tensorflow/core/framework/full_type_util.h||tensorflow/core/framework/full_type_util.h",
          "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
          "tensorflow/core/framework/shape_inference.h||tensorflow/core/framework/shape_inference.h",
          "tensorflow/core/framework/types.proto||tensorflow/core/framework/types.proto",
          "tensorflow/core/graph/node_builder.cc||tensorflow/core/graph/node_builder.cc",
          "tensorflow/core/ops/dataset_ops.cc||tensorflow/core/ops/dataset_ops.cc",
          "tensorflow/core/ops/list_ops.cc||tensorflow/core/ops/list_ops.cc",
          "tensorflow/python/framework/cpp_shape_inference.proto||tensorflow/python/framework/cpp_shape_inference.proto",
          "tensorflow/python/kernel_tests/list_ops_test.py||tensorflow/python/kernel_tests/list_ops_test.py",
          "tensorflow/python/kernel_tests/resource_variable_ops_test.py||tensorflow/python/kernel_tests/resource_variable_ops_test.py",
          "tensorflow/python/ops/list_ops.py||tensorflow/python/ops/list_ops.py",
          "tensorflow/python/ops/parallel_for/pfor.py||tensorflow/python/ops/parallel_for/pfor.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/c/python_api.cc||tensorflow/c/python_api.cc": [
          "File: tensorflow/c/python_api.cc -> tensorflow/c/python_api.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:       auto* out_shape_and_type = handle_data.add_shape_and_type();",
          "101:       ic->ShapeHandleToProto(p.shape, out_shape_and_type->mutable_shape());",
          "102:       out_shape_and_type->set_dtype(p.dtype);",
          "104:     }",
          "105:   }",
          "106:   string result;",
          "",
          "[Removed Lines]",
          "103:       out_shape_and_type->set_specialized_type(p.specialized_type);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:         ic->MakeShapeFromShapeProto(shape_and_type_proto.shape(), &shape);",
          "130:     if (TF_GetCode(status) != TF_OK) return;",
          "131:     shapes_and_types.emplace_back(shape, shape_and_type_proto.dtype(),",
          "133:   }",
          "134:   ic->set_output_handle_shapes_and_types(output.index, shapes_and_types);",
          "135: }",
          "",
          "[Removed Lines]",
          "132:                                   shape_and_type_proto.specialized_type());",
          "",
          "[Added Lines]",
          "132:                                   shape_and_type_proto.type());",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/full_type.proto||tensorflow/core/framework/full_type.proto": [
          "File: tensorflow/core/framework/full_type.proto -> tensorflow/core/framework/full_type.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:   TFT_ARRAY = 1001;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:   TFT_OPTIONAL = 1002;",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc": [
          "File: tensorflow/core/framework/full_type_util.cc -> tensorflow/core/framework/full_type_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/full_type_util.h\"",
          "18: namespace tensorflow {",
          "20: namespace full_type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"tensorflow/core/framework/attr_value.pb.h\"",
          "19: #include \"tensorflow/core/framework/full_type.pb.h\"",
          "20: #include \"tensorflow/core/framework/node_def.pb.h\"",
          "21: #include \"tensorflow/core/framework/node_def_util.h\"",
          "22: #include \"tensorflow/core/framework/op_def.pb.h\"",
          "23: #include \"tensorflow/core/framework/types.h\"",
          "24: #include \"tensorflow/core/platform/statusor.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   };",
          "62: }",
          "64: }  // namespace full_type",
          "66: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: StatusOr<FullTypeDef> SpecializeType(const AttrSlice& attrs,",
          "73:                                      const OpDef& op_def) {",
          "74:   FullTypeDef ft;",
          "75:   ft.set_type_id(TFT_PRODUCT);",
          "77:   for (int i = 0; i < op_def.output_arg_size(); i++) {",
          "78:     auto* t = ft.add_args();",
          "92:     for (int j = 0; j < t->args_size(); j++) {",
          "93:       auto* arg = t->mutable_args(i);",
          "94:       if (arg->type_id() == TFT_VAR) {",
          "95:         const auto* attr = attrs.Find(arg->s());",
          "96:         DCHECK(attr != nullptr);",
          "97:         if (attr->value_case() == AttrValue::kList) {",
          "98:           const auto& attr_list = attr->list();",
          "99:           arg->set_type_id(TFT_PRODUCT);",
          "100:           for (int i = 0; i < attr_list.type_size(); i++) {",
          "101:             map_dtype_to_tensor(attr_list.type(i), arg->add_args());",
          "102:           }",
          "104:         } else if (attr->value_case() == AttrValue::kType) {",
          "105:           map_dtype_to_tensor(attr->type(), arg);",
          "107:         } else {",
          "108:           return Status(error::UNIMPLEMENTED,",
          "109:                         absl::StrCat(\"unknown attribute type\",",
          "110:                                      attrs.DebugString(), \" key=\", arg->s()));",
          "111:         }",
          "113:         arg->clear_s();",
          "114:       }",
          "115:     }",
          "116:   }",
          "118:   return ft;",
          "119: }",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/full_type_util.h||tensorflow/core/framework/full_type_util.h": [
          "File: tensorflow/core/framework/full_type_util.h -> tensorflow/core/framework/full_type_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #define CORE_FRAMEWORK_FULL_TYPE_UTIL_H_",
          "19: #include <functional>",
          "21: #include \"tensorflow/core/framework/full_type.pb.h\"",
          "22: #include \"tensorflow/core/framework/op_def_builder.h\"",
          "24: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <string>",
          "23: #include \"tensorflow/core/framework/node_def.pb.h\"",
          "24: #include \"tensorflow/core/framework/node_def_util.h\"",
          "25: #include \"tensorflow/core/framework/op_def.pb.h\"",
          "27: #include \"tensorflow/core/platform/statusor.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: OpTypeConstructor UnaryTensorContainer(FullTypeId t, FullTypeId dtype);",
          "47: }  // namespace full_type",
          "49: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: StatusOr<FullTypeDef> SpecializeType(const AttrSlice& attrs,",
          "57:                                      const OpDef& op_def);",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc": [
          "File: tensorflow/core/framework/shape_inference.cc -> tensorflow/core/framework/shape_inference.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include \"tensorflow/core/framework/shape_inference.h\"",
          "17: #include \"tensorflow/core/framework/bounds_check.h\"",
          "18: #include \"tensorflow/core/framework/node_def.pb.h\"",
          "19: #include \"tensorflow/core/framework/partial_tensor_shape.h\"",
          "20: #include \"tensorflow/core/framework/tensor_shape.pb.h\"",
          "21: #include \"tensorflow/core/lib/core/errors.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"tensorflow/core/framework/full_type_util.h\"",
          "20: #include \"tensorflow/core/framework/op_def.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166: void InferenceContext::PreInputInit(",
          "167:     const OpDef& op_def, const std::vector<const Tensor*>& input_tensors,",
          "168:     const std::vector<ShapeHandle>& input_tensors_as_shapes) {",
          "169:   input_tensors_ = input_tensors;",
          "170:   input_tensors_as_shapes_ = input_tensors_as_shapes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:   const auto ret = full_type::SpecializeType(attrs_, op_def);",
          "173:   DCHECK(ret.status().ok()) << \"while instantiating types: \" << ret.status();",
          "174:   ret_types_ = ret.ValueOrDie();",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/shape_inference.h||tensorflow/core/framework/shape_inference.h": [
          "File: tensorflow/core/framework/shape_inference.h -> tensorflow/core/framework/shape_inference.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <vector>",
          "20: #include \"absl/memory/memory.h\"",
          "21: #include \"tensorflow/core/framework/node_def_util.h\"",
          "22: #include \"tensorflow/core/framework/tensor.h\"",
          "23: #include \"tensorflow/core/lib/core/errors.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"tensorflow/core/framework/full_type.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133: struct ShapeAndType {",
          "134:   ShapeAndType() {}",
          "135:   ShapeAndType(ShapeHandle s, DataType t) : shape(s), dtype(t) {}",
          "139:   ShapeHandle shape;",
          "140:   DataType dtype = DT_INVALID;",
          "144: };",
          "",
          "[Removed Lines]",
          "136:   ShapeAndType(ShapeHandle s, DataType t, SpecializedType specialized_t)",
          "137:       : shape(s), dtype(t), specialized_type(specialized_t) {}",
          "143:   SpecializedType specialized_type = ST_INVALID;",
          "",
          "[Added Lines]",
          "140:   ShapeAndType(ShapeHandle s, DataType t, FullTypeDef type_)",
          "141:       : shape(s), dtype(t), type(type_) {}",
          "145:   FullTypeDef type;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "325:   const AttrSlice& attrs() const { return attrs_; }",
          "329:   DimensionHandle Dim(ShapeHandle s, int64 idx) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:   const FullTypeDef& ret_types() const { return ret_types_; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "754:   std::vector<std::unique_ptr<std::vector<ShapeAndType>>>",
          "755:       output_handle_shapes_and_types_;",
          "757:   const int graph_def_version_;",
          "758:   AttrSlice attrs_;",
          "759:   NameRangeMap input_name_map_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764:   FullTypeDef ret_types_;",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/types.proto||tensorflow/core/framework/types.proto": [
          "File: tensorflow/core/framework/types.proto -> tensorflow/core/framework/types.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "84: enum SpecializedType {",
          "86:   ST_INVALID = 0;",
          "88:   ST_TENSOR_LIST = 1;",
          "90:   ST_OPTIONAL = 2;",
          "91: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/core/graph/node_builder.cc||tensorflow/core/graph/node_builder.cc": [
          "File: tensorflow/core/graph/node_builder.cc -> tensorflow/core/graph/node_builder.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <unordered_map>",
          "19: #include <vector>",
          "21: #include \"tensorflow/core/framework/node_def_util.h\"",
          "22: #include \"tensorflow/core/framework/types.pb.h\"",
          "23: #include \"tensorflow/core/framework/versions.pb.h\"",
          "24: #include \"tensorflow/core/lib/core/errors.h\"",
          "25: #include \"tensorflow/core/protobuf/error_codes.pb.h\"",
          "27: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"tensorflow/core/framework/full_type.pb.h\"",
          "22: #include \"tensorflow/core/framework/full_type_util.h\"",
          "27: #include \"tensorflow/core/platform/statusor.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119: namespace {",
          "125:   const auto* op_registry = graph->op_registry();",
          "126:   const tensorflow::OpRegistrationData* op_reg_data;",
          "128:   if (op_reg_data->type_ctor == nullptr) {",
          "130:   }",
          "175: }",
          "177: }  // namespace",
          "",
          "[Removed Lines]",
          "121: Status run_type_constructor(Graph* graph, NodeDef* node_def, FullTypeDef* ft) {",
          "127:   TF_RETURN_IF_ERROR(op_registry->LookUp(node_def->op(), &op_reg_data));",
          "129:     return Status::OK();",
          "132:   ft->set_type_id(TFT_PRODUCT);",
          "134:   for (int i = 0; i < op_reg_data->op_def.output_arg_size(); i++) {",
          "135:     auto* t = ft->add_args();",
          "137:     t->CopyFrom(op_reg_data->op_def.output_arg(i).experimental_full_type());",
          "149:     for (int j = 0; j < t->args_size(); j++) {",
          "150:       auto* arg = t->mutable_args(i);",
          "151:       if (arg->type_id() == TFT_VAR) {",
          "152:         const auto& attr_val = node_def->attr().at(arg->s());",
          "153:         if (attr_val.value_case() == AttrValue::kList) {",
          "154:           const auto& attr_list = attr_val.list();",
          "155:           arg->set_type_id(TFT_PRODUCT);",
          "156:           for (int i = 0; i < attr_list.type_size(); i++) {",
          "157:             map_dtype_to_tensor(attr_list.type(i), arg->add_args());",
          "158:           }",
          "160:         } else if (attr_val.value_case() == AttrValue::kType) {",
          "161:           map_dtype_to_tensor(attr_val.type(), arg);",
          "163:         } else {",
          "164:           return Status(error::UNIMPLEMENTED,",
          "165:                         absl::StrCat(\"unknown attribute type\",",
          "166:                                      node_def->DebugString().c_str()));",
          "167:         }",
          "169:         arg->clear_s();",
          "170:       }",
          "171:     }",
          "172:   }",
          "174:   return Status::OK();",
          "",
          "[Added Lines]",
          "124: StatusOr<FullTypeDef> run_type_constructor(Graph* graph,",
          "125:                                            const NodeDef& node_def) {",
          "129:   TF_RETURN_IF_ERROR(op_registry->LookUp(node_def.op(), &op_reg_data));",
          "132:     return FullTypeDef();",
          "136:   return full_type::SpecializeType(AttrSlice(node_def), op_reg_data->op_def);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:   TF_RETURN_IF_ERROR(",
          "190:       CheckOpDeprecation(def_builder_.op_def(), graph->versions().producer()));",
          "196:   Node* node = graph->AddNode(std::move(node_def), &status);",
          "199:   if (ft.type_id() != TFT_UNSET) {",
          "200:     graph->SetNodeType(node->name(), ft);",
          "201:   }",
          "",
          "[Removed Lines]",
          "192:   FullTypeDef ft;",
          "193:   Status status = run_type_constructor(graph, &node_def, &ft);",
          "194:   if (!status.ok()) return status;",
          "197:   if (!status.ok()) return status;",
          "",
          "[Added Lines]",
          "154:   const auto ret = run_type_constructor(graph, node_def);",
          "155:   TF_RETURN_IF_ERROR(ret.status());",
          "157:   Status status;",
          "159:   TF_RETURN_IF_ERROR(status);",
          "161:   FullTypeDef ft = ret.ValueOrDie();",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/dataset_ops.cc||tensorflow/core/ops/dataset_ops.cc": [
          "File: tensorflow/core/ops/dataset_ops.cc -> tensorflow/core/ops/dataset_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: limitations under the License.",
          "15: #include \"tensorflow/core/framework/common_shape_fns.h\"",
          "16: #include \"tensorflow/core/framework/op.h\"",
          "17: #include \"tensorflow/core/framework/op_def_builder.h\"",
          "18: #include \"tensorflow/core/framework/shape_inference.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include \"tensorflow/core/framework/full_type.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "867:     .Input(\"components: Toutput_types\")",
          "868:     .Output(\"optional: variant\")",
          "869:     .Attr(\"Toutput_types: list(type) >= 1\")",
          "870:     .SetShapeFn([](shape_inference::InferenceContext* c) {",
          "871:       std::vector<DataType> dtypes;",
          "872:       TF_RETURN_IF_ERROR(c->GetAttr(\"Toutput_types\", &dtypes));",
          "873:       c->set_output(0, c->Scalar());",
          "874:       std::vector<shape_inference::ShapeAndType> shapes_and_types;",
          "875:       shapes_and_types.reserve(c->num_inputs());",
          "876:       for (int i = 0; i < c->num_inputs(); ++i) {",
          "878:       }",
          "879:       c->set_output_handle_shapes_and_types(0, shapes_and_types);",
          "880:       return Status::OK();",
          "",
          "[Removed Lines]",
          "877:         shapes_and_types.emplace_back(c->input(i), dtypes[i], ST_OPTIONAL);",
          "",
          "[Added Lines]",
          "871:     .SetTypeConstructor(full_type::Unary(TFT_OPTIONAL, \"Toutput_types\"))",
          "878:       const FullTypeDef& ret_types = c->ret_types();",
          "892:         shapes_and_types.emplace_back(c->input(i), dtypes[i],",
          "893:                                       ret_types.args(0));",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/list_ops.cc||tensorflow/core/ops/list_ops.cc": [
          "File: tensorflow/core/ops/list_ops.cc -> tensorflow/core/ops/list_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/common_shape_fns.h\"",
          "17: #include \"tensorflow/core/framework/op.h\"",
          "18: #include \"tensorflow/core/framework/shape_inference.h\"",
          "19: #include \"tensorflow/core/framework/types.pb.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include \"tensorflow/core/framework/full_type.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:       shape_inference::ShapeHandle element_shape;",
          "69:       TF_RETURN_IF_ERROR(c->MakeShapeFromShapeTensorTreatScalarAsUnknownShape(",
          "70:           0, &element_shape));",
          "71:       c->set_output_handle_shapes_and_types(",
          "72:           0, std::vector<shape_inference::ShapeAndType>{",
          "74:       return Status::OK();",
          "75:     });",
          "",
          "[Removed Lines]",
          "73:                  {element_shape, element_dtype, ST_TENSOR_LIST}});",
          "",
          "[Added Lines]",
          "72:       const FullTypeDef& ret_types = c->ret_types();",
          "75:                  {element_shape, element_dtype, ret_types.args(0)}});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:             c->Merge(element_shape, list_shape_type.shape, &ignored));",
          "107:         element_shape = list_shape_type.shape;",
          "108:       }",
          "109:       c->set_output_handle_shapes_and_types(",
          "110:           0, std::vector<shape_inference::ShapeAndType>{",
          "112:       return Status::OK();",
          "113:     });",
          "",
          "[Removed Lines]",
          "111:                  {element_shape, element_dtype, ST_TENSOR_LIST}});",
          "",
          "[Added Lines]",
          "111:       const FullTypeDef& ret_types = c->ret_types();",
          "114:                  {element_shape, element_dtype, ret_types.args(0)}});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:             c->Merge(element_shape, list_shape_type.shape, &ignored));",
          "156:         element_shape = list_shape_type.shape;",
          "157:       }",
          "158:       c->set_output_handle_shapes_and_types(",
          "159:           0, std::vector<shape_inference::ShapeAndType>{",
          "161:       return Status::OK();",
          "162:     });",
          "",
          "[Removed Lines]",
          "160:                  {element_shape, element_dtype, ST_TENSOR_LIST}});",
          "",
          "[Added Lines]",
          "161:       const FullTypeDef& ret_types = c->ret_types();",
          "164:                  {element_shape, element_dtype, ret_types.args(0)}});",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "184:       if (IsValidTensorListHandleData(handle_data)) {",
          "185:         const shape_inference::ShapeAndType& list_shape_type =",
          "186:             (*handle_data)[0];",
          "187:         if (list_shape_type.dtype != element_dtype) {",
          "188:           return errors::InvalidArgument(",
          "189:               \"Trying to read from list with wrong element dtype. List has \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:         if (list_shape_type.type.type_id() != TFT_ARRAY) {",
          "192:           return errors::InvalidArgument(\"Input agument must be a list.\");",
          "193:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "348:       TF_RETURN_IF_ERROR(c->Merge(element_shape_from_tensor_shape,",
          "349:                                   element_shape,",
          "350:                                   &element_shape_from_tensor_shape));",
          "351:       c->set_output_handle_shapes_and_types(",
          "352:           0, std::vector<shape_inference::ShapeAndType>{",
          "354:       return Status::OK();",
          "355:     });",
          "",
          "[Removed Lines]",
          "353:                  {element_shape, element_dtype, ST_TENSOR_LIST}});",
          "",
          "[Added Lines]",
          "358:       const FullTypeDef& ret_types = c->ret_types();",
          "361:                  {element_shape, element_dtype, ret_types.args(0)}});",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "374:           1, &element_shape));",
          "375:       TF_RETURN_IF_ERROR(c->Merge(tensor_shape_except_first_dim, element_shape,",
          "376:                                   &tensor_shape_except_first_dim));",
          "377:       c->set_output_handle_shapes_and_types(",
          "378:           0, std::vector<shape_inference::ShapeAndType>{",
          "380:       return Status::OK();",
          "381:     });",
          "",
          "[Removed Lines]",
          "379:                  {element_shape, element_dtype, ST_TENSOR_LIST}});",
          "",
          "[Added Lines]",
          "385:       const FullTypeDef& ret_types = c->ret_types();",
          "388:                  {element_shape, element_dtype, ret_types.args(0)}});",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "415:           0, &element_shape));",
          "416:       DataType element_dtype;",
          "417:       TF_RETURN_IF_ERROR(c->GetAttr(\"element_dtype\", &element_dtype));",
          "418:       c->set_output_handle_shapes_and_types(",
          "419:           0, std::vector<shape_inference::ShapeAndType>{",
          "421:       return Status::OK();",
          "422:     });",
          "",
          "[Removed Lines]",
          "420:                  {element_shape, element_dtype, ST_TENSOR_LIST}});",
          "",
          "[Added Lines]",
          "427:       const FullTypeDef& ret_types = c->ret_types();",
          "430:                  {element_shape, element_dtype, ret_types.args(0)}});",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "489:             c->Merge(item_shape, list_shape_type.shape, &item_shape));",
          "490:         c->set_output_handle_shapes_and_types(0, *handle_data);",
          "491:       } else {",
          "492:         c->set_output_handle_shapes_and_types(",
          "494:       }",
          "495:       return Status::OK();",
          "496:     });",
          "",
          "[Removed Lines]",
          "493:             0, {{c->UnknownShape(), element_dtype, ST_TENSOR_LIST}});",
          "",
          "[Added Lines]",
          "502:         const FullTypeDef& ret_types = c->ret_types();",
          "504:             0, std::vector<shape_inference::ShapeAndType>{",
          "505:                    {c->UnknownShape(), element_dtype, ret_types.args(0)}});",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "542:       shape_inference::ShapeHandle element_shape;",
          "543:       TF_RETURN_IF_ERROR(c->MakeShapeFromShapeTensorTreatScalarAsUnknownShape(",
          "544:           2, &element_shape));",
          "545:       c->set_output_handle_shapes_and_types(",
          "547:       c->set_output(0, c->Scalar());",
          "548:       return Status::OK();",
          "549:     });",
          "",
          "[Removed Lines]",
          "546:           0, {{element_shape, element_dtype, ST_TENSOR_LIST}});",
          "",
          "[Added Lines]",
          "557:       const FullTypeDef& ret_types = c->ret_types();",
          "559:           0, std::vector<shape_inference::ShapeAndType>{",
          "560:                  {element_shape, element_dtype, ret_types.args(0)}});",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "563:       shape_inference::ShapeHandle element_shape;",
          "564:       TF_RETURN_IF_ERROR(c->MakeShapeFromShapeTensorTreatScalarAsUnknownShape(",
          "565:           2, &element_shape));",
          "566:       c->set_output_handle_shapes_and_types(",
          "568:       c->set_output(0, c->Scalar());",
          "569:       return Status::OK();",
          "570:     });",
          "",
          "[Removed Lines]",
          "567:           0, {{element_shape, element_dtype, ST_TENSOR_LIST}});",
          "",
          "[Added Lines]",
          "580:       const FullTypeDef& ret_types = c->ret_types();",
          "582:           0, std::vector<shape_inference::ShapeAndType>{",
          "583:                  {element_shape, element_dtype, ret_types.args(0)}});",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "592:         TF_RETURN_IF_ERROR(VerifyHandleData(c, *handle_data, element_dtype));",
          "593:         element_shape = GetElementShapeFromHandleData(*handle_data);",
          "594:       }",
          "595:       c->set_output_handle_shapes_and_types(",
          "597:       c->set_output(0, c->Scalar());",
          "598:       return Status::OK();",
          "599:     });",
          "",
          "[Removed Lines]",
          "596:           0, {{element_shape, element_dtype, ST_TENSOR_LIST}});",
          "",
          "[Added Lines]",
          "611:       const FullTypeDef& ret_types = c->ret_types();",
          "613:           0, std::vector<shape_inference::ShapeAndType>{",
          "614:                  {element_shape, element_dtype, ret_types.args(0)}});",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "618:       bool handle_data_a_nonempty = handle_data_a && !handle_data_a->empty();",
          "619:       bool handle_data_b_nonempty = handle_data_b && !handle_data_b->empty();",
          "620:       if (!(handle_data_a_nonempty || handle_data_b_nonempty)) {",
          "621:         c->set_output_handle_shapes_and_types(",
          "623:         return Status::OK();",
          "624:       }",
          "625:       shape_inference::ShapeAndType list_shape_type_a =",
          "",
          "[Removed Lines]",
          "622:             0, {{c->UnknownShape(), element_dtype, ST_TENSOR_LIST}});",
          "",
          "[Added Lines]",
          "639:         const FullTypeDef& ret_types = c->ret_types();",
          "641:             0, {{c->UnknownShape(), element_dtype, ret_types.args(0)}});",
          "",
          "---------------"
        ],
        "tensorflow/python/framework/cpp_shape_inference.proto||tensorflow/python/framework/cpp_shape_inference.proto": [
          "File: tensorflow/python/framework/cpp_shape_inference.proto -> tensorflow/python/framework/cpp_shape_inference.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: syntax = \"proto3\";",
          "3: package tensorflow;",
          "8: import \"tensorflow/core/framework/tensor_shape.proto\";",
          "10: message CppShapeInferenceResult {",
          "11:   message HandleShapeAndType {",
          "12:     TensorShapeProto shape = 1;",
          "13:     DataType dtype = 2;",
          "18:   }",
          "19:   message HandleData {",
          "20:     bool is_set = 1;",
          "",
          "[Removed Lines]",
          "4: option cc_enable_arenas = true;",
          "5: option go_package = \"github.com/tensorflow/tensorflow/tensorflow/go/python/framework/cpp_shape_inference_go_proto\";",
          "7: import \"tensorflow/core/framework/types.proto\";",
          "17:     SpecializedType specialized_type = 3;",
          "",
          "[Added Lines]",
          "5: import \"tensorflow/core/framework/full_type.proto\";",
          "7: import \"tensorflow/core/framework/types.proto\";",
          "9: option cc_enable_arenas = true;",
          "10: option go_package = \"github.com/tensorflow/tensorflow/tensorflow/go/python/framework/cpp_shape_inference_go_proto\";",
          "14:     reserved 3;",
          "18:     FullTypeDef type = 4;",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/list_ops_test.py||tensorflow/python/kernel_tests/list_ops_test.py": [
          "File: tensorflow/python/kernel_tests/list_ops_test.py -> tensorflow/python/kernel_tests/list_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: from absl.testing import parameterized",
          "23: import numpy as np  # pylint: disable=unused-import",
          "26: from tensorflow.python.client import session",
          "27: from tensorflow.python.eager import backprop",
          "28: from tensorflow.python.eager import context",
          "",
          "[Removed Lines]",
          "25: from tensorflow.core.framework import types_pb2",
          "",
          "[Added Lines]",
          "25: from tensorflow.core.framework import full_type_pb2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1627:       l = list_ops.tensor_list_from_tensor(t, element_shape=[])",
          "1628:       handle_data = resource_variable_ops.get_eager_safe_handle_data(l)",
          "1629:       self.assertTrue(handle_data.is_set)",
          "1632:       return l",
          "1634:     tensor_list = func()",
          "1635:     handle_data = resource_variable_ops.get_eager_safe_handle_data(tensor_list)",
          "1636:     self.assertTrue(handle_data.is_set)",
          "1637:     self.assertEqual(dtypes.float32, handle_data.shape_and_type[0].dtype)",
          "1640:     element = list_ops.tensor_list_get_item(",
          "1641:         tensor_list, 0, element_dtype=dtypes.float32)",
          "1642:     self.assertAllEqual(element.shape.as_list(), [])",
          "",
          "[Removed Lines]",
          "1630:       self.assertEqual(types_pb2.ST_TENSOR_LIST,",
          "1631:                        handle_data.shape_and_type[0].specialized_type)",
          "1638:     self.assertEqual(types_pb2.ST_TENSOR_LIST,",
          "1639:                      handle_data.shape_and_type[0].specialized_type)",
          "",
          "[Added Lines]",
          "1630:       self.assertEqual(handle_data.shape_and_type[0].type.type_id,",
          "1631:                        full_type_pb2.TFT_ARRAY)",
          "1638:     self.assertEqual(handle_data.shape_and_type[0].type.type_id,",
          "1639:                      full_type_pb2.TFT_ARRAY)",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/resource_variable_ops_test.py||tensorflow/python/kernel_tests/resource_variable_ops_test.py": [
          "File: tensorflow/python/kernel_tests/resource_variable_ops_test.py -> tensorflow/python/kernel_tests/resource_variable_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: from absl.testing import parameterized",
          "27: import numpy as np",
          "29: from tensorflow.core.framework import tensor_pb2",
          "30: from tensorflow.python.eager import backprop",
          "31: from tensorflow.python.eager import context",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: from tensorflow.core.framework import full_type_pb2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1371:     # NOTE(ebrevdo): shape_and_type lacks append() in some versions of protobuf.",
          "1372:     variant_shape_and_type_data.shape_and_type.extend([",
          "1373:         cpp_shape_inference_pb2.CppShapeInferenceResult.HandleShapeAndType(",
          "1375:     return variant_shape_and_type_data",
          "1377:   @def_function.function",
          "",
          "[Removed Lines]",
          "1374:             shape=stored_shape, dtype=stored_dtype)])",
          "",
          "[Added Lines]",
          "1375:             shape=stored_shape,",
          "1376:             dtype=stored_dtype,",
          "1377:             type=full_type_pb2.FullTypeDef())",
          "1378:     ])",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/list_ops.py||tensorflow/python/ops/list_ops.py": [
          "File: tensorflow/python/ops/list_ops.py -> tensorflow/python/ops/list_ops.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import numpy as np",
          "25: from tensorflow.python.framework import cpp_shape_inference_pb2",
          "26: from tensorflow.python.framework import dtypes",
          "27: from tensorflow.python.framework import ops",
          "",
          "[Removed Lines]",
          "24: from tensorflow.core.framework import types_pb2",
          "",
          "[Added Lines]",
          "24: from tensorflow.core.framework import full_type_pb2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:       element_shape = tensor_shape.TensorShape(element_shape)",
          "74:     handle_data = cpp_shape_inference_pb2.CppShapeInferenceResult.HandleData()",
          "75:     handle_data.is_set = True",
          "76:     handle_data.shape_and_type.append(",
          "77:         cpp_shape_inference_pb2.CppShapeInferenceResult.HandleShapeAndType(",
          "78:             shape=element_shape.as_proto(),",
          "79:             dtype=element_dtype.as_datatype_enum,",
          "81:     list_handle._handle_data = handle_data  # pylint: disable=protected-access",
          "",
          "[Removed Lines]",
          "80:             specialized_type=types_pb2.ST_TENSOR_LIST))",
          "",
          "[Added Lines]",
          "76:     # TODO(b/191472076): This duplicates type inference. Clean up.",
          "81:             type=full_type_pb2.FullTypeDef(type_id=full_type_pb2.TFT_ARRAY)))",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/parallel_for/pfor.py||tensorflow/python/ops/parallel_for/pfor.py": [
          "File: tensorflow/python/ops/parallel_for/pfor.py -> tensorflow/python/ops/parallel_for/pfor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import six",
          "30: from tensorflow.compiler.tf2xla.python import xla",
          "32: from tensorflow.python.eager import context",
          "33: from tensorflow.python.eager import def_function",
          "34: from tensorflow.python.eager import execute",
          "",
          "[Removed Lines]",
          "31: from tensorflow.core.framework import types_pb2",
          "",
          "[Added Lines]",
          "31: from tensorflow.core.framework import full_type_pb2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     # TODO(b/169968286): Identify all variant tensors (e.g. maps) and we can",
          "107:     # make this an error instead of assuming TensorLists have handle data.",
          "108:     return None  # Presumed not a TensorList/Optional",
          "113: def _parse_variant_shapes_and_types(t):",
          "",
          "[Removed Lines]",
          "109:   return (shapes_and_types[0].specialized_type == types_pb2.ST_TENSOR_LIST or",
          "110:           shapes_and_types[0].specialized_type == types_pb2.ST_OPTIONAL)",
          "",
          "[Added Lines]",
          "109:   type_id = shapes_and_types[0].type.type_id",
          "110:   return type_id in (full_type_pb2.TFT_ARRAY, full_type_pb2.TFT_OPTIONAL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:   shapes_and_types = _variant_handle_data(t)",
          "116:   if shapes_and_types is None or not shapes_and_types:",
          "117:     raise ValueError(\"Required handle data not set for {!r}\".format(t))",
          "119:     return shapes_and_types",
          "120:   else:",
          "122:       return shapes_and_types",
          "123:     else:",
          "124:       raise ValueError(",
          "",
          "[Removed Lines]",
          "118:   if shapes_and_types[0].specialized_type == types_pb2.ST_TENSOR_LIST:",
          "121:     if shapes_and_types[0].specialized_type != types_pb2.ST_INVALID:",
          "",
          "[Added Lines]",
          "118:   if shapes_and_types[0].type.type_id == full_type_pb2.TFT_ARRAY:",
          "121:     if shapes_and_types[0].type.type_id == full_type_pb2.TFT_UNSET:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:   # of the variant.",
          "136:   if t.dtype == dtypes.variant:",
          "137:     shapes_and_types = _parse_variant_shapes_and_types(t)",
          "139:       if len(shapes_and_types) != 1:",
          "140:         raise ValueError(",
          "141:             \"Expected handle data of length 1, got {!r} of length {}\"",
          "",
          "[Removed Lines]",
          "138:     if shapes_and_types[0].specialized_type == types_pb2.ST_TENSOR_LIST:",
          "",
          "[Added Lines]",
          "138:     if shapes_and_types[0].type.type_id == full_type_pb2.TFT_ARRAY:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:     else:",
          "147:       raise ValueError(",
          "148:           (\"Attempted to stack an unhandled variant-dtype tensor of \"",
          "150:   ones = array_ops.ones_like(array_ops.shape(t))",
          "151:   ones = array_ops.reshape(ones, [-1])",
          "152:   length = array_ops.reshape(length, [-1])",
          "",
          "[Removed Lines]",
          "149:            \"type {!r} ({!r})\").format(shapes_and_types[0].specialized_type, t))",
          "",
          "[Added Lines]",
          "149:            \"type {!r} ({!r})\").format(shapes_and_types[0].type, t))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a81f78d35ecabae6ba61c1a65279bcb5ff9c7d95",
      "candidate_info": {
        "commit_hash": "a81f78d35ecabae6ba61c1a65279bcb5ff9c7d95",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a81f78d35ecabae6ba61c1a65279bcb5ff9c7d95",
        "files": [
          "tensorflow/core/framework/full_type_util.cc",
          "tensorflow/core/framework/tensor.cc",
          "tensorflow/core/framework/tensor.h",
          "tensorflow/core/framework/tensor_test.cc",
          "tensorflow/core/framework/types.cc",
          "tensorflow/core/framework/types.h"
        ],
        "message": "Add basic FullType info to the Tensor class. The field is presently in compatibility mode - translated for basic Tensor types. The intent of this change is to evaluate feasibility (mainly, memory impact). Once stable, specialized constructors that allow more specific types can be added (while maintaining backward compatibility).\n\nPiperOrigin-RevId: 391763584\nChange-Id: I14d2e13e8ce3698b08858cf8e4cd783299ee650f",
        "before_after_code_files": [
          "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc",
          "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc",
          "tensorflow/core/framework/tensor.h||tensorflow/core/framework/tensor.h",
          "tensorflow/core/framework/tensor_test.cc||tensorflow/core/framework/tensor_test.cc",
          "tensorflow/core/framework/types.cc||tensorflow/core/framework/types.cc",
          "tensorflow/core/framework/types.h||tensorflow/core/framework/types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc": [
          "File: tensorflow/core/framework/full_type_util.cc -> tensorflow/core/framework/full_type_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:           const auto& attr_list = attr->list();",
          "99:           arg->set_type_id(TFT_PRODUCT);",
          "100:           for (int i = 0; i < attr_list.type_size(); i++) {",
          "102:           }",
          "104:         } else if (attr->value_case() == AttrValue::kType) {",
          "107:         } else {",
          "108:           return Status(error::UNIMPLEMENTED,",
          "",
          "[Removed Lines]",
          "101:             map_dtype_to_tensor(attr_list.type(i), arg->add_args());",
          "105:           map_dtype_to_tensor(attr->type(), arg);",
          "",
          "[Added Lines]",
          "101:             DataTypeToFullType(attr_list.type(i), *(arg->add_args()));",
          "105:           DataTypeToFullType(attr->type(), *arg);",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc": [
          "File: tensorflow/core/framework/tensor.cc -> tensorflow/core/framework/tensor.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "649: Tensor::Tensor() : Tensor(DT_FLOAT) {}",
          "653: Tensor::Tensor(DataType type, const TensorShape& shape, TensorBuffer* buf)",
          "654:     : shape_(shape), buf_(buf) {",
          "",
          "[Removed Lines]",
          "651: Tensor::Tensor(DataType type) : shape_(type), buf_(nullptr) {}",
          "",
          "[Added Lines]",
          "651: Tensor::Tensor(DataType type) : shape_(type), buf_(nullptr) {",
          "652:   set_dtype(type);",
          "653:   DataTypeToFullType(type, type_);",
          "654: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "685:   CHECK_EQ(1, NumElements()) << \"Must have a one element tensor\";",
          "686: }",
          "688: Tensor::~Tensor() { UnrefIfNonNull(buf_); }",
          "690: Status Tensor::BitcastFrom(const Tensor& other, DataType dtype,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "691: void Tensor::set_dtype(DataType t) {",
          "692:   shape_.set_data_type(t);",
          "693:   DataTypeToFullType(t, type_);",
          "694: }",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor.h||tensorflow/core/framework/tensor.h": [
          "File: tensorflow/core/framework/tensor.h -> tensorflow/core/framework/tensor.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #define TENSORFLOW_CORE_FRAMEWORK_TENSOR_H_",
          "19: #include <cstdint>",
          "20: #include <type_traits>",
          "22: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "23: #include \"tensorflow/core/framework/allocator.h\"",
          "24: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "25: #include \"tensorflow/core/framework/tensor_types.h\"",
          "26: #include \"tensorflow/core/framework/types.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <iostream>",
          "25: #include \"tensorflow/core/framework/full_type.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:   ~Tensor();",
          "260:   DataType dtype() const { return shape_.data_type(); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:   const FullTypeDef& type() const { return type_; }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "658:   void CheckType(DataType expected_dtype) const;",
          "659:   void CheckTypeAndIsAligned(DataType expected_dtype) const;",
          "660:   void CheckIsAlignedAndSingleElement() const;",
          "664:   static gtl::InlinedVector<int64_t, 4> ComputeFlatInnerDims(",
          "",
          "[Removed Lines]",
          "661:   void set_dtype(DataType t) { shape_.set_data_type(t); }",
          "",
          "[Added Lines]",
          "667:   void set_dtype(DataType t);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "667:       gtl::ArraySlice<int64_t> orig, int64_t num_out_dims);",
          "669:   TensorShape shape_;",
          "670:   TensorBuffer* buf_;",
          "672:   friend class DMAHelper;             // For access to buf_.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677:   FullTypeDef type_;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "946: }",
          "948: inline Tensor::Tensor(const Tensor& other)",
          "950:   if (buf_) buf_->Ref();",
          "951: }",
          "953: inline Tensor::Tensor(Tensor&& other)",
          "955:   other.buf_ = nullptr;",
          "956: }",
          "",
          "[Removed Lines]",
          "949:     : shape_(other.shape()), buf_(other.buf_) {",
          "954:     : shape_(std::move(other.shape_)), buf_(other.buf_) {",
          "",
          "[Added Lines]",
          "957:     : shape_(other.shape()), type_(other.type_), buf_(other.buf_) {",
          "962:     : shape_(std::move(other.shape_)),",
          "963:       type_(std::move(other.type_)),",
          "964:       buf_(other.buf_) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1036:   if (&other != this) {",
          "1037:     shape_ = std::move(other.shape_);",
          "1038:     if (buf_) buf_->Unref();",
          "1039:     buf_ = other.buf_;",
          "1040:     other.buf_ = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1048:     type_ = std::move(other.type_);",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor_test.cc||tensorflow/core/framework/tensor_test.cc": [
          "File: tensorflow/core/framework/tensor_test.cc -> tensorflow/core/framework/tensor_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: template <typename T>",
          "133: void TestCopies(const Tensor& t) {",
          "134:   {",
          "136:     Tensor t2(t.dtype());",
          "138:     ExpectEqual<T>(t, t2);",
          "139:   }",
          "140:   {",
          "142:     Tensor t2(t.dtype());",
          "143:     t2 = t;",
          "144:     ExpectEqual<T>(t, t2);",
          "145:   }",
          "146:   {",
          "148:     Tensor t2(t.dtype(), t.shape());",
          "149:     t2.flat<T>() = t.flat<T>();",
          "150:     ExpectEqual<T>(t, t2);",
          "151:   }",
          "152:   {",
          "154:     TensorProto proto;",
          "155:     t.AsProtoField(&proto);",
          "156:     Tensor t2(t.dtype());",
          "158:     ExpectEqual<T>(t, t2);",
          "159:   }",
          "160:   {",
          "162:     TensorProto proto;",
          "163:     t.AsProtoTensorContent(&proto);",
          "164:     Tensor t2(t.dtype());",
          "166:     ExpectEqual<T>(t, t2);",
          "169:     Tensor t3(t.dtype());",
          "172:   }",
          "173:   {",
          "175:     gtl::ArraySlice<T> values(t.flat<T>().data(), t.NumElements());",
          "176:     Tensor t2 = test::AsTensor(values, t.shape());",
          "177:     ExpectEqual<T>(t, t2);",
          "178:   }",
          "179:   {",
          "181:     Tensor t2 = t;",
          "182:     Tensor t3 = std::move(t2);",
          "183:     ExpectEqual<T>(t, t3);",
          "186:   }",
          "187:   {",
          "189:     Tensor t2 = t;",
          "190:     Tensor t3;",
          "191:     t3 = std::move(t2);",
          "192:     ExpectEqual<T>(t, t3);",
          "195:   }",
          "196:   {",
          "198:     Tensor t2 = t;",
          "199:     Tensor* t3 = &t2;",
          "201:     ExpectEqual<Variant>(t, *t3);",
          "203:   }",
          "204: }",
          "",
          "[Removed Lines]",
          "135:     LOG(INFO) << \"CopyFrom()\";",
          "137:     EXPECT_TRUE(t2.CopyFrom(t, t.shape()));",
          "141:     LOG(INFO) << \"operator=()\";",
          "147:     LOG(INFO) << \"deep copy\";",
          "153:     LOG(INFO) << \"AsProtoField()\";",
          "157:     EXPECT_TRUE(t2.FromProto(proto));",
          "161:     LOG(INFO) << \"AsProtoTensorContent()\";",
          "165:     EXPECT_TRUE(t2.FromProto(proto));",
          "170:     EXPECT_TRUE(t3.FromProto(proto));",
          "171:     ExpectEqual<T>(t, t2);",
          "174:     LOG(INFO) << \"AsTensor\";",
          "180:     LOG(INFO) << \"Move constructor\";",
          "184:     EXPECT_TRUE(t3.IsInitialized());",
          "185:     EXPECT_FALSE(t2.IsInitialized());  // NOLINT(bugprone-use-after-move)",
          "188:     LOG(INFO) << \"Move assignment\";",
          "193:     EXPECT_TRUE(t3.IsInitialized());",
          "194:     EXPECT_FALSE(t2.IsInitialized());  // NOLINT(bugprone-use-after-move)",
          "197:     LOG(INFO) << \"Move self-assignment\";",
          "202:     EXPECT_TRUE(t3->IsInitialized());",
          "",
          "[Added Lines]",
          "136:     EXPECT_TRUE(t2.CopyFrom(t, t.shape())) << \"CopyFrom\";",
          "138:     EXPECT_EQ(t.type(), t2.type()) << \"CopyFrom\";",
          "144:     EXPECT_EQ(t.type(), t2.type()) << \"operator=()\";",
          "150:     EXPECT_EQ(t.type(), t2.type()) << \"deep copy\";",
          "156:     EXPECT_TRUE(t2.FromProto(proto)) << \"AsProtoField()\";",
          "158:     EXPECT_EQ(t.type(), t2.type()) << \"AsProtoField()\";",
          "164:     EXPECT_TRUE(t2.FromProto(proto)) << \"AsProtoTensorContent()\";",
          "166:     EXPECT_EQ(t.type(), t2.type()) << \"AsProtoTensorContent()\";",
          "171:     EXPECT_TRUE(t3.FromProto(proto)) << \"AsProtoTensorContent() from copy\";",
          "172:     ExpectEqual<T>(t, t3);",
          "173:     EXPECT_EQ(t.type(), t2.type()) << \"AsProtoTensorContent() from copy\";",
          "179:     EXPECT_EQ(t.type(), t2.type()) << \"AsTensor\";",
          "185:     EXPECT_TRUE(t3.IsInitialized()) << \"Move constructor\";",
          "186:     EXPECT_EQ(t.type(), t3.type()) << \"Move constructor\";",
          "193:     EXPECT_TRUE(t3.IsInitialized()) << \"Move assignment\";",
          "194:     EXPECT_EQ(t.type(), t3.type()) << \"Move assignment\";",
          "201:     EXPECT_TRUE(t3->IsInitialized()) << \"Move self-assignment\";",
          "202:     EXPECT_EQ(t.type(), t3->type()) << \"Move self-assignment\";",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/types.cc||tensorflow/core/framework/types.cc": [
          "File: tensorflow/core/framework/types.cc -> tensorflow/core/framework/types.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/types.h\"",
          "17: #include \"tensorflow/core/framework/register_types.h\"",
          "18: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "19: #include \"tensorflow/core/lib/strings/strcat.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"tensorflow/core/framework/full_type.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: namespace tensorflow {",
          "64: bool DeviceType::operator<(const DeviceType& other) const {",
          "65:   return type_ < other.type_;",
          "66: }",
          "",
          "[Removed Lines]",
          "24: struct DataTypeHasher {",
          "25:   std::size_t operator()(const DataType& k) const {",
          "26:     return std::hash<int>()(static_cast<int>(k));",
          "27:   }",
          "28: };",
          "33: auto* DT_TO_FT = new std::unordered_map<DataType, FullTypeId, DataTypeHasher>({",
          "34:     {DT_FLOAT, TFT_FLOAT},",
          "35:     {DT_DOUBLE, TFT_DOUBLE},",
          "36:     {DT_INT32, TFT_INT32},",
          "37:     {DT_UINT8, TFT_UINT8},",
          "38:     {DT_INT16, TFT_INT16},",
          "39:     {DT_INT8, TFT_INT8},",
          "40:     {DT_STRING, TFT_STRING},",
          "41:     {DT_COMPLEX64, TFT_COMPLEX64},",
          "42:     {DT_INT64, TFT_INT64},",
          "43:     {DT_BOOL, TFT_BOOL},",
          "44:     {DT_UINT16, TFT_UINT16},",
          "45:     {DT_COMPLEX128, TFT_COMPLEX128},",
          "46:     {DT_HALF, TFT_HALF},",
          "47:     {DT_UINT32, TFT_UINT32},",
          "48:     {DT_UINT64, TFT_UINT64},",
          "49: });",
          "51: void map_dtype_to_tensor(const DataType& dtype, FullTypeDef* t) {",
          "52:   t->set_type_id(TFT_TENSOR);",
          "55:   const auto& mapped = DT_TO_FT->find(dtype);",
          "56:   auto* arg = t->add_args();",
          "57:   if (mapped != DT_TO_FT->end()) {",
          "58:     arg->set_type_id(mapped->second);",
          "59:   } else {",
          "60:     arg->set_type_id(TFT_ANY);",
          "61:   }",
          "62: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:       return strings::StrCat(\"unknown dtype enum (\", dtype, \")\");",
          "143:   }",
          "144: }",
          "147: string DataTypeString(DataType dtype) {",
          "148:   if (IsRefType(dtype)) {",
          "",
          "[Removed Lines]",
          "145: }  // end namespace",
          "",
          "[Added Lines]",
          "108: void ToTensorOf(const FullTypeId& param, FullTypeDef& t) {",
          "109:   t.set_type_id(TFT_TENSOR);",
          "110:   t.clear_args();",
          "111:   t.add_args()->set_type_id(param);",
          "112: }",
          "114: }  // namespace",
          "116: void DataTypeToFullType(const DataType& dtype, FullTypeDef& t) {",
          "117:   switch (dtype) {",
          "118:     case DT_FLOAT:",
          "119:       ToTensorOf(TFT_FLOAT, t);",
          "120:       break;",
          "121:     case DT_DOUBLE:",
          "122:       ToTensorOf(TFT_DOUBLE, t);",
          "123:       break;",
          "124:     case DT_INT32:",
          "125:       ToTensorOf(TFT_INT32, t);",
          "126:       break;",
          "127:     case DT_UINT8:",
          "128:       ToTensorOf(TFT_UINT8, t);",
          "129:       break;",
          "130:     case DT_INT16:",
          "131:       ToTensorOf(TFT_INT16, t);",
          "132:       break;",
          "133:     case DT_INT8:",
          "134:       ToTensorOf(TFT_INT8, t);",
          "135:       break;",
          "136:     case DT_STRING:",
          "137:       ToTensorOf(TFT_STRING, t);",
          "138:       break;",
          "139:     case DT_COMPLEX64:",
          "140:       ToTensorOf(TFT_COMPLEX64, t);",
          "141:       break;",
          "142:     case DT_INT64:",
          "143:       ToTensorOf(TFT_INT64, t);",
          "144:       break;",
          "145:     case DT_BOOL:",
          "146:       ToTensorOf(TFT_BOOL, t);",
          "147:       break;",
          "148:     case DT_UINT16:",
          "149:       ToTensorOf(TFT_UINT16, t);",
          "150:       break;",
          "151:     case DT_COMPLEX128:",
          "152:       ToTensorOf(TFT_COMPLEX128, t);",
          "153:       break;",
          "154:     case DT_HALF:",
          "155:       ToTensorOf(TFT_HALF, t);",
          "156:       break;",
          "157:     case DT_UINT32:",
          "158:       ToTensorOf(TFT_UINT32, t);",
          "159:       break;",
          "160:     case DT_UINT64:",
          "161:       ToTensorOf(TFT_UINT64, t);",
          "162:       break;",
          "163:     default:",
          "164:       t.set_type_id(TFT_ANY);",
          "165:       t.clear_args();",
          "166:   }",
          "167: }",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/types.h||tensorflow/core/framework/types.h": [
          "File: tensorflow/core/framework/types.h -> tensorflow/core/framework/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: typedef gtl::InlinedVector<std::pair<DeviceType, int32>, 4>",
          "106:     PrioritizedDeviceTypeVector;",
          "109: std::string DataTypeString(DataType dtype);",
          "110: std::string DeviceTypeString(const DeviceType& device_type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: void DataTypeToFullType(const DataType& dtype, FullTypeDef& t);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a513cec4bec15961fbfdedcaa5376522980455c",
      "candidate_info": {
        "commit_hash": "8a513cec4bec15961fbfdedcaa5376522980455c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8a513cec4bec15961fbfdedcaa5376522980455c",
        "files": [
          "tensorflow/core/framework/full_type_util.cc"
        ],
        "message": "Prevent null dereference read in `SpecializeType()`\n\nFor some adversarial protos, the attribute for a key might not exist.\n\nPiperOrigin-RevId: 408382090\nChange-Id: Ie7eabe532c9ff280fce5dce1f6cdb93c76c2e040",
        "before_after_code_files": [
          "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc": [
          "File: tensorflow/core/framework/full_type_util.cc -> tensorflow/core/framework/full_type_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"tensorflow/core/framework/op_def.pb.h\"",
          "23: #include \"tensorflow/core/framework/types.h\"",
          "24: #include \"tensorflow/core/platform/statusor.h\"",
          "26: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/protobuf/error_codes.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:       auto* arg = t->mutable_args(i);",
          "103:       if (arg->type_id() == TFT_VAR) {",
          "104:         const auto* attr = attrs.Find(arg->s());",
          "106:         if (attr->value_case() == AttrValue::kList) {",
          "107:           const auto& attr_list = attr->list();",
          "108:           arg->set_type_id(TFT_PRODUCT);",
          "",
          "[Removed Lines]",
          "105:         DCHECK(attr != nullptr);",
          "",
          "[Added Lines]",
          "106:         if (attr == nullptr) {",
          "107:           return Status(",
          "108:               error::INVALID_ARGUMENT,",
          "109:               absl::StrCat(\"Could not find an attribute for key \", arg->s()));",
          "110:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}