{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ff119f04b42a7ad3a16c306446af7e301d34026a",
      "candidate_info": {
        "commit_hash": "ff119f04b42a7ad3a16c306446af7e301d34026a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ff119f04b42a7ad3a16c306446af7e301d34026a",
        "files": [
          "ext/fts3/fts3_term.c",
          "ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/fts5_unicode2.c",
          "ext/misc/amatch.c",
          "ext/misc/closure.c",
          "ext/misc/fileio.c",
          "ext/misc/fuzzer.c",
          "ext/misc/unionvtab.c",
          "ext/session/changeset.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fix harmless compiler warnings from MSVC.\n\nFossilOrigin-Name: f0f02d46e40667d0fc31c57eb26d459ce2f3a3c222c767fa371100b36e5335d1",
        "before_after_code_files": [
          "ext/fts3/fts3_term.c||ext/fts3/fts3_term.c",
          "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
          "ext/misc/amatch.c||ext/misc/amatch.c",
          "ext/misc/closure.c||ext/misc/closure.c",
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "ext/misc/fuzzer.c||ext/misc/fuzzer.c",
          "ext/misc/unionvtab.c||ext/misc/unionvtab.c",
          "ext/session/changeset.c||ext/session/changeset.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_term.c||ext/fts3/fts3_term.c": [
          "File: ext/fts3/fts3_term.c -> ext/fts3/fts3_term.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   nByte = sizeof(Fts3termTable) + sizeof(Fts3Table) + nDb + nFts3 + 2;",
          "99:   p = (Fts3termTable *)sqlite3_malloc64(nByte);",
          "100:   if( !p ) return SQLITE_NOMEM;",
          "103:   p->pFts3Tab = (Fts3Table *)&p[1];",
          "104:   p->pFts3Tab->zDb = (char *)&p->pFts3Tab[1];",
          "",
          "[Removed Lines]",
          "101:   memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "101:   memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl": [
          "File: ext/fts3/unicode/mkunicode.tcl -> ext/fts3/unicode/mkunicode.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:         int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "739:         int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "740:         for(; i<128 && i<n; i++){",
          "742:         }",
          "743:         iTbl++;",
          "744:       }",
          "",
          "[Removed Lines]",
          "741:           aAscii[i] = bToken;",
          "",
          "[Added Lines]",
          "741:           aAscii[i] = (u8)bToken;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:     if( p==0 ){",
          "582:       rc = SQLITE_NOMEM;",
          "583:     }else{",
          "585:       p->nPhrase = nPhrase;",
          "586:       p->aIDF = (double*)&p[1];",
          "587:       p->aFreq = &p->aIDF[nPhrase];",
          "",
          "[Removed Lines]",
          "584:       memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "584:       memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c": [
          "File: ext/fts5/fts5_buffer.c -> ext/fts5/fts5_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:       return 1;",
          "29:     }else{",
          "31:       pBuf->p = pNew;",
          "32:     }",
          "33:   }",
          "",
          "[Removed Lines]",
          "30:       pBuf->nSpace = nNew;",
          "",
          "[Added Lines]",
          "30:       pBuf->nSpace = (int)nNew;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:     if( pRet==0 ){",
          "252:       if( nByte>0 ) *pRc = SQLITE_NOMEM;",
          "253:     }else{",
          "255:     }",
          "256:   }",
          "257:   return pRet;",
          "",
          "[Removed Lines]",
          "254:       memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "254:       memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:           rc = SQLITE_ERROR;",
          "326:         }else{",
          "327:           rc = sqlite3Fts5GetTokenizer(pGlobal,",
          "329:               pzErr",
          "330:           );",
          "331:         }",
          "",
          "[Removed Lines]",
          "328:               (const char**)azArg, nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "[Added Lines]",
          "328:               (const char**)azArg, (int)nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:   if( zOut==0 ){",
          "437:   }else{",
          "439:     if( fts5_isopenquote(zOut[0]) ){",
          "440:       int ii = fts5Dequote(zOut);",
          "441:       zRet = &zIn[ii];",
          "",
          "[Removed Lines]",
          "438:     memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "438:     memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1487:       if( pRet==0 ){",
          "1488:         pParse->rc = SQLITE_NOMEM;",
          "1489:       }else{",
          "1491:       }",
          "1492:     }else if( (pNear->nPhrase % SZALLOC)==0 ){",
          "1493:       int nNew = pNear->nPhrase + SZALLOC;",
          "",
          "[Removed Lines]",
          "1490:         memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "1490:         memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1563:     if( pSyn==0 ){",
          "1564:       rc = SQLITE_NOMEM;",
          "1565:     }else{",
          "1567:       pSyn->zTerm = ((char*)pSyn) + sizeof(Fts5ExprTerm) + sizeof(Fts5Buffer);",
          "1568:       memcpy(pSyn->zTerm, pToken, nToken);",
          "1569:       pSyn->pSynonym = pPhrase->aTerm[pPhrase->nTerm-1].pSynonym;",
          "",
          "[Removed Lines]",
          "1566:       memset(pSyn, 0, nByte);",
          "",
          "[Added Lines]",
          "1566:       memset(pSyn, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1723:       nByte = sizeof(Fts5Colset) + (pColsetOrig->nCol-1) * sizeof(int);",
          "1724:       pColset = (Fts5Colset*)sqlite3Fts5MallocZero(&rc, nByte);",
          "1725:       if( pColset ){",
          "1727:       }",
          "1728:       pNew->pRoot->pNear->pColset = pColset;",
          "1729:     }",
          "",
          "[Removed Lines]",
          "1726:         memcpy(pColset, pColsetOrig, nByte);",
          "",
          "[Added Lines]",
          "1726:         memcpy(pColset, pColsetOrig, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1940:     sqlite3_int64 nByte = sizeof(Fts5Colset) + (pOrig->nCol-1) * sizeof(int);",
          "1941:     pRet = (Fts5Colset*)sqlite3Fts5MallocZero(pRc, nByte);",
          "1942:     if( pRet ){",
          "1944:     }",
          "1945:   }else{",
          "1946:     pRet = 0;",
          "",
          "[Removed Lines]",
          "1943:       memcpy(pRet, pOrig, nByte);",
          "",
          "[Added Lines]",
          "1943:       memcpy(pRet, pOrig, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c": [
          "File: ext/fts5/fts5_hash.c -> ext/fts5/fts5_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:       rc = SQLITE_NOMEM;",
          "105:     }else{",
          "107:     }",
          "108:   }",
          "109:   return rc;",
          "",
          "[Removed Lines]",
          "106:       memset(pNew->aSlot, 0, nByte);",
          "",
          "[Added Lines]",
          "106:       memset(pNew->aSlot, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:     p = (Fts5HashEntry*)sqlite3_malloc64(nByte);",
          "285:     if( !p ) return SQLITE_NOMEM;",
          "286:     memset(p, 0, sizeof(Fts5HashEntry));",
          "288:     zKey = fts5EntryKey(p);",
          "289:     zKey[0] = bByte;",
          "290:     memcpy(&zKey[1], pToken, nToken);",
          "",
          "[Removed Lines]",
          "287:     p->nAlloc = nByte;",
          "",
          "[Added Lines]",
          "287:     p->nAlloc = (int)nByte;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     pCsr = (Fts5Cursor*)sqlite3_malloc64(nByte);",
          "634:     if( pCsr ){",
          "635:       Fts5Global *pGlobal = pTab->pGlobal;",
          "637:       pCsr->aColumnSize = (int*)&pCsr[1];",
          "638:       pCsr->pNext = pGlobal->pCsr;",
          "639:       pGlobal->pCsr = pCsr;",
          "",
          "[Removed Lines]",
          "636:       memset(pCsr, 0, nByte);",
          "",
          "[Added Lines]",
          "636:       memset(pCsr, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "914:   nByte = sizeof(Fts5Sorter) + sizeof(int) * (nPhrase-1);",
          "915:   pSorter = (Fts5Sorter*)sqlite3_malloc64(nByte);",
          "916:   if( pSorter==0 ) return SQLITE_NOMEM;",
          "918:   pSorter->nIdx = nPhrase;",
          "",
          "[Removed Lines]",
          "917:   memset(pSorter, 0, nByte);",
          "",
          "[Added Lines]",
          "917:   memset(pSorter, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:   if( !p ) return SQLITE_NOMEM;",
          "293:   p->aTotalSize = (i64*)&p[1];",
          "294:   p->pConfig = pConfig;",
          "295:   p->pIndex = pIndex;",
          "",
          "[Removed Lines]",
          "292:   memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "292:   memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
          "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:     int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "770:     int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "771:     for(; i<128 && i<n; i++){",
          "773:     }",
          "774:     iTbl++;",
          "775:   }",
          "",
          "[Removed Lines]",
          "772:       aAscii[i] = bToken;",
          "",
          "[Added Lines]",
          "772:       aAscii[i] = (u8)bToken;",
          "",
          "---------------"
        ],
        "ext/misc/amatch.c||ext/misc/amatch.c": [
          "File: ext/misc/amatch.c -> ext/misc/amatch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "751:     }else{",
          "",
          "[Removed Lines]",
          "750:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "750:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/misc/closure.c||ext/misc/closure.c": [
          "File: ext/misc/closure.c -> ext/misc/closure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "435:     }else{",
          "",
          "[Removed Lines]",
          "434:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "434:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "162:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);",
          "163:   }else{",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "",
          "[Removed Lines]",
          "161:   if( nIn==fread(pBuf, 1, nIn, in) ){",
          "",
          "[Added Lines]",
          "161:   if( nIn==fread(pBuf, 1, (size_t)nIn, in) ){",
          "",
          "---------------"
        ],
        "ext/misc/fuzzer.c||ext/misc/fuzzer.c": [
          "File: ext/misc/fuzzer.c -> ext/misc/fuzzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "458:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "460:     }else{",
          "",
          "[Removed Lines]",
          "459:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "459:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:       memset(pNew, 0, sizeof(*pNew));",
          "526:       pNew->zClassName = (char*)&pNew[1];",
          "529:       zTab = fuzzerDequote(argv[3]);",
          "530:       if( zTab==0 ){",
          "",
          "[Removed Lines]",
          "527:       memcpy(pNew->zClassName, zModule, nModule+1);",
          "",
          "[Added Lines]",
          "527:       memcpy(pNew->zClassName, zModule, (size_t)(nModule+1));",
          "",
          "---------------"
        ],
        "ext/misc/unionvtab.c||ext/misc/unionvtab.c": [
          "File: ext/misc/unionvtab.c -> ext/misc/unionvtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:   if( *pRc==SQLITE_OK ){",
          "257:     pRet = sqlite3_malloc64(nByte);",
          "258:     if( pRet ){",
          "260:     }else{",
          "262:     }",
          "",
          "[Removed Lines]",
          "259:       memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "259:       memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:     sqlite3_int64 nByte = strlen(zIn) + 1;",
          "280:     zRet = unionMalloc(pRc, nByte);",
          "281:     if( zRet ){",
          "283:     }",
          "284:   }",
          "285:   return zRet;",
          "",
          "[Removed Lines]",
          "282:       memcpy(zRet, zIn, nByte);",
          "",
          "[Added Lines]",
          "282:       memcpy(zRet, zIn, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/session/changeset.c||ext/session/changeset.c": [
          "File: ext/session/changeset.c -> ext/session/changeset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   pBuf = sqlite3_malloc64( sz ? sz : 1 );",
          "56:   if( pBuf==0 ){",
          "57:     fprintf(stderr, \"cannot allocate %d to hold content of \\\"%s\\\"\\n\",",
          "59:     exit(1);",
          "60:   }",
          "61:   if( sz>0 ){",
          "64:       exit(1);",
          "65:     }",
          "66:     fclose(f);",
          "67:   }",
          "70: }",
          "",
          "[Removed Lines]",
          "58:             sz, zFilename);",
          "62:     if( fread(pBuf, sz, 1, f)!=1 ){",
          "63:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\", sz, zFilename);",
          "",
          "[Added Lines]",
          "58:             (int)sz, zFilename);",
          "62:     if( fread(pBuf, (size_t)sz, 1, f)!=1 ){",
          "63:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\",",
          "64:               (int)sz, zFilename);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 90acdbfce9c088582d5165589f7eac462b00062bbfffacdcc786eb9cf3ea5377",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2015:   assert( pPage->nCell>0",
          "2017:        || CORRUPT_DB );",
          "2019:   pPage->isInit = 1;",
          "",
          "[Removed Lines]",
          "2016:        || get2byteNotZero(&data[5])==pBt->usableSize",
          "",
          "[Added Lines]",
          "2016:        || get2byteNotZero(&data[5])==(int)pBt->usableSize",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "533:   }",
          "535:   for(i=k=0; i<n; i++){",
          "536:     unsigned char c = (unsigned char)zIn[i];",
          "537:     if( isxdigit(c) ){",
          "",
          "[Removed Lines]",
          "534:   memset(a, 0, nAlloc);",
          "",
          "[Added Lines]",
          "534:   memset(a, 0, (size_t)nAlloc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:             exit(1);",
          "569:           }",
          "570:           assert( newSize > nAlloc );",
          "572:           nAlloc = newSize;",
          "573:         }",
          "574:         if( j>=(unsigned)mx ){",
          "",
          "[Removed Lines]",
          "571:           memset(a+nAlloc, 0, newSize - nAlloc);",
          "",
          "[Added Lines]",
          "571:           memset(a+nAlloc, 0, (size_t)(newSize - nAlloc));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6824c8d6c2def197044cad984481eb981d38998",
      "candidate_info": {
        "commit_hash": "c6824c8d6c2def197044cad984481eb981d38998",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c6824c8d6c2def197044cad984481eb981d38998",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "When considering partial indexes, do not assume that a \"CASE x ...\" expression implies \"x IS NOT NULL\".\n\nFossilOrigin-Name: 1b24303220b7b4f59520176a0150fc619c668865450b4fdaa9ce4113a56e9687",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0ba6d709b50d92db1542f2ff30535a80184b00dadf759d51e5cae7a6e37b1764",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4948:    && pE1->op!=TK_IS",
          "4949:    && pE1->op!=TK_ISNOT",
          "4950:    && pE1->op!=TK_OR",
          "4951:   ){",
          "4952:     Expr *pX = sqlite3ExprSkipCollate(pE1->pLeft);",
          "4953:     testcase( pX!=pE1->pLeft );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4951:    && pE1->op!=TK_CASE",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   SELECT * FROM t0 WHERE t0.c0 IS NOT 1;",
          "434: } {{} row}",
          "436: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436: do_execsql_test index6-14.2 {",
          "437:   SELECT * FROM t0 WHERE CASE c0 WHEN 0 THEN 0 ELSE 1 END;",
          "438: } {{} row}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f446a7a8cd265fb8b135fa551d53e47813ae6d8c",
      "candidate_info": {
        "commit_hash": "f446a7a8cd265fb8b135fa551d53e47813ae6d8c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f446a7a8cd265fb8b135fa551d53e47813ae6d8c",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update rtree.c so that SQLITE_DEBUG is required to turn on assert() statements, even if it is compiled separately from the amalgamation.\n\nFossilOrigin-Name: b6e17f0139482a22c2fc84552767bc9a293b282499e3a790de069e0e84455fb2",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   #include \"sqlite3.h\"",
          "64: #endif",
          "70: #ifndef SQLITE_AMALGAMATION",
          "71: #include \"sqlite3rtree.h\"",
          "72: typedef sqlite3_int64 i64;",
          "",
          "[Removed Lines]",
          "66: #include <string.h>",
          "67: #include <assert.h>",
          "68: #include <stdio.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: typedef unsigned char u8;",
          "75: typedef unsigned short u16;",
          "76: typedef unsigned int u32;",
          "77: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: #if !defined(NDEBUG) && !defined(SQLITE_DEBUG)",
          "74: # define NDEBUG 1",
          "75: #endif",
          "76: #if defined(NDEBUG) && defined(SQLITE_DEBUG)",
          "77: # undef NDEBUG",
          "79: #endif",
          "81: #include <string.h>",
          "82: #include <stdio.h>",
          "83: #include <assert.h>",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47010bf17cb080cc1c693c84d16b986ea4addf9c54bd7e22de1e0f6b555ea9d1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0287c951655bc543a7d0dcdb4fcb8cc1718325ef",
      "candidate_info": {
        "commit_hash": "0287c951655bc543a7d0dcdb4fcb8cc1718325ef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0287c951655bc543a7d0dcdb4fcb8cc1718325ef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "Prevent SQLite from assuming that if ((? IS NOT NULL) IS NOT NULL) is true, ? may not be NULL. Fix for [d51a8696].\n\nFossilOrigin-Name: 7833feecfe745e237f239ee4c38a9e4bf7ad66a32919150208da87c00a826473",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 629e20c9880acc2cb9e2fa6da39a15a90483e9a8f433df29d285c23bdfb03b0b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5168:       return WRC_Prune;",
          "5170:     case TK_AND:",
          "5175:       }",
          "5176:       return WRC_Prune;",
          "",
          "[Removed Lines]",
          "5171:       if( sqlite3ExprImpliesNonNullRow(pExpr->pLeft, pWalker->u.iCur)",
          "5172:        && sqlite3ExprImpliesNonNullRow(pExpr->pRight, pWalker->u.iCur)",
          "5173:       ){",
          "5174:         pWalker->eCode = 1;",
          "",
          "[Added Lines]",
          "5171:       assert( pWalker->eCode==0 );",
          "5172:       sqlite3WalkExpr(pWalker, pExpr->pLeft);",
          "5173:       if( pWalker->eCode ){",
          "5174:         pWalker->eCode = 0;",
          "5175:         sqlite3WalkExpr(pWalker, pExpr->pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5230: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5231:   Walker w;",
          "5232:   p = sqlite3ExprSkipCollateAndLikely(p);",
          "5242:   }",
          "5243:   w.xExprCallback = impliesNotNullRow;",
          "5244:   w.xSelectCallback = 0;",
          "",
          "[Removed Lines]",
          "5233:   while( p ){",
          "5234:     if( p->op==TK_NOTNULL ){",
          "5235:       p = p->pLeft;",
          "5236:     }else if( p->op==TK_AND ){",
          "5237:       if( sqlite3ExprImpliesNonNullRow(p->pLeft, iTab) ) return 1;",
          "5238:       p = p->pRight;",
          "5239:     }else{",
          "5240:       break;",
          "5241:     }",
          "",
          "[Added Lines]",
          "5234:   if( p && p->op==TK_NOTNULL ){",
          "5235:     p = p->pLeft;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:   SELECT NOT(v0.a IS FALSE) FROM v0",
          "906: } {1}",
          "908: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "908: #-------------------------------------------------------------------------",
          "909: reset_db",
          "910: do_execsql_test join-19.0 {",
          "911:   CREATE TABLE t1(a);",
          "912:   CREATE TABLE t2(b);",
          "913:   INSERT INTO t1(a) VALUES(0);",
          "914:   CREATE VIEW v0(c) AS SELECT t2.b FROM t1 LEFT JOIN t2;",
          "915: }",
          "917: do_execsql_test join-19.1 {",
          "918:   SELECT * FROM v0 WHERE v0.c NOTNULL NOTNULL;",
          "919: } {{}}",
          "921: do_execsql_test join-19.2 {",
          "922:   SELECT * FROM t1 LEFT JOIN t2",
          "923: } {0 {}}",
          "925: do_execsql_test join-19.3 {",
          "926:   SELECT * FROM t1 LEFT JOIN t2 WHERE (b IS NOT NULL) IS NOT NULL;",
          "927: } {0 {}}",
          "929: do_execsql_test join-19.4 {",
          "930:   SELECT (b IS NOT NULL) IS NOT NULL FROM t1 LEFT JOIN t2",
          "931: } {1}",
          "933: do_execsql_test join-19.5 {",
          "934:   SELECT * FROM t1 LEFT JOIN t2 WHERE",
          "935:     (b IS NOT NULL AND b IS NOT NULL) IS NOT NULL;",
          "936: } {0 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca076bf26ee054ca224e3b9ec8361631e6ea8c36",
      "candidate_info": {
        "commit_hash": "ca076bf26ee054ca224e3b9ec8361631e6ea8c36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ca076bf26ee054ca224e3b9ec8361631e6ea8c36",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/vacuum-into.test"
        ],
        "message": "Add another test case to vacuum-into.test.\n\nFossilOrigin-Name: 0465d2fc0d3f8beaa1b6b0bd7bd51d69a524f30d889c9402e7d02cc06164a310",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3961995cb56b43f1753c53fc869edf336f1c17ec994d67dc74e44e8e02493894",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: do_catchsql_test vacuum-into-320 {",
          "69:   VACUUM INTO x;",
          "70: } {1 {no such column: x}}",
          "72: do_catchsql_test vacuum-into-330 {",
          "73:   VACUUM INTO t1.nosuchcol;",
          "74: } {1 {no such column: t1.nosuchcol}}",
          "76: forcedelete test.db2",
          "77: db func target target",
          "",
          "[Removed Lines]",
          "71: } {1 {no such column: nosuchcol}}",
          "",
          "[Added Lines]",
          "74: do_catchsql_test vacuum-into-340 {",
          "75:   VACUUM INTO main.t1.nosuchcol;",
          "76: } {1 {no such column: main.t1.nosuchcol}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}