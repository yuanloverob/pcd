{
  "cve_id": "CVE-2017-9211",
  "cve_desc": "The crypto_skcipher_init_tfm function in crypto/skcipher.c in the Linux kernel through 4.11.2 relies on a setkey function that lacks a key-size check, which allows local users to cause a denial of service (NULL pointer dereference) via a crafted application.",
  "repo": "torvalds/linux",
  "patch_hash": "9933e113c2e87a9f46a40fde8dafbf801dca1ab9",
  "patch_info": {
    "commit_hash": "9933e113c2e87a9f46a40fde8dafbf801dca1ab9",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/9933e113c2e87a9f46a40fde8dafbf801dca1ab9",
    "files": [
      "crypto/skcipher.c"
    ],
    "message": "crypto: skcipher - Add missing API setkey checks\n\nThe API setkey checks for key sizes and alignment went AWOL during the\nskcipher conversion.  This patch restores them.\n\nCc: <stable@vger.kernel.org>\nFixes: 4e6c3df4d729 (\"crypto: skcipher - Add low-level skcipher...\")\nReported-by: Baozeng <sploving1@gmail.com>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
    "before_after_code_files": [
      "crypto/skcipher.c||crypto/skcipher.c"
    ]
  },
  "patch_diff": {
    "crypto/skcipher.c||crypto/skcipher.c": [
      "File: crypto/skcipher.c -> crypto/skcipher.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "764:  return 0;",
      "765: }",
      "767: static void crypto_skcipher_exit_tfm(struct crypto_tfm *tfm)",
      "768: {",
      "769:  struct crypto_skcipher *skcipher = __crypto_skcipher_cast(tfm);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "767: static int skcipher_setkey_unaligned(struct crypto_skcipher *tfm,",
      "768:          const u8 *key, unsigned int keylen)",
      "769: {",
      "770:  unsigned long alignmask = crypto_skcipher_alignmask(tfm);",
      "771:  struct skcipher_alg *cipher = crypto_skcipher_alg(tfm);",
      "772:  u8 *buffer, *alignbuffer;",
      "773:  unsigned long absize;",
      "774:  int ret;",
      "776:  absize = keylen + alignmask;",
      "777:  buffer = kmalloc(absize, GFP_ATOMIC);",
      "778:  if (!buffer)",
      "779:   return -ENOMEM;",
      "781:  alignbuffer = (u8 *)ALIGN((unsigned long)buffer, alignmask + 1);",
      "782:  memcpy(alignbuffer, key, keylen);",
      "783:  ret = cipher->setkey(tfm, alignbuffer, keylen);",
      "784:  kzfree(buffer);",
      "785:  return ret;",
      "786: }",
      "788: static int skcipher_setkey(struct crypto_skcipher *tfm, const u8 *key,",
      "789:       unsigned int keylen)",
      "790: {",
      "791:  struct skcipher_alg *cipher = crypto_skcipher_alg(tfm);",
      "792:  unsigned long alignmask = crypto_skcipher_alignmask(tfm);",
      "794:  if (keylen < cipher->min_keysize || keylen > cipher->max_keysize) {",
      "795:   crypto_skcipher_set_flags(tfm, CRYPTO_TFM_RES_BAD_KEY_LEN);",
      "796:   return -EINVAL;",
      "797:  }",
      "799:  if ((unsigned long)key & alignmask)",
      "800:   return skcipher_setkey_unaligned(tfm, key, keylen);",
      "802:  return cipher->setkey(tfm, key, keylen);",
      "803: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "784:      tfm->__crt_alg->cra_type == &crypto_givcipher_type)",
      "785:   return crypto_init_skcipher_ops_ablkcipher(tfm);",
      "788:  skcipher->encrypt = alg->encrypt;",
      "789:  skcipher->decrypt = alg->decrypt;",
      "790:  skcipher->ivsize = alg->ivsize;",
      "",
      "[Removed Lines]",
      "787:  skcipher->setkey = alg->setkey;",
      "",
      "[Added Lines]",
      "825:  skcipher->setkey = skcipher_setkey;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8d33fac84806eebd2ba31a3136066eeca19255f",
      "candidate_info": {
        "commit_hash": "f8d33fac84806eebd2ba31a3136066eeca19255f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f8d33fac84806eebd2ba31a3136066eeca19255f",
        "files": [
          "crypto/algif_skcipher.c",
          "crypto/skcipher.c",
          "include/crypto/skcipher.h"
        ],
        "message": "crypto: skcipher - prevent using skciphers without setting key\n\nSimilar to what was done for the hash API, update the skcipher API to\ntrack whether each transform has been keyed, and reject\nencryption/decryption if a key is needed but one hasn't been set.\n\nThis isn't as important as the equivalent fix for the hash API because\nsymmetric ciphers almost always require a key (the \"null cipher\" is the\nonly exception), so are unlikely to be used without one.  Still,\ntracking the key will prevent accidental unkeyed use.  algif_skcipher\nalso had to track the key anyway, so the new flag replaces that and\nsimplifies the algif_skcipher implementation.\n\nSigned-off-by: Eric Biggers <ebiggers@google.com>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
        "before_after_code_files": [
          "crypto/algif_skcipher.c||crypto/algif_skcipher.c",
          "crypto/skcipher.c||crypto/skcipher.c",
          "include/crypto/skcipher.h||include/crypto/skcipher.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/skcipher.c||crypto/skcipher.c"
          ],
          "candidate": [
            "crypto/skcipher.c||crypto/skcipher.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/algif_skcipher.c||crypto/algif_skcipher.c": [
          "File: crypto/algif_skcipher.c -> crypto/algif_skcipher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include <linux/net.h>",
          "39: #include <net/sock.h>",
          "46: static int skcipher_sendmsg(struct socket *sock, struct msghdr *msg,",
          "47:        size_t size)",
          "48: {",
          "",
          "[Removed Lines]",
          "41: struct skcipher_tfm {",
          "42:  struct crypto_skcipher *skcipher;",
          "43:  bool has_key;",
          "44: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:  struct alg_sock *ask = alg_sk(sk);",
          "51:  struct sock *psk = ask->parent;",
          "52:  struct alg_sock *pask = alg_sk(psk);",
          "55:  unsigned ivsize = crypto_skcipher_ivsize(tfm);",
          "57:  return af_alg_sendmsg(sock, msg, size, ivsize);",
          "",
          "[Removed Lines]",
          "53:  struct skcipher_tfm *skc = pask->private;",
          "54:  struct crypto_skcipher *tfm = skc->skcipher;",
          "",
          "[Added Lines]",
          "48:  struct crypto_skcipher *tfm = pask->private;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:  struct sock *psk = ask->parent;",
          "66:  struct alg_sock *pask = alg_sk(psk);",
          "67:  struct af_alg_ctx *ctx = ask->private;",
          "70:  unsigned int bs = crypto_skcipher_blocksize(tfm);",
          "71:  struct af_alg_async_req *areq;",
          "72:  int err = 0;",
          "",
          "[Removed Lines]",
          "68:  struct skcipher_tfm *skc = pask->private;",
          "69:  struct crypto_skcipher *tfm = skc->skcipher;",
          "",
          "[Added Lines]",
          "62:  struct crypto_skcipher *tfm = pask->private;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:  int err = 0;",
          "222:  struct sock *psk;",
          "223:  struct alg_sock *pask;",
          "225:  struct sock *sk = sock->sk;",
          "226:  struct alg_sock *ask = alg_sk(sk);",
          "",
          "[Removed Lines]",
          "224:  struct skcipher_tfm *tfm;",
          "",
          "[Added Lines]",
          "217:  struct crypto_skcipher *tfm;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "236:  err = -ENOKEY;",
          "237:  lock_sock_nested(psk, SINGLE_DEPTH_NESTING);",
          "239:   goto unlock;",
          "241:  if (!pask->refcnt++)",
          "",
          "[Removed Lines]",
          "238:  if (!tfm->has_key)",
          "",
          "[Added Lines]",
          "231:  if (crypto_skcipher_get_flags(tfm) & CRYPTO_TFM_NEED_KEY)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "315: static void *skcipher_bind(const char *name, u32 type, u32 mask)",
          "316: {",
          "333: }",
          "335: static void skcipher_release(void *private)",
          "336: {",
          "341: }",
          "343: static int skcipher_setkey(void *private, const u8 *key, unsigned int keylen)",
          "344: {",
          "352: }",
          "354: static void skcipher_sock_destruct(struct sock *sk)",
          "",
          "[Removed Lines]",
          "317:  struct skcipher_tfm *tfm;",
          "318:  struct crypto_skcipher *skcipher;",
          "320:  tfm = kzalloc(sizeof(*tfm), GFP_KERNEL);",
          "321:  if (!tfm)",
          "322:   return ERR_PTR(-ENOMEM);",
          "324:  skcipher = crypto_alloc_skcipher(name, type, mask);",
          "325:  if (IS_ERR(skcipher)) {",
          "326:   kfree(tfm);",
          "327:   return ERR_CAST(skcipher);",
          "328:  }",
          "330:  tfm->skcipher = skcipher;",
          "332:  return tfm;",
          "337:  struct skcipher_tfm *tfm = private;",
          "339:  crypto_free_skcipher(tfm->skcipher);",
          "340:  kfree(tfm);",
          "345:  struct skcipher_tfm *tfm = private;",
          "346:  int err;",
          "348:  err = crypto_skcipher_setkey(tfm->skcipher, key, keylen);",
          "349:  tfm->has_key = !err;",
          "351:  return err;",
          "",
          "[Added Lines]",
          "310:  return crypto_alloc_skcipher(name, type, mask);",
          "315:  crypto_free_skcipher(private);",
          "320:  return crypto_skcipher_setkey(private, key, keylen);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "357:  struct af_alg_ctx *ctx = ask->private;",
          "358:  struct sock *psk = ask->parent;",
          "359:  struct alg_sock *pask = alg_sk(psk);",
          "363:  af_alg_pull_tsgl(sk, ctx->used, NULL, 0);",
          "364:  sock_kzfree_s(sk, ctx->iv, crypto_skcipher_ivsize(tfm));",
          "",
          "[Removed Lines]",
          "360:  struct skcipher_tfm *skc = pask->private;",
          "361:  struct crypto_skcipher *tfm = skc->skcipher;",
          "",
          "[Added Lines]",
          "329:  struct crypto_skcipher *tfm = pask->private;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "370: {",
          "371:  struct af_alg_ctx *ctx;",
          "372:  struct alg_sock *ask = alg_sk(sk);",
          "375:  unsigned int len = sizeof(*ctx);",
          "377:  ctx = sock_kmalloc(sk, len, GFP_KERNEL);",
          "378:  if (!ctx)",
          "379:   return -ENOMEM;",
          "382:           GFP_KERNEL);",
          "383:  if (!ctx->iv) {",
          "384:   sock_kfree_s(sk, ctx, len);",
          "385:   return -ENOMEM;",
          "386:  }",
          "390:  INIT_LIST_HEAD(&ctx->tsgl_list);",
          "391:  ctx->len = len;",
          "",
          "[Removed Lines]",
          "373:  struct skcipher_tfm *tfm = private;",
          "374:  struct crypto_skcipher *skcipher = tfm->skcipher;",
          "381:  ctx->iv = sock_kmalloc(sk, crypto_skcipher_ivsize(skcipher),",
          "388:  memset(ctx->iv, 0, crypto_skcipher_ivsize(skcipher));",
          "",
          "[Added Lines]",
          "341:  struct crypto_skcipher *tfm = private;",
          "348:  ctx->iv = sock_kmalloc(sk, crypto_skcipher_ivsize(tfm),",
          "355:  memset(ctx->iv, 0, crypto_skcipher_ivsize(tfm));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "406: static int skcipher_accept_parent(void *private, struct sock *sk)",
          "407: {",
          "411:   return -ENOKEY;",
          "413:  return skcipher_accept_parent_nokey(private, sk);",
          "",
          "[Removed Lines]",
          "408:  struct skcipher_tfm *tfm = private;",
          "410:  if (!tfm->has_key && crypto_skcipher_has_setkey(tfm->skcipher))",
          "",
          "[Added Lines]",
          "375:  struct crypto_skcipher *tfm = private;",
          "377:  if (crypto_skcipher_get_flags(tfm) & CRYPTO_TFM_NEED_KEY)",
          "",
          "---------------"
        ],
        "crypto/skcipher.c||crypto/skcipher.c": [
          "File: crypto/skcipher.c -> crypto/skcipher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:  err = crypto_blkcipher_setkey(blkcipher, key, keylen);",
          "599:  crypto_skcipher_set_flags(tfm, crypto_blkcipher_get_flags(blkcipher) &",
          "600:            CRYPTO_TFM_RES_MASK);",
          "603: }",
          "605: static int skcipher_crypt_blkcipher(struct skcipher_request *req,",
          "",
          "[Removed Lines]",
          "602:  return err;",
          "",
          "[Added Lines]",
          "601:  if (err)",
          "602:   return err;",
          "604:  crypto_skcipher_clear_flags(tfm, CRYPTO_TFM_NEED_KEY);",
          "605:  return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "674:  skcipher->ivsize = crypto_blkcipher_ivsize(blkcipher);",
          "675:  skcipher->keysize = calg->cra_blkcipher.max_keysize;",
          "677:  return 0;",
          "678: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "680:  if (skcipher->keysize)",
          "681:   crypto_skcipher_set_flags(skcipher, CRYPTO_TFM_NEED_KEY);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "692:  crypto_skcipher_set_flags(tfm,",
          "693:       crypto_ablkcipher_get_flags(ablkcipher) &",
          "694:       CRYPTO_TFM_RES_MASK);",
          "697: }",
          "699: static int skcipher_crypt_ablkcipher(struct skcipher_request *req,",
          "",
          "[Removed Lines]",
          "696:  return err;",
          "",
          "[Added Lines]",
          "701:  if (err)",
          "702:   return err;",
          "704:  crypto_skcipher_clear_flags(tfm, CRYPTO_TFM_NEED_KEY);",
          "705:  return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "767:        sizeof(struct ablkcipher_request);",
          "768:  skcipher->keysize = calg->cra_ablkcipher.max_keysize;",
          "770:  return 0;",
          "771: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "779:  if (skcipher->keysize)",
          "780:   crypto_skcipher_set_flags(skcipher, CRYPTO_TFM_NEED_KEY);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "796: {",
          "797:  struct skcipher_alg *cipher = crypto_skcipher_alg(tfm);",
          "798:  unsigned long alignmask = crypto_skcipher_alignmask(tfm);",
          "800:  if (keylen < cipher->min_keysize || keylen > cipher->max_keysize) {",
          "801:   crypto_skcipher_set_flags(tfm, CRYPTO_TFM_RES_BAD_KEY_LEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811:  int err;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "803:  }",
          "805:  if ((unsigned long)key & alignmask)",
          "809: }",
          "811: static void crypto_skcipher_exit_tfm(struct crypto_tfm *tfm)",
          "",
          "[Removed Lines]",
          "806:   return skcipher_setkey_unaligned(tfm, key, keylen);",
          "808:  return cipher->setkey(tfm, key, keylen);",
          "",
          "[Added Lines]",
          "819:   err = skcipher_setkey_unaligned(tfm, key, keylen);",
          "820:  else",
          "821:   err = cipher->setkey(tfm, key, keylen);",
          "823:  if (err)",
          "824:   return err;",
          "826:  crypto_skcipher_clear_flags(tfm, CRYPTO_TFM_NEED_KEY);",
          "827:  return 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "834:  skcipher->ivsize = alg->ivsize;",
          "835:  skcipher->keysize = alg->max_keysize;",
          "837:  if (alg->exit)",
          "838:   skcipher->base.exit = crypto_skcipher_exit_tfm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856:  if (skcipher->keysize)",
          "857:   crypto_skcipher_set_flags(skcipher, CRYPTO_TFM_NEED_KEY);",
          "",
          "---------------"
        ],
        "include/crypto/skcipher.h||include/crypto/skcipher.h": [
          "File: include/crypto/skcipher.h -> include/crypto/skcipher.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "401:  return tfm->setkey(tfm, key, keylen);",
          "402: }",
          "409: static inline unsigned int crypto_skcipher_default_keysize(",
          "410:  struct crypto_skcipher *tfm)",
          "411: {",
          "",
          "[Removed Lines]",
          "404: static inline bool crypto_skcipher_has_setkey(struct crypto_skcipher *tfm)",
          "405: {",
          "406:  return tfm->keysize;",
          "407: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442: {",
          "443:  struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);",
          "445:  return tfm->encrypt(req);",
          "446: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440:  if (crypto_skcipher_get_flags(tfm) & CRYPTO_TFM_NEED_KEY)",
          "441:   return -ENOKEY;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "460: {",
          "461:  struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);",
          "463:  return tfm->decrypt(req);",
          "464: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:  if (crypto_skcipher_get_flags(tfm) & CRYPTO_TFM_NEED_KEY)",
          "462:   return -ENOKEY;",
          "",
          "---------------"
        ]
      }
    }
  ]
}