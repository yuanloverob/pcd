{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d1d89140c037d3d7c7641da37ca3bff8df146bed",
      "candidate_info": {
        "commit_hash": "d1d89140c037d3d7c7641da37ca3bff8df146bed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d1d89140c037d3d7c7641da37ca3bff8df146bed",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbe.c"
        ],
        "message": "Increase the resolution of the vdbe opcode counters to 64 bits, as apparently some users run single prepared statements that go for longer than 4 billion instructions.  See forum post \"[https://sqlite.org/forum/forumpost/d07949dc94|Possible freeze in the progress loop]\"\n\nFossilOrigin-Name: 612eb590ea44fd402e630f2d62558beb7ce57d7d0ba113c8b72ea60a895c5a43",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6da77973abc325ae8baf64615267a614a0b8bb8dfd0a01a9f7d6c3a8f359564f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "904: #define LARGEST_INT64  (0xffffffff|(((i64)0x7fffffff)<<32))",
          "905: #define SMALLEST_INT64 (((i64)-1) - LARGEST_INT64)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "905: #define LARGEST_UINT64 (0xffffffff|(((u64)0xffffffff)<<32))",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "693:     assert( 0 < db->nProgressOps );",
          "694:     nProgressLimit = db->nProgressOps - (iPrior % db->nProgressOps);",
          "695:   }else{",
          "697:   }",
          "698: #endif",
          "699:   if( p->rc==SQLITE_NOMEM ){",
          "",
          "[Removed Lines]",
          "696:     nProgressLimit = 0xffffffff;",
          "",
          "[Added Lines]",
          "696:     nProgressLimit = LARGEST_UINT64;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "905:     assert( db->nProgressOps!=0 );",
          "906:     nProgressLimit += db->nProgressOps;",
          "907:     if( db->xProgress(db->pProgressArg) ){",
          "909:       rc = SQLITE_INTERRUPT;",
          "910:       goto abort_due_to_error;",
          "911:     }",
          "",
          "[Removed Lines]",
          "908:       nProgressLimit = 0xffffffff;",
          "",
          "[Added Lines]",
          "908:       nProgressLimit = LARGEST_UINT64;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8001:   while( nVmStep>=nProgressLimit && db->xProgress!=0 ){",
          "8002:     nProgressLimit += db->nProgressOps;",
          "8003:     if( db->xProgress(db->pProgressArg) ){",
          "8005:       rc = SQLITE_INTERRUPT;",
          "8006:       goto abort_due_to_error;",
          "8007:     }",
          "",
          "[Removed Lines]",
          "8004:       nProgressLimit = 0xffffffff;",
          "",
          "[Added Lines]",
          "8004:       nProgressLimit = LARGEST_UINT64;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9ebfe20309d5aeec90337099a27e68454d16ff6",
      "candidate_info": {
        "commit_hash": "a9ebfe20309d5aeec90337099a27e68454d16ff6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a9ebfe20309d5aeec90337099a27e68454d16ff6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "When the sqlite3WindowRewrite() routine detects and error, have it convert the SELECT statement into just \"SELECT null\" so that it does not leave the parse tree in a goofy state that can cause problems with subsequent code before the stack has a chance to unwind and report the error. Ticket [d87336c81c7d0873]\n\nFossilOrigin-Name: fa58aad48a788802b13a819e49f9b8787f713bbe395c46c7295e821c52c81738",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 76f54ee86777cbf530654323c953388ef64d0608516722d2522be6c859fa1382",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "595:   int isCommuted = ExprHasProperty(pExpr,EP_Commuted);",
          "597:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "598:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "599:     return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:   if( pParse->nErr ) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2688: void sqlite3SubselectError(Parse *pParse, int nActual, int nExpect){",
          "2691: }",
          "2692: #endif",
          "",
          "[Removed Lines]",
          "2689:   const char *zFmt = \"sub-select returns %d columns - expected %d\";",
          "2690:   sqlite3ErrorMsg(pParse, zFmt, nActual, nExpect);",
          "",
          "[Added Lines]",
          "2690:   if( pParse->nErr==0 ){",
          "2691:     const char *zFmt = \"sub-select returns %d columns - expected %d\";",
          "2692:     sqlite3ErrorMsg(pParse, zFmt, nActual, nExpect);",
          "2693:   }",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:   if( OK_IF_ALWAYS_TRUE(p) ) clearSelect(db, p, 1);",
          "189: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199: void sqlite3SelectReset(Parse *pParse, Select *p){",
          "200:   if( ALWAYS(p) ){",
          "201:     clearSelect(pParse->db, p, 0);",
          "202:     memset(&p->iLimit, 0, sizeof(Select) - offsetof(Select,iLimit));",
          "203:     p->pEList = sqlite3ExprListAppend(pParse, 0,",
          "204:                      sqlite3ExprAlloc(pParse->db,TK_NULL,0,0));",
          "205:   }",
          "206: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2713:         assert( unionTab==dest.iSDParm || dest.eDest!=priorOp );",
          "2715:           int iCont, iBreak, iStart;",
          "2717:           iBreak = sqlite3VdbeMakeLabel(pParse);",
          "2718:           iCont = sqlite3VdbeMakeLabel(pParse);",
          "2719:           computeLimitRegisters(pParse, p, iBreak);",
          "",
          "[Removed Lines]",
          "2714:         if( dest.eDest!=priorOp ){",
          "2716:           assert( p->pEList );",
          "",
          "[Added Lines]",
          "2731:         assert( p->pEList || db->mallocFailed );",
          "2732:         if( dest.eDest!=priorOp && db->mallocFailed==0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5738:   }",
          "5740: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "5742:     goto select_end;",
          "5743:   }",
          "5744: #if SELECTTRACE_ENABLED",
          "",
          "[Removed Lines]",
          "5741:   if( sqlite3WindowRewrite(pParse, p) ){",
          "",
          "[Added Lines]",
          "5758:   rc = sqlite3WindowRewrite(pParse, p);",
          "5759:   if( rc ){",
          "5760:     assert( pParse->nErr>0 );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4092: Select *sqlite3SelectNew(Parse*,ExprList*,SrcList*,Expr*,ExprList*,",
          "4093:                          Expr*,ExprList*,u32,Expr*);",
          "4094: void sqlite3SelectDelete(sqlite3*, Select*);",
          "4095: Table *sqlite3SrcListLookup(Parse*, SrcList*);",
          "4096: int sqlite3IsReadOnly(Parse*, Table*, int);",
          "4097: void sqlite3OpenTable(Parse*, int iCur, int iDb, Table*, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4095: void sqlite3SelectReset(Parse*, Select*);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1039:     sqlite3DbFree(db, pTab);",
          "1040:   }",
          "1045:   }",
          "1046:   return rc;",
          "1047: }",
          "",
          "[Removed Lines]",
          "1042:   if( rc && pParse->nErr==0 ){",
          "1043:     assert( pParse->db->mallocFailed );",
          "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
          "",
          "[Added Lines]",
          "1045:   if( rc ){",
          "1046:     if( pParse->nErr==0 ){",
          "1047:       assert( pParse->db->mallocFailed );",
          "1048:       sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
          "1049:     }",
          "1050:     sqlite3SelectReset(pParse, p);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1329:   SELECT c FROM v0 WHERE c BETWEEN -10 AND 20;",
          "1330: } {}",
          "1333: # in a join.",
          "1334: #",
          "1335: reset_db",
          "",
          "[Removed Lines]",
          "1332: # 2019-20-20 mrigger reported problem with a FILTER clause on an aggregate",
          "",
          "[Added Lines]",
          "1332: # 2019-12-20 mrigger reported problem with a FILTER clause on an aggregate",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1361:   SELECT * FROM t0 WHERE (t0.c0, 1) IN(SELECT NTILE(1) OVER(), 0 FROM t0);",
          "1362: }",
          "1365: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1364: # 2019-12-25 ticket d87336c81c7d0873",
          "1365: #",
          "1366: reset_db",
          "1367: do_catchsql_test 40.1 {",
          "1368:   CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
          "1369:   SELECT * FROM t0",
          "1370:    WHERE ((0,0) IN (SELECT COUNT(*),LAG(5)OVER(PARTITION BY 0) FROM t0),0)<=(c1,0);",
          "1371: } {1 {1st ORDER BY term out of range - should be between 1 and 3}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62b6e1d0429c26fa5f2278c0971c09167b0b2b0e",
      "candidate_info": {
        "commit_hash": "62b6e1d0429c26fa5f2278c0971c09167b0b2b0e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/62b6e1d0429c26fa5f2278c0971c09167b0b2b0e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Performance optimization in sqlite3VdbeMakeReady().\n\nFossilOrigin-Name: aa92f9b95f95d40cc58910da87168a5bd440f71deb072dc651bb15936315786c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9bb71ba708ba72255ba8d18c9856e38ddf53eae2d61c8435149354fb2b2459e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2375:     };",
          "2376:     int iFirst, mx, i;",
          "2377:     if( nMem<10 ) nMem = 10;",
          "2378:     if( pParse->explain==2 ){",
          "2379:       sqlite3VdbeSetNumCols(p, 4);",
          "2380:       iFirst = 8;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2378:     p->explain = pParse->explain;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2426:   p->pVList = pParse->pVList;",
          "2427:   pParse->pVList =  0;",
          "2429:   if( db->mallocFailed ){",
          "2430:     p->nVar = 0;",
          "2431:     p->nCursor = 0;",
          "",
          "[Removed Lines]",
          "2428:   p->explain = pParse->explain;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f567eb9f5f561e8251160e365de7d65b968d32c",
      "candidate_info": {
        "commit_hash": "9f567eb9f5f561e8251160e365de7d65b968d32c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9f567eb9f5f561e8251160e365de7d65b968d32c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/corruptL.test"
        ],
        "message": "Fix a problem causing test failures in corruptL.test for some permutations.\n\nFossilOrigin-Name: 680bdc6524ad6af0e74401e96e3a576145042fb865c1582bfaffc11d4ff76a4f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2a167cfbb2abd76e1b33116b671e58a767fc972dd79bee0004aad09a1dd2b487",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1303: # frame in the wal file) is greater than the combined initial sizes",
          "1304: # of the database and wal file.",
          "1305: #",
          "1336: finish_test",
          "",
          "[Removed Lines]",
          "1306: reset_db",
          "1307: do_execsql_test 17.0 {",
          "1308:   CREATE TABLE t1(o INTEGER PRIMARY KEY, t UNIQUE);",
          "1309:   INSERT INTO t1(t) VALUES(randomblob(123));",
          "1310:   INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1311:   INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1312:   INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1313:   INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1314:   INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1315:   INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1317:   PRAGMA journal_mode = wal;",
          "1318:   INSERT INTO t1 VALUES(-1, 'b');",
          "1319: } {wal}",
          "1321: do_test 17.1 {",
          "1322:   set fd [open test.db r+]",
          "1323:   chan truncate $fd 2048",
          "1324:   file size test.db",
          "1325: } {2048}",
          "1327: do_catchsql_test 17.2 {",
          "1328:   PRAGMA wal_checkpoint",
          "1329: } {1 {database disk image is malformed}}",
          "1331: do_test 17.3 {",
          "1332:   close $fd",
          "1333: } {}",
          "",
          "[Added Lines]",
          "1306: if {[wal_is_capable]} {",
          "1307:   reset_db",
          "1308:   do_execsql_test 17.0 {",
          "1309:     CREATE TABLE t1(o INTEGER PRIMARY KEY, t UNIQUE);",
          "1310:     INSERT INTO t1(t) VALUES(randomblob(123));",
          "1311:     INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1312:     INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1313:     INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1314:     INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1315:     INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1316:     INSERT INTO t1(t) SELECT randomblob(123) FROM t1;",
          "1318:     PRAGMA journal_mode = wal;",
          "1319:     INSERT INTO t1 VALUES(-1, 'b');",
          "1320:   } {wal}",
          "1322:   do_test 17.1 {",
          "1323:     set fd [open test.db r+]",
          "1324:     chan truncate $fd 2048",
          "1325:     file size test.db",
          "1326:   } {2048}",
          "1328:   do_catchsql_test 17.2 {",
          "1329:     PRAGMA wal_checkpoint",
          "1330:   } {1 {database disk image is malformed}}",
          "1332:   do_test 17.3 {",
          "1333:     close $fd",
          "1334:   } {}",
          "1335: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0518d061175e6b70197d2f8ad9e54d3e2062d5d7",
      "candidate_info": {
        "commit_hash": "0518d061175e6b70197d2f8ad9e54d3e2062d5d7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0518d061175e6b70197d2f8ad9e54d3e2062d5d7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "src/vdbevtab.c"
        ],
        "message": "Provide content for the bytecode.subprog column.\n\nFossilOrigin-Name: df893364b7cea07ff2b15b80cb294dccaffe701d51452264599b55304a36fa7c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbevtab.c||src/vdbevtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5896cbf4d0c7854c29c96d2ea2cea4adaedaa027a0fe4a3f0ac4dfbeaabb8dec",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2030:         }",
          "2031:         apSub = (SubProgram **)pSub->z;",
          "2032:         apSub[nSub++] = aOp[i].p4.pProgram;",
          "2034:         pSub->n = nSub*sizeof(SubProgram*);",
          "2035:         nRow += aOp[i].p4.pProgram->nOp;",
          "2036:       }",
          "",
          "[Removed Lines]",
          "2033:         pSub->flags |= MEM_Blob;",
          "",
          "[Added Lines]",
          "2033:         MemSetTypeFlag(pSub, MEM_Blob);",
          "",
          "---------------"
        ],
        "src/vdbevtab.c||src/vdbevtab.c": [
          "File: src/vdbevtab.c -> src/vdbevtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:   bytecodevtab *pVTab;",
          "166:   Op *pOp = pCur->aOp + pCur->iAddr;",
          "167:   switch( i ){",
          "169:       sqlite3_result_int(ctx, pCur->iAddr);",
          "170:       break;",
          "172:       sqlite3_result_text(ctx, (char*)sqlite3OpcodeName(pOp->opcode),",
          "173:                           -1, SQLITE_STATIC);",
          "174:       break;",
          "176:       sqlite3_result_int(ctx, pOp->p1);",
          "177:       break;",
          "179:       sqlite3_result_int(ctx, pOp->p2);",
          "180:       break;",
          "182:       sqlite3_result_int(ctx, pOp->p3);",
          "183:       break;",
          "186:       pVTab = (bytecodevtab*)cur->pVtab;",
          "187:       if( pCur->zP4==0 ){",
          "188:         pCur->zP4 = sqlite3VdbeDisplayP4(pVTab->db, pOp);",
          "",
          "[Removed Lines]",
          "168:     case 0:",
          "171:     case 1:",
          "175:     case 2:",
          "178:     case 3:",
          "181:     case 4:",
          "184:     case 5:",
          "185:     case 7:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196: #endif",
          "197:       }",
          "198:       break;",
          "200:       sqlite3_result_int(ctx, pOp->p5);",
          "201:       break;",
          "202:   }",
          "203:   return SQLITE_OK;",
          "204: }",
          "",
          "[Removed Lines]",
          "199:     case 6:",
          "",
          "[Added Lines]",
          "203:       Op *aOp = pCur->aOp;",
          "204:       if( pCur->iRowid==pCur->iAddr+1 ){",
          "206:       }else if( aOp[0].p4type==P4_DYNAMIC",
          "207:        && aOp[0].p4.z!=0",
          "208:        && strncmp(aOp[0].p4.z,\"-- \", 3)==0 ){",
          "209:          sqlite3_result_text(ctx, aOp[0].p4.z+3, -1, SQLITE_STATIC);",
          "210:       }else{",
          "211:          sqlite3_result_text(ctx, \"(FK)\", 4, SQLITE_STATIC);",
          "212:       }",
          "213:       break;",
          "214:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}