{
  "cve_id": "CVE-2018-20179",
  "cve_desc": "rdesktop versions up to and including v1.8.3 contain an Integer Underflow that leads to a Heap-Based Buffer Overflow in the function lspci_process() and results in memory corruption and probably even a remote code execution.",
  "repo": "rdesktop/rdesktop",
  "patch_hash": "4dca546d04321a610c1835010b5dad85163b65e1",
  "patch_info": {
    "commit_hash": "4dca546d04321a610c1835010b5dad85163b65e1",
    "repo": "rdesktop/rdesktop",
    "commit_url": "https://github.com/rdesktop/rdesktop/commit/4dca546d04321a610c1835010b5dad85163b65e1",
    "files": [
      "asn.c",
      "bitmap.c",
      "cliprdr.c",
      "constants.h",
      "cssp.c",
      "lspci.c",
      "mcs.c",
      "orders.c",
      "proto.h",
      "rdp.c",
      "rdpdr.c",
      "rdpsnd.c",
      "seamless.c",
      "secure.c",
      "stream.h",
      "types.h"
    ],
    "message": "Malicious RDP server security fixes\n\nThis commit includes fixes for a set of 21 vulnerabilities in\nrdesktop when a malicious RDP server is used.\n\nAll vulnerabilities was identified and reported by Eyal Itkin.\n\n * Add rdp_protocol_error function that is used in several fixes\n * Refactor of process_bitmap_updates\n * Fix possible integer overflow in s_check_rem() on 32bit arch\n * Fix memory corruption in process_bitmap_data - CVE-2018-8794\n * Fix remote code execution in process_bitmap_data - CVE-2018-8795\n * Fix remote code execution in process_plane - CVE-2018-8797\n * Fix Denial of Service in mcs_recv_connect_response - CVE-2018-20175\n * Fix Denial of Service in mcs_parse_domain_params - CVE-2018-20175\n * Fix Denial of Service in sec_parse_crypt_info - CVE-2018-20176\n * Fix Denial of Service in sec_recv - CVE-2018-20176\n * Fix minor information leak in rdpdr_process - CVE-2018-8791\n * Fix Denial of Service in cssp_read_tsrequest - CVE-2018-8792\n * Fix remote code execution in cssp_read_tsrequest - CVE-2018-8793\n * Fix Denial of Service in process_bitmap_data - CVE-2018-8796\n * Fix minor information leak in rdpsnd_process_ping - CVE-2018-8798\n * Fix Denial of Service in process_secondary_order - CVE-2018-8799\n * Fix remote code execution in in ui_clip_handle_data - CVE-2018-8800\n * Fix major information leak in ui_clip_handle_data - CVE-2018-20174\n * Fix memory corruption in rdp_in_unistr - CVE-2018-20177\n * Fix Denial of Service in process_demand_active - CVE-2018-20178\n * Fix remote code execution in lspci_process - CVE-2018-20179\n * Fix remote code execution in rdpsnddbg_process - CVE-2018-20180\n * Fix remote code execution in seamless_process - CVE-2018-20181\n * Fix remote code execution in seamless_process_line - CVE-2018-20182",
    "before_after_code_files": [
      "asn.c||asn.c",
      "bitmap.c||bitmap.c",
      "cliprdr.c||cliprdr.c",
      "constants.h||constants.h",
      "cssp.c||cssp.c",
      "lspci.c||lspci.c",
      "mcs.c||mcs.c",
      "orders.c||orders.c",
      "proto.h||proto.h",
      "rdp.c||rdp.c",
      "rdpdr.c||rdpdr.c",
      "rdpsnd.c||rdpsnd.c",
      "seamless.c||seamless.c",
      "secure.c||secure.c",
      "stream.h||stream.h",
      "types.h||types.h"
    ]
  },
  "patch_diff": {
    "asn.c||asn.c": [
      "File: asn.c -> asn.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: RD_BOOL",
      "26: {",
      "27:  int tag, len;",
      "",
      "[Removed Lines]",
      "25: ber_parse_header(STREAM s, int tagval, int *length)",
      "",
      "[Added Lines]",
      "25: ber_parse_header(STREAM s, int tagval, uint32 *length)",
      "",
      "---------------"
    ],
    "bitmap.c||bitmap.c": [
      "File: bitmap.c -> bitmap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "794:      replen = revcode;",
      "795:      collen = 0;",
      "796:     }",
      "798:     {",
      "799:      color = CVAL(in);",
      "",
      "[Removed Lines]",
      "797:     while (collen > 0)",
      "",
      "[Added Lines]",
      "797:     while (indexw < width && collen > 0)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "802:      indexw++;",
      "803:      collen--;",
      "804:     }",
      "806:     {",
      "808:      out += 4;",
      "",
      "[Removed Lines]",
      "805:     while (replen > 0)",
      "",
      "[Added Lines]",
      "805:     while (indexw < width && replen > 0)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "824:      replen = revcode;",
      "825:      collen = 0;",
      "826:     }",
      "828:     {",
      "829:      x = CVAL(in);",
      "830:      if (x & 1)",
      "",
      "[Removed Lines]",
      "827:     while (collen > 0)",
      "",
      "[Added Lines]",
      "827:     while (indexw < width && collen > 0)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "844:      indexw++;",
      "845:      collen--;",
      "846:     }",
      "848:     {",
      "849:      x = last_line[indexw * 4] + color;",
      "",
      "[Removed Lines]",
      "847:     while (replen > 0)",
      "",
      "[Added Lines]",
      "847:     while (indexw < width && replen > 0)",
      "",
      "---------------"
    ],
    "cliprdr.c||cliprdr.c": [
      "File: cliprdr.c -> cliprdr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:  uint16 type, status;",
      "119:  uint32 length, format;",
      "120:  uint8 *data;",
      "122:  in_uint16_le(s, type);",
      "123:  in_uint16_le(s, status);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:  struct stream packet = *s;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "127:  logger(Clipboard, Debug, \"cliprdr_process(), type=%d, status=%d, length=%d\", type, status,",
      "128:         length);",
      "130:  if (status == CLIPRDR_ERROR)",
      "131:  {",
      "132:   switch (type)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "131:  if (!s_check_rem(s, length))",
      "132:  {",
      "133:   rdp_protocol_error(\"cliprdr_process(), consume of packet from stream would overrun\", &packet);",
      "134:  }",
      "",
      "---------------"
    ],
    "constants.h||constants.h": [
      "File: constants.h -> constants.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: #define ENC_SALTED_CHECKSUM  0x0010",
      "752: #define NO_BITMAP_COMPRESSION_HDR 0x0400",
      "755: #define NEGOTIATEORDERSUPPORT 0x0002",
      "756: #define ZEROBOUNDSDELTASSUPPORT 0x0008",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "755: #define BITMAP_COMPRESSION              0x0001",
      "",
      "---------------"
    ],
    "cssp.c||cssp.c": [
      "File: cssp.c -> cssp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "595:  STREAM s;",
      "596:  int length;",
      "597:  int tagval;",
      "599:  s = tcp_recv(NULL, 4);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "598:  struct stream packet;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "624:  s = tcp_recv(s, length);",
      "627:  if (!ber_in_header(s, &tagval, &length) ||",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "626:  packet = *s;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "632:  if (!ber_in_header(s, &tagval, &length) ||",
      "633:      tagval != (BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0))",
      "634:   return False;",
      "635:  in_uint8s(s, length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "638:  if (!s_check_rem(s, length))",
      "639:  {",
      "640:    rdp_protocol_error(\"cssp_read_tsrequest(), consume of version from stream would overrun\",",
      "641:         &packet);",
      "642:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "653:   if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)",
      "654:    return False;",
      "657:   out_uint8p(token, s->p, length);",
      "658:   s_mark_end(token);",
      "659:  }",
      "",
      "[Removed Lines]",
      "656:   token->end = token->p = token->data;",
      "",
      "[Added Lines]",
      "664:   if (!s_check_rem(s, length))",
      "665:   {",
      "666:    rdp_protocol_error(\"cssp_read_tsrequest(), consume of token from stream would overrun\",",
      "667:         &packet);",
      "668:   }",
      "670:   s_realloc(token, length);",
      "671:   s_reset(token);",
      "",
      "---------------"
    ],
    "lspci.c||lspci.c": [
      "File: lspci.c -> lspci.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2:    rdesktop: A Remote Desktop Protocol client.",
      "3:    Support for the Matrox \"lspci\" channel",
      "6:    This program is free software: you can redistribute it and/or modify",
      "7:    it under the terms of the GNU General Public License as published by",
      "",
      "[Removed Lines]",
      "4:    Copyright (C) 2005 Matrox Graphics Inc.",
      "",
      "[Added Lines]",
      "4:    Copyright (C) 2005 Matrox Graphics Inc.",
      "5:    Copyright 2018 Henrik Andersson <hean01@cendio.se> for Cendio AB",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "134:  unsigned int pkglen;",
      "135:  static char *rest = NULL;",
      "136:  char *buf;",
      "138:  pkglen = s->end - s->p;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:  struct stream packet = *s;",
      "140:  if (!s_check(s))",
      "141:  {",
      "142:   rdp_protocol_error(\"lspci_process(), stream is in unstable state\", &packet);",
      "143:  }",
      "",
      "---------------"
    ],
    "mcs.c||mcs.c": [
      "File: mcs.c -> mcs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: static RD_BOOL",
      "46: mcs_parse_domain_params(STREAM s)",
      "47: {",
      "50:  ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);",
      "51:  in_uint8s(s, length);",
      "53:  return s_check(s);",
      "",
      "[Removed Lines]",
      "48:  int length;",
      "",
      "[Added Lines]",
      "48:  uint32 length;",
      "49:  struct stream packet = *s;",
      "53:  if (!s_check_rem(s, length))",
      "54:  {",
      "55:   rdp_protocol_error(\"mcs_parse_domain_params(), consume domain params from stream would overrun\", &packet);",
      "56:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89: {",
      "90:  UNUSED(mcs_data);",
      "91:  uint8 result;",
      "93:  STREAM s;",
      "94:  RD_BOOL is_fastpath;",
      "95:  uint8 fastpath_hdr;",
      "",
      "[Removed Lines]",
      "92:  int length;",
      "",
      "[Added Lines]",
      "99:  uint32 length;",
      "101:  struct stream packet;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "100:  if (s == NULL)",
      "101:   return False;",
      "103:  ber_parse_header(s, MCS_CONNECT_RESPONSE, &length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:  packet = *s;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "113:  ber_parse_header(s, BER_TAG_INTEGER, &length);",
      "115:  mcs_parse_domain_params(s);",
      "117:  ber_parse_header(s, BER_TAG_OCTET_STRING, &length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:  if (!s_check_rem(s, length))",
      "127:  {",
      "128:   rdp_protocol_error(\"mcs_recv_connect_response(), consume connect id from stream would overrun\", &packet);",
      "129:  }",
      "",
      "---------------"
    ],
    "orders.c||orders.c": [
      "File: orders.c -> orders.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1259:  uint16 flags;",
      "1260:  uint8 type;",
      "1261:  uint8 *next_order;",
      "1263:  in_uint16_le(s, length);",
      "1265:  in_uint8(s, type);",
      "1267:  next_order = s->p + (sint16) length + 7;",
      "1269:  switch (type)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1262:  struct stream packet = *s;",
      "1268:  if (!s_check_rem(s, length + 7))",
      "1269:  {",
      "1270:   rdp_protocol_error(\"process_secondary_order(), next order pointer would overrun stream\", &packet);",
      "1271:  }",
      "",
      "---------------"
    ],
    "proto.h||proto.h": [
      "File: proto.h -> proto.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "164:       char *directory, RD_BOOL reconnect);",
      "165: void rdp_reset_state(void);",
      "166: void rdp_disconnect(void);",
      "168: int get_device_index(RD_NTHANDLE handle);",
      "169: void convert_to_unix_filename(char *filename);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "167: void rdp_protocol_error(const char *message, STREAM s);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "225: RD_BOOL ber_in_header(STREAM s, int *tagval, int *length);",
      "226: void ber_out_header(STREAM s, int tagval, int length);",
      "228: void ber_out_integer(STREAM s, int value);",
      "229: void ber_out_sequence(STREAM s, STREAM contents);",
      "",
      "[Removed Lines]",
      "227: RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);",
      "",
      "[Added Lines]",
      "228: RD_BOOL ber_parse_header(STREAM s, int tagval, uint32 *length);",
      "",
      "---------------"
    ],
    "rdp.c||rdp.c": [
      "File: rdp.c -> rdp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "285:  size_t ibl, obl;",
      "286:  char *pin, *pout;",
      "289:  if (!icv_utf16_to_local)",
      "290:  {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "288:  struct stream packet = *s;",
      "290:  if ((in_len < 0) || ((uint32)in_len >= (RD_UINT32_MAX / 2)))",
      "291:  {",
      "292:   logger(Protocol, Error, \"rdp_in_unistr(), length of unicode data is out of bounds.\");",
      "293:   abort();",
      "294:  }",
      "296:  if (!s_check_rem(s, in_len))",
      "297:  {",
      "298:   rdp_protocol_error(\"rdp_in_unistr(), consume of unicode data from stream would overrun\", &packet);",
      "299:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1211: {",
      "1212:  uint8 type;",
      "1213:  uint16 len_src_descriptor, len_combined_caps;",
      "1216:  rd_create_ui();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1227:  struct stream packet = *s;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1218:  in_uint32_le(s, g_rdp_shareid);",
      "1219:  in_uint16_le(s, len_src_descriptor);",
      "1220:  in_uint16_le(s, len_combined_caps);",
      "1221:  in_uint8s(s, len_src_descriptor);",
      "1223:  logger(Protocol, Debug, \"process_demand_active(), shareid=0x%x\", g_rdp_shareid);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1236:  if (!s_check_rem(s, len_src_descriptor))",
      "1237:  {",
      "1238:   rdp_protocol_error(\"rdp_demand_active(), consume of source descriptor from stream would overrun\", &packet);",
      "1239:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1390:  }",
      "1391: }",
      "1396: {",
      "1398:  uint16 left, top, right, bottom, width, height;",
      "1400:  uint8 *data, *bmpdata;",
      "1403:  logger(Protocol, Debug, \"%s()\", __func__);",
      "1453:   bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
      "1455:   {",
      "1457:   }",
      "1464:   xfree(bmpdata);",
      "1465:  }",
      "1466: }",
      "",
      "[Removed Lines]",
      "1394: void",
      "1395: process_bitmap_updates(STREAM s)",
      "1397:  uint16 num_updates;",
      "1399:  uint16 cx, cy, bpp, Bpp, compress, bufsize, size;",
      "1401:  int i;",
      "1405:  in_uint16_le(s, num_updates);",
      "1407:  for (i = 0; i < num_updates; i++)",
      "1408:  {",
      "1409:   in_uint16_le(s, left);",
      "1410:   in_uint16_le(s, top);",
      "1411:   in_uint16_le(s, right);",
      "1412:   in_uint16_le(s, bottom);",
      "1413:   in_uint16_le(s, width);",
      "1414:   in_uint16_le(s, height);",
      "1415:   in_uint16_le(s, bpp);",
      "1416:   Bpp = (bpp + 7) / 8;",
      "1417:   in_uint16_le(s, compress);",
      "1418:   in_uint16_le(s, bufsize);",
      "1420:   cx = right - left + 1;",
      "1421:   cy = bottom - top + 1;",
      "1423:   logger(Graphics, Debug,",
      "1424:          \"process_bitmap_updates(), [%d,%d,%d,%d], [%d,%d], bpp=%d, compression=%d\",",
      "1425:          left, top, right, bottom, width, height, Bpp, compress);",
      "1427:   if (!compress)",
      "1428:   {",
      "1429:    int y;",
      "1430:    bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
      "1431:    for (y = 0; y < height; y++)",
      "1432:    {",
      "1433:     in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],",
      "1434:        width * Bpp);",
      "1435:    }",
      "1436:    ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
      "1437:    xfree(bmpdata);",
      "1438:    continue;",
      "1439:   }",
      "1442:   if (compress & 0x400)",
      "1443:   {",
      "1444:    size = bufsize;",
      "1445:   }",
      "1446:   else",
      "1447:   {",
      "1449:    in_uint16_le(s, size);",
      "1451:   }",
      "1452:   in_uint8p(s, data, size);",
      "1454:   if (bitmap_decompress(bmpdata, width, height, data, size, Bpp))",
      "1456:    ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
      "1458:   else",
      "1459:   {",
      "1460:    logger(Graphics, Warning,",
      "1461:           \"process_bitmap_updates(), failed to decompress bitmap\");",
      "1462:   }",
      "",
      "[Added Lines]",
      "1413: static void",
      "1414: process_bitmap_data(STREAM s)",
      "1417:  uint16 cx, cy, bpp, Bpp, flags, bufsize, size;",
      "1422:  struct stream packet = *s;",
      "1431:  Bpp = (bpp + 7) / 8;",
      "1435:  cx = right - left + 1;",
      "1436:  cy = bottom - top + 1;",
      "1439:   this code. The value of bpp is not passed to",
      "1440:   ui_paint_bitmap() which relies on g_server_bpp for drawing",
      "1441:   the bitmap data.",
      "1443:   Does this means that we can sanity check bpp with g_server_bpp ?",
      "1446:  if (Bpp == 0 || width == 0 || height == 0)",
      "1447:  {",
      "1448:         logger(Protocol, Warning, \"%s(), [%d,%d,%d,%d], [%d,%d], bpp=%d, flags=%x\", __func__,",
      "1449:     left, top, right, bottom, width, height, bpp, flags);",
      "1450:   rdp_protocol_error(\"TS_BITMAP_DATA, unsafe size of bitmap data received from server\", &packet);",
      "1451:  }",
      "1453:  if ((RD_UINT32_MAX / Bpp) <= (width * height))",
      "1454:  {",
      "1455:   logger(Protocol, Warning, \"%s(), [%d,%d,%d,%d], [%d,%d], bpp=%d, flags=%x\", __func__,",
      "1456:     left, top, right, bottom, width, height, bpp, flags);",
      "1457:   rdp_protocol_error(\"TS_BITMAP_DATA, unsafe size of bitmap data received from server\", &packet);",
      "1458:  }",
      "1460:  if (flags == 0)",
      "1461:  {",
      "1463:   int y;",
      "1465:   for (y = 0; y < height; y++)",
      "1467:    in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)], width * Bpp);",
      "1470:   ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
      "1472:   return;",
      "1473:  }",
      "1475:  if (flags & NO_BITMAP_COMPRESSION_HDR)",
      "1476:  {",
      "1477:   size = bufsize;",
      "1478:  }",
      "1479:  else",
      "1480:  {",
      "1486:  }",
      "1489:  if (!s_check_rem(s, size))",
      "1490:  {",
      "1491:   rdp_protocol_error(\"process_bitmap_data(), consume of bitmap data from stream would overrun\", &packet);",
      "1492:  }",
      "1493:  in_uint8p(s, data, size);",
      "1494:  bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
      "1495:  if (bitmap_decompress(bmpdata, width, height, data, size, Bpp))",
      "1496:  {",
      "1497:   ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
      "1498:  }",
      "1499:  else",
      "1500:  {",
      "1501:   logger(Protocol, Warning, \"%s(), failed to decompress bitmap\", __func__);",
      "1502:  }",
      "1504:  xfree(bmpdata);",
      "1505: }",
      "1508: void",
      "1509: process_bitmap_updates(STREAM s)",
      "1510: {",
      "1511:  int i;",
      "1512:  uint16 num_updates;",
      "1516:  for (i = 0; i < num_updates; i++)",
      "1517:  {",
      "1518:   process_bitmap_data(s);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2013:  logger(Protocol, Debug, \"%s()\", __func__);",
      "2014:  sec_disconnect();",
      "2015: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2073:    A protocol error is defined as:",
      "2075:     - A value is outside specified range for example;",
      "2076:       bpp for a bitmap is not allowed to be greater than the",
      "2077:       value 32 but is represented by a byte in protocol.",
      "2080: void",
      "2081: rdp_protocol_error(const char *message, STREAM s)",
      "2082: {",
      "2083:  logger(Protocol, Error, \"%s(), %s\", __func__, message);",
      "2084:  if (s)",
      "2085:   hexdump(s->p, s_length(s));",
      "2086:  exit(0);",
      "2087: }",
      "",
      "---------------"
    ],
    "rdpdr.c||rdpdr.c": [
      "File: rdpdr.c -> rdpdr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "854:  uint16 vmin;",
      "855:  uint16 component;",
      "856:  uint16 pakid;",
      "858:  logger(Protocol, Debug, \"rdpdr_process()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "857:  struct stream packet = *s;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "880:     if (vmin < 0x000c)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "881:        so lets check that we actually got",
      "882:        valid data from stream to prevent",
      "884:     if (!s_check(s))",
      "885:     {",
      "886:      rdp_protocol_error(\"rdpdr_process(), consume of g_client_id from stream did overrun\", &packet);",
      "887:     }",
      "",
      "---------------"
    ],
    "rdpsnd.c||rdpsnd.c": [
      "File: rdpsnd.c -> rdpsnd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "269:  uint16 tick;",
      "270:  uint16 packsize;",
      "271:  STREAM out;",
      "273:  in_uint16_le(in, tick);",
      "274:  in_uint16_le(in, packsize);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "272:  struct stream packet = *in;",
      "274:  if (!s_check_rem(in, 4))",
      "275:  {",
      "276:   rdp_protocol_error(\"rdpsnd_process_training(), consume of training data from stream would overrun\", &packet);",
      "277:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "445:  static char *rest = NULL;",
      "446:  char *buf;",
      "448:  pkglen = s->end - s->p;",
      "450:  buf = (char *) xmalloc(pkglen + 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "454:  if (!s_check(s))",
      "455:  {",
      "456:   rdp_protocol_error(\"rdpsnddbg_process(), stream is in unstable state\", s);",
      "457:  }",
      "",
      "---------------"
    ],
    "seamless.c||seamless.c": [
      "File: seamless.c -> seamless.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "169:    icon_buf[len] = strtol(byte, NULL, 16);",
      "170:    len++;",
      "171:   }",
      "173:   ui_seamless_seticon(id, tok5, width, height, chunk, icon_buf, len);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:    if ((size_t)len >= sizeof(icon_buf))",
      "173:    {",
      "174:     logger(Protocol, Warning, \"seamless_process_line(), icon data would overrun icon_buf\");",
      "175:     break;",
      "176:    }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "370: {",
      "371:  unsigned int pkglen;",
      "372:  char *buf;",
      "374:  pkglen = s->end - s->p;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:  struct stream packet = *s;",
      "381:  if (!s_check(s))",
      "382:  {",
      "383:   rdp_protocol_error(\"seamless_process(), stream is in unstable state\", &packet);",
      "384:  }",
      "",
      "---------------"
    ],
    "secure.c||secure.c": [
      "File: secure.c -> secure.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "296: void",
      "297: sec_decrypt(uint8 * data, int length)",
      "298: {",
      "299:  if (g_sec_decrypt_use_count == 4096)",
      "300:  {",
      "301:   sec_update(g_sec_decrypt_key, g_sec_decrypt_update_key);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "299:  if (length <= 0)",
      "300:   return;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "848:  uint16 sec_flags;",
      "849:  uint16 channel;",
      "850:  STREAM s;",
      "852:  while ((s = mcs_recv(&channel, is_fastpath, &fastpath_hdr)) != NULL)",
      "853:  {",
      "854:   if (*is_fastpath == True)",
      "855:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "854:  struct stream packet;",
      "858:   packet = *s;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "859:    fastpath_flags = (fastpath_hdr & 0xC0) >> 6;",
      "860:    if (fastpath_flags & FASTPATH_OUTPUT_ENCRYPTED)",
      "861:    {",
      "863:     sec_decrypt(s->p, s->end - s->p);",
      "864:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "867:     if (!s_check_rem(s, 8)) {",
      "868:      rdp_protocol_error(\"sec_recv(), consume fastpath signature from stream would overrun\", &packet);",
      "869:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "875:    {",
      "876:     if (sec_flags & SEC_ENCRYPT)",
      "877:     {",
      "879:      sec_decrypt(s->p, s->end - s->p);",
      "880:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "887:      if (!s_check_rem(s, 8)) {",
      "888:       rdp_protocol_error(\"sec_recv(), consume encrypt signature from stream would overrun\", &packet);",
      "889:      }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "889:     {",
      "890:      uint8 swapbyte;",
      "893:      sec_decrypt(s->p, s->end - s->p);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "905:      if (!s_check_rem(s, 8)) {",
      "906:       rdp_protocol_error(\"sec_recv(), consume redirect signature from stream would overrun\", &packet);",
      "907:      }",
      "",
      "---------------"
    ],
    "stream.h||stream.h": [
      "File: stream.h -> stream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: #define s_pop_layer(s,h) (s)->p = (s)->h;",
      "55: #define s_mark_end(s)  (s)->end = (s)->p;",
      "56: #define s_check(s)  ((s)->p <= (s)->end)",
      "58: #define s_check_end(s)  ((s)->p == (s)->end)",
      "59: #define s_length(s)  ((s)->end - (s)->data)",
      "60: #define s_left(s)               ((s)->size - ((s)->p - (s)->data))",
      "",
      "[Removed Lines]",
      "57: #define s_check_rem(s,n) ((s)->p + n <= (s)->end)",
      "",
      "[Added Lines]",
      "57: #define s_check_rem(s,n) (s_check(s) && (n <= (s)->end - (s)->p))",
      "",
      "---------------"
    ],
    "types.h||types.h": [
      "File: types.h -> types.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: typedef unsigned int uint32;",
      "44: typedef signed int sint32;",
      "46: typedef void *RD_HBITMAP;",
      "47: typedef void *RD_HGLYPH;",
      "48: typedef void *RD_HCOLOURMAP;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46: #define RD_UINT32_MAX (uint32)(-1)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de59a100ead9eadc5a2a925124cfb82707ed0360",
      "candidate_info": {
        "commit_hash": "de59a100ead9eadc5a2a925124cfb82707ed0360",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/de59a100ead9eadc5a2a925124cfb82707ed0360",
        "files": [
          "proto.h"
        ],
        "message": "Mark rd_protocol_error() as \"noreturn\"\n\nThis allows the compiler to optimize things better and give better\nwarnings as it knows it will never return from this function.",
        "before_after_code_files": [
          "proto.h||proto.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "proto.h||proto.h"
          ],
          "candidate": [
            "proto.h||proto.h"
          ]
        }
      },
      "candidate_diff": {
        "proto.h||proto.h": [
          "File: proto.h -> proto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #endif",
          "27: #define UNUSED(param) ((void)param)",
          "29: RD_BOOL bitmap_decompress(uint8 * output, int width, int height, uint8 * input, int size, int Bpp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #ifdef __GNUC__",
          "29: #  define NORETURN __attribute__((noreturn))",
          "30: #else",
          "31: #  define NORETURN",
          "32: #endif // __GNUC__",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167: void rdp_disconnect(void);",
          "168: #define rdp_protocol_error(m, s) _rdp_protocol_error(__FILE__, __LINE__, __func__, m, s)",
          "169: void _rdp_protocol_error(const char *file, int line, const char *func,",
          "172: int get_device_index(RD_NTHANDLE handle);",
          "173: void convert_to_unix_filename(char *filename);",
          "",
          "[Removed Lines]",
          "170:     const char *message, STREAM s);",
          "",
          "[Added Lines]",
          "175:     const char *message, STREAM s) NORETURN;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90219aac4118a55536d940241f741687dacdeac8",
      "candidate_info": {
        "commit_hash": "90219aac4118a55536d940241f741687dacdeac8",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/90219aac4118a55536d940241f741687dacdeac8",
        "files": [
          "stream.h"
        ],
        "message": "Add bounds checks to stream handling\n\nProtect against buffer overflow and overrun bugs in the protocol\nhandling.",
        "before_after_code_files": [
          "stream.h||stream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "stream.h||stream.h"
          ],
          "candidate": [
            "stream.h||stream.h"
          ]
        }
      },
      "candidate_diff": {
        "stream.h||stream.h": [
          "File: stream.h -> stream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #define s_push_layer(s,h,n) { (s)->h = (s)->p; (s)->p += n; }",
          "56: #define s_pop_layer(s,h) (s)->p = (s)->h;",
          "57: #define s_mark_end(s)  (s)->end = (s)->p;",
          "59: #define s_check_end(s)  ((s)->p == (s)->end)",
          "60: #define s_length(s)  ((s)->end - (s)->data)",
          "63: #if defined(L_ENDIAN) && !defined(NEED_ALIGN)",
          "70: #else",
          "73:     v += *((s)->p++) << 16; v += *((s)->p++) << 24; }",
          "75:     v += *((s)->p++) << 32; v += *((s)->p++) << 40; \\",
          "76:     v += *((s)->p++) << 48; v += *((s)->p++) << 56; }",
          "80: #endif",
          "83: #if defined(B_ENDIAN) && !defined(NEED_ALIGN)",
          "91: #define B_ENDIAN_PREFERRED",
          "92: #define in_uint16(s,v)  in_uint16_be(s,v)",
          "",
          "[Removed Lines]",
          "58: #define s_check_rem(s,n) (((s)->p <= (s)->end) && (n <= (s)->end - (s)->p))",
          "61: #define s_left(s)               ((s)->size - ((s)->p - (s)->data))",
          "64: #define in_uint16_le(s,v) { v = *(uint16 *)((s)->p); (s)->p += 2; }",
          "65: #define in_uint32_le(s,v) { v = *(uint32 *)((s)->p); (s)->p += 4; }",
          "66: #define in_uint64_le(s,v) { v = *(uint64 *)((s)->p); (s)->p += 8; }",
          "67: #define out_uint16_le(s,v) { *(uint16 *)((s)->p) = v; (s)->p += 2; }",
          "68: #define out_uint32_le(s,v) { *(uint32 *)((s)->p) = v; (s)->p += 4; }",
          "69: #define out_uint64_le(s,v) { *(uint64 *)((s)->p) = v; (s)->p += 8; }",
          "71: #define in_uint16_le(s,v) { v = *((s)->p++); v += *((s)->p++) << 8; }",
          "72: #define in_uint32_le(s,v) { in_uint16_le(s,v) \\",
          "74: #define in_uint64_le(s,v) { in_uint32_le(s,v) \\",
          "77: #define out_uint16_le(s,v) { *((s)->p++) = (v) & 0xff; *((s)->p++) = ((v) >> 8) & 0xff; }",
          "78: #define out_uint32_le(s,v) { out_uint16_le(s, (v) & 0xffff); out_uint16_le(s, ((v) >> 16) & 0xffff); }",
          "79: #define out_uint64_le(s,v) { out_uint32_le(s, (v) & 0xffffffff); out_uint32_le(s, ((v) >> 32) & 0xffffffff); }",
          "84: #define in_uint16_be(s,v) { v = *(uint16 *)((s)->p); (s)->p += 2; }",
          "85: #define in_uint32_be(s,v) { v = *(uint32 *)((s)->p); (s)->p += 4; }",
          "86: #define in_uint64_be(s,v) { v = *(uint64 *)((s)->p); (s)->p += 8; }",
          "87: #define out_uint16_be(s,v) { *(uint16 *)((s)->p) = v; (s)->p += 2; }",
          "88: #define out_uint32_be(s,v) { *(uint32 *)((s)->p) = v; (s)->p += 4; }",
          "89: #define out_uint64_be(s,v) { *(uint64 *)((s)->p) = v; (s)->p += 8; }",
          "",
          "[Added Lines]",
          "58: #define s_check_rem(s,n) (((s)->p <= (s)->end) && ((size_t)n <= (size_t)((s)->end - (s)->p)))",
          "61: #define s_left(s)  ((s)->size - (size_t)((s)->p - (s)->data))",
          "64: #define s_assert_r(s,n)  { if (!s_check_rem(s, n)) rdp_protocol_error( \"unexpected stream overrun\", s); }",
          "65: #define s_assert_w(s,n)  { if (s_left(s) < (size_t)n) { logger(Core, Error, \"%s:%d: %s(), %s\", __FILE__, __LINE__, __func__, \"unexpected stream overrun\"); exit(0); } }",
          "68: #define in_uint16_le(s,v) { s_assert_r(s, 2); v = *(uint16 *)((s)->p); (s)->p += 2; }",
          "69: #define in_uint32_le(s,v) { s_assert_r(s, 4); v = *(uint32 *)((s)->p); (s)->p += 4; }",
          "70: #define in_uint64_le(s,v) { s_assert_r(s, 8); v = *(uint64 *)((s)->p); (s)->p += 8; }",
          "71: #define out_uint16_le(s,v) { s_assert_w(s, 2); *(uint16 *)((s)->p) = v; (s)->p += 2; }",
          "72: #define out_uint32_le(s,v) { s_assert_w(s, 4); *(uint32 *)((s)->p) = v; (s)->p += 4; }",
          "73: #define out_uint64_le(s,v) { s_assert_w(s, 8); *(uint64 *)((s)->p) = v; (s)->p += 8; }",
          "75: #define in_uint16_le(s,v) { s_assert_r(s, 2); v = *((s)->p++); v += *((s)->p++) << 8; }",
          "76: #define in_uint32_le(s,v) { s_assert_r(s, 4); in_uint16_le(s,v) \\",
          "78: #define in_uint64_le(s,v) { s_assert_r(s, 8); in_uint32_le(s,v) \\",
          "81: #define out_uint16_le(s,v) { s_assert_w(s, 2); *((s)->p++) = (v) & 0xff; *((s)->p++) = ((v) >> 8) & 0xff; }",
          "82: #define out_uint32_le(s,v) { s_assert_w(s, 4); out_uint16_le(s, (v) & 0xffff); out_uint16_le(s, ((v) >> 16) & 0xffff); }",
          "83: #define out_uint64_le(s,v) { s_assert_w(s, 8); out_uint32_le(s, (v) & 0xffffffff); out_uint32_le(s, ((v) >> 32) & 0xffffffff); }",
          "88: #define in_uint16_be(s,v) { s_assert_r(s, 2); v = *(uint16 *)((s)->p); (s)->p += 2; }",
          "89: #define in_uint32_be(s,v) { s_assert_r(s, 4); v = *(uint32 *)((s)->p); (s)->p += 4; }",
          "90: #define in_uint64_be(s,v) { s_assert_r(s, 8); v = *(uint64 *)((s)->p); (s)->p += 8; }",
          "91: #define out_uint16_be(s,v) { s_assert_w(s, 2); *(uint16 *)((s)->p) = v; (s)->p += 2; }",
          "92: #define out_uint32_be(s,v) { s_assert_w(s, 4); *(uint32 *)((s)->p) = v; (s)->p += 4; }",
          "93: #define out_uint64_be(s,v) { s_assert_w(s, 8); *(uint64 *)((s)->p) = v; (s)->p += 8; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: #define out_uint64(s,v)  out_uint64_be(s,v)",
          "100: #else",
          "107: #endif",
          "109: #ifndef B_ENDIAN_PREFERRED",
          "",
          "[Removed Lines]",
          "101: #define in_uint16_be(s,v) { v = *((s)->p++); next_be(s,v); }",
          "102: #define in_uint32_be(s,v) { in_uint16_be(s,v); next_be(s,v); next_be(s,v); }",
          "103: #define in_uint64_be(s,v) { in_uint32_be(s,v); next_be(s,v); next_be(s,v); next_be(s,v); next_be(s,v); }",
          "104: #define out_uint16_be(s,v) { *((s)->p++) = ((v) >> 8) & 0xff; *((s)->p++) = (v) & 0xff; }",
          "105: #define out_uint32_be(s,v) { out_uint16_be(s, ((v) >> 16) & 0xffff); out_uint16_be(s, (v) & 0xffff); }",
          "106: #define out_uint64_be(s,v) { out_uint32_be(s, ((v) >> 32) & 0xffffffff); out_uint32_be(s, (v) & 0xffffffff); }",
          "",
          "[Added Lines]",
          "105: #define in_uint16_be(s,v) { s_assert_r(s, 2); v = *((s)->p++); next_be(s,v); }",
          "106: #define in_uint32_be(s,v) { s_assert_r(s, 4); in_uint16_be(s,v); next_be(s,v); next_be(s,v); }",
          "107: #define in_uint64_be(s,v) { s_assert_r(s, 8); in_uint32_be(s,v); next_be(s,v); next_be(s,v); next_be(s,v); next_be(s,v); }",
          "108: #define out_uint16_be(s,v) { s_assert_w(s, 2); *((s)->p++) = ((v) >> 8) & 0xff; *((s)->p++) = (v) & 0xff; }",
          "109: #define out_uint32_be(s,v) { s_assert_w(s, 4); out_uint16_be(s, ((v) >> 16) & 0xffff); out_uint16_be(s, (v) & 0xffff); }",
          "110: #define out_uint64_be(s,v) { s_assert_w(s, 8); out_uint32_be(s, ((v) >> 32) & 0xffffffff); out_uint32_be(s, (v) & 0xffffffff); }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115: #define out_uint64(s,v)  out_uint64_le(s,v)",
          "116: #endif",
          "122: #define in_skip(s,n)  in_uint8s(s,n)",
          "125: #define out_uint8a(s,v,n) out_uint8p(s,v,n);",
          "127: #define out_stream(s, v)        out_uint8p(s, (v)->data, s_length((v)))",
          "",
          "[Removed Lines]",
          "118: #define in_uint8(s,v)  v = *((s)->p++);",
          "119: #define in_uint8p(s,v,n) { v = (s)->p; (s)->p += n; }",
          "120: #define in_uint8a(s,v,n) { memcpy(v,(s)->p,n); (s)->p += n; }",
          "121: #define in_uint8s(s,n)  (s)->p += n;",
          "123: #define out_uint8(s,v)  *((s)->p++) = v;",
          "124: #define out_uint8p(s,v,n) { memcpy((s)->p,v,n); (s)->p += n; }",
          "126: #define out_uint8s(s,n)  { memset((s)->p,0,n); (s)->p += n; }",
          "129: #define next_be(s,v)  v = ((v) << 8) + *((s)->p++);",
          "",
          "[Added Lines]",
          "122: #define in_uint8(s,v)  { s_assert_r(s, 1); v = *((s)->p++); }",
          "123: #define in_uint8p(s,v,n) { s_assert_r(s, n); v = (s)->p; (s)->p += n; }",
          "124: #define in_uint8a(s,v,n) { s_assert_r(s, n); memcpy(v,(s)->p,n); (s)->p += n; }",
          "125: #define in_uint8s(s,n)  { s_assert_r(s, n); (s)->p += n; }",
          "127: #define out_uint8(s,v)  { s_assert_w(s, 1); *((s)->p++) = v; }",
          "128: #define out_uint8p(s,v,n) { s_assert_w(s, n); memcpy((s)->p,v,n); (s)->p += n; }",
          "130: #define out_uint8s(s,n)  { s_assert_w(s, n); memset((s)->p,0,n); (s)->p += n; }",
          "133: #define next_be(s,v)  { s_assert_r(s, 1); v = ((v) << 8) + *((s)->p++); }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "766ebcf6f23ccfe8323ac10242ae6e127d4505d2",
      "candidate_info": {
        "commit_hash": "766ebcf6f23ccfe8323ac10242ae6e127d4505d2",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/766ebcf6f23ccfe8323ac10242ae6e127d4505d2",
        "files": [
          "asn.c",
          "bitmap.c",
          "cliprdr.c",
          "constants.h",
          "cssp.c",
          "lspci.c",
          "mcs.c",
          "orders.c",
          "parse.h",
          "proto.h",
          "rdp.c",
          "rdpdr.c",
          "rdpsnd.c",
          "seamless.c",
          "secure.c",
          "types.h"
        ],
        "message": "Malicious RDP server security fixes\n\nThis commit includes fixes for a set of 21 vulnerabilities in\nrdesktop when a malicious RDP server is used.\n\nAll vulnerabilities was identified and reported by Eyal Itkin.\n\n* Add rdp_protocol_error function that is used in several fixes\n* Refactor of process_bitmap_updates\n* Fix possible integer overflow in s_check_rem() on 32bit arch\n* Fix memory corruption in process_bitmap_data - CVE-2018-8794\n* Fix remote code execution in process_bitmap_data - CVE-2018-8795\n* Fix remote code execution in process_plane - CVE-2018-8797\n* Fix Denial of Service in mcs_recv_connect_response - CVE-2018-20175\n* Fix Denial of Service in mcs_parse_domain_params - CVE-2018-20175\n* Fix Denial of Service in sec_parse_crypt_info - CVE-2018-20176\n* Fix Denial of Service in sec_recv - CVE-2018-20176\n* Fix minor information leak in rdpdr_process - CVE-2018-8791\n* Fix Denial of Service in cssp_read_tsrequest - CVE-2018-8792\n* Fix remote code execution in cssp_read_tsrequest - CVE-2018-8793\n* Fix Denial of Service in process_bitmap_data - CVE-2018-8796\n* Fix minor information leak in rdpsnd_process_ping - CVE-2018-8798\n* Fix Denial of Service in process_secondary_order - CVE-2018-8799\n* Fix remote code execution in in ui_clip_handle_data - CVE-2018-8800\n* Fix major information leak in ui_clip_handle_data - CVE-2018-20174\n* Fix memory corruption in rdp_in_unistr - CVE-2018-20177\n* Fix Denial of Service in process_demand_active - CVE-2018-20178\n* Fix remote code execution in lspci_process - CVE-2018-20179\n* Fix remote code execution in rdpsnddbg_process - CVE-2018-20180\n* Fix remote code execution in seamless_process - CVE-2018-20181\n* Fix remote code execution in seamless_process_line - CVE-2018-20182",
        "before_after_code_files": [
          "asn.c||asn.c",
          "bitmap.c||bitmap.c",
          "cliprdr.c||cliprdr.c",
          "constants.h||constants.h",
          "cssp.c||cssp.c",
          "lspci.c||lspci.c",
          "mcs.c||mcs.c",
          "orders.c||orders.c",
          "parse.h||parse.h",
          "proto.h||proto.h",
          "rdp.c||rdp.c",
          "rdpdr.c||rdpdr.c",
          "rdpsnd.c||rdpsnd.c",
          "seamless.c||seamless.c",
          "secure.c||secure.c",
          "types.h||types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "asn.c||asn.c",
            "bitmap.c||bitmap.c",
            "cliprdr.c||cliprdr.c",
            "constants.h||constants.h",
            "cssp.c||cssp.c",
            "lspci.c||lspci.c",
            "mcs.c||mcs.c",
            "orders.c||orders.c",
            "proto.h||proto.h",
            "rdp.c||rdp.c",
            "rdpdr.c||rdpdr.c",
            "rdpsnd.c||rdpsnd.c",
            "seamless.c||seamless.c",
            "secure.c||secure.c",
            "types.h||types.h"
          ],
          "candidate": [
            "asn.c||asn.c",
            "bitmap.c||bitmap.c",
            "cliprdr.c||cliprdr.c",
            "constants.h||constants.h",
            "cssp.c||cssp.c",
            "lspci.c||lspci.c",
            "mcs.c||mcs.c",
            "orders.c||orders.c",
            "proto.h||proto.h",
            "rdp.c||rdp.c",
            "rdpdr.c||rdpdr.c",
            "rdpsnd.c||rdpsnd.c",
            "seamless.c||seamless.c",
            "secure.c||secure.c",
            "types.h||types.h"
          ]
        }
      },
      "candidate_diff": {
        "asn.c||asn.c": [
          "File: asn.c -> asn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: RD_BOOL",
          "26: {",
          "27:  int tag, len;",
          "",
          "[Removed Lines]",
          "25: ber_parse_header(STREAM s, int tagval, int *length)",
          "",
          "[Added Lines]",
          "25: ber_parse_header(STREAM s, int tagval, uint32 *length)",
          "",
          "---------------"
        ],
        "bitmap.c||bitmap.c": [
          "File: bitmap.c -> bitmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "785:      replen = revcode;",
          "786:      collen = 0;",
          "787:     }",
          "789:     {",
          "790:      color = CVAL(in);",
          "",
          "[Removed Lines]",
          "788:     while (collen > 0)",
          "",
          "[Added Lines]",
          "788:     while (indexw < width && collen > 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "793:      indexw++;",
          "794:      collen--;",
          "795:     }",
          "797:     {",
          "799:      out += 4;",
          "",
          "[Removed Lines]",
          "796:     while (replen > 0)",
          "",
          "[Added Lines]",
          "796:     while (indexw < width && replen > 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "815:      replen = revcode;",
          "816:      collen = 0;",
          "817:     }",
          "819:     {",
          "820:      x = CVAL(in);",
          "821:      if (x & 1)",
          "",
          "[Removed Lines]",
          "818:     while (collen > 0)",
          "",
          "[Added Lines]",
          "818:     while (indexw < width && collen > 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "835:      indexw++;",
          "836:      collen--;",
          "837:     }",
          "839:     {",
          "840:      x = last_line[indexw * 4] + color;",
          "",
          "[Removed Lines]",
          "838:     while (replen > 0)",
          "",
          "[Added Lines]",
          "838:     while (indexw < width && replen > 0)",
          "",
          "---------------"
        ],
        "cliprdr.c||cliprdr.c": [
          "File: cliprdr.c -> cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:  uint16 type, status;",
          "116:  uint32 length, format;",
          "117:  uint8 *data;",
          "119:  in_uint16_le(s, type);",
          "120:  in_uint16_le(s, status);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:  struct stream packet = *s;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:  DEBUG_CLIPBOARD((\"CLIPRDR recv: type=%d, status=%d, length=%d\\n\", type, status, length));",
          "126:  if (status == CLIPRDR_ERROR)",
          "127:  {",
          "128:   switch (type)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  if (!s_check_rem(s, length))",
          "128:  {",
          "129:   rdp_protocol_error(\"cliprdr_process(), consume of packet from stream would overrun\", &packet);",
          "130:  }",
          "",
          "---------------"
        ],
        "constants.h||constants.h": [
          "File: constants.h -> constants.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "481: #define FILE_DELETE_ON_CLOSE            0x00001000",
          "482: #define FILE_OPEN_FOR_FREE_SPACE_QUERY  0x00800000",
          "485: #define exDiscReasonNoInfo    0x0000",
          "486: #define exDiscReasonAPIInitiatedDisconnect  0x0001",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "485: #define BITMAP_COMPRESSION              0x0001",
          "486: #define NO_BITMAP_COMPRESSION_HDR       0x0400",
          "",
          "---------------"
        ],
        "cssp.c||cssp.c": [
          "File: cssp.c -> cssp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "648:  STREAM s;",
          "649:  int length;",
          "650:  int tagval;",
          "652:  s = tcp_recv(NULL, 4);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "651:  struct stream packet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "675:  s = tcp_recv(s, length);",
          "677: #if WITH_DEBUG_CREDSSP",
          "678:  streamsave(s, \"tsrequest_in.raw\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677:  packet = *s;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "689:  if (!ber_in_header(s, &tagval, &length) ||",
          "690:      tagval != (BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0))",
          "691:   return False;",
          "692:  in_uint8s(s, length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "695:  if (!s_check_rem(s, length))",
          "696:  {",
          "697:    rdp_protocol_error(\"cssp_read_tsrequest(), consume of version from stream would overrun\",",
          "698:         &packet);",
          "699:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "710:   if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)",
          "711:    return False;",
          "714:   out_uint8p(token, s->p, length);",
          "715:   s_mark_end(token);",
          "716:  }",
          "",
          "[Removed Lines]",
          "713:   token->end = token->p = token->data;",
          "",
          "[Added Lines]",
          "721:   if (!s_check_rem(s, length))",
          "722:   {",
          "723:    rdp_protocol_error(\"cssp_read_tsrequest(), consume of token from stream would overrun\",",
          "724:         &packet);",
          "725:   }",
          "727:   s_realloc(token, length);",
          "728:   s_reset(token);",
          "",
          "---------------"
        ],
        "lspci.c||lspci.c": [
          "File: lspci.c -> lspci.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:    rdesktop: A Remote Desktop Protocol client.",
          "3:    Support for the Matrox \"lspci\" channel",
          "6:    This program is free software: you can redistribute it and/or modify",
          "7:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "4:    Copyright (C) 2005 Matrox Graphics Inc.",
          "",
          "[Added Lines]",
          "4:    Copyright (C) 2005 Matrox Graphics Inc.",
          "5:    Copyright 2018 Henrik Andersson <hean01@cendio.se> for Cendio AB",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:  unsigned int pkglen;",
          "133:  static char *rest = NULL;",
          "134:  char *buf;",
          "136:  pkglen = s->end - s->p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:  struct stream packet = *s;",
          "138:  if (!s_check(s))",
          "139:  {",
          "140:   rdp_protocol_error(\"lspci_process(), stream is in unstable state\", &packet);",
          "141:  }",
          "",
          "---------------"
        ],
        "mcs.c||mcs.c": [
          "File: mcs.c -> mcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: static RD_BOOL",
          "45: mcs_parse_domain_params(STREAM s)",
          "46: {",
          "49:  ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);",
          "50:  in_uint8s(s, length);",
          "52:  return s_check(s);",
          "",
          "[Removed Lines]",
          "47:  int length;",
          "",
          "[Added Lines]",
          "47:  uint32 length;",
          "48:  struct stream packet = *s;",
          "52:  if (!s_check_rem(s, length))",
          "53:  {",
          "54:   rdp_protocol_error(\"mcs_parse_domain_params(), consume domain params from stream would overrun\", &packet);",
          "55:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: mcs_recv_connect_response(STREAM mcs_data)",
          "88: {",
          "89:  uint8 result;",
          "91:  STREAM s;",
          "93:  s = iso_recv(NULL);",
          "94:  if (s == NULL)",
          "95:   return False;",
          "97:  ber_parse_header(s, MCS_CONNECT_RESPONSE, &length);",
          "99:  ber_parse_header(s, BER_TAG_RESULT, &length);",
          "",
          "[Removed Lines]",
          "90:  int length;",
          "",
          "[Added Lines]",
          "97:  uint32 length;",
          "99:  struct stream packet;",
          "104:  packet = *s;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:  ber_parse_header(s, BER_TAG_INTEGER, &length);",
          "109:  mcs_parse_domain_params(s);",
          "111:  ber_parse_header(s, BER_TAG_OCTET_STRING, &length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:  if (!s_check_rem(s, length))",
          "120:  {",
          "121:   rdp_protocol_error(\"mcs_recv_connect_response(), consume connect id from stream would overrun\", &packet);",
          "122:  }",
          "",
          "---------------"
        ],
        "orders.c||orders.c": [
          "File: orders.c -> orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1260:  uint16 flags;",
          "1261:  uint8 type;",
          "1262:  uint8 *next_order;",
          "1264:  in_uint16_le(s, length);",
          "1266:  in_uint8(s, type);",
          "1268:  next_order = s->p + (sint16) length + 7;",
          "1270:  switch (type)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1263:  struct stream packet = *s;",
          "1269:  if (!s_check_rem(s, length + 7))",
          "1270:  {",
          "1271:   rdp_protocol_error(\"process_secondary_order(), next order pointer would overrun stream\", &packet);",
          "1272:  }",
          "",
          "---------------"
        ],
        "parse.h||parse.h": [
          "File: parse.h -> parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #define s_pop_layer(s,h) (s)->p = (s)->h;",
          "41: #define s_mark_end(s)  (s)->end = (s)->p;",
          "42: #define s_check(s)  ((s)->p <= (s)->end)",
          "44: #define s_check_end(s)  ((s)->p == (s)->end)",
          "45: #define s_length(s)  ((s)->end - (s)->data)",
          "46: #define s_reset(s)  ((s)->end = (s)->p = (s)->data)",
          "",
          "[Removed Lines]",
          "43: #define s_check_rem(s,n) ((s)->p + n <= (s)->end)",
          "",
          "[Added Lines]",
          "43: #define s_check_rem(s,n)        (s_check(s) && (n <= (s)->end - (s)->p))",
          "",
          "---------------"
        ],
        "proto.h||proto.h": [
          "File: proto.h -> proto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:       char *directory, RD_BOOL reconnect);",
          "174: void rdp_reset_state(void);",
          "175: void rdp_disconnect(void);",
          "177: int get_device_index(RD_NTHANDLE handle);",
          "178: void convert_to_unix_filename(char *filename);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176: void rdp_protocol_error(const char *message, STREAM s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234: RD_BOOL ber_in_header(STREAM s, int *tagval, int *length);",
          "235: void ber_out_header(STREAM s, int tagval, int length);",
          "237: void ber_out_integer(STREAM s, int value);",
          "",
          "[Removed Lines]",
          "236: RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);",
          "",
          "[Added Lines]",
          "237: RD_BOOL ber_parse_header(STREAM s, int tagval, uint32 *length);",
          "",
          "---------------"
        ],
        "rdp.c||rdp.c": [
          "File: rdp.c -> rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:    Protocol services - RDP layer",
          "4:    Copyright (C) Matthew Chapman <matthewc.unsw.edu.au> 1999-2008",
          "5:    Copyright 2003-2011 Peter Astrand <astrand@cendio.se> for Cendio AB",
          "8:    This program is free software: you can redistribute it and/or modify",
          "9:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "6:    Copyright 2011-2014 Henrik Andersson <hean01@cendio.se> for Cendio AB",
          "",
          "[Added Lines]",
          "6:    Copyright 2011-2018 Henrik Andersson <hean01@cendio.se> for Cendio AB",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273: #ifdef HAVE_ICONV",
          "274:  size_t ibl = in_len, obl = *str_size - 1;",
          "275:  char *pin = (char *) s->p, *pout = *string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273:  struct stream packet = *s;",
          "275:  if ((in_len < 0) || ((uint32)in_len >= (RD_UINT32_MAX / 2)))",
          "276:  {",
          "277:   error(\"rdp_in_unistr(), length of unicode data is out of bounds.\");",
          "278:   abort();",
          "279:  }",
          "281:  if (!s_check_rem(s, in_len))",
          "282:  {",
          "283:   rdp_protocol_error(\"rdp_in_unistr(), consume of unicode data from stream would overrun\", &packet);",
          "284:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1084: {",
          "1085:  uint8 type;",
          "1086:  uint16 len_src_descriptor, len_combined_caps;",
          "1089:  rd_create_ui();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1101:  struct stream packet = *s;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1091:  in_uint32_le(s, g_rdp_shareid);",
          "1092:  in_uint16_le(s, len_src_descriptor);",
          "1093:  in_uint16_le(s, len_combined_caps);",
          "1094:  in_uint8s(s, len_src_descriptor);",
          "1096:  DEBUG((\"DEMAND_ACTIVE(id=0x%x)\\n\", g_rdp_shareid));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1110:  if (!s_check_rem(s, len_src_descriptor))",
          "1111:  {",
          "1112:   rdp_protocol_error(\"rdp_demand_active(), consume of source descriptor from stream would overrun\", &packet);",
          "1113:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1238:  }",
          "1239: }",
          "1244: {",
          "1246:  uint16 left, top, right, bottom, width, height;",
          "1248:  uint8 *data, *bmpdata;",
          "1254:  {",
          "1298:   bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
          "1300:   {",
          "1302:   }",
          "1308:   xfree(bmpdata);",
          "1309:  }",
          "1310: }",
          "",
          "[Removed Lines]",
          "1242: void",
          "1243: process_bitmap_updates(STREAM s)",
          "1245:  uint16 num_updates;",
          "1247:  uint16 cx, cy, bpp, Bpp, compress, bufsize, size;",
          "1249:  int i;",
          "1251:  in_uint16_le(s, num_updates);",
          "1253:  for (i = 0; i < num_updates; i++)",
          "1255:   in_uint16_le(s, left);",
          "1256:   in_uint16_le(s, top);",
          "1257:   in_uint16_le(s, right);",
          "1258:   in_uint16_le(s, bottom);",
          "1259:   in_uint16_le(s, width);",
          "1260:   in_uint16_le(s, height);",
          "1261:   in_uint16_le(s, bpp);",
          "1262:   Bpp = (bpp + 7) / 8;",
          "1263:   in_uint16_le(s, compress);",
          "1264:   in_uint16_le(s, bufsize);",
          "1266:   cx = right - left + 1;",
          "1267:   cy = bottom - top + 1;",
          "1269:   DEBUG((\"BITMAP_UPDATE(l=%d,t=%d,r=%d,b=%d,w=%d,h=%d,Bpp=%d,cmp=%d)\\n\",",
          "1270:          left, top, right, bottom, width, height, Bpp, compress));",
          "1272:   if (!compress)",
          "1273:   {",
          "1274:    int y;",
          "1275:    bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
          "1276:    for (y = 0; y < height; y++)",
          "1277:    {",
          "1278:     in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],",
          "1279:        width * Bpp);",
          "1280:    }",
          "1281:    ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
          "1282:    xfree(bmpdata);",
          "1283:    continue;",
          "1284:   }",
          "1287:   if (compress & 0x400)",
          "1288:   {",
          "1289:    size = bufsize;",
          "1290:   }",
          "1291:   else",
          "1292:   {",
          "1294:    in_uint16_le(s, size);",
          "1296:   }",
          "1297:   in_uint8p(s, data, size);",
          "1299:   if (bitmap_decompress(bmpdata, width, height, data, size, Bpp))",
          "1301:    ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
          "1303:   else",
          "1304:   {",
          "1305:    DEBUG_RDP5((\"Failed to decompress data\\n\"));",
          "1306:   }",
          "",
          "[Added Lines]",
          "1262: static void",
          "1263: process_bitmap_data(STREAM s)",
          "1266:  uint16 cx, cy, bpp, Bpp, flags, bufsize, size;",
          "1269:  struct stream packet = *s;",
          "1278:  Bpp = (bpp + 7) / 8;",
          "1282:  cx = right - left + 1;",
          "1283:  cy = bottom - top + 1;",
          "1286:     this code. The value of bpp is not passed to",
          "1287:     ui_paint_bitmap() which relies on g_server_bpp for drawing",
          "1288:     the bitmap data.",
          "1290:     Does this means that we can sanity check bpp with g_server_bpp ?",
          "1294:  if (Bpp == 0 || width == 0 || height == 0)",
          "1296:   warning(\"%s(), [%d,%d,%d,%d], [%d,%d], bpp=%d, flags=%x\", __func__,",
          "1297:    left, top, right, bottom, width, height, bpp, flags);",
          "1298:   rdp_protocol_error",
          "1299:    (\"TS_BITMAP_DATA, unsafe size of bitmap data received from server\",",
          "1300:     &packet);",
          "1301:  }",
          "1303:  if ((RD_UINT32_MAX / Bpp) <= (width * height))",
          "1304:  {",
          "1305:   warning(\"%s(), [%d,%d,%d,%d], [%d,%d], bpp=%d, flags=%x\", __func__,",
          "1306:    left, top, right, bottom, width, height, bpp, flags);",
          "1307:   rdp_protocol_error",
          "1308:    (\"TS_BITMAP_DATA, unsafe size of bitmap data received from server\",",
          "1309:     &packet);",
          "1310:  }",
          "1313: #if DEBUG",
          "1314:  printf(\"%s(), [%d,%d,%d,%d], [%d,%d], bpp=%d, flags=%x\", __func__,",
          "1315:         left, top, right, bottom, width, height, bpp, flags);",
          "1316: #endif",
          "1317:  if (flags == 0)",
          "1318:  {",
          "1320:   int y;",
          "1322:   for (y = 0; y < height; y++)",
          "1324:    in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)], width * Bpp);",
          "1326:   ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
          "1328:   return;",
          "1329:  }",
          "1331:  if (flags & NO_BITMAP_COMPRESSION_HDR)",
          "1332:  {",
          "1333:   size = bufsize;",
          "1334:  }",
          "1335:  else",
          "1336:  {",
          "1342:  }",
          "1345:  if (!s_check_rem(s, size))",
          "1346:  {",
          "1347:   rdp_protocol_error(\"process_bitmap_data(), consume of bitmap data from stream would overrun\", &packet);",
          "1348:  }",
          "1349:  in_uint8p(s, data, size);",
          "1350:  bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
          "1351:  if (bitmap_decompress(bmpdata, width, height, data, size, Bpp))",
          "1352:  {",
          "1353:   ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
          "1354:  }",
          "1355:  else",
          "1356:  {",
          "1357:   warning(\"%s(), failed to decompress bitmap\", __func__);",
          "1358:  }",
          "1360:  xfree(bmpdata);",
          "1361: }",
          "1366: void",
          "1367: process_bitmap_updates(STREAM s)",
          "1368: {",
          "1369:  uint16 num_updates;",
          "1370:  int i;",
          "1374:  for (i = 0; i < num_updates; i++)",
          "1375:  {",
          "1376:   process_bitmap_data(s);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1774: {",
          "1775:  sec_disconnect();",
          "1776: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1848:    A protocol error is defined as:",
          "1850:     - A value is outside specified range for example;",
          "1851:       bpp for a bitmap is not allowed to be greater than the",
          "1852:       value 32 but is represented by a byte in protocol.",
          "1855: void",
          "1856: rdp_protocol_error(const char *message, STREAM s)",
          "1857: {",
          "1858:  error(\"%s(), %s\", __func__, message);",
          "1859:  if (s)",
          "1860:   hexdump(s->p, s_length(s));",
          "1861:  exit(0);",
          "1862: }",
          "",
          "---------------"
        ],
        "rdpdr.c||rdpdr.c": [
          "File: rdpdr.c -> rdpdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "797:  uint16 vmin;",
          "798:  uint16 component;",
          "799:  uint16 pakid;",
          "801: #if WITH_DEBUG_RDP5",
          "802:  printf(\"--- rdpdr_process ---\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800:  struct stream packet = *s;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "825:     if (vmin < 0x000c)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:        so lets check that we actually got",
          "827:        valid data from stream to prevent",
          "829:     if (!s_check(s))",
          "830:     {",
          "831:      rdp_protocol_error(\"rdpdr_process(), consume of g_client_id from stream did overrun\", &packet);",
          "832:     }",
          "",
          "---------------"
        ],
        "rdpsnd.c||rdpsnd.c": [
          "File: rdpsnd.c -> rdpsnd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355: {",
          "356:  uint16 tick;",
          "357:  STREAM out;",
          "359:  in_uint16_le(in, tick);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:  struct stream packet = *in;",
          "360:  if (!s_check_rem(in, 4))",
          "361:  {",
          "362:   rdp_protocol_error(\"rdpsnd_process_training(), consume of training data from stream would overrun\", &packet);",
          "363:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "667:  static char *rest = NULL;",
          "668:  char *buf;",
          "670:  pkglen = s->end - s->p;",
          "672:  buf = (char *) xmalloc(pkglen + 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676:  if (!s_check(s))",
          "677:  {",
          "678:   rdp_protocol_error(\"rdpsnddbg_process(), stream is in unstable state\", s);",
          "679:  }",
          "",
          "---------------"
        ],
        "seamless.c||seamless.c": [
          "File: seamless.c -> seamless.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:    icon_buf[len] = strtol(byte, NULL, 16);",
          "175:    len++;",
          "176:   }",
          "178:   ui_seamless_seticon(id, tok5, width, height, chunk, icon_buf, len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:    if ((size_t)len >= sizeof(icon_buf))",
          "178:    {",
          "179:     warning(\"seamless_process_line(), icon data would overrun icon_buf\");",
          "180:     break;",
          "181:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375: {",
          "376:  unsigned int pkglen;",
          "377:  char *buf;",
          "379:  pkglen = s->end - s->p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384:  struct stream packet = *s;",
          "386:  if (!s_check(s))",
          "387:  {",
          "388:   rdp_protocol_error(\"seamless_process(), stream is in unstable state\", &packet);",
          "389:  }",
          "",
          "---------------"
        ],
        "secure.c||secure.c": [
          "File: secure.c -> secure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "292: void",
          "293: sec_decrypt(uint8 * data, int length)",
          "294: {",
          "295:  if (g_sec_decrypt_use_count == 4096)",
          "296:  {",
          "297:   sec_update(g_sec_decrypt_key, g_sec_decrypt_update_key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:  if (length <= 0)",
          "296:   return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "550:  RDSSL_RKEY *server_public_key;",
          "551:  uint16 tag, length;",
          "552:  uint8 *next_tag, *end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:  struct stream packet = *s;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "628:    DEBUG_RDP5((\"Ignored certs left: %d\\n\", certcount));",
          "629:    in_uint32_le(s, ignorelen);",
          "630:    DEBUG_RDP5((\"Ignored Certificate length is %d\\n\", ignorelen));",
          "631:    ignorecert = rdssl_cert_read(s->p, ignorelen);",
          "632:    in_uint8s(s, ignorelen);",
          "633:    if (ignorecert == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:    if (!s_check_rem(s, ignorelen))",
          "637:    {",
          "638:     rdp_protocol_error(\"sec_parse_crypt_info(), consume ignored certificate from stream would overrun\",",
          "639:          &packet);",
          "640:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "797:  uint32 sec_flags;",
          "798:  uint16 channel;",
          "799:  STREAM s;",
          "801:  while ((s = mcs_recv(&channel, rdpver)) != NULL)",
          "802:  {",
          "803:   if (rdpver != NULL)",
          "804:   {",
          "805:    if (*rdpver != 3)",
          "806:    {",
          "807:     if (*rdpver & 0x80)",
          "808:     {",
          "810:      sec_decrypt(s->p, s->end - s->p);",
          "811:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811:  struct stream packet;",
          "815:   packet = *s;",
          "822:      if (!s_check_rem(s, 8)) {",
          "823:       rdp_protocol_error(\"sec_recv(), consume fastpath signature from stream would overrun\", &packet);",
          "824:      }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "820:    {",
          "821:     if (sec_flags & SEC_ENCRYPT)",
          "822:     {",
          "824:      sec_decrypt(s->p, s->end - s->p);",
          "825:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "840:      if (!s_check_rem(s, 8)) {",
          "841:       rdp_protocol_error(\"sec_recv(), consume encrypt signature from stream would overrun\", &packet);",
          "842:      }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "834:     {",
          "835:      uint8 swapbyte;",
          "838:      sec_decrypt(s->p, s->end - s->p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858:      if (!s_check_rem(s, 8)) {",
          "859:       rdp_protocol_error(\"sec_recv(), consume redirect signature from stream would overrun\", &packet);",
          "860:      }",
          "",
          "---------------"
        ],
        "types.h||types.h": [
          "File: types.h -> types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: typedef unsigned int uint32;",
          "33: typedef signed int sint32;",
          "35: typedef void *RD_HBITMAP;",
          "36: typedef void *RD_HGLYPH;",
          "37: typedef void *RD_HCOLOURMAP;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #define RD_UINT32_MAX (uint32)(-1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}