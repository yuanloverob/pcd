{
  "cve_id": "CVE-2022-21735",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `FractionalMaxPool` can be made to crash a TensorFlow process via a division by 0. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ba4e8ac4dc2991e350d5cc407f8598c8d4ee70fb",
  "patch_info": {
    "commit_hash": "ba4e8ac4dc2991e350d5cc407f8598c8d4ee70fb",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ba4e8ac4dc2991e350d5cc407f8598c8d4ee70fb",
    "files": [
      "tensorflow/core/kernels/fractional_max_pool_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
    ],
    "message": "Fix potential divide by zero error when executing FractionalMaxPool, when pooling ratio is higher than input size for a particular dimension.\n\nPiperOrigin-RevId: 412151722\nChange-Id: I06e57cbb8eca43816eff79eac264fa7aae8f7163",
    "before_after_code_files": [
      "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
      "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:     std::vector<int> output_size(tensor_in_and_out_dims);",
      "84:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
      "85:       input_size[i] = tensor_in.dim_size(i);",
      "86:     }",
      "88:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:       OP_REQUIRES(",
      "88:           context, input_size[i] >= pooling_ratio_[i],",
      "89:           errors::InvalidArgument(\"Pooling ratio is higher than input \"",
      "90:                                   \"dimension size for dimension \",",
      "91:                                   i, \". Input dim size: \", input_size[i],",
      "92:                                   \" pooling ratio: \", pooling_ratio_[i]));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: from tensorflow.python.framework import constant_op",
      "22: from tensorflow.python.framework import dtypes",
      "23: from tensorflow.python.framework import test_util",
      "24: from tensorflow.python.ops import array_ops",
      "25: from tensorflow.python.ops import gen_nn_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: from tensorflow.python.framework import errors",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:       nn_ops.fractional_max_pool(",
      "320:           rand_mat, [1, 1.5, 1.5, 1], seed=1, seed2=1, deterministic=True)",
      "323: class FractionalMaxPoolGradTest(test.TestCase):",
      "324:   \"\"\"Tests for FractionalMaxPoolGrad.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:   def testPoolingRatio(self):",
      "324:     with self.cached_session() as _:",
      "325:       with self.assertRaisesRegex(",
      "326:           errors.InvalidArgumentError,",
      "327:           r\"Pooling ratio is higher than input dimension size for dimension 1.*\"",
      "328:       ):",
      "329:         result = nn_ops.gen_nn_ops.fractional_max_pool(",
      "330:             value=constant_op.constant(",
      "331:                 value=[[[[1, 4, 2, 3]]]], dtype=dtypes.int64),",
      "332:             pooling_ratio=[1.0, 1.44, 1.73, 1.0],",
      "333:             pseudo_random=False,",
      "334:             overlapping=False,",
      "335:             deterministic=False,",
      "336:             seed=0,",
      "337:             seed2=0,",
      "338:             name=None)",
      "339:         self.evaluate(result)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "152cf2c46e8559504d5dafd74d1e085517f93ba4",
      "candidate_info": {
        "commit_hash": "152cf2c46e8559504d5dafd74d1e085517f93ba4",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/152cf2c46e8559504d5dafd74d1e085517f93ba4",
        "files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_max_pool_op_test.py"
        ],
        "message": "Fix potential divide by zero error when executing FractionalMaxPool, when pooling ratio is higher than input size for a particular dimension.\n\nPiperOrigin-RevId: 412151722\nChange-Id: I06e57cbb8eca43816eff79eac264fa7aae8f7163",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     std::vector<int> output_size(tensor_in_and_out_dims);",
          "84:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "85:       input_size[i] = tensor_in.dim_size(i);",
          "86:     }",
          "88:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:       OP_REQUIRES(",
          "88:           context, input_size[i] >= pooling_ratio_[i],",
          "89:           errors::InvalidArgument(\"Pooling ratio is higher than input \"",
          "90:                                   \"dimension size for dimension \",",
          "91:                                   i, \". Input dim size: \", input_size[i],",
          "92:                                   \" pooling ratio: \", pooling_ratio_[i]));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from tensorflow.python.framework import constant_op",
          "26: from tensorflow.python.framework import dtypes",
          "27: from tensorflow.python.framework import test_util",
          "28: from tensorflow.python.ops import array_ops",
          "29: from tensorflow.python.ops import gen_nn_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:           input_b, row_seq, col_seq, overlapping)",
          "308:       self.assertSequenceEqual(expected.shape, actual.shape)",
          "311: class FractionalMaxPoolGradTest(test.TestCase):",
          "312:   \"\"\"Tests for FractionalMaxPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   def testDeterminismExceptionThrowing(self):",
          "312:     tensor_shape = (5, 20, 20, 3)",
          "313:     rand_mat = self._PRNG.random_sample(tensor_shape) * 1000 - 500",
          "314:     with test_util.deterministic_ops():",
          "315:       with self.assertRaisesRegex(",
          "316:           ValueError, \"requires a non-zero seed to be passed in when \"",
          "317:           \"determinism is enabled\"):",
          "318:         nn_ops.fractional_max_pool_v2(rand_mat, [1, 1.5, 1.5, 1])",
          "319:       nn_ops.fractional_max_pool_v2(rand_mat, [1, 1.5, 1.5, 1], seed=1)",
          "321:       with self.assertRaisesRegex(ValueError,",
          "322:                                   'requires \"seed\" and \"seed2\" to be non-zero'):",
          "323:         nn_ops.fractional_max_pool(rand_mat, [1, 1.5, 1.5, 1])",
          "324:       nn_ops.fractional_max_pool(",
          "325:           rand_mat, [1, 1.5, 1.5, 1], seed=1, seed2=1, deterministic=True)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6f5f52c082704768ae1e34a163f7c22ffa2d119",
      "candidate_info": {
        "commit_hash": "d6f5f52c082704768ae1e34a163f7c22ffa2d119",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d6f5f52c082704768ae1e34a163f7c22ffa2d119",
        "files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_max_pool_op_test.py"
        ],
        "message": "Fix potential divide by zero error when executing FractionalMaxPool, when pooling ratio is higher than input size for a particular dimension.\n\nPiperOrigin-RevId: 412151722\nChange-Id: I06e57cbb8eca43816eff79eac264fa7aae8f7163",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     std::vector<int> output_size(tensor_in_and_out_dims);",
          "84:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "85:       input_size[i] = tensor_in.dim_size(i);",
          "86:     }",
          "88:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:       OP_REQUIRES(",
          "88:           context, input_size[i] >= pooling_ratio_[i],",
          "89:           errors::InvalidArgument(\"Pooling ratio is higher than input \"",
          "90:                                   \"dimension size for dimension \",",
          "91:                                   i, \". Input dim size: \", input_size[i],",
          "92:                                   \" pooling ratio: \", pooling_ratio_[i]));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from tensorflow.python.framework import constant_op",
          "26: from tensorflow.python.framework import dtypes",
          "27: from tensorflow.python.framework import test_util",
          "28: from tensorflow.python.ops import array_ops",
          "29: from tensorflow.python.ops import gen_nn_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:           input_b, row_seq, col_seq, overlapping)",
          "308:       self.assertSequenceEqual(expected.shape, actual.shape)",
          "311: class FractionalMaxPoolGradTest(test.TestCase):",
          "312:   \"\"\"Tests for FractionalMaxPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   def testDeterminismExceptionThrowing(self):",
          "312:     tensor_shape = (5, 20, 20, 3)",
          "313:     rand_mat = self._PRNG.random_sample(tensor_shape) * 1000 - 500",
          "314:     with test_util.deterministic_ops():",
          "315:       with self.assertRaisesRegex(",
          "316:           ValueError, \"requires a non-zero seed to be passed in when \"",
          "317:           \"determinism is enabled\"):",
          "318:         nn_ops.fractional_max_pool_v2(rand_mat, [1, 1.5, 1.5, 1])",
          "319:       nn_ops.fractional_max_pool_v2(rand_mat, [1, 1.5, 1.5, 1], seed=1)",
          "321:       with self.assertRaisesRegex(ValueError,",
          "322:                                   'requires \"seed\" and \"seed2\" to be non-zero'):",
          "323:         nn_ops.fractional_max_pool(rand_mat, [1, 1.5, 1.5, 1])",
          "324:       nn_ops.fractional_max_pool(",
          "325:           rand_mat, [1, 1.5, 1.5, 1], seed=1, seed2=1, deterministic=True)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44fc03f38965af343741f824b94c560bfa33d7cd",
      "candidate_info": {
        "commit_hash": "44fc03f38965af343741f824b94c560bfa33d7cd",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/44fc03f38965af343741f824b94c560bfa33d7cd",
        "files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_max_pool_op_test.py"
        ],
        "message": "Fix potential divide by zero error when executing FractionalMaxPool, when pooling ratio is higher than input size for a particular dimension.\n\nPiperOrigin-RevId: 412151722\nChange-Id: I06e57cbb8eca43816eff79eac264fa7aae8f7163",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     std::vector<int> output_size(tensor_in_and_out_dims);",
          "84:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "85:       input_size[i] = tensor_in.dim_size(i);",
          "86:     }",
          "88:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:       OP_REQUIRES(",
          "88:           context, input_size[i] >= pooling_ratio_[i],",
          "89:           errors::InvalidArgument(\"Pooling ratio is higher than input \"",
          "90:                                   \"dimension size for dimension \",",
          "91:                                   i, \". Input dim size: \", input_size[i],",
          "92:                                   \" pooling ratio: \", pooling_ratio_[i]));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from tensorflow.python.framework import constant_op",
          "26: from tensorflow.python.framework import dtypes",
          "27: from tensorflow.python.framework import test_util",
          "28: from tensorflow.python.ops import array_ops",
          "29: from tensorflow.python.ops import gen_nn_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:           input_b, row_seq, col_seq, overlapping)",
          "308:       self.assertSequenceEqual(expected.shape, actual.shape)",
          "311: class FractionalMaxPoolGradTest(test.TestCase):",
          "312:   \"\"\"Tests for FractionalMaxPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   def testDeterminismExceptionThrowing(self):",
          "312:     tensor_shape = (5, 20, 20, 3)",
          "313:     rand_mat = self._PRNG.random_sample(tensor_shape) * 1000 - 500",
          "314:     with test_util.deterministic_ops():",
          "315:       with self.assertRaisesRegex(",
          "316:           ValueError, \"requires a non-zero seed to be passed in when \"",
          "317:           \"determinism is enabled\"):",
          "318:         nn_ops.fractional_max_pool_v2(rand_mat, [1, 1.5, 1.5, 1])",
          "319:       nn_ops.fractional_max_pool_v2(rand_mat, [1, 1.5, 1.5, 1], seed=1)",
          "321:       with self.assertRaisesRegex(ValueError,",
          "322:                                   'requires \"seed\" and \"seed2\" to be non-zero'):",
          "323:         nn_ops.fractional_max_pool(rand_mat, [1, 1.5, 1.5, 1])",
          "324:       nn_ops.fractional_max_pool(",
          "325:           rand_mat, [1, 1.5, 1.5, 1], seed=1, seed2=1, deterministic=True)",
          "",
          "---------------"
        ]
      }
    }
  ]
}