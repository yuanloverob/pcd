{
  "cve_id": "CVE-2015-3180",
  "cve_desc": "lib/navigationlib.php in Moodle through 2.5.9, 2.6.x before 2.6.11, 2.7.x before 2.7.8, and 2.8.x before 2.8.6 allows remote authenticated users to obtain sensitive course-structure information by leveraging access to a student account with a suspended enrolment.",
  "repo": "moodle/moodle",
  "patch_hash": "8b4568500b305f7ddedbca355b73ce34ea4afbc0",
  "patch_info": {
    "commit_hash": "8b4568500b305f7ddedbca355b73ce34ea4afbc0",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/8b4568500b305f7ddedbca355b73ce34ea4afbc0",
    "files": [
      "lib/navigationlib.php"
    ],
    "message": "MDL-49788 navigation: Ensure we only check active enrolments",
    "before_after_code_files": [
      "lib/navigationlib.php||lib/navigationlib.php"
    ]
  },
  "patch_diff": {
    "lib/navigationlib.php||lib/navigationlib.php": [
      "File: lib/navigationlib.php -> lib/navigationlib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1177:                     if ($coursenode->isexpandable === true) {",
      "",
      "[Removed Lines]",
      "1176:                 if (!can_access_course($course)) {",
      "",
      "[Added Lines]",
      "1176:                 if (!can_access_course($course, null, '', true)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1189:                         $canviewcourseprofile = false;",
      "1190:                         break;",
      "1191:                     }",
      "",
      "[Removed Lines]",
      "1192:                 }",
      "1194:                 if ($coursenode->isexpandable === false) {",
      "",
      "[Added Lines]",
      "1192:                 } else if ($coursenode->isexpandable === false) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1240:                     $coursenode->make_active();",
      "1241:                     $canviewcourseprofile = false;",
      "1242:                     break;",
      "",
      "[Removed Lines]",
      "1239:                 if (!can_access_course($course)) {",
      "",
      "[Added Lines]",
      "1237:                 if (!can_access_course($course, null, '', true)) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1279:                     $coursenode->make_active();",
      "1280:                     $canviewcourseprofile = false;",
      "1281:                     break;",
      "",
      "[Removed Lines]",
      "1278:                 if (!can_access_course($course)) {",
      "",
      "[Added Lines]",
      "1276:                 if (!can_access_course($course, null, '', true)) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2328:                         $usercoursenode->add(get_string('notes', 'notes'), $url, self::TYPE_SETTING);",
      "2329:                     }",
      "2332:                         $usercoursenode->add(get_string('entercourse'), new moodle_url('/course/view.php',",
      "2333:                                 array('id' => $usercourse->id)), self::TYPE_SETTING, null, null, new pix_icon('i/course', ''));",
      "2334:                     }",
      "",
      "[Removed Lines]",
      "2331:                     if (can_access_course($usercourse, $user->id)) {",
      "",
      "[Added Lines]",
      "2329:                     if (can_access_course($usercourse, $user->id, '', true)) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2430:         } else if ($coursetype == self::COURSE_CURRENT) {",
      "2431:             $parent = $this->rootnodes['currentcourse'];",
      "2432:             $url = new moodle_url('/course/view.php', array('id'=>$course->id));",
      "2433:         } else if ($coursetype == self::COURSE_MY && !$forcegeneric) {",
      "2434:             if (!empty($CFG->navshowmycoursecategories) && ($parent = $this->rootnodes['mycourses']->find($course->category, self::TYPE_MY_CATEGORY))) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2431:             $canexpandcourse = $this->can_expand_course($course);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2509:         $cache = $this->get_expand_course_cache();",
      "2510:         $canexpand = $cache->get($course->id);",
      "2511:         if ($canexpand === false) {",
      "2513:             $canexpand = (int)$canexpand;",
      "2514:             $cache->set($course->id, $canexpand);",
      "2515:         }",
      "",
      "[Removed Lines]",
      "2512:             $canexpand = isloggedin() && can_access_course($course);",
      "",
      "[Added Lines]",
      "2511:             $canexpand = isloggedin() && can_access_course($course, null, '', true);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2865:                 break;",
      "2866:             case self::TYPE_COURSE :",
      "2867:                 $course = $DB->get_record('course', array('id' => $this->instanceid), '*', MUST_EXIST);",
      "2871:                     $this->add_course($course);",
      "",
      "[Removed Lines]",
      "2868:                 if (!can_access_course($course)) {",
      "",
      "[Added Lines]",
      "2867:                 if (!can_access_course($course, null, '', true)) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "3270:         }",
      "3274:             $courses = $this->page->navigation->get('courses');",
      "3275:             if (!$courses) {",
      "",
      "[Removed Lines]",
      "3273:         if (!is_enrolled(context_course::instance($this->page->course->id))) {",
      "",
      "[Added Lines]",
      "3272:         if (!is_enrolled(context_course::instance($this->page->course->id, null, '', true))) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "4166:                 }",
      "4167:             } else {",
      "4168:                 $canviewusercourse = has_capability('moodle/user:viewdetails', $coursecontext);",
      "4170:                 if ((!$canviewusercourse && !$canviewuser) || !$userisenrolled) {",
      "4171:                     return false;",
      "4172:                 }",
      "",
      "[Removed Lines]",
      "4169:                 $userisenrolled = is_enrolled($coursecontext, $user->id);",
      "",
      "[Added Lines]",
      "4168:                 $userisenrolled = is_enrolled($coursecontext, $user->id, '', true);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "45367bdf0cace1b0efb1a7430c570a39c347ab22",
      "candidate_info": {
        "commit_hash": "45367bdf0cace1b0efb1a7430c570a39c347ab22",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/45367bdf0cace1b0efb1a7430c570a39c347ab22",
        "files": [
          "admin/roles/assign.php",
          "blog/edit.php",
          "blog/index.php",
          "course/user.php",
          "lib/db/upgrade.php",
          "lib/myprofilelib.php",
          "lib/navigationlib.php",
          "lib/outputrenderers.php",
          "message/index.php",
          "message/output/email/message_output_email.php",
          "mod/forum/lib.php",
          "mod/forum/user.php",
          "my/index.php",
          "user/edit.php",
          "user/editadvanced.php",
          "user/editlib.php",
          "user/editor.php",
          "user/forum.php",
          "user/forum_form.php",
          "user/language.php",
          "user/tests/fixtures/myprofile_fixtures.php",
          "user/view.php"
        ],
        "message": "MDL-49688 navigation: First review fixes and version bump.\n\nPart of MDL-45774.",
        "before_after_code_files": [
          "admin/roles/assign.php||admin/roles/assign.php",
          "blog/edit.php||blog/edit.php",
          "blog/index.php||blog/index.php",
          "course/user.php||course/user.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/myprofilelib.php||lib/myprofilelib.php",
          "lib/navigationlib.php||lib/navigationlib.php",
          "lib/outputrenderers.php||lib/outputrenderers.php",
          "message/index.php||message/index.php",
          "message/output/email/message_output_email.php||message/output/email/message_output_email.php",
          "mod/forum/lib.php||mod/forum/lib.php",
          "mod/forum/user.php||mod/forum/user.php",
          "my/index.php||my/index.php",
          "user/edit.php||user/edit.php",
          "user/editadvanced.php||user/editadvanced.php",
          "user/editlib.php||user/editlib.php",
          "user/editor.php||user/editor.php",
          "user/forum.php||user/forum.php",
          "user/forum_form.php||user/forum_form.php",
          "user/language.php||user/language.php",
          "user/tests/fixtures/myprofile_fixtures.php||user/tests/fixtures/myprofile_fixtures.php",
          "user/view.php||user/view.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/navigationlib.php||lib/navigationlib.php"
          ],
          "candidate": [
            "lib/navigationlib.php||lib/navigationlib.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/roles/assign.php||admin/roles/assign.php": [
          "File: admin/roles/assign.php -> admin/roles/assign.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:     }",
          "136: }",
          "138: $PAGE->set_pagelayout('admin');",
          "139: $PAGE->set_title($title);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138: if ($user->id != $USER->id) {",
          "139:     $PAGE->navigation->extend_for_user($user);",
          "140:     $PAGE->navbar->includesettingsbase = true;",
          "141: }",
          "",
          "---------------"
        ],
        "blog/edit.php||blog/edit.php": [
          "File: blog/edit.php -> blog/edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     $id = null;",
          "49: }",
          "51: $sitecontext = context_system::instance();",
          "53: $PAGE->set_context($usercontext);",
          "54: $blognode = $PAGE->settingsnav->find('blogadd', null);",
          "55: $blognode->make_active();",
          "",
          "[Removed Lines]",
          "52: $usercontext = context_user::instance($USER->id);",
          "",
          "[Added Lines]",
          "51: $entry = new stdClass();",
          "52: $entry->id = null;",
          "54: if ($id) {",
          "55:     if (!$entry = new blog_entry($id)) {",
          "56:         print_error('wrongentryid', 'blog');",
          "57:     }",
          "58:     $userid = $entry->userid;",
          "59: } else {",
          "60:     $userid = $USER->id;",
          "61: }",
          "64: $usercontext = context_user::instance($userid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: if ($id) {",
          "92:     if (!blog_user_can_edit_entry($entry)) {",
          "93:         print_error('notallowedtoedit', 'blog');",
          "94:     }",
          "96:     $entry->subject      = clean_text($entry->subject);",
          "97:     $entry->summary      = clean_text($entry->summary, $entry->format);",
          "99: } else {",
          "100:     if (!has_capability('moodle/blog:create', $sitecontext)) {",
          "101:         print_error('noentry', 'blog'); // The capability \"manageentries\" is not enough for adding.",
          "102:     }",
          "106: }",
          "107: $returnurl->param('userid', $userid);",
          "",
          "[Removed Lines]",
          "88:     if (!$entry = new blog_entry($id)) {",
          "89:         print_error('wrongentryid', 'blog');",
          "90:     }",
          "95:     $userid = $entry->userid;",
          "103:     $entry  = new stdClass();",
          "104:     $entry->id = null;",
          "105:     $userid = $USER->id;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "blog/index.php||blog/index.php": [
          "File: blog/index.php -> blog/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     }",
          "58: }",
          "60: if (isset($userid)) {",
          "61:     $context = context_user::instance($userid);",
          "62: } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: if ($entryid and !isset($userid)) {",
          "62:     $entry = new blog_entry($entryid);",
          "63:     $userid = $entry->userid;",
          "64: }",
          "",
          "---------------"
        ],
        "course/user.php||course/user.php": [
          "File: course/user.php -> course/user.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:                 $PAGE->navbar->add(fullname($user), $userurl, navigation_node::TYPE_SETTING);",
          "156:             }",
          "159:             $navbar = $PAGE->navbar->add(get_string('grades', 'grades'), $gradeurl, navigation_node::TYPE_SETTING);",
          "160:         }",
          "",
          "[Removed Lines]",
          "157:             $gradeurl = new moodle_url('/course/user.php', array('id'=>$id, 'user'=>$user->id, 'mode'=>$mode));",
          "",
          "[Added Lines]",
          "157:             $gradeurl = new moodle_url('/course/user.php', array('id' => $id, 'user' => $user->id, 'mode' => $mode));",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4270:         upgrade_main_savepoint(true, 2015032000.00);",
          "4271:     }",
          "4273:     if ($oldversion < 2015040200.01) {",
          "4275:         if (!file_exists(\"$CFG->dirroot/$CFG->admin/tool/timezoneimport\")) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4273: <<<<<<< HEAD",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4315:         upgrade_main_savepoint(true, 2015040800.01);",
          "4316:     }",
          "4320:         $oldconfig = get_config('core', 'customusermenuitems');",
          "",
          "[Removed Lines]",
          "4318:     if ($oldversion < 2015030400.02) {",
          "",
          "[Added Lines]",
          "4319:     if ($oldversion < 2015040800.02) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4334:         $newconfig = preg_replace('/(\\r\\n)+/', \"\\n\", $newconfig);",
          "4335:         set_config('customusermenuitems', $newconfig);",
          "4338:     }",
          "4340:     return true;",
          "",
          "[Removed Lines]",
          "4337:         upgrade_main_savepoint(true, 2015030400.02);",
          "",
          "[Added Lines]",
          "4338:         upgrade_main_savepoint(true, 2015040800.02);",
          "",
          "---------------"
        ],
        "lib/myprofilelib.php||lib/myprofilelib.php": [
          "File: lib/myprofilelib.php -> lib/myprofilelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:             if ($userauthplugin && $userauthplugin->can_edit_profile()) {",
          "84:                 $url = $userauthplugin->edit_profile_url();",
          "85:                 if (empty($url)) {",
          "87:                 }",
          "88:                 $node = new core_user\\output\\myprofile\\node('administration', 'editprofile',",
          "89:                         get_string('editmyprofile'), null, $url);",
          "",
          "[Removed Lines]",
          "86:                     $url = new moodle_url('/user/edit.php', array('userid' => $user->id, 'course' => $id));",
          "",
          "[Added Lines]",
          "86:                     if (empty($course)) {",
          "87:                         $url = new moodle_url('/user/edit.php', array('userid' => $user->id));",
          "88:                     } else {",
          "89:                         $url = new moodle_url('/user/edit.php', array('userid' => $user->id, 'course' => $course->id));",
          "90:                     }",
          "",
          "---------------"
        ],
        "lib/navigationlib.php||lib/navigationlib.php": [
          "File: lib/navigationlib.php -> lib/navigationlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2163:             $usersnode = $this->rootnodes['users'];",
          "2164:             if (has_capability('moodle/course:viewparticipants', $coursecontext)) {",
          "2166:             }",
          "2167:             $userviewurl = new moodle_url('/user/profile.php', $baseargs);",
          "2168:         }",
          "",
          "[Removed Lines]",
          "2165:                 $usersnode->action = new moodle_url('/user/index.php', array('id'=>$course->id));",
          "",
          "[Added Lines]",
          "2165:                 $usersnode->action = new moodle_url('/user/index.php', array('id' => $course->id));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2189:             if ($iscurrentuser || has_capability('moodle/user:viewdetails', $coursecontext) ||",
          "2190:                     has_capability('moodle/user:viewdetails', $usercontext)) {",
          "2191:                 if ($issitecourse || ($iscurrentuser && !$forceforcontext)) {",
          "2193:                 } else {",
          "2195:                 }",
          "2196:             }",
          "",
          "[Removed Lines]",
          "2192:                     $usernode->add(get_string('viewprofile'), new moodle_url('/user/profile.php',$baseargs));",
          "2194:                     $usernode->add(get_string('viewprofile'), new moodle_url('/user/view.php',$baseargs));",
          "",
          "[Added Lines]",
          "2192:                     $usernode->add(get_string('viewprofile'), new moodle_url('/user/profile.php', $baseargs));",
          "2194:                     $usernode->add(get_string('viewprofile'), new moodle_url('/user/view.php', $baseargs));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2202:                 $forumtab = $usernode->add(get_string('forumposts', 'forum'));",
          "2203:                 $forumtab->add(get_string('posts', 'forum'), new moodle_url('/mod/forum/user.php', $baseargs));",
          "2204:                 $forumtab->add(get_string('discussions', 'forum'), new moodle_url('/mod/forum/user.php',",
          "2206:             }",
          "",
          "[Removed Lines]",
          "2205:                         array_merge($baseargs, array('mode'=>'discussions'))));",
          "",
          "[Added Lines]",
          "2205:                         array_merge($baseargs, array('mode' => 'discussions'))));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2239:                 if ($course->id != $SITE->id) {",
          "2240:                     $messageargs['viewing'] = MESSAGE_VIEW_COURSE. $course->id;",
          "2241:                 }",
          "2243:                 $usernode->add(get_string('messages', 'message'), $url, self::TYPE_SETTING, null, 'messages');",
          "2244:             }",
          "",
          "[Removed Lines]",
          "2242:                 $url = new moodle_url('/message/index.php',$messageargs);",
          "",
          "[Added Lines]",
          "2242:                 $url = new moodle_url('/message/index.php', $messageargs);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2260:             if (!empty($CFG->enablenotes) &&",
          "2261:                     has_any_capability(array('moodle/notes:manage', 'moodle/notes:view'), $coursecontext)) {",
          "2263:                 if ($coursecontext->instanceid != SITEID) {",
          "2264:                     $url->param('course', $coursecontext->instanceid);",
          "2265:                 }",
          "",
          "[Removed Lines]",
          "2262:                 $url = new moodle_url('/notes/index.php',array('user'=>$user->id));",
          "",
          "[Added Lines]",
          "2262:                 $url = new moodle_url('/notes/index.php', array('user' => $user->id));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2293:                 $reports = core_component::get_plugin_list('gradereport');",
          "2296:                 $userscourses = enrol_get_users_courses($user->id);",
          "2297:                 $userscoursesnode = $usernode->add(get_string('courses'));",
          "",
          "[Removed Lines]",
          "2294:                 arsort($reports); // user is last, we want to test it first.",
          "",
          "[Added Lines]",
          "2294:                 arsort($reports); // User is last, we want to test it first.",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2307:                     $usercoursecontext = context_course::instance($usercourse->id);",
          "2308:                     $usercourseshortname = format_string($usercourse->shortname, true, array('context' => $usercoursecontext));",
          "2309:                     $usercoursenode = $userscoursesnode->add($usercourseshortname, new moodle_url('/user/view.php',",
          "2312:                     $gradeavailable = has_capability('moodle/grade:viewall', $usercoursecontext);",
          "2313:                     if (!$gradeavailable && !empty($usercourse->showgrades) && is_array($reports) && !empty($reports)) {",
          "2314:                         foreach ($reports as $plugin => $plugindir) {",
          "2315:                             if (has_capability('gradereport/'.$plugin.':view', $usercoursecontext)) {",
          "2317:                                 $gradeavailable = true;",
          "2318:                                 break;",
          "2319:                             }",
          "",
          "[Removed Lines]",
          "2310:                             array('id'=>$user->id, 'course'=>$usercourse->id)), self::TYPE_CONTAINER);",
          "",
          "[Added Lines]",
          "2310:                             array('id' => $user->id, 'course' => $usercourse->id)), self::TYPE_CONTAINER);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2321:                     }",
          "2323:                     if ($gradeavailable) {",
          "2325:                         $usercoursenode->add(get_string('grades'), $url, self::TYPE_SETTING, null, null,",
          "2326:                                 new pix_icon('i/grades', ''));",
          "2327:                     }",
          "",
          "[Removed Lines]",
          "2324:                         $url = new moodle_url('/grade/report/index.php', array('id'=>$usercourse->id));",
          "",
          "[Added Lines]",
          "2324:                         $url = new moodle_url('/grade/report/index.php', array('id' => $usercourse->id));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2330:                     if (!empty($CFG->enablenotes) &&",
          "2331:                             has_any_capability(array('moodle/notes:manage', 'moodle/notes:view'), $usercoursecontext)) {",
          "2333:                         $usercoursenode->add(get_string('notes', 'notes'), $url, self::TYPE_SETTING);",
          "2334:                     }",
          "2336:                     if (can_access_course($usercourse, $user->id)) {",
          "2337:                         $usercoursenode->add(get_string('entercourse'), new moodle_url('/course/view.php',",
          "2339:                     }",
          "2341:                     $reporttab = $usercoursenode->add(get_string('activityreports'));",
          "",
          "[Removed Lines]",
          "2332:                         $url = new moodle_url('/notes/index.php',array('user'=>$user->id, 'course'=>$usercourse->id));",
          "2338:                                 array('id'=>$usercourse->id)), self::TYPE_SETTING, null, null, new pix_icon('i/course', ''));",
          "",
          "[Added Lines]",
          "2332:                         $url = new moodle_url('/notes/index.php', array('user' => $user->id, 'course' => $usercourse->id));",
          "2338:                                 array('id' => $usercourse->id)), self::TYPE_SETTING, null, null, new pix_icon('i/course', ''));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2623:           and ($CFG->bloglevel == BLOG_GLOBAL_LEVEL or ($CFG->bloglevel == BLOG_SITE_LEVEL and (isloggedin() and !isguestuser())))",
          "2624:           and has_capability('moodle/blog:view', context_system::instance())) {",
          "2625:             $blogsurls = new moodle_url('/blog/index.php', array('courseid' => $filterselect));",
          "2627:         }",
          "",
          "[Removed Lines]",
          "2626:             $coursenode->add(get_string('blogssite','blog'), $blogsurls->out(), self::TYPE_SYSTEM, null, 'siteblog');",
          "",
          "[Added Lines]",
          "2626:             $coursenode->add(get_string('blogssite', 'blog'), $blogsurls->out(), self::TYPE_SYSTEM, null, 'siteblog');",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2636:         if (!empty($CFG->enablenotes) && (has_capability('moodle/notes:manage', $this->page->context) || has_capability('moodle/notes:view', $this->page->context))) {",
          "2639:         }",
          "2642:         if (!empty($CFG->usetags) && isloggedin()) {",
          "2644:         }",
          "2646:         if (isloggedin()) {",
          "",
          "[Removed Lines]",
          "2637:             $coursenode->add(get_string('notes','notes'), new moodle_url('/notes/index.php',",
          "2638:                 array('filtertype'=>'course', 'filterselect'=>$filterselect)), self::TYPE_SETTING, null, 'notes');",
          "2643:             $node = $coursenode->add(get_string('tags', 'tag'), new moodle_url('/tag/search.php'), self::TYPE_SETTING, null, 'tags');",
          "",
          "[Added Lines]",
          "2637:             $coursenode->add(get_string('notes', 'notes'), new moodle_url('/notes/index.php',",
          "2638:                 array('filtertype' => 'course', 'filterselect' => $filterselect)), self::TYPE_SETTING, null, 'notes');",
          "2643:             $node = $coursenode->add(get_string('tags', 'tag'), new moodle_url('/tag/search.php'),",
          "2644:                     self::TYPE_SETTING, null, 'tags');",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4199:             $iscurrentuser = ($user->id == $USER->id);",
          "4202:             if ($course->id != $SITE->id && !$iscurrentuser) {",
          "4203:                 $baseargs['course'] = $course->id;",
          "4204:                 $issitecourse = false;",
          "",
          "[Removed Lines]",
          "4201:             $baseargs = array('id'=>$user->id);",
          "",
          "[Added Lines]",
          "4202:             $baseargs = array('id' => $user->id);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4218:                 $forumtab = $dashboard->add(get_string('forumposts', 'forum'));",
          "4219:                 $forumtab->add(get_string('posts', 'forum'), new moodle_url('/mod/forum/user.php', $baseargs), null, 'myposts');",
          "4220:                 $forumtab->add(get_string('discussions', 'forum'), new moodle_url('/mod/forum/user.php',",
          "4222:             }",
          "",
          "[Removed Lines]",
          "4221:                         array_merge($baseargs, array('mode'=>'discussions'))), null, 'mydiscussions');",
          "",
          "[Added Lines]",
          "4222:                         array_merge($baseargs, array('mode' => 'discussions'))), null, 'mydiscussions');",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4236:                     $blogs = $dashboard->add(get_string('blogs', 'blog'), null, navigation_node::TYPE_CONTAINER);",
          "4237:                     foreach ($options as $type => $option) {",
          "4238:                         if ($type == \"rss\") {",
          "4240:                                     new pix_icon('i/rss', ''));",
          "4241:                         } else {",
          "4242:                             $blogs->add($option['string'], $option['link'], self::TYPE_SETTING, null, 'blog' . $type);",
          "",
          "[Removed Lines]",
          "4239:                             $blogs->add($option['string'], $option['link'], settings_navigation::TYPE_SETTING, null, null,",
          "",
          "[Added Lines]",
          "4240:                             $blogs->add($option['string'], $option['link'], self::TYPE_SETTING, null, null,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4255:                 if ($course->id != $SITE->id) {",
          "4256:                     $messageargs['viewing'] = MESSAGE_VIEW_COURSE. $course->id;",
          "4257:                 }",
          "4259:                 $dashboard->add(get_string('messages', 'message'), $url, self::TYPE_SETTING, null, 'messages');",
          "4260:             }",
          "",
          "[Removed Lines]",
          "4258:                 $url = new moodle_url('/message/index.php',$messageargs);",
          "",
          "[Added Lines]",
          "4259:                 $url = new moodle_url('/message/index.php', $messageargs);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4276:             if (!empty($CFG->enablenotes) &&",
          "4277:                     has_any_capability(array('moodle/notes:manage', 'moodle/notes:view'), $coursecontext)) {",
          "4279:                 if ($coursecontext->instanceid != SITEID) {",
          "4280:                     $url->param('course', $coursecontext->instanceid);",
          "4281:                 }",
          "",
          "[Removed Lines]",
          "4278:                 $url = new moodle_url('/notes/index.php',array('user'=>$user->id));",
          "",
          "[Added Lines]",
          "4279:                 $url = new moodle_url('/notes/index.php', array('user' => $user->id));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4360:         if (isloggedin() && !isguestuser($user) && !is_mnet_remote_user($user)) {",
          "4361:             if ($currentuser && has_capability('moodle/user:editownprofile', $systemcontext) ||",
          "4362:                     has_capability('moodle/user:editprofile', $usercontext)) {",
          "4365:             }",
          "4366:         }",
          "4367:         $pluginmanager = core_plugin_manager::instance();",
          "",
          "[Removed Lines]",
          "4363:                 $url = new moodle_url('/user/language.php', array('id'=>$user->id, 'course'=>$course->id));",
          "4364:                 $useraccount->add(get_string('preferredlanguage'), $url, self::TYPE_SETTING);",
          "",
          "[Added Lines]",
          "4364:                 $url = new moodle_url('/user/language.php', array('id' => $user->id, 'course' => $course->id));",
          "4365:                 $useraccount->add(get_string('preferredlanguage'), $url, self::TYPE_SETTING, null, 'preferredlanguage');",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4369:         if (isset($enabled['forum']) && isloggedin() && !isguestuser($user) && !is_mnet_remote_user($user)) {",
          "4370:             if ($currentuser && has_capability('moodle/user:editownprofile', $systemcontext) ||",
          "4371:                     has_capability('moodle/user:editprofile', $usercontext)) {",
          "4373:                 $useraccount->add(get_string('forumpreferences'), $url, self::TYPE_SETTING);",
          "4374:             }",
          "4375:         }",
          "",
          "[Removed Lines]",
          "4372:                 $url = new moodle_url('/user/forum.php', array('id'=>$user->id, 'course'=>$course->id));",
          "",
          "[Added Lines]",
          "4373:                 $url = new moodle_url('/user/forum.php', array('id' => $user->id, 'course' => $course->id));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4378:             if (isloggedin() && !isguestuser($user) && !is_mnet_remote_user($user)) {",
          "4379:                 if ($currentuser && has_capability('moodle/user:editownprofile', $systemcontext) ||",
          "4380:                         has_capability('moodle/user:editprofile', $usercontext)) {",
          "4382:                     $useraccount->add(get_string('editorpreferences'), $url, self::TYPE_SETTING);",
          "4383:                 }",
          "4384:             }",
          "4385:         }",
          "4390:             $roles = $usersetting->add(get_string('roles'), null, self::TYPE_SETTING);",
          "4392:             $url = new moodle_url('/admin/roles/usersroles.php', array('userid'=>$user->id, 'courseid'=>$course->id));",
          "",
          "[Removed Lines]",
          "4381:                     $url = new moodle_url('/user/editor.php', array('id'=>$user->id, 'course'=>$course->id));",
          "4388:         if (has_any_capability(array('moodle/role:assign', 'moodle/role:safeoverride','moodle/role:override', 'moodle/role:manage'),",
          "4389:                 $usercontext)) {",
          "",
          "[Added Lines]",
          "4382:                     $url = new moodle_url('/user/editor.php', array('id' => $user->id, 'course' => $course->id));",
          "4389:         if (has_any_capability(array('moodle/role:assign', 'moodle/role:safeoverride', 'moodle/role:override',",
          "4390:                 'moodle/role:manage'), $usercontext)) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4397:             if (!empty($assignableroles)) {",
          "4398:                 $url = new moodle_url('/admin/roles/assign.php',",
          "4400:                 $roles->add(get_string('assignrolesrelativetothisuser', 'role'), $url, self::TYPE_SETTING);",
          "4401:             }",
          "4403:             if (has_capability('moodle/role:review', $usercontext) || count(get_overridable_roles($usercontext, ROLENAME_BOTH))>0) {",
          "4404:                 $url = new moodle_url('/admin/roles/permissions.php',",
          "4406:                 $roles->add(get_string('permissions', 'role'), $url, self::TYPE_SETTING);",
          "4407:             }",
          "4409:             $url = new moodle_url('/admin/roles/check.php',",
          "4411:             $roles->add(get_string('checkpermissions', 'role'), $url, self::TYPE_SETTING);",
          "4412:         }",
          "",
          "[Removed Lines]",
          "4399:                         array('contextid'=>$usercontext->id,'userid'=>$user->id, 'courseid'=>$course->id));",
          "4405:                         array('contextid'=>$usercontext->id,'userid'=>$user->id, 'courseid'=>$course->id));",
          "4410:                     array('contextid'=>$usercontext->id,'userid'=>$user->id, 'courseid'=>$course->id));",
          "",
          "[Added Lines]",
          "4400:                         array('contextid' => $usercontext->id, 'userid' => $user->id, 'courseid' => $course->id));",
          "4406:                         array('contextid' => $usercontext->id, 'userid' => $user->id, 'courseid' => $course->id));",
          "4411:                     array('contextid' => $usercontext->id, 'userid' => $user->id, 'courseid' => $course->id));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4466:         if ($currentuser && !empty($CFG->enableblogs)) {",
          "4467:             $blog = $usersetting->add(get_string('blogs', 'blog'), null, navigation_node::TYPE_CONTAINER, null, 'blogs');",
          "4468:             if (has_capability('moodle/blog:view', $systemcontext)) {",
          "4470:             }",
          "4471:             if (!empty($CFG->useexternalblogs) && $CFG->maxexternalblogsperuser > 0 &&",
          "4472:                     has_capability('moodle/blog:manageexternal', $systemcontext)) {",
          "",
          "[Removed Lines]",
          "4469:                 $blog->add(get_string('preferences', 'blog'), new moodle_url('/blog/preferences.php'), navigation_node::TYPE_SETTING);",
          "",
          "[Added Lines]",
          "4470:                 $blog->add(get_string('preferences', 'blog'), new moodle_url('/blog/preferences.php'),",
          "4471:                         navigation_node::TYPE_SETTING);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4483:         if ($currentuser && !empty($CFG->enablebadges)) {",
          "4484:             $badges = $usersetting->add(get_string('badges'), null, navigation_node::TYPE_CONTAINER, null, 'badges');",
          "4486:             if (!empty($CFG->badges_allowexternalbackpack)) {",
          "4487:                 $badges->add(get_string('backpackdetails', 'badges'), new moodle_url('/badges/mybackpack.php'),",
          "4488:                         navigation_node::TYPE_SETTING);",
          "",
          "[Removed Lines]",
          "4485:             $badges->add(get_string('preferences', 'badges'), new moodle_url('/badges/preferences.php'), navigation_node::TYPE_SETTING);",
          "",
          "[Added Lines]",
          "4487:             $badges->add(get_string('preferences', 'badges'), new moodle_url('/badges/preferences.php'),",
          "4488:                     navigation_node::TYPE_SETTING);",
          "",
          "---------------"
        ],
        "lib/outputrenderers.php||lib/outputrenderers.php": [
          "File: lib/outputrenderers.php -> lib/outputrenderers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3961:     public function render_preferences_groups(preferences_groups $renderable) {",
          "3962:         $html = '';",
          "3963:         $html .= html_writer::start_tag('div', array('class' => 'span12 preferences-groups'));",
          "3964:         $i = 0;",
          "3965:         $open = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3963:         $html .= html_writer::start_div('row-fluid');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3968:                 if ($open) {",
          "3969:                     $html .= html_writer::end_tag('div');",
          "3970:                 }",
          "3972:                 $open = true;",
          "3973:             }",
          "3974:             $html .= $this->render($group);",
          "",
          "[Removed Lines]",
          "3971:                 $html .= html_writer::start_tag('div', array('class' => 'row'));",
          "",
          "[Added Lines]",
          "3972:                 $html .= html_writer::start_tag('div', array('class' => 'row-fluid'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3980:         $html .= html_writer::end_tag('ul');",
          "3981:         $html .= html_writer::end_tag('div');",
          "3982:         return $html;",
          "3983:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3983:         $html .= html_writer::end_div();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4136:         $html .= html_writer::tag('nav', $this->navbar(), array('class' => 'breadcrumb-nav'));",
          "4137:         $html .= html_writer::div($this->page_heading_button(), 'breadcrumb-button');",
          "4138:         $html .= html_writer::end_div();",
          "4140:         $html .= html_writer::end_tag('header');",
          "4141:         return $html;",
          "4142:     }",
          "",
          "[Removed Lines]",
          "4139:         $html .= html_writer::tag('div', $this->course_header(), array('class' => 'course-header'));",
          "",
          "[Added Lines]",
          "4143:         $html .= html_writer::tag('div', $this->course_header(), array('id' => 'course-header'));",
          "",
          "---------------"
        ],
        "message/index.php||message/index.php": [
          "File: message/index.php -> message/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "198: } else {",
          "199:     $PAGE->set_title(\"{$SITE->shortname}: $strmessages\");",
          "200: }",
          "204: $usernode = $PAGE->navigation->find('users', null);",
          "",
          "[Removed Lines]",
          "201: $PAGE->set_heading(fullname($USER));",
          "",
          "[Added Lines]",
          "201: $PAGE->set_heading(fullname($user1));",
          "",
          "---------------"
        ],
        "message/output/email/message_output_email.php||message/output/email/message_output_email.php": [
          "File: message/output/email/message_output_email.php -> message/output/email/message_output_email.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:         }",
          "136:         if (!empty($CFG->messagingallowemailoverride)) {",
          "139:             $string .= $OUTPUT->container(html_writer::empty_tag('input', $inputattributes));",
          "141:             if (empty($preferences->email_email) && !empty($preferences->userdefaultemail)) {",
          "",
          "[Removed Lines]",
          "137:             $inputattributes = array('size'=>'30', 'name'=>'email_email', 'value'=>$preferences->email_email, 'id'=>'email_email');",
          "138:             $string .= html_writer::label(get_string('email','message_email'), 'email_email');",
          "",
          "[Added Lines]",
          "137:             $inputattributes = array('size' => '30', 'name' => 'email_email', 'value' => $preferences->email_email,",
          "138:                     'id' => 'email_email');",
          "139:             $string .= html_writer::label(get_string('email', 'message_email'), 'email_email');",
          "",
          "---------------"
        ],
        "mod/forum/lib.php||mod/forum/lib.php": [
          "File: mod/forum/lib.php -> mod/forum/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7831:     }",
          "7832:     $postsurl = new moodle_url('/mod/forum/user.php', array('id' => $user->id));",
          "7833:     if (!empty($course)) {",
          "7835:     }",
          "7836:     $string = $iscurrentuser ? get_string('myprofileownpost', 'mod_forum') :",
          "7837:             get_string('myprofileotherpost', 'mod_forum', fullname($user));",
          "",
          "[Removed Lines]",
          "7834:         $postsurl->param('coursre', $course->id);",
          "",
          "[Added Lines]",
          "7834:         $postsurl->param('course', $course->id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7841:     $discussionssurl = new moodle_url('/mod/forum/user.php', array('id' => $user->id, 'mode' => 'discussions'));",
          "7842:     if (!empty($course)) {",
          "7844:     }",
          "7845:     $string = $iscurrentuser ? get_string('myprofileowndis', 'mod_forum') :",
          "7846:             get_string('myprofileotherdis', 'mod_forum', fullname($user));",
          "",
          "[Removed Lines]",
          "7843:         $postsurl->param('coursre', $course->id);",
          "",
          "[Added Lines]",
          "7843:         $postsurl->param('course', $course->id);",
          "",
          "---------------"
        ],
        "mod/forum/user.php||mod/forum/user.php": [
          "File: mod/forum/user.php -> mod/forum/user.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:                         array('id' => $user->id, 'course' => $courseid)));",
          "194:             } else {",
          "195:                 $navbar = $PAGE->navbar->add(get_string('discussions', 'forum'), new moodle_url('/mod/forum/user.php',",
          "197:             }",
          "198:         }",
          "199:     } else if ($canviewuser) {",
          "",
          "[Removed Lines]",
          "196:                         array('id' => $user->id, 'course' => $courseid, 'mode'=>'discussions')));",
          "",
          "[Added Lines]",
          "196:                         array('id' => $user->id, 'course' => $courseid, 'mode' => 'discussions')));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:                         array('id' => $user->id, 'course' => $courseid)));",
          "212:             } else {",
          "213:                 $navbar = $PAGE->navbar->add(get_string('discussions', 'forum'), new moodle_url('/mod/forum/user.php',",
          "215:             }",
          "216:         }",
          "",
          "[Removed Lines]",
          "214:                         array('id' => $user->id, 'course' => $courseid, 'mode'=>'discussions')));",
          "",
          "[Added Lines]",
          "214:                         array('id' => $user->id, 'course' => $courseid, 'mode' => 'discussions')));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:                 array('id' => $user->id, 'course' => $courseid)));",
          "385:     } else {",
          "386:         $navbar = $PAGE->navbar->add(get_string('discussions', 'forum'), new moodle_url('/mod/forum/user.php',",
          "388:     }",
          "389: }",
          "",
          "[Removed Lines]",
          "387:                 array('id' => $user->id, 'course' => $courseid, 'mode'=>'discussions')));",
          "",
          "[Added Lines]",
          "387:                 array('id' => $user->id, 'course' => $courseid, 'mode' => 'discussions')));",
          "",
          "---------------"
        ],
        "my/index.php||my/index.php": [
          "File: my/index.php -> my/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:         }",
          "94:     }",
          "95: }",
          "101: if ($PAGE->user_allowed_editing()) {",
          "",
          "[Removed Lines]",
          "96: $mycoursenode = $PAGE->navigation->get('mycourses');",
          "97: $mycoursenode->collapse = true;",
          "98: $mycoursenode->make_inactive();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "user/edit.php||user/edit.php": [
          "File: user/edit.php -> user/edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:             $a->oldemail = $usernew->email = $user->email;",
          "196:             $emailchangedhtml = $OUTPUT->box(get_string('auth_changingemailaddress', 'auth', $a), 'generalbox', 'notice');",
          "198:             $emailchanged = true;",
          "199:         }",
          "200:     }",
          "",
          "[Removed Lines]",
          "197:             $emailchangedhtml .= $OUTPUT->continue_button(\"$CFG->wwwroot/user/preferences.php?userid=$user->id&amp;course=$course->id\");",
          "",
          "[Added Lines]",
          "197:             $emailchangedhtml .=",
          "198:                     $OUTPUT->continue_button(\"$CFG->wwwroot/user/preferences.php?userid=$user->id&amp;course=$course->id\");",
          "",
          "---------------"
        ],
        "user/editadvanced.php||user/editadvanced.php": [
          "File: user/editadvanced.php -> user/editadvanced.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:     $PAGE->set_heading($userfullname);",
          "340:     echo $OUTPUT->header();",
          "342: }",
          "",
          "[Removed Lines]",
          "341:     echo $OUTPUT->heading($userfullname);",
          "",
          "[Added Lines]",
          "341:     echo $OUTPUT->heading($streditmyprofile);",
          "",
          "---------------"
        ],
        "user/editlib.php||user/editlib.php": [
          "File: user/editlib.php -> user/editlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     } else {",
          "98:         require_capability('moodle/user:editprofile', $personalcontext);",
          "104:         if (is_siteadmin($user) and !is_siteadmin($USER)) {  // Only admins may edit other admins.",
          "105:             print_error('useradmineditadmin');",
          "",
          "[Removed Lines]",
          "100:         if (isguestuser($user->id)) {",
          "101:             print_error('guestnoeditprofileother');",
          "102:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "user/editor.php||user/editor.php": [
          "File: user/editor.php -> user/editor.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: $streditmyeditor = get_string('editorpreferences');",
          "57: $userfullname     = fullname($user, true);",
          "59: $PAGE->set_title(\"$course->shortname: $streditmyeditor\");",
          "60: $PAGE->set_heading($userfullname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: $PAGE->navbar->includesettingsbase = true;",
          "",
          "---------------"
        ],
        "user/forum.php||user/forum.php": [
          "File: user/forum.php -> user/forum.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: $streditmyforum = get_string('forumpreferences');",
          "58: $userfullname     = fullname($user, true);",
          "60: $PAGE->set_title(\"$course->shortname: $streditmyforum\");",
          "61: $PAGE->set_heading($userfullname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: $PAGE->navbar->includesettingsbase = true;",
          "",
          "---------------"
        ],
        "user/forum_form.php||user/forum_form.php": [
          "File: user/forum_form.php -> user/forum_form.php"
        ],
        "user/language.php||user/language.php": [
          "File: user/language.php -> user/language.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: $streditmylanguage = get_string('preferredlanguage');",
          "61: $userfullname     = fullname($user, true);",
          "63: $PAGE->set_title(\"$course->shortname: $streditmylanguage\");",
          "64: $PAGE->set_heading($userfullname);",
          "66: echo $OUTPUT->header();",
          "70: $languageform->display();",
          "",
          "[Removed Lines]",
          "67: echo $OUTPUT->heading($userfullname);",
          "",
          "[Added Lines]",
          "63: $PAGE->navbar->includesettingsbase = true;",
          "69: echo $OUTPUT->heading($streditmylanguage);",
          "",
          "---------------"
        ],
        "user/tests/fixtures/myprofile_fixtures.php||user/tests/fixtures/myprofile_fixtures.php": [
          "File: user/tests/fixtures/myprofile_fixtures.php -> user/tests/fixtures/myprofile_fixtures.php"
        ],
        "user/view.php||user/view.php": [
          "File: user/view.php -> user/view.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: echo $OUTPUT->header();",
          "192: echo '<div class=\"userprofile\">';",
          "194: echo $OUTPUT->context_header($headerinfo, 2);",
          "196: if ($user->deleted) {",
          "",
          "[Removed Lines]",
          "193: $headerinfo = array('heading' => fullname($user) ,'user' => $user, 'usercontext' => $usercontext);",
          "",
          "[Added Lines]",
          "193: $headerinfo = array('heading' => fullname($user), 'user' => $user, 'usercontext' => $usercontext);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "817d39b8aaade0e7df56ed007696bdcf07c9e22b",
      "candidate_info": {
        "commit_hash": "817d39b8aaade0e7df56ed007696bdcf07c9e22b",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/817d39b8aaade0e7df56ed007696bdcf07c9e22b",
        "files": [
          "blocks/navigation/tests/behat/view_my_courses.feature",
          "lib/navigationlib.php",
          "lib/tests/behat/behat_navigation.php"
        ],
        "message": "MDL-44711 navigation: better handling of course expansion exception",
        "before_after_code_files": [
          "blocks/navigation/tests/behat/view_my_courses.feature||blocks/navigation/tests/behat/view_my_courses.feature",
          "lib/navigationlib.php||lib/navigationlib.php",
          "lib/tests/behat/behat_navigation.php||lib/tests/behat/behat_navigation.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/navigationlib.php||lib/navigationlib.php"
          ],
          "candidate": [
            "lib/navigationlib.php||lib/navigationlib.php"
          ]
        }
      },
      "candidate_diff": {
        "blocks/navigation/tests/behat/view_my_courses.feature||blocks/navigation/tests/behat/view_my_courses.feature": [
          "File: blocks/navigation/tests/behat/view_my_courses.feature -> blocks/navigation/tests/behat/view_my_courses.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     And I expand \"cat33\" node",
          "67:     And I should see \"c331\" in the \"Navigation\" \"block\"",
          "68:     And I should not see \"c332\" in the \"Navigation\" \"block\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:   @javascript",
          "71:   Scenario: I can expand categories and courses as guest",
          "72:     Given I set the following administration settings values:",
          "73:       | Show my course categories | 1 |",
          "74:       | Show all courses          | 1 |",
          "75:     And I log out",
          "76:     And I expand \"Courses\" node",
          "77:     And I should see \"cat1\" in the \"Navigation\" \"block\"",
          "78:     And I should see \"cat2\" in the \"Navigation\" \"block\"",
          "79:     And I should see \"cat3\" in the \"Navigation\" \"block\"",
          "80:     And I should not see \"cat31\" in the \"Navigation\" \"block\"",
          "81:     And I should not see \"cat32\" in the \"Navigation\" \"block\"",
          "82:     And I should not see \"cat331\" in the \"Navigation\" \"block\"",
          "83:     And I should not see \"c1\" in the \"Navigation\" \"block\"",
          "84:     And I should not see \"c2\" in the \"Navigation\" \"block\"",
          "85:     And I should not see \"c31\" in the \"Navigation\" \"block\"",
          "86:     And I should not see \"c32\" in the \"Navigation\" \"block\"",
          "87:     When I expand \"cat3\" node",
          "88:     And I expand \"cat31\" node",
          "89:     And I expand \"cat1\" node",
          "90:     And I should see \"c1\" in the \"Navigation\" \"block\"",
          "91:     And I expand \"c1\" node",
          "92:     Then I should not see \"",
          "93:     And I should see \"cat1\" in the \"Navigation\" \"block\"",
          "94:     And I should see \"cat2\" in the \"Navigation\" \"block\"",
          "95:     And I should see \"cat3\" in the \"Navigation\" \"block\"",
          "96:     And I should see \"cat31\" in the \"Navigation\" \"block\"",
          "97:     And I should see \"cat32\" in the \"Navigation\" \"block\"",
          "98:     And I should not see \"cat331\" in the \"Navigation\" \"block\"",
          "99:     And I should see \"c1\" in the \"Navigation\" \"block\"",
          "100:     And I should not see \"c2\" in the \"Navigation\" \"block\"",
          "101:     And I should see \"c31\" in the \"Navigation\" \"block\"",
          "102:     And I should not see \"c32\" in the \"Navigation\" \"block\"",
          "",
          "---------------"
        ],
        "lib/navigationlib.php||lib/navigationlib.php": [
          "File: lib/navigationlib.php -> lib/navigationlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2769:                 break;",
          "2770:             case self::TYPE_COURSE :",
          "2771:                 $course = $DB->get_record('course', array('id' => $this->instanceid), '*', MUST_EXIST);",
          "2772:                 require_course_login($course, true, null, false, true);",
          "2773:                 $this->page->set_context(context_course::instance($course->id));",
          "2774:                 $coursenode = $this->add_course($course);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2772:                 if (!can_access_course($course)) {",
          "2775:                     $this->add_course($course);",
          "2776:                     break;",
          "2777:                 }",
          "",
          "---------------"
        ],
        "lib/tests/behat/behat_navigation.php||lib/tests/behat/behat_navigation.php": [
          "File: lib/tests/behat/behat_navigation.php -> lib/tests/behat/behat_navigation.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: class behat_navigation extends behat_base {",
          "50:     public function i_expand_node($nodetext) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:     protected function get_node_text_node($text, $branch = false, $collapsed = null, $exception = null) {",
          "57:         if ($exception === null) {",
          "58:             $exception = new ExpectationException('The \"' . $text . '\" node could not be found', $this->getSession());",
          "59:         } else if (is_string($exception)) {",
          "60:             $exception = new ExpectationException($exception, $this->getSession());",
          "61:         }",
          "63:         $nodetextliteral = $this->getSession()->getSelectorsHandler()->xpathLiteral($text);",
          "64:         $hasblocktree = \"[contains(concat(' ', normalize-space(@class), ' '), ' block_tree ')]\";",
          "65:         $hasbranch = \"[contains(concat(' ', normalize-space(@class), ' '), ' branch ')]\";",
          "66:         $hascollapsed = \"li[contains(concat(' ', normalize-space(@class), ' '), ' collapsed ') or @data-exandable='1']\";",
          "67:         $notcollapsed = \"[not(contains(concat(' ', normalize-space(@class), ' '), ' collapsed '))]\";",
          "68:         $match = \"[normalize-space(.)={$nodetextliteral}]\";",
          "71:         $isbranch = ($branch) ? $hasbranch : '';",
          "72:         if ($collapsed === true) {",
          "73:             $iscollapsed = $hascollapsed;",
          "74:         } else if ($collapsed === false) {",
          "75:             $iscollapsed = $notcollapsed;",
          "76:         } else {",
          "77:             $iscollapsed = 'li';",
          "78:         }",
          "80:         $xpath  = \"//ul{$hasblocktree}//li{$notcollapsed}/ul/{$iscollapsed}/p{$isbranch}/a{$match}|\";",
          "81:         $xpath .= \"//ul{$hasblocktree}//li{$notcollapsed}/ul/{$iscollapsed}/p{$isbranch}/span{$match}\";",
          "83:         $node = $this->find('xpath', $xpath, $exception);",
          "84:         $this->ensure_node_is_visible($node);",
          "85:         return $node;",
          "86:     }",
          "97:     public function navigation_node_should_be_expandable($nodetext) {",
          "98:         if (!$this->running_javascript()) {",
          "100:             return false;",
          "101:         }",
          "103:         $node = $this->get_node_text_node($nodetext, true);",
          "104:         $node = $node->getParent();",
          "105:         if ($node->hasAttribute('data-expandable') && $node->getAttribute('data-expandable')) {",
          "106:             return true;",
          "107:         }",
          "108:         throw new ExpectationException('The \"' . $nodetext . '\" node is not expandable', $this->getSession());",
          "109:     }",
          "120:     public function navigation_node_should_not_be_expandable($nodetext) {",
          "121:         if (!$this->running_javascript()) {",
          "123:             return false;",
          "124:         }",
          "126:         $node = $this->get_node_text_node($nodetext);",
          "127:         $node = $node->getParent();",
          "128:         if ($node->hasAttribute('data-expandable') && $node->getAttribute('data-expandable')) {",
          "129:             throw new ExpectationException('The \"' . $nodetext . '\" node is expandable', $this->getSession());",
          "130:         }",
          "131:         return true;",
          "132:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:             return true;",
          "61:         }",
          "80:         $node->click();",
          "81:     }",
          "",
          "[Removed Lines]",
          "64:         $nodetextliteral = $this->getSession()->getSelectorsHandler()->xpathLiteral($nodetext);",
          "66:         $xpath = \"//ul[contains(concat(' ', normalize-space(@class), ' '), ' block_tree ')]\" .",
          "67:             \"/child::li[contains(concat(' ', normalize-space(@class), ' '), ' collapsed ')]\" .",
          "68:             \"/child::p[contains(concat(' ', normalize-space(@class), ' '), ' branch ')]\" .",
          "69:             \"/child::span[normalize-space(.)=$nodetextliteral]\" .",
          "70:             \"|\" .",
          "71:             \"//ul[contains(concat(' ', normalize-space(@class), ' '), ' block_tree ')]\" .",
          "72:             \"/descendant::li[not(contains(concat(' ', normalize-space(@class), ' '), ' collapsed '))]\" .",
          "73:             \"/descendant::li[contains(concat(' ', normalize-space(@class), ' '), ' collapsed ')]\" .",
          "74:             \"/child::p[contains(concat(' ', normalize-space(@class), ' '), ' branch ')]\" .",
          "75:             \"/child::span[normalize-space(.)=$nodetextliteral]\";",
          "77:         $exception = new ExpectationException('The \"' . $nodetext . '\" node can not be expanded', $this->getSession());",
          "78:         $node = $this->find('xpath', $xpath, $exception);",
          "79:         $this->ensure_node_is_visible($node);",
          "",
          "[Added Lines]",
          "155:         $node = $this->get_node_text_node($nodetext, true, true, 'The \"' . $nodetext . '\" node can not be expanded');",
          "157:         if (strtolower($node->getTagName()) === 'a') {",
          "159:             $node = $node->getParent();",
          "160:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:             return true;",
          "95:         }",
          "112:         $node->click();",
          "113:     }",
          "",
          "[Removed Lines]",
          "98:         $nodetextliteral = $this->getSession()->getSelectorsHandler()->xpathLiteral($nodetext);",
          "100:         $xpath = \"//ul[contains(concat(' ', normalize-space(@class), ' '), ' block_tree ')]\" .",
          "101:             \"/child::li[not(contains(concat(' ', normalize-space(@class), ' '), ' collapsed '))]\" .",
          "102:             \"/child::p[contains(concat(' ', normalize-space(@class), ' '), ' branch ')]\" .",
          "103:             \"/child::span[normalize-space(.)=$nodetextliteral]\" .",
          "104:             \"|\" .",
          "105:             \"//ul[contains(concat(' ', normalize-space(@class), ' '), ' block_tree ')]\" .",
          "106:             \"/descendant::li[not(contains(concat(' ', normalize-space(@class), ' '), ' collapsed '))]\" .",
          "107:             \"/child::p[contains(concat(' ', normalize-space(@class), ' '), ' branch ')]\" .",
          "108:             \"/child::span[normalize-space(.)=$nodetextliteral]\";",
          "110:         $exception = new ExpectationException('The \"' . $nodetext . '\" node can not be collapsed', $this->getSession());",
          "111:         $node = $this->find('xpath', $xpath, $exception);",
          "",
          "[Added Lines]",
          "179:         $node = $this->get_node_text_node($nodetext, true, false, 'The \"' . $nodetext . '\" node can not be collapsed');",
          "181:         if (strtolower($node->getTagName()) === 'a') {",
          "183:             $node = $node->getParent();",
          "184:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f495187da794ffc77b11d12da816f6357274af5b",
      "candidate_info": {
        "commit_hash": "f495187da794ffc77b11d12da816f6357274af5b",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f495187da794ffc77b11d12da816f6357274af5b",
        "files": [
          "admin/roles/check.php",
          "admin/roles/permissions.php",
          "blog/edit.php",
          "blog/index.php",
          "course/user.php",
          "grade/report/overview/index.php",
          "index.php",
          "lang/en/moodle.php",
          "lib/navigationlib.php",
          "lib/outputrenderers.php",
          "message/edit.php",
          "message/index.php",
          "mod/forum/user.php",
          "my/index.php",
          "notes/index.php",
          "theme/bootstrapbase/renderers/core_renderer.php",
          "user/editadvanced.php",
          "user/preferences.php",
          "user/profile.php"
        ],
        "message": "MDL-48935 navigation: Update the user nav breadcrumbs.\n\nPart of MDL-45774.",
        "before_after_code_files": [
          "admin/roles/check.php||admin/roles/check.php",
          "admin/roles/permissions.php||admin/roles/permissions.php",
          "blog/edit.php||blog/edit.php",
          "blog/index.php||blog/index.php",
          "course/user.php||course/user.php",
          "grade/report/overview/index.php||grade/report/overview/index.php",
          "index.php||index.php",
          "lang/en/moodle.php||lang/en/moodle.php",
          "lib/navigationlib.php||lib/navigationlib.php",
          "lib/outputrenderers.php||lib/outputrenderers.php",
          "message/edit.php||message/edit.php",
          "message/index.php||message/index.php",
          "mod/forum/user.php||mod/forum/user.php",
          "my/index.php||my/index.php",
          "theme/bootstrapbase/renderers/core_renderer.php||theme/bootstrapbase/renderers/core_renderer.php",
          "user/editadvanced.php||user/editadvanced.php",
          "user/preferences.php||user/preferences.php",
          "user/profile.php||user/profile.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/navigationlib.php||lib/navigationlib.php"
          ],
          "candidate": [
            "lib/navigationlib.php||lib/navigationlib.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/roles/check.php||admin/roles/check.php": [
          "File: admin/roles/check.php -> admin/roles/check.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: $PAGE->set_url($url);",
          "54: if ($context->contextlevel == CONTEXT_USER and $USER->id != $context->instanceid) {",
          "55:     $PAGE->navigation->extend_for_user($user);",
          "56:     $PAGE->set_context(context_course::instance($course->id));",
          "57: } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     $PAGE->navbar->includesettingsbase = true;",
          "",
          "---------------"
        ],
        "admin/roles/permissions.php||admin/roles/permissions.php": [
          "File: admin/roles/permissions.php -> admin/roles/permissions.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: $PAGE->set_url($url);",
          "61: if ($context->contextlevel == CONTEXT_USER and $USER->id != $context->instanceid) {",
          "62:     $PAGE->navigation->extend_for_user($user);",
          "63:     $PAGE->set_context(context_user::instance($user->id));",
          "64: } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     $PAGE->navbar->includesettingsbase = true;",
          "",
          "---------------"
        ],
        "blog/edit.php||blog/edit.php": [
          "File: blog/edit.php -> blog/edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: $sitecontext = context_system::instance();",
          "52: $usercontext = context_user::instance($USER->id);",
          "53: $PAGE->set_context($usercontext);",
          "55: require_login($courseid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: $blognode = $PAGE->settingsnav->find('blogadd', null);",
          "55: $blognode->make_active();",
          "",
          "---------------"
        ],
        "blog/index.php||blog/index.php": [
          "File: blog/index.php -> blog/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: $sitecontext = context_system::instance();",
          "70: if ($CFG->bloglevel == BLOG_GLOBAL_LEVEL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: if (isset($userid) && $USER->id == $userid) {",
          "70:     $blognode = $PAGE->navigation->find('siteblog', null);",
          "71:     $blognode->make_inactive();",
          "72: }",
          "",
          "---------------"
        ],
        "course/user.php||course/user.php": [
          "File: course/user.php -> course/user.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:             $coursenode = $PAGE->navigation->find($course->id, navigation_node::TYPE_COURSE);",
          "140:             $coursenode->collapse = true;",
          "141:             $coursenode->make_inactive();",
          "142:         }",
          "143:         echo $OUTPUT->header();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:             $url = new moodle_url('/course/user.php', array('id' => $id, 'user' => $user->id, 'mode' => $mode));",
          "143:             $reportnode = $PAGE->navbar->add(get_string('pluginname', 'gradereport_user'), $url);",
          "",
          "---------------"
        ],
        "grade/report/overview/index.php||grade/report/overview/index.php": [
          "File: grade/report/overview/index.php -> grade/report/overview/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: } else {",
          "62:     $PAGE->set_context($context);",
          "63: }",
          "65: $access = false;",
          "66: if (has_capability('moodle/grade:viewall', $systemcontext)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: $settings = $PAGE->settingsnav->find('mygrades', null);",
          "65: $settings->make_active();",
          "",
          "---------------"
        ],
        "index.php||index.php": [
          "File: index.php -> index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     } else if (!empty($CFG->defaulthomepage) && ($CFG->defaulthomepage == HOMEPAGE_MY) && $redirect === 1) {",
          "72:         redirect($CFG->wwwroot .'/my/');",
          "73:     } else if (!empty($CFG->defaulthomepage) && ($CFG->defaulthomepage == HOMEPAGE_USER)) {",
          "75:             get_string('makethismyhome'),",
          "76:             new moodle_url('/', array('setdefaulthome' => true)),",
          "77:             navigation_node::TYPE_SETTING);",
          "",
          "[Removed Lines]",
          "74:         $PAGE->settingsnav->get('usercurrentsettings')->add(",
          "",
          "[Added Lines]",
          "74:         $PAGE->settingsnav->find('usercurrentsettings', null)->add(",
          "",
          "---------------"
        ],
        "lang/en/moodle.php||lang/en/moodle.php": [
          "File: lang/en/moodle.php -> lang/en/moodle.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1908: $string['user'] = 'User';",
          "1909: $string['useraccount'] = 'User account';",
          "1910: $string['userconfirmed'] = 'Confirmed {$a}';",
          "1912: $string['useractivity'] = 'Activity';",
          "1913: $string['userdata'] = 'User data';",
          "1914: $string['userdeleted'] = 'This user account has been deleted';",
          "",
          "[Removed Lines]",
          "1911: $string['usercurrentsettings'] = 'Preferences';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1935: $string['usersnoaccesssince'] = 'Inactive for more than';",
          "1936: $string['userswithfiles'] = 'Users with files';",
          "1937: $string['useruploadtype'] = 'User upload type: {$a}';",
          "1939: $string['userzones'] = 'User zones';",
          "1940: $string['usetheme'] = 'Use theme';",
          "1941: $string['usingexistingcourse'] = 'Using existing course';",
          "",
          "[Removed Lines]",
          "1938: $string['userviewingsettings'] = '{$a}\\'s preferences';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/navigationlib.php||lib/navigationlib.php": [
          "File: lib/navigationlib.php -> lib/navigationlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2153:         }",
          "2190:         }",
          "2200:         }",
          "2220:             }",
          "2229:                     }",
          "2230:                 }",
          "2231:             }",
          "2243:             }",
          "2266:             }",
          "2278:             }",
          "2283:             }",
          "2319:                         }",
          "2320:                     }",
          "2346:             }",
          "2347:         }",
          "2348:         return true;",
          "2349:     }",
          "",
          "[Removed Lines]",
          "2156:         if ($iscurrentuser && !$forceforcontext) {",
          "2158:             $usernode = $this->rootnodes['myprofile'];",
          "2159:             $course = get_site();",
          "2160:             $coursecontext = context_course::instance($course->id);",
          "2161:             $issitecourse = true;",
          "2162:         } else {",
          "2163:             if (!$issitecourse) {",
          "2165:                 $usersnode = $coursenode->get('participants', navigation_node::TYPE_CONTAINER);",
          "2166:                 $userviewurl = new moodle_url('/user/view.php', $baseargs);",
          "2167:             } else {",
          "2169:                 $usersnode = $this->rootnodes['users'];",
          "2170:                 if (has_capability('moodle/course:viewparticipants', $coursecontext)) {",
          "2171:                     $usersnode->action = new moodle_url('/user/index.php', array('id'=>$course->id));",
          "2172:                 }",
          "2173:                 $userviewurl = new moodle_url('/user/profile.php', $baseargs);",
          "2174:             }",
          "2175:             if (!$usersnode) {",
          "2181:                 return false;",
          "2182:             }",
          "2184:             $canseefullname = has_capability('moodle/site:viewfullnames', $coursecontext);",
          "2185:             $usernode = $usersnode->add(fullname($user, $canseefullname), $userviewurl, self::TYPE_USER, null, $user->id);",
          "2187:             if ($this->page->context->contextlevel == CONTEXT_USER && $user->id == $this->page->context->instanceid) {",
          "2188:                 $usernode->make_active();",
          "2189:             }",
          "2194:         if ($iscurrentuser || has_capability('moodle/user:viewdetails', $coursecontext) || has_capability('moodle/user:viewdetails', $usercontext)) {",
          "2195:             if ($issitecourse || ($iscurrentuser && !$forceforcontext)) {",
          "2196:                 $usernode->add(get_string('viewprofile'), new moodle_url('/user/profile.php',$baseargs));",
          "2197:             } else {",
          "2198:                 $usernode->add(get_string('viewprofile'), new moodle_url('/user/view.php',$baseargs));",
          "2199:             }",
          "2202:         if (!empty($CFG->navadduserpostslinks)) {",
          "2206:             $forumtab = $usernode->add(get_string('forumposts', 'forum'));",
          "2207:             $forumtab->add(get_string('posts', 'forum'), new moodle_url('/mod/forum/user.php', $baseargs));",
          "2208:             $forumtab->add(get_string('discussions', 'forum'), new moodle_url('/mod/forum/user.php', array_merge($baseargs, array('mode'=>'discussions'))));",
          "2209:         }",
          "2212:         if (!empty($CFG->enableblogs)) {",
          "2213:             if (!$this->cache->cached('userblogoptions'.$user->id)) {",
          "2214:                 require_once($CFG->dirroot.'/blog/lib.php');",
          "2216:                 $options = blog_get_options_for_user($user);",
          "2217:                 $this->cache->set('userblogoptions'.$user->id, $options);",
          "2218:             } else {",
          "2219:                 $options = $this->cache->{'userblogoptions'.$user->id};",
          "2222:             if (count($options) > 0) {",
          "2223:                 $blogs = $usernode->add(get_string('blogs', 'blog'), null, navigation_node::TYPE_CONTAINER);",
          "2224:                 foreach ($options as $type => $option) {",
          "2225:                     if ($type == \"rss\") {",
          "2226:                         $blogs->add($option['string'], $option['link'], settings_navigation::TYPE_SETTING, null, null, new pix_icon('i/rss', ''));",
          "2227:                     } else {",
          "2228:                         $blogs->add($option['string'], $option['link']);",
          "2232:         }",
          "2236:         if (!empty($CFG->messaging)) {",
          "2237:             $messageargs = array('user1' => $USER->id);",
          "2238:             if ($USER->id != $user->id) {",
          "2239:                 $messageargs['user2'] = $user->id;",
          "2240:             }",
          "2241:             if ($course->id != $SITE->id) {",
          "2242:                 $messageargs['viewing'] = MESSAGE_VIEW_COURSE. $course->id;",
          "2244:             $url = new moodle_url('/message/index.php',$messageargs);",
          "2245:             $usernode->add(get_string('messages', 'message'), $url, self::TYPE_SETTING, null, 'messages');",
          "2246:         }",
          "2250:         if ($issitecourse && $iscurrentuser && has_capability('moodle/user:manageownfiles', $usercontext)) {",
          "2251:             $url = new moodle_url('/user/files.php');",
          "2252:             $usernode->add(get_string('myfiles'), $url, self::TYPE_SETTING);",
          "2253:         }",
          "2255:         if (!empty($CFG->enablebadges) && $iscurrentuser &&",
          "2256:                 has_capability('moodle/badges:manageownbadges', $usercontext)) {",
          "2257:             $url = new moodle_url('/badges/mybadges.php');",
          "2258:             $usernode->add(get_string('mybadges', 'badges'), $url, self::TYPE_SETTING);",
          "2259:         }",
          "2262:         if (!empty($CFG->enablenotes) && has_any_capability(array('moodle/notes:manage', 'moodle/notes:view'), $coursecontext)) {",
          "2263:             $url = new moodle_url('/notes/index.php',array('user'=>$user->id));",
          "2264:             if ($coursecontext->instanceid != SITEID) {",
          "2265:                 $url->param('course', $coursecontext->instanceid);",
          "2267:             $usernode->add(get_string('notes', 'notes'), $url);",
          "2268:         }",
          "2271:         if (($issitecourse && $iscurrentuser) || has_capability('moodle/user:viewdetails', $usercontext)) {",
          "2272:             require_once($CFG->dirroot . '/user/lib.php');",
          "2274:             if ($course->id == SITEID) {",
          "2275:                 $url = user_mygrades_url($user->id, $course->id);",
          "2276:             } else { // Otherwise we are in a course and should redirect to the user grade report (Activity report version).",
          "2277:                 $url = new moodle_url('/course/user.php', array('mode' => 'grade', 'id' => $course->id, 'user' => $user->id));",
          "2279:             if ($USER->id != $user->id) {",
          "2280:                 $usernode->add(get_string('grades', 'grades'), $url);",
          "2281:             } else {",
          "2282:                 $usernode->add(get_string('mygrades', 'grades'), $url);",
          "2284:         }",
          "2287:         $hiddenfields = array_flip(explode(',', $CFG->hiddenuserfields));",
          "2288:         if (!$iscurrentuser &&",
          "2289:                 $course->id == $SITE->id &&",
          "2290:                 has_capability('moodle/user:viewdetails', $usercontext) &&",
          "2291:                 (!in_array('mycourses', $hiddenfields) || has_capability('moodle/user:viewhiddendetails', $coursecontext))) {",
          "2294:             $reports = core_component::get_plugin_list('gradereport');",
          "2295:             arsort($reports); // user is last, we want to test it first",
          "2297:             $userscourses = enrol_get_users_courses($user->id);",
          "2298:             $userscoursesnode = $usernode->add(get_string('courses'));",
          "2300:             $count = 0;",
          "2301:             foreach ($userscourses as $usercourse) {",
          "2302:                 if ($count === (int)$CFG->navcourselimit) {",
          "2303:                     $url = new moodle_url('/user/profile.php', array('id' => $user->id, 'showallcourses' => 1));",
          "2304:                     $userscoursesnode->add(get_string('showallcourses'), $url);",
          "2305:                     break;",
          "2306:                 }",
          "2307:                 $count++;",
          "2308:                 $usercoursecontext = context_course::instance($usercourse->id);",
          "2309:                 $usercourseshortname = format_string($usercourse->shortname, true, array('context' => $usercoursecontext));",
          "2310:                 $usercoursenode = $userscoursesnode->add($usercourseshortname, new moodle_url('/user/view.php', array('id'=>$user->id, 'course'=>$usercourse->id)), self::TYPE_CONTAINER);",
          "2312:                 $gradeavailable = has_capability('moodle/grade:viewall', $usercoursecontext);",
          "2313:                 if (!$gradeavailable && !empty($usercourse->showgrades) && is_array($reports) && !empty($reports)) {",
          "2314:                     foreach ($reports as $plugin => $plugindir) {",
          "2315:                         if (has_capability('gradereport/'.$plugin.':view', $usercoursecontext)) {",
          "2317:                             $gradeavailable = true;",
          "2318:                             break;",
          "2321:                 }",
          "2323:                 if ($gradeavailable) {",
          "2324:                     $url = new moodle_url('/grade/report/index.php', array('id'=>$usercourse->id));",
          "2325:                     $usercoursenode->add(get_string('grades'), $url, self::TYPE_SETTING, null, null, new pix_icon('i/grades', ''));",
          "2326:                 }",
          "2329:                 if (!empty($CFG->enablenotes) && has_any_capability(array('moodle/notes:manage', 'moodle/notes:view'), $usercoursecontext)) {",
          "2330:                     $url = new moodle_url('/notes/index.php',array('user'=>$user->id, 'course'=>$usercourse->id));",
          "2331:                     $usercoursenode->add(get_string('notes', 'notes'), $url, self::TYPE_SETTING);",
          "2332:                 }",
          "2334:                 if (can_access_course($usercourse, $user->id)) {",
          "2335:                     $usercoursenode->add(get_string('entercourse'), new moodle_url('/course/view.php', array('id'=>$usercourse->id)), self::TYPE_SETTING, null, null, new pix_icon('i/course', ''));",
          "2336:                 }",
          "2338:                 $reporttab = $usercoursenode->add(get_string('activityreports'));",
          "2340:                 $reports = get_plugin_list_with_function('report', 'extend_navigation_user', 'lib.php');",
          "2341:                 foreach ($reports as $reportfunction) {",
          "2342:                     $reportfunction($reporttab, $user, $usercourse);",
          "2343:                 }",
          "2345:                 $reporttab->trim_if_empty();",
          "",
          "[Added Lines]",
          "2156:         $usersnode = null;",
          "2157:         if (!$issitecourse) {",
          "2159:             $usersnode = $coursenode->get('participants', navigation_node::TYPE_CONTAINER);",
          "2160:             $userviewurl = new moodle_url('/user/view.php', $baseargs);",
          "2161:         } else if ($USER->id != $user->id) {",
          "2163:             $usersnode = $this->rootnodes['users'];",
          "2164:             if (has_capability('moodle/course:viewparticipants', $coursecontext)) {",
          "2165:                 $usersnode->action = new moodle_url('/user/index.php', array('id'=>$course->id));",
          "2166:             }",
          "2167:             $userviewurl = new moodle_url('/user/profile.php', $baseargs);",
          "2168:         }",
          "2169:         if (!$usersnode) {",
          "2175:             return false;",
          "2178:         $canseefullname = has_capability('moodle/site:viewfullnames', $coursecontext);",
          "2179:         $usernode = $usersnode->add(fullname($user, $canseefullname), $userviewurl, self::TYPE_USER, null, 'user' . $user->id);",
          "2180:         if ($this->page->context->contextlevel == CONTEXT_USER && $user->id == $this->page->context->instanceid) {",
          "2181:             $usernode->make_active();",
          "2185:         if ($issitecourse) {",
          "2189:             if ($iscurrentuser || has_capability('moodle/user:viewdetails', $coursecontext) ||",
          "2190:                     has_capability('moodle/user:viewdetails', $usercontext)) {",
          "2191:                 if ($issitecourse || ($iscurrentuser && !$forceforcontext)) {",
          "2192:                     $usernode->add(get_string('viewprofile'), new moodle_url('/user/profile.php',$baseargs));",
          "2193:                 } else {",
          "2194:                     $usernode->add(get_string('viewprofile'), new moodle_url('/user/view.php',$baseargs));",
          "2195:                 }",
          "2198:             if (!empty($CFG->navadduserpostslinks)) {",
          "2202:                 $forumtab = $usernode->add(get_string('forumposts', 'forum'));",
          "2203:                 $forumtab->add(get_string('posts', 'forum'), new moodle_url('/mod/forum/user.php', $baseargs));",
          "2204:                 $forumtab->add(get_string('discussions', 'forum'), new moodle_url('/mod/forum/user.php',",
          "2205:                         array_merge($baseargs, array('mode'=>'discussions'))));",
          "2206:             }",
          "2209:             if (!empty($CFG->enableblogs)) {",
          "2210:                 if (!$this->cache->cached('userblogoptions'.$user->id)) {",
          "2211:                     require_once($CFG->dirroot.'/blog/lib.php');",
          "2213:                     $options = blog_get_options_for_user($user);",
          "2214:                     $this->cache->set('userblogoptions'.$user->id, $options);",
          "2215:                 } else {",
          "2216:                     $options = $this->cache->{'userblogoptions'.$user->id};",
          "2217:                 }",
          "2219:                 if (count($options) > 0) {",
          "2220:                     $blogs = $usernode->add(get_string('blogs', 'blog'), null, navigation_node::TYPE_CONTAINER);",
          "2221:                     foreach ($options as $type => $option) {",
          "2222:                         if ($type == \"rss\") {",
          "2223:                             $blogs->add($option['string'], $option['link'], settings_navigation::TYPE_SETTING, null, null,",
          "2224:                                     new pix_icon('i/rss', ''));",
          "2225:                         } else {",
          "2226:                             $blogs->add($option['string'], $option['link']);",
          "2227:                         }",
          "2234:             if (!empty($CFG->messaging)) {",
          "2235:                 $messageargs = array('user1' => $USER->id);",
          "2236:                 if ($USER->id != $user->id) {",
          "2237:                     $messageargs['user2'] = $user->id;",
          "2238:                 }",
          "2239:                 if ($course->id != $SITE->id) {",
          "2240:                     $messageargs['viewing'] = MESSAGE_VIEW_COURSE. $course->id;",
          "2241:                 }",
          "2242:                 $url = new moodle_url('/message/index.php',$messageargs);",
          "2243:                 $usernode->add(get_string('messages', 'message'), $url, self::TYPE_SETTING, null, 'messages');",
          "2248:             if ($issitecourse && $iscurrentuser && has_capability('moodle/user:manageownfiles', $usercontext)) {",
          "2249:                 $url = new moodle_url('/user/files.php');",
          "2250:                 $usernode->add(get_string('myfiles'), $url, self::TYPE_SETTING);",
          "2251:             }",
          "2253:             if (!empty($CFG->enablebadges) && $iscurrentuser &&",
          "2254:                     has_capability('moodle/badges:manageownbadges', $usercontext)) {",
          "2255:                 $url = new moodle_url('/badges/mybadges.php');",
          "2256:                 $usernode->add(get_string('mybadges', 'badges'), $url, self::TYPE_SETTING);",
          "2260:             if (!empty($CFG->enablenotes) &&",
          "2261:                     has_any_capability(array('moodle/notes:manage', 'moodle/notes:view'), $coursecontext)) {",
          "2262:                 $url = new moodle_url('/notes/index.php',array('user'=>$user->id));",
          "2263:                 if ($coursecontext->instanceid != SITEID) {",
          "2264:                     $url->param('course', $coursecontext->instanceid);",
          "2265:                 }",
          "2266:                 $usernode->add(get_string('notes', 'notes'), $url);",
          "2270:             if (($issitecourse && $iscurrentuser) || has_capability('moodle/user:viewdetails', $usercontext)) {",
          "2271:                 require_once($CFG->dirroot . '/user/lib.php');",
          "2273:                 if ($course->id == SITEID) {",
          "2274:                     $url = user_mygrades_url($user->id, $course->id);",
          "2275:                 } else { // Otherwise we are in a course and should redirect to the user grade report (Activity report version).",
          "2276:                     $url = new moodle_url('/course/user.php', array('mode' => 'grade', 'id' => $course->id, 'user' => $user->id));",
          "2277:                 }",
          "2278:                 if ($USER->id != $user->id) {",
          "2279:                     $usernode->add(get_string('grades', 'grades'), $url);",
          "2280:                 } else {",
          "2281:                     $usernode->add(get_string('mygrades', 'grades'), $url);",
          "2282:                 }",
          "2286:             $hiddenfields = array_flip(explode(',', $CFG->hiddenuserfields));",
          "2287:             if (!$iscurrentuser &&",
          "2288:                     $course->id == $SITE->id &&",
          "2289:                     has_capability('moodle/user:viewdetails', $usercontext) &&",
          "2290:                     (!in_array('mycourses', $hiddenfields) || has_capability('moodle/user:viewhiddendetails', $coursecontext))) {",
          "2293:                 $reports = core_component::get_plugin_list('gradereport');",
          "2294:                 arsort($reports); // user is last, we want to test it first.",
          "2296:                 $userscourses = enrol_get_users_courses($user->id);",
          "2297:                 $userscoursesnode = $usernode->add(get_string('courses'));",
          "2299:                 $count = 0;",
          "2300:                 foreach ($userscourses as $usercourse) {",
          "2301:                     if ($count === (int)$CFG->navcourselimit) {",
          "2302:                         $url = new moodle_url('/user/profile.php', array('id' => $user->id, 'showallcourses' => 1));",
          "2303:                         $userscoursesnode->add(get_string('showallcourses'), $url);",
          "2304:                         break;",
          "2305:                     }",
          "2306:                     $count++;",
          "2307:                     $usercoursecontext = context_course::instance($usercourse->id);",
          "2308:                     $usercourseshortname = format_string($usercourse->shortname, true, array('context' => $usercoursecontext));",
          "2309:                     $usercoursenode = $userscoursesnode->add($usercourseshortname, new moodle_url('/user/view.php',",
          "2310:                             array('id'=>$user->id, 'course'=>$usercourse->id)), self::TYPE_CONTAINER);",
          "2312:                     $gradeavailable = has_capability('moodle/grade:viewall', $usercoursecontext);",
          "2313:                     if (!$gradeavailable && !empty($usercourse->showgrades) && is_array($reports) && !empty($reports)) {",
          "2314:                         foreach ($reports as $plugin => $plugindir) {",
          "2315:                             if (has_capability('gradereport/'.$plugin.':view', $usercoursecontext)) {",
          "2317:                                 $gradeavailable = true;",
          "2318:                                 break;",
          "2319:                             }",
          "2323:                     if ($gradeavailable) {",
          "2324:                         $url = new moodle_url('/grade/report/index.php', array('id'=>$usercourse->id));",
          "2325:                         $usercoursenode->add(get_string('grades'), $url, self::TYPE_SETTING, null, null,",
          "2326:                                 new pix_icon('i/grades', ''));",
          "2327:                     }",
          "2330:                     if (!empty($CFG->enablenotes) &&",
          "2331:                             has_any_capability(array('moodle/notes:manage', 'moodle/notes:view'), $usercoursecontext)) {",
          "2332:                         $url = new moodle_url('/notes/index.php',array('user'=>$user->id, 'course'=>$usercourse->id));",
          "2333:                         $usercoursenode->add(get_string('notes', 'notes'), $url, self::TYPE_SETTING);",
          "2334:                     }",
          "2336:                     if (can_access_course($usercourse, $user->id)) {",
          "2337:                         $usercoursenode->add(get_string('entercourse'), new moodle_url('/course/view.php',",
          "2338:                                 array('id'=>$usercourse->id)), self::TYPE_SETTING, null, null, new pix_icon('i/course', ''));",
          "2339:                     }",
          "2341:                     $reporttab = $usercoursenode->add(get_string('activityreports'));",
          "2343:                     $reports = get_plugin_list_with_function('report', 'extend_navigation_user', 'lib.php');",
          "2344:                     foreach ($reports as $reportfunction) {",
          "2345:                         $reportfunction($reporttab, $user, $usercourse);",
          "2346:                     }",
          "2348:                     $reporttab->trim_if_empty();",
          "2349:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2618:           and ($CFG->bloglevel == BLOG_GLOBAL_LEVEL or ($CFG->bloglevel == BLOG_SITE_LEVEL and (isloggedin() and !isguestuser())))",
          "2619:           and has_capability('moodle/blog:view', context_system::instance())) {",
          "2620:             $blogsurls = new moodle_url('/blog/index.php', array('courseid' => $filterselect));",
          "2622:         }",
          "",
          "[Removed Lines]",
          "2621:             $coursenode->add(get_string('blogssite','blog'), $blogsurls->out());",
          "",
          "[Added Lines]",
          "2626:             $coursenode->add(get_string('blogssite','blog'), $blogsurls->out(), self::TYPE_SYSTEM, null, 'siteblog');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2631:         if (!empty($CFG->enablenotes) && (has_capability('moodle/notes:manage', $this->page->context) || has_capability('moodle/notes:view', $this->page->context))) {",
          "2633:         }",
          "",
          "[Removed Lines]",
          "2632:             $coursenode->add(get_string('notes','notes'), new moodle_url('/notes/index.php', array('filtertype'=>'course', 'filterselect'=>$filterselect)));",
          "",
          "[Added Lines]",
          "2637:             $coursenode->add(get_string('notes','notes'), new moodle_url('/notes/index.php',",
          "2638:                 array('filtertype'=>'course', 'filterselect'=>$filterselect)), self::TYPE_SETTING, null, 'notes');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3269:             }",
          "3270:         }",
          "3275:             $courses = $this->page->navigation->get('courses');",
          "3276:         }",
          "3286:         return $categories;",
          "3287:     }",
          "",
          "[Removed Lines]",
          "3272:         if (is_enrolled(context_course::instance($this->page->course->id))) {",
          "3273:             $courses = $this->page->navigation->get('mycourses');",
          "3274:         } else {",
          "3277:         if (!$courses) {",
          "3279:             $courses = navigation_node::create(",
          "3280:                 get_string('courses'),",
          "3281:                 new moodle_url('/course/index.php'),",
          "3282:                 self::TYPE_CONTAINER",
          "3283:             );",
          "3284:         }",
          "3285:         $categories[] = $courses;",
          "",
          "[Added Lines]",
          "3279:         if (!is_enrolled(context_course::instance($this->page->course->id))) {",
          "3281:             if (!$courses) {",
          "3283:                 $courses = navigation_node::create(",
          "3284:                     get_string('courses'),",
          "3285:                     new moodle_url('/course/index.php'),",
          "3286:                     self::TYPE_CONTAINER",
          "3287:                 );",
          "3288:             }",
          "3289:             $categories[] = $courses;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4183:             $prefurl->param('userid', $userid);",
          "4184:         }",
          "4192:         }",
          "4195:         if ($user->deleted) {",
          "4196:             if (!has_capability('moodle/user:update', $coursecontext)) {",
          "4198:                 $usersetting->add(get_string('userdeleted'), null, self::TYPE_SETTING);",
          "4199:             } else {",
          "4201:                 if ($course->id == $SITE->id) {",
          "4202:                     $profileurl = new moodle_url('/user/profile.php', array('id'=>$user->id));",
          "4203:                 } else {",
          "",
          "[Removed Lines]",
          "4187:         $usersetting = $this->add(get_string($gstitle, 'moodle', $fullname), $prefurl, self::TYPE_CONTAINER, null, $key);",
          "4188:         $usersetting->id = 'usersettings';",
          "4189:         if ($this->page->context->contextlevel == CONTEXT_USER && $this->page->context->instanceid == $user->id) {",
          "4191:             $usersetting->make_active();",
          "",
          "[Added Lines]",
          "4193:         if ($gstitle == 'usercurrentsettings') {",
          "4194:             $dashboard = $this->add('Dashboard', new moodle_url('/my/'), self::TYPE_CONTAINER, null, 'dashboard');",
          "4197:             $dashboard->display = false;",
          "4199:             $iscurrentuser = ($user->id == $USER->id);",
          "4201:             $baseargs = array('id'=>$user->id);",
          "4202:             if ($course->id != $SITE->id && !$iscurrentuser) {",
          "4203:                 $baseargs['course'] = $course->id;",
          "4204:                 $issitecourse = false;",
          "4205:             } else {",
          "4207:                 $issitecourse = true;",
          "4208:             }",
          "4211:             $profilenode = $dashboard->add(get_string('myprofile'), new moodle_url('/user/profile.php',",
          "4212:                     array('id' => $user->id)), null, 'myprofile');",
          "4214:             if (!empty($CFG->navadduserpostslinks)) {",
          "4218:                 $forumtab = $dashboard->add(get_string('forumposts', 'forum'));",
          "4219:                 $forumtab->add(get_string('posts', 'forum'), new moodle_url('/mod/forum/user.php', $baseargs), null, 'myposts');",
          "4220:                 $forumtab->add(get_string('discussions', 'forum'), new moodle_url('/mod/forum/user.php',",
          "4221:                         array_merge($baseargs, array('mode'=>'discussions'))), null, 'mydiscussions');",
          "4222:             }",
          "4225:             if (!empty($CFG->enableblogs)) {",
          "4226:                 if (!$this->cache->cached('userblogoptions'.$user->id)) {",
          "4227:                     require_once($CFG->dirroot.'/blog/lib.php');",
          "4229:                     $options = blog_get_options_for_user($user);",
          "4230:                     $this->cache->set('userblogoptions'.$user->id, $options);",
          "4231:                 } else {",
          "4232:                     $options = $this->cache->{'userblogoptions'.$user->id};",
          "4233:                 }",
          "4235:                 if (count($options) > 0) {",
          "4236:                     $blogs = $dashboard->add(get_string('blogs', 'blog'), null, navigation_node::TYPE_CONTAINER);",
          "4237:                     foreach ($options as $type => $option) {",
          "4238:                         if ($type == \"rss\") {",
          "4239:                             $blogs->add($option['string'], $option['link'], settings_navigation::TYPE_SETTING, null, null,",
          "4240:                                     new pix_icon('i/rss', ''));",
          "4241:                         } else {",
          "4242:                             $blogs->add($option['string'], $option['link'], self::TYPE_SETTING, null, 'blog' . $type);",
          "4243:                         }",
          "4244:                     }",
          "4245:                 }",
          "4246:             }",
          "4250:             if (!empty($CFG->messaging)) {",
          "4251:                 $messageargs = array('user1' => $USER->id);",
          "4252:                 if ($USER->id != $user->id) {",
          "4253:                     $messageargs['user2'] = $user->id;",
          "4254:                 }",
          "4255:                 if ($course->id != $SITE->id) {",
          "4256:                     $messageargs['viewing'] = MESSAGE_VIEW_COURSE. $course->id;",
          "4257:                 }",
          "4258:                 $url = new moodle_url('/message/index.php',$messageargs);",
          "4259:                 $dashboard->add(get_string('messages', 'message'), $url, self::TYPE_SETTING, null, 'messages');",
          "4260:             }",
          "4264:             if ($issitecourse && $iscurrentuser && has_capability('moodle/user:manageownfiles', $usercontext)) {",
          "4265:                 $url = new moodle_url('/user/files.php');",
          "4266:                 $dashboard->add(get_string('myfiles'), $url, self::TYPE_SETTING);",
          "4267:             }",
          "4269:             if (!empty($CFG->enablebadges) && $iscurrentuser &&",
          "4270:                     has_capability('moodle/badges:manageownbadges', $usercontext)) {",
          "4271:                 $url = new moodle_url('/badges/mybadges.php');",
          "4272:                 $dashboard->add(get_string('mybadges', 'badges'), $url, self::TYPE_SETTING);",
          "4273:             }",
          "4276:             if (!empty($CFG->enablenotes) &&",
          "4277:                     has_any_capability(array('moodle/notes:manage', 'moodle/notes:view'), $coursecontext)) {",
          "4278:                 $url = new moodle_url('/notes/index.php',array('user'=>$user->id));",
          "4279:                 if ($coursecontext->instanceid != SITEID) {",
          "4280:                     $url->param('course', $coursecontext->instanceid);",
          "4281:                 }",
          "4282:                 $dashboard->add(get_string('notes', 'notes'), $url);",
          "4283:             }",
          "4286:             if (($issitecourse && $iscurrentuser) || has_capability('moodle/user:viewdetails', $usercontext)) {",
          "4287:                 require_once($CFG->dirroot . '/user/lib.php');",
          "4289:                 if ($course->id == SITEID) {",
          "4290:                     $url = user_mygrades_url($user->id, $course->id);",
          "4291:                 } else { // Otherwise we are in a course and should redirect to the user grade report (Activity report version).",
          "4292:                     $url = new moodle_url('/course/user.php', array('mode' => 'grade', 'id' => $course->id, 'user' => $user->id));",
          "4293:                 }",
          "4294:                 if ($USER->id != $user->id) {",
          "4295:                     $dashboard->add(get_string('grades', 'grades'), $url, self::TYPE_SETTING, null, 'mygrades');",
          "4296:                 } else {",
          "4297:                     $dashboard->add(get_string('mygrades', 'grades'), $url, self::TYPE_SETTING, null, 'mygrades');",
          "4298:                 }",
          "4299:             }",
          "4300:             $usersetting = navigation_node::create(get_string('preferences', 'moodle'), $prefurl, self::TYPE_CONTAINER, null, $key);",
          "4301:             $dashboard->add_node($usersetting);",
          "4302:         } else {",
          "4303:             $usersetting = $this->add(get_string('preferences', 'moodle'), $prefurl, self::TYPE_CONTAINER, null, $key);",
          "4305:             $usersetting->display = true;",
          "4307:         $usersetting->id = 'usersettings';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4216:         $useraccount = $usersetting->add(get_string('useraccount'), null, self::TYPE_CONTAINER, null, 'useraccount');",
          "4219:         if (isloggedin() && !isguestuser($user) && !is_mnet_remote_user($user)) {",
          "4221:                 $url = new moodle_url('/user/editadvanced.php', array('id'=>$user->id, 'course'=>$course->id));",
          "4222:                 $useraccount->add(get_string('editmyprofile'), $url, self::TYPE_SETTING);",
          "4224:                 if ($userauthplugin && $userauthplugin->can_edit_profile()) {",
          "4225:                     $url = $userauthplugin->edit_profile_url();",
          "4226:                     if (empty($url)) {",
          "",
          "[Removed Lines]",
          "4220:             if (($currentuser || is_siteadmin($USER) || !is_siteadmin($user)) && has_capability('moodle/user:update', $systemcontext)) {",
          "4223:             } else if ((has_capability('moodle/user:editprofile', $usercontext) && !is_siteadmin($user)) || ($currentuser && has_capability('moodle/user:editownprofile', $systemcontext))) {",
          "",
          "[Added Lines]",
          "4335:             if (($currentuser || is_siteadmin($USER) || !is_siteadmin($user)) &&",
          "4336:                     has_capability('moodle/user:update', $systemcontext)) {",
          "4339:             } else if ((has_capability('moodle/user:editprofile', $usercontext) && !is_siteadmin($user)) ||",
          "4340:                     ($currentuser && has_capability('moodle/user:editownprofile', $systemcontext))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4231:             }",
          "4232:         }",
          "4236:             $passwordchangeurl = $userauthplugin->change_password_url();",
          "4237:             if (empty($passwordchangeurl)) {",
          "4238:                 $passwordchangeurl = new moodle_url('/login/change_password.php', array('id'=>$course->id));",
          "",
          "[Removed Lines]",
          "4235:         if ($userauthplugin && $currentuser && !\\core\\session\\manager::is_loggedinas() && !isguestuser() && has_capability('moodle/user:changeownpassword', $systemcontext) && $userauthplugin->can_change_password()) {",
          "",
          "[Added Lines]",
          "4352:         if ($userauthplugin && $currentuser && !\\core\\session\\manager::is_loggedinas() && !isguestuser() &&",
          "4353:                 has_capability('moodle/user:changeownpassword', $systemcontext) && $userauthplugin->can_change_password()) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4240:             $useraccount->add(get_string(\"changepassword\"), $passwordchangeurl, self::TYPE_SETTING, null, 'changepassword');",
          "4241:         }",
          "4245:             $roles = $usersetting->add(get_string('roles'), null, self::TYPE_SETTING);",
          "4247:             $url = new moodle_url('/admin/roles/usersroles.php', array('userid'=>$user->id, 'courseid'=>$course->id));",
          "",
          "[Removed Lines]",
          "4244:         if (has_any_capability(array('moodle/role:assign', 'moodle/role:safeoverride','moodle/role:override', 'moodle/role:manage'), $usercontext)) {",
          "",
          "[Added Lines]",
          "4362:         if (has_any_capability(array('moodle/role:assign', 'moodle/role:safeoverride','moodle/role:override', 'moodle/role:manage'),",
          "4363:                 $usercontext)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4250:             $assignableroles = get_assignable_roles($usercontext, ROLENAME_BOTH);",
          "4252:             if (!empty($assignableroles)) {",
          "4254:                 $roles->add(get_string('assignrolesrelativetothisuser', 'role'), $url, self::TYPE_SETTING);",
          "4255:             }",
          "4257:             if (has_capability('moodle/role:review', $usercontext) || count(get_overridable_roles($usercontext, ROLENAME_BOTH))>0) {",
          "4259:                 $roles->add(get_string('permissions', 'role'), $url, self::TYPE_SETTING);",
          "4260:             }",
          "4263:             $roles->add(get_string('checkpermissions', 'role'), $url, self::TYPE_SETTING);",
          "4264:         }",
          "",
          "[Removed Lines]",
          "4253:                 $url = new moodle_url('/admin/roles/assign.php', array('contextid'=>$usercontext->id,'userid'=>$user->id, 'courseid'=>$course->id));",
          "4258:                 $url = new moodle_url('/admin/roles/permissions.php', array('contextid'=>$usercontext->id,'userid'=>$user->id, 'courseid'=>$course->id));",
          "4262:             $url = new moodle_url('/admin/roles/check.php', array('contextid'=>$usercontext->id,'userid'=>$user->id, 'courseid'=>$course->id));",
          "",
          "[Added Lines]",
          "4372:                 $url = new moodle_url('/admin/roles/assign.php',",
          "4373:                         array('contextid'=>$usercontext->id,'userid'=>$user->id, 'courseid'=>$course->id));",
          "4378:                 $url = new moodle_url('/admin/roles/permissions.php',",
          "4379:                         array('contextid'=>$usercontext->id,'userid'=>$user->id, 'courseid'=>$course->id));",
          "4383:             $url = new moodle_url('/admin/roles/check.php',",
          "4384:                     array('contextid'=>$usercontext->id,'userid'=>$user->id, 'courseid'=>$course->id));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4301:              && has_capability('moodle/webservice:createtoken', context_system::instance()) ) {",
          "4302:             $enablemanagetokens = true;",
          "4303:         }",
          "4305:         if ($currentuser && $enablemanagetokens) {",
          "4306:             $url = new moodle_url('/user/managetoken.php', array('sesskey'=>sesskey()));",
          "4307:             $useraccount->add(get_string('securitykeys', 'webservice'), $url, self::TYPE_SETTING);",
          "4308:         }",
          "4312:             $url = new moodle_url('/message/edit.php', array('id'=>$user->id));",
          "4313:             $useraccount->add(get_string('messaging', 'message'), $url, self::TYPE_SETTING);",
          "4314:         }",
          "4317:         if ($currentuser && !empty($CFG->enableblogs)) {",
          "4318:             $blog = $usersetting->add(get_string('blogs', 'blog'), null, navigation_node::TYPE_CONTAINER, null, 'blogs');",
          "4319:             $blog->add(get_string('preferences', 'blog'), new moodle_url('/blog/preferences.php'), navigation_node::TYPE_SETTING);",
          "4323:             }",
          "4324:         }",
          "",
          "[Removed Lines]",
          "4311:         if (($currentuser && has_capability('moodle/user:editownmessageprofile', $systemcontext)) || (!isguestuser($user) && has_capability('moodle/user:editmessageprofile', $usercontext) && !is_primary_admin($user->id))) {",
          "4320:             if (!empty($CFG->useexternalblogs) && $CFG->maxexternalblogsperuser > 0 && has_capability('moodle/blog:manageexternal', context_system::instance())) {",
          "4321:                 $blog->add(get_string('externalblogs', 'blog'), new moodle_url('/blog/external_blogs.php'), navigation_node::TYPE_SETTING);",
          "4322:                 $blog->add(get_string('addnewexternalblog', 'blog'), new moodle_url('/blog/external_blog_edit.php'), navigation_node::TYPE_SETTING);",
          "",
          "[Added Lines]",
          "4433:         if (($currentuser && has_capability('moodle/user:editownmessageprofile', $systemcontext)) || (!isguestuser($user) &&",
          "4434:                 has_capability('moodle/user:editmessageprofile', $usercontext) && !is_primary_admin($user->id))) {",
          "4443:             if (!empty($CFG->useexternalblogs) && $CFG->maxexternalblogsperuser > 0 &&",
          "4444:                     has_capability('moodle/blog:manageexternal', context_system::instance())) {",
          "4445:                 $blog->add(get_string('externalblogs', 'blog'), new moodle_url('/blog/external_blogs.php'),",
          "4446:                         navigation_node::TYPE_SETTING);",
          "4447:                 $blog->add(get_string('addnewexternalblog', 'blog'), new moodle_url('/blog/external_blog_edit.php'),",
          "4448:                         navigation_node::TYPE_SETTING);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4328:             $badges = $usersetting->add(get_string('badges'), null, navigation_node::TYPE_CONTAINER, null, 'badges');",
          "4329:             $badges->add(get_string('preferences'), new moodle_url('/badges/preferences.php'), navigation_node::TYPE_SETTING);",
          "4330:             if (!empty($CFG->badges_allowexternalbackpack)) {",
          "4332:             }",
          "4333:         }",
          "",
          "[Removed Lines]",
          "4331:                 $badges->add(get_string('backpackdetails', 'badges'), new moodle_url('/badges/mybackpack.php'), navigation_node::TYPE_SETTING);",
          "",
          "[Added Lines]",
          "4457:                 $badges->add(get_string('backpackdetails', 'badges'), new moodle_url('/badges/mybackpack.php'),",
          "4458:                         navigation_node::TYPE_SETTING);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4339:             $reportfunction($reporttab, $user, $course);",
          "4340:         }",
          "4343:         $reporttab->trim_if_empty();",
          "4347:             $url = new moodle_url('/course/loginas.php', array('id'=>$course->id, 'user'=>$user->id, 'sesskey'=>sesskey()));",
          "4348:             $useraccount->add(get_string('loginas'), $url, self::TYPE_SETTING);",
          "4349:         }",
          "",
          "[Removed Lines]",
          "4346:         if (!$user->deleted and !$currentuser && !\\core\\session\\manager::is_loggedinas() && has_capability('moodle/user:loginas', $coursecontext) && !is_siteadmin($user->id)) {",
          "",
          "[Added Lines]",
          "4473:         if (!$user->deleted and !$currentuser && !\\core\\session\\manager::is_loggedinas() &&",
          "4474:                 has_capability('moodle/user:loginas', $coursecontext) && !is_siteadmin($user->id)) {",
          "",
          "---------------"
        ],
        "lib/outputrenderers.php||lib/outputrenderers.php": [
          "File: lib/outputrenderers.php -> lib/outputrenderers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3388:             return '';",
          "3389:         }",
          "3391:         $htmlblocks = array();",
          "3393:         $separator = get_separator();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3392:         if (get_home_page()) {",
          "3393:             array_shift($items);",
          "3394:         }",
          "",
          "---------------"
        ],
        "message/edit.php||message/edit.php": [
          "File: message/edit.php -> message/edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     if (is_siteadmin($user) and !is_siteadmin($USER)) {",
          "71:         print_error('useradmineditadmin');",
          "72:     }",
          "73:     $PAGE->navigation->extend_for_user($user);",
          "74: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     $PAGE->navbar->includesettingsbase = true;",
          "",
          "---------------"
        ],
        "message/index.php||message/index.php": [
          "File: message/index.php -> message/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "200: }",
          "201: $PAGE->set_heading(fullname($USER));",
          "204: echo $OUTPUT->header();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: $usernode = $PAGE->navigation->find('users', null);",
          "205: $usernode->remove();",
          "207: $settings = $PAGE->settingsnav->find('messages', null);",
          "209: if (!empty($user2realuser)) {",
          "210:     $usernode = $settings->add(fullname($user2), new moodle_url('/user/profile.php', array('id' => $user2->id)));",
          "211:     $usernode->make_active();",
          "212: } else {",
          "213:     $settings->make_active();",
          "214: }",
          "",
          "---------------"
        ],
        "mod/forum/user.php||mod/forum/user.php": [
          "File: mod/forum/user.php -> mod/forum/user.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:         } else {",
          "179:             $notification = get_string('nopostsmadebyyou', 'forum');",
          "180:         }",
          "181:     } else if ($canviewuser) {",
          "182:         $PAGE->navigation->extend_for_user($user);",
          "183:         $PAGE->navigation->set_userid_for_parent_checks($user->id); // see MDL-25805 for reasons and for full commit reference for reversal when fixed.",
          "184:         $fullname = fullname($user);",
          "185:         if ($discussionsonly) {",
          "186:             $notification = get_string('nodiscussionsstartedby', 'forum', $fullname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:         $usernode = $PAGE->navigation->find('users', null);",
          "184:         $usernode->make_inactive();",
          "186:         if (isset($courseid) && $courseid != SITEID) {",
          "188:             $newusernode = $PAGE->navigation->find('user' . $user->id, null);",
          "189:             $newusernode->make_active();",
          "191:             if ($mode == 'posts') {",
          "192:                 $navbar = $PAGE->navbar->add(get_string('posts', 'forum'), new moodle_url('/mod/forum/user.php',",
          "193:                         array('id' => $user->id, 'course' => $courseid)));",
          "194:             } else {",
          "195:                 $navbar = $PAGE->navbar->add(get_string('discussions', 'forum'), new moodle_url('/mod/forum/user.php',",
          "196:                         array('id' => $user->id, 'course' => $courseid, 'mode'=>'discussions')));",
          "197:             }",
          "198:         }",
          "204:         if (isset($courseid) && $courseid != SITEID) {",
          "206:             $usernode = $PAGE->navigation->find('user' . $user->id, null);",
          "207:             $usernode->make_active();",
          "209:             if ($mode == 'posts') {",
          "210:                 $navbar = $PAGE->navbar->add(get_string('posts', 'forum'), new moodle_url('/mod/forum/user.php',",
          "211:                         array('id' => $user->id, 'course' => $courseid)));",
          "212:             } else {",
          "213:                 $navbar = $PAGE->navbar->add(get_string('discussions', 'forum'), new moodle_url('/mod/forum/user.php',",
          "214:                         array('id' => $user->id, 'course' => $courseid, 'mode'=>'discussions')));",
          "215:             }",
          "216:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340: $PAGE->navigation->extend_for_user($user);",
          "341: $PAGE->navigation->set_userid_for_parent_checks($user->id); // see MDL-25805 for reasons and for full commit reference for reversal when fixed.",
          "343: echo $OUTPUT->header();",
          "344: echo $OUTPUT->heading($inpageheading);",
          "345: echo html_writer::start_tag('div', array('class' => 'user-content'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "378: if (isset($courseid) && $courseid != SITEID) {",
          "379:     $usernode = $PAGE->navigation->find('user' . $user->id , null);",
          "380:     $usernode->make_active();",
          "382:     if ($mode == 'posts') {",
          "383:         $navbar = $PAGE->navbar->add(get_string('posts', 'forum'), new moodle_url('/mod/forum/user.php',",
          "384:                 array('id' => $user->id, 'course' => $courseid)));",
          "385:     } else {",
          "386:         $navbar = $PAGE->navbar->add(get_string('discussions', 'forum'), new moodle_url('/mod/forum/user.php',",
          "387:                 array('id' => $user->id, 'course' => $courseid, 'mode'=>'discussions')));",
          "388:     }",
          "389: }",
          "",
          "---------------"
        ],
        "my/index.php||my/index.php": [
          "File: my/index.php -> my/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         if (optional_param('setdefaulthome', false, PARAM_BOOL)) {",
          "89:             set_user_preference('user_home_page_preference', HOMEPAGE_MY);",
          "90:         } else if (!empty($CFG->defaulthomepage) && $CFG->defaulthomepage == HOMEPAGE_USER) {",
          "92:         }",
          "93:     }",
          "94: }",
          "",
          "[Removed Lines]",
          "91:             $PAGE->settingsnav->get('usercurrentsettings')->add(get_string('makethismyhome'), new moodle_url('/my/', array('setdefaulthome'=>true)), navigation_node::TYPE_SETTING);",
          "",
          "[Added Lines]",
          "91:             $PAGE->settingsnav->find('usercurrentsettings', null)->add(get_string('makethismyhome'),",
          "92:                     new moodle_url('/my/', array('setdefaulthome'=>true)), navigation_node::TYPE_SETTING);",
          "94:     } else {",
          "95:         $mycoursenode = $PAGE->navigation->get('mycourses')->make_inactive();",
          "",
          "---------------"
        ],
        "theme/bootstrapbase/renderers/core_renderer.php||theme/bootstrapbase/renderers/core_renderer.php": [
          "File: theme/bootstrapbase/renderers/core_renderer.php -> theme/bootstrapbase/renderers/core_renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         if (empty($items)) {",
          "37:             return '';",
          "38:         }",
          "39:         $breadcrumbs = array();",
          "40:         foreach ($items as $item) {",
          "41:             $item->hideicon = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:         if (get_home_page()) {",
          "42:             array_shift($items);",
          "43:         }",
          "",
          "---------------"
        ],
        "user/editadvanced.php||user/editadvanced.php": [
          "File: user/editadvanced.php -> user/editadvanced.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     require_capability('moodle/user:update', $systemcontext);",
          "79:     $user = $DB->get_record('user', array('id' => $id), '*', MUST_EXIST);",
          "80:     $PAGE->set_context(context_user::instance($user->id));",
          "81:     if ($user->id != $USER->id) {",
          "82:         $PAGE->navigation->extend_for_user($user);",
          "83:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     $PAGE->navbar->includesettingsbase = true;",
          "",
          "---------------"
        ],
        "user/preferences.php||user/preferences.php": [
          "File: user/preferences.php -> user/preferences.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: if (!$currentuser) {",
          "55:     $PAGE->navigation->extend_for_user($user);",
          "57: } else {",
          "59: }",
          "",
          "[Removed Lines]",
          "56:     $settings = $PAGE->settingsnav->get('userviewingsettings' . $user->id);",
          "58:     $settings = $PAGE->settingsnav->get('usercurrentsettings');",
          "",
          "[Added Lines]",
          "56:     $settings = $PAGE->settingsnav->find('userviewingsettings' . $user->id, null);",
          "57:     $settings->make_active();",
          "58:     $url = new moodle_url('/user/preferences.php', array('userid' => $userid));",
          "59:     $navbar = $PAGE->navbar->add(get_string('preferences', 'moodle'), $url);",
          "62:     $usernode = $PAGE->navigation->find('users', null);",
          "63:     $usernode->make_inactive();",
          "65:     $PAGE->set_title(get_string('preferences'));",
          "66:     $PAGE->set_heading(get_string('preferences'));",
          "68:     $settings = $PAGE->settingsnav->find('usercurrentsettings', null);",
          "69:     $settings->make_active();",
          "",
          "---------------"
        ],
        "user/profile.php||user/profile.php": [
          "File: user/profile.php -> user/profile.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:     if ($node = $PAGE->settingsnav->get('userviewingsettings'.$user->id)) {",
          "141:         $node->forceopen = true;",
          "142:     }",
          "144:     $node->forceopen = true;",
          "145: }",
          "146: if ($node = $PAGE->settingsnav->get('root')) {",
          "",
          "[Removed Lines]",
          "143: } else if ($node = $PAGE->settingsnav->get('usercurrentsettings', navigation_node::TYPE_CONTAINER)) {",
          "",
          "[Added Lines]",
          "143: } else if ($node = $PAGE->settingsnav->get('dashboard', navigation_node::TYPE_CONTAINER)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbd063f4c3133b330a0d27c9a0185343d3f3c740",
      "candidate_info": {
        "commit_hash": "cbd063f4c3133b330a0d27c9a0185343d3f3c740",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/cbd063f4c3133b330a0d27c9a0185343d3f3c740",
        "files": [
          "blocks/navigation/tests/behat/expand_courses_node.feature",
          "lang/en/cache.php",
          "lib/db/caches.php",
          "lib/navigationlib.php"
        ],
        "message": "MDL-44711 navigation: improved expandable course calculation",
        "before_after_code_files": [
          "blocks/navigation/tests/behat/expand_courses_node.feature||blocks/navigation/tests/behat/expand_courses_node.feature",
          "lang/en/cache.php||lang/en/cache.php",
          "lib/db/caches.php||lib/db/caches.php",
          "lib/navigationlib.php||lib/navigationlib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/navigationlib.php||lib/navigationlib.php"
          ],
          "candidate": [
            "lib/navigationlib.php||lib/navigationlib.php"
          ]
        }
      },
      "candidate_diff": {
        "blocks/navigation/tests/behat/expand_courses_node.feature||blocks/navigation/tests/behat/expand_courses_node.feature": [
          "File: blocks/navigation/tests/behat/expand_courses_node.feature -> blocks/navigation/tests/behat/expand_courses_node.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: @block @block_navigation",
          "2: Feature: Expand the courses nodes within the navigation block",
          "3:   In order to navigate the site",
          "4:   As an anonymous user, a guest, a student, and an admin",
          "5:   I need to expand the courses node in the navigation block and check the display of courses and categories.",
          "7:   Background:",
          "8:     Given the following \"users\" exist:",
          "9:       | username | firstname | lastname | email |",
          "10:       | teacher1 | Teacher | 1 | teacher1@local.host |",
          "11:       | student1 | Student | 1 | student1@local.host |",
          "12:     And the following \"categories\" exist:",
          "13:       | name   | category | idnumber | visible |",
          "14:       | cat1   | 0        | cat1     | 1       |",
          "15:       | cat2   | 0        | cat2     | 1       |",
          "16:       | cat21  | cat2     | cat21    | 1       |",
          "17:       | cat211 | cat21    | cat211   | 1       |",
          "18:       | cat3   | 0        | cat3     | 0       |",
          "19:     And the following \"courses\" exist:",
          "20:       | fullname  | shortname | category | visible |",
          "21:       | Course 1  | c1        | cat1     | 1       |",
          "22:       | Course 2  | c2        | cat2     | 1       |",
          "23:       | Course 3  | c3        | cat21    | 1       |",
          "24:       | Course 4  | c4        | cat211   | 1       |",
          "25:       | Course 5  | c5        | cat211   | 0       |",
          "26:       | Course 6  | c6        | cat211   | 0       |",
          "27:       | Course 7  | c7        | cat3     | 1       |",
          "28:       | Course 8  | c8        | cat3     | 0       |",
          "29:     And the following \"course enrolments\" exist:",
          "30:       | user     | course | role    |",
          "31:       | teacher1 | c1     | teacher |",
          "32:       | teacher1 | c3     | teacher |",
          "33:       | teacher1 | c5     | teacher |",
          "34:       | student1 | c1     | student |",
          "35:       | student1 | c2     | student |",
          "36:       | student1 | c4     | student |",
          "37:     And I log in as \"admin\"",
          "38:     And I follow \"Course 2\"",
          "39:     And I turn editing mode on",
          "40:     And I click on \"Edit settings\" \"link\" in the \"Administration\" \"block\"",
          "41:     And I set the following fields to these values:",
          "42:       | Allow guest access | Yes |",
          "43:     And I press \"Save changes\"",
          "44:     And I set the following administration settings values:",
          "45:       | Show all courses | 1 |",
          "46:     And I log out",
          "48:   @javascript",
          "49:   Scenario: As an anonymous user I expand the courses node to see courses.",
          "50:     When I should see \"You are not logged in.\" in the \".logininfo\" \"css_element\"",
          "51:     And I should see \"Home\" in the \"Navigation\" \"block\"",
          "52:     And I should see \"Courses\" in the \"Navigation\" \"block\"",
          "53:     And I expand \"Courses\" node",
          "54:     And I should see \"cat1\" in the \"Navigation\" \"block\"",
          "55:     And I should see \"cat2\" in the \"Navigation\" \"block\"",
          "56:     And I should not see \"cat3\" in the \"Navigation\" \"block\"",
          "57:     And I expand \"cat1\" node",
          "58:     And I expand \"cat2\" node",
          "59:     And I should see \"cat21\" in the \"Navigation\" \"block\"",
          "60:     And I expand \"cat21\" node",
          "61:     And I should see \"cat211\" in the \"Navigation\" \"block\"",
          "62:     And I expand \"cat211\" node",
          "63:     Then I should see \"c1\" in the \"Navigation\" \"block\"",
          "64:     And I should see \"c2\" in the \"Navigation\" \"block\"",
          "65:     And I should see \"c3\" in the \"Navigation\" \"block\"",
          "66:     And I should see \"c4\" in the \"Navigation\" \"block\"",
          "67:     And I should not see \"c5\" in the \"Navigation\" \"block\"",
          "68:     And I should not see \"c6\" in the \"Navigation\" \"block\"",
          "69:     And navigation node \"c1\" should not be expandable",
          "70:     And navigation node \"c2\" should not be expandable",
          "71:     And navigation node \"c3\" should not be expandable",
          "72:     And navigation node \"c4\" should not be expandable",
          "74:   @javascript",
          "75:   Scenario: As the admin user I expand the courses and category nodes to see courses.",
          "76:     When I log in as \"admin\"",
          "77:     And I should see \"Home\" in the \"Navigation\" \"block\"",
          "78:     And I should see \"Courses\" in the \"Navigation\" \"block\"",
          "79:     And I expand \"Courses\" node",
          "80:     And I should see \"cat1\" in the \"Navigation\" \"block\"",
          "81:     And I should see \"cat2\" in the \"Navigation\" \"block\"",
          "82:     And I should see \"cat3\" in the \"Navigation\" \"block\"",
          "83:     And I expand \"cat1\" node",
          "84:     And I expand \"cat2\" node",
          "85:     And I expand \"cat3\" node",
          "86:     And I should see \"cat21\" in the \"Navigation\" \"block\"",
          "87:     And I expand \"cat21\" node",
          "88:     And I should see \"cat211\" in the \"Navigation\" \"block\"",
          "89:     And I expand \"cat211\" node",
          "90:     Then I should see \"c1\" in the \"Navigation\" \"block\"",
          "91:     And I should see \"c2\" in the \"Navigation\" \"block\"",
          "92:     And I should see \"c3\" in the \"Navigation\" \"block\"",
          "93:     And I should see \"c4\" in the \"Navigation\" \"block\"",
          "94:     And I should see \"c5\" in the \"Navigation\" \"block\"",
          "95:     And I should see \"c6\" in the \"Navigation\" \"block\"",
          "96:     And I should see \"c7\" in the \"Navigation\" \"block\"",
          "97:     And I should see \"c8\" in the \"Navigation\" \"block\"",
          "98:     And navigation node \"c1\" should be expandable",
          "99:     And navigation node \"c2\" should be expandable",
          "100:     And navigation node \"c3\" should be expandable",
          "101:     And navigation node \"c4\" should be expandable",
          "102:     And navigation node \"c5\" should be expandable",
          "103:     And navigation node \"c6\" should be expandable",
          "104:     And navigation node \"c7\" should be expandable",
          "105:     And navigation node \"c8\" should be expandable",
          "107:   @javascript",
          "108:   Scenario: As teacher1 I expand the courses and category nodes to see courses.",
          "109:     When I log in as \"teacher1\"",
          "110:     And I should see \"Home\" in the \"Navigation\" \"block\"",
          "111:     And I should see \"Courses\" in the \"Navigation\" \"block\"",
          "112:     And I expand \"Courses\" node",
          "113:     And I should see \"cat1\" in the \"Navigation\" \"block\"",
          "114:     And I should see \"cat2\" in the \"Navigation\" \"block\"",
          "115:     And I should not see \"cat3\" in the \"Navigation\" \"block\"",
          "116:     And I expand \"cat1\" node",
          "117:     And I expand \"cat2\" node",
          "118:     And I should see \"cat21\" in the \"Navigation\" \"block\"",
          "119:     And I expand \"cat21\" node",
          "120:     And I should see \"cat211\" in the \"Navigation\" \"block\"",
          "121:     And I expand \"cat211\" node",
          "122:     Then I should see \"c1\" in the \"Navigation\" \"block\"",
          "123:     And I should see \"c2\" in the \"Navigation\" \"block\"",
          "124:     And I should see \"c3\" in the \"Navigation\" \"block\"",
          "125:     And I should see \"c4\" in the \"Navigation\" \"block\"",
          "126:     And I should see \"c5\" in the \"Navigation\" \"block\"",
          "127:     And I should not see \"c6\" in the \"Navigation\" \"block\"",
          "128:     And I should not see \"c7\" in the \"Navigation\" \"block\"",
          "129:     And I should not see \"c8\" in the \"Navigation\" \"block\"",
          "130:     And navigation node \"c1\" should be expandable",
          "131:     And navigation node \"c2\" should be expandable",
          "132:     And navigation node \"c3\" should be expandable",
          "133:     And navigation node \"c4\" should not be expandable",
          "134:     And navigation node \"c5\" should be expandable",
          "136:   @javascript",
          "137:   Scenario: As student1 I expand the courses and category nodes to see courses.",
          "138:     When I log in as \"student1\"",
          "139:     And I should see \"Home\" in the \"Navigation\" \"block\"",
          "140:     And I should see \"Courses\" in the \"Navigation\" \"block\"",
          "141:     And I expand \"Courses\" node",
          "142:     And I should see \"cat1\" in the \"Navigation\" \"block\"",
          "143:     And I should see \"cat2\" in the \"Navigation\" \"block\"",
          "144:     And I should not see \"cat3\" in the \"Navigation\" \"block\"",
          "145:     And I expand \"cat1\" node",
          "146:     And I expand \"cat2\" node",
          "147:     And I should see \"cat21\" in the \"Navigation\" \"block\"",
          "148:     And I expand \"cat21\" node",
          "149:     And I should see \"cat211\" in the \"Navigation\" \"block\"",
          "150:     And I expand \"cat211\" node",
          "151:     Then I should see \"c1\" in the \"Navigation\" \"block\"",
          "152:     And I should see \"c2\" in the \"Navigation\" \"block\"",
          "153:     And I should see \"c3\" in the \"Navigation\" \"block\"",
          "154:     And I should see \"c4\" in the \"Navigation\" \"block\"",
          "155:     And I should not see \"c5\" in the \"Navigation\" \"block\"",
          "156:     And I should not see \"c6\" in the \"Navigation\" \"block\"",
          "157:     And I should not see \"c7\" in the \"Navigation\" \"block\"",
          "158:     And I should not see \"c8\" in the \"Navigation\" \"block\"",
          "159:     And navigation node \"c1\" should be expandable",
          "160:     And navigation node \"c2\" should be expandable",
          "161:     And navigation node \"c3\" should not be expandable",
          "162:     And navigation node \"c4\" should be expandable",
          "164:   @javascript",
          "165:   Scenario: As guest I expand the courses and category nodes to see courses.",
          "166:     When I log in as \"guest\"",
          "167:     And I should see \"Home\" in the \"Navigation\" \"block\"",
          "168:     And I should see \"Courses\" in the \"Navigation\" \"block\"",
          "169:     And I expand \"Courses\" node",
          "170:     And I should see \"cat1\" in the \"Navigation\" \"block\"",
          "171:     And I should see \"cat2\" in the \"Navigation\" \"block\"",
          "172:     And I should not see \"cat3\" in the \"Navigation\" \"block\"",
          "173:     And I expand \"cat1\" node",
          "174:     And I expand \"cat2\" node",
          "175:     And I should see \"cat21\" in the \"Navigation\" \"block\"",
          "176:     And I expand \"cat21\" node",
          "177:     And I should see \"cat211\" in the \"Navigation\" \"block\"",
          "178:     And I expand \"cat211\" node",
          "179:     Then I should see \"c1\" in the \"Navigation\" \"block\"",
          "180:     And I should see \"c2\" in the \"Navigation\" \"block\"",
          "181:     And I should see \"c3\" in the \"Navigation\" \"block\"",
          "182:     And I should see \"c4\" in the \"Navigation\" \"block\"",
          "183:     And I should not see \"c5\" in the \"Navigation\" \"block\"",
          "184:     And I should not see \"c6\" in the \"Navigation\" \"block\"",
          "185:     And I should not see \"c7\" in the \"Navigation\" \"block\"",
          "186:     And I should not see \"c8\" in the \"Navigation\" \"block\"",
          "187:     And navigation node \"c1\" should not be expandable",
          "188:     And navigation node \"c2\" should be expandable",
          "189:     And navigation node \"c3\" should not be expandable",
          "190:     And navigation node \"c4\" should not be expandable",
          "",
          "---------------"
        ],
        "lang/en/cache.php||lang/en/cache.php": [
          "File: lang/en/cache.php -> lang/en/cache.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: $string['cachedef_htmlpurifier'] = 'HTML Purifier - cleaned content';",
          "52: $string['cachedef_langmenu'] = 'List of available languages';",
          "53: $string['cachedef_locking'] = 'Locking';",
          "54: $string['cachedef_observers'] = 'Event observers';",
          "55: $string['cachedef_plugin_manager'] = 'Plugin info manager';",
          "56: $string['cachedef_questiondata'] = 'Question definitions';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: $string['cachedef_navigation_expandcourse'] = 'Navigation expandable courses';",
          "",
          "---------------"
        ],
        "lib/db/caches.php||lib/db/caches.php": [
          "File: lib/db/caches.php -> lib/db/caches.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:         'staticaccelerationsize' => 2, // Should not be required for more than one user at a time.",
          "213:         'ttl' => 3600,",
          "214:     ),",
          "215: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:     'navigation_expandcourse' => array(",
          "221:         'mode' => cache_store::MODE_SESSION,",
          "222:         'simplekeys' => true,",
          "223:         'simpledata' => true",
          "224:     )",
          "",
          "---------------"
        ],
        "lib/navigationlib.php||lib/navigationlib.php": [
          "File: lib/navigationlib.php -> lib/navigationlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001:     protected $expansionlimit = 0;",
          "1003:     protected $useridtouseforparentchecks = 0;",
          "1006:     const LOAD_ROOT_CATEGORIES = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1005:     protected $cacheexpandcourse = null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1168:                 if (!can_access_course($course)) {",
          "1171:                     if (!$this->current_user_is_parent_role()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1171:                     if ($coursenode->isexpandable === true) {",
          "1175:                         $this->get_expand_course_cache()->set($course->id, 1);",
          "1176:                         $coursenode->isexpandable = true;",
          "1177:                         $coursenode->nodetype = self::NODETYPE_BRANCH;",
          "1178:                     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1175:                     }",
          "1176:                 }",
          "1179:                 $this->add_course_essentials($coursenode, $course);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1188:                 if ($coursenode->isexpandable === false) {",
          "1192:                     $this->get_expand_course_cache()->set($course->id, 1);",
          "1193:                     $coursenode->isexpandable = true;",
          "1194:                     $coursenode->nodetype = self::NODETYPE_BRANCH;",
          "1195:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2374:         $coursename = empty($CFG->navshowfullcoursenames) ? $shortname : $fullname;",
          "2376:         if ($issite) {",
          "2377:             $parent = $this;",
          "2378:             $url = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2396:         $canexpandcourse = true;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2392:         } else {",
          "2393:             $parent = $this->rootnodes['courses'];",
          "2394:             $url = new moodle_url('/course/view.php', array('id'=>$course->id));",
          "2395:             if (!empty($course->category) && $this->show_categories($coursetype == self::COURSE_MY)) {",
          "2396:                 if (!$this->is_category_fully_loaded($course->category)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2417:             $canexpandcourse = $this->can_expand_course($course);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2408:         }",
          "2410:         $coursenode = $parent->add($coursename, $url, self::TYPE_COURSE, $shortname, $course->id);",
          "2412:         $coursenode->hidden = (!$course->visible);",
          "2415:         $coursenode->title(str_replace('&amp;', '&', $fullname));",
          "2416:         if (!$forcegeneric) {",
          "2417:             $this->addedcourses[$course->id] = $coursenode;",
          "2418:         }",
          "",
          "[Removed Lines]",
          "2411:         $coursenode->nodetype = self::NODETYPE_BRANCH;",
          "",
          "[Added Lines]",
          "2438:         if ($canexpandcourse) {",
          "2440:             $coursenode->nodetype = self::NODETYPE_BRANCH;",
          "2441:             $coursenode->isexpandable = true;",
          "2442:         } else {",
          "2443:             $coursenode->nodetype = self::NODETYPE_LEAF;",
          "2444:             $coursenode->isexpandable = false;",
          "2445:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2420:         return $coursenode;",
          "2421:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2457:     protected function get_expand_course_cache() {",
          "2458:         if ($this->cacheexpandcourse === null) {",
          "2459:             $this->cacheexpandcourse = cache::make('core', 'navigation_expandcourse');",
          "2460:         }",
          "2461:         return $this->cacheexpandcourse;",
          "2462:     }",
          "2481:     protected function can_expand_course($course) {",
          "2482:         $cache = $this->get_expand_course_cache();",
          "2483:         $canexpand = $cache->get($course->id);",
          "2484:         if ($canexpand === false) {",
          "2485:             $canexpand = isloggedin() && can_access_course($course);",
          "2486:             $canexpand = (int)$canexpand;",
          "2487:             $cache->set($course->id, $canexpand);",
          "2488:         }",
          "2489:         return ($canexpand === 1);",
          "2490:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "032f18c4a50d472cddd2cb52a627d19b75921f16",
      "candidate_info": {
        "commit_hash": "032f18c4a50d472cddd2cb52a627d19b75921f16",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/032f18c4a50d472cddd2cb52a627d19b75921f16",
        "files": [
          "lib/navigationlib.php"
        ],
        "message": "MDL-49788 navigation: Ensure we only check active enrolments",
        "before_after_code_files": [
          "lib/navigationlib.php||lib/navigationlib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/navigationlib.php||lib/navigationlib.php"
          ],
          "candidate": [
            "lib/navigationlib.php||lib/navigationlib.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/navigationlib.php||lib/navigationlib.php": [
          "File: lib/navigationlib.php -> lib/navigationlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:                     if ($coursenode->isexpandable === true) {",
          "",
          "[Removed Lines]",
          "1175:                 if (!can_access_course($course)) {",
          "",
          "[Added Lines]",
          "1175:                 if (!can_access_course($course, null, '', true)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1188:                         $canviewcourseprofile = false;",
          "1189:                         break;",
          "1190:                     }",
          "",
          "[Removed Lines]",
          "1191:                 }",
          "1193:                 if ($coursenode->isexpandable === false) {",
          "",
          "[Added Lines]",
          "1191:                 } else if ($coursenode->isexpandable === false) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1239:                     $coursenode->make_active();",
          "1240:                     $canviewcourseprofile = false;",
          "1241:                     break;",
          "",
          "[Removed Lines]",
          "1238:                 if (!can_access_course($course)) {",
          "",
          "[Added Lines]",
          "1236:                 if (!can_access_course($course, null, '', true)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1278:                     $coursenode->make_active();",
          "1279:                     $canviewcourseprofile = false;",
          "1280:                     break;",
          "",
          "[Removed Lines]",
          "1277:                 if (!can_access_course($course)) {",
          "",
          "[Added Lines]",
          "1275:                 if (!can_access_course($course, null, '', true)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2324:                     $usercoursenode->add(get_string('notes', 'notes'), $url, self::TYPE_SETTING);",
          "2325:                 }",
          "2328:                     $usercoursenode->add(get_string('entercourse'), new moodle_url('/course/view.php', array('id'=>$usercourse->id)), self::TYPE_SETTING, null, null, new pix_icon('i/course', ''));",
          "2329:                 }",
          "",
          "[Removed Lines]",
          "2327:                 if (can_access_course($usercourse, $user->id)) {",
          "",
          "[Added Lines]",
          "2325:                 if (can_access_course($usercourse, $user->id, '', true)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2423:         } else if ($coursetype == self::COURSE_CURRENT) {",
          "2424:             $parent = $this->rootnodes['currentcourse'];",
          "2425:             $url = new moodle_url('/course/view.php', array('id'=>$course->id));",
          "2426:         } else if ($coursetype == self::COURSE_MY && !$forcegeneric) {",
          "2427:             if (!empty($CFG->navshowmycoursecategories) && ($parent = $this->rootnodes['mycourses']->find($course->category, self::TYPE_MY_CATEGORY))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2424:             $canexpandcourse = $this->can_expand_course($course);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2502:         $cache = $this->get_expand_course_cache();",
          "2503:         $canexpand = $cache->get($course->id);",
          "2504:         if ($canexpand === false) {",
          "2506:             $canexpand = (int)$canexpand;",
          "2507:             $cache->set($course->id, $canexpand);",
          "2508:         }",
          "",
          "[Removed Lines]",
          "2505:             $canexpand = isloggedin() && can_access_course($course);",
          "",
          "[Added Lines]",
          "2504:             $canexpand = isloggedin() && can_access_course($course, null, '', true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2858:                 break;",
          "2859:             case self::TYPE_COURSE :",
          "2860:                 $course = $DB->get_record('course', array('id' => $this->instanceid), '*', MUST_EXIST);",
          "2864:                     $this->add_course($course);",
          "",
          "[Removed Lines]",
          "2861:                 if (!can_access_course($course)) {",
          "",
          "[Added Lines]",
          "2860:                 if (!can_access_course($course, null, '', true)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3252:             }",
          "3253:             $categories[] = $categorynode;",
          "3254:         }",
          "3256:             $courses = $this->page->navigation->get('mycourses');",
          "3257:         } else {",
          "3258:             $courses = $this->page->navigation->get('courses');",
          "",
          "[Removed Lines]",
          "3255:         if (is_enrolled(context_course::instance($this->page->course->id))) {",
          "",
          "[Added Lines]",
          "3254:         if (is_enrolled(context_course::instance($this->page->course->id), null, '', true)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4149:                 }",
          "4150:             } else {",
          "4151:                 $canviewusercourse = has_capability('moodle/user:viewdetails', $coursecontext);",
          "4153:                 if ((!$canviewusercourse && !$canviewuser) || !$userisenrolled) {",
          "4154:                     return false;",
          "4155:                 }",
          "",
          "[Removed Lines]",
          "4152:                 $userisenrolled = is_enrolled($coursecontext, $user->id);",
          "",
          "[Added Lines]",
          "4151:                 $userisenrolled = is_enrolled($coursecontext, $user->id, '', true);",
          "",
          "---------------"
        ]
      }
    }
  ]
}