{
  "cve_id": "CVE-2019-15222",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.2.8. There is a NULL pointer dereference caused by a malicious USB device in the sound/usb/helper.c (motu_microbookii) driver.",
  "repo": "torvalds/linux",
  "patch_hash": "5d78e1c2b7f4be00bbe62141603a631dc7812f35",
  "patch_info": {
    "commit_hash": "5d78e1c2b7f4be00bbe62141603a631dc7812f35",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/5d78e1c2b7f4be00bbe62141603a631dc7812f35",
    "files": [
      "sound/usb/helper.c"
    ],
    "message": "ALSA: usb-audio: Fix gpf in snd_usb_pipe_sanity_check\n\nsyzbot found the following crash on:\n\n  general protection fault: 0000 [#1] SMP KASAN\n  RIP: 0010:snd_usb_pipe_sanity_check+0x80/0x130 sound/usb/helper.c:75\n  Call Trace:\n    snd_usb_motu_microbookii_communicate.constprop.0+0xa0/0x2fb  sound/usb/quirks.c:1007\n    snd_usb_motu_microbookii_boot_quirk sound/usb/quirks.c:1051 [inline]\n    snd_usb_apply_boot_quirk.cold+0x163/0x370 sound/usb/quirks.c:1280\n    usb_audio_probe+0x2ec/0x2010 sound/usb/card.c:576\n    usb_probe_interface+0x305/0x7a0 drivers/usb/core/driver.c:361\n    really_probe+0x281/0x650 drivers/base/dd.c:548\n    ....\n\nIt was introduced in commit 801ebf1043ae for checking pipe and endpoint\ntypes. It is fixed by adding a check of the ep pointer in question.\n\nBugLink: https://syzkaller.appspot.com/bug?extid=d59c4387bfb6eced94e2\nReported-by: syzbot <syzbot+d59c4387bfb6eced94e2@syzkaller.appspotmail.com>\nFixes: 801ebf1043ae (\"ALSA: usb-audio: Sanity checks for each pipe and EP types\")\nCc: Andrey Konovalov <andreyknvl@google.com>\nSigned-off-by: Hillf Danton <hdanton@sina.com>\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
    "before_after_code_files": [
      "sound/usb/helper.c||sound/usb/helper.c"
    ]
  },
  "patch_diff": {
    "sound/usb/helper.c||sound/usb/helper.c": [
      "File: sound/usb/helper.c -> sound/usb/helper.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:  struct usb_host_endpoint *ep;",
      "74:  ep = usb_pipe_endpoint(dev, pipe);",
      "76:   return -EINVAL;",
      "77:  return 0;",
      "78: }",
      "",
      "[Removed Lines]",
      "75:  if (usb_pipetype(pipe) != pipetypes[usb_endpoint_type(&ep->desc)])",
      "",
      "[Added Lines]",
      "75:  if (!ep || usb_pipetype(pipe) != pipetypes[usb_endpoint_type(&ep->desc)])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "23eaf3b5c1a755e3193480c76fb29414be648688",
      "candidate_info": {
        "commit_hash": "23eaf3b5c1a755e3193480c76fb29414be648688",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/23eaf3b5c1a755e3193480c76fb29414be648688",
        "files": [
          "drivers/infiniband/hw/mlx5/main.c"
        ],
        "message": "RDMA/mlx5: Release locks during notifier unregister\n\nThe below kernel panic was observed when created bond mode LACP\nwith GRE tunnel on top. The reason to it was not released spinlock\nduring mlx5 notify unregsiter sequence.\n\n[  234.562007] BUG: scheduling while atomic: sh/10900/0x00000002\n[  234.563005] Preemption disabled at:\n[  234.566864] ------------[ cut here ]------------\n[  234.567120] DEBUG_LOCKS_WARN_ON(val > preempt_count())\n[  234.567139] WARNING: CPU: 16 PID: 10900 at kernel/sched/core.c:3203 preempt_count_sub+0xca/0x170\n[  234.569550] CPU: 16 PID: 10900 Comm: sh Tainted: G        W 5.2.0-rc1-for-linust-dbg-2019-05-25_04-57-33-60 #1\n[  234.569886] Hardware name: Dell Inc. PowerEdge R720/0X3D66, BIOS 2.6.1 02/12/2018\n[  234.570183] RIP: 0010:preempt_count_sub+0xca/0x170\n[  234.570404] Code: 03 38\nd0 7c 08 84 d2 0f 85 b0 00 00 00 8b 15 dd 02 03 04 85 d2 75 ba 48 c7 c6\n00 e1 88 83 48 c7 c7 40 e1 88 83 e8 76 11 f7 ff <0f> 0b 5b c3 65 8b 05\nd3 1f d8 7e 84 c0 75 82 e8 62 c3 c3 00 85 c0\n[  234.570911] RSP: 0018:ffff888b94477b08 EFLAGS: 00010286\n[  234.571133] RAX: 0000000000000000 RBX: 0000000000000001 RCX: 0000000000000000\n[  234.571391] RDX: 0000000000000000 RSI: 0000000000000004 RDI: 0000000000000246\n[  234.571648] RBP: ffff888ba5560000 R08: fffffbfff08962d5 R09: fffffbfff08962d5\n[  234.571902] R10: 0000000000000001 R11: fffffbfff08962d4 R12: ffff888bac6e9548\n[  234.572157] R13: ffff888babfaf728 R14: ffff888bac6e9568 R15: ffff888babfaf750\n[  234.572412] FS: 00007fcafa59b740(0000) GS:ffff888bed200000(0000) knlGS:0000000000000000\n[  234.572686] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  234.572914] CR2: 00007f984f16b140 CR3: 0000000b2bf0a001 CR4: 00000000001606e0\n[  234.573172] Call Trace:\n[  234.573336] _raw_spin_unlock+0x2e/0x50\n[  234.573542] mlx5_ib_unbind_slave_port+0x1bc/0x690 [mlx5_ib]\n[  234.573793] mlx5_ib_cleanup_multiport_master+0x1d3/0x660 [mlx5_ib]\n[  234.574039] mlx5_ib_stage_init_cleanup+0x4c/0x360 [mlx5_ib]\n[  234.574271]  ? kfree+0xf5/0x2f0\n[  234.574465] __mlx5_ib_remove+0x61/0xd0 [mlx5_ib]\n[  234.574688]  ? __mlx5_ib_remove+0xd0/0xd0 [mlx5_ib]\n[  234.574951] mlx5_remove_device+0x234/0x300 [mlx5_core]\n[  234.575224] mlx5_unregister_device+0x4d/0x1e0 [mlx5_core]\n[  234.575493] remove_one+0x4f/0x160 [mlx5_core]\n[  234.575704] pci_device_remove+0xef/0x2a0\n[  234.581407]  ? pcibios_free_irq+0x10/0x10\n[  234.587143]  ? up_read+0xc1/0x260\n[  234.592785] device_release_driver_internal+0x1ab/0x430\n[  234.598442] unbind_store+0x152/0x200\n[  234.604064]  ? sysfs_kf_write+0x3b/0x180\n[  234.609441]  ? sysfs_file_ops+0x160/0x160\n[  234.615021] kernfs_fop_write+0x277/0x440\n[  234.620288]  ? __sb_start_write+0x1ef/0x2c0\n[  234.625512] vfs_write+0x15e/0x460\n[  234.630786] ksys_write+0x156/0x1e0\n[  234.635988]  ? __ia32_sys_read+0xb0/0xb0\n[  234.641120]  ? trace_hardirqs_off_thunk+0x1a/0x1c\n[  234.646163] do_syscall_64+0x95/0x470\n[  234.651106] entry_SYSCALL_64_after_hwframe+0x49/0xbe\n[  234.656004] RIP: 0033:0x7fcaf9c9cfd0\n[  234.660686] Code: 73 01\nc3 48 8b 0d c0 6e 2d 00 f7 d8 64 89 01 48 83 c8 ff c3 66 0f 1f 44 00 00\n83 3d cd cf 2d 00 00 75 10 b8 01 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73\n31 c3 48 83 ec 08 e8 ee cb 01 00 48 89 04 24\n[  234.670128] RSP: 002b:00007ffd3b01ddd8 EFLAGS: 00000246 ORIG_RAX: 0000000000000001\n[  234.674811] RAX: ffffffffffffffda RBX: 000000000000000d RCX: 00007fcaf9c9cfd0\n[  234.679387] RDX: 000000000000000d RSI: 00007fcafa5c1000 RDI: 0000000000000001\n[  234.683848] RBP: 00007fcafa5c1000 R08: 000000000000000a R09: 00007fcafa59b740\n[  234.688167] R10: 00007ffd3b01d8e0 R11: 0000000000000246 R12: 00007fcaf9f75400\n[  234.692386] R13: 000000000000000d R14: 0000000000000001 R15: 0000000000000000\n[  234.696495] irq event stamp: 153067\n[  234.700525] hardirqs last enabled at (153067): [<ffffffff83258c39>] _raw_spin_unlock_irqrestore+0x59/0x70\n[  234.704665] hardirqs last disabled at (153066): [<ffffffff83259382>] _raw_spin_lock_irqsave+0x22/0x90\n[  234.708722] softirqs last enabled at (153058): [<ffffffff836006c5>] __do_softirq+0x6c5/0xb4e\n[  234.712673] softirqs last disabled at (153051): [<ffffffff81227c1d>] irq_exit+0x17d/0x1d0\n[  234.716601] ---[ end trace 5dbf096843ee9ce6 ]---\n\nFixes: df097a278c75 (\"IB/mlx5: Use the new mlx5 core notifier API\")\nSigned-off-by: Leon Romanovsky <leonro@mellanox.com>\nLink: https://lore.kernel.org/r/20190731083852.584-1-leon@kernel.org\nSigned-off-by: Doug Ledford <dledford@redhat.com>",
        "before_after_code_files": [
          "drivers/infiniband/hw/mlx5/main.c||drivers/infiniband/hw/mlx5/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/infiniband/hw/mlx5/main.c||drivers/infiniband/hw/mlx5/main.c": [
          "File: drivers/infiniband/hw/mlx5/main.c -> drivers/infiniband/hw/mlx5/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5802:   return;",
          "5803:  }",
          "5809:  mpi->ibdev = NULL;",
          "5811:  spin_unlock(&port->mp.mpi_lock);",
          "5812:  mlx5_remove_netdev_notifier(ibdev, port_num);",
          "5813:  spin_lock(&port->mp.mpi_lock);",
          "",
          "[Removed Lines]",
          "5805:  if (mpi->mdev_events.notifier_call)",
          "5806:   mlx5_notifier_unregister(mpi->mdev, &mpi->mdev_events);",
          "5807:  mpi->mdev_events.notifier_call = NULL;",
          "",
          "[Added Lines]",
          "5808:  if (mpi->mdev_events.notifier_call)",
          "5809:   mlx5_notifier_unregister(mpi->mdev, &mpi->mdev_events);",
          "5810:  mpi->mdev_events.notifier_call = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "770b7d96cfff6a8bf6c9f261ba6f135dc9edf484",
      "candidate_info": {
        "commit_hash": "770b7d96cfff6a8bf6c9f261ba6f135dc9edf484",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/770b7d96cfff6a8bf6c9f261ba6f135dc9edf484",
        "files": [
          "drivers/infiniband/core/mad.c"
        ],
        "message": "IB/mad: Fix use-after-free in ib mad completion handling\n\nWe encountered a use-after-free bug when unloading the driver:\n\n[ 3562.116059] BUG: KASAN: use-after-free in ib_mad_post_receive_mads+0xddc/0xed0 [ib_core]\n[ 3562.117233] Read of size 4 at addr ffff8882ca5aa868 by task kworker/u13:2/23862\n[ 3562.118385]\n[ 3562.119519] CPU: 2 PID: 23862 Comm: kworker/u13:2 Tainted: G           OE     5.1.0-for-upstream-dbg-2019-05-19_16-44-30-13 #1\n[ 3562.121806] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu2 04/01/2014\n[ 3562.123075] Workqueue: ib-comp-unb-wq ib_cq_poll_work [ib_core]\n[ 3562.124383] Call Trace:\n[ 3562.125640]  dump_stack+0x9a/0xeb\n[ 3562.126911]  print_address_description+0xe3/0x2e0\n[ 3562.128223]  ? ib_mad_post_receive_mads+0xddc/0xed0 [ib_core]\n[ 3562.129545]  __kasan_report+0x15c/0x1df\n[ 3562.130866]  ? ib_mad_post_receive_mads+0xddc/0xed0 [ib_core]\n[ 3562.132174]  kasan_report+0xe/0x20\n[ 3562.133514]  ib_mad_post_receive_mads+0xddc/0xed0 [ib_core]\n[ 3562.134835]  ? find_mad_agent+0xa00/0xa00 [ib_core]\n[ 3562.136158]  ? qlist_free_all+0x51/0xb0\n[ 3562.137498]  ? mlx4_ib_sqp_comp_worker+0x1970/0x1970 [mlx4_ib]\n[ 3562.138833]  ? quarantine_reduce+0x1fa/0x270\n[ 3562.140171]  ? kasan_unpoison_shadow+0x30/0x40\n[ 3562.141522]  ib_mad_recv_done+0xdf6/0x3000 [ib_core]\n[ 3562.142880]  ? _raw_spin_unlock_irqrestore+0x46/0x70\n[ 3562.144277]  ? ib_mad_send_done+0x1810/0x1810 [ib_core]\n[ 3562.145649]  ? mlx4_ib_destroy_cq+0x2a0/0x2a0 [mlx4_ib]\n[ 3562.147008]  ? _raw_spin_unlock_irqrestore+0x46/0x70\n[ 3562.148380]  ? debug_object_deactivate+0x2b9/0x4a0\n[ 3562.149814]  __ib_process_cq+0xe2/0x1d0 [ib_core]\n[ 3562.151195]  ib_cq_poll_work+0x45/0xf0 [ib_core]\n[ 3562.152577]  process_one_work+0x90c/0x1860\n[ 3562.153959]  ? pwq_dec_nr_in_flight+0x320/0x320\n[ 3562.155320]  worker_thread+0x87/0xbb0\n[ 3562.156687]  ? __kthread_parkme+0xb6/0x180\n[ 3562.158058]  ? process_one_work+0x1860/0x1860\n[ 3562.159429]  kthread+0x320/0x3e0\n[ 3562.161391]  ? kthread_park+0x120/0x120\n[ 3562.162744]  ret_from_fork+0x24/0x30\n...\n[ 3562.187615] Freed by task 31682:\n[ 3562.188602]  save_stack+0x19/0x80\n[ 3562.189586]  __kasan_slab_free+0x11d/0x160\n[ 3562.190571]  kfree+0xf5/0x2f0\n[ 3562.191552]  ib_mad_port_close+0x200/0x380 [ib_core]\n[ 3562.192538]  ib_mad_remove_device+0xf0/0x230 [ib_core]\n[ 3562.193538]  remove_client_context+0xa6/0xe0 [ib_core]\n[ 3562.194514]  disable_device+0x14e/0x260 [ib_core]\n[ 3562.195488]  __ib_unregister_device+0x79/0x150 [ib_core]\n[ 3562.196462]  ib_unregister_device+0x21/0x30 [ib_core]\n[ 3562.197439]  mlx4_ib_remove+0x162/0x690 [mlx4_ib]\n[ 3562.198408]  mlx4_remove_device+0x204/0x2c0 [mlx4_core]\n[ 3562.199381]  mlx4_unregister_interface+0x49/0x1d0 [mlx4_core]\n[ 3562.200356]  mlx4_ib_cleanup+0xc/0x1d [mlx4_ib]\n[ 3562.201329]  __x64_sys_delete_module+0x2d2/0x400\n[ 3562.202288]  do_syscall_64+0x95/0x470\n[ 3562.203277]  entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\nThe problem was that the MAD PD was deallocated before the MAD CQ.\nThere was completion work pending for the CQ when the PD got deallocated.\nWhen the mad completion handling reached procedure\nib_mad_post_receive_mads(), we got a use-after-free bug in the following\nline of code in that procedure:\n   sg_list.lkey = qp_info->port_priv->pd->local_dma_lkey;\n(the pd pointer in the above line is no longer valid, because the\npd has been deallocated).\n\nWe fix this by allocating the PD before the CQ in procedure\nib_mad_port_open(), and deallocating the PD after freeing the CQ\nin procedure ib_mad_port_close().\n\nSince the CQ completion work queue is flushed during ib_free_cq(),\nno completions will be pending for that CQ when the PD is later\ndeallocated.\n\nNote that freeing the CQ before deallocating the PD is the practice\nin the ULPs.\n\nFixes: 4be90bc60df4 (\"IB/mad: Remove ib_get_dma_mr calls\")\nSigned-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>\nSigned-off-by: Leon Romanovsky <leonro@mellanox.com>\nLink: https://lore.kernel.org/r/20190801121449.24973-1-leon@kernel.org\nSigned-off-by: Doug Ledford <dledford@redhat.com>",
        "before_after_code_files": [
          "drivers/infiniband/core/mad.c||drivers/infiniband/core/mad.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/infiniband/core/mad.c||drivers/infiniband/core/mad.c": [
          "File: drivers/infiniband/core/mad.c -> drivers/infiniband/core/mad.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3224:  if (has_smi)",
          "3225:   cq_size *= 2;",
          "3227:  port_priv->cq = ib_alloc_cq(port_priv->device, port_priv, cq_size, 0,",
          "3228:    IB_POLL_UNBOUND_WORKQUEUE);",
          "3229:  if (IS_ERR(port_priv->cq)) {",
          "3230:   dev_err(&device->dev, \"Couldn't create ib_mad CQ\\n\");",
          "3231:   ret = PTR_ERR(port_priv->cq);",
          "3239:   goto error4;",
          "3240:  }",
          "",
          "[Removed Lines]",
          "3232:   goto error3;",
          "3233:  }",
          "3235:  port_priv->pd = ib_alloc_pd(device, 0);",
          "3236:  if (IS_ERR(port_priv->pd)) {",
          "3237:   dev_err(&device->dev, \"Couldn't create ib_mad PD\\n\");",
          "3238:   ret = PTR_ERR(port_priv->pd);",
          "",
          "[Added Lines]",
          "3227:  port_priv->pd = ib_alloc_pd(device, 0);",
          "3228:  if (IS_ERR(port_priv->pd)) {",
          "3229:   dev_err(&device->dev, \"Couldn't create ib_mad PD\\n\");",
          "3230:   ret = PTR_ERR(port_priv->pd);",
          "3231:   goto error3;",
          "3232:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3278: error7:",
          "3279:  destroy_mad_qp(&port_priv->qp_info[0]);",
          "3280: error6:",
          "3283:  ib_free_cq(port_priv->cq);",
          "3284:  cleanup_recv_queue(&port_priv->qp_info[1]);",
          "3285:  cleanup_recv_queue(&port_priv->qp_info[0]);",
          "3286: error3:",
          "3287:  kfree(port_priv);",
          "",
          "[Removed Lines]",
          "3281:  ib_dealloc_pd(port_priv->pd);",
          "3282: error4:",
          "",
          "[Added Lines]",
          "3284: error4:",
          "3285:  ib_dealloc_pd(port_priv->pd);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3312:  destroy_workqueue(port_priv->wq);",
          "3313:  destroy_mad_qp(&port_priv->qp_info[1]);",
          "3314:  destroy_mad_qp(&port_priv->qp_info[0]);",
          "3316:  ib_free_cq(port_priv->cq);",
          "3317:  cleanup_recv_queue(&port_priv->qp_info[1]);",
          "3318:  cleanup_recv_queue(&port_priv->qp_info[0]);",
          "",
          "[Removed Lines]",
          "3315:  ib_dealloc_pd(port_priv->pd);",
          "",
          "[Added Lines]",
          "3316:  ib_dealloc_pd(port_priv->pd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b7e816fc80e668f0ccc8542cec20b9259abace1",
      "candidate_info": {
        "commit_hash": "1b7e816fc80e668f0ccc8542cec20b9259abace1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1b7e816fc80e668f0ccc8542cec20b9259abace1",
        "files": [
          "mm/slub.c"
        ],
        "message": "mm: slub: Fix slab walking for init_on_free\n\nTo properly clear the slab on free with slab_want_init_on_free, we walk\nthe list of free objects using get_freepointer/set_freepointer.\n\nThe value we get from get_freepointer may not be valid.  This isn't an\nissue since an actual value will get written later but this means\nthere's a chance of triggering a bug if we use this value with\nset_freepointer:\n\n  kernel BUG at mm/slub.c:306!\n  invalid opcode: 0000 [#1] PREEMPT PTI\n  CPU: 0 PID: 0 Comm: swapper Not tainted 5.2.0-05754-g6471384a #4\n  RIP: 0010:kfree+0x58a/0x5c0\n  Code: 48 83 05 78 37 51 02 01 0f 0b 48 83 05 7e 37 51 02 01 48 83 05 7e 37 51 02 01 48 83 05 7e 37 51 02 01 48 83 05 d6 37 51 02 01 <0f> 0b 48 83 05 d4 37 51 02 01 48 83 05 d4 37 51 02 01 48 83 05 d4\n  RSP: 0000:ffffffff82603d90 EFLAGS: 00010002\n  RAX: ffff8c3976c04320 RBX: ffff8c3976c04300 RCX: 0000000000000000\n  RDX: ffff8c3976c04300 RSI: 0000000000000000 RDI: ffff8c3976c04320\n  RBP: ffffffff82603db8 R08: 0000000000000000 R09: 0000000000000000\n  R10: ffff8c3976c04320 R11: ffffffff8289e1e0 R12: ffffd52cc8db0100\n  R13: ffff8c3976c01a00 R14: ffffffff810f10d4 R15: ffff8c3976c04300\n  FS:  0000000000000000(0000) GS:ffffffff8266b000(0000) knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: ffff8c397ffff000 CR3: 0000000125020000 CR4: 00000000000406b0\n  Call Trace:\n   apply_wqattrs_prepare+0x154/0x280\n   apply_workqueue_attrs_locked+0x4e/0xe0\n   apply_workqueue_attrs+0x36/0x60\n   alloc_workqueue+0x25a/0x6d0\n   workqueue_init_early+0x246/0x348\n   start_kernel+0x3c7/0x7ec\n   x86_64_start_reservations+0x40/0x49\n   x86_64_start_kernel+0xda/0xe4\n   secondary_startup_64+0xb6/0xc0\n  Modules linked in:\n  ---[ end trace f67eb9af4d8d492b ]---\n\nFix this by ensuring the value we set with set_freepointer is either NULL\nor another value in the chain.\n\nReported-by: kernel test robot <rong.a.chen@intel.com>\nSigned-off-by: Laura Abbott <labbott@redhat.com>\nFixes: 6471384af2a6 (\"mm: security: introduce init_on_alloc=1 and init_on_free=1 boot options\")\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "mm/slub.c||mm/slub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mm/slub.c||mm/slub.c": [
          "File: mm/slub.c -> mm/slub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1432:  void *old_tail = *tail ? *tail : *head;",
          "1433:  int rsize;",
          "1436:   do {",
          "1437:    object = next;",
          "1438:    next = get_freepointer(s, object);",
          "",
          "[Removed Lines]",
          "1435:  if (slab_want_init_on_free(s))",
          "",
          "[Added Lines]",
          "1435:  if (slab_want_init_on_free(s)) {",
          "1436:   void *p = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1445:           : 0;",
          "1446:    memset((char *)object + s->inuse, 0,",
          "1447:           s->size - s->inuse - rsize);",
          "1449:   } while (object != old_tail);",
          "",
          "[Removed Lines]",
          "1448:    set_freepointer(s, object, next);",
          "",
          "[Added Lines]",
          "1450:    set_freepointer(s, object, p);",
          "1451:    p = object;",
          "1453:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f4c82c89ff0e11b31561aa7e547acb10bf650c2",
      "candidate_info": {
        "commit_hash": "5f4c82c89ff0e11b31561aa7e547acb10bf650c2",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5f4c82c89ff0e11b31561aa7e547acb10bf650c2",
        "files": [
          "drivers/gpu/drm/i915/i915_gem_gtt.c"
        ],
        "message": "drm/i915/gtt: Mark the freed page table entries with scratch\n\nOn unwinding the allocation error path and having freed the page table\nentry, it is imperative that we mark it as scratch.\n\n<4> [416.075569] general protection fault: 0000 [#1] PREEMPT SMP PTI\n<4> [416.075801] CPU: 0 PID: 2385 Comm: kworker/u2:11 Tainted: G     U            5.2.0-rc7-CI-Patchwork_13534+ #1\n<4> [416.076162] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.10.1-0-g8891697-prebuilt.qemu-project.org 04/01/2014\n<4> [416.076522] Workqueue: i915 __i915_vm_release [i915]\n<4> [416.076754] RIP: 0010:gen8_ppgtt_cleanup_3lvl+0x58/0xb0 [i915]\n<4> [416.077023] Code: 81 e2 04 fe ff ff 81 c2 ff 01 00 00 4c 8d 74 d6 58 4d 8b 65 00 4d 3b a7 28 02 00 00 74 40 49 8d 5c 24 50 49 81 c4 50 10 00 00 <48> 8b 2b 49 3b af 20 02 00 00 74 13 4c 89 ff 48 89 ee e8 01 fb ff\n<4> [416.077445] RSP: 0018:ffffc9000046bd98 EFLAGS: 00010206\n<4> [416.077625] RAX: 0001000000000000 RBX: 6b6b6b6b6b6b6bbb RCX: 8b4b56d500000000\n<4> [416.077838] RDX: 00000000000001ff RSI: ffff88805a578008 RDI: ffff88805bd0efc8\n<4> [416.078167] RBP: ffff88805bd0efc8 R08: 0000000004e42b93 R09: 0000000000000001\n<4> [416.078381] R10: 0000000000000000 R11: ffff888077a1b0b8 R12: 6b6b6b6b6b6b7bbb\n<4> [416.078594] R13: ffff88805a578058 R14: ffff88805a579058 R15: ffff88805bd0efc8\n<4> [416.078815] FS:  0000000000000000(0000) GS:ffff88807da00000(0000) knlGS:0000000000000000\n<4> [416.079395] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n<4> [416.079851] CR2: 000056160fec2b14 CR3: 0000000071bbc003 CR4: 00000000003606f0\n<4> [416.080388] Call Trace:\n<4> [416.080828]  gen8_ppgtt_cleanup+0x64/0x100 [i915]\n<4> [416.081399]  __i915_vm_release+0xfc/0x1d0 [i915]\n\nFixes: 1d1b5490b91c (\"drm/i915/gtt: Replace struct_mutex serialisation for allocation\")\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nCc: Matthew Auld <matthew.auld@intel.com>\nCc: Mika Kuoppala <mika.kuoppala@intel.com>\nReviewed-by: Matthew Auld <matthew.auld@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20190704201656.15775-1-chris@chris-wilson.co.uk\n(cherry picked from commit e7539b79f703a6b533385088fc15cb5c9ab3f56f)\nSigned-off-by: Jani Nikula <jani.nikula@intel.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/i915_gem_gtt.c||drivers/gpu/drm/i915/i915_gem_gtt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/i915_gem_gtt.c||drivers/gpu/drm/i915/i915_gem_gtt.c": [
          "File: drivers/gpu/drm/i915/i915_gem_gtt.c -> drivers/gpu/drm/i915/i915_gem_gtt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1444:  spin_lock(&pdp->lock);",
          "1445:  if (atomic_dec_and_test(&pd->used)) {",
          "1446:   gen8_ppgtt_set_pdpe(pdp, vm->scratch_pd, pdpe);",
          "1447:   GEM_BUG_ON(!atomic_read(&pdp->used));",
          "1448:   atomic_dec(&pdp->used);",
          "1449:   GEM_BUG_ON(alloc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1447:   pdp->entry[pdpe] = vm->scratch_pd;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1516:  spin_lock(&pml4->lock);",
          "1517:  if (atomic_dec_and_test(&pdp->used)) {",
          "1518:   gen8_ppgtt_set_pml4e(pml4, vm->scratch_pdp, pml4e);",
          "1519:   GEM_BUG_ON(alloc);",
          "1521:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1520:   pml4->entry[pml4e] = vm->scratch_pdp;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b5c8f0063e4b263cf2de82029798183cf85c320",
      "candidate_info": {
        "commit_hash": "2b5c8f0063e4b263cf2de82029798183cf85c320",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2b5c8f0063e4b263cf2de82029798183cf85c320",
        "files": [
          "drivers/block/nbd.c"
        ],
        "message": "nbd: replace kill_bdev() with __invalidate_device() again\n\nCommit abbbdf12497d (\"replace kill_bdev() with __invalidate_device()\")\nonce did this, but 29eaadc03649 (\"nbd: stop using the bdev everywhere\")\nresurrected kill_bdev() and it has been there since then. So buffer_head\nmappings still get killed on a server disconnection, and we can still\nhit the BUG_ON on a filesystem on the top of the nbd device.\n\n  EXT4-fs (nbd0): mounted filesystem with ordered data mode. Opts: (null)\n  block nbd0: Receive control failed (result -32)\n  block nbd0: shutting down sockets\n  print_req_error: I/O error, dev nbd0, sector 66264 flags 3000\n  EXT4-fs warning (device nbd0): htree_dirblock_to_tree:979: inode #2: lblock 0: comm ls: error -5 reading directory block\n  print_req_error: I/O error, dev nbd0, sector 2264 flags 3000\n  EXT4-fs error (device nbd0): __ext4_get_inode_loc:4690: inode #2: block 283: comm ls: unable to read itable block\n  EXT4-fs error (device nbd0) in ext4_reserve_inode_write:5894: IO failure\n  ------------[ cut here ]------------\n  kernel BUG at fs/buffer.c:3057!\n  invalid opcode: 0000 [#1] SMP PTI\n  CPU: 7 PID: 40045 Comm: jbd2/nbd0-8 Not tainted 5.1.0-rc3+ #4\n  Hardware name: Amazon EC2 m5.12xlarge/, BIOS 1.0 10/16/2017\n  RIP: 0010:submit_bh_wbc+0x18b/0x190\n  ...\n  Call Trace:\n   jbd2_write_superblock+0xf1/0x230 [jbd2]\n   ? account_entity_enqueue+0xc5/0xf0\n   jbd2_journal_update_sb_log_tail+0x94/0xe0 [jbd2]\n   jbd2_journal_commit_transaction+0x12f/0x1d20 [jbd2]\n   ? __switch_to_asm+0x40/0x70\n   ...\n   ? lock_timer_base+0x67/0x80\n   kjournald2+0x121/0x360 [jbd2]\n   ? remove_wait_queue+0x60/0x60\n   kthread+0xf8/0x130\n   ? commit_timeout+0x10/0x10 [jbd2]\n   ? kthread_bind+0x10/0x10\n   ret_from_fork+0x35/0x40\n\nWith __invalidate_device(), I no longer hit the BUG_ON with sync or\nunmount on the disconnected device.\n\nFixes: 29eaadc03649 (\"nbd: stop using the bdev everywhere\")\nCc: linux-block@vger.kernel.org\nCc: Ratna Manoj Bolla <manoj.br@gmail.com>\nCc: nbd@other.debian.org\nCc: stable@vger.kernel.org\nCc: David Woodhouse <dwmw@amazon.com>\nReviewed-by: Josef Bacik <josef@toxicpanda.com>\nSigned-off-by: Munehisa Kamata <kamatam@amazon.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "drivers/block/nbd.c||drivers/block/nbd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/block/nbd.c||drivers/block/nbd.c": [
          "File: drivers/block/nbd.c -> drivers/block/nbd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1231:      struct block_device *bdev)",
          "1232: {",
          "1233:  sock_shutdown(nbd);",
          "1235:  nbd_bdev_reset(bdev);",
          "1236:  if (test_and_clear_bit(NBD_HAS_CONFIG_REF,",
          "1237:           &nbd->config->runtime_flags))",
          "",
          "[Removed Lines]",
          "1234:  kill_bdev(bdev);",
          "",
          "[Added Lines]",
          "1234:  __invalidate_device(bdev, true);",
          "",
          "---------------"
        ]
      }
    }
  ]
}