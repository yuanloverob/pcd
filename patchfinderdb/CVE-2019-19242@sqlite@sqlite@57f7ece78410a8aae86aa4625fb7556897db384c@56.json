{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9a2782293c37d360382296558c358d60929d0744",
      "candidate_info": {
        "commit_hash": "9a2782293c37d360382296558c358d60929d0744",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a2782293c37d360382296558c358d60929d0744",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/date.c",
          "src/func.c",
          "src/util.c",
          "src/vdbe.c",
          "src/vdbemem.c",
          "test/cast.test",
          "test/e_expr.test",
          "test/tkt-a8a0d2996a.test"
        ],
        "message": "When casting string values into numeric and the string has a prefix that looks like a number but total string is not a well-formed number, then take extra care that the result is either integer or real depending on what the prefix looks like.  Fix for tickets [e8bedb2a184001] and [4c2d7639f076aa].\n\nFossilOrigin-Name: 67a68af5578f08d2be2e48cf4fd12a6cf35a09c47d259deda81950f7ee1f02f7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/date.c||src/date.c",
          "src/func.c||src/func.c",
          "src/util.c||src/util.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test",
          "test/e_expr.test||test/e_expr.test",
          "test/tkt-a8a0d2996a.test||test/tkt-a8a0d2996a.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: efbf31b82e6e16fda88d8cea54202a8593ff52f2267a44dba828704818162e66",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/date.c||src/date.c": [
          "File: src/date.c -> src/date.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:     return 0;",
          "389:   }else if( sqlite3StrICmp(zDate,\"now\")==0 && sqlite3NotPureFunc(context) ){",
          "390:     return setDateTimeToCurrent(context, p);",
          "392:     setRawDateNumber(p, r);",
          "393:     return 0;",
          "394:   }",
          "",
          "[Removed Lines]",
          "391:   }else if( sqlite3AtoF(zDate, &r, sqlite3Strlen30(zDate), SQLITE_UTF8) ){",
          "",
          "[Added Lines]",
          "391:   }else if( sqlite3AtoF(zDate, &r, sqlite3Strlen30(zDate), SQLITE_UTF8)>0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "724:       if( sqlite3_strnicmp(z, \"weekday \", 8)==0",
          "726:                && (n=(int)r)==r && n>=0 && r<7 ){",
          "727:         sqlite3_int64 Z;",
          "728:         computeYMD_HMS(p);",
          "",
          "[Removed Lines]",
          "725:                && sqlite3AtoF(&z[8], &r, sqlite3Strlen30(&z[8]), SQLITE_UTF8)",
          "",
          "[Added Lines]",
          "725:                && sqlite3AtoF(&z[8], &r, sqlite3Strlen30(&z[8]), SQLITE_UTF8)>0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "781:       double rRounder;",
          "782:       int i;",
          "783:       for(n=1; z[n] && z[n]!=':' && !sqlite3Isspace(z[n]); n++){}",
          "785:         rc = 1;",
          "786:         break;",
          "787:       }",
          "",
          "[Removed Lines]",
          "784:       if( !sqlite3AtoF(z, &r, n, SQLITE_UTF8) ){",
          "",
          "[Added Lines]",
          "784:       if( sqlite3AtoF(z, &r, n, SQLITE_UTF8)<=0 ){",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:       sqlite3_result_error_nomem(context);",
          "398:       return;",
          "399:     }",
          "401:       assert( sqlite3_strglob(\"*Inf\", zBuf)==0 );",
          "402:       r = zBuf[0]=='-' ? -HUGE_VAL : +HUGE_VAL;",
          "403:     }",
          "",
          "[Removed Lines]",
          "400:     if( !sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8) ){",
          "",
          "[Added Lines]",
          "400:     if( sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8)<=0 ){",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "560: #else",
          "561:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "",
          "[Removed Lines]",
          "559:   return z==zEnd && nDigit>0 && eValid && eType>0 ? eType : 0;",
          "",
          "[Added Lines]",
          "561:   if( z==zEnd && nDigit>0 && eValid && eType>0 ){",
          "562:     return eType;",
          "563:   }else if( eType>=2 && (eType==3 || eValid) ){",
          "564:     return -1;",
          "565:   }else{",
          "566:     return 0;",
          "567:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "659:   }",
          "660:   rc = 0;",
          "664:     rc = 1;",
          "666:     int jj = i;",
          "",
          "[Removed Lines]",
          "663:   ){",
          "",
          "[Added Lines]",
          "671:     rc = -1;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:   int rc;",
          "322:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real|MEM_IntReal))==MEM_Str );",
          "323:   rc = sqlite3AtoF(pRec->z, &rValue, pRec->n, enc);",
          "325:   if( rc==1 && alsoAnInt(pRec, rValue, &pRec->u.i) ){",
          "326:     pRec->flags |= MEM_Int;",
          "327:   }else{",
          "",
          "[Removed Lines]",
          "324:   if( rc==0 ) return;",
          "",
          "[Added Lines]",
          "324:   if( rc<=0 ) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424: static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){",
          "425:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal))==0 );",
          "426:   assert( (pMem->flags & (MEM_Str|MEM_Blob))!=0 );",
          "427:   ExpandBlob(pMem);",
          "432:     return MEM_Int;",
          "433:   }",
          "434:   return MEM_Real;",
          "",
          "[Removed Lines]",
          "428:   if( sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc)==0 ){",
          "429:     return 0;",
          "430:   }",
          "431:   if( sqlite3Atoi64(pMem->z, &pMem->u.i, pMem->n, pMem->enc)==0 ){",
          "",
          "[Added Lines]",
          "425:   int rc;",
          "426:   sqlite3_int64 ix;",
          "430:   rc = sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "431:   if( rc<=0 ){",
          "432:     if( rc==0 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1 ){",
          "433:       pMem->u.i = ix;",
          "434:       return MEM_Int;",
          "435:     }else{",
          "436:       return MEM_Real;",
          "437:     }",
          "438:   }else if( rc==1 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)==0 ){",
          "439:     pMem->u.i = ix;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1608:   if( (type1 & type2 & MEM_Int)!=0 ){",
          "1609:     iA = pIn1->u.i;",
          "1610:     iB = pIn2->u.i;",
          "1612:     switch( pOp->opcode ){",
          "1613:       case OP_Add:       if( sqlite3AddInt64(&iB,iA) ) goto fp_math;  break;",
          "1614:       case OP_Subtract:  if( sqlite3SubInt64(&iB,iA) ) goto fp_math;  break;",
          "",
          "[Removed Lines]",
          "1611:     bIntint = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1631:   }else if( (flags & MEM_Null)!=0 ){",
          "1632:     goto arithmetic_result_is_null;",
          "1633:   }else{",
          "1635: fp_math:",
          "1636:     rA = sqlite3VdbeRealValue(pIn1);",
          "1637:     rB = sqlite3VdbeRealValue(pIn2);",
          "",
          "[Removed Lines]",
          "1634:     bIntint = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1663:     }",
          "1664:     pOut->u.r = rB;",
          "1665:     MemSetTypeFlag(pOut, MEM_Real);",
          "1669: #endif",
          "1670:   }",
          "1671:   break;",
          "",
          "[Removed Lines]",
          "1666:     if( ((type1|type2)&(MEM_Real|MEM_IntReal))==0 && !bIntint ){",
          "1667:       sqlite3VdbeIntegerAffinity(pOut);",
          "1668:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:   testcase( pMem->flags & MEM_Null );",
          "718:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))==0 ){",
          "719:     int rc;",
          "720:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "721:     assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "730:         MemSetTypeFlag(pMem, MEM_Int);",
          "731:       }else{",
          "732:         MemSetTypeFlag(pMem, MEM_Real);",
          "733:       }",
          "734:     }",
          "735:   }",
          "736:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))!=0 );",
          "",
          "[Removed Lines]",
          "722:     rc = sqlite3Atoi64(pMem->z, &pMem->u.i, pMem->n, pMem->enc);",
          "723:     if( rc==0 ){",
          "724:       MemSetTypeFlag(pMem, MEM_Int);",
          "725:     }else{",
          "726:       i64 i = pMem->u.i;",
          "727:       sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "728:       if( rc==1 && sqlite3RealSameAsInt(pMem->u.r, i) ){",
          "729:         pMem->u.i = i;",
          "",
          "[Added Lines]",
          "720:     sqlite3_int64 ix;",
          "723:     rc = sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "724:     if( rc<=0 ){",
          "725:       if( rc==0 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1 ){",
          "726:         pMem->u.i = ix;",
          "731:     }else if( rc==1 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)==0 ){",
          "732:       pMem->u.i = ix;",
          "733:       MemSetTypeFlag(pMem, MEM_Int);",
          "734:     }else{",
          "735:       MemSetTypeFlag(pMem, MEM_Real);",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:   SELECT * FROM t1;",
          "389: } {9000000000000000001 9000000000000000001 9000000000000000001 9000000000000000001}",
          "391: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391: # 2019-06-07",
          "392: # https://www.sqlite.org/src/info/4c2d7639f076aa7c",
          "393: do_execsql_test case-7.1 {",
          "394:   SELECT CAST('-' AS NUMERIC);",
          "395: } {0}",
          "396: do_execsql_test case-7.2 {",
          "397:   SELECT CAST('-0' AS NUMERIC);",
          "398: } {0}",
          "399: do_execsql_test case-7.3 {",
          "400:   SELECT CAST('+' AS NUMERIC);",
          "401: } {0}",
          "402: do_execsql_test case-7.4 {",
          "403:   SELECT CAST('/' AS NUMERIC);",
          "404: } {0}",
          "406: # 2019-06-07",
          "407: # https://www.sqlite.org/src/info/e8bedb2a184001bb",
          "408: do_execsql_test case-7.10 {",
          "409:   SELECT '' - 2851427734582196970;",
          "410: } {-2851427734582196970}",
          "411: do_execsql_test case-7.11 {",
          "412:   SELECT 0 - 2851427734582196970;",
          "413: } {-2851427734582196970}",
          "414: do_execsql_test case-7.12 {",
          "415:   SELECT '' - 1;",
          "416: } {-1}",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1650: # is lossless and reversible.",
          "1651: #",
          "1652: do_expr_test e_expr-32.1.1 { CAST('45'   AS NUMERIC)  } integer 45",
          "1654: do_expr_test e_expr-32.1.3 { CAST('45.2' AS NUMERIC)  } real 45.2",
          "1655: do_expr_test e_expr-32.1.4 { CAST('11abc' AS NUMERIC) } integer 11",
          "1656: do_expr_test e_expr-32.1.5 { CAST('11.1abc' AS NUMERIC) } real 11.1",
          "",
          "[Removed Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } integer 45",
          "",
          "[Added Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } real 45.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1701:  integer 9000000000000000001 \\",
          "1702:  integer 9000000000000000001 \\",
          "1703:  integer 9000000000000000001 \\",
          "1705:  integer 9223372036854775807 \\",
          "1706:  integer 9223372036854775807 \\",
          "1707:  integer 9223372036854775807 \\",
          "1708:  real 9.22337203685478e+18 \\",
          "1709:  real 9.22337203685478e+18 \\",
          "1714: ]",
          "1716: # EVIDENCE-OF: R-64550-29191 Note that the result from casting any",
          "",
          "[Removed Lines]",
          "1704:  integer 9000000000000000001 \\",
          "1710:  integer 9223372036854775807 \\",
          "1711:  integer 9223372036854775807 \\",
          "1712:  integer -5 \\",
          "1713:  integer -5 \\",
          "",
          "[Added Lines]",
          "1704:  real 9.0e+18 \\",
          "1710:  real 9.22337203685478e+18 \\",
          "1711:  real 9.22337203685478e+18 \\",
          "1712:  real -5.0 \\",
          "1713:  real -5.0 \\",
          "",
          "---------------"
        ],
        "test/tkt-a8a0d2996a.test||test/tkt-a8a0d2996a.test": [
          "File: test/tkt-a8a0d2996a.test -> test/tkt-a8a0d2996a.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: } {104.5}",
          "85: do_execsql_test 4.4 {",
          "86:   SELECT '-9223372036854775807x'-'1x';",
          "88: do_execsql_test 4.5 {",
          "89:   SELECT '9223372036854775806x'+'1x';",
          "91: do_execsql_test 4.6 {",
          "95: finish_test",
          "",
          "[Removed Lines]",
          "87: } {-9.22337203685478e+18}",
          "90: } {9.22337203685478e+18}",
          "92:   SELECT '1234x'/'10y';",
          "93: } {123.4}",
          "",
          "[Added Lines]",
          "87: } {-9223372036854775808}",
          "90: } {9223372036854775807}",
          "92:   SELECT '1234x'/'10y', '1234x'/'10.y', '1234x'/'1e1y';",
          "93: } {123 123.4 123.4}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4db4b5b4fe62fc9055209e4341d33ed3dd20d70f",
      "candidate_info": {
        "commit_hash": "4db4b5b4fe62fc9055209e4341d33ed3dd20d70f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4db4b5b4fe62fc9055209e4341d33ed3dd20d70f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/pragma4.test"
        ],
        "message": "Avoid including the comment in the output of \"PRAGMA table_info\" in situations where there is a comment following a DEFAULT value within a CREATE TABLE statement.\n\nFossilOrigin-Name: d91095ba7130e974f0c95334760c679a31479b07a3d458e15994a24eee474752",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/pragma4.test||test/pragma4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a0f5eb5c79cc33b7224f3421d2baa02a2a19eb9d6eaa8117dda4a1878b229cb5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:   assert( yyLookahead!=YYNOCODE );",
          "302:   A = yyLookaheadToken.z;",
          "303: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304: scantok(A) ::= . {",
          "305:   assert( yyLookahead!=YYNOCODE );",
          "306:   A = yyLookaheadToken;",
          "307: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308: carglist ::= carglist ccons.",
          "309: carglist ::= .",
          "310: ccons ::= CONSTRAINT nm(X).           {pParse->constraintName = X;}",
          "313: ccons ::= DEFAULT LP(A) expr(X) RP(Z).",
          "314:                             {sqlite3AddDefaultValue(pParse,X,A.z+1,Z.z);}",
          "318:   Expr *p = sqlite3PExpr(pParse, TK_UMINUS, X, 0);",
          "320: }",
          "322:   Expr *p = tokenExpr(pParse, TK_STRING, X);",
          "323:   if( p ){",
          "324:     sqlite3ExprIdToTrueFalse(p);",
          "",
          "[Removed Lines]",
          "311: ccons ::= DEFAULT scanpt(A) term(X) scanpt(Z).",
          "312:                             {sqlite3AddDefaultValue(pParse,X,A,Z);}",
          "315: ccons ::= DEFAULT PLUS(A) term(X) scanpt(Z).",
          "316:                             {sqlite3AddDefaultValue(pParse,X,A.z,Z);}",
          "317: ccons ::= DEFAULT MINUS(A) term(X) scanpt(Z).      {",
          "319:   sqlite3AddDefaultValue(pParse,p,A.z,Z);",
          "321: ccons ::= DEFAULT scanpt id(X).       {",
          "",
          "[Added Lines]",
          "315: ccons ::= DEFAULT scantok(A) term(X).",
          "316:                             {sqlite3AddDefaultValue(pParse,X,A.z,&A.z[A.n]);}",
          "319: ccons ::= DEFAULT PLUS(A) scantok(Z) term(X).",
          "320:                             {sqlite3AddDefaultValue(pParse,X,A.z,&Z.z[Z.n]);}",
          "321: ccons ::= DEFAULT MINUS(A) scantok(Z) term(X). {",
          "323:   sqlite3AddDefaultValue(pParse,p,A.z,&Z.z[Z.n]);",
          "325: ccons ::= DEFAULT scantok id(X).       {",
          "",
          "---------------"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   pragma foreign_key_check('c2')",
          "250: } {1 {no such table: c2}}",
          "252: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: do_execsql_test 5.0 {",
          "253:   CREATE TABLE t4(a DEFAULT 'abc' /* comment */, b DEFAULT -1 -- comment",
          "255:   );",
          "256:   PRAGMA table_info = t4;",
          "257: } {",
          "258:   0 a {} 0 'abc' 0 1 b {} 0 -1 0 2 c {} 0 +4.0 0",
          "259: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e7c00e695ff7fe8ab92e34e5793636b6cf3f420",
      "candidate_info": {
        "commit_hash": "1e7c00e695ff7fe8ab92e34e5793636b6cf3f420",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e7c00e695ff7fe8ab92e34e5793636b6cf3f420",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/without_rowid1.test"
        ],
        "message": "Fix the xferCompatibleIndex() function so that it recognizes that a PRIMARY KEY index for a WITHOUT ROWID table is different from a UNIQUE constraint index on the primary key.  Ticket [302027baf1374498]\n\nFossilOrigin-Name: 34f64f11ca481996b1ff1686bdc5e278946635b6856cd1fe2355fce8e298e0f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 104a2beb57037f9353ffa77096aae0eb64e4682e667f31623bfd3d064dd8d881",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2367:   int i;",
          "2368:   assert( pDest && pSrc );",
          "2369:   assert( pDest->pTable!=pSrc->pTable );",
          "2372:   }",
          "2373:   if( pDest->onError!=pSrc->onError ){",
          "",
          "[Removed Lines]",
          "2370:   if( pDest->nKeyCol!=pSrc->nKeyCol ){",
          "",
          "[Added Lines]",
          "2370:   if( pDest->nKeyCol!=pSrc->nKeyCol || pDest->nColumn!=pSrc->nColumn ){",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:   PRAGMA integrity_check;",
          "431: } {ok}",
          "434: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: # 2019-11-07 ticket https://www.sqlite.org/src/info/302027baf1374498",
          "434: # The xferCompatibleIndex() function confuses a PRIMARY KEY index",
          "435: # with a UNIQUE index.",
          "436: #",
          "437: do_execsql_test 13.10 {",
          "438:   DROP TABLE IF EXISTS t0;",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t0(",
          "441:     c0,",
          "442:     c1 UNIQUE,",
          "443:     PRIMARY KEY(c1, c1)",
          "444:   ) WITHOUT ROWID;",
          "445:   INSERT INTO t0(c0,c1) VALUES('abc','xyz');",
          "446:   CREATE TABLE t1(",
          "447:     c0,",
          "448:     c1 UNIQUE,",
          "449:     PRIMARY KEY(c1, c1)",
          "450:   ) WITHOUT ROWID;",
          "451:   INSERT INTO t1 SELECT * FROM t0;",
          "452:   PRAGMA integrity_check;",
          "453:   SELECT * FROM t0, t1;",
          "454: } {ok abc xyz abc xyz}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6db6598ca53771904d616054add0eaae3528b56",
      "candidate_info": {
        "commit_hash": "d6db6598ca53771904d616054add0eaae3528b56",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d6db6598ca53771904d616054add0eaae3528b56",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Improvements to the sqlite3ExprImpliesNonNullRow() theorem prover.\n\nFossilOrigin-Name: 3fde627616030ca0de87169467e2e453fdc91154942e3a3a92a221df5923b2d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b36813d6467c82159bd3bb69d34ac28fc161a13052ca67d7cf9ad75e2aaea9d5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5033: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5034:   Walker w;",
          "5035:   w.xExprCallback = impliesNotNullRow;",
          "5036:   w.xSelectCallback = 0;",
          "5037:   w.xSelectCallback2 = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5035:   p = sqlite3ExprSkipCollate(p);",
          "5036:   while( p ){",
          "5037:     if( p->op==TK_NOTNULL ){",
          "5038:       p = p->pLeft;",
          "5039:     }else if( p->op==TK_AND ){",
          "5040:       if( sqlite3ExprImpliesNonNullRow(p->pLeft, iTab) ) return 1;",
          "5041:       p = p->pRight;",
          "5042:     }else{",
          "5043:       break;",
          "5044:     }",
          "5045:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31ab7d8e5c2fc895d12907b71050b20f5987b891",
      "candidate_info": {
        "commit_hash": "31ab7d8e5c2fc895d12907b71050b20f5987b891",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31ab7d8e5c2fc895d12907b71050b20f5987b891",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/memdb.c",
          "test/fuzzcheck.c",
          "test/fuzzdata8.db"
        ],
        "message": "Extend fuzzcheck so that it can process dbsqlfuzz cases. Add a collection of interesting dbsqlfuzz cases to the standard test suite.\n\nFossilOrigin-Name: e2991a7ecf5dd241c4bab7c7cadc4901043fb0c3ea1fac70b684f6d8332677f1",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "589:   $(TOP)/test/fuzzdata4.db \\",
          "590:   $(TOP)/test/fuzzdata5.db \\",
          "591:   $(TOP)/test/fuzzdata6.db \\",
          "594: # Standard options to testfixture",
          "595: #",
          "",
          "[Removed Lines]",
          "592:   $(TOP)/test/fuzzdata7.db",
          "",
          "[Added Lines]",
          "592:   $(TOP)/test/fuzzdata7.db \\",
          "593:   $(TOP)/test/fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "612: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ",
          "613: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "614: FUZZCHECK_OPT += -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "615: FUZZCHECK_SRC = $(TOP)/test/fuzzcheck.c $(TOP)/test/ossfuzz.c",
          "616: DBFUZZ_OPT =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616: FUZZCHECK_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "617: FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS4",
          "618: #FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS5",
          "619: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "620: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "621: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1626:   $(TOP)\\test\\fuzzdata4.db \\",
          "1627:   $(TOP)\\test\\fuzzdata5.db \\",
          "1628:   $(TOP)\\test\\fuzzdata6.db \\",
          "1630: # <</mark>>",
          "1632: # Additional compiler options for the shell.  These are only effective",
          "",
          "[Removed Lines]",
          "1629:   $(TOP)\\test\\fuzzdata7.db",
          "",
          "[Added Lines]",
          "1629:   $(TOP)\\test\\fuzzdata7.db \\",
          "1630:   $(TOP)\\test\\fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1644: #",
          "1645: MPTESTER_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_FTS5",
          "1646: FUZZERSHELL_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1",
          "1648: FUZZCHECK_SRC = $(TOP)\\test\\fuzzcheck.c $(TOP)\\test\\ossfuzz.c",
          "1649: OSSSHELL_SRC = $(TOP)\\test\\ossshell.c $(TOP)\\test\\ossfuzz.c",
          "1650: DBFUZZ_COMPILE_OPTS = -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION",
          "",
          "[Removed Lines]",
          "1647: FUZZCHECK_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ -DSQLITE_MAX_MEMORY=50000000 -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "",
          "[Added Lines]",
          "1648: FUZZCHECK_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ -DSQLITE_MAX_MEMORY=50000000 -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "1649: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DESERIALIZE",
          "1650: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_FTS4",
          "1651: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_RTREE",
          "1652: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_GEOPOLY",
          "1653: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1731:  $(LTLINK) $(NO_WARN) $(DBFUZZ_COMPILE_OPTS) $(TOP)\\test\\dbfuzz.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1733: fuzzcheck.exe: $(FUZZCHECK_SRC) $(SQLITE3C) $(SQLITE3H)",
          "1736: ossshell.exe: $(OSSSHELL_SRC) $(SQLITE3C) $(SQLITE3H)",
          "1739: sessionfuzz.exe: zlib $(TOP)\\test\\sessionfuzz.c $(SQLITE3C) $(SQLITE3H)",
          "1740:  $(LTLINK) $(NO_WARN) -I$(ZLIBINCDIR) $(TOP)\\test\\sessionfuzz.c /link $(LDFLAGS) $(LTLINKOPTS) /LIBPATH:$(ZLIBLIBDIR) $(ZLIBLIB)",
          "",
          "[Removed Lines]",
          "1734:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_COMPILE_OPTS) $(FUZZCHECK_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1737:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_COMPILE_OPTS) $(OSSSHELL_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "[Added Lines]",
          "1741:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_OPTS) $(FUZZCHECK_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1744:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_OPTS) $(OSSSHELL_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:   $(TOP)/test/fuzzdata4.db \\",
          "511:   $(TOP)/test/fuzzdata5.db \\",
          "512:   $(TOP)/test/fuzzdata6.db \\",
          "515: # Standard options to testfixture",
          "516: #",
          "",
          "[Removed Lines]",
          "513:   $(TOP)/test/fuzzdata7.db",
          "",
          "[Added Lines]",
          "513:   $(TOP)/test/fuzzdata7.db \\",
          "514:   $(TOP)/test/fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5",
          "532: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "533: FUZZCHECK_OPT += -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "534: DBFUZZ_OPT =",
          "535: KV_OPT = -DSQLITE_THREADSAFE=0 -DSQLITE_DIRECT_OVERFLOW_READ",
          "536: ST_OPT = -DSQLITE_THREADSAFE=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535: FUZZCHECK_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "536: FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS4",
          "537: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "538: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "539: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5eb5e8289fa71e5e29e081d33d4a59c64b463bf6b06d7070c05c46d77d808ad4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   void **pp",
          "311: ){",
          "312:   MemFile *p = (MemFile *)pFile;",
          "315:   return SQLITE_OK;",
          "316: }",
          "",
          "[Removed Lines]",
          "313:   p->nMmap++;",
          "",
          "[Added Lines]",
          "313:   if( iOfst+iAmt>p->sz ){",
          "314:     assert( CORRUPT_DB );",
          "316:   }else{",
          "317:     p->nMmap++;",
          "319:   }",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #include <string.h>",
          "70: #include <stdarg.h>",
          "71: #include <ctype.h>",
          "72: #include \"sqlite3.h\"",
          "73: #define ISSPACE(X) isspace((unsigned char)(X))",
          "74: #define ISDIGIT(X) isdigit((unsigned char)(X))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: #include <assert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:   return t;",
          "420: }",
          "424: static int inmemClose(sqlite3_file *pFile){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430: typedef struct FuzzCtx {",
          "439: } FuzzCtx;",
          "442: static int eVerbosity = 0;",
          "445: static int bVdbeDebug = 0;",
          "451: static unsigned int mxProgressCb = 2000;",
          "454: static int lengthLimit = 1000000;",
          "457: static int vdbeOpLimit = 25000;",
          "460: static sqlite3_int64 maxDbSize = 104857600;",
          "467: static unsigned int hexToInt(unsigned int h){",
          "468: #ifdef SQLITE_EBCDIC",
          "470: #else",
          "472: #endif",
          "473:   return h & 0xf;",
          "474: }",
          "483: static int isOffset(",
          "488: ){",
          "489:   int i;",
          "490:   unsigned int k = 0;",
          "491:   unsigned char c;",
          "492:   for(i=1; i<nIn && (c = zIn[i])!=']'; i++){",
          "493:     if( !isxdigit(c) ) return 0;",
          "494:     k = k*16 + hexToInt(c);",
          "495:   }",
          "496:   if( i==nIn ) return 0;",
          "499:   return 1;",
          "500: }",
          "513: static int decodeDatabase(",
          "518: ){",
          "526:   unsigned char b = 0;",
          "527:   if( nIn<4 ) return -1;",
          "528:   n = (unsigned int)nIn;",
          "529:   a = sqlite3_malloc( nAlloc );",
          "530:   if( a==0 ){",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "533:   }",
          "534:   memset(a, 0, nAlloc);",
          "535:   for(i=k=0; i<n; i++){",
          "536:     char c = zIn[i];",
          "537:     if( isxdigit(c) ){",
          "538:       k++;",
          "539:       if( k & 1 ){",
          "540:         b = hexToInt(c)*16;",
          "541:       }else{",
          "542:         b += hexToInt(c);",
          "543:         j = k/2 - 1;",
          "544:         if( j>=nAlloc ){",
          "545:           sqlite3_uint64 newSize;",
          "546:           if( nAlloc==MX_FILE_SZ || j>=MX_FILE_SZ ){",
          "547:             if( eVerbosity ){",
          "548:               fprintf(stderr, \"Input database too big: max %d bytes\\n\",",
          "549:                       MX_FILE_SZ);",
          "550:             }",
          "551:             sqlite3_free(a);",
          "552:             return -1;",
          "553:           }",
          "554:           newSize = nAlloc*2;",
          "555:           if( newSize<=j ){",
          "556:             newSize = (j+4096)&~4095;",
          "557:           }",
          "558:           if( newSize>MX_FILE_SZ ){",
          "559:             if( j>=MX_FILE_SZ ){",
          "560:               sqlite3_free(a);",
          "561:               return -1;",
          "562:             }",
          "563:             newSize = MX_FILE_SZ;",
          "564:           }",
          "565:           a = sqlite3_realloc( a, newSize );",
          "566:           if( a==0 ){",
          "567:             fprintf(stderr, \"Out of memory!\\n\");",
          "568:             exit(1);",
          "569:           }",
          "570:           assert( newSize > nAlloc );",
          "571:           memset(a+nAlloc, 0, newSize - nAlloc);",
          "572:           nAlloc = newSize;",
          "573:         }",
          "574:         if( j>=(unsigned)mx ){",
          "575:           mx = (j + 4095)&~4095;",
          "576:           if( mx>MX_FILE_SZ ) mx = MX_FILE_SZ;",
          "577:         }",
          "578:         assert( j<nAlloc );",
          "579:         a[j] = b;",
          "580:       }",
          "581:     }else if( zIn[i]=='[' && i<n-3 && isOffset(zIn+i, nIn-i, &k, &i) ){",
          "582:       continue;",
          "583:    }else if( zIn[i]=='\\n' && i<n-4 && memcmp(zIn+i,\"\\n--\\n\",4)==0 ){",
          "584:       i += 4;",
          "585:       break;",
          "586:     }",
          "587:   }",
          "590:   return i;",
          "591: }",
          "599: static int progress_handler(void *pClientData) {",
          "600:   FuzzCtx *p = (FuzzCtx*)pClientData;",
          "601:   sqlite3_int64 iNow = timeOfDay();",
          "602:   int rc = iNow>=p->iCutoffTime;",
          "603:   sqlite3_int64 iDiff = iNow - p->iLastCb;",
          "604:   if( iDiff > p->mxInterval ) p->mxInterval = iDiff;",
          "605:   p->nCb++;",
          "606:   if( rc==0 && p->mxCb>0 && p->mxCb<=p->nCb ) rc = 1;",
          "607:   if( rc && !p->timeoutHit && eVerbosity>=2 ){",
          "608:     printf(\"Timeout on progress callback %d\\n\", p->nCb);",
          "609:     fflush(stdout);",
          "610:     p->timeoutHit = 1;",
          "611:   }",
          "612:   return rc;",
          "613: }",
          "622: static int block_troublesome_sql(",
          "623:   void *Notused,",
          "624:   int eCode,",
          "625:   const char *zArg1,",
          "626:   const char *zArg2,",
          "627:   const char *zArg3,",
          "628:   const char *zArg4",
          "629: ){",
          "630:   (void)Notused;",
          "631:   (void)zArg2;",
          "632:   (void)zArg3;",
          "633:   (void)zArg4;",
          "634:   if( eCode==SQLITE_PRAGMA ){",
          "635:     if( sqlite3_strnicmp(\"vdbe_\", zArg1, 5)==0",
          "636:      || sqlite3_stricmp(\"parser_trace\", zArg1)==0",
          "637:      || sqlite3_stricmp(\"temp_store_directory\", zArg1)==0",
          "638:     ){",
          "639:       return SQLITE_DENY;",
          "640:     }",
          "641:   }else if( (eCode==SQLITE_ATTACH || eCode==SQLITE_DETACH)",
          "642:             && zArg1 && zArg1[0] ){",
          "643:     return SQLITE_DENY;",
          "644:   }",
          "645:   return SQLITE_OK;",
          "646: }",
          "651: static int runDbSql(sqlite3 *db, const char *zSql){",
          "652:   int rc;",
          "653:   sqlite3_stmt *pStmt;",
          "654:   while( isspace(zSql[0]) ) zSql++;",
          "655:   if( zSql[0]==0 ) return SQLITE_OK;",
          "656:   if( eVerbosity>=4 ){",
          "657:     printf(\"RUNNING-SQL: [%s]\\n\", zSql);",
          "658:     fflush(stdout);",
          "659:   }",
          "660:   rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);",
          "661:   if( rc==SQLITE_OK ){",
          "662:     while( (rc = sqlite3_step(pStmt))==SQLITE_ROW ){",
          "663:       if( eVerbosity>=5 ){",
          "664:         int j;",
          "665:         for(j=0; j<sqlite3_column_count(pStmt); j++){",
          "666:           if( j ) printf(\",\");",
          "667:           switch( sqlite3_column_type(pStmt, j) ){",
          "668:             case SQLITE_NULL: {",
          "669:               printf(\"NULL\");",
          "670:               break;",
          "671:             }",
          "672:             case SQLITE_INTEGER:",
          "673:             case SQLITE_FLOAT: {",
          "674:               printf(\"%s\", sqlite3_column_text(pStmt, j));",
          "675:               break;",
          "676:             }",
          "677:             case SQLITE_BLOB: {",
          "678:               int n = sqlite3_column_bytes(pStmt, j);",
          "679:               int i;",
          "680:               const unsigned char *a;",
          "681:               a = (const unsigned char*)sqlite3_column_blob(pStmt, j);",
          "682:               printf(\"x'\");",
          "683:               for(i=0; i<n; i++){",
          "684:                 printf(\"%02x\", a[i]);",
          "685:               }",
          "686:               printf(\"'\");",
          "687:               break;",
          "688:             }",
          "689:             case SQLITE_TEXT: {",
          "690:               int n = sqlite3_column_bytes(pStmt, j);",
          "691:               int i;",
          "692:               const unsigned char *a;",
          "693:               a = (const unsigned char*)sqlite3_column_blob(pStmt, j);",
          "694:               printf(\"'\");",
          "695:               for(i=0; i<n; i++){",
          "696:                 if( a[i]=='\\'' ){",
          "697:                   printf(\"''\");",
          "698:                 }else{",
          "699:                   putchar(a[i]);",
          "700:                 }",
          "701:               }",
          "702:               printf(\"'\");",
          "703:               break;",
          "704:             }",
          "707:         printf(\"\\n\");",
          "708:         fflush(stdout);",
          "711:     if( rc!=SQLITE_DONE && eVerbosity>=4 ){",
          "712:       printf(\"SQL-ERROR: (%d) %s\\n\", rc, sqlite3_errmsg(db));",
          "713:       fflush(stdout);",
          "714:     }",
          "715:   }else if( eVerbosity>=4 ){",
          "716:     printf(\"SQL-ERROR (%d): %s\\n\", rc, sqlite3_errmsg(db));",
          "717:     fflush(stdout);",
          "719:   return sqlite3_finalize(pStmt);",
          "720: }",
          "723: int runCombinedDbSqlInput(const uint8_t *aData, size_t nByte){",
          "734:   if( nByte<10 ) return 0;",
          "735:   if( sqlite3_initialize() ) return 0;",
          "736:   if( sqlite3_memory_used()!=0 ){",
          "737:     int nAlloc = 0;",
          "738:     int nNotUsed = 0;",
          "739:     sqlite3_status(SQLITE_STATUS_MALLOC_COUNT, &nAlloc, &nNotUsed, 0);",
          "740:     fprintf(stderr,\"Memory leak in mutator: %lld bytes in %d allocations\\n\",",
          "741:             sqlite3_memory_used(), nAlloc);",
          "742:     exit(1);",
          "743:   }",
          "744:   memset(&cx, 0, sizeof(cx));",
          "745:   iSql = decodeDatabase((unsigned char*)aData, (int)nByte, &aDb, &nDb);",
          "746:   if( iSql<0 ) return 0;",
          "747:   nSql = nByte - iSql;",
          "748:   if( eVerbosity>=3 ){",
          "749:     printf(",
          "750:       \"****** %d-byte input, %d-byte database, %d-byte script \"",
          "751:       \"******\\n\", (int)nByte, nDb, nSql);",
          "752:     fflush(stdout);",
          "753:   }",
          "754:   rc = sqlite3_open(0, &cx.db);",
          "755:   if( rc ) return 1;",
          "756:   if( bVdbeDebug ){",
          "757:     sqlite3_exec(cx.db, \"PRAGMA vdbe_debug=ON\", 0, 0, 0);",
          "758:   }",
          "765:   cx.iLastCb = timeOfDay();",
          "767:   cx.mxCb = mxProgressCb;",
          "768: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "769:   sqlite3_progress_handler(cx.db, 10, progress_handler, (void*)&cx);",
          "770: #endif",
          "774:   if( vdbeOpLimit>0 ){",
          "775:     sqlite3_limit(cx.db, SQLITE_LIMIT_VDBE_OP, vdbeOpLimit);",
          "776:   }",
          "777:   if( lengthLimit>0 ){",
          "778:     sqlite3_limit(cx.db, SQLITE_LIMIT_LENGTH, lengthLimit);",
          "779:   }",
          "781:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "782:     aDb[18] = aDb[19] = 1;",
          "783:   }",
          "784:   rc = sqlite3_deserialize(cx.db, \"main\", aDb, nDb, nDb,",
          "785:           SQLITE_DESERIALIZE_RESIZEABLE |",
          "786:           SQLITE_DESERIALIZE_FREEONCLOSE);",
          "787:   if( rc ){",
          "788:     fprintf(stderr, \"sqlite3_deserialize() failed with %d\\n\", rc);",
          "789:     goto testrun_finished;",
          "790:   }",
          "791:   if( maxDbSize>0 ){",
          "792:     sqlite3_int64 x = maxDbSize;",
          "793:     sqlite3_file_control(cx.db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &x);",
          "794:   }",
          "797:   if( eVerbosity>=5 ){",
          "798:     sqlite3_exec(cx.db, \"PRAGMA vdbe_debug=ON;\", 0, 0, 0);",
          "799:   }",
          "803:   sqlite3_set_authorizer(cx.db, block_troublesome_sql, 0);",
          "806:   sqlite3_randomness(0,0);",
          "808:   zSql = sqlite3_malloc( nSql + 1 );",
          "809:   if( zSql==0 ){",
          "810:     fprintf(stderr, \"Out of memory!\\n\");",
          "811:   }else{",
          "812:     memcpy(zSql, aData+iSql, nSql);",
          "813:     zSql[nSql] = 0;",
          "814:     for(i=j=0; zSql[i]; i++){",
          "815:       if( zSql[i]==';' ){",
          "816:         char cSaved = zSql[i+1];",
          "817:         zSql[i+1] = 0;",
          "818:         if( sqlite3_complete(zSql+j) ){",
          "819:           rc = runDbSql(cx.db, zSql+j);",
          "820:           j = i+1;",
          "821:         }",
          "822:         zSql[i+1] = cSaved;",
          "823:         if( rc==SQLITE_INTERRUPT || progress_handler(&cx) ){",
          "824:           goto testrun_finished;",
          "825:         }",
          "826:       }",
          "827:     }",
          "828:     if( j<i ){",
          "829:       runDbSql(cx.db, zSql+j);",
          "830:     }",
          "831:   }",
          "832: testrun_finished:",
          "833:   sqlite3_free(zSql);",
          "834:   rc = sqlite3_close(cx.db);",
          "835:   if( rc!=SQLITE_OK ){",
          "836:     fprintf(stdout, \"sqlite3_close() returns %d\\n\", rc);",
          "837:   }",
          "838:   if( eVerbosity>=2 ){",
          "839:     fprintf(stdout, \"Peak memory usages: %f MB\\n\",",
          "840:        sqlite3_memory_highwater(1) / 1000000.0);",
          "841:   }",
          "842:   if( sqlite3_memory_used()!=0 ){",
          "843:     int nAlloc = 0;",
          "844:     int nNotUsed = 0;",
          "845:     sqlite3_status(SQLITE_STATUS_MALLOC_COUNT, &nAlloc, &nNotUsed, 0);",
          "846:     fprintf(stderr,\"Memory leak: %lld bytes in %d allocations\\n\",",
          "847:             sqlite3_memory_used(), nAlloc);",
          "848:     exit(1);",
          "849:   }",
          "850:   return 0;",
          "851: }",
          "861: static int isDbSql(unsigned char *a, int n){",
          "862:   unsigned char buf[12];",
          "863:   int i;",
          "864:   if( n>4 && memcmp(a,\"\\n--\\n\",4)==0 ) return 1;",
          "865:   while( n>0 && isspace(a[0]) ){ a++; n--; }",
          "866:   for(i=0; n>0 && i<8; n--, a++){",
          "867:     if( isxdigit(a[0]) ) buf[i++] = a[0];",
          "868:   }",
          "869:   if( i==8 && memcmp(buf,\"53514c69\",8)==0 ) return 1;",
          "870:   return 0;",
          "871: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "795:   return (int)(isNeg? -v : v);",
          "796: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1254: static int numberOfVChar(const char *z){",
          "1255:   int N = 0;",
          "1256:   while( z[0] && z[0]=='v' ){",
          "1257:     z++;",
          "1258:     N++;",
          "1259:   }",
          "1260:   return z[0]==0 ? N : 0;",
          "1261: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "951:       if( strcmp(z,\"quiet\")==0 || strcmp(z,\"q\")==0 ){",
          "952:         quietFlag = 1;",
          "953:         verboseFlag = 0;",
          "954:       }else",
          "955:       if( strcmp(z,\"rebuild\")==0 ){",
          "956:         rebuildFlag = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420:         eVerbosity = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "973:         fatalError(\"timeout is not available on non-unix systems\");",
          "974: #endif",
          "975:       }else",
          "977:         quietFlag = 0;",
          "978:         verboseFlag++;",
          "979:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "980:       }else",
          "981:       {",
          "982:         fatalError(\"unknown option: %s\", argv[i]);",
          "983:       }",
          "",
          "[Removed Lines]",
          "976:       if( strcmp(z,\"verbose\")==0 || strcmp(z,\"v\")==0 ){",
          "",
          "[Added Lines]",
          "1443:       if( strcmp(z,\"verbose\")==0 ){",
          "1446:         eVerbosity++;",
          "1447:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "1448:       }else",
          "1449:       if( (nV = numberOfVChar(z))>=1 ){",
          "1450:         quietFlag = 0;",
          "1451:         verboseFlag += nV;",
          "1452:         eVerbosity += nV;",
          "1455:       if( strcmp(z,\"version\")==0 ){",
          "1456:         int ii;",
          "1457:         const char *z;",
          "1458:         printf(\"SQLite %s %s\\n\", sqlite3_libversion(), sqlite3_sourceid());",
          "1459:         for(ii=0; (z = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1460:           printf(\"%s\\n\", z);",
          "1461:         }",
          "1462:         return 0;",
          "1463:       }else",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1231:     if( !verboseFlag && !quietFlag ) printf(\"%s:\", zDbName);",
          "1232:     for(pSql=g.pFirstSql; pSql; pSql=pSql->pNext){",
          "1233:       for(pDb=g.pFirstDb; pDb; pDb=pDb->pNext){",
          "1234:         int openFlags;",
          "1235:         const char *zVfs = \"inmem\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1716:       if( isDbSql(pSql->a, pSql->sz) ){",
          "1717:         sqlite3_snprintf(sizeof(g.zTestName), g.zTestName, \"sqlid=%d\",pSql->id);",
          "1718:         if( verboseFlag ){",
          "1719:           printf(\"%s\\n\", g.zTestName);",
          "1720:           fflush(stdout);",
          "1721:         }else if( !quietFlag ){",
          "1722:           static int prevAmt = -1;",
          "1723:           int idx = pSql->seq;",
          "1724:           int amt = idx*10/(g.nSql);",
          "1725:           if( amt!=prevAmt ){",
          "1726:             printf(\" %d%%\", amt*10);",
          "1727:             fflush(stdout);",
          "1728:             prevAmt = amt;",
          "1729:           }",
          "1730:         }",
          "1731:         runCombinedDbSqlInput(pSql->a, pSql->sz);",
          "1732:         nTest++;",
          "1733:         g.zTestName[0] = 0;",
          "1734:         continue;",
          "1735:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}