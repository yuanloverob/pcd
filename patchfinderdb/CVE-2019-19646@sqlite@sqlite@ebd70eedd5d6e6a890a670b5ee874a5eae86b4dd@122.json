{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a9082f6d773fad00926f64650601104827bd319",
      "candidate_info": {
        "commit_hash": "1a9082f6d773fad00926f64650601104827bd319",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a9082f6d773fad00926f64650601104827bd319",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/gencol1.test"
        ],
        "message": "Omit the optimization that reduces the column-count on rowid-table cursors when the table has generated columns, because we do not know what columns the generator expressions might try to access.\n\nFossilOrigin-Name: e6c96ed91e7a96d2bd30ea9df132644ac02d5a321a62f81f8f3984a8e49ed94b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/gencol1.test||test/gencol1.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/gencol1.test||test/gencol1.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7c52f5478f9ecf5c078208759143ae9de43c1bf191dfcd74acb8bd169d4dc883",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5014:       assert( pTabItem->iCursor==pLevel->iTabCur );",
          "5015:       testcase( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol==BMS-1 );",
          "5016:       testcase( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol==BMS );",
          "5018:         Bitmask b = pTabItem->colUsed;",
          "5019:         int n = 0;",
          "5020:         for(; b; b=b>>1, n++){}",
          "",
          "[Removed Lines]",
          "5017:       if( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol<BMS && HasRowid(pTab) ){",
          "",
          "[Added Lines]",
          "5017:       if( pWInfo->eOnePass==ONEPASS_OFF",
          "5018:        && pTab->nCol<BMS",
          "5019:        && (pTab->tabFlags & (TF_HasGenerated|TF_WithoutRowid))==0",
          "5020:       ){",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   REPLACE INTO t0(c0,c2,c3) VALUES(0,0,0),(0,0,0);",
          "177: } {1 {FOREIGN KEY constraint failed}}",
          "179: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: # 2019-11-01 Problem found while adding new foreign key test cases in TH3.",
          "180: db close",
          "181: sqlite3 db :memory:",
          "182: do_execsql_test gencol1-5.100 {",
          "183:   PRAGMA foreign_keys=ON;",
          "184:   CREATE TABLE t1(",
          "185:     gcb AS (b*1),",
          "186:     a INTEGER PRIMARY KEY,",
          "187:     gcc AS (c+0),",
          "188:     b UNIQUE,",
          "189:     gca AS (1*a+0),",
          "190:     c UNIQUE",
          "191:   ) WITHOUT ROWID;",
          "192:   INSERT INTO t1 VALUES(1,2,3);",
          "193:   INSERT INTO t1 VALUES(4,5,6);",
          "194:   INSERT INTO t1 VALUES(7,8,9);",
          "195:   CREATE TABLE t1a(",
          "196:     gcx AS (x+0) REFERENCES t1(a) ON DELETE CASCADE,",
          "197:     id,",
          "198:     x,",
          "199:     gcid AS (1*id)",
          "200:   );",
          "201:   INSERT INTO t1a VALUES(1, 1);",
          "202:   INSERT INTO t1a VALUES(2, 4);",
          "203:   INSERT INTO t1a VALUES(3, 7);",
          "204:   DELETE FROM t1 WHERE b=5;",
          "205:   SELECT id,x,'|' FROM t1a ORDER BY id;",
          "206: } {1 1 | 3 7 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "255a81f10a5885a17d99ea20e13e1641029e6e3b",
      "candidate_info": {
        "commit_hash": "255a81f10a5885a17d99ea20e13e1641029e6e3b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/255a81f10a5885a17d99ea20e13e1641029e6e3b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c",
          "test/printf.test"
        ],
        "message": "Modify sqlite3_str_finish() and sqlite3VMPrintf() so that they always return NULL on any OOM or SQLITE_LIMIT_LENGTH error.\n\nFossilOrigin-Name: e7144ffd21294d7aebbfa6aa5a262797a6d16de11193f1bf6b75f5f27b04c940",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c",
          "test/printf.test||test/printf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c13d563925db12bc2c91ff9432050261e5bd39d960e2739777a66bf804df2e31",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: static void setStrAccumError(StrAccum *p, u8 eError){",
          "137:   assert( eError==SQLITE_NOMEM || eError==SQLITE_TOOBIG );",
          "138:   p->accError = eError;",
          "140: }",
          "",
          "[Removed Lines]",
          "139:   p->nAlloc = 0;",
          "",
          "[Added Lines]",
          "139:   if( p->mxAlloc ) sqlite3_str_reset(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167: static char *printfTempBuf(sqlite3_str *pAccum, sqlite3_int64 n){",
          "168:   char *z;",
          "169:   if( n>pAccum->nAlloc && n>pAccum->mxAlloc ){",
          "170:     setStrAccumError(pAccum, SQLITE_TOOBIG);",
          "171:     return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:   if( pAccum->accError ) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "885:     return 0;",
          "886:   }",
          "887:   if( p->mxAlloc==0 ){",
          "889:     setStrAccumError(p, SQLITE_TOOBIG);",
          "891:   }else{",
          "892:     char *zOld = isMalloced(p) ? p->zText : 0;",
          "893:     i64 szNew = p->nChar;",
          "",
          "[Removed Lines]",
          "888:     N = p->nAlloc - p->nChar - 1;",
          "890:     return N;",
          "",
          "[Added Lines]",
          "890:     return p->nAlloc - p->nChar - 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "959:   assert( z!=0 || N==0 );",
          "960:   assert( p->zText!=0 || p->nChar==0 || p->accError );",
          "961:   assert( N>=0 );",
          "963:   if( p->nChar+N >= p->nAlloc ){",
          "964:     enlargeAndAppend(p,z,N);",
          "965:   }else if( N ){",
          "",
          "[Removed Lines]",
          "962:   assert( p->accError==0 || p->nAlloc==0 );",
          "",
          "[Added Lines]",
          "962:   assert( p->accError==0 || p->nAlloc==0 || p->mxAlloc==0 );",
          "",
          "---------------"
        ],
        "test/printf.test||test/printf.test": [
          "File: test/printf.test -> test/printf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "540: } {abc: 1 1 (1e-20) :xyz}",
          "541: do_test printf-2.1.2.10 {",
          "542:   sqlite3_mprintf_double {abc: %*.*f}  2000000000 1000000000 1.0e-20",
          "544: do_test printf-2.1.3.1 {",
          "545:   sqlite3_mprintf_double {abc: (%*.*f) :xyz} 1 1 1.0",
          "546: } {abc: (1.0) :xyz}",
          "",
          "[Removed Lines]",
          "543: } {abc: }",
          "",
          "[Added Lines]",
          "543: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2b7a7693e99dd70ff109b9ea7e52bc2eaaff071",
      "candidate_info": {
        "commit_hash": "e2b7a7693e99dd70ff109b9ea7e52bc2eaaff071",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2b7a7693e99dd70ff109b9ea7e52bc2eaaff071",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/mutex.h",
          "src/shell.c.in",
          "src/test1.c"
        ],
        "message": "Disable sqlite3_drop_module() tests when virtual tables are omitted from the build.\n\nFossilOrigin-Name: 9f4035f91a9f914797c67afbf19139b2cd25aea48595f7254fe5d18cd693d972",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/mutex.h||src/mutex.h",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2394879698107479270c9d899c704de3756ceae177a338b3c37844e2a31aa6dd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/mutex.h||src/mutex.h": [
          "File: src/mutex.h -> src/mutex.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #define MUTEX_LOGIC(X)",
          "68: #else",
          "69: #define MUTEX_LOGIC(X)            X",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: int sqlite3_mutex_held(sqlite3_mutex*);",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9419:   }else",
          "9423:   if( c=='u' && strncmp(azArg[0], \"unmodule\", n)==0 ){",
          "9424:     int ii;",
          "9425:     int lenOpt;",
          "",
          "[Removed Lines]",
          "9422: #ifdef SQLITE_DEBUG",
          "",
          "[Added Lines]",
          "9422: #if defined(SQLITE_DEBUG) && !defined(SQLITE_OMIT_VIRTUALTABLE)",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1131:     return TCL_ERROR;",
          "1132:   }",
          "1133:   if( getDbPointer(interp, argv[1], &db) ) return TCL_ERROR;",
          "1134:   sqlite3_drop_modules(db, argc>2 ? (const char**)(argv+2) : 0);",
          "1135:   return TCL_OK;",
          "1136: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1134: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "1136: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f69af053dcaee472a9d2391db22cd682ed491d39",
      "candidate_info": {
        "commit_hash": "f69af053dcaee472a9d2391db22cd682ed491d39",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f69af053dcaee472a9d2391db22cd682ed491d39",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 3ff220ad378d547538b4501e6b2201e835a2c66891e5e40856db377c101a50e5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b10df2b569e356551cf51ca179f307e4f8827413ee9feb886db1f1e0650e6c5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3805:   idx = getVarint32(aKey, szHdr);",
          "3806:   d = szHdr;",
          "3807:   u = 0;",
          "3809:     u32 serial_type;",
          "3811:     idx += getVarint32(&aKey[idx], serial_type);",
          "",
          "[Removed Lines]",
          "3808:   while( idx<szHdr && d<=nKey ){",
          "",
          "[Added Lines]",
          "3808:   while( idx<szHdr && d<=(u32)nKey ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3818:     pMem++;",
          "3819:     if( (++u)>=p->nField ) break;",
          "3820:   }",
          "3822:     assert( CORRUPT_DB );",
          "",
          "[Removed Lines]",
          "3821:   if( d>nKey && u ){",
          "",
          "[Added Lines]",
          "3821:   if( d>(u32)nKey && u ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cc867d09c4da853fc22778a8b70ce1be21c6975",
      "candidate_info": {
        "commit_hash": "9cc867d09c4da853fc22778a8b70ce1be21c6975",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9cc867d09c4da853fc22778a8b70ce1be21c6975",
        "files": [
          "config.guess",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Upgrade the config.guess script to the latest version.\n\nFossilOrigin-Name: be8438133f6cd87e5d51f15cfd1eed83176b3239334875eb0c3dec502cfe39d3",
        "before_after_code_files": [
          "config.guess||config.guess",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "config.guess||config.guess": [
          "File: config.guess -> config.guess",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #! /bin/sh",
          "2: # Attempt to guess a canonical system name.",
          "9: # This file is free software; you can redistribute it and/or modify it",
          "10: # under the terms of the GNU General Public License as published by",
          "12: # (at your option) any later version.",
          "13: #",
          "14: # This program is distributed in the hope that it will be useful, but",
          "",
          "[Removed Lines]",
          "3: #   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,",
          "4: #   2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation,",
          "5: #   Inc.",
          "7: timestamp='2007-07-22'",
          "11: # the Free Software Foundation; either version 2 of the License, or",
          "",
          "[Added Lines]",
          "3: #   Copyright 1992-2019 Free Software Foundation, Inc.",
          "5: timestamp='2019-05-28'",
          "9: # the Free Software Foundation; either version 3 of the License, or",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: # General Public License for more details.",
          "18: #",
          "19: # You should have received a copy of the GNU General Public License",
          "23: #",
          "24: # As a special exception to the GNU General Public License, if you",
          "25: # distribute this file as part of a program that contains a",
          "26: # configuration script generated by Autoconf, you may include it under",
          "33: #",
          "37: #",
          "41: me=`echo \"$0\" | sed -e 's,.*/,,'`",
          "",
          "[Removed Lines]",
          "20: # along with this program; if not, write to the Free Software",
          "21: # Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA",
          "22: # 02110-1301, USA.",
          "27: # the same distribution terms that you use for the rest of that program.",
          "30: # Originally written by Per Bothner <per@bothner.com>.",
          "31: # Please send patches to <config-patches@gnu.org>.  Submit a context",
          "32: # diff and a properly formatted ChangeLog entry.",
          "34: # This script attempts to guess a canonical system name similar to",
          "35: # config.sub.  If it succeeds, it prints the system name on stdout, and",
          "36: # exits with 0.  Otherwise, it exits with 1.",
          "38: # The plan is that this can be called by configure scripts if you",
          "39: # don't specify an explicit build system type.",
          "",
          "[Added Lines]",
          "18: # along with this program; if not, see <https://www.gnu.org/licenses/>.",
          "23: # the same distribution terms that you use for the rest of that",
          "24: # program.  This Exception is an additional permission under section 7",
          "25: # of the GNU General Public License, version 3 (\"GPLv3\").",
          "27: # Originally written by Per Bothner; maintained since 2000 by Ben Elliston.",
          "29: # You can get the latest version of this script from:",
          "30: # https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess",
          "31: #",
          "32: # Please send patches to <config-patches@gnu.org>.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46: Output the configuration name of the system \\`$me' is run on.",
          "49:   -h, --help         print this help, then exit",
          "50:   -t, --time-stamp   print date of last modification, then exit",
          "51:   -v, --version      print version number, then exit",
          "",
          "[Removed Lines]",
          "48: Operation modes:",
          "",
          "[Added Lines]",
          "42: Options:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "56: GNU config.guess ($timestamp)",
          "58: Originally written by Per Bothner.",
          "62: This is free software; see the source for copying conditions.  There is NO",
          "63: warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"",
          "",
          "[Removed Lines]",
          "59: Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005",
          "60: Free Software Foundation, Inc.",
          "",
          "[Added Lines]",
          "53: Copyright 1992-2019 Free Software Foundation, Inc.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91:   exit 1",
          "92: fi",
          "96: # CC_FOR_BUILD -- compiler used by this script. Note that the use of a",
          "97: # compiler to aid in system detection is discouraged as it requires",
          "98: # temporary files to be created and, as you can see below, it is a",
          "",
          "[Removed Lines]",
          "94: trap 'exit 1' 1 2 15",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "104: # Portable tmp directory creation inspired by the Autoconf team.",
          "131: # This is needed to find uname on a Pyramid OSx when run in the BSD universe.",
          "132: # (ghazi@noc.rutgers.edu 1994-08-24)",
          "134:  PATH=$PATH:/.attbin ; export PATH",
          "135: fi",
          "",
          "[Removed Lines]",
          "106: set_cc_for_build='",
          "107: trap \"exitcode=\\$?; (rm -f \\$tmpfiles 2>/dev/null; rmdir \\$tmp 2>/dev/null) && exit \\$exitcode\" 0 ;",
          "108: trap \"rm -f \\$tmpfiles 2>/dev/null; rmdir \\$tmp 2>/dev/null; exit 1\" 1 2 13 15 ;",
          "109: : ${TMPDIR=/tmp} ;",
          "110:  { tmp=`(umask 077 && mktemp -d \"$TMPDIR/cgXXXXXX\") 2>/dev/null` && test -n \"$tmp\" && test -d \"$tmp\" ; } ||",
          "111:  { test -n \"$RANDOM\" && tmp=$TMPDIR/cg$$-$RANDOM && (umask 077 && mkdir $tmp) ; } ||",
          "112:  { tmp=$TMPDIR/cg-$$ && (umask 077 && mkdir $tmp) && echo \"Warning: creating insecure temp directory\" >&2 ; } ||",
          "113:  { echo \"$me: cannot create a temporary directory in $TMPDIR\" >&2 ; exit 1 ; } ;",
          "114: dummy=$tmp/dummy ;",
          "115: tmpfiles=\"$dummy.c $dummy.o $dummy.rel $dummy\" ;",
          "116: case $CC_FOR_BUILD,$HOST_CC,$CC in",
          "117:  ,,)    echo \"int x;\" > $dummy.c ;",
          "118:  for c in cc gcc c89 c99 ; do",
          "119:    if ($c -c -o $dummy.o $dummy.c) >/dev/null 2>&1 ; then",
          "120:       CC_FOR_BUILD=\"$c\"; break ;",
          "121:    fi ;",
          "122:  done ;",
          "123:  if test x\"$CC_FOR_BUILD\" = x ; then",
          "124:    CC_FOR_BUILD=no_compiler_found ;",
          "125:  fi",
          "126:  ;;",
          "127:  ,,*)   CC_FOR_BUILD=$CC ;;",
          "128:  ,*,*)  CC_FOR_BUILD=$HOST_CC ;;",
          "129: esac ; set_cc_for_build= ;'",
          "133: if (test -f /.attbin/uname) >/dev/null 2>&1 ; then",
          "",
          "[Added Lines]",
          "97: tmp=",
          "98: # shellcheck disable=SC2172",
          "99: trap 'test -z \"$tmp\" || rm -fr \"$tmp\"' 0 1 2 13 15",
          "101: set_cc_for_build() {",
          "102:     : \"${TMPDIR=/tmp}\"",
          "103:     # shellcheck disable=SC2039",
          "104:     { tmp=`(umask 077 && mktemp -d \"$TMPDIR/cgXXXXXX\") 2>/dev/null` && test -n \"$tmp\" && test -d \"$tmp\" ; } ||",
          "105:  { test -n \"$RANDOM\" && tmp=$TMPDIR/cg$$-$RANDOM && (umask 077 && mkdir \"$tmp\" 2>/dev/null) ; } ||",
          "106:  { tmp=$TMPDIR/cg-$$ && (umask 077 && mkdir \"$tmp\" 2>/dev/null) && echo \"Warning: creating insecure temp directory\" >&2 ; } ||",
          "107:  { echo \"$me: cannot create a temporary directory in $TMPDIR\" >&2 ; exit 1 ; }",
          "108:     dummy=$tmp/dummy",
          "109:     case ${CC_FOR_BUILD-},${HOST_CC-},${CC-} in",
          "110:  ,,)    echo \"int x;\" > \"$dummy.c\"",
          "111:         for driver in cc gcc c89 c99 ; do",
          "112:      if ($driver -c -o \"$dummy.o\" \"$dummy.c\") >/dev/null 2>&1 ; then",
          "113:          CC_FOR_BUILD=\"$driver\"",
          "114:          break",
          "115:      fi",
          "116:         done",
          "117:         if test x\"$CC_FOR_BUILD\" = x ; then",
          "118:      CC_FOR_BUILD=no_compiler_found",
          "119:         fi",
          "120:         ;;",
          "121:  ,,*)   CC_FOR_BUILD=$CC ;;",
          "122:  ,*,*)  CC_FOR_BUILD=$HOST_CC ;;",
          "123:     esac",
          "124: }",
          "128: if test -f /.attbin/uname ; then",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "139: UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown",
          "140: UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown",
          "145:  #include <features.h>",
          "150:  LIBC=uclibc",
          "152:  #else",
          "153:  LIBC=gnu",
          "154:  #endif",
          "159: # Note: order is significant - the case branches are not exclusive.",
          "163:  # NetBSD (nbsd) targets should (where applicable) match one or",
          "165:  # *-*-netbsdecoff* and *-*-netbsd*.  For targets that recently",
          "166:  # switched to ELF, *-*-netbsd* would select the old",
          "167:  # object file format.  This provides both forward",
          "",
          "[Removed Lines]",
          "142: if [ \"${UNAME_SYSTEM}\" = \"Linux\" ] ; then",
          "143:  eval $set_cc_for_build",
          "144:  cat << EOF > $dummy.c",
          "146:  #ifdef __UCLIBC__",
          "147:  # ifdef __UCLIBC_CONFIG_VERSION__",
          "148:  LIBC=uclibc __UCLIBC_CONFIG_VERSION__",
          "149:  # else",
          "151:  # endif",
          "155: EOF",
          "156:  eval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep LIBC= | sed -e 's: ::g'`",
          "157: fi",
          "161: case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in",
          "164:  # more of the tupples: *-*-netbsdelf*, *-*-netbsdaout*,",
          "",
          "[Added Lines]",
          "137: case \"$UNAME_SYSTEM\" in",
          "138: Linux|GNU|GNU/*)",
          "139:  # If the system lacks a compiler, then just pick glibc.",
          "140:  # We could probably try harder.",
          "141:  LIBC=gnu",
          "143:  set_cc_for_build",
          "144:  cat <<-EOF > \"$dummy.c\"",
          "146:  #if defined(__UCLIBC__)",
          "148:  #elif defined(__dietlibc__)",
          "149:  LIBC=dietlibc",
          "153:  EOF",
          "154:  eval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\"",
          "156:  # If ldd exists, use it to detect musl libc.",
          "157:  if command -v ldd >/dev/null && \\",
          "158:   ldd --version 2>&1 | grep -q ^musl",
          "159:  then",
          "160:      LIBC=musl",
          "161:  fi",
          "162:  ;;",
          "163: esac",
          "167: case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in",
          "170:  # more of the tuples: *-*-netbsdelf*, *-*-netbsdaout*,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "171:  # Note: NetBSD doesn't particularly care about the vendor",
          "172:  # portion of the name.  We always set it to \"unknown\".",
          "173:  sysctl=\"sysctl -n hw.machine_arch\"",
          "177:      armeb) machine=armeb-unknown ;;",
          "178:      arm*) machine=arm-unknown ;;",
          "179:      sh3el) machine=shl-unknown ;;",
          "180:      sh3eb) machine=sh-unknown ;;",
          "181:      sh5el) machine=sh5le-unknown ;;",
          "183:  esac",
          "184:  # The Operating System including object format, if it has switched",
          "187:      arm*|i386|m68k|ns32k|sh3*|sparc|vax)",
          "189:   if echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\",
          "191:   then",
          "192:       # Once all utilities can be ECOFF (netbsdecoff) or a.out (netbsdaout).",
          "193:       # Return netbsd for either.  FIX?",
          "",
          "[Removed Lines]",
          "174:  UNAME_MACHINE_ARCH=`(/sbin/$sysctl 2>/dev/null || \\",
          "175:      /usr/sbin/$sysctl 2>/dev/null || echo unknown)`",
          "176:  case \"${UNAME_MACHINE_ARCH}\" in",
          "185:  # to ELF recently, or will in the future.",
          "186:  case \"${UNAME_MACHINE_ARCH}\" in",
          "188:   eval $set_cc_for_build",
          "190:    | grep __ELF__ >/dev/null",
          "",
          "[Added Lines]",
          "180:  UNAME_MACHINE_ARCH=`(uname -p 2>/dev/null || \\",
          "181:      \"/sbin/$sysctl\" 2>/dev/null || \\",
          "182:      \"/usr/sbin/$sysctl\" 2>/dev/null || \\",
          "183:      echo unknown)`",
          "184:  case \"$UNAME_MACHINE_ARCH\" in",
          "190:      earmv*)",
          "191:   arch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`",
          "192:   endian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`",
          "193:   machine=\"${arch}${endian}\"-unknown",
          "194:   ;;",
          "198:  # to ELF recently (or will in the future) and ABI.",
          "199:  case \"$UNAME_MACHINE_ARCH\" in",
          "200:      earm*)",
          "201:   os=netbsdelf",
          "202:   ;;",
          "204:   set_cc_for_build",
          "206:    | grep -q __ELF__",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "197:   fi",
          "198:   ;;",
          "201:   ;;",
          "202:  esac",
          "203:  # The OS release",
          "",
          "[Removed Lines]",
          "200:          os=netbsd",
          "",
          "[Added Lines]",
          "216:   os=netbsd",
          "217:   ;;",
          "218:  esac",
          "219:  # Determine ABI tags.",
          "220:  case \"$UNAME_MACHINE_ARCH\" in",
          "221:      earm*)",
          "222:   expr='s/^earmv[0-9]/-eabi/;s/eb$//'",
          "223:   abi=`echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\"`",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "205:  # thus, need a distinct triplet. However, they do not need",
          "206:  # kernel version information, so it can be replaced with a",
          "207:  # suitable tag, in the style of linux-gnu.",
          "209:      Debian*)",
          "210:   release='-gnu'",
          "211:   ;;",
          "214:   ;;",
          "215:  esac",
          "216:  # Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:",
          "217:  # contains redundant information, the shorter form:",
          "218:  # CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.",
          "220:  exit ;;",
          "222:  UNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`",
          "224:  exit ;;",
          "227:  exit ;;",
          "230:  exit ;;",
          "231:     macppc:MirBSD:*:*)",
          "233:  exit ;;",
          "236:  exit ;;",
          "237:     alpha:OSF1:*:*)",
          "238:  case $UNAME_RELEASE in",
          "240:   UNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`",
          "241:   ;;",
          "244:   ;;",
          "245:  esac",
          "246:  # According to Compaq, /usr/sbin/psrinfo has been available on",
          "",
          "[Removed Lines]",
          "208:  case \"${UNAME_VERSION}\" in",
          "213:   release=`echo ${UNAME_RELEASE}|sed -e 's/[-_].*/\\./'`",
          "219:  echo \"${machine}-${os}${release}\"",
          "223:  echo ${UNAME_MACHINE_ARCH}-unknown-openbsd${UNAME_RELEASE}",
          "226:  echo ${UNAME_MACHINE}-unknown-ekkobsd${UNAME_RELEASE}",
          "229:  echo ${UNAME_MACHINE}-unknown-solidbsd${UNAME_RELEASE}",
          "232:  echo powerpc-unknown-mirbsd${UNAME_RELEASE}",
          "235:  echo ${UNAME_MACHINE}-unknown-mirbsd${UNAME_RELEASE}",
          "243:          UNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`",
          "",
          "[Added Lines]",
          "231:  case \"$UNAME_VERSION\" in",
          "236:   release=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`",
          "242:  echo \"$machine-${os}${release}${abi-}\"",
          "243:  exit ;;",
          "245:  UNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`",
          "246:  echo \"$UNAME_MACHINE_ARCH\"-unknown-bitrig\"$UNAME_RELEASE\"",
          "250:  echo \"$UNAME_MACHINE_ARCH\"-unknown-openbsd\"$UNAME_RELEASE\"",
          "251:  exit ;;",
          "253:  UNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`",
          "254:  echo \"$UNAME_MACHINE_ARCH\"-unknown-libertybsd\"$UNAME_RELEASE\"",
          "255:  exit ;;",
          "257:  echo \"$UNAME_MACHINE\"-unknown-midnightbsd\"$UNAME_RELEASE\"",
          "260:  echo \"$UNAME_MACHINE\"-unknown-ekkobsd\"$UNAME_RELEASE\"",
          "263:  echo \"$UNAME_MACHINE\"-unknown-solidbsd\"$UNAME_RELEASE\"",
          "266:  echo powerpc-unknown-mirbsd\"$UNAME_RELEASE\"",
          "269:  echo \"$UNAME_MACHINE\"-unknown-mirbsd\"$UNAME_RELEASE\"",
          "270:  exit ;;",
          "272:  echo \"$UNAME_MACHINE\"-unknown-sortix",
          "273:  exit ;;",
          "275:  echo \"$UNAME_MACHINE\"-unknown-redox",
          "277:     mips:OSF1:*.*)",
          "278:         echo mips-dec-osf1",
          "279:         exit ;;",
          "286:   UNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "250:  ALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`",
          "251:  case \"$ALPHA_CPU_TYPE\" in",
          "252:      \"EV4 (21064)\")",
          "254:      \"EV4.5 (21064)\")",
          "256:      \"LCA4 (21066/21068)\")",
          "258:      \"EV5 (21164)\")",
          "260:      \"EV5.6 (21164A)\")",
          "262:      \"EV5.6 (21164PC)\")",
          "264:      \"EV5.7 (21164PC)\")",
          "266:      \"EV6 (21264)\")",
          "268:      \"EV6.7 (21264A)\")",
          "270:      \"EV6.8CB (21264C)\")",
          "272:      \"EV6.8AL (21264B)\")",
          "274:      \"EV6.8CX (21264D)\")",
          "276:      \"EV6.9A (21264/EV69A)\")",
          "278:      \"EV7 (21364)\")",
          "280:      \"EV7.9 (21364A)\")",
          "282:  esac",
          "283:  # A Pn.n version is a patched version.",
          "284:  # A Vn.n version is a released version.",
          "285:  # A Tn.n version is a released field test version.",
          "286:  # A Xn.n version is an unreleased experimental baselevel.",
          "287:  # 1.2 uses \"1.2\" for uname -r.",
          "299:     Amiga*:UNIX_System_V:4.0:*)",
          "300:  echo m68k-unknown-sysv4",
          "301:  exit ;;",
          "304:  exit ;;",
          "307:  exit ;;",
          "309:  echo i370-ibm-openedition",
          "",
          "[Removed Lines]",
          "253:   UNAME_MACHINE=\"alpha\" ;;",
          "255:   UNAME_MACHINE=\"alpha\" ;;",
          "257:   UNAME_MACHINE=\"alpha\" ;;",
          "259:   UNAME_MACHINE=\"alphaev5\" ;;",
          "261:   UNAME_MACHINE=\"alphaev56\" ;;",
          "263:   UNAME_MACHINE=\"alphapca56\" ;;",
          "265:   UNAME_MACHINE=\"alphapca57\" ;;",
          "267:   UNAME_MACHINE=\"alphaev6\" ;;",
          "269:   UNAME_MACHINE=\"alphaev67\" ;;",
          "271:   UNAME_MACHINE=\"alphaev68\" ;;",
          "273:   UNAME_MACHINE=\"alphaev68\" ;;",
          "275:   UNAME_MACHINE=\"alphaev68\" ;;",
          "277:   UNAME_MACHINE=\"alphaev69\" ;;",
          "279:   UNAME_MACHINE=\"alphaev7\" ;;",
          "281:   UNAME_MACHINE=\"alphaev79\" ;;",
          "288:  echo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[PVTX]//' | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`",
          "289:  exit ;;",
          "290:     Alpha\\ *:Windows_NT*:*)",
          "291:  # How do we know it's Interix rather than the generic POSIX subsystem?",
          "292:  # Should we change UNAME_MACHINE based on the output of uname instead",
          "293:  # of the specific Alpha model?",
          "294:  echo alpha-pc-interix",
          "295:  exit ;;",
          "296:     21064:Windows_NT:50:3)",
          "297:  echo alpha-dec-winnt3.5",
          "298:  exit ;;",
          "303:  echo ${UNAME_MACHINE}-unknown-amigaos",
          "306:  echo ${UNAME_MACHINE}-unknown-morphos",
          "",
          "[Added Lines]",
          "296:   UNAME_MACHINE=alpha ;;",
          "298:   UNAME_MACHINE=alpha ;;",
          "300:   UNAME_MACHINE=alpha ;;",
          "302:   UNAME_MACHINE=alphaev5 ;;",
          "304:   UNAME_MACHINE=alphaev56 ;;",
          "306:   UNAME_MACHINE=alphapca56 ;;",
          "308:   UNAME_MACHINE=alphapca57 ;;",
          "310:   UNAME_MACHINE=alphaev6 ;;",
          "312:   UNAME_MACHINE=alphaev67 ;;",
          "314:   UNAME_MACHINE=alphaev68 ;;",
          "316:   UNAME_MACHINE=alphaev68 ;;",
          "318:   UNAME_MACHINE=alphaev68 ;;",
          "320:   UNAME_MACHINE=alphaev69 ;;",
          "322:   UNAME_MACHINE=alphaev7 ;;",
          "324:   UNAME_MACHINE=alphaev79 ;;",
          "331:  echo \"$UNAME_MACHINE\"-dec-osf\"`echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\"",
          "332:  # Reset EXIT trap before exiting to avoid spurious non-zero exit code.",
          "333:  exitcode=$?",
          "334:  trap '' 0",
          "335:  exit $exitcode ;;",
          "340:  echo \"$UNAME_MACHINE\"-unknown-amigaos",
          "343:  echo \"$UNAME_MACHINE\"-unknown-morphos",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "312:  echo s390-ibm-zvmoe",
          "313:  exit ;;",
          "316:  exit ;;",
          "317:     arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)",
          "319:  exit ;;",
          "321:  echo arm-unknown-riscos",
          "322:  exit ;;",
          "323:     SR2?01:HI-UX/MPP:*:* | SR8000:HI-UX/MPP:*:*)",
          "",
          "[Removed Lines]",
          "315:         echo powerpc-ibm-os400",
          "318:  echo arm-acorn-riscix${UNAME_RELEASE}",
          "320:     arm:riscos:*:*|arm:RISCOS:*:*)",
          "",
          "[Added Lines]",
          "352:  echo powerpc-ibm-os400",
          "355:  echo arm-acorn-riscix\"$UNAME_RELEASE\"",
          "357:     arm*:riscos:*:*|arm*:RISCOS:*:*)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "341:  case `/usr/bin/uname -p` in",
          "342:      sparc) echo sparc-icl-nx7; exit ;;",
          "343:  esac ;;",
          "344:     sun4H:SunOS:5.*:*)",
          "346:  exit ;;",
          "347:     sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)",
          "349:  exit ;;",
          "350:     i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)",
          "352:  exit ;;",
          "353:     sun4*:SunOS:6*:*)",
          "354:  # According to config.sub, this is the proper way to canonicalize",
          "355:  # SunOS6.  Hard to guess exactly what SunOS6 will be like, but",
          "356:  # it's likely to be more like Solaris than SunOS4.",
          "358:  exit ;;",
          "359:     sun4*:SunOS:*:*)",
          "360:  case \"`/usr/bin/arch -k`\" in",
          "",
          "[Removed Lines]",
          "345:  echo sparc-hal-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`",
          "348:  echo sparc-sun-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`",
          "351:  echo i386-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`",
          "357:  echo sparc-sun-solaris3`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`",
          "",
          "[Added Lines]",
          "381:     s390x:SunOS:*:*)",
          "382:  echo \"$UNAME_MACHINE\"-ibm-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"",
          "383:  exit ;;",
          "385:  echo sparc-hal-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"",
          "388:  echo sparc-sun-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"",
          "389:  exit ;;",
          "390:     i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)",
          "391:  echo i386-pc-auroraux\"$UNAME_RELEASE\"",
          "394:  set_cc_for_build",
          "395:  SUN_ARCH=i386",
          "396:  # If there is a compiler, see if it is configured for 64-bit objects.",
          "397:  # Note that the Sun cc does not turn __LP64__ into 1 like gcc does.",
          "398:  # This test works for both compilers.",
          "399:  if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then",
          "400:      if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\",
          "401:   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\",
          "402:   grep IS_64BIT_ARCH >/dev/null",
          "403:      then",
          "404:   SUN_ARCH=x86_64",
          "405:      fi",
          "406:  fi",
          "407:  echo \"$SUN_ARCH\"-pc-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"",
          "413:  echo sparc-sun-solaris3\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "363:   ;;",
          "364:  esac",
          "365:  # Japanese Language versions have a version number like `4.1.3-JL'.",
          "367:  exit ;;",
          "368:     sun3*:SunOS:*:*)",
          "370:  exit ;;",
          "371:     sun*:*:4.2BSD:*)",
          "372:  UNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`",
          "374:  case \"`/bin/arch`\" in",
          "375:      sun3)",
          "377:   ;;",
          "378:      sun4)",
          "380:   ;;",
          "381:  esac",
          "382:  exit ;;",
          "383:     aushp:SunOS:*:*)",
          "385:  exit ;;",
          "386:     # The situation for MiNT is a little confusing.  The machine name",
          "387:     # can be virtually everything (everything which is not",
          "",
          "[Removed Lines]",
          "366:  echo sparc-sun-sunos`echo ${UNAME_RELEASE}|sed -e 's/-/_/'`",
          "369:  echo m68k-sun-sunos${UNAME_RELEASE}",
          "373:  test \"x${UNAME_RELEASE}\" = \"x\" && UNAME_RELEASE=3",
          "376:   echo m68k-sun-sunos${UNAME_RELEASE}",
          "379:   echo sparc-sun-sunos${UNAME_RELEASE}",
          "384:  echo sparc-auspex-sunos${UNAME_RELEASE}",
          "",
          "[Added Lines]",
          "422:  echo sparc-sun-sunos\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/'`\"",
          "425:  echo m68k-sun-sunos\"$UNAME_RELEASE\"",
          "429:  test \"x$UNAME_RELEASE\" = x && UNAME_RELEASE=3",
          "432:   echo m68k-sun-sunos\"$UNAME_RELEASE\"",
          "435:   echo sparc-sun-sunos\"$UNAME_RELEASE\"",
          "440:  echo sparc-auspex-sunos\"$UNAME_RELEASE\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "392:     # MiNT.  But MiNT is downward compatible to TOS, so this should",
          "393:     # be no problem.",
          "394:     atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)",
          "396:  exit ;;",
          "397:     atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)",
          "402:  exit ;;",
          "403:     milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)",
          "406:     hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)",
          "412:     m68k:machten:*:*)",
          "414:  exit ;;",
          "415:     powerpc:machten:*:*)",
          "417:  exit ;;",
          "418:     RISC*:Mach:*:*)",
          "419:  echo mips-dec-mach_bsd4.3",
          "420:  exit ;;",
          "421:     RISC*:ULTRIX:*:*)",
          "423:  exit ;;",
          "424:     VAX*:ULTRIX*:*:*)",
          "426:  exit ;;",
          "427:     2020:CLIX:*:* | 2430:CLIX:*:*)",
          "429:  exit ;;",
          "430:     mips:*:*:UMIPS | mips:*:*:RISCos)",
          "433: #ifdef __cplusplus",
          "435:  int main (int argc, char *argv[]) {",
          "",
          "[Removed Lines]",
          "395:         echo m68k-atari-mint${UNAME_RELEASE}",
          "398:  echo m68k-atari-mint${UNAME_RELEASE}",
          "399:         exit ;;",
          "401:         echo m68k-atari-mint${UNAME_RELEASE}",
          "404:         echo m68k-milan-mint${UNAME_RELEASE}",
          "405:         exit ;;",
          "407:         echo m68k-hades-mint${UNAME_RELEASE}",
          "408:         exit ;;",
          "410:         echo m68k-unknown-mint${UNAME_RELEASE}",
          "411:         exit ;;",
          "413:  echo m68k-apple-machten${UNAME_RELEASE}",
          "416:  echo powerpc-apple-machten${UNAME_RELEASE}",
          "422:  echo mips-dec-ultrix${UNAME_RELEASE}",
          "425:  echo vax-dec-ultrix${UNAME_RELEASE}",
          "428:  echo clipper-intergraph-clix${UNAME_RELEASE}",
          "431:  eval $set_cc_for_build",
          "432:  sed 's/^ //' << EOF >$dummy.c",
          "",
          "[Added Lines]",
          "451:  echo m68k-atari-mint\"$UNAME_RELEASE\"",
          "454:  echo m68k-atari-mint\"$UNAME_RELEASE\"",
          "455:  exit ;;",
          "457:  echo m68k-atari-mint\"$UNAME_RELEASE\"",
          "460:  echo m68k-milan-mint\"$UNAME_RELEASE\"",
          "461:  exit ;;",
          "463:  echo m68k-hades-mint\"$UNAME_RELEASE\"",
          "464:  exit ;;",
          "466:  echo m68k-unknown-mint\"$UNAME_RELEASE\"",
          "467:  exit ;;",
          "469:  echo m68k-apple-machten\"$UNAME_RELEASE\"",
          "472:  echo powerpc-apple-machten\"$UNAME_RELEASE\"",
          "478:  echo mips-dec-ultrix\"$UNAME_RELEASE\"",
          "481:  echo vax-dec-ultrix\"$UNAME_RELEASE\"",
          "484:  echo clipper-intergraph-clix\"$UNAME_RELEASE\"",
          "487:  set_cc_for_build",
          "488:  sed 's/^ //' << EOF > \"$dummy.c\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "438: #endif",
          "439:  #if defined (host_mips) && defined (MIPSEB)",
          "440:  #if defined (SYSTYPE_SYSV)",
          "442:  #endif",
          "443:  #if defined (SYSTYPE_SVR4)",
          "445:  #endif",
          "446:  #if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)",
          "448:  #endif",
          "449:  #endif",
          "450:    exit (-1);",
          "451:  }",
          "452: EOF",
          "456:      { echo \"$SYSTEM_NAME\"; exit; }",
          "458:  exit ;;",
          "459:     Motorola:PowerMAX_OS:*:*)",
          "460:  echo powerpc-motorola-powermax",
          "",
          "[Removed Lines]",
          "441:    printf (\"mips-mips-riscos%ssysv\\n\", argv[1]); exit (0);",
          "444:    printf (\"mips-mips-riscos%ssvr4\\n\", argv[1]); exit (0);",
          "447:    printf (\"mips-mips-riscos%sbsd\\n\", argv[1]); exit (0);",
          "453:  $CC_FOR_BUILD -o $dummy $dummy.c &&",
          "454:    dummyarg=`echo \"${UNAME_RELEASE}\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&",
          "455:    SYSTEM_NAME=`$dummy $dummyarg` &&",
          "457:  echo mips-mips-riscos${UNAME_RELEASE}",
          "",
          "[Added Lines]",
          "497:    printf (\"mips-mips-riscos%ssysv\\\\n\", argv[1]); exit (0);",
          "500:    printf (\"mips-mips-riscos%ssvr4\\\\n\", argv[1]); exit (0);",
          "503:    printf (\"mips-mips-riscos%sbsd\\\\n\", argv[1]); exit (0);",
          "509:  $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" &&",
          "510:    dummyarg=`echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&",
          "511:    SYSTEM_NAME=`\"$dummy\" \"$dummyarg\"` &&",
          "513:  echo mips-mips-riscos\"$UNAME_RELEASE\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "478:  echo m88k-motorola-sysv3",
          "479:  exit ;;",
          "480:     AViiON:dgux:*:*)",
          "484:  then",
          "487:      then",
          "489:      else",
          "491:      fi",
          "492:  else",
          "494:  fi",
          "496:     M88*:DolphinOS:*:*) # DolphinOS (SVR3)",
          "497:  echo m88k-dolphin-sysv3",
          "498:  exit ;;",
          "",
          "[Removed Lines]",
          "481:         # DG/UX returns AViiON for all architectures",
          "482:         UNAME_PROCESSOR=`/usr/bin/uname -p`",
          "483:  if [ $UNAME_PROCESSOR = mc88100 ] || [ $UNAME_PROCESSOR = mc88110 ]",
          "485:      if [ ${TARGET_BINARY_INTERFACE}x = m88kdguxelfx ] || \\",
          "486:         [ ${TARGET_BINARY_INTERFACE}x = x ]",
          "488:   echo m88k-dg-dgux${UNAME_RELEASE}",
          "490:   echo m88k-dg-dguxbcs${UNAME_RELEASE}",
          "493:      echo i586-dg-dgux${UNAME_RELEASE}",
          "495:   exit ;;",
          "",
          "[Added Lines]",
          "537:  # DG/UX returns AViiON for all architectures",
          "538:  UNAME_PROCESSOR=`/usr/bin/uname -p`",
          "539:  if [ \"$UNAME_PROCESSOR\" = mc88100 ] || [ \"$UNAME_PROCESSOR\" = mc88110 ]",
          "541:      if [ \"$TARGET_BINARY_INTERFACE\"x = m88kdguxelfx ] || \\",
          "542:         [ \"$TARGET_BINARY_INTERFACE\"x = x ]",
          "544:   echo m88k-dg-dgux\"$UNAME_RELEASE\"",
          "546:   echo m88k-dg-dguxbcs\"$UNAME_RELEASE\"",
          "549:      echo i586-dg-dgux\"$UNAME_RELEASE\"",
          "551:  exit ;;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "507:  echo m68k-tektronix-bsd",
          "508:  exit ;;",
          "511:  exit ;;",
          "512:     ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.",
          "513:  echo romp-ibm-aix     # uname -m gives an 8 hex-code CPU id",
          "",
          "[Removed Lines]",
          "510:  echo mips-sgi-irix`echo ${UNAME_RELEASE}|sed -e 's/-/_/g'`",
          "",
          "[Added Lines]",
          "566:  echo mips-sgi-irix\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/g'`\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "519:  if [ -x /usr/bin/oslevel ] ; then",
          "520:   IBM_REV=`/usr/bin/oslevel`",
          "521:  else",
          "523:  fi",
          "525:  exit ;;",
          "527:  if grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then",
          "530:   #include <sys/systemcfg.h>",
          "532:   main()",
          "",
          "[Removed Lines]",
          "522:   IBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}",
          "524:  echo ${UNAME_MACHINE}-ibm-aix${IBM_REV}",
          "528:   eval $set_cc_for_build",
          "529:   sed 's/^  //' << EOF >$dummy.c",
          "",
          "[Added Lines]",
          "578:   IBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"",
          "580:  echo \"$UNAME_MACHINE\"-ibm-aix\"$IBM_REV\"",
          "584:   set_cc_for_build",
          "585:   sed 's/^  //' << EOF > \"$dummy.c\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "537:    exit(0);",
          "538:    }",
          "539: EOF",
          "541:   then",
          "542:    echo \"$SYSTEM_NAME\"",
          "543:   else",
          "",
          "[Removed Lines]",
          "540:   if $CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy`",
          "",
          "[Added Lines]",
          "596:   if $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"`",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "549:   echo rs6000-ibm-aix3.2",
          "550:  fi",
          "551:  exit ;;",
          "553:  IBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`",
          "555:   IBM_ARCH=rs6000",
          "556:  else",
          "557:   IBM_ARCH=powerpc",
          "558:  fi",
          "561:  else",
          "563:  fi",
          "565:  exit ;;",
          "567:  echo rs6000-ibm-aix",
          "568:  exit ;;",
          "570:  echo romp-ibm-bsd4.4",
          "571:  exit ;;",
          "572:     ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and",
          "574:  exit ;;                             # report: romp-ibm BSD 4.3",
          "576:  echo rs6000-bull-bosx",
          "",
          "[Removed Lines]",
          "554:  if /usr/sbin/lsattr -El ${IBM_CPU_ID} | grep ' POWER' >/dev/null 2>&1; then",
          "559:  if [ -x /usr/bin/oslevel ] ; then",
          "560:   IBM_REV=`/usr/bin/oslevel`",
          "562:   IBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}",
          "564:  echo ${IBM_ARCH}-ibm-aix${IBM_REV}",
          "569:     ibmrt:4.4BSD:*|romp-ibm:BSD:*)",
          "573:  echo romp-ibm-bsd${UNAME_RELEASE}   # 4.3 with uname added to",
          "",
          "[Added Lines]",
          "610:  if /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then",
          "615:  if [ -x /usr/bin/lslpp ] ; then",
          "616:   IBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc |",
          "617:       awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`",
          "619:   IBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"",
          "621:  echo \"$IBM_ARCH\"-ibm-aix\"$IBM_REV\"",
          "626:     ibmrt:4.4BSD:*|romp-ibm:4.4BSD:*)",
          "630:  echo romp-ibm-bsd\"$UNAME_RELEASE\"   # 4.3 with uname added to",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "585:  echo m68k-hp-bsd4.4",
          "586:  exit ;;",
          "587:     9000/[34678]??:HP-UX:*:*)",
          "592:      9000/[678][0-9][0-9])",
          "593:   if [ -x /usr/bin/getconf ]; then",
          "594:       sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`",
          "606:   fi",
          "641: EOF",
          "643:       test -z \"$HP_ARCH\" && HP_ARCH=hppa",
          "644:   fi ;;",
          "645:  esac",
          "647:  then",
          "650:      # hppa2.0w-hp-hpux* has a 64-bit kernel and a compiler generating",
          "651:      # 32-bit code.  hppa64-hp-hpux* has the same kernel and a compiler",
          "",
          "[Removed Lines]",
          "588:  HPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`",
          "589:  case \"${UNAME_MACHINE}\" in",
          "590:      9000/31? )            HP_ARCH=m68000 ;;",
          "591:      9000/[34]?? )         HP_ARCH=m68k ;;",
          "595:                     sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`",
          "596:                     case \"${sc_cpu_version}\" in",
          "597:                       523) HP_ARCH=\"hppa1.0\" ;; # CPU_PA_RISC1_0",
          "598:                       528) HP_ARCH=\"hppa1.1\" ;; # CPU_PA_RISC1_1",
          "599:                       532)                      # CPU_PA_RISC2_0",
          "600:                         case \"${sc_kernel_bits}\" in",
          "601:                           32) HP_ARCH=\"hppa2.0n\" ;;",
          "602:                           64) HP_ARCH=\"hppa2.0w\" ;;",
          "603:      '') HP_ARCH=\"hppa2.0\" ;;   # HP-UX 10.20",
          "604:                         esac ;;",
          "605:                     esac",
          "607:   if [ \"${HP_ARCH}\" = \"\" ]; then",
          "608:       eval $set_cc_for_build",
          "609:       sed 's/^              //' << EOF >$dummy.c",
          "611:               #define _HPUX_SOURCE",
          "612:               #include <stdlib.h>",
          "613:               #include <unistd.h>",
          "615:               int main ()",
          "616:               {",
          "617:               #if defined(_SC_KERNEL_BITS)",
          "618:                   long bits = sysconf(_SC_KERNEL_BITS);",
          "619:               #endif",
          "620:                   long cpu  = sysconf (_SC_CPU_VERSION);",
          "622:                   switch (cpu)",
          "623:                {",
          "624:                case CPU_PA_RISC1_0: puts (\"hppa1.0\"); break;",
          "625:                case CPU_PA_RISC1_1: puts (\"hppa1.1\"); break;",
          "626:                case CPU_PA_RISC2_0:",
          "627:               #if defined(_SC_KERNEL_BITS)",
          "628:                    switch (bits)",
          "629:                 {",
          "630:                 case 64: puts (\"hppa2.0w\"); break;",
          "631:                 case 32: puts (\"hppa2.0n\"); break;",
          "632:                 default: puts (\"hppa2.0\"); break;",
          "633:                 } break;",
          "635:                    puts (\"hppa2.0\"); break;",
          "636:               #endif",
          "637:                default: puts (\"hppa1.0\"); break;",
          "638:                }",
          "639:                   exit (0);",
          "640:               }",
          "642:       (CCOPTS= $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`",
          "646:  if [ ${HP_ARCH} = \"hppa2.0w\" ]",
          "648:      eval $set_cc_for_build",
          "",
          "[Added Lines]",
          "645:  HPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`",
          "646:  case \"$UNAME_MACHINE\" in",
          "647:      9000/31?)            HP_ARCH=m68000 ;;",
          "648:      9000/[34]??)         HP_ARCH=m68k ;;",
          "652:       sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`",
          "653:       case \"$sc_cpu_version\" in",
          "654:         523) HP_ARCH=hppa1.0 ;; # CPU_PA_RISC1_0",
          "655:         528) HP_ARCH=hppa1.1 ;; # CPU_PA_RISC1_1",
          "656:         532)                      # CPU_PA_RISC2_0",
          "657:    case \"$sc_kernel_bits\" in",
          "658:      32) HP_ARCH=hppa2.0n ;;",
          "659:      64) HP_ARCH=hppa2.0w ;;",
          "660:      '') HP_ARCH=hppa2.0 ;;   # HP-UX 10.20",
          "661:    esac ;;",
          "662:       esac",
          "664:   if [ \"$HP_ARCH\" = \"\" ]; then",
          "665:       set_cc_for_build",
          "666:       sed 's/^  //' << EOF > \"$dummy.c\"",
          "668:   #define _HPUX_SOURCE",
          "669:   #include <stdlib.h>",
          "670:   #include <unistd.h>",
          "672:   int main ()",
          "673:   {",
          "674:   #if defined(_SC_KERNEL_BITS)",
          "675:       long bits = sysconf(_SC_KERNEL_BITS);",
          "676:   #endif",
          "677:       long cpu  = sysconf (_SC_CPU_VERSION);",
          "679:       switch (cpu)",
          "680:    {",
          "681:    case CPU_PA_RISC1_0: puts (\"hppa1.0\"); break;",
          "682:    case CPU_PA_RISC1_1: puts (\"hppa1.1\"); break;",
          "683:    case CPU_PA_RISC2_0:",
          "684:   #if defined(_SC_KERNEL_BITS)",
          "685:        switch (bits)",
          "686:     {",
          "687:     case 64: puts (\"hppa2.0w\"); break;",
          "688:     case 32: puts (\"hppa2.0n\"); break;",
          "689:     default: puts (\"hppa2.0\"); break;",
          "690:     } break;",
          "692:        puts (\"hppa2.0\"); break;",
          "693:   #endif",
          "694:    default: puts (\"hppa1.0\"); break;",
          "695:    }",
          "696:       exit (0);",
          "697:   }",
          "699:       (CCOPTS=\"\" $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null) && HP_ARCH=`\"$dummy\"`",
          "703:  if [ \"$HP_ARCH\" = hppa2.0w ]",
          "705:      set_cc_for_build",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "656:      # $ CC_FOR_BUILD=\"cc +DA2.0w\" ./config.guess",
          "657:      # => hppa64-hp-hpux11.23",
          "661:      then",
          "663:      else",
          "665:      fi",
          "666:  fi",
          "668:  exit ;;",
          "669:     ia64:HP-UX:*:*)",
          "672:  exit ;;",
          "673:     3050*:HI-UX:*:*)",
          "676:  #include <unistd.h>",
          "677:  int",
          "678:  main ()",
          "",
          "[Removed Lines]",
          "659:      if echo __LP64__ | (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) |",
          "660:   grep __LP64__ >/dev/null",
          "662:   HP_ARCH=\"hppa2.0w\"",
          "664:   HP_ARCH=\"hppa64\"",
          "667:  echo ${HP_ARCH}-hp-hpux${HPUX_REV}",
          "670:  HPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`",
          "671:  echo ia64-hp-hpux${HPUX_REV}",
          "674:  eval $set_cc_for_build",
          "675:  sed 's/^ //' << EOF >$dummy.c",
          "",
          "[Added Lines]",
          "716:      if echo __LP64__ | (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) |",
          "717:   grep -q __LP64__",
          "719:   HP_ARCH=hppa2.0w",
          "721:   HP_ARCH=hppa64",
          "724:  echo \"$HP_ARCH\"-hp-hpux\"$HPUX_REV\"",
          "727:  HPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`",
          "728:  echo ia64-hp-hpux\"$HPUX_REV\"",
          "731:  set_cc_for_build",
          "732:  sed 's/^ //' << EOF > \"$dummy.c\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "697:    exit (0);",
          "698:  }",
          "699: EOF",
          "701:   { echo \"$SYSTEM_NAME\"; exit; }",
          "702:  echo unknown-hitachi-hiuxwe2",
          "703:  exit ;;",
          "705:  echo hppa1.1-hp-bsd",
          "706:  exit ;;",
          "707:     9000/8??:4.3bsd:*:*)",
          "",
          "[Removed Lines]",
          "700:  $CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy` &&",
          "704:     9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:* )",
          "",
          "[Added Lines]",
          "757:  $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"` &&",
          "761:     9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:*)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "711:  echo hppa1.0-hp-mpeix",
          "712:  exit ;;",
          "714:  echo hppa1.1-hp-osf",
          "715:  exit ;;",
          "716:     hp8??:OSF1:*:*)",
          "",
          "[Removed Lines]",
          "713:     hp7??:OSF1:*:* | hp8?[79]:OSF1:*:* )",
          "",
          "[Added Lines]",
          "770:     hp7??:OSF1:*:* | hp8?[79]:OSF1:*:*)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "718:  exit ;;",
          "719:     i*86:OSF1:*:*)",
          "720:  if [ -x /usr/sbin/sysversion ] ; then",
          "722:  else",
          "724:  fi",
          "725:  exit ;;",
          "726:     parisc*:Lites*:*:*)",
          "",
          "[Removed Lines]",
          "721:      echo ${UNAME_MACHINE}-unknown-osf1mk",
          "723:      echo ${UNAME_MACHINE}-unknown-osf1",
          "",
          "[Added Lines]",
          "778:      echo \"$UNAME_MACHINE\"-unknown-osf1mk",
          "780:      echo \"$UNAME_MACHINE\"-unknown-osf1",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "728:  exit ;;",
          "729:     C1*:ConvexOS:*:* | convex:ConvexOS:C1*:*)",
          "730:  echo c1-convex-bsd",
          "732:     C2*:ConvexOS:*:* | convex:ConvexOS:C2*:*)",
          "733:  if getsysinfo -f scalar_acc",
          "734:  then echo c32-convex-bsd",
          "735:  else echo c2-convex-bsd",
          "736:  fi",
          "738:     C34*:ConvexOS:*:* | convex:ConvexOS:C34*:*)",
          "739:  echo c34-convex-bsd",
          "741:     C38*:ConvexOS:*:* | convex:ConvexOS:C38*:*)",
          "742:  echo c38-convex-bsd",
          "744:     C4*:ConvexOS:*:* | convex:ConvexOS:C4*:*)",
          "745:  echo c4-convex-bsd",
          "747:     CRAY*Y-MP:*:*:*)",
          "749:  exit ;;",
          "750:     CRAY*[A-Z]90:*:*:*)",
          "752:  | sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\",
          "753:        -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\",
          "754:        -e 's/\\.[^.]*$/.X/'",
          "755:  exit ;;",
          "756:     CRAY*TS:*:*:*)",
          "758:  exit ;;",
          "759:     CRAY*T3E:*:*:*)",
          "761:  exit ;;",
          "762:     CRAY*SV1:*:*:*)",
          "764:  exit ;;",
          "767:  exit ;;",
          "768:     F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)",
          "774:     5000:UNIX_System_V:4.*:*)",
          "778:  exit ;;",
          "779:     i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)",
          "781:  exit ;;",
          "782:     sparc*:BSD/OS:*:*)",
          "784:  exit ;;",
          "787:  exit ;;",
          "792:      amd64)",
          "796:  esac",
          "797:  exit ;;",
          "798:     i*:CYGWIN*:*)",
          "800:  exit ;;",
          "803:  exit ;;",
          "807:  exit ;;",
          "808:     i*:PW*:*)",
          "810:  exit ;;",
          "813:      x86)",
          "815:   exit ;;",
          "818:   exit ;;",
          "819:  esac ;;",
          "829:     i*:UWIN*:*)",
          "831:  exit ;;",
          "832:     amd64:CYGWIN*:*:* | x86_64:CYGWIN*:*:*)",
          "837:  exit ;;",
          "838:     prep*:SunOS:5.*:*)",
          "840:  exit ;;",
          "842:  # the GNU system",
          "844:  exit ;;",
          "846:  # other systems with GNU libc and userland",
          "848:  exit ;;",
          "851:  exit ;;",
          "852:     arm*:Linux:*:*)",
          "854:  exit ;;",
          "855:     avr32*:Linux:*:*)",
          "857:  exit ;;",
          "858:     cris:Linux:*:*)",
          "860:  exit ;;",
          "861:     crisv32:Linux:*:*)",
          "863:  exit ;;",
          "864:     frv:Linux:*:*)",
          "866:  exit ;;",
          "867:     ia64:Linux:*:*)",
          "869:  exit ;;",
          "870:     m32r*:Linux:*:*)",
          "872:  exit ;;",
          "873:     m68*:Linux:*:*)",
          "875:  exit ;;",
          "879:  #undef CPU",
          "880:  #undef mips",
          "881:  #undef mipsel",
          "884:  #else",
          "887:  #else",
          "889:  #endif",
          "890:  #endif",
          "905:  #if defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL) || defined(MIPSEL)",
          "907:  #else",
          "908:  #if defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) || defined(MIPSEB)",
          "910:  #else",
          "912:  #endif",
          "913:  #endif",
          "914: EOF",
          "921:  ;;",
          "924:  exit ;;",
          "927:  exit ;;",
          "930:  exit ;;",
          "944:  exit ;;",
          "945:     parisc:Linux:*:* | hppa:Linux:*:*)",
          "946:  # Look for CPU level",
          "947:  case `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in",
          "951:  esac",
          "952:  exit ;;",
          "955:  exit ;;",
          "956:     s390:Linux:*:* | s390x:Linux:*:*)",
          "958:  exit ;;",
          "959:     sh64*:Linux:*:*)",
          "961:  exit ;;",
          "962:     sh*:Linux:*:*)",
          "964:  exit ;;",
          "965:     sparc:Linux:*:* | sparc64:Linux:*:*)",
          "967:  exit ;;",
          "968:     vax:Linux:*:*)",
          "970:  exit ;;",
          "971:     x86_64:Linux:*:*)",
          "973:  exit ;;",
          "976:  exit ;;",
          "1042:     i*86:DYNIX/ptx:4*:*)",
          "1043:  # ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.",
          "1044:  # earlier versions are messed up and put the nodename in both",
          "",
          "[Removed Lines]",
          "731:         exit ;;",
          "737:         exit ;;",
          "740:         exit ;;",
          "743:         exit ;;",
          "746:         exit ;;",
          "748:  echo ymp-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'",
          "751:  echo ${UNAME_MACHINE}-cray-unicos${UNAME_RELEASE} \\",
          "757:  echo t90-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'",
          "760:  echo alphaev5-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'",
          "763:  echo sv1-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'",
          "766:  echo craynv-cray-unicosmp${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'",
          "769:  FUJITSU_PROC=`uname -m | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`",
          "770:         FUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\\///'`",
          "771:         FUJITSU_REL=`echo ${UNAME_RELEASE} | sed -e 's/ /_/'`",
          "772:         echo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"",
          "773:         exit ;;",
          "775:         FUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\\///'`",
          "776:         FUJITSU_REL=`echo ${UNAME_RELEASE} | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/ /_/'`",
          "777:         echo \"sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"",
          "780:  echo ${UNAME_MACHINE}-pc-bsdi${UNAME_RELEASE}",
          "783:  echo sparc-unknown-bsdi${UNAME_RELEASE}",
          "786:  echo ${UNAME_MACHINE}-unknown-bsdi${UNAME_RELEASE}",
          "789:  case ${UNAME_MACHINE} in",
          "790:      pc98)",
          "791:   echo i386-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'` ;;",
          "793:   echo x86_64-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'` ;;",
          "795:   echo ${UNAME_MACHINE}-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'` ;;",
          "799:  echo ${UNAME_MACHINE}-pc-cygwin",
          "802:  echo ${UNAME_MACHINE}-pc-mingw32",
          "804:     i*:windows32*:*)",
          "805:      # uname -m includes \"-pc\" on this system.",
          "806:      echo ${UNAME_MACHINE}-mingw32",
          "809:  echo ${UNAME_MACHINE}-pc-pw32",
          "812:      case ${UNAME_MACHINE} in",
          "814:   echo i586-pc-interix${UNAME_RELEASE}",
          "816:      EM64T | authenticamd)",
          "817:   echo x86_64-unknown-interix${UNAME_RELEASE}",
          "820:     [345]86:Windows_95:* | [345]86:Windows_98:* | [345]86:Windows_NT:*)",
          "821:  echo i${UNAME_MACHINE}-pc-mks",
          "822:  exit ;;",
          "823:     i*:Windows_NT*:* | Pentium*:Windows_NT*:*)",
          "824:  # How do we know it's Interix rather than the generic POSIX subsystem?",
          "825:  # It also conflicts with pre-2.0 versions of AT&T UWIN. Should we",
          "826:  # UNAME_MACHINE based on the output of uname instead of i386?",
          "827:  echo i586-pc-interix",
          "828:  exit ;;",
          "830:  echo ${UNAME_MACHINE}-pc-uwin",
          "833:  echo x86_64-unknown-cygwin",
          "834:  exit ;;",
          "835:     p*:CYGWIN*:*)",
          "836:  echo powerpcle-unknown-cygwin",
          "839:  echo powerpcle-unknown-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`",
          "843:  echo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown-gnu`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`",
          "847:  echo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr '[A-Z]' '[a-z]'``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-gnu",
          "849:     i*86:Minix:*:*)",
          "850:  echo ${UNAME_MACHINE}-pc-minix",
          "853:  echo ${UNAME_MACHINE}-unknown-linux-${LIBC}",
          "856:  echo ${UNAME_MACHINE}-unknown-linux-${LIBC}",
          "859:  echo cris-axis-linux-${LIBC}",
          "862:  echo crisv32-axis-linux-${LIBC}",
          "865:      echo frv-unknown-linux-${LIBC}",
          "868:  echo ${UNAME_MACHINE}-unknown-linux-${LIBC}",
          "871:  echo ${UNAME_MACHINE}-unknown-linux-${LIBC}",
          "874:  echo ${UNAME_MACHINE}-unknown-linux-${LIBC}",
          "876:     mips:Linux:*:*)",
          "877:  eval $set_cc_for_build",
          "878:  sed 's/^ //' << EOF >$dummy.c",
          "882:  #if defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL) || defined(MIPSEL)",
          "883:  CPU=mipsel",
          "885:  #if defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) || defined(MIPSEB)",
          "886:  CPU=mips",
          "888:  CPU=",
          "891: EOF",
          "892:  eval \"`$CC_FOR_BUILD -E $dummy.c 2>/dev/null | sed -n '",
          "893:      /^CPU/{",
          "894:   s: ::g",
          "895:   p",
          "896:      }'`\"",
          "897:  test x\"${CPU}\" != x && { echo \"${CPU}-unknown-linux-${LIBC}\"; exit; }",
          "898:  ;;",
          "899:     mips64:Linux:*:*)",
          "900:  eval $set_cc_for_build",
          "901:  sed 's/^ //' << EOF >$dummy.c",
          "902:  #undef CPU",
          "903:  #undef mips64",
          "904:  #undef mips64el",
          "906:  CPU=mips64el",
          "909:  CPU=mips64",
          "911:  CPU=",
          "915:  eval \"`$CC_FOR_BUILD -E $dummy.c 2>/dev/null | sed -n '",
          "916:      /^CPU/{",
          "917:   s: ::g",
          "918:   p",
          "919:      }'`\"",
          "920:  test x\"${CPU}\" != x && { echo \"${CPU}-unknown-linux-${LIBC}\"; exit; }",
          "922:     or32:Linux:*:*)",
          "923:  echo or32-unknown-linux-${LIBC}",
          "925:     ppc:Linux:*:*)",
          "926:  echo powerpc-unknown-linux-${LIBC}",
          "928:     ppc64:Linux:*:*)",
          "929:  echo powerpc64-unknown-linux-${LIBC}",
          "931:     alpha:Linux:*:*)",
          "932:  case `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in",
          "933:    EV5)   UNAME_MACHINE=alphaev5 ;;",
          "934:    EV56)  UNAME_MACHINE=alphaev56 ;;",
          "935:    PCA56) UNAME_MACHINE=alphapca56 ;;",
          "936:    PCA57) UNAME_MACHINE=alphapca56 ;;",
          "937:    EV6)   UNAME_MACHINE=alphaev6 ;;",
          "938:    EV67)  UNAME_MACHINE=alphaev67 ;;",
          "939:    EV68*) UNAME_MACHINE=alphaev68 ;;",
          "940:         esac",
          "941:  objdump --private-headers /bin/sh | grep ld.so.1 >/dev/null",
          "942:  if test \"$?\" = 0 ; then LIBC=\"gnulibc1\" ; fi",
          "943:  echo ${UNAME_MACHINE}-unknown-linux-${LIBC}",
          "948:    PA7*) echo hppa1.1-unknown-linux-${LIBC} ;;",
          "949:    PA8*) echo hppa2.0-unknown-linux-${LIBC} ;;",
          "953:     parisc64:Linux:*:* | hppa64:Linux:*:*)",
          "954:  echo hppa64-unknown-linux-${LIBC}",
          "957:  echo ${UNAME_MACHINE}-ibm-linux",
          "960:      echo ${UNAME_MACHINE}-unknown-linux-${LIBC}",
          "963:  echo ${UNAME_MACHINE}-unknown-linux-${LIBC}",
          "966:  echo ${UNAME_MACHINE}-unknown-linux-${LIBC}",
          "969:  echo ${UNAME_MACHINE}-dec-linux-${LIBC}",
          "972:  echo x86_64-unknown-linux-${LIBC}",
          "974:     xtensa:Linux:*:*)",
          "975:      echo xtensa-unknown-linux-${LIBC}",
          "977:     i*86:Linux:*:*)",
          "978:  # The BFD linker knows what the default object file format is, so",
          "979:  # first see if it will tell us. cd to the root directory to prevent",
          "980:  # problems with other programs or directories called `ld' in the path.",
          "981:  # Set LC_ALL=C to ensure ld outputs messages in English.",
          "982:  ld_supported_targets=`cd /; LC_ALL=C ld --help 2>&1 \\",
          "983:     | sed -ne '/supported targets:/!d",
          "984:         s/[  ][  ]*/ /g",
          "985:         s/.*supported targets: *//",
          "986:         s/ .*//",
          "987:         p'`",
          "988:         case \"$ld_supported_targets\" in",
          "989:    elf32-i386)",
          "990:   TENTATIVE=\"${UNAME_MACHINE}-pc-linux-${LIBC}\"",
          "991:   ;;",
          "992:    a.out-i386-linux)",
          "993:   echo \"${UNAME_MACHINE}-pc-linux-${LIBC}aout\"",
          "994:   exit ;;",
          "995:    coff-i386)",
          "996:   echo \"${UNAME_MACHINE}-pc-linux-${LIBC}coff\"",
          "997:   exit ;;",
          "998:    \"\")",
          "999:   # Either a pre-BFD a.out linker (linux-gnuoldld) or",
          "1000:   # one that does not give us useful --help.",
          "1001:   echo \"${UNAME_MACHINE}-pc-linux-${LIBC}oldld\"",
          "1002:   exit ;;",
          "1003:  esac",
          "1004:  # This should get integrated into the C code below, but now we hack",
          "1005:  if [ \"$LIBC\" != \"gnu\" ] ; then echo \"$TENTATIVE\" && exit 0 ; fi",
          "1006:  # Determine whether the default compiler is a.out or elf",
          "1007:  eval $set_cc_for_build",
          "1008:  sed 's/^ //' << EOF >$dummy.c",
          "1009:  #include <features.h>",
          "1010:  #ifdef __ELF__",
          "1011:  # ifdef __GLIBC__",
          "1012:  #  if __GLIBC__ >= 2",
          "1013:  LIBC=gnu",
          "1014:  #  else",
          "1015:  LIBC=gnulibc1",
          "1016:  #  endif",
          "1017:  # else",
          "1018:  LIBC=gnulibc1",
          "1019:  # endif",
          "1020:  #else",
          "1021:  #if defined(__INTEL_COMPILER) || defined(__PGI) || defined(__SUNPRO_C) || defined(__SUNPRO_CC)",
          "1022:  LIBC=gnu",
          "1023:  #else",
          "1024:  LIBC=gnuaout",
          "1025:  #endif",
          "1026:  #endif",
          "1027:  #ifdef __dietlibc__",
          "1028:  LIBC=dietlibc",
          "1029:  #endif",
          "1030: EOF",
          "1031:  eval \"`$CC_FOR_BUILD -E $dummy.c 2>/dev/null | sed -n '",
          "1032:      /^LIBC/{",
          "1033:   s: ::g",
          "1034:   p",
          "1035:      }'`\"",
          "1036:  test x\"${LIBC}\" != x && {",
          "1037:   echo \"${UNAME_MACHINE}-pc-linux-${LIBC}\"",
          "1038:   exit",
          "1039:  }",
          "1040:  test x\"${TENTATIVE}\" != x && { echo \"${TENTATIVE}\"; exit; }",
          "1041:  ;;",
          "",
          "[Added Lines]",
          "788:  exit ;;",
          "794:  exit ;;",
          "797:  exit ;;",
          "800:  exit ;;",
          "803:  exit ;;",
          "805:  echo ymp-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'",
          "808:  echo \"$UNAME_MACHINE\"-cray-unicos\"$UNAME_RELEASE\" \\",
          "814:  echo t90-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'",
          "817:  echo alphaev5-cray-unicosmk\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'",
          "820:  echo sv1-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'",
          "823:  echo craynv-cray-unicosmp\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'",
          "826:  FUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`",
          "827:  FUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`",
          "828:  FUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`",
          "829:  echo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"",
          "830:  exit ;;",
          "832:  FUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`",
          "833:  FUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`",
          "834:  echo \"sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"",
          "837:  echo \"$UNAME_MACHINE\"-pc-bsdi\"$UNAME_RELEASE\"",
          "840:  echo sparc-unknown-bsdi\"$UNAME_RELEASE\"",
          "843:  echo \"$UNAME_MACHINE\"-unknown-bsdi\"$UNAME_RELEASE\"",
          "844:  exit ;;",
          "845:     arm:FreeBSD:*:*)",
          "846:  UNAME_PROCESSOR=`uname -p`",
          "847:  set_cc_for_build",
          "848:  if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\",
          "849:      | grep -q __ARM_PCS_VFP",
          "850:  then",
          "851:      echo \"${UNAME_PROCESSOR}\"-unknown-freebsd\"`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\"-gnueabi",
          "852:  else",
          "853:      echo \"${UNAME_PROCESSOR}\"-unknown-freebsd\"`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\"-gnueabihf",
          "854:  fi",
          "857:  UNAME_PROCESSOR=`/usr/bin/uname -p`",
          "858:  case \"$UNAME_PROCESSOR\" in",
          "860:   UNAME_PROCESSOR=x86_64 ;;",
          "861:      i386)",
          "862:   UNAME_PROCESSOR=i586 ;;",
          "864:  echo \"$UNAME_PROCESSOR\"-unknown-freebsd\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"",
          "867:  echo \"$UNAME_MACHINE\"-pc-cygwin",
          "868:  exit ;;",
          "870:  echo \"$UNAME_MACHINE\"-pc-mingw64",
          "873:  echo \"$UNAME_MACHINE\"-pc-mingw32",
          "876:  echo \"$UNAME_MACHINE\"-pc-msys",
          "879:  echo \"$UNAME_MACHINE\"-pc-pw32",
          "882:  case \"$UNAME_MACHINE\" in",
          "884:   echo i586-pc-interix\"$UNAME_RELEASE\"",
          "885:   exit ;;",
          "886:      authenticamd | genuineintel | EM64T)",
          "887:   echo x86_64-unknown-interix\"$UNAME_RELEASE\"",
          "889:      IA64)",
          "890:   echo ia64-unknown-interix\"$UNAME_RELEASE\"",
          "894:  echo \"$UNAME_MACHINE\"-pc-uwin",
          "897:  echo x86_64-pc-cygwin",
          "900:  echo powerpcle-unknown-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"",
          "904:  echo \"`echo \"$UNAME_MACHINE\"|sed -e 's,[-/].*$,,'`-unknown-$LIBC`echo \"$UNAME_RELEASE\"|sed -e 's,/.*$,,'`\"",
          "908:  echo \"$UNAME_MACHINE-unknown-`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`-$LIBC\"",
          "909:  exit ;;",
          "911:  echo \"$UNAME_MACHINE\"-unknown-minix",
          "912:  exit ;;",
          "913:     aarch64:Linux:*:*)",
          "914:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "915:  exit ;;",
          "916:     aarch64_be:Linux:*:*)",
          "917:  UNAME_MACHINE=aarch64_be",
          "918:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "919:  exit ;;",
          "920:     alpha:Linux:*:*)",
          "921:  case `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in",
          "922:    EV5)   UNAME_MACHINE=alphaev5 ;;",
          "923:    EV56)  UNAME_MACHINE=alphaev56 ;;",
          "924:    PCA56) UNAME_MACHINE=alphapca56 ;;",
          "925:    PCA57) UNAME_MACHINE=alphapca56 ;;",
          "926:    EV6)   UNAME_MACHINE=alphaev6 ;;",
          "927:    EV67)  UNAME_MACHINE=alphaev67 ;;",
          "928:    EV68*) UNAME_MACHINE=alphaev68 ;;",
          "929:  esac",
          "930:  objdump --private-headers /bin/sh | grep -q ld.so.1",
          "931:  if test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi",
          "932:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "934:     arc:Linux:*:* | arceb:Linux:*:*)",
          "935:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "938:  set_cc_for_build",
          "939:  if echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\",
          "940:      | grep -q __ARM_EABI__",
          "941:  then",
          "942:      echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "943:  else",
          "944:      if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\",
          "945:   | grep -q __ARM_PCS_VFP",
          "946:      then",
          "947:   echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabi",
          "948:      else",
          "949:   echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabihf",
          "950:      fi",
          "951:  fi",
          "954:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "957:  echo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"",
          "960:  echo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"",
          "961:  exit ;;",
          "962:     e2k:Linux:*:*)",
          "963:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "966:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "967:  exit ;;",
          "968:     hexagon:Linux:*:*)",
          "969:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "970:  exit ;;",
          "971:     i*86:Linux:*:*)",
          "972:  echo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"",
          "975:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "976:  exit ;;",
          "977:     k1om:Linux:*:*)",
          "978:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "981:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "984:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "986:     mips:Linux:*:* | mips64:Linux:*:*)",
          "987:  set_cc_for_build",
          "988:  IS_GLIBC=0",
          "989:  test x\"${LIBC}\" = xgnu && IS_GLIBC=1",
          "990:  sed 's/^ //' << EOF > \"$dummy.c\"",
          "994:  #undef mips64",
          "995:  #undef mips64el",
          "996:  #if ${IS_GLIBC} && defined(_ABI64)",
          "997:  LIBCABI=gnuabi64",
          "999:  #if ${IS_GLIBC} && defined(_ABIN32)",
          "1000:  LIBCABI=gnuabin32",
          "1002:  LIBCABI=${LIBC}",
          "1006:  #if ${IS_GLIBC} && defined(__mips64) && defined(__mips_isa_rev) && __mips_isa_rev>=6",
          "1007:  CPU=mipsisa64r6",
          "1008:  #else",
          "1009:  #if ${IS_GLIBC} && !defined(__mips64) && defined(__mips_isa_rev) && __mips_isa_rev>=6",
          "1010:  CPU=mipsisa32r6",
          "1011:  #else",
          "1012:  #if defined(__mips64)",
          "1013:  CPU=mips64",
          "1014:  #else",
          "1015:  CPU=mips",
          "1016:  #endif",
          "1017:  #endif",
          "1018:  #endif",
          "1021:  MIPS_ENDIAN=el",
          "1024:  MIPS_ENDIAN=",
          "1026:  MIPS_ENDIAN=",
          "1030:  eval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU\\|^MIPS_ENDIAN\\|^LIBCABI'`\"",
          "1031:  test \"x$CPU\" != x && { echo \"$CPU${MIPS_ENDIAN}-unknown-linux-$LIBCABI\"; exit; }",
          "1033:     mips64el:Linux:*:*)",
          "1034:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1036:     openrisc*:Linux:*:*)",
          "1037:  echo or1k-unknown-linux-\"$LIBC\"",
          "1039:     or32:Linux:*:* | or1k*:Linux:*:*)",
          "1040:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1042:     padre:Linux:*:*)",
          "1043:  echo sparc-unknown-linux-\"$LIBC\"",
          "1044:  exit ;;",
          "1045:     parisc64:Linux:*:* | hppa64:Linux:*:*)",
          "1046:  echo hppa64-unknown-linux-\"$LIBC\"",
          "1051:    PA7*) echo hppa1.1-unknown-linux-\"$LIBC\" ;;",
          "1052:    PA8*) echo hppa2.0-unknown-linux-\"$LIBC\" ;;",
          "1056:     ppc64:Linux:*:*)",
          "1057:  echo powerpc64-unknown-linux-\"$LIBC\"",
          "1058:  exit ;;",
          "1059:     ppc:Linux:*:*)",
          "1060:  echo powerpc-unknown-linux-\"$LIBC\"",
          "1061:  exit ;;",
          "1062:     ppc64le:Linux:*:*)",
          "1063:  echo powerpc64le-unknown-linux-\"$LIBC\"",
          "1064:  exit ;;",
          "1065:     ppcle:Linux:*:*)",
          "1066:  echo powerpcle-unknown-linux-\"$LIBC\"",
          "1067:  exit ;;",
          "1068:     riscv32:Linux:*:* | riscv64:Linux:*:*)",
          "1069:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1072:  echo \"$UNAME_MACHINE\"-ibm-linux-\"$LIBC\"",
          "1075:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1078:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1081:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1082:  exit ;;",
          "1083:     tile*:Linux:*:*)",
          "1084:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1087:  echo \"$UNAME_MACHINE\"-dec-linux-\"$LIBC\"",
          "1090:  echo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"",
          "1092:     xtensa*:Linux:*:*)",
          "1093:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1046:  echo i386-sequent-sysv4",
          "1047:  exit ;;",
          "1048:     i*86:UNIX_SV:4.2MP:2.*)",
          "1052:  # I just have to hope.  -- rms.",
          "1055:  exit ;;",
          "1056:     i*86:OS/2:*:*)",
          "1057:  # If we were able to find `uname', then EMX Unix compatibility",
          "1058:  # is probably installed.",
          "1060:  exit ;;",
          "1061:     i*86:XTS-300:*:STOP)",
          "1063:  exit ;;",
          "1064:     i*86:atheos:*:*)",
          "1066:  exit ;;",
          "1067:     i*86:syllable:*:*)",
          "1069:  exit ;;",
          "1072:  exit ;;",
          "1073:     i*86:*DOS:*:*)",
          "1075:  exit ;;",
          "1078:  if grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then",
          "1080:  else",
          "1082:  fi",
          "1083:  exit ;;",
          "1084:     i*86:*:5:[678]*)",
          "1086:  case `/bin/uname -X | grep \"^Machine\"` in",
          "1090:  esac",
          "1092:  exit ;;",
          "1093:     i*86:*:3.2:*)",
          "1094:  if test -f /usr/options/cb.name; then",
          "1095:   UNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`",
          "1097:  elif /bin/uname -X 2>/dev/null >/dev/null ; then",
          "1098:   UNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`",
          "1099:   (/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486",
          "",
          "[Removed Lines]",
          "1049:         # Unixware is an offshoot of SVR4, but it has its own version",
          "1050:         # number series starting with 2...",
          "1051:         # I am not positive that other SVR4 systems won't match this,",
          "1053:         # Use sysv4.2uw... so that sysv4* matches it.",
          "1054:  echo ${UNAME_MACHINE}-pc-sysv4.2uw${UNAME_VERSION}",
          "1059:  echo ${UNAME_MACHINE}-pc-os2-emx",
          "1062:  echo ${UNAME_MACHINE}-unknown-stop",
          "1065:  echo ${UNAME_MACHINE}-unknown-atheos",
          "1068:  echo ${UNAME_MACHINE}-pc-syllable",
          "1070:     i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.0*:*)",
          "1071:  echo i386-unknown-lynxos${UNAME_RELEASE}",
          "1074:  echo ${UNAME_MACHINE}-pc-msdosdjgpp",
          "1076:     i*86:*:4.*:* | i*86:SYSTEM_V:4.*:*)",
          "1077:  UNAME_REL=`echo ${UNAME_RELEASE} | sed 's/\\/MP$//'`",
          "1079:   echo ${UNAME_MACHINE}-univel-sysv${UNAME_REL}",
          "1081:   echo ${UNAME_MACHINE}-pc-sysv${UNAME_REL}",
          "1085:      # UnixWare 7.x, OpenUNIX and OpenServer 6.",
          "1091:  echo ${UNAME_MACHINE}-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}",
          "1096:   echo ${UNAME_MACHINE}-pc-isc$UNAME_REL",
          "",
          "[Added Lines]",
          "1102:  # Unixware is an offshoot of SVR4, but it has its own version",
          "1103:  # number series starting with 2...",
          "1104:  # I am not positive that other SVR4 systems won't match this,",
          "1106:  # Use sysv4.2uw... so that sysv4* matches it.",
          "1107:  echo \"$UNAME_MACHINE\"-pc-sysv4.2uw\"$UNAME_VERSION\"",
          "1112:  echo \"$UNAME_MACHINE\"-pc-os2-emx",
          "1115:  echo \"$UNAME_MACHINE\"-unknown-stop",
          "1118:  echo \"$UNAME_MACHINE\"-unknown-atheos",
          "1121:  echo \"$UNAME_MACHINE\"-pc-syllable",
          "1123:     i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.[02]*:*)",
          "1124:  echo i386-unknown-lynxos\"$UNAME_RELEASE\"",
          "1127:  echo \"$UNAME_MACHINE\"-pc-msdosdjgpp",
          "1129:     i*86:*:4.*:*)",
          "1130:  UNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`",
          "1132:   echo \"$UNAME_MACHINE\"-univel-sysv\"$UNAME_REL\"",
          "1134:   echo \"$UNAME_MACHINE\"-pc-sysv\"$UNAME_REL\"",
          "1138:  # UnixWare 7.x, OpenUNIX and OpenServer 6.",
          "1144:  echo \"$UNAME_MACHINE-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}\"",
          "1149:   echo \"$UNAME_MACHINE\"-pc-isc\"$UNAME_REL\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1103:    && UNAME_MACHINE=i686",
          "1104:   (/bin/uname -X|grep '^Machine.*Pentium Pro' >/dev/null) \\",
          "1105:    && UNAME_MACHINE=i686",
          "1107:  else",
          "1109:  fi",
          "1110:  exit ;;",
          "1111:     pc:*:*:*)",
          "1112:  # Left here for compatibility:",
          "1117:     Intel:Mach:3*:*)",
          "1118:  echo i386-pc-mach3",
          "1119:  exit ;;",
          "",
          "[Removed Lines]",
          "1106:   echo ${UNAME_MACHINE}-pc-sco$UNAME_REL",
          "1108:   echo ${UNAME_MACHINE}-pc-sysv32",
          "1113:         # uname -m prints for DJGPP always 'pc', but it prints nothing about",
          "1114:         # the processor, so we play safe by assuming i386.",
          "1115:  echo i386-pc-msdosdjgpp",
          "1116:         exit ;;",
          "",
          "[Added Lines]",
          "1159:   echo \"$UNAME_MACHINE\"-pc-sco\"$UNAME_REL\"",
          "1161:   echo \"$UNAME_MACHINE\"-pc-sysv32",
          "1166:  # uname -m prints for DJGPP always 'pc', but it prints nothing about",
          "1167:  # the processor, so we play safe by assuming i586.",
          "1168:  # Note: whatever this is, it MUST be the same as what config.sub",
          "1169:  # prints for the \"djgpp\" host, or else GDB configure will decide that",
          "1170:  # this is a cross-build.",
          "1171:  echo i586-pc-msdosdjgpp",
          "1172:  exit ;;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1122:  exit ;;",
          "1123:     i860:*:4.*:*) # i860-SVR4",
          "1124:  if grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then",
          "1126:  else # Add other i860-SVR4 vendors below as they are discovered.",
          "1128:  fi",
          "1129:  exit ;;",
          "1130:     mini*:CTIX:SYS*5:*)",
          "",
          "[Removed Lines]",
          "1125:    echo i860-stardent-sysv${UNAME_RELEASE} # Stardent Vistra i860-SVR4",
          "1127:    echo i860-unknown-sysv${UNAME_RELEASE}  # Unknown i860-SVR4",
          "",
          "[Added Lines]",
          "1181:    echo i860-stardent-sysv\"$UNAME_RELEASE\" # Stardent Vistra i860-SVR4",
          "1183:    echo i860-unknown-sysv\"$UNAME_RELEASE\"  # Unknown i860-SVR4",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1144:  test -r /etc/.relid \\",
          "1145:  && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`",
          "1146:  /bin/uname -p 2>/dev/null | grep 86 >/dev/null \\",
          "1148:  /bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\",
          "1150:     3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)",
          "1153:     m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)",
          "1155:  exit ;;",
          "1156:     mc68030:UNIX_System_V:4.*:*)",
          "1157:  echo m68k-atari-sysv4",
          "1158:  exit ;;",
          "1159:     TSUNAMI:LynxOS:2.*:*)",
          "1161:  exit ;;",
          "1162:     rs6000:LynxOS:2.*:*)",
          "1164:  exit ;;",
          "1167:  exit ;;",
          "1168:     SM[BE]S:UNIX_SV:*:*)",
          "1170:  exit ;;",
          "1171:     RM*:ReliantUNIX-*:*:*)",
          "1172:  echo mips-sni-sysv4",
          "",
          "[Removed Lines]",
          "1147:    && { echo i486-ncr-sysv4.3${OS_REL}; exit; }",
          "1149:    && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;",
          "1151:         /bin/uname -p 2>/dev/null | grep 86 >/dev/null \\",
          "1152:           && { echo i486-ncr-sysv4; exit; } ;;",
          "1154:  echo m68k-unknown-lynxos${UNAME_RELEASE}",
          "1160:  echo sparc-unknown-lynxos${UNAME_RELEASE}",
          "1163:  echo rs6000-unknown-lynxos${UNAME_RELEASE}",
          "1165:     PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.0*:*)",
          "1166:  echo powerpc-unknown-lynxos${UNAME_RELEASE}",
          "1169:  echo mips-dde-sysv${UNAME_RELEASE}",
          "",
          "[Added Lines]",
          "1203:    && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }",
          "1205:    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;",
          "1207:  /bin/uname -p 2>/dev/null | grep 86 >/dev/null \\",
          "1208:    && { echo i486-ncr-sysv4; exit; } ;;",
          "1209:     NCR*:*:4.2:* | MPRAS*:*:4.2:*)",
          "1210:  OS_REL='.3'",
          "1211:  test -r /etc/.relid \\",
          "1212:      && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`",
          "1213:  /bin/uname -p 2>/dev/null | grep 86 >/dev/null \\",
          "1214:      && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }",
          "1215:  /bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\",
          "1216:      && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; }",
          "1217:  /bin/uname -p 2>/dev/null | /bin/grep pteron >/dev/null \\",
          "1218:      && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;",
          "1220:  echo m68k-unknown-lynxos\"$UNAME_RELEASE\"",
          "1226:  echo sparc-unknown-lynxos\"$UNAME_RELEASE\"",
          "1229:  echo rs6000-unknown-lynxos\"$UNAME_RELEASE\"",
          "1231:     PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.[02]*:*)",
          "1232:  echo powerpc-unknown-lynxos\"$UNAME_RELEASE\"",
          "1235:  echo mips-dde-sysv\"$UNAME_RELEASE\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1178:  if uname -p 2>/dev/null >/dev/null ; then",
          "1179:   UNAME_MACHINE=`(uname -p) 2>/dev/null`",
          "1181:  else",
          "1182:   echo ns32k-sni-sysv",
          "1183:  fi",
          "1184:  exit ;;",
          "1190:  # From Gerald Hewes <hewes@openmarket.com>.",
          "1191:  # How about differentiating between stratus architectures? -djm",
          "",
          "[Removed Lines]",
          "1180:   echo ${UNAME_MACHINE}-sni-sysv4",
          "1185:     PENTIUM:*:4.0*:*) # Unisys `ClearPath HMP IX 4000' SVR4/MP effort",
          "1186:                       # says <Richard.M.Bartel@ccMail.Census.GOV>",
          "1187:         echo i586-unisys-sysv4",
          "1188:         exit ;;",
          "",
          "[Added Lines]",
          "1246:   echo \"$UNAME_MACHINE\"-sni-sysv4",
          "1251:     PENTIUM:*:4.0*:*) # Unisys `ClearPath HMP IX 4000' SVR4/MP effort",
          "1252:    # says <Richard.M.Bartel@ccMail.Census.GOV>",
          "1253:  echo i586-unisys-sysv4",
          "1254:  exit ;;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1197:  exit ;;",
          "1198:     i*86:VOS:*:*)",
          "1199:  # From Paul.Green@stratus.com.",
          "1201:  exit ;;",
          "1203:  # From Paul.Green@stratus.com.",
          "1204:  echo hppa1.1-stratus-vos",
          "1205:  exit ;;",
          "1206:     mc68*:A/UX:*:*)",
          "1208:  exit ;;",
          "1209:     news*:NEWS-OS:6*:*)",
          "1210:  echo mips-sony-newsos6",
          "1211:  exit ;;",
          "1212:     R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)",
          "1213:  if [ -d /usr/nec ]; then",
          "1215:  else",
          "1217:  fi",
          "1219:     BeBox:BeOS:*:*) # BeOS running on hardware made by Be, PPC only.",
          "1220:  echo powerpc-be-beos",
          "1221:  exit ;;",
          "",
          "[Removed Lines]",
          "1200:  echo ${UNAME_MACHINE}-stratus-vos",
          "1207:  echo m68k-apple-aux${UNAME_RELEASE}",
          "1214:          echo mips-nec-sysv${UNAME_RELEASE}",
          "1216:          echo mips-unknown-sysv${UNAME_RELEASE}",
          "1218:         exit ;;",
          "",
          "[Added Lines]",
          "1266:  echo \"$UNAME_MACHINE\"-stratus-vos",
          "1273:  echo m68k-apple-aux\"$UNAME_RELEASE\"",
          "1280:   echo mips-nec-sysv\"$UNAME_RELEASE\"",
          "1282:   echo mips-unknown-sysv\"$UNAME_RELEASE\"",
          "1284:  exit ;;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1225:     BePC:BeOS:*:*) # BeOS running on Intel PC compatible.",
          "1226:  echo i586-pc-beos",
          "1227:  exit ;;",
          "1228:     SX-4:SUPER-UX:*:*)",
          "1230:  exit ;;",
          "1231:     SX-5:SUPER-UX:*:*)",
          "1233:  exit ;;",
          "1234:     SX-6:SUPER-UX:*:*)",
          "1236:  exit ;;",
          "1237:     SX-7:SUPER-UX:*:*)",
          "1239:  exit ;;",
          "1240:     SX-8:SUPER-UX:*:*)",
          "1242:  exit ;;",
          "1243:     SX-8R:SUPER-UX:*:*)",
          "1245:  exit ;;",
          "1246:     Power*:Rhapsody:*:*)",
          "1248:  exit ;;",
          "1251:  exit ;;",
          "1254:  case $UNAME_PROCESSOR in",
          "1255:      unknown) UNAME_PROCESSOR=powerpc ;;",
          "1256:  esac",
          "1258:  exit ;;",
          "1260:  UNAME_PROCESSOR=`uname -p`",
          "1262:   UNAME_PROCESSOR=i386",
          "1263:   UNAME_MACHINE=pc",
          "1264:  fi",
          "1266:  exit ;;",
          "1268:  echo i386-pc-qnx",
          "1269:  exit ;;",
          "1272:  exit ;;",
          "1275:  exit ;;",
          "1277:  echo mips-compaq-nonstopux",
          "",
          "[Removed Lines]",
          "1229:  echo sx4-nec-superux${UNAME_RELEASE}",
          "1232:  echo sx5-nec-superux${UNAME_RELEASE}",
          "1235:  echo sx6-nec-superux${UNAME_RELEASE}",
          "1238:  echo sx7-nec-superux${UNAME_RELEASE}",
          "1241:  echo sx8-nec-superux${UNAME_RELEASE}",
          "1244:  echo sx8r-nec-superux${UNAME_RELEASE}",
          "1247:  echo powerpc-apple-rhapsody${UNAME_RELEASE}",
          "1250:  echo ${UNAME_MACHINE}-apple-rhapsody${UNAME_RELEASE}",
          "1253:  UNAME_PROCESSOR=`uname -p` || UNAME_PROCESSOR=unknown",
          "1257:  echo ${UNAME_PROCESSOR}-apple-darwin${UNAME_RELEASE}",
          "1261:  if test \"$UNAME_PROCESSOR\" = \"x86\"; then",
          "1265:  echo ${UNAME_PROCESSOR}-${UNAME_MACHINE}-nto-qnx${UNAME_RELEASE}",
          "1270:     NSE-?:NONSTOP_KERNEL:*:*)",
          "1271:  echo nse-tandem-nsk${UNAME_RELEASE}",
          "1273:     NSR-?:NONSTOP_KERNEL:*:*)",
          "1274:  echo nsr-tandem-nsk${UNAME_RELEASE}",
          "",
          "[Added Lines]",
          "1294:     BePC:Haiku:*:*) # Haiku running on Intel PC compatible.",
          "1295:  echo i586-pc-haiku",
          "1296:  exit ;;",
          "1297:     x86_64:Haiku:*:*)",
          "1298:  echo x86_64-unknown-haiku",
          "1299:  exit ;;",
          "1301:  echo sx4-nec-superux\"$UNAME_RELEASE\"",
          "1304:  echo sx5-nec-superux\"$UNAME_RELEASE\"",
          "1307:  echo sx6-nec-superux\"$UNAME_RELEASE\"",
          "1310:  echo sx7-nec-superux\"$UNAME_RELEASE\"",
          "1313:  echo sx8-nec-superux\"$UNAME_RELEASE\"",
          "1316:  echo sx8r-nec-superux\"$UNAME_RELEASE\"",
          "1317:  exit ;;",
          "1318:     SX-ACE:SUPER-UX:*:*)",
          "1319:  echo sxace-nec-superux\"$UNAME_RELEASE\"",
          "1322:  echo powerpc-apple-rhapsody\"$UNAME_RELEASE\"",
          "1325:  echo \"$UNAME_MACHINE\"-apple-rhapsody\"$UNAME_RELEASE\"",
          "1328:  UNAME_PROCESSOR=`uname -p`",
          "1332:  if command -v xcode-select > /dev/null 2> /dev/null && \\",
          "1333:   ! xcode-select --print-path > /dev/null 2> /dev/null ; then",
          "1334:      # Avoid executing cc if there is no toolchain installed as",
          "1335:      # cc will be a stub that puts up a graphical alert",
          "1336:      # prompting the user to install developer tools.",
          "1337:      CC_FOR_BUILD=no_compiler_found",
          "1338:  else",
          "1339:      set_cc_for_build",
          "1340:  fi",
          "1341:  if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then",
          "1342:      if (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\",
          "1343:      (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\",
          "1344:      grep IS_64BIT_ARCH >/dev/null",
          "1345:      then",
          "1346:   case $UNAME_PROCESSOR in",
          "1347:       i386) UNAME_PROCESSOR=x86_64 ;;",
          "1348:       powerpc) UNAME_PROCESSOR=powerpc64 ;;",
          "1349:   esac",
          "1350:      fi",
          "1351:      # On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc",
          "1352:      if (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\",
          "1353:      (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\",
          "1354:      grep IS_PPC >/dev/null",
          "1355:      then",
          "1356:   UNAME_PROCESSOR=powerpc",
          "1357:      fi",
          "1358:  elif test \"$UNAME_PROCESSOR\" = i386 ; then",
          "1359:      # uname -m returns i386 or x86_64",
          "1360:      UNAME_PROCESSOR=$UNAME_MACHINE",
          "1361:  fi",
          "1362:  echo \"$UNAME_PROCESSOR\"-apple-darwin\"$UNAME_RELEASE\"",
          "1366:  if test \"$UNAME_PROCESSOR\" = x86; then",
          "1370:  echo \"$UNAME_PROCESSOR\"-\"$UNAME_MACHINE\"-nto-qnx\"$UNAME_RELEASE\"",
          "1375:     NEO-*:NONSTOP_KERNEL:*:*)",
          "1376:  echo neo-tandem-nsk\"$UNAME_RELEASE\"",
          "1378:     NSE-*:NONSTOP_KERNEL:*:*)",
          "1379:  echo nse-tandem-nsk\"$UNAME_RELEASE\"",
          "1380:  exit ;;",
          "1381:     NSR-*:NONSTOP_KERNEL:*:*)",
          "1382:  echo nsr-tandem-nsk\"$UNAME_RELEASE\"",
          "1383:  exit ;;",
          "1384:     NSV-*:NONSTOP_KERNEL:*:*)",
          "1385:  echo nsv-tandem-nsk\"$UNAME_RELEASE\"",
          "1386:  exit ;;",
          "1387:     NSX-*:NONSTOP_KERNEL:*:*)",
          "1388:  echo nsx-tandem-nsk\"$UNAME_RELEASE\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1280:  echo bs2000-siemens-sysv",
          "1281:  exit ;;",
          "1282:     DS/*:UNIX_System_V:*:*)",
          "1284:  exit ;;",
          "1286:  # \"uname -m\" is not consistent, so use $cputype instead. 386",
          "1287:  # is converted to i386 for consistency with other x86",
          "1288:  # operating systems.",
          "1290:      UNAME_MACHINE=i386",
          "1291:  else",
          "1292:      UNAME_MACHINE=\"$cputype\"",
          "1293:  fi",
          "1295:  exit ;;",
          "1297:  echo pdp10-unknown-tops10",
          "",
          "[Removed Lines]",
          "1283:  echo ${UNAME_MACHINE}-${UNAME_SYSTEM}-${UNAME_RELEASE}",
          "1289:  if test \"$cputype\" = \"386\"; then",
          "1294:  echo ${UNAME_MACHINE}-unknown-plan9",
          "",
          "[Added Lines]",
          "1397:  echo \"$UNAME_MACHINE\"-\"$UNAME_SYSTEM\"-\"$UNAME_RELEASE\"",
          "1403:  # shellcheck disable=SC2154",
          "1404:  if test \"$cputype\" = 386; then",
          "1409:  echo \"$UNAME_MACHINE\"-unknown-plan9",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1312:  echo pdp10-unknown-its",
          "1313:  exit ;;",
          "1314:     SEI:*:*:SEIUX)",
          "1316:  exit ;;",
          "1319:  exit ;;",
          "1323:      A*) echo alpha-dec-vms ; exit ;;",
          "1324:      I*) echo ia64-dec-vms ; exit ;;",
          "1325:      V*) echo vax-dec-vms ; exit ;;",
          "",
          "[Removed Lines]",
          "1315:         echo mips-sei-seiux${UNAME_RELEASE}",
          "1318:  echo ${UNAME_MACHINE}-unknown-dragonfly`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`",
          "1321:      UNAME_MACHINE=`(uname -p) 2>/dev/null`",
          "1322:  case \"${UNAME_MACHINE}\" in",
          "",
          "[Added Lines]",
          "1430:  echo mips-sei-seiux\"$UNAME_RELEASE\"",
          "1433:  echo \"$UNAME_MACHINE\"-unknown-dragonfly\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"",
          "1436:  UNAME_MACHINE=`(uname -p) 2>/dev/null`",
          "1437:  case \"$UNAME_MACHINE\" in",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1328:  echo i386-pc-xenix",
          "1329:  exit ;;",
          "1330:     i*86:skyos:*:*)",
          "1332:  exit ;;",
          "1333:     i*86:rdos:*:*)",
          "1335:  exit ;;",
          "1336: esac",
          "1343: #ifdef _SEQUENT_",
          "1346: #endif",
          "1347: main ()",
          "1348: {",
          "",
          "[Removed Lines]",
          "1331:  echo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE}` | sed -e 's/ .*$//'",
          "1334:  echo ${UNAME_MACHINE}-pc-rdos",
          "1338: #echo '(No uname command or uname output not recognized.)' 1>&2",
          "1339: #echo \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" 1>&2",
          "1341: eval $set_cc_for_build",
          "1342: cat >$dummy.c <<EOF",
          "1344: # include <sys/types.h>",
          "1345: # include <sys/utsname.h>",
          "",
          "[Added Lines]",
          "1446:  echo \"$UNAME_MACHINE\"-pc-skyos\"`echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//'`\"",
          "1449:  echo \"$UNAME_MACHINE\"-pc-rdos",
          "1450:  exit ;;",
          "1451:     i*86:AROS:*:*)",
          "1452:  echo \"$UNAME_MACHINE\"-pc-aros",
          "1453:  exit ;;",
          "1454:     x86_64:VMkernel:*:*)",
          "1455:  echo \"$UNAME_MACHINE\"-unknown-esx",
          "1456:  exit ;;",
          "1457:     amd64:Isilon\\ OneFS:*:*)",
          "1458:  echo x86_64-unknown-onefs",
          "1459:  exit ;;",
          "1461:  echo \"$UNAME_MACHINE\"-unknown-unleashed\"$UNAME_RELEASE\"",
          "1465: # No uname command or uname output not recognized.",
          "1466: set_cc_for_build",
          "1467: cat > \"$dummy.c\" <<EOF",
          "1469: #include <sys/types.h>",
          "1470: #include <sys/utsname.h>",
          "1471: #endif",
          "1472: #if defined(ultrix) || defined(_ultrix) || defined(__ultrix) || defined(__ultrix__)",
          "1473: #if defined (vax) || defined (__vax) || defined (__vax__) || defined(mips) || defined(__mips) || defined(__mips__) || defined(MIPS) || defined(__MIPS__)",
          "1474: #include <signal.h>",
          "1475: #if defined(_SIZE_T_) || defined(SIGLOST)",
          "1476: #include <sys/utsname.h>",
          "1477: #endif",
          "1478: #endif",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1355: #include <sys/param.h>",
          "1356:   printf (\"m68k-sony-newsos%s\\n\",",
          "1357: #ifdef NEWSOS4",
          "1359: #else",
          "1361: #endif",
          "1368: #endif",
          "1372: #endif",
          "1374: #if defined (NeXT)",
          "",
          "[Removed Lines]",
          "1358:           \"4\"",
          "1360:    \"\"",
          "1362:          ); exit (0);",
          "1363: #endif",
          "1364: #endif",
          "1366: #if defined (__arm) && defined (__acorn) && defined (__unix)",
          "1367:   printf (\"arm-acorn-riscix\\n\"); exit (0);",
          "1370: #if defined (hp300) && !defined (hpux)",
          "1371:   printf (\"m68k-hp-bsd\\n\"); exit (0);",
          "",
          "[Added Lines]",
          "1491:   \"4\"",
          "1493:   \"\"",
          "1495:   ); exit (0);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1410: #endif",
          "1412: #if defined (_SEQUENT_)",
          "1425: #endif",
          "1427: #if defined (vax)",
          "1446: #endif",
          "1448: #if defined (alliant) && defined (i860)",
          "",
          "[Removed Lines]",
          "1413:     struct utsname un;",
          "1415:     uname(&un);",
          "1417:     if (strncmp(un.version, \"V2\", 2) == 0) {",
          "1418:  printf (\"i386-sequent-ptx2\\n\"); exit (0);",
          "1419:     }",
          "1421:  printf (\"i386-sequent-ptx1\\n\"); exit (0);",
          "1422:     }",
          "1423:     printf (\"i386-sequent-ptx\\n\"); exit (0);",
          "1428: # if !defined (ultrix)",
          "1429: #  include <sys/param.h>",
          "1430: #  if defined (BSD)",
          "1431: #   if BSD == 43",
          "1432:       printf (\"vax-dec-bsd4.3\\n\"); exit (0);",
          "1433: #   else",
          "1434: #    if BSD == 199006",
          "1435:       printf (\"vax-dec-bsd4.3reno\\n\"); exit (0);",
          "1436: #    else",
          "1437:       printf (\"vax-dec-bsd\\n\"); exit (0);",
          "1438: #    endif",
          "1439: #   endif",
          "1440: #  else",
          "1441:     printf (\"vax-dec-bsd\\n\"); exit (0);",
          "1442: #  endif",
          "1443: # else",
          "1444:     printf (\"vax-dec-ultrix\\n\"); exit (0);",
          "1445: # endif",
          "",
          "[Added Lines]",
          "1538:   struct utsname un;",
          "1540:   uname(&un);",
          "1541:   if (strncmp(un.version, \"V2\", 2) == 0) {",
          "1542:     printf (\"i386-sequent-ptx2\\n\"); exit (0);",
          "1543:   }",
          "1545:     printf (\"i386-sequent-ptx1\\n\"); exit (0);",
          "1546:   }",
          "1547:   printf (\"i386-sequent-ptx\\n\"); exit (0);",
          "1551: #if !defined (ultrix)",
          "1552: #include <sys/param.h>",
          "1553: #if defined (BSD)",
          "1554: #if BSD == 43",
          "1555:   printf (\"vax-dec-bsd4.3\\n\"); exit (0);",
          "1556: #else",
          "1557: #if BSD == 199006",
          "1558:   printf (\"vax-dec-bsd4.3reno\\n\"); exit (0);",
          "1559: #else",
          "1560:   printf (\"vax-dec-bsd\\n\"); exit (0);",
          "1561: #endif",
          "1562: #endif",
          "1563: #else",
          "1564:   printf (\"vax-dec-bsd\\n\"); exit (0);",
          "1565: #endif",
          "1566: #else",
          "1567: #if defined(_SIZE_T_) || defined(SIGLOST)",
          "1568:   struct utsname un;",
          "1569:   uname (&un);",
          "1570:   printf (\"vax-dec-ultrix%s\\n\", un.release); exit (0);",
          "1571: #else",
          "1572:   printf (\"vax-dec-ultrix\\n\"); exit (0);",
          "1573: #endif",
          "1574: #endif",
          "1575: #endif",
          "1576: #if defined(ultrix) || defined(_ultrix) || defined(__ultrix) || defined(__ultrix__)",
          "1577: #if defined(mips) || defined(__mips) || defined(__mips__) || defined(MIPS) || defined(__MIPS__)",
          "1578: #if defined(_SIZE_T_) || defined(SIGLOST)",
          "1579:   struct utsname *un;",
          "1580:   uname (&un);",
          "1581:   printf (\"mips-dec-ultrix%s\\n\", un.release); exit (0);",
          "1582: #else",
          "1583:   printf (\"mips-dec-ultrix\\n\"); exit (0);",
          "1584: #endif",
          "1585: #endif",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1453: }",
          "1454: EOF",
          "1457:  { echo \"$SYSTEM_NAME\"; exit; }",
          "1459: # Apollos put the system type in the environment.",
          "1489: cat >&2 <<EOF",
          "1497: and",
          "1505: config.guess timestamp = $timestamp",
          "",
          "[Removed Lines]",
          "1456: $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null && SYSTEM_NAME=`$dummy` &&",
          "1461: test -d /usr/apollo && { echo ${ISP}-apollo-${SYSTYPE}; exit; }",
          "1463: # Convex versions that predate uname can use getsysinfo(1)",
          "1465: if [ -x /usr/convex/getsysinfo ]",
          "1466: then",
          "1467:     case `getsysinfo -f cpu_type` in",
          "1468:     c1*)",
          "1469:  echo c1-convex-bsd",
          "1470:  exit ;;",
          "1471:     c2*)",
          "1472:  if getsysinfo -f scalar_acc",
          "1473:  then echo c32-convex-bsd",
          "1474:  else echo c2-convex-bsd",
          "1475:  fi",
          "1476:  exit ;;",
          "1477:     c34*)",
          "1478:  echo c34-convex-bsd",
          "1479:  exit ;;",
          "1480:     c38*)",
          "1481:  echo c38-convex-bsd",
          "1482:  exit ;;",
          "1483:     c4*)",
          "1484:  echo c4-convex-bsd",
          "1485:  exit ;;",
          "1486:     esac",
          "1487: fi",
          "1490: $0: unable to guess system type",
          "1492: This script, last modified $timestamp, has failed to recognize",
          "1493: the operating system you are using. It is advised that you",
          "1494: download the most up to date version of the config scripts from",
          "1496:   http://savannah.gnu.org/cgi-bin/viewcvs/*checkout*/config/config/config.guess",
          "1498:   http://savannah.gnu.org/cgi-bin/viewcvs/*checkout*/config/config/config.sub",
          "1500: If the version you run ($0) is already up to date, please",
          "1501: send the following data and any information you think might be",
          "1502: pertinent to <config-patches@gnu.org> in order to provide the needed",
          "1503: information to handle your system.",
          "",
          "[Added Lines]",
          "1596: $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null && SYSTEM_NAME=`$dummy` &&",
          "1600: test -d /usr/apollo && { echo \"$ISP-apollo-$SYSTYPE\"; exit; }",
          "1602: echo \"$0: unable to guess system type\" >&2",
          "1604: case \"$UNAME_MACHINE:$UNAME_SYSTEM\" in",
          "1605:     mips:Linux | mips64:Linux)",
          "1606:  # If we got here on MIPS GNU/Linux, output extra information.",
          "1607:  cat >&2 <<EOF",
          "1609: NOTE: MIPS GNU/Linux systems require a C compiler to fully recognize",
          "1610: the system type. Please install a C compiler and try again.",
          "1611: EOF",
          "1612:  ;;",
          "1613: esac",
          "1617: This script (version $timestamp), has failed to recognize the",
          "1618: operating system you are using. If your script is old, overwrite *all*",
          "1619: copies of config.guess and config.sub with the latest versions from:",
          "1621:   https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess",
          "1623:   https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub",
          "1625: If $0 has already been updated, send the following data and any",
          "1626: information you think might be pertinent to config-patches@gnu.org to",
          "1627: provide the necessary information to handle your system.",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1519: /usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`",
          "1520: /usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`",
          "1526: EOF",
          "1528: exit 1",
          "1530: # Local variables:",
          "1532: # time-stamp-start: \"timestamp='\"",
          "1533: # time-stamp-format: \"%:y-%02m-%02d\"",
          "1534: # time-stamp-end: \"'\"",
          "",
          "[Removed Lines]",
          "1522: UNAME_MACHINE = ${UNAME_MACHINE}",
          "1523: UNAME_RELEASE = ${UNAME_RELEASE}",
          "1524: UNAME_SYSTEM  = ${UNAME_SYSTEM}",
          "1525: UNAME_VERSION = ${UNAME_VERSION}",
          "1531: # eval: (add-hook 'write-file-hooks 'time-stamp)",
          "",
          "[Added Lines]",
          "1646: UNAME_MACHINE = \"$UNAME_MACHINE\"",
          "1647: UNAME_RELEASE = \"$UNAME_RELEASE\"",
          "1648: UNAME_SYSTEM  = \"$UNAME_SYSTEM\"",
          "1649: UNAME_VERSION = \"$UNAME_VERSION\"",
          "1655: # eval: (add-hook 'before-save-hook 'time-stamp)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7b3a99fce8b4a757f2b2ef2f0b02d68566f2528d9ae1e30628522717f872466c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}