{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e7acce66b2f3bedc07e99ddf60bd3551e7bc6242",
      "candidate_info": {
        "commit_hash": "e7acce66b2f3bedc07e99ddf60bd3551e7bc6242",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7acce66b2f3bedc07e99ddf60bd3551e7bc6242",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Avoid a buffer overread in ptrmapPutOvflPtr() that can occurs in a corrupt database file that has large entries and uses autovacuum.\n\nFossilOrigin-Name: f8b781cf41800e9f61a1c5376404a97e76a2bbbcaa17396d42be62f731363947",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fc9791ea987352e3e1322fbb7f833c23b402432af8249f9d397c6f7456788637",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1369:   assert( pCell!=0 );",
          "1370:   pPage->xParseCell(pPage, pCell, &info);",
          "1371:   if( info.nLocal<info.nPayload ){",
          "1373:     ptrmapPut(pPage->pBt, ovfl, PTRMAP_OVERFLOW1, pPage->pgno, pRC);",
          "1374:   }",
          "1375: }",
          "",
          "[Removed Lines]",
          "1372:     Pgno ovfl = get4byte(&pCell[info.nSize-4]);",
          "",
          "[Added Lines]",
          "1372:     Pgno ovfl;",
          "1373:     if( SQLITE_WITHIN(pPage->aDataEnd, pCell, pCell+info.nLocal) ){",
          "1375:       return;",
          "1376:     }",
          "1377:     ovfl = get4byte(&pCell[info.nSize-4]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00a6153fafe01c9dde8f84a70f1cb810256300dd",
      "candidate_info": {
        "commit_hash": "00a6153fafe01c9dde8f84a70f1cb810256300dd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/00a6153fafe01c9dde8f84a70f1cb810256300dd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/autoindex5.test"
        ],
        "message": "Use the OP_Sequence opcode for generating unique rowid values for an autoindex on a co-routine implementation of a subquery.\n\nFossilOrigin-Name: eab4297577e4d325fed4757867fc77860de7448998d86f098c8a50272e17d35e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/autoindex5.test||test/autoindex5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5fd20e09a522b62a529cf4d76fbdf0a09426f67ffa30430cac6b81ebf32ba43e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:       pOp->p2 = pOp->p3;",
          "587:       pOp->p3 = 0;",
          "588:     }else if( pOp->opcode==OP_Rowid ){",
          "594:       }else{",
          "595:         pOp->opcode = OP_Null;",
          "596:         pOp->p1 = 0;",
          "",
          "[Removed Lines]",
          "589:       if( bIncrRowid ){",
          "591:         pOp->opcode = OP_AddImm;",
          "592:         pOp->p1 = pOp->p2;",
          "593:         pOp->p2 = 1;",
          "",
          "[Added Lines]",
          "589:       if( iAutoidxCur ){",
          "590:         pOp->opcode = OP_Sequence;",
          "591:         pOp->p1 = iAutoidxCur;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "864:   if( pTabItem->fg.viaCoroutine ){",
          "865:     sqlite3VdbeChangeP2(v, addrCounter, regBase+n);",
          "866:     testcase( pParse->db->mallocFailed );",
          "867:     translateColumnToCopy(pParse, addrTop, pLevel->iTabCur,",
          "869:     sqlite3VdbeGoto(v, addrTop);",
          "870:     pTabItem->fg.viaCoroutine = 0;",
          "871:   }else{",
          "",
          "[Removed Lines]",
          "868:                           pTabItem->regResult, 1);",
          "",
          "[Added Lines]",
          "865:     assert( pLevel->iIdxCur>0 );",
          "867:                           pTabItem->regResult, pLevel->iIdxCur);",
          "",
          "---------------"
        ],
        "test/autoindex5.test||test/autoindex5.test": [
          "File: test/autoindex5.test -> test/autoindex5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:       SELECT sum(z) FROM vvv WHERE x='aaa'",
          "124:   ) FROM one;",
          "125: } {8.0}",
          "127: # Ticket https://www.sqlite.org/src/info/787fa716be3a7f65",
          "128: # Segfault due to multiple uses of the same subquery where the",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126: do_execsql_test 2.2 {",
          "127:   DROP TABLE t1;",
          "128:   CREATE TABLE t1(aaa);",
          "129:   INSERT INTO t1(aaa) VALUES(9);",
          "130:   SELECT (",
          "131:     SELECT aaa FROM t1 GROUP BY (",
          "132:       SELECT bbb FROM (",
          "133:         SELECT ccc AS bbb FROM (",
          "134:            SELECT 1 ccc",
          "135:         ) WHERE rowid IS NOT 1",
          "136:       ) WHERE bbb = 1",
          "137:     )",
          "138:   );",
          "139: } {9}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c589acbc501fa0f04e1f818b2fce94131fd05542",
      "candidate_info": {
        "commit_hash": "c589acbc501fa0f04e1f818b2fce94131fd05542",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c589acbc501fa0f04e1f818b2fce94131fd05542",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vtab.c",
          "test/fts4rename.test"
        ],
        "message": "Fix a problem allowing a Table object to be deleted from within a call to the xDestroy method of the associated virtual table, causing a use-after-free error.\n\nFossilOrigin-Name: 1dbbb0101e8213b92b9a4c78c0fd2f9d0240a8ea3b40dff1033d1b8d71fb04ef",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c",
          "test/fts4rename.test||test/fts4rename.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b6d7d42b7426622a26b67809cd1f21285fea120aa1897377b9946840463b41f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "841:     p = vtabDisconnectAll(db, pTab);",
          "842:     xDestroy = p->pMod->pModule->xDestroy;",
          "844:     rc = xDestroy(p->pVtab);",
          "846:     if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844:     pTab->nTabRef++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "849:       pTab->pVTable = 0;",
          "850:       sqlite3VtabUnlock(p);",
          "851:     }",
          "852:   }",
          "854:   return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:     sqlite3DeleteTable(db, pTab);",
          "",
          "---------------"
        ],
        "test/fts4rename.test||test/fts4rename.test": [
          "File: test/fts4rename.test -> test/fts4rename.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 April 30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: source $testdir/fts3_common.tcl",
          "16: set ::testprefix fts4rename",
          "18: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "19: ifcapable !fts3 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE temp.t1 USING fts3(a);",
          "26:   BEGIN;",
          "27:   CREATE TABLE t2(x);",
          "28: } {}",
          "30: do_catchsql_test 1.1 {",
          "31:   ALTER TABLE t1_content RENAME c0a TO docid;",
          "32: } {1 {duplicate column name: docid}}",
          "34: do_catchsql_test 1.2 {",
          "35:   UPDATE t1 SET Col0 = 1 ;",
          "36: } {1 {no such column: Col0}}",
          "38: do_catchsql_test 1.3 {",
          "39:   ROLLBACK;",
          "40:   DROP TABLE t1;",
          "41: } {0 {}}",
          "43: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ed07d1274ce924779e769eedb647f11bc729259",
      "candidate_info": {
        "commit_hash": "8ed07d1274ce924779e769eedb647f11bc729259",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8ed07d1274ce924779e769eedb647f11bc729259",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the --max-stack option to dbfuzz2.\n\nFossilOrigin-Name: c11ae4fed89484f0a0061002861b5d599bbda8e40a1f0c33fdbe8cb072134d5c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 928e622178bd004be52b2271ac554176aebe9d6e115ecac4e7072eccbb4262b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include <stdarg.h>",
          "44: #include <ctype.h>",
          "45: #include <stdint.h>",
          "46: #include \"sqlite3.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #include <sys/time.h>",
          "47: #include <sys/resource.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:         bVdbeDebug = 1;",
          "149:         continue;",
          "150:       }",
          "151:     }",
          "152:     argv[j++] = argv[i];",
          "153:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:       if( strcmp(z,\"max-stack\")==0 ){",
          "154:         struct rlimit x,y;",
          "155:         if( i+1==argc ){",
          "156:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "157:           exit(1);",
          "158:         }",
          "159:         memset(&x,0,sizeof(x));",
          "160:         getrlimit(RLIMIT_STACK, &x);",
          "161:         y.rlim_cur = atoi(argv[++i]);",
          "162:         y.rlim_max = x.rlim_cur;",
          "163:         setrlimit(RLIMIT_STACK, &y);",
          "164:         memset(&y,0,sizeof(y));",
          "165:         getrlimit(RLIMIT_STACK, &y);",
          "166:         printf(\"Stack size limit changed from %d to %d\\n\",",
          "167:                (int)x.rlim_cur, (int)y.rlim_cur);",
          "168:         continue;",
          "169:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b96b6969ae7f2f8dfa6a07b97fea1057dbcdab5",
      "candidate_info": {
        "commit_hash": "2b96b6969ae7f2f8dfa6a07b97fea1057dbcdab5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2b96b6969ae7f2f8dfa6a07b97fea1057dbcdab5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Improved detection of corruption on the freeblock list of a btree page.\n\nFossilOrigin-Name: 4b00799bdf107fce8a9dd84fd5bf6597e4f3373659b89aae4a1242be5964726f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2ac0e42f8ab7a9184c2a2efd13bd50ab51bc01f9f34e9e63591fd18db02dff54",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1647:   if( (data[hdr+2] || data[hdr+1]) && gap+2<=top ){",
          "1648:     u8 *pSpace = pageFindSlot(pPage, nByte, &rc);",
          "1649:     if( pSpace ){",
          "1653:     }else if( rc ){",
          "1654:       return rc;",
          "1655:     }",
          "",
          "[Removed Lines]",
          "1650:       assert( pSpace>=data && (pSpace - data)<65536 );",
          "1652:       return SQLITE_OK;",
          "",
          "[Added Lines]",
          "1650:       assert( pSpace+nByte<=data+pPage->pBt->usableSize );",
          "1651:       if( (*pIdx = (int)(pSpace-data))<=gap ){",
          "1652:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1653:       }else{",
          "1654:         return SQLITE_OK;",
          "1655:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6897:   assert( i<iEnd );",
          "6898:   j = get2byte(&aData[hdr+5]);",
          "6900:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6902:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6899:   if( j>(u32)usableSize ){ j = 0; }",
          "",
          "[Added Lines]",
          "6902:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "---------------"
        ]
      }
    }
  ]
}