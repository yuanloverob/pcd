{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4d02e77f44faa4184f14ad7dd061646acf745815",
      "candidate_info": {
        "commit_hash": "4d02e77f44faa4184f14ad7dd061646acf745815",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4d02e77f44faa4184f14ad7dd061646acf745815",
        "files": [
          "src/node.cc"
        ],
        "message": "Move prog_start_time init after isolate assigned",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2634: char** ProcessInit(int argc, char *argv[]) {",
          "2639:   argv = uv_setup_args(argc, argv);",
          "",
          "[Removed Lines]",
          "2636:   uv_uptime(&prog_start_time);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2770:   Load(process_l);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2766:   uv_uptime(&prog_start_time);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5fdeebd94d58bf715d991d5bc63be6fff507f27d",
      "candidate_info": {
        "commit_hash": "5fdeebd94d58bf715d991d5bc63be6fff507f27d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5fdeebd94d58bf715d991d5bc63be6fff507f27d",
        "files": [
          "lib/net.js",
          "test/simple/test-net-pause-resume-connecting.js",
          "test/simple/test-net-socket-pause-resume-immediate.js"
        ],
        "message": "net: make pause work with connecting sockets\n\nThis fixes the problem that calling pause() on a socket would not\nactually prevent 'data' events from being emitted. It also replaces\nthe existing test by a more elaborate one.\n\nRef: #3118",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-pause-resume-connecting.js||test/simple/test-net-pause-resume-connecting.js",
          "test/simple/test-net-socket-pause-resume-immediate.js||test/simple/test-net-socket-pause-resume-immediate.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "237: Socket.prototype.pause = function() {",
          "238:   this._paused = true;",
          "244:     this._handle.readStop();",
          "245:   }",
          "246: };",
          "",
          "[Removed Lines]",
          "239:   if (this._connecting) {",
          "241:     return;",
          "242:   }",
          "243:   if (this._handle) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249: Socket.prototype.resume = function() {",
          "250:   this._paused = false;",
          "256:     this._handle.readStart();",
          "257:   }",
          "258: };",
          "",
          "[Removed Lines]",
          "251:   if (this._connecting) {",
          "253:     return;",
          "254:   }",
          "255:   if (this._handle) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "737:   assert.ok(self._connecting);",
          "738:   self._connecting = false;",
          "746:   if (status == 0) {",
          "747:     self.readable = readable;",
          "748:     self.writable = writable;",
          "749:     timers.active(self);",
          "752:       handle.readStart();",
          "753:     }",
          "",
          "[Removed Lines]",
          "741:   if (self._paused) {",
          "742:     self._paused = false;",
          "743:     self.pause();",
          "744:   }",
          "751:     if (self.readable) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1041:   });",
          "1042:   socket.readable = socket.writable = true;",
          "1046:   self._connections++;",
          "1047:   socket.server = self;",
          "",
          "[Removed Lines]",
          "1044:   socket.resume();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-pause-resume-connecting.js||test/simple/test-net-pause-resume-connecting.js": [
          "File: test/simple/test-net-pause-resume-connecting.js -> test/simple/test-net-pause-resume-connecting.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common'),",
          "23:     assert = require('assert'),",
          "24:     net = require('net');",
          "26: var connections = 0,",
          "27:     dataEvents = 0,",
          "28:     conn;",
          "32: var server = net.createServer(function(conn) {",
          "33:   connections++;",
          "34:   conn.end('This was the year he fell to pieces.');",
          "36:   if (connections === 5)",
          "37:     server.close();",
          "38: });",
          "40: server.listen(common.PORT);",
          "44: conn = require('net').createConnection(common.PORT, 'localhost');",
          "45: conn.resume();",
          "46: conn.on('data', onDataOk);",
          "50: conn = require('net').createConnection(common.PORT, 'localhost');",
          "51: conn.pause();",
          "52: conn.resume();",
          "53: conn.on('data', onDataOk);",
          "57: conn = require('net').createConnection(common.PORT, 'localhost');",
          "58: conn.pause();",
          "59: conn.on('data', onDataError);",
          "60: scheduleTearDown(conn);",
          "64: conn = require('net').createConnection(common.PORT, 'localhost');",
          "65: conn.resume();",
          "66: conn.pause();",
          "67: conn.resume();",
          "68: conn.on('data', onDataOk);",
          "72: conn = require('net').createConnection(common.PORT, 'localhost');",
          "73: conn.resume();",
          "74: conn.resume();",
          "75: conn.pause();",
          "76: conn.on('data', onDataError);",
          "77: scheduleTearDown(conn);",
          "81: function onDataError() {",
          "82:   assert(false);",
          "83: }",
          "85: function onDataOk() {",
          "86:   dataEvents++;",
          "87: }",
          "89: function scheduleTearDown(conn) {",
          "90:   setTimeout(function() {",
          "91:     conn.removeAllListeners('data');",
          "92:     conn.resume();",
          "93:   }, 100);",
          "94: }",
          "98: process.on('exit', function() {",
          "99:   assert.strictEqual(connections, 5);",
          "100:   assert.strictEqual(dataEvents, 3);",
          "101: });",
          "",
          "---------------"
        ],
        "test/simple/test-net-socket-pause-resume-immediate.js||test/simple/test-net-socket-pause-resume-immediate.js": [
          "File: test/simple/test-net-socket-pause-resume-immediate.js -> test/simple/test-net-socket-pause-resume-immediate.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63d13e86a58b2885c388f57a53227c2a23c83b49",
      "candidate_info": {
        "commit_hash": "63d13e86a58b2885c388f57a53227c2a23c83b49",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/63d13e86a58b2885c388f57a53227c2a23c83b49",
        "files": [
          "lib/child_process.js",
          "src/process_wrap.cc",
          "test/simple/test-child-process-cwd.js",
          "test/simple/test-child-process-exec-error.js"
        ],
        "message": "child_process: emit error on exec failure\n\nlibuv calls the exit cb with exit code == -1 when it fails to spawn the new\nprocess. Anticipate that and emit the error on the ChildProcess object.",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "src/process_wrap.cc||src/process_wrap.cc",
          "test/simple/test-child-process-cwd.js||test/simple/test-child-process-cwd.js",
          "test/simple/test-child-process-exec-error.js||test/simple/test-child-process-exec-error.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:     if (signalCode) {",
          "662:       self.signalCode = signalCode;",
          "663:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "671:     self._handle.close();",
          "672:     self._handle = null;",
          "676:     maybeClose(self);",
          "677:   };",
          "",
          "[Removed Lines]",
          "674:     self.emit('exit', self.exitCode, self.signalCode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:       String::New(signo_string(term_signal))",
          "295:     };",
          "297:     if (onexit_sym.IsEmpty()) {",
          "298:       onexit_sym = NODE_PSYMBOL(\"onexit\");",
          "299:     }",
          "300:     MakeCallback(wrap->object_, onexit_sym, ARRAY_SIZE(argv), argv);",
          "301:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:     if (exit_status == -1) {",
          "298:       SetErrno(uv_last_error(uv_default_loop()));",
          "299:     }",
          "",
          "---------------"
        ],
        "test/simple/test-child-process-cwd.js||test/simple/test-child-process-cwd.js": [
          "File: test/simple/test-child-process-cwd.js -> test/simple/test-child-process-cwd.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   });",
          "55:   returns++;",
          "56: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   return child;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   testCwd({cwd: '/'}, 0, '/');",
          "65: }",
          "71: testCwd(undefined, 0);",
          "",
          "[Removed Lines]",
          "68: testCwd({cwd: 'does-not-exist'}, 127);",
          "",
          "[Added Lines]",
          "70: (function() {",
          "71:   var errors = 0;",
          "73:   testCwd({cwd: 'does-not-exist'}, -1).on('error', function(e) {",
          "74:     assert.equal(e.code, 'ENOENT');",
          "75:     errors++;",
          "76:   });",
          "78:   process.on('exit', function() {",
          "79:     assert.equal(errors, 1);",
          "80:   });",
          "81: })();",
          "",
          "---------------"
        ],
        "test/simple/test-child-process-exec-error.js||test/simple/test-child-process-exec-error.js": [
          "File: test/simple/test-child-process-exec-error.js -> test/simple/test-child-process-exec-error.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var child_process = require('child_process');",
          "26: function test(fun, code) {",
          "27:   var errors = 0;",
          "29:   fun('does-not-exist', function(err) {",
          "30:     assert.equal(err.code, code);",
          "31:     errors++;",
          "32:   });",
          "34:   process.on('exit', function() {",
          "35:     assert.equal(errors, 1);",
          "36:   });",
          "37: }",
          "39: test(child_process.exec, 127); // exit code of /bin/sh or cmd.exe",
          "40: test(child_process.execFile, 'ENOENT');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2433eeb3850a91feb99bab530cb7183800166390",
      "candidate_info": {
        "commit_hash": "2433eeb3850a91feb99bab530cb7183800166390",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2433eeb3850a91feb99bab530cb7183800166390",
        "files": [
          "deps/uv/common.gypi",
          "deps/uv/gyp_uv",
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/core.c",
          "deps/uv/src/unix/ev/ev_kqueue.c",
          "deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/tty.c",
          "deps/uv/src/unix/udp.c",
          "deps/uv/src/uv-common.h",
          "deps/uv/src/win/core.c",
          "deps/uv/src/win/fs-event.c",
          "deps/uv/src/win/process.c",
          "deps/uv/src/win/tty.c",
          "deps/uv/src/win/udp.c",
          "deps/uv/test/benchmark-tcp-write-batch.c",
          "deps/uv/test/benchmark-udp-packet-storm.c",
          "deps/uv/test/blackhole-server.c",
          "deps/uv/test/run-tests.c",
          "deps/uv/test/task.h",
          "deps/uv/test/test-thread.c",
          "deps/uv/test/test-timer.c",
          "deps/uv/test/test-tty.c"
        ],
        "message": "uv: upgrade to 1cca230",
        "before_after_code_files": [
          "deps/uv/common.gypi||deps/uv/common.gypi",
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/unix/ev/ev_kqueue.c||deps/uv/src/unix/ev/ev_kqueue.c",
          "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/tty.c||deps/uv/src/unix/tty.c",
          "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c",
          "deps/uv/src/uv-common.h||deps/uv/src/uv-common.h",
          "deps/uv/src/win/core.c||deps/uv/src/win/core.c",
          "deps/uv/src/win/fs-event.c||deps/uv/src/win/fs-event.c",
          "deps/uv/src/win/process.c||deps/uv/src/win/process.c",
          "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c",
          "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c",
          "deps/uv/test/benchmark-tcp-write-batch.c||deps/uv/test/benchmark-tcp-write-batch.c",
          "deps/uv/test/benchmark-udp-packet-storm.c||deps/uv/test/benchmark-udp-packet-storm.c",
          "deps/uv/test/blackhole-server.c||deps/uv/test/blackhole-server.c",
          "deps/uv/test/run-tests.c||deps/uv/test/run-tests.c",
          "deps/uv/test/task.h||deps/uv/test/task.h",
          "deps/uv/test/test-thread.c||deps/uv/test/test-thread.c",
          "deps/uv/test/test-timer.c||deps/uv/test/test-timer.c",
          "deps/uv/test/test-tty.c||deps/uv/test/test-tty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/common.gypi||deps/uv/common.gypi": [
          "File: deps/uv/common.gypi -> deps/uv/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:           'GCC_SYMBOLS_PRIVATE_EXTERN': 'YES',      # -fvisibility=hidden",
          "154:           'GCC_THREADSAFE_STATICS': 'NO',           # -fno-threadsafe-statics",
          "155:           'GCC_WARN_ABOUT_MISSING_NEWLINE': 'YES',  # -Wnewline-eof",
          "157:           'PREBINDING': 'NO',                       # No -Wl,-prebind",
          "158:           'USE_HEADERMAP': 'NO',",
          "159:           'OTHER_CFLAGS': [",
          "",
          "[Removed Lines]",
          "156:           'MACOSX_DEPLOYMENT_TARGET': '10.4',       # -mmacosx-version-min=10.4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "653:     const char* multicast_addr, const char* interface_addr,",
          "654:     uv_membership membership);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "667: int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl);",
          "680: int uv_udp_set_broadcast(uv_udp_t* handle, int on);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: void uv_close(uv_handle_t* handle, uv_close_cb close_cb) {",
          "68:   uv_async_t* async;",
          "69:   uv_timer_t* timer;",
          "70:   uv_stream_t* stream;",
          "",
          "[Removed Lines]",
          "67:   uv_udp_t* udp;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:       break;",
          "99:     case UV_UDP:",
          "105:       break;",
          "107:     case UV_PREPARE:",
          "",
          "[Removed Lines]",
          "100:       udp = (uv_udp_t*)handle;",
          "101:       uv__udp_watcher_stop(udp, &udp->read_watcher);",
          "102:       uv__udp_watcher_stop(udp, &udp->write_watcher);",
          "103:       uv__close(udp->fd);",
          "104:       udp->fd = -1;",
          "",
          "[Added Lines]",
          "99:       uv__udp_start_close((uv_udp_t*)handle);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234:   handle->flags = 0;",
          "236:   ev_init(&handle->next_watcher, uv__next);",
          "240:   ev_ref(loop->ev);",
          "",
          "[Removed Lines]",
          "237:   handle->next_watcher.data = handle;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "279:       break;",
          "281:     case UV_UDP:",
          "286:       break;",
          "288:     case UV_PROCESS:",
          "",
          "[Removed Lines]",
          "282:       assert(!ev_is_active(&((uv_udp_t*)handle)->read_watcher));",
          "283:       assert(!ev_is_active(&((uv_udp_t*)handle)->write_watcher));",
          "284:       assert(((uv_udp_t*)handle)->fd == -1);",
          "285:       uv__udp_destroy((uv_udp_t*)handle);",
          "",
          "[Added Lines]",
          "276:       uv__udp_finish_close((uv_udp_t*)handle);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "307: }",
          "313:   assert(revents == EV_IDLE);",
          "",
          "[Removed Lines]",
          "310: void uv__next(EV_P_ ev_idle* watcher, int revents) {",
          "311:   uv_handle_t* handle = watcher->data;",
          "312:   assert(watcher == &handle->next_watcher);",
          "",
          "[Added Lines]",
          "301: void uv__next(EV_P_ ev_idle* w, int revents) {",
          "302:   uv_handle_t* handle = container_of(w, uv_handle_t, next_watcher);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "349: static void uv__prepare(EV_P_ ev_prepare* w, int revents) {",
          "352:   if (prepare->prepare_cb) {",
          "353:     prepare->prepare_cb(prepare, 0);",
          "",
          "[Removed Lines]",
          "350:   uv_prepare_t* prepare = w->data;",
          "",
          "[Added Lines]",
          "341:   uv_prepare_t* prepare = container_of(w, uv_prepare_t, prepare_watcher);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "360:   loop->counters.prepare_init++;",
          "362:   ev_prepare_init(&prepare->prepare_watcher, uv__prepare);",
          "365:   prepare->prepare_cb = NULL;",
          "367:   return 0;",
          "",
          "[Removed Lines]",
          "363:   prepare->prepare_watcher.data = prepare;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "399: static void uv__check(EV_P_ ev_check* w, int revents) {",
          "402:   if (check->check_cb) {",
          "403:     check->check_cb(check, 0);",
          "",
          "[Removed Lines]",
          "400:   uv_check_t* check = w->data;",
          "",
          "[Added Lines]",
          "389:   uv_check_t* check = container_of(w, uv_check_t, check_watcher);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "410:   loop->counters.check_init++;",
          "412:   ev_check_init(&check->check_watcher, uv__check);",
          "415:   check->check_cb = NULL;",
          "417:   return 0;",
          "",
          "[Removed Lines]",
          "413:   check->check_watcher.data = check;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "449: static void uv__idle(EV_P_ ev_idle* w, int revents) {",
          "452:   if (idle->idle_cb) {",
          "453:     idle->idle_cb(idle, 0);",
          "",
          "[Removed Lines]",
          "450:   uv_idle_t* idle = (uv_idle_t*)(w->data);",
          "",
          "[Added Lines]",
          "437:   uv_idle_t* idle = container_of(w, uv_idle_t, idle_watcher);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "461:   loop->counters.idle_init++;",
          "463:   ev_idle_init(&idle->idle_watcher, uv__idle);",
          "466:   idle->idle_cb = NULL;",
          "468:   return 0;",
          "",
          "[Removed Lines]",
          "464:   idle->idle_watcher.data = idle;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "519: static void uv__async(EV_P_ ev_async* w, int revents) {",
          "522:   if (async->async_cb) {",
          "523:     async->async_cb(async, 0);",
          "",
          "[Removed Lines]",
          "520:   uv_async_t* async = w->data;",
          "",
          "[Added Lines]",
          "505:   uv_async_t* async = container_of(w, uv_async_t, async_watcher);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "530:   loop->counters.async_init++;",
          "532:   ev_async_init(&async->async_watcher, uv__async);",
          "535:   async->async_cb = async_cb;",
          "",
          "[Removed Lines]",
          "533:   async->async_watcher.data = async;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "551: static void uv__timer_cb(EV_P_ ev_timer* w, int revents) {",
          "554:   if (!ev_is_active(w)) {",
          "555:     ev_ref(EV_A);",
          "",
          "[Removed Lines]",
          "552:   uv_timer_t* timer = w->data;",
          "",
          "[Added Lines]",
          "535:   uv_timer_t* timer = container_of(w, uv_timer_t, timer_watcher);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "566:   loop->counters.timer_init++;",
          "568:   ev_init(&timer->timer_watcher, uv__timer_cb);",
          "571:   return 0;",
          "572: }",
          "",
          "[Removed Lines]",
          "569:   timer->timer_watcher.data = timer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "790: }",
          "810: int uv__nonblock(int fd, int set) {",
          "811: #if FIONBIO",
          "812:   return ioctl(fd, FIONBIO, &set);",
          "",
          "[Removed Lines]",
          "793: int uv__close(int fd) {",
          "794:   int status;",
          "801:   do {",
          "802:     status = close(fd);",
          "803:   }",
          "804:   while (status == -1 && errno == EINTR);",
          "806:   return status;",
          "807: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/ev/ev_kqueue.c||deps/uv/src/unix/ev/ev_kqueue.c": [
          "File: deps/uv/src/unix/ev/ev_kqueue.c -> deps/uv/src/unix/ev/ev_kqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200: void inline_size",
          "201: kqueue_fork (EV_P)",
          "202: {",
          "205:   while ((backend_fd = kqueue ()) < 0)",
          "206:     ev_syserr (\"(libev) kqueue\");",
          "",
          "[Removed Lines]",
          "203:   close (backend_fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h": [
          "File: deps/uv/src/unix/internal.h -> deps/uv/src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: };",
          "158: void uv__handle_init(uv_loop_t* loop, uv_handle_t* handle, uv_handle_type type);",
          "161: int uv__nonblock(int fd, int set) __attribute__((unused));",
          "162: int uv__cloexec(int fd, int set) __attribute__((unused));",
          "163: int uv__socket(int domain, int type, int protocol);",
          "166: uv_err_code uv_translate_sys_error(int sys_errno);",
          "167: void uv_fatal_error(const int errorno, const char* syscall);",
          "",
          "[Removed Lines]",
          "157: int uv__close(int fd);",
          "",
          "[Added Lines]",
          "168: #define uv__close(fd) close(fd)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191: int uv_pipe_cleanup(uv_pipe_t* handle);",
          "198: void uv__fs_event_destroy(uv_fs_event_t* handle);",
          "",
          "[Removed Lines]",
          "194: void uv__udp_destroy(uv_udp_t* handle);",
          "195: void uv__udp_watcher_stop(uv_udp_t* handle, ev_io* w);",
          "",
          "[Added Lines]",
          "199: void uv__udp_start_close(uv_udp_t* handle);",
          "200: void uv__udp_finish_close(uv_udp_t* handle);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/tty.c||deps/uv/src/unix/tty.c": [
          "File: deps/uv/src/unix/tty.c -> deps/uv/src/unix/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   struct stat s;",
          "122:   if (file < 0) {",
          "125:   }",
          "127:   if (isatty(file)) {",
          "",
          "[Removed Lines]",
          "124:     return -1;",
          "",
          "[Added Lines]",
          "123:     return UV_UNKNOWN_HANDLE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:   }",
          "131:   if (fstat(file, &s)) {",
          "134:   }",
          "136:   if (!S_ISSOCK(s.st_mode) && !S_ISFIFO(s.st_mode)) {",
          "",
          "[Removed Lines]",
          "133:     return -1;",
          "",
          "[Added Lines]",
          "131:     return UV_UNKNOWN_HANDLE;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c": [
          "File: deps/uv/src/unix/udp.c -> deps/uv/src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <stdlib.h>",
          "32: static void uv__udp_run_completed(uv_udp_t* handle);",
          "33: static void uv__udp_run_pending(uv_udp_t* handle);",
          "37: static int uv__udp_maybe_deferred_bind(uv_udp_t* handle, int domain);",
          "38: static int uv__udp_send(uv_udp_send_t* req, uv_udp_t* handle, uv_buf_t bufs[],",
          "39:     int bufcnt, struct sockaddr* addr, socklen_t addrlen, uv_udp_send_cb send_cb);",
          "59: }",
          "79: }",
          "83:   uv_udp_send_t* req;",
          "84:   ngx_queue_t* q;",
          "86:   uv__udp_run_completed(handle);",
          "88:   while (!ngx_queue_empty(&handle->write_queue)) {",
          "",
          "[Removed Lines]",
          "31: static void uv__udp_watcher_start(uv_udp_t* handle, ev_io* w);",
          "34: static void uv__udp_recvmsg(uv_udp_t* handle);",
          "35: static void uv__udp_sendmsg(uv_udp_t* handle);",
          "36: static void uv__udp_io(EV_P_ ev_io* w, int events);",
          "42: static void uv__udp_watcher_start(uv_udp_t* handle, ev_io* w) {",
          "43:   int flags;",
          "45:   if (ev_is_active(w)) {",
          "46:     return;",
          "47:   }",
          "49:   assert(w == &handle->read_watcher",
          "50:       || w == &handle->write_watcher);",
          "52:   flags = (w == &handle->read_watcher ? EV_READ : EV_WRITE);",
          "54:   w->data = handle;",
          "55:   ev_set_cb(w, uv__udp_io);",
          "56:   ev_io_set(w, handle->fd, flags);",
          "57:   ev_io_start(handle->loop->ev, w);",
          "58:   ev_unref(handle->loop->ev);",
          "62: void uv__udp_watcher_stop(uv_udp_t* handle, ev_io* w) {",
          "63:   int flags;",
          "65:   if (!ev_is_active(w)) {",
          "66:     return;",
          "67:   }",
          "69:   assert(w == &handle->read_watcher",
          "70:       || w == &handle->write_watcher);",
          "72:   flags = (w == &handle->read_watcher ? EV_READ : EV_WRITE);",
          "74:   ev_ref(handle->loop->ev);",
          "75:   ev_io_stop(handle->loop->ev, w);",
          "76:   ev_io_set(w, -1, flags);",
          "77:   ev_set_cb(w, NULL);",
          "78:   w->data = (void*)0xDEADBABE;",
          "82: void uv__udp_destroy(uv_udp_t* handle) {",
          "",
          "[Added Lines]",
          "33: static void uv__udp_recvmsg(EV_P_ ev_io* w, int revents);",
          "34: static void uv__udp_sendmsg(EV_P_ ev_io* w, int revents);",
          "40: static void uv__udp_start_watcher(uv_udp_t* handle,",
          "41:                                   ev_io* w,",
          "42:                                   void (*cb)(EV_P_ ev_io*, int),",
          "43:                                   int flags) {",
          "44:   if (ev_is_active(w)) return;",
          "45:   ev_set_cb(w, cb);",
          "46:   ev_io_set(w, handle->fd, flags);",
          "47:   ev_io_start(handle->loop->ev, w);",
          "48:   ev_unref(handle->loop->ev);",
          "49: }",
          "52: static void uv__udp_stop_watcher(uv_udp_t* handle, ev_io* w) {",
          "53:   if (!ev_is_active(w)) return;",
          "54:   ev_ref(handle->loop->ev);",
          "55:   ev_io_stop(handle->loop->ev, w);",
          "56:   ev_io_set(w, -1, 0);",
          "57:   ev_set_cb(w, NULL);",
          "58: }",
          "61: static void uv__udp_start_read_watcher(uv_udp_t* handle) {",
          "62:   uv__udp_start_watcher(handle,",
          "63:                         &handle->read_watcher,",
          "64:                         uv__udp_recvmsg,",
          "65:                         EV_READ);",
          "69: static void uv__udp_start_write_watcher(uv_udp_t* handle) {",
          "70:   uv__udp_start_watcher(handle,",
          "71:                         &handle->write_watcher,",
          "72:                         uv__udp_sendmsg,",
          "73:                         EV_WRITE);",
          "74: }",
          "77: static void uv__udp_stop_read_watcher(uv_udp_t* handle) {",
          "78:   uv__udp_stop_watcher(handle, &handle->read_watcher);",
          "79: }",
          "82: static void uv__udp_stop_write_watcher(uv_udp_t* handle) {",
          "83:   uv__udp_stop_watcher(handle, &handle->write_watcher);",
          "84: }",
          "87: void uv__udp_start_close(uv_udp_t* handle) {",
          "88:   uv__udp_stop_write_watcher(handle);",
          "89:   uv__udp_stop_read_watcher(handle);",
          "90:   uv__close(handle->fd);",
          "91:   handle->fd = -1;",
          "95: void uv__udp_finish_close(uv_udp_t* handle) {",
          "99:   assert(!ev_is_active(&handle->write_watcher));",
          "100:   assert(!ev_is_active(&handle->read_watcher));",
          "101:   assert(handle->fd == -1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:   handle->recv_cb = NULL;",
          "103:   handle->alloc_cb = NULL;",
          "113: }",
          "",
          "[Removed Lines]",
          "106:   if (handle->fd != -1) {",
          "107:     uv__close(handle->fd);",
          "108:     handle->fd = -1;",
          "109:   }",
          "111:   uv__udp_watcher_stop(handle, &handle->read_watcher);",
          "112:   uv__udp_watcher_stop(handle, &handle->write_watcher);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202: }",
          "206:   struct sockaddr_storage peer;",
          "207:   struct msghdr h;",
          "208:   ssize_t nread;",
          "209:   uv_buf_t buf;",
          "210:   int flags;",
          "212:   assert(handle->recv_cb != NULL);",
          "213:   assert(handle->alloc_cb != NULL);",
          "",
          "[Removed Lines]",
          "205: static void uv__udp_recvmsg(uv_udp_t* handle) {",
          "",
          "[Added Lines]",
          "214: static void uv__udp_recvmsg(EV_P_ ev_io* w, int revents) {",
          "217:   uv_udp_t* handle;",
          "222:   handle = container_of(w, uv_udp_t, read_watcher);",
          "223:   assert(handle->type == UV_UDP);",
          "224:   assert(revents & EV_READ);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "259: }",
          "263:   assert(!ngx_queue_empty(&handle->write_queue)",
          "264:       || !ngx_queue_empty(&handle->write_completed_queue));",
          "",
          "[Removed Lines]",
          "262: static void uv__udp_sendmsg(uv_udp_t* handle) {",
          "",
          "[Added Lines]",
          "276: static void uv__udp_sendmsg(EV_P_ ev_io* w, int revents) {",
          "277:   uv_udp_t* handle;",
          "279:   handle = container_of(w, uv_udp_t, write_watcher);",
          "280:   assert(handle->type == UV_UDP);",
          "281:   assert(revents & EV_WRITE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "275:   }",
          "276:   else if (ngx_queue_empty(&handle->write_queue)) {",
          "279:   }",
          "280: }",
          "300: static int uv__bind(uv_udp_t* handle,",
          "301:                     int domain,",
          "302:                     struct sockaddr* addr,",
          "",
          "[Removed Lines]",
          "278:     uv__udp_watcher_stop(handle, &handle->write_watcher);",
          "283: static void uv__udp_io(EV_P_ ev_io* w, int events) {",
          "284:   uv_udp_t* handle;",
          "286:   handle = w->data;",
          "287:   assert(handle != NULL);",
          "288:   assert(handle->type == UV_UDP);",
          "289:   assert(handle->fd >= 0);",
          "290:   assert(!(events & ~(EV_READ|EV_WRITE)));",
          "292:   if (events & EV_READ)",
          "293:     uv__udp_recvmsg(handle);",
          "295:   if (events & EV_WRITE)",
          "296:     uv__udp_sendmsg(handle);",
          "297: }",
          "",
          "[Added Lines]",
          "298:     uv__udp_stop_write_watcher(handle);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "334:     goto out;",
          "335:   }",
          "337:   if (flags & UV_UDP_IPV6ONLY) {",
          "338: #ifdef IPV6_V6ONLY",
          "339:     yes = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340:   yes = 1;",
          "341:   if (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof yes) == -1) {",
          "342:     uv__set_sys_error(handle->loop, errno);",
          "343:     goto out;",
          "344:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "430:   memcpy(req->bufs, bufs, bufcnt * sizeof(bufs[0]));",
          "432:   ngx_queue_insert_tail(&handle->write_queue, &req->queue);",
          "435:   return 0;",
          "436: }",
          "",
          "[Removed Lines]",
          "433:   uv__udp_watcher_start(handle, &handle->write_watcher);",
          "",
          "[Added Lines]",
          "442:   uv__udp_start_write_watcher(handle);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "503:   return 0;",
          "504: }",
          "507: int uv_udp_getsockname(uv_udp_t* handle, struct sockaddr* name,",
          "508:     int* namelen) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515: int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl) {",
          "516:   if (setsockopt(handle->fd, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof ttl) == -1) {",
          "517:     uv__set_sys_error(handle->loop, errno);",
          "518:     return -1;",
          "519:   }",
          "521:   return 0;",
          "522: }",
          "524: int uv_udp_set_broadcast(uv_udp_t* handle, int on) {",
          "525:   if (setsockopt(handle->fd, SOL_SOCKET, SO_BROADCAST, &on, sizeof on) == -1) {",
          "526:     uv__set_sys_error(handle->loop, errno);",
          "527:     return -1;",
          "528:   }",
          "530:   return 0;",
          "531: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "586:   handle->alloc_cb = alloc_cb;",
          "587:   handle->recv_cb = recv_cb;",
          "590:   return 0;",
          "591: }",
          "594: int uv_udp_recv_stop(uv_udp_t* handle) {",
          "596:   handle->alloc_cb = NULL;",
          "597:   handle->recv_cb = NULL;",
          "598:   return 0;",
          "",
          "[Removed Lines]",
          "588:   uv__udp_watcher_start(handle, &handle->read_watcher);",
          "595:   uv__udp_watcher_stop(handle, &handle->read_watcher);",
          "",
          "[Added Lines]",
          "615:   uv__udp_start_read_watcher(handle);",
          "622:   uv__udp_stop_read_watcher(handle);",
          "",
          "---------------"
        ],
        "deps/uv/src/uv-common.h||deps/uv/src/uv-common.h": [
          "File: deps/uv/src/uv-common.h -> deps/uv/src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"uv.h\"",
          "35: struct uv_ares_task_s {",
          "",
          "[Removed Lines]",
          "32: #define COUNTOF(a) (sizeof(a) / sizeof(a[0]))",
          "",
          "[Added Lines]",
          "32: #define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))",
          "",
          "---------------"
        ],
        "deps/uv/src/win/core.c||deps/uv/src/win/core.c": [
          "File: deps/uv/src/win/core.c -> deps/uv/src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   success = pGetQueuedCompletionStatusEx(loop->iocp,",
          "199:                                          overlappeds,",
          "201:                                          &count,",
          "202:                                          timeout,",
          "203:                                          FALSE);",
          "",
          "[Removed Lines]",
          "200:                                          COUNTOF(overlappeds),",
          "",
          "[Added Lines]",
          "200:                                          ARRAY_SIZE(overlappeds),",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs-event.c||deps/uv/src/win/fs-event.c": [
          "File: deps/uv/src/win/fs-event.c -> deps/uv/src/win/fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:       last_error = GetLastError();",
          "183:       goto error;",
          "184:     }",
          "",
          "[Removed Lines]",
          "181:     if (!GetShortPathNameW(filenamew, short_path, COUNTOF(short_path))) {",
          "",
          "[Added Lines]",
          "181:     if (!GetShortPathNameW(filenamew, short_path, ARRAY_SIZE(short_path))) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/process.c||deps/uv/src/win/process.c": [
          "File: deps/uv/src/win/process.c -> deps/uv/src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "546:   for (env = env_block; *env; env++) {",
          "547:     check_required_vars_contains_var(required_vars,",
          "550:     env_len += (uv_utf8_to_utf16(*env, NULL, 0) * sizeof(wchar_t));",
          "551:   }",
          "554:     if (!required_vars[i].supplied) {",
          "555:       env_len += required_vars[i].len * sizeof(wchar_t);",
          "556:       var_size = GetEnvironmentVariableW(required_vars[i].wide, NULL, 0);",
          "",
          "[Removed Lines]",
          "548:                                      COUNTOF(required_vars),",
          "553:   for (i = 0; i < COUNTOF(required_vars); ++i) {",
          "",
          "[Added Lines]",
          "548:                                      ARRAY_SIZE(required_vars),",
          "553:   for (i = 0; i < ARRAY_SIZE(required_vars); ++i) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "577:     }",
          "578:   }",
          "581:     if (!required_vars[i].supplied) {",
          "582:       wcscpy(ptr, required_vars[i].wide);",
          "583:       ptr += required_vars[i].len - 1;",
          "",
          "[Removed Lines]",
          "580:   for (i = 0; i < COUNTOF(required_vars); ++i) {",
          "",
          "[Added Lines]",
          "580:   for (i = 0; i < ARRAY_SIZE(required_vars); ++i) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "675:   int i;",
          "676:   HANDLE handle;",
          "679:     handle = process->child_stdio[i];",
          "680:     if (handle != NULL && handle != INVALID_HANDLE_VALUE) {",
          "681:       CloseHandle(handle);",
          "",
          "[Removed Lines]",
          "678:   for (i = 0; i < COUNTOF(process->child_stdio); i++) {",
          "",
          "[Added Lines]",
          "678:   for (i = 0; i < ARRAY_SIZE(process->child_stdio); i++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1050:     int i;",
          "1052:       SetHandleInformation(child_stdio[i], HANDLE_FLAG_INHERIT, 0);",
          "1053:     }",
          "1054:   }",
          "",
          "[Removed Lines]",
          "1051:     for (i = 0; i < COUNTOF(process->child_stdio); i++) {",
          "",
          "[Added Lines]",
          "1051:     for (i = 0; i < ARRAY_SIZE(process->child_stdio); i++) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c": [
          "File: deps/uv/src/win/tty.c -> deps/uv/src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1380:                 ansi_parser_state |= ANSI_IGNORE;",
          "1381:                 continue;",
          "1382:               }",
          "",
          "[Removed Lines]",
          "1379:               if (handle->ansi_csi_argc >= COUNTOF(handle->ansi_csi_argv)) {",
          "",
          "[Added Lines]",
          "1379:               if (handle->ansi_csi_argc >= ARRAY_SIZE(handle->ansi_csi_argv)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1416:                 ansi_parser_state |= ANSI_IGNORE;",
          "1417:                 continue;",
          "1418:               }",
          "",
          "[Removed Lines]",
          "1415:               if (handle->ansi_csi_argc >= COUNTOF(handle->ansi_csi_argv)) {",
          "",
          "[Added Lines]",
          "1415:               if (handle->ansi_csi_argc >= ARRAY_SIZE(handle->ansi_csi_argv)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1593:         if (previous_eol == 0 || utf8_codepoint == previous_eol) {",
          "1596:             uv_tty_emit_text(handle, utf16_buf, utf16_buf_used, error);",
          "1597:             utf16_buf_used = 0;",
          "1598:           }",
          "",
          "[Removed Lines]",
          "1595:           if (2 > COUNTOF(utf16_buf) - utf16_buf_used) {",
          "",
          "[Added Lines]",
          "1595:           if (2 > ARRAY_SIZE(utf16_buf) - utf16_buf_used) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1613:           uv_tty_emit_text(handle, utf16_buf, utf16_buf_used, error);",
          "1614:           utf16_buf_used = 0;",
          "1615:         }",
          "",
          "[Removed Lines]",
          "1612:         if (1 > COUNTOF(utf16_buf) - utf16_buf_used) {",
          "",
          "[Added Lines]",
          "1612:         if (1 > ARRAY_SIZE(utf16_buf) - utf16_buf_used) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c": [
          "File: deps/uv/src/win/udp.c -> deps/uv/src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:   DECREASE_PENDING_REQ_COUNT(handle);",
          "575: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578: int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl) {",
          "579:   if (setsockopt(handle->socket, IPPROTO_IP, IP_MULTICAST_TTL,",
          "580:       (const char*)&ttl, sizeof ttl) == -1) {",
          "581:     uv__set_sys_error(handle->loop, WSAGetLastError());",
          "582:     return -1;",
          "583:   }",
          "585:   return 0;",
          "586: }",
          "589: int uv_udp_set_broadcast(uv_udp_t* handle, int on) {",
          "590:   if (setsockopt(handle->socket, SOL_SOCKET, SO_BROADCAST, (const char*)&on,",
          "591:       sizeof on) == -1) {",
          "592:     uv__set_sys_error(handle->loop, WSAGetLastError());",
          "593:     return -1;",
          "594:   }",
          "596:   return 0;",
          "597: }",
          "",
          "---------------"
        ],
        "deps/uv/test/benchmark-tcp-write-batch.c||deps/uv/test/benchmark-tcp-write-batch.c": [
          "File: deps/uv/test/benchmark-tcp-write-batch.c -> deps/uv/test/benchmark-tcp-write-batch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "27: #include <stdlib.h>",
          "29: #define WRITE_REQ_DATA  \"Hello, world.\"",
          "30: #define NUM_WRITE_REQS  (1000 * 1000)",
          "35: typedef struct {",
          "36:   uv_write_t req;",
          "37:   uv_buf_t buf;",
          "",
          "[Removed Lines]",
          "26: #include <stddef.h>",
          "32: #define container_of(ptr, type, member) \\",
          "33:   ((type *) ((char *) (ptr) - offsetof(type, member)))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/benchmark-udp-packet-storm.c||deps/uv/test/benchmark-udp-packet-storm.c": [
          "File: deps/uv/test/benchmark-udp-packet-storm.c -> deps/uv/test/benchmark-udp-packet-storm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #define BASE_PORT 12345",
          "40: static uv_loop_t* loop;",
          "42: static int n_senders_;",
          "",
          "[Removed Lines]",
          "38: #define ARRAY_SIZE(a) (sizeof((a)) / sizeof((a)[0]))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/blackhole-server.c||deps/uv/test/blackhole-server.c": [
          "File: deps/uv/test/blackhole-server.c -> deps/uv/test/blackhole-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "27: #include <stdlib.h>",
          "32: typedef struct {",
          "33:   uv_tcp_t handle;",
          "34:   uv_shutdown_t shutdown_req;",
          "",
          "[Removed Lines]",
          "26: #include <stddef.h>",
          "29: #define container_of(ptr, type, member) \\",
          "30:   ((type *) ((char *) (ptr) - offsetof(type, member)))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/run-tests.c||deps/uv/test/run-tests.c": [
          "File: deps/uv/test/run-tests.c -> deps/uv/test/run-tests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:     \"\\n\"",
          "202:   };",
          "206:   int r, i;",
          "207:   uv_loop_t* loop = uv_default_loop();",
          "",
          "[Removed Lines]",
          "204:   uv_write_t write_req[COUNTOF(buffers)];",
          "205:   uv_buf_t buf[COUNTOF(buffers)];",
          "",
          "[Added Lines]",
          "204:   uv_write_t write_req[ARRAY_SIZE(buffers)];",
          "205:   uv_buf_t buf[ARRAY_SIZE(buffers)];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:   uv_unref(loop);",
          "222:   uv_unref(loop);",
          "225:     buf[i] = uv_buf_init((char*)buffers[i], strlen(buffers[i]));",
          "226:   }",
          "229:     r = uv_write(&write_req[i], (uv_stream_t*)&stdout_pipe, &buf[i], 1,",
          "230:       after_pipe_write);",
          "231:     ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "224:   for (i = 0; i < COUNTOF(buffers); i++) {",
          "228:   for (i = 0; i < COUNTOF(buffers); i++) {",
          "",
          "[Added Lines]",
          "224:   for (i = 0; i < ARRAY_SIZE(buffers); i++) {",
          "228:   for (i = 0; i < ARRAY_SIZE(buffers); i++) {",
          "",
          "---------------"
        ],
        "deps/uv/test/task.h||deps/uv/test/task.h": [
          "File: deps/uv/test/task.h -> deps/uv/test/task.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #ifndef TASK_H_",
          "23: #define TASK_H_",
          "27: #include <stdio.h>",
          "28: #include <stdlib.h>",
          "30: #define TEST_PORT 9123",
          "",
          "[Removed Lines]",
          "26: #include <stdint.h>",
          "",
          "[Added Lines]",
          "26: #include <stddef.h>",
          "27: #include <stdint.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: # define TEST_PIPENAME_2 \"/tmp/uv-test-sock2\"",
          "39: #endif",
          "43: typedef enum {",
          "44:   TCP = 0,",
          "",
          "[Removed Lines]",
          "41: #define COUNTOF(a) (sizeof(a) / sizeof(a[0]))",
          "",
          "[Added Lines]",
          "41: #define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))",
          "43: #define container_of(ptr, type, member) \\",
          "44:   ((type *) ((char *) (ptr) - offsetof(type, member)))",
          "",
          "---------------"
        ],
        "deps/uv/test/test-thread.c||deps/uv/test/test-thread.c": [
          "File: deps/uv/test/test-thread.c -> deps/uv/test/test-thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "27: #include <stdlib.h>",
          "34: struct getaddrinfo_req {",
          "35:   uv_thread_t thread_id;",
          "",
          "[Removed Lines]",
          "26: #include <stddef.h>",
          "29: #define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))",
          "31: #define container_of(ptr, type, member) \\",
          "32:   ((type *) ((char *) (ptr) - offsetof(type, member)))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/test-timer.c||deps/uv/test/test-timer.c": [
          "File: deps/uv/test/test-timer.c -> deps/uv/test/test-timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   ASSERT(handle != NULL);",
          "39:   once_close_cb_called++;",
          "42: }",
          "",
          "[Removed Lines]",
          "41:   free(handle);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: TEST_IMPL(timer) {",
          "89:   uv_timer_t *once;",
          "90:   uv_timer_t repeat, never;",
          "91:   int i, r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:   uv_timer_t once_timers[10];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:   ASSERT(0 < start_time);",
          "100:     r = uv_timer_init(uv_default_loop(), once);",
          "101:     ASSERT(r == 0);",
          "102:     r = uv_timer_start(once, once_cb, i * 50, 0);",
          "",
          "[Removed Lines]",
          "97:   for (i = 0; i < 10; i++) {",
          "98:     once = (uv_timer_t*)malloc(sizeof(*once));",
          "99:     ASSERT(once != NULL);",
          "",
          "[Added Lines]",
          "96:   for (i = 0; i < ARRAY_SIZE(once_timers); i++) {",
          "97:     once = once_timers + i;",
          "",
          "---------------"
        ],
        "deps/uv/test/test-tty.c||deps/uv/test/test-tty.c": [
          "File: deps/uv/test/test-tty.c -> deps/uv/test/test-tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:   uv_tty_t tty;",
          "28:   uv_loop_t* loop = uv_default_loop();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:   ASSERT(UV_UNKNOWN_HANDLE == uv_guess_handle(-1));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8fd9aca8bd01fa7226e1abe75a5bcf903f287ab",
      "candidate_info": {
        "commit_hash": "f8fd9aca8bd01fa7226e1abe75a5bcf903f287ab",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f8fd9aca8bd01fa7226e1abe75a5bcf903f287ab",
        "files": [
          "deps/openssl/openssl.gyp"
        ],
        "message": "build: use the openssl android configuration for \"arm\" builds",
        "before_after_code_files": [
          "deps/openssl/openssl.gyp||deps/openssl/openssl.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/openssl/openssl.gyp||deps/openssl/openssl.gyp": [
          "File: deps/openssl/openssl.gyp -> deps/openssl/openssl.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "650:         }],",
          "651:         ['target_arch==\"ia32\"', {",
          "652:           'variables': {'openssl_config_path': 'config/piii'},",
          "654:           'variables': {'openssl_config_path': 'config/k8'},",
          "655:         }],",
          "656:       ],",
          "657:       'include_dirs': [",
          "658:         '.',",
          "",
          "[Removed Lines]",
          "653:         }, {",
          "",
          "[Added Lines]",
          "653:         }],",
          "654:         ['target_arch==\"x64\"', {",
          "657:         ['target_arch==\"arm\"', {",
          "658:           'variables': {'openssl_config_path': 'config/android'},",
          "659:         }],",
          "",
          "---------------"
        ]
      }
    }
  ]
}