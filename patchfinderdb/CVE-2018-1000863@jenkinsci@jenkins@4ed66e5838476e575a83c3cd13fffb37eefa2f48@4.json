{
  "cve_id": "CVE-2018-1000863",
  "cve_desc": "A data modification vulnerability exists in Jenkins 2.153 and earlier, LTS 2.138.3 and earlier in User.java, IdStrategy.java that allows attackers to submit crafted user names that can cause an improper migration of user record storage formats, potentially preventing the victim from logging into Jenkins.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "4ed66e5838476e575a83c3cd13fffb37eefa2f48",
  "patch_info": {
    "commit_hash": "4ed66e5838476e575a83c3cd13fffb37eefa2f48",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/4ed66e5838476e575a83c3cd13fffb37eefa2f48",
    "files": [
      "core/src/main/java/hudson/model/User.java",
      "core/src/main/java/hudson/model/UserIdMapper.java",
      "core/src/main/java/hudson/model/UserIdMigrator.java",
      "core/src/main/java/jenkins/model/IdStrategy.java",
      "core/src/test/java/hudson/model/TestUserIdMapper.java",
      "core/src/test/java/hudson/model/UserIdMapperTest.java",
      "core/src/test/java/hudson/model/UserIdMigratorTest.java",
      "core/src/test/java/jenkins/model/IdStrategyTest.java",
      "core/src/test/resources/hudson/model/UserIdMapperTest/testDuplicatedUserId/users/users.xml",
      "core/src/test/resources/hudson/model/UserIdMapperTest/testXmlFileCorrupted/users/users.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/emptyUsernameConfigScanned/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/emptyUsernameConfigScanned/users/admin/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/emptyUsernameConfigScanned/users/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/migrateEntireDirectory/users/fred/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/migrateEntireDirectory/users/fred/otherfile.txt",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/foo$002fbar/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/fred/config.xml",
      "\"core/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\"",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/migrateSimpleUser/users/fred/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/migrateUsersXml/users/users.xml/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/needsMigrationBasic/users/jane_4975613142751794216/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/needsMigrationFalse/users/users.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/needsMigrationNoUserConfigFiles/users/users.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersBasic/users/admin/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersBasic/users/jane/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersCaseSensitive/users/Fred/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersCaseSensitive/users/admin/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersCaseSensitive/users/~jane/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersLegacy/users/$002e$002e/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersLegacy/users/$002f/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersLegacy/users/big$money/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersLegacy/users/bla$0024phem.us/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersLegacy/users/foo$002fbar$002fbaz/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersLegacy/users/foo$002fbar/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersLegacy/users/make$00241000000/config.xml",
      "core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersLegacy/users/~com1/config.xml",
      "\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/make\\341\\200\\200000/config.xml\"",
      "\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/zzz\\341\\200\\200/config.xml\"",
      "\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\341\\200\\200yyy/config.xml\"",
      "\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\343\\201\\257\\345\\233\\275\\345\\206\\205\\343\\201\\247\\346\\234\\200\\345\\244\\247/config.xml\"",
      "test/src/test/java/hudson/cli/ReloadConfigurationCommandTest.java",
      "test/src/test/java/hudson/model/UserIdMigratorTest.java",
      "test/src/test/java/hudson/model/UserPropertyTest.java",
      "test/src/test/java/hudson/model/UserTest.java",
      "test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java",
      "test/src/test/java/jenkins/model/JenkinsReloadConfigurationTest.java",
      "test/src/test/resources/hudson/model/JobTest/readPermission.zip",
      "test/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/foo$002fbar/config.xml",
      "test/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/fred/config.xml",
      "\"test/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\"",
      "test/src/test/resources/hudson/model/UserIdMigratorTest/migrateSimpleUser/users/fred/config.xml",
      "test/src/test/resources/hudson/model/UserPropertyTest/nestedUserReference/users/nestedUserReference/config.xml",
      "test/src/test/resources/hudson/model/UserPropertyTest/nestedUserReference/users/user4975613142751794216/config.xml",
      "test/src/test/resources/hudson/model/UserPropertyTest/nestedUserReference/users/users.xml",
      "test/src/test/resources/hudson/model/UserTest/corruptConfigFile/users/user4975613142751794216/config.xml",
      "test/src/test/resources/hudson/model/UserTest/corruptConfigFile/users/users.xml",
      "test/src/test/resources/hudson/model/UserTest/differentUserIdInConfigFileIsIgnored/users/user4975613142751794216/config.xml",
      "test/src/test/resources/hudson/model/UserTest/differentUserIdInConfigFileIsIgnored/users/users.xml",
      "test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/config.xml",
      "test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/users/admin/config.xml",
      "test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/users/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/admin/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/bar/baz/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/bar/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/baz/config.xml",
      "test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/config.xml",
      "test/src/test/resources/hudson/model/UserTest/migration.zip",
      "test/src/test/resources/hudson/model/UserTest/shellyUsernameMigrated.zip",
      "test/src/test/resources/hudson/security/ExtendedReadPermissionTest.zip",
      "test/src/test/resources/hudson/security/ExtendedReadPermissionTest/config.xml",
      "test/src/test/resources/hudson/security/ExtendedReadPermissionTest/jobs/a/config.xml",
      "test/src/test/resources/hudson/security/ExtendedReadPermissionTest/secret.key",
      "test/src/test/resources/hudson/security/ExtendedReadPermissionTest/users/user11111111111111/config.xml",
      "test/src/test/resources/hudson/security/ExtendedReadPermissionTest/users/user2222222222222/config.xml",
      "test/src/test/resources/hudson/security/ExtendedReadPermissionTest/users/user4975613142751794216/config.xml",
      "test/src/test/resources/hudson/security/ExtendedReadPermissionTest/users/user8888888888888888888/config.xml",
      "test/src/test/resources/hudson/security/ExtendedReadPermissionTest/users/users.xml"
    ],
    "message": "[SECURITY-1072]",
    "before_after_code_files": [
      "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java",
      "core/src/main/java/hudson/model/UserIdMapper.java||core/src/main/java/hudson/model/UserIdMapper.java",
      "core/src/main/java/hudson/model/UserIdMigrator.java||core/src/main/java/hudson/model/UserIdMigrator.java",
      "core/src/main/java/jenkins/model/IdStrategy.java||core/src/main/java/jenkins/model/IdStrategy.java",
      "core/src/test/java/hudson/model/TestUserIdMapper.java||core/src/test/java/hudson/model/TestUserIdMapper.java",
      "core/src/test/java/hudson/model/UserIdMapperTest.java||core/src/test/java/hudson/model/UserIdMapperTest.java",
      "core/src/test/java/hudson/model/UserIdMigratorTest.java||core/src/test/java/hudson/model/UserIdMigratorTest.java",
      "core/src/test/java/jenkins/model/IdStrategyTest.java||core/src/test/java/jenkins/model/IdStrategyTest.java",
      "\"core/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\"||\"core/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\"",
      "\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/make\\341\\200\\200000/config.xml\"||\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/make\\341\\200\\200000/config.xml\"",
      "\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/zzz\\341\\200\\200/config.xml\"||\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/zzz\\341\\200\\200/config.xml\"",
      "\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\341\\200\\200yyy/config.xml\"||\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\341\\200\\200yyy/config.xml\"",
      "\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\343\\201\\257\\345\\233\\275\\345\\206\\205\\343\\201\\247\\346\\234\\200\\345\\244\\247/config.xml\"||\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\343\\201\\257\\345\\233\\275\\345\\206\\205\\343\\201\\247\\346\\234\\200\\345\\244\\247/config.xml\"",
      "test/src/test/java/hudson/cli/ReloadConfigurationCommandTest.java||test/src/test/java/hudson/cli/ReloadConfigurationCommandTest.java",
      "test/src/test/java/hudson/model/UserIdMigratorTest.java||test/src/test/java/hudson/model/UserIdMigratorTest.java",
      "test/src/test/java/hudson/model/UserPropertyTest.java||test/src/test/java/hudson/model/UserPropertyTest.java",
      "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java",
      "test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java||test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java",
      "test/src/test/java/jenkins/model/JenkinsReloadConfigurationTest.java||test/src/test/java/jenkins/model/JenkinsReloadConfigurationTest.java",
      "\"test/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\"||\"test/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\"",
      "test/src/test/resources/hudson/security/ExtendedReadPermissionTest/secret.key||test/src/test/resources/hudson/security/ExtendedReadPermissionTest/secret.key"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
      "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: import hudson.model.listeners.SaveableListener;",
      "41: import hudson.security.ACL;",
      "42: import hudson.security.AccessControlled;",
      "44: import hudson.security.SecurityRealm;",
      "45: import hudson.security.UserMayOrMayNotExistException;",
      "46: import hudson.util.FormApply;",
      "47: import hudson.util.FormValidation;",
      "48: import hudson.util.RunList;",
      "49: import hudson.util.XStream2;",
      "50: import java.io.File;",
      "52: import java.io.IOException;",
      "57: import java.util.ArrayList;",
      "58: import java.util.Arrays;",
      "59: import java.util.Collection;",
      "60: import java.util.Collections;",
      "62: import java.util.HashSet;",
      "64: import java.util.List;",
      "65: import java.util.Map;",
      "66: import java.util.Objects;",
      "",
      "[Removed Lines]",
      "43: import hudson.security.Permission;",
      "51: import java.io.FileFilter;",
      "53: import java.nio.file.DirectoryStream;",
      "54: import java.nio.file.Files;",
      "55: import java.nio.file.InvalidPathException;",
      "56: import java.nio.file.Path;",
      "61: import java.util.Comparator;",
      "63: import java.util.Iterator;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "68: import java.util.concurrent.ConcurrentHashMap;",
      "69: import java.util.concurrent.ConcurrentMap;",
      "70: import java.util.concurrent.ExecutionException;",
      "73: import java.util.logging.Level;",
      "74: import java.util.logging.Logger;",
      "75: import javax.annotation.CheckForNull;",
      "76: import javax.annotation.Nonnull;",
      "77: import javax.annotation.Nullable;",
      "79: import javax.servlet.ServletException;",
      "80: import javax.servlet.http.HttpServletResponse;",
      "81: import jenkins.model.IdStrategy;",
      "82: import jenkins.model.Jenkins;",
      "83: import jenkins.model.ModelObjectWithContextMenu;",
      "",
      "[Removed Lines]",
      "71: import java.util.concurrent.locks.ReadWriteLock;",
      "72: import java.util.concurrent.locks.ReentrantReadWriteLock;",
      "78: import javax.annotation.concurrent.GuardedBy;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "92: import org.acegisecurity.providers.anonymous.AnonymousAuthenticationToken;",
      "93: import org.acegisecurity.userdetails.UserDetails;",
      "94: import org.acegisecurity.userdetails.UsernameNotFoundException;",
      "96: import org.apache.commons.lang.StringUtils;",
      "97: import org.jenkinsci.Symbol;",
      "98: import org.kohsuke.accmod.Restricted;",
      "",
      "[Removed Lines]",
      "95: import org.apache.commons.io.filefilter.DirectoryFileFilter;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "136: @ExportedBean",
      "137: public class User extends AbstractModelObject implements AccessControlled, DescriptorByNameOwner, Saveable, Comparable<User>, ModelObjectWithContextMenu, StaplerProxy {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "128:     public static final XStream2 XSTREAM = new XStream2();",
      "129:     private static final Logger LOGGER = Logger.getLogger(User.class.getName());",
      "130:     static final String CONFIG_XML = \"config.xml\";",
      "135:     @Restricted(NoExternalUse.class)",
      "136:     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = Boolean.getBoolean(User.class.getName() + \".skipPermissionCheck\");",
      "147:     public static boolean ALLOW_NON_EXISTENT_USER_TO_LOGIN = SystemProperties.getBoolean(User.class.getName() + \".allowNonExistentUserToLogin\");",
      "161:     @Restricted(NoExternalUse.class)",
      "162:     public static boolean ALLOW_USER_CREATION_VIA_URL = SystemProperties.getBoolean(User.class.getName() + \".allowUserCreationViaUrl\");",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "148:     private static final String[] ILLEGAL_PERSISTED_USERNAMES = new String[]{ACL.ANONYMOUS_USERNAME,",
      "149:             ACL.SYSTEM_USERNAME, UNKNOWN_USERNAME};",
      "152:     private volatile String fullName;",
      "154:     private volatile String description;",
      "159:     @CopyOnWrite",
      "163:     private User(String id, String fullName) {",
      "164:         this.id = id;",
      "165:         this.fullName = fullName;",
      "167:     }",
      "",
      "[Removed Lines]",
      "150:     private transient final String id;",
      "160:     private volatile List<UserProperty> properties = new ArrayList<UserProperty>();",
      "166:         load();",
      "",
      "[Added Lines]",
      "176:     private final int version = 10; // Not currently used, but it may be helpful in the future to store a version.",
      "177:     private String id;",
      "182:     private volatile List<UserProperty> properties = new ArrayList<>();",
      "184:     static {",
      "185:         XSTREAM.alias(\"user\", User.class);",
      "186:     }",
      "191:         load(id);",
      "192:     }",
      "194:     private void load(String userId) {",
      "195:         clearExistingProperties();",
      "196:         loadFromUserConfigFile(userId);",
      "197:         removeNullsThatFailedToLoad();",
      "198:         allocateDefaultPropertyInstancesAsNeeded();",
      "199:         setUserToProperties();",
      "200:     }",
      "202:     private void setUserToProperties() {",
      "203:         for (UserProperty p : properties) {",
      "204:             p.setUser(this);",
      "205:         }",
      "206:     }",
      "208:     private void allocateDefaultPropertyInstancesAsNeeded() {",
      "209:         for (UserPropertyDescriptor d : UserProperty.all()) {",
      "210:             if (getProperty(d.clazz) == null) {",
      "211:                 UserProperty up = d.newInstance(this);",
      "212:                 if (up != null)",
      "213:                     properties.add(up);",
      "214:             }",
      "215:         }",
      "216:     }",
      "218:     private void removeNullsThatFailedToLoad() {",
      "219:         properties.removeIf(Objects::isNull);",
      "220:     }",
      "222:     private void loadFromUserConfigFile(String userId) {",
      "223:         XmlFile config = getConfigFile();",
      "224:         try {",
      "225:             if ( config != null && config.exists()) {",
      "226:                 config.unmarshal(this);",
      "227:                 this.id = userId;",
      "228:             }",
      "229:         } catch (IOException e) {",
      "230:             LOGGER.log(Level.SEVERE, \"Failed to load \" + config, e);",
      "231:         }",
      "232:     }",
      "234:     private void clearExistingProperties() {",
      "235:         properties.clear();",
      "236:     }",
      "238:     private XmlFile getConfigFile() {",
      "239:         File existingUserFolder = getExistingUserFolder();",
      "240:         return existingUserFolder == null ? null : new XmlFile(XSTREAM, new File(existingUserFolder, CONFIG_XML));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "176:     @Nonnull",
      "177:     public static IdStrategy idStrategy() {",
      "179:         SecurityRealm realm = j.getSecurityRealm();",
      "180:         if (realm == null) {",
      "181:             return IdStrategy.CASE_INSENSITIVE;",
      "",
      "[Removed Lines]",
      "178:         Jenkins j = Jenkins.getInstance();",
      "",
      "[Added Lines]",
      "252:         Jenkins j = Jenkins.get();",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "183:         return realm.getUserIdStrategy();",
      "184:     }",
      "187:         return idStrategy().compare(this.id, that.id);",
      "188:     }",
      "224:     @Exported",
      "225:     public String getId() {",
      "226:         return id;",
      "227:     }",
      "231:     }",
      "235:     }",
      "243:     }",
      "251:         return fullName;",
      "252:     }",
      "",
      "[Removed Lines]",
      "186:     public int compareTo(User that) {",
      "193:     private synchronized void load() {",
      "194:         properties.clear();",
      "196:         XmlFile config = getConfigFile();",
      "197:         try {",
      "198:             if(config.exists())",
      "199:                 config.unmarshal(this);",
      "200:         } catch (IOException e) {",
      "201:             LOGGER.log(Level.SEVERE, \"Failed to load \"+config,e);",
      "202:         }",
      "205:         for (Iterator<UserProperty> itr = properties.iterator(); itr.hasNext();) {",
      "206:             if(itr.next()==null)",
      "207:                 itr.remove();",
      "208:         }",
      "212:         for (UserPropertyDescriptor d : UserProperty.all()) {",
      "213:             if(getProperty(d.clazz)==null) {",
      "214:                 UserProperty up = d.newInstance(this);",
      "215:                 if(up!=null)",
      "216:                     properties.add(up);",
      "217:             }",
      "218:         }",
      "220:         for (UserProperty p : properties)",
      "221:             p.setUser(this);",
      "222:     }",
      "229:     public @Nonnull String getUrl() {",
      "230:         return \"user/\"+Util.rawEncode(idStrategy().keyFor(id));",
      "233:     public @Nonnull String getSearchUrl() {",
      "234:         return \"/user/\"+Util.rawEncode(idStrategy().keyFor(id));",
      "240:     @Exported(visibility=999)",
      "241:     public @Nonnull String getAbsoluteUrl() {",
      "242:         return Jenkins.getInstance().getRootUrl()+getUrl();",
      "249:     @Exported(visibility=999)",
      "250:     public @Nonnull String getFullName() {",
      "",
      "[Added Lines]",
      "260:     public int compareTo(@Nonnull User that) {",
      "269:     public @Nonnull",
      "270:     String getUrl() {",
      "271:         return \"user/\" + Util.rawEncode(idStrategy().keyFor(id));",
      "274:     public @Nonnull",
      "275:     String getSearchUrl() {",
      "276:         return \"/user/\" + Util.rawEncode(idStrategy().keyFor(id));",
      "282:     @Exported(visibility = 999)",
      "283:     public @Nonnull",
      "284:     String getAbsoluteUrl() {",
      "285:         return Jenkins.get().getRootUrl() + getUrl();",
      "292:     @Exported(visibility = 999)",
      "293:     public @Nonnull",
      "294:     String getFullName() {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "258:     public void setFullName(String name) {",
      "260:         this.fullName = name;",
      "261:     }",
      "263:     @Exported",
      "265:         return description;",
      "266:     }",
      "273:     public void setDescription(String description) {",
      "",
      "[Removed Lines]",
      "259:         if(Util.fixEmptyAndTrim(name)==null)    name=id;",
      "264:     public @CheckForNull String getDescription() {",
      "",
      "[Added Lines]",
      "303:         if (Util.fixEmptyAndTrim(name) == null) name = id;",
      "308:     public @CheckForNull",
      "309:     String getDescription() {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "281:         return Descriptor.toMap(properties);",
      "282:     }",
      "",
      "[Removed Lines]",
      "280:     public Map<Descriptor<UserProperty>,UserProperty> getProperties() {",
      "",
      "[Added Lines]",
      "325:     public Map<Descriptor<UserProperty>, UserProperty> getProperties() {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "287:     public synchronized void addProperty(@Nonnull UserProperty p) throws IOException {",
      "288:         UserProperty old = getProperty(p.getClass());",
      "291:             ps.remove(old);",
      "292:         ps.add(p);",
      "293:         p.setUser(this);",
      "",
      "[Removed Lines]",
      "289:         List<UserProperty> ps = new ArrayList<UserProperty>(properties);",
      "290:         if(old!=null)",
      "",
      "[Added Lines]",
      "334:         List<UserProperty> ps = new ArrayList<>(properties);",
      "335:         if (old != null)",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "302:     public List<UserProperty> getAllProperties() {",
      "303:         if (hasPermission(Jenkins.ADMINISTER)) {",
      "304:             return Collections.unmodifiableList(properties);",
      "",
      "[Removed Lines]",
      "301:     @Exported(name=\"property\",inline=true)",
      "",
      "[Added Lines]",
      "346:     @Exported(name = \"property\", inline = true)",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "307:         return Collections.emptyList();",
      "308:     }",
      "313:     public <T extends UserProperty> T getProperty(Class<T> clazz) {",
      "314:         for (UserProperty p : properties) {",
      "316:                 return clazz.cast(p);",
      "317:         }",
      "318:         return null;",
      "",
      "[Removed Lines]",
      "315:             if(clazz.isInstance(p))",
      "",
      "[Added Lines]",
      "360:             if (clazz.isInstance(p))",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "334:         return this.impersonate(this.getUserDetailsForImpersonation());",
      "335:     }",
      "",
      "[Removed Lines]",
      "333:     public @Nonnull Authentication impersonate() throws UsernameNotFoundException {",
      "",
      "[Added Lines]",
      "377:     public @Nonnull",
      "378:     Authentication impersonate() throws UsernameNotFoundException {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "349:         ImpersonatingUserDetailsService userDetailsService = new ImpersonatingUserDetailsService(",
      "351:         );",
      "353:         try {",
      "354:             UserDetails userDetails = userDetailsService.loadUserByUsername(id);",
      "356:             return userDetails;",
      "357:         } catch (UserMayOrMayNotExistException e) {",
      "360:         } catch (UsernameNotFoundException e) {",
      "366:                 throw e;",
      "367:             }",
      "368:         } catch (DataAccessException e) {",
      "371:         }",
      "373:         return new LegitimateButUnknownUserDetails(id);",
      "374:     }",
      "380:         private LegitimateButUnknownUserDetails(String username) throws IllegalArgumentException {",
      "381:             super(",
      "382:                     username, \"\",",
      "",
      "[Removed Lines]",
      "348:     public @Nonnull UserDetails getUserDetailsForImpersonation() throws UsernameNotFoundException {",
      "350:                 Jenkins.getInstance().getSecurityRealm().getSecurityComponents().userDetails",
      "355:             LOGGER.log(Level.FINE, \"Impersonation of the user {0} was a success\", new Object[]{ id });",
      "358:             LOGGER.log(Level.FINE, \"The user {0} may or may not exist in the SecurityRealm, so we provide minimum access\", new Object[]{ id });",
      "362:             if(ALLOW_NON_EXISTENT_USER_TO_LOGIN){",
      "363:                 LOGGER.log(Level.FINE, \"The user {0} was not found in the SecurityRealm but we are required to let it pass, due to ALLOW_NON_EXISTENT_USER_TO_LOGIN\", new Object[]{ id });",
      "364:             }else{",
      "365:                 LOGGER.log(Level.FINE, \"The user {0} was not found in the SecurityRealm\", new Object[]{ id });",
      "370:             LOGGER.log(Level.FINE, \"The user {0} retrieval just threw a DataAccess exception with msg = {1}, so we provide minimum access\", new Object[]{ id, e.getMessage() });",
      "379:     private static class LegitimateButUnknownUserDetails extends org.acegisecurity.userdetails.User{",
      "",
      "[Added Lines]",
      "391:     public @Nonnull",
      "392:     UserDetails getUserDetailsForImpersonation() throws UsernameNotFoundException {",
      "394:                 Jenkins.get().getSecurityRealm().getSecurityComponents().userDetails",
      "399:             LOGGER.log(Level.FINE, \"Impersonation of the user {0} was a success\", id);",
      "402:             LOGGER.log(Level.FINE, \"The user {0} may or may not exist in the SecurityRealm, so we provide minimum access\", id);",
      "404:             if (ALLOW_NON_EXISTENT_USER_TO_LOGIN) {",
      "405:                 LOGGER.log(Level.FINE, \"The user {0} was not found in the SecurityRealm but we are required to let it pass, due to ALLOW_NON_EXISTENT_USER_TO_LOGIN\", id);",
      "406:             } else {",
      "407:                 LOGGER.log(Level.FINE, \"The user {0} was not found in the SecurityRealm\", id);",
      "412:             LOGGER.log(Level.FINE, \"The user {0} retrieval just threw a DataAccess exception with msg = {1}, so we provide minimum access\", new Object[]{id, e.getMessage()});",
      "421:     private static class LegitimateButUnknownUserDetails extends org.acegisecurity.userdetails.User {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "395:     @Restricted(NoExternalUse.class)",
      "397:         return new UsernamePasswordAuthenticationToken(userDetails.getUsername(), \"\", userDetails.getAuthorities());",
      "398:     }",
      "",
      "[Removed Lines]",
      "396:     public @Nonnull Authentication impersonate(@Nonnull UserDetails userDetails) {",
      "",
      "[Added Lines]",
      "438:     public @Nonnull",
      "439:     Authentication impersonate(@Nonnull UserDetails userDetails) {",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "403:     @RequirePOST",
      "405:         checkPermission(Jenkins.ADMINISTER);",
      "407:         description = req.getParameter(\"description\");",
      "408:         save();",
      "410:         rsp.sendRedirect(\".\");  // go to the top page",
      "411:     }",
      "",
      "[Removed Lines]",
      "404:     public synchronized void doSubmitDescription( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {",
      "",
      "[Added Lines]",
      "447:     public void doSubmitDescription(StaplerRequest req, StaplerResponse rsp) throws IOException {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "434:     @Deprecated",
      "436:         return get(idOrFullName, create, Collections.emptyMap());",
      "437:     }",
      "463:             return null;",
      "469:         String id = CanonicalIdResolver.resolve(idOrFullName, context);",
      "475:     }",
      "552:                 try {",
      "553:                     u.save();",
      "554:                 } catch (IOException x) {",
      "556:                 }",
      "557:             }",
      "558:         }",
      "559:         return u;",
      "560:     }",
      "",
      "[Removed Lines]",
      "435:     public static @Nullable User get(String idOrFullName, boolean create) {",
      "460:     public static @Nullable User get(String idOrFullName, boolean create, @Nonnull Map context) {",
      "462:         if(idOrFullName==null)",
      "471:         if (id == null) {",
      "472:             throw new IllegalStateException(\"The user id should be always non-null thanks to DefaultUserCanonicalIdResolver\");",
      "473:         }",
      "474:         return getOrCreate(id, idOrFullName, create);",
      "483:     private static @Nullable User getOrCreate(@Nonnull String id, @Nonnull String fullName, boolean create) {",
      "484:         return getOrCreate(id, fullName, create, getUnsanitizedLegacyConfigFileFor(id));",
      "485:     }",
      "487:     private static @Nullable User getOrCreate(@Nonnull String id, @Nonnull String fullName, boolean create, File unsanitizedLegacyConfigFile) {",
      "488:         String idkey = idStrategy().keyFor(id);",
      "490:         byNameLock.readLock().lock();",
      "491:         User u;",
      "492:         try {",
      "493:             u = AllUsers.byName().get(idkey);",
      "494:         } finally {",
      "495:             byNameLock.readLock().unlock();",
      "496:         }",
      "497:         final File configFile = getConfigFileFor(id);",
      "498:         boolean mustMigrateLegacyConfig = isMigrationRequiredForLegacyConfigFile(unsanitizedLegacyConfigFile, configFile);",
      "499:         if (mustMigrateLegacyConfig) {",
      "500:             File ancestor = unsanitizedLegacyConfigFile.getParentFile();",
      "501:             if (!configFile.exists()) {",
      "502:                 try {",
      "503:                     Files.createDirectory(configFile.getParentFile().toPath());",
      "504:                     Files.move(unsanitizedLegacyConfigFile.toPath(), configFile.toPath());",
      "505:                     LOGGER.log(Level.INFO, \"Migrated user record from {0} to {1}\", new Object[] {unsanitizedLegacyConfigFile, configFile});",
      "506:                 } catch (IOException | InvalidPathException e) {",
      "507:                     LOGGER.log(",
      "508:                             Level.WARNING,",
      "509:                             String.format(\"Failed to migrate user record from %s to %s\", unsanitizedLegacyConfigFile, configFile),",
      "510:                             e);",
      "511:                 }",
      "512:             }",
      "516:             File tmp = ancestor;",
      "517:             try {",
      "518:                 while (!ancestor.equals(getRootDir())) {",
      "519:                     try (DirectoryStream<Path> stream = Files.newDirectoryStream(ancestor.toPath())) {",
      "520:                         if (!stream.iterator().hasNext()) {",
      "521:                             tmp = ancestor;",
      "522:                             ancestor = tmp.getParentFile();",
      "523:                             Files.deleteIfExists(tmp.toPath());",
      "524:                         } else {",
      "525:                             break;",
      "526:                         }",
      "527:                     }",
      "528:                 }",
      "529:             } catch (IOException | InvalidPathException e) {",
      "530:                 if (LOGGER.isLoggable(Level.FINE)) {",
      "531:                     LOGGER.log(Level.FINE, \"Could not delete \" + tmp + \" when cleaning up legacy user directories\", e);",
      "532:                 }",
      "533:             }",
      "534:         }",
      "536:         if (u==null && (create || configFile.exists())) {",
      "537:             User tmp = new User(id, fullName);",
      "538:             User prev;",
      "539:             byNameLock.readLock().lock();",
      "540:             try {",
      "541:                 prev = AllUsers.byName().putIfAbsent(idkey, u = tmp);",
      "542:             } finally {",
      "543:                 byNameLock.readLock().unlock();",
      "544:             }",
      "545:             if (prev != null) {",
      "546:                 u = prev; // if some has already put a value in the map, use it",
      "547:                 if (LOGGER.isLoggable(Level.FINE) && !fullName.equals(prev.getFullName())) {",
      "548:                     LOGGER.log(Level.FINE, \"mismatch on fullName (\u2018\" + fullName + \"\u2019 vs. \u2018\" + prev.getFullName() + \"\u2019) for \u2018\" + id + \"\u2019\", new Throwable());",
      "549:                 }",
      "550:             } else if (!id.equals(fullName) && !configFile.exists()) {",
      "555:                     LOGGER.log(Level.WARNING, null, x);",
      "562:     private static boolean isMigrationRequiredForLegacyConfigFile(@Nonnull File legacyConfigFile, @Nonnull File newConfigFile){",
      "563:         boolean mustMigrateLegacyConfig = legacyConfigFile.exists() && !legacyConfigFile.equals(newConfigFile);",
      "564:         if(mustMigrateLegacyConfig){",
      "565:             try{",
      "567:                 String canonicalLegacy = legacyConfigFile.getCanonicalPath();",
      "568:                 String canonicalUserDir = getRootDir().getCanonicalPath();",
      "569:                 if(!canonicalLegacy.startsWith(canonicalUserDir + File.separator)){",
      "571:                     mustMigrateLegacyConfig = false;",
      "572:                     LOGGER.log(Level.WARNING, String.format(",
      "573:                             \"Attempt to escape from users directory with %s, migration aborted, see SECURITY-897 for more information\",",
      "574:                             legacyConfigFile.getAbsolutePath()",
      "575:                     ));",
      "576:                 }",
      "577:             }",
      "578:             catch (IOException e){",
      "579:                 mustMigrateLegacyConfig = false;",
      "580:                 LOGGER.log(",
      "581:                         Level.WARNING,",
      "582:                         String.format(",
      "583:                                 \"Failed to determine the canonical path of %s, migration aborted, see SECURITY-897 for more information\",",
      "584:                                 legacyConfigFile.getAbsolutePath()",
      "585:                         ),",
      "586:                         e",
      "587:                 );",
      "588:             }",
      "589:         }",
      "590:         return mustMigrateLegacyConfig;",
      "591:     }",
      "",
      "[Added Lines]",
      "477:     public static @Nullable",
      "478:     User get(String idOrFullName, boolean create) {",
      "498:     public static @Nullable",
      "499:     User get(String idOrFullName, boolean create, @Nonnull Map context) {",
      "500:         if (idOrFullName == null) {",
      "502:         }",
      "504:         User user = AllUsers.get(idOrFullName);",
      "505:         if (user != null) {",
      "506:             return user;",
      "507:         }",
      "510:         return getOrCreateById(id, idOrFullName, create);",
      "519:     private static @Nullable",
      "520:     User getOrCreateById(@Nonnull String id, @Nonnull String fullName, boolean create) {",
      "521:         User u = AllUsers.get(id);",
      "522:         if (u == null && (create || UserIdMapper.getInstance().isMapped(id))) {",
      "523:             u = new User(id, fullName);",
      "524:             AllUsers.put(id, u);",
      "525:             if (!id.equals(fullName) && !UserIdMapper.getInstance().isMapped(id)) {",
      "529:                     LOGGER.log(Level.WARNING, \"Failed to save user configuration for \" + id, x);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "609:     @Deprecated",
      "611:         return getOrCreateByIdOrFullName(idOrFullName);",
      "612:     }",
      "",
      "[Removed Lines]",
      "610:     public static @Nonnull User get(String idOrFullName) {",
      "",
      "[Added Lines]",
      "553:     public static @Nonnull",
      "554:     User get(String idOrFullName) {",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "629:     public static @Nonnull User getOrCreateByIdOrFullName(@Nonnull String idOrFullName) {",
      "631:     }",
      "640:         return get(Jenkins.getAuthentication());",
      "641:     }",
      "652:             return null;",
      "657:     }",
      "674:     }",
      "680:         final IdStrategy strategy = idStrategy();",
      "695:     }",
      "700:     @Restricted(NoExternalUse.class)",
      "727:     }",
      "733:     public static void rekey() {",
      "736:         try {",
      "749:         }",
      "750:     }",
      "756:         return getFullName();",
      "757:     }",
      "761:         if (b.hasParticipant(this)) {",
      "762:             return true;",
      "763:         }",
      "",
      "[Removed Lines]",
      "630:         return get(idOrFullName,true, Collections.emptyMap());",
      "639:     public static @CheckForNull User current() {",
      "650:     public static @CheckForNull User get(@CheckForNull Authentication a) {",
      "651:         if(a == null || a instanceof AnonymousAuthenticationToken)",
      "655:         String id = a.getName();",
      "656:         return getById(id, true);",
      "672:     public static @Nullable User getById(String id, boolean create) {",
      "673:         return getOrCreate(id, id, create);",
      "679:     public static @Nonnull Collection<User> getAll() {",
      "681:         byNameLock.readLock().lock();",
      "682:         ArrayList<User> r;",
      "683:         try {",
      "684:             r = new ArrayList<User>(AllUsers.byName().values());",
      "685:         } finally {",
      "686:             byNameLock.readLock().unlock();",
      "687:         }",
      "688:         Collections.sort(r,new Comparator<User>() {",
      "690:             public int compare(User o1, User o2) {",
      "691:                 return strategy.compare(o1.getId(), o2.getId());",
      "692:             }",
      "693:         });",
      "694:         return r;",
      "701:     public static void reload() {",
      "702:         byNameLock.readLock().lock();",
      "703:         try {",
      "704:             AllUsers.byName().clear();",
      "705:         } finally {",
      "706:             byNameLock.readLock().unlock();",
      "707:         }",
      "708:         UserDetailsCache.get().invalidateAll();",
      "709:         AllUsers.scanAll();",
      "710:     }",
      "715:     @Deprecated",
      "716:     public static void clear() {",
      "717:         if (ExtensionList.lookup(AllUsers.class).isEmpty()) {",
      "719:             return;",
      "720:         }",
      "721:         byNameLock.writeLock().lock();",
      "722:         try {",
      "723:             AllUsers.byName().clear();",
      "724:         } finally {",
      "725:             byNameLock.writeLock().unlock();",
      "726:         }",
      "734:         final IdStrategy strategy = idStrategy();",
      "735:         byNameLock.writeLock().lock();",
      "737:             ConcurrentMap<String, User> byName = AllUsers.byName();",
      "738:             for (Map.Entry<String, User> e : byName.entrySet()) {",
      "739:                 String idkey = strategy.keyFor(e.getValue().id);",
      "740:                 if (!idkey.equals(e.getKey())) {",
      "742:                     byName.remove(e.getKey());",
      "743:                     byName.putIfAbsent(idkey, e.getValue());",
      "744:                 }",
      "745:             }",
      "746:         } finally {",
      "747:             byNameLock.writeLock().unlock();",
      "748:             UserDetailsCache.get().invalidateAll();",
      "755:     public @Nonnull String getDisplayName() {",
      "760:     private boolean relatedTo(@Nonnull AbstractBuild<?,?> b) {",
      "",
      "[Added Lines]",
      "574:         return get(idOrFullName, true, Collections.emptyMap());",
      "584:     public static @CheckForNull",
      "585:     User current() {",
      "597:     public static @CheckForNull",
      "598:     User get(@CheckForNull Authentication a) {",
      "599:         if (a == null || a instanceof AnonymousAuthenticationToken)",
      "603:         return getById(a.getName(), true);",
      "617:     public static @Nullable",
      "618:     User getById(String id, boolean create) {",
      "619:         return getOrCreateById(id, id, create);",
      "625:     public static @Nonnull",
      "626:     Collection<User> getAll() {",
      "628:         ArrayList<User> users = new ArrayList<>(AllUsers.values());",
      "629:         users.sort((o1, o2) -> strategy.compare(o1.getId(), o2.getId()));",
      "630:         return users;",
      "637:     public static void reload() throws IOException {",
      "638:         UserIdMapper.getInstance().reload();",
      "639:         AllUsers.reload();",
      "649:             problematic behavior. Such changes should really only occur during initial",
      "650:             setup and under very controlled situations. After this sort of a change",
      "651:             the whole webapp should restart. It's possible that this rekeying,",
      "652:             or greater issues in the realm change, could affect currently logged",
      "655:             reload();",
      "656:         } catch (IOException e) {",
      "657:             LOGGER.log(Level.SEVERE, \"Failed to perform rekey operation.\", e);",
      "664:     public @Nonnull",
      "665:     String getDisplayName() {",
      "672:     private boolean relatedTo(@Nonnull AbstractBuild<?, ?> b) {",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "779:     @SuppressWarnings(\"unchecked\")",
      "780:     @WithBridgeMethods(List.class)",
      "787:     }",
      "797:                 r.add(p);",
      "798:         return r;",
      "799:     }",
      "802:         return fullName;",
      "803:     }",
      "810:     }",
      "814:     }",
      "818:     }",
      "825:     }",
      "",
      "[Removed Lines]",
      "781:     public @Nonnull RunList getBuilds() {",
      "782:         return RunList.fromJobs((Iterable)Jenkins.getInstance().allItems(Job.class)).filter(new Predicate<Run<?,?>>() {",
      "783:             @Override public boolean apply(Run<?,?> r) {",
      "784:                 return r instanceof AbstractBuild && relatedTo((AbstractBuild<?,?>) r);",
      "785:             }",
      "786:         });",
      "793:     public @Nonnull Set<AbstractProject<?,?>> getProjects() {",
      "794:         Set<AbstractProject<?,?>> r = new HashSet<AbstractProject<?,?>>();",
      "795:         for (AbstractProject<?,?> p : Jenkins.getInstance().allItems(AbstractProject.class))",
      "796:             if(p.hasParticipant(this))",
      "801:     public @Override String toString() {",
      "808:     protected final XmlFile getConfigFile() {",
      "809:         return new XmlFile(XSTREAM,getConfigFileFor(id));",
      "812:     private static final File getConfigFileFor(String id) {",
      "813:         return new File(getRootDir(), idStrategy().filenameOf(id) +\"/config.xml\");",
      "816:     private static File getUnsanitizedLegacyConfigFileFor(String id) {",
      "817:         return new File(getRootDir(), idStrategy().legacyFilenameOf(id) + \"/config.xml\");",
      "823:     private static File getRootDir() {",
      "824:         return new File(Jenkins.getInstance().getRootDir(), \"users\");",
      "",
      "[Added Lines]",
      "693:     public @Nonnull",
      "694:     RunList getBuilds() {",
      "695:         return RunList.fromJobs((Iterable) Jenkins.get().",
      "696:                 allItems(Job.class)).filter((Predicate<Run<?, ?>>) r -> r instanceof AbstractBuild && relatedTo((AbstractBuild<?, ?>) r));",
      "704:     public @Nonnull",
      "705:     Set<AbstractProject<?, ?>> getProjects() {",
      "706:         Set<AbstractProject<?, ?>> r = new HashSet<>();",
      "707:         for (AbstractProject<?, ?> p : Jenkins.get().allItems(AbstractProject.class))",
      "708:             if (p.hasParticipant(this))",
      "713:     public @Override",
      "714:     String toString() {",
      "722:     @Deprecated",
      "723:     public static void clear() {",
      "724:         if (ExtensionList.lookup(AllUsers.class).isEmpty()) {",
      "725:             return;",
      "726:         }",
      "727:         UserIdMapper.getInstance().clear();",
      "728:         AllUsers.clear();",
      "738:     public File getUserFolder() {",
      "739:         return getExistingUserFolder();",
      "742:     private File getExistingUserFolder() {",
      "743:         return UserIdMapper.getInstance().getDirectory(id);",
      "749:     static File getRootDir() {",
      "750:         return new File(Jenkins.get().getRootDir(), \"users\");",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "840:     public static boolean isIdOrFullnameAllowed(@CheckForNull String id) {",
      "843:             return false;",
      "844:         }",
      "845:         final String trimmedId = id.trim();",
      "",
      "[Removed Lines]",
      "842:         if (id == null || StringUtils.isBlank(id)) {",
      "",
      "[Added Lines]",
      "767:         if (StringUtils.isBlank(id)) {",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "851:     }",
      "858:             throw FormValidation.error(Messages.User_IllegalUsername(id));",
      "859:         }",
      "861:             throw FormValidation.error(Messages.User_IllegalFullname(fullName));",
      "862:         }",
      "866:     }",
      "870:     }",
      "879:     }",
      "894:         }",
      "897:     }",
      "",
      "[Removed Lines]",
      "856:     public synchronized void save() throws IOException, FormValidation {",
      "857:         if (! isIdOrFullnameAllowed(id)) {",
      "860:         if (! isIdOrFullnameAllowed(fullName)) {",
      "863:         if(BulkChange.contains(this))   return;",
      "864:         getConfigFile().write(this);",
      "865:         SaveableListener.fireOnChange(this, getConfigFile());",
      "868:     private Object writeReplace() {",
      "869:         return XmlFile.replaceIfNotAtTopLevel(this, () -> new Replacer(this));",
      "871:     private static class Replacer {",
      "872:         private final String id;",
      "873:         Replacer(User u) {",
      "874:             id = u.getId();",
      "875:         }",
      "876:         private Object readResolve() {",
      "877:             return getById(id, false);",
      "878:         }",
      "887:     public synchronized void delete() throws IOException {",
      "888:         final IdStrategy strategy = idStrategy();",
      "889:         byNameLock.readLock().lock();",
      "890:         try {",
      "891:             AllUsers.byName().remove(strategy.keyFor(id));",
      "892:         } finally {",
      "893:             byNameLock.readLock().unlock();",
      "895:         Util.deleteRecursive(new File(getRootDir(), strategy.filenameOf(id)));",
      "896:         UserDetailsCache.get().invalidate(strategy.keyFor(id));",
      "",
      "[Added Lines]",
      "781:     public synchronized void save() throws IOException {",
      "782:         if (!isIdOrFullnameAllowed(id)) {",
      "785:         if (!isIdOrFullnameAllowed(fullName)) {",
      "788:         if (BulkChange.contains(this)) {",
      "789:             return;",
      "790:         }",
      "791:         XmlFile xmlFile = new XmlFile(XSTREAM, constructUserConfigFile());",
      "792:         xmlFile.write(this);",
      "793:         SaveableListener.fireOnChange(this, xmlFile);",
      "796:     private File constructUserConfigFile() throws IOException {",
      "797:         return new File(putUserFolderIfAbsent(), CONFIG_XML);",
      "800:     private File putUserFolderIfAbsent() throws IOException {",
      "801:         return UserIdMapper.getInstance().putIfAbsent(id, true);",
      "809:     public void delete() throws IOException {",
      "810:         String idKey = idStrategy().keyFor(id);",
      "811:         File existingUserFolder = getExistingUserFolder();",
      "812:         UserIdMapper.getInstance().remove(id);",
      "813:         AllUsers.remove(id);",
      "814:         deleteExistingUserFolder(existingUserFolder);",
      "815:         UserDetailsCache.get().invalidate(idKey);",
      "816:     }",
      "818:     private void deleteExistingUserFolder(File existingUserFolder) throws IOException {",
      "819:         if (existingUserFolder != null && existingUserFolder.exists()) {",
      "820:             Util.deleteRecursive(existingUserFolder);",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "909:     @RequirePOST",
      "911:         checkPermission(Jenkins.ADMINISTER);",
      "913:         JSONObject json = req.getSubmittedForm();",
      "",
      "[Removed Lines]",
      "910:     public void doConfigSubmit( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException, FormException {",
      "",
      "[Added Lines]",
      "835:     public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, FormException {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "915:         fullName = json.getString(\"fullName\");",
      "916:         description = json.getString(\"description\");",
      "919:         int i = 0;",
      "920:         for (UserPropertyDescriptor d : UserProperty.all()) {",
      "921:             UserProperty p = getProperty(d.clazz);",
      "923:             JSONObject o = json.optJSONObject(\"userProperty\" + (i++));",
      "925:                 if (p != null) {",
      "926:                     p = p.reconfigure(req, o);",
      "927:                 } else {",
      "",
      "[Removed Lines]",
      "918:         List<UserProperty> props = new ArrayList<UserProperty>();",
      "924:             if (o!=null) {",
      "",
      "[Added Lines]",
      "843:         List<UserProperty> props = new ArrayList<>();",
      "849:             if (o != null) {",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "930:                 p.setUser(this);",
      "931:             }",
      "934:                 props.add(p);",
      "935:         }",
      "936:         this.properties = props;",
      "",
      "[Removed Lines]",
      "933:             if (p!=null)",
      "",
      "[Added Lines]",
      "858:             if (p != null)",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "941:             UserDetailsCache.get().invalidate(oldFullName);",
      "942:         }",
      "945:     }",
      "950:     @RequirePOST",
      "952:         checkPermission(Jenkins.ADMINISTER);",
      "953:         if (idStrategy().equals(id, Jenkins.getAuthentication().getName())) {",
      "954:             rsp.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Cannot delete self\");",
      "",
      "[Removed Lines]",
      "944:         FormApply.success(\".\").generateResponse(req,rsp,this);",
      "951:     public void doDoDelete(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {",
      "",
      "[Added Lines]",
      "869:         FormApply.success(\".\").generateResponse(req, rsp, this);",
      "876:     public void doDoDelete(StaplerRequest req, StaplerResponse rsp) throws IOException {",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "969:     }",
      "971:     public void doRssLatest(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {",
      "975:                 if (relatedTo(b)) {",
      "976:                     lastBuilds.add(b);",
      "977:                     break;",
      "",
      "[Removed Lines]",
      "972:         final List<Run> lastBuilds = new ArrayList<Run>();",
      "973:         for (AbstractProject<?,?> p : Jenkins.getInstance().allItems(AbstractProject.class)) {",
      "974:             for (AbstractBuild<?,?> b = p.getLastBuild(); b != null; b = b.getPreviousBuild()) {",
      "",
      "[Added Lines]",
      "897:         final List<Run> lastBuilds = new ArrayList<>();",
      "898:         for (AbstractProject<?, ?> p : Jenkins.get().allItems(AbstractProject.class)) {",
      "899:             for (AbstractBuild<?, ?> b = p.getLastBuild(); b != null; b = b.getPreviousBuild()) {",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "980:         }",
      "989:         rss(req, rsp, \" latest build\", RunList.fromRuns(lastBuilds), Run.FEED_ADAPTER_LATEST);",
      "990:     }",
      "992:     private void rss(StaplerRequest req, StaplerResponse rsp, String suffix, RunList runs, FeedAdapter adapter)",
      "993:             throws IOException, ServletException {",
      "1014:     }",
      "1016:     public ACL getACL() {",
      "1019:         return ACL.lambda((a, permission) -> (idStrategy().equals(a.getName(), id) && !(a instanceof AnonymousAuthenticationToken))",
      "1021:     }",
      "",
      "[Removed Lines]",
      "983:         Collections.sort(lastBuilds, new Comparator<Run>() {",
      "984:             @Override",
      "985:             public int compare(Run o1, Run o2) {",
      "986:                 return Items.BY_FULL_NAME.compare(o1.getParent(), o2.getParent());",
      "987:             }",
      "988:         });",
      "994:         RSS.forwardToRss(getDisplayName()+ suffix, getUrl(), runs.newBuilds(), adapter, req, rsp);",
      "995:     }",
      "1003:     private static final ReadWriteLock byNameLock = new ReentrantReadWriteLock();",
      "1008:     public static final XStream2 XSTREAM = new XStream2();",
      "1010:     private static final Logger LOGGER = Logger.getLogger(User.class.getName());",
      "1012:     static {",
      "1013:         XSTREAM.alias(\"user\",User.class);",
      "1017:         ACL base = Jenkins.getInstance().getAuthorizationStrategy().getACL(this);",
      "1020:                         || base.hasPermission(a, permission));",
      "",
      "[Added Lines]",
      "908:         lastBuilds.sort((o1, o2) -> Items.BY_FULL_NAME.compare(o1.getParent(), o2.getParent()));",
      "914:         RSS.forwardToRss(getDisplayName() + suffix, getUrl(), runs.newBuilds(), adapter, req, rsp);",
      "917:     @Override",
      "918:     @Nonnull",
      "920:         ACL base = Jenkins.get().getAuthorizationStrategy().getACL(this);",
      "923:                 || base.hasPermission(a, permission));",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "1026:     public boolean canDelete() {",
      "1027:         final IdStrategy strategy = idStrategy();",
      "1028:         return hasPermission(Jenkins.ADMINISTER) && !strategy.equals(id, Jenkins.getAuthentication().getName())",
      "1030:     }",
      "1041:             return Collections.emptyList();",
      "1042:         }",
      "1044:         Authentication authentication;",
      "1045:         try {",
      "1046:             authentication = impersonate();",
      "",
      "[Removed Lines]",
      "1029:                 && new File(getRootDir(), strategy.filenameOf(id)).exists();",
      "1039:     public @Nonnull List<String> getAuthorities() {",
      "1040:         if (!Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {",
      "1043:         List<String> r = new ArrayList<String>();",
      "",
      "[Added Lines]",
      "932:                 && UserIdMapper.getInstance().isMapped(id);",
      "943:     public @Nonnull",
      "944:     List<String> getAuthorities() {",
      "945:         if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {",
      "948:         List<String> r = new ArrayList<>();",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "1057:                 r.add(n);",
      "1058:             }",
      "1059:         }",
      "1061:         return r;",
      "1062:     }",
      "1064:     public Object getDynamic(String token) {",
      "1067:                 return action;",
      "1068:         }",
      "1071:                 return action;",
      "1072:         }",
      "1073:         return null;",
      "1074:     }",
      "1081:     public List<Action> getPropertyActions() {",
      "1083:         for (UserProperty userProp : getProperties().values()) {",
      "1084:             if (userProp instanceof Action) {",
      "1085:                 actions.add((Action) userProp);",
      "",
      "[Removed Lines]",
      "1060:         Collections.sort(r, String.CASE_INSENSITIVE_ORDER);",
      "1065:         for(Action action: getTransientActions()){",
      "1066:             if(Objects.equals(action.getUrlName(), token))",
      "1069:         for(Action action: getPropertyActions()){",
      "1070:             if(Objects.equals(action.getUrlName(), token))",
      "1082:         List<Action> actions = new ArrayList<Action>();",
      "",
      "[Added Lines]",
      "965:         r.sort(String.CASE_INSENSITIVE_ORDER);",
      "970:         for (Action action : getTransientActions()) {",
      "971:             if (Objects.equals(action.getUrlName(), token))",
      "974:         for (Action action : getPropertyActions()) {",
      "975:             if (Objects.equals(action.getUrlName(), token))",
      "987:         List<Action> actions = new ArrayList<>();",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "1087:         }",
      "1088:         return Collections.unmodifiableList(actions);",
      "1089:     }",
      "1096:     public List<Action> getTransientActions() {",
      "1099:             actions.addAll(factory.createFor(this));",
      "1100:         }",
      "1101:         return Collections.unmodifiableList(actions);",
      "1102:     }",
      "1104:     public ContextMenu doContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {",
      "1106:     }",
      "1108:     @Override",
      "1109:     @Restricted(NoExternalUse.class)",
      "1110:     public Object getTarget() {",
      "1111:         if (!SKIP_PERMISSION_CHECK) {",
      "1114:                 try {",
      "1115:                     Stapler.getCurrentResponse().sendError(SC_NOT_FOUND); // send same response body Stapler would send",
      "",
      "[Removed Lines]",
      "1097:         List<Action> actions = new ArrayList<Action>();",
      "1098:         for (TransientUserActionFactory factory: TransientUserActionFactory.all()) {",
      "1105:         return new ContextMenu().from(this,request,response);",
      "1112:             if (!Jenkins.getInstance().hasPermission(Jenkins.READ)) {",
      "",
      "[Added Lines]",
      "1002:         List<Action> actions = new ArrayList<>();",
      "1003:         for (TransientUserActionFactory factory : TransientUserActionFactory.all()) {",
      "1010:         return new ContextMenu().from(this, request, response);",
      "1017:             if (!Jenkins.get().hasPermission(Jenkins.READ)) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "1121:         return this;",
      "1122:     }",
      "1136:     @Restricted(NoExternalUse.class)",
      "1142:     }",
      "1145:     @Extension",
      "1146:     @Restricted(NoExternalUse.class)",
      "1147:     public static final class AllUsers {",
      "1150:         public static void scanAll() {",
      "1161:             }",
      "1162:         }",
      "1176:         }",
      "1178:     }",
      "1190:     public static abstract class CanonicalIdResolver extends AbstractDescribableImpl<CanonicalIdResolver> implements ExtensionPoint, Comparable<CanonicalIdResolver> {",
      "",
      "[Removed Lines]",
      "1127:     @Restricted(NoExternalUse.class)",
      "1128:     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = Boolean.getBoolean(User.class.getName() + \".skipPermissionCheck\");",
      "1139:         final Set<String> res = new HashSet<>();",
      "1140:         res.addAll(Arrays.asList(ILLEGAL_PERSISTED_USERNAMES));",
      "1141:         return res;",
      "1149:         @Initializer(after = InitMilestone.JOB_LOADED) // so Jenkins.loadConfig has been called",
      "1151:             IdStrategy strategy = idStrategy();",
      "1152:             File[] subdirs = getRootDir().listFiles((FileFilter) DirectoryFileFilter.INSTANCE);",
      "1153:             if (subdirs != null) {",
      "1154:                 for (File subdir : subdirs) {",
      "1155:                     File configFile = new File(subdir, \"config.xml\");",
      "1156:                     if (configFile.exists()) {",
      "1157:                         String name = strategy.idFromFilename(subdir.getName());",
      "1158:                         getOrCreate(name, /* <init> calls load(), probably clobbering this anyway */name, true, configFile);",
      "1159:                     }",
      "1160:                 }",
      "1164:         @GuardedBy(\"User.byNameLock\")",
      "1165:         private final ConcurrentMap<String,User> byName = new ConcurrentHashMap<String, User>();",
      "1173:         @GuardedBy(\"User.byNameLock\")",
      "1174:         static ConcurrentMap<String,User> byName() {",
      "1175:             return ExtensionList.lookupSingleton(AllUsers.class).byName;",
      "",
      "[Added Lines]",
      "1037:         return new HashSet<>(Arrays.asList(ILLEGAL_PERSISTED_USERNAMES));",
      "1038:     }",
      "1040:     private Object writeReplace() {",
      "1041:         return XmlFile.replaceIfNotAtTopLevel(this, () -> new Replacer(this));",
      "1042:     }",
      "1044:     private static class Replacer {",
      "1045:         private final String id;",
      "1047:         Replacer(User u) {",
      "1048:             id = u.getId();",
      "1049:         }",
      "1051:         private Object readResolve() {",
      "1052:             return getById(id, false);",
      "1053:         }",
      "1063:         private final ConcurrentMap<String, User> byName = new ConcurrentHashMap<>();",
      "1065:         @Initializer(after = InitMilestone.JOB_LOADED)",
      "1067:             for (String userId : UserIdMapper.getInstance().getConvertedUserIds()) {",
      "1068:                 User user = new User(userId, userId);",
      "1069:                 getInstance().byName.putIfAbsent(idStrategy().keyFor(userId), user);",
      "1079:         private static AllUsers getInstance() {",
      "1080:             return ExtensionList.lookupSingleton(AllUsers.class);",
      "1081:         }",
      "1083:         private static void reload() {",
      "1084:             getInstance().byName.clear();",
      "1085:             UserDetailsCache.get().invalidateAll();",
      "1086:             scanAll();",
      "1087:         }",
      "1089:         private static void clear() {",
      "1090:             getInstance().byName.clear();",
      "1091:         }",
      "1093:         private static void remove(String id) {",
      "1094:             getInstance().byName.remove(idStrategy().keyFor(id));",
      "1095:         }",
      "1097:         private static User get(String id) {",
      "1098:             return getInstance().byName.get(idStrategy().keyFor(id));",
      "1099:         }",
      "1101:         private static void put(String id, User user) {",
      "1102:             getInstance().byName.putIfAbsent(idStrategy().keyFor(id), user);",
      "1105:         private static Collection<User> values() {",
      "1106:             return getInstance().byName.values();",
      "1107:         }",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "1197:         public static final String REALM = \"realm\";",
      "1199:         @Override",
      "1205:         }",
      "",
      "[Removed Lines]",
      "1200:         public int compareTo(CanonicalIdResolver o) {",
      "1202:             int i = getPriority();",
      "1203:             int j = o.getPriority();",
      "1204:             return i>j ? -1 : (i==j ? 0:1);",
      "1211:         public abstract @CheckForNull String resolveCanonicalId(String idOrFullName, @Nonnull Map<String, ?> context);",
      "",
      "[Added Lines]",
      "1130:         public int compareTo(@Nonnull CanonicalIdResolver o) {",
      "1132:             return Integer.compare(o.getPriority(), getPriority());",
      "1139:         public abstract @CheckForNull",
      "1140:         String resolveCanonicalId(String idOrFullName, Map<String, ?> context);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1246:         @CheckForNull",
      "1247:         public static String resolve(@Nonnull String idOrFullName, @Nonnull Map<String, ?> context) {",
      "1248:             for (CanonicalIdResolver resolver : CanonicalIdResolver.all()) {",
      "1250:                 String id = resolver.resolveCanonicalId(idOrFullName, context);",
      "1251:                 if (id != null) {",
      "1253:                     return id;",
      "1254:                 }",
      "1255:             }",
      "",
      "[Removed Lines]",
      "1252:                     LOGGER.log(Level.FINE, \"{0} mapped {1} to {2}\", new Object[] {resolver, idOrFullName, id});",
      "",
      "[Added Lines]",
      "1182:                     LOGGER.log(Level.FINE, \"{0} mapped {1} to {2}\", new Object[]{resolver, idOrFullName, id});",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1268:     public static class FullNameIdResolver extends CanonicalIdResolver {",
      "1270:         @Override",
      "",
      "[Removed Lines]",
      "1267:     @Extension @Symbol(\"fullName\")",
      "",
      "[Added Lines]",
      "1197:     @Extension",
      "1198:     @Symbol(\"fullName\")",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "1290:     @Restricted(NoExternalUse.class)",
      "1291:     public static class UserIDCanonicalIdResolver extends User.CanonicalIdResolver {",
      "1294:                 SystemProperties.getBoolean(User.class.getName() + \".SECURITY_243_FULL_DEFENSE\", true);",
      "1303:         @Override",
      "1304:         public String resolveCanonicalId(String idOrFullName, Map<String, ?> context) {",
      "",
      "[Removed Lines]",
      "1293:         private static /* not final */ boolean SECURITY_243_FULL_DEFENSE =",
      "1296:         private static final ThreadLocal<Boolean> resolving = new ThreadLocal<Boolean>() {",
      "1297:             @Override",
      "1298:             protected Boolean initialValue() {",
      "1299:                 return false;",
      "1300:             }",
      "1301:         };",
      "",
      "[Added Lines]",
      "1224:         private static /* not final */ boolean SECURITY_243_FULL_DEFENSE =",
      "1227:         private static final ThreadLocal<Boolean> resolving = ThreadLocal.withInitial(() -> false);",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "1333:     }",
      "1361: }",
      "",
      "[Removed Lines]",
      "1344:     public static boolean ALLOW_NON_EXISTENT_USER_TO_LOGIN = SystemProperties.getBoolean(User.class.getName()+\".allowNonExistentUserToLogin\");",
      "1358:     @Restricted(NoExternalUse.class)",
      "1359:     public static boolean ALLOW_USER_CREATION_VIA_URL = SystemProperties.getBoolean(User.class.getName() + \".allowUserCreationViaUrl\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/model/UserIdMapper.java||core/src/main/java/hudson/model/UserIdMapper.java": [
      "File: core/src/main/java/hudson/model/UserIdMapper.java -> core/src/main/java/hudson/model/UserIdMapper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.model;",
      "26: import hudson.Extension;",
      "27: import hudson.ExtensionList;",
      "28: import hudson.Util;",
      "29: import hudson.XmlFile;",
      "30: import hudson.init.InitMilestone;",
      "31: import hudson.init.Initializer;",
      "32: import hudson.util.XStream2;",
      "33: import jenkins.model.IdStrategy;",
      "34: import org.kohsuke.accmod.Restricted;",
      "35: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "37: import java.io.File;",
      "38: import java.io.IOException;",
      "39: import java.nio.file.Files;",
      "40: import java.nio.file.NoSuchFileException;",
      "41: import java.nio.file.Path;",
      "42: import java.util.Collections;",
      "43: import java.util.Map;",
      "44: import java.util.Set;",
      "45: import java.util.concurrent.ConcurrentHashMap;",
      "46: import java.util.logging.Level;",
      "47: import java.util.logging.Logger;",
      "48: import java.util.regex.Pattern;",
      "50: @Restricted(NoExternalUse.class)",
      "51: @Extension",
      "52: public class UserIdMapper {",
      "54:     private static final XStream2 XSTREAM = new XStream2();",
      "55:     static final String MAPPING_FILE = \"users.xml\";",
      "56:     private static final Logger LOGGER = Logger.getLogger(UserIdMapper.class.getName());",
      "57:     private static final int PREFIX_MAX = 15;",
      "58:     private static final Pattern PREFIX_PATTERN = Pattern.compile(\"[^A-Za-z0-9]\");",
      "59:     private final int version = 1; // Not currently used, but it may be helpful in the future to store a version.",
      "61:     private transient File usersDirectory;",
      "62:     private Map<String, String> idToDirectoryNameMap = new ConcurrentHashMap<>();",
      "64:     static UserIdMapper getInstance() {",
      "65:         return ExtensionList.lookupSingleton(UserIdMapper.class);",
      "66:     }",
      "68:     public UserIdMapper() {",
      "69:     }",
      "71:     @Initializer(after = InitMilestone.PLUGINS_STARTED, before = InitMilestone.JOB_LOADED)",
      "72:     public File init() throws IOException {",
      "73:         usersDirectory = createUsersDirectoryAsNeeded();",
      "74:         load();",
      "75:         return usersDirectory;",
      "76:     }",
      "78:     File getDirectory(String userId) {",
      "79:         String directoryName = idToDirectoryNameMap.get(getIdStrategy().keyFor(userId));",
      "80:         return directoryName == null ? null : new File(usersDirectory, directoryName);",
      "81:     }",
      "83:     File putIfAbsent(String userId, boolean saveToDisk) throws IOException {",
      "84:         String idKey = getIdStrategy().keyFor(userId);",
      "85:         String directoryName = idToDirectoryNameMap.get(idKey);",
      "86:         File directory = null;",
      "87:         if (directoryName == null) {",
      "88:             synchronized (this) {",
      "89:                 directoryName = idToDirectoryNameMap.get(idKey);",
      "90:                 if (directoryName == null) {",
      "91:                     directory = createDirectoryForNewUser(userId);",
      "92:                     directoryName = directory.getName();",
      "93:                     idToDirectoryNameMap.put(idKey, directoryName);",
      "94:                     if (saveToDisk) {",
      "95:                         save();",
      "96:                     }",
      "97:                 }",
      "98:             }",
      "99:         }",
      "100:         return directory == null ? new File(usersDirectory, directoryName) : directory;",
      "101:     }",
      "103:     boolean isMapped(String userId) {",
      "104:         return idToDirectoryNameMap.containsKey(getIdStrategy().keyFor(userId));",
      "105:     }",
      "107:     Set<String> getConvertedUserIds() {",
      "108:         return Collections.unmodifiableSet(idToDirectoryNameMap.keySet());",
      "109:     }",
      "111:     void remove(String userId) throws IOException {",
      "112:         idToDirectoryNameMap.remove(getIdStrategy().keyFor(userId));",
      "113:         save();",
      "114:     }",
      "116:     void clear() {",
      "117:         idToDirectoryNameMap.clear();",
      "118:     }",
      "120:     void reload() throws IOException {",
      "121:         clear();",
      "122:         load();",
      "123:     }",
      "125:     protected IdStrategy getIdStrategy() {",
      "126:         return User.idStrategy();",
      "127:     }",
      "129:     protected File getUsersDirectory() {",
      "130:         return User.getRootDir();",
      "131:     }",
      "133:     private XmlFile getXmlConfigFile() {",
      "134:         File file = getConfigFile(usersDirectory);",
      "135:         return new XmlFile(XSTREAM, file);",
      "136:     }",
      "138:     static File getConfigFile(File usersDirectory) {",
      "139:         return new File(usersDirectory, MAPPING_FILE);",
      "140:     }",
      "142:     private File createDirectoryForNewUser(String userId) throws IOException {",
      "143:         try {",
      "144:             Path tempDirectory = Files.createTempDirectory(Util.fileToPath(usersDirectory), generatePrefix(userId));",
      "145:             return tempDirectory.toFile();",
      "146:         } catch (IOException e) {",
      "147:             LOGGER.log(Level.SEVERE, \"Error creating directory for user: \" + userId, e);",
      "148:             throw e;",
      "149:         }",
      "150:     }",
      "152:     private String generatePrefix(String userId) {",
      "153:         String fullPrefix = PREFIX_PATTERN.matcher(userId).replaceAll(\"\");",
      "154:         return fullPrefix.length() > PREFIX_MAX - 1 ? fullPrefix.substring(0, PREFIX_MAX - 1) + '_' : fullPrefix + '_';",
      "155:     }",
      "157:     private File createUsersDirectoryAsNeeded() throws IOException {",
      "158:         File usersDirectory = getUsersDirectory();",
      "159:         if (!usersDirectory.exists()) {",
      "160:             try {",
      "161:                 Files.createDirectory(usersDirectory.toPath());",
      "162:             } catch (IOException e) {",
      "163:                 LOGGER.log(Level.SEVERE, \"Unable to create users directory: \" + usersDirectory, e);",
      "164:                 throw e;",
      "165:             }",
      "166:         }",
      "167:         return usersDirectory;",
      "168:     }",
      "170:     synchronized void save() throws IOException {",
      "171:         try {",
      "172:             getXmlConfigFile().write(this);",
      "173:         } catch (IOException ioe) {",
      "174:             LOGGER.log(Level.WARNING, \"Error saving userId mapping file.\", ioe);",
      "175:             throw ioe;",
      "176:         }",
      "177:     }",
      "179:     private void load() throws IOException {",
      "180:         UserIdMigrator migrator = new UserIdMigrator(usersDirectory, getIdStrategy());",
      "181:         if (migrator.needsMigration()) {",
      "182:             try {",
      "183:                 migrator.migrateUsers(this);",
      "184:             } catch (IOException ioe) {",
      "185:                 LOGGER.log(Level.SEVERE, \"Error migrating users.\", ioe);",
      "186:                 throw ioe;",
      "187:             }",
      "188:         } else {",
      "189:             XmlFile config = getXmlConfigFile();",
      "190:             try {",
      "191:                 config.unmarshal(this);",
      "192:             } catch (NoSuchFileException e) {",
      "193:                 LOGGER.log(Level.FINE, \"User id mapping file does not exist. It will be created when a user is saved.\");",
      "194:             } catch (IOException e) {",
      "195:                 LOGGER.log(Level.WARNING, \"Failed to load \" + config, e);",
      "196:                 throw e;",
      "197:             }",
      "198:         }",
      "199:     }",
      "201: }",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/model/UserIdMigrator.java||core/src/main/java/hudson/model/UserIdMigrator.java": [
      "File: core/src/main/java/hudson/model/UserIdMigrator.java -> core/src/main/java/hudson/model/UserIdMigrator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.model;",
      "26: import jenkins.model.IdStrategy;",
      "27: import org.kohsuke.accmod.Restricted;",
      "28: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "30: import java.io.File;",
      "31: import java.io.IOException;",
      "32: import java.nio.file.CopyOption;",
      "33: import java.nio.file.Files;",
      "34: import java.nio.file.StandardCopyOption;",
      "35: import java.util.HashMap;",
      "36: import java.util.Map;",
      "37: import java.util.logging.Level;",
      "38: import java.util.logging.Logger;",
      "40: @Restricted(NoExternalUse.class)",
      "41: class UserIdMigrator {",
      "43:     private static final Logger LOGGER = Logger.getLogger(UserIdMigrator.class.getName());",
      "44:     private static final String EMPTY_USERNAME_DIRECTORY_NAME = \"emptyUsername\";",
      "46:     private final File usersDirectory;",
      "47:     private final IdStrategy idStrategy;",
      "49:     UserIdMigrator(File usersDirectory, IdStrategy idStrategy) {",
      "50:         this.usersDirectory = usersDirectory;",
      "51:         this.idStrategy = idStrategy;",
      "52:     }",
      "54:     boolean needsMigration() {",
      "55:         File mappingFile = UserIdMapper.getConfigFile(usersDirectory);",
      "56:         if (mappingFile.exists() && mappingFile.isFile()) {",
      "57:             LOGGER.finest(\"User mapping file already exists. No migration needed.\");",
      "58:             return false;",
      "59:         }",
      "60:         File[] userDirectories = listUserDirectories();",
      "61:         return userDirectories != null && userDirectories.length > 0;",
      "62:     }",
      "64:     private File[] listUserDirectories() {",
      "65:         return usersDirectory.listFiles(file -> file.isDirectory() && new File(file, User.CONFIG_XML).exists());",
      "66:     }",
      "68:     Map<String, File> scanExistingUsers() throws IOException {",
      "69:         Map<String, File> users = new HashMap<>();",
      "70:         File[] userDirectories = listUserDirectories();",
      "71:         if (userDirectories != null) {",
      "72:             for (File directory : userDirectories) {",
      "73:                 String userId = idStrategy.idFromFilename(directory.getName());",
      "74:                 users.put(userId, directory);",
      "75:             }",
      "76:         }",
      "77:         addEmptyUsernameIfExists(users);",
      "78:         return users;",
      "79:     }",
      "81:     private void addEmptyUsernameIfExists(Map<String, File> users) throws IOException {",
      "82:         File emptyUsernameConfigFile = new File(usersDirectory, User.CONFIG_XML);",
      "83:         if (emptyUsernameConfigFile.exists()) {",
      "84:             File newEmptyUsernameDirectory = new File(usersDirectory, EMPTY_USERNAME_DIRECTORY_NAME);",
      "85:             Files.createDirectory(newEmptyUsernameDirectory.toPath());",
      "86:             File newEmptyUsernameConfigFile = new File(newEmptyUsernameDirectory, User.CONFIG_XML);",
      "87:             Files.move(emptyUsernameConfigFile.toPath(), newEmptyUsernameConfigFile.toPath());",
      "88:             users.put(\"\", newEmptyUsernameDirectory);",
      "89:         }",
      "90:     }",
      "92:     void migrateUsers(UserIdMapper mapper) throws IOException {",
      "93:         LOGGER.fine(\"Beginning migration of users to userId mapping.\");",
      "94:         Map<String, File> existingUsers = scanExistingUsers();",
      "95:         for (Map.Entry<String, File> existingUser : existingUsers.entrySet()) {",
      "96:             File newDirectory = mapper.putIfAbsent(existingUser.getKey(), false);",
      "97:             LOGGER.log(Level.INFO, \"Migrating user '\" + existingUser.getKey() + \"' from 'users/\" + existingUser.getValue().getName() + \"/' to 'users/\" + newDirectory.getName() + \"/'\");",
      "98:             Files.move(existingUser.getValue().toPath(), newDirectory.toPath(), StandardCopyOption.REPLACE_EXISTING);",
      "99:         }",
      "100:         mapper.save();",
      "101:         LOGGER.fine(\"Completed migration of users to userId mapping.\");",
      "102:     }",
      "104: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/model/IdStrategy.java||core/src/main/java/jenkins/model/IdStrategy.java": [
      "File: core/src/main/java/jenkins/model/IdStrategy.java -> core/src/main/java/jenkins/model/IdStrategy.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: import javax.annotation.Nonnull;",
      "38: import java.util.Comparator;",
      "39: import java.util.Locale;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: import java.util.function.Function;",
      "41: import java.util.regex.Matcher;",
      "42: import java.util.regex.Pattern;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "46: public abstract class IdStrategy extends AbstractDescribableImpl<IdStrategy> implements ExtensionPoint,",
      "47:         Comparator<String> {",
      "52:     public static IdStrategy CASE_INSENSITIVE = new CaseInsensitive();",
      "73:     @Restricted(ProtectedExternally.class)",
      "74:     public String legacyFilenameOf(@Nonnull String id) {",
      "76:     }",
      "85:     public String idFromFilename(@Nonnull String filename) {",
      "86:         return filename;",
      "87:     }",
      "95:     @Nonnull",
      "",
      "[Removed Lines]",
      "62:     @Nonnull",
      "63:     public abstract String filenameOf(@Nonnull String id);",
      "72:     @Nonnull",
      "75:         return filenameOf(id);",
      "96:     public abstract String keyFor(@Nonnull String id);",
      "",
      "[Added Lines]",
      "52:     private static final Pattern PSEUDO_UNICODE_PATTERN = Pattern.compile(\"\\\\$[a-f0-9]{4}\");",
      "53:     private static final Pattern CAPITALIZATION_PATTERN = Pattern.compile(\"~[a-z]\");",
      "67:     @Deprecated",
      "68:     public String filenameOf(@Nonnull String id) {",
      "69:         return null;",
      "70:     }",
      "79:     @Deprecated",
      "82:         return null;",
      "93:     @Deprecated",
      "106:     public String keyFor(@Nonnull String id) {",
      "107:         return id;",
      "108:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "162:     public static DescriptorExtensionList<IdStrategy, IdStrategyDescriptor> all() {",
      "164:     }",
      "",
      "[Removed Lines]",
      "163:         return Jenkins.getInstance().getDescriptorList(IdStrategy.class);",
      "",
      "[Added Lines]",
      "175:         return Jenkins.get().getDescriptorList(IdStrategy.class);",
      "176:     }",
      "178:     String applyPatternRepeatedly(@Nonnull Pattern pattern, @Nonnull String filename,",
      "179:                                   @Nonnull Function<String, Character> converter) {",
      "180:         StringBuilder id = new StringBuilder();",
      "181:         int beginIndex = 0;",
      "182:         Matcher matcher = pattern.matcher(filename);",
      "183:         while (matcher.find()) {",
      "184:             String group = matcher.group();",
      "185:             id.append(filename, beginIndex, matcher.start());",
      "186:             id.append(converter.apply(group));",
      "187:             beginIndex = matcher.end();",
      "188:         }",
      "189:         id.append(filename.substring(beginIndex));",
      "190:         return id.toString();",
      "191:     }",
      "193:     Character convertPseudoUnicode(String matchedGroup) {",
      "194:         return (char) Integer.parseInt(matchedGroup.substring(1), 16);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "171:         @DataBoundConstructor",
      "172:         public CaseInsensitive() {}",
      "263:         @Override",
      "264:         public String idFromFilename(@Nonnull String filename) {",
      "315:         }",
      "",
      "[Removed Lines]",
      "174:         @Override",
      "175:         @Nonnull",
      "176:         public String filenameOf(@Nonnull String id) {",
      "177:             if (id.isEmpty() || id.matches(\"[a-zA-Z0-9_. @-]+\")) {",
      "178:                 id = id.toLowerCase(Locale.ENGLISH);",
      "179:                 switch (id) {",
      "180:                     case \"\":",
      "181:                     case \".\":",
      "182:                         return \"$002f\";",
      "183:                     case \"..\":",
      "184:                         return \"$002e$002e\";",
      "185:                     case \"con\":",
      "186:                         return \"$0063on\";",
      "187:                     case \"prn\":",
      "188:                         return \"$0070rn\";",
      "189:                     case \"aux\":",
      "190:                         return \"$0061ux\";",
      "191:                     case \"nul\":",
      "192:                         return \"$006eul\";",
      "193:                     case \"com1\":",
      "194:                         return \"$0063om1\";",
      "195:                     case \"com2\":",
      "196:                         return \"$0063om2\";",
      "197:                     case \"com3\":",
      "198:                         return \"$0063om3\";",
      "199:                     case \"com4\":",
      "200:                         return \"$0063om4\";",
      "201:                     case \"com5\":",
      "202:                         return \"$0063om5\";",
      "203:                     case \"com6\":",
      "204:                         return \"$0063om6\";",
      "205:                     case \"com7\":",
      "206:                         return \"$0063om7\";",
      "207:                     case \"com8\":",
      "208:                         return \"$0063om8\";",
      "209:                     case \"com9\":",
      "210:                         return \"$0063om9\";",
      "211:                     case \"lpt1\":",
      "212:                         return \"$006cpt1\";",
      "213:                     case \"lpt2\":",
      "214:                         return \"$006cpt2\";",
      "215:                     case \"lpt3\":",
      "216:                         return \"$006cpt3\";",
      "217:                     case \"lpt4\":",
      "218:                         return \"$006cpt4\";",
      "219:                     case \"lpt5\":",
      "220:                         return \"$006cpt5\";",
      "221:                     case \"lpt6\":",
      "222:                         return \"$006cpt6\";",
      "223:                     case \"lpt7\":",
      "224:                         return \"$006cpt7\";",
      "225:                     case \"lpt8\":",
      "226:                         return \"$006cpt8\";",
      "227:                     case \"lpt9\":",
      "228:                         return \"$006cpt9\";",
      "229:                     default:",
      "230:                         if (id.endsWith(\".\")) {",
      "231:                             return id.substring(0,id.length()-1)+\"$002e\";",
      "232:                         } else if (id.startsWith(\"-\")) {",
      "233:                             return \"$002d\" + id.substring(1);",
      "234:                         }",
      "235:                         return id;",
      "236:                 }",
      "237:             } else {",
      "238:                 StringBuilder buf = new StringBuilder(id.length() + 16);",
      "239:                 for (char c : id.toCharArray()) {",
      "240:                     if ('a' <= c && c <= 'z') {",
      "241:                         buf.append(c);",
      "242:                     } else if ('A' <= c && c <= 'Z') {",
      "243:                         buf.append(Character.toLowerCase(c));",
      "244:                     } else if ('0' <= c && c <= '9') {",
      "245:                         buf.append(c);",
      "246:                     } else if ('_' == c || '-' == c || ' ' == c || '@' == c || '.' == c) {",
      "247:                         buf.append(c);",
      "248:                     } else {",
      "249:                         buf.append('$');",
      "250:                         buf.append(StringUtils.leftPad(Integer.toHexString(c & 0xffff), 4, '0'));",
      "251:                     }",
      "252:                 }",
      "253:                 return buf.toString();",
      "254:             }",
      "255:         }",
      "257:         @Nonnull",
      "258:         @Override",
      "259:         public String legacyFilenameOf(@Nonnull String id) {",
      "260:             return id.toLowerCase(Locale.ENGLISH);",
      "261:         }",
      "265:             if (filename.matches(\"[A-Za-z0-9_. @-]+\")) {",
      "266:                 return filename.toLowerCase(Locale.ENGLISH);",
      "267:             } else {",
      "268:                 StringBuilder buf = new StringBuilder(filename.length());",
      "269:                 final char[] chars = filename.toCharArray();",
      "270:                 for (int i = 0; i < chars.length; i++) {",
      "271:                     char c = chars[i];",
      "272:                     if ('a' <= c && c <= 'z') {",
      "273:                         buf.append(c);",
      "274:                     } else if ('A' <= c && c <= 'a') {",
      "275:                         buf.append(Character.toLowerCase(c));",
      "276:                     } else if ('0' <= c && c <= '9') {",
      "277:                         buf.append(c);",
      "278:                     } else if ('_' == c || '.' == c || '-' == c || ' ' == c || '@' == c) {",
      "279:                         buf.append(c);",
      "280:                     } else if (c == '$') {",
      "281:                         StringBuilder hex = new StringBuilder(4);",
      "282:                         i++;",
      "283:                         if (i < chars.length) {",
      "284:                             hex.append(chars[i]);",
      "285:                         } else {",
      "286:                             break;",
      "287:                         }",
      "288:                         i++;",
      "289:                         if (i < chars.length) {",
      "290:                             hex.append(chars[i]);",
      "291:                         } else {",
      "292:                             break;",
      "293:                         }",
      "294:                         i++;",
      "295:                         if (i < chars.length) {",
      "296:                             hex.append(chars[i]);",
      "297:                         } else {",
      "298:                             break;",
      "299:                         }",
      "300:                         i++;",
      "301:                         if (i < chars.length) {",
      "302:                             hex.append(chars[i]);",
      "303:                         } else {",
      "304:                             break;",
      "305:                         }",
      "306:                         try {",
      "307:                             buf.append(Character.valueOf((char)Integer.parseInt(hex.toString(), 16)));",
      "308:                         } catch (NumberFormatException x) {",
      "309:                             buf.append('$').append(hex);",
      "310:                         }",
      "311:                     }",
      "312:                 }",
      "313:                 return buf.toString();",
      "314:             }",
      "",
      "[Added Lines]",
      "207:             String id = applyPatternRepeatedly(PSEUDO_UNICODE_PATTERN, filename, this::convertPseudoUnicode);",
      "208:             return id.toLowerCase(Locale.ENGLISH);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "340:             @Override",
      "341:             public String getDisplayName() {",
      "342:                 return Messages.IdStrategy_CaseInsensitive_DisplayName();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "234:             @Nonnull",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "352:         @DataBoundConstructor",
      "353:         public CaseSensitive() {}",
      "445:         @Override",
      "468:         }",
      "525:         }",
      "",
      "[Removed Lines]",
      "358:         @Override",
      "359:         @Nonnull",
      "360:         public String filenameOf(@Nonnull String id) {",
      "361:             if (id.isEmpty() || id.matches(\"[a-z0-9_. @-]+\")) {",
      "362:                 switch (id) {",
      "363:                     case \"\":",
      "364:                     case \".\":",
      "365:                         return \"$002f\";",
      "366:                     case \"..\":",
      "367:                         return \"$002e$002e\";",
      "368:                     case \"con\":",
      "369:                         return \"$0063on\";",
      "370:                     case \"prn\":",
      "371:                         return \"$0070rn\";",
      "372:                     case \"aux\":",
      "373:                         return \"$0061ux\";",
      "374:                     case \"nul\":",
      "375:                         return \"$006eul\";",
      "376:                     case \"com1\":",
      "377:                         return \"$0063om1\";",
      "378:                     case \"com2\":",
      "379:                         return \"$0063om2\";",
      "380:                     case \"com3\":",
      "381:                         return \"$0063om3\";",
      "382:                     case \"com4\":",
      "383:                         return \"$0063om4\";",
      "384:                     case \"com5\":",
      "385:                         return \"$0063om5\";",
      "386:                     case \"com6\":",
      "387:                         return \"$0063om6\";",
      "388:                     case \"com7\":",
      "389:                         return \"$0063om7\";",
      "390:                     case \"com8\":",
      "391:                         return \"$0063om8\";",
      "392:                     case \"com9\":",
      "393:                         return \"$0063om9\";",
      "394:                     case \"lpt1\":",
      "395:                         return \"$006cpt1\";",
      "396:                     case \"lpt2\":",
      "397:                         return \"$006cpt2\";",
      "398:                     case \"lpt3\":",
      "399:                         return \"$006cpt3\";",
      "400:                     case \"lpt4\":",
      "401:                         return \"$006cpt4\";",
      "402:                     case \"lpt5\":",
      "403:                         return \"$006cpt5\";",
      "404:                     case \"lpt6\":",
      "405:                         return \"$006cpt6\";",
      "406:                     case \"lpt7\":",
      "407:                         return \"$006cpt7\";",
      "408:                     case \"lpt8\":",
      "409:                         return \"$006cpt8\";",
      "410:                     case \"lpt9\":",
      "411:                         return \"$006cpt9\";",
      "412:                     default:",
      "413:                         if (id.endsWith(\".\")) {",
      "414:                             return id.substring(0,id.length()-1)+\"$002e\";",
      "415:                         } else if (id.startsWith(\"-\")) {",
      "416:                             return \"$002d\" + id.substring(1);",
      "417:                         }",
      "418:                         return id;",
      "419:                 }",
      "420:             } else {",
      "421:                 StringBuilder buf = new StringBuilder(id.length() + 16);",
      "422:                 for (char c : id.toCharArray()) {",
      "423:                     if ('a' <= c && c <= 'z') {",
      "424:                         buf.append(c);",
      "425:                     } else if ('0' <= c && c <= '9') {",
      "426:                         buf.append(c);",
      "427:                     } else if ('_' == c || '-' == c || ' ' == c || '@' == c || '.' == c) {",
      "428:                         buf.append(c);",
      "429:                     } else if ('A' <= c && c <= 'Z') {",
      "430:                         buf.append('~');",
      "431:                         buf.append(Character.toLowerCase(c));",
      "432:                     } else {",
      "433:                         buf.append('$');",
      "434:                         buf.append(StringUtils.leftPad(Integer.toHexString(c & 0xffff), 4, '0'));",
      "435:                     }",
      "436:                 }",
      "437:                 return buf.toString();",
      "438:             }",
      "439:         }",
      "444:         @Nonnull",
      "446:         public String legacyFilenameOf(@Nonnull String id) {",
      "447:             if (id.matches(\"[a-z0-9_. @-]+\")) {",
      "448:                 return id;",
      "449:             } else {",
      "450:                 StringBuilder buf = new StringBuilder(id.length() + 16);",
      "451:                 for (char c : id.toCharArray()) {",
      "452:                     if ('a' <= c && c <= 'z') {",
      "453:                         buf.append(c);",
      "454:                     } else if ('0' <= c && c <= '9') {",
      "455:                         buf.append(c);",
      "456:                     } else if ('_' == c || '.' == c || '-' == c || ' ' == c || '@' == c) {",
      "457:                         buf.append(c);",
      "458:                     } else if ('A' <= c && c <= 'Z') {",
      "459:                         buf.append('~');",
      "460:                         buf.append(Character.toLowerCase(c));",
      "461:                     } else {",
      "462:                         buf.append('$');",
      "463:                         buf.append(StringUtils.leftPad(Integer.toHexString(c & 0xffff), 4, '0'));",
      "464:                     }",
      "465:                 }",
      "466:                 return buf.toString();",
      "467:             }",
      "470:         @Override",
      "471:         public String idFromFilename(@Nonnull String filename) {",
      "472:             if (filename.matches(\"[a-z0-9_. -]+\")) {",
      "473:                 return filename;",
      "474:             } else {",
      "475:                 StringBuilder buf = new StringBuilder(filename.length());",
      "476:                 final char[] chars = filename.toCharArray();",
      "477:                 for (int i = 0; i < chars.length; i++) {",
      "478:                     char c = chars[i];",
      "479:                     if ('a' <= c && c <= 'z') {",
      "480:                         buf.append(c);",
      "481:                     } else if ('0' <= c && c <= '9') {",
      "482:                         buf.append(c);",
      "483:                     } else if ('_' == c || '.' == c || '-' == c || ' ' == c || '@' == c) {",
      "484:                         buf.append(c);",
      "485:                     } else if (c == '~') {",
      "486:                         i++;",
      "487:                         if (i < chars.length) {",
      "488:                             buf.append(Character.toUpperCase(chars[i]));",
      "489:                         }",
      "490:                     } else if (c == '$') {",
      "491:                         StringBuilder hex = new StringBuilder(4);",
      "492:                         i++;",
      "493:                         if (i < chars.length) {",
      "494:                             hex.append(chars[i]);",
      "495:                         } else {",
      "496:                             break;",
      "497:                         }",
      "498:                         i++;",
      "499:                         if (i < chars.length) {",
      "500:                             hex.append(chars[i]);",
      "501:                         } else {",
      "502:                             break;",
      "503:                         }",
      "504:                         i++;",
      "505:                         if (i < chars.length) {",
      "506:                             hex.append(chars[i]);",
      "507:                         } else {",
      "508:                             break;",
      "509:                         }",
      "510:                         i++;",
      "511:                         if (i < chars.length) {",
      "512:                             hex.append(chars[i]);",
      "513:                         } else {",
      "514:                             break;",
      "515:                         }",
      "516:                         try {",
      "517:                             buf.append(Character.valueOf((char)Integer.parseInt(hex.toString(), 16)));",
      "518:                         } catch (NumberFormatException x) {",
      "519:                             buf.append('$').append(hex);",
      "520:                         }",
      "521:                     }",
      "522:                 }",
      "523:                 return buf.toString();",
      "524:             }",
      "",
      "[Added Lines]",
      "251:         public String idFromFilename(@Nonnull String filename) {",
      "252:             String id = applyPatternRepeatedly(CAPITALIZATION_PATTERN, filename, this::convertCapitalizedAscii);",
      "253:             return applyPatternRepeatedly(PSEUDO_UNICODE_PATTERN, id, this::convertPseudoUnicode);",
      "256:         private Character convertCapitalizedAscii(String encoded) {",
      "257:             return encoded.toUpperCase().charAt(1);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "532:             return StringUtils.equals(id1, id2);",
      "533:         }",
      "",
      "[Removed Lines]",
      "538:         @Override",
      "539:         @Nonnull",
      "540:         public String keyFor(@Nonnull String id) {",
      "541:             return id;",
      "542:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "576:         @DataBoundConstructor",
      "577:         public CaseSensitiveEmailAddress() {}",
      "",
      "[Removed Lines]",
      "582:         @Override",
      "583:         @Nonnull",
      "584:         public String filenameOf(@Nonnull String id) {",
      "585:             return super.filenameOf(keyFor(id));",
      "586:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/model/TestUserIdMapper.java||core/src/test/java/hudson/model/TestUserIdMapper.java": [
      "File: core/src/test/java/hudson/model/TestUserIdMapper.java -> core/src/test/java/hudson/model/TestUserIdMapper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.model;",
      "3: import jenkins.model.IdStrategy;",
      "5: import java.io.File;",
      "6: import java.io.IOException;",
      "8: class TestUserIdMapper extends UserIdMapper {",
      "10:     private File usersDirectory;",
      "11:     private IdStrategy idStrategy;",
      "13:     TestUserIdMapper(File usersDirectory, IdStrategy idStrategy) throws IOException {",
      "14:         this.usersDirectory = usersDirectory;",
      "15:         this.idStrategy = idStrategy;",
      "16:     }",
      "18:     @Override",
      "19:     protected File getUsersDirectory() {",
      "20:         return usersDirectory;",
      "21:     }",
      "23:     @Override",
      "24:     protected IdStrategy getIdStrategy() {",
      "25:         return idStrategy;",
      "26:     }",
      "27: }",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/model/UserIdMapperTest.java||core/src/test/java/hudson/model/UserIdMapperTest.java": [
      "File: core/src/test/java/hudson/model/UserIdMapperTest.java -> core/src/test/java/hudson/model/UserIdMapperTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.model;",
      "26: import jenkins.model.IdStrategy;",
      "27: import org.junit.Rule;",
      "28: import org.junit.Test;",
      "29: import org.junit.rules.TestName;",
      "31: import java.io.File;",
      "32: import java.io.IOException;",
      "34: import static org.hamcrest.MatcherAssert.assertThat;",
      "35: import static org.hamcrest.Matchers.*;",
      "37: public class UserIdMapperTest {",
      "39:     @Rule",
      "40:     public TestName name= new TestName();",
      "42:     @Test",
      "43:     public void testNonexistentFileLoads() throws IOException {",
      "44:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "45:     }",
      "47:     @Test",
      "48:     public void testEmptyGet() throws IOException {",
      "49:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "50:         assertThat(mapper.getDirectory(\"anything\"), nullValue());",
      "51:     }",
      "53:     @Test",
      "54:     public void testSimplePutGet() throws IOException {",
      "55:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "56:         String user1 = \"user1\";",
      "57:         File directory = mapper.putIfAbsent(user1, true);",
      "58:         assertThat(directory, is(mapper.getDirectory(user1)));",
      "59:     }",
      "61:     @Test",
      "62:     public void testMultiple() throws IOException {",
      "63:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "64:         String user1 = \"user1\";",
      "65:         File directory1 = mapper.putIfAbsent(user1, true);",
      "66:         String user2 = \"user2\";",
      "67:         File directory2 = mapper.putIfAbsent(user2, true);",
      "68:         String user3 = \"user3\";",
      "69:         File directory3 = mapper.putIfAbsent(user3, true);",
      "70:         assertThat(directory1, is(mapper.getDirectory(user1)));",
      "71:         assertThat(directory2, is(mapper.getDirectory(user2)));",
      "72:         assertThat(directory3, is(mapper.getDirectory(user3)));",
      "73:     }",
      "75:     @Test",
      "76:     public void testMultipleSaved() throws IOException {",
      "77:         File usersDirectory = UserIdMigratorTest.createTestDirectory(getClass(), name);",
      "78:         IdStrategy idStrategy = IdStrategy.CASE_INSENSITIVE;",
      "79:         UserIdMapper mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "80:         mapper.init();",
      "81:         String user1 = \"user1\";",
      "82:         File directory1 = mapper.putIfAbsent(user1, true);",
      "83:         String user2 = \"user2\";",
      "84:         File directory2 = mapper.putIfAbsent(user2, true);",
      "85:         String user3 = \"user3\";",
      "86:         File directory3 = mapper.putIfAbsent(user3, true);",
      "87:         mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "88:         mapper.init();",
      "89:         assertThat(directory1, is(mapper.getDirectory(user1)));",
      "90:         assertThat(directory2, is(mapper.getDirectory(user2)));",
      "91:         assertThat(directory3, is(mapper.getDirectory(user3)));",
      "92:     }",
      "94:     @Test",
      "95:     public void testRepeatPut() throws IOException {",
      "96:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "97:         String user1 = \"user1\";",
      "98:         File directory1 = mapper.putIfAbsent(user1, true);",
      "99:         File directory2 = mapper.putIfAbsent(user1, true);",
      "100:         assertThat(directory1, is(directory2));",
      "101:     }",
      "103:     @Test",
      "104:     public void testIsNotMapped() throws IOException {",
      "105:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "106:         assertThat(mapper.isMapped(\"anything\"), is(false));",
      "107:     }",
      "109:     @Test",
      "110:     public void testIsMapped() throws IOException {",
      "111:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "112:         String user1 = \"user1\";",
      "113:         File directory = mapper.putIfAbsent(user1, true);",
      "114:         assertThat(mapper.isMapped(user1), is(true));",
      "115:     }",
      "117:     @Test",
      "118:     public void testInitialUserIds() throws IOException {",
      "119:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "120:         assertThat(mapper.getConvertedUserIds(), empty());",
      "121:     }",
      "123:     @Test",
      "124:     public void testSingleUserIds() throws IOException {",
      "125:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "126:         String user1 = \"user1\";",
      "127:         File directory = mapper.putIfAbsent(user1, true);",
      "128:         assertThat(mapper.getConvertedUserIds(), hasSize(1));",
      "129:         assertThat(mapper.getConvertedUserIds().iterator().next(), is(user1));",
      "130:     }",
      "132:     @Test",
      "133:     public void testMultipleUserIds() throws IOException {",
      "134:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "135:         String user1 = \"user1\";",
      "136:         File directory = mapper.putIfAbsent(user1, true);",
      "137:         String user2 = \"user2\";",
      "138:         File directory2 = mapper.putIfAbsent(user2, true);",
      "139:         assertThat(mapper.getConvertedUserIds(), hasSize(2));",
      "140:         assertThat(mapper.getConvertedUserIds(), hasItems(user1, user2));",
      "141:     }",
      "143:     @Test",
      "144:     public void testRemove() throws IOException {",
      "145:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "146:         String user1 = \"user1\";",
      "147:         File directory = mapper.putIfAbsent(user1, true);",
      "148:         mapper.remove(user1);",
      "149:         assertThat(mapper.isMapped(user1), is(false));",
      "150:     }",
      "152:     @Test",
      "153:     public void testRemoveAfterSave() throws IOException {",
      "154:         File usersDirectory = UserIdMigratorTest.createTestDirectory(getClass(), name);",
      "155:         IdStrategy idStrategy = IdStrategy.CASE_INSENSITIVE;",
      "156:         UserIdMapper mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "157:         mapper.init();",
      "158:         String user1 = \"user1\";",
      "159:         File directory = mapper.putIfAbsent(user1, true);",
      "160:         mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "161:         mapper.init();",
      "162:         mapper.remove(user1);",
      "163:         mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "164:         assertThat(mapper.isMapped(user1), is(false));",
      "165:     }",
      "167:     @Test",
      "168:     public void testPutGetCaseInsensitive() throws IOException {",
      "169:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "170:         String user1 = \"user1\";",
      "171:         File directory = mapper.putIfAbsent(user1, true);",
      "172:         assertThat(mapper.getDirectory(user1.toUpperCase()), notNullValue());",
      "173:     }",
      "175:     @Test",
      "176:     public void testPutGetCaseSensitive() throws IOException {",
      "177:         IdStrategy idStrategy = new IdStrategy.CaseSensitive();",
      "178:         UserIdMapper mapper = createUserIdMapper(idStrategy);",
      "179:         String user1 = \"user1\";",
      "180:         File directory = mapper.putIfAbsent(user1, true);",
      "181:         assertThat(mapper.getDirectory(user1.toUpperCase()), nullValue());",
      "182:     }",
      "184:     @Test",
      "185:     public void testIsMappedCaseInsensitive() throws IOException {",
      "186:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "187:         String user1 = \"user1\";",
      "188:         File directory = mapper.putIfAbsent(user1, true);",
      "189:         assertThat(mapper.isMapped(user1.toUpperCase()), is(true));",
      "190:     }",
      "192:     @Test",
      "193:     public void testIsMappedCaseSensitive() throws IOException {",
      "194:         IdStrategy idStrategy = new IdStrategy.CaseSensitive();",
      "195:         UserIdMapper mapper = createUserIdMapper(idStrategy);",
      "196:         String user1 = \"user1\";",
      "197:         File directory = mapper.putIfAbsent(user1, true);",
      "198:         assertThat(mapper.isMapped(user1.toUpperCase()), is(false));",
      "199:     }",
      "201:     @Test",
      "202:     public void testRemoveCaseInsensitive() throws IOException {",
      "203:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "204:         String user1 = \"user1\";",
      "205:         File directory = mapper.putIfAbsent(user1, true);",
      "206:         mapper.remove(user1.toUpperCase());",
      "207:         assertThat(mapper.isMapped(user1), is(false));",
      "208:     }",
      "210:     @Test",
      "211:     public void testRemoveCaseSensitive() throws IOException {",
      "212:         IdStrategy idStrategy = new IdStrategy.CaseSensitive();",
      "213:         UserIdMapper mapper = createUserIdMapper(idStrategy);",
      "214:         String user1 = \"user1\";",
      "215:         File directory = mapper.putIfAbsent(user1, true);",
      "216:         mapper.remove(user1.toUpperCase());",
      "217:         assertThat(mapper.isMapped(user1), is(true));",
      "218:     }",
      "220:     @Test",
      "221:     public void testRepeatRemove() throws IOException {",
      "222:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "223:         String user1 = \"user1\";",
      "224:         File directory1 = mapper.putIfAbsent(user1, true);",
      "225:         mapper.remove(user1);",
      "226:         mapper.remove(user1);",
      "227:         assertThat(mapper.isMapped(user1), is(false));",
      "228:     }",
      "230:     @Test",
      "231:     public void testClear() throws IOException {",
      "232:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "233:         String user1 = \"user1\";",
      "234:         File directory1 = mapper.putIfAbsent(user1, true);",
      "235:         mapper.clear();",
      "236:         assertThat(mapper.isMapped(user1), is(false));",
      "237:         assertThat(mapper.getConvertedUserIds(), empty());",
      "238:     }",
      "240:     @Test",
      "241:     public void testReload() throws IOException {",
      "242:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "243:         String user1 = \"user1\";",
      "244:         File directory1 = mapper.putIfAbsent(user1, true);",
      "245:         mapper.reload();",
      "246:         assertThat(mapper.isMapped(user1), is(true));",
      "247:         assertThat(mapper.getConvertedUserIds(), hasSize(1));",
      "248:     }",
      "250:     @Test",
      "251:     public void testDirectoryFormatBasic() throws IOException {",
      "252:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "253:         String user1 = \"1user\";",
      "254:         File directory1 = mapper.putIfAbsent(user1, true);",
      "255:         assertThat(directory1.getName(), startsWith(user1 + '_'));",
      "256:     }",
      "258:     @Test",
      "259:     public void testDirectoryFormatLongerUserId() throws IOException {",
      "260:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "261:         String user1 = \"muchlongeruserid\";",
      "262:         File directory1 = mapper.putIfAbsent(user1, true);",
      "263:         assertThat(directory1.getName(), startsWith(\"muchlongeruser_\"));",
      "264:     }",
      "266:     @Test",
      "267:     public void testDirectoryFormatAllSuppressedCharacters() throws IOException {",
      "268:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "269:         String user1 = \"!@#$%^\";",
      "270:         File directory1 = mapper.putIfAbsent(user1, true);",
      "271:         assertThat(directory1.getName(), startsWith(\"_\"));",
      "272:     }",
      "274:     @Test",
      "275:     public void testDirectoryFormatSingleCharacter() throws IOException {",
      "276:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "277:         String user1 = \".\";",
      "278:         File directory1 = mapper.putIfAbsent(user1, true);",
      "279:         assertThat(directory1.getName(), startsWith(\"_\"));",
      "280:     }",
      "282:     @Test",
      "283:     public void testDirectoryFormatMixed() throws IOException {",
      "284:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "285:         String user1 = \"a$b!c^d~e@f\";",
      "286:         File directory1 = mapper.putIfAbsent(user1, true);",
      "287:         assertThat(directory1.getName(), startsWith(\"abcdef_\"));",
      "288:     }",
      "290:     @Test(expected = IOException.class)",
      "291:     public void testXmlFileCorrupted() throws IOException {",
      "292:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "293:     }",
      "295:     @Test",
      "296:     public void testDuplicatedUserId() throws IOException {",
      "297:         UserIdMapper mapper = createUserIdMapper(IdStrategy.CASE_INSENSITIVE);",
      "298:         assertThat(mapper.isMapped(\"user2\"), is(true));",
      "299:         assertThat(mapper.isMapped(\"user1\"), is(true));",
      "300:     }",
      "302:     private UserIdMapper createUserIdMapper(IdStrategy idStrategy) throws IOException {",
      "303:         File usersDirectory = UserIdMigratorTest.createTestDirectory(getClass(), name);",
      "304:         TestUserIdMapper mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "305:         mapper.init();",
      "306:         return mapper;",
      "307:     }",
      "309: }",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/model/UserIdMigratorTest.java||core/src/test/java/hudson/model/UserIdMigratorTest.java": [
      "File: core/src/test/java/hudson/model/UserIdMigratorTest.java -> core/src/test/java/hudson/model/UserIdMigratorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.model;",
      "26: import jenkins.model.IdStrategy;",
      "27: import org.apache.commons.io.FileUtils;",
      "28: import org.junit.Rule;",
      "29: import org.junit.Test;",
      "30: import org.junit.rules.TestName;",
      "32: import java.io.File;",
      "33: import java.io.IOException;",
      "34: import java.nio.file.Files;",
      "35: import java.nio.file.Paths;",
      "36: import java.util.Map;",
      "38: import static org.hamcrest.MatcherAssert.assertThat;",
      "39: import static org.hamcrest.Matchers.*;",
      "41: public class UserIdMigratorTest {",
      "43:     private static final String BASE_RESOURCE_PATH = \"src/test/resources/hudson/model/\";",
      "45:     @Rule",
      "46:     public TestName name = new TestName();",
      "48:     @Test",
      "49:     public void needsMigrationBasic() throws IOException {",
      "50:         UserIdMigrator migrator = createUserIdMigrator();",
      "51:         assertThat(migrator.needsMigration(), is(true));",
      "52:     }",
      "54:     @Test",
      "55:     public void needsMigrationFalse() throws IOException {",
      "56:         UserIdMigrator migrator = createUserIdMigrator();",
      "57:         assertThat(migrator.needsMigration(), is(false));",
      "58:     }",
      "60:     @Test",
      "61:     public void needsMigrationNoneExisting() throws IOException {",
      "62:         UserIdMigrator migrator = createUserIdMigrator();",
      "63:         assertThat(migrator.needsMigration(), is(false));",
      "64:     }",
      "66:     @Test",
      "67:     public void needsMigrationNoUserConfigFiles() throws IOException {",
      "68:         UserIdMigrator migrator = createUserIdMigrator();",
      "69:         assertThat(migrator.needsMigration(), is(false));",
      "70:     }",
      "72:     @Test",
      "73:     public void scanExistingUsersNone() throws IOException {",
      "74:         File usersDirectory = createTestDirectory(getClass(), name);",
      "75:         UserIdMigrator migrator = new UserIdMigrator(usersDirectory, IdStrategy.CASE_INSENSITIVE);",
      "76:         Map<String, File> userMappings = migrator.scanExistingUsers();",
      "77:         assertThat(userMappings.keySet(), empty());",
      "78:     }",
      "80:     @Test",
      "81:     public void scanExistingUsersNoUsersDirectory() throws IOException {",
      "82:         UserIdMigrator migrator = createUserIdMigrator();",
      "83:         Map<String, File> userMappings = migrator.scanExistingUsers();",
      "84:         assertThat(userMappings.keySet(), empty());",
      "85:     }",
      "87:     @Test",
      "88:     public void scanExistingUsersBasic() throws IOException {",
      "89:         UserIdMigrator migrator = createUserIdMigrator();",
      "90:         Map<String, File> userMappings = migrator.scanExistingUsers();",
      "91:         assertThat(userMappings.keySet(), hasSize(2));",
      "92:         assertThat(userMappings.keySet(), hasItems(\"admin\", \"jane\"));",
      "93:     }",
      "95:     @Test",
      "96:     public void scanExistingUsersLegacy() throws IOException {",
      "97:         UserIdMigrator migrator = createUserIdMigrator();",
      "98:         Map<String, File> userMappings = migrator.scanExistingUsers();",
      "99:         assertThat(userMappings.keySet(), hasSize(8));",
      "100:         assertThat(userMappings.keySet(), hasItems(\"foo/bar\", \"foo/bar/baz\", \"/\", \"..\", \"bla$phem.us\", \"make$1000000\", \"big$money\", \"~com1\"));",
      "101:     }",
      "103:     @Test",
      "104:     public void scanExistingUsersOldLegacy() throws IOException {",
      "105:         UserIdMigrator migrator = createUserIdMigrator();",
      "106:         Map<String, File> userMappings = migrator.scanExistingUsers();",
      "107:         assertThat(userMappings.keySet(), hasSize(4));",
      "108:         assertThat(userMappings.keySet(), hasItems(\"make\\u1000000\", \"\\u306f\\u56fd\\u5185\\u3067\\u6700\\u5927\", \"\\u1000yyy\", \"zzz\\u1000\"));",
      "109:     }",
      "111:     @Test",
      "112:     public void emptyUsernameConfigScanned() throws IOException {",
      "113:         UserIdMigrator migrator = createUserIdMigrator();",
      "114:         Map<String, File> userMappings = migrator.scanExistingUsers();",
      "115:         assertThat(userMappings.keySet(), hasSize(2));",
      "116:         assertThat(userMappings.keySet(), hasItems(\"admin\", \"\"));",
      "117:     }",
      "119:     @Test",
      "120:     public void scanExistingUsersCaseSensitive() throws IOException {",
      "121:         File usersDirectory = createTestDirectory(getClass(), name);",
      "122:         UserIdMigrator migrator = new UserIdMigrator(usersDirectory, new IdStrategy.CaseSensitive());",
      "123:         Map<String, File> userMappings = migrator.scanExistingUsers();",
      "124:         assertThat(userMappings.keySet(), hasSize(3));",
      "125:         assertThat(userMappings.keySet(), hasItems(\"admin\", \"Fred\", \"Jane\"));",
      "126:     }",
      "128:     @Test",
      "129:     public void migrateSimpleUser() throws IOException {",
      "130:         File usersDirectory = createTestDirectory(getClass(), name);",
      "131:         IdStrategy idStrategy = IdStrategy.CASE_INSENSITIVE;",
      "132:         UserIdMigrator migrator = new UserIdMigrator(usersDirectory, idStrategy);",
      "133:         TestUserIdMapper mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "134:         mapper.init();",
      "135:         assertThat(migrator.needsMigration(), is(false));",
      "136:         mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "137:         mapper.init();",
      "138:         assertThat(mapper.getConvertedUserIds().size(), is(1));",
      "139:         assertThat(mapper.isMapped(\"fred\"), is(true));",
      "140:     }",
      "142:     @Test",
      "143:     public void migrateMultipleUsers() throws IOException {",
      "144:         File usersDirectory = createTestDirectory(getClass(), name);",
      "145:         IdStrategy idStrategy = IdStrategy.CASE_INSENSITIVE;",
      "146:         UserIdMigrator migrator = new UserIdMigrator(usersDirectory, idStrategy);",
      "147:         TestUserIdMapper mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "148:         mapper.init();",
      "149:         assertThat(migrator.needsMigration(), is(false));",
      "150:         mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "151:         mapper.init();",
      "152:         assertThat(mapper.getConvertedUserIds().size(), is(3));",
      "153:         assertThat(mapper.isMapped(\"fred\"), is(true));",
      "154:         assertThat(mapper.isMapped(\"foo/bar\"), is(true));",
      "155:         assertThat(mapper.isMapped(\"zzz\\u1000\"), is(true));",
      "156:     }",
      "158:     @Test",
      "159:     public void migrateUsersXml() throws IOException {",
      "160:         File usersDirectory = createTestDirectory(getClass(), name);",
      "161:         IdStrategy idStrategy = IdStrategy.CASE_INSENSITIVE;",
      "162:         UserIdMigrator migrator = new UserIdMigrator(usersDirectory, idStrategy);",
      "163:         TestUserIdMapper mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "164:         mapper.init();",
      "165:         assertThat(migrator.needsMigration(), is(false));",
      "166:         mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "167:         mapper.init();",
      "168:         assertThat(mapper.getConvertedUserIds().size(), is(1));",
      "169:         assertThat(mapper.isMapped(\"users.xml\"), is(true));",
      "170:     }",
      "172:     @Test",
      "173:     public void migrateEntireDirectory() throws IOException {",
      "174:         File usersDirectory = createTestDirectory(getClass(), name);",
      "175:         IdStrategy idStrategy = IdStrategy.CASE_INSENSITIVE;",
      "176:         UserIdMigrator migrator = new UserIdMigrator(usersDirectory, idStrategy);",
      "177:         TestUserIdMapper mapper = new TestUserIdMapper(usersDirectory, idStrategy);",
      "178:         mapper.init();",
      "179:         File fredDirectory = mapper.getDirectory(\"fred\");",
      "180:         File otherFile = new File(fredDirectory, \"otherfile.txt\");",
      "181:         assertThat(otherFile.exists(), is(true));",
      "182:         File originalFredDirectory = new File(usersDirectory, \"fred\");",
      "183:         assertThat(originalFredDirectory.exists(), is(false));",
      "184:     }",
      "186:     static File createTestDirectory(Class clazz, TestName testName) throws IOException {",
      "187:         File tempDirectory = Files.createTempDirectory(Paths.get(\"target\"), \"userIdMigratorTest\").toFile();",
      "188:         tempDirectory.deleteOnExit();",
      "189:         copyTestDataIfExists(clazz, testName, tempDirectory);",
      "190:         return new File(tempDirectory, \"users\");",
      "191:     }",
      "193:     static void copyTestDataIfExists(Class clazz, TestName testName, File tempDirectory) throws IOException {",
      "194:         File resourcesDirectory = new File(BASE_RESOURCE_PATH + clazz.getSimpleName(), testName.getMethodName());",
      "195:         if (resourcesDirectory.exists()) {",
      "196:             FileUtils.copyDirectory(resourcesDirectory, tempDirectory);",
      "197:         }",
      "198:     }",
      "200:     private UserIdMigrator createUserIdMigrator() throws IOException {",
      "201:         File usersDirectory = createTestDirectory(getClass(), name);",
      "202:         return new UserIdMigrator(usersDirectory, IdStrategy.CASE_INSENSITIVE);",
      "203:     }",
      "205: }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/model/IdStrategyTest.java||core/src/test/java/jenkins/model/IdStrategyTest.java": [
      "File: core/src/test/java/jenkins/model/IdStrategyTest.java -> core/src/test/java/jenkins/model/IdStrategyTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import org.junit.Test;",
      "8: import static org.junit.Assert.assertThat;",
      "10: public class IdStrategyTest {",
      "13:     @Test",
      "14:     public void caseInsensitive() {",
      "33:     }",
      "35:     @Test",
      "36:     public void caseSensitive() {",
      "56:     }",
      "91:     }",
      "96:     }",
      "101:     }",
      "102: }",
      "",
      "[Removed Lines]",
      "5: import java.util.Locale;",
      "7: import static org.junit.Assert.assertEquals;",
      "11:     private IdStrategy idStrategy;",
      "15:         idStrategy = new IdStrategy.CaseInsensitive();",
      "16:         assertRestrictedNames();",
      "18:         assertRoundTrip(\"foo\", \"foo\");",
      "19:         assertRoundTrip(\"foo/bar\", \"foo$002fbar\");",
      "20:         assertRoundTrip(\"../test\", \"..$002ftest\");",
      "21:         assertRoundTrip(\"0123 _-@~a\", \"0123 _-@$007ea\");",
      "22:         assertRoundTrip(\"foo.\", \"foo$002e\");",
      "23:         assertRoundTrip(\"-foo\", \"$002dfoo\");",
      "26:         assertCaseInsensitiveRoundTrip(\"Foo\", \"foo\");",
      "27:         assertCaseInsensitiveRoundTrip(\"Foo/Bar\", \"foo$002fbar\");",
      "28:         assertCaseInsensitiveRoundTrip(\"../Test\", \"..$002ftest\");",
      "29:         assertCaseInsensitiveRoundTrip(\"NUL\", \"$006eul\");",
      "30:         assertEquals(\"foo\", idStrategy.idFromFilename(\"~foo\"));",
      "31:         assertEquals(\"0123 _-@a\", idStrategy.idFromFilename(\"0123 _-@~a\"));",
      "32:         assertEquals(\"big$money\", idStrategy.idFromFilename(\"big$money\"));",
      "37:         idStrategy = new IdStrategy.CaseSensitive();",
      "38:         assertRestrictedNames();",
      "40:         assertRoundTrip(\"foo\", \"foo\");",
      "41:         assertRoundTrip(\"Foo\", \"~foo\");",
      "42:         assertRoundTrip(\"foo/bar\", \"foo$002fbar\");",
      "43:         assertRoundTrip(\"Foo/Bar\", \"~foo$002f~bar\");",
      "44:         assertRoundTrip(\"../test\", \"..$002ftest\");",
      "45:         assertRoundTrip(\"../Test\", \"..$002f~test\");",
      "46:         assertRoundTrip(\"0123 _-@~a\", \"0123 _-@$007ea\");",
      "47:         assertRoundTrip(\"0123 _-@A\", \"0123 _-@~a\");",
      "48:         assertRoundTrip(\"foo.\", \"foo$002e\");",
      "49:         assertRoundTrip(\"-foo\", \"$002dfoo\");",
      "50:         assertRoundTrip(\"Con\", \"~con\");",
      "51:         assertRoundTrip(\"Prn\", \"~prn\");",
      "52:         assertRoundTrip(\"Aux\", \"~aux\");",
      "53:         assertRoundTrip(\"Nul\", \"~nul\");",
      "54:         assertRoundTrip(\"Com1\", \"~com1\");",
      "55:         assertRoundTrip(\"Lpt1\", \"~lpt1\");",
      "58:     private void assertRestrictedNames() {",
      "59:         assertEquals(\"$002f\", idStrategy.filenameOf(\".\"));",
      "61:         assertEquals(\"/\", idStrategy.idFromFilename(idStrategy.filenameOf(\".\")));",
      "63:         assertEquals(\"$002f\", idStrategy.filenameOf(\"\"));",
      "65:         assertEquals(\"/\", idStrategy.idFromFilename(idStrategy.filenameOf(\"\")));",
      "67:         assertRoundTrip(\"/\", \"$002f\");",
      "68:         assertRoundTrip(\"..\", \"$002e$002e\");",
      "69:         assertRoundTrip(\"con\", \"$0063on\");",
      "70:         assertRoundTrip(\"prn\", \"$0070rn\");",
      "71:         assertRoundTrip(\"aux\", \"$0061ux\");",
      "72:         assertRoundTrip(\"nul\", \"$006eul\");",
      "73:         assertRoundTrip(\"com1\", \"$0063om1\");",
      "74:         assertRoundTrip(\"com2\", \"$0063om2\");",
      "75:         assertRoundTrip(\"com3\", \"$0063om3\");",
      "76:         assertRoundTrip(\"com4\", \"$0063om4\");",
      "77:         assertRoundTrip(\"com5\", \"$0063om5\");",
      "78:         assertRoundTrip(\"com6\", \"$0063om6\");",
      "79:         assertRoundTrip(\"com7\", \"$0063om7\");",
      "80:         assertRoundTrip(\"com8\", \"$0063om8\");",
      "81:         assertRoundTrip(\"com9\", \"$0063om9\");",
      "82:         assertRoundTrip(\"lpt1\", \"$006cpt1\");",
      "83:         assertRoundTrip(\"lpt2\", \"$006cpt2\");",
      "84:         assertRoundTrip(\"lpt3\", \"$006cpt3\");",
      "85:         assertRoundTrip(\"lpt4\", \"$006cpt4\");",
      "86:         assertRoundTrip(\"lpt5\", \"$006cpt5\");",
      "87:         assertRoundTrip(\"lpt6\", \"$006cpt6\");",
      "88:         assertRoundTrip(\"lpt7\", \"$006cpt7\");",
      "89:         assertRoundTrip(\"lpt8\", \"$006cpt8\");",
      "90:         assertRoundTrip(\"lpt9\", \"$006cpt9\");",
      "93:     private void assertRoundTrip(String username, String filename) {",
      "94:         assertEquals(filename, idStrategy.filenameOf(username));",
      "95:         assertEquals(username, idStrategy.idFromFilename(filename));",
      "98:     private void assertCaseInsensitiveRoundTrip(String username, String filename) {",
      "99:         assertEquals(filename, idStrategy.filenameOf(username));",
      "100:         assertEquals(username.toLowerCase(Locale.ENGLISH), idStrategy.idFromFilename(filename));",
      "",
      "[Added Lines]",
      "5: import static org.hamcrest.core.Is.is;",
      "6: import static org.junit.Assert.assertFalse;",
      "8: import static org.junit.Assert.assertTrue;",
      "14:         IdStrategy idStrategy = new IdStrategy.CaseInsensitive();",
      "16:         assertRestrictedNames(idStrategy);",
      "18:         assertThat(idStrategy.idFromFilename(\"foo\"), is(\"foo\"));",
      "19:         assertThat(idStrategy.idFromFilename(\"foo$002fbar\"), is(\"foo/bar\"));",
      "20:         assertThat(idStrategy.idFromFilename(\"..$002ftest\"), is(\"../test\"));",
      "21:         assertThat(idStrategy.idFromFilename(\"0123 _-@$007ea\"), is(\"0123 _-@~a\"));",
      "22:         assertThat(idStrategy.idFromFilename(\"foo$002e\"), is(\"foo.\"));",
      "23:         assertThat(idStrategy.idFromFilename(\"$002dfoo\"), is(\"-foo\"));",
      "26:         assertThat(idStrategy.idFromFilename(\"Foo\"), is(\"foo\"));",
      "27:         assertThat(idStrategy.idFromFilename(\"Foo$002fBar\"), is(\"foo/bar\"));",
      "28:         assertThat(idStrategy.idFromFilename(\"..$002fTest\"), is(\"../test\"));",
      "29:         assertThat(idStrategy.idFromFilename(\"$006eul\"), is(\"nul\"));",
      "31:         assertThat(idStrategy.idFromFilename(\"~foo\"), is(\"~foo\"));",
      "32:         assertThat(idStrategy.idFromFilename(\"0123 _-@~a\"), is(\"0123 _-@~a\"));",
      "33:         assertThat(idStrategy.idFromFilename(\"big$money\"), is(\"big$money\"));",
      "35:         assertThat(idStrategy.idFromFilename(\"$00c1aaa\"), is(\"\\u00e1aaa\"));",
      "36:         assertThat(idStrategy.idFromFilename(\"$00e1aaa\"), is(\"\\u00e1aaa\"));",
      "37:         assertThat(idStrategy.idFromFilename(\"aaaa$00e1\"), is(\"aaaa\\u00e1\"));",
      "38:         assertThat(idStrategy.idFromFilename(\"aaaa$00e1kkkk\"), is(\"aaaa\\u00e1kkkk\"));",
      "39:         assertThat(idStrategy.idFromFilename(\"aa$00e1zz$00e9pp\"), is(\"aa\\u00e1zz\\u00e9pp\"));",
      "40:         assertThat(idStrategy.idFromFilename(\"$306f$56fd$5185$3067$6700$5927\"), is(\"\\u306f\\u56fd\\u5185\\u3067\\u6700\\u5927\"));",
      "42:         assertThat(idStrategy.idFromFilename(\"$00E1aaa\"), is(\"$00e1aaa\"));",
      "43:         assertThat(idStrategy.idFromFilename(\"$001gggg\"), is(\"$001gggg\"));",
      "44:         assertThat(idStrategy.idFromFilename(\"rrr$t123\"), is(\"rrr$t123\"));",
      "45:     }",
      "47:     @Test",
      "48:     public void caseInsensitivePassesThroughOldLegacy() {",
      "49:         IdStrategy idStrategy = new IdStrategy.CaseInsensitive();",
      "51:         assertThat(idStrategy.idFromFilename(\"make\\u1000000\"), is(\"make\\u1000000\"));",
      "52:         assertThat(idStrategy.idFromFilename(\"\\u306f\\u56fd\\u5185\\u3067\\u6700\\u5927\"), is(\"\\u306f\\u56fd\\u5185\\u3067\\u6700\\u5927\"));",
      "53:         assertThat(idStrategy.idFromFilename(\"~fred\"), is(\"~fred\"));",
      "54:         assertThat(idStrategy.idFromFilename(\"~1fred\"), is(\"~1fred\"));",
      "59:         IdStrategy idStrategy = new IdStrategy.CaseSensitive();",
      "61:         assertRestrictedNames(idStrategy);",
      "63:         assertThat(idStrategy.idFromFilename(\"foo\"), is(\"foo\"));",
      "64:         assertThat(idStrategy.idFromFilename(\"~foo\"), is(\"Foo\"));",
      "65:         assertThat(idStrategy.idFromFilename(\"foo$002fbar\"), is(\"foo/bar\"));",
      "66:         assertThat(idStrategy.idFromFilename(\"~foo$002f~bar\"), is(\"Foo/Bar\"));",
      "67:         assertThat(idStrategy.idFromFilename(\"..$002ftest\"), is(\"../test\"));",
      "68:         assertThat(idStrategy.idFromFilename(\"..$002f~test\"), is(\"../Test\"));",
      "69:         assertThat(idStrategy.idFromFilename(\"0123 _-@$007ea\"), is(\"0123 _-@~a\"));",
      "70:         assertThat(idStrategy.idFromFilename(\"0123 _-@~a\"), is(\"0123 _-@A\"));",
      "71:         assertThat(idStrategy.idFromFilename(\"foo$002e\"), is(\"foo.\"));",
      "72:         assertThat(idStrategy.idFromFilename(\"$002dfoo\"), is(\"-foo\"));",
      "73:         assertThat(idStrategy.idFromFilename(\"~con\"), is(\"Con\"));",
      "74:         assertThat(idStrategy.idFromFilename(\"~prn\"), is(\"Prn\"));",
      "75:         assertThat(idStrategy.idFromFilename(\"~aux\"), is(\"Aux\"));",
      "76:         assertThat(idStrategy.idFromFilename(\"~nul\"), is(\"Nul\"));",
      "77:         assertThat(idStrategy.idFromFilename(\"~com1\"), is(\"Com1\"));",
      "78:         assertThat(idStrategy.idFromFilename(\"~lpt1\"), is(\"Lpt1\"));",
      "79:         assertThat(idStrategy.idFromFilename(\"big$money\"), is(\"big$money\"));",
      "81:         assertThat(idStrategy.idFromFilename(\"$00c1aaa\"), is(\"\\u00c1aaa\"));",
      "82:         assertThat(idStrategy.idFromFilename(\"$00e1aaa\"), is(\"\\u00e1aaa\"));",
      "83:         assertThat(idStrategy.idFromFilename(\"aaaa$00e1\"), is(\"aaaa\\u00e1\"));",
      "84:         assertThat(idStrategy.idFromFilename(\"aaaa$00e1kkkk\"), is(\"aaaa\\u00e1kkkk\"));",
      "85:         assertThat(idStrategy.idFromFilename(\"aa$00e1zz$00e9pp\"), is(\"aa\\u00e1zz\\u00e9pp\"));",
      "86:         assertThat(idStrategy.idFromFilename(\"$306f$56fd$5185$3067$6700$5927\"), is(\"\\u306f\\u56fd\\u5185\\u3067\\u6700\\u5927\"));",
      "88:         assertThat(idStrategy.idFromFilename(\"$00E1aaa\"), is(\"$00E1aaa\"));",
      "89:         assertThat(idStrategy.idFromFilename(\"$001gggg\"), is(\"$001gggg\"));",
      "90:         assertThat(idStrategy.idFromFilename(\"rRr$t123\"), is(\"rRr$t123\"));",
      "92:         assertThat(idStrategy.idFromFilename(\"iiii _-@$007~ea\"), is(\"iiii _-@$007Ea\"));",
      "93:     }",
      "95:     @Test",
      "96:     public void caseSensitivePassesThroughOldLegacy() {",
      "97:         IdStrategy idStrategy = new IdStrategy.CaseSensitive();",
      "99:         assertThat(idStrategy.idFromFilename(\"make\\u1000000\"), is(\"make\\u1000000\"));",
      "100:         assertThat(idStrategy.idFromFilename(\"\\u306f\\u56fd\\u5185\\u3067\\u6700\\u5927\"), is(\"\\u306f\\u56fd\\u5185\\u3067\\u6700\\u5927\"));",
      "101:         assertThat(idStrategy.idFromFilename(\"~1fred\"), is(\"~1fred\"));",
      "102:     }",
      "104:     @Test",
      "105:     public void testEqualsCaseInsensitive() {",
      "106:         IdStrategy idStrategy = IdStrategy.CASE_INSENSITIVE;",
      "107:         assertTrue(idStrategy.equals(\"user1\", \"User1\"));",
      "108:         assertTrue(idStrategy.equals(\"User1\", \"user1\"));",
      "109:         assertFalse(idStrategy.equals(\"User1\", \"user2\"));",
      "110:         String sameUser = \"sameUser\";",
      "111:         assertTrue(idStrategy.equals(sameUser, sameUser));",
      "112:     }",
      "114:     @Test",
      "115:     public void testEqualsCaseSensitive() {",
      "116:         IdStrategy idStrategy = new IdStrategy.CaseSensitive();",
      "117:         assertFalse(idStrategy.equals(\"user1\", \"User1\"));",
      "118:         assertFalse(idStrategy.equals(\"User1\", \"user1\"));",
      "119:         assertFalse(idStrategy.equals(\"User1\", \"user2\"));",
      "120:         String sameUser = \"sameUser\";",
      "121:         assertTrue(idStrategy.equals(sameUser, sameUser));",
      "122:     }",
      "124:     @Test",
      "125:     public void testEqualsCaseSensitiveEmailAddress() {",
      "126:         IdStrategy idStrategy = new IdStrategy.CaseSensitiveEmailAddress();",
      "127:         assertFalse(idStrategy.equals(\"john.smith@acme.org\", \"John.Smith@acme.org\"));",
      "128:         assertFalse(idStrategy.equals(\"john.smith@acme.org\", \"John.Smith@ACME.org\"));",
      "129:         assertFalse(idStrategy.equals(\"john.smith@acme.org\", \"John.Smith@ACME.org\"));",
      "130:         assertFalse(idStrategy.equals(\"john.smith@acme.org\", \"John.Smith@acme.ORG\"));",
      "131:         assertFalse(idStrategy.equals(\"John@smith@acme.org\", \"john@Smith@acme.ORG\"));",
      "132:         String sameUser = \"john.smith@acme.org\";",
      "133:         assertTrue(idStrategy.equals(sameUser, sameUser));",
      "134:         assertTrue(idStrategy.equals(\"John.Smith@ACME.org\", \"John.Smith@acme.org\"));",
      "135:         assertTrue(idStrategy.equals(\"John.Smith@acme.ORG\", \"John.Smith@acme.org\"));",
      "136:         assertTrue(idStrategy.equals(\"john@smith@ACME.org\", \"john@smith@acme.org\"));",
      "137:     }",
      "139:     @Test",
      "140:     public void testKeyForCaseInsensitive() {",
      "141:         IdStrategy idStrategy = IdStrategy.CASE_INSENSITIVE;",
      "142:         assertThat(idStrategy.keyFor(\"user1\"), is(\"user1\"));",
      "143:         assertThat(idStrategy.keyFor(\"User1\"), is(\"user1\"));",
      "144:         assertThat(idStrategy.keyFor(\"USER1\"), is(\"user1\"));",
      "145:     }",
      "147:     @Test",
      "148:     public void testKeyForCaseSensitive() {",
      "149:         IdStrategy idStrategy = new IdStrategy.CaseSensitive();",
      "150:         assertThat(idStrategy.keyFor(\"user1\"), is(\"user1\"));",
      "151:         assertThat(idStrategy.keyFor(\"User1\"), is(\"User1\"));",
      "152:         assertThat(idStrategy.keyFor(\"USER1\"), is(\"USER1\"));",
      "155:     @Test",
      "156:     public void testKeyForCaseSensitiveEmailAddress() {",
      "157:         IdStrategy idStrategy = new IdStrategy.CaseSensitiveEmailAddress();",
      "158:         assertThat(idStrategy.keyFor(\"john.smith@acme.org\"), is(\"john.smith@acme.org\"));",
      "159:         assertThat(idStrategy.keyFor(\"John.Smith@acme.org\"), is(\"John.Smith@acme.org\"));",
      "160:         assertThat(idStrategy.keyFor(\"John.Smith@ACME.org\"), is(\"John.Smith@acme.org\"));",
      "161:         assertThat(idStrategy.keyFor(\"John.Smith@acme.ORG\"), is(\"John.Smith@acme.org\"));",
      "162:         assertThat(idStrategy.keyFor(\"john.smith\"), is(\"john.smith\"));",
      "163:         assertThat(idStrategy.keyFor(\"John.Smith\"), is(\"John.Smith\"));",
      "164:         assertThat(idStrategy.keyFor(\"john@smith@acme.org\"), is(\"john@smith@acme.org\"));",
      "165:         assertThat(idStrategy.keyFor(\"John@Smith@acme.org\"), is(\"John@Smith@acme.org\"));",
      "168:     @Test",
      "169:     public void testCompareCaseInsensitive() {",
      "170:         IdStrategy idStrategy = IdStrategy.CASE_INSENSITIVE;",
      "171:         assertTrue(idStrategy.compare(\"user1\", \"user2\") < 0);",
      "172:         assertTrue(idStrategy.compare(\"user2\", \"user1\") > 0);",
      "173:         assertTrue(idStrategy.compare(\"user1\", \"user1\") == 0);",
      "174:         assertTrue(idStrategy.compare(\"USER1\", \"user2\") < 0);",
      "175:         assertTrue(idStrategy.compare(\"USER2\", \"user1\") > 0);",
      "176:         assertTrue(idStrategy.compare(\"User1\", \"user1\") == 0);",
      "179:     @Test",
      "180:     public void testCompareCaseSensitive() {",
      "181:         IdStrategy idStrategy = new IdStrategy.CaseSensitive();",
      "182:         assertTrue(idStrategy.compare(\"user1\", \"user2\") < 0);",
      "183:         assertTrue(idStrategy.compare(\"user2\", \"user1\") > 0);",
      "184:         assertTrue(idStrategy.compare(\"user1\", \"user1\") == 0);",
      "185:         assertTrue(idStrategy.compare(\"USER1\", \"user2\") < 0);",
      "186:         assertTrue(idStrategy.compare(\"USER2\", \"user1\") < 0);",
      "187:         assertTrue(idStrategy.compare(\"User1\", \"user1\") < 0);",
      "190:     @Test",
      "191:     public void testCompareCaseSensitiveEmail() {",
      "192:         IdStrategy idStrategy = new IdStrategy.CaseSensitiveEmailAddress();",
      "193:         assertTrue(idStrategy.compare(\"john.smith@acme.org\", \"john.smith@acme.org\") == 0);",
      "194:         assertTrue(idStrategy.compare(\"John.Smith@acme.org\", \"John.Smith@acme.org\") == 0);",
      "195:         assertTrue(idStrategy.compare(\"John.Smith@ACME.org\", \"John.Smith@acme.org\") == 0);",
      "196:         assertTrue(idStrategy.compare(\"John.Smith@acme.ORG\", \"John.Smith@acme.org\") == 0);",
      "197:         assertTrue(idStrategy.compare(\"john.smith\", \"john.smith\") == 0);",
      "198:         assertTrue(idStrategy.compare(\"John.Smith\", \"John.Smith\") == 0);",
      "199:         assertTrue(idStrategy.compare(\"john@smith@acme.org\", \"john@smith@acme.org\") == 0);",
      "200:         assertTrue(idStrategy.compare(\"John@Smith@acme.org\", \"John@Smith@acme.org\") == 0);",
      "202:         assertTrue(idStrategy.compare(\"John.Smith@acme.org\", \"john.smith@acme.org\") < 0);",
      "203:         assertTrue(idStrategy.compare(\"john.smith@acme.org\", \"John.Smith@acme.org\") > 0);",
      "204:     }",
      "206:     private void assertRestrictedNames(IdStrategy idStrategy) {",
      "207:         assertThat(idStrategy.idFromFilename(\"$002f\"), is(\"/\"));",
      "209:         assertThat(idStrategy.idFromFilename(\"$002e$002e\"), is(\"..\"));",
      "210:         assertThat(idStrategy.idFromFilename(\"$0063on\"), is(\"con\"));",
      "211:         assertThat(idStrategy.idFromFilename(\"$0070rn\"), is(\"prn\"));",
      "212:         assertThat(idStrategy.idFromFilename(\"$0061ux\"), is(\"aux\"));",
      "213:         assertThat(idStrategy.idFromFilename(\"$006eul\"), is(\"nul\"));",
      "214:         assertThat(idStrategy.idFromFilename(\"$0063om1\"), is(\"com1\"));",
      "215:         assertThat(idStrategy.idFromFilename(\"$0063om2\"), is(\"com2\"));",
      "216:         assertThat(idStrategy.idFromFilename(\"$0063om3\"), is(\"com3\"));",
      "217:         assertThat(idStrategy.idFromFilename(\"$0063om4\"), is(\"com4\"));",
      "218:         assertThat(idStrategy.idFromFilename(\"$0063om5\"), is(\"com5\"));",
      "219:         assertThat(idStrategy.idFromFilename(\"$0063om6\"), is(\"com6\"));",
      "220:         assertThat(idStrategy.idFromFilename(\"$0063om7\"), is(\"com7\"));",
      "221:         assertThat(idStrategy.idFromFilename(\"$0063om8\"), is(\"com8\"));",
      "222:         assertThat(idStrategy.idFromFilename(\"$0063om9\"), is(\"com9\"));",
      "223:         assertThat(idStrategy.idFromFilename(\"$006cpt1\"), is(\"lpt1\"));",
      "224:         assertThat(idStrategy.idFromFilename(\"$006cpt2\"), is(\"lpt2\"));",
      "225:         assertThat(idStrategy.idFromFilename(\"$006cpt3\"), is(\"lpt3\"));",
      "226:         assertThat(idStrategy.idFromFilename(\"$006cpt4\"), is(\"lpt4\"));",
      "227:         assertThat(idStrategy.idFromFilename(\"$006cpt5\"), is(\"lpt5\"));",
      "228:         assertThat(idStrategy.idFromFilename(\"$006cpt6\"), is(\"lpt6\"));",
      "229:         assertThat(idStrategy.idFromFilename(\"$006cpt7\"), is(\"lpt7\"));",
      "230:         assertThat(idStrategy.idFromFilename(\"$006cpt8\"), is(\"lpt8\"));",
      "231:         assertThat(idStrategy.idFromFilename(\"$006cpt9\"), is(\"lpt9\"));",
      "232:     }",
      "",
      "---------------"
    ],
    "\"core/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\"||\"core/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\"": [
      "File: \"core/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\" -> \"core/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\"",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/make\\341\\200\\200000/config.xml\"||\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/make\\341\\200\\200000/config.xml\"": [
      "File: \"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/make\\341\\200\\200000/config.xml\" -> \"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/make\\341\\200\\200000/config.xml\"",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/zzz\\341\\200\\200/config.xml\"||\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/zzz\\341\\200\\200/config.xml\"": [
      "File: \"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/zzz\\341\\200\\200/config.xml\" -> \"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/zzz\\341\\200\\200/config.xml\"",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\341\\200\\200yyy/config.xml\"||\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\341\\200\\200yyy/config.xml\"": [
      "File: \"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\341\\200\\200yyy/config.xml\" -> \"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\341\\200\\200yyy/config.xml\"",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\343\\201\\257\\345\\233\\275\\345\\206\\205\\343\\201\\247\\346\\234\\200\\345\\244\\247/config.xml\"||\"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\343\\201\\257\\345\\233\\275\\345\\206\\205\\343\\201\\247\\346\\234\\200\\345\\244\\247/config.xml\"": [
      "File: \"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\343\\201\\257\\345\\233\\275\\345\\206\\205\\343\\201\\247\\346\\234\\200\\345\\244\\247/config.xml\" -> \"core/src/test/resources/hudson/model/UserIdMigratorTest/scanExistingUsersOldLegacy/users/\\343\\201\\257\\345\\233\\275\\345\\206\\205\\343\\201\\247\\346\\234\\200\\345\\244\\247/config.xml\"",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/cli/ReloadConfigurationCommandTest.java||test/src/test/java/hudson/cli/ReloadConfigurationCommandTest.java": [
      "File: test/src/test/java/hudson/cli/ReloadConfigurationCommandTest.java -> test/src/test/java/hudson/cli/ReloadConfigurationCommandTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "108:     @Test",
      "109:     public void reloadUserConfig() throws Exception {",
      "110:         {",
      "111:         User user = User.get(\"some_user\", true, null);",
      "113:         user.save();",
      "118:         }",
      "119:         reloadJenkinsConfigurationViaCliAndWait();",
      "120:         {",
      "121:         User user = User.getById(\"some_user\", false);",
      "123:         }",
      "124:     }",
      "",
      "[Removed Lines]",
      "112:         user.setFullName(\"oldName\");",
      "115:         replace(\"users/some_user/config.xml\", \"oldName\", \"newName\");",
      "117:         assertThat(user.getFullName(), equalTo(\"oldName\"));",
      "122:         assertThat(user.getFullName(), equalTo(\"newName\"));",
      "",
      "[Added Lines]",
      "110:         String originalName = \"oldName\";",
      "111:         String temporaryName = \"newName\";",
      "114:         user.setFullName(originalName);",
      "116:         assertThat(user.getFullName(), equalTo(originalName));",
      "118:         user.setFullName(temporaryName);",
      "119:         assertThat(user.getFullName(), equalTo(temporaryName));",
      "124:         assertThat(user.getFullName(), equalTo(originalName));",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/UserIdMigratorTest.java||test/src/test/java/hudson/model/UserIdMigratorTest.java": [
      "File: test/src/test/java/hudson/model/UserIdMigratorTest.java -> test/src/test/java/hudson/model/UserIdMigratorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.model;",
      "26: import org.junit.Rule;",
      "27: import org.junit.Test;",
      "28: import org.jvnet.hudson.reactor.ReactorException;",
      "29: import org.jvnet.hudson.test.JenkinsRule;",
      "30: import org.jvnet.hudson.test.recipes.LocalData;",
      "32: import java.io.IOException;",
      "34: import static org.hamcrest.CoreMatchers.is;",
      "35: import static org.junit.Assert.assertThat;",
      "37: public class UserIdMigratorTest {",
      "39:     @Rule public JenkinsRule j = new JenkinsRule();",
      "41:     @Test",
      "42:     @LocalData",
      "43:     public void migrateSimpleUser() throws InterruptedException, ReactorException, IOException {",
      "44:         String userId = \"fred\";",
      "45:         User fred = User.getById(userId, false);",
      "46:         assertThat(fred.getFullName(), is(\"Fred Smith\"));",
      "47:     }",
      "49:     @Test",
      "50:     @LocalData",
      "51:     public void migrateMultipleUsers() throws InterruptedException, ReactorException, IOException {",
      "52:         assertThat(User.getAll().size(), is(3));",
      "53:         User fred = User.getById(\"fred\", false);",
      "54:         assertThat(fred.getFullName(), is(\"Fred Smith\"));",
      "55:         User legacyUser = User.getById(\"foo/bar\", false);",
      "56:         assertThat(legacyUser.getFullName(), is(\"Foo Bar\"));",
      "57:         User oldLegacyUser = User.getById(\"zzz\\u1000\", false);",
      "58:         assertThat(oldLegacyUser.getFullName(), is(\"Old Legacy\"));",
      "59:     }",
      "61: }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/UserPropertyTest.java||test/src/test/java/hudson/model/UserPropertyTest.java": [
      "File: test/src/test/java/hudson/model/UserPropertyTest.java -> test/src/test/java/hudson/model/UserPropertyTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.util.Collections;",
      "20: import java.util.List;",
      "24: import static java.lang.System.currentTimeMillis;",
      "25: import static java.util.Collections.emptyMap;",
      "26: import static org.apache.commons.io.FileUtils.writeStringToFile;",
      "",
      "[Removed Lines]",
      "22: import static hudson.model.User.idStrategy;",
      "23: import static hudson.model.UserPropertyTest.InnerUserClass.TEST_FILE;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         User user = User.get(\"nestedUserReference\", false, emptyMap());",
      "81:         assertThat(\"nested reference should be updated after jenkins start\", user, nestedUserSet());",
      "84:         List<String> fileLines = FileUtils.readLines(testFile);",
      "85:         assertThat(fileLines, hasSize(1));",
      "",
      "[Removed Lines]",
      "83:         File testFile = new File(j.getInstance().getRootDir() + \"/users/nesteduserreference/\" + TEST_FILE);",
      "",
      "[Added Lines]",
      "81:         SetUserUserProperty property = user.getProperty(SetUserUserProperty.class);",
      "82:         File testFile = property.getInnerUserClass().userFile;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "89:         user = User.get(\"nestedUserReference\", false, Collections.emptyMap());",
      "90:         assertThat(\"nested reference should exist after user configuration change\", user, nestedUserSet());",
      "93:         fileLines = FileUtils.readLines(testFile);",
      "94:         assertThat(fileLines, hasSize(1));",
      "95:     }",
      "",
      "[Removed Lines]",
      "92:         testFile = new File(j.getInstance().getRootDir() + \"/users/nesteduserreference/\" + TEST_FILE);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "169:     public static class InnerUserClass extends AbstractDescribableImpl<InnerUserClass> {",
      "171:         private transient User user;",
      "173:         @DataBoundConstructor",
      "174:         public InnerUserClass() {",
      "175:         }",
      "",
      "[Removed Lines]",
      "170:         public static final String TEST_FILE = \"test.txt\";",
      "",
      "[Added Lines]",
      "170:         private transient File userFile;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "184:         public void setUser(User user) {",
      "185:             this.user = user;",
      "186:             try {",
      "188:             } catch (IOException e) {",
      "189:                 Throwables.propagate(e);",
      "190:             }",
      "191:         }",
      "193:         private File getUserFile() throws IOException {",
      "197:             if (!userFile.exists()) {",
      "198:                 userFile.createNewFile();",
      "199:             }",
      "",
      "[Removed Lines]",
      "187:                 writeStringToFile(getUserFile(), String.valueOf(currentTimeMillis()), true);",
      "194:             final File usersRootDir = new File(Jenkins.getInstance().getRootDir(), \"users\");",
      "195:             final File userDir = new File(usersRootDir, idStrategy().filenameOf(user.getId()));",
      "196:             final File userFile = new File(userDir, TEST_FILE);",
      "",
      "[Added Lines]",
      "186:                 File userFile = getUserFile();",
      "187:                 writeStringToFile(userFile, String.valueOf(currentTimeMillis()), true);",
      "194:             userFile =  File.createTempFile(\"user\", \".txt\");",
      "195:             userFile.deleteOnExit();",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java": [
      "File: test/src/test/java/hudson/model/UserTest.java -> test/src/test/java/hudson/model/UserTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: import hudson.tasks.MailAddressResolver;",
      "45: import java.io.File;",
      "46: import java.io.IOException;",
      "48: import java.net.URL;",
      "49: import java.util.ArrayList;",
      "51: import java.util.Collections;",
      "52: import java.util.List;",
      "53: import java.util.Locale;",
      "",
      "[Removed Lines]",
      "47: import java.io.PrintStream;",
      "50: import java.util.Arrays;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "68: import static org.hamcrest.Matchers.*;",
      "69: import static org.junit.Assert.*;",
      "72: import org.junit.Rule;",
      "73: import org.junit.Test;",
      "",
      "[Removed Lines]",
      "70: import static org.junit.Assume.*;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "196:         User user = User.get(\"john smith\");",
      "197:         User user2 = User.get(\"John Smith\");",
      "198:         assertSame(\"Users should have the same id.\", user.getId(), user2.getId());",
      "201:     }",
      "203:     @Test",
      "204:     public void caseSensitivity() {",
      "205:         j.jenkins.setSecurityRealm(new IdStrategySpecifyingSecurityRealm(new IdStrategy.CaseSensitive()));",
      "",
      "[Removed Lines]",
      "199:         assertEquals(user.getId(), User.idStrategy().idFromFilename(User.idStrategy().filenameOf(user.getId())));",
      "200:         assertEquals(user2.getId(), User.idStrategy().idFromFilename(User.idStrategy().filenameOf(user2.getId())));",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "207:         User user2 = User.get(\"John Smith\");",
      "208:         assertNotSame(\"Users should not have the same id.\", user.getId(), user2.getId());",
      "209:         assertEquals(\"john smith\", User.idStrategy().keyFor(user.getId()));",
      "211:         assertEquals(\"John Smith\", User.idStrategy().keyFor(user2.getId()));",
      "215:     }",
      "217:     @Test",
      "",
      "[Removed Lines]",
      "210:         assertEquals(\"john smith\", User.idStrategy().filenameOf(user.getId()));",
      "212:         assertEquals(\"~john ~smith\", User.idStrategy().filenameOf(user2.getId()));",
      "213:         assertEquals(user.getId(), User.idStrategy().idFromFilename(User.idStrategy().filenameOf(user.getId())));",
      "214:         assertEquals(user2.getId(), User.idStrategy().idFromFilename(User.idStrategy().filenameOf(user2.getId())));",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "221:         User user2 = User.get(\"John.Smith@acme.org\");",
      "222:         assertNotSame(\"Users should not have the same id.\", user.getId(), user2.getId());",
      "223:         assertEquals(\"john.smith@acme.org\", User.idStrategy().keyFor(user.getId()));",
      "225:         assertEquals(\"John.Smith@acme.org\", User.idStrategy().keyFor(user2.getId()));",
      "227:         user2 = User.get(\"john.smith@ACME.ORG\");",
      "228:         assertEquals(\"Users should have the same id.\", user.getId(), user2.getId());",
      "229:         assertEquals(\"john.smith@acme.org\", User.idStrategy().keyFor(user2.getId()));",
      "233:     }",
      "235:     private static class IdStrategySpecifyingSecurityRealm extends HudsonPrivateSecurityRealm {",
      "",
      "[Removed Lines]",
      "224:         assertEquals(\"john.smith@acme.org\", User.idStrategy().filenameOf(user.getId()));",
      "226:         assertEquals(\"~john.~smith@acme.org\", User.idStrategy().filenameOf(user2.getId()));",
      "230:         assertEquals(\"john.smith@acme.org\", User.idStrategy().filenameOf(user2.getId()));",
      "231:         assertEquals(user.getId(), User.idStrategy().idFromFilename(User.idStrategy().filenameOf(user.getId())));",
      "232:         assertEquals(user2.getId(), User.idStrategy().idFromFilename(User.idStrategy().filenameOf(user2.getId())));",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "244:         }",
      "245:     }",
      "258:     @Test",
      "259:     public void testAddAndGetProperty() throws Exception {",
      "260:         {",
      "262:         UserProperty prop = new SomeUserProperty();",
      "263:         user.addProperty(prop);",
      "264:         assertNotNull(\"User should have SomeUserProperty property.\", user.getProperty(SomeUserProperty.class));",
      "",
      "[Removed Lines]",
      "247:     @Issue(\"JENKINS-24317\")",
      "248:     @LocalData",
      "249:     @Test public void migration() throws Exception {",
      "250:         assumeFalse(\"was not a problem on a case-insensitive FS to begin with\", new File(j.jenkins.getRootDir(), \"users/bob\").isDirectory());",
      "251:         User bob = User.get(\"bob\");",
      "252:         assertEquals(\"Bob Smith\", bob.getFullName());",
      "253:         assertEquals(\"Bob Smith\", User.get(\"Bob\").getFullName());",
      "254:         assertEquals(\"nonexistent\", User.get(\"nonexistent\").getFullName());",
      "255:         assertEquals(\"[bob]\", Arrays.toString(new File(j.jenkins.getRootDir(), \"users\").list()));",
      "256:     }",
      "261:         User user = User.get(\"John Smith\");",
      "",
      "[Added Lines]",
      "236:         User user = User.get(\"John Smith\");",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "274:     @Test",
      "275:     public void testImpersonateAndCurrent() {",
      "276:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
      "278:         assertNotSame(\"User John Smith should not be the current user.\", User.current().getId(), user.getId());",
      "280:         assertEquals(\"User John Smith should be the current user.\", user.getId(), User.current().getId());",
      "281:     }",
      "283:     @Test",
      "284:     public void testGetUnknown() {",
      "286:         assertNotNull(\"User should not be null.\", user);",
      "287:     }",
      "",
      "[Removed Lines]",
      "277:         User user = User.get(\"John Smith\");",
      "279:         SecurityContextHolder.getContext().setAuthentication(user.impersonate());",
      "285:         User user = User.get(\"John Smith\");",
      "",
      "[Added Lines]",
      "252:         User user = User.get(\"John Smith\");",
      "254:         SecurityContextHolder.getContext().setAuthentication(user.impersonate());",
      "260:         User user = User.get(\"John Smith\");",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "298:         assertNotNull(\"User John Smith should be created.\", user);",
      "299:         assertTrue(\"Jenkins should contain user John Smith.\", User.getAll().contains(user));",
      "300:     }",
      "302:     @Test",
      "303:     public void testReload() throws Exception {",
      "306:         user.save();",
      "312:         j.jenkins.reload();",
      "317:     }",
      "319:     @Test",
      "",
      "[Removed Lines]",
      "304:         {",
      "305:         User user = User.get(\"John Smith\", true, Collections.emptyMap());",
      "307:         String config = user.getConfigFile().asString();",
      "308:         config = config.replace(\"John Smith\", \"Alice Smith\");",
      "309:         PrintStream st = new PrintStream(user.getConfigFile().getFile());",
      "310:         st.print(config);",
      "311:         }",
      "313:         {",
      "314:         User user = User.get(\"John Smith\", false, Collections.emptyMap());",
      "315:         assertEquals(\"User should have full name Alice Smith.\", \"Alice Smith\", user.getFullName());",
      "316:         }",
      "",
      "[Added Lines]",
      "279:         String originalName = \"John Smith\";",
      "280:         User user = User.get(originalName, true, Collections.emptyMap());",
      "282:         String temporaryName = \"Alice Smith\";",
      "283:         user.setFullName(temporaryName);",
      "287:         user = User.get(originalName, false, Collections.emptyMap());",
      "288:         assertEquals(\"User should have original name.\", originalName, user.getFullName());",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "383:         {",
      "384:          User user = User.get(\"John Smith\", true, Collections.emptyMap());",
      "385:          user.save();",
      "386:          user.delete();",
      "388:          assertFalse(\"User should be deleted from memory.\", User.getAll().contains(user));",
      "389:          user = User.get(\"John Smith\", false, Collections.emptyMap());",
      "390:          assertNull(\"User should be deleted from memory.\", user);",
      "",
      "[Removed Lines]",
      "387:          assertFalse(\"User should be deleted with his persistent data.\", user.getConfigFile().exists());",
      "",
      "[Added Lines]",
      "358:          File configFolder = user.getUserFolder();",
      "360:          assertFalse(\"User should be deleted with his persistent data.\", configFolder.exists());",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "405:     @Test",
      "406:     public void testDoConfigSubmit() throws Exception {",
      "408:         j.jenkins.setAuthorizationStrategy(auth);",
      "409:         j.jenkins.setCrumbIssuer(null);",
      "410:         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);",
      "",
      "[Removed Lines]",
      "407:         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();",
      "",
      "[Added Lines]",
      "380:         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "441:     @Test",
      "442:     public void testDoDoDelete() throws Exception {",
      "444:         j.jenkins.setAuthorizationStrategy(auth);",
      "445:         j.jenkins.setCrumbIssuer(null);",
      "446:         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);",
      "",
      "[Removed Lines]",
      "443:         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();",
      "",
      "[Added Lines]",
      "416:         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "487:     @Test",
      "488:     public void testHasPermission() throws IOException {",
      "490:         j.jenkins.setAuthorizationStrategy(auth);",
      "491:         j.jenkins.setCrumbIssuer(null);",
      "492:         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);",
      "",
      "[Removed Lines]",
      "489:         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();",
      "",
      "[Added Lines]",
      "462:         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "506:     @Test",
      "507:     public void testCanDelete() throws IOException {",
      "509:         j.jenkins.setAuthorizationStrategy(auth);",
      "510:         j.jenkins.setCrumbIssuer(null);",
      "511:         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);",
      "",
      "[Removed Lines]",
      "508:         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();",
      "",
      "[Added Lines]",
      "481:         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "729:     }",
      "731:     @Test",
      "742:     }",
      "744:     @Test",
      "746:     @LocalData",
      "794:     }",
      "796:     @Test",
      "814:     }",
      "841:         @TestExtension",
      "842:         public static class DescriptorImpl extends UserPropertyDescriptor {",
      "843:             @Override",
      "",
      "[Removed Lines]",
      "732:     @Issue(\"SECURITY-499\")",
      "733:     public void createdUsersHaveCorrectConfigLocation() {",
      "734:         assertCorrectConfig(User.getById(\"admin\", true), \"users/admin/config.xml\");",
      "735:         assertCorrectConfig(User.getById(\"foo\", true), \"users/foo/config.xml\");",
      "736:         assertCorrectConfig(User.getById(\"foo/bar\", true), \"users/foo$002fbar/config.xml\");",
      "737:         assertCorrectConfig(User.getById(\"foo/bar/baz\", true), \"users/foo$002fbar$002fbaz/config.xml\");",
      "738:         assertCorrectConfig(User.getById(\"/\", true), \"users/$002f/config.xml\");",
      "739:         assertCorrectConfig(User.getById(\".\", true), \"users/$002f/config.xml\");",
      "740:         assertCorrectConfig(User.getById(\"..\", true), \"users/$002e$002e/config.xml\");",
      "741:         assertCorrectConfig(User.getById(\"../config.xml\", true), \"users/..$002fconfig.xml/config.xml\");",
      "745:     @Issue(\"SECURITY-499\")",
      "747:     public void legacyUserConfigDirsMigrated() {",
      "748:         File rootDir = new File(Jenkins.getInstance().getRootDir(), \"users\");",
      "750:         User admin = User.getById(\"admin\", false);",
      "751:         assertCorrectConfig(admin, \"users/admin/config.xml\");",
      "752:         assertTrue(admin.getConfigFile().getFile().exists());",
      "753:         assertThat(admin.getFullName(), equalTo(\"Admin\"));",
      "755:         User foo = User.getById(\"foo\", false);",
      "756:         File fooDir = new File(rootDir, \"foo\");",
      "757:         assertCorrectConfig(foo, \"users/foo/config.xml\");",
      "758:         assertTrue(foo.getConfigFile().getFile().exists());",
      "759:         assertTrue(fooDir.exists());",
      "760:         assertThat(foo.getFullName(), equalTo(\"Foo\"));",
      "762:         User fooBar = User.getById(\"foo/bar\", false);",
      "763:         File fooBarDir = new File(fooDir, \"bar\");",
      "764:         assertCorrectConfig(fooBar, \"users/foo$002fbar/config.xml\");",
      "765:         assertTrue(fooBar.getConfigFile().getFile().exists());",
      "766:         assertTrue(fooDir.exists());",
      "767:         assertTrue(fooBarDir.exists());",
      "768:         assertThat(fooBar.getFullName(), equalTo(\"Foo Bar\"));",
      "770:         User fooBaz = User.getById(\"foo/baz\", false);",
      "771:         File fooBazDir = new File(fooDir, \"baz\");",
      "772:         assertCorrectConfig(fooBaz, \"users/foo$002fbaz/config.xml\");",
      "773:         assertTrue(fooBaz.getConfigFile().getFile().exists());",
      "774:         assertTrue(fooDir.exists());",
      "775:         assertFalse(fooBazDir.exists());",
      "776:         assertThat(fooBaz.getFullName(), equalTo(\"Foo Baz\"));",
      "778:         User fooBarBaz = User.getById(\"foo/bar/baz\", false);",
      "779:         File fooBarBazDir = new File(fooBarDir, \"baz\");",
      "780:         assertCorrectConfig(fooBarBaz, \"users/foo$002fbar$002fbaz/config.xml\");",
      "781:         assertTrue(fooBarBaz.getConfigFile().getFile().exists());",
      "782:         assertTrue(fooDir.exists());",
      "783:         assertFalse(fooBarBazDir.exists());",
      "784:         assertFalse(fooBarDir.exists());",
      "785:         assertThat(fooBarBaz.getFullName(), equalTo(\"Foo Bar Baz\"));",
      "787:         User slash = User.getById(\"/\", false);",
      "788:         File slashDir = new File(rootDir, \"$002f\");",
      "789:         assertCorrectConfig(slash, \"users/$002f/config.xml\");",
      "790:         assertTrue(slash.getConfigFile().getFile().exists());",
      "791:         assertTrue(slashDir.exists());",
      "792:         assertFalse(new File(rootDir, \"config.xml\").exists());",
      "793:         assertThat(slash.getFullName(), equalTo(\"Slash\"));",
      "797:     @Issue(\"SECURITY-499\")",
      "798:     @LocalData",
      "799:     public void emptyUsernameConfigMigrated() {",
      "800:         File rootDir = new File(Jenkins.getInstance().getRootDir(), \"users\");",
      "802:         User admin = User.getById(\"admin\", false);",
      "803:         assertCorrectConfig(admin, \"users/admin/config.xml\");",
      "804:         assertTrue(admin.getConfigFile().getFile().exists());",
      "805:         assertThat(admin.getFullName(), equalTo(\"Admin\"));",
      "807:         User empty = User.getById(\"\", false);",
      "808:         File emptyDir = new File(rootDir, \"$002f\");",
      "809:         assertCorrectConfig(empty, \"users/$002f/config.xml\");",
      "810:         assertTrue(empty.getConfigFile().getFile().exists());",
      "811:         assertTrue(emptyDir.exists());",
      "812:         assertFalse(new File(rootDir, \"config.xml\").exists());",
      "813:         assertThat(empty.getFullName(), equalTo(\"Empty\"));",
      "816:     @Issue(\"JENKINS-47909\")",
      "817:     @LocalData",
      "818:     @Test",
      "819:     public void shellyUsernameMigrated() {",
      "820:         File rootDir = new File(Jenkins.getInstance().getRootDir(), \"users\");",
      "821:         User user = User.getById(\"bla$phem.us\", false);",
      "822:         assertCorrectConfig(user, \"users/bla$0024phem.us/config.xml\");",
      "823:         assertFalse(new File(rootDir, \"bla$phem.us\").exists());",
      "824:         assertTrue(user.getConfigFile().getFile().exists());",
      "825:         assertThat(user.getFullName(), equalTo(\"Weird Username\"));",
      "826:         user = User.getById(\"make\\u1000000\", false);",
      "827:         assertNotNull(\"we do not prevent accesses to the phony name, alas\", user);",
      "828:         user = User.getById(\"make$1000000\", false);",
      "829:         assertCorrectConfig(user, \"users/make$00241000000/config.xml\");",
      "830:         assertFalse(new File(rootDir, \"make$1000000\").exists());",
      "831:         assertTrue(\"but asking for the real name triggers migration\", user.getConfigFile().getFile().exists());",
      "832:         assertThat(user.getFullName(), equalTo(\"Greedy Fella\"));",
      "833:     }",
      "835:     private static void assertCorrectConfig(User user, String unixPath) {",
      "836:         assertThat(user.getConfigFile().getFile().getPath(), endsWith(unixPath.replace('/', File.separatorChar)));",
      "837:     }",
      "839:      public static class SomeUserProperty extends UserProperty {",
      "",
      "[Added Lines]",
      "706:     @LocalData",
      "707:     public void differentUserIdInConfigFileIsIgnored() {",
      "708:         String fredUserId = \"fred\";",
      "709:         User fred = User.getById(fredUserId, false);",
      "710:         assertThat(fred, notNullValue());",
      "711:         assertThat(fred.getId(), is(fredUserId));",
      "712:         assertThat(fred.getFullName(), is(\"Fred Smith\"));",
      "713:         User jane = User.getById(\"jane\", false);",
      "714:         assertThat(jane, nullValue());",
      "719:     public void corruptConfigFile() {",
      "720:         String fredUserId = \"fred\";",
      "721:         User fred = User.getById(fredUserId, true);",
      "722:         assertThat(fred, notNullValue());",
      "723:         assertThat(fred.getFullName(), is(\"fred\"));",
      "727:     public void parentDirectoryUserDoesNotExist() {",
      "728:         String userId = \"admin\";",
      "729:         User admin = User.getById(userId, true);",
      "730:         assertNotNull(admin);",
      "731:         assertThat(admin.getId(), is(userId));",
      "732:         User parentDirectoryUserId = User.getById(\"../\" + admin, false);",
      "733:         assertThat(parentDirectoryUserId, nullValue());",
      "736:     public static class SomeUserProperty extends UserProperty {",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java||test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java": [
      "File: test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java -> test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: import jenkins.security.SecurityListener;",
      "55: import org.apache.commons.lang.StringUtils;",
      "58: import java.lang.reflect.Field;",
      "61: import org.junit.Before;",
      "62: import org.junit.Rule;",
      "63: import org.junit.Test;",
      "",
      "[Removed Lines]",
      "57: import java.io.UnsupportedEncodingException;",
      "60: import hudson.security.pages.SignupPage;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66: import org.jvnet.hudson.test.JenkinsRule.WebClient;",
      "67: import org.jvnet.hudson.test.TestExtension;",
      "68: import org.jvnet.hudson.test.WithoutJenkins;",
      "71: import javax.annotation.Nonnull;",
      "",
      "[Removed Lines]",
      "69: import org.jvnet.hudson.test.recipes.LocalData;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "89:         field.set(null, null);",
      "90:     }",
      "120:     @Test",
      "121:     @WithoutJenkins",
      "122:     public void hashCompatibility() {",
      "",
      "[Removed Lines]",
      "96:     @Test",
      "97:     @Issue(\"JENKINS-2381\")",
      "98:     @LocalData",
      "99:     public void dataCompatibilityWith1_282() throws Exception {",
      "101:         WebClient wc = j.createWebClient().login(\"alice\", \"alice\");",
      "103:         try {",
      "106:             j.createWebClient().login(\"bob\", \"bob\");",
      "107:             fail();",
      "108:         } catch (FailingHttpStatusCodeException e) {",
      "109:             assertEquals(401,e.getStatusCode());",
      "110:         }",
      "113:         HtmlPage p = wc.goTo(\"user/alice/configure\");",
      "114:         j.submit(p.getFormByName(\"config\"));",
      "117:         j.createWebClient().login(\"alice\", \"alice\");",
      "118:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/src/test/java/jenkins/model/JenkinsReloadConfigurationTest.java||test/src/test/java/jenkins/model/JenkinsReloadConfigurationTest.java": [
      "File: test/src/test/java/jenkins/model/JenkinsReloadConfigurationTest.java -> test/src/test/java/jenkins/model/JenkinsReloadConfigurationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:     @Test",
      "58:     public void reloadUserConfigUsingGlobalReload() throws Exception {",
      "59:         {",
      "60:         User user = User.get(\"some_user\", true, null);",
      "62:         user.save();",
      "67:         }",
      "68:         j.jenkins.reload();",
      "69:         {",
      "71:         }",
      "72:     }",
      "",
      "[Removed Lines]",
      "61:         user.setFullName(\"oldName\");",
      "64:         replace(\"users/some_user/config.xml\", \"oldName\", \"newName\");",
      "66:         assertEquals(\"oldName\", user.getFullName());",
      "70:         assertEquals(\"newName\", User.getById(\"some_user\", false).getFullName());",
      "",
      "[Added Lines]",
      "59:         String originalName = \"oldName\";",
      "60:         String temporaryName = \"newName\";",
      "63:         user.setFullName(originalName);",
      "65:         assertEquals(originalName, user.getFullName());",
      "67:         user.setFullName(temporaryName);",
      "68:         assertEquals(temporaryName, user.getFullName());",
      "72:             assertEquals(originalName, User.getById(\"some_user\", false).getFullName());",
      "",
      "---------------"
    ],
    "\"test/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\"||\"test/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\"": [
      "File: \"test/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\" -> \"test/src/test/resources/hudson/model/UserIdMigratorTest/migrateMultipleUsers/users/zzz\\341\\200\\200/config.xml\"",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/src/test/resources/hudson/security/ExtendedReadPermissionTest/secret.key||test/src/test/resources/hudson/security/ExtendedReadPermissionTest/secret.key": [
      "File: test/src/test/resources/hudson/security/ExtendedReadPermissionTest/secret.key -> test/src/test/resources/hudson/security/ExtendedReadPermissionTest/secret.key",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: bd50c69c18335c3c4a3280f5444c4d87469b42e1b4766ac2af4dac530ab6f8cf",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d2b8248d361948de7a8ea9595521c9578f7fcad",
      "candidate_info": {
        "commit_hash": "5d2b8248d361948de7a8ea9595521c9578f7fcad",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/5d2b8248d361948de7a8ea9595521c9578f7fcad",
        "files": [
          "core/src/main/java/hudson/model/User.java"
        ],
        "message": "[JENKINS-47909] Prudent to add a log message when we are migrating a user record for any reason.",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
          "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "453:                         if (o instanceof User) {",
          "454:                             if (idStrategy().equals(id, legacyUserDir.getName()) && !idStrategy().filenameOf(legacyUserDir.getName())",
          "455:                                     .equals(legacyUserDir.getName())) {",
          "457:                                     LOGGER.log(Level.WARNING, \"Failed to migrate user record from {0} to {1}\",",
          "458:                                             new Object[]{legacyUserDir, configFile.getParentFile()});",
          "459:                                 }",
          "",
          "[Removed Lines]",
          "456:                                 if (!legacyUserDir.renameTo(configFile.getParentFile())) {",
          "",
          "[Added Lines]",
          "456:                                 if (legacyUserDir.renameTo(configFile.getParentFile())) {",
          "457:                                     LOGGER.log(Level.INFO, \"Migrated user record from {0} to {1}\", new Object[] {legacyUserDir, configFile.getParentFile()});",
          "458:                                 } else {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478:                 try {",
          "479:                     Files.createDirectory(configFile.getParentFile().toPath());",
          "480:                     Files.move(unsanitizedLegacyConfigFile.toPath(), configFile.toPath());",
          "481:                 } catch (IOException | InvalidPathException e) {",
          "482:                     LOGGER.log(",
          "483:                             Level.WARNING,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483:                     LOGGER.log(Level.INFO, \"Migrated unsafe user record from {0} to {1}\", new Object[] {unsanitizedLegacyConfigFile, configFile});",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80b9ee6f4b2e36573108cf0df7e1c8f8a3b52533",
      "candidate_info": {
        "commit_hash": "80b9ee6f4b2e36573108cf0df7e1c8f8a3b52533",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/80b9ee6f4b2e36573108cf0df7e1c8f8a3b52533",
        "files": [
          "core/src/main/java/hudson/model/User.java"
        ],
        "message": "Add missing @since to CanonicalIdResolver#resolve()",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
          "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java"
        ]
      }
    },
    {
      "candidate_hash": "53a320afd86844ad82c2d7fa7b64e4143e776c55",
      "candidate_info": {
        "commit_hash": "53a320afd86844ad82c2d7fa7b64e4143e776c55",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/53a320afd86844ad82c2d7fa7b64e4143e776c55",
        "files": [
          "core/src/main/java/hudson/model/User.java"
        ],
        "message": "Merge pull request #3150 from jglick/User-JENKINS-47429\n\n[JENKINS-47429] User.getLegacyConfigFilesFor no longer seems to be necessary",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
          "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:     private static @Nullable User getOrCreate(@Nonnull String id, @Nonnull String fullName, boolean create) {",
          "439:         String idkey = idStrategy().keyFor(id);",
          "441:         byNameLock.readLock().lock();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:         return getOrCreate(id, fullName, create, getUnsanitizedLegacyConfigFileFor(id));",
          "440:     }",
          "442:     private static @Nullable User getOrCreate(@Nonnull String id, @Nonnull String fullName, boolean create, File unsanitizedLegacyConfigFile) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "446:             byNameLock.readLock().unlock();",
          "447:         }",
          "448:         final File configFile = getConfigFileFor(id);",
          "481:         if (unsanitizedLegacyConfigFile.exists() && !unsanitizedLegacyConfigFile.equals(configFile)) {",
          "482:             File ancestor = unsanitizedLegacyConfigFile.getParentFile();",
          "483:             if (!configFile.exists()) {",
          "484:                 try {",
          "485:                     Files.createDirectory(configFile.getParentFile().toPath());",
          "486:                     Files.move(unsanitizedLegacyConfigFile.toPath(), configFile.toPath());",
          "488:                 } catch (IOException | InvalidPathException e) {",
          "489:                     LOGGER.log(",
          "490:                             Level.WARNING,",
          "492:                             e);",
          "493:                 }",
          "494:             }",
          "",
          "[Removed Lines]",
          "449:         if (u == null && !configFile.isFile() && !configFile.getParentFile().isDirectory()) {",
          "451:             File[] legacy = getLegacyConfigFilesFor(id);",
          "452:             if (legacy != null && legacy.length > 0) {",
          "453:                 for (File legacyUserDir : legacy) {",
          "454:                     final XmlFile legacyXml = new XmlFile(XSTREAM, new File(legacyUserDir, \"config.xml\"));",
          "455:                     try {",
          "456:                         Object o = legacyXml.read();",
          "457:                         if (o instanceof User) {",
          "458:                             if (idStrategy().equals(id, legacyUserDir.getName()) && !idStrategy().filenameOf(legacyUserDir.getName())",
          "459:                                     .equals(legacyUserDir.getName())) {",
          "460:                                 if (legacyUserDir.renameTo(configFile.getParentFile())) {",
          "461:                                     LOGGER.log(Level.INFO, \"Migrated user record from {0} to {1}\", new Object[] {legacyUserDir, configFile.getParentFile()});",
          "462:                                 } else {",
          "463:                                     LOGGER.log(Level.WARNING, \"Failed to migrate user record from {0} to {1}\",",
          "464:                                             new Object[]{legacyUserDir, configFile.getParentFile()});",
          "465:                                 }",
          "466:                                 break;",
          "467:                             }",
          "468:                         } else {",
          "469:                             LOGGER.log(Level.FINE, \"Unexpected object loaded from {0}: {1}\",",
          "470:                                     new Object[]{ legacyUserDir, o });",
          "471:                         }",
          "472:                     } catch (IOException e) {",
          "473:                         LOGGER.log(Level.FINE, String.format(\"Exception trying to load user from %s: %s\",",
          "474:                                 new Object[]{ legacyUserDir, e.getMessage() }), e);",
          "475:                     }",
          "476:                 }",
          "477:             }",
          "478:         }",
          "480:         File unsanitizedLegacyConfigFile = getUnsanitizedLegacyConfigFileFor(id);",
          "487:                     LOGGER.log(Level.INFO, \"Migrated unsafe user record from {0} to {1}\", new Object[] {unsanitizedLegacyConfigFile, configFile});",
          "491:                             String.format(\"Failed to migrate user record from %s to %s, see SECURITY-499 for more information\", idStrategy().legacyFilenameOf(id), idStrategy().filenameOf(id)),",
          "",
          "[Added Lines]",
          "459:                     LOGGER.log(Level.INFO, \"Migrated user record from {0} to {1}\", new Object[] {unsanitizedLegacyConfigFile, configFile});",
          "463:                             String.format(\"Failed to migrate user record from %s to %s\", unsanitizedLegacyConfigFile, configFile),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "764:         return new File(getRootDir(), idStrategy().filenameOf(id) +\"/config.xml\");",
          "765:     }",
          "777:     private static File getUnsanitizedLegacyConfigFileFor(String id) {",
          "778:         return new File(getRootDir(), idStrategy().legacyFilenameOf(id) + \"/config.xml\");",
          "779:     }",
          "",
          "[Removed Lines]",
          "767:     private static final File[] getLegacyConfigFilesFor(final String id) {",
          "768:         return getRootDir().listFiles(new FileFilter() {",
          "769:             @Override",
          "770:             public boolean accept(File pathname) {",
          "771:                 return pathname.isDirectory() && new File(pathname, \"config.xml\").isFile() && idStrategy().equals(",
          "772:                         pathname.getName(), id);",
          "773:             }",
          "774:         });",
          "775:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1094:             File[] subdirs = getRootDir().listFiles((FileFilter) DirectoryFileFilter.INSTANCE);",
          "1095:             if (subdirs != null) {",
          "1096:                 for (File subdir : subdirs) {",
          "1098:                         String name = strategy.idFromFilename(subdir.getName());",
          "1100:                     }",
          "1101:                 }",
          "1102:             }",
          "",
          "[Removed Lines]",
          "1097:                     if (new File(subdir, \"config.xml\").exists()) {",
          "1099:                         getOrCreate(name, /* <init> calls load(), probably clobbering this anyway */name, true);",
          "",
          "[Added Lines]",
          "1059:                     File configFile = new File(subdir, \"config.xml\");",
          "1060:                     if (configFile.exists()) {",
          "1062:                         getOrCreate(name, /* <init> calls load(), probably clobbering this anyway */name, true, configFile);",
          "",
          "---------------"
        ]
      }
    }
  ]
}