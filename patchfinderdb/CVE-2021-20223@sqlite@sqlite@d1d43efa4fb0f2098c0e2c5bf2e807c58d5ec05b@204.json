{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "69306bf43a3abef2af1de9d9846b76650914485f",
      "candidate_info": {
        "commit_hash": "69306bf43a3abef2af1de9d9846b76650914485f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/69306bf43a3abef2af1de9d9846b76650914485f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "src/util.c"
        ],
        "message": "Improvements to rootpage bounds checking during schema parse.\n\nFossilOrigin-Name: 75599a9731be19e213a8ae174b038a43381bc6883a6b7f4058c2c1625fdea432",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6c3a2727dc912ed800146e07db5d15d0f3468d13701165ba763c4b114c3e18e8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:     assert( db->init.busy );",
          "117:     db->init.iDb = iDb;",
          "120:       corruptSchema(pData, argv[1], \"invalid rootpage\");",
          "122:     }",
          "123:     db->init.orphanTrigger = 0;",
          "124:     db->init.azInit = argv;",
          "",
          "[Removed Lines]",
          "118:     sqlite3GetUInt32(argv[3], &db->init.newTnum);",
          "119:     if( db->init.newTnum>pData->mxPage && pData->mxPage!=0 ){",
          "121:       return 0;",
          "",
          "[Added Lines]",
          "118:     if( sqlite3GetUInt32(argv[3], &db->init.newTnum)==0",
          "119:      || (db->init.newTnum>pData->mxPage && pData->mxPage>0)",
          "120:     ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:     Index *pIndex;",
          "154:     pIndex = sqlite3FindIndex(db, argv[1], db->aDb[iDb].zDbSName);",
          "157:      || pIndex->tnum<2",
          "158:      || (pIndex->tnum>pData->mxPage && pData->mxPage!=0)",
          "159:      || sqlite3IndexHasDuplicateRootPage(pIndex)",
          "160:     ){",
          "162:     }",
          "163:   }",
          "164:   return 0;",
          "",
          "[Removed Lines]",
          "155:     if( pIndex==0",
          "156:      || sqlite3GetUInt32(argv[3],&pIndex->tnum)==0",
          "161:       corruptSchema(pData, argv[1], pIndex?\"invalid rootpage\":\"orphan index\");",
          "",
          "[Added Lines]",
          "155:     if( pIndex==0 ){",
          "156:       corruptSchema(pData, argv[1], \"orphan index\");",
          "157:     }else",
          "158:     if( sqlite3GetUInt32(argv[3],&pIndex->tnum)==0",
          "163:       corruptSchema(pData, argv[1], \"invalid roopage\");",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "874:   int i;",
          "875:   for(i=0; sqlite3Isdigit(z[i]); i++){",
          "876:     v = v*10 + z[i] - '0';",
          "878:   }",
          "881:   return 1;",
          "882: }",
          "",
          "[Removed Lines]",
          "877:     if( v>4294967296LL ) return 0;",
          "879:   if( i==0 || z[i]!=0 ) return 0;",
          "",
          "[Added Lines]",
          "877:     if( v>4294967296LL ){ *pI = 0; return 0; }",
          "879:   if( i==0 || z[i]!=0 ){ *pI = 0; return 0; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c812f98a31e90793afa2a7f706de3e186f9b600",
      "candidate_info": {
        "commit_hash": "8c812f98a31e90793afa2a7f706de3e186f9b600",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8c812f98a31e90793afa2a7f706de3e186f9b600",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/join.test",
          "test/rowvaluevtab.test",
          "test/triggerG.test"
        ],
        "message": "Fix a problem with using views in SQLITE_OMIT_VIRTUAL_TABLE builds. Also some test case fixes required for the same builds.\n\nFossilOrigin-Name: 934ee8bdb481a5cbd3d9c5f53028073129d3bca4fee14fe4a49bbf9c0c9d74f7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/join.test||test/join.test",
          "test/rowvaluevtab.test||test/rowvaluevtab.test",
          "test/triggerG.test||test/triggerG.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d241055ead935f0e461a67f483788bcd59f7e8d65ade54b9c7c7c4fec9414102",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4970:       if( !IsVirtual(pTab) && cannotBeFunction(pParse, pFrom) ){",
          "4971:         return WRC_Abort;",
          "4972:       }",
          "4974:       if( IsVirtual(pTab) || pTab->pSelect ){",
          "4975:         i16 nCol;",
          "4976:         u8 eCodeOrig = pWalker->eCode;",
          "",
          "[Removed Lines]",
          "4973: #if !defined(SQLITE_OMIT_VIEW) && !defined(SQLITE_OMIT_VIRTUALTABLE)",
          "",
          "[Added Lines]",
          "4973: #if !defined(SQLITE_OMIT_VIEW) || !defined(SQLITE_OMIT_VIRTUALTABLE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4980:           sqlite3ErrorMsg(pParse, \"access to view \\\"%s\\\" prohibited\",",
          "4981:             pTab->zName);",
          "4982:         }",
          "4983:         if( IsVirtual(pTab)",
          "4984:          && pFrom->fg.fromDDL",
          "4985:          && ALWAYS(pTab->pVTable!=0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4983: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4988:           sqlite3ErrorMsg(pParse, \"unsafe use of virtual table \\\"%s\\\"\",",
          "4989:                                   pTab->zName);",
          "4990:         }",
          "4991:         pFrom->pSelect = sqlite3SelectDup(db, pTab->pSelect, 0);",
          "4992:         nCol = pTab->nCol;",
          "4993:         pTab->nCol = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4992: #endif",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "991: # 2019-12-22 ticket 7929c1efb2d67e98",
          "992: #",
          "993: reset_db",
          "994: do_execsql_test join-23.10 {",
          "995:   CREATE TABLE t0(c0);",
          "996:   INSERT INTO t0(c0) VALUES(123);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "994: ifcapable vtab {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1000:      ON vt0.name LIKE 'c0'",
          "1001:    WHERE v0.c0 == 0;",
          "1002: } {123 0 c0}",
          "1004: #-------------------------------------------------------------------------",
          "1005: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1004: }",
          "",
          "---------------"
        ],
        "test/rowvaluevtab.test||test/rowvaluevtab.test": [
          "File: test/rowvaluevtab.test -> test/rowvaluevtab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: source $testdir/tester.tcl",
          "16: set ::testprefix rowvaluevtab",
          "18: register_echo_module db",
          "20: do_execsql_test 1.0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: ifcapable !vtab {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "",
          "---------------"
        ],
        "test/triggerG.test||test/triggerG.test": [
          "File: test/triggerG.test -> test/triggerG.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:   INSERT INTO t4 VALUES(1);",
          "76: } {1 {hex literal too big: 0x2147483648e0e0099}}",
          "78: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: #-------------------------------------------------------------------------",
          "79: #",
          "80: do_execsql_test 400 {",
          "81:   CREATE VIEW v0(a) AS SELECT 1234;",
          "82:   CREATE TRIGGER t0001 INSTEAD OF DELETE ON v0 BEGIN",
          "83:     SELECT old.a;",
          "84:   END;",
          "85: }",
          "86: do_execsql_test 405 {",
          "87:   SELECT a FROM v0;",
          "88: } {1234}",
          "89: do_execsql_test 410 {",
          "90:   DELETE FROM v0;",
          "91: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0404386f265f2af09777eefb21f97f9333b95bb",
      "candidate_info": {
        "commit_hash": "e0404386f265f2af09777eefb21f97f9333b95bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e0404386f265f2af09777eefb21f97f9333b95bb",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest_data.tcl",
          "tool/sqldiff.c"
        ],
        "message": "Fix an inconsequential memory leak in sqldiff. Update the \"Sanitize\" case in wapptest.tcl to use -fsanitize=address,undefined, and to run more tests.\n\nFossilOrigin-Name: 613fb5c2525be77e48bad0a74e8b7bf53489365060fb9c7713a0caddb1820c71",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest_data.tcl||test/releasetest_data.tcl",
          "tool/sqldiff.c||tool/sqldiff.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fca8dc8b578f215a969cd899336378966156154710873e68b3d9ac5881b0ff3f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     -DSQLITE_ENABLE_DESERIALIZE",
          "55:   }",
          "56:   \"Sanitize\" {",
          "58:     -DSQLITE_ENABLE_STAT4",
          "60:   }",
          "61:   \"Stdcall\" {",
          "62:     -DUSE_STDCALL=1",
          "",
          "[Removed Lines]",
          "57:     CC=clang -fsanitize=undefined",
          "59:     --enable-session",
          "",
          "[Added Lines]",
          "57:     CC=clang -fsanitize=address,undefined",
          "59:     --enable-debug",
          "60:     --enable-all",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:     \"No-lookaside\"            test",
          "295:     \"Devkit\"                  test",
          "296:     \"Apple\"                   test",
          "298:     \"Device-One\"              fulltest",
          "299:     \"Default\"                 \"threadtest fulltest\"",
          "300:     \"Valgrind*\"               valgrindtest",
          "",
          "[Removed Lines]",
          "297:     \"Sanitize\"                {QUICKTEST_OMIT=func4.test,nan.test test}",
          "",
          "[Added Lines]",
          "298:     \"Sanitize\"                {QUICKTEST_OMIT=crash*,shell*,sqldiff*,sessionB.test test}",
          "",
          "---------------"
        ],
        "tool/sqldiff.c||tool/sqldiff.c": [
          "File: tool/sqldiff.c -> tool/sqldiff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1546:   checkSchemasMatch(zTab);",
          "1548:   pStmt = db_prepare(\"PRAGMA main.table_info=%Q\", zTab);",
          "1549:   while( SQLITE_ROW==sqlite3_step(pStmt) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1547:   strInit(&sql);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1565:   }",
          "1566:   sqlite3_finalize(pStmt);",
          "1567:   if( nPk==0 ) goto end_changeset_one_table;",
          "1569:   if( nCol>nPk ){",
          "1570:     strPrintf(&sql, \"SELECT %d\", SQLITE_UPDATE);",
          "1571:     for(i=0; i<nCol; i++){",
          "",
          "[Removed Lines]",
          "1568:   strInit(&sql);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1707:   sqlite3_free(azCol);",
          "1708:   sqlite3_free(aiPk);",
          "1709:   sqlite3_free(zId);",
          "1710: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1710:   sqlite3_free(aiFlg);",
          "1711:   strFree(&sql);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1971: #endif",
          "1972:   zSql = sqlite3_mprintf(\"ATTACH %Q as aux;\", zDb2);",
          "1973:   rc = sqlite3_exec(g.db, zSql, 0, 0, &zErrMsg);",
          "1974:   if( rc || zErrMsg ){",
          "1975:     cmdlineError(\"cannot attach database \\\"%s\\\"\", zDb2);",
          "1976:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1976:   sqlite3_free(zSql);",
          "1977:   zSql = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f65e3799191b44f5db21f7d49b7f289bd4c5508f",
      "candidate_info": {
        "commit_hash": "f65e3799191b44f5db21f7d49b7f289bd4c5508f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f65e3799191b44f5db21f7d49b7f289bd4c5508f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window1.test"
        ],
        "message": "Ensure that the \"push-down\" optimization does not push constraints down into compound queries if any of the component queries uses window functions.\n\nFossilOrigin-Name: 094dcfe779613301521e8bb990432df187b3686add75a3420b4a193f02f3467f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 65179814aa0ae5927bae97c10ef20f290535399b889d96d5b88931f62635f212",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4428: ){",
          "4429:   Expr *pNew;",
          "4430:   int nChng = 0;",
          "4431:   if( pWhere==0 ) return 0;",
          "4434: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4436: #endif",
          "4438: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4431:   Select *pSel;",
          "4436:   for(pSel=pSubq; pSel; pSel=pSel->pPrior){",
          "4438:   }",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1756:       UNION",
          "1757:     SELECT b AS c FROM t1",
          "1758:   ) WHERE c>10;",
          "1761: do_execsql_test 54.3 {",
          "1762:   INSERT INTO t1 VALUES('2',5.0);",
          "",
          "[Removed Lines]",
          "1759: } {1 {misuse of window function sum()}}",
          "",
          "[Added Lines]",
          "1759: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1769:       UNION",
          "1770:     SELECT b AS c FROM t1",
          "1771:   ) WHERE c>10;",
          "1774: # 2020-06-05 ticket c8d3b9f0a750a529",
          "1775: reset_db",
          "",
          "[Removed Lines]",
          "1772: } {1 {misuse of window function sum()}}",
          "",
          "[Added Lines]",
          "1772: } {0 {15.0 30.0}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1889: SELECT (SELECT max(x)OVER(ORDER BY x) % min(x)OVER(ORDER BY CASE x WHEN 889 THEN x WHEN x THEN x END)) FROM (SELECT (SELECT sum(CAST(a IN(SELECT (SELECT max(x)OVER(ORDER BY CASE x WHEN 889 THEN 299 WHEN 863 THEN 863 END)) FROM (SELECT (SELECT sum(CAST((SELECT (SELECT max(x)OVER(ORDER BY x) / min(x)OVER(ORDER BY CASE x WHEN 889 THEN 299 WHEN -true THEN 863 END)) FROM (SELECT (SELECT sum(CAST(a IN(SELECT (SELECT max(x) & sum ( a )OVER(ORDER BY CASE x WHEN -8 THEN 299 WHEN 863 THEN 863 END)) FROM (SELECT (SELECT sum(CAST(a AS )) FROM t1) AS x FROM t1)) AS t1 )) FROM t1) AS x FROM t1)) AS x )) FROM t1) AS x FROM t1)) AS real)) FROM t1) AS x FROM t1);",
          "1890: } {{} {} {}}",
          "1892: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1892: #-------------------------------------------------------------------------",
          "1893: reset_db",
          "1894: do_execsql_test 62.1 {",
          "1895:   CREATE TABLE t1(a VARCHAR(20), b FLOAT);",
          "1896:   INSERT INTO t1 VALUES('1',10.0);",
          "1897: }",
          "1899: do_execsql_test 62.2 {",
          "1900:   SELECT * FROM (",
          "1901:       SELECT sum(b) OVER() AS c FROM t1",
          "1902:       UNION",
          "1903:       SELECT b AS c FROM t1",
          "1904:       ) WHERE c>10;",
          "1905: }",
          "1907: do_execsql_test 62.3 {",
          "1908:   INSERT INTO t1 VALUES('2',5.0);",
          "1909:   INSERT INTO t1 VALUES('3',15.0);",
          "1910: }",
          "1912: do_execsql_test 62.4 {",
          "1913:   SELECT * FROM (",
          "1914:       SELECT sum(b) OVER() AS c FROM t1",
          "1915:       UNION",
          "1916:       SELECT b AS c FROM t1",
          "1917:       ) WHERE c>10;",
          "1918: } {15.0 30.0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24c22753fc88cdba0d6d437977698ae192bc2c9d",
      "candidate_info": {
        "commit_hash": "24c22753fc88cdba0d6d437977698ae192bc2c9d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/24c22753fc88cdba0d6d437977698ae192bc2c9d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Remove an unused #define from sqliteInt.h.\n\nFossilOrigin-Name: d5b254f94c1ce6f0f26024d0b9c80e610f7cc891360bc4c2cb116e9eda2874b3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5bbd4bddd3b9fa64d134ed62bce3eb4a09456bf24dec2474b5d764a3a3775964",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2553: };",
          "",
          "[Removed Lines]",
          "2558: #define AggInfoMagic  0x2059e99e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}