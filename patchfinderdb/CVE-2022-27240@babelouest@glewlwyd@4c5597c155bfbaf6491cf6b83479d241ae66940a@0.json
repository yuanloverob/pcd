{
  "cve_id": "CVE-2022-27240",
  "cve_desc": "scheme/webauthn.c in Glewlwyd SSO server 2.x before 2.6.2 has a buffer overflow associated with a webauthn assertion.",
  "repo": "babelouest/glewlwyd",
  "patch_hash": "4c5597c155bfbaf6491cf6b83479d241ae66940a",
  "patch_info": {
    "commit_hash": "4c5597c155bfbaf6491cf6b83479d241ae66940a",
    "repo": "babelouest/glewlwyd",
    "commit_url": "https://github.com/babelouest/glewlwyd/commit/4c5597c155bfbaf6491cf6b83479d241ae66940a",
    "files": [
      "src/scheme/webauthn.c"
    ],
    "message": "Fix possible buffer overflow",
    "before_after_code_files": [
      "src/scheme/webauthn.c||src/scheme/webauthn.c"
    ]
  },
  "patch_diff": {
    "src/scheme/webauthn.c||src/scheme/webauthn.c": [
      "File: src/scheme/webauthn.c -> src/scheme/webauthn.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2636:         break;",
      "2637:       }",
      "2641:         ret = G_ERROR_PARAM;",
      "2642:         break;",
      "2643:       }",
      "2645:       memcpy(data_signed, auth_data, auth_data_len);",
      "2646:       memcpy(data_signed+auth_data_len, cdata_hash, cdata_hash_len);",
      "",
      "[Removed Lines]",
      "2639:       if (!o_base64url_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), sig, &sig_len)) {",
      "2640:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error o_base64url_decode signature\");",
      "",
      "[Added Lines]",
      "2639:       if (!o_base64_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), NULL, &sig_len)) {",
      "2640:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Invalid signature format\");",
      "2645:       if (sig_len > 128) {",
      "2646:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Invalid signature\");",
      "2647:         ret = G_ERROR_PARAM;",
      "2648:         break;",
      "2649:       }",
      "2651:       if (!o_base64_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), sig, &sig_len)) {",
      "2652:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error o_base64_decode signature\");",
      "2653:         ret = G_ERROR;",
      "2654:         break;",
      "2655:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e8ce180dfabb90d977f3206fde8d04ca9f3a6a7c",
      "candidate_info": {
        "commit_hash": "e8ce180dfabb90d977f3206fde8d04ca9f3a6a7c",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/e8ce180dfabb90d977f3206fde8d04ca9f3a6a7c",
        "files": [
          "src/scheme/oauth2.c",
          "src/scheme/webauthn.c",
          "src/user/database.c",
          "test/glewlwyd_oidc_claims_scopes.c",
          "test/glewlwyd_oidc_code.c",
          "test/glewlwyd_oidc_dpop.c",
          "test/glewlwyd_oidc_fapi.c",
          "test/glewlwyd_oidc_hybrid_id_token_code.c",
          "test/glewlwyd_oidc_hybrid_id_token_token_code.c",
          "test/glewlwyd_oidc_implicit_id_token_token.c",
          "test/glewlwyd_scheme_webauthn.c"
        ],
        "message": "Update o_base64* usage",
        "before_after_code_files": [
          "src/scheme/oauth2.c||src/scheme/oauth2.c",
          "src/scheme/webauthn.c||src/scheme/webauthn.c",
          "src/user/database.c||src/user/database.c",
          "test/glewlwyd_oidc_claims_scopes.c||test/glewlwyd_oidc_claims_scopes.c",
          "test/glewlwyd_oidc_code.c||test/glewlwyd_oidc_code.c",
          "test/glewlwyd_oidc_dpop.c||test/glewlwyd_oidc_dpop.c",
          "test/glewlwyd_oidc_fapi.c||test/glewlwyd_oidc_fapi.c",
          "test/glewlwyd_oidc_hybrid_id_token_code.c||test/glewlwyd_oidc_hybrid_id_token_code.c",
          "test/glewlwyd_oidc_hybrid_id_token_token_code.c||test/glewlwyd_oidc_hybrid_id_token_token_code.c",
          "test/glewlwyd_oidc_implicit_id_token_token.c||test/glewlwyd_oidc_implicit_id_token_token.c",
          "test/glewlwyd_scheme_webauthn.c||test/glewlwyd_scheme_webauthn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/scheme/webauthn.c||src/scheme/webauthn.c"
          ],
          "candidate": [
            "src/scheme/webauthn.c||src/scheme/webauthn.c"
          ]
        }
      },
      "candidate_diff": {
        "src/scheme/oauth2.c||src/scheme/oauth2.c": [
          "File: src/scheme/oauth2.c -> src/scheme/oauth2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:         state_export = json_dumps(j_state, JSON_COMPACT);",
          "455:         if ((state_export_b64 = o_malloc(2*o_strlen(state_export))) != NULL) {",
          "456:           if (o_base64url_encode((const unsigned char *)state_export, o_strlen(state_export), (unsigned char *)state_export_b64, &state_export_b64_len)) {",
          "457:             i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "458:             if (i_build_auth_url_get(&i_session) == I_OK) {",
          "459:               time(&now);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:             state_export_b64[state_export_b64_len] = '\\0';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "566:           state_export = json_dumps(j_state, JSON_COMPACT);",
          "567:           if ((state_export_b64 = o_malloc(2*o_strlen(state_export))) != NULL) {",
          "568:             if (o_base64url_encode((const unsigned char *)state_export, o_strlen(state_export), (unsigned char *)state_export_b64, &state_export_b64_len)) {",
          "569:               i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "570:               if (i_build_auth_url_get(&i_session) == I_OK) {",
          "571:                 time(&now);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:               state_export_b64[state_export_b64_len] = '\\0';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "744:           state_export = json_dumps(j_state, JSON_COMPACT);",
          "745:           if ((state_export_b64 = o_malloc(2*o_strlen(state_export))) != NULL) {",
          "746:             if (o_base64url_encode((const unsigned char *)state_export, o_strlen(state_export), (unsigned char *)state_export_b64, &state_export_b64_len)) {",
          "747:               i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "748:               if (i_build_auth_url_get(&i_session) == I_OK) {",
          "749:                 j_query = json_pack(\"{sss{sOsOssss}}\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "749:               state_export_b64[state_export_b64_len] = '\\0';",
          "",
          "---------------"
        ],
        "src/scheme/webauthn.c||src/scheme/webauthn.c": [
          "File: src/scheme/webauthn.c -> src/scheme/webauthn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1631:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_android_safetynet - Error o_base64_encode for nonce_base_hash_b64\");",
          "1632:         break;",
          "1633:       }",
          "1635:       if (response == NULL) {",
          "1636:         json_array_append_new(j_error, json_string(\"response invalid\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1634:       nonce_base_hash_b64[nonce_base_hash_b64_len] = '\\0';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2636:         break;",
          "2637:       }",
          "2641:         ret = G_ERROR_PARAM;",
          "2642:         break;",
          "2643:       }",
          "2645:       memcpy(data_signed, auth_data, auth_data_len);",
          "2646:       memcpy(data_signed+auth_data_len, cdata_hash, cdata_hash_len);",
          "",
          "[Removed Lines]",
          "2639:       if (!o_base64url_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), sig, &sig_len)) {",
          "2640:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error o_base64url_decode signature\");",
          "",
          "[Added Lines]",
          "2640:       if (!o_base64_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), NULL, &sig_len)) {",
          "2641:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error o_base64_decode signature (1)\");",
          "2642:         ret = G_ERROR_PARAM;",
          "2643:         break;",
          "2644:       }",
          "2646:       if (sig_len > 128) {",
          "2647:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Invalid signature\");",
          "2652:       if (!o_base64_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), sig, &sig_len)) {",
          "2653:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error o_base64_decode signature (2)\");",
          "2654:         ret = G_ERROR;",
          "2655:         break;",
          "2656:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2777:   if ((seed_credential_id = msprintf(\"%s-credential_id\", seed)) != NULL) {",
          "2778:     if (generate_digest_raw(digest_SHA512, (unsigned char *)seed_credential_id, o_strlen(seed_credential_id), credential_id, &credential_id_len)) {",
          "2779:       if (o_base64_encode(credential_id, credential_id_len, credential_id_b64, &credential_id_b64_len)) {",
          "2780:         if ((seed_name = msprintf(\"%s-name\", seed)) != NULL) {",
          "2781:           if (generate_digest_raw(digest_SHA256, (unsigned char *)seed_name, o_strlen(seed_name), name_hash, &name_hash_len)) {",
          "2782:             if (name_hash[0]%2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2793:         credential_id_b64[credential_id_b64_len] = '\\0';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2892:   if ((seed = msprintf(\"%s%s-user_id\", username, json_string_value(json_object_get(j_params, \"seed\")))) != NULL) {",
          "2893:     if (generate_digest_raw(digest_SHA256, (unsigned char *)seed, o_strlen(seed), seed_hash, &seed_hash_len)) {",
          "2894:       if (o_base64_encode(seed_hash, seed_hash_len, user_id, &seed_hash_b64_len)) {",
          "2895:         ret = G_OK;",
          "2896:       } else {",
          "2897:         y_log_message(Y_LOG_LEVEL_ERROR, \"generate_credential_fake_from_seed - Error o_base64_encode\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2909:         user_id[seed_hash_b64_len] = '\\0';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3590:     if (check_result_value(j_assertion, G_OK)) {",
          "3591:       if ((res = check_assertion(config, (json_t *)cls, username, j_scheme_data, json_object_get(j_assertion, \"assertion\"))) == G_OK) {",
          "3592:         ret = G_OK;",
          "3595:       } else {",
          "3596:         y_log_message(Y_LOG_LEVEL_ERROR, \"user_auth_scheme_module_validate webauthn - Error check_assertion\");",
          "3597:         ret = G_ERROR;",
          "",
          "[Removed Lines]",
          "3593:       } else if (res == G_ERROR_UNAUTHORIZED) {",
          "3594:         ret = G_ERROR_UNAUTHORIZED;",
          "",
          "[Added Lines]",
          "3608:       } else if (res == G_ERROR_UNAUTHORIZED || res == G_ERROR_PARAM) {",
          "3609:         ret = res;",
          "",
          "---------------"
        ],
        "src/user/database.c||src/user/database.c": [
          "File: src/user/database.c -> src/user/database.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:               json_array_append_new(j_iterations, json_integer(0));",
          "546:             }",
          "547:             if (!json_string_null_or_empty(json_object_get(j_element, \"guw_password\")) && o_base64_decode((const unsigned char *)json_string_value(json_object_get(j_element, \"guw_password\")), gc_password_len, password_b64_decoded, &password_b64_decoded_len)) {",
          "548:               if ((salt = o_strdup((const char *)password_b64_decoded + password_b64_decoded_len - GLEWLWYD_DEFAULT_SALT_LENGTH)) != NULL) {",
          "549:                 salt_list[index] = salt;",
          "550:               } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:               password_b64_decoded[password_b64_decoded_len] = '\\0';",
          "",
          "---------------"
        ],
        "test/glewlwyd_oidc_claims_scopes.c||test/glewlwyd_oidc_claims_scopes.c": [
          "File: test/glewlwyd_oidc_claims_scopes.c -> test/glewlwyd_oidc_claims_scopes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   }",
          "148:   ck_assert_int_eq(split_string(id_token, \".\", &id_token_split), 3);",
          "149:   ck_assert_int_eq(o_base64url_decode((const unsigned char *)id_token_split[1], o_strlen(id_token_split[1]), payload_dec, &payload_dec_len), 1);",
          "150:   ck_assert_ptr_ne((j_payload = json_loads((const char *)payload_dec, JSON_DECODE_ANY, NULL)), NULL);",
          "151:   ck_assert_ptr_ne(json_object_get(j_payload, \"claim-1\"), NULL);",
          "152:   ck_assert_ptr_eq(json_object_get(j_payload, \"claim-2\"), NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:   payload_dec[payload_dec_len] = '\\0';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:   }",
          "201:   ck_assert_int_eq(split_string(id_token, \".\", &id_token_split), 3);",
          "202:   ck_assert_int_eq(o_base64url_decode((const unsigned char *)id_token_split[1], o_strlen(id_token_split[1]), payload_dec, &payload_dec_len), 1);",
          "203:   ck_assert_ptr_ne((j_payload = json_loads((const char *)payload_dec, JSON_DECODE_ANY, NULL)), NULL);",
          "204:   ck_assert_ptr_ne(json_object_get(j_payload, \"claim-1\"), NULL);",
          "205:   ck_assert_ptr_eq(json_object_get(j_payload, \"claim-2\"), NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:   payload_dec[payload_dec_len] = '\\0';",
          "",
          "---------------"
        ],
        "test/glewlwyd_oidc_code.c||test/glewlwyd_oidc_code.c": [
          "File: test/glewlwyd_oidc_code.c -> test/glewlwyd_oidc_code.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   at_data.size = o_strlen(json_string_value(json_object_get(j_body, \"access_token\")));",
          "137:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &at_data, at_hash, &at_hash_len), GNUTLS_E_SUCCESS);",
          "138:   ck_assert_int_eq(o_base64url_encode((unsigned char *)at_hash, at_hash_len/2, (unsigned char *)at_hash_encoded, &at_hash_encoded_len), 1);",
          "139:   ck_assert_str_eq(at_hash_encoded, json_string_value(json_object_get(j_payload, \"at_hash\")));",
          "141:   at_data.data = (unsigned char*)code;",
          "142:   at_data.size = o_strlen(code);",
          "143:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &at_data, at_hash, &at_hash_len), GNUTLS_E_SUCCESS);",
          "144:   ck_assert_int_eq(o_base64url_encode((unsigned char *)at_hash, at_hash_len/2, (unsigned char *)at_hash_encoded, &at_hash_encoded_len), 1);",
          "145:   ck_assert_str_eq(at_hash_encoded, json_string_value(json_object_get(j_payload, \"c_hash\")));",
          "147:   ulfius_clean_request(&req);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:   at_hash_encoded[at_hash_encoded_len] = '\\0';",
          "146:   at_hash_encoded[at_hash_encoded_len] = '\\0';",
          "",
          "---------------"
        ],
        "test/glewlwyd_oidc_dpop.c||test/glewlwyd_oidc_dpop.c": [
          "File: test/glewlwyd_oidc_dpop.c -> test/glewlwyd_oidc_dpop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "685:   hash_data.size = json_string_length(json_object_get(j_result, \"access_token\"));",
          "686:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &hash_data, ath, &ath_len), GNUTLS_E_SUCCESS);",
          "687:   ck_assert_int_eq(o_base64url_encode(ath, ath_len, ath_enc, &ath_enc_len), 1);",
          "690:   ulfius_init_request(&req);",
          "691:   ulfius_init_response(&resp);",
          "692:   ck_assert_int_eq(ulfius_set_request_properties(&req,",
          "",
          "[Removed Lines]",
          "689:   ck_assert_ptr_ne(NULL, bearer = msprintf(\"Bearer %s\", json_string_value(json_object_get(j_result, \"access_token\"))));",
          "",
          "[Added Lines]",
          "688:   ath_enc[ath_enc_len] = '\\0';",
          "690:   ck_assert_ptr_ne(NULL, bearer = msprintf(\"DPoP %s\", json_string_value(json_object_get(j_result, \"access_token\"))));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "820:   ulfius_init_response(&resp);",
          "821:   ck_assert_int_eq(r_jwt_set_claim_int_value(jwt_dpop, \"iat\", time(NULL)), RHN_OK);",
          "823:   ck_assert_ptr_ne(NULL, dpop_token = r_jwt_serialize_signed(jwt_dpop, NULL, 0));",
          "824:   ck_assert_int_eq(ulfius_set_request_properties(&req,",
          "825:                                                  U_OPT_HEADER_PARAMETER, \"DPoP\", dpop_token,",
          "",
          "[Removed Lines]",
          "822:   ck_assert_int_eq(r_jwt_set_claim_str_value(jwt_dpop, \"typ\", \"error\"), RHN_OK);",
          "",
          "[Added Lines]",
          "823:   ck_assert_int_eq(r_jwt_set_header_str_value(jwt_dpop, \"typ\", \"error\"), RHN_OK);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "830:   o_free(dpop_token);",
          "832:   ulfius_init_response(&resp);",
          "834:   ck_assert_ptr_ne(NULL, dpop_token = r_jwt_serialize_signed(jwt_dpop, NULL, 0));",
          "835:   ck_assert_int_eq(ulfius_set_request_properties(&req,",
          "836:                                                  U_OPT_HEADER_PARAMETER, \"DPoP\", dpop_token,",
          "",
          "[Removed Lines]",
          "833:   ck_assert_int_eq(r_jwt_set_claim_int_value(jwt_dpop, \"typ\", 42), RHN_OK);",
          "",
          "[Added Lines]",
          "834:   ck_assert_int_eq(r_jwt_set_header_int_value(jwt_dpop, \"typ\", 42), RHN_OK);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "841:   o_free(dpop_token);",
          "843:   ulfius_init_response(&resp);",
          "845:   ck_assert_ptr_ne(NULL, dpop_token = r_jwt_serialize_signed(jwt_dpop, NULL, 0));",
          "846:   ck_assert_int_eq(ulfius_set_request_properties(&req,",
          "847:                                                  U_OPT_HEADER_PARAMETER, \"DPoP\", dpop_token,",
          "",
          "[Removed Lines]",
          "844:   ck_assert_int_eq(r_jwt_set_claim_str_value(jwt_dpop, \"typ\", NULL), RHN_OK);",
          "",
          "[Added Lines]",
          "845:   ck_assert_int_eq(r_jwt_set_header_str_value(jwt_dpop, \"typ\", NULL), RHN_OK);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "854:   ulfius_init_response(&resp);",
          "855:   ck_assert_int_eq(r_jwt_set_header_str_value(jwt_dpop, \"typ\", \"dpop+jwt\"), RHN_OK);",
          "857:   ck_assert_ptr_ne(NULL, dpop_token = r_jwt_serialize_signed(jwt_dpop, NULL, 0));",
          "858:   ck_assert_int_eq(ulfius_set_request_properties(&req,",
          "859:                                                  U_OPT_HEADER_PARAMETER, \"DPoP\", dpop_token,",
          "",
          "[Removed Lines]",
          "856:   ck_assert_int_eq(r_jwt_set_claim_str_value(jwt_dpop, \"jwk\", \"error\"), RHN_OK);",
          "",
          "[Added Lines]",
          "857:   ck_assert_int_eq(r_jwt_set_header_str_value(jwt_dpop, \"jwk\", \"error\"), RHN_OK);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "864:   o_free(dpop_token);",
          "866:   ulfius_init_response(&resp);",
          "868:   ck_assert_ptr_ne(NULL, dpop_token = r_jwt_serialize_signed(jwt_dpop, NULL, 0));",
          "869:   ck_assert_int_eq(ulfius_set_request_properties(&req,",
          "870:                                                  U_OPT_HEADER_PARAMETER, \"DPoP\", dpop_token,",
          "",
          "[Removed Lines]",
          "867:   ck_assert_int_eq(r_jwt_set_claim_int_value(jwt_dpop, \"jwk\", 42), RHN_OK);",
          "",
          "[Added Lines]",
          "868:   ck_assert_int_eq(r_jwt_set_header_int_value(jwt_dpop, \"jwk\", 42), RHN_OK);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "875:   o_free(dpop_token);",
          "877:   ulfius_init_response(&resp);",
          "879:   ck_assert_ptr_ne(NULL, dpop_token = r_jwt_serialize_signed(jwt_dpop, NULL, 0));",
          "880:   ck_assert_int_eq(ulfius_set_request_properties(&req,",
          "881:                                                  U_OPT_HEADER_PARAMETER, \"DPoP\", dpop_token,",
          "",
          "[Removed Lines]",
          "878:   ck_assert_int_eq(r_jwt_set_claim_str_value(jwt_dpop, \"jwk\", NULL), RHN_OK);",
          "",
          "[Added Lines]",
          "879:   ck_assert_int_eq(r_jwt_set_header_str_value(jwt_dpop, \"jwk\", NULL), RHN_OK);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1023:   ulfius_clean_request(&req);",
          "1024:   o_free(dpop_token);",
          "1026:   hash_data.data = (unsigned char*)json_string_value(json_object_get(j_result, \"access_token\"));",
          "1027:   hash_data.size = json_string_length(json_object_get(j_result, \"access_token\"));",
          "1028:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &hash_data, ath, &ath_len), GNUTLS_E_SUCCESS);",
          "1029:   ck_assert_int_eq(o_base64url_encode(ath, ath_len, ath_enc, &ath_enc_len), 1);",
          "1031:   ulfius_init_request(&req);",
          "1032:   ulfius_init_response(&resp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1027:   ck_assert_str_eq(json_string_value(json_object_get(j_result, \"token_type\")), \"DPoP\");",
          "1032:   ath_enc[ath_enc_len] = '\\0';",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1036:   ck_assert_int_eq(r_jwt_set_claim_str_value(jwt_dpop, \"htu\", SERVER_URI \"/\" PLUGIN_NAME \"/userinfo\"), RHN_OK);",
          "1037:   ck_assert_int_eq(r_jwt_set_claim_str_value(jwt_dpop, \"ath\", (const char *)ath_enc), RHN_OK);",
          "1038:   ck_assert_ptr_ne(NULL, dpop_token = r_jwt_serialize_signed(jwt_dpop, NULL, 0));",
          "1040:   ck_assert_int_eq(ulfius_set_request_properties(&req,",
          "1041:                                                  U_OPT_HTTP_VERB, \"GET\",",
          "1042:                                                  U_OPT_HTTP_URL, SERVER_URI \"/\" PLUGIN_NAME \"/userinfo\",",
          "",
          "[Removed Lines]",
          "1039:   ck_assert_ptr_ne(NULL, bearer = msprintf(\"Bearer %s\", json_string_value(json_object_get(j_result, \"access_token\"))));",
          "",
          "[Added Lines]",
          "1042:   ck_assert_ptr_ne(NULL, bearer = msprintf(\"DPoP %s\", json_string_value(json_object_get(j_result, \"access_token\"))));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1122:   hash_data.size = json_string_length(json_object_get(j_result, \"access_token\"));",
          "1123:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &hash_data, ath, &ath_len), GNUTLS_E_SUCCESS);",
          "1124:   ck_assert_int_eq(o_base64url_encode(ath, ath_len, ath_enc, &ath_enc_len), 1);",
          "1126:   ulfius_init_request(&req);",
          "1127:   ulfius_init_response(&resp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1128:   ath_enc[ath_enc_len] = '\\0';",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1131:   ck_assert_int_eq(r_jwt_set_claim_str_value(jwt_dpop, \"htu\", SERVER_URI \"/\" PLUGIN_NAME \"/userinfo\"), RHN_OK);",
          "1132:   ck_assert_int_eq(r_jwt_set_claim_str_value(jwt_dpop, \"ath\", (const char *)ath_enc), RHN_OK);",
          "1133:   ck_assert_ptr_ne(NULL, dpop_token = r_jwt_serialize_signed(jwt_dpop, NULL, 0));",
          "1135:   ck_assert_int_eq(ulfius_set_request_properties(&req,",
          "1136:                                                  U_OPT_HTTP_VERB, \"GET\",",
          "1137:                                                  U_OPT_HTTP_URL, SERVER_URI \"/\" PLUGIN_NAME \"/userinfo\",",
          "",
          "[Removed Lines]",
          "1134:   ck_assert_ptr_ne(NULL, bearer = msprintf(\"Bearer %s\", json_string_value(json_object_get(j_result, \"access_token\"))));",
          "",
          "[Added Lines]",
          "1138:   ck_assert_ptr_ne(NULL, bearer = msprintf(\"DPoP %s\", json_string_value(json_object_get(j_result, \"access_token\"))));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1348:   hash_data.size = json_string_length(json_object_get(j_result, \"access_token\"));",
          "1349:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &hash_data, ath, &ath_len), GNUTLS_E_SUCCESS);",
          "1350:   ck_assert_int_eq(o_base64url_encode(ath, ath_len, ath_enc, &ath_enc_len), 1);",
          "1352:   ulfius_init_request(&req);",
          "1353:   ulfius_init_response(&resp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1355:   ath_enc[ath_enc_len] = '\\0';",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1357:   ck_assert_int_eq(r_jwt_set_claim_str_value(jwt_dpop, \"htu\", SERVER_URI \"/\" PLUGIN_NAME \"/token/hash\"), RHN_OK);",
          "1358:   ck_assert_int_eq(r_jwt_set_claim_str_value(jwt_dpop, \"ath\", (const char *)ath_enc), RHN_OK);",
          "1359:   ck_assert_ptr_ne(NULL, dpop_token = r_jwt_serialize_signed(jwt_dpop, NULL, 0));",
          "1361:   ck_assert_int_eq(ulfius_set_request_properties(&req,",
          "1362:                                                  U_OPT_HTTP_VERB, \"DELETE\",",
          "1363:                                                  U_OPT_HTTP_URL, SERVER_URI \"/\" PLUGIN_NAME \"/token/hash\",",
          "",
          "[Removed Lines]",
          "1360:   ck_assert_ptr_ne(NULL, bearer = msprintf(\"Bearer %s\", json_string_value(json_object_get(j_result, \"access_token\"))));",
          "",
          "[Added Lines]",
          "1365:   ck_assert_ptr_ne(NULL, bearer = msprintf(\"DPoP %s\", json_string_value(json_object_get(j_result, \"access_token\"))));",
          "",
          "---------------"
        ],
        "test/glewlwyd_oidc_fapi.c||test/glewlwyd_oidc_fapi.c": [
          "File: test/glewlwyd_oidc_fapi.c -> test/glewlwyd_oidc_fapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "537:   s_data.size = o_strlen(STATE);",
          "538:   ck_assert_int_eq(gnutls_fingerprint(alg, &s_data, s_hash, &s_hash_len), GNUTLS_E_SUCCESS);",
          "539:   ck_assert_int_eq(o_base64url_encode((unsigned char *)s_hash, s_hash_len/2, (unsigned char *)s_hash_encoded, &s_hash_encoded_len), 1);",
          "541:   ck_assert_str_eq(s_hash_encoded, r_jwt_get_claim_str_value(jwt, \"s_hash\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "540:   s_hash_encoded[s_hash_encoded_len] = '\\0';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "590:   s_data.size = o_strlen(STATE);",
          "591:   ck_assert_int_eq(gnutls_fingerprint(alg, &s_data, s_hash, &s_hash_len), GNUTLS_E_SUCCESS);",
          "592:   ck_assert_int_eq(o_base64url_encode((unsigned char *)s_hash, s_hash_len/2, (unsigned char *)s_hash_encoded, &s_hash_encoded_len), 1);",
          "594:   ck_assert_str_eq(s_hash_encoded, r_jwt_get_claim_str_value(jwt, \"s_hash\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594:   s_hash_encoded[s_hash_encoded_len] = '\\0';",
          "",
          "---------------"
        ],
        "test/glewlwyd_oidc_hybrid_id_token_code.c||test/glewlwyd_oidc_hybrid_id_token_code.c": [
          "File: test/glewlwyd_oidc_hybrid_id_token_code.c -> test/glewlwyd_oidc_hybrid_id_token_code.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   at_data.size = o_strlen(code);",
          "118:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &at_data, at_hash, &at_hash_len), GNUTLS_E_SUCCESS);",
          "119:   ck_assert_int_eq(o_base64url_encode((unsigned char *)at_hash, at_hash_len/2, (unsigned char *)at_hash_encoded, &at_hash_encoded_len), 1);",
          "120:   ck_assert_str_eq(at_hash_encoded, json_string_value(json_object_get(j_payload, \"c_hash\")));",
          "122:   ulfius_clean_response(&resp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:   at_hash_encoded[at_hash_encoded_len] = '\\0';",
          "",
          "---------------"
        ],
        "test/glewlwyd_oidc_hybrid_id_token_token_code.c||test/glewlwyd_oidc_hybrid_id_token_token_code.c": [
          "File: test/glewlwyd_oidc_hybrid_id_token_token_code.c -> test/glewlwyd_oidc_hybrid_id_token_token_code.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   at_data.size = o_strlen(access_token);",
          "99:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &at_data, at_hash, &at_hash_len), GNUTLS_E_SUCCESS);",
          "100:   ck_assert_int_eq(o_base64url_encode((unsigned char *)at_hash, at_hash_len/2, (unsigned char *)at_hash_encoded, &at_hash_encoded_len), 1);",
          "101:   ck_assert_str_eq(at_hash_encoded, json_string_value(json_object_get(j_payload, \"at_hash\")));",
          "103:   at_data.data = (unsigned char*)code;",
          "104:   at_data.size = o_strlen(code);",
          "105:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &at_data, at_hash, &at_hash_len), GNUTLS_E_SUCCESS);",
          "106:   ck_assert_int_eq(o_base64url_encode((unsigned char *)at_hash, at_hash_len/2, (unsigned char *)at_hash_encoded, &at_hash_encoded_len), 1);",
          "107:   ck_assert_str_eq(at_hash_encoded, json_string_value(json_object_get(j_payload, \"c_hash\")));",
          "109:   ulfius_clean_response(&resp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:   at_hash_encoded[at_hash_encoded_len] = '\\0';",
          "108:   at_hash_encoded[at_hash_encoded_len] = '\\0';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:   at_data.size = o_strlen(access_token);",
          "167:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &at_data, at_hash, &at_hash_len), GNUTLS_E_SUCCESS);",
          "168:   ck_assert_int_eq(o_base64url_encode((unsigned char *)at_hash, at_hash_len/2, (unsigned char *)at_hash_encoded, &at_hash_encoded_len), 1);",
          "169:   ck_assert_str_eq(at_hash_encoded, json_string_value(json_object_get(j_payload, \"at_hash\")));",
          "171:   at_data.data = (unsigned char*)code;",
          "172:   at_data.size = o_strlen(code);",
          "173:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &at_data, at_hash, &at_hash_len), GNUTLS_E_SUCCESS);",
          "174:   ck_assert_int_eq(o_base64url_encode((unsigned char *)at_hash, at_hash_len/2, (unsigned char *)at_hash_encoded, &at_hash_encoded_len), 1);",
          "175:   ck_assert_str_eq(at_hash_encoded, json_string_value(json_object_get(j_payload, \"c_hash\")));",
          "177:   ulfius_clean_response(&resp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:   at_hash_encoded[at_hash_encoded_len] = '\\0';",
          "178:   at_hash_encoded[at_hash_encoded_len] = '\\0';",
          "",
          "---------------"
        ],
        "test/glewlwyd_oidc_implicit_id_token_token.c||test/glewlwyd_oidc_implicit_id_token_token.c": [
          "File: test/glewlwyd_oidc_implicit_id_token_token.c -> test/glewlwyd_oidc_implicit_id_token_token.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   at_data.size = o_strlen(access_token);",
          "100:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &at_data, at_hash, &at_hash_len), GNUTLS_E_SUCCESS);",
          "101:   ck_assert_int_eq(o_base64url_encode((unsigned char *)at_hash, at_hash_len/2, (unsigned char *)at_hash_encoded, &at_hash_encoded_len), 1);",
          "102:   ck_assert_str_eq(at_hash_encoded, json_string_value(json_object_get(j_payload, \"at_hash\")));",
          "104:   ulfius_clean_response(&resp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   at_hash_encoded[at_hash_encoded_len] = '\\0';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:   at_data.size = o_strlen(access_token);",
          "157:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &at_data, at_hash, &at_hash_len), GNUTLS_E_SUCCESS);",
          "158:   ck_assert_int_eq(o_base64url_encode((unsigned char *)at_hash, at_hash_len/2, (unsigned char *)at_hash_encoded, &at_hash_encoded_len), 1);",
          "159:   ck_assert_str_eq(at_hash_encoded, json_string_value(json_object_get(j_payload, \"at_hash\")));",
          "161:   ulfius_clean_response(&resp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:   at_hash_encoded[at_hash_encoded_len] = '\\0';",
          "",
          "---------------"
        ],
        "test/glewlwyd_scheme_webauthn.c||test/glewlwyd_scheme_webauthn.c": [
          "File: test/glewlwyd_scheme_webauthn.c -> test/glewlwyd_scheme_webauthn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: struct _u_request user_req;",
          "217: struct _u_request admin_req;",
          "219: static char * get_file_content(const char * file_path) {",
          "220:   char * buffer = NULL;",
          "221:   size_t length, res;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219: static int oh_my_base64_encode(const unsigned char * src, size_t len, unsigned char * out, size_t * out_len) {",
          "220:   int ret = o_base64_encode(src, len, out, out_len);",
          "221:   if (out != NULL) {",
          "222:     out[*out_len] = '\\0';",
          "223:   }",
          "224:   return ret;",
          "225: }",
          "227: static int oh_my_base64url_encode(const unsigned char * src, size_t len, unsigned char * out, size_t * out_len) {",
          "228:   int ret = o_base64url_encode(src, len, out, out_len);",
          "229:   if (out != NULL) {",
          "230:     out[*out_len] = '\\0';",
          "231:   }",
          "232:   return ret;",
          "233: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "600:                             \"webauthn.create\");",
          "602:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "604:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "605:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "613:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "603:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "606:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "609:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "610:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "619:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "622:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "625:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "626:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "749:   cbor_decref(&cose_pair.key);",
          "751:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "753:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "754:   att_obj_ser_enc_len = 0;",
          "757:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "758:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "752:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "755:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "768:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "771:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "859:                             \"webauthn.create\");",
          "860:   ck_assert_ptr_ne(j_client_data, NULL);",
          "861:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "863:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "864:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "872:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "862:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "865:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "868:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "869:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "878:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "881:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "884:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "885:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1008:   cbor_decref(&cose_pair.key);",
          "1010:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "1012:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "1013:   att_obj_ser_enc_len = 0;",
          "1016:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "1017:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "1011:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "1014:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "1027:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "1030:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1118:                             \"error\");",
          "1119:   ck_assert_ptr_ne(j_client_data, NULL);",
          "1120:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "1122:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "1123:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "1131:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "1121:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "1124:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "1127:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "1128:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "1137:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "1140:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "1143:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "1144:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1267:   cbor_decref(&cose_pair.key);",
          "1269:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "1271:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "1272:   att_obj_ser_enc_len = 0;",
          "1275:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "1276:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "1270:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "1273:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "1286:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "1289:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1377:                             \"webauthn.create\");",
          "1379:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "1381:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "1382:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "1390:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "1380:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "1383:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "1386:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "1387:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "1396:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "1399:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "1402:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "1403:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1527:   cbor_decref(&cose_pair.key);",
          "1529:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "1531:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "1532:   att_obj_ser_enc_len = 0;",
          "1535:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "1536:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "1530:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "1533:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "1546:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "1549:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1637:                             \"webauthn.create\");",
          "1639:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "1641:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "1642:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "1650:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "1640:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "1643:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "1646:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "1647:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "1656:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "1659:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "1662:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "1663:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1786:   cbor_decref(&cose_pair.key);",
          "1788:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "1790:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "1791:   att_obj_ser_enc_len = 0;",
          "1794:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "1795:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "1789:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "1792:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "1805:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "1808:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1896:                             \"webauthn.create\");",
          "1898:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "1900:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "1901:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "1909:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "1899:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "1902:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "1905:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "1906:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "1915:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "1918:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "1921:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "1922:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2045:   cbor_decref(&cose_pair.key);",
          "2047:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "2049:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "2050:   att_obj_ser_enc_len = 0;",
          "2053:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "2054:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "2048:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "2051:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "2064:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "2067:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2155:                             \"webauthn.create\");",
          "2157:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "2159:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "2160:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "2168:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "2158:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "2161:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "2164:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "2165:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "2174:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "2177:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "2180:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "2181:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2305:   cbor_decref(&cose_pair.key);",
          "2307:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "2309:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "2310:   att_obj_ser_enc_len = 0;",
          "2313:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "2314:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "2308:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "2311:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "2324:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "2327:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2415:                             \"webauthn.create\");",
          "2417:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "2419:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "2420:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "2428:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "2418:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "2421:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "2424:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "2425:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "2434:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "2437:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "2440:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "2441:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2565:   cbor_decref(&cose_pair.key);",
          "2567:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "2569:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "2570:   att_obj_ser_enc_len = 0;",
          "2573:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "2574:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "2568:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "2571:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "2584:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "2587:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2675:                             \"webauthn.create\");",
          "2677:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "2679:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "2680:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "2688:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "2678:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "2681:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "2684:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "2685:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "2694:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "2697:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "2700:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "2701:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2825:   cbor_decref(&cose_pair.key);",
          "2827:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "2829:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "2830:   att_obj_ser_enc_len = 0;",
          "2833:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "2834:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "2828:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "2831:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "2844:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "2847:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2935:                             \"webauthn.create\");",
          "2937:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "2939:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "2940:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "2948:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "2938:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "2941:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "2944:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "2945:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "2954:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "2957:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "2960:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "2961:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3084:   cbor_decref(&cose_pair.key);",
          "3086:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "3088:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "3089:   att_obj_ser_enc_len = 0;",
          "3092:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "3093:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "3087:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "3090:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "3103:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "3106:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3194:                             \"webauthn.create\");",
          "3196:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "3198:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "3199:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "3207:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "3197:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "3200:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "3203:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "3204:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "3213:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "3216:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "3219:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "3220:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3343:   cbor_decref(&cose_pair.key);",
          "3345:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "3347:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "3348:   att_obj_ser_enc_len = 0;",
          "3351:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "3352:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "3346:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "3349:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "3362:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "3365:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3453:                             \"webauthn.create\");",
          "3455:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "3457:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "3458:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "3466:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "3456:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "3459:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "3462:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "3463:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "3472:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "3475:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "3478:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "3479:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3602:   cbor_decref(&cose_pair.key);",
          "3604:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "3606:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "3607:   att_obj_ser_enc_len = 0;",
          "3610:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "3611:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "3605:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "3608:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "3621:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "3624:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3712:                             \"webauthn.create\");",
          "3714:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "3716:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "3717:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "3725:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "3715:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "3718:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "3721:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "3722:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "3731:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "3734:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "3737:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "3738:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3861:   cbor_decref(&cose_pair.key);",
          "3863:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "3865:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "3866:   att_obj_ser_enc_len = 0;",
          "3869:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "3870:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "3864:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "3867:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "3880:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "3883:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3971:                             \"webauthn.create\");",
          "3973:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "3975:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "3976:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "3984:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "3974:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "3977:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "3980:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "3981:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "3990:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "3993:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "3996:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "3997:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4121:   cbor_decref(&cose_pair.key);",
          "4123:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "4125:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "4126:   att_obj_ser_enc_len = 0;",
          "4129:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "4130:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "4124:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "4127:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "4140:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "4143:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4231:                             \"webauthn.create\");",
          "4233:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "4235:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "4236:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "4244:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "4234:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "4237:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "4240:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "4241:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "4250:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "4253:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "4256:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "4257:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4386:   cbor_decref(&cose_pair.key);",
          "4388:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "4390:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "4391:   att_obj_ser_enc_len = 0;",
          "4394:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "4395:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "4389:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "4392:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "4405:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "4408:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4496:                             \"webauthn.create\");",
          "4498:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "4500:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "4501:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "4509:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "4499:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "4502:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "4505:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "4506:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "4515:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "4518:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "4521:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "4522:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4645:   cbor_decref(&cose_pair.key);",
          "4647:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "4649:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "4650:   att_obj_ser_enc_len = 0;",
          "4653:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "4654:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "4648:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "4651:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "4664:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "4667:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4755:                             \"webauthn.create\");",
          "4757:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "4759:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "4760:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "4768:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "4758:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "4761:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "4764:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "4765:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "4774:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "4777:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "4780:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "4781:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4905:   cbor_decref(&cose_pair.key);",
          "4907:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "4909:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "4910:   att_obj_ser_enc_len = 0;",
          "4913:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "4914:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "4908:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "4911:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "4924:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "4927:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "5015:                             \"webauthn.create\");",
          "5017:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "5019:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "5020:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "5028:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "5018:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "5021:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "5024:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "5025:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "5034:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "5037:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "5040:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "5041:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "5164:   cbor_decref(&cose_pair.key);",
          "5166:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "5168:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "5169:   att_obj_ser_enc_len = 0;",
          "5172:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "5173:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "5167:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "5170:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "5183:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "5186:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "5274:                             \"webauthn.create\");",
          "5276:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "5278:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "5279:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "5287:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "5277:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "5280:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "5283:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "5284:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "5293:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "5296:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "5299:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "5300:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "5424:   cbor_decref(&cose_pair.key);",
          "5426:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "5428:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "5429:   att_obj_ser_enc_len = 0;",
          "5432:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "5433:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "5427:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "5430:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "5443:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "5446:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "5534:                             \"webauthn.create\");",
          "5536:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "5538:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "5539:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "5547:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "5537:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "5540:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "5543:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "5544:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "5553:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "5556:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "5559:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "5560:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "5684:   cbor_decref(&cose_pair.key);",
          "5686:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "5688:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "5689:   att_obj_ser_enc_len = 0;",
          "5692:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "5693:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "5687:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "5690:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "5703:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "5706:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "5794:                             \"webauthn.create\");",
          "5796:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "5798:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "5799:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "5807:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "5797:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "5800:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "5803:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "5804:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "5813:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "5816:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "5819:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "5820:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "5944:   cbor_decref(&cose_pair.key);",
          "5946:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "5948:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "5949:   att_obj_ser_enc_len = 0;",
          "5952:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "5953:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "5947:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "5950:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "5963:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "5966:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "6054:                             \"webauthn.create\");",
          "6056:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "6058:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "6059:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "6067:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "6057:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "6060:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "6063:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "6064:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "6073:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "6076:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "6079:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "6080:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "6203:   cbor_decref(&cose_pair.key);",
          "6205:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "6207:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "6208:   att_obj_ser_enc_len = 0;",
          "6211:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "6212:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "6206:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "6209:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "6222:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "6225:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "6313:                             \"webauthn.create\");",
          "6315:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "6317:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "6318:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "6326:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "6316:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "6319:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "6322:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "6323:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "6332:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "6335:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "6338:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "6339:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "6464:   cbor_decref(&cose_pair.key);",
          "6466:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "6468:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "6469:   att_obj_ser_enc_len = 0;",
          "6472:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "6473:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "6467:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "6470:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "6483:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "6486:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "6574:                             \"webauthn.create\");",
          "6576:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "6578:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "6579:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "6587:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "6577:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "6580:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "6583:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "6584:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "6593:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "6596:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "6599:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "6600:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "6725:   cbor_decref(&cose_pair.key);",
          "6727:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "6729:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "6730:   att_obj_ser_enc_len = 0;",
          "6733:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "6734:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "6728:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "6731:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "6744:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "6747:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "6835:                             \"webauthn.create\");",
          "6837:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "6839:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "6840:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "6848:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "6838:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "6841:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "6844:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "6845:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "6854:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "6857:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "6860:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "6861:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "6985:   cbor_decref(&cose_pair.key);",
          "6987:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "6989:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "6990:   att_obj_ser_enc_len = 0;",
          "6993:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "6994:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "6988:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "6991:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "7004:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "7007:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "7095:                             \"webauthn.create\");",
          "7097:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "7099:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "7100:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "7108:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "7098:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "7101:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "7104:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "7105:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "7114:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "7117:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "7120:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "7121:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "7246:   cbor_decref(&cose_pair.key);",
          "7248:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "7250:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "7251:   att_obj_ser_enc_len = 0;",
          "7254:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "7255:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "7249:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "7252:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "7265:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "7268:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "7356:                             \"webauthn.create\");",
          "7358:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "7360:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "7361:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "7369:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "7359:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "7362:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "7365:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "7366:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "7375:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "7378:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "7381:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "7382:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "7506:   cbor_decref(&cose_pair.key);",
          "7508:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "7510:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "7511:   att_obj_ser_enc_len = 0;",
          "7514:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "7515:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "7509:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "7512:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "7525:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "7528:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "7616:                             \"webauthn.create\");",
          "7618:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "7620:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "7621:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "7629:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "7619:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "7622:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "7625:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "7626:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "7635:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "7638:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "7641:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "7642:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "7767:   cbor_decref(&cose_pair.key);",
          "7769:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "7771:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "7772:   att_obj_ser_enc_len = 0;",
          "7775:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "7776:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "7770:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "7773:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "7786:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "7789:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "7877:                             \"webauthn.create\");",
          "7879:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "7881:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "7882:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "7890:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "7880:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "7883:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "7886:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "7887:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "7896:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "7899:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "7902:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "7903:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "8027:   cbor_decref(&cose_pair.key);",
          "8029:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "8031:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "8032:   att_obj_ser_enc_len = 0;",
          "8035:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "8036:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "8030:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "8033:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "8046:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "8049:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "8137:                             \"webauthn.create\");",
          "8139:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "8141:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "8142:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "8150:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "8140:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "8143:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "8146:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "8147:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "8156:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "8159:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "8162:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "8163:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "8287:   cbor_decref(&cose_pair.key);",
          "8289:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "8291:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "8292:   att_obj_ser_enc_len = 0;",
          "8295:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "8296:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "8290:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "8293:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "8306:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "8309:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "8397:                             \"webauthn.create\");",
          "8399:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "8401:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "8402:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "8410:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "8400:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "8403:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "8406:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "8407:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "8416:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "8419:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "8422:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "8423:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "8546:   cbor_decref(&cose_pair.key);",
          "8548:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "8550:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "8551:   att_obj_ser_enc_len = 0;",
          "8554:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "8555:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "8549:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "8552:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "8565:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "8568:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "8654:                             \"webauthn.create\");",
          "8656:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "8658:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "8659:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "8667:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "8657:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "8660:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "8663:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "8664:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "8673:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "8676:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "8679:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "8680:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "8803:   cbor_decref(&cose_pair.key);",
          "8805:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "8807:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "8808:   att_obj_ser_enc_len = 0;",
          "8811:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "8812:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "8806:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "8809:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "8822:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "8825:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "8913:                             \"webauthn.create\");",
          "8915:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "8917:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "8918:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "8926:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "8916:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "8919:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "8922:   ck_assert_int_eq(o_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "8923:   ck_assert_int_eq(o_base64url_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "8932:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "8935:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "8938:   ck_assert_int_eq(oh_my_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "8939:   ck_assert_int_eq(oh_my_base64url_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "9062:   cbor_decref(&cose_pair.key);",
          "9064:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "9066:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "9067:   att_obj_ser_enc_len = 0;",
          "9070:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "9071:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "9065:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "9068:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "9081:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "9084:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "9170:                             \"webauthn.create\");",
          "9172:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "9174:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "9175:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "9183:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "9173:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "9176:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "9179:   ck_assert_int_eq(o_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "9180:   ck_assert_int_eq(o_base64url_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "9189:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "9192:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "9195:   ck_assert_int_eq(oh_my_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "9196:   ck_assert_int_eq(oh_my_base64url_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "9319:   cbor_decref(&cose_pair.key);",
          "9321:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "9323:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "9324:   att_obj_ser_enc_len = 0;",
          "9327:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "9328:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "9322:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "9325:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "9338:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "9341:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "9427:                             \"webauthn.create\");",
          "9429:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "9431:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "9432:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "9440:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "9430:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "9433:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "9436:   ck_assert_int_eq(o_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "9437:   ck_assert_int_eq(o_base64url_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "9446:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "9449:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "9452:   ck_assert_int_eq(oh_my_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "9453:   ck_assert_int_eq(oh_my_base64url_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "9576:   cbor_decref(&cose_pair.key);",
          "9578:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "9580:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "9581:   att_obj_ser_enc_len = 0;",
          "9584:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "9585:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "9579:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "9582:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "9595:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "9598:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "9694:                             \"webauthn.get\");",
          "9696:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "9698:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "9699:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "9701:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "9702:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "9703:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "9697:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "9700:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "9713:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "9716:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "9706:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "9713:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "9709:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "9710:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "9725:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "9726:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "9725:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "9726:   auth_data_len += client_data_json_hash_len;",
          "9730:   key_data.data = auth_data;",
          "9731:   key_data.size = auth_data_len;",
          "9733:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "9736:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "9739:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "9740:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "9728:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "9735:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "9737:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "9744:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "9751:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "9753:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "9824:                             \"webauthn.get\");",
          "9826:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "9828:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "9829:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "9831:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "9832:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "9833:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "9827:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "9830:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "9843:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "9846:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "9836:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "9843:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "9839:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "9840:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "9855:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "9856:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "9855:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "9856:   auth_data_len += client_data_json_hash_len;",
          "9860:   key_data.data = auth_data;",
          "9861:   key_data.size = auth_data_len;",
          "9863:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "9866:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "9869:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "9870:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "9858:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "9865:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "9867:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "9874:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "9881:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "9883:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "9955:                             \"webauthn.get\");",
          "9957:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "9959:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "9960:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "9962:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "9963:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "9964:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "9958:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "9961:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "9974:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "9977:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "9967:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "9974:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "9970:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "9971:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "9986:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "9987:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "9986:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "9987:   auth_data_len += client_data_json_hash_len;",
          "9991:   key_data.data = auth_data;",
          "9992:   key_data.size = auth_data_len;",
          "9994:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "9997:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "10000:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "10001:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "9989:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "9996:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "9998:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "10005:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10012:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10014:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "10086:                             \"error\");",
          "10088:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "10090:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "10091:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "10093:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "10094:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "10095:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "10089:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10092:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "10105:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10108:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "10098:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "10105:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "10101:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10102:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "10117:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10118:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "10117:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "10118:   auth_data_len += client_data_json_hash_len;",
          "10122:   key_data.data = auth_data;",
          "10123:   key_data.size = auth_data_len;",
          "10125:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "10128:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "10131:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "10132:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "10120:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10127:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10129:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "10136:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10143:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10145:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "10219:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "10220:   client_data_json[0]++;",
          "10222:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "10223:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "10225:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "10226:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "10227:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "10221:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10224:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "10237:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10240:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "10230:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "10237:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "10233:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10234:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "10249:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10250:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "10249:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "10250:   auth_data_len += client_data_json_hash_len;",
          "10254:   key_data.data = auth_data;",
          "10255:   key_data.size = auth_data_len;",
          "10257:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "10260:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "10263:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "10264:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "10252:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10259:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10261:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "10268:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10275:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10277:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "10349:                             \"webauthn.get\");",
          "10351:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "10353:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "10354:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "10356:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "10357:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "10358:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "10352:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10355:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "10368:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10371:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "10361:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "10368:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "10364:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10365:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "10380:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10381:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "10381:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "10382:   auth_data_len += client_data_json_hash_len;",
          "10386:   key_data.data = auth_data;",
          "10387:   key_data.size = auth_data_len;",
          "10389:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "10392:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "10395:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "10396:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "10384:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10391:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10393:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "10400:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10407:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10409:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "10481:                             \"webauthn.get\");",
          "10483:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "10485:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "10486:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "10488:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "10489:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "10490:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "10484:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10487:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "10500:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10503:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "10493:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "10500:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "10496:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10497:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "10512:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10513:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "10512:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "10513:   auth_data_len += client_data_json_hash_len;",
          "10517:   key_data.data = auth_data;",
          "10518:   key_data.size = auth_data_len;",
          "10520:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "10523:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "10526:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "10527:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "10515:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10522:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10524:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "10531:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10538:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10540:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "10612:                             \"webauthn.get\");",
          "10614:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "10616:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "10617:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "10619:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "10620:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "10621:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "10615:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10618:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "10631:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10634:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "10624:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "10631:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "10627:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10628:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "10643:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10644:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "10644:   auth_data[auth_data_len]++;",
          "10645:   auth_data_len += client_data_json_hash_len;",
          "10649:   key_data.data = auth_data;",
          "10650:   key_data.size = auth_data_len;",
          "10652:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "10655:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "10658:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "10659:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "10647:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10654:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10656:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "10663:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10670:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10672:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "10670:                                 \"clientDataJSON\", client_data_json_enc,",
          "10671:                                 \"authenticatorData\", auth_data_enc,",
          "10672:                                 \"signature\", signature_enc);",
          "10674:   ck_assert_int_eq(run_simple_test(&user_req, \"POST\", SERVER_URI \"profile/scheme/register/\", NULL, NULL, j_attestation, NULL, 401, NULL, NULL, NULL), 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10689:   ck_assert_ptr_ne(NULL, j_attestation);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "10744:                             \"webauthn.get\");",
          "10746:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "10748:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "10749:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "10751:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "10752:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "10753:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "10747:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10750:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "10763:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10766:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "10756:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "10763:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "10759:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10760:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "10775:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10776:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "10775:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "10776:   auth_data_len += client_data_json_hash_len;",
          "10780:   key_data.data = auth_data;",
          "10781:   key_data.size = auth_data_len;",
          "",
          "[Removed Lines]",
          "10778:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "",
          "[Added Lines]",
          "10794:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "10783:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "10784:   signature.data[0]++;",
          "10787:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "10790:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "10791:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "10786:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10788:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "10802:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10804:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "10876:                             \"webauthn.get\");",
          "10878:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "10880:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "10881:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "10883:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "10884:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "10885:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "10879:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10882:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "10895:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "10898:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "10888:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "10895:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "10891:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10892:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "10907:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "10908:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "10907:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "10908:   auth_data_len += client_data_json_hash_len;",
          "10912:   key_data.data = auth_data;",
          "10913:   key_data.size = auth_data_len;",
          "10915:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "10918:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "10921:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "10922:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "10910:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10917:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10919:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "10926:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "10933:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "10935:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "11007:                             \"webauthn.get\");",
          "11009:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "11011:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "11012:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "11014:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "11015:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "11016:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "11010:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "11013:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "11026:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "11029:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "11019:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "11026:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "11022:   ck_assert_int_eq(o_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "11023:   ck_assert_int_eq(o_base64url_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "11038:   ck_assert_int_eq(oh_my_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "11039:   ck_assert_int_eq(oh_my_base64url_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "11038:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "11039:   auth_data_len += client_data_json_hash_len;",
          "11043:   key_data.data = auth_data;",
          "11044:   key_data.size = auth_data_len;",
          "11046:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "11049:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "11052:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "11053:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "11041:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "11048:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "11050:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "11057:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "11064:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "11066:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "11162:                             \"webauthn.get\");",
          "11164:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "11166:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "11167:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "11169:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "11170:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "11171:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "11165:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "11168:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "11181:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "11184:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "11174:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "11181:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "11177:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "11178:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "11193:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "11194:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "11193:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "11194:   auth_data_len += client_data_json_hash_len;",
          "11198:   key_data.data = auth_data;",
          "11199:   key_data.size = auth_data_len;",
          "11201:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "11204:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "11207:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "11208:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "11196:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "11203:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "11205:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "11212:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "11219:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "11221:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "11292:                             \"webauthn.get\");",
          "11294:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "11296:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "11297:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "11299:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "11300:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "11301:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY_2;",
          "",
          "[Removed Lines]",
          "11295:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "11298:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "11311:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "11314:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "11304:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "11311:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "11307:   ck_assert_int_eq(o_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "11308:   ck_assert_int_eq(o_base64url_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "11323:   ck_assert_int_eq(oh_my_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "11324:   ck_assert_int_eq(oh_my_base64url_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "11323:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "11324:   auth_data_len += client_data_json_hash_len;",
          "11328:   key_data.data = auth_data;",
          "11329:   key_data.size = auth_data_len;",
          "11331:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "11334:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "11337:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "11338:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "11326:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "11333:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "11335:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "11342:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "11349:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "11351:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "11422:                             \"webauthn.get\");",
          "11424:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "11426:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "11427:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "11429:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "11430:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "11431:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY_2;",
          "",
          "[Removed Lines]",
          "11425:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "11428:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "11441:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "11444:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "11434:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "11441:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "11437:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "11438:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "11453:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "11454:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "11453:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "11454:   auth_data_len += client_data_json_hash_len;",
          "11458:   key_data.data = auth_data;",
          "11459:   key_data.size = auth_data_len;",
          "11461:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "11464:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "11467:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "11468:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "11456:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "11463:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "11465:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "11472:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "11479:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "11481:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "11552:                             \"webauthn.get\");",
          "11554:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "11556:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "11557:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "11559:   ck_assert_int_eq(gnutls_privkey_init(&privkey), 0);",
          "11560:   ck_assert_int_eq(gnutls_x509_privkey_init(&key), 0);",
          "11561:   key_data.data = (unsigned char *)CREDENTIAL_PRIVATE_KEY;",
          "",
          "[Removed Lines]",
          "11555:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "11558:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "[Added Lines]",
          "11571:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "11574:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "11564:   ck_assert_int_eq(gnutls_privkey_import_x509(privkey, key, 0), 0);",
          "11571:   memset(auth_data, 0, AUTHENTICATOR_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "11567:   ck_assert_int_eq(o_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "11568:   ck_assert_int_eq(o_base64url_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "11583:   ck_assert_int_eq(oh_my_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "11584:   ck_assert_int_eq(oh_my_base64url_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "11583:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, (auth_data+auth_data_len), &client_data_json_hash_len), GNUTLS_E_SUCCESS);",
          "11584:   auth_data_len += client_data_json_hash_len;",
          "11588:   key_data.data = auth_data;",
          "11589:   key_data.size = auth_data_len;",
          "11591:   ck_assert_int_eq(gnutls_privkey_sign_data(privkey, GNUTLS_DIG_SHA256, 0, &key_data, &signature), 0);",
          "11594:   ck_assert_ptr_ne((signature_enc = o_malloc(signature_enc_len+1)), NULL);",
          "11597:   j_attestation = json_pack(\"{ss ss ss s{ss ss s{ss% ss% ss s{ss ss ss}}}}\",",
          "11598:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "11586:   ck_assert_int_eq(o_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "11593:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "11595:   ck_assert_int_eq(o_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "[Added Lines]",
          "11602:   ck_assert_int_eq(oh_my_base64_encode(auth_data, 37, auth_data_enc, &auth_data_enc_len), 1);",
          "11609:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, NULL, &signature_enc_len), 1);",
          "11611:   ck_assert_int_eq(oh_my_base64_encode(signature.data, signature.size, signature_enc, &signature_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "11640:   unsigned char credential_id_enc[WEBAUTHN_CREDENTIAL_ID_LEN*2];",
          "11641:   size_t credential_id_enc_len;",
          "11644:   j_params = json_pack(\"{sssssss{ssss%}}\",",
          "11645:                       \"username\", USERNAME,",
          "11646:                       \"scheme_type\", MODULE_MODULE,",
          "",
          "[Removed Lines]",
          "11643:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "[Added Lines]",
          "11659:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "11660:   unsigned char credential_id_enc[WEBAUTHN_CREDENTIAL_ID_LEN*2];",
          "11661:   size_t credential_id_enc_len;",
          "11664:   j_params = json_pack(\"{sssssss{ssss%}}\",",
          "11665:                       \"username\", USERNAME,",
          "11666:                       \"scheme_type\", MODULE_MODULE,",
          "",
          "[Removed Lines]",
          "11663:   ck_assert_int_eq(o_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "[Added Lines]",
          "11679:   ck_assert_int_eq(oh_my_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "11680:   unsigned char credential_id_enc[WEBAUTHN_CREDENTIAL_ID_LEN*2];",
          "11681:   size_t credential_id_enc_len;",
          "11684:   j_params = json_pack(\"{sssssss{ssss%}}\",",
          "11685:                       \"username\", USERNAME,",
          "11686:                       \"scheme_type\", MODULE_MODULE,",
          "",
          "[Removed Lines]",
          "11683:   ck_assert_int_eq(o_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "[Added Lines]",
          "11699:   ck_assert_int_eq(oh_my_base64_encode(credential_id_2, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "11751:                             \"webauthn.create\");",
          "11753:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "11755:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "11756:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "11764:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "11754:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "11757:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "11760:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "11761:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "11770:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "11773:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "11776:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "11777:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "11841:   key_data.size = o_strlen(ANDROID_SAFETYNET_CERT_FAKE);",
          "11842:   ck_assert_int_ge(gnutls_x509_crt_import(cert, &key_data, GNUTLS_X509_FMT_PEM), 0);",
          "11843:   ck_assert_int_eq(gnutls_x509_crt_export(cert, GNUTLS_X509_FMT_DER, cert_der, &cert_der_len), 0);",
          "11845:   cert_der_enc = o_malloc(cert_der_enc_len+1);",
          "11848:   ck_assert_int_eq(r_jwt_init(&jwt_response), RHN_OK);",
          "11849:   ck_assert_int_eq(r_jwt_set_sign_alg(jwt_response, R_JWA_ALG_RS256), RHN_OK);",
          "",
          "[Removed Lines]",
          "11844:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "11846:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "[Added Lines]",
          "11860:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "11862:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "11862:   key_data.size = nonce_len;",
          "11863:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, nonce_hash, &nonce_hash_len), GNUTLS_E_SUCCESS);",
          "11866:   j_grant = json_pack(\"{sssisssssosos[s]}\",",
          "11867:                       \"nonce\", nonce_hash_enc,",
          "11868:                       \"timestampMs\", time(NULL)*1000,",
          "",
          "[Removed Lines]",
          "11865:   ck_assert_int_eq(o_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "[Added Lines]",
          "11881:   ck_assert_int_eq(oh_my_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "11908:   cbor_decref(&cose_pair.key);",
          "11910:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "11912:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "11913:   att_obj_ser_enc_len = 0;",
          "11916:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "11917:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "11911:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "11914:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "11927:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "11930:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "12020:                             \"webauthn.create\");",
          "12022:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "12024:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "12025:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "12033:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "12023:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "12026:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "12029:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "12030:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "12039:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "12042:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "12045:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "12046:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "12110:   key_data.size = o_strlen(ANDROID_SAFETYNET_CERT_FAKE);",
          "12111:   ck_assert_int_ge(gnutls_x509_crt_import(cert, &key_data, GNUTLS_X509_FMT_PEM), 0);",
          "12112:   ck_assert_int_eq(gnutls_x509_crt_export(cert, GNUTLS_X509_FMT_DER, cert_der, &cert_der_len), 0);",
          "12114:   cert_der_enc = o_malloc(cert_der_enc_len+1);",
          "12117:   ck_assert_int_eq(r_jwt_init(&jwt_response), RHN_OK);",
          "12118:   ck_assert_int_eq(r_jwt_set_sign_alg(jwt_response, R_JWA_ALG_RS256), RHN_OK);",
          "",
          "[Removed Lines]",
          "12113:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "12115:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "[Added Lines]",
          "12129:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "12131:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "12131:   key_data.size = nonce_len;",
          "12132:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, nonce_hash, &nonce_hash_len), GNUTLS_E_SUCCESS);",
          "12135:   j_grant = json_pack(\"{sssisssssosos[s]}\",",
          "12136:                       \"nonce\", nonce_hash_enc,",
          "12137:                       \"timestampMs\", time(NULL)*1000,",
          "",
          "[Removed Lines]",
          "12134:   ck_assert_int_eq(o_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "[Added Lines]",
          "12150:   ck_assert_int_eq(oh_my_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "12172:   cbor_decref(&cose_pair.key);",
          "12174:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "12176:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "12177:   att_obj_ser_enc_len = 0;",
          "12180:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "12181:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "12175:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "12178:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "12191:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "12194:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "12284:                             \"webauthn.create\");",
          "12286:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "12288:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "12289:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "12297:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "12287:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "12290:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "12293:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "12294:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "12303:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "12306:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "12309:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "12310:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "12374:   key_data.size = o_strlen(ANDROID_SAFETYNET_CERT_FAKE);",
          "12375:   ck_assert_int_ge(gnutls_x509_crt_import(cert, &key_data, GNUTLS_X509_FMT_PEM), 0);",
          "12376:   ck_assert_int_eq(gnutls_x509_crt_export(cert, GNUTLS_X509_FMT_DER, cert_der, &cert_der_len), 0);",
          "12378:   cert_der_enc = o_malloc(cert_der_enc_len+1);",
          "12380:   cert_der_enc[0]++;",
          "12382:   ck_assert_int_eq(r_jwt_init(&jwt_response), RHN_OK);",
          "",
          "[Removed Lines]",
          "12377:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "12379:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "[Added Lines]",
          "12393:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "12395:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "12396:   key_data.size = nonce_len;",
          "12397:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, nonce_hash, &nonce_hash_len), GNUTLS_E_SUCCESS);",
          "12400:   j_grant = json_pack(\"{sssisssssosos[s]}\",",
          "12401:                       \"nonce\", nonce_hash_enc,",
          "12402:                       \"timestampMs\", time(NULL)*1000,",
          "",
          "[Removed Lines]",
          "12399:   ck_assert_int_eq(o_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "[Added Lines]",
          "12415:   ck_assert_int_eq(oh_my_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "12437:   cbor_decref(&cose_pair.key);",
          "12439:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "12441:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "12442:   att_obj_ser_enc_len = 0;",
          "12445:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "12446:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "12440:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "12443:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "12456:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "12459:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "12549:                             \"webauthn.create\");",
          "12551:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "12553:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "12554:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "12562:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "12552:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "12555:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "12558:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "12559:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "12568:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "12571:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "12574:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "12575:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "12639:   key_data.size = o_strlen(ANDROID_SAFETYNET_CERT_FAKE);",
          "12640:   ck_assert_int_ge(gnutls_x509_crt_import(cert, &key_data, GNUTLS_X509_FMT_PEM), 0);",
          "12641:   ck_assert_int_eq(gnutls_x509_crt_export(cert, GNUTLS_X509_FMT_DER, cert_der, &cert_der_len), 0);",
          "12643:   cert_der_enc = o_malloc(cert_der_enc_len+1);",
          "12646:   ck_assert_int_eq(r_jwt_init(&jwt_response), RHN_OK);",
          "12647:   ck_assert_int_eq(r_jwt_set_sign_alg(jwt_response, R_JWA_ALG_RS256), RHN_OK);",
          "",
          "[Removed Lines]",
          "12642:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "12644:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "[Added Lines]",
          "12658:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "12660:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "12657:   key_data.size = nonce_len;",
          "12658:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, nonce_hash, &nonce_hash_len), GNUTLS_E_SUCCESS);",
          "12661:   j_grant = json_pack(\"{sssisssssosos[s]}\",",
          "12662:                       \"nonce\", nonce_hash_enc,",
          "12663:                       \"timestampMs\", time(NULL)*1000,",
          "",
          "[Removed Lines]",
          "12660:   ck_assert_int_eq(o_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "[Added Lines]",
          "12676:   ck_assert_int_eq(oh_my_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "12698:   cbor_decref(&cose_pair.key);",
          "12700:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "12702:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "12703:   att_obj_ser_enc_len = 0;",
          "12706:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "12707:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "12701:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "12704:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "12717:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "12720:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "12810:                             \"webauthn.create\");",
          "12812:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "12814:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "12815:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "12823:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "12813:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "12816:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "12819:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "12820:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "12829:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "12832:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "12835:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "12836:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "12900:   key_data.size = o_strlen(ANDROID_SAFETYNET_CERT_FAKE);",
          "12901:   ck_assert_int_ge(gnutls_x509_crt_import(cert, &key_data, GNUTLS_X509_FMT_PEM), 0);",
          "12902:   ck_assert_int_eq(gnutls_x509_crt_export(cert, GNUTLS_X509_FMT_DER, cert_der, &cert_der_len), 0);",
          "12904:   cert_der_enc = o_malloc(cert_der_enc_len+1);",
          "12907:   ck_assert_int_eq(r_jwt_init(&jwt_response), RHN_OK);",
          "12908:   ck_assert_int_eq(r_jwt_set_sign_alg(jwt_response, R_JWA_ALG_RS256), RHN_OK);",
          "",
          "[Removed Lines]",
          "12903:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "12905:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "[Added Lines]",
          "12919:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "12921:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "12921:   key_data.size = nonce_len;",
          "12922:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, nonce_hash, &nonce_hash_len), GNUTLS_E_SUCCESS);",
          "12925:   nonce_hash_enc[0]++;",
          "12926:   j_grant = json_pack(\"{sssisssssosos[s]}\",",
          "12927:                       \"nonce\", nonce_hash_enc,",
          "",
          "[Removed Lines]",
          "12924:   ck_assert_int_eq(o_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "[Added Lines]",
          "12940:   ck_assert_int_eq(oh_my_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "12963:   cbor_decref(&cose_pair.key);",
          "12965:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "12967:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "12968:   att_obj_ser_enc_len = 0;",
          "12971:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "12972:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "12966:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "12969:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "12982:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "12985:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "13075:                             \"webauthn.create\");",
          "13077:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "13079:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "13080:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "13088:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "13078:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "13081:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "13084:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "13085:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "13094:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "13097:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "13100:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "13101:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "13165:   key_data.size = o_strlen(ANDROID_SAFETYNET_CERT_FAKE);",
          "13166:   ck_assert_int_ge(gnutls_x509_crt_import(cert, &key_data, GNUTLS_X509_FMT_PEM), 0);",
          "13167:   ck_assert_int_eq(gnutls_x509_crt_export(cert, GNUTLS_X509_FMT_DER, cert_der, &cert_der_len), 0);",
          "13169:   cert_der_enc = o_malloc(cert_der_enc_len+1);",
          "13172:   ck_assert_int_eq(r_jwt_init(&jwt_response), RHN_OK);",
          "13173:   ck_assert_int_eq(r_jwt_set_sign_alg(jwt_response, R_JWA_ALG_RS256), RHN_OK);",
          "",
          "[Removed Lines]",
          "13168:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "13170:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "[Added Lines]",
          "13184:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "13186:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "13186:   key_data.size = nonce_len;",
          "13187:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, nonce_hash, &nonce_hash_len), GNUTLS_E_SUCCESS);",
          "13190:   j_grant = json_pack(\"{sssisssssosos[s]}\",",
          "13191:                       \"nonce\", nonce_hash_enc,",
          "13192:                       \"timestampMs\", time(NULL)*1000,",
          "",
          "[Removed Lines]",
          "13189:   ck_assert_int_eq(o_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "[Added Lines]",
          "13205:   ck_assert_int_eq(oh_my_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "13228:   cbor_decref(&cose_pair.key);",
          "13230:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "13232:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "13233:   att_obj_ser_enc_len = 0;",
          "13236:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "13237:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "13231:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "13234:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "13247:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "13250:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "13340:                             \"webauthn.create\");",
          "13342:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "13344:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "13345:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "13353:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "13343:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "13346:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "13349:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "13350:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "13359:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "13362:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "13365:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "13366:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "13430:   key_data.size = o_strlen(ANDROID_SAFETYNET_CERT_FAKE);",
          "13431:   ck_assert_int_ge(gnutls_x509_crt_import(cert, &key_data, GNUTLS_X509_FMT_PEM), 0);",
          "13432:   ck_assert_int_eq(gnutls_x509_crt_export(cert, GNUTLS_X509_FMT_DER, cert_der, &cert_der_len), 0);",
          "13434:   cert_der_enc = o_malloc(cert_der_enc_len+1);",
          "13437:   ck_assert_int_eq(r_jwt_init(&jwt_response), RHN_OK);",
          "13438:   ck_assert_int_eq(r_jwt_set_sign_alg(jwt_response, R_JWA_ALG_RS256), RHN_OK);",
          "",
          "[Removed Lines]",
          "13433:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "13435:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "[Added Lines]",
          "13449:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "13451:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "13451:   key_data.size = nonce_len;",
          "13452:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, nonce_hash, &nonce_hash_len), GNUTLS_E_SUCCESS);",
          "13455:   j_grant = json_pack(\"{sssisssssosos[s]}\",",
          "13456:                       \"nonce\", nonce_hash_enc,",
          "13457:                       \"timestampMs\", time(NULL)*1000,",
          "",
          "[Removed Lines]",
          "13454:   ck_assert_int_eq(o_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "[Added Lines]",
          "13470:   ck_assert_int_eq(oh_my_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "13492:   cbor_decref(&cose_pair.key);",
          "13494:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "13496:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "13497:   att_obj_ser_enc_len = 0;",
          "13500:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "13501:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "13495:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "13498:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "13511:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "13514:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "13604:                             \"webauthn.create\");",
          "13606:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "13608:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "13609:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "13617:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "13607:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "13610:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "13613:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "13614:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "13623:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "13626:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "13629:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "13630:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "13694:   key_data.size = o_strlen(ANDROID_SAFETYNET_CERT_FAKE);",
          "13695:   ck_assert_int_ge(gnutls_x509_crt_import(cert, &key_data, GNUTLS_X509_FMT_PEM), 0);",
          "13696:   ck_assert_int_eq(gnutls_x509_crt_export(cert, GNUTLS_X509_FMT_DER, cert_der, &cert_der_len), 0);",
          "13698:   cert_der_enc = o_malloc(cert_der_enc_len+1);",
          "13701:   ck_assert_int_eq(r_jwt_init(&jwt_response), RHN_OK);",
          "13702:   ck_assert_int_eq(r_jwt_set_sign_alg(jwt_response, R_JWA_ALG_RS256), RHN_OK);",
          "",
          "[Removed Lines]",
          "13697:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "13699:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "[Added Lines]",
          "13713:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "13715:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "13715:   key_data.size = nonce_len;",
          "13716:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, nonce_hash, &nonce_hash_len), GNUTLS_E_SUCCESS);",
          "13719:   j_grant = json_pack(\"{sssisssssosos[s]}\",",
          "13720:                       \"nonce\", nonce_hash_enc,",
          "13721:                       \"timestampMs\", time(NULL)*1000,",
          "",
          "[Removed Lines]",
          "13718:   ck_assert_int_eq(o_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "[Added Lines]",
          "13734:   ck_assert_int_eq(oh_my_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "13757:   cbor_decref(&cose_pair.key);",
          "13759:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "13761:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "13762:   att_obj_ser_enc_len = 0;",
          "13765:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "13766:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "13760:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "13763:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "13776:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "13779:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "13869:                             \"webauthn.create\");",
          "13871:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "13873:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "13874:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "13882:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "13872:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "13875:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "13878:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "13879:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "13888:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "13891:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "13894:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "13895:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "13959:   key_data.size = o_strlen(ANDROID_SAFETYNET_CERT_FAKE);",
          "13960:   ck_assert_int_ge(gnutls_x509_crt_import(cert, &key_data, GNUTLS_X509_FMT_PEM), 0);",
          "13961:   ck_assert_int_eq(gnutls_x509_crt_export(cert, GNUTLS_X509_FMT_DER, cert_der, &cert_der_len), 0);",
          "13963:   cert_der_enc = o_malloc(cert_der_enc_len+1);",
          "13966:   ck_assert_int_eq(r_jwt_init(&jwt_response), RHN_OK);",
          "13967:   ck_assert_int_eq(r_jwt_set_sign_alg(jwt_response, R_JWA_ALG_RS256), RHN_OK);",
          "",
          "[Removed Lines]",
          "13962:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "13964:   ck_assert_int_eq(o_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "[Added Lines]",
          "13978:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, NULL, &cert_der_enc_len), 1);",
          "13980:   ck_assert_int_eq(oh_my_base64_encode(cert_der, cert_der_len, cert_der_enc, &cert_der_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "13980:   key_data.size = nonce_len;",
          "13981:   ck_assert_int_eq(gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, nonce_hash, &nonce_hash_len), GNUTLS_E_SUCCESS);",
          "13984:   j_grant = json_pack(\"{sssisssssosos[s]}\",",
          "13985:                       \"nonce\", nonce_hash_enc,",
          "13986:                       \"timestampMs\", time(NULL)*1000,",
          "",
          "[Removed Lines]",
          "13983:   ck_assert_int_eq(o_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "[Added Lines]",
          "13999:   ck_assert_int_eq(oh_my_base64_encode(nonce_hash, nonce_hash_len, nonce_hash_enc, &nonce_hash_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "14021:   cbor_decref(&cose_pair.key);",
          "14023:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "14025:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "14026:   att_obj_ser_enc_len = 0;",
          "14029:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "14030:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "14024:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "14027:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "14040:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "14043:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "14130:                             \"webauthn.create\");",
          "14132:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "14134:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "14135:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "14143:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "14133:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "14136:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "14139:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "14140:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "14149:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "14152:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "14155:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "14156:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "14269:   cbor_decref(&cose_pair.key);",
          "14271:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "14273:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "14274:   att_obj_ser_enc_len = 0;",
          "14277:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "14278:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "14272:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "14275:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "14288:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "14291:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "14377:                             \"webauthn.create\");",
          "14379:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "14381:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "14382:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "14390:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "14380:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "14383:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "14386:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "14387:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "14396:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "14399:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "14402:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "14403:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "14517:   cbor_decref(&cose_pair.key);",
          "14519:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "14521:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "14522:   att_obj_ser_enc_len = 0;",
          "14525:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "14526:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "14520:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "14523:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "14536:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "14539:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "14625:                             \"webauthn.create\");",
          "14627:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "14629:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "14630:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "14638:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "14628:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "14631:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "14634:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "14635:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "14644:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "14647:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "14650:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "14651:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "14764:   cbor_decref(&cose_pair.key);",
          "14766:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "14768:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "14769:   att_obj_ser_enc_len = 0;",
          "14772:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "14773:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "14767:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "14770:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "14783:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "14786:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "14872:                             \"webauthn.create\");",
          "14874:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "14876:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "14877:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "14885:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "14875:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "14878:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "14881:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "14882:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "14891:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "14894:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "14897:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "14898:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "15012:   cbor_decref(&cose_pair.key);",
          "15014:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "15016:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "15017:   att_obj_ser_enc_len = 0;",
          "15020:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "15021:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "15015:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "15018:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "15031:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "15034:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "15120:                             \"webauthn.create\");",
          "15122:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "15124:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "15125:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "15133:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "15123:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "15126:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "15129:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "15130:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "15139:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "15142:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "15145:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "15146:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "15252:   cbor_decref(&cose_pair.key);",
          "15254:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "15256:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "15257:   att_obj_ser_enc_len = 0;",
          "15260:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "15261:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "15255:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "15258:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "15271:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "15274:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "15360:                             \"webauthn.create\");",
          "15362:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "15364:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "15365:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "15373:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "15363:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "15366:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "15369:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "15370:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "15379:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "15382:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "15385:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "15386:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "15494:   cbor_decref(&cose_pair.key);",
          "15496:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "15498:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "15499:   att_obj_ser_enc_len = 0;",
          "15502:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "15503:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "15497:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "15500:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "15513:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "15516:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "15602:                             \"webauthn.create\");",
          "15604:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "15606:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "15607:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "15615:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "15605:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "15608:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "15611:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "15612:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "15621:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "15624:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "15627:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "15628:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "15726:   cbor_decref(&cose_pair.key);",
          "15728:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "15730:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "15731:   att_obj_ser_enc_len = 0;",
          "15734:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "15735:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "15729:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "15732:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "15745:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "15748:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "15833:                             \"webauthn.create\");",
          "15835:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "15837:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "15838:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "15846:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "15836:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "15839:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "15842:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "15843:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "15852:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "15855:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "15858:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "15859:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "15958:   cbor_decref(&cose_pair.key);",
          "15960:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "15962:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "15963:   att_obj_ser_enc_len = 0;",
          "15966:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "15967:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "15961:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "15964:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "15977:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "15980:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "16065:                             \"webauthn.create\");",
          "16067:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "16069:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "16070:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "16078:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "16068:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "16071:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "16074:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "16075:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "16084:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "16087:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "16090:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "16091:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "16189:   cbor_decref(&cose_pair.key);",
          "16191:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "16193:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "16194:   att_obj_ser_enc_len = 0;",
          "16197:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "16198:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "16192:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "16195:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "16208:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "16211:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "16372:                             \"webauthn.create\");",
          "16374:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "16376:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "16377:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "16385:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "16375:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "16378:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "16381:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "16382:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "16391:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "16394:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "16397:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "16398:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "16511:   cbor_decref(&cose_pair.key);",
          "16513:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "16515:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "16516:   att_obj_ser_enc_len = 0;",
          "16519:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "16520:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "16514:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "16517:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "16530:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "16533:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "16619:                             \"webauthn.create\");",
          "16621:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "16623:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "16624:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "16632:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "16622:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "16625:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "16628:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "16629:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "16638:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "16641:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "16644:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "16645:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "16758:   cbor_decref(&cose_pair.key);",
          "16760:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "16762:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "16763:   att_obj_ser_enc_len = 0;",
          "16766:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "16767:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "16761:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "16764:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "16777:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "16780:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "16866:                             \"webauthn.create\");",
          "16868:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "16870:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "16871:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "16879:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "16869:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "16872:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "16875:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "16876:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "16885:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "16888:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "16891:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "16892:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 181 ---",
          "[Context before]",
          "17005:   cbor_decref(&cose_pair.key);",
          "17007:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "17009:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "17010:   att_obj_ser_enc_len = 0;",
          "17013:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "17014:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "17008:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "17011:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "17024:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "17027:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 182 ---",
          "[Context before]",
          "17113:                             \"webauthn.create\");",
          "17115:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "17117:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "17118:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "17126:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "17116:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "17119:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "17122:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "17123:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "17132:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "17135:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "17138:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "17139:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 183 ---",
          "[Context before]",
          "17252:   cbor_decref(&cose_pair.key);",
          "17254:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "17256:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "17257:   att_obj_ser_enc_len = 0;",
          "17260:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "17261:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "17255:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "17258:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "17271:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "17274:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 184 ---",
          "[Context before]",
          "17360:                             \"webauthn.create\");",
          "17362:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "17364:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "17365:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "17373:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "17363:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "17366:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "17369:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "17370:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "17379:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "17382:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "17385:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "17386:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 185 ---",
          "[Context before]",
          "17499:   cbor_decref(&cose_pair.key);",
          "17501:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "17503:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "17504:   att_obj_ser_enc_len = 0;",
          "17507:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "17508:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "17502:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "17505:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "17518:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "17521:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 186 ---",
          "[Context before]",
          "17607:                             \"webauthn.create\");",
          "17609:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "17611:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "17612:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "17620:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "17610:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "17613:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "17616:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "17617:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "17626:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "17629:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "17632:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "17633:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 187 ---",
          "[Context before]",
          "17746:   cbor_decref(&cose_pair.key);",
          "17748:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "17750:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "17751:   att_obj_ser_enc_len = 0;",
          "17754:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "17755:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "17749:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "17752:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "17765:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "17768:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 188 ---",
          "[Context before]",
          "17856:                             \"webauthn.create\");",
          "17858:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "17860:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "17861:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "17869:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "17859:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "17862:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "17865:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "17866:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "17875:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "17878:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "17881:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "17882:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 189 ---",
          "[Context before]",
          "17995:   cbor_decref(&cose_pair.key);",
          "17997:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "17999:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "18000:   att_obj_ser_enc_len = 0;",
          "18003:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "18004:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "17998:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "18001:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "18014:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "18017:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 190 ---",
          "[Context before]",
          "18104:                             \"webauthn.create\");",
          "18106:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "18108:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "18109:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "18117:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "18107:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "18110:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "18113:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "18114:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "18123:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "18126:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "18129:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "18130:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 191 ---",
          "[Context before]",
          "18268:   cbor_decref(&cose_pair.key);",
          "18270:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "18272:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+4);",
          "18273:   att_obj_ser_enc_len = 0;",
          "18276:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "18277:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "18271:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "18274:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "18287:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "18290:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 192 ---",
          "[Context before]",
          "18386:                             \"webauthn.create\");",
          "18388:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "18390:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "18391:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "18399:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "18389:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "18392:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "18395:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "18396:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "18405:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "18408:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "18411:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "18412:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 193 ---",
          "[Context before]",
          "18560:   cbor_decref(&cose_pair.key);",
          "18562:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "18564:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+4);",
          "18565:   att_obj_ser_enc_len = 0;",
          "18568:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "18569:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "18563:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "18566:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "18579:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "18582:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 194 ---",
          "[Context before]",
          "18679:                             \"webauthn.create\");",
          "18681:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "18683:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "18684:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "18692:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "18682:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "18685:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "18688:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "18689:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "18698:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "18701:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "18704:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "18705:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 195 ---",
          "[Context before]",
          "18844:   cbor_decref(&cose_pair.key);",
          "18846:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "18848:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+4);",
          "18849:   att_obj_ser_enc_len = 0;",
          "18852:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "18853:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "18847:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "18850:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "18863:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "18866:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 196 ---",
          "[Context before]",
          "18962:                             \"webauthn.create\");",
          "18964:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "18966:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "18967:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "18975:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "18965:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "18968:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "18971:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "18972:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "18981:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "18984:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "18987:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "18988:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 197 ---",
          "[Context before]",
          "19127:   cbor_decref(&cose_pair.key);",
          "19129:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "19131:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+4);",
          "19132:   att_obj_ser_enc_len = 0;",
          "19135:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "19136:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "19130:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "19133:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "19146:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "19149:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 198 ---",
          "[Context before]",
          "19245:                             \"webauthn.create\");",
          "19247:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "19249:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "19250:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "19258:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "19248:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "19251:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "19254:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "19255:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "19264:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "19267:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "19270:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "19271:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 199 ---",
          "[Context before]",
          "19415:   cbor_decref(&cose_pair.key);",
          "19417:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "19419:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+4);",
          "19420:   att_obj_ser_enc_len = 0;",
          "19423:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "19424:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "19418:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "19421:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "19434:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "19437:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 200 ---",
          "[Context before]",
          "19533:                             \"webauthn.create\");",
          "19535:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "19537:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "19538:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "19546:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "19536:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "19539:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "19542:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "19543:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "19552:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "19555:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "19558:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "19559:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 201 ---",
          "[Context before]",
          "19697:   cbor_decref(&cose_pair.key);",
          "19699:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "19701:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+4);",
          "19702:   att_obj_ser_enc_len = 0;",
          "19705:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "19706:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "19700:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "19703:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "19716:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "19719:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 202 ---",
          "[Context before]",
          "19798:   unsigned char credential_id_enc[WEBAUTHN_CREDENTIAL_ID_LEN*2];",
          "19799:   size_t credential_id_enc_len;",
          "19802:   j_params = json_pack(\"{sssssss{ssss%}}\",",
          "19803:                       \"username\", USERNAME,",
          "19804:                       \"scheme_type\", MODULE_MODULE,",
          "",
          "[Removed Lines]",
          "19801:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "[Added Lines]",
          "19817:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 203 ---",
          "[Context before]",
          "19856:   unsigned char credential_id_enc[WEBAUTHN_CREDENTIAL_ID_LEN*2];",
          "19857:   size_t credential_id_enc_len;",
          "19860:   j_params = json_pack(\"{sssssss{ssss%}}\",",
          "19861:                       \"username\", USERNAME,",
          "19862:                       \"scheme_type\", MODULE_MODULE,",
          "",
          "[Removed Lines]",
          "19859:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "[Added Lines]",
          "19875:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 204 ---",
          "[Context before]",
          "19876:   unsigned char credential_id_enc[WEBAUTHN_CREDENTIAL_ID_LEN*2];",
          "19877:   size_t credential_id_enc_len;",
          "19880:   j_params = json_pack(\"{sssssss{ssssss}}\",",
          "19881:                       \"username\", USERNAME,",
          "19882:                       \"scheme_type\", MODULE_MODULE,",
          "",
          "[Removed Lines]",
          "19879:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "[Added Lines]",
          "19895:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 205 ---",
          "[Context before]",
          "19921:   unsigned char credential_id_enc[WEBAUTHN_CREDENTIAL_ID_LEN*2];",
          "19922:   size_t credential_id_enc_len;",
          "19925:   j_params = json_pack(\"{sssssss{ssssss}}\",",
          "19926:                       \"username\", USERNAME,",
          "19927:                       \"scheme_type\", MODULE_MODULE,",
          "",
          "[Removed Lines]",
          "19924:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "[Added Lines]",
          "19940:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 206 ---",
          "[Context before]",
          "19947:   unsigned char credential_id_enc[WEBAUTHN_CREDENTIAL_ID_LEN*2];",
          "19948:   size_t credential_id_enc_len;",
          "19951:   j_result = json_stringn((char *)credential_id_enc, credential_id_enc_len);",
          "19952:   ck_assert_ptr_ne(j_result, NULL);",
          "19953:   ck_assert_int_eq(run_simple_test(&user_req, \"PUT\", SERVER_URI \"profile/scheme/register/\", NULL, NULL, j_params, NULL, 200, j_result, NULL, NULL), 1);",
          "",
          "[Removed Lines]",
          "19950:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "[Added Lines]",
          "19966:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 207 ---",
          "[Context before]",
          "20011:                             \"webauthn.create\");",
          "20013:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "20015:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "20016:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "20024:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "20014:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "20017:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "20020:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "20021:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "20030:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "20033:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "20036:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "20037:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 208 ---",
          "[Context before]",
          "20111:   cbor_decref(&cose_pair.key);",
          "20113:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "20115:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "20116:   att_obj_ser_enc_len = 0;",
          "20119:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "20120:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "20114:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "20117:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "20130:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "20133:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 209 ---",
          "[Context before]",
          "20217:                             \"webauthn.create\");",
          "20219:   client_data_json = json_dumps(j_client_data, JSON_COMPACT);",
          "20221:   client_data_json_enc = o_malloc(client_data_json_enc_len+1);",
          "20222:   ck_assert_ptr_ne(client_data_json_enc, NULL);",
          "20230:   memset(auth_data, 0, AUTH_DATA_SIZE);",
          "",
          "[Removed Lines]",
          "20220:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "20223:   ck_assert_int_eq(o_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "20226:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "20227:   ck_assert_int_eq(o_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "[Added Lines]",
          "20236:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), NULL, &client_data_json_enc_len), 1);",
          "20239:   ck_assert_int_eq(oh_my_base64_encode((unsigned char *)client_data_json, o_strlen(client_data_json), client_data_json_enc, &client_data_json_enc_len), 1);",
          "20242:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "20243:   ck_assert_int_eq(oh_my_base64url_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc_url, &credential_id_enc_url_len), 1);",
          "",
          "---------------",
          "--- Hunk 210 ---",
          "[Context before]",
          "20317:   cbor_decref(&cose_pair.key);",
          "20319:   ck_assert_int_gt(cbor_serialize_alloc(att_obj, &att_obj_ser, &att_obj_ser_len), 0);",
          "20321:   att_obj_ser_enc = o_malloc(att_obj_ser_enc_len+1);",
          "20322:   att_obj_ser_enc_len = 0;",
          "20325:   j_credential = json_pack(\"{ss ss ss s{ss ss ss s{ss% ss% ss s{ss% ss%}}}}\",",
          "20326:                            \"username\", USERNAME,",
          "",
          "[Removed Lines]",
          "20320:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "20323:   ck_assert_int_eq(o_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "[Added Lines]",
          "20336:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, NULL, &att_obj_ser_enc_len), 1);",
          "20339:   ck_assert_int_eq(oh_my_base64_encode(att_obj_ser, att_obj_ser_len, att_obj_ser_enc, &att_obj_ser_enc_len), 1);",
          "",
          "---------------",
          "--- Hunk 211 ---",
          "[Context before]",
          "20374:   unsigned char credential_id_enc[WEBAUTHN_CREDENTIAL_ID_LEN*2];",
          "20375:   size_t credential_id_enc_len;",
          "20378:   j_params = json_pack(\"{sssssss{ssss%}}\",",
          "20379:                       \"username\", USERNAME,",
          "20380:                       \"scheme_type\", MODULE_MODULE,",
          "",
          "[Removed Lines]",
          "20377:   ck_assert_int_eq(o_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "[Added Lines]",
          "20393:   ck_assert_int_eq(oh_my_base64_encode(credential_id, WEBAUTHN_CREDENTIAL_ID_LEN, credential_id_enc, &credential_id_enc_len), 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}