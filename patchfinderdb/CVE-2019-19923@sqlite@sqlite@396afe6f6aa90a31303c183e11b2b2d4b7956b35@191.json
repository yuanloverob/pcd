{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f9b0c45161346f64478167a599f0bbcec7801a4d",
      "candidate_info": {
        "commit_hash": "f9b0c45161346f64478167a599f0bbcec7801a4d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f9b0c45161346f64478167a599f0bbcec7801a4d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/altertab.test"
        ],
        "message": "Fix a problem with renaming an INTEGER PRIMARY KEY column of a WITHOUT ROWID table using ALTER TABLE.\n\nFossilOrigin-Name: 91f701d39852ef1ddb29d1527d1520867c5efea110333315c55d8b08084384e7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c2e439bccc40825e211bfa9a88e6a251ff066ca7453d4e7cb5eab56ce7332635",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1859:     pList = sqlite3ExprListAppend(pParse, 0,",
          "1860:                   sqlite3ExprAlloc(db, TK_ID, &ipkToken, 0));",
          "1861:     if( pList==0 ) return;",
          "1862:     pList->a[0].sortOrder = pParse->iPkSortOrder;",
          "1863:     assert( pParse->pNewTable==pTab );",
          "1864:     sqlite3CreateIndex(pParse, 0, 0, 0, pList, pTab->keyConf, 0, 0, 0, 0,",
          "1865:                        SQLITE_IDXTYPE_PRIMARYKEY);",
          "1866:     if( db->mallocFailed || pParse->nErr ) return;",
          "1867:     pPk = sqlite3PrimaryKeyIndex(pTab);",
          "1869:   }else{",
          "1870:     pPk = sqlite3PrimaryKeyIndex(pTab);",
          "1871:     assert( pPk!=0 );",
          "",
          "[Removed Lines]",
          "1868:     pTab->iPKey = -1;",
          "",
          "[Added Lines]",
          "1862:     if( IN_RENAME_OBJECT ){",
          "1863:       sqlite3RenameTokenRemap(pParse, pList->a[0].pExpr, &pTab->iPKey);",
          "1864:     }",
          "1867:     pTab->iPKey = -1;",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:   User {CREATE TABLE \"User\" (id integer)}",
          "570: }",
          "572: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572: #-------------------------------------------------------------------------",
          "573: reset_db",
          "574: do_execsql_test 18.1.0 {",
          "575:   CREATE TABLE t0 (c0 INTEGER, PRIMARY KEY(c0)) WITHOUT ROWID;",
          "576: }",
          "577: breakpoint",
          "578: do_execsql_test 18.1.1 {",
          "579:   ALTER TABLE t0 RENAME COLUMN c0 TO c1;",
          "580: }",
          "581: do_execsql_test 18.1.2 {",
          "582:   SELECT sql FROM sqlite_master;",
          "583: } {{CREATE TABLE t0 (c1 INTEGER, PRIMARY KEY(c1)) WITHOUT ROWID}}",
          "585: reset_db",
          "586: do_execsql_test 18.2.0 {",
          "587:   CREATE TABLE t0 (c0 INTEGER, PRIMARY KEY(c0));",
          "588: }",
          "589: do_execsql_test 18.2.1 {",
          "590:   ALTER TABLE t0 RENAME COLUMN c0 TO c1;",
          "591: }",
          "592: do_execsql_test 18.2.2 {",
          "593:   SELECT sql FROM sqlite_master;",
          "594: } {{CREATE TABLE t0 (c1 INTEGER, PRIMARY KEY(c1))}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae104741257a7b32870bb9f1563bb5746db5ae3c",
      "candidate_info": {
        "commit_hash": "ae104741257a7b32870bb9f1563bb5746db5ae3c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ae104741257a7b32870bb9f1563bb5746db5ae3c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix possible integer overflow while running PRAGMA integrity_check on a database file with a badly corrupted freelist.\n\nFossilOrigin-Name: 395599116d801324f0763e59bc5e2fc8622aa5b7572e0c1c9a982efbb3cc8280",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8ba3d9f38090c4bbbcffba1930e5c26f69ff61f49b72a4a5a59253d37341380f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9414:     }",
          "9415:     pOvflData = (unsigned char *)sqlite3PagerGetData(pOvflPage);",
          "9416:     if( isFreeList ){",
          "9418: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "9419:       if( pCheck->pBt->autoVacuum ){",
          "9420:         checkPtrmap(pCheck, iPage, PTRMAP_FREEPAGE, 0);",
          "9421:       }",
          "9422: #endif",
          "9424:         checkAppendMsg(pCheck,",
          "9425:            \"freelist leaf count too big on page %d\", iPage);",
          "9426:         N--;",
          "9427:       }else{",
          "9429:           Pgno iFreePage = get4byte(&pOvflData[8+i*4]);",
          "9430: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "9431:           if( pCheck->pBt->autoVacuum ){",
          "",
          "[Removed Lines]",
          "9417:       int n = get4byte(&pOvflData[4]);",
          "9423:       if( n>(int)pCheck->pBt->usableSize/4-2 ){",
          "9428:         for(i=0; i<n; i++){",
          "",
          "[Added Lines]",
          "9417:       u32 n = (u32)get4byte(&pOvflData[4]);",
          "9423:       if( n>pCheck->pBt->usableSize/4-2 ){",
          "9428:         for(i=0; i<(int)n; i++){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62be2dc753b56629cf31b1d3d502edc00f768005",
      "candidate_info": {
        "commit_hash": "62be2dc753b56629cf31b1d3d502edc00f768005",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/62be2dc753b56629cf31b1d3d502edc00f768005",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Avoid evaluating PARTITION BY or ORDER BY expressions multiple times for window function queries that use multiple window functions with the same window-definition.\n\nFossilOrigin-Name: 57070c68bbe15fc1d19a765182432e844c082909bdbc63b58fd86b96e2c521dd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ffeec62cb5223ae70bc1889df4c0b241f5d17b1a10156362ca59953028741480",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "788:     case TK_AGG_FUNCTION:",
          "789:     case TK_COLUMN: {",
          "792:       if( p->pSub ){",
          "793:         assert( ExprHasProperty(pExpr, EP_Static)==0 );",
          "794:         ExprSetProperty(pExpr, EP_Static);",
          "",
          "[Removed Lines]",
          "790:       Expr *pDup = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "791:       p->pSub = sqlite3ExprListAppend(pParse, p->pSub, pDup);",
          "",
          "[Added Lines]",
          "790:       int iCol = -1;",
          "791:       if( p->pSub ){",
          "792:         int i;",
          "793:         for(i=0; i<p->pSub->nExpr; i++){",
          "794:           if( 0==sqlite3ExprCompare(0, p->pSub->a[i].pExpr, pExpr, -1) ){",
          "795:             iCol = i;",
          "796:             break;",
          "797:           }",
          "798:         }",
          "799:       }",
          "800:       if( iCol<0 ){",
          "801:         Expr *pDup = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "802:         p->pSub = sqlite3ExprListAppend(pParse, p->pSub, pDup);",
          "803:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "797:         memset(pExpr, 0, sizeof(Expr));",
          "799:         pExpr->op = TK_COLUMN;",
          "801:         pExpr->iTable = p->pWin->iEphCsr;",
          "802:         pExpr->y.pTab = p->pTab;",
          "803:       }",
          "",
          "[Removed Lines]",
          "800:         pExpr->iColumn = p->pSub->nExpr-1;",
          "",
          "[Added Lines]",
          "812:         pExpr->iColumn = (iCol<0 ? p->pSub->nExpr-1: iCol);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1256:   ORDER BY 1;",
          "1257: } {6 1}",
          "1259: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1259: reset_db",
          "1260: do_execsql_test 34.1 {",
          "1261:   CREATE TABLE t1(a,b,c);",
          "1262: }",
          "1263: do_execsql_test 34.2 {",
          "1264:   SELECT avg(a) OVER (",
          "1265:       ORDER BY (SELECT sum(b) OVER ()",
          "1266:         FROM t1 ORDER BY (",
          "1267:           SELECT total(d) OVER (ORDER BY c)",
          "1268:           FROM (SELECT 1 AS d) ORDER BY 1",
          "1269:           )",
          "1270:         )",
          "1271:       )",
          "1272:   FROM t1;",
          "1273: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0287c951655bc543a7d0dcdb4fcb8cc1718325ef",
      "candidate_info": {
        "commit_hash": "0287c951655bc543a7d0dcdb4fcb8cc1718325ef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0287c951655bc543a7d0dcdb4fcb8cc1718325ef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "Prevent SQLite from assuming that if ((? IS NOT NULL) IS NOT NULL) is true, ? may not be NULL. Fix for [d51a8696].\n\nFossilOrigin-Name: 7833feecfe745e237f239ee4c38a9e4bf7ad66a32919150208da87c00a826473",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/join.test||test/join.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/join.test||test/join.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 629e20c9880acc2cb9e2fa6da39a15a90483e9a8f433df29d285c23bdfb03b0b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5168:       return WRC_Prune;",
          "5170:     case TK_AND:",
          "5175:       }",
          "5176:       return WRC_Prune;",
          "",
          "[Removed Lines]",
          "5171:       if( sqlite3ExprImpliesNonNullRow(pExpr->pLeft, pWalker->u.iCur)",
          "5172:        && sqlite3ExprImpliesNonNullRow(pExpr->pRight, pWalker->u.iCur)",
          "5173:       ){",
          "5174:         pWalker->eCode = 1;",
          "",
          "[Added Lines]",
          "5171:       assert( pWalker->eCode==0 );",
          "5172:       sqlite3WalkExpr(pWalker, pExpr->pLeft);",
          "5173:       if( pWalker->eCode ){",
          "5174:         pWalker->eCode = 0;",
          "5175:         sqlite3WalkExpr(pWalker, pExpr->pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5230: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5231:   Walker w;",
          "5232:   p = sqlite3ExprSkipCollateAndLikely(p);",
          "5242:   }",
          "5243:   w.xExprCallback = impliesNotNullRow;",
          "5244:   w.xSelectCallback = 0;",
          "",
          "[Removed Lines]",
          "5233:   while( p ){",
          "5234:     if( p->op==TK_NOTNULL ){",
          "5235:       p = p->pLeft;",
          "5236:     }else if( p->op==TK_AND ){",
          "5237:       if( sqlite3ExprImpliesNonNullRow(p->pLeft, iTab) ) return 1;",
          "5238:       p = p->pRight;",
          "5239:     }else{",
          "5240:       break;",
          "5241:     }",
          "",
          "[Added Lines]",
          "5234:   if( p && p->op==TK_NOTNULL ){",
          "5235:     p = p->pLeft;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:   SELECT NOT(v0.a IS FALSE) FROM v0",
          "906: } {1}",
          "908: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "908: #-------------------------------------------------------------------------",
          "909: reset_db",
          "910: do_execsql_test join-19.0 {",
          "911:   CREATE TABLE t1(a);",
          "912:   CREATE TABLE t2(b);",
          "913:   INSERT INTO t1(a) VALUES(0);",
          "914:   CREATE VIEW v0(c) AS SELECT t2.b FROM t1 LEFT JOIN t2;",
          "915: }",
          "917: do_execsql_test join-19.1 {",
          "918:   SELECT * FROM v0 WHERE v0.c NOTNULL NOTNULL;",
          "919: } {{}}",
          "921: do_execsql_test join-19.2 {",
          "922:   SELECT * FROM t1 LEFT JOIN t2",
          "923: } {0 {}}",
          "925: do_execsql_test join-19.3 {",
          "926:   SELECT * FROM t1 LEFT JOIN t2 WHERE (b IS NOT NULL) IS NOT NULL;",
          "927: } {0 {}}",
          "929: do_execsql_test join-19.4 {",
          "930:   SELECT (b IS NOT NULL) IS NOT NULL FROM t1 LEFT JOIN t2",
          "931: } {1}",
          "933: do_execsql_test join-19.5 {",
          "934:   SELECT * FROM t1 LEFT JOIN t2 WHERE",
          "935:     (b IS NOT NULL AND b IS NOT NULL) IS NOT NULL;",
          "936: } {0 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d2cfbea2a4ce631957554e480e90b711ef681249",
      "candidate_info": {
        "commit_hash": "d2cfbea2a4ce631957554e480e90b711ef681249",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d2cfbea2a4ce631957554e480e90b711ef681249",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Remove a NEVER() that was added in the previous check-in because it is in fact reachable.\n\nFossilOrigin-Name: 74eba2558a81f9e790d95a12a0c5379d4f80b43c8698ef9d6a31ff8d160a53d8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a0819086a521fb0ca4ffd12f959b168a89ea2e30a2844bbbd39831b2b9ecf29b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8068:     assert( sz<=pBt->maxLocal+23 );",
          "8069:     assert( iOvflSpace <= (int)pBt->pageSize );",
          "8070:     insertCell(pParent, nxDiv+i, pCell, sz, pTemp, pNew->pgno, &rc);",
          "8072:     assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "8073:   }",
          "",
          "[Removed Lines]",
          "8071:     if( NEVER(rc!=SQLITE_OK) ) goto balance_cleanup;",
          "",
          "[Added Lines]",
          "8071:     if( rc!=SQLITE_OK ) goto balance_cleanup;",
          "",
          "---------------"
        ]
      }
    }
  ]
}