{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "244edd01d32b4081086982d5f3c5a93b7a2b6f18",
      "candidate_info": {
        "commit_hash": "244edd01d32b4081086982d5f3c5a93b7a2b6f18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/244edd01d32b4081086982d5f3c5a93b7a2b6f18",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fkey8.test"
        ],
        "message": "Add test cases for the fix on this branch.\n\nFossilOrigin-Name: 2e31abe0ae5937a8ce10179e0ae045ee4c5ed8b7e2622ab41243226c6d3f5425",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fkey8.test||test/fkey8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3f1c8051648a341db4dffad66d3b1f9980d8a2b314cb0ce879cb2a10d1779b84",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fkey8.test||test/fkey8.test": [
          "File: test/fkey8.test -> test/fkey8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   INSERT OR REPLACE INTO t1 VALUES(20000, 20000);",
          "198: }",
          "200: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: #-------------------------------------------------------------------------",
          "201: reset_db",
          "202: do_execsql_test 5.0 {",
          "203:   PRAGMA foreign_keys = true;",
          "204:   CREATE TABLE parent(",
          "205:     p TEXT PRIMARY KEY",
          "206:   );",
          "207:   CREATE TABLE child(",
          "208:     c INTEGER UNIQUE,",
          "209:     FOREIGN KEY(c) REFERENCES parent(p) DEFERRABLE INITIALLY DEFERRED",
          "210:   );",
          "211:   BEGIN;",
          "212:     INSERT INTO child VALUES(123);",
          "213:     INSERT INTO parent VALUES('123');",
          "214:   COMMIT;",
          "215: }",
          "216: do_execsql_test 5.1 {",
          "217:   PRAGMA integrity_check;",
          "218: } {ok}",
          "220: do_execsql_test 5.2 {",
          "221:   INSERT INTO parent VALUES(1200);",
          "222:   BEGIN;",
          "223:     INSERT INTO child VALUES(456);",
          "224:     UPDATE parent SET p = '456' WHERE p=1200;",
          "225:   COMMIT;",
          "226: }",
          "227: do_execsql_test 5.3 {",
          "228:   PRAGMA integrity_check;",
          "229: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "346f4e264a13b9bf27d4692d8a84224274ee47b3",
      "candidate_info": {
        "commit_hash": "346f4e264a13b9bf27d4692d8a84224274ee47b3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/346f4e264a13b9bf27d4692d8a84224274ee47b3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/main.c",
          "src/shell.c.in",
          "src/sqlite.h.in"
        ],
        "message": "Change the name of the parameter table in the CLI to \"sqlite_parameters\". Doing so involves adding SQLITE_DBCONFIG_WRITABLE_SCHEMA and allowing the creation of tables whose names begin with \"sqlite_\" and that are indexed while writable_schema is on.\n\nFossilOrigin-Name: 24ef3844692debc2db7b1d427f5dcf4050481a8c7f71c3b516766b819ecab587",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/main.c||src/main.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c80b004cae71aaf820a31dba80c100ed162ef5bae845fb4535ff4d3be407500",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3154:   assert( pParse->nErr==0 );",
          "3155:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0",
          "3156:        && db->init.busy==0",
          "3157: #if SQLITE_USER_AUTHENTICATION",
          "3158:        && sqlite3UserAuthTable(pTab->zName)==0",
          "3159: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3157:        && pTblName!=0",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:         { SQLITE_DBCONFIG_TRIGGER_EQP,           SQLITE_TriggerEQP     },",
          "844:         { SQLITE_DBCONFIG_RESET_DATABASE,        SQLITE_ResetDatabase  },",
          "845:         { SQLITE_DBCONFIG_DEFENSIVE,             SQLITE_Defensive      },",
          "846:       };",
          "847:       unsigned int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "846:         { SQLITE_DBCONFIG_WRITABLE_SCHEMA,       SQLITE_WriteSchema|",
          "847:                                                  SQLITE_NoSchemaError  },",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2748: }",
          "2754: static void bind_table_init(ShellState *p){",
          "2755:   sqlite3_exec(p->db,",
          "2757:     \"  key TEXT PRIMARY KEY,\\n\"",
          "2758:     \"  value ANY\\n\"",
          "2759:     \") WITHOUT ROWID;\",",
          "2760:     0, 0, 0);",
          "2761: }",
          "",
          "[Removed Lines]",
          "2751: #define BIND_PARAM_TABLE \"$Parameters\"",
          "2756:     \"CREATE TABLE IF NOT EXISTS temp.[\" BIND_PARAM_TABLE \"](\\n\"",
          "",
          "[Added Lines]",
          "2751: #define BIND_PARAM_TABLE \"sqlite_parameters\"",
          "2755:   int wrSchema = 0;",
          "2756:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);",
          "2757:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);",
          "2759:     \"CREATE TABLE IF NOT EXISTS temp.\" BIND_PARAM_TABLE \"(\\n\"",
          "2764:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2786:   }",
          "2787:   rc = sqlite3_prepare_v2(pArg->db,",
          "2789:           \" WHERE key=?1\", -1, &pQ, 0);",
          "2790:   if( rc || pQ==0 ) return;",
          "2791:   for(i=1; i<=nVar; i++){",
          "",
          "[Removed Lines]",
          "2788:           \"SELECT value FROM temp.\\\"\" BIND_PARAM_TABLE \"\\\"\"",
          "",
          "[Added Lines]",
          "2792:           \"SELECT value FROM temp.\" BIND_PARAM_TABLE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7144:     if( nArg==2 && strcmp(azArg[1],\"clear\")==0 ){",
          "7146:                    0, 0, 0);",
          "7147:     }else",
          "",
          "[Removed Lines]",
          "7145:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.[\" BIND_PARAM_TABLE \"];\",",
          "",
          "[Added Lines]",
          "7149:       int wrSchema = 0;",
          "7150:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);",
          "7151:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);",
          "7152:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.\" BIND_PARAM_TABLE \";\",",
          "7154:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7155:       int len = 0;",
          "7156:       rx = sqlite3_prepare_v2(p->db,",
          "7157:              \"SELECT max(length(key)) \"",
          "7159:       if( rx==SQLITE_OK && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7160:         len = sqlite3_column_int(pStmt, 0);",
          "7161:         if( len>40 ) len = 40;",
          "",
          "[Removed Lines]",
          "7158:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "7166:              \"FROM temp.\" BIND_PARAM_TABLE \";\", -1, &pStmt, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7165:       if( len ){",
          "7166:         rx = sqlite3_prepare_v2(p->db,",
          "7167:              \"SELECT key, quote(value) \"",
          "7169:         while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7170:           utf8_printf(p->out, \"%-*s %s\\n\", len, sqlite3_column_text(pStmt,0),",
          "7171:                       sqlite3_column_text(pStmt,1));",
          "",
          "[Removed Lines]",
          "7168:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "7176:              \"FROM temp.\" BIND_PARAM_TABLE \";\", -1, &pStmt, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7196:       const char *zValue = azArg[3];",
          "7197:       bind_table_init(p);",
          "7198:       zSql = sqlite3_mprintf(",
          "7200:                   \"VALUES(%Q,%s);\", zKey, zValue);",
          "7201:       if( zSql==0 ) shell_out_of_memory();",
          "7202:       pStmt = 0;",
          "",
          "[Removed Lines]",
          "7199:                   \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "",
          "[Added Lines]",
          "7207:                   \"REPLACE INTO temp.\" BIND_PARAM_TABLE \"(key,value)\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7206:         sqlite3_finalize(pStmt);",
          "7207:         pStmt = 0;",
          "7208:         zSql = sqlite3_mprintf(",
          "7210:                    \"VALUES(%Q,%Q);\", zKey, zValue);",
          "7211:         if( zSql==0 ) shell_out_of_memory();",
          "7212:         rx = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "",
          "[Removed Lines]",
          "7209:                    \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "",
          "[Added Lines]",
          "7217:                    \"REPLACE INTO temp.\" BIND_PARAM_TABLE \"(key,value)\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7229:     if( nArg==3 && strcmp(azArg[1],\"unset\")==0 ){",
          "7230:       char *zSql = sqlite3_mprintf(",
          "7232:       if( zSql==0 ) shell_out_of_memory();",
          "7233:       sqlite3_exec(p->db, zSql, 0, 0, 0);",
          "7234:       sqlite3_free(zSql);",
          "",
          "[Removed Lines]",
          "7231:           \"DELETE FROM temp.[\" BIND_PARAM_TABLE \"] WHERE key=%Q\", azArg[2]);",
          "",
          "[Added Lines]",
          "7239:           \"DELETE FROM temp.\" BIND_PARAM_TABLE \" WHERE key=%Q\", azArg[2]);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "b531aa8fd9ca317c1ce586d1156c6c084a734264",
      "candidate_info": {
        "commit_hash": "b531aa8fd9ca317c1ce586d1156c6c084a734264",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b531aa8fd9ca317c1ce586d1156c6c084a734264",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "In a query that uses a partial index, the expression that is the WHERE clause of the partial index must always be true.  Use this fact to avoid evaluating identical terms in the WHERE clause of the query.\n\nFossilOrigin-Name: 9b2879629c34fc0a8e99d94648903eb93aabbc7a3682c80cb7382f9a9ca5ffb7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1f9fa58541dc974989eee9c9a5d453956f7dbcf42965ece2db2cb5dee3f3f5e2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1159:   }",
          "1160: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1169: static void whereApplyPartialIndexConstraints(",
          "1170:   Expr *pTruth,",
          "1171:   int iTabCur,",
          "1172:   WhereClause *pWC",
          "1173: ){",
          "1174:   int i;",
          "1175:   WhereTerm *pTerm;",
          "1176:   while( pTruth->op==TK_AND ){",
          "1177:     whereApplyPartialIndexConstraints(pTruth->pLeft, iTabCur, pWC);",
          "1178:     pTruth = pTruth->pRight;",
          "1179:   }",
          "1180:   for(i=0, pTerm=pWC->a; i<pWC->nTerm; i++, pTerm++){",
          "1181:     Expr *pExpr;",
          "1182:     if( pTerm->wtFlags & TERM_CODED ) continue;",
          "1183:     pExpr = pTerm->pExpr;",
          "1184:     if( sqlite3ExprCompare(0, pExpr, pTruth, iTabCur)==0 ){",
          "1185:       pTerm->wtFlags |= TERM_CODED;",
          "1186:     }",
          "1187:   }",
          "1188: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1768:       whereIndexExprTrans(pIdx, iCur, iIdxCur, pWInfo);",
          "1769:     }",
          "1772:     if( pLoop->wsFlags & WHERE_ONEROW ){",
          "1773:       pLevel->op = OP_Noop;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1803:     if( pIdx->pPartIdxWhere ){",
          "1804:       whereApplyPartialIndexConstraints(pIdx->pPartIdxWhere, iCur, pWC);",
          "1805:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9613c9f4a614e9e6c3144f8242c868aba8c32c06",
      "candidate_info": {
        "commit_hash": "9613c9f4a614e9e6c3144f8242c868aba8c32c06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9613c9f4a614e9e6c3144f8242c868aba8c32c06",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3misc.test"
        ],
        "message": "Fix the fts3/4 integrity-check command so that it works with \"ORDER=DESC\" tables. Fix for [8a6fa2bb].\n\nFossilOrigin-Name: 5863546df99abd1ad4ebcaba18dec647be4368e2c13ce0b28e48c8608d3e87ef",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3misc.test||test/fts3misc.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5171:               pCsr += sqlite3Fts3GetVarint(pCsr, &iCol);",
          "5172:             }else{",
          "5173:               pCsr += sqlite3Fts3GetVarint(pCsr, &iVal);",
          "5175:             }",
          "5176:           }else{",
          "5177:             iPos += (iVal - 2);",
          "",
          "[Removed Lines]",
          "5174:               iDocid += iVal;",
          "",
          "[Added Lines]",
          "5174:               if( p->bDescIdx ){",
          "5175:                 iDocid -= iVal;",
          "5176:               }else{",
          "5177:                 iDocid += iVal;",
          "5178:               }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ffd4c30620abe6ba38d82f3db934d18cc8468aaac4cd50a4e01be8910854d3f0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3misc.test||test/fts3misc.test": [
          "File: test/fts3misc.test -> test/fts3misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "238: }",
          "241: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: #-------------------------------------------------------------------------",
          "241: #",
          "242: reset_db",
          "243: do_execsql_test 7.0.1 {",
          "244:   CREATE VIRTUAL TABLE vt0 USING fts4(c0, order=DESC);",
          "245:   INSERT INTO vt0(c0) VALUES (0), (0);",
          "246: }",
          "247: do_execsql_test 7.0.2 {",
          "248:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "249: }",
          "250: reset_db",
          "251: do_execsql_test 7.1.1 {",
          "252:   CREATE VIRTUAL TABLE vt0 USING fts4(c0, order=ASC);",
          "253:   INSERT INTO vt0(c0) VALUES (0), (0);",
          "254: }",
          "255: do_execsql_test 7.1.2 {",
          "256:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "257: }",
          "259: do_execsql_test 7.2.1 {",
          "260:   CREATE VIRTUAL TABLE ft USING fts4(c0, c1, order=DESC, prefix=1);",
          "261:   INSERT INTO ft VALUES('a b c d', 'hello world');",
          "262:   INSERT INTO ft VALUES('negative', 'positive');",
          "263:   INSERT INTO ft VALUES('hello world', 'a b c d');",
          "264: }",
          "265: do_execsql_test 7.2.2 {",
          "266:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "267: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d4b25fa50f1109faefc756621584e234d2e92d7",
      "candidate_info": {
        "commit_hash": "1d4b25fa50f1109faefc756621584e234d2e92d7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1d4b25fa50f1109faefc756621584e234d2e92d7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Add missing VdbeCoverage() macros to new code in window.c.\n\nFossilOrigin-Name: 4f9b93e6cfa0b3b6ab8a126299c2b2a242f840453dc450e84d3df87576cf6cf8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c02f77b1b4d025d4243f883d6f3a2b3abcaf4944e0209f641b62c576415343dc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1313:   VdbeCoverageIf(v, eCond==0);",
          "1314:   VdbeCoverageIf(v, eCond==1);",
          "1315:   VdbeCoverageIf(v, eCond==2);",
          "1316:   sqlite3VdbeAddOp3(v, aOp[eCond], regZero, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1317:   VdbeCoverageNeverNullIf(v, eCond==0);",
          "1318:   VdbeCoverageNeverNullIf(v, eCond==1);",
          "1319:   VdbeCoverageNeverNullIf(v, eCond==2);",
          "1320:   sqlite3MayAbort(pParse);",
          "1321:   sqlite3VdbeAddOp2(v, OP_Halt, SQLITE_ERROR, OE_Abort);",
          "1322:   sqlite3VdbeAppendP4(v, (void*)azErr[eCond], P4_STATIC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1316:   VdbeCoverageIf(v, eCond==3);",
          "1317:   VdbeCoverageIf(v, eCond==4);",
          "1322:   VdbeCoverageNeverNullIf(v, eCond==3);",
          "1323:   VdbeCoverageNeverNullIf(v, eCond==4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1558:   }",
          "1560:   sqlite3VdbeAddOp3(v, OP_SeekGE, csr, lblBrk, pMWin->regStartRowid);",
          "1561:   addrNext = sqlite3VdbeCurrentAddr(v);",
          "1562:   sqlite3VdbeAddOp2(v, OP_Rowid, csr, regRowid);",
          "1563:   sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, lblBrk, regRowid);",
          "1565:   if( pMWin->eExclude==TK_CURRENT ){",
          "1566:     sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, lblNext, regRowid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1565:   VdbeCoverage(v);",
          "1569:   VdbeCoverageNeverNull(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1587:   sqlite3VdbeResolveLabel(v, lblNext);",
          "1588:   sqlite3VdbeAddOp2(v, OP_Next, csr, addrNext);",
          "1589:   sqlite3VdbeJumpHere(v, addrNext-1);",
          "1590:   sqlite3VdbeJumpHere(v, addrNext+1);",
          "1591:   sqlite3ReleaseTempReg(pParse, regRowid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1595:   VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1815:   sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1816:   addrGe = sqlite3VdbeAddOp3(v, OP_Ge, regString, 0, reg1);",
          "1817:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "1818:   sqlite3VdbeJumpHere(v, addrGe);",
          "1819:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1820:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1822:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1823:   sqlite3ReleaseTempReg(pParse, reg2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1824:   VdbeCoverage(v);",
          "1829:   VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1876:       }",
          "1877:     }else{",
          "1878:       addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "1879:     }",
          "1880:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1888:       VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1922:   if( jumpOnEof ){",
          "1923:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+2);",
          "1924:     ret = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1925:   }else{",
          "1926:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+1+bPeer);",
          "1927:     if( bPeer ){",
          "1928:       addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1929:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1934:     VdbeCoverage(v);",
          "1938:     VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2476:   sqlite3VdbeAddOp2(v, OP_NewRowid, csrWrite, regRowid);",
          "2477:   sqlite3VdbeAddOp3(v, OP_Insert, csrWrite, regRecord, regRowid);",
          "2478:   addrNe = sqlite3VdbeAddOp3(v, OP_Ne, pMWin->regOne, 0, regRowid);",
          "2481:   s.regArg = windowInitAccum(pParse, pMWin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2491:   VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2492:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "2493:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2494:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2495:     windowAggFinal(&s, 0);",
          "2496:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2497:     windowReturnOneRow(&s);",
          "2498:     sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2499:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2508:     VdbeCoverage(v);",
          "2511:     VdbeCoverageNeverTaken(v);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2507:   if( pMWin->eStart!=TK_UNBOUNDED ){",
          "2508:     sqlite3VdbeAddOp2(v, OP_Rewind, s.start.csr, 1);",
          "2509:   }",
          "2510:   sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2511:   sqlite3VdbeAddOp2(v, OP_Rewind, s.end.csr, 1);",
          "2512:   if( regPeer && pOrderBy ){",
          "2513:     sqlite3VdbeAddOp3(v, OP_Copy, regNewPeer, regPeer, pOrderBy->nExpr-1);",
          "2514:     sqlite3VdbeAddOp3(v, OP_Copy, regPeer, s.start.reg, pOrderBy->nExpr-1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2524:     VdbeCoverageNeverTaken(v);",
          "2527:   VdbeCoverageNeverTaken(v);",
          "2529:   VdbeCoverageNeverTaken(v);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2561:           sqlite3VdbeResolveLabel(v, lbl);",
          "2562:         }",
          "2563:       }else{",
          "2565:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2566:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2567:         if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Removed Lines]",
          "2564:         if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "",
          "[Added Lines]",
          "2582:         if( regEnd ){",
          "2583:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2584:           VdbeCoverage(v);",
          "2585:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2580:   }",
          "2582:   addrEmpty = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2583:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2584:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2585:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2604:   VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    }
  ]
}