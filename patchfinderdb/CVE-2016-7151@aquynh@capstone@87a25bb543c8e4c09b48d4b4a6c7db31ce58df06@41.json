{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "59df5507c1b20f65c8360050e61cceccd5bc4d5e",
      "candidate_info": {
        "commit_hash": "59df5507c1b20f65c8360050e61cceccd5bc4d5e",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/59df5507c1b20f65c8360050e61cceccd5bc4d5e",
        "files": [
          "HACK.TXT",
          "contrib/cs_driver/cs_driver/cs_driver.c",
          "cs.c",
          "include/platform.h",
          "tests/README",
          "tests/test_winkernel.cpp"
        ],
        "message": "edit documents and comments",
        "before_after_code_files": [
          "contrib/cs_driver/cs_driver/cs_driver.c||contrics_driver/cs_driver/cs_driver.c",
          "cs.c||cs.c",
          "include/platform.h||include/platform.h",
          "tests/test_winkernel.cpp||tests/test_winkernel.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/cs_driver/cs_driver/cs_driver.c||contrics_driver/cs_driver/cs_driver.c": [
          "File: contrib/cs_driver/cs_driver/cs_driver.c -> contrics_driver/cs_driver/cs_driver.c"
        ],
        "cs.c||cs.c": [
          "File: cs.c -> cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:  switch(handle->arch) {",
          "341:   default:",
          "344:   case CS_ARCH_ARM:",
          "346:    if (handle->mode & CS_MODE_THUMB)",
          "",
          "[Removed Lines]",
          "343:    return -1;",
          "",
          "[Added Lines]",
          "343:    return (uint8_t)-1;",
          "",
          "---------------"
        ],
        "include/platform.h||include/platform.h": [
          "File: include/platform.h -> include/platform.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <stdbool.h>",
          "23: #endif",
          "27: #include <stdbool.h>",
          "28: #endif",
          "",
          "[Removed Lines]",
          "25: #else",
          "",
          "[Added Lines]",
          "25: #else",
          "",
          "---------------"
        ],
        "tests/test_winkernel.cpp||tests/test_winkernel.cpp": [
          "File: tests/test_winkernel.cpp -> tests/test_winkernel.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: }",
          "14: #endif",
          "16: #pragma warning(push)",
          "",
          "[Removed Lines]",
          "17: #pragma warning(disable : 4005)  // 'identifier' : macro redefinition",
          "18: #pragma warning(disable : 4007)  // 'main': must be '__cdecl'",
          "",
          "[Added Lines]",
          "16: EXTERN_C DRIVER_INITIALIZE DriverEntry;",
          "19: #pragma warning(disable : 4005)   // 'identifier' : macro redefinition",
          "20: #pragma warning(disable : 4007)   // 'main': must be '__cdecl'",
          "25: #pragma warning(disable : 28110)  // Suppress this, as it is false positive.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: #include \"test.c\"",
          "27: }  // namespace unnamed",
          "37: namespace detail {",
          "38: #include \"test_detail.c\"",
          "39: }  // namespace detail",
          "41: namespace iter {",
          "42: #include \"test_iter.c\"",
          "43: }  // namespace iter",
          "45: namespace mips {",
          "46: #include \"test_mips.c\"",
          "47: }  // namespace mips",
          "",
          "[Removed Lines]",
          "29: namespace arm {",
          "30: #include \"test_arm.c\"",
          "31: }  // namespace arm",
          "33: namespace arm64 {",
          "34: #include \"test_arm64.c\"",
          "35: }  // namespace arm64",
          "",
          "[Added Lines]",
          "40: namespace skipdata {",
          "41: #include \"test_skipdata.c\"",
          "42: }  // namespace skipdata",
          "48: namespace arm {",
          "49: #include \"test_arm.c\"",
          "50: }  // namespace arm",
          "52: namespace arm64 {",
          "53: #include \"test_arm64.c\"",
          "54: }  // namespace arm64",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50: #include \"test_ppc.c\"",
          "51: }  // namespace ppc",
          "57: namespace sparc {",
          "58: #include \"test_sparc.c\"",
          "59: }  // namespace sparc",
          "",
          "[Removed Lines]",
          "53: namespace skipdata {",
          "54: #include \"test_skipdata.c\"",
          "55: }  // namespace skipdata",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:  }",
          "97:  unnamed::test();",
          "100:  detail::test();",
          "101:  iter::test();",
          "102:  mips::test();",
          "103:  ppc::test();",
          "105:  sparc::test();",
          "106:  systemz::test();",
          "107:  x86::test();",
          "",
          "[Removed Lines]",
          "98:  arm::test();",
          "99:  arm64::test();",
          "104:  skipdata::test();",
          "",
          "[Added Lines]",
          "106:  skipdata::test();",
          "108:  arm::test();",
          "109:  arm64::test();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128: }",
          "133: {",
          "134:  UNREFERENCED_PARAMETER(DriverObject);",
          "135:  UNREFERENCED_PARAMETER(RegistryPath);",
          "",
          "[Removed Lines]",
          "131: EXTERN_C NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject,",
          "132:   PUNICODE_STRING RegistryPath)",
          "",
          "[Added Lines]",
          "138: EXTERN_C NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "143: int __cdecl printf(const char * format, ...)",
          "144: {",
          "145:  NTSTATUS status;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: _Use_decl_annotations_",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f15f3bc6f23465c9f19e544cce9329d7570e03f2",
      "candidate_info": {
        "commit_hash": "f15f3bc6f23465c9f19e544cce9329d7570e03f2",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f15f3bc6f23465c9f19e544cce9329d7570e03f2",
        "files": [
          "arch/PowerPC/PPCInstPrinter.c"
        ],
        "message": "ppc: print 0 offset for memory operand. see issue #856",
        "before_after_code_files": [
          "arch/PowerPC/PPCInstPrinter.c||arch/PowerPC/PPCInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/PowerPC/PPCInstPrinter.c||arch/PowerPC/PPCInstPrinter.c": [
          "File: arch/PowerPC/PPCInstPrinter.c -> arch/PowerPC/PPCInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "468: {",
          "469:  if (MCOperand_isImm(MCInst_getOperand(MI, OpNo))) {",
          "470:   short Imm = (short)MCOperand_getImm(MCInst_getOperand(MI, OpNo));",
          "475:   if (Imm >= 0) {",
          "476:    if (Imm > HEX_THRESHOLD)",
          "",
          "[Removed Lines]",
          "472:   if (Imm == 0)",
          "473:    return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88e8da65bd224f58fa06568e3b3e5ade0904d23c",
      "candidate_info": {
        "commit_hash": "88e8da65bd224f58fa06568e3b3e5ade0904d23c",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/88e8da65bd224f58fa06568e3b3e5ade0904d23c",
        "files": [
          "MCInst.h"
        ],
        "message": "Remove duplicate function declaration.\n\nSigned-off-by: Tyler J. Stachecki <tstache1@binghamton.edu>",
        "before_after_code_files": [
          "MCInst.h||MCInst.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "MCInst.h||MCInst.h": [
          "File: MCInst.h -> MCInst.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: bool MCOperand_isInst(const MCOperand *op);",
          "61: unsigned MCOperand_getReg(const MCOperand *op);",
          "",
          "[Removed Lines]",
          "58: void MCInst_clear(MCInst *m);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e1b6d231a5f27bd505558f502f575507592089a",
      "candidate_info": {
        "commit_hash": "7e1b6d231a5f27bd505558f502f575507592089a",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/7e1b6d231a5f27bd505558f502f575507592089a",
        "files": [
          "windows/README",
          "windows/winkernel_mm.c",
          "windows/winkernel_mm.h"
        ],
        "message": "add winkernel specific files",
        "before_after_code_files": [
          "windows/winkernel_mm.c||windows/winkernel_mm.c",
          "windows/winkernel_mm.h||windows/winkernel_mm.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "windows/winkernel_mm.c||windows/winkernel_mm.c": [
          "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #include \"winkernel_mm.h\"",
          "4: #include <ntddk.h>",
          "7: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
          "11: typedef struct _CS_WINKERNEL_MEMBLOCK",
          "12: {",
          "13:   size_t size;   // A number of bytes allocated",
          "14:   char data[1];  // An address returned to a caller",
          "15: } CS_WINKERNEL_MEMBLOCK;",
          "16: C_ASSERT(sizeof(CS_WINKERNEL_MEMBLOCK) == sizeof(void *) * 2);",
          "20: void CAPSTONE_API cs_winkernel_free(void *ptr)",
          "21: {",
          "22:   if (ptr)",
          "23:   {",
          "24:     ExFreePoolWithTag(CONTAINING_RECORD(ptr, CS_WINKERNEL_MEMBLOCK, data), CS_WINKERNEL_POOL_TAG);",
          "25:   }",
          "26: }",
          "29: void * CAPSTONE_API cs_winkernel_malloc(size_t size)",
          "30: {",
          "33:   NT_ASSERT(size);",
          "35:   CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
          "36:     NonPagedPoolNx, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
          "37:   if (!block)",
          "38:   {",
          "39:     return NULL;",
          "40:   }",
          "41:   block->size = size;",
          "42:   return block->data;",
          "43: }",
          "46: void * CAPSTONE_API cs_winkernel_calloc(size_t n, size_t size)",
          "47: {",
          "48:   size_t total = n * size;",
          "50:   void *new_ptr = cs_winkernel_malloc(total);",
          "51:   if (!new_ptr)",
          "52:   {",
          "53:     return NULL;",
          "54:   }",
          "56:   return RtlFillMemory(new_ptr, total, 0);",
          "57: }",
          "60: void * CAPSTONE_API cs_winkernel_realloc(void *ptr, size_t size)",
          "61: {",
          "62:   void *new_ptr = NULL;",
          "63:   size_t current_size = 0;",
          "64:   size_t smaller_size = 0;",
          "66:   if (!ptr)",
          "67:   {",
          "68:     return cs_winkernel_malloc(size);",
          "69:   }",
          "71:   new_ptr = cs_winkernel_malloc(size);",
          "72:   if (!new_ptr)",
          "73:   {",
          "74:     return NULL;",
          "75:   }",
          "77:   current_size = CONTAINING_RECORD(ptr, CS_WINKERNEL_MEMBLOCK, data)->size;",
          "78:   smaller_size = (current_size < size) ? current_size : size;",
          "79:   RtlCopyMemory(new_ptr, ptr, smaller_size);",
          "80:   cs_winkernel_free(ptr);",
          "81:   return new_ptr;",
          "82: }",
          "87: #pragma warning(push)",
          "88: #pragma warning(disable : 28719)  // Banned API Usage : _vsnprintf is a Banned",
          "91: int CAPSTONE_API cs_winkernel_vsnprintf(char *buffer, size_t count, const char *format, va_list argptr)",
          "92: {",
          "93:   int result = _vsnprintf(buffer, count, format, argptr);",
          "98:   if (result == -1 || (size_t)result == count)",
          "99:   {",
          "100:     buffer[count - 1] = '\\0';",
          "101:   }",
          "102:   if (result == -1)",
          "103:   {",
          "109:     char* tmp = cs_winkernel_malloc(0x1000);",
          "110:     if (!tmp) {",
          "111:       return result;",
          "112:     }",
          "113:     result = _vsnprintf(tmp, 0x1000, format, argptr);",
          "114:     NT_ASSERT(result != -1);",
          "115:     cs_winkernel_free(tmp);",
          "116:   }",
          "118:   return result;",
          "119: }",
          "120: #pragma warning(pop)",
          "",
          "---------------"
        ],
        "windows/winkernel_mm.h||windows/winkernel_mm.h": [
          "File: windows/winkernel_mm.h -> windows/winkernel_mm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #ifndef CS_WINDOWS_WINKERNEL_MM_H_",
          "4: #define CS_WINDOWS_WINKERNEL_MM_H_",
          "6: #ifdef __cplusplus",
          "7: extern \"C\" {",
          "8: #endif",
          "10: #include <capstone.h>",
          "12: void CAPSTONE_API cs_winkernel_free(void *ptr);",
          "13: void * CAPSTONE_API cs_winkernel_malloc(size_t size);",
          "14: void * CAPSTONE_API cs_winkernel_calloc(size_t n, size_t size);",
          "15: void * CAPSTONE_API cs_winkernel_realloc(void *ptr, size_t size);",
          "16: int CAPSTONE_API cs_winkernel_vsnprintf(char *buffer, size_t count, const char *format, va_list argptr);",
          "18: #ifdef __cplusplus",
          "19: }",
          "20: #endif",
          "22: #endif  // CS_WINDOWS_WINKERNEL_MM_H_",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab1086401e0ad7779814333be762cee92cc8b0cf",
      "candidate_info": {
        "commit_hash": "ab1086401e0ad7779814333be762cee92cc8b0cf",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/ab1086401e0ad7779814333be762cee92cc8b0cf",
        "files": [
          "arch/M68K/M68KDisassembler.c"
        ],
        "message": "M68KDisassembler.c: fixed typo in d68000_roxr_ea",
        "before_after_code_files": [
          "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c": [
          "File: arch/M68K/M68KDisassembler.c -> arch/M68K/M68KDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3026: static void d68000_roxr_ea(m68k_info *info)",
          "3027: {",
          "3029: }",
          "3031: static void d68000_roxl_s_8(m68k_info *info)",
          "",
          "[Removed Lines]",
          "3028:  build_ea(info, M68K_INS_ROL, 2);",
          "",
          "[Added Lines]",
          "3028:  build_ea(info, M68K_INS_ROXR, 2);",
          "",
          "---------------"
        ]
      }
    }
  ]
}