{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ec1ab8607e6d30db42fcdcde90b86983fb017bb",
      "candidate_info": {
        "commit_hash": "4ec1ab8607e6d30db42fcdcde90b86983fb017bb",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/4ec1ab8607e6d30db42fcdcde90b86983fb017bb",
        "files": [
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:                                 [out] int *errStatus,",
          "16:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "17:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "19:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "20:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "",
          "[Removed Lines]",
          "18:                                 [user_check] uint32_t *enc_len,",
          "",
          "[Added Lines]",
          "18:                                 [out] uint32_t *enc_len,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "33:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
          "34:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "37:   public void trustedDecryptKey (",
          "38:                                 [out] int *errStatus,",
          "",
          "[Removed Lines]",
          "35:                                 [user_check] uint32_t *enc_len);",
          "",
          "[Added Lines]",
          "35:                                 [out] uint32_t *enc_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:                                 [out] int *errStatus,",
          "55:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "56:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "58:                                 size_t _t);",
          "60:         public void trustedDecryptDkgSecret (",
          "",
          "[Removed Lines]",
          "57:                                 [user_check] uint32_t * enc_len,",
          "",
          "[Added Lines]",
          "57:                                 [out] uint32_t * enc_len,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:                                 [out] int *errStatus,",
          "153:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "154:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "156:                                 [out, count = 65] char* hex_SEK);",
          "158:         public void trustedSetSEK(",
          "",
          "[Removed Lines]",
          "155:                                 [user_check] uint32_t *enc_len,",
          "",
          "[Added Lines]",
          "155:                                 [out] uint32_t *enc_len,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:                                 [out] int *errStatus,",
          "166:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "167:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "169:                                 [in, string] const char* SEK_hex);",
          "171:         public void trustedGenerateEcdsaKeyAES (",
          "172:                                 [out] int *errStatus,",
          "173:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "174:                                 [out, count = ECDSA_ENCR_LEN] uint8_t* encrypted_key,",
          "176:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "177:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "",
          "[Removed Lines]",
          "168:                                 [user_check] uint32_t *enc_len,",
          "175:                                 [user_check] uint32_t *enc_len,",
          "",
          "[Added Lines]",
          "168:                                 [out] uint32_t *enc_len,",
          "175:                                 [out] uint32_t *enc_len,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ac654ed977911554db4ec39d151cf09e1b4abca",
      "candidate_info": {
        "commit_hash": "4ac654ed977911554db4ec39d151cf09e1b4abca",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/4ac654ed977911554db4ec39d151cf09e1b4abca",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-2002 remove unused variables and fix potential memory leaks",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:     int base = 16;",
          "257:     int len = mpz_sizeinbase(Pkey->x, base) + 2;",
          "259:     char arr_x[len];",
          "262:     int n_zeroes = 64 - strlen(arr_x);",
          "263:     for (int i = 0; i < n_zeroes; i++) {",
          "264:         pub_key_x[i] = '0';",
          "",
          "[Removed Lines]",
          "260:     char *px = mpz_get_str(arr_x, base, Pkey->x);",
          "",
          "[Added Lines]",
          "254:     mpz_get_str(arr_x, base, Pkey->x);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:     strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "269:     char arr_y[mpz_sizeinbase(Pkey->y, base) + 2];",
          "271:     n_zeroes = 64 - strlen(arr_y);",
          "272:     for (int i = 0; i < n_zeroes; i++) {",
          "273:         pub_key_y[i] = '0';",
          "",
          "[Removed Lines]",
          "270:     char *py = mpz_get_str(arr_y, base, Pkey->y);",
          "",
          "[Added Lines]",
          "263:     mpz_get_str(arr_y, base, Pkey->y);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "283:                  unsigned char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
          "284:     LOG_DEBUG (__FUNCTION__);",
          "287:     char* arrR = NULL;",
          "288:     char* arrS = NULL;",
          "",
          "[Removed Lines]",
          "286:     char* arrM = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "505:     if (strnlen(signature, BUF_LEN) < 10) {",
          "507:         return;",
          "508:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498:         free(sig);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "590:     if (calc_public_shares(decrypted_dkg_secret, public_shares, _t) != 0) {",
          "592:         snprintf(errString, BUF_LEN, \"t does not match polynomial in db\");",
          "593:         return;",
          "594:     }",
          "595:     free(decrypted_dkg_secret);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "585:         free(decrypted_dkg_secret);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "675:                         char *DH_key, char *s_shareG2, uint8_t _t, uint8_t _n, uint8_t ind1) {",
          "676:     LOG_DEBUG (__FUNCTION__);",
          "680:     char decrypted_dkg_secret[DKG_BUFER_LENGTH];",
          "681:     uint32_t decr_len;",
          "682:     trustedDecryptDkgSecret(errStatus, errString, encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret, &decr_len);",
          "",
          "[Removed Lines]",
          "678:     uint32_t enc_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "722:         return;",
          "723:     }",
          "729:     mpz_t s;",
          "730:     mpz_init(s);",
          "731:     if (mpz_set_str(s, decr_sshare, 16) == -1) {",
          "",
          "[Removed Lines]",
          "726:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "797:             snprintf(errString, BUF_LEN, \"invalid decrypted secret share\");",
          "798:             mpz_clear(decr_secret_share);",
          "799:             return;",
          "800:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785:             mpz_clear(sum);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "813:     mpz_mod(bls_key, sum, q);",
          "815:     char key_share[mpz_sizeinbase(bls_key, 16) + 2];",
          "817:     snprintf(errString, BUF_LEN, \" bls private key is %s\", key_share);",
          "818:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "821:     status = sgx_seal_data(0, NULL, ECDSA_SKEY_LEN, (uint8_t *) key_share, sealedLen,",
          "822:                            (sgx_sealed_data_t *) encr_bls_key);",
          "823:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "816:     char *key = mpz_get_str(key_share, 16, bls_key);",
          "",
          "[Added Lines]",
          "803:     mpz_get_str(key_share, 16, bls_key);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "865:     sgx_read_rand(SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "867:     uint32_t hex_aes_key_length = SGX_AESGCM_KEY_SIZE * 2;",
          "869:     carray2Hex(SEK_raw, SGX_AESGCM_KEY_SIZE, SEK_hex);",
          "871:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, hex_aes_key_length + 1);",
          "",
          "[Removed Lines]",
          "868:     uint8_t SEK[hex_aes_key_length];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "952:     uint8_t base = 16;",
          "954:     int len = mpz_sizeinbase(Pkey->x, base) + 2;",
          "956:     char arr_x[len];",
          "959:     int n_zeroes = 64 - strlen(arr_x);",
          "960:     for (int i = 0; i < n_zeroes; i++) {",
          "961:         pub_key_x[i] = '0';",
          "",
          "[Removed Lines]",
          "957:     char *px = mpz_get_str(arr_x, base, Pkey->x);",
          "",
          "[Added Lines]",
          "941:     mpz_get_str(arr_x, base, Pkey->x);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "964:     strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "966:     char arr_y[mpz_sizeinbase(Pkey->y, base) + 2];",
          "968:     n_zeroes = 64 - strlen(arr_y);",
          "969:     for (int i = 0; i < n_zeroes; i++) {",
          "970:         pub_key_y[i] = '0';",
          "971:     }",
          "972:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "973:     char skey_str[mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2];",
          "975:     snprintf(errString, BUF_LEN, \"skey is %s len %d\\n\", skey_str, strlen(skey_str));",
          "977:     int stat = AES_encrypt(skey_str, encryptedPrivateKey);",
          "",
          "[Removed Lines]",
          "967:     char *py = mpz_get_str(arr_y, base, Pkey->y);",
          "974:     char *s = mpz_get_str(skey_str, ECDSA_SKEY_BASE, skey);",
          "",
          "[Added Lines]",
          "950:     mpz_get_str(arr_y, base, Pkey->y);",
          "957:     mpz_get_str(skey_str, ECDSA_SKEY_BASE, skey);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "987:     stat = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str);",
          "988:     if (stat != 0) {",
          "989:         snprintf(errString + 19 + strlen(skey_str), BUF_LEN, \"ecdsa private key decr failed with status %d\", stat);",
          "991:         return;",
          "992:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "973:         errStatus = stat;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1571:     mpz_mod(bls_key, sum, q);",
          "1573:     char key_share[mpz_sizeinbase(bls_key, 16) + 2];",
          "1575:     snprintf(errString, BUF_LEN, \" bls private key is %s\", key_share);",
          "1579:     status = AES_encrypt(key_share, encr_bls_key);",
          "",
          "[Removed Lines]",
          "1574:     char *key = mpz_get_str(key_share, 16, bls_key);",
          "1576:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "1557:     mpz_get_str(key_share, 16, bls_key);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1596: void",
          "1597: trustedGetBlsPubKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t key_len, char *bls_pub_key) {",
          "1599:     LOG_DEBUG (__FUNCTION__);",
          "1601:     char skey_hex[ECDSA_SKEY_LEN];",
          "1605:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex);",
          "1606:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "1603:     uint32_t len = key_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80a0bde9f0cdbd9be947d803664bb5bc566e140b",
      "candidate_info": {
        "commit_hash": "80a0bde9f0cdbd9be947d803664bb5bc566e140b",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/80a0bde9f0cdbd9be947d803664bb5bc566e140b",
        "files": [
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "abstractstubserver.h",
          "spec.json",
          "stubclient.h",
          "testw.cpp"
        ],
        "message": "SKALE-2077 Fixed Naming",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "abstractstubserver.h||abstractstubserver.h",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:     return result;",
          "271: }",
          "274:   if (DEBUG_PRINT) {",
          "275:     spdlog::info(\"ENTER CreateBLSShare\");",
          "276:   }",
          "",
          "[Removed Lines]",
          "273: bool CreateBLSShare( const string& BLSKeyName, const char * s_shares, const char * encryptedKeyHex){",
          "",
          "[Added Lines]",
          "273: bool CreateBLSShare( const string& blsKeyName, const char * s_shares, const char * encryptedKeyHex){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:     carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey);",
          "303:     if (DEBUG_PRINT) {",
          "304:       spdlog::info(\"hexBLSKey length is {}\", char_traits<char>::length(hexBLSKey));",
          "306:     }",
          "307:     free(hexBLSKey);",
          "308:     return true;",
          "",
          "[Removed Lines]",
          "302:     writeDataToDB(BLSKeyName, hexBLSKey);",
          "305:       spdlog::info(\"bls key {}\", BLSKeyName, \" is \", hexBLSKey );",
          "",
          "[Added Lines]",
          "302:     writeDataToDB(blsKeyName, hexBLSKey);",
          "305:       spdlog::info(\"bls key {}\", blsKeyName, \" is \", hexBLSKey );",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: std::string decrypt_DHKey(const std::string& polyName, int ind);",
          "44: std::vector<std::string> GetBLSPubKey(const char * encryptedKeyHex);",
          "",
          "[Removed Lines]",
          "42: bool CreateBLSShare( const std::string& BLSKeyName, const char * s_shares, const char * encryptedKeyHex);",
          "",
          "[Added Lines]",
          "42: bool CreateBLSShare( const std::string& blsKeyName, const char * s_shares, const char * encryptedKeyHex);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:         writeDataToDB(keyName, keys.at(0));",
          "276:         result[\"encryptedKey\"] = keys.at(0);",
          "280:     } catch (RPCException &_e) {",
          "281:         cerr << \" err str \" << _e.errString << endl;",
          "",
          "[Removed Lines]",
          "277:         result[\"PublicKey\"] = keys.at(1);",
          "278:         result[\"KeyName\"] = keyName;",
          "",
          "[Added Lines]",
          "277:         result[\"publicKey\"] = keys.at(1);",
          "278:         result[\"keyName\"] = keyName;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:     Json::Value result;",
          "389:     result[\"status\"] = 0;",
          "390:     result[\"errorMessage\"] = \"\";",
          "393:     spdlog::info(\"Calling method getPublicECDSAKey\");",
          "",
          "[Removed Lines]",
          "391:     result[\"PublicKey\"] = \"\";",
          "",
          "[Added Lines]",
          "391:     result[\"publicKey\"] = \"\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "404:            spdlog::info(\"PublicKey {}\", Pkey);",
          "405:            spdlog::info(\"PublicKey length {}\", Pkey.length());",
          "406:          }",
          "409:     } catch (RPCException &_e) {",
          "410:         result[\"status\"] = _e.status;",
          "",
          "[Removed Lines]",
          "407:          result[\"PublicKey\"] = Pkey;",
          "",
          "[Added Lines]",
          "407:          result[\"publicKey\"] = Pkey;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "510:         string s = get_secret_shares(polyName, encr_poly_ptr->c_str(), pubKeys_vect, t, n);",
          "514:     } catch (RPCException &_e) {",
          "516:         result[\"status\"] = _e.status;",
          "517:         result[\"errorMessage\"] = _e.errString;",
          "519:     }",
          "521:     return result;",
          "522: }",
          "525:                                   const string& SecretShare, int t, int n, int ind){",
          "529:   Json::Value result;",
          "530:   result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "512:         result[\"SecretShare\"] = s;",
          "518:         result[\"SecretShare\"] = \"\";",
          "524: Json::Value DKGVerificationImpl(const string& publicShares, const string& EthKeyName,",
          "527:   spdlog::info(\"enter DKGVerificationImpl\");",
          "",
          "[Added Lines]",
          "512:         result[\"secretShare\"] = s;",
          "518:         result[\"secretShare\"] = \"\";",
          "524: Json::Value dkgVerificationImpl(const string& publicShares, const string& ethKeyName,",
          "527:   spdlog::info(\"enter dkgVerificationImpl\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "534:   try {",
          "537:       throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "538:     }",
          "539:     if( !check_n_t(t, n) || ind > n || ind < 0){",
          "",
          "[Removed Lines]",
          "536:     if ( !checkECDSAKeyName(EthKeyName)){",
          "",
          "[Added Lines]",
          "536:     if ( !checkECDSAKeyName(ethKeyName)){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "546:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid length of public shares\");",
          "547:     }",
          "551:     if ( !VerifyShares(publicShares.c_str(), SecretShare.c_str(), encryptedKeyHex_ptr->c_str(), t, n, ind )){",
          "552:       result[\"result\"] = false;",
          "",
          "[Removed Lines]",
          "549:     shared_ptr<string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "",
          "[Added Lines]",
          "549:     shared_ptr<string> encryptedKeyHex_ptr = readFromDb(ethKeyName);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "562:   return result;",
          "563: }",
          "569:   Json::Value result;",
          "570:   result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "565: Json::Value CreateBLSPrivateKeyImpl(const string & BLSKeyName, const string& EthKeyName, const string& polyName, const string & SecretShare, int t, int n){",
          "567:   spdlog::info(\"CreateBLSPrivateKeyImpl entered\");",
          "",
          "[Added Lines]",
          "565: Json::Value createBLSPrivateKeyImpl(const string & blsKeyName, const string& ethKeyName, const string& polyName, const string & SecretShare, int t, int n){",
          "567:   spdlog::info(\"createBLSPrivateKeyImpl entered\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "577:       spdlog::info(\"secret shares - {}\", SecretShare);",
          "578:       throw RPCException(INVALID_SECRET_SHARES_LENGTH, \"Invalid secret share length\");",
          "579:     }",
          "581:       throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "582:     }",
          "583:     if ( !checkName(polyName, \"POLY\")){",
          "584:       throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "585:     }",
          "587:       throw RPCException(INVALID_POLY_NAME, \"Invalid BLS key name\");",
          "588:     }",
          "589:     if( !check_n_t(t, n)){",
          "",
          "[Removed Lines]",
          "580:     if ( !checkECDSAKeyName(EthKeyName)){",
          "586:     if ( !checkName(BLSKeyName, \"BLS_KEY\")){",
          "",
          "[Added Lines]",
          "580:     if ( !checkECDSAKeyName(ethKeyName)){",
          "586:     if ( !checkName(blsKeyName, \"BLS_KEY\")){",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "594:       spdlog::info(\"secret shares from json are - {}\", SecretShare);",
          "595:     }",
          "600:      if (res){",
          "601:          spdlog::info(\"BLS KEY SHARE CREATED \");",
          "602:      }",
          "",
          "[Removed Lines]",
          "597:     shared_ptr<string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "599:     bool res = CreateBLSShare(BLSKeyName, SecretShare.c_str(), encryptedKeyHex_ptr->c_str());",
          "",
          "[Added Lines]",
          "597:     shared_ptr<string> encryptedKeyHex_ptr = readFromDb(ethKeyName);",
          "599:     bool res = CreateBLSShare(blsKeyName, SecretShare.c_str(), encryptedKeyHex_ptr->c_str());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "621:   return result;",
          "622: }",
          "626:     Json::Value result;",
          "627:     result[\"status\"] = 0;",
          "628:     result[\"errorMessage\"] = \"\";",
          "630:     try {",
          "632:         throw RPCException(INVALID_POLY_NAME, \"Invalid BLSKey name\");",
          "633:       }",
          "635:       if (DEBUG_PRINT) {",
          "636:         spdlog::info(\"encr_bls_key_share is {}\", *encryptedKeyHex_ptr);",
          "637:         spdlog::info(\"length is {}\", encryptedKeyHex_ptr->length());",
          "",
          "[Removed Lines]",
          "624: Json::Value GetBLSPublicKeyShareImpl(const string & BLSKeyName){",
          "631:       if ( !checkName(BLSKeyName, \"BLS_KEY\")){",
          "634:       shared_ptr<string> encryptedKeyHex_ptr = readFromDb(BLSKeyName);",
          "",
          "[Added Lines]",
          "624: Json::Value getBLSPublicKeyShareImpl(const string & blsKeyName){",
          "631:       if ( !checkName(blsKeyName, \"BLS_KEY\")){",
          "634:       shared_ptr<string> encryptedKeyHex_ptr = readFromDb(blsKeyName);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "654:     return result;",
          "655: }",
          "658:   Json::Value result;",
          "659:   result[\"status\"] = 0;",
          "660:   result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "657: Json::Value ComplaintResponseImpl(const string& polyName, int ind){",
          "",
          "[Added Lines]",
          "657: Json::Value complaintResponseImpl(const string& polyName, int ind){",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "681: }",
          "684:     Json::Value result;",
          "685:     result[\"status\"] = 0;",
          "686:     result[\"errorMessage\"] = \"\";",
          "687:     try {",
          "689:         vector<string> xG2_vect = mult_G2(x);",
          "690:         for ( uint8_t i = 0; i < 4; i++) {",
          "691:             result[\"x*G2\"][i] = xG2_vect.at(i);",
          "",
          "[Removed Lines]",
          "683: Json::Value MultG2Impl(const string& x){",
          "688:         spdlog::info(\"MultG2Impl try \");",
          "",
          "[Added Lines]",
          "683: Json::Value multG2Impl(const string& x){",
          "688:         spdlog::info(\"multG2Impl try \");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "700:     return result;",
          "701: }",
          "704:     Json::Value result;",
          "706:     shared_ptr<string> poly_str_ptr = LevelDB::getLevelDb()->readString(polyName);",
          "",
          "[Removed Lines]",
          "703: Json::Value IsPolyExistsImpl(const string& polyName){",
          "",
          "[Added Lines]",
          "703: Json::Value isPolyExistsImpl(const string& polyName){",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "738:     return getSecretShareImpl(polyName, publicKeys, t, n);",
          "739: }",
          "742:   lock_guard<recursive_mutex> lock(m);",
          "744: }",
          "747:   lock_guard<recursive_mutex> lock(m);",
          "749: }",
          "752:     lock_guard<recursive_mutex> lock(m);",
          "754: }",
          "",
          "[Removed Lines]",
          "741: Json::Value  SGXWalletServer::DKGVerification( const string& publicShares, const string& EthKeyName, const string& SecretShare, int t, int n, int index){",
          "743:   return DKGVerificationImpl(publicShares, EthKeyName, SecretShare, t, n, index);",
          "746: Json::Value SGXWalletServer::CreateBLSPrivateKey(const string & BLSKeyName, const string& EthKeyName, const string& polyName, const string& SecretShare, int t, int n){",
          "748:   return CreateBLSPrivateKeyImpl(BLSKeyName, EthKeyName, polyName, SecretShare, t, n);",
          "751: Json::Value SGXWalletServer::GetBLSPublicKeyShare(const string & BLSKeyName){",
          "753:     return GetBLSPublicKeyShareImpl(BLSKeyName);",
          "",
          "[Added Lines]",
          "741: Json::Value  SGXWalletServer::dkgVerification( const string& publicShares, const string& ethKeyName, const string& SecretShare, int t, int n, int index){",
          "743:   return dkgVerificationImpl(publicShares, ethKeyName, SecretShare, t, n, index);",
          "746: Json::Value SGXWalletServer::createBLSPrivateKey(const string & blsKeyName, const string& ethKeyName, const string& polyName, const string& SecretShare, int t, int n){",
          "748:   return createBLSPrivateKeyImpl(blsKeyName, ethKeyName, polyName, SecretShare, t, n);",
          "751: Json::Value SGXWalletServer::getBLSPublicKeyShare(const string & blsKeyName){",
          "753:     return getBLSPublicKeyShareImpl(blsKeyName);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "799:   return importECDSAKeyImpl(key, keyName);",
          "800: }",
          "803:   lock_guard<recursive_mutex> lock(m);",
          "805: }",
          "808:     lock_guard<recursive_mutex> lock(m);",
          "810: }",
          "813:     lock_guard<recursive_mutex> lock(m);",
          "815: }",
          "817: Json::Value SGXWalletServer::getServerStatus() {",
          "",
          "[Removed Lines]",
          "802: Json::Value SGXWalletServer::ComplaintResponse(const string& polyName, int ind){",
          "804:   return ComplaintResponseImpl(polyName, ind);",
          "807: Json::Value SGXWalletServer::MultG2(const string& x){",
          "809:     return MultG2Impl(x);",
          "812: Json::Value SGXWalletServer::IsPolyExists(const string& polyName){",
          "814:     return IsPolyExistsImpl(polyName);",
          "",
          "[Added Lines]",
          "802: Json::Value SGXWalletServer::complaintResponse(const string& polyName, int ind){",
          "804:   return complaintResponseImpl(polyName, ind);",
          "807: Json::Value SGXWalletServer::multG2(const string& x){",
          "809:     return multG2Impl(x);",
          "812: Json::Value SGXWalletServer::isPolyExists(const string& polyName){",
          "814:     return isPolyExistsImpl(polyName);",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     virtual Json::Value generateDKGPoly(const std::string& polyName, int t);",
          "57:     virtual Json::Value getVerificationVector(const std::string& polyName, int t, int n);",
          "58:     virtual Json::Value getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int t, int n);",
          "66:     virtual Json::Value getServerStatus();",
          "68: };",
          "",
          "[Removed Lines]",
          "59:     virtual Json::Value DKGVerification(const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "60:     virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "61:     virtual Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName);",
          "62:     virtual Json::Value ComplaintResponse(const std::string& polyName, int ind);",
          "63:     virtual Json::Value MultG2(const std::string & x);",
          "64:     virtual Json::Value IsPolyExists(const std::string& polyName);",
          "",
          "[Added Lines]",
          "59:     virtual Json::Value dkgVerification(const std::string& publicShares, const std::string& ethKeyName, const std::string& SecretShare, int t, int n, int index);",
          "60:     virtual Json::Value createBLSPrivateKey(const std::string & blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "61:     virtual Json::Value getBLSPublicKeyShare(const std::string & blsKeyName);",
          "62:     virtual Json::Value complaintResponse(const std::string& polyName, int ind);",
          "63:     virtual Json::Value multG2(const std::string & x);",
          "64:     virtual Json::Value isPolyExists(const std::string& polyName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85: Json::Value generateDKGPolyImpl(const std::string& polyName, int t);",
          "86: Json::Value getVerificationVectorImpl(const std::string& polyName, int t, int n);",
          "87: Json::Value getSecretShareImpl(const std::string& polyName, const Json::Value& publicKeys, int t, int n);",
          "95: Json::Value getServerStatusImpl();",
          "",
          "[Removed Lines]",
          "88: Json::Value DKGVerificationImpl(const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index);",
          "89: Json::Value CreateBLSPrivateKeyImpl(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "90: Json::Value GetBLSPublicKeyShareImpl(const std::string & BLSKeyName);",
          "91: Json::Value ComplaintResponseImpl(const std::string& polyName, int ind);",
          "92: Json::Value MultG2Impl(const std::string & x);",
          "93: Json::Value IsPolyExistsImpl(const std::string& polyName);",
          "",
          "[Added Lines]",
          "87: Json::Value dkgVerificationImpl(const std::string& publicShares, const std::string& ethKeyName, const std::string& SecretShare, int t, int n, int index);",
          "88: Json::Value createBLSPrivateKeyImpl(const std::string & blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "89: Json::Value getBLSPublicKeyShareImpl(const std::string & blsKeyName);",
          "90: Json::Value complaintResponseImpl(const std::string& polyName, int ind);",
          "91: Json::Value multG2Impl(const std::string & x);",
          "92: Json::Value isPolyExistsImpl(const std::string& polyName);",
          "",
          "---------------"
        ],
        "abstractstubserver.h||abstractstubserver.h": [
          "File: abstractstubserver.h -> abstractstubserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:           this->bindAndAddMethod(jsonrpc::Procedure(\"importECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"key\",jsonrpc::JSON_STRING,\"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::importECDSAKeyI);",
          "19:           this->bindAndAddMethod(jsonrpc::Procedure(\"generateECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,  NULL), &AbstractStubServer::generateECDSAKeyI);",
          "21:           this->bindAndAddMethod(jsonrpc::Procedure(\"getPublicECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::getPublicECDSAKeyI);",
          "22:           this->bindAndAddMethod(jsonrpc::Procedure(\"ecdsaSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"base\",jsonrpc::JSON_INTEGER,\"keyName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::ecdsaSignMessageHashI);",
          "24:           this->bindAndAddMethod(jsonrpc::Procedure(\"generateDKGPoly\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::generateDKGPolyI);",
          "25:           this->bindAndAddMethod(jsonrpc::Procedure(\"getVerificationVector\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"polyName\",jsonrpc::JSON_STRING, \"t\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getVerificationVectorI);",
          "26:           this->bindAndAddMethod(jsonrpc::Procedure(\"getSecretShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"publicKeys\",jsonrpc::JSON_ARRAY, \"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getSecretShareI);",
          "34:           this->bindAndAddMethod(jsonrpc::Procedure(\"getServerStatus\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,  NULL), &AbstractStubServer::getServerStatusI);",
          "35:         }",
          "",
          "[Removed Lines]",
          "20:           this->bindAndAddMethod(jsonrpc::Procedure(\"renameECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"KeyName\",jsonrpc::JSON_STRING,\"tempKeyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::renameECDSAKeyI);",
          "27:           this->bindAndAddMethod(jsonrpc::Procedure(\"DKGVerification\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"publicShares\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, \"n\",jsonrpc::JSON_INTEGER, \"index\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::DKGVerificationI);",
          "28:           this->bindAndAddMethod(jsonrpc::Procedure(\"CreateBLSPrivateKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"BLSKeyName\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"polyName\", jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\", jsonrpc::JSON_INTEGER,\"n\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::CreateBLSPrivateKeyI);",
          "29:           this->bindAndAddMethod(jsonrpc::Procedure(\"GetBLSPublicKeyShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"BLSKeyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::GetBLSPublicKeyShareI);",
          "30:           this->bindAndAddMethod(jsonrpc::Procedure(\"ComplaintResponse\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"ind\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::ComplaintResponseI);",
          "31:           this->bindAndAddMethod(jsonrpc::Procedure(\"MultG2\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"x\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::MultG2I);",
          "32:           this->bindAndAddMethod(jsonrpc::Procedure(\"IsPolyExists\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::IsPolyExistsI);",
          "",
          "[Added Lines]",
          "20:           this->bindAndAddMethod(jsonrpc::Procedure(\"renameECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING,\"tempKeyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::renameECDSAKeyI);",
          "27:           this->bindAndAddMethod(jsonrpc::Procedure(\"dkgVerification\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"publicShares\",jsonrpc::JSON_STRING, \"ethKeyName\",jsonrpc::JSON_STRING, \"secretShare\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, \"n\",jsonrpc::JSON_INTEGER, \"index\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::dkgVerificationI);",
          "28:           this->bindAndAddMethod(jsonrpc::Procedure(\"createBLSPrivateKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"blsKeyName\",jsonrpc::JSON_STRING, \"ethKeyName\",jsonrpc::JSON_STRING, \"polyName\", jsonrpc::JSON_STRING, \"secretShare\",jsonrpc::JSON_STRING,\"t\", jsonrpc::JSON_INTEGER,\"n\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::createBLSPrivateKeyI);",
          "29:           this->bindAndAddMethod(jsonrpc::Procedure(\"getBLSPublicKeyShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"blsKeyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::getBLSPublicKeyShareI);",
          "30:           this->bindAndAddMethod(jsonrpc::Procedure(\"complaintResponse\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"ind\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::complaintResponseI);",
          "31:           this->bindAndAddMethod(jsonrpc::Procedure(\"multG2\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"x\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::multG2I);",
          "32:           this->bindAndAddMethod(jsonrpc::Procedure(\"isPolyExists\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::isPolyExistsI);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:         }",
          "55:         inline virtual void renameECDSAKeyI(const Json::Value &request, Json::Value &response)",
          "56:         {",
          "58:         }",
          "59:          inline virtual void getPublicECDSAKeyI(const Json::Value &request, Json::Value &response)",
          "60:         {",
          "",
          "[Removed Lines]",
          "57:           response = this->renameECDSAKey(request[\"KeyName\"].asString(), request[\"tempKeyName\"].asString());",
          "",
          "[Added Lines]",
          "57:           response = this->renameECDSAKey(request[\"keyName\"].asString(), request[\"tempKeyName\"].asString());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:         {",
          "78:             response = this->getSecretShare(request[\"polyName\"].asString(), request[\"publicKeys\"], request[\"t\"].asInt(),request[\"n\"].asInt());",
          "79:         }",
          "81:         {",
          "83:         }",
          "85:         {",
          "87:         }",
          "89:         {",
          "91:         }",
          "93:         {",
          "95:         }",
          "97:         {",
          "99:         }",
          "101:         {",
          "103:         }",
          "",
          "[Removed Lines]",
          "80:         inline virtual void DKGVerificationI(const Json::Value &request, Json::Value &response)",
          "82:             response = this->DKGVerification(request[\"publicShares\"].asString(), request[\"EthKeyName\"].asString(), request[\"SecretShare\"].asString(), request[\"t\"].asInt(), request[\"n\"].asInt(), request[\"index\"].asInt());",
          "84:         inline virtual void CreateBLSPrivateKeyI(const Json::Value &request, Json::Value &response)",
          "86:             response = this->CreateBLSPrivateKey(request[\"BLSKeyName\"].asString(), request[\"EthKeyName\"].asString(), request[\"polyName\"].asString(),request[\"SecretShare\"].asString(),request[\"t\"].asInt(), request[\"n\"].asInt());",
          "88:         inline virtual void GetBLSPublicKeyShareI(const Json::Value &request, Json::Value &response)",
          "90:           response = this->GetBLSPublicKeyShare(request[\"BLSKeyName\"].asString());",
          "92:         inline virtual void ComplaintResponseI(const Json::Value &request, Json::Value &response)",
          "94:           response = this->ComplaintResponse( request[\"polyName\"].asString(), request[\"ind\"].asInt());",
          "96:         inline virtual void MultG2I(const Json::Value &request, Json::Value &response)",
          "98:             response = this->MultG2(request[\"x\"].asString());",
          "100:         inline virtual void IsPolyExistsI(const Json::Value &request, Json::Value &response)",
          "102:             response = this->IsPolyExists(request[\"polyName\"].asString());",
          "",
          "[Added Lines]",
          "80:         inline virtual void dkgVerificationI(const Json::Value &request, Json::Value &response)",
          "82:             response = this->dkgVerification(request[\"publicShares\"].asString(), request[\"ethKeyName\"].asString(), request[\"secretShare\"].asString(), request[\"t\"].asInt(), request[\"n\"].asInt(), request[\"index\"].asInt());",
          "84:         inline virtual void createBLSPrivateKeyI(const Json::Value &request, Json::Value &response)",
          "86:             response = this->createBLSPrivateKey(request[\"blsKeyName\"].asString(), request[\"ethKeyName\"].asString(), request[\"polyName\"].asString(),request[\"secretShare\"].asString(),request[\"t\"].asInt(), request[\"n\"].asInt());",
          "88:         inline virtual void getBLSPublicKeyShareI(const Json::Value &request, Json::Value &response)",
          "90:           response = this->getBLSPublicKeyShare(request[\"blsKeyName\"].asString());",
          "92:         inline virtual void complaintResponseI(const Json::Value &request, Json::Value &response)",
          "94:           response = this->complaintResponse( request[\"polyName\"].asString(), request[\"ind\"].asInt());",
          "96:         inline virtual void multG2I(const Json::Value &request, Json::Value &response)",
          "98:             response = this->multG2(request[\"x\"].asString());",
          "100:         inline virtual void isPolyExistsI(const Json::Value &request, Json::Value &response)",
          "102:             response = this->isPolyExists(request[\"polyName\"].asString());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:         virtual Json::Value generateDKGPoly(const std::string& polyName, int t) = 0;",
          "121:         virtual Json::Value getVerificationVector(const std::string& polyName, int t, int n) = 0;",
          "122:         virtual Json::Value getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int t, int n) = 0;",
          "130:         virtual Json::Value getServerStatus() = 0;",
          "131: };",
          "",
          "[Removed Lines]",
          "123:         virtual Json::Value DKGVerification( const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index) = 0;",
          "124:         virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n) = 0;",
          "125:         virtual Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName) = 0;",
          "126:         virtual Json::Value ComplaintResponse(const std::string& polyName, int ind) = 0;",
          "127:         virtual Json::Value MultG2(const std::string & x) = 0;",
          "128:         virtual Json::Value IsPolyExists(const std::string& polyName) = 0;",
          "",
          "[Added Lines]",
          "123:         virtual Json::Value dkgVerification( const std::string& publicShares, const std::string& ethKeyName, const std::string& SecretShare, int t, int n, int index) = 0;",
          "124:         virtual Json::Value createBLSPrivateKey(const std::string & blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n) = 0;",
          "125:         virtual Json::Value getBLSPublicKeyShare(const std::string & blsKeyName) = 0;",
          "126:         virtual Json::Value complaintResponse(const std::string& polyName, int ind) = 0;",
          "127:         virtual Json::Value multG2(const std::string & x) = 0;",
          "128:         virtual Json::Value isPolyExists(const std::string& polyName) = 0;",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         Json::Value renameECDSAKey(const std::string& KeyName, const std::string& tempKeyName) throw (jsonrpc::JsonRpcException)",
          "69:         {",
          "70:           Json::Value p;",
          "72:           p[\"tempKeyName\"] = tempKeyName;",
          "73:           Json::Value result = this->CallMethod(\"renameECDSAKey\",p);",
          "74:           if (result.isObject())",
          "",
          "[Removed Lines]",
          "71:           p[\"KeyName\"] = KeyName;",
          "",
          "[Added Lines]",
          "71:           p[\"keyName\"] = KeyName;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "141:         }",
          "144:         {",
          "145:             Json::Value p;",
          "148:             p[\"index\"] = index;",
          "149:             p[\"n\"] = n;",
          "150:             p[\"publicShares\"] = publicShares;",
          "151:             p[\"t\"] = t;",
          "153:             if (result.isObject())",
          "154:               return result;",
          "155:             else",
          "156:               throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "157:         }",
          "160:         {",
          "161:           Json::Value p;",
          "164:           p[\"polyName\"] = polyName;",
          "166:           p[\"n\"] = n;",
          "167:           p[\"t\"] = t;",
          "169:           if (result.isObject())",
          "170:            return result;",
          "171:           else",
          "172:            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "173:         }",
          "176:         {",
          "177:             Json::Value p;",
          "181:             if (result.isObject())",
          "182:                 return result;",
          "183:             else",
          "184:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "185:         }",
          "188:         {",
          "189:           Json::Value p;",
          "190:           p[\"polyName\"] = polyName;",
          "191:           p[\"ind\"] = ind;",
          "193:           if (result.isObject())",
          "194:             return result;",
          "195:           else",
          "196:             throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "197:         }",
          "200:         {",
          "201:             Json::Value p;",
          "202:             p[\"x\"] = x;",
          "205:             if (result.isObject())",
          "206:                 return result;",
          "207:             else",
          "208:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "209:         }",
          "212:         {",
          "213:             Json::Value p;",
          "214:             p[\"polyName\"] = polyName;",
          "217:             if (result.isObject())",
          "218:                 return result;",
          "219:             else",
          "",
          "[Removed Lines]",
          "143:         Json::Value DKGVerification(const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index) throw (jsonrpc::JsonRpcException)",
          "146:             p[\"EthKeyName\"] = EthKeyName;",
          "147:             p[\"SecretShare\"] = SecretShare;",
          "152:             Json::Value result = this->CallMethod(\"DKGVerification\",p);",
          "159:         Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string& SecretShare, int t, int n) throw (jsonrpc::JsonRpcException)",
          "162:           p[\"BLSKeyName\"] = BLSKeyName;",
          "163:           p[\"EthKeyName\"] = EthKeyName;",
          "165:           p[\"SecretShare\"] = SecretShare;",
          "168:           Json::Value result = this->CallMethod(\"CreateBLSPrivateKey\",p);",
          "175:         Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName) throw (jsonrpc::JsonRpcException)",
          "178:             p[\"BLSKeyName\"] = BLSKeyName;",
          "180:             Json::Value result = this->CallMethod(\"GetBLSPublicKeyShare\",p);",
          "187:         Json::Value ComplaintResponse(const std::string& polyName, int ind) throw (jsonrpc::JsonRpcException)",
          "192:           Json::Value result = this->CallMethod(\"ComplaintResponse\",p);",
          "199:         Json::Value MultG2(const std::string & x) throw (jsonrpc::JsonRpcException)",
          "204:             Json::Value result = this->CallMethod(\"MultG2\",p);",
          "211:         Json::Value IsPolyExists(const std::string & polyName) throw (jsonrpc::JsonRpcException)",
          "216:             Json::Value result = this->CallMethod(\"IsPolyExists\",p);",
          "",
          "[Added Lines]",
          "143:         Json::Value dkgVerification(const std::string& publicShares, const std::string& ethKeyName, const std::string& SecretShare, int t, int n, int index) throw (jsonrpc::JsonRpcException)",
          "146:             p[\"ethKeyName\"] = ethKeyName;",
          "147:             p[\"secretShare\"] = SecretShare;",
          "152:             Json::Value result = this->CallMethod(\"dkgVerification\",p);",
          "159:         Json::Value createBLSPrivateKey(const std::string & blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string& SecretShare, int t, int n) throw (jsonrpc::JsonRpcException)",
          "162:           p[\"blsKeyName\"] = blsKeyName;",
          "163:           p[\"ethKeyName\"] = ethKeyName;",
          "165:           p[\"secretShare\"] = SecretShare;",
          "168:           Json::Value result = this->CallMethod(\"reateBLSPrivateKey\",p);",
          "175:         Json::Value getBLSPublicKeyShare(const std::string & blsKeyName) throw (jsonrpc::JsonRpcException)",
          "178:             p[\"blsKeyName\"] = blsKeyName;",
          "180:             Json::Value result = this->CallMethod(\"getBLSPublicKeyShare\",p);",
          "187:         Json::Value complaintResponse(const std::string& polyName, int ind) throw (jsonrpc::JsonRpcException)",
          "192:           Json::Value result = this->CallMethod(\"complaintResponse\",p);",
          "199:         Json::Value multG2(const std::string & x) throw (jsonrpc::JsonRpcException)",
          "204:             Json::Value result = this->CallMethod(\"multG2\",p);",
          "211:         Json::Value isPolyExists(const std::string & polyName) throw (jsonrpc::JsonRpcException)",
          "216:             Json::Value result = this->CallMethod(\"isPolyExists\",p);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "781:     poly_names[i] = polyName;",
          "782:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "783:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << endl;",
          "785:   }",
          "",
          "[Removed Lines]",
          "784:     pubEthKeys.append(EthKeys[i][\"PublicKey\"]);",
          "",
          "[Added Lines]",
          "784:     pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "798:   }",
          "804:   int k = 0;",
          "",
          "[Removed Lines]",
          "800:   Json::Value ComplaintResponse = c.ComplaintResponse(poly_names[1], 0);",
          "801:   cerr << \"share * G2 is \" << ComplaintResponse[\"share*G2\"].asString();",
          "802:   cerr << \"DHKey is \" << ComplaintResponse[\"DHKey\"].asString();",
          "",
          "[Added Lines]",
          "800:   Json::Value complaintResponse = c.complaintResponse(poly_names[1], 0);",
          "801:   cerr << \"share * G2 is \" << complaintResponse[\"share*G2\"].asString();",
          "802:   cerr << \"DHKey is \" << complaintResponse[\"DHKey\"].asString();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "810:   for ( int i = 0; i < n; i++)",
          "811:     for ( int j = 0; j < n; j++){",
          "817:        k++;",
          "818:        cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "819:        REQUIRE(res);",
          "821:        pSharesBad[i][0] = 'q';",
          "823:        res = wrongVerif[\"result\"].asBool();",
          "824:        REQUIRE(!res);",
          "825:        cerr << \"wrong verification \" << wrongVerif << endl;",
          "",
          "[Removed Lines]",
          "813:        cerr << \"SecretShare length is \" << secretShares[i][\"SecretShare\"].asString().length() << endl;",
          "814:        string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192);",
          "815:        secShares_vect[i] +=  secretShares[j][\"SecretShare\"].asString().substr(192*i, 192);",
          "816:        bool res = c.DKGVerification(pubShares[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "822:        Json::Value wrongVerif = c.DKGVerification(pSharesBad[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j);",
          "",
          "[Added Lines]",
          "813:        cerr << \"secretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "814:        string secretShare = secretShares[i][\"secretShare\"].asString().substr(192*j, 192);",
          "815:        secShares_vect[i] +=  secretShares[j][\"secretShare\"].asString().substr(192*i, 192);",
          "816:        bool res = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "822:        Json::Value wrongVerif = c.dkgVerification(pSharesBad[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "842:   for ( int i = 0; i < t; i++){",
          "843:     string endName = poly_names[i].substr(4);",
          "844:     string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "849:     cerr << \"BLS KEY SHARE NAME IS \" << blsName << endl;",
          "851:     BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "",
          "[Removed Lines]",
          "845:     string secretShare = secretShares[i][\"SecretShare\"].asString();",
          "847:     cout << c.CreateBLSPrivateKey(blsName, EthKeys[i][\"KeyName\"].asString(), poly_names[i], secShares_vect[i], t, n);",
          "848:     pubBLSKeys[i] = c.GetBLSPublicKeyShare(blsName);",
          "",
          "[Added Lines]",
          "845:     string secretShare = secretShares[i][\"secretShare\"].asString();",
          "847:     cout << c.createBLSPrivateKey(blsName, EthKeys[i][\"keyName\"].asString(), poly_names[i], secShares_vect[i], t, n);",
          "848:     pubBLSKeys[i] = c.getBLSPublicKeyShare(blsName);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "870:   REQUIRE( common_public.VerifySigWithHelper(hash_arr, commonSig, t, n) );",
          "872:   cout << \"try to get bls public key\" << endl;",
          "876: }",
          "",
          "[Removed Lines]",
          "873:   cout << c.GetBLSPublicKeyShare(\"BLS_KEY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:0\");",
          "",
          "[Added Lines]",
          "873:   cout << c.getBLSPublicKeyShare(\"BLS_KEY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:0\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "905:         Json::Value genKey = c.generateECDSAKey();",
          "906:         cout << genKey << endl;",
          "909:         cout << getPubKey << endl;",
          "",
          "[Removed Lines]",
          "907:         cout << c.ecdsaSignMessageHash(16, genKey[\"KeyName\"].asString(),\"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\" );",
          "908:         Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"KeyName\"].asString());",
          "",
          "[Added Lines]",
          "907:         cout << c.ecdsaSignMessageHash(16, genKey[\"keyName\"].asString(),\"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\" );",
          "908:         Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"keyName\"].asString());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "943:       string share = share_big.substr(0, 192);",
          "945:       string publicShares = \"1fc8154abcbf0c2ebf559571d7b57a8995c0e293a73d4676a8f76051a0d0ace30e00a87c9f087254c9c860c3215c4f11e8f85a3e8fae19358f06a0cbddf3df1924b1347b9b58f5bcb20958a19bdbdd832181cfa9f9e9fd698f6a485051cb47b829d10f75b6e227a7d7366dd02825b5718072cd42c39f0352071808622b7db6421b1069f519527e49052a8da6e3720cbda9212fc656eef945f5e56a4159c3b9622d883400460a9eff07fe1873f9b1ec50f6cf70098b9da0b90625b176f12329fa2ecc65082c626dc702d9cfb23a06770d4a2c7867e269efe84e3709b11001fb380a32d609855d1d46bc60f21140c636618b8ff55ed06d7788b6f81b498f96d3f9\";",
          "950:       Json::Value SecretShare;",
          "951:       SecretShare.append(share_big0);",
          "952:       SecretShare.append(share_big);",
          "957:      string shares = \"252122c309ed1f32faa897ede140c5b9c1bc07d5d9c94b7a22d4eeb13da7b7142aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b7637092c06c423b627c38ff86d1e66608bdc1496ef855b86e9f773441ac0b285d92aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b76\";",
          "962:       string s_share = \"13b871ad5025fed10a41388265b19886e78f449f758fe8642ade51440fcf850bb2083f87227d8fb53fdfb2854e2d0abec4f47e2197b821b564413af96124cd84a8700f8eb9ed03161888c9ef58d6e5896403de3608e634e23e92fba041aa283484427d0e6de20922216c65865cfe26edd2cf9cbfc3116d007710e8d82feafd9135c497bef0c800ca310ba6044763572681510dad5e043ebd87ffaa1a4cd45a899222207f3d05dec8110d132ad34c62d6a3b40bf8e9f40f875125c3035062d2ca\";",
          "975:     } catch (JsonRpcException &e) {",
          "976:         cerr << e.what() << endl;",
          "",
          "[Removed Lines]",
          "963:       string EthKeyName = \"tmp_NEK:8abc8e8280fb060988b65da4b8cb00779a1e816ec42f8a40ae2daa520e484a01\";",
          "",
          "[Added Lines]",
          "963:       string ethKeyName = \"tmp_NEK:8abc8e8280fb060988b65da4b8cb00779a1e816ec42f8a40ae2daa520e484a01\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1015:     poly_names[i] = polyName;",
          "1016:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "1017:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << endl;",
          "1019:   }",
          "1021:   for ( uint8_t i = 0; i < n; i++){",
          "",
          "[Removed Lines]",
          "1018:     pubEthKeys.append(EthKeys[i][\"PublicKey\"]);",
          "",
          "[Added Lines]",
          "1018:     pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1041:   for ( int i = 0; i < n; i++)",
          "1042:     for ( int j = 0; j < n; j++){",
          "1043:       if ( i != j ){",
          "1048:         k++;",
          "1049:         cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "1050:         REQUIRE( res );",
          "",
          "[Removed Lines]",
          "1044:         cerr << \"SecretShare length is \" << secretShares[i][\"SecretShare\"].asString().length() << endl;",
          "1045:         string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192 );",
          "1046:         secShares_vect[i] +=  secretShares[j][\"SecretShare\"].asString().substr(192*i, 192 );",
          "1047:         bool res = c.DKGVerification(pubShares[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "",
          "[Added Lines]",
          "1044:         cerr << \"SecretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "1045:         string secretShare = secretShares[i][\"secretShare\"].asString().substr(192*j, 192 );",
          "1046:         secShares_vect[i] +=  secretShares[j][\"secretShare\"].asString().substr(192*i, 192 );",
          "1047:         bool res = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1087:   cout << genKey << endl;",
          "1088:   REQUIRE(genKey[\"status\"].asInt() == 0);",
          "1091:   cout << getPubKey << endl;",
          "1092:   REQUIRE(getPubKey[\"status\"].asInt() == 0);",
          "1096:   cout << ecdsaSign << endl;",
          "1097:   REQUIRE(ecdsaSign[\"status\"].asInt() == 0);",
          "",
          "[Removed Lines]",
          "1090:   Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"KeyName\"].asString());",
          "1093:   REQUIRE(getPubKey[\"PublicKey\"].asString() == genKey[\"PublicKey\"].asString());",
          "1095:   Json::Value ecdsaSign = c.ecdsaSignMessageHash(16, genKey[\"KeyName\"].asString(), \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "",
          "[Added Lines]",
          "1090:   Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"keyName\"].asString());",
          "1093:   REQUIRE(getPubKey[\"publicKey\"].asString() == genKey[\"publicKey\"].asString());",
          "1095:   Json::Value ecdsaSign = c.ecdsaSignMessageHash(16, genKey[\"keyName\"].asString(), \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1187:   Json::Value Skeys = c.getSecretShare(polyName, publicKeys, 2, 2);",
          "1188:   Json::Value verifVect = c.getVerificationVector(polyName, 2, 2);",
          "1190:   REQUIRE(verificationWrongSkeys[\"status\"].asInt() != 0);",
          "1191:   cout << verificationWrongSkeys << endl;",
          "1193:   sgx_destroy_enclave(eid);",
          "1194: }",
          "1197:   DEBUG_PRINT = 1;",
          "1198:   is_sgx_https = 0;",
          "",
          "[Removed Lines]",
          "1189:   Json::Value verificationWrongSkeys = c.DKGVerification(\"\",\"\",\"\",2, 2, 1);",
          "1196: TEST_CASE(\"IsPolyExists test\", \"[is_poly_test]\") {",
          "",
          "[Added Lines]",
          "1189:   Json::Value verificationWrongSkeys = c.dkgVerification(\"\",\"\",\"\",2, 2, 1);",
          "1196: TEST_CASE(\"isPolyExists test\", \"[is_poly_test]\") {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1211:   string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "1212:   Json::Value genPoly = c.generateDKGPoly(polyName, 2);",
          "1213:   cout << genPoly << endl;",
          "1215:   cout << polyExists << endl;",
          "1216:   REQUIRE(polyExists[\"IsExist\"].asBool());",
          "1219:   cout << polyDoesNotExist << endl;",
          "1220:   REQUIRE(!polyDoesNotExist[\"IsExist\"].asBool());",
          "",
          "[Removed Lines]",
          "1214:   Json::Value polyExists = c.IsPolyExists(polyName);",
          "1218:   Json::Value polyDoesNotExist = c.IsPolyExists(\"Vasya\");",
          "",
          "[Added Lines]",
          "1214:   Json::Value polyExists = c.isPolyExists(polyName);",
          "1218:   Json::Value polyDoesNotExist = c.isPolyExists(\"Vasya\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "feb759739c100d85b7bc8dd3b84c88d9a3e94d92",
      "candidate_info": {
        "commit_hash": "feb759739c100d85b7bc8dd3b84c88d9a3e94d92",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/feb759739c100d85b7bc8dd3b84c88d9a3e94d92",
        "files": [
          "BLSCrypto.cpp",
          "BLSCrypto.h",
          "DKGCrypto.cpp",
          "ECDSACrypto.cpp",
          "LevelDB.cpp",
          "Makefile.am",
          "SEKManager.cpp",
          "SEKManager.h",
          "SGXWalletServer.cpp",
          "ServerInit.cpp",
          "secure_enclave/BLSEnclave.cpp",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "sgxwallet.c",
          "sgxwallet_common.h",
          "testw.cpp"
        ],
        "message": "SKALE-2003 Add aes encryption to DKG",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSCrypto.h||BLSCrypto.h",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "LevelDB.cpp||LevelDB.cpp",
          "Makefile.am||Makefile.am",
          "SEKManager.cpp||SEKManager.cpp",
          "SEKManager.h||SEKManager.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "ServerInit.cpp||ServerInit.cpp",
          "secure_enclave/BLSEnclave.cpp||secure_enclave/BLSEnclave.cpp",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "sgxwallet.c||sgxwallet.c",
          "sgxwallet_common.h||sgxwallet_common.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"libff/algebra/curves/alt_bn128/alt_bn128_init.hpp\"",
          "29: #include \"bls.h\"",
          "32: #include \"leveldb/db.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include <bls/BLSutils.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: #include \"spdlog/spdlog.h\"",
          "54: #include \"common.h\"",
          "56: int char2int(char _input) {",
          "57:   if (_input >= '0' && _input <= '9')",
          "58:     return _input - '0';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: std::string *FqToString(libff::alt_bn128_Fq*_fq) {",
          "60:   mpz_t t;",
          "61:   mpz_init(t);",
          "63:   _fq->as_bigint().to_mpz(t);",
          "65:   char arr[mpz_sizeinbase(t, 10) + 2];",
          "67:   char *tmp = mpz_get_str(arr, 10, t);",
          "68:   mpz_clear(t);",
          "70:   return new std::string(tmp);",
          "71: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:   return true;",
          "176: }",
          "179: char *encryptBLSKeyShare2Hex(int *errStatus, char *err_string, const char *_key) {",
          "180:     char *keyArray = (char *) calloc(BUF_LEN, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: }",
          "193: bool sign_aes(const char* _encryptedKeyHex, const char* _hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "194:           char* _sig) {",
          "198:   auto keyStr = make_shared<string>(_encryptedKeyHex);",
          "200:   auto hash = make_shared<array<uint8_t, 32>>();",
          "202:   uint64_t binLen;",
          "204:   if (!hex2carray(_hashHex, &binLen, hash->data())){",
          "205:     throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "206:   }",
          "221:   shared_ptr<signatures::Bls> obj;",
          "222:   obj = make_shared<signatures::Bls>(signatures::Bls(_t, _n));",
          "224:   std::pair<libff::alt_bn128_G1, std::string> hash_with_hint =",
          "225:       obj->HashtoG1withHint(hash);",
          "227:   int errStatus = 0;",
          "230:   string* xStr = FqToString(&(hash_with_hint.first.X));",
          "232:   if (xStr == nullptr) {",
          "233:     std::cerr <<   \"Null xStr\" << std::endl;",
          "234:     BOOST_THROW_EXCEPTION(runtime_error(\"Null xStr\"));",
          "235:   }",
          "237:   string* yStr = FqToString(&(hash_with_hint.first.Y));",
          "239:   if (yStr == nullptr) {",
          "240:     std::cerr <<   \"Null yStr\" << std::endl;",
          "241:     BOOST_THROW_EXCEPTION(runtime_error(\"Null yStr\"));",
          "242:   }",
          "245:   char errMsg[BUF_LEN];",
          "246:   memset(errMsg, 0, BUF_LEN);",
          "248:   char xStrArg[BUF_LEN];",
          "249:   char yStrArg[BUF_LEN];",
          "250:   char signature [BUF_LEN];",
          "252:   memset(xStrArg, 0, BUF_LEN);",
          "253:   memset(yStrArg, 0, BUF_LEN);",
          "255:   strncpy(xStrArg, xStr->c_str(), BUF_LEN);",
          "256:   strncpy(yStrArg, yStr->c_str(), BUF_LEN);",
          "258:   size_t sz = 0;",
          "261:   uint8_t encryptedKey[BUF_LEN];",
          "263:   bool result = hex2carray(_encryptedKeyHex, &sz, encryptedKey);",
          "265:   if (!result) {",
          "266:     cerr <<   \"Invalid hex encrypted key\" << endl;",
          "267:     BOOST_THROW_EXCEPTION(std::invalid_argument(\"Invalid hex encrypted key\"));",
          "268:   }",
          "270:   sgx_status_t status =",
          "271:       bls_sign_message_aes(eid, &errStatus, errMsg, encryptedKey,",
          "272:                        sz, xStrArg, yStrArg, signature);",
          "275:   if (status != SGX_SUCCESS) {",
          "276:     cerr <<\"SGX enclave call  to bls_sign_message failed:\" << status << std::endl;",
          "277:     BOOST_THROW_EXCEPTION(runtime_error(\"SGX enclave call  to bls_sign_message failed\"));",
          "278:   }",
          "281:   std::string hint = BLSutils::ConvertToString(hash_with_hint.first.Y) + \":\" +",
          "282:                      hash_with_hint.second;",
          "285:   std::string sig = signature;",
          "287:   sig.append(\":\");",
          "288:   sig.append(hint);",
          "290:   strncpy(_sig, sig.c_str(), BUF_LEN);",
          "292:   printf(\"_sig is: %s\\n\", sig.c_str());",
          "303:   return true;",
          "306: bool bls_sign(const char* _encryptedKeyHex, const char* _hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "307:               char* _sig) {",
          "309:   if (!is_aes){",
          "310:     return sign(_encryptedKeyHex, _hashHex, _t, _n, _signerIndex, _sig);",
          "311:   }",
          "312:   else{",
          "313:     return sign_aes(_encryptedKeyHex, _hashHex, _t, _n, _signerIndex, _sig);",
          "314:   }",
          "315: }",
          "",
          "---------------"
        ],
        "BLSCrypto.h||BLSCrypto.h": [
          "File: BLSCrypto.h -> BLSCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         size_t signerIndex, char* _sig);",
          "42: EXTERNC int char2int(char _input);",
          "",
          "[Removed Lines]",
          "39: EXTERNC bool sign(const char* encryptedKeyHex, const char* hashHex, size_t t, size_t n,",
          "",
          "[Added Lines]",
          "39: EXTERNC bool bls_sign(const char* encryptedKeyHex, const char* hashHex, size_t t, size_t n,",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     carray2Hex(encrypted_dkg_secret.data(), length, hexEncrPoly.data());",
          "110:     string result(hexEncrPoly.data());",
          "",
          "[Removed Lines]",
          "106:     vector<char> hexEncrPoly(2 * length, 0);",
          "",
          "[Added Lines]",
          "106:     vector<char> hexEncrPoly(2 * length + 1, 0);",
          "107:     assert( encrypted_dkg_secret.size() >= length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:   }",
          "126:   char* public_shares = (char*)calloc(10000, 1);",
          "129:   uint64_t enc_len = 0;",
          "131:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN * 2, 1);",
          "134:   if (!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:   memset(public_shares, 0, 10000);",
          "133:   memset(encr_dkg_poly, 0, DKG_MAX_SEALED_LEN * 2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:   }",
          "138:   if (DEBUG_PRINT) {",
          "140:     spdlog::info(\"hex_encr_poly length is {}\", strlen(encryptedPolyHex));",
          "141:     spdlog::info(\"enc len {}\", enc_len);",
          "",
          "[Removed Lines]",
          "139:     cerr << \"hex_encr_poly is \" << encryptedPolyHex << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "185:   char errMsg1[BUF_LEN];",
          "186:   int err_status = 0;",
          "188:   uint64_t enc_len = 0;",
          "191:   uint8_t encr_dkg_poly[DKG_MAX_SEALED_LEN];",
          "192:   if(!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)){",
          "193:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "194:   }",
          "196:   if (!is_aes)",
          "197:     status = set_encrypted_dkg_poly(eid, &err_status, errMsg1, encr_dkg_poly);",
          "198:   else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:   char hexEncrKey[BUF_LEN];",
          "190:   memset(hexEncrKey, 0, BUF_LEN);",
          "195:   memset(encr_dkg_poly, 0, DKG_MAX_SEALED_LEN);",
          "200:   std::cerr << \"enc_len is \" << enc_len << std::endl;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "205:   string result;",
          "209:   for ( int i = 0; i < n; i++){",
          "210:     uint8_t encrypted_skey[BUF_LEN];",
          "211:     uint32_t dec_len;",
          "213:     char cur_share[193];",
          "214:     char s_shareG2[320];",
          "215:     string pub_keyB = publicKeys.at(i);//publicKeys.substr(128*i, 128*i + 128);",
          "219:     char pubKeyB[129];",
          "220:     strncpy(pubKeyB, pub_keyB.c_str(), 128);",
          "221:     pubKeyB[128] = 0;",
          "",
          "[Removed Lines]",
          "207:   char hexEncrKey[2 * BUF_LEN];",
          "216:     if (DEBUG_PRINT) {",
          "217:       spdlog::info(\"pub_keyB is {}\", pub_keyB);",
          "218:     }",
          "",
          "[Added Lines]",
          "216:     memset(encrypted_skey, 0, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:     if (DEBUG_PRINT) {",
          "243:       spdlog::info(\"dec len is {}\", dec_len);",
          "244:     }",
          "245:     carray2Hex(encrypted_skey, dec_len, hexEncrKey);",
          "247:     string DHKey_name = \"DKG_DH_KEY_\" + polyName + \"_\" + to_string(i) + \":\";",
          "250:     writeDataToDB(DHKey_name, hexEncrKey);",
          "252:     string shareG2_name = \"shareG2_\" + polyName + \"_\" + to_string(i) + \":\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:     cerr << \"hexEncr DH Key: \" << hexEncrKey << endl;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "281:     uint64_t dec_key_len ;",
          "282:     uint8_t encr_key[BUF_LEN];",
          "283:     if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)){",
          "284:         throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "285:     }",
          "286:     int result;",
          "287:     if (DEBUG_PRINT) {",
          "293:       spdlog::info(\"publicShares length is {}\", char_traits<char>::length(publicShares));",
          "294:     }",
          "295:     char pshares[8193];",
          "302:     if (result == 2){",
          "303:       throw RPCException(INVALID_HEX, \"Invalid public shares\");",
          "",
          "[Removed Lines]",
          "296:     strncpy(pshares, publicShares, strlen(publicShares) + 1);",
          "300:     dkg_verification(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "",
          "[Added Lines]",
          "292:     memset(encr_key, 0, BUF_LEN);",
          "298:       cerr << \"encryptedKeyHex \" << encryptedKeyHex << endl;",
          "299:       cerr << \"dec_key_len \" << dec_key_len << endl;",
          "300:       cerr << \"encr_sshare length is \" << strlen(encr_sshare) << endl;",
          "305:     memset(pshares, 0, 8193);",
          "306:     strncpy(pshares, publicShares, strlen(publicShares) );",
          "309:     if (!is_aes)",
          "310:       dkg_verification(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "311:     else",
          "312:       dkg_verification_aes(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "324:   uint64_t dec_key_len ;",
          "325:   uint8_t encr_bls_key[BUF_LEN];",
          "326:   uint8_t encr_key[BUF_LEN];",
          "327:   if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)){",
          "328:       throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "329:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:   memset(encr_bls_key, 0, BUF_LEN);",
          "340:   memset(encr_key, 0, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "331:   uint32_t enc_bls_len = 0;",
          "336:   if ( err_status != 0){",
          "338:      throw RPCException(ERROR_IN_ENCLAVE, \"Create BLS private key failed in enclave\");",
          "339:   }",
          "340:   else {",
          "",
          "[Removed Lines]",
          "334:   create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "337:      spdlog::info(\"ERROR IN ENCLAVE\");",
          "",
          "[Added Lines]",
          "348:   if (!is_aes)",
          "349:     create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "350:   else",
          "351:     create_bls_key_aes(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "355:      spdlog::error(errMsg1);",
          "356:      spdlog::error(\"status {}\", err_status);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "373:     if (DEBUG_PRINT) {",
          "374:       spdlog::info(\"dec_key_len is {}\", dec_key_len);",
          "375:     }",
          "377:     if ( err_status != 0){",
          "378:       throw RPCException(ERROR_IN_ENCLAVE, \"Failed to get BLS public key in enclave\");",
          "379:     }",
          "380:     vector<string> pub_key_vect = SplitString(pub_key, ':');",
          "",
          "[Removed Lines]",
          "376:     get_bls_pub_key(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "",
          "[Added Lines]",
          "396:     if (!is_aes)",
          "397:       get_bls_pub_key(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "398:     else",
          "399:       get_bls_pub_key_aes(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "401:       std::cerr <<  errMsg1 << \" status is \" << err_status << std::endl;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "406:   if (!hex2carray(hexEncrKey_ptr->c_str(), &DH_enc_len, encrypted_DHkey)){",
          "407:      throw RPCException(INVALID_HEX, \"Invalid hexEncrKey\");",
          "408:   }",
          "410:   char DHKey[ECDSA_SKEY_LEN];",
          "413:   if (err_status != 0){",
          "415:   }",
          "417:   return DHKey;",
          "",
          "[Removed Lines]",
          "412:   decrypt_key(eid, &err_status, errMsg1.data(), encrypted_DHkey, DH_enc_len, DHKey);",
          "414:     throw RPCException(ERROR_IN_ENCLAVE, \"decrypt key failed in enclave\");",
          "",
          "[Added Lines]",
          "433:   if (DEBUG_PRINT) {",
          "434:     spdlog::info(\"encr DH key length is {}\", DH_enc_len);",
          "435:     spdlog::info(\"hex encr DH key length is {}\", hexEncrKey_ptr->length());",
          "436:   }",
          "440:   if ( !is_aes)",
          "441:     decrypt_key(eid, &err_status, errMsg1.data(), encrypted_DHkey, DH_enc_len, DHKey);",
          "442:   else",
          "443:     decrypt_key_aes(eid, &err_status, errMsg1.data(), encrypted_DHkey, DH_enc_len, DHKey);",
          "445:     throw RPCException(/*ERROR_IN_ENCLAVE*/ err_status, \"decrypt key failed in enclave\");",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   if (DEBUG_PRINT) {",
          "64:     std::cerr << \"account key is \" << errMsg << std::endl;",
          "65:     std::cerr << \"enc_len is \" << enc_len << std::endl;",
          "69:   }",
          "",
          "[Removed Lines]",
          "66:     std::cerr << \"enc_key is \"  << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "LevelDB.cpp||LevelDB.cpp": [
          "File: LevelDB.cpp -> LevelDB.cpp"
        ],
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: ##",
          "45: #AM_CPPFLAGS += -g -Og",
          "50: AM_CPPFLAGS += -Wall -DSKALE_SGX=1 -DBINARY_OUTPUT=1 -Ileveldb/include -IlibBLS/bls -IlibBLS/libff -IlibBLS -fno-builtin-memset $(GMP_CPPFLAGS)  -I.  -I./libBLS/deps/deps_inst/x86_or_x64/include",
          "",
          "[Removed Lines]",
          "47: AM_CFLAGS = -g -Og -rdynamic -Wl,--no-as-needed -lSegFault",
          "48: AM_CXXFLAGS = ${AM_CPPFLAGS} -rdynamic -Wl,--no-as-needed -lSegFault",
          "",
          "[Added Lines]",
          "47: AM_CFLAGS = -g -Og -rdynamic -Wl,--no-as-needed -lSegFault -fsanitize=address",
          "48: AM_CXXFLAGS = ${AM_CPPFLAGS} -rdynamic -Wl,--no-as-needed -lSegFault -fsanitize=address",
          "",
          "---------------"
        ],
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   LevelDB::getLevelDb()->writeDataUnique(\"SEK\", hexEncrKey.data());",
          "56: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: void setSEK(std::shared_ptr<std::string> hex_encr_SEK){",
          "59:   vector<char> errMsg(1024,0);",
          "60:   int err_status = 0;",
          "63:   uint8_t encr_SEK [BUF_LEN];",
          "65:   uint64_t len;",
          "67:   if (!hex2carray(hex_encr_SEK->c_str(), &len, encr_SEK)){",
          "68:     throw RPCException(INVALID_HEX, \"Invalid encrypted SEK Hex\");",
          "69:   }",
          "71:   status = set_SEK(eid, &err_status, errMsg.data(), encr_SEK );",
          "72:   if ( err_status != 0 ){",
          "73:     cerr << \"RPCException thrown\" << endl;",
          "74:     throw RPCException(-666, errMsg.data()) ;",
          "75:   }",
          "77: }",
          "",
          "---------------"
        ],
        "SEKManager.h||SEKManager.h": [
          "File: SEKManager.h -> SEKManager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #ifndef SGXD_SEKMANAGER_H",
          "25: #define SGXD_SEKMANAGER_H",
          "27: void generate_SEK();",
          "29: #endif //SGXD_SEKMANAGER_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <string>",
          "28: #include <memory>",
          "32: void setSEK(std::shared_ptr<std::string> hex_encr_SEK);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:     }",
          "220:     try {",
          "222:             result[\"status\"] = -1;",
          "223:             result[\"errorMessage\"] = \"Could not sign\";",
          "224:             return result;",
          "",
          "[Removed Lines]",
          "221:         if (!sign(value->c_str(), messageHash.c_str(), t, n, signerIndex, signature)) {",
          "",
          "[Added Lines]",
          "221:         if (!bls_sign(value->c_str(), messageHash.c_str(), t, n, signerIndex, signature)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:         vector<string> pubKeys_vect;",
          "503:         for ( int i = 0; i < n ; i++) {",
          "504:             if ( !checkHex(publicKeys[i].asString(), 64)){",
          "505:               throw RPCException(INVALID_HEX, \"Invalid public key\");",
          "506:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504:             std::cerr << \"publicKeys \" << i << \" is \" << publicKeys[i].asString() <<std::endl;",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     libff::init_alt_bn128_params();",
          "75:     LevelDB::initDataFolderAndDBs();",
          "78:     std::shared_ptr<std::string> encr_SEK_ptr = LevelDB::getLevelDb()->readString(\"SEK\");",
          "79:     if (encr_SEK_ptr == nullptr){",
          "80:       spdlog::info(\"SEK was not created yet\");",
          "81:       generate_SEK();",
          "82:     }",
          "83: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     else{",
          "82:       spdlog::info(\"SEK was created\");",
          "83:       setSEK(encr_SEK_ptr);",
          "84:     }",
          "",
          "---------------"
        ],
        "secure_enclave/BLSEnclave.cpp||secure_enclave/BLSEnclave.cpp": [
          "File: secure_enclave/BLSEnclave.cpp -> secure_enclave/BLSEnclave.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <string.h>",
          "27: #include <cstdint>",
          "31: #include \"BLSEnclave.h\"",
          "",
          "[Removed Lines]",
          "28: #include \"../sgxwallet_common.h\"",
          "",
          "[Added Lines]",
          "29: #include \"enclave_common.h\"",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g2.hpp>",
          "34: #include <cstdio>",
          "35: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "33: #include \"../sgxwallet_common.h\"",
          "",
          "[Added Lines]",
          "34: #include \"enclave_common.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:   char arr[mpz_sizeinbase (decr_secret_share, 10) + 2];",
          "315:   char * tmp = mpz_get_str(arr, 10, decr_secret_share);",
          "316:   libff::alt_bn128_Fr sshare(tmp);",
          "322:   libff::alt_bn128_G2  val2 = sshare * libff::alt_bn128_G2::one();",
          "324:    memset(public_shares, 0, strlen(public_shares));",
          "331:   val.to_affine_coordinates();",
          "332:   val2.to_affine_coordinates();",
          "338:   strncpy(public_shares + 144 + 79, ConvertToString(val2.X.c0).c_str(), 77);",
          "339:   strncpy(public_shares + 144 + 78, \":\", 1);",
          "",
          "[Removed Lines]",
          "325:    strncpy(public_shares, ConvertToString(val2.X.c0).c_str(), ConvertToString(val2.X.c0).length());",
          "326:    strncpy(public_shares + ConvertToString(val2.X.c0).length(), \":\", 1);",
          "327:   strncpy(public_shares + ConvertToString(val2.X.c0).length() + 1, ConvertToString(val2.X.c1).c_str(), 77);",
          "",
          "[Added Lines]",
          "329:   strncpy(public_shares, tmp, strlen(tmp));",
          "339:   strncpy(public_shares, ConvertToString(val.X.c0).c_str(), ConvertToString(val.X.c0).length());",
          "340:   strncpy(public_shares + ConvertToString(val.X.c0).length(), \":\", 1);",
          "341:   strncpy(public_shares + ConvertToString(val.X.c0).length() + 1, ConvertToString(val2.X.c0).c_str(), ConvertToString(val2.X.c0).length());",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "598: void set_encrypted_dkg_poly(int *err_status, char *err_string, uint8_t* encrypted_poly){",
          "600:   uint32_t decr_len;",
          "601:   sgx_status_t status = sgx_unseal_data(",
          "602:       (const sgx_sealed_data_t *)encrypted_poly, NULL, 0, Decrypted_dkg_poly, &decr_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "599:   memset(Decrypted_dkg_poly, 0, DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "937: }",
          "939: void generate_ecdsa_key_aes(int *err_status, char *err_string,",
          "940:                         uint8_t *encrypted_key, uint32_t *enc_len, char * pub_key_x, char * pub_key_y) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "937: void set_SEK(int *err_status, char *err_string, uint8_t *encrypted_SEK){",
          "939:   uint32_t len;",
          "941:   sgx_status_t status = sgx_unseal_data(",
          "942:       (const sgx_sealed_data_t *)encrypted_SEK, NULL, 0, (uint8_t *)AES_key, &len);",
          "943:   if (status != SGX_SUCCESS) {",
          "945:     snprintf(err_string, BUF_LEN,\"sgx unseal SEK failed with status %d\", status);",
          "946:     return;",
          "947:   }",
          "948: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1255: }",
          "1258:                       uint32_t enc_len, char *_hashX,",
          "1259:                       char *_hashY, char *signature) {",
          "1263:   char key[BUF_LEN];",
          "1264:   char sig[BUF_LEN];",
          "1267:   init();",
          "",
          "[Removed Lines]",
          "1257: void bls_sign_message_test(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "1267: void bls_sign_message_aes(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "1272:   memset(key, 0, BUF_LEN);",
          "1274:   memset(sig, 0, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1289: void gen_dkg_secret_aes (int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t* enc_len, size_t _t){",
          "1291:   char dkg_secret[DKG_BUFER_LENGTH];// = (char*)calloc(DKG_BUFER_LENGTH, 1);",
          "1293:   if (gen_dkg_poly(dkg_secret, _t) != 0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302:   memset(dkg_secret, 0, DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1306:   }",
          "1310: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1322:   char decr_dkg_secret[DKG_BUFER_LENGTH];",
          "1323:   memset(decr_dkg_secret, 0, DKG_BUFER_LENGTH);",
          "1325:   status = AES_decrypt(encrypted_dkg_secret, *enc_len, decr_dkg_secret);",
          "1326:   if(status !=  SGX_SUCCESS) {",
          "1327:     snprintf(err_string, BUF_LEN,\"aes decrypt  dkg poly failed\");",
          "1329:     return;",
          "1330:   }",
          "1332:   if ( strcmp(dkg_secret, decr_dkg_secret) != 0){",
          "1333:     snprintf(err_string, BUF_LEN,\"poly is %s \", dkg_secret);",
          "1334:     snprintf(err_string + strlen(dkg_secret) + 8, BUF_LEN - strlen(dkg_secret) - 8,\"encrypted poly is not equal to decrypted poly\");",
          "1336:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1319:     return;",
          "1320:   }",
          "1323: }",
          "1325: void set_encrypted_dkg_poly_aes(int *err_status, char *err_string, uint8_t* encrypted_poly,  uint64_t* enc_len){",
          "1327:   int status = AES_decrypt(encrypted_poly, *enc_len, Decrypted_dkg_poly);",
          "1329:   if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1354:   memset(Decrypted_dkg_poly, 0, DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1337:                      char* result_str, char * s_shareG2, char* pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind ){",
          "1339:   char skey[ECDSA_SKEY_LEN];",
          "1340:   char pub_key_x[BUF_LEN];",
          "1341:   memset(pub_key_x, 0, BUF_LEN);",
          "1342:   char pub_key_y[BUF_LEN];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1368:   memset(skey, 0, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1373:   if (calc_secret_share(Decrypted_dkg_poly, s_share, _t, _n, ind) != 0){",
          "1376:     return;",
          "1377:   }",
          "1378:   snprintf(err_string + 88, BUF_LEN,\"\\nsecret share is %s\", s_share);",
          "1380:   if (calc_secret_shareG2(s_share, s_shareG2) != 0){",
          "1383:     return;",
          "1384:   }",
          "",
          "[Removed Lines]",
          "1375:     snprintf(err_string, BUF_LEN,\"\\nt does not match poly degree\\n\");",
          "1382:     snprintf(err_string, BUF_LEN,\"invalid decr secret share\\n\");",
          "",
          "[Added Lines]",
          "1407:     snprintf(err_string, BUF_LEN, Decrypted_dkg_poly);",
          "1414:     snprintf(err_string, BUF_LEN,\"invalid decr secret share\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1408: }",
          "1410: void get_public_shares_aes(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t enc_len, char* public_shares,",
          "1411:                        unsigned _t, unsigned _n){",
          "1413:   char* decrypted_dkg_secret = (char*)calloc(DKG_MAX_SEALED_LEN, 1);",
          "1416:   int status = AES_decrypt(encrypted_dkg_secret, enc_len, decrypted_dkg_secret);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1447:   memset(decrypted_dkg_secret, 0, DKG_MAX_SEALED_LEN);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1430:     return;",
          "1431:   }",
          "1434: }",
          "",
          "[Removed Lines]",
          "1433:   free(decrypted_dkg_secret);",
          "",
          "[Added Lines]",
          "1468: }",
          "1470: void dkg_verification_aes(int *err_status, char* err_string, const char * public_shares, const char* s_share,",
          "1471:                       uint8_t* encrypted_key, uint64_t enc_len, unsigned _t, int _ind, int * result){",
          "1474:   char skey[ECDSA_SKEY_LEN];",
          "1475:   memset(skey, 0, ECDSA_SKEY_LEN);",
          "1476:   int status = AES_decrypt(encrypted_key, enc_len, skey);",
          "1479:   if (status != SGX_SUCCESS) {",
          "1480:     snprintf(err_string, BUF_LEN,\"AES_decrypt failed (in dkg_verification_aes)  with status %d\", status);",
          "1482:     return;",
          "1483:   }",
          "1485:   char encr_sshare[ECDSA_SKEY_LEN];",
          "1486:   memset(encr_sshare, 0, ECDSA_SKEY_LEN);",
          "1487:   strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1 );",
          "1490:   char common_key[ECDSA_SKEY_LEN];",
          "1491:   memset(common_key, 0, ECDSA_SKEY_LEN);",
          "1493:   session_key_recover(skey, s_share, common_key);",
          "1495:   if (common_key == NULL || strlen(common_key) == 0 ){",
          "1497:     snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "1498:     return;",
          "1499:   }",
          "1501:   char decr_sshare[ECDSA_SKEY_LEN];",
          "1502:   memset(decr_sshare, 0, ECDSA_SKEY_LEN);",
          "1503:   xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "1504:   if (decr_sshare == NULL){",
          "1506:     snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "1507:     return;",
          "1508:   }",
          "1519:   mpz_t s;",
          "1520:   mpz_init(s);",
          "1521:   if (mpz_set_str(s, decr_sshare, 16) == -1){",
          "1523:     snprintf(err_string, BUF_LEN ,\"invalid decr secret share\");",
          "1524:     mpz_clear(s);",
          "1525:     return;",
          "1526:   }",
          "1530:   snprintf(err_string, BUF_LEN,\"secret share dec %s\", public_shares);",
          "1534: void create_bls_key_aes(int *err_status, char* err_string, const char* s_shares,",
          "1535:                     uint8_t* encrypted_key, uint64_t key_len, uint8_t * encr_bls_key, uint32_t *enc_bls_key_len){",
          "1537:   char skey[ECDSA_SKEY_LEN];",
          "1538:   int status = AES_decrypt(encrypted_key, key_len, skey);",
          "1539:   if (status != SGX_SUCCESS) {",
          "1541:     snprintf(err_string, BUF_LEN,\"aes decrypt failed with status %d\", status);",
          "1542:     return;",
          "1543:   }",
          "1544:   skey[ECDSA_SKEY_LEN - 1] = 0;",
          "1546:   int num_shares = strlen(s_shares)/192;",
          "1548:   mpz_t sum;",
          "1549:   mpz_init(sum);",
          "1550:   mpz_set_ui(sum, 0);",
          "1556:   for ( int i = 0; i < num_shares; i++) {",
          "1557:     char encr_sshare[65];",
          "1558:     strncpy(encr_sshare, s_shares + 192 * i, 64);",
          "1559:     encr_sshare[64] = 0;",
          "1561:     char s_share[193];",
          "1562:     strncpy(s_share, s_shares + 192 * i, 192);",
          "1563:     s_share[192] = 0;",
          "1565:     char common_key[65];",
          "1566:     session_key_recover(skey, s_share, common_key);",
          "1567:     common_key[64] = 0;",
          "1569:     if (common_key == NULL){",
          "1571:       snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "1572:       mpz_clear(sum);",
          "1573:       return;",
          "1574:     }",
          "1580:     char decr_sshare[65];",
          "1581:     xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "1582:     if (decr_sshare == NULL){",
          "1584:       snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "1585:       mpz_clear(sum);",
          "1586:       return;",
          "1587:     }",
          "1588:     decr_sshare[64] = 0;",
          "1594:     mpz_t decr_secret_share;",
          "1595:     mpz_init(decr_secret_share);",
          "1596:     if (mpz_set_str(decr_secret_share, decr_sshare, 16) == -1){",
          "1599:       snprintf(err_string, BUF_LEN ,decr_sshare);",
          "1600:       mpz_clear(decr_secret_share);",
          "1601:       return;",
          "1602:     }",
          "1604:     mpz_addmul_ui(sum, decr_secret_share, 1);",
          "1605:     mpz_clear(decr_secret_share);",
          "1606:   }",
          "1608:   mpz_t q;",
          "1609:   mpz_init(q);",
          "1610:   mpz_set_str(q, \"21888242871839275222246405745257275088548364400416034343698204186575808495617\", 10);",
          "1612:   mpz_t bls_key;",
          "1613:   mpz_init(bls_key);",
          "1615:   mpz_mod(bls_key, sum, q);",
          "1617:   char key_share[mpz_sizeinbase(bls_key, 16) + 2];",
          "1618:   char *key = mpz_get_str(key_share, 16, bls_key);",
          "1619:   snprintf(err_string, BUF_LEN,\" bls private key is %s\", key_share);",
          "1620:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "1623:   status = AES_encrypt(key_share, encr_bls_key);",
          "1625:   if( status !=  SGX_SUCCESS) {",
          "1627:     snprintf(err_string, BUF_LEN,\"aes encrypt bls private key failed with status %d \", status);",
          "1628:     mpz_clear(bls_key);",
          "1629:     mpz_clear(sum);",
          "1630:     mpz_clear(q);",
          "1631:     return;",
          "1632:   }",
          "1635:   mpz_clear(bls_key);",
          "1636:   mpz_clear(sum);",
          "1637:   mpz_clear(q);",
          "1638: }",
          "1640: void get_bls_pub_key_aes(int *err_status, char* err_string, uint8_t* encrypted_key, uint64_t key_len, char* bls_pub_key){",
          "1642:     char skey_hex[ECDSA_SKEY_LEN];",
          "1644:     uint32_t len = key_len;",
          "1646:     int status = AES_decrypt(encrypted_key, key_len, skey_hex);",
          "1647:     if (status != SGX_SUCCESS) {",
          "1649:         snprintf(err_string, BUF_LEN,\"aes_decrypt failed with status %d\", status);",
          "1650:         return;",
          "1651:     }",
          "1653:     skey_hex[ECDSA_SKEY_LEN - 1] = 0;",
          "1655:     if (calc_bls_public_key(skey_hex, bls_pub_key) != 0){",
          "1657:         snprintf(err_string, BUF_LEN,\"could not calculate bls public key\");",
          "1658:         return;",
          "1659:     }",
          "1660: }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   );",
          "31:   public void generate_ecdsa_key (",
          "39:   public void get_public_ecdsa_key (",
          "47:   public void encrypt_key (",
          "61:   public void bls_sign_message (",
          "62:                                 [user_check] int *err_status,",
          "",
          "[Removed Lines]",
          "32:       [user_check] int *err_status,",
          "33:       [out, count = 1024] char* err_string,",
          "34:       [out, count = 1024] uint8_t* encrypted_key,",
          "35:       [user_check] uint32_t *enc_len,",
          "36:       [out, count = 1024] char * pub_key_x,",
          "37:       [out, count = 1024] char * pub_key_y);",
          "40:               [user_check] int *err_status,",
          "41:               [out, count = 1024] char* err_string,",
          "42:               [in, count = 1024] uint8_t* encrypted_key,",
          "43:               uint32_t dec_len,",
          "44:               [out, count = 1024] char * pub_key_x,",
          "45:               [out, count = 1024] char * pub_key_y);",
          "48:       [user_check] int *err_status,",
          "49:       [out, count = 1024] char* err_string,",
          "50:       [in, count = 1024] char* key,",
          "51:       [out, count = 1024] uint8_t* encrypted_key,",
          "52:       [user_check] uint32_t *enc_len);",
          "54:         public void decrypt_key (",
          "55:       [user_check] int *err_status,",
          "56:       [out, count = 1024] char* err_string,",
          "57:       [in, count = 1024] uint8_t* encrypted_key,",
          "58:       uint32_t enc_len,",
          "59:       [out, count = 1024] char* key );",
          "",
          "[Added Lines]",
          "32:                                 [user_check] int *err_status,",
          "33:                                 [out, count = 1024] char* err_string,",
          "34:                                 [out, count = 1024] uint8_t* encrypted_key,",
          "35:                                 [user_check] uint32_t *enc_len,",
          "36:                                 [out, count = 1024] char * pub_key_x,",
          "37:                                 [out, count = 1024] char * pub_key_y);",
          "40:                                 [user_check] int *err_status,",
          "41:                                 [out, count = 1024] char* err_string,",
          "42:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "43:                                 uint32_t dec_len,",
          "44:                                 [out, count = 1024] char * pub_key_x,",
          "45:                                 [out, count = 1024] char * pub_key_y);",
          "48:                                 [user_check] int *err_status,",
          "49:                                 [out, count = 1024] char* err_string,",
          "50:                                 [in, count = 1024] char* key,",
          "51:                                 [out, count = 1024] uint8_t* encrypted_key,",
          "52:                                 [user_check] uint32_t *enc_len);",
          "54:                 public void decrypt_key (",
          "55:                                 [user_check] int *err_status,",
          "56:                                 [out, count = 1024] char* err_string,",
          "57:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "58:                                 uint32_t enc_len,",
          "59:                                 [out, count = 1024] char* key );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:                                 [in, count = 1024] char* hashY ,",
          "68:                                 [out, count = 1024] char* signature);",
          "71:                                 [user_check] int *err_status,",
          "72:                                 [out, count = 1024] char* err_string,",
          "73:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "74:                                 [user_check] uint32_t * enc_len,",
          "75:                                 size_t _t);",
          "78:                              [user_check] int *err_status,",
          "79:                              [out, count = 1024] char* err_string,",
          "80:                              [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "81:                              [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "82:                              [user_check] uint32_t* dec_len);",
          "85:                                 [user_check] int *err_status,",
          "86:                                 [out, count = 1024] char* err_string,",
          "87:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "70:         public void gen_dkg_secret (",
          "77:         public void decrypt_dkg_secret (",
          "84:         public void get_secret_shares (",
          "",
          "[Added Lines]",
          "70:                 public void gen_dkg_secret (",
          "77:                 public void decrypt_dkg_secret (",
          "84:                 public void get_secret_shares (",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:                                 unsigned _t,",
          "91:                                 unsigned _n);",
          "94:                                 [user_check] int *err_status,",
          "95:                                 [out, count = 1024] char* err_string,",
          "96:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "93:          public void get_public_shares (",
          "",
          "[Added Lines]",
          "93:                 public void get_public_shares (",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:                                 unsigned _t,",
          "100:                                 unsigned _n);",
          "103:                                  [user_check] int *err_status,",
          "104:                                  [out, count = 1024] char* err_string,",
          "105:                                  [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "102:          public void ecdsa_sign1(",
          "",
          "[Added Lines]",
          "102:                 public void ecdsa_sign1(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:                                  [user_check] uint8_t* sig_v,",
          "111:                                  int base);",
          "118:                                 [user_check]int *err_status,",
          "119:                                 [out, count = 1024] char *err_string,",
          "120:                                 [out, count = 1024] uint8_t *encrypted_skey,",
          "",
          "[Removed Lines]",
          "113:          public void set_encrypted_dkg_poly( [user_check] int *err_status,",
          "114:                                              [out, count = 1024] char* err_string,",
          "115:                                              [in, count = 3050] uint8_t* encrypted_poly);",
          "117:          public void get_encr_sshare(",
          "",
          "[Added Lines]",
          "113:                 public void set_encrypted_dkg_poly( [user_check] int *err_status,",
          "114:                                  [out, count = 1024] char* err_string,",
          "115:                                  [in, count = 3050] uint8_t* encrypted_poly);",
          "117:                 public void get_encr_sshare(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "126:                                 uint8_t _n,",
          "127:                                 uint8_t ind);",
          "130:                                 [user_check] int *err_status,",
          "131:                                 [out, count = 1024] char* err_string,",
          "132:                                 [in, count = 8193] const char* public_shares,",
          "",
          "[Removed Lines]",
          "129:          public void dkg_verification(",
          "",
          "[Added Lines]",
          "129:                 public void dkg_verification(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "137:                                 int _ind,",
          "138:                                 [user_check] int* result);",
          "141:                                 [user_check]int *err_status,",
          "142:                                 [out, count = 1024] char* err_string,",
          "143:                                 [in, count = 6145] const char* s_shares,",
          "",
          "[Removed Lines]",
          "140:          public void create_bls_key(",
          "",
          "[Added Lines]",
          "140:                 public void create_bls_key(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "146:                                 [out, count = 1024] uint8_t * encr_bls_key,",
          "147:                                 [user_check] uint32_t *enc_bls_key_len);",
          "150:                                 [user_check]int *err_status,",
          "151:                                 [out, count = 1024]  char* err_string,",
          "152:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "153:                                 uint64_t key_len,",
          "154:                                 [out, count = 320] char* bls_pub_key);",
          "157:                                 [user_check] int *err_status,",
          "158:                                 [out, count = 1024]  char* err_string,",
          "159:                                 [in, count = 1024] uint8_t *encrypted_DHkey,",
          "",
          "[Removed Lines]",
          "149:          public void get_bls_pub_key(",
          "156:          public void complaint_response(",
          "",
          "[Added Lines]",
          "149:                 public void get_bls_pub_key(",
          "156:                 public void complaint_response(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "165:                                 uint8_t _n,",
          "166:                                 uint8_t ind1);",
          "169:                                 [user_check] int *err_status,",
          "170:                                 [out, count = 1024] char *err_string,",
          "172:                                 [user_check] uint32_t *enc_len);",
          "176:                                 [user_check] int *err_status,",
          "177:                                 [out, count = 1024] char* err_string,",
          "178:                                 [out, count = ECDSA_ENCR_LEN] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "168:          public void generate_SEK(",
          "171:                                 [in, count = 1024] uint8_t *encrypted_SEK,",
          "175:          public void generate_ecdsa_key_aes (",
          "",
          "[Added Lines]",
          "168:                 public void generate_SEK(",
          "171:                                 [out, count = 1024] uint8_t *encrypted_SEK,",
          "174:                 public void set_SEK(",
          "175:                                 [user_check] int *err_status,",
          "176:                                 [out, count = 1024] char *err_string,",
          "177:                                 [in, count = 1024] uint8_t *encrypted_SEK);",
          "179:                 public void generate_ecdsa_key_aes (",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "180:                                 [out, count = 1024] char * pub_key_x,",
          "181:                                 [out, count = 1024] char * pub_key_y);",
          "184:                                 [user_check] int *err_status,",
          "185:                                 [out, count = 1024] char* err_string,",
          "186:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "183:          public void get_public_ecdsa_key_aes(",
          "",
          "[Added Lines]",
          "187:                 public void get_public_ecdsa_key_aes(",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "188:                                 [out, count = 1024] char * pub_key_x,",
          "189:                                 [out, count = 1024] char * pub_key_y);",
          "192:                                 [user_check] int *err_status,",
          "193:                                 [out, count = 1024] char* err_string,",
          "194:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "191:          public void ecdsa_sign_aes(",
          "",
          "[Added Lines]",
          "195:                 public void ecdsa_sign_aes(",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "199:                                 [user_check] uint8_t* sig_v,",
          "200:                                 int base);",
          "203:                                 [user_check] int *err_status,",
          "204:                                 [out, count = 1024] char* err_string,",
          "205:                                 [in, count = 1024] char* key,",
          "206:                                 [out, count = 1024] uint8_t* encrypted_key,",
          "207:                                 [user_check] uint32_t *enc_len);",
          "210:                                 [user_check] int *err_status,",
          "211:                                 [out, count = 1024] char* err_string,",
          "212:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "202:          public void encrypt_key_aes (",
          "209:         public void decrypt_key_aes (",
          "",
          "[Added Lines]",
          "206:                 public void encrypt_key_aes (",
          "213:                 public void decrypt_key_aes (",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "214:                                 [out, count = 1024] char* key );",
          "218:                                 [user_check] int *err_status,",
          "219:                                 [out, count = 1024] char* err_string,",
          "220:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "221:                                 [user_check] uint32_t * enc_len,",
          "222:                                         size_t _t);",
          "225:                                 [user_check] int *err_status,",
          "226:                                 [out, count = 1024] char* err_string,",
          "227:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "228:                                 [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "229:                                 [user_check] uint32_t* dec_len);",
          "249:                           [user_check] int *err_status,",
          "250:                           [out, count = 1024] char* err_string,",
          "254:                           unsigned _t,",
          "",
          "[Removed Lines]",
          "217:         public void gen_dkg_secret_aes (",
          "224:         public void decrypt_dkg_secret_aes (",
          "231:         public void set_encrypted_dkg_poly_aes( [user_check] int *err_status,",
          "232:                               [out, count = 1024] char* err_string,",
          "233:                               [in, count = 3050] uint8_t* encrypted_poly,",
          "234:                               [user_check] uint64_t* enc_len);",
          "236:         public void get_encr_sshare_aes(",
          "237:                             [user_check]int *err_status,",
          "238:                             [out, count = 1024] char *err_string,",
          "239:                             [out, count = 1024] uint8_t *encrypted_skey,",
          "240:                             [user_check] uint32_t* dec_len,",
          "241:                             [out, count = 193] char* result_str,",
          "242:                             [out, count = 320] char* s_shareG2,",
          "243:                             [in, count = 129] char* pub_keyB,",
          "244:                             uint8_t _t,",
          "245:                             uint8_t _n,",
          "246:                             uint8_t ind);",
          "248:         public void get_public_shares_aes (",
          "251:                           [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "252:                           uint32_t enc_len,",
          "253:                           [out, count = 10000] char* public_shares,",
          "255:                           unsigned _n);",
          "",
          "[Added Lines]",
          "221:                 public void gen_dkg_secret_aes (",
          "228:                 public void decrypt_dkg_secret_aes (",
          "235:                 public void set_encrypted_dkg_poly_aes(",
          "236:                                [user_check] int *err_status,",
          "237:                                [out, count = 1024] char* err_string,",
          "238:                                [in, count = 3050] uint8_t* encrypted_poly,",
          "239:                                [user_check] uint64_t* enc_len);",
          "241:                 public void get_encr_sshare_aes(",
          "242:                               [user_check]int *err_status,",
          "243:                               [out, count = 1024] char *err_string,",
          "244:                               [out, count = 1024] uint8_t *encrypted_skey,",
          "245:                               [user_check] uint32_t* dec_len,",
          "246:                               [out, count = 193] char* result_str,",
          "247:                               [out, count = 320] char* s_shareG2,",
          "248:                               [in, count = 129] char* pub_keyB,",
          "249:                               uint8_t _t,",
          "250:                               uint8_t _n,",
          "251:                               uint8_t ind);",
          "253:                 public void get_public_shares_aes (",
          "254:                             [user_check] int *err_status,",
          "255:                             [out, count = 1024] char* err_string,",
          "256:                             [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "257:                             uint32_t enc_len,",
          "258:                             [out, count = 10000] char* public_shares,",
          "259:                             unsigned _t,",
          "260:                             unsigned _n);",
          "262:                 public void dkg_verification_aes(",
          "265:                           [in, count = 8193] const char* public_shares,",
          "266:                           [in, count = 193] const char* s_share,",
          "267:                           [in, count = 1024] uint8_t* encrypted_key,",
          "268:                           uint64_t key_len,",
          "270:                           int _ind,",
          "271:                           [user_check] int* result);",
          "274:                 public void create_bls_key_aes(",
          "275:                         [user_check]int *err_status,",
          "276:                         [out, count = 1024] char* err_string,",
          "277:                         [in, count = 6145] const char* s_shares,",
          "278:                         [in, count = 1024] uint8_t* encrypted_key,",
          "279:                         uint64_t key_len,",
          "280:                         [out, count = 1024] uint8_t * encr_bls_key,",
          "281:                         [user_check] uint32_t *enc_bls_key_len);",
          "283:                 public void bls_sign_message_aes (",
          "284:                         [user_check] int *err_status,",
          "285:                         [out, count = 1024] char* err_string,",
          "286:                         [in, count = 1024] uint8_t* encrypted_key,",
          "287:                         uint32_t enc_len,",
          "288:                         [in, count = 1024] char* hashX ,",
          "289:                         [in, count = 1024] char* hashY ,",
          "290:                         [out, count = 1024] char* signature);",
          "292:                 public void get_bls_pub_key_aes(",
          "293:                         [user_check]int *err_status,",
          "294:                         [out, count = 1024]  char* err_string,",
          "295:                         [in, count = 1024] uint8_t* encrypted_key,",
          "296:                         uint64_t key_len,",
          "297:                         [out, count = 320] char* bls_pub_key);",
          "",
          "---------------"
        ],
        "sgxwallet.c||sgxwallet.c": [
          "File: sgxwallet.c -> sgxwallet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:      break;",
          "90:     case 'a':",
          "91:       is_aes = 1;",
          "92:     case '?': // fprintf(stderr, \"unknown flag\\n\");",
          "93:       exit(1);",
          "94:     default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:       break;",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: #define BASE_PORT 1026",
          "97: #define ENCLAVE_NAME \"secure_enclave.signed.so\"",
          "98: #define SGXDATA_FOLDER \"sgx_data/\"",
          "",
          "[Removed Lines]",
          "96: #define WALLETDB_NAME  \"sgxwallet.db\"//\"test_sgxwallet.db\"//",
          "",
          "[Added Lines]",
          "96: #define WALLETDB_NAME  \"sgxwallet.db\"//\"test_sgxwallet.db\"",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "801:   BLSPublicKey common_public(make_shared<map<size_t, shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "802:   REQUIRE( common_public.VerifySigWithHelper(hash_arr, commonSig, t, n) );",
          "806: }",
          "808: TEST_CASE(\"API test\", \"[api_test]\") {",
          "",
          "[Removed Lines]",
          "804:   cout << \"try to get bls public key\" << endl;",
          "805:   cout << c.getBLSPublicKeyShare(\"BLS_KEY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:0\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1033: TEST_CASE(\"ManySimultaneousThreads\", \"[many_threads_test]\") {",
          "1034:   is_sgx_https = 0;",
          "1035:   DEBUG_PRINT = 1;",
          "1037:   init_all( false, false );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1035:   is_aes = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1217:   reset_db();",
          "1220:   Json::Value EthKeys[n];",
          "1221:   Json::Value VerifVects[n];",
          "1222:   Json::Value pubEthKeys;",
          "1223:   Json::Value secretShares[n];",
          "1224:   Json::Value pubBLSKeys[n];",
          "1225:   Json::Value BLSSigShares[n];",
          "1229:   int schain_id = rand_gen();",
          "1230:   int dkg_id = rand_gen();",
          "",
          "[Removed Lines]",
          "1219:   int n = 4, t = 4;",
          "1226:   std::vector<std::string> pubShares(n);",
          "1227:   std::vector<std::string> poly_names(n);",
          "",
          "[Added Lines]",
          "1219:   int n = 16, t = 16;",
          "1226:   vector<string> pubShares(n);",
          "1227:   vector<string> poly_names(n);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1236:     poly_names[i] = polyName;",
          "1237:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "1238:     cout << \"VV \" << i << \" \" << VerifVects[i] << std::endl;",
          "1240:   }",
          "1252: }",
          "",
          "[Removed Lines]",
          "1239:     pubEthKeys.append(EthKeys[i][\"PublicKey\"]);",
          "",
          "[Added Lines]",
          "1239:     pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "1240:   }",
          "1242:   for ( uint8_t i = 0; i < n; i++){",
          "1243:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "1244:     cout << secretShares[i] << std::endl;",
          "1245:     REQUIRE(secretShares[i][\"status\"] == 0);",
          "1246:     for ( uint8_t k = 0; k < t; k++ )",
          "1247:       for (uint8_t j = 0; j < 4; j++){",
          "1248:         string pubShare = VerifVects[i][\"verificationVector\"][k][j].asString();",
          "1249:         pubShares[i] += ConvertDecToHex(pubShare);",
          "1250:       }",
          "1258:     }",
          "1260:   int k = 0;",
          "1261:   vector <string> secShares_vect(n);",
          "1263:   for ( int i = 0; i < n; i++)",
          "1264:     for ( int j = 0; j < n; j++){",
          "1266:       cerr << \"SecretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "1267:       string secretShare = secretShares[i][\"secretShare\"].asString().substr(192 * j, 192 );",
          "1268:       secShares_vect[i] +=  secretShares[j][\"secretShare\"].asString().substr(192 * i, 192 );",
          "1269:       Json::Value verif = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j);",
          "1270:       cout << verif;",
          "1271:       bool res = verif[\"result\"].asBool();",
          "1272:       k++;",
          "1273:       cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "1274:       REQUIRE( res );",
          "1276:     }",
          "1278:   std::cerr << \"before exit \" << std::endl;",
          "1279:   exit(0);",
          "1280:   std::cerr << \"after exit \" << std::endl;",
          "1282:   Json::Value complaintResponse = c.complaintResponse(poly_names[1], 0);",
          "1283:   cout << complaintResponse << endl;",
          "1284:   REQUIRE(complaintResponse[\"status\"] == 0);",
          "1285:   cerr << \"share * G2 is \" << complaintResponse[\"share*G2\"].asString();",
          "1286:   cerr << \"DHKey is \" << complaintResponse[\"dhKey\"].asString();",
          "1288:   BLSSigShareSet sigShareSet(t, n);",
          "1290:   string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "1292:   auto hash_arr = make_shared<array<uint8_t, 32>>();",
          "1293:   uint64_t binLen;",
          "1294:   if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())){",
          "1295:     throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "1296:   }",
          "1299:   map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "1301:   for ( int i = 0; i < t; i++){",
          "1302:     string endName = poly_names[i].substr(4);",
          "1303:     string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "1304:     cout << c.createBLSPrivateKey(blsName, EthKeys[i][\"keyName\"].asString(), poly_names[i], secShares_vect[i], t, n);",
          "1305:     pubBLSKeys[i] = c.getBLSPublicKeyShare(blsName);",
          "1306:     cout << pubBLSKeys[i] << endl;",
          "1307:     REQUIRE(pubBLSKeys[i][\"status\"] == 0);",
          "1308:     cerr << \"BLS KEY SHARE NAME IS\" << blsName << endl;",
          "1309:     string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "1310:     BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "1311:     cout << BLSSigShares[i] << std::endl;",
          "1312:     REQUIRE( BLSSigShares[i][\"status\"] == 0);",
          "1313:     cerr << i << \" sig share is created \" << endl;",
          "1314:     shared_ptr<string> sig_share_ptr = make_shared<string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "1315:     BLSSigShare sig(sig_share_ptr, i + 1, t, n);",
          "1316:     sigShareSet.addSigShare(make_shared<BLSSigShare>(sig));",
          "1318:     vector<string> pubKey_vect;",
          "1319:     for ( uint8_t j = 0; j < 4; j++){",
          "1320:       pubKey_vect.push_back(pubBLSKeys[i][\"blsPublicKeyShare\"][j].asString());",
          "1321:     }",
          "1322:     BLSPublicKeyShare pubKey(make_shared<vector<string>>(pubKey_vect), t, n);",
          "1323:     REQUIRE( pubKey.VerifySigWithHelper(hash_arr, make_shared<BLSSigShare>(sig) , t, n));",
          "1325:     koefs_pkeys_map[i+1] = make_shared<BLSPublicKeyShare>(pubKey);",
          "1329:   shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "1330:   BLSPublicKey common_public(make_shared<map<size_t, shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "1331:   REQUIRE( common_public.VerifySigWithHelper(hash_arr, commonSig, t, n) );",
          "1333:   sgx_destroy_enclave(eid);",
          "1334: }",
          "1336: TEST_CASE(\"bls_sign_api test\", \"[bls_sign]\") {",
          "1338:   is_sgx_https = 0;",
          "1339:   DEBUG_PRINT = 1;",
          "1340:   is_aes = 1;",
          "1342:   std::cerr << \"test started\" << std::endl;",
          "1343:   init_all(false, false);",
          "1344:   cerr << \"Server inited\" << endl;",
          "1345:   HttpClient client(\"http://localhost:1029\");",
          "1346:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "1347:   cerr << \"Client inited\" << endl;",
          "1348:   string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "1349:   string blsName = \"BLS_KEY:SCHAIN_ID:1031067889:NODE_ID:0:DKG_ID:1112462780\";",
          "1350:   int n = 4, t = 4;",
          "1352:   Json::Value pubBLSKey = c.getBLSPublicKeyShare(blsName);",
          "1353:   REQUIRE(pubBLSKey[\"status\"] == 0);",
          "1354:   cout << pubBLSKey << endl;",
          "1358:   Json::Value sign = c.blsSignMessageHash(blsName, hash, t, n, 1);",
          "1359:   cout << sign << endl;",
          "1360:   REQUIRE(sign[\"status\"] == 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50860b33fbb34b4b12e5016a5ef08bd1c4d87571",
      "candidate_info": {
        "commit_hash": "50860b33fbb34b4b12e5016a5ef08bd1c4d87571",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/50860b33fbb34b4b12e5016a5ef08bd1c4d87571",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "Fixed docs",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:         snprintf(err_string, BUF_LEN, \"wrong string to init private key\");",
          "245:         return;",
          "246:     }",
          "249:     point Pkey = point_init();",
          "253:     point Pkey_test = point_init();",
          "256:     if (!point_cmp(Pkey, Pkey_test)) {",
          "257:         snprintf(err_string, BUF_LEN, \"Points are not equal\");",
          "",
          "[Removed Lines]",
          "238:     mpz_t skey_mpz;",
          "239:     mpz_init(skey_mpz);",
          "241:     if (mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE) == -1) {",
          "244:         mpz_clear(skey_mpz);",
          "251:     signature_extract_public_key(Pkey, skey_mpz, curve);",
          "254:     point_multiplication(Pkey_test, skey_mpz, curve->G, curve);",
          "",
          "[Added Lines]",
          "238:     mpz_t secretKeyMpz;",
          "239:     mpz_init(secretKeyMpz);",
          "241:     if (mpz_set_str(secretKeyMpz, skey, ECDSA_SKEY_BASE) == -1) {",
          "244:         mpz_clear(secretKeyMpz);",
          "251:     signature_extract_public_key(Pkey, secretKeyMpz, curve);",
          "254:     point_multiplication(Pkey_test, secretKeyMpz, curve->G, curve);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:     }",
          "282:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "285:     domain_parameters_clear(curve);",
          "286:     point_clear(Pkey);",
          "287: }",
          "289: void trustedEcdsaSign(int *errStatus, char *err_string, uint8_t *encrypted_key, uint32_t dec_len,",
          "292:     LOG_DEBUG (__FUNCTION__);",
          "303:     signature sign = signature_init();",
          "",
          "[Removed Lines]",
          "284:     mpz_clear(skey_mpz);",
          "290:                  unsigned char *hash, char *sig_r, char *sig_s, uint8_t *sig_v, int base) {",
          "294:     char* arr_m = NULL;",
          "295:     char* arr_r = NULL;",
          "296:     char* arr_s;",
          "298:     mpz_t skey_mpz;",
          "299:     mpz_init(skey_mpz);",
          "300:     mpz_t msg_mpz;",
          "301:     mpz_init(msg_mpz);",
          "",
          "[Added Lines]",
          "284:     mpz_clear(secretKeyMpz);",
          "290:                  unsigned char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
          "294:     char* arrM = NULL;",
          "295:     char* arrR = NULL;",
          "296:     char* arrS = NULL;",
          "298:     char* secretKey = calloc(ECDSA_SKEY_LEN,1);",
          "300:     mpz_t secretKeyMpz;",
          "301:     mpz_init(secretKeyMpz);",
          "302:     mpz_t msgMpz;",
          "303:     mpz_init(msgMpz);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308:     point publicKey = point_init();",
          "312:     sgx_status_t status = sgx_unseal_data(",
          "313:             (const sgx_sealed_data_t *) encrypted_key, NULL, 0, secretKey, &dec_len);",
          "",
          "[Removed Lines]",
          "310:     char* secretKey = calloc(ECDSA_SKEY_LEN,1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "325:         snprintf(err_string, BUF_LEN, \"invalid secret key\");",
          "326:         goto clean;",
          "327:     }",
          "331:         snprintf(err_string, BUF_LEN, \"invalid message hash\");",
          "332:         goto clean;",
          "333:     }",
          "342:         snprintf(err_string, BUF_LEN, \"signature is not verified\");",
          "343:         goto clean;",
          "344:     }",
          "364:     clean:",
          "368:     domain_parameters_clear(curve);",
          "369:     point_clear(publicKey);",
          "371:     signature_free(sign);",
          "375:     }",
          "378:     }",
          "382:     }",
          "384:     return;",
          "",
          "[Removed Lines]",
          "323:     if (mpz_set_str(skey_mpz, secretKey, ECDSA_SKEY_BASE) == -1) {",
          "329:     if (mpz_set_str(msg_mpz, hash, 16) == -1) {",
          "336:     signature_sign(sign, msg_mpz, skey_mpz, curve);",
          "338:     signature_extract_public_key(publicKey, skey_mpz, curve);",
          "340:     if (!signature_verify(msg_mpz, sign, publicKey, curve)) {",
          "350:     arr_m = calloc(mpz_sizeinbase(msg_mpz, 16) + 2 ,1);",
          "351:     mpz_get_str(arr_m, 16, msg_mpz);",
          "355:     arr_r = calloc(mpz_sizeinbase(sign->r, base) + 2,1);",
          "356:     mpz_get_str(arr_r, base, sign->r);",
          "357:     strncpy(sig_r, arr_r, 1024);",
          "359:     arr_s = calloc(mpz_sizeinbase(sign->s, base) + 2, 1);",
          "360:     mpz_get_str(arr_s, base, sign->s);",
          "361:     strncpy(sig_s, arr_s, 1024);",
          "366:     mpz_clear(skey_mpz);",
          "367:     mpz_clear(msg_mpz);",
          "370:     free(secretKey);",
          "373:     if (arr_m != NULL) {",
          "374:         free(arr_m);",
          "376:     if (arr_r != NULL) {",
          "377:         free(arr_r);",
          "380:     if (arr_s != NULL) {",
          "381:         free(arr_s);",
          "",
          "[Added Lines]",
          "325:     if (mpz_set_str(secretKeyMpz, secretKey, ECDSA_SKEY_BASE) == -1) {",
          "331:     if (mpz_set_str(msgMpz, hash, 16) == -1) {",
          "337:     signature_sign(sign, msgMpz, secretKeyMpz, curve);",
          "339:     signature_extract_public_key(publicKey, secretKeyMpz, curve);",
          "341:     if (!signature_verify(msgMpz, sign, publicKey, curve)) {",
          "347:     arrM = calloc(mpz_sizeinbase(msgMpz, 16) + 2 ,1);",
          "348:     mpz_get_str(arrM, 16, msgMpz);",
          "351:     arrR = calloc(mpz_sizeinbase(sign->r, base) + 2,1);",
          "352:     mpz_get_str(arrR, base, sign->r);",
          "353:     strncpy(sigR, arrR, 1024);",
          "355:     arrS = calloc(mpz_sizeinbase(sign->s, base) + 2, 1);",
          "356:     mpz_get_str(arrS, base, sign->s);",
          "357:     strncpy(sigS, arrS, 1024);",
          "362:     mpz_clear(secretKeyMpz);",
          "363:     mpz_clear(msgMpz);",
          "371:     if (secretKey)",
          "372:         free(secretKey);",
          "374:     if (arrM) {",
          "375:         free(arrM);",
          "377:     if (arrR) {",
          "378:         free(arrR);",
          "381:     if (arrS) {",
          "382:         free(arrS);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1065:     strncpy(err_string, skey, 1024);",
          "1071:         snprintf(err_string, BUF_LEN, \"wrong string to init private key  - %s\", skey);",
          "1074:         return;",
          "1075:     }",
          "1078:     point Pkey = point_init();",
          "1082:     point Pkey_test = point_init();",
          "1085:     if (!point_cmp(Pkey, Pkey_test)) {",
          "1086:         snprintf(err_string, BUF_LEN, \"Points are not equal\");",
          "",
          "[Removed Lines]",
          "1067:     mpz_t skey_mpz;",
          "1068:     mpz_init(skey_mpz);",
          "1070:     if (mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE) == -1) {",
          "1073:         mpz_clear(skey_mpz);",
          "1080:     signature_extract_public_key(Pkey, skey_mpz, curve);",
          "1083:     point_multiplication(Pkey_test, skey_mpz, curve->G, curve);",
          "",
          "[Added Lines]",
          "1068:     mpz_t secretKeyMpz;",
          "1069:     mpz_init(secretKeyMpz);",
          "1071:     if (mpz_set_str(secretKeyMpz, skey, ECDSA_SKEY_BASE) == -1) {",
          "1074:         mpz_clear(secretKeyMpz);",
          "1081:     signature_extract_public_key(Pkey, secretKeyMpz, curve);",
          "1084:     point_multiplication(Pkey_test, secretKeyMpz, curve->G, curve);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1110:     }",
          "1111:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "1114:     domain_parameters_clear(curve);",
          "1115:     point_clear(Pkey);",
          "1116: }",
          "1118: void trustedEcdsaSignAES(int *errStatus, char *err_string, uint8_t *encrypted_key, uint32_t enc_len,",
          "1121:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Removed Lines]",
          "1113:     mpz_clear(skey_mpz);",
          "1119:                     unsigned char *hash, char *sig_r, char *sig_s, uint8_t *sig_v, int base) {",
          "",
          "[Added Lines]",
          "1114:     mpz_clear(secretKeyMpz);",
          "1120:                     unsigned char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1136:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE - 1] = '\\0';",
          "1138:     snprintf(err_string, BUF_LEN, \"pr key is %s length %d \", skey, strlen(skey));",
          "1143:         snprintf(err_string, BUF_LEN, \"invalid secret key\");",
          "1145:         return;",
          "1146:     }",
          "1153:         snprintf(err_string, BUF_LEN, \"invalid message hash\");",
          "1155:         return;",
          "1156:     }",
          "1158:     signature sign = signature_init();",
          "1162:     point Pkey = point_init();",
          "1168:         snprintf(err_string, BUF_LEN, \"signature is not verified! \");",
          "1169:         return;",
          "1170:     }",
          "1189:     domain_parameters_clear(curve);",
          "1190:     signature_free(sign);",
          "1191:     point_clear(Pkey);",
          "",
          "[Removed Lines]",
          "1139:     mpz_t skey_mpz;",
          "1140:     mpz_init(skey_mpz);",
          "1141:     if (mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE) == -1) {",
          "1144:         mpz_clear(skey_mpz);",
          "1149:     mpz_t msg_mpz;",
          "1150:     mpz_init(msg_mpz);",
          "1151:     if (mpz_set_str(msg_mpz, hash, 16) == -1) {",
          "1154:         mpz_clear(msg_mpz);",
          "1160:     signature_sign(sign, msg_mpz, skey_mpz, curve);",
          "1164:     signature_extract_public_key(Pkey, skey_mpz, curve);",
          "1166:     if (!signature_verify(msg_mpz, sign, Pkey, curve)) {",
          "1173:     char arr_m[mpz_sizeinbase(msg_mpz, 16) + 2];",
          "1174:     char *msg = mpz_get_str(arr_m, 16, msg_mpz);",
          "1175:     snprintf(err_string, BUF_LEN, \"message is %s \", arr_m);",
          "1177:     char arr_r[mpz_sizeinbase(sign->r, base) + 2];",
          "1178:     char *r = mpz_get_str(arr_r, base, sign->r);",
          "1179:     strncpy(sig_r, arr_r, 1024);",
          "1181:     char arr_s[mpz_sizeinbase(sign->s, base) + 2];",
          "1182:     char *s = mpz_get_str(arr_s, base, sign->s);",
          "1183:     strncpy(sig_s, arr_s, 1024);",
          "1187:     mpz_clear(skey_mpz);",
          "1188:     mpz_clear(msg_mpz);",
          "",
          "[Added Lines]",
          "1140:     mpz_t secretKeyMpz;",
          "1141:     mpz_init(secretKeyMpz);",
          "1142:     if (mpz_set_str(secretKeyMpz, skey, ECDSA_SKEY_BASE) == -1) {",
          "1145:         mpz_clear(secretKeyMpz);",
          "1150:     mpz_t msgMpz;",
          "1151:     mpz_init(msgMpz);",
          "1152:     if (mpz_set_str(msgMpz, hash, 16) == -1) {",
          "1155:         mpz_clear(msgMpz);",
          "1161:     signature_sign(sign, msgMpz, secretKeyMpz, curve);",
          "1165:     signature_extract_public_key(Pkey, secretKeyMpz, curve);",
          "1167:     if (!signature_verify(msgMpz, sign, Pkey, curve)) {",
          "1174:     char arrM[mpz_sizeinbase(msgMpz, 16) + 2];",
          "1175:     char *msg = mpz_get_str(arrM, 16, msgMpz);",
          "1176:     snprintf(err_string, BUF_LEN, \"message is %s \", arrM);",
          "1178:     char arrR[mpz_sizeinbase(sign->r, base) + 2];",
          "1179:     char *r = mpz_get_str(arrR, base, sign->r);",
          "1180:     strncpy(sigR, arrR, 1024);",
          "1182:     char arrS[mpz_sizeinbase(sign->s, base) + 2];",
          "1183:     char *s = mpz_get_str(arrS, base, sign->s);",
          "1184:     strncpy(sigS, arrS, 1024);",
          "1188:     mpz_clear(secretKeyMpz);",
          "1189:     mpz_clear(msgMpz);",
          "",
          "---------------"
        ]
      }
    }
  ]
}