{
  "cve_id": "CVE-2011-0990",
  "cve_desc": "Race condition in the FastCopy optimization in the Array.Copy method in metadata/icall.c in Mono, when Moonlight 2.x before 2.4.1 or 3.x before 3.99.3 is used, allows remote attackers to trigger a buffer overflow and modify internal data structures, and cause a denial of service (plugin crash) or corrupt the internal state of the security manager, via a crafted media file in which a thread makes a change after a type check but before a copy action.",
  "repo": "mono/mono",
  "patch_hash": "2f00e4bbb2137130845afb1b2a1e678552fc8e5c",
  "patch_info": {
    "commit_hash": "2f00e4bbb2137130845afb1b2a1e678552fc8e5c",
    "repo": "mono/mono",
    "commit_url": "https://github.com/mono/mono/commit/2f00e4bbb2137130845afb1b2a1e678552fc8e5c",
    "files": [
      "mono/metadata/icall.c"
    ],
    "message": "Disable some of the FastCopy fast paths since they are racy.",
    "before_after_code_files": [
      "mono/metadata/icall.c||mono/metadata/icall.c"
    ]
  },
  "patch_diff": {
    "mono/metadata/icall.c||mono/metadata/icall.c": [
      "File: mono/metadata/icall.c -> mono/metadata/icall.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "718:  void * source_addr;",
      "719:  MonoClass *src_class;",
      "720:  MonoClass *dest_class;",
      "723:  MONO_ARCH_SAVE_REGS;",
      "",
      "[Removed Lines]",
      "721:  int i;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "744:  if (src_class == mono_defaults.object_class && dest_class->valuetype) {",
      "745:   int has_refs = dest_class->has_references;",
      "746:   for (i = source_idx; i < source_idx + length; ++i) {",
      "747:    MonoObject *elem = mono_array_get (source, MonoObject*, i);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "745:   return FALSE;",
      "747:     int i;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "772:   if (mono_class_is_subclass_of (src_class, dest_class, FALSE))",
      "773:    ;",
      "776:    for (i = source_idx; i < source_idx + length; ++i) {",
      "777:     MonoObject *elem = mono_array_get (source, MonoObject*, i);",
      "778:     if (elem && !mono_object_isinst (elem, dest_class))",
      "779:      return FALSE;",
      "780:    }",
      "782:    return FALSE;",
      "783:  }",
      "",
      "[Removed Lines]",
      "775:   else if (mono_class_is_subclass_of (dest_class, src_class, FALSE))",
      "781:   else",
      "",
      "[Added Lines]",
      "779:   else if (mono_class_is_subclass_of (dest_class, src_class, FALSE)) {",
      "781:    return FALSE;",
      "783:      int i;",
      "790:   } else",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "03b60794b45d9c51f48861783fa6dd51d47515dc",
      "candidate_info": {
        "commit_hash": "03b60794b45d9c51f48861783fa6dd51d47515dc",
        "repo": "mono/mono",
        "commit_url": "https://github.com/mono/mono/commit/03b60794b45d9c51f48861783fa6dd51d47515dc",
        "files": [
          "mono/metadata/icall.c"
        ],
        "message": "Disable some of the FastCopy fast paths since they are racy.",
        "before_after_code_files": [
          "mono/metadata/icall.c||mono/metadata/icall.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "mono/metadata/icall.c||mono/metadata/icall.c"
          ],
          "candidate": [
            "mono/metadata/icall.c||mono/metadata/icall.c"
          ]
        }
      },
      "candidate_diff": {
        "mono/metadata/icall.c||mono/metadata/icall.c": [
          "File: mono/metadata/icall.c -> mono/metadata/icall.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:  void * source_addr;",
          "718:  MonoClass *src_class;",
          "719:  MonoClass *dest_class;",
          "722:  MONO_ARCH_SAVE_REGS;",
          "",
          "[Removed Lines]",
          "720:  int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "743:  if (src_class == mono_defaults.object_class && dest_class->valuetype) {",
          "744:   int has_refs = dest_class->has_references;",
          "745:   for (i = source_idx; i < source_idx + length; ++i) {",
          "746:    MonoObject *elem = mono_array_get (source, MonoObject*, i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744:   return FALSE;",
          "746:     int i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "771:   if (mono_class_is_subclass_of (src_class, dest_class, FALSE))",
          "772:    ;",
          "775:    for (i = source_idx; i < source_idx + length; ++i) {",
          "776:     MonoObject *elem = mono_array_get (source, MonoObject*, i);",
          "777:     if (elem && !mono_object_isinst (elem, dest_class))",
          "778:      return FALSE;",
          "779:    }",
          "781:    return FALSE;",
          "782:  }",
          "",
          "[Removed Lines]",
          "774:   else if (mono_class_is_subclass_of (dest_class, src_class, FALSE))",
          "780:   else",
          "",
          "[Added Lines]",
          "778:   else if (mono_class_is_subclass_of (dest_class, src_class, FALSE)) {",
          "780:    return FALSE;",
          "782:      int i;",
          "789:   } else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "001ea99047a2f3a8106e5ac9cb13e3cf4ee55c6b",
      "candidate_info": {
        "commit_hash": "001ea99047a2f3a8106e5ac9cb13e3cf4ee55c6b",
        "repo": "mono/mono",
        "commit_url": "https://github.com/mono/mono/commit/001ea99047a2f3a8106e5ac9cb13e3cf4ee55c6b",
        "files": [
          "mono/metadata/icall.c"
        ],
        "message": "Disable some of the FastCopy fast paths since they are racy.",
        "before_after_code_files": [
          "mono/metadata/icall.c||mono/metadata/icall.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "mono/metadata/icall.c||mono/metadata/icall.c"
          ],
          "candidate": [
            "mono/metadata/icall.c||mono/metadata/icall.c"
          ]
        }
      },
      "candidate_diff": {
        "mono/metadata/icall.c||mono/metadata/icall.c": [
          "File: mono/metadata/icall.c -> mono/metadata/icall.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "687:  void * source_addr;",
          "688:  MonoClass *src_class;",
          "689:  MonoClass *dest_class;",
          "692:  MONO_ARCH_SAVE_REGS;",
          "",
          "[Removed Lines]",
          "690:  int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "713:  if (src_class == mono_defaults.object_class && dest_class->valuetype) {",
          "714:   int has_refs = dest_class->has_references;",
          "715:   for (i = source_idx; i < source_idx + length; ++i) {",
          "716:    MonoObject *elem = mono_array_get (source, MonoObject*, i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714:   return FALSE;",
          "716:     int i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "741:   if (mono_class_is_subclass_of (src_class, dest_class, FALSE))",
          "742:    ;",
          "745:    for (i = source_idx; i < source_idx + length; ++i) {",
          "746:     MonoObject *elem = mono_array_get (source, MonoObject*, i);",
          "747:     if (elem && !mono_object_isinst (elem, dest_class))",
          "748:      return FALSE;",
          "749:    }",
          "751:    return FALSE;",
          "752:  }",
          "",
          "[Removed Lines]",
          "744:   else if (mono_class_is_subclass_of (dest_class, src_class, FALSE))",
          "750:   else",
          "",
          "[Added Lines]",
          "748:   else if (mono_class_is_subclass_of (dest_class, src_class, FALSE)) {",
          "750:    return FALSE;",
          "752:      int i;",
          "759:   } else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee83bdd1f6bea90732c86a9621abcee63182ccbf",
      "candidate_info": {
        "commit_hash": "ee83bdd1f6bea90732c86a9621abcee63182ccbf",
        "repo": "mono/mono",
        "commit_url": "https://github.com/mono/mono/commit/ee83bdd1f6bea90732c86a9621abcee63182ccbf",
        "files": [
          "mono/metadata/icall.c"
        ],
        "message": "Disable some of the FastCopy fast paths since they are racy.",
        "before_after_code_files": [
          "mono/metadata/icall.c||mono/metadata/icall.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "mono/metadata/icall.c||mono/metadata/icall.c"
          ],
          "candidate": [
            "mono/metadata/icall.c||mono/metadata/icall.c"
          ]
        }
      },
      "candidate_diff": {
        "mono/metadata/icall.c||mono/metadata/icall.c": [
          "File: mono/metadata/icall.c -> mono/metadata/icall.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "687:  void * source_addr;",
          "688:  MonoClass *src_class;",
          "689:  MonoClass *dest_class;",
          "692:  MONO_ARCH_SAVE_REGS;",
          "",
          "[Removed Lines]",
          "690:  int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "713:  if (src_class == mono_defaults.object_class && dest_class->valuetype) {",
          "714:   int has_refs = dest_class->has_references;",
          "715:   for (i = source_idx; i < source_idx + length; ++i) {",
          "716:    MonoObject *elem = mono_array_get (source, MonoObject*, i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714:   return FALSE;",
          "716:     int i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "741:   if (mono_class_is_subclass_of (src_class, dest_class, FALSE))",
          "742:    ;",
          "745:    for (i = source_idx; i < source_idx + length; ++i) {",
          "746:     MonoObject *elem = mono_array_get (source, MonoObject*, i);",
          "747:     if (elem && !mono_object_isinst (elem, dest_class))",
          "748:      return FALSE;",
          "749:    }",
          "751:    return FALSE;",
          "752:  }",
          "",
          "[Removed Lines]",
          "744:   else if (mono_class_is_subclass_of (dest_class, src_class, FALSE))",
          "750:   else",
          "",
          "[Added Lines]",
          "748:   else if (mono_class_is_subclass_of (dest_class, src_class, FALSE)) {",
          "750:    return FALSE;",
          "752:      int i;",
          "759:   } else",
          "",
          "---------------"
        ]
      }
    }
  ]
}