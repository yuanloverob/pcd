{
  "cve_id": "CVE-2020-1916",
  "cve_desc": "An incorrect size calculation in ldap_escape may lead to an integer overflow when overly long input is passed in, resulting in an out-of-bounds write. This issue affects HHVM prior to 4.56.2, all versions between 4.57.0 and 4.78.0, 4.79.0, 4.80.0, 4.81.0, 4.82.0, 4.83.0.",
  "repo": "facebook/hhvm",
  "patch_hash": "abe0b29e4d3a610f9bc920b8be4ad8403364c2d4",
  "patch_info": {
    "commit_hash": "abe0b29e4d3a610f9bc920b8be4ad8403364c2d4",
    "repo": "facebook/hhvm",
    "commit_url": "https://github.com/facebook/hhvm/commit/abe0b29e4d3a610f9bc920b8be4ad8403364c2d4",
    "files": [
      "hphp/runtime/base/preg.cpp",
      "hphp/runtime/base/preg.h",
      "hphp/runtime/base/runtime-option.cpp",
      "hphp/runtime/base/runtime-option.h",
      "hphp/runtime/base/string-util.cpp",
      "hphp/runtime/ext/domdocument/ext_domdocument.h",
      "hphp/runtime/ext/gd/libgd/gd.cpp",
      "hphp/runtime/ext/ldap/ext_ldap.cpp",
      "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
      "hphp/runtime/server/admin-request-handler.cpp",
      "hphp/runtime/server/admin-request-handler.h",
      "hphp/test/slow/ext_ldap/t78806688.php",
      "hphp/test/slow/ext_ldap/t78806688.php.expectf",
      "hphp/test/slow/ext_string/t76103217.php",
      "hphp/test/slow/ext_string/t76103217.php.expect",
      "hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
      "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
      "hphp/util/light-process.cpp",
      "hphp/util/light-process.h",
      "hphp/zend/crypt-blowfish.cpp",
      "hphp/zend/zend-string.cpp"
    ],
    "message": "security fixes\n\nhttps://hhvm.com/blog/2020/11/12/security-update.html",
    "before_after_code_files": [
      "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp",
      "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h",
      "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp",
      "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h",
      "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp",
      "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h",
      "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp",
      "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp",
      "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
      "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp",
      "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h",
      "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php",
      "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf",
      "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php",
      "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect",
      "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
      "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
      "hphp/util/light-process.cpp||hphp/util/light-process.cpp",
      "hphp/util/light-process.h||hphp/util/light-process.h",
      "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp",
      "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp"
    ]
  },
  "patch_diff": {
    "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp": [
      "File: hphp/runtime/base/preg.cpp -> hphp/runtime/base/preg.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: #include \"hphp/util/logger.h\"",
      "50: #include \"hphp/util/concurrent-scalable-cache.h\"",
      "52: #include <folly/json.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52: #include <folly/FileUtil.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:             TempKeyCache& keyCache);",
      "218:   void insert(Accessor& accessor, const StringData* regex,",
      "219:               TempKeyCache& keyCache, const pcre_cache_entry* ent);",
      "221:   size_t size() const;",
      "223: private:",
      "",
      "[Removed Lines]",
      "220:   void dump(const std::string& filename);",
      "",
      "[Added Lines]",
      "221:   void dump(folly::File& file);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "512:   }",
      "513: }",
      "517:   switch (m_kind) {",
      "518:     case CacheKind::Static:",
      "519:       for (auto& it : *m_staticCache) {",
      "521:       }",
      "522:       break;",
      "523:     case CacheKind::Lru:",
      "",
      "[Removed Lines]",
      "515: void PCRECache::dump(const std::string& filename) {",
      "516:   std::ofstream out(filename.c_str());",
      "520:         out << it.first->data() << \"\\n\";",
      "",
      "[Added Lines]",
      "516: void PCRECache::dump(folly::File& file) {",
      "520:         folly::writeFull(file.fd(), it.first->data(), it.first->size());",
      "521:         folly::writeFull(file.fd(), \"\\n\", 1);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "530:           m_scalableCache->snapshotKeys(keys);",
      "531:         }",
      "532:         for (auto& key: keys) {",
      "534:         }",
      "535:       }",
      "536:       break;",
      "537:   }",
      "539: }",
      "541: size_t PCRECache::size() const {",
      "",
      "[Removed Lines]",
      "533:           out << key.c_str() << \"\\n\";",
      "538:   out.close();",
      "",
      "[Added Lines]",
      "534:           folly::writeFull(file.fd(), key.data(), key.size());",
      "535:           folly::writeFull(file.fd(), \"\\n\", 1);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "572: void pcre_init() {",
      "573: }",
      "577: }",
      "579: static pcre_jit_stack* alloc_jit_stack(void* /*data*/) {",
      "",
      "[Removed Lines]",
      "575: void pcre_dump_cache(const std::string& filename) {",
      "576:   s_pcreCache.dump(filename);",
      "",
      "[Added Lines]",
      "576: void pcre_dump_cache(folly::File& file) {",
      "577:   s_pcreCache.dump(file);",
      "",
      "---------------"
    ],
    "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h": [
      "File: hphp/runtime/base/preg.h -> hphp/runtime/base/preg.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #include \"hphp/runtime/base/type-string.h\"",
      "21: #include <folly/Optional.h>",
      "23: #include <cstdint>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #include <folly/File.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "111: void pcre_session_exit();",
      "",
      "[Removed Lines]",
      "116: void pcre_dump_cache(const std::string& filename);",
      "",
      "[Added Lines]",
      "117: void pcre_dump_cache(folly::File& file);",
      "",
      "---------------"
    ],
    "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp": [
      "File: hphp/runtime/base/runtime-option.cpp -> hphp/runtime/base/runtime-option.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: #include \"hphp/util/gzip.h\"",
      "55: #include \"hphp/util/hardware-counter.h\"",
      "56: #include \"hphp/util/hdf.h\"",
      "57: #include \"hphp/util/log-file-flusher.h\"",
      "58: #include \"hphp/util/logger.h\"",
      "59: #include \"hphp/util/network.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: #include \"hphp/util/light-process.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "754: std::string RuntimeOption::AdminPassword;",
      "755: std::set<std::string> RuntimeOption::AdminPasswords;",
      "756: std::set<std::string> RuntimeOption::HashedAdminPasswords;",
      "758: std::string RuntimeOption::ProxyOriginRaw;",
      "759: int RuntimeOption::ProxyPercentageRaw = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "758: std::string RuntimeOption::AdminDumpPath;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2398:                  \"Server.LightProcessFilePrefix\", \"./lightprocess\");",
      "2399:     Config::Bind(LightProcessCount, ini, config,",
      "2400:                  \"Server.LightProcessCount\", 0);",
      "2401:     Config::Bind(ForceServerNameToHeader, ini, config,",
      "2402:                  \"Server.ForceServerNameToHeader\");",
      "2403:     Config::Bind(AllowDuplicateCookies, ini, config,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2403:     Config::Bind(LightProcess::g_strictUser, ini, config,",
      "2404:                  \"Server.LightProcessStrictUser\", false);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2513:     AdminPasswords = Config::GetSet(ini, config, \"AdminServer.Passwords\");",
      "2514:     HashedAdminPasswords =",
      "2515:       Config::GetSet(ini, config, \"AdminServer.HashedPasswords\");",
      "2516:   }",
      "2517:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2520:     Config::Bind(AdminDumpPath, ini, config,",
      "2521:                  \"AdminServer.DumpPath\", \"/tmp/hhvm_admin_dump\");",
      "",
      "---------------"
    ],
    "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h": [
      "File: hphp/runtime/base/runtime-option.h -> hphp/runtime/base/runtime-option.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "496:   static std::set<std::string> AdminPasswords;",
      "497:   static std::set<std::string> HashedAdminPasswords;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "499:   static std::string AdminDumpPath;",
      "",
      "---------------"
    ],
    "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp": [
      "File: hphp/runtime/base/string-util.cpp -> hphp/runtime/base/string-util.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "435: }",
      "437: String StringUtil::Crypt(const String& input, const char *salt /* = \"\" */) {",
      "439:     raise_notice(\"crypt(): No salt parameter was specified.\"",
      "440:       \" You must use a randomly generated salt and a strong\"",
      "441:       \" hash function to produce a secure hash.\");",
      "",
      "[Removed Lines]",
      "438:   if (salt && salt[0] == '\\0') {",
      "",
      "[Added Lines]",
      "438:   assertx(salt);",
      "439:   if (salt[0] == '\\0') {",
      "",
      "---------------"
    ],
    "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h": [
      "File: hphp/runtime/ext/domdocument/ext_domdocument.h -> hphp/runtime/ext/domdocument/ext_domdocument.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:   DOMNode& operator=(const DOMNode& copy);",
      "55:   XMLNode node() const { return m_node; }",
      "56:   xmlNodePtr nodep() const {",
      "57:     return m_node ? m_node->nodep() : nullptr;",
      "",
      "[Removed Lines]",
      "54:   req::ptr<XMLDocumentData> doc() const { return m_node->doc(); }",
      "",
      "[Added Lines]",
      "54:   req::ptr<XMLDocumentData> doc() const {",
      "55:     return m_node ? m_node->doc() : nullptr;",
      "56:   }",
      "",
      "---------------"
    ],
    "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp": [
      "File: hphp/runtime/ext/gd/libgd/gd.cpp -> hphp/runtime/ext/gd/libgd/gd.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "187:   auto allocsz = sizeof(gdImage)",
      "190:   if (UNLIKELY(precheckOOM(allocsz))) {",
      "192:     return NULL;",
      "",
      "[Removed Lines]",
      "188:     + sy * (sizeof(int *) + sizeof(unsigned char *))",
      "189:     + sx * sy * (sizeof(int) + sizeof(unsigned char));",
      "",
      "[Added Lines]",
      "188:     + (sizeof(int *) + sizeof(unsigned char *)) * sy",
      "189:     + (sizeof(int) + sizeof(unsigned char)) * sx * sy;",
      "",
      "---------------"
    ],
    "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp": [
      "File: hphp/runtime/ext/ldap/ext_ldap.cpp -> hphp/runtime/ext/ldap/ext_ldap.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2140:   char hex[] = \"0123456789abcdef\";",
      "2143:   char *rdata = result.get()->mutableData(), *r = rdata;",
      "2145:   for (int i = 0; i < value.size(); i++) {",
      "",
      "[Removed Lines]",
      "2142:   String result(3 * value.size(), ReserveString);",
      "",
      "[Added Lines]",
      "2142:   String result(3UL * value.size(), ReserveString);",
      "",
      "---------------"
    ],
    "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp": [
      "File: hphp/runtime/ext/xmlreader/ext_xmlreader.cpp -> hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "598:   if (!basenode.isNull()) {",
      "599:     auto dombasenode = Native::data<DOMNode>(basenode.toObject());",
      "600:     doc = dombasenode->doc();",
      "603:       raise_warning(\"Invalid State Error\");",
      "604:       return false;",
      "605:     }",
      "606:   }",
      "608:   if (data->m_ptr) {",
      "",
      "[Removed Lines]",
      "601:     docp = doc->docp();",
      "602:     if (docp == nullptr) {",
      "",
      "[Added Lines]",
      "601:     if (doc == nullptr || doc->docp() == nullptr) {",
      "605:     docp = doc->docp();",
      "",
      "---------------"
    ],
    "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp": [
      "File: hphp/runtime/server/admin-request-handler.cpp -> hphp/runtime/server/admin-request-handler.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "76: #endif",
      "78: #include <folly/Conv.h>",
      "79: #include <folly/Random.h>",
      "80: #include <folly/portability/Unistd.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "79: #include <folly/File.h>",
      "80: #include <folly/FileUtil.h>",
      "81: #include <folly/Optional.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "254:   WarnIfNotOK(transport);",
      "255: }",
      "257: void AdminRequestHandler::handleRequest(Transport *transport) {",
      "258:   transport->addHeader(\"Content-Type\", \"text/plain\");",
      "259:   std::string cmd = transport->getCommand();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "260: namespace {",
      "263: struct DumpFile {",
      "264:   std::string path;",
      "265:   folly::File file;",
      "266: };",
      "268: folly::Optional<DumpFile> dump_file(const char* name) {",
      "269:   auto const path = folly::sformat(\"{}/{}\", RO::AdminDumpPath, name);",
      "272:   if (FileUtil::mkdir(path) != 0) return folly::none;",
      "276:   remove(path.c_str());",
      "280:   auto const fd = open(path.c_str(), O_CREAT|O_EXCL|O_RDWR, 0666);",
      "281:   if (fd < 0) return folly::none;",
      "283:   return DumpFile{path, folly::File(fd, /*owns=*/true)};",
      "284: }",
      "286: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "714:       break;",
      "715:     }",
      "716:     if (strncmp(cmd.c_str(), \"dump-static-strings\", 19) == 0) {",
      "721:       break;",
      "722:     }",
      "723:     if (strncmp(cmd.c_str(), \"random-static-strings\", 21) == 0) {",
      "",
      "[Removed Lines]",
      "717:       auto filename = transport->getParam(\"file\");",
      "718:       if (filename == \"\") filename = \"/tmp/static_strings\";",
      "719:       handleDumpStaticStringsRequest(cmd, filename);",
      "720:       transport->sendString(\"OK\\n\");",
      "",
      "[Added Lines]",
      "748:       if (auto file = dump_file(\"static_strings\")) {",
      "749:         handleDumpStaticStringsRequest(file->file);",
      "750:         transport->sendString(folly::sformat(\"dumped to {}\\n\", file->path));",
      "751:       } else {",
      "752:         transport->sendString(\"Unable to mkdir or file already exists.\\n\");",
      "753:       }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "746:     }",
      "748:     if (cmd == \"dump-pcre-cache\") {",
      "753:       break;",
      "754:     }",
      "",
      "[Removed Lines]",
      "749:       auto filename = transport->getParam(\"file\");",
      "750:       if (filename == \"\") filename = \"/tmp/pcre_cache\";",
      "751:       pcre_dump_cache(filename);",
      "752:       transport->sendString(\"OK\\n\");",
      "",
      "[Added Lines]",
      "782:       if (auto file = dump_file(\"pcre_cache\")) {",
      "783:         pcre_dump_cache(file->file);",
      "784:         transport->sendString(folly::sformat(\"dumped to {}\\n\", file->path));",
      "785:       } else {",
      "786:         transport->sendString(\"Unable to mkdir or file already exists.\\n\");",
      "787:       }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1368:       \"----\\n{} bytes\\n{}\\n\", str->size(), str->toCppString());",
      "1369: }",
      "1373:   auto const& list = lookupDefinedStaticStrings();",
      "1376:   for (auto item : list) {",
      "1378:     if (RuntimeOption::EvalPerfDataMap) {",
      "1379:       auto const len = std::min<size_t>(item->size(), 255);",
      "1380:       std::string str(item->data(), len);",
      "",
      "[Removed Lines]",
      "1371: bool AdminRequestHandler::handleDumpStaticStringsRequest(",
      "1372:   const std::string& /*cmd*/, const std::string& filename) {",
      "1374:   std::ofstream out(filename.c_str());",
      "1375:   SCOPE_EXIT { out.close(); };",
      "1377:     out << formatStaticString(item);",
      "",
      "[Added Lines]",
      "1406: bool AdminRequestHandler::handleDumpStaticStringsRequest(folly::File& file) {",
      "1409:     auto const line = formatStaticString(item);",
      "1410:     folly::writeFull(file.fd(), line.data(), line.size());",
      "",
      "---------------"
    ],
    "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h": [
      "File: hphp/runtime/server/admin-request-handler.h -> hphp/runtime/server/admin-request-handler.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #include \"hphp/runtime/server/access-log.h\"",
      "20: #include \"hphp/runtime/server/server.h\"",
      "22: namespace HPHP {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #include <folly/File.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "72:                                    Transport *transport);",
      "73:   bool handleStaticStringsRequest(const std::string &cmd,",
      "74:                                   Transport *transport);",
      "77:   bool handleRandomStaticStringsRequest(const std::string &cmd,",
      "78:                                         Transport *transport);",
      "79:   bool handleVMRequest      (const std::string &cmd, Transport *transport);",
      "",
      "[Removed Lines]",
      "75:   bool handleDumpStaticStringsRequest(const std::string &cmd,",
      "76:                                       const std::string &filename);",
      "",
      "[Added Lines]",
      "77:   bool handleDumpStaticStringsRequest(folly::File& file);",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php": [
      "File: hphp/test/slow/ext_ldap/t78806688.php -> hphp/test/slow/ext_ldap/t78806688.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?hh",
      "3: <<__EntryPoint>>",
      "4: function main(): void {",
      "5:   $multiplier = 1431655769;",
      "6:   $s = str_repeat(\"a\", $multiplier);",
      "7:   ldap_escape($s);",
      "8:   echo \"FAIL!\\n\";",
      "9: }",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf": [
      "File: hphp/test/slow/ext_ldap/t78806688.php.expectf -> hphp/test/slow/ext_ldap/t78806688.php.expectf",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: Fatal error: String length exceeded: 4294967307 > %d in %s/t78806688.php on line 7",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php": [
      "File: hphp/test/slow/ext_string/t76103217.php -> hphp/test/slow/ext_string/t76103217.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?hh",
      "3: <<__EntryPoint>>",
      "4: function main(): void {",
      "5:   $key = \"\\x26\\xbd\\xbd\\xbd\\xff\\x60\\xbf\\xff\\xff\\x60\";",
      "6:   $salt1 = \"\\x24\\x32\\x78\\x24\\x31\\x30\\x24\\x24\\x35\\x24\\xad\\x20\\x20\\x26\\xff\\x60\\xbf\\xff\\xff\\x60\\x24\\x31\\x78\\xa8\\xa8\\xa0\\x01\\x01\\x01\\x01\\x01\\x01\";",
      "7:   $salt2 = \"\\x24\\x32\\x78\\x24\\x31\\x30\\x24\\x24\\x35\";",
      "9:   var_dump(base64_encode(crypt($key, $salt1)));",
      "10:   var_dump(base64_encode(crypt($key, $salt2)));",
      "11: }",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect": [
      "File: hphp/test/slow/ext_string/t76103217.php.expect -> hphp/test/slow/ext_string/t76103217.php.expect",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: string(4) \"KjA=\"",
      "2: string(12) \"JDJ4JDEwJCQ1\"",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php": [
      "File: hphp/test/slow/ext_xml/xmlreader_empty_expand.php -> hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?hh",
      "3: <<__EntryPoint>>",
      "4: function main(): void {",
      "5:     $a = new XMLReader();",
      "6:     $b = new DOMNode();",
      "7:     $a->expand($b);",
      "8:     $a->expand($a);",
      "9: }",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf": [
      "File: hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf -> hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: Warning: Invalid State Error in %s on line %d",
      "3: Warning: Invalid State Error in %s on line %d",
      "",
      "---------------"
    ],
    "hphp/util/light-process.cpp||hphp/util/light-process.cpp": [
      "File: hphp/util/light-process.cpp -> hphp/util/light-process.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: #include \"hphp/util/hugetlb.h\"",
      "47: #include \"hphp/util/logger.h\"",
      "48: #include \"hphp/util/process.h\"",
      "49: #include \"hphp/util/timer.h\"",
      "50: #include \"hphp/util/user-info.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49: #include \"hphp/util/struct-log.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57: namespace {",
      "59: __thread LightProcess* tl_proc;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58: bool LightProcess::g_strictUser = false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "436:   lwp_read(afdt_fd, uname);",
      "437:   if (!uname.length()) return;",
      "439:   auto buf = PasswdBuffer{};",
      "440:   struct passwd *pw;",
      "441:   if (getpwnam_r(uname.c_str(), &buf.ent, buf.data.get(), buf.size, &pw)) {",
      "443:     return;",
      "444:   }",
      "445:   if (!pw) {",
      "447:     return;",
      "448:   }",
      "450:   if (pw->pw_gid) {",
      "453:   }",
      "454:   if (pw->pw_uid) {",
      "456:   }",
      "457: }",
      "",
      "[Removed Lines]",
      "451:     initgroups(pw->pw_name, pw->pw_gid);",
      "452:     setgid(pw->pw_gid);",
      "455:     setuid(pw->pw_uid);",
      "",
      "[Added Lines]",
      "442:   StructuredLogEntry* log = nullptr;",
      "443:   int err = 0;",
      "444:   SCOPE_EXIT {",
      "445:     if (log) {",
      "446:       log->setInt(\"errno\", err);",
      "447:       log->setStr(\"new_user\", uname);",
      "448:       StructuredLog::log(\"hhvm_lightprocess_error\", *log);",
      "449:       delete log;",
      "450:     }",
      "451:   };",
      "455:     err = errno;",
      "456:     log = new StructuredLogEntry();",
      "457:     log->setStr(\"function\", \"getpwnam_r\");",
      "458:     if (LightProcess::g_strictUser) {",
      "459:       throw std::runtime_error{\"getpwnam_r(): \" + folly::errnoStr(err)};",
      "460:     }",
      "464:     log = new StructuredLogEntry();",
      "465:     log->setStr(\"function\", \"getpwnam_r\");",
      "466:     if (LightProcess::g_strictUser) {",
      "467:       throw std::runtime_error{\"getpwnam_r(): not found\"};",
      "468:     }",
      "472:     if (initgroups(pw->pw_name, pw->pw_gid)) {",
      "473:       err = errno;",
      "474:       log = new StructuredLogEntry();",
      "475:       log->setStr(\"function\", \"initgroups\");",
      "476:     }",
      "477:     if (setgid(pw->pw_gid)) {",
      "478:       if (!log) {",
      "479:         err = errno;",
      "480:         log = new StructuredLogEntry();",
      "481:         log->setStr(\"function\", \"setgid\");",
      "482:         if (LightProcess::g_strictUser) {",
      "483:           throw std::runtime_error{\"setgid():\" + folly::errnoStr(err)};",
      "484:         }",
      "485:       }",
      "486:     }",
      "489:     if (setuid(pw->pw_uid)) {",
      "490:       if (!log) {",
      "491:         err = errno;",
      "492:         log = new StructuredLogEntry();",
      "493:         log->setStr(\"function\", \"setuid\");",
      "494:         if (LightProcess::g_strictUser) {",
      "495:           throw std::runtime_error{\"setuid():\" + folly::errnoStr(err)};",
      "496:         }",
      "497:       }",
      "498:     }",
      "",
      "---------------"
    ],
    "hphp/util/light-process.h||hphp/util/light-process.h": [
      "File: hphp/util/light-process.h -> hphp/util/light-process.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "129:   Mutex m_procMutex;",
      "130:   int m_afdt_fd;",
      "131:   std::map<FILE*, pid_t> m_popenMap;",
      "132: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:  public:",
      "135:   static bool g_strictUser;",
      "",
      "---------------"
    ],
    "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp": [
      "File: hphp/zend/crypt-blowfish.cpp -> hphp/zend/crypt-blowfish.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "696:   }",
      "698:   count = (BF_word)1 << ((setting[4] - '0') * 10 + (setting[5] - '0'));",
      "700:     __set_errno(EINVAL);",
      "701:     return NULL;",
      "702:   }",
      "",
      "[Removed Lines]",
      "699:   if (count < min || BF_decode(data.binary.salt, &setting[7], 16)) {",
      "",
      "[Added Lines]",
      "699:   if (count < min ||",
      "700:       BF_decode(data.binary.salt, &setting[7], 16) ||",
      "701:       ((unsigned int)(setting[7 + 22 - 1] - 0x20) >= 0x60)",
      "702:      ) {",
      "",
      "---------------"
    ],
    "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp": [
      "File: hphp/zend/zend-string.cpp -> hphp/zend/zend-string.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "396: }",
      "398: char *string_crypt(const char *key, const char *salt) {",
      "402:   char random_salt[12];",
      "403:   if (!*salt) {",
      "",
      "[Removed Lines]",
      "399:   assert(key);",
      "400:   assert(salt);",
      "",
      "[Added Lines]",
      "399:   assertx(key);",
      "400:   assertx(salt);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "407:     return string_crypt(key, random_salt);",
      "408:   }",
      "411:     (salt[0] == '$') &&",
      "412:     (salt[1] == '2') &&",
      "413:     (salt[2] >= 'a') && (salt[2] <= 'z') &&",
      "",
      "[Removed Lines]",
      "410:   if ((strlen(salt) > sizeof(\"$2X$00$\")) &&",
      "",
      "[Added Lines]",
      "410:   auto const saltLen = strlen(salt);",
      "411:   if ((saltLen > sizeof(\"$2X$00$\")) &&",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "417:     (salt[6] == '$')) {",
      "419:     char output[61];",
      "421:       return strdup(output);",
      "422:     }",
      "",
      "[Removed Lines]",
      "420:     if (php_crypt_blowfish_rn(key, salt, output, sizeof(output))) {",
      "",
      "[Added Lines]",
      "422:     static constexpr size_t maxSaltLength = 123;",
      "423:     char paddedSalt[maxSaltLength + 1];",
      "424:     paddedSalt[0] = paddedSalt[maxSaltLength] = '\\0';",
      "426:     memset(&paddedSalt[1], '$', maxSaltLength - 1);",
      "427:     memcpy(paddedSalt, salt, std::min(maxSaltLength, saltLen));",
      "428:     paddedSalt[saltLen] = '\\0';",
      "430:     if (php_crypt_blowfish_rn(key, paddedSalt, output, sizeof(output))) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ce84338b63a46ed677d47b7dae44aa3d6574f491",
      "candidate_info": {
        "commit_hash": "ce84338b63a46ed677d47b7dae44aa3d6574f491",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/ce84338b63a46ed677d47b7dae44aa3d6574f491",
        "files": [
          "hphp/runtime/base/preg.cpp",
          "hphp/runtime/base/preg.h",
          "hphp/runtime/base/runtime-option.cpp",
          "hphp/runtime/base/runtime-option.h",
          "hphp/runtime/base/string-util.cpp",
          "hphp/runtime/ext/domdocument/ext_domdocument.h",
          "hphp/runtime/ext/gd/libgd/gd.cpp",
          "hphp/runtime/ext/ldap/ext_ldap.cpp",
          "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
          "hphp/runtime/server/admin-request-handler.cpp",
          "hphp/runtime/server/admin-request-handler.h",
          "hphp/test/slow/ext_ldap/t78806688.php",
          "hphp/test/slow/ext_ldap/t78806688.php.expectf",
          "hphp/test/slow/ext_string/t76103217.php",
          "hphp/test/slow/ext_string/t76103217.php.expect",
          "hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
          "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
          "hphp/util/light-process.cpp",
          "hphp/util/light-process.h",
          "hphp/zend/crypt-blowfish.cpp",
          "hphp/zend/zend-string.cpp"
        ],
        "message": "security fixes",
        "before_after_code_files": [
          "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp",
          "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h",
          "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp",
          "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h",
          "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp",
          "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h",
          "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp",
          "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp",
          "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
          "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp",
          "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h",
          "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php",
          "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf",
          "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php",
          "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect",
          "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
          "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
          "hphp/util/light-process.cpp||hphp/util/light-process.cpp",
          "hphp/util/light-process.h||hphp/util/light-process.h",
          "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp",
          "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp",
            "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h",
            "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp",
            "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h",
            "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp",
            "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h",
            "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp",
            "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp",
            "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
            "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp",
            "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h",
            "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php",
            "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf",
            "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php",
            "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect",
            "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
            "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
            "hphp/util/light-process.cpp||hphp/util/light-process.cpp",
            "hphp/util/light-process.h||hphp/util/light-process.h",
            "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp",
            "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp"
          ],
          "candidate": [
            "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp",
            "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h",
            "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp",
            "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h",
            "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp",
            "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h",
            "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp",
            "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp",
            "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
            "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp",
            "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h",
            "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php",
            "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf",
            "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php",
            "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect",
            "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
            "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
            "hphp/util/light-process.cpp||hphp/util/light-process.cpp",
            "hphp/util/light-process.h||hphp/util/light-process.h",
            "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp",
            "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp": [
          "File: hphp/runtime/base/preg.cpp -> hphp/runtime/base/preg.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #include \"hphp/util/logger.h\"",
          "50: #include \"hphp/util/concurrent-scalable-cache.h\"",
          "52: #include <folly/json.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #include <folly/FileUtil.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:             TempKeyCache& keyCache);",
          "218:   void insert(Accessor& accessor, const StringData* regex,",
          "219:               TempKeyCache& keyCache, const pcre_cache_entry* ent);",
          "221:   size_t size() const;",
          "223: private:",
          "",
          "[Removed Lines]",
          "220:   void dump(const std::string& filename);",
          "",
          "[Added Lines]",
          "221:   void dump(folly::File& file);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "512:   }",
          "513: }",
          "517:   switch (m_kind) {",
          "518:     case CacheKind::Static:",
          "519:       for (auto& it : *m_staticCache) {",
          "521:       }",
          "522:       break;",
          "523:     case CacheKind::Lru:",
          "",
          "[Removed Lines]",
          "515: void PCRECache::dump(const std::string& filename) {",
          "516:   std::ofstream out(filename.c_str());",
          "520:         out << it.first->data() << \"\\n\";",
          "",
          "[Added Lines]",
          "516: void PCRECache::dump(folly::File& file) {",
          "520:         folly::writeFull(file.fd(), it.first->data(), it.first->size());",
          "521:         folly::writeFull(file.fd(), \"\\n\", 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "530:           m_scalableCache->snapshotKeys(keys);",
          "531:         }",
          "532:         for (auto& key: keys) {",
          "534:         }",
          "535:       }",
          "536:       break;",
          "537:   }",
          "539: }",
          "541: size_t PCRECache::size() const {",
          "",
          "[Removed Lines]",
          "533:           out << key.c_str() << \"\\n\";",
          "538:   out.close();",
          "",
          "[Added Lines]",
          "534:           folly::writeFull(file.fd(), key.data(), key.size());",
          "535:           folly::writeFull(file.fd(), \"\\n\", 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "572: void pcre_init() {",
          "573: }",
          "577: }",
          "579: static pcre_jit_stack* alloc_jit_stack(void* /*data*/) {",
          "",
          "[Removed Lines]",
          "575: void pcre_dump_cache(const std::string& filename) {",
          "576:   s_pcreCache.dump(filename);",
          "",
          "[Added Lines]",
          "576: void pcre_dump_cache(folly::File& file) {",
          "577:   s_pcreCache.dump(file);",
          "",
          "---------------"
        ],
        "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h": [
          "File: hphp/runtime/base/preg.h -> hphp/runtime/base/preg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"hphp/runtime/base/type-string.h\"",
          "22: #include <folly/Optional.h>",
          "24: #include <cstdint>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <folly/File.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112: void pcre_session_exit();",
          "",
          "[Removed Lines]",
          "117: void pcre_dump_cache(const std::string& filename);",
          "",
          "[Added Lines]",
          "118: void pcre_dump_cache(folly::File& file);",
          "",
          "---------------"
        ],
        "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp": [
          "File: hphp/runtime/base/runtime-option.cpp -> hphp/runtime/base/runtime-option.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #include \"hphp/util/gzip.h\"",
          "53: #include \"hphp/util/hardware-counter.h\"",
          "54: #include \"hphp/util/hdf.h\"",
          "55: #include \"hphp/util/log-file-flusher.h\"",
          "56: #include \"hphp/util/logger.h\"",
          "57: #include \"hphp/util/network.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: #include \"hphp/util/light-process.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "742: std::string RuntimeOption::AdminPassword;",
          "743: std::set<std::string> RuntimeOption::AdminPasswords;",
          "744: std::set<std::string> RuntimeOption::HashedAdminPasswords;",
          "746: std::string RuntimeOption::ProxyOriginRaw;",
          "747: int RuntimeOption::ProxyPercentageRaw = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "746: std::string RuntimeOption::AdminDumpPath;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2387:                  \"Server.LightProcessFilePrefix\", \"./lightprocess\");",
          "2388:     Config::Bind(LightProcessCount, ini, config,",
          "2389:                  \"Server.LightProcessCount\", 0);",
          "2390:     Config::Bind(ForceServerNameToHeader, ini, config,",
          "2391:                  \"Server.ForceServerNameToHeader\");",
          "2392:     Config::Bind(AllowDuplicateCookies, ini, config,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2392:     Config::Bind(LightProcess::g_strictUser, ini, config,",
          "2393:                  \"Server.LightProcessStrictUser\", false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2507:     AdminPasswords = Config::GetSet(ini, config, \"AdminServer.Passwords\");",
          "2508:     HashedAdminPasswords =",
          "2509:       Config::GetSet(ini, config, \"AdminServer.HashedPasswords\");",
          "2510:   }",
          "2511:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2514:     Config::Bind(AdminDumpPath, ini, config,",
          "2515:                  \"AdminServer.DumpPath\", \"/tmp/hhvm_admin_dump\");",
          "",
          "---------------"
        ],
        "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h": [
          "File: hphp/runtime/base/runtime-option.h -> hphp/runtime/base/runtime-option.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:   static std::set<std::string> AdminPasswords;",
          "489:   static std::set<std::string> HashedAdminPasswords;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:   static std::string AdminDumpPath;",
          "",
          "---------------"
        ],
        "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp": [
          "File: hphp/runtime/base/string-util.cpp -> hphp/runtime/base/string-util.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "435: }",
          "437: String StringUtil::Crypt(const String& input, const char *salt /* = \"\" */) {",
          "439:     raise_notice(\"crypt(): No salt parameter was specified.\"",
          "440:       \" You must use a randomly generated salt and a strong\"",
          "441:       \" hash function to produce a secure hash.\");",
          "",
          "[Removed Lines]",
          "438:   if (salt && salt[0] == '\\0') {",
          "",
          "[Added Lines]",
          "438:   assertx(salt);",
          "439:   if (salt[0] == '\\0') {",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h": [
          "File: hphp/runtime/ext/domdocument/ext_domdocument.h -> hphp/runtime/ext/domdocument/ext_domdocument.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   DOMNode& operator=(const DOMNode& copy);",
          "56:   XMLNode node() const { return m_node; }",
          "57:   xmlNodePtr nodep() const {",
          "58:     return m_node ? m_node->nodep() : nullptr;",
          "",
          "[Removed Lines]",
          "55:   req::ptr<XMLDocumentData> doc() const { return m_node->doc(); }",
          "",
          "[Added Lines]",
          "55:   req::ptr<XMLDocumentData> doc() const {",
          "56:     return m_node ? m_node->doc() : nullptr;",
          "57:   }",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp": [
          "File: hphp/runtime/ext/gd/libgd/gd.cpp -> hphp/runtime/ext/gd/libgd/gd.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:   auto allocsz = sizeof(gdImage)",
          "190:   if (UNLIKELY(precheckOOM(allocsz))) {",
          "192:     return NULL;",
          "",
          "[Removed Lines]",
          "188:     + sy * (sizeof(int *) + sizeof(unsigned char *))",
          "189:     + sx * sy * (sizeof(int) + sizeof(unsigned char));",
          "",
          "[Added Lines]",
          "188:     + (sizeof(int *) + sizeof(unsigned char *)) * sy",
          "189:     + (sizeof(int) + sizeof(unsigned char)) * sx * sy;",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp": [
          "File: hphp/runtime/ext/ldap/ext_ldap.cpp -> hphp/runtime/ext/ldap/ext_ldap.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2141:   char hex[] = \"0123456789abcdef\";",
          "2144:   char *rdata = result.get()->mutableData(), *r = rdata;",
          "2146:   for (int i = 0; i < value.size(); i++) {",
          "",
          "[Removed Lines]",
          "2143:   String result(3 * value.size(), ReserveString);",
          "",
          "[Added Lines]",
          "2143:   String result(3UL * value.size(), ReserveString);",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp": [
          "File: hphp/runtime/ext/xmlreader/ext_xmlreader.cpp -> hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:   if (!basenode.isNull()) {",
          "599:     auto dombasenode = Native::data<DOMNode>(basenode.toObject());",
          "600:     doc = dombasenode->doc();",
          "603:       raise_warning(\"Invalid State Error\");",
          "604:       return false;",
          "605:     }",
          "606:   }",
          "608:   if (data->m_ptr) {",
          "",
          "[Removed Lines]",
          "601:     docp = doc->docp();",
          "602:     if (docp == nullptr) {",
          "",
          "[Added Lines]",
          "601:     if (doc == nullptr || doc->docp() == nullptr) {",
          "605:     docp = doc->docp();",
          "",
          "---------------"
        ],
        "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp": [
          "File: hphp/runtime/server/admin-request-handler.cpp -> hphp/runtime/server/admin-request-handler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: #endif",
          "78: #include <folly/Conv.h>",
          "79: #include <folly/Random.h>",
          "80: #include <folly/portability/Unistd.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: #include <folly/File.h>",
          "80: #include <folly/FileUtil.h>",
          "81: #include <folly/Optional.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:   WarnIfNotOK(transport);",
          "255: }",
          "257: void AdminRequestHandler::handleRequest(Transport *transport) {",
          "258:   transport->addHeader(\"Content-Type\", \"text/plain\");",
          "259:   std::string cmd = transport->getCommand();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: namespace {",
          "263: struct DumpFile {",
          "264:   std::string path;",
          "265:   folly::File file;",
          "266: };",
          "268: folly::Optional<DumpFile> dump_file(const char* name) {",
          "269:   auto const path = folly::sformat(\"{}/{}\", RO::AdminDumpPath, name);",
          "272:   if (FileUtil::mkdir(path) != 0) return folly::none;",
          "276:   remove(path.c_str());",
          "280:   auto const fd = open(path.c_str(), O_CREAT|O_EXCL|O_RDWR, 0666);",
          "281:   if (fd < 0) return folly::none;",
          "283:   return DumpFile{path, folly::File(fd, /*owns=*/true)};",
          "284: }",
          "286: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "714:       break;",
          "715:     }",
          "716:     if (strncmp(cmd.c_str(), \"dump-static-strings\", 19) == 0) {",
          "721:       break;",
          "722:     }",
          "723:     if (strncmp(cmd.c_str(), \"random-static-strings\", 21) == 0) {",
          "",
          "[Removed Lines]",
          "717:       auto filename = transport->getParam(\"file\");",
          "718:       if (filename == \"\") filename = \"/tmp/static_strings\";",
          "719:       handleDumpStaticStringsRequest(cmd, filename);",
          "720:       transport->sendString(\"OK\\n\");",
          "",
          "[Added Lines]",
          "748:       if (auto file = dump_file(\"static_strings\")) {",
          "749:         handleDumpStaticStringsRequest(file->file);",
          "750:         transport->sendString(folly::sformat(\"dumped to {}\\n\", file->path));",
          "751:       } else {",
          "752:         transport->sendString(\"Unable to mkdir or file already exists.\\n\");",
          "753:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "746:     }",
          "748:     if (cmd == \"dump-pcre-cache\") {",
          "753:       break;",
          "754:     }",
          "",
          "[Removed Lines]",
          "749:       auto filename = transport->getParam(\"file\");",
          "750:       if (filename == \"\") filename = \"/tmp/pcre_cache\";",
          "751:       pcre_dump_cache(filename);",
          "752:       transport->sendString(\"OK\\n\");",
          "",
          "[Added Lines]",
          "782:       if (auto file = dump_file(\"pcre_cache\")) {",
          "783:         pcre_dump_cache(file->file);",
          "784:         transport->sendString(folly::sformat(\"dumped to {}\\n\", file->path));",
          "785:       } else {",
          "786:         transport->sendString(\"Unable to mkdir or file already exists.\\n\");",
          "787:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1384:       \"----\\n{} bytes\\n{}\\n\", str->size(), str->toCppString());",
          "1385: }",
          "1389:   auto const& list = lookupDefinedStaticStrings();",
          "1392:   for (auto item : list) {",
          "1394:     if (RuntimeOption::EvalPerfDataMap) {",
          "1395:       auto const len = std::min<size_t>(item->size(), 255);",
          "1396:       std::string str(item->data(), len);",
          "",
          "[Removed Lines]",
          "1387: bool AdminRequestHandler::handleDumpStaticStringsRequest(",
          "1388:   const std::string& /*cmd*/, const std::string& filename) {",
          "1390:   std::ofstream out(filename.c_str());",
          "1391:   SCOPE_EXIT { out.close(); };",
          "1393:     out << formatStaticString(item);",
          "",
          "[Added Lines]",
          "1422: bool AdminRequestHandler::handleDumpStaticStringsRequest(folly::File& file) {",
          "1425:     auto const line = formatStaticString(item);",
          "1426:     folly::writeFull(file.fd(), line.data(), line.size());",
          "",
          "---------------"
        ],
        "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h": [
          "File: hphp/runtime/server/admin-request-handler.h -> hphp/runtime/server/admin-request-handler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"hphp/runtime/server/access-log.h\"",
          "21: #include \"hphp/runtime/server/server.h\"",
          "23: namespace HPHP {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <folly/File.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:                                    Transport *transport);",
          "74:   bool handleStaticStringsRequest(const std::string &cmd,",
          "75:                                   Transport *transport);",
          "78:   bool handleRandomStaticStringsRequest(const std::string &cmd,",
          "79:                                         Transport *transport);",
          "80:   bool handleVMRequest      (const std::string &cmd, Transport *transport);",
          "",
          "[Removed Lines]",
          "76:   bool handleDumpStaticStringsRequest(const std::string &cmd,",
          "77:                                       const std::string &filename);",
          "",
          "[Added Lines]",
          "78:   bool handleDumpStaticStringsRequest(folly::File& file);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php": [
          "File: hphp/test/slow/ext_ldap/t78806688.php -> hphp/test/slow/ext_ldap/t78806688.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh",
          "3: <<__EntryPoint>>",
          "4: function main(): void {",
          "5:   $multiplier = 1431655769;",
          "6:   $s = str_repeat(\"a\", $multiplier);",
          "7:   ldap_escape($s);",
          "8:   echo \"FAIL!\\n\";",
          "9: }",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf": [
          "File: hphp/test/slow/ext_ldap/t78806688.php.expectf -> hphp/test/slow/ext_ldap/t78806688.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Fatal error: String length exceeded: 4294967307 > %d in %s/t78806688.php on line 7",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php": [
          "File: hphp/test/slow/ext_string/t76103217.php -> hphp/test/slow/ext_string/t76103217.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh",
          "3: <<__EntryPoint>>",
          "4: function main(): void {",
          "5:   $key = \"\\x26\\xbd\\xbd\\xbd\\xff\\x60\\xbf\\xff\\xff\\x60\";",
          "6:   $salt1 = \"\\x24\\x32\\x78\\x24\\x31\\x30\\x24\\x24\\x35\\x24\\xad\\x20\\x20\\x26\\xff\\x60\\xbf\\xff\\xff\\x60\\x24\\x31\\x78\\xa8\\xa8\\xa0\\x01\\x01\\x01\\x01\\x01\\x01\";",
          "7:   $salt2 = \"\\x24\\x32\\x78\\x24\\x31\\x30\\x24\\x24\\x35\";",
          "9:   var_dump(base64_encode(crypt($key, $salt1)));",
          "10:   var_dump(base64_encode(crypt($key, $salt2)));",
          "11: }",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect": [
          "File: hphp/test/slow/ext_string/t76103217.php.expect -> hphp/test/slow/ext_string/t76103217.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: string(4) \"KjA=\"",
          "2: string(12) \"JDJ4JDEwJCQ1\"",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php": [
          "File: hphp/test/slow/ext_xml/xmlreader_empty_expand.php -> hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh",
          "3: <<__EntryPoint>>",
          "4: function main(): void {",
          "5:     $a = new XMLReader();",
          "6:     $b = new DOMNode();",
          "7:     $a->expand($b);",
          "8:     $a->expand($a);",
          "9: }",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf": [
          "File: hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf -> hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Warning: Invalid State Error in %s on line %d",
          "3: Warning: Invalid State Error in %s on line %d",
          "",
          "---------------"
        ],
        "hphp/util/light-process.cpp||hphp/util/light-process.cpp": [
          "File: hphp/util/light-process.cpp -> hphp/util/light-process.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include \"hphp/util/hugetlb.h\"",
          "45: #include \"hphp/util/logger.h\"",
          "46: #include \"hphp/util/process.h\"",
          "47: #include \"hphp/util/timer.h\"",
          "48: #include \"hphp/util/user-info.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #include \"hphp/util/struct-log.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: namespace {",
          "57: __thread LightProcess* tl_proc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: bool LightProcess::g_strictUser = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "399:   lwp_read(afdt_fd, uname);",
          "400:   if (!uname.length()) return;",
          "402:   auto buf = PasswdBuffer{};",
          "403:   struct passwd *pw;",
          "404:   if (getpwnam_r(uname.c_str(), &buf.ent, buf.data.get(), buf.size, &pw)) {",
          "406:     return;",
          "407:   }",
          "408:   if (!pw) {",
          "410:     return;",
          "411:   }",
          "413:   if (pw->pw_gid) {",
          "416:   }",
          "417:   if (pw->pw_uid) {",
          "419:   }",
          "420: }",
          "",
          "[Removed Lines]",
          "414:     initgroups(pw->pw_name, pw->pw_gid);",
          "415:     setgid(pw->pw_gid);",
          "418:     setuid(pw->pw_uid);",
          "",
          "[Added Lines]",
          "405:   StructuredLogEntry* log = nullptr;",
          "406:   int err = 0;",
          "407:   SCOPE_EXIT {",
          "408:     if (log) {",
          "409:       log->setInt(\"errno\", err);",
          "410:       log->setStr(\"new_user\", uname);",
          "411:       StructuredLog::log(\"hhvm_lightprocess_error\", *log);",
          "412:       delete log;",
          "413:     }",
          "414:   };",
          "418:     err = errno;",
          "419:     log = new StructuredLogEntry();",
          "420:     log->setStr(\"function\", \"getpwnam_r\");",
          "421:     if (LightProcess::g_strictUser) {",
          "422:       throw std::runtime_error{\"getpwnam_r(): \" + folly::errnoStr(err)};",
          "423:     }",
          "427:     log = new StructuredLogEntry();",
          "428:     log->setStr(\"function\", \"getpwnam_r\");",
          "429:     if (LightProcess::g_strictUser) {",
          "430:       throw std::runtime_error{\"getpwnam_r(): not found\"};",
          "431:     }",
          "435:     if (initgroups(pw->pw_name, pw->pw_gid)) {",
          "436:       err = errno;",
          "437:       log = new StructuredLogEntry();",
          "438:       log->setStr(\"function\", \"initgroups\");",
          "439:     }",
          "440:     if (setgid(pw->pw_gid)) {",
          "441:       if (!log) {",
          "442:         err = errno;",
          "443:         log = new StructuredLogEntry();",
          "444:         log->setStr(\"function\", \"setgid\");",
          "445:         if (LightProcess::g_strictUser) {",
          "446:           throw std::runtime_error{\"setgid():\" + folly::errnoStr(err)};",
          "447:         }",
          "448:       }",
          "449:     }",
          "452:     if (setuid(pw->pw_uid)) {",
          "453:       if (!log) {",
          "454:         err = errno;",
          "455:         log = new StructuredLogEntry();",
          "456:         log->setStr(\"function\", \"setuid\");",
          "457:         if (LightProcess::g_strictUser) {",
          "458:           throw std::runtime_error{\"setuid():\" + folly::errnoStr(err)};",
          "459:         }",
          "460:       }",
          "461:     }",
          "",
          "---------------"
        ],
        "hphp/util/light-process.h||hphp/util/light-process.h": [
          "File: hphp/util/light-process.h -> hphp/util/light-process.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   Mutex m_procMutex;",
          "116:   int m_afdt_fd;",
          "117:   std::map<FILE*, pid_t> m_popenMap;",
          "118: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:  public:",
          "121:   static bool g_strictUser;",
          "",
          "---------------"
        ],
        "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp": [
          "File: hphp/zend/crypt-blowfish.cpp -> hphp/zend/crypt-blowfish.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "696:   }",
          "698:   count = (BF_word)1 << ((setting[4] - '0') * 10 + (setting[5] - '0'));",
          "700:     __set_errno(EINVAL);",
          "701:     return NULL;",
          "702:   }",
          "",
          "[Removed Lines]",
          "699:   if (count < min || BF_decode(data.binary.salt, &setting[7], 16)) {",
          "",
          "[Added Lines]",
          "699:   if (count < min ||",
          "700:       BF_decode(data.binary.salt, &setting[7], 16) ||",
          "701:       ((unsigned int)(setting[7 + 22 - 1] - 0x20) >= 0x60)",
          "702:      ) {",
          "",
          "---------------"
        ],
        "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp": [
          "File: hphp/zend/zend-string.cpp -> hphp/zend/zend-string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "396: }",
          "398: char *string_crypt(const char *key, const char *salt) {",
          "402:   char random_salt[12];",
          "403:   if (!*salt) {",
          "",
          "[Removed Lines]",
          "399:   assert(key);",
          "400:   assert(salt);",
          "",
          "[Added Lines]",
          "399:   assertx(key);",
          "400:   assertx(salt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:     return string_crypt(key, random_salt);",
          "408:   }",
          "411:     (salt[0] == '$') &&",
          "412:     (salt[1] == '2') &&",
          "413:     (salt[2] >= 'a') && (salt[2] <= 'z') &&",
          "",
          "[Removed Lines]",
          "410:   if ((strlen(salt) > sizeof(\"$2X$00$\")) &&",
          "",
          "[Added Lines]",
          "410:   auto const saltLen = strlen(salt);",
          "411:   if ((saltLen > sizeof(\"$2X$00$\")) &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "417:     (salt[6] == '$')) {",
          "419:     char output[61];",
          "421:       return strdup(output);",
          "422:     }",
          "",
          "[Removed Lines]",
          "420:     if (php_crypt_blowfish_rn(key, salt, output, sizeof(output))) {",
          "",
          "[Added Lines]",
          "422:     static constexpr size_t maxSaltLength = 123;",
          "423:     char paddedSalt[maxSaltLength + 1];",
          "424:     paddedSalt[0] = paddedSalt[maxSaltLength] = '\\0';",
          "426:     memset(&paddedSalt[1], '$', maxSaltLength - 1);",
          "427:     memcpy(paddedSalt, salt, std::min(maxSaltLength, saltLen));",
          "428:     paddedSalt[saltLen] = '\\0';",
          "430:     if (php_crypt_blowfish_rn(key, paddedSalt, output, sizeof(output))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cc6c074acd52ce3af71438e8f6d74932645ef22",
      "candidate_info": {
        "commit_hash": "1cc6c074acd52ce3af71438e8f6d74932645ef22",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/1cc6c074acd52ce3af71438e8f6d74932645ef22",
        "files": [
          "hphp/runtime/base/preg.cpp",
          "hphp/runtime/base/preg.h",
          "hphp/runtime/base/runtime-option.cpp",
          "hphp/runtime/base/runtime-option.h",
          "hphp/runtime/base/string-util.cpp",
          "hphp/runtime/ext/domdocument/ext_domdocument.h",
          "hphp/runtime/ext/gd/libgd/gd.cpp",
          "hphp/runtime/ext/ldap/ext_ldap.cpp",
          "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
          "hphp/runtime/server/admin-request-handler.cpp",
          "hphp/runtime/server/admin-request-handler.h",
          "hphp/test/slow/ext_ldap/t78806688.php",
          "hphp/test/slow/ext_ldap/t78806688.php.expectf",
          "hphp/test/slow/ext_string/t76103217.php",
          "hphp/test/slow/ext_string/t76103217.php.expect",
          "hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
          "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
          "hphp/util/light-process.cpp",
          "hphp/util/light-process.h",
          "hphp/zend/crypt-blowfish.cpp",
          "hphp/zend/zend-string.cpp"
        ],
        "message": "security fixes",
        "before_after_code_files": [
          "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp",
          "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h",
          "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp",
          "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h",
          "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp",
          "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h",
          "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp",
          "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp",
          "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
          "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp",
          "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h",
          "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php",
          "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf",
          "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php",
          "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect",
          "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
          "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
          "hphp/util/light-process.cpp||hphp/util/light-process.cpp",
          "hphp/util/light-process.h||hphp/util/light-process.h",
          "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp",
          "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp",
            "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h",
            "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp",
            "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h",
            "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp",
            "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h",
            "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp",
            "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp",
            "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
            "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp",
            "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h",
            "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php",
            "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf",
            "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php",
            "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect",
            "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
            "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
            "hphp/util/light-process.cpp||hphp/util/light-process.cpp",
            "hphp/util/light-process.h||hphp/util/light-process.h",
            "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp",
            "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp"
          ],
          "candidate": [
            "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp",
            "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h",
            "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp",
            "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h",
            "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp",
            "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h",
            "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp",
            "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp",
            "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
            "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp",
            "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h",
            "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php",
            "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf",
            "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php",
            "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect",
            "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
            "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
            "hphp/util/light-process.cpp||hphp/util/light-process.cpp",
            "hphp/util/light-process.h||hphp/util/light-process.h",
            "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp",
            "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp": [
          "File: hphp/runtime/base/preg.cpp -> hphp/runtime/base/preg.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #include \"hphp/util/logger.h\"",
          "50: #include \"hphp/util/concurrent-scalable-cache.h\"",
          "52: #include <folly/json.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #include <folly/FileUtil.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:             TempKeyCache& keyCache);",
          "218:   void insert(Accessor& accessor, const StringData* regex,",
          "219:               TempKeyCache& keyCache, const pcre_cache_entry* ent);",
          "221:   size_t size() const;",
          "223: private:",
          "",
          "[Removed Lines]",
          "220:   void dump(const std::string& filename);",
          "",
          "[Added Lines]",
          "221:   void dump(folly::File& file);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "512:   }",
          "513: }",
          "517:   switch (m_kind) {",
          "518:     case CacheKind::Static:",
          "519:       for (auto& it : *m_staticCache) {",
          "521:       }",
          "522:       break;",
          "523:     case CacheKind::Lru:",
          "",
          "[Removed Lines]",
          "515: void PCRECache::dump(const std::string& filename) {",
          "516:   std::ofstream out(filename.c_str());",
          "520:         out << it.first->data() << \"\\n\";",
          "",
          "[Added Lines]",
          "516: void PCRECache::dump(folly::File& file) {",
          "520:         folly::writeFull(file.fd(), it.first->data(), it.first->size());",
          "521:         folly::writeFull(file.fd(), \"\\n\", 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "530:           m_scalableCache->snapshotKeys(keys);",
          "531:         }",
          "532:         for (auto& key: keys) {",
          "534:         }",
          "535:       }",
          "536:       break;",
          "537:   }",
          "539: }",
          "541: size_t PCRECache::size() const {",
          "",
          "[Removed Lines]",
          "533:           out << key.c_str() << \"\\n\";",
          "538:   out.close();",
          "",
          "[Added Lines]",
          "534:           folly::writeFull(file.fd(), key.data(), key.size());",
          "535:           folly::writeFull(file.fd(), \"\\n\", 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "572: void pcre_init() {",
          "573: }",
          "577: }",
          "579: static pcre_jit_stack* alloc_jit_stack(void* /*data*/) {",
          "",
          "[Removed Lines]",
          "575: void pcre_dump_cache(const std::string& filename) {",
          "576:   s_pcreCache.dump(filename);",
          "",
          "[Added Lines]",
          "576: void pcre_dump_cache(folly::File& file) {",
          "577:   s_pcreCache.dump(file);",
          "",
          "---------------"
        ],
        "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h": [
          "File: hphp/runtime/base/preg.h -> hphp/runtime/base/preg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"hphp/runtime/base/type-string.h\"",
          "21: #include <folly/Optional.h>",
          "23: #include <cstdint>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include <folly/File.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111: void pcre_session_exit();",
          "",
          "[Removed Lines]",
          "116: void pcre_dump_cache(const std::string& filename);",
          "",
          "[Added Lines]",
          "117: void pcre_dump_cache(folly::File& file);",
          "",
          "---------------"
        ],
        "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp": [
          "File: hphp/runtime/base/runtime-option.cpp -> hphp/runtime/base/runtime-option.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #include \"hphp/util/gzip.h\"",
          "55: #include \"hphp/util/hardware-counter.h\"",
          "56: #include \"hphp/util/hdf.h\"",
          "57: #include \"hphp/util/log-file-flusher.h\"",
          "58: #include \"hphp/util/logger.h\"",
          "59: #include \"hphp/util/network.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #include \"hphp/util/light-process.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "754: std::string RuntimeOption::AdminPassword;",
          "755: std::set<std::string> RuntimeOption::AdminPasswords;",
          "756: std::set<std::string> RuntimeOption::HashedAdminPasswords;",
          "758: std::string RuntimeOption::ProxyOriginRaw;",
          "759: int RuntimeOption::ProxyPercentageRaw = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "758: std::string RuntimeOption::AdminDumpPath;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2398:                  \"Server.LightProcessFilePrefix\", \"./lightprocess\");",
          "2399:     Config::Bind(LightProcessCount, ini, config,",
          "2400:                  \"Server.LightProcessCount\", 0);",
          "2401:     Config::Bind(ForceServerNameToHeader, ini, config,",
          "2402:                  \"Server.ForceServerNameToHeader\");",
          "2403:     Config::Bind(AllowDuplicateCookies, ini, config,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2403:     Config::Bind(LightProcess::g_strictUser, ini, config,",
          "2404:                  \"Server.LightProcessStrictUser\", false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2513:     AdminPasswords = Config::GetSet(ini, config, \"AdminServer.Passwords\");",
          "2514:     HashedAdminPasswords =",
          "2515:       Config::GetSet(ini, config, \"AdminServer.HashedPasswords\");",
          "2516:   }",
          "2517:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2520:     Config::Bind(AdminDumpPath, ini, config,",
          "2521:                  \"AdminServer.DumpPath\", \"/tmp/hhvm_admin_dump\");",
          "",
          "---------------"
        ],
        "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h": [
          "File: hphp/runtime/base/runtime-option.h -> hphp/runtime/base/runtime-option.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:   static std::set<std::string> AdminPasswords;",
          "497:   static std::set<std::string> HashedAdminPasswords;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "499:   static std::string AdminDumpPath;",
          "",
          "---------------"
        ],
        "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp": [
          "File: hphp/runtime/base/string-util.cpp -> hphp/runtime/base/string-util.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "435: }",
          "437: String StringUtil::Crypt(const String& input, const char *salt /* = \"\" */) {",
          "439:     raise_notice(\"crypt(): No salt parameter was specified.\"",
          "440:       \" You must use a randomly generated salt and a strong\"",
          "441:       \" hash function to produce a secure hash.\");",
          "",
          "[Removed Lines]",
          "438:   if (salt && salt[0] == '\\0') {",
          "",
          "[Added Lines]",
          "438:   assertx(salt);",
          "439:   if (salt[0] == '\\0') {",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h": [
          "File: hphp/runtime/ext/domdocument/ext_domdocument.h -> hphp/runtime/ext/domdocument/ext_domdocument.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   DOMNode& operator=(const DOMNode& copy);",
          "55:   XMLNode node() const { return m_node; }",
          "56:   xmlNodePtr nodep() const {",
          "57:     return m_node ? m_node->nodep() : nullptr;",
          "",
          "[Removed Lines]",
          "54:   req::ptr<XMLDocumentData> doc() const { return m_node->doc(); }",
          "",
          "[Added Lines]",
          "54:   req::ptr<XMLDocumentData> doc() const {",
          "55:     return m_node ? m_node->doc() : nullptr;",
          "56:   }",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp": [
          "File: hphp/runtime/ext/gd/libgd/gd.cpp -> hphp/runtime/ext/gd/libgd/gd.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:   auto allocsz = sizeof(gdImage)",
          "190:   if (UNLIKELY(precheckOOM(allocsz))) {",
          "192:     return NULL;",
          "",
          "[Removed Lines]",
          "188:     + sy * (sizeof(int *) + sizeof(unsigned char *))",
          "189:     + sx * sy * (sizeof(int) + sizeof(unsigned char));",
          "",
          "[Added Lines]",
          "188:     + (sizeof(int *) + sizeof(unsigned char *)) * sy",
          "189:     + (sizeof(int) + sizeof(unsigned char)) * sx * sy;",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp": [
          "File: hphp/runtime/ext/ldap/ext_ldap.cpp -> hphp/runtime/ext/ldap/ext_ldap.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2140:   char hex[] = \"0123456789abcdef\";",
          "2143:   char *rdata = result.get()->mutableData(), *r = rdata;",
          "2145:   for (int i = 0; i < value.size(); i++) {",
          "",
          "[Removed Lines]",
          "2142:   String result(3 * value.size(), ReserveString);",
          "",
          "[Added Lines]",
          "2142:   String result(3UL * value.size(), ReserveString);",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp": [
          "File: hphp/runtime/ext/xmlreader/ext_xmlreader.cpp -> hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:   if (!basenode.isNull()) {",
          "599:     auto dombasenode = Native::data<DOMNode>(basenode.toObject());",
          "600:     doc = dombasenode->doc();",
          "603:       raise_warning(\"Invalid State Error\");",
          "604:       return false;",
          "605:     }",
          "606:   }",
          "608:   if (data->m_ptr) {",
          "",
          "[Removed Lines]",
          "601:     docp = doc->docp();",
          "602:     if (docp == nullptr) {",
          "",
          "[Added Lines]",
          "601:     if (doc == nullptr || doc->docp() == nullptr) {",
          "605:     docp = doc->docp();",
          "",
          "---------------"
        ],
        "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp": [
          "File: hphp/runtime/server/admin-request-handler.cpp -> hphp/runtime/server/admin-request-handler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: #endif",
          "78: #include <folly/Conv.h>",
          "79: #include <folly/Random.h>",
          "80: #include <folly/portability/Unistd.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: #include <folly/File.h>",
          "80: #include <folly/FileUtil.h>",
          "81: #include <folly/Optional.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:   WarnIfNotOK(transport);",
          "255: }",
          "257: void AdminRequestHandler::handleRequest(Transport *transport) {",
          "258:   transport->addHeader(\"Content-Type\", \"text/plain\");",
          "259:   std::string cmd = transport->getCommand();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: namespace {",
          "263: struct DumpFile {",
          "264:   std::string path;",
          "265:   folly::File file;",
          "266: };",
          "268: folly::Optional<DumpFile> dump_file(const char* name) {",
          "269:   auto const path = folly::sformat(\"{}/{}\", RO::AdminDumpPath, name);",
          "272:   if (FileUtil::mkdir(path) != 0) return folly::none;",
          "276:   remove(path.c_str());",
          "280:   auto const fd = open(path.c_str(), O_CREAT|O_EXCL|O_RDWR, 0666);",
          "281:   if (fd < 0) return folly::none;",
          "283:   return DumpFile{path, folly::File(fd, /*owns=*/true)};",
          "284: }",
          "286: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "714:       break;",
          "715:     }",
          "716:     if (strncmp(cmd.c_str(), \"dump-static-strings\", 19) == 0) {",
          "721:       break;",
          "722:     }",
          "723:     if (strncmp(cmd.c_str(), \"random-static-strings\", 21) == 0) {",
          "",
          "[Removed Lines]",
          "717:       auto filename = transport->getParam(\"file\");",
          "718:       if (filename == \"\") filename = \"/tmp/static_strings\";",
          "719:       handleDumpStaticStringsRequest(cmd, filename);",
          "720:       transport->sendString(\"OK\\n\");",
          "",
          "[Added Lines]",
          "748:       if (auto file = dump_file(\"static_strings\")) {",
          "749:         handleDumpStaticStringsRequest(file->file);",
          "750:         transport->sendString(folly::sformat(\"dumped to {}\\n\", file->path));",
          "751:       } else {",
          "752:         transport->sendString(\"Unable to mkdir or file already exists.\\n\");",
          "753:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "746:     }",
          "748:     if (cmd == \"dump-pcre-cache\") {",
          "753:       break;",
          "754:     }",
          "",
          "[Removed Lines]",
          "749:       auto filename = transport->getParam(\"file\");",
          "750:       if (filename == \"\") filename = \"/tmp/pcre_cache\";",
          "751:       pcre_dump_cache(filename);",
          "752:       transport->sendString(\"OK\\n\");",
          "",
          "[Added Lines]",
          "782:       if (auto file = dump_file(\"pcre_cache\")) {",
          "783:         pcre_dump_cache(file->file);",
          "784:         transport->sendString(folly::sformat(\"dumped to {}\\n\", file->path));",
          "785:       } else {",
          "786:         transport->sendString(\"Unable to mkdir or file already exists.\\n\");",
          "787:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1368:       \"----\\n{} bytes\\n{}\\n\", str->size(), str->toCppString());",
          "1369: }",
          "1373:   auto const& list = lookupDefinedStaticStrings();",
          "1376:   for (auto item : list) {",
          "1378:     if (RuntimeOption::EvalPerfDataMap) {",
          "1379:       auto const len = std::min<size_t>(item->size(), 255);",
          "1380:       std::string str(item->data(), len);",
          "",
          "[Removed Lines]",
          "1371: bool AdminRequestHandler::handleDumpStaticStringsRequest(",
          "1372:   const std::string& /*cmd*/, const std::string& filename) {",
          "1374:   std::ofstream out(filename.c_str());",
          "1375:   SCOPE_EXIT { out.close(); };",
          "1377:     out << formatStaticString(item);",
          "",
          "[Added Lines]",
          "1406: bool AdminRequestHandler::handleDumpStaticStringsRequest(folly::File& file) {",
          "1409:     auto const line = formatStaticString(item);",
          "1410:     folly::writeFull(file.fd(), line.data(), line.size());",
          "",
          "---------------"
        ],
        "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h": [
          "File: hphp/runtime/server/admin-request-handler.h -> hphp/runtime/server/admin-request-handler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"hphp/runtime/server/access-log.h\"",
          "20: #include \"hphp/runtime/server/server.h\"",
          "22: namespace HPHP {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <folly/File.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:                                    Transport *transport);",
          "73:   bool handleStaticStringsRequest(const std::string &cmd,",
          "74:                                   Transport *transport);",
          "77:   bool handleRandomStaticStringsRequest(const std::string &cmd,",
          "78:                                         Transport *transport);",
          "79:   bool handleVMRequest      (const std::string &cmd, Transport *transport);",
          "",
          "[Removed Lines]",
          "75:   bool handleDumpStaticStringsRequest(const std::string &cmd,",
          "76:                                       const std::string &filename);",
          "",
          "[Added Lines]",
          "77:   bool handleDumpStaticStringsRequest(folly::File& file);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php": [
          "File: hphp/test/slow/ext_ldap/t78806688.php -> hphp/test/slow/ext_ldap/t78806688.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh",
          "3: <<__EntryPoint>>",
          "4: function main(): void {",
          "5:   $multiplier = 1431655769;",
          "6:   $s = str_repeat(\"a\", $multiplier);",
          "7:   ldap_escape($s);",
          "8:   echo \"FAIL!\\n\";",
          "9: }",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf": [
          "File: hphp/test/slow/ext_ldap/t78806688.php.expectf -> hphp/test/slow/ext_ldap/t78806688.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Fatal error: String length exceeded: 4294967307 > %d in %s/t78806688.php on line 7",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php": [
          "File: hphp/test/slow/ext_string/t76103217.php -> hphp/test/slow/ext_string/t76103217.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh",
          "3: <<__EntryPoint>>",
          "4: function main(): void {",
          "5:   $key = \"\\x26\\xbd\\xbd\\xbd\\xff\\x60\\xbf\\xff\\xff\\x60\";",
          "6:   $salt1 = \"\\x24\\x32\\x78\\x24\\x31\\x30\\x24\\x24\\x35\\x24\\xad\\x20\\x20\\x26\\xff\\x60\\xbf\\xff\\xff\\x60\\x24\\x31\\x78\\xa8\\xa8\\xa0\\x01\\x01\\x01\\x01\\x01\\x01\";",
          "7:   $salt2 = \"\\x24\\x32\\x78\\x24\\x31\\x30\\x24\\x24\\x35\";",
          "9:   var_dump(base64_encode(crypt($key, $salt1)));",
          "10:   var_dump(base64_encode(crypt($key, $salt2)));",
          "11: }",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect": [
          "File: hphp/test/slow/ext_string/t76103217.php.expect -> hphp/test/slow/ext_string/t76103217.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: string(4) \"KjA=\"",
          "2: string(12) \"JDJ4JDEwJCQ1\"",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php": [
          "File: hphp/test/slow/ext_xml/xmlreader_empty_expand.php -> hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh",
          "3: <<__EntryPoint>>",
          "4: function main(): void {",
          "5:     $a = new XMLReader();",
          "6:     $b = new DOMNode();",
          "7:     $a->expand($b);",
          "8:     $a->expand($a);",
          "9: }",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf": [
          "File: hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf -> hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Warning: Invalid State Error in %s on line %d",
          "3: Warning: Invalid State Error in %s on line %d",
          "",
          "---------------"
        ],
        "hphp/util/light-process.cpp||hphp/util/light-process.cpp": [
          "File: hphp/util/light-process.cpp -> hphp/util/light-process.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #include \"hphp/util/hugetlb.h\"",
          "47: #include \"hphp/util/logger.h\"",
          "48: #include \"hphp/util/process.h\"",
          "49: #include \"hphp/util/timer.h\"",
          "50: #include \"hphp/util/user-info.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #include \"hphp/util/struct-log.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: namespace {",
          "59: __thread LightProcess* tl_proc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: bool LightProcess::g_strictUser = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "436:   lwp_read(afdt_fd, uname);",
          "437:   if (!uname.length()) return;",
          "439:   auto buf = PasswdBuffer{};",
          "440:   struct passwd *pw;",
          "441:   if (getpwnam_r(uname.c_str(), &buf.ent, buf.data.get(), buf.size, &pw)) {",
          "443:     return;",
          "444:   }",
          "445:   if (!pw) {",
          "447:     return;",
          "448:   }",
          "450:   if (pw->pw_gid) {",
          "453:   }",
          "454:   if (pw->pw_uid) {",
          "456:   }",
          "457: }",
          "",
          "[Removed Lines]",
          "451:     initgroups(pw->pw_name, pw->pw_gid);",
          "452:     setgid(pw->pw_gid);",
          "455:     setuid(pw->pw_uid);",
          "",
          "[Added Lines]",
          "442:   StructuredLogEntry* log = nullptr;",
          "443:   int err = 0;",
          "444:   SCOPE_EXIT {",
          "445:     if (log) {",
          "446:       log->setInt(\"errno\", err);",
          "447:       log->setStr(\"new_user\", uname);",
          "448:       StructuredLog::log(\"hhvm_lightprocess_error\", *log);",
          "449:       delete log;",
          "450:     }",
          "451:   };",
          "455:     err = errno;",
          "456:     log = new StructuredLogEntry();",
          "457:     log->setStr(\"function\", \"getpwnam_r\");",
          "458:     if (LightProcess::g_strictUser) {",
          "459:       throw std::runtime_error{\"getpwnam_r(): \" + folly::errnoStr(err)};",
          "460:     }",
          "464:     log = new StructuredLogEntry();",
          "465:     log->setStr(\"function\", \"getpwnam_r\");",
          "466:     if (LightProcess::g_strictUser) {",
          "467:       throw std::runtime_error{\"getpwnam_r(): not found\"};",
          "468:     }",
          "472:     if (initgroups(pw->pw_name, pw->pw_gid)) {",
          "473:       err = errno;",
          "474:       log = new StructuredLogEntry();",
          "475:       log->setStr(\"function\", \"initgroups\");",
          "476:     }",
          "477:     if (setgid(pw->pw_gid)) {",
          "478:       if (!log) {",
          "479:         err = errno;",
          "480:         log = new StructuredLogEntry();",
          "481:         log->setStr(\"function\", \"setgid\");",
          "482:         if (LightProcess::g_strictUser) {",
          "483:           throw std::runtime_error{\"setgid():\" + folly::errnoStr(err)};",
          "484:         }",
          "485:       }",
          "486:     }",
          "489:     if (setuid(pw->pw_uid)) {",
          "490:       if (!log) {",
          "491:         err = errno;",
          "492:         log = new StructuredLogEntry();",
          "493:         log->setStr(\"function\", \"setuid\");",
          "494:         if (LightProcess::g_strictUser) {",
          "495:           throw std::runtime_error{\"setuid():\" + folly::errnoStr(err)};",
          "496:         }",
          "497:       }",
          "498:     }",
          "",
          "---------------"
        ],
        "hphp/util/light-process.h||hphp/util/light-process.h": [
          "File: hphp/util/light-process.h -> hphp/util/light-process.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   Mutex m_procMutex;",
          "130:   int m_afdt_fd;",
          "131:   std::map<FILE*, pid_t> m_popenMap;",
          "132: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:  public:",
          "135:   static bool g_strictUser;",
          "",
          "---------------"
        ],
        "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp": [
          "File: hphp/zend/crypt-blowfish.cpp -> hphp/zend/crypt-blowfish.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "696:   }",
          "698:   count = (BF_word)1 << ((setting[4] - '0') * 10 + (setting[5] - '0'));",
          "700:     __set_errno(EINVAL);",
          "701:     return NULL;",
          "702:   }",
          "",
          "[Removed Lines]",
          "699:   if (count < min || BF_decode(data.binary.salt, &setting[7], 16)) {",
          "",
          "[Added Lines]",
          "699:   if (count < min ||",
          "700:       BF_decode(data.binary.salt, &setting[7], 16) ||",
          "701:       ((unsigned int)(setting[7 + 22 - 1] - 0x20) >= 0x60)",
          "702:      ) {",
          "",
          "---------------"
        ],
        "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp": [
          "File: hphp/zend/zend-string.cpp -> hphp/zend/zend-string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "396: }",
          "398: char *string_crypt(const char *key, const char *salt) {",
          "402:   char random_salt[12];",
          "403:   if (!*salt) {",
          "",
          "[Removed Lines]",
          "399:   assert(key);",
          "400:   assert(salt);",
          "",
          "[Added Lines]",
          "399:   assertx(key);",
          "400:   assertx(salt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:     return string_crypt(key, random_salt);",
          "408:   }",
          "411:     (salt[0] == '$') &&",
          "412:     (salt[1] == '2') &&",
          "413:     (salt[2] >= 'a') && (salt[2] <= 'z') &&",
          "",
          "[Removed Lines]",
          "410:   if ((strlen(salt) > sizeof(\"$2X$00$\")) &&",
          "",
          "[Added Lines]",
          "410:   auto const saltLen = strlen(salt);",
          "411:   if ((saltLen > sizeof(\"$2X$00$\")) &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "417:     (salt[6] == '$')) {",
          "419:     char output[61];",
          "421:       return strdup(output);",
          "422:     }",
          "",
          "[Removed Lines]",
          "420:     if (php_crypt_blowfish_rn(key, salt, output, sizeof(output))) {",
          "",
          "[Added Lines]",
          "422:     static constexpr size_t maxSaltLength = 123;",
          "423:     char paddedSalt[maxSaltLength + 1];",
          "424:     paddedSalt[0] = paddedSalt[maxSaltLength] = '\\0';",
          "426:     memset(&paddedSalt[1], '$', maxSaltLength - 1);",
          "427:     memcpy(paddedSalt, salt, std::min(maxSaltLength, saltLen));",
          "428:     paddedSalt[saltLen] = '\\0';",
          "430:     if (php_crypt_blowfish_rn(key, paddedSalt, output, sizeof(output))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "710abfbfe2fef43ad0e3516f33f1e272ebc04100",
      "candidate_info": {
        "commit_hash": "710abfbfe2fef43ad0e3516f33f1e272ebc04100",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/710abfbfe2fef43ad0e3516f33f1e272ebc04100",
        "files": [
          "hphp/runtime/base/preg.cpp",
          "hphp/runtime/base/preg.h",
          "hphp/runtime/base/runtime-option.cpp",
          "hphp/runtime/base/runtime-option.h",
          "hphp/runtime/base/string-util.cpp",
          "hphp/runtime/ext/domdocument/ext_domdocument.h",
          "hphp/runtime/ext/gd/libgd/gd.cpp",
          "hphp/runtime/ext/ldap/ext_ldap.cpp",
          "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
          "hphp/runtime/server/admin-request-handler.cpp",
          "hphp/runtime/server/admin-request-handler.h",
          "hphp/test/slow/ext_ldap/t78806688.php",
          "hphp/test/slow/ext_ldap/t78806688.php.expectf",
          "hphp/test/slow/ext_string/t76103217.php",
          "hphp/test/slow/ext_string/t76103217.php.expect",
          "hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
          "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
          "hphp/util/light-process.cpp",
          "hphp/util/light-process.h",
          "hphp/zend/crypt-blowfish.cpp",
          "hphp/zend/zend-string.cpp"
        ],
        "message": "security fixes",
        "before_after_code_files": [
          "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp",
          "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h",
          "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp",
          "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h",
          "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp",
          "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h",
          "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp",
          "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp",
          "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
          "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp",
          "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h",
          "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php",
          "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf",
          "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php",
          "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect",
          "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
          "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
          "hphp/util/light-process.cpp||hphp/util/light-process.cpp",
          "hphp/util/light-process.h||hphp/util/light-process.h",
          "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp",
          "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp",
            "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h",
            "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp",
            "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h",
            "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp",
            "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h",
            "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp",
            "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp",
            "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
            "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp",
            "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h",
            "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php",
            "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf",
            "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php",
            "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect",
            "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
            "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
            "hphp/util/light-process.cpp||hphp/util/light-process.cpp",
            "hphp/util/light-process.h||hphp/util/light-process.h",
            "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp",
            "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp"
          ],
          "candidate": [
            "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp",
            "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h",
            "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp",
            "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h",
            "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp",
            "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h",
            "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp",
            "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp",
            "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
            "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp",
            "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h",
            "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php",
            "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf",
            "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php",
            "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect",
            "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
            "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
            "hphp/util/light-process.cpp||hphp/util/light-process.cpp",
            "hphp/util/light-process.h||hphp/util/light-process.h",
            "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp",
            "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/base/preg.cpp||hphp/runtime/base/preg.cpp": [
          "File: hphp/runtime/base/preg.cpp -> hphp/runtime/base/preg.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #include \"hphp/util/logger.h\"",
          "50: #include \"hphp/util/concurrent-scalable-cache.h\"",
          "52: #include <folly/json.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #include <folly/FileUtil.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:             TempKeyCache& keyCache);",
          "218:   void insert(Accessor& accessor, const StringData* regex,",
          "219:               TempKeyCache& keyCache, const pcre_cache_entry* ent);",
          "221:   size_t size() const;",
          "223: private:",
          "",
          "[Removed Lines]",
          "220:   void dump(const std::string& filename);",
          "",
          "[Added Lines]",
          "221:   void dump(folly::File& file);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "512:   }",
          "513: }",
          "517:   switch (m_kind) {",
          "518:     case CacheKind::Static:",
          "519:       for (auto& it : *m_staticCache) {",
          "521:       }",
          "522:       break;",
          "523:     case CacheKind::Lru:",
          "",
          "[Removed Lines]",
          "515: void PCRECache::dump(const std::string& filename) {",
          "516:   std::ofstream out(filename.c_str());",
          "520:         out << it.first->data() << \"\\n\";",
          "",
          "[Added Lines]",
          "516: void PCRECache::dump(folly::File& file) {",
          "520:         folly::writeFull(file.fd(), it.first->data(), it.first->size());",
          "521:         folly::writeFull(file.fd(), \"\\n\", 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "530:           m_scalableCache->snapshotKeys(keys);",
          "531:         }",
          "532:         for (auto& key: keys) {",
          "534:         }",
          "535:       }",
          "536:       break;",
          "537:   }",
          "539: }",
          "541: size_t PCRECache::size() const {",
          "",
          "[Removed Lines]",
          "533:           out << key.c_str() << \"\\n\";",
          "538:   out.close();",
          "",
          "[Added Lines]",
          "534:           folly::writeFull(file.fd(), key.data(), key.size());",
          "535:           folly::writeFull(file.fd(), \"\\n\", 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "572: void pcre_init() {",
          "573: }",
          "577: }",
          "579: static pcre_jit_stack* alloc_jit_stack(void* /*data*/) {",
          "",
          "[Removed Lines]",
          "575: void pcre_dump_cache(const std::string& filename) {",
          "576:   s_pcreCache.dump(filename);",
          "",
          "[Added Lines]",
          "576: void pcre_dump_cache(folly::File& file) {",
          "577:   s_pcreCache.dump(file);",
          "",
          "---------------"
        ],
        "hphp/runtime/base/preg.h||hphp/runtime/base/preg.h": [
          "File: hphp/runtime/base/preg.h -> hphp/runtime/base/preg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"hphp/runtime/base/type-string.h\"",
          "21: #include <folly/Optional.h>",
          "23: #include <cstdint>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include <folly/File.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111: void pcre_session_exit();",
          "",
          "[Removed Lines]",
          "116: void pcre_dump_cache(const std::string& filename);",
          "",
          "[Added Lines]",
          "117: void pcre_dump_cache(folly::File& file);",
          "",
          "---------------"
        ],
        "hphp/runtime/base/runtime-option.cpp||hphp/runtime/base/runtime-option.cpp": [
          "File: hphp/runtime/base/runtime-option.cpp -> hphp/runtime/base/runtime-option.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #include \"hphp/util/gzip.h\"",
          "55: #include \"hphp/util/hardware-counter.h\"",
          "56: #include \"hphp/util/hdf.h\"",
          "57: #include \"hphp/util/log-file-flusher.h\"",
          "58: #include \"hphp/util/logger.h\"",
          "59: #include \"hphp/util/network.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #include \"hphp/util/light-process.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "754: std::string RuntimeOption::AdminPassword;",
          "755: std::set<std::string> RuntimeOption::AdminPasswords;",
          "756: std::set<std::string> RuntimeOption::HashedAdminPasswords;",
          "758: std::string RuntimeOption::ProxyOriginRaw;",
          "759: int RuntimeOption::ProxyPercentageRaw = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "758: std::string RuntimeOption::AdminDumpPath;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2401:                  \"Server.LightProcessFilePrefix\", \"./lightprocess\");",
          "2402:     Config::Bind(LightProcessCount, ini, config,",
          "2403:                  \"Server.LightProcessCount\", 0);",
          "2404:     Config::Bind(ForceServerNameToHeader, ini, config,",
          "2405:                  \"Server.ForceServerNameToHeader\");",
          "2406:     Config::Bind(AllowDuplicateCookies, ini, config,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2406:     Config::Bind(LightProcess::g_strictUser, ini, config,",
          "2407:                  \"Server.LightProcessStrictUser\", false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2516:     AdminPasswords = Config::GetSet(ini, config, \"AdminServer.Passwords\");",
          "2517:     HashedAdminPasswords =",
          "2518:       Config::GetSet(ini, config, \"AdminServer.HashedPasswords\");",
          "2519:   }",
          "2520:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2523:     Config::Bind(AdminDumpPath, ini, config,",
          "2524:                  \"AdminServer.DumpPath\", \"/tmp/hhvm_admin_dump\");",
          "",
          "---------------"
        ],
        "hphp/runtime/base/runtime-option.h||hphp/runtime/base/runtime-option.h": [
          "File: hphp/runtime/base/runtime-option.h -> hphp/runtime/base/runtime-option.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:   static std::set<std::string> AdminPasswords;",
          "495:   static std::set<std::string> HashedAdminPasswords;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497:   static std::string AdminDumpPath;",
          "",
          "---------------"
        ],
        "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp": [
          "File: hphp/runtime/base/string-util.cpp -> hphp/runtime/base/string-util.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "435: }",
          "437: String StringUtil::Crypt(const String& input, const char *salt /* = \"\" */) {",
          "439:     raise_notice(\"crypt(): No salt parameter was specified.\"",
          "440:       \" You must use a randomly generated salt and a strong\"",
          "441:       \" hash function to produce a secure hash.\");",
          "",
          "[Removed Lines]",
          "438:   if (salt && salt[0] == '\\0') {",
          "",
          "[Added Lines]",
          "438:   assertx(salt);",
          "439:   if (salt[0] == '\\0') {",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/domdocument/ext_domdocument.h||hphp/runtime/ext/domdocument/ext_domdocument.h": [
          "File: hphp/runtime/ext/domdocument/ext_domdocument.h -> hphp/runtime/ext/domdocument/ext_domdocument.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   DOMNode& operator=(const DOMNode& copy);",
          "55:   XMLNode node() const { return m_node; }",
          "56:   xmlNodePtr nodep() const {",
          "57:     return m_node ? m_node->nodep() : nullptr;",
          "",
          "[Removed Lines]",
          "54:   req::ptr<XMLDocumentData> doc() const { return m_node->doc(); }",
          "",
          "[Added Lines]",
          "54:   req::ptr<XMLDocumentData> doc() const {",
          "55:     return m_node ? m_node->doc() : nullptr;",
          "56:   }",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/gd/libgd/gd.cpp||hphp/runtime/ext/gd/libgd/gd.cpp": [
          "File: hphp/runtime/ext/gd/libgd/gd.cpp -> hphp/runtime/ext/gd/libgd/gd.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:   auto allocsz = sizeof(gdImage)",
          "190:   if (UNLIKELY(precheckOOM(allocsz))) {",
          "192:     return NULL;",
          "",
          "[Removed Lines]",
          "188:     + sy * (sizeof(int *) + sizeof(unsigned char *))",
          "189:     + sx * sy * (sizeof(int) + sizeof(unsigned char));",
          "",
          "[Added Lines]",
          "188:     + (sizeof(int *) + sizeof(unsigned char *)) * sy",
          "189:     + (sizeof(int) + sizeof(unsigned char)) * sx * sy;",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/ldap/ext_ldap.cpp||hphp/runtime/ext/ldap/ext_ldap.cpp": [
          "File: hphp/runtime/ext/ldap/ext_ldap.cpp -> hphp/runtime/ext/ldap/ext_ldap.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2140:   char hex[] = \"0123456789abcdef\";",
          "2143:   char *rdata = result.get()->mutableData(), *r = rdata;",
          "2145:   for (int i = 0; i < value.size(); i++) {",
          "",
          "[Removed Lines]",
          "2142:   String result(3 * value.size(), ReserveString);",
          "",
          "[Added Lines]",
          "2142:   String result(3UL * value.size(), ReserveString);",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/xmlreader/ext_xmlreader.cpp||hphp/runtime/ext/xmlreader/ext_xmlreader.cpp": [
          "File: hphp/runtime/ext/xmlreader/ext_xmlreader.cpp -> hphp/runtime/ext/xmlreader/ext_xmlreader.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:   if (!basenode.isNull()) {",
          "599:     auto dombasenode = Native::data<DOMNode>(basenode.toObject());",
          "600:     doc = dombasenode->doc();",
          "603:       raise_warning(\"Invalid State Error\");",
          "604:       return false;",
          "605:     }",
          "606:   }",
          "608:   if (data->m_ptr) {",
          "",
          "[Removed Lines]",
          "601:     docp = doc->docp();",
          "602:     if (docp == nullptr) {",
          "",
          "[Added Lines]",
          "601:     if (doc == nullptr || doc->docp() == nullptr) {",
          "605:     docp = doc->docp();",
          "",
          "---------------"
        ],
        "hphp/runtime/server/admin-request-handler.cpp||hphp/runtime/server/admin-request-handler.cpp": [
          "File: hphp/runtime/server/admin-request-handler.cpp -> hphp/runtime/server/admin-request-handler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: #endif",
          "78: #include <folly/Conv.h>",
          "79: #include <folly/Random.h>",
          "80: #include <folly/portability/Unistd.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: #include <folly/File.h>",
          "80: #include <folly/FileUtil.h>",
          "81: #include <folly/Optional.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:   WarnIfNotOK(transport);",
          "255: }",
          "257: void AdminRequestHandler::handleRequest(Transport *transport) {",
          "258:   transport->addHeader(\"Content-Type\", \"text/plain\");",
          "259:   std::string cmd = transport->getCommand();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: namespace {",
          "263: struct DumpFile {",
          "264:   std::string path;",
          "265:   folly::File file;",
          "266: };",
          "268: folly::Optional<DumpFile> dump_file(const char* name) {",
          "269:   auto const path = folly::sformat(\"{}/{}\", RO::AdminDumpPath, name);",
          "272:   if (FileUtil::mkdir(path) != 0) return folly::none;",
          "276:   remove(path.c_str());",
          "280:   auto const fd = open(path.c_str(), O_CREAT|O_EXCL|O_RDWR, 0666);",
          "281:   if (fd < 0) return folly::none;",
          "283:   return DumpFile{path, folly::File(fd, /*owns=*/true)};",
          "284: }",
          "286: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "714:       break;",
          "715:     }",
          "716:     if (strncmp(cmd.c_str(), \"dump-static-strings\", 19) == 0) {",
          "721:       break;",
          "722:     }",
          "723:     if (strncmp(cmd.c_str(), \"random-static-strings\", 21) == 0) {",
          "",
          "[Removed Lines]",
          "717:       auto filename = transport->getParam(\"file\");",
          "718:       if (filename == \"\") filename = \"/tmp/static_strings\";",
          "719:       handleDumpStaticStringsRequest(cmd, filename);",
          "720:       transport->sendString(\"OK\\n\");",
          "",
          "[Added Lines]",
          "748:       if (auto file = dump_file(\"static_strings\")) {",
          "749:         handleDumpStaticStringsRequest(file->file);",
          "750:         transport->sendString(folly::sformat(\"dumped to {}\\n\", file->path));",
          "751:       } else {",
          "752:         transport->sendString(\"Unable to mkdir or file already exists.\\n\");",
          "753:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "746:     }",
          "748:     if (cmd == \"dump-pcre-cache\") {",
          "753:       break;",
          "754:     }",
          "",
          "[Removed Lines]",
          "749:       auto filename = transport->getParam(\"file\");",
          "750:       if (filename == \"\") filename = \"/tmp/pcre_cache\";",
          "751:       pcre_dump_cache(filename);",
          "752:       transport->sendString(\"OK\\n\");",
          "",
          "[Added Lines]",
          "782:       if (auto file = dump_file(\"pcre_cache\")) {",
          "783:         pcre_dump_cache(file->file);",
          "784:         transport->sendString(folly::sformat(\"dumped to {}\\n\", file->path));",
          "785:       } else {",
          "786:         transport->sendString(\"Unable to mkdir or file already exists.\\n\");",
          "787:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1368:       \"----\\n{} bytes\\n{}\\n\", str->size(), str->toCppString());",
          "1369: }",
          "1373:   auto const& list = lookupDefinedStaticStrings();",
          "1376:   for (auto item : list) {",
          "1378:     if (RuntimeOption::EvalPerfDataMap) {",
          "1379:       auto const len = std::min<size_t>(item->size(), 255);",
          "1380:       std::string str(item->data(), len);",
          "",
          "[Removed Lines]",
          "1371: bool AdminRequestHandler::handleDumpStaticStringsRequest(",
          "1372:   const std::string& /*cmd*/, const std::string& filename) {",
          "1374:   std::ofstream out(filename.c_str());",
          "1375:   SCOPE_EXIT { out.close(); };",
          "1377:     out << formatStaticString(item);",
          "",
          "[Added Lines]",
          "1406: bool AdminRequestHandler::handleDumpStaticStringsRequest(folly::File& file) {",
          "1409:     auto const line = formatStaticString(item);",
          "1410:     folly::writeFull(file.fd(), line.data(), line.size());",
          "",
          "---------------"
        ],
        "hphp/runtime/server/admin-request-handler.h||hphp/runtime/server/admin-request-handler.h": [
          "File: hphp/runtime/server/admin-request-handler.h -> hphp/runtime/server/admin-request-handler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"hphp/runtime/server/access-log.h\"",
          "20: #include \"hphp/runtime/server/server.h\"",
          "22: namespace HPHP {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <folly/File.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:                                    Transport *transport);",
          "73:   bool handleStaticStringsRequest(const std::string &cmd,",
          "74:                                   Transport *transport);",
          "77:   bool handleRandomStaticStringsRequest(const std::string &cmd,",
          "78:                                         Transport *transport);",
          "79:   bool handleVMRequest      (const std::string &cmd, Transport *transport);",
          "",
          "[Removed Lines]",
          "75:   bool handleDumpStaticStringsRequest(const std::string &cmd,",
          "76:                                       const std::string &filename);",
          "",
          "[Added Lines]",
          "77:   bool handleDumpStaticStringsRequest(folly::File& file);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_ldap/t78806688.php||hphp/test/slow/ext_ldap/t78806688.php": [
          "File: hphp/test/slow/ext_ldap/t78806688.php -> hphp/test/slow/ext_ldap/t78806688.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh",
          "3: <<__EntryPoint>>",
          "4: function main(): void {",
          "5:   $multiplier = 1431655769;",
          "6:   $s = str_repeat(\"a\", $multiplier);",
          "7:   ldap_escape($s);",
          "8:   echo \"FAIL!\\n\";",
          "9: }",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_ldap/t78806688.php.expectf||hphp/test/slow/ext_ldap/t78806688.php.expectf": [
          "File: hphp/test/slow/ext_ldap/t78806688.php.expectf -> hphp/test/slow/ext_ldap/t78806688.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Fatal error: String length exceeded: 4294967307 > %d in %s/t78806688.php on line 7",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_string/t76103217.php||hphp/test/slow/ext_string/t76103217.php": [
          "File: hphp/test/slow/ext_string/t76103217.php -> hphp/test/slow/ext_string/t76103217.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh",
          "3: <<__EntryPoint>>",
          "4: function main(): void {",
          "5:   $key = \"\\x26\\xbd\\xbd\\xbd\\xff\\x60\\xbf\\xff\\xff\\x60\";",
          "6:   $salt1 = \"\\x24\\x32\\x78\\x24\\x31\\x30\\x24\\x24\\x35\\x24\\xad\\x20\\x20\\x26\\xff\\x60\\xbf\\xff\\xff\\x60\\x24\\x31\\x78\\xa8\\xa8\\xa0\\x01\\x01\\x01\\x01\\x01\\x01\";",
          "7:   $salt2 = \"\\x24\\x32\\x78\\x24\\x31\\x30\\x24\\x24\\x35\";",
          "9:   var_dump(base64_encode(crypt($key, $salt1)));",
          "10:   var_dump(base64_encode(crypt($key, $salt2)));",
          "11: }",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_string/t76103217.php.expect||hphp/test/slow/ext_string/t76103217.php.expect": [
          "File: hphp/test/slow/ext_string/t76103217.php.expect -> hphp/test/slow/ext_string/t76103217.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: string(4) \"KjA=\"",
          "2: string(12) \"JDJ4JDEwJCQ1\"",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_xml/xmlreader_empty_expand.php||hphp/test/slow/ext_xml/xmlreader_empty_expand.php": [
          "File: hphp/test/slow/ext_xml/xmlreader_empty_expand.php -> hphp/test/slow/ext_xml/xmlreader_empty_expand.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh",
          "3: <<__EntryPoint>>",
          "4: function main(): void {",
          "5:     $a = new XMLReader();",
          "6:     $b = new DOMNode();",
          "7:     $a->expand($b);",
          "8:     $a->expand($a);",
          "9: }",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf||hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf": [
          "File: hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf -> hphp/test/slow/ext_xml/xmlreader_empty_expand.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Warning: Invalid State Error in %s on line %d",
          "3: Warning: Invalid State Error in %s on line %d",
          "",
          "---------------"
        ],
        "hphp/util/light-process.cpp||hphp/util/light-process.cpp": [
          "File: hphp/util/light-process.cpp -> hphp/util/light-process.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #include \"hphp/util/hugetlb.h\"",
          "47: #include \"hphp/util/logger.h\"",
          "48: #include \"hphp/util/process.h\"",
          "49: #include \"hphp/util/timer.h\"",
          "50: #include \"hphp/util/user-info.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #include \"hphp/util/struct-log.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: namespace {",
          "59: __thread LightProcess* tl_proc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: bool LightProcess::g_strictUser = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "436:   lwp_read(afdt_fd, uname);",
          "437:   if (!uname.length()) return;",
          "439:   auto buf = PasswdBuffer{};",
          "440:   struct passwd *pw;",
          "441:   if (getpwnam_r(uname.c_str(), &buf.ent, buf.data.get(), buf.size, &pw)) {",
          "443:     return;",
          "444:   }",
          "445:   if (!pw) {",
          "447:     return;",
          "448:   }",
          "450:   if (pw->pw_gid) {",
          "453:   }",
          "454:   if (pw->pw_uid) {",
          "456:   }",
          "457: }",
          "",
          "[Removed Lines]",
          "451:     initgroups(pw->pw_name, pw->pw_gid);",
          "452:     setgid(pw->pw_gid);",
          "455:     setuid(pw->pw_uid);",
          "",
          "[Added Lines]",
          "442:   StructuredLogEntry* log = nullptr;",
          "443:   int err = 0;",
          "444:   SCOPE_EXIT {",
          "445:     if (log) {",
          "446:       log->setInt(\"errno\", err);",
          "447:       log->setStr(\"new_user\", uname);",
          "448:       StructuredLog::log(\"hhvm_lightprocess_error\", *log);",
          "449:       delete log;",
          "450:     }",
          "451:   };",
          "455:     err = errno;",
          "456:     log = new StructuredLogEntry();",
          "457:     log->setStr(\"function\", \"getpwnam_r\");",
          "458:     if (LightProcess::g_strictUser) {",
          "459:       throw std::runtime_error{\"getpwnam_r(): \" + folly::errnoStr(err)};",
          "460:     }",
          "464:     log = new StructuredLogEntry();",
          "465:     log->setStr(\"function\", \"getpwnam_r\");",
          "466:     if (LightProcess::g_strictUser) {",
          "467:       throw std::runtime_error{\"getpwnam_r(): not found\"};",
          "468:     }",
          "472:     if (initgroups(pw->pw_name, pw->pw_gid)) {",
          "473:       err = errno;",
          "474:       log = new StructuredLogEntry();",
          "475:       log->setStr(\"function\", \"initgroups\");",
          "476:     }",
          "477:     if (setgid(pw->pw_gid)) {",
          "478:       if (!log) {",
          "479:         err = errno;",
          "480:         log = new StructuredLogEntry();",
          "481:         log->setStr(\"function\", \"setgid\");",
          "482:         if (LightProcess::g_strictUser) {",
          "483:           throw std::runtime_error{\"setgid():\" + folly::errnoStr(err)};",
          "484:         }",
          "485:       }",
          "486:     }",
          "489:     if (setuid(pw->pw_uid)) {",
          "490:       if (!log) {",
          "491:         err = errno;",
          "492:         log = new StructuredLogEntry();",
          "493:         log->setStr(\"function\", \"setuid\");",
          "494:         if (LightProcess::g_strictUser) {",
          "495:           throw std::runtime_error{\"setuid():\" + folly::errnoStr(err)};",
          "496:         }",
          "497:       }",
          "498:     }",
          "",
          "---------------"
        ],
        "hphp/util/light-process.h||hphp/util/light-process.h": [
          "File: hphp/util/light-process.h -> hphp/util/light-process.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   Mutex m_procMutex;",
          "130:   int m_afdt_fd;",
          "131:   std::map<FILE*, pid_t> m_popenMap;",
          "132: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:  public:",
          "135:   static bool g_strictUser;",
          "",
          "---------------"
        ],
        "hphp/zend/crypt-blowfish.cpp||hphp/zend/crypt-blowfish.cpp": [
          "File: hphp/zend/crypt-blowfish.cpp -> hphp/zend/crypt-blowfish.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "696:   }",
          "698:   count = (BF_word)1 << ((setting[4] - '0') * 10 + (setting[5] - '0'));",
          "700:     __set_errno(EINVAL);",
          "701:     return NULL;",
          "702:   }",
          "",
          "[Removed Lines]",
          "699:   if (count < min || BF_decode(data.binary.salt, &setting[7], 16)) {",
          "",
          "[Added Lines]",
          "699:   if (count < min ||",
          "700:       BF_decode(data.binary.salt, &setting[7], 16) ||",
          "701:       ((unsigned int)(setting[7 + 22 - 1] - 0x20) >= 0x60)",
          "702:      ) {",
          "",
          "---------------"
        ],
        "hphp/zend/zend-string.cpp||hphp/zend/zend-string.cpp": [
          "File: hphp/zend/zend-string.cpp -> hphp/zend/zend-string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "396: }",
          "398: char *string_crypt(const char *key, const char *salt) {",
          "402:   char random_salt[12];",
          "403:   if (!*salt) {",
          "",
          "[Removed Lines]",
          "399:   assert(key);",
          "400:   assert(salt);",
          "",
          "[Added Lines]",
          "399:   assertx(key);",
          "400:   assertx(salt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:     return string_crypt(key, random_salt);",
          "408:   }",
          "411:     (salt[0] == '$') &&",
          "412:     (salt[1] == '2') &&",
          "413:     (salt[2] >= 'a') && (salt[2] <= 'z') &&",
          "",
          "[Removed Lines]",
          "410:   if ((strlen(salt) > sizeof(\"$2X$00$\")) &&",
          "",
          "[Added Lines]",
          "410:   auto const saltLen = strlen(salt);",
          "411:   if ((saltLen > sizeof(\"$2X$00$\")) &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "417:     (salt[6] == '$')) {",
          "419:     char output[61];",
          "421:       return strdup(output);",
          "422:     }",
          "",
          "[Removed Lines]",
          "420:     if (php_crypt_blowfish_rn(key, salt, output, sizeof(output))) {",
          "",
          "[Added Lines]",
          "422:     static constexpr size_t maxSaltLength = 123;",
          "423:     char paddedSalt[maxSaltLength + 1];",
          "424:     paddedSalt[0] = paddedSalt[maxSaltLength] = '\\0';",
          "426:     memset(&paddedSalt[1], '$', maxSaltLength - 1);",
          "427:     memcpy(paddedSalt, salt, std::min(maxSaltLength, saltLen));",
          "428:     paddedSalt[saltLen] = '\\0';",
          "430:     if (php_crypt_blowfish_rn(key, paddedSalt, output, sizeof(output))) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}