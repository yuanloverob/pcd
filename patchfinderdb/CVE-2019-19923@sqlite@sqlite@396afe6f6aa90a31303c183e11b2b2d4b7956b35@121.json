{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "05d49d1442d3d99237050c5f1502b56a79f72d2f",
      "candidate_info": {
        "commit_hash": "05d49d1442d3d99237050c5f1502b56a79f72d2f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/05d49d1442d3d99237050c5f1502b56a79f72d2f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases form dbsqlfuzz\n\nFossilOrigin-Name: 9cf8ebd141aa2eb661d457624c76433bd9e4abfdef04aa52e28bc169172c2c8f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0ea05a0eb96acb860d8af2e788e29a5ae3b161e7892ab62f1ff2f3e722c0dcb6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "677525756b729e1afc7de103bc586226db19b841",
      "candidate_info": {
        "commit_hash": "677525756b729e1afc7de103bc586226db19b841",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/677525756b729e1afc7de103bc586226db19b841",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vacuum.c"
        ],
        "message": "Simplification of the recent VACUUM changes that make the code more like what it was before the change.  Also, make the VACUUM command a no-inline procedure to work around a performance regression.\n\nFossilOrigin-Name: 9cac5ac145d62117c918539baaa8a3c124230e031842e35fa1ba59f658c99518",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vacuum.c||src/vacuum.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d293fb43f2eb64026ac1e0422f54d4839b101898cc9913fc7746760c08ed41f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "142: int sqlite3RunVacuum(",
          "",
          "[Added Lines]",
          "142: SQLITE_NOINLINE int sqlite3RunVacuum(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     return SQLITE_ERROR;",
          "171:   }",
          "172:   saved_openFlags = db->openFlags;",
          "174:   if( pOut ){",
          "175:     if( sqlite3_value_type(pOut)!=SQLITE_TEXT ){",
          "176:       sqlite3SetString(pzErrMsg, db, \"non-text filename\");",
          "",
          "[Removed Lines]",
          "173:   saved_mDbFlags = db->mDbFlags;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:     zOut = (const char*)sqlite3_value_text(pOut);",
          "180:     db->openFlags &= ~SQLITE_OPEN_READONLY;",
          "181:     db->openFlags |= SQLITE_OPEN_CREATE|SQLITE_OPEN_READWRITE;",
          "183:   }else{",
          "184:     zOut = \"\";",
          "186:   }",
          "191:   saved_flags = db->flags;",
          "192:   saved_nChange = db->nChange;",
          "193:   saved_nTotalChange = db->nTotalChange;",
          "194:   saved_mTrace = db->mTrace;",
          "195:   db->flags |= SQLITE_WriteSchema | SQLITE_IgnoreChecks;",
          "196:   db->flags &= ~(u64)(SQLITE_ForeignKeys | SQLITE_ReverseOrder",
          "197:                    | SQLITE_Defensive | SQLITE_CountRows);",
          "198:   db->mTrace = 0;",
          "",
          "[Removed Lines]",
          "182:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum | DBFLAG_VacuumInto;",
          "185:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "[Added Lines]",
          "189:   saved_mDbFlags = db->mDbFlags;",
          "194:   db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "231:       sqlite3SetString(pzErrMsg, db, \"output file already exists\");",
          "232:       goto end_of_vacuum;",
          "233:     }",
          "234:   }",
          "235:   nRes = sqlite3BtreeGetOptimalReserve(pMain);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:     db->mDbFlags |= DBFLAG_VacuumInto;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "308:       zDbMain",
          "309:   );",
          "310:   assert( (db->mDbFlags & DBFLAG_Vacuum)!=0 );",
          "312:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "311:   db->mDbFlags &= ~(DBFLAG_Vacuum|DBFLAG_VacuumInto);",
          "",
          "[Added Lines]",
          "311:   db->mDbFlags &= ~DBFLAG_Vacuum;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2240bb88f81759cd975a0cfe377e7fcd6a6f501b",
      "candidate_info": {
        "commit_hash": "2240bb88f81759cd975a0cfe377e7fcd6a6f501b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2240bb88f81759cd975a0cfe377e7fcd6a6f501b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereInt.h",
          "tool/lemon.c"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 956ca2a452aa3707bca553007a7ef221af3d4f6b0af747d17070926e000f2362",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereInt.h||src/whereInt.h",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2846bc0429c0956473bfe99dde135f2c206720f0be4c2800118b280e446ce325",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #ifndef SQLITE_WHEREINT_H",
          "18: #define SQLITE_WHEREINT_H",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "485: static struct action *Action_new(void){",
          "487:   struct action *newaction;",
          "490:     int i;",
          "491:     int amt = 100;",
          "494:       fprintf(stderr,\"Unable to allocate memory for a new parser action.\");",
          "495:       exit(1);",
          "496:     }",
          "499:   }",
          "502:   return newaction;",
          "503: }",
          "",
          "[Removed Lines]",
          "486:   static struct action *freelist = 0;",
          "489:   if( freelist==0 ){",
          "492:     freelist = (struct action *)calloc(amt, sizeof(struct action));",
          "493:     if( freelist==0 ){",
          "497:     for(i=0; i<amt-1; i++) freelist[i].next = &freelist[i+1];",
          "498:     freelist[amt-1].next = 0;",
          "500:   newaction = freelist;",
          "501:   freelist = freelist->next;",
          "",
          "[Added Lines]",
          "486:   static struct action *actionfreelist = 0;",
          "489:   if( actionfreelist==0 ){",
          "492:     actionfreelist = (struct action *)calloc(amt, sizeof(struct action));",
          "493:     if( actionfreelist==0 ){",
          "497:     for(i=0; i<amt-1; i++) actionfreelist[i].next = &actionfreelist[i+1];",
          "498:     actionfreelist[amt-1].next = 0;",
          "500:   newaction = actionfreelist;",
          "501:   actionfreelist = actionfreelist->next;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1907:   return ep;",
          "1908: }",
          "1911: static struct s_options *op;",
          "1912: static FILE *errstream;",
          "",
          "[Removed Lines]",
          "1910: static char **argv;",
          "",
          "[Added Lines]",
          "1910: static char **g_argv;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1920: static void errline(int n, int k, FILE *err)",
          "1921: {",
          "1922:   int spcnt, i;",
          "1928:   }",
          "1929:   spcnt += k;",
          "1931:   if( spcnt<20 ){",
          "1932:     fprintf(err,\"\\n%*s^-- here\\n\",spcnt,\"\");",
          "1933:   }else{",
          "",
          "[Removed Lines]",
          "1923:   if( argv[0] ) fprintf(err,\"%s\",argv[0]);",
          "1924:   spcnt = lemonStrlen(argv[0]) + 1;",
          "1925:   for(i=1; i<n && argv[i]; i++){",
          "1926:     fprintf(err,\" %s\",argv[i]);",
          "1927:     spcnt += lemonStrlen(argv[i])+1;",
          "1930:   for(; argv[i]; i++) fprintf(err,\" %s\",argv[i]);",
          "",
          "[Added Lines]",
          "1923:   if( g_argv[0] ) fprintf(err,\"%s\",g_argv[0]);",
          "1924:   spcnt = lemonStrlen(g_argv[0]) + 1;",
          "1925:   for(i=1; i<n && g_argv[i]; i++){",
          "1926:     fprintf(err,\" %s\",g_argv[i]);",
          "1927:     spcnt += lemonStrlen(g_argv[i])+1;",
          "1930:   for(; g_argv[i]; i++) fprintf(err,\" %s\",g_argv[i]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1943: {",
          "1944:   int i;",
          "1945:   int dashdash = 0;",
          "1949:         if( n==0 ) return i;",
          "1950:         n--;",
          "1951:       }",
          "1953:     }",
          "1954:   }",
          "1955:   return -1;",
          "",
          "[Removed Lines]",
          "1946:   if( argv!=0 && *argv!=0 ){",
          "1947:     for(i=1; argv[i]; i++){",
          "1948:       if( dashdash || !ISOPT(argv[i]) ){",
          "1952:       if( strcmp(argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "[Added Lines]",
          "1946:   if( g_argv!=0 && *g_argv!=0 ){",
          "1947:     for(i=1; g_argv[i]; i++){",
          "1948:       if( dashdash || !ISOPT(g_argv[i]) ){",
          "1952:       if( strcmp(g_argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1966:   int errcnt = 0;",
          "1967:   int j;",
          "1968:   for(j=0; op[j].label; j++){",
          "1970:   }",
          "1972:   if( op[j].label==0 ){",
          "1973:     if( err ){",
          "1974:       fprintf(err,\"%sundefined option.\\n\",emsg);",
          "",
          "[Removed Lines]",
          "1969:     if( strncmp(&argv[i][1],op[j].label,lemonStrlen(op[j].label))==0 ) break;",
          "1971:   v = argv[i][0]=='-' ? 1 : 0;",
          "",
          "[Added Lines]",
          "1969:     if( strncmp(&g_argv[i][1],op[j].label,lemonStrlen(op[j].label))==0 ) break;",
          "1971:   v = g_argv[i][0]=='-' ? 1 : 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1982:   }else if( op[j].type==OPT_FFLAG ){",
          "1983:     (*(void(*)(int))(op[j].arg))(v);",
          "1984:   }else if( op[j].type==OPT_FSTR ){",
          "1986:   }else{",
          "1987:     if( err ){",
          "1988:       fprintf(err,\"%smissing argument on switch.\\n\",emsg);",
          "",
          "[Removed Lines]",
          "1985:     (*(void(*)(char *))(op[j].arg))(&argv[i][2]);",
          "",
          "[Added Lines]",
          "1985:     (*(void(*)(char *))(op[j].arg))(&g_argv[i][2]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2004:   char *cp;",
          "2005:   int j;",
          "2006:   int errcnt = 0;",
          "2008:   assert( cp!=0 );",
          "2010:   for(j=0; op[j].label; j++){",
          "2012:   }",
          "2014:   if( op[j].label==0 ){",
          "",
          "[Removed Lines]",
          "2007:   cp = strchr(argv[i],'=');",
          "2011:     if( strcmp(argv[i],op[j].label)==0 ) break;",
          "",
          "[Added Lines]",
          "2007:   cp = strchr(g_argv[i],'=');",
          "2011:     if( strcmp(g_argv[i],op[j].label)==0 ) break;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2035:           if( err ){",
          "2036:             fprintf(err,",
          "2037:                \"%sillegal character in floating-point argument.\\n\",emsg);",
          "2039:           }",
          "2040:           errcnt++;",
          "2041:         }",
          "",
          "[Removed Lines]",
          "2038:             errline(i,(int)((char*)end-(char*)argv[i]),err);",
          "",
          "[Added Lines]",
          "2038:             errline(i,(int)((char*)end-(char*)g_argv[i]),err);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2046:         if( *end ){",
          "2047:           if( err ){",
          "2048:             fprintf(err,\"%sillegal character in integer argument.\\n\",emsg);",
          "2050:           }",
          "2051:           errcnt++;",
          "2052:         }",
          "",
          "[Removed Lines]",
          "2049:             errline(i,(int)((char*)end-(char*)argv[i]),err);",
          "",
          "[Added Lines]",
          "2049:             errline(i,(int)((char*)end-(char*)g_argv[i]),err);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2086: int OptInit(char **a, struct s_options *o, FILE *err)",
          "2087: {",
          "2088:   int errcnt = 0;",
          "2090:   op = o;",
          "2091:   errstream = err;",
          "2093:     int i;",
          "2096:         errcnt += handleflags(i,err);",
          "2098:         errcnt += handleswitch(i,err);",
          "2099:       }",
          "2100:     }",
          "",
          "[Removed Lines]",
          "2089:   argv = a;",
          "2092:   if( argv && *argv && op ){",
          "2094:     for(i=1; argv[i]; i++){",
          "2095:       if( argv[i][0]=='+' || argv[i][0]=='-' ){",
          "2097:       }else if( strchr(argv[i],'=') ){",
          "",
          "[Added Lines]",
          "2089:   g_argv = a;",
          "2092:   if( g_argv && *g_argv && op ){",
          "2094:     for(i=1; g_argv[i]; i++){",
          "2095:       if( g_argv[i][0]=='+' || g_argv[i][0]=='-' ){",
          "2097:       }else if( strchr(g_argv[i],'=') ){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2111:   int cnt = 0;",
          "2112:   int dashdash = 0;",
          "2113:   int i;",
          "2118:     }",
          "2119:   }",
          "2120:   return cnt;",
          "",
          "[Removed Lines]",
          "2114:   if( argv!=0 && argv[0]!=0 ){",
          "2115:     for(i=1; argv[i]; i++){",
          "2116:       if( dashdash || !ISOPT(argv[i]) ) cnt++;",
          "2117:       if( strcmp(argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "[Added Lines]",
          "2114:   if( g_argv!=0 && g_argv[0]!=0 ){",
          "2115:     for(i=1; g_argv[i]; i++){",
          "2116:       if( dashdash || !ISOPT(g_argv[i]) ) cnt++;",
          "2117:       if( strcmp(g_argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2124: {",
          "2125:   int i;",
          "2126:   i = argindex(n);",
          "2128: }",
          "2130: void OptErr(int n)",
          "",
          "[Removed Lines]",
          "2127:   return i>=0 ? argv[i] : 0;",
          "",
          "[Added Lines]",
          "2127:   return i>=0 ? g_argv[i] : 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2728:     case WAITING_FOR_CLASS_ID:",
          "2729:       if( !ISLOWER(x[0]) ){",
          "2730:         ErrorMsg(psp->filename, psp->tokenlineno,",
          "2732:         psp->errorcnt++;",
          "2733:         psp->state = RESYNC_AFTER_DECL_ERROR;",
          "2734:      }else if( Symbol_find(x) ){",
          "",
          "[Removed Lines]",
          "2731:           \"%%token_class must be followed by an identifier: \", x);",
          "",
          "[Added Lines]",
          "2731:           \"%%token_class must be followed by an identifier: %s\", x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c35b3065c509ec49a0ca40c85df2fdf3274306b",
      "candidate_info": {
        "commit_hash": "6c35b3065c509ec49a0ca40c85df2fdf3274306b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c35b3065c509ec49a0ca40c85df2fdf3274306b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/sqlite.h.in",
          "test/jrnlmode.test"
        ],
        "message": "Disable PRAGMA journal_mode=OFF when SQLITE_DBCONFIG_DEFENSIVE is turned on. Ticket [f4ec250930342e0c].\n\nFossilOrigin-Name: a0f5eb5c79cc33b7224f3421d2baa02a2a19eb9d6eaa8117dda4a1878b229cb5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "test/jrnlmode.test||test/jrnlmode.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14c00b1016ba53ab2dc177c59a27b6b9209202973685f0f274112d296ba7dfcb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "645:         eMode = PAGER_JOURNALMODE_QUERY;",
          "646:       }",
          "647:     }",
          "648:     if( eMode==PAGER_JOURNALMODE_QUERY && pId2->n==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "647:       if( eMode==PAGER_JOURNALMODE_OFF && (db->flags & SQLITE_Defensive)!=0 ){",
          "650:         eMode = PAGER_JOURNALMODE_QUERY;",
          "651:       }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "test/jrnlmode.test||test/jrnlmode.test": [
          "File: test/jrnlmode.test -> test/jrnlmode.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     PRAGMA temp.journal_mode;",
          "66:   }",
          "67: } [list persist persist [temp_journal_mode persist]]",
          "69:   execsql {",
          "70:     PRAGMA journal_mode = off;",
          "71:   }",
          "",
          "[Removed Lines]",
          "68: do_test jrnlmode-1.4 {",
          "",
          "[Added Lines]",
          "68: do_test jrnlmode-1.4a {",
          "69:   # When defensive is on, unable to set journal_mode to OFF",
          "70:   sqlite3_db_config db DEFENSIVE 1",
          "71:   execsql {",
          "72:     PRAGMA journal_mode = off;",
          "73:   }",
          "74: } {persist}",
          "75: do_test jrnlmode-1.4b {",
          "76:   # When defensive is on, unable to set journal_mode to OFF",
          "77:   sqlite3_db_config db DEFENSIVE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30842990b27387423009c9c96e34fd3e0d3c66de",
      "candidate_info": {
        "commit_hash": "30842990b27387423009c9c96e34fd3e0d3c66de",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/30842990b27387423009c9c96e34fd3e0d3c66de",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/global.c",
          "src/main.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h"
        ],
        "message": "Add a TESTCTRL that disables the verification of type, name, and tbl_name in the sqlite_master table.\n\nFossilOrigin-Name: 48d9b48ab4ace234eb1a055cf33cb533a1c3aa82d0a6e086d96226bd9474ceca",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/global.c||src/global.c",
          "src/main.c||src/main.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 724f4df9ccc2b683f7091a3f7a8c20ee210f44d7a610cd1b4c49da1c274add08",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "850:      || sqlite3_stricmp(zName, db->init.azInit[1])",
          "851:      || sqlite3_stricmp(zTblName, db->init.azInit[2])",
          "852:     ){",
          "855:     }",
          "856:   }else{",
          "857:     if( pParse->nested==0",
          "",
          "[Removed Lines]",
          "854:       return SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "853:       if( sqlite3Config.bExtraSchemaChecks ){",
          "855:         return SQLITE_ERROR;",
          "856:       }",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4063:       break;",
          "4064:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4072:     case SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS: {",
          "4073:       sqlite3GlobalConfig.bExtraSchemaChecks = va_arg(ap, int);",
          "4074:       break;",
          "4075:     }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9167:       { \"byteorder\",          SQLITE_TESTCTRL_BYTEORDER,     \"\"                   },",
          "9169:       { \"imposter\",           SQLITE_TESTCTRL_IMPOSTER,   \"SCHEMA ON/OFF ROOTPAGE\"},",
          "9170:       { \"internal_functions\", SQLITE_TESTCTRL_INTERNAL_FUNCTIONS, \"BOOLEAN\"       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9168:       { \"extra_schema_checks\",SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS,\"BOOLEAN\"       },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7359: #define SQLITE_TESTCTRL_PARSER_COVERAGE         26",
          "7360: #define SQLITE_TESTCTRL_RESULT_INTREAL          27",
          "7361: #define SQLITE_TESTCTRL_PRNG_SEED               28",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7362: #define SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS     29",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    }
  ]
}