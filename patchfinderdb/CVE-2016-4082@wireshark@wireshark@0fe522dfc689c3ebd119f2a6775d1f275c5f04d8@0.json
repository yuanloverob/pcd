{
  "cve_id": "CVE-2016-4082",
  "cve_desc": "epan/dissectors/packet-gsm_cbch.c in the GSM CBCH dissector in Wireshark 1.12.x before 1.12.11 and 2.0.x before 2.0.3 uses the wrong variable to index an array, which allows remote attackers to cause a denial of service (out-of-bounds access and application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "0fe522dfc689c3ebd119f2a6775d1f275c5f04d8",
  "patch_info": {
    "commit_hash": "0fe522dfc689c3ebd119f2a6775d1f275c5f04d8",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/0fe522dfc689c3ebd119f2a6775d1f275c5f04d8",
    "files": [
      "epan/dissectors/packet-gsm_cbch.c"
    ],
    "message": "GSM CBCH: fix an out of bounds access\n\nAs explained by Guy, we should use new_slots[i] and not new_slots[k]\n\nBug: 12278\nChange-Id: Ifae44f9d5948bed5c4ee0442510724016e307dee\nReviewed-on: https://code.wireshark.org/review/14678\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c": [
      "File: epan/dissectors/packet-gsm_cbch.c -> epan/dissectors/packet-gsm_cbch.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "253:                 else if (octet1 == 0x40)",
      "254:                 {",
      "258:                     other_slots[new_slots[i] - 1] = 0xFFFE;",
      "259:                 }",
      "260:                 else if (octet1 == 0x41)",
      "261:                 {",
      "265:                     other_slots[new_slots[i] - 1] = 0xFFFE;",
      "266:                 }",
      "267:                 else",
      "268:                 {",
      "272:                     other_slots[new_slots[i] - 1] = 0xFFFE;",
      "273:                 }",
      "274:             }",
      "",
      "[Removed Lines]",
      "256:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[k],",
      "257:                                     \"%d Free Message Slot, optional reading\", new_slots[k]);",
      "263:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[k],",
      "264:                                      \"%d Free Message Slot, reading advised\", new_slots[k]);",
      "270:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset, 1, new_slots[k],",
      "271:                                      \"%d reserved MDT: %x\", new_slots[k], octet1);",
      "",
      "[Added Lines]",
      "256:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[i],",
      "257:                                     \"%d Free Message Slot, optional reading\", new_slots[i]);",
      "263:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[i],",
      "264:                                      \"%d Free Message Slot, reading advised\", new_slots[i]);",
      "270:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset, 1, new_slots[i],",
      "271:                                      \"%d reserved MDT: %x\", new_slots[i], octet1);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "92d29d93ba25db01e924dd7f515f15d6abf7752d",
      "candidate_info": {
        "commit_hash": "92d29d93ba25db01e924dd7f515f15d6abf7752d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/92d29d93ba25db01e924dd7f515f15d6abf7752d",
        "files": [
          "epan/dissectors/packet-gsm_cbch.c"
        ],
        "message": "GSM CBCH: fix an out of bounds access\n\nAs explained by Guy, we should use new_slots[i] and not new_slots[k]\n\nBug: 12278\nChange-Id: Ifae44f9d5948bed5c4ee0442510724016e307dee\nReviewed-on: https://code.wireshark.org/review/14678\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 0fe522dfc689c3ebd119f2a6775d1f275c5f04d8)\nReviewed-on: https://code.wireshark.org/review/14691\n(cherry picked from commit edf4950894204abbb5c661703289e3b3c6cf181d)\nReviewed-on: https://code.wireshark.org/review/15445\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c": [
          "File: epan/dissectors/packet-gsm_cbch.c -> epan/dissectors/packet-gsm_cbch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:                 else if (octet1 == 0x40)",
          "240:                 {",
          "244:                     other_slots[new_slots[i] - 1] = 0xFFFE;",
          "245:                 }",
          "246:                 else if (octet1 == 0x41)",
          "247:                 {",
          "251:                     other_slots[new_slots[i] - 1] = 0xFFFE;",
          "252:                 }",
          "253:                 else",
          "254:                 {",
          "258:                     other_slots[new_slots[i] - 1] = 0xFFFE;",
          "259:                 }",
          "260:             }",
          "",
          "[Removed Lines]",
          "242:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[k],",
          "243:                                     \"%d Free Message Slot, optional reading\", new_slots[k]);",
          "249:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[k],",
          "250:                                      \"%d Free Message Slot, reading advised\", new_slots[k]);",
          "256:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset, 1, new_slots[k],",
          "257:                                      \"%d reserved MDT: %x\", new_slots[k], octet1);",
          "",
          "[Added Lines]",
          "242:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[i],",
          "243:                                     \"%d Free Message Slot, optional reading\", new_slots[i]);",
          "249:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[i],",
          "250:                                      \"%d Free Message Slot, reading advised\", new_slots[i]);",
          "256:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset, 1, new_slots[i],",
          "257:                                      \"%d reserved MDT: %x\", new_slots[i], octet1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "363dc721e35414618d2334996ae0b41950355e41",
      "candidate_info": {
        "commit_hash": "363dc721e35414618d2334996ae0b41950355e41",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/363dc721e35414618d2334996ae0b41950355e41",
        "files": [
          "epan/dissectors/packet-gsm_cbch.c"
        ],
        "message": "GSM CBCH: fix an out of bounds access\n\nAs explained by Guy, we should use new_slots[i] and not new_slots[k]\n\nBug: 12278\nChange-Id: Ifae44f9d5948bed5c4ee0442510724016e307dee\nReviewed-on: https://code.wireshark.org/review/14678\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 0fe522dfc689c3ebd119f2a6775d1f275c5f04d8)\nReviewed-on: https://code.wireshark.org/review/14690",
        "before_after_code_files": [
          "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c": [
          "File: epan/dissectors/packet-gsm_cbch.c -> epan/dissectors/packet-gsm_cbch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:                 else if (octet1 == 0x40)",
          "255:                 {",
          "259:                     other_slots[new_slots[i] - 1] = 0xFFFE;",
          "260:                 }",
          "261:                 else if (octet1 == 0x41)",
          "262:                 {",
          "266:                     other_slots[new_slots[i] - 1] = 0xFFFE;",
          "267:                 }",
          "268:                 else",
          "269:                 {",
          "273:                     other_slots[new_slots[i] - 1] = 0xFFFE;",
          "274:                 }",
          "275:             }",
          "",
          "[Removed Lines]",
          "257:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[k],",
          "258:                                     \"%d Free Message Slot, optional reading\", new_slots[k]);",
          "264:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[k],",
          "265:                                      \"%d Free Message Slot, reading advised\", new_slots[k]);",
          "271:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset, 1, new_slots[k],",
          "272:                                      \"%d reserved MDT: %x\", new_slots[k], octet1);",
          "",
          "[Added Lines]",
          "257:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[i],",
          "258:                                     \"%d Free Message Slot, optional reading\", new_slots[i]);",
          "264:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[i],",
          "265:                                      \"%d Free Message Slot, reading advised\", new_slots[i]);",
          "271:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset, 1, new_slots[i],",
          "272:                                      \"%d reserved MDT: %x\", new_slots[i], octet1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "edf4950894204abbb5c661703289e3b3c6cf181d",
      "candidate_info": {
        "commit_hash": "edf4950894204abbb5c661703289e3b3c6cf181d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/edf4950894204abbb5c661703289e3b3c6cf181d",
        "files": [
          "epan/dissectors/packet-gsm_cbch.c"
        ],
        "message": "GSM CBCH: fix an out of bounds access\n\nAs explained by Guy, we should use new_slots[i] and not new_slots[k]\n\nBug: 12278\nChange-Id: Ifae44f9d5948bed5c4ee0442510724016e307dee\nReviewed-on: https://code.wireshark.org/review/14678\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 0fe522dfc689c3ebd119f2a6775d1f275c5f04d8)\nReviewed-on: https://code.wireshark.org/review/14691",
        "before_after_code_files": [
          "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gsm_cbch.c||epan/dissectors/packet-gsm_cbch.c": [
          "File: epan/dissectors/packet-gsm_cbch.c -> epan/dissectors/packet-gsm_cbch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:                 else if (octet1 == 0x40)",
          "240:                 {",
          "244:                     other_slots[new_slots[i] - 1] = 0xFFFE;",
          "245:                 }",
          "246:                 else if (octet1 == 0x41)",
          "247:                 {",
          "251:                     other_slots[new_slots[i] - 1] = 0xFFFE;",
          "252:                 }",
          "253:                 else",
          "254:                 {",
          "258:                     other_slots[new_slots[i] - 1] = 0xFFFE;",
          "259:                 }",
          "260:             }",
          "",
          "[Removed Lines]",
          "242:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[k],",
          "243:                                     \"%d Free Message Slot, optional reading\", new_slots[k]);",
          "249:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[k],",
          "250:                                      \"%d Free Message Slot, reading advised\", new_slots[k]);",
          "256:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset, 1, new_slots[k],",
          "257:                                      \"%d reserved MDT: %x\", new_slots[k], octet1);",
          "",
          "[Added Lines]",
          "242:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[i],",
          "243:                                     \"%d Free Message Slot, optional reading\", new_slots[i]);",
          "249:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset++, 1, new_slots[i],",
          "250:                                      \"%d Free Message Slot, reading advised\", new_slots[i]);",
          "256:                     proto_tree_add_uint_format_value(sched_subtree, hf_gsm_cbch_slot, tvb, offset, 1, new_slots[i],",
          "257:                                      \"%d reserved MDT: %x\", new_slots[i], octet1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}