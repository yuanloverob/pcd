{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b65e801e5f2123803ae9604c5cd53df7060b9995",
      "candidate_info": {
        "commit_hash": "b65e801e5f2123803ae9604c5cd53df7060b9995",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b65e801e5f2123803ae9604c5cd53df7060b9995",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db\n\nFossilOrigin-Name: 049e9926202317f58c54b6351ff120fb69bf821f409909b1a1c5e335c0396707",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4e1b005e8b397a22161a6b89cbd3f17bda70a6e0a86d8abdc61856edf2a74da4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21a3b3191eb0869448601b07123639eae1789f05",
      "candidate_info": {
        "commit_hash": "21a3b3191eb0869448601b07123639eae1789f05",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21a3b3191eb0869448601b07123639eae1789f05",
        "files": [
          "Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Support Tcl libraries with a suffix.\n\nFossilOrigin-Name: 8d0153996a3685a9b109a01fea0cba76e4296b010e96fc0db43fa6fde54d1965",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "864: TCLVERSION = 86",
          "865: !ENDIF",
          "867: !IFNDEF TCLDIR",
          "868: TCLDIR = $(TOP)\\compat\\tcl",
          "869: !ENDIF",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867: !IFNDEF TCLSUFFIX",
          "868: TCLSUFFIX =",
          "869: !ENDIF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "877: !ENDIF",
          "879: !IFNDEF LIBTCL",
          "881: !ENDIF",
          "883: !IFNDEF LIBTCLSTUB",
          "885: !ENDIF",
          "887: !IFNDEF LIBTCLPATH",
          "",
          "[Removed Lines]",
          "880: LIBTCL = tcl$(TCLVERSION).lib",
          "884: LIBTCLSTUB = tclstub$(TCLVERSION).lib",
          "",
          "[Added Lines]",
          "884: LIBTCL = tcl$(TCLVERSION)$(TCLSUFFIX).lib",
          "888: LIBTCLSTUB = tclstub$(TCLVERSION)$(TCLSUFFIX).lib",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c9f1972e10b0cdb5e351a776a64c60acf404dcfbe2a8a28c0a273bbe851e677f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0f6b83300ecc6abf83e6cfad20a50d4406cde9b",
      "candidate_info": {
        "commit_hash": "a0f6b83300ecc6abf83e6cfad20a50d4406cde9b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a0f6b83300ecc6abf83e6cfad20a50d4406cde9b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/window.c",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Add things to this branch that will be required to support the EXCLUDE clause.\n\nFossilOrigin-Name: 7d66cd2013206ebad50c7cdb7dab9211fa8b47f5cb7067dcb314b3e0180875f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b904517bd6c4c59082381577246d3d2351b4265fc9151438ee4c33cf16f2eb1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3564:   u8 eExclude;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3578:   int regFirst;",
          "3579: };",
          "3581: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3581:   int regStartRowid;",
          "3582:   int regEndRowid;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3612:   pCx->pKeyInfo = pOrig->pKeyInfo;",
          "3613:   pCx->isTable = pOrig->isTable;",
          "3614:   pCx->pgnoRoot = pOrig->pgnoRoot;",
          "3615:   rc = sqlite3BtreeCursor(pOrig->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "3616:                           pCx->pKeyInfo, pCx->uc.pCursor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3615:   pCx->isOrdered = pOrig->isOrdered;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   }",
          "199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: struct NthValueCtx {",
          "207:   i64 nStep;",
          "208:   sqlite3_value *pValue;",
          "209: };",
          "210: static void nth_valueStepFunc(",
          "211:   sqlite3_context *pCtx,",
          "212:   int nArg,",
          "213:   sqlite3_value **apArg",
          "214: ){",
          "215:   struct NthValueCtx *p;",
          "216:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "217:   if( p ){",
          "218:     i64 iVal = sqlite3_value_int64(apArg[1]);",
          "219:     p->nStep++;",
          "220:     if( iVal==p->nStep ){",
          "221:       p->pValue = sqlite3_value_dup(apArg[0]);",
          "222:     }",
          "223:   }",
          "224:   UNUSED_PARAMETER(nArg);",
          "225:   UNUSED_PARAMETER(apArg);",
          "226: }",
          "227: static void nth_valueValueFunc(sqlite3_context *pCtx){",
          "228:   struct NthValueCtx *p;",
          "229:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "230:   if( p && p->pValue ){",
          "231:     sqlite3_result_value(pCtx, p->pValue);",
          "232:   }",
          "233: }",
          "234: static void nth_valueFinalizeFunc(sqlite3_context *pCtx){",
          "235:   struct NthValueCtx *p;",
          "236:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "237:   if( p && p->pValue ){",
          "238:     sqlite3_result_value(pCtx, p->pValue);",
          "239:     sqlite3_value_free(p->pValue);",
          "240:     p->pValue = 0;",
          "241:   }",
          "242: }",
          "243: #define nth_valueInvFunc noopStepFunc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:     WINDOWFUNCX(row_number, 0, 0),",
          "518:     WINDOWFUNCX(dense_rank, 0, 0),",
          "519:     WINDOWFUNCX(rank, 0, 0),",
          "521:     WINDOWFUNCALL(percent_rank, 0, 0),",
          "522:     WINDOWFUNCALL(cume_dist, 0, 0),",
          "523:     WINDOWFUNCALL(ntile, 1, 0),",
          "526:     WINDOWFUNCALL(last_value, 1, 0),",
          "528:     WINDOWFUNCNOOP(first_value, 1, 0),",
          "529:     WINDOWFUNCNOOP(lead, 1, 0),",
          "530:     WINDOWFUNCNOOP(lead, 2, 0),",
          "",
          "[Removed Lines]",
          "527:     WINDOWFUNCNOOP(nth_value, 2, 0),",
          "",
          "[Added Lines]",
          "568:     WINDOWFUNCALL(nth_value, 2, 0),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "622:           pWin->eType = aUp[i].eType;",
          "623:           pWin->eStart = aUp[i].eStart;",
          "624:           pWin->eEnd = aUp[i].eEnd;",
          "625:           if( pWin->eStart==TK_FOLLOWING ){",
          "626:             pWin->pStart = sqlite3Expr(db, TK_INTEGER, \"1\");",
          "627:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:           pWin->eExclude = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1102:   if( p1->eType!=p2->eType ) return 1;",
          "1103:   if( p1->eStart!=p2->eStart ) return 1;",
          "1104:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "1105:   if( sqlite3ExprCompare(pParse, p1->pStart, p2->pStart, -1) ) return 1;",
          "1106:   if( sqlite3ExprCompare(pParse, p1->pEnd, p2->pEnd, -1) ) return 1;",
          "1107:   if( sqlite3ExprListCompare(p1->pPartition, p2->pPartition, -1) ) return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1148:   if( p1->eExclude!=p2->eExclude ) return 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1131:   pMWin->regFirst = ++pParse->nMem;",
          "1132:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "1134:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1135:     FuncDef *p = pWin->pFunc;",
          "1136:     if( (p->funcFlags & SQLITE_FUNC_MINMAX) && pWin->eStart!=TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1178:   if( pMWin->eExclude ){",
          "1179:     pMWin->regStartRowid = ++pParse->nMem;",
          "1180:     pMWin->regEndRowid = ++pParse->nMem;",
          "1181:     pMWin->csrApp = pParse->nTab++;",
          "1182:     sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regStartRowid);",
          "1183:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regEndRowid);",
          "1184:     sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->csrApp, pMWin->iEphCsr);",
          "1185:     return;",
          "1186:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1250: ){",
          "1251:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1252:   Window *pWin;",
          "1253:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1254:     int regArg;",
          "1255:     int nArg = windowArgCount(pWin);",
          "1265:     }",
          "1269:     ){",
          "1270:       int addrIsNull = sqlite3VdbeAddOp1(v, OP_IsNull, regArg);",
          "1271:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1257:     if( csr>=0 ){",
          "1258:       int i;",
          "1259:       for(i=0; i<nArg; i++){",
          "1260:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "1261:       }",
          "1262:       regArg = reg;",
          "1263:     }else{",
          "1264:       regArg = reg + pWin->iArgCol;",
          "1267:     if( (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1268:       && pWin->eStart!=TK_UNBOUNDED",
          "",
          "[Added Lines]",
          "1307:     FuncDef *pFunc = pWin->pFunc;",
          "1310:     int i;",
          "1312:     for(i=0; i<nArg; i++){",
          "1313:       sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "1315:     regArg = reg;",
          "1317:     if( pMWin->regStartRowid==0",
          "1318:      && (pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1319:      && (pWin->eStart!=TK_UNBOUNDED)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1282:       }",
          "1283:       sqlite3VdbeJumpHere(v, addrIsNull);",
          "1284:     }else if( pWin->regApp ){",
          "1287:       );",
          "1288:       assert( bInverse==0 || bInverse==1 );",
          "1289:       sqlite3VdbeAddOp2(v, OP_AddImm, pWin->regApp+1-bInverse, 1);",
          "1295:       int addrIf = 0;",
          "1296:       if( pWin->pFilter ){",
          "1297:         int regTmp;",
          "1298:         assert( nArg==0 || nArg==pWin->pOwner->x.pList->nExpr );",
          "1299:         assert( nArg || pWin->pOwner->x.pList==0 );",
          "1306:         addrIf = sqlite3VdbeAddOp3(v, OP_IfNot, regTmp, 0, 1);",
          "1307:         VdbeCoverage(v);",
          "1311:       }",
          "1313:         CollSeq *pColl;",
          "1314:         assert( nArg>0 );",
          "1315:         pColl = sqlite3ExprNNCollSeq(pParse, pWin->pOwner->x.pList->a[0].pExpr);",
          "",
          "[Removed Lines]",
          "1285:       assert( pWin->pFunc->zName==nth_valueName",
          "1286:            || pWin->pFunc->zName==first_valueName",
          "1290:     }else if( pWin->pFunc->zName==leadName",
          "1291:            || pWin->pFunc->zName==lagName",
          "1292:     ){",
          "1294:     }else{",
          "1300:         if( csr>0 ){",
          "1301:           regTmp = sqlite3GetTempReg(pParse);",
          "1302:           sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+nArg,regTmp);",
          "1303:         }else{",
          "1304:           regTmp = regArg + nArg;",
          "1305:         }",
          "1308:         if( csr>0 ){",
          "1309:           sqlite3ReleaseTempReg(pParse, regTmp);",
          "1310:         }",
          "1312:       if( pWin->pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "",
          "[Added Lines]",
          "1336:       assert( pFunc->zName==nth_valueName",
          "1337:            || pFunc->zName==first_valueName",
          "1341:     }else if( pFunc->zName==leadName || pFunc->zName==lagName ){",
          "1343:     }else if( pFunc->xSFunc!=noopStepFunc ){",
          "1349:         regTmp = sqlite3GetTempReg(pParse);",
          "1350:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+nArg,regTmp);",
          "1353:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1355:       if( pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1317:       }",
          "1318:       sqlite3VdbeAddOp3(v, bInverse? OP_AggInverse : OP_AggStep,",
          "1319:                         bInverse, regArg, pWin->regAccum);",
          "1321:       sqlite3VdbeChangeP5(v, (u8)nArg);",
          "1322:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1323:     }",
          "",
          "[Removed Lines]",
          "1320:       sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);",
          "",
          "[Added Lines]",
          "1363:       sqlite3VdbeAppendP4(v, pFunc, P4_FUNCDEF);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1325: }",
          "1334:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1335:   Window *pWin;",
          "1337:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1340:     ){",
          "1341:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "1342:       sqlite3VdbeAddOp1(v, OP_Last, pWin->csrApp);",
          "1343:       VdbeCoverage(v);",
          "1344:       sqlite3VdbeAddOp3(v, OP_Column, pWin->csrApp, 0, pWin->regResult);",
          "1345:       sqlite3VdbeJumpHere(v, sqlite3VdbeCurrentAddr(v)-2);",
          "1347:         sqlite3VdbeAddOp1(v, OP_ResetSorter, pWin->csrApp);",
          "1348:       }",
          "1349:     }else if( pWin->regApp ){",
          "1350:     }else{",
          "1353:         sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);",
          "1354:         sqlite3VdbeAddOp2(v, OP_Copy, pWin->regAccum, pWin->regResult);",
          "1355:         sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1356:       }else{",
          "1359:         sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);",
          "1360:       }",
          "1361:     }",
          "",
          "[Removed Lines]",
          "1333: static void windowAggFinal(Parse *pParse, Window *pMWin, int bFinal){",
          "1338:     if( (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1339:      && pWin->eStart!=TK_UNBOUNDED",
          "1346:       if( bFinal ){",
          "1351:       if( bFinal ){",
          "1352:         sqlite3VdbeAddOp2(v, OP_AggFinal, pWin->regAccum, windowArgCount(pWin));",
          "1357:         sqlite3VdbeAddOp3(v, OP_AggValue, pWin->regAccum, windowArgCount(pWin),",
          "1358:                              pWin->regResult);",
          "",
          "[Added Lines]",
          "1376: static void windowAggFinal(Parse *pParse, Window *pMWin, int regArg, int bFin){",
          "1380:   if( pMWin->regStartRowid ){",
          "1381:     int addrNext;",
          "1382:     int regRowid = sqlite3GetTempReg(pParse);",
          "1383:     assert( pMWin->csrApp );",
          "1384:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1385:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1386:     }",
          "1387:     sqlite3VdbeAddOp3(v, OP_SeekGE, pMWin->csrApp, 0, pMWin->regStartRowid);",
          "1388:     addrNext = sqlite3VdbeCurrentAddr(v);",
          "1389:     sqlite3VdbeAddOp2(v, OP_Rowid, pMWin->csrApp, regRowid);",
          "1390:     sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, 0, regRowid);",
          "1391:     windowAggStep(pParse, pMWin, pMWin->csrApp, 0, regArg);",
          "1392:     sqlite3VdbeAddOp2(v, OP_Next, pMWin->csrApp, addrNext);",
          "1393:     sqlite3VdbeJumpHere(v, addrNext-1);",
          "1394:     sqlite3VdbeJumpHere(v, addrNext+1);",
          "1395:     sqlite3ReleaseTempReg(pParse, regRowid);",
          "1396:   }",
          "1399:     if( pMWin->regStartRowid==0",
          "1400:      && (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1401:      && (pWin->eStart!=TK_UNBOUNDED)",
          "1408:       if( bFin ){",
          "1412:       assert( pMWin->regStartRowid==0 );",
          "1414:       int nArg = windowArgCount(pWin);",
          "1415:       if( bFin ){",
          "1416:         sqlite3VdbeAddOp2(v, OP_AggFinal, pWin->regAccum, nArg);",
          "1421:         sqlite3VdbeAddOp3(v, OP_AggValue,pWin->regAccum,nArg,pWin->regResult);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1388:     if( pFunc->zName==nth_valueName",
          "1389:      || pFunc->zName==first_valueName",
          "1390:     ){",
          "1392:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1393:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1394:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "1396:       if( pFunc->zName==nth_valueName ){",
          "1398:         windowCheckValue(pParse, tmpReg, 2);",
          "1399:       }else{",
          "1400:         sqlite3VdbeAddOp2(v, OP_Integer, 1, tmpReg);",
          "1401:       }",
          "1408:       sqlite3VdbeResolveLabel(v, lbl);",
          "1409:       sqlite3ReleaseTempReg(pParse, tmpReg);",
          "1410:     }",
          "",
          "[Removed Lines]",
          "1391:       int csr = pWin->csrApp;",
          "1397:         sqlite3VdbeAddOp3(v, OP_Column, pMWin->iEphCsr, pWin->iArgCol+1,tmpReg);",
          "1402:       sqlite3VdbeAddOp3(v, OP_Add, tmpReg, pWin->regApp, tmpReg);",
          "1403:       sqlite3VdbeAddOp3(v, OP_Gt, pWin->regApp+1, lbl, tmpReg);",
          "1404:       VdbeCoverageNeverNull(v);",
          "1405:       sqlite3VdbeAddOp3(v, OP_SeekRowid, csr, 0, tmpReg);",
          "1406:       VdbeCoverageNeverTaken(v);",
          "1407:       sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol, pWin->regResult);",
          "",
          "[Added Lines]",
          "1459:         sqlite3VdbeAddOp3(v, OP_Column,pMWin->iEphCsr,pWin->iArgCol+1,tmpReg);",
          "1464:       if( pWin->eExclude==0 ){",
          "1465:         int csr = pWin->csrApp;",
          "1466:         sqlite3VdbeAddOp3(v, OP_Add, tmpReg, pWin->regApp, tmpReg);",
          "1467:         sqlite3VdbeAddOp3(v, OP_Gt, pWin->regApp+1, lbl, tmpReg);",
          "1468:         VdbeCoverageNeverNull(v);",
          "1469:         sqlite3VdbeAddOp3(v, OP_SeekRowid, csr, 0, tmpReg);",
          "1470:         VdbeCoverageNeverTaken(v);",
          "1471:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol, pWin->regResult);",
          "1472:       }else{",
          "1473:         int regRowid = sqlite3GetTempReg(pParse);",
          "1474:         int csr = pMWin->csrApp;",
          "1475:         int addrNext;",
          "1476:         sqlite3VdbeAddOp3(v, OP_IfPos, tmpReg, sqlite3VdbeCurrentAddr(v)+1, 1);",
          "1477:         sqlite3VdbeAddOp3(v, OP_SeekGE, csr, lbl, pMWin->regStartRowid);",
          "1478:         addrNext = sqlite3VdbeAddOp2(v, OP_Rowid, csr, regRowid);",
          "1479:         sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, lbl, regRowid);",
          "1480:         sqlite3VdbeAddOp3(v, OP_IfPos, tmpReg, sqlite3VdbeCurrentAddr(v)+3, 1);",
          "1481:         sqlite3VdbeAddOp3(v, OP_Column, csr, pMWin->iArgCol, pWin->regResult);",
          "1482:         sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl);",
          "1483:         sqlite3VdbeAddOp2(v, OP_Next, csr, addrNext);",
          "1484:         sqlite3ReleaseTempReg(pParse, regRowid);",
          "1485:       }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1457:     FuncDef *pFunc = pWin->pFunc;",
          "1458:     sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1459:     nArg = MAX(nArg, windowArgCount(pWin));",
          "1471:     }",
          "1472:   }",
          "1473:   regArg = pParse->nMem+1;",
          "",
          "[Removed Lines]",
          "1460:     if( pFunc->zName==nth_valueName",
          "1461:      || pFunc->zName==first_valueName",
          "1462:     ){",
          "1463:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp);",
          "1464:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "1465:     }",
          "1467:     if( (pFunc->funcFlags & SQLITE_FUNC_MINMAX) && pWin->csrApp ){",
          "1468:       assert( pWin->eStart!=TK_UNBOUNDED );",
          "1469:       sqlite3VdbeAddOp1(v, OP_ResetSorter, pWin->csrApp);",
          "1470:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "",
          "[Added Lines]",
          "1538:     if( pWin->eExclude==0 ){",
          "1539:       if( pFunc->zName==nth_valueName || pFunc->zName==first_valueName ){",
          "1540:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp);",
          "1541:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "1542:       }",
          "1544:       if( (pFunc->funcFlags & SQLITE_FUNC_MINMAX) && pWin->csrApp ){",
          "1545:         assert( pWin->eStart!=TK_UNBOUNDED );",
          "1546:         sqlite3VdbeAddOp1(v, OP_ResetSorter, pWin->csrApp);",
          "1547:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "1548:       }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1482: static int windowCacheFrame(Window *pMWin){",
          "1483:   Window *pWin;",
          "1484:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1485:     FuncDef *pFunc = pWin->pFunc;",
          "1486:     if( (pFunc->zName==nth_valueName)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1562:   if( pMWin->regStartRowid ) return 1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1684:   }",
          "1686:   if( op==WINDOW_RETURN_ROW ){",
          "1688:   }",
          "1689:   addrContinue = sqlite3VdbeCurrentAddr(v);",
          "1690:   switch( op ){",
          "",
          "[Removed Lines]",
          "1687:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Added Lines]",
          "1766:     windowAggFinal(pParse, pMWin, p->regArg, 0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1697:     case WINDOW_AGGINVERSE:",
          "1698:       csr = p->start.csr;",
          "1699:       reg = p->start.reg;",
          "1701:       break;",
          "1703:     case WINDOW_AGGSTEP:",
          "1704:       csr = p->end.csr;",
          "1705:       reg = p->end.reg;",
          "1707:       break;",
          "1708:   }",
          "",
          "[Removed Lines]",
          "1700:       windowAggStep(pParse, pMWin, csr, 1, p->regArg, 0);",
          "1706:       windowAggStep(pParse, pMWin, csr, 0, p->regArg, 0);",
          "",
          "[Added Lines]",
          "1779:       if( pMWin->regStartRowid ){",
          "1780:         assert( pMWin->regEndRowid );",
          "1781:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regStartRowid, 1);",
          "1782:       }else{",
          "1783:         windowAggStep(pParse, pMWin, csr, 1, p->regArg);",
          "1784:       }",
          "1790:       if( pMWin->regStartRowid ){",
          "1791:         assert( pMWin->regEndRowid );",
          "1792:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regEndRowid, 1);",
          "1793:       }else{",
          "1794:         windowAggStep(pParse, pMWin, csr, 0, p->regArg);",
          "1795:       }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2279:   if( pMWin->eStart==pMWin->eEnd && regStart && regEnd ){",
          "2280:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2281:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2283:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2284:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2285:     sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "",
          "[Removed Lines]",
          "2282:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Added Lines]",
          "2371:     windowAggFinal(pParse, pMWin, s.regArg, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2414:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2415:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "2416:   if( pMWin->pPartition ){",
          "2417:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2418:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "2419:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2506:     if( pMWin->regStartRowid ){",
          "2507:       sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regStartRowid);",
          "2508:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regEndRowid);",
          "2509:     }",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   \"",
          "90: }",
          "92: ==========",
          "95:   DROP TABLE IF EXISTS t1;",
          "96:   CREATE TABLE t1(a REAL, b INTEGER);",
          "97:   INSERT INTO t1 VALUES",
          "",
          "[Removed Lines]",
          "94: execsql_test 2.0 {",
          "",
          "[Added Lines]",
          "93: foreach {tn ex} {",
          "94:   1  { EXCLUDE NO OTHERS }",
          "95:   2  { EXCLUDE CURRENT ROW }",
          "96:   3  { EXCLUDE GROUP }",
          "97:   4  { EXCLUDE TIES }",
          "98: } {",
          "99:   execsql_test 2.$tn.1 \"",
          "100:     SELECT row_number() OVER win",
          "101:     FROM t3",
          "102:     WINDOW win AS (",
          "103:       ORDER BY c, b, a",
          "104:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING $ex",
          "105:     )",
          "106:   \"",
          "108:   execsql_test 2.$tn.2 \"",
          "109:     SELECT nth_value(c, 14) OVER win",
          "110:     FROM t3",
          "111:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING $ex)",
          "112:   \"",
          "113: }",
          "117: execsql_test 3.0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:   11 { ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING }",
          "115:   12 { ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING }",
          "116: } {",
          "118:     SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ($frame)",
          "119:   \"",
          "120: }",
          "",
          "[Removed Lines]",
          "117:   execsql_test 2.$tn \"",
          "",
          "[Added Lines]",
          "140:   execsql_test 3.$tn \"",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   SELECT a, b, min(c) OVER (ORDER BY a,b  GROUPS BETWEEN 1 FOLLOWING         AND UNBOUNDED FOLLOWING ) FROM t3 ORDER BY 1, 2, 3;",
          "434: } {AA aa 102   AA aa 102   AA aa 102   AA aa 102   AA bb 102   AA bb 102   AA bb 102   AA bb 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   CC aa 102   CC aa 102   CC aa 102   CC aa 102   CC bb 102   CC bb 102   DD aa 102   DD aa 102   DD aa 102   DD bb 102   DD bb 102   DD bb 102   DD bb 102   EE aa 102   EE aa 102   EE bb 102   EE bb 102   EE bb 102   FF aa 102   FF aa 102   FF aa 102   FF aa 102   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   GG aa 113   GG aa 113   GG aa 113   GG aa 113   GG bb 113   GG bb 113   GG bb 113   GG bb 113   HH aa 113   HH aa 113   HH aa 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   II aa 113   II aa 113   II bb 113   II bb 113   II bb 113   II bb 113   II bb 113   JJ aa 257   JJ aa 257   JJ aa 257   JJ aa 257   JJ bb {}   JJ bb {}   JJ bb {}   JJ bb {}}",
          "436: #==========================================================================",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t1(a REAL, b INTEGER);",
          "441:   INSERT INTO t1 VALUES",
          "",
          "[Removed Lines]",
          "438: do_execsql_test 2.0 {",
          "",
          "[Added Lines]",
          "436: do_execsql_test 2.1.1 {",
          "437:   SELECT row_number() OVER win",
          "438:     FROM t3",
          "439:     WINDOW win AS (",
          "440:       ORDER BY c, b, a",
          "441:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE NO OTHERS",
          "442:     )",
          "443: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "445: do_execsql_test 2.1.2 {",
          "446:   SELECT nth_value(c, 14) OVER win",
          "447:     FROM t3",
          "448:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE NO OTHERS )",
          "449: } {938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938}",
          "451: do_execsql_test 2.2.1 {",
          "452:   SELECT row_number() OVER win",
          "453:     FROM t3",
          "454:     WINDOW win AS (",
          "455:       ORDER BY c, b, a",
          "456:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE CURRENT ROW",
          "457:     )",
          "458: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "460: do_execsql_test 2.2.2 {",
          "461:   SELECT nth_value(c, 14) OVER win",
          "462:     FROM t3",
          "463:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE CURRENT ROW )",
          "464: } {660   660   660   660   660   660   660   660   660   660   660   660   660   660   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938}",
          "466: do_execsql_test 2.3.1 {",
          "467:   SELECT row_number() OVER win",
          "468:     FROM t3",
          "469:     WINDOW win AS (",
          "470:       ORDER BY c, b, a",
          "471:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE GROUP",
          "472:     )",
          "473: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "475: do_execsql_test 2.3.2 {",
          "476:   SELECT nth_value(c, 14) OVER win",
          "477:     FROM t3",
          "478:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE GROUP )",
          "479: } {{}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}}",
          "481: do_execsql_test 2.4.1 {",
          "482:   SELECT row_number() OVER win",
          "483:     FROM t3",
          "484:     WINDOW win AS (",
          "485:       ORDER BY c, b, a",
          "486:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE TIES",
          "487:     )",
          "488: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "490: do_execsql_test 2.4.2 {",
          "491:   SELECT nth_value(c, 14) OVER win",
          "492:     FROM t3",
          "493:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE TIES )",
          "494: } {{}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}}",
          "498: do_execsql_test 3.0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "443:       (15, 30), (20, 40), (22,80), (30, 90);",
          "444: } {}",
          "447:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "448: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "451:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "452: } {5 {}   10 10   13 10   13 10   15 30   20 102   22 82   30 120}",
          "455:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "456: } {5 {}   10 52   13 30   13 30   15 {}   20 80   22 {}   30 {}}",
          "459:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "460: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "463:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "464: } {30 {}   22 90   20 90   15 120   13 120   13 120   10 70   5 102}",
          "467:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "468: } {30 {}   22 40   20 {}   15 52   13 20   13 20   10 {}   5 {}}",
          "471:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5.1 PRECEDING AND 5.3 FOLLOWING )",
          "472: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "475:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10.2 PRECEDING AND 5.4 PRECEDING )",
          "476: } {5 {}   10 {}   13 10   13 10   15 10   20 72   22 82   30 120}",
          "479:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2.6 FOLLOWING AND 3.5 FOLLOWING )",
          "480: } {5 {}   10 52   13 {}   13 {}   15 {}   20 {}   22 {}   30 {}}",
          "483:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5.7 PRECEDING AND 5.8 FOLLOWING )",
          "484: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "487:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING )",
          "488: } {30 {}   22 90   20 90   15 170   13 210   13 210   10 210   5 292}",
          "491:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING )",
          "492: } {30 232   22 112   20 112   15 30   13 30   13 30   10 10   5 {}}",
          "",
          "[Removed Lines]",
          "446: do_execsql_test 2.1 {",
          "450: do_execsql_test 2.2 {",
          "454: do_execsql_test 2.3 {",
          "458: do_execsql_test 2.4 {",
          "462: do_execsql_test 2.5 {",
          "466: do_execsql_test 2.6 {",
          "470: do_execsql_test 2.7 {",
          "474: do_execsql_test 2.8 {",
          "478: do_execsql_test 2.9 {",
          "482: do_execsql_test 2.10 {",
          "486: do_execsql_test 2.11 {",
          "490: do_execsql_test 2.12 {",
          "",
          "[Added Lines]",
          "506: do_execsql_test 3.1 {",
          "510: do_execsql_test 3.2 {",
          "514: do_execsql_test 3.3 {",
          "518: do_execsql_test 3.4 {",
          "522: do_execsql_test 3.5 {",
          "526: do_execsql_test 3.6 {",
          "530: do_execsql_test 3.7 {",
          "534: do_execsql_test 3.8 {",
          "538: do_execsql_test 3.9 {",
          "542: do_execsql_test 3.10 {",
          "546: do_execsql_test 3.11 {",
          "550: do_execsql_test 3.12 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b92b019fe3d0669504a94dd8c26b63d5dd52441e",
      "candidate_info": {
        "commit_hash": "b92b019fe3d0669504a94dd8c26b63d5dd52441e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b92b019fe3d0669504a94dd8c26b63d5dd52441e",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another buffer overrun that could occur when quering a corrupt database using an fts5vocab table.\n\nFossilOrigin-Name: b80119bd6044c0993210115732b6ae7b4b0b29c1471b0723bef24f2052c8e671",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1654:   iOff += fts5GetVarint32(&a[iOff], nNew);",
          "1656:     p->rc = FTS5_CORRUPT;",
          "1657:     return;",
          "1658:   }",
          "",
          "[Removed Lines]",
          "1655:   if( iOff+nNew>pIter->pLeaf->szLeaf || nKeep>pIter->term.n ){",
          "",
          "[Added Lines]",
          "1655:   if( iOff+nNew>pIter->pLeaf->szLeaf || nKeep>pIter->term.n || nNew==0 ){",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c": [
          "File: ext/fts5/fts5_vocab.c -> ext/fts5/fts5_vocab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:       int nTerm;",
          "486:       zTerm = sqlite3Fts5IterTerm(pCsr->pIter, &nTerm);",
          "487:       if( pCsr->nLeTerm>=0 ){",
          "488:         int nCmp = MIN(nTerm, pCsr->nLeTerm);",
          "489:         int bCmp = memcmp(pCsr->zLeTerm, zTerm, nCmp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "487:       assert( nTerm>=0 );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6641:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "6642: } {1 {database disk image is malformed}}",
          "6645: sqlite3_fts5_may_be_corrupt 0",
          "6646: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6644: #--------------------------------------------------------------------------",
          "6645: reset_db",
          "6646: do_test 49.0 {",
          "6647:   sqlite3 db {}",
          "6648:   db deserialize [decode_hexdb {",
          "6649: | size 40960 pagesize 4096 filename crash-fd87385402ecf5.db",
          "6650: | page 1 offset 0",
          "6651: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "6652: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 0a   .....@  ........",
          "6653: |     32: 00 00 00 00 00 00 00 00 00 00 00 0d 00 00 00 04   ................",
          "6654: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "6655: |     96: 00 00 00 00 0d 00 00 00 0d 0b 6e 00 0f a3 0f 4c   ..........n....L",
          "6656: |    112: 0e e1 0e 81 0e 24 0d cc 0d 72 0d 1b 0c b0 0c 50   .....$...r.....P",
          "6657: |    128: 0b f8 0b b3 0b 6e 00 00 00 00 00 00 00 00 00 00   .....n..........",
          "6658: |   2912: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 43 0d   ..............C.",
          "6659: |   2928: 06 17 11 11 08 75 74 61 62 6c 65 74 34 74 34 43   .....utablet4t4C",
          "6660: |   2944: 52 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41   REATE VIRTUAL TA",
          "6661: |   2960: 42 4c 45 20 74 34 20 55 53 49 4e 47 20 66 74 73   BLE t4 USING fts",
          "6662: |   2976: 35 76 6f 63 61 62 28 27 74 32 27 2c 20 27 72 6f   5vocab('t2', 'ro",
          "6663: |   2992: 77 27 29 43 0c 06 17 11 11 08 75 74 61 62 6c 65   w')C......utable",
          "6664: |   3008: 74 33 74 33 43 52 45 41 54 45 20 56 49 52 54 55   t3t3CREATE VIRTU",
          "6665: |   3024: 41 4c 20 54 41 42 4c 45 20 74 33 20 55 53 49 4e   AL TABLE t3 USIN",
          "6666: |   3040: 47 20 66 74 73 35 76 6f 63 61 62 28 27 74 31 27   G fts5vocab('t1'",
          "6667: |   3056: 2c 20 27 72 6f 77 27 29 56 0b 06 17 1f 1f 01 7d   , 'row')V.......",
          "6668: |   3072: 74 61 62 6c 65 74 32 5f 63 6f 6e 66 69 67 74 32   tablet2_configt2",
          "6669: |   3088: 5f 63 6f 6e 66 69 67 0a 43 52 45 41 54 45 20 54   _config.CREATE T",
          "6670: |   3104: 41 42 4c 45 20 27 74 32 5f 63 6f 6e 66 69 67 27   ABLE 't2_config'",
          "6671: |   3120: 28 6b 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   (k PRIMARY KEY,",
          "6672: |   3136: 76 29 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44   v) WITHOUT ROWID",
          "6673: |   3152: 5e 0a 07 17 21 21 01 81 07 74 61 62 6c 65 74 32   ^...!!...tablet2",
          "6674: |   3168: 5f 63 6f 6e 74 65 6e 74 74 32 5f 63 6f 6e 74 65   _contentt2_conte",
          "6675: |   3184: 6e 74 09 43 52 45 41 54 45 20 54 41 42 4c 45 20   nt.CREATE TABLE",
          "6676: |   3200: 27 74 32 5f 63 6f 6e 74 65 6e 74 27 28 69 64 20   't2_content'(id",
          "6677: |   3216: 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59 20   INTEGER PRIMARY",
          "6678: |   3232: 4b 45 59 2c 20 63 30 2c 20 63 31 2c 20 63 32 29   KEY, c0, c1, c2)",
          "6679: |   3248: 69 09 07 17 19 19 01 81 2d 74 61 62 6c 65 74 32   i.......-tablet2",
          "6680: |   3264: 5f 69 64 78 74 32 5f 69 64 78 08 43 52 45 41 54   _idxt2_idx.CREAT",
          "6681: |   3280: 45 20 54 41 42 4c 45 20 27 74 32 5f 69 64 78 27   E TABLE 't2_idx'",
          "6682: |   3296: 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20 70 67   (segid, term, pg",
          "6683: |   3312: 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45 59 28   no, PRIMARY KEY(",
          "6684: |   3328: 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20 57 49   segid, term)) WI",
          "6685: |   3344: 54 48 4f 55 54 20 52 4f 57 49 44 55 08 07 17 1b   THOUT ROWIDU....",
          "6686: |   3360: 1b 01 81 01 74 61 62 6c 65 74 32 5f 64 61 74 61   ....tablet2_data",
          "6687: |   3376: 74 32 5f 64 61 74 61 07 43 52 45 41 54 45 20 54   t2_data.CREATE T",
          "6688: |   3392: 41 42 4c 45 20 27 74 32 5f 64 61 74 61 27 28 69   ABLE 't2_data'(i",
          "6689: |   3408: 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52   d INTEGER PRIMAR",
          "6690: |   3424: 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f   Y KEY, block BLO",
          "6691: |   3440: 42 29 58 07 07 17 11 11 08 81 1d 74 61 62 6c 65   B)X........table",
          "6692: |   3456: 74 32 74 32 43 52 45 41 54 45 20 56 49 52 54 55   t2t2CREATE VIRTU",
          "6693: |   3472: 41 4c 20 54 41 42 4c 45 20 74 32 20 55 53 49 4e   AL TABLE t2 USIN",
          "6694: |   3488: 47 20 66 74 73 35 28 27 61 27 2c 5b 62 5d 2c 22   G fts5('a',[b],.",
          "6695: |   3504: 63 22 2c 64 65 74 61 69 6c 3d 6e 6f 6e 65 2c 63   c.,detail=none,c",
          "6696: |   3520: 6f 6c 75 6d 6e 73 69 7a 65 3d 30 29 56 06 06 17   olumnsize=0)V...",
          "6697: |   3536: 1f 1f 01 7d 74 61 62 6c 65 74 31 5f 63 6f 6e 66   ....tablet1_conf",
          "6698: |   3552: 69 67 74 31 5f 63 6f 6e 66 69 67 06 43 52 45 41   igt1_config.CREA",
          "6699: |   3568: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f 6e   TE TABLE 't1_con",
          "6700: |   3584: 66 69 67 27 28 6b 20 50 52 49 4d 41 52 59 20 4b   fig'(k PRIMARY K",
          "6701: |   3600: 45 59 2c 20 76 29 20 57 49 54 48 4f 55 54 20 52   EY, v) WITHOUT R",
          "6702: |   3616: 4f 57 49 44 5b 05 07 17 21 21 01 81 01 74 61 62   OWID[...!!...tab",
          "6703: |   3632: 6c 65 74 31 5f 64 6f 63 73 69 7a 65 74 31 5f 64   let1_docsizet1_d",
          "6704: |   3648: 6f 63 73 69 7a 65 05 43 52 45 41 54 45 20 54 41   ocsize.CREATE TA",
          "6705: |   3664: 42 4c 45 20 27 74 31 5f 64 6f 63 73 69 7a 65 27   BLE 't1_docsize'",
          "6706: |   3680: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "6707: |   3696: 41 52 59 20 4b 45 59 2c 20 73 7a 20 42 4c 4f 42   ARY KEY, sz BLOB",
          "6708: |   3712: 29 5e 04 07 17 21 21 01 81 07 74 61 62 6c 65 74   )^...!!...tablet",
          "6709: |   3728: 31 5f 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74   1_contentt1_cont",
          "6710: |   3744: 65 6e 74 04 43 52 45 41 54 45 20 54 41 42 4c 45   ent.CREATE TABLE",
          "6711: |   3760: 20 27 74 31 5f 63 6f 6e 74 65 6e 74 27 28 69 64    't1_content'(id",
          "6712: |   3776: 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59    INTEGER PRIMARY",
          "6713: |   3792: 20 4b 45 59 2c 20 63 30 2c 20 63 31 2c 20 63 32    KEY, c0, c1, c2",
          "6714: |   3808: 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65 74   )i.......-tablet",
          "6715: |   3824: 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45 41   1_idxt1_idx.CREA",
          "6716: |   3840: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64 78   TE TABLE 't1_idx",
          "6717: |   3856: 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20 70   '(segid, term, p",
          "6718: |   3872: 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45 59   gno, PRIMARY KEY",
          "6719: |   3888: 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20 57   (segid, term)) W",
          "6720: |   3904: 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07 17   ITHOUT ROWIDU...",
          "6721: |   3920: 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61 74   .....tablet1_dat",
          "6722: |   3936: 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45 20   at1_data.CREATE",
          "6723: |   3952: 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27 28   TABLE 't1_data'(",
          "6724: |   3968: 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41   id INTEGER PRIMA",
          "6725: |   3984: 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c   RY KEY, block BL",
          "6726: |   4000: 4f 42 29 5b 01 07 17 11 11 08 81 23 74 61 62 6c   OB)[.......#tabl",
          "6727: |   4016: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "6728: |   4032: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "6729: |   4048: 4e 47 20 66 74 73 35 28 61 2c 62 20 75 6e 69 6e   NG fts5(a,b unin",
          "6730: |   4064: 64 65 78 65 64 2c 63 2c 74 6f 6b 65 6e 69 7a 65   dexed,c,tokenize",
          "6731: |   4080: 3d 22 70 6f 72 74 65 72 20 61 73 63 69 69 22 29   =.porter ascii.)",
          "6732: | page 2 offset 4096",
          "6733: |      0: 0d 0f 68 00 05 0f 13 00 0f e6 0f 13 0f a8 0f 7c   ..h............|",
          "6734: |     16: 0f 2a 00 00 00 00 00 00 00 00 00 00 00 00 00 00   .*..............",
          "6735: |   3856: 00 00 00 15 0a 03 00 30 00 00 00 00 01 03 03 00   .......0........",
          "6736: |   3872: 03 01 01 01 02 01 01 03 01 01 37 8c 80 80 80 80   ..........7.....",
          "6737: |   3888: 01 03 00 74 00 20 68 20 69 0d 00 00 00 03 0f e8   ...t. h i.......",
          "6738: |   3904: 00 0f f8 0f f0 0f e8 00 00 00 00 00 00 00 00 00   ................",
          "6739: | page 5 offset 16384",
          "6740: |   4064: 00 00 00 00 00 00 00 00 06 03 03 00 12 03 00 00   ................",
          "6741: |   4080: 60 20 30 d6 20 30 00 30 60 10 30 01 20 30 00 30   ` 0. 0.0`.0. 0.0",
          "6742: | page 6 offset 20480",
          "6743: |      0: a0 00 00 00 10 ff 40 00 ff 00 00 00 00 00 00 00   ......@.........",
          "6744: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "6745: | page 7 offset 24576",
          "6746: |      0: 0d 00 00 00 03 0f 9e 00 0f e6 0f ef 0f 9e 00 00   ................",
          "6747: |   3984: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 84   ..............A.",
          "6748: |   4000: 80 80 80 80 01 04 00 81 06 00 00 00 34 02 30 61   ............4.0a",
          "6749: |   4016: 01 01 00 00 00 00 00 00 00 00 00 11 87 89 06 26   ...............&",
          "6750: |   4032: 01 64 01 01 01 65 01 01 01 66 01 01 01 67 01 01   .d...e...f...g..",
          "6751: |   4048: 01 01 01 68 01 01 01 01 01 69 01 01 01 04 06 06   ...h.....i......",
          "6752: |   4064: 06 04 44 00 06 06 07 01 03 00 14 03 09 09 09 0f   ..D.............",
          "6753: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "6754: | page 8 offset 28672",
          "6755: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "6756: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "6757: | page 9 offset 32768",
          "6758: |      0: 0d 00 00 00 9d 0f be 00 0f ea 0f d4 0f be 00 00   ................",
          "6759: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 14 03   ................",
          "6760: |   4032: 05 00 17 17 17 61 20 62 20 63 67 20 68 20 69 67   .....a b cg h ig",
          "6761: |   4048: 20 68 20 69 14 02 05 00 17 17 17 67 20 68 20 69    h i.......g h i",
          "6762: |   4064: 61 20 62 20 63 67 20 68 20 69 14 01 05 00 17 17   a b cg h i......",
          "6763: |   4080: 17 61 20 62 20 63 64 20 65 20 66 67 20 68 20 69   .a b cd e fg h i",
          "6764: | page 10 offset 36864",
          "6765: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "6766: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "6767: | end crash-fd87385402ecf5.db",
          "6768: }]} {}",
          "6770: do_catchsql_test 49.1 {",
          "6771:   SELECT term FROM t4 WHERE term LIKE 'oase';",
          "6772: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1bb17c863a269ab8b28df94b9fdaac3ee70777ccd0a30300131bf67df6722052",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83a1dafb03af90f40c75e4839c81cf74b5cbfbc0",
      "candidate_info": {
        "commit_hash": "83a1dafb03af90f40c75e4839c81cf74b5cbfbc0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83a1dafb03af90f40c75e4839c81cf74b5cbfbc0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbemem.c"
        ],
        "message": "When values have real affinity and are converted into strings for CHECK constraints or index expressions, do the conversions into a real-number format even if the values are stored as integers for efficiency. This appears to fix ticket [ae0f637bddc5290b446].\n\nFossilOrigin-Name: 5997d075665faca6b70fa647e877ebc84c473b32887b96235865d59ce80247f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a77cd85b1a8b86e71b511f05f8c67faa046d24a48684139d2f64e51249203411",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:     printf(p->flags & MEM_Zero ? \" NULL-nochng\" : \" NULL\");",
          "515:   }else if( (p->flags & (MEM_Int|MEM_Str))==(MEM_Int|MEM_Str) ){",
          "516:     printf(\" si:%lld\", p->u.i);",
          "517:   }else if( p->flags & MEM_Int ){",
          "518:     printf(\" i:%lld\", p->u.i);",
          "519: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517:   }else if( (p->flags & (MEM_Int|MEM_IntReal))==(MEM_Int|MEM_IntReal) ){",
          "518:     printf(\" ir:%lld\", p->u.i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2776:   assert( pOp->p2>0 );",
          "2777:   assert( zAffinity[pOp->p2]==0 );",
          "2778:   pIn1 = &aMem[pOp->p1];",
          "2780:     assert( pIn1 <= &p->aMem[(p->nMem+1 - p->nCursor)] );",
          "2781:     assert( memIsValid(pIn1) );",
          "2783:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "2784:     pIn1++;",
          "2786:   break;",
          "2787: }",
          "",
          "[Removed Lines]",
          "2779:   do{",
          "2782:     applyAffinity(pIn1, *(zAffinity++), encoding);",
          "2785:   }while( zAffinity[0] );",
          "",
          "[Added Lines]",
          "2781:   while( 1 /*edit-by-break*/ ){",
          "2784:     applyAffinity(pIn1, zAffinity[0], encoding);",
          "2785:     if( zAffinity[0]==SQLITE_AFF_REAL && (pIn1->flags & MEM_Int)!=0 ){",
          "2788:       pIn1->flags |= MEM_IntReal;",
          "2789:     }",
          "2791:     zAffinity++;",
          "2792:     if( zAffinity[0]==0 ) break;",
          "2794:   }",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: }",
          "93: #endif",
          "95: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: static void vdbeMemRenderNum(int sz, char *zBuf, Mem *p){",
          "100:   StrAccum acc;",
          "101:   assert( p->flags & (MEM_Int|MEM_Real) );",
          "102:   sqlite3StrAccumInit(&acc, 0, zBuf, sz, 0);",
          "103:   if( p->flags & MEM_IntReal ){",
          "104:     sqlite3_str_appendf(&acc, \"%!.15g\", (double)p->u.i);",
          "105:   }else if( p->flags & MEM_Int ){",
          "106:     sqlite3_str_appendf(&acc, \"%lld\", p->u.i);",
          "107:   }else{",
          "108:     sqlite3_str_appendf(&acc, \"%!.15g\", p->u.r);",
          "109:   }",
          "110:   assert( acc.zText==zBuf && acc.mxAlloc<=0 );",
          "112: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:   int i, j, incr;",
          "119:   if( (p->flags & MEM_Str)==0 ) return 1;",
          "120:   if( (p->flags & (MEM_Int|MEM_Real))==0 ) return 1;",
          "126:   z = p->z;",
          "127:   i = j = 0;",
          "128:   incr = 1;",
          "",
          "[Removed Lines]",
          "121:   if( p->flags & MEM_Int ){",
          "122:     sqlite3_snprintf(sizeof(zBuf),zBuf,\"%lld\",p->u.i);",
          "123:   }else{",
          "124:     sqlite3_snprintf(sizeof(zBuf),zBuf,\"%!.15g\",p->u.r);",
          "125:   }",
          "",
          "[Added Lines]",
          "140:   vdbeMemRenderNum(sizeof(zBuf), zBuf, p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:   }",
          "249:   assert( (pMem->flags & MEM_Dyn)==0 );",
          "250:   pMem->z = pMem->zMalloc;",
          "252:   return SQLITE_OK;",
          "253: }",
          "",
          "[Removed Lines]",
          "251:   pMem->flags &= (MEM_Null|MEM_Int|MEM_Real);",
          "",
          "[Added Lines]",
          "266:   pMem->flags &= (MEM_Null|MEM_Int|MEM_Real|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "351: int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){",
          "353:   const int nByte = 32;",
          "355:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "359:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "360:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "",
          "[Removed Lines]",
          "352:   int fg = pMem->flags;",
          "356:   assert( !(fg&MEM_Zero) );",
          "357:   assert( !(fg&(MEM_Str|MEM_Blob)) );",
          "358:   assert( fg&(MEM_Int|MEM_Real) );",
          "",
          "[Added Lines]",
          "370:   assert( !(pMem->flags&MEM_Zero) );",
          "371:   assert( !(pMem->flags&(MEM_Str|MEM_Blob)) );",
          "372:   assert( pMem->flags&(MEM_Int|MEM_Real) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "365:     return SQLITE_NOMEM_BKPT;",
          "366:   }",
          "380:   assert( pMem->z!=0 );",
          "381:   pMem->n = sqlite3Strlen30NN(pMem->z);",
          "382:   pMem->enc = SQLITE_UTF8;",
          "383:   pMem->flags |= MEM_Str|MEM_Term;",
          "385:   sqlite3VdbeChangeEncoding(pMem, enc);",
          "386:   return SQLITE_OK;",
          "387: }",
          "",
          "[Removed Lines]",
          "374:   if( fg & MEM_Int ){",
          "375:     sqlite3_snprintf(nByte, pMem->z, \"%lld\", pMem->u.i);",
          "376:   }else{",
          "377:     assert( fg & MEM_Real );",
          "378:     sqlite3_snprintf(nByte, pMem->z, \"%!.15g\", pMem->u.r);",
          "379:   }",
          "384:   if( bForce ) pMem->flags &= ~(MEM_Int|MEM_Real);",
          "",
          "[Added Lines]",
          "382:   vdbeMemRenderNum(nByte, pMem->z, pMem);",
          "387:   if( bForce ) pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "741:       pMem->flags |= (pMem->flags&MEM_Blob)>>3;",
          "742:       sqlite3ValueApplyAffinity(pMem, SQLITE_AFF_TEXT, encoding);",
          "743:       assert( pMem->flags & MEM_Str || pMem->db->mallocFailed );",
          "745:       break;",
          "746:     }",
          "747:   }",
          "",
          "[Removed Lines]",
          "744:       pMem->flags &= ~(MEM_Int|MEM_Real|MEM_Blob|MEM_Zero);",
          "",
          "[Added Lines]",
          "747:       pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal|MEM_Blob|MEM_Zero);",
          "",
          "---------------"
        ]
      }
    }
  ]
}