{
  "cve_id": "CVE-2020-15503",
  "cve_desc": "LibRaw before 0.20-RC1 lacks a thumbnail size range check. This affects decoders/unpack_thumb.cpp, postprocessing/mem_image.cpp, and utils/thumb_utils.cpp. For example, malloc(sizeof(libraw_processed_image_t)+T.tlength) occurs without validating T.tlength.",
  "repo": "LibRaw/LibRaw",
  "patch_hash": "20ad21c0d87ca80217aee47533d91e633ce1864d",
  "patch_info": {
    "commit_hash": "20ad21c0d87ca80217aee47533d91e633ce1864d",
    "repo": "LibRaw/LibRaw",
    "commit_url": "https://github.com/LibRaw/LibRaw/commit/20ad21c0d87ca80217aee47533d91e633ce1864d",
    "files": [
      "libraw/libraw_const.h",
      "src/decoders/unpack_thumb.cpp",
      "src/postprocessing/mem_image.cpp",
      "src/utils/thumb_utils.cpp"
    ],
    "message": "Thumbnail size range check",
    "before_after_code_files": [
      "libraw/libraw_const.h||libraw/libraw_const.h",
      "src/decoders/unpack_thumb.cpp||src/decoders/unpack_thumb.cpp",
      "src/postprocessing/mem_image.cpp||src/postprocessing/mem_image.cpp",
      "src/utils/thumb_utils.cpp||src/utils/thumb_utils.cpp"
    ]
  },
  "patch_diff": {
    "libraw/libraw_const.h||libraw/libraw_const.h": [
      "File: libraw/libraw_const.h -> libraw/libraw_const.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: #define LIBRAW_DEFAULT_ADJUST_MAXIMUM_THRESHOLD 0.75",
      "21: #define LIBRAW_DEFAULT_AUTO_BRIGHTNESS_THRESHOLD 0.01",
      "23: #define LIBRAW_MAX_ALLOC_MB_DEFAULT 2048L",
      "26: #ifndef LIBRAW_NO_IOSPACE_CHECK",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: #ifndef LIBRAW_MAX_ALLOC_MB_DEFAULT",
      "25: #endif",
      "28: #ifndef LIBRAW_MAX_THUMBNAIL_MB",
      "29: #define LIBRAW_MAX_THUMBNAIL_MB 512L",
      "30: #endif",
      "",
      "---------------"
    ],
    "src/decoders/unpack_thumb.cpp||src/decoders/unpack_thumb.cpp": [
      "File: src/decoders/unpack_thumb.cpp -> src/decoders/unpack_thumb.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:   CHECK_ORDER_LOW(LIBRAW_PROGRESS_IDENTIFY);",
      "34:   CHECK_ORDER_BIT(LIBRAW_PROGRESS_THUMB_LOAD);",
      "36:   try",
      "37:   {",
      "38:     if (!libraw_internal_data.internal_data.input)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: #define THUMB_SIZE_CHECKT(A) \\",
      "37:   do { \\",
      "38:     if (INT64(A) > 1024ULL * 1024ULL * LIBRAW_MAX_THUMBNAIL_MB) throw LIBRAW_EXCEPTION_IO_CORRUPT; \\",
      "39:     if (INT64(A) > 0 &&  INT64(A) < 64ULL)        throw LIBRAW_EXCEPTION_IO_CORRUPT; \\",
      "40:   } while (0)",
      "42: #define THUMB_SIZE_CHECKTNZ(A) \\",
      "43:   do { \\",
      "44:     if (INT64(A) > 1024ULL * 1024ULL * LIBRAW_MAX_THUMBNAIL_MB) throw LIBRAW_EXCEPTION_IO_CORRUPT; \\",
      "45:     if (INT64(A) < 64ULL)        throw LIBRAW_EXCEPTION_IO_CORRUPT; \\",
      "46:   } while (0)",
      "49: #define THUMB_SIZE_CHECKWH(W,H) \\",
      "50:   do { \\",
      "51:     if (INT64(W)*INT64(H) > 1024ULL * 1024ULL * LIBRAW_MAX_THUMBNAIL_MB) throw LIBRAW_EXCEPTION_IO_CORRUPT; \\",
      "52:     if (INT64(W)*INT64(H) < 64ULL)        throw LIBRAW_EXCEPTION_IO_CORRUPT; \\",
      "53:   } while (0)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:         if (INT64(ID.toffset) + tsize > ID.input->size() + THUMB_READ_BEYOND)",
      "67:           throw LIBRAW_EXCEPTION_IO_EOF;",
      "68:       }",
      "69: #else",
      "70:  if (0) {}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:         THUMB_SIZE_CHECKT(tsize);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "82:       ID.input->seek(ID.toffset, SEEK_SET);",
      "83:       if (write_thumb == &LibRaw::jpeg_thumb)",
      "84:       {",
      "85:         if (T.thumb)",
      "86:           free(T.thumb);",
      "87:         T.thumb = (char *)malloc(T.tlength);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:         THUMB_SIZE_CHECKTNZ(T.tlength);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "132:         if (colors != 1 && colors != 3)",
      "133:           return LIBRAW_UNSUPPORTED_THUMBNAIL;",
      "135:         int tlength = T.twidth * T.theight;",
      "136:         if (T.thumb)",
      "137:           free(T.thumb);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "157:         THUMB_SIZE_CHECKWH(T.twidth, T.theight);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "172:       else if (write_thumb == &LibRaw::rollei_thumb)",
      "173:       {",
      "174:         int i;",
      "175:         int tlength = T.twidth * T.theight;",
      "176:         if (T.thumb)",
      "177:           free(T.thumb);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "199:         THUMB_SIZE_CHECKWH(T.twidth, T.theight);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "198:         if (t_bytesps > 1)",
      "199:           throw LIBRAW_EXCEPTION_IO_CORRUPT; // 8-bit thumb, but parsed for more",
      "201:         int t_length = T.twidth * T.theight * t_colors;",
      "203:         if (T.tlength &&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226:         THUMB_SIZE_CHECKWH(T.twidth, T.theight);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "219:                 T.tcolors = 1;",
      "220:             }",
      "221:             T.tlength = total_size;",
      "222:             if (T.thumb)",
      "223:               free(T.thumb);",
      "224:             T.thumb = (char *)malloc(T.tlength);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "248:             THUMB_SIZE_CHECKTNZ(T.tlength);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "254:         if (T.thumb)",
      "255:           free(T.thumb);",
      "257:         T.thumb = (char *)malloc(T.tlength);",
      "258:         if (!T.tcolors)",
      "259:           T.tcolors = t_colors;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "284:         THUMB_SIZE_CHECKTNZ(T.tlength);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "278:         int i_length = T.twidth * T.theight * t_colors * 2;",
      "279:         if (!T.tlength)",
      "280:           T.tlength = o_length;",
      "281:         ushort *t_thumb = (ushort *)calloc(i_length, 1);",
      "282:         ID.input->read(t_thumb, 1, i_length);",
      "283:         if ((libraw_internal_data.unpacker_data.order == 0x4949) ==",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "310:         THUMB_SIZE_CHECKTNZ(o_length);",
      "311:         THUMB_SIZE_CHECKTNZ(i_length);",
      "312:         THUMB_SIZE_CHECKTNZ(T.tlength);",
      "",
      "---------------"
    ],
    "src/postprocessing/mem_image.cpp||src/postprocessing/mem_image.cpp": [
      "File: src/postprocessing/mem_image.cpp -> src/postprocessing/mem_image.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:     return NULL;",
      "34:   }",
      "36:   if (T.tformat == LIBRAW_THUMBNAIL_BITMAP)",
      "37:   {",
      "38:     libraw_processed_image_t *ret = (libraw_processed_image_t *)::malloc(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36:   if (T.tlength < 64u)",
      "37:   {",
      "38:       if (errcode)",
      "40:       return NULL;",
      "41:   }",
      "43:   if (INT64(T.tlength) > 1024ULL * 1024ULL * LIBRAW_MAX_THUMBNAIL_MB)",
      "44:   {",
      "45:       if (errcode)",
      "47:       return NULL;",
      "48:   }",
      "",
      "---------------"
    ],
    "src/utils/thumb_utils.cpp||src/utils/thumb_utils.cpp": [
      "File: src/utils/thumb_utils.cpp -> src/utils/thumb_utils.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:   if (ID.toffset + est_datasize > ID.input->size() + THUMB_READ_BEYOND)",
      "26:     throw LIBRAW_EXCEPTION_IO_EOF;",
      "29:   ushort s_height = S.height, s_width = S.width, s_iwidth = S.iwidth,",
      "30:          s_iheight = S.iheight;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28:   if(INT64(T.theight) * INT64(T.twidth) > 1024ULL * 1024ULL * LIBRAW_MAX_THUMBNAIL_MB)",
      "29:       throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "31:   if (INT64(T.theight) * INT64(T.twidth) < 64ULL)",
      "32:       throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eda6012c1a266805b3f8acf700f2d4165629c210",
      "candidate_info": {
        "commit_hash": "eda6012c1a266805b3f8acf700f2d4165629c210",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/eda6012c1a266805b3f8acf700f2d4165629c210",
        "files": [
          "src/decoders/unpack_thumb.cpp"
        ],
        "message": "OOB Write in unpack_thumb",
        "before_after_code_files": [
          "src/decoders/unpack_thumb.cpp||src/decoders/unpack_thumb.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/decoders/unpack_thumb.cpp||src/decoders/unpack_thumb.cpp"
          ],
          "candidate": [
            "src/decoders/unpack_thumb.cpp||src/decoders/unpack_thumb.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/decoders/unpack_thumb.cpp||src/decoders/unpack_thumb.cpp": [
          "File: src/decoders/unpack_thumb.cpp -> src/decoders/unpack_thumb.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:         T.thumb = (char *)calloc(colors, tlength);",
          "163:         merror(T.thumb, \"layer_thumb()\");",
          "164:         unsigned char *tbuf = (unsigned char *)calloc(colors, tlength);",
          "167:         if (libraw_internal_data.unpacker_data.thumb_misc >> 8 &&",
          "168:             colors == 3) // GRB order",
          "169:           for (int i = 0; i < tlength; i++)",
          "",
          "[Removed Lines]",
          "165:         merror(tbuf, \"layer_thumb()\");",
          "166:         ID.input->read(tbuf, colors, T.tlength);",
          "",
          "[Added Lines]",
          "165:         merror(tbuf, \"layer_thumb()\");",
          "167:         ID.input->read(tbuf, colors, tlength);",
          "",
          "---------------"
        ]
      }
    }
  ]
}