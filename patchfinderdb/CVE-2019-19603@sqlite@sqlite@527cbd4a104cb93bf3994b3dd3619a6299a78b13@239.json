{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "efa363b84c43d63c706e7997085a2e5977aac64d",
      "candidate_info": {
        "commit_hash": "efa363b84c43d63c706e7997085a2e5977aac64d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/efa363b84c43d63c706e7997085a2e5977aac64d",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improve the performance of the .recover command.\n\nFossilOrigin-Name: a50768314d10d743a0cc013b434b516f0763e0a6c5b79655d8fefde7de53e869",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: static int dbdataDisconnect(sqlite3_vtab *pVtab){",
          "171:   return SQLITE_OK;",
          "172: }",
          "",
          "[Removed Lines]",
          "170:   sqlite3_free(pVtab);",
          "",
          "[Added Lines]",
          "171:   DbdataTable *pTab = (DbdataTable*)pVtab;",
          "172:   if( pTab ){",
          "173:     sqlite3_finalize(pTab->pStmt);",
          "174:     sqlite3_free(pVtab);",
          "175:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:   DbdataTable *pTab = (DbdataTable*)tab;",
          "190:   int i;",
          "191:   int iSchema = -1;",
          "192:   int iPgno = -1;",
          "193:   int colSchema = (pTab->bPtr ? DBPTR_COLUMN_SCHEMA : DBDATA_COLUMN_SCHEMA);",
          "197:     if( p->op==SQLITE_INDEX_CONSTRAINT_EQ ){",
          "198:       if( p->iColumn==colSchema ){",
          "199:         if( p->usable==0 ) return SQLITE_CONSTRAINT;",
          "",
          "[Removed Lines]",
          "188: static int dbdataBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){",
          "195:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "196:     struct sqlite3_index_constraint *p = &pIdxInfo->aConstraint[i];",
          "",
          "[Added Lines]",
          "193: static int dbdataBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdx){",
          "200:   for(i=0; i<pIdx->nConstraint; i++){",
          "201:     struct sqlite3_index_constraint *p = &pIdx->aConstraint[i];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:   }",
          "208:   if( iSchema>=0 ){",
          "211:   }",
          "212:   if( iPgno>=0 ){",
          "215:   }",
          "217:   return SQLITE_OK;",
          "218: }",
          "",
          "[Removed Lines]",
          "209:     pIdxInfo->aConstraintUsage[iSchema].argvIndex = 1;",
          "210:     pIdxInfo->aConstraintUsage[iSchema].omit = 1;",
          "213:     pIdxInfo->aConstraintUsage[iPgno].argvIndex = 1 + (iSchema>=0);",
          "214:     pIdxInfo->aConstraintUsage[iPgno].omit = 1;",
          "216:   pIdxInfo->idxNum = (iSchema>=0 ? 0x01 : 0x00) | (iPgno>=0 ? 0x02 : 0x00);",
          "",
          "[Added Lines]",
          "214:     pIdx->aConstraintUsage[iSchema].argvIndex = 1;",
          "215:     pIdx->aConstraintUsage[iSchema].omit = 1;",
          "218:     pIdx->aConstraintUsage[iPgno].argvIndex = 1 + (iSchema>=0);",
          "219:     pIdx->aConstraintUsage[iPgno].omit = 1;",
          "220:     pIdx->estimatedCost = 100;",
          "221:     pIdx->estimatedRows =  50;",
          "223:     if( pTab->bPtr==0 && pIdx->nOrderBy && pIdx->aOrderBy[0].desc==0 ){",
          "224:       int iCol = pIdx->aOrderBy[0].iColumn;",
          "225:       if( pIdx->nOrderBy==1 ){",
          "226:         pIdx->orderByConsumed = (iCol==0 || iCol==1);",
          "227:       }else if( pIdx->nOrderBy==2 && pIdx->aOrderBy[1].desc==0 && iCol==0 ){",
          "228:         pIdx->orderByConsumed = (pIdx->aOrderBy[1].iColumn==1);",
          "229:       }",
          "230:     }",
          "232:   }else{",
          "233:     pIdx->estimatedCost = 100000000;",
          "234:     pIdx->estimatedRows = 1000000000;",
          "236:   pIdx->idxNum = (iSchema>=0 ? 0x01 : 0x00) | (iPgno>=0 ? 0x02 : 0x00);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236: }",
          "238: static void dbdataResetCursor(DbdataCursor *pCsr){",
          "240:   pCsr->pStmt = 0;",
          "241:   pCsr->iPgno = 1;",
          "242:   pCsr->iCell = 0;",
          "",
          "[Removed Lines]",
          "239:   sqlite3_finalize(pCsr->pStmt);",
          "",
          "[Added Lines]",
          "259:   DbdataTable *pTab = (DbdataTable*)(pCsr->base.pVtab);",
          "260:   if( pTab->pStmt==0 ){",
          "261:     pTab->pStmt = pCsr->pStmt;",
          "262:   }else{",
          "263:     sqlite3_finalize(pCsr->pStmt);",
          "264:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "558: ){",
          "559:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;",
          "560:   DbdataTable *pTab = (DbdataTable*)pCursor->pVtab;",
          "562:   const char *zSchema = \"main\";",
          "564:   dbdataResetCursor(pCsr);",
          "",
          "[Removed Lines]",
          "561:   int rc;",
          "",
          "[Added Lines]",
          "586:   int rc = SQLITE_OK;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "571:     pCsr->bOnePage = 1;",
          "572:   }",
          "578:   if( rc==SQLITE_OK ){",
          "579:     rc = sqlite3_bind_text(pCsr->pStmt, 1, zSchema, -1, SQLITE_TRANSIENT);",
          "580:   }else{",
          "",
          "[Removed Lines]",
          "574:   rc = sqlite3_prepare_v2(pTab->db,",
          "575:       \"SELECT data FROM sqlite_dbpage(?) WHERE pgno=?\", -1,",
          "576:       &pCsr->pStmt, 0",
          "577:   );",
          "",
          "[Added Lines]",
          "599:   if( pTab->pStmt ){",
          "600:     pCsr->pStmt = pTab->pStmt;",
          "601:     pTab->pStmt = 0;",
          "602:   }else{",
          "603:     rc = sqlite3_prepare_v2(pTab->db,",
          "604:         \"SELECT data FROM sqlite_dbpage(?) WHERE pgno=?\", -1,",
          "605:         &pCsr->pStmt, 0",
          "606:     );",
          "607:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f95f0f02ab6c6cf45f25b613c7ab57f68249689d0a9eddf4c9518ddf0edad365",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6460:     shellFinalize(&rc, pStmt);",
          "6461:   }",
          "6464:   shellPrepare(pState->db, &rc,",
          "6465:       \"SELECT root, intkey, max(maxlen) FROM recovery.map\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6465:   shellPrepare(pState->db, &rc,",
          "6466:       \"SELECT pgno FROM recovery.map WHERE root=?\", &pPages",
          "6467:   );",
          "6468:   shellPrepare(pState->db, &rc,",
          "6469:       \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)), ', ')\"",
          "6470:       \"FROM sqlite_dbdata WHERE pgno = ? AND field != ?\"",
          "6471:       \"GROUP BY cell\", &pCells",
          "6472:   );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6476:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol);",
          "6477:     if( pTab ){",
          "6479:       if( 0==sqlite3_stricmp(pTab->zName, \"sqlite_sequence\") ){",
          "6480:         raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6481:       }",
          "6496:       }",
          "6498:     }",
          "6499:     recoverFreeTable(pTab);",
          "6500:   }",
          "6501:   shellFinalize(&rc, pLoop);",
          "6504:   if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "6478:       sqlite3_stmt *pData = 0;",
          "6482:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6483:         \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)),', ')\"",
          "6484:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "6485:         \"  SELECT pgno FROM recovery.map WHERE root=%d\"",
          "6486:         \")\"",
          "6487:         \" AND field!=%d \"",
          "6488:         \"GROUP BY pgno, cell;\", iRoot, pTab->iPk",
          "6489:       );",
          "6490:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pData) ){",
          "6491:         int iMax = sqlite3_column_int(pData, 0);",
          "6492:         const char *zVal = (const char*)sqlite3_column_text(pData, 1);",
          "6493:         raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6494:             pTab->zQuoted, pTab->azlCol[iMax>0?iMax:0], zVal",
          "6495:         );",
          "6497:       shellFinalize(&rc, pData);",
          "",
          "[Added Lines]",
          "6492:       sqlite3_bind_int(pPages, 1, iRoot);",
          "6493:       sqlite3_bind_int(pCells, 2, pTab->iPk);",
          "6494:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPages) ){",
          "6495:         sqlite3_bind_int(pCells, 1, sqlite3_column_int(pPages, 0));",
          "6496:         while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pCells) ){",
          "6497:           int iMax = sqlite3_column_int(pCells, 0);",
          "6498:           const char *zVal = (const char*)sqlite3_column_text(pCells, 1);",
          "6499:           raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6500:               pTab->zQuoted, pTab->azlCol[iMax>0?iMax:0], zVal",
          "6501:           );",
          "6502:         }",
          "6503:         shellReset(&rc, pCells);",
          "6505:       shellReset(&rc, pPages);",
          "6510:   shellFinalize(&rc, pPages);",
          "6511:   shellFinalize(&rc, pCells);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e639128cb064169e63b0c490bcaf7db05d4a49ed",
      "candidate_info": {
        "commit_hash": "e639128cb064169e63b0c490bcaf7db05d4a49ed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e639128cb064169e63b0c490bcaf7db05d4a49ed",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest_data.tcl",
          "test/wapptest.tcl"
        ],
        "message": "Further tweaks to wapptest.tcl. Add the ability to run the extra (n)debug tests that releasetest.tcl runs.\n\nFossilOrigin-Name: ec9c4f6d8da25dcc834812c2bb24bda1017833b1c572bdbbf87f0191e1310706",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest_data.tcl||test/releasetest_data.tcl",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1956eb348170a9a873878b522f377fa7303cdb3beca41f5515b6b9da1b1f544d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:   # Set the sub-directory to use.",
          "389:   #",
          "392:   # Join option lists into strings, using space as delimiter.",
          "393:   #",
          "",
          "[Removed Lines]",
          "390:   set dir [string tolower [string map {- _ \" \" _} $name]]",
          "",
          "[Added Lines]",
          "390:   set dir [string tolower [string map {- _ \" \" _ \"(\" _ \")\" _} $name]]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # \\",
          "3: exec wapptclsh \"$0\" ${1+\"$@\"}",
          "",
          "[Removed Lines]",
          "1: #!/bin/sh",
          "",
          "[Added Lines]",
          "1: #!/bin/sh",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: set G(test)     Normal",
          "23: set G(keep)     0",
          "24: set G(msvc)     0",
          "26: set G(jobs)     3",
          "28: proc wapptest_init {} {",
          "29:   global G",
          "32:   foreach k $lSave { set A($k) $G($k) }",
          "33:   array unset G",
          "34:   foreach k $lSave { set G($k) $A($k) }",
          "",
          "[Removed Lines]",
          "25: set G(tcl)      \"\"",
          "31:   set lSave [list platform test keep msvc tcl jobs]",
          "",
          "[Added Lines]",
          "25: set G(tcl)      [::tcl::pkgconfig get libdir,install]",
          "27: set G(debug)    0",
          "32:   set lSave [list platform test keep msvc tcl jobs debug]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:   # Either \"config\", \"running\" or \"stopped\":",
          "45:   set G(state) \"config\"",
          "49:   append G(host) \" $::tcl_platform(os) $::tcl_platform(osVersion)\"",
          "50:   append G(host) \" $::tcl_platform(machine) $::tcl_platform(byteOrder)\"",
          "51: }",
          "",
          "[Removed Lines]",
          "47:   set G(host) \"(unknown host)\"",
          "48:   catch { set G(host) [exec hostname] }",
          "",
          "[Added Lines]",
          "48:   set G(hostname) \"(unknown host)\"",
          "49:   catch { set G(hostname) [exec hostname] }",
          "50:   set G(host) $G(hostname)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:   return $ret",
          "66: }",
          "68: # If the application is in \"config\" state, set the contents of the",
          "69: # ::G(test_array) global to reflect the tests that will be run. If the",
          "70: # app is in some other state (\"running\" or \"stopped\"), this command",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: proc generate_fossil_info {} {",
          "71:   global G",
          "72:   set pwd [pwd]",
          "73:   cd $G(srcdir)",
          "74:   if {[catch {exec fossil info}    r1]} return",
          "75:   if {[catch {exec fossil changes} r2]} return",
          "76:   cd $pwd",
          "78:   foreach line [split $r1 \"\\n\"] {",
          "79:     if {[regexp {^checkout: *(.*)$} $line -> co]} {",
          "80:       wapp-trim { <br> %html($co) }",
          "81:     }",
          "82:   }",
          "84:   if {[string trim $r2]!=\"\"} {",
          "85:     wapp-trim {",
          "86:       <br><span class=warning>",
          "87:       WARNING: Uncommitted changes in checkout",
          "88:       </span>",
          "89:     }",
          "90:   }",
          "91: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "102:       }",
          "104:       lappend G(test_array) [dict create config $config target $target]",
          "105:     }",
          "106:   }",
          "107: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:       set exclude [list checksymbols valgrindtest fuzzoomtest]",
          "132:       if {$G(debug) && !($target in $exclude)} {",
          "133:         set debug_idx [lsearch -glob $::Configs($config) -DSQLITE_DEBUG*]",
          "134:         set xtarget $target",
          "135:         regsub -all {fulltest[a-z]*} $xtarget test xtarget",
          "136:         if {$debug_idx<0} {",
          "137:           lappend G(test_array) [",
          "138:             dict create config $config-(Debug) target $target",
          "139:           ]",
          "140:         } else {",
          "141:           lappend G(test_array) [",
          "142:             dict create config $config-(NDebug) target $xtarget",
          "143:           ]",
          "144:         }",
          "145:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:         fileevent $fd readable [list slave_fileevent $name]",
          "244:         puts $fd [list 0 $G(msvc) 0 $G(keep)]",
          "246:         puts $fd $L",
          "247:         flush $fd",
          "248:         set G(test.$name.log) [file join [lindex $L 1] test.log]",
          "",
          "[Removed Lines]",
          "245:         set L [make_test_suite $G(msvc) \"\" $name $target $::Configs($name)]",
          "",
          "[Added Lines]",
          "287:         set wtcl \"\"",
          "288:         if {$G(tcl)!=\"\"} { set wtcl \"--with-tcl=$G(tcl)\" }",
          "290:         # If this configuration is named <name>-(Debug) or <name>-(NDebug),",
          "291:         # then add or remove the SQLITE_DEBUG option from the base",
          "292:         # configuration before running the test.",
          "293:         if {[regexp -- {(.*)-(\\(.*\\))} $name -> head tail]} {",
          "294:           set opts $::Configs($head)",
          "295:           if {$tail==\"(Debug)\"} {",
          "296:             append opts \" -DSQLITE_DEBUG=1 -DSQLITE_EXTRA_IFNULLROW=1\"",
          "297:           } else {",
          "298:             regsub { *-DSQLITE_MEMDEBUG[^ ]* *} $opts { } opts",
          "299:             regsub { *-DSQLITE_DEBUG[^ ]* *} $opts { } opts",
          "300:           }",
          "301:         } else {",
          "302:           set opts $::Configs($name)",
          "303:         }",
          "305:         set L [make_test_suite $G(msvc) $wtcl $name $target $opts]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "269:   global G",
          "270:   set_test_array",
          "273:   wapp-trim {",
          "274:     <html>",
          "275:     <head>",
          "276:       <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>",
          "277:     </head>",
          "278:     <body>",
          "279:   }",
          "291:   set host $G(host)",
          "292:   wapp-trim {",
          "296:   }",
          "298:   # Build the \"platform\" select widget.",
          "",
          "[Removed Lines]",
          "272:   # <meta http-equiv=\"refresh\" content=\"5; URL=/\">",
          "281:   # If the checkout contains uncommitted changs, put a warning at the top",
          "282:   # of the page.",
          "283:   if {[check_uncommitted]} {",
          "284:     wapp-trim {",
          "285:       <div class=warning>",
          "286:         WARNING: Uncommitted changes in checkout.",
          "287:       </div>",
          "288:     }",
          "289:   }",
          "293:       <div class=div>%string($host)</div>",
          "294:       <div class=div id=controls>",
          "295:       <form action=\"control\" method=\"post\" name=\"control\">",
          "",
          "[Added Lines]",
          "332:   set hostname $G(hostname)",
          "336:       <title> %html($hostname): wapptest.tcl </title>",
          "344:     <div class=\"border\">%string($host)",
          "345:   }",
          "346:   generate_fossil_info",
          "347:   wapp-trim {",
          "348:     </div>",
          "349:     <div class=\"border\" id=controls>",
          "350:     <form action=\"control\" method=\"post\" name=\"control\">",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "336:         </input>",
          "337:         <label> Use MSVC: </label>",
          "338:         <input id=\"control_msvc\" name=\"control_msvc\" type=checkbox value=1>",
          "339:         </input>",
          "340:   }",
          "341:   wapp-trim {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:         <label> Debug tests: </label>",
          "395:         <input id=\"control_debug\" name=\"control_debug\" type=checkbox value=1>",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "343:   }",
          "344:   wapp-trim {",
          "345:      </div>",
          "347:   }",
          "348:   wapp-page-tests",
          "",
          "[Removed Lines]",
          "346:      <div class=div2 id=tests>",
          "",
          "[Added Lines]",
          "403:      <div id=tests>",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "363: proc wapp-page-tests {} {",
          "364:   global G",
          "366:   foreach t $G(test_array) {",
          "367:     set config [dict get $t config]",
          "368:     set target [dict get $t target]",
          "",
          "[Removed Lines]",
          "365:   wapp-trim { <table> }",
          "",
          "[Added Lines]",
          "422:   wapp-trim { <table class=\"border\" width=100%> }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "392:     wapp-trim {",
          "393:       <tr class=%string($class)>",
          "398:     }",
          "399:     if {[info exists G(test.$config.log)]} {",
          "400:       set log $G(test.$config.log)",
          "",
          "[Removed Lines]",
          "394:       <td class=testfield> %html($config)",
          "395:       <td class=testfield> %html($target)",
          "396:       <td class=testfield> %html($seconds)",
          "397:       <td class=testfield>",
          "",
          "[Added Lines]",
          "451:       <td class=\"nowrap\"> %html($config)",
          "452:       <td class=\"padleft nowrap\"> %html($target)",
          "453:       <td class=\"padleft nowrap\"> %html($seconds)",
          "454:       <td class=\"padleft nowrap\">",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "407:       set errmsg $G(test.$config.errmsg)",
          "408:       wapp-trim {",
          "409:         <tr class=testfail>",
          "412:       }",
          "413:     }",
          "414:   }",
          "",
          "[Removed Lines]",
          "410:         <td class=testfield>",
          "411:         <td class=testfield colspan=3> %html($errmsg)",
          "",
          "[Added Lines]",
          "467:         <td> <td class=\"padleft\" colspan=3> %html($errmsg)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "430: #",
          "431: proc wapp-page-control {} {",
          "432:   global G",
          "434:   if {$::G(state)==\"config\"} {",
          "436:     set G(msvc) 0",
          "437:     set G(keep) 0",
          "438:   } else {",
          "439:     set lControls [list jobs]",
          "440:   }",
          "",
          "[Removed Lines]",
          "433:   catch { puts [wapp-param control_msvc] }",
          "435:     set lControls [list platform test tcl jobs keep msvc]",
          "",
          "[Added Lines]",
          "490:     set lControls [list platform test tcl jobs keep msvc debug]",
          "493:     set G(debug) 0",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "482: #",
          "483: proc wapp-page-style.css {} {",
          "484:   wapp-subst {",
          "491:     .border {",
          "492:       border: 3px groove #444444;",
          "493:       padding: 1em;",
          "",
          "[Removed Lines]",
          "485:     .div {",
          "486:       border: 3px groove #444444;",
          "487:       margin: 1em;",
          "488:       padding: 1em;",
          "489:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "495:       margin-bottom: 1em;",
          "496:     }",
          "508:     .warning {",
          "510:       color: red;",
          "512:       font-weight: bold;",
          "513:     }",
          "527:   }",
          "528: }",
          "",
          "[Removed Lines]",
          "498:     .div2 {",
          "499:       margin: 1em;",
          "500:     }",
          "502:     table {",
          "503:       padding: 1em;",
          "504:       width:100%;",
          "505:       border: 3px groove #444444;",
          "506:     }",
          "509:       text-align:center;",
          "511:       font-size: 2em;",
          "515:     .testfield {",
          "516:       padding-right: 10ex;",
          "517:       white-space: nowrap;",
          "518:     }",
          "520:     .testwait {}",
          "521:     .testrunning { color: blue }",
          "522:     .testdone { color: green }",
          "523:     .testfail { color: red }",
          "525:     .right { float: right; }",
          "",
          "[Added Lines]",
          "551:     .right { float: right; }",
          "560:     .padleft { padding-left: 5ex; }",
          "561:     .nowrap  { white-space: nowrap; }",
          "564:     .testwait    {              }",
          "565:     .testrunning { color: blue  }",
          "566:     .testdone    { color: green }",
          "567:     .testfail    { color: red   }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "540:   set tcl $::G(tcl)",
          "541:   set keep $::G(keep)",
          "542:   set msvc $::G(msvc)",
          "544:   wapp-subst {",
          "545:     var lElem = \\[\"control_platform\", \"control_test\", \"control_msvc\",",
          "547:     \\];",
          "548:     lElem.forEach(function(e) {",
          "549:       var elem = document.getElementById(e);",
          "",
          "[Removed Lines]",
          "546:         \"control_jobs\"",
          "",
          "[Added Lines]",
          "584:   set debug $::G(debug)",
          "588:         \"control_jobs\", \"control_debug\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "559:     elem = document.getElementById(\"control_msvc\");",
          "560:     elem.checked = %string($msvc);",
          "561:   }",
          "563:   if {$script != \"config.js\"} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604:     elem = document.getElementById(\"control_debug\");",
          "605:     elem.checked = %string($debug);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a7e11fb7894e286ac9f66ff93a6c8b0668e954a",
      "candidate_info": {
        "commit_hash": "8a7e11fb7894e286ac9f66ff93a6c8b0668e954a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8a7e11fb7894e286ac9f66ff93a6c8b0668e954a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/index.test"
        ],
        "message": "Avoid unwelcomed side effects on the input operands in the OP_Concat operator.  Fix for ticket [3be1295b264be2fac49b681]\n\nFossilOrigin-Name: 713caa382cf7ddef872e510a76a5fca40be1a8d8876ce2f91b632bb0810a6630",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/index.test||test/index.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 09623cc4cc82e3c123d1fd5d88b2f4b50ec5f2cc7e579a7203258bf0c246a74f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:   }",
          "196: #endif",
          "",
          "[Removed Lines]",
          "202: #define Stringify(P, enc) \\",
          "203:    if(((P)->flags&(MEM_Str|MEM_Blob))==0 && sqlite3VdbeMemStringify(P,enc,0)) \\",
          "204:      { goto no_mem; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1468:   pIn1 = &aMem[pOp->p1];",
          "1469:   pIn2 = &aMem[pOp->p2];",
          "1470:   pOut = &aMem[pOp->p3];",
          "1471:   assert( pIn1!=pOut );",
          "1473:     sqlite3VdbeMemSetNull(pOut);",
          "1474:     break;",
          "1475:   }",
          "1479:   nByte = pIn1->n + pIn2->n;",
          "1480:   if( nByte>db->aLimit[SQLITE_LIMIT_LENGTH] ){",
          "1481:     goto too_big;",
          "",
          "[Removed Lines]",
          "1466:   i64 nByte;",
          "1472:   if( (pIn1->flags | pIn2->flags) & MEM_Null ){",
          "1476:   if( ExpandBlob(pIn1) || ExpandBlob(pIn2) ) goto no_mem;",
          "1477:   Stringify(pIn1, encoding);",
          "1478:   Stringify(pIn2, encoding);",
          "",
          "[Added Lines]",
          "1465:   testcase( pIn1==pIn2 );",
          "1466:   testcase( pOut==pIn2 );",
          "1468:   flags1 = pIn1->flags;",
          "1469:   testcase( flags1 & MEM_Null );",
          "1470:   testcase( pIn2->flags & MEM_Null );",
          "1471:   if( (flags1 | pIn2->flags) & MEM_Null ){",
          "1475:   if( (flags1 & (MEM_Str|MEM_Blob))==0 ){",
          "1476:     if( sqlite3VdbeMemStringify(pIn1,encoding,0) ) goto no_mem;",
          "1477:   }else if( (flags1 & MEM_Zero)!=0 ){",
          "1478:     if( sqlite3VdbeMemExpandBlob(pIn1) ) goto no_mem;",
          "1479:   }",
          "1480:   flags2 = pIn2->flags;",
          "1481:   if( (flags2 & (MEM_Str|MEM_Blob))==0 ){",
          "1482:     if( sqlite3VdbeMemStringify(pIn2,encoding,0) ) goto no_mem;",
          "1483:   }else if( (flags2 & MEM_Zero)!=0 ){",
          "1484:     if( sqlite3VdbeMemExpandBlob(pIn2) ) goto no_mem;",
          "1485:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1486:   MemSetTypeFlag(pOut, MEM_Str);",
          "1487:   if( pOut!=pIn2 ){",
          "1488:     memcpy(pOut->z, pIn2->z, pIn2->n);",
          "1489:   }",
          "1490:   memcpy(&pOut->z[pIn2->n], pIn1->z, pIn1->n);",
          "1491:   pOut->z[nByte]=0;",
          "1492:   pOut->z[nByte+1] = 0;",
          "1493:   pOut->flags |= MEM_Term;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1496:     assert( (pIn2->flags & MEM_Dyn) == (flags2 & MEM_Dyn) );",
          "1497:     pIn2->flags = flags2;",
          "1500:   assert( (pIn1->flags & MEM_Dyn) == (flags1 & MEM_Dyn) );",
          "1501:   pIn1->flags = flags1;",
          "",
          "---------------"
        ],
        "test/index.test||test/index.test": [
          "File: test/index.test -> test/index.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:   }",
          "739: } {0 {9 5 1}}",
          "743: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "741: # 2019-05-01 ticket https://www.sqlite.org/src/info/3be1295b264be2fa",
          "742: do_execsql_test index-22.0 {",
          "743:   DROP TABLE IF EXISTS t1;",
          "744:   CREATE TABLE t1(a, b TEXT);",
          "745:   CREATE UNIQUE INDEX IF NOT EXISTS x1 ON t1(b==0);",
          "746:   CREATE INDEX IF NOT EXISTS x2 ON t1(a || 0) WHERE b;",
          "747:   INSERT INTO t1(a,b) VALUES('a',1),('a',0);",
          "748:   SELECT a, b, '|' FROM t1;",
          "749: } {a 1 | a 0 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94f0a8342106b4e1af85bf658bdf1c12ed010c73",
      "candidate_info": {
        "commit_hash": "94f0a8342106b4e1af85bf658bdf1c12ed010c73",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94f0a8342106b4e1af85bf658bdf1c12ed010c73",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/memdb.c"
        ],
        "message": "Fix the xFetch method of the \"memdb\" VFS (used by deserialize) so that it is robust against corrupt database file.\n\nFossilOrigin-Name: 2c1ef40e787a6bc355b50168527a47eb09acd30d0d88cff8336a434ad554115d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e6f7c2aced49824a38b3494b796a8ec73aa7a90b51159f670596df15ed1c5ab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   void **pp",
          "311: ){",
          "312:   MemFile *p = (MemFile *)pFile;",
          "315:   return SQLITE_OK;",
          "316: }",
          "",
          "[Removed Lines]",
          "313:   p->nMmap++;",
          "",
          "[Added Lines]",
          "313:   if( iOfst+iAmt>p->sz ){",
          "314:     assert( CORRUPT_DB );",
          "316:   }else{",
          "317:     p->nMmap++;",
          "319:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76e4990b259dd2e56883c224a0a70bcab9365cd3",
      "candidate_info": {
        "commit_hash": "76e4990b259dd2e56883c224a0a70bcab9365cd3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/76e4990b259dd2e56883c224a0a70bcab9365cd3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/walvfs.test"
        ],
        "message": "Add test cases to test file walvfs.test.\n\nFossilOrigin-Name: d697f6f3ca47350dad30feb529914fc5254fa662ece783408eea963d912918c1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d8c1235c02b745138ac2b12e8bbb00dda4cac321176be92a2fa9547be029b3d0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1616:   return TCL_OK;",
          "1617: }",
          "1620: int Sqlitetestvfs_Init(Tcl_Interp *interp){",
          "1621:   Tcl_CreateObjCommand(interp, \"testvfs\", testvfs_cmd, 0, 0);",
          "1622:   Tcl_CreateObjCommand(interp, \"vfs_shmlock\", test_vfs_shmlock, 0, 0);",
          "1623:   return TCL_OK;",
          "1624: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1619: static int SQLITE_TCLAPI test_vfs_set_readmark(",
          "1620:   void * clientData,",
          "1621:   Tcl_Interp *interp,",
          "1622:   int objc,",
          "1623:   Tcl_Obj *CONST objv[]",
          "1624: ){",
          "1625:   sqlite3 *db = 0;",
          "1626:   int rc = SQLITE_OK;",
          "1627:   const char *zDbname = 0;",
          "1628:   int iSlot = 0;",
          "1629:   int iVal = -1;",
          "1630:   sqlite3_file *pFd;",
          "1631:   void volatile *pShm = 0;",
          "1632:   u32 *aShm;",
          "1633:   int iOff;",
          "1635:   if( objc!=4 && objc!=5 ){",
          "1636:     Tcl_WrongNumArgs(interp, 1, objv, \"DB DBNAME SLOT ?VALUE?\");",
          "1637:     return TCL_ERROR;",
          "1638:   }",
          "1640:   zDbname = Tcl_GetString(objv[2]);",
          "1641:   if( getDbPointer(interp, Tcl_GetString(objv[1]), &db)",
          "1642:    || Tcl_GetIntFromObj(interp, objv[3], &iSlot)",
          "1643:    || (objc==5 && Tcl_GetIntFromObj(interp, objv[4], &iVal))",
          "1644:   ){",
          "1645:     return TCL_ERROR;",
          "1646:   }",
          "1648:   sqlite3_file_control(db, zDbname, SQLITE_FCNTL_FILE_POINTER, (void*)&pFd);",
          "1649:   if( pFd==0 ){",
          "1650:     return TCL_ERROR;",
          "1651:   }",
          "1652:   rc = pFd->pMethods->xShmMap(pFd, 0, 32*1024, 0, &pShm);",
          "1653:   if( rc!=SQLITE_OK ){",
          "1654:     Tcl_SetObjResult(interp, Tcl_NewStringObj(sqlite3ErrName(rc), -1));",
          "1655:     return TCL_ERROR;",
          "1656:   }",
          "1657:   if( pShm==0 ){",
          "1658:     Tcl_AppendResult(interp, \"*-shm is not yet mapped\", 0);",
          "1659:     return TCL_ERROR;",
          "1660:   }",
          "1661:   aShm = (u32*)pShm;",
          "1662:   iOff = 12*2+1+iSlot;",
          "1664:   if( objc==5 ){",
          "1665:     aShm[iOff] = iVal;",
          "1666:   }",
          "1667:   Tcl_SetObjResult(interp, Tcl_NewIntObj(aShm[iOff]));",
          "1669:   return TCL_OK;",
          "1670: }",
          "1675:   Tcl_CreateObjCommand(interp, \"vfs_set_readmark\", test_vfs_set_readmark, 0, 0);",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:   SELECT count(*) FROM t1",
          "183: } {1 {attempt to write a readonly database}}",
          "185: db close",
          "186: tvfs delete",
          "187: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: #-------------------------------------------------------------------------",
          "186: #",
          "187: reset_db",
          "188: db close",
          "189: sqlite3 db test.db -vfs tvfs",
          "190: tvfs filter {}",
          "191: do_execsql_test 5.0 {",
          "192:   PRAGMA auto_vacuum = 0;",
          "193:   PRAGMA page_size = 1024;",
          "194:   CREATE TABLE t1(x);",
          "195:   PRAGMA journal_mode = wal;",
          "196:   WITH s(i) AS (",
          "197:       SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "198:   )",
          "199:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "200: } {wal}",
          "202: do_execsql_test 5.1 {",
          "203:   SELECT count(*) FROM t1",
          "204: } {20}",
          "206: do_test 5.2 {",
          "207:   vfs_set_readmark db main 1 100",
          "208:   vfs_set_readmark db main 2 100",
          "209:   vfs_set_readmark db main 3 100",
          "210:   vfs_set_readmark db main 4 100",
          "211: } {100}",
          "213: do_execsql_test 5.3 {",
          "214:   SELECT count(*) FROM t1",
          "215: } {20}",
          "217: do_test 5.3 {",
          "218:   list [vfs_set_readmark db main 1] \\",
          "219:        [vfs_set_readmark db main 2] \\",
          "220:        [vfs_set_readmark db main 3] \\",
          "221:        [vfs_set_readmark db main 4]",
          "222: } {24 100 100 100}",
          "224: tvfs script xShmLock",
          "225: tvfs filter xShmLock",
          "226: set ::cnt 20",
          "227: proc xShmLock {args} {",
          "228:   incr ::cnt -1",
          "229:   if {$::cnt>0} { return SQLITE_BUSY }",
          "230:   return SQLITE_OK",
          "231: }",
          "233: do_test 5.4 {",
          "234:   vfs_set_readmark db main 1 100",
          "235:   execsql { SELECT count(*) FROM t1 }",
          "236: } {20}",
          "238: #-------------------------------------------------------------------------",
          "239: # Cause an SQLITE_PROTOCOL while attempting to restart the wal file.",
          "240: reset_db",
          "241: tvfs filter {}",
          "242: db close",
          "243: sqlite3 db test.db -vfs tvfs",
          "244: do_execsql_test 6.0 {",
          "245:   PRAGMA auto_vacuum = 0;",
          "246:   PRAGMA page_size = 1024;",
          "247:   CREATE TABLE t1(x);",
          "248:   PRAGMA journal_mode = wal;",
          "249:   WITH s(i) AS (",
          "250:       SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "251:   )",
          "252:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "253: } {wal}",
          "255: do_test 6.1 {",
          "256:   execsql { PRAGMA wal_checkpoint }",
          "257:   set {} {}",
          "258: } {}",
          "260: tvfs filter xShmLock",
          "261: set ::flag 0",
          "262: proc xShmLock {method file handle spec} {",
          "263:   if {$::flag && [lrange $spec 2 end]==\"lock shared\"} {",
          "264:     return SQLITE_BUSY",
          "265:   }",
          "266:   if {$spec==\"3 1 unlock shared\"} {",
          "267:     set ::flag 1",
          "268:   }",
          "269:   return SQLITE_OK",
          "270: }",
          "272: puts \"# WARNING: This next test takes around 12 seconds\"",
          "273: do_catchsql_test 6.2 {",
          "274:   INSERT INTO t1 VALUES(1);",
          "275: } {1 {locking protocol}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}