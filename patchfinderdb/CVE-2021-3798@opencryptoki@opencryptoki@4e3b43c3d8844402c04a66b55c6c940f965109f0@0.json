{
  "cve_id": "CVE-2021-3798",
  "cve_desc": "A flaw was found in openCryptoki. The openCryptoki Soft token does not check if an EC key is valid when an EC key is created via C_CreateObject, nor when C_DeriveKey is used with ECDH public data. This may allow a malicious user to extract the private key by performing an invalid curve attack.",
  "repo": "opencryptoki/opencryptoki",
  "patch_hash": "4e3b43c3d8844402c04a66b55c6c940f965109f0",
  "patch_info": {
    "commit_hash": "4e3b43c3d8844402c04a66b55c6c940f965109f0",
    "repo": "opencryptoki/opencryptoki",
    "commit_url": "https://github.com/opencryptoki/opencryptoki/commit/4e3b43c3d8844402c04a66b55c6c940f965109f0",
    "files": [
      "usr/lib/soft_stdll/soft_specific.c"
    ],
    "message": "SOFT: Check the EC Key on C_CreateObject and C_DeriveKey\n\nWhen constructing an OpenSSL EC public or private key from PKCS#11\nattributes or ECDH public data, check that the key is valid, i.e. that\nthe point is on the curve.\n\nThis prevents one from creating an EC key object via C_CreateObject with\ninvalid key data. It also prevents C_DeriveKey to derive a secret using\nECDH with an EC public key (public data) that uses a different curve\nor is invalid by other means.\n\nSigned-off-by: Ingo Franzki <ifranzki@linux.ibm.com>",
    "before_after_code_files": [
      "usr/lib/soft_stdll/soft_specific.c||usr/lib/soft_stdll/soft_specific.c"
    ]
  },
  "patch_diff": {
    "usr/lib/soft_stdll/soft_specific.c||usr/lib/soft_stdll/soft_specific.c": [
      "File: usr/lib/soft_stdll/soft_specific.c -> usr/lib/soft_stdll/soft_specific.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4365:         goto out;",
      "4366:     }",
      "4368: out:",
      "4369:     if (allocated && ecpoint != NULL)",
      "4370:         free(ecpoint);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4368:     if (!EC_KEY_check_key(ec_key)) {",
      "4369:         TRACE_ERROR(\"EC_KEY_check_key failed\\n\");",
      "4370:         rc = CKR_PUBLIC_KEY_INVALID;",
      "4371:         goto out;",
      "4372:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4404:         goto out;",
      "4405:     }",
      "4407: out:",
      "4408:     if (point != NULL)",
      "4409:         EC_POINT_free(point);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4413:     if (!EC_KEY_check_key(ec_key)) {",
      "4414:         TRACE_ERROR(\"EC_KEY_check_key failed\\n\");",
      "4415:         rc = CKR_FUNCTION_FAILED;",
      "4416:         goto out;",
      "4417:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "950de57292f10d03aa29676d6f8dd0669ce2a3b0",
      "candidate_info": {
        "commit_hash": "950de57292f10d03aa29676d6f8dd0669ce2a3b0",
        "repo": "opencryptoki/opencryptoki",
        "commit_url": "https://github.com/opencryptoki/opencryptoki/commit/950de57292f10d03aa29676d6f8dd0669ce2a3b0",
        "files": [
          "usr/include/pkcs11types.h",
          "usr/lib/common/p11util.c",
          "usr/sbin/pkcscca/pkcscca.c",
          "usr/sbin/pkcsslotd/err.c"
        ],
        "message": "Add missing return codes\n\nUpdate pkcs11types.h to define all return codes specified by\nPKCS#11.\n\nSigned-off-by: Ingo Franzki <ifranzki@linux.ibm.com>",
        "before_after_code_files": [
          "usr/include/pkcs11types.h||usr/include/pkcs11types.h",
          "usr/lib/common/p11util.c||usr/lib/common/p11util.c",
          "usr/sbin/pkcscca/pkcscca.c||usr/sbin/pkcscca/pkcscca.c",
          "usr/sbin/pkcsslotd/err.c||usr/sbin/pkcsslotd/err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usr/include/pkcs11types.h||usr/include/pkcs11types.h": [
          "File: usr/include/pkcs11types.h -> usr/include/pkcs11types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "988: #define CKR_ATTRIBUTE_SENSITIVE               0x00000011",
          "989: #define CKR_ATTRIBUTE_TYPE_INVALID            0x00000012",
          "990: #define CKR_ATTRIBUTE_VALUE_INVALID           0x00000013",
          "991: #define CKR_DATA_INVALID                      0x00000020",
          "992: #define CKR_DATA_LEN_RANGE                    0x00000021",
          "993: #define CKR_DEVICE_ERROR                      0x00000030",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "991: #define CKR_ACTION_PROHIBITED                 0x0000001B",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "995: #define CKR_DEVICE_REMOVED                    0x00000032",
          "996: #define CKR_ENCRYPTED_DATA_INVALID            0x00000040",
          "997: #define CKR_ENCRYPTED_DATA_LEN_RANGE          0x00000041",
          "998: #define CKR_FUNCTION_CANCELED                 0x00000050",
          "999: #define CKR_FUNCTION_NOT_PARALLEL             0x00000051",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "999: #define CKR_AEAD_DECRYPT_FAILED               0x00000042",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1092: #define CKR_MUTEX_BAD                         0x000001A0",
          "1093: #define CKR_MUTEX_NOT_LOCKED                  0x000001A1",
          "1096: #define CKR_FUNCTION_REJECTED                 0x00000200",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1097: #define CKR_NEW_PIN_MODE                      0x000001B0",
          "1098: #define CKR_NEXT_OTP                          0x000001B1",
          "1099: #define CKR_EXCEEDED_MAX_ITERATIONS           0x000001B5",
          "1100: #define CKR_FIPS_SELF_TEST_FAILED             0x000001B6",
          "1101: #define CKR_LIBRARY_LOAD_FAILED               0x000001B7",
          "1102: #define CKR_PIN_TOO_WEAK                      0x000001B8",
          "1103: #define CKR_PUBLIC_KEY_INVALID                0x000001B9",
          "",
          "---------------"
        ],
        "usr/lib/common/p11util.c||usr/lib/common/p11util.c": [
          "File: usr/lib/common/p11util.c -> usr/lib/common/p11util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:         _sym2str(CKR_MUTEX_BAD);",
          "109:         _sym2str(CKR_MUTEX_NOT_LOCKED);",
          "110:         _sym2str(CKR_FUNCTION_REJECTED);",
          "111:     default:",
          "112:         return \"UNKNOWN\";",
          "113:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:         _sym2str(CKR_ACTION_PROHIBITED);",
          "112:         _sym2str(CKR_AEAD_DECRYPT_FAILED);",
          "113:         _sym2str(CKR_NEW_PIN_MODE);",
          "114:         _sym2str(CKR_NEXT_OTP);",
          "115:         _sym2str(CKR_EXCEEDED_MAX_ITERATIONS);",
          "116:         _sym2str(CKR_FIPS_SELF_TEST_FAILED);",
          "117:         _sym2str(CKR_LIBRARY_LOAD_FAILED);",
          "118:         _sym2str(CKR_PIN_TOO_WEAK);",
          "119:         _sym2str(CKR_PUBLIC_KEY_INVALID);",
          "",
          "---------------"
        ],
        "usr/sbin/pkcscca/pkcscca.c||usr/sbin/pkcscca/pkcscca.c": [
          "File: usr/sbin/pkcscca/pkcscca.c -> usr/sbin/pkcscca/pkcscca.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2514:         return \"CKR_MUTEX_BAD\";",
          "2515:     case CKR_MUTEX_NOT_LOCKED:",
          "2516:         return \"CKR_MUTEX_NOT_LOCKED\";",
          "2517:     default:",
          "2518:         return \"UNKNOWN\";",
          "2519:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2517:     case CKR_ACTION_PROHIBITED:",
          "2518:         return \"CKR_ACTION_PROHIBITED\";",
          "2519:     case CKR_AEAD_DECRYPT_FAILED:",
          "2520:         return \"CKR_AEAD_DECRYPT_FAILED\";",
          "2521:     case CKR_NEW_PIN_MODE:",
          "2522:         return \"CKR_NEW_PIN_MODE\";",
          "2523:     case CKR_NEXT_OTP:",
          "2524:         return \"CKR_NEXT_OTP\";",
          "2525:     case CKR_EXCEEDED_MAX_ITERATIONS:",
          "2526:         return \"CKR_EXCEEDED_MAX_ITERATIONS\";",
          "2527:     case CKR_FIPS_SELF_TEST_FAILED:",
          "2528:         return \"CKR_FIPS_SELF_TEST_FAILED\";",
          "2529:     case CKR_LIBRARY_LOAD_FAILED:",
          "2530:         return \"CKR_LIBRARY_LOAD_FAILED\";",
          "2531:     case CKR_PIN_TOO_WEAK:",
          "2532:         return \"CKR_PIN_TOO_WEAK\";",
          "2533:     case CKR_PUBLIC_KEY_INVALID:",
          "2534:         return \"CKR_PUBLIC_KEY_INVALID\";",
          "",
          "---------------"
        ],
        "usr/sbin/pkcsslotd/err.c||usr/sbin/pkcsslotd/err.c": [
          "File: usr/sbin/pkcsslotd/err.c -> usr/sbin/pkcsslotd/err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:     CONSTINFO(CKR_MUTEX_NOT_LOCKED),",
          "301:     CONSTINFO(CKR_FUNCTION_REJECTED),",
          "302:     CONSTINFO(CKR_VENDOR_DEFINED),",
          "304: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:     CONSTINFO(CKR_ACTION_PROHIBITED),",
          "304:     CONSTINFO(CKR_AEAD_DECRYPT_FAILED),",
          "305:     CONSTINFO(CKR_NEW_PIN_MODE),",
          "306:     CONSTINFO(CKR_NEXT_OTP),",
          "307:     CONSTINFO(CKR_EXCEEDED_MAX_ITERATIONS),",
          "308:     CONSTINFO(CKR_FIPS_SELF_TEST_FAILED),",
          "309:     CONSTINFO(CKR_LIBRARY_LOAD_FAILED),",
          "310:     CONSTINFO(CKR_PIN_TOO_WEAK),",
          "311:     CONSTINFO(CKR_PUBLIC_KEY_INVALID),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d2579cef848f333d9d87bc15791e3b282ceabb1",
      "candidate_info": {
        "commit_hash": "3d2579cef848f333d9d87bc15791e3b282ceabb1",
        "repo": "opencryptoki/opencryptoki",
        "commit_url": "https://github.com/opencryptoki/opencryptoki/commit/3d2579cef848f333d9d87bc15791e3b282ceabb1",
        "files": [
          "usr/lib/soft_stdll/soft_specific.c"
        ],
        "message": "SOFT: Support raw EC Point with CKM_ECDH1_DERIVE\n\nAllow field pPublicData in CK_ECDH1_DERIVE_PARAMS to\nspecify either the raw or the DER encoded EC Point.\n\nPer PKCS#11 standard: A token MUST be able to accept this\nvalue encoded as a raw octet string (as per section A.5.2\nof [ANSI X9.62]). A token MAY, in addition, support accepting\nthis value as a DER-encoded ECPoint (as per section E.6 of\n[ANSI X9.62]) i.e. the same as a CKA_EC_POINT encoding.\n\nSigned-off-by: Ingo Franzki <ifranzki@linux.ibm.com>",
        "before_after_code_files": [
          "usr/lib/soft_stdll/soft_specific.c||usr/lib/soft_stdll/soft_specific.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "usr/lib/soft_stdll/soft_specific.c||usr/lib/soft_stdll/soft_specific.c"
          ],
          "candidate": [
            "usr/lib/soft_stdll/soft_specific.c||usr/lib/soft_stdll/soft_specific.c"
          ]
        }
      },
      "candidate_diff": {
        "usr/lib/soft_stdll/soft_specific.c||usr/lib/soft_stdll/soft_specific.c": [
          "File: usr/lib/soft_stdll/soft_specific.c -> usr/lib/soft_stdll/soft_specific.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4116: }",
          "4118: static CK_RV fill_ec_key_from_pubkey(EC_KEY *ec_key, const CK_BYTE *data,",
          "4120: {",
          "4121:     CK_BYTE *ecpoint = NULL;",
          "4122:     CK_ULONG ecpoint_len, field_len, privlen, padlen;",
          "",
          "[Removed Lines]",
          "4119:                                      CK_ULONG data_len)",
          "",
          "[Added Lines]",
          "4119:                                      CK_ULONG data_len, CK_BBOOL allow_raw)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4127:     rc = ber_decode_OCTET_STRING((CK_BYTE *)data, &ecpoint, &ecpoint_len,",
          "4128:                                  &field_len);",
          "4133:     }",
          "",
          "[Removed Lines]",
          "4129:     if (rc != CKR_OK || field_len != data_len) {",
          "4130:         TRACE_DEVEL(\"ber_decode_OCTET_STRING failed\\n\");",
          "4131:         rc = CKR_PUBLIC_KEY_INVALID;",
          "4132:         goto out;",
          "",
          "[Added Lines]",
          "4129:     if (rc != CKR_OK || field_len != data_len || ecpoint_len > data_len - 2) {",
          "4130:         if (!allow_raw) {",
          "4131:             TRACE_DEVEL(\"ber_decode_OCTET_STRING failed\\n\");",
          "4132:             rc = CKR_PUBLIC_KEY_INVALID;",
          "4133:             goto out;",
          "4134:         }",
          "4137:         ecpoint = (CK_BYTE *)data;",
          "4138:         ecpoint_len = data_len;",
          "4139:         rc = CKR_OK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4237:             goto out;",
          "4238:         }",
          "4241:         if (rc != CKR_OK) {",
          "4242:             TRACE_DEVEL(\"fill_ec_key_from_pubkey failed\\n\");",
          "4243:             goto out;",
          "",
          "[Removed Lines]",
          "4240:         rc = fill_ec_key_from_pubkey(ec_key, attr->pValue, attr->ulValueLen);",
          "",
          "[Added Lines]",
          "4247:         rc = fill_ec_key_from_pubkey(ec_key, attr->pValue, attr->ulValueLen,",
          "4248:                                      FALSE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4531:         goto out;",
          "4532:     }",
          "4535:     if (rc != CKR_OK) {",
          "4536:         TRACE_DEVEL(\"fill_ec_key_from_pubkey failed\\n\");",
          "4537:         goto out;",
          "",
          "[Removed Lines]",
          "4534:     rc = fill_ec_key_from_pubkey(ec_pub, pub_bytes, pub_length);",
          "",
          "[Added Lines]",
          "4542:     rc = fill_ec_key_from_pubkey(ec_pub, pub_bytes, pub_length, TRUE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2585fc1a52afdfc6ec119e6a27d7c5d52c06d4e2",
      "candidate_info": {
        "commit_hash": "2585fc1a52afdfc6ec119e6a27d7c5d52c06d4e2",
        "repo": "opencryptoki/opencryptoki",
        "commit_url": "https://github.com/opencryptoki/opencryptoki/commit/2585fc1a52afdfc6ec119e6a27d7c5d52c06d4e2",
        "files": [
          "usr/lib/api/api_interface.c"
        ],
        "message": "Handle early error cases in C_Initialize\n\nWhen C_Initialize errors prior to the bt_init call, bt_destroy will be\ncalled on garbage memory because Anchor hasn't yet been zeroed. This\ngives a stack trace such as:\n\n    Stack trace of thread 27740:\n    #0  0x00007fce91552b05 raise (libc.so.6 + 0x3cb05)\n    #1  0x00007fce9153b8a4 abort (libc.so.6 + 0x258a4)\n    #2  0x00007fce908db2e1 _ZN2os5abortEb.cold (libjvm.so + 0x20f2e1)\n    #3  0x00007fce911f76c2 _ZN7VMError14report_and_dieEv (libjvm.so + 0xb2b6c2)\n    #4  0x00007fce90fe7a24 JVM_handle_linux_signal (libjvm.so + 0x91ba24)\n    #5  0x00007fce90fdaa9c _Z13signalHandleriP9siginfo_tPv (libjvm.so + 0x90ea9c)\n    #6  0x00007fce91552b90 __restore_rt (libc.so.6 + 0x3cb90)\n    #7  0x00007fce7a262550 bt_destroy (libopencryptoki.so + 0x11550)\n    #8  0x00007fce7a2600d6 C_Initialize (libopencryptoki.so + 0xf0d6)\n    #9  0x00007fce7a6c8234 initialize_module_inlock_reentrant (p11-kit-proxy.so + 0x2d234)\n    #10 0x00007fce7a6c8383 managed_C_Initialize (p11-kit-proxy.so + 0x2d383)\n    #11 0x00007fce7a6cabe0 p11_kit_modules_initialize (p11-kit-proxy.so + 0x2fbe0)\n    #12 0x00007fce7a6cea97 proxy_C_Initialize (p11-kit-proxy.so + 0x33a97)\n    #13 0x00007fce7aaaa6f2 secmod_ModuleInit (libnss3.so + 0x486f2)\n    #14 0x00007fce7aaaae4a secmod_LoadPKCS11Module (libnss3.so + 0x48e4a)\n    #15 0x00007fce7aab800d SECMOD_LoadModule (libnss3.so + 0x5600d)\n    #16 0x00007fce7aab8148 SECMOD_LoadModule (libnss3.so + 0x56148)\n    #17 0x00007fce7aa80dc1 nss_Init (libnss3.so + 0x1edc1)\n    #18 0x00007fce7aa8124d NSS_InitReadWrite (libnss3.so + 0x1f24d)\n    #19 0x00007fce7ac47a29 Java_org_mozilla_jss_CryptoManager_initializeAllNative2 (libjss4.so + 0x15a29)\n    #20 0x00007fce7c8133c7 n/a (n/a + 0x0)\n    #21 0x00007fce7c802ffd n/a (n/a + 0x0)\n    #22 0x00007fce7c802ffd n/a (n/a + 0x0)\n    #23 0x00007fce7c802ffd n/a (n/a + 0x0)\n    #24 0x00007fce7c802ffd n/a (n/a + 0x0)\n    #25 0x00007fce7c802ffd n/a (n/a + 0x0)\n    #26 0x00007fce7c802ffd n/a (n/a + 0x0)\n    #27 0x00007fce7c802ffd n/a (n/a + 0x0)\n    #28 0x00007fce7c802ffd n/a (n/a + 0x0)\n    #29 0x00007fce7c802ffd n/a (n/a + 0x0)\n    #30 0x00007fce7c7fb4e7 n/a (n/a + 0x0)\n    #31 0x00007fce90d60e45 _ZN9JavaCalls11call_helperEP9JavaValueP12methodHandleP17JavaCallArgumentsP6Thread (libjvm.so + 0x694e45)\n    #32 0x00007fce90d8488d _ZL17jni_invoke_staticP7JNIEnv_P9JavaValueP8_jobject11JNICallTypeP10_jmethodIDP18JNI_ArgumentPusherP6Thread.constprop.1 (libjvm.so + 0x6b888d)\n    #33 0x00007fce90d87996 jni_CallStaticVoidMethod (libjvm.so + 0x6bb996)\n    #34 0x00007fce916ee877 JavaMain (libjli.so + 0x4877)\n    #35 0x00007fce914dc3f9 start_thread (libpthread.so.0 + 0x93f9)\n    #36 0x00007fce916183b3 __clone (libc.so.6 + 0x1023b3)\n\nFixing this requires zeroing Anchor earlier, making t->size 0 and\nallowing bt_destroy to exit with accessing uninitialized memory.\n\nResolves: #304\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>",
        "before_after_code_files": [
          "usr/lib/api/api_interface.c||usr/lib/api/api_interface.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usr/lib/api/api_interface.c||usr/lib/api/api_interface.c": [
          "File: usr/lib/api/api_interface.c -> usr/lib/api/api_interface.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2558:     memset(slot_loaded, 0, sizeof(int) * NUMBER_SLOTS_MANAGED);",
          "2560:     TRACE_DEBUG(\"Anchor allocated at %s\\n\", (char *) Anchor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2563:     memset(Anchor, 0, sizeof(API_Proc_Struct_t));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2653:         rc = CKR_FUNCTION_FAILED;",
          "2654:         goto error;",
          "2655:     }",
          "2662:     bt_init(&Anchor->sess_btree, free);",
          "2663:     Anchor->Pid = getpid();",
          "",
          "[Removed Lines]",
          "2661:     memset((char *) Anchor, 0, sizeof(API_Proc_Struct_t));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a163664c6236e965ffb2464be250a1e3d5c7c849",
      "candidate_info": {
        "commit_hash": "a163664c6236e965ffb2464be250a1e3d5c7c849",
        "repo": "opencryptoki/opencryptoki",
        "commit_url": "https://github.com/opencryptoki/opencryptoki/commit/a163664c6236e965ffb2464be250a1e3d5c7c849",
        "files": [
          "testcases/common/common.c",
          "testcases/crypto/abfunc.c",
          "testcases/crypto/aes_func.c",
          "testcases/crypto/des3_func.c",
          "testcases/crypto/des_func.c",
          "testcases/crypto/dh_func.c",
          "testcases/crypto/digest_func.c",
          "testcases/crypto/dilithium_func.c",
          "testcases/crypto/dsa_func.c",
          "testcases/crypto/ec_func.c",
          "testcases/crypto/rsa_func.c",
          "testcases/crypto/rsaupdate_func.c",
          "testcases/crypto/ssl3_func.c",
          "testcases/misc_tests/cca_export_import_test.c",
          "testcases/misc_tests/fork.c",
          "testcases/misc_tests/obj_mgmt.c",
          "testcases/misc_tests/obj_mgmt_lock.c",
          "testcases/misc_tests/reencrypt.c",
          "testcases/misc_tests/speed.c",
          "testcases/misc_tests/tok2tok_transport.c",
          "testcases/pkcs11/attribute.c",
          "testcases/pkcs11/copyobjects.c",
          "testcases/pkcs11/destroyobjects.c",
          "testcases/pkcs11/findobjects.c",
          "testcases/pkcs11/generate_keypair.c",
          "testcases/pkcs11/getobjectsize.c",
          "testcases/pkcs11/sess_opstate.c"
        ],
        "message": "testcases: Skip tests in case of policy rejections\n\nWhen a PKCS#11 function fails with CKR_FUNCTION_FAILED and\nfield ulDeviceError in CK_SESSION_INFO is CKR_POLICY_VIOLATION,\nthen this indicates that the operation is rejected due to policy.\nSkip the testcase in this case, instead if failing it.\n\nSigned-off-by: Ingo Franzki <ifranzki@linux.ibm.com>",
        "before_after_code_files": [
          "testcases/common/common.c||testcases/common/common.c",
          "testcases/crypto/abfunc.c||testcases/crypto/abfunc.c",
          "testcases/crypto/aes_func.c||testcases/crypto/aes_func.c",
          "testcases/crypto/des3_func.c||testcases/crypto/des3_func.c",
          "testcases/crypto/des_func.c||testcases/crypto/des_func.c",
          "testcases/crypto/dh_func.c||testcases/crypto/dh_func.c",
          "testcases/crypto/digest_func.c||testcases/crypto/digest_func.c",
          "testcases/crypto/dilithium_func.c||testcases/crypto/dilithium_func.c",
          "testcases/crypto/dsa_func.c||testcases/crypto/dsa_func.c",
          "testcases/crypto/ec_func.c||testcases/crypto/ec_func.c",
          "testcases/crypto/rsa_func.c||testcases/crypto/rsa_func.c",
          "testcases/crypto/rsaupdate_func.c||testcases/crypto/rsaupdate_func.c",
          "testcases/crypto/ssl3_func.c||testcases/crypto/ssl3_func.c",
          "testcases/misc_tests/cca_export_import_test.c||testcases/misc_tests/cca_export_import_test.c",
          "testcases/misc_tests/fork.c||testcases/misc_tests/fork.c",
          "testcases/misc_tests/obj_mgmt.c||testcases/misc_tests/obj_mgmt.c",
          "testcases/misc_tests/obj_mgmt_lock.c||testcases/misc_tests/obj_mgmt_lock.c",
          "testcases/misc_tests/reencrypt.c||testcases/misc_tests/reencrypt.c",
          "testcases/misc_tests/speed.c||testcases/misc_tests/speed.c",
          "testcases/misc_tests/tok2tok_transport.c||testcases/misc_tests/tok2tok_transport.c",
          "testcases/pkcs11/attribute.c||testcases/pkcs11/attribute.c",
          "testcases/pkcs11/copyobjects.c||testcases/pkcs11/copyobjects.c",
          "testcases/pkcs11/destroyobjects.c||testcases/pkcs11/destroyobjects.c",
          "testcases/pkcs11/findobjects.c||testcases/pkcs11/findobjects.c",
          "testcases/pkcs11/generate_keypair.c||testcases/pkcs11/generate_keypair.c",
          "testcases/pkcs11/getobjectsize.c||testcases/pkcs11/getobjectsize.c",
          "testcases/pkcs11/sess_opstate.c||testcases/pkcs11/sess_opstate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "testcases/common/common.c||testcases/common/common.c": [
          "File: testcases/common/common.c -> testcases/common/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     return rc;",
          "145: }",
          "151: {",
          "152:     CK_RV rc;",
          "153:     CK_BBOOL true = TRUE;",
          "",
          "[Removed Lines]",
          "148: int create_AESKey(CK_SESSION_HANDLE session, CK_BBOOL extractable,",
          "149:                   unsigned char key[], unsigned char key_len,",
          "150:                   CK_OBJECT_HANDLE * h_key)",
          "",
          "[Added Lines]",
          "150: int is_rejected_by_policy(CK_RV ret_code, CK_SESSION_HANDLE session)",
          "151: {",
          "152:     CK_SESSION_INFO info;",
          "153:     CK_RV rc;",
          "155:     if (ret_code != CKR_FUNCTION_FAILED)",
          "156:         return 0;",
          "158:     rc = funcs->C_GetSessionInfo(session, &info);",
          "159:     if (rc != CKR_OK) {",
          "160:         testcase_error(\"C_GetSessionInfo(), rc=%s.\", p11_get_ckr(rc));",
          "161:         return 0;",
          "162:     }",
          "164:     return (info.ulDeviceError == CKR_POLICY_VIOLATION);",
          "165: }",
          "168: CK_RV create_AESKey(CK_SESSION_HANDLE session, CK_BBOOL extractable,",
          "169:                     unsigned char key[], unsigned char key_len,",
          "170:                     CK_OBJECT_HANDLE * h_key)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:     rc = funcs->C_CreateObject(session, keyTemplate, keyTemplate_len, h_key);",
          "168:     if (rc != CKR_OK) {",
          "170:     }",
          "172:     return rc;",
          "173: }",
          "179: {",
          "180:     CK_ATTRIBUTE key_gen_tmpl[] = {",
          "181:         {CKA_EXTRACTABLE, &extractable, sizeof(CK_BBOOL)},",
          "",
          "[Removed Lines]",
          "169:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "176: int generate_AESKey(CK_SESSION_HANDLE session,",
          "177:                     CK_ULONG key_len, CK_BBOOL extractable,",
          "178:                     CK_MECHANISM * mechkey, CK_OBJECT_HANDLE * h_key)",
          "",
          "[Added Lines]",
          "189:         if (is_rejected_by_policy(rc, session))",
          "190:             rc = CKR_POLICY_VIOLATION;",
          "191:         else",
          "192:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "199: CK_RV generate_AESKey(CK_SESSION_HANDLE session,",
          "200:                       CK_ULONG key_len, CK_BBOOL extractable,",
          "201:                       CK_MECHANISM * mechkey, CK_OBJECT_HANDLE * h_key)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:                                     key_gen_tmpl, key_gen_tmpl_len,",
          "188:                                     h_key);",
          "189:     if (rc != CKR_OK) {",
          "191:     }",
          "193:     return rc;",
          "194: }",
          "200: {",
          "201:     CK_RV rc;",
          "202:     CK_OBJECT_CLASS keyClass = CKO_SECRET_KEY;",
          "",
          "[Removed Lines]",
          "190:         testcase_error(\"C_GenerateKey rc=%s\", p11_get_ckr(rc));",
          "197: int create_DESKey(CK_SESSION_HANDLE session,",
          "198:                   unsigned char key[], unsigned char klen,",
          "199:                   CK_OBJECT_HANDLE * h_key)",
          "",
          "[Added Lines]",
          "213:         if (is_rejected_by_policy(rc, session))",
          "214:             rc = CKR_POLICY_VIOLATION;",
          "215:         else",
          "216:             testcase_error(\"C_GenerateKey rc=%s\", p11_get_ckr(rc));",
          "223: CK_RV create_DESKey(CK_SESSION_HANDLE session,",
          "224:                     unsigned char key[], unsigned char klen,",
          "225:                     CK_OBJECT_HANDLE * h_key)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "217:     memcpy(value, key, klen);",
          "218:     rc = funcs->C_CreateObject(session, keyTemplate, 5, h_key);",
          "219:     if (rc != CKR_OK) {",
          "221:     }",
          "223:     return rc;",
          "224: }",
          "230: {",
          "231:     CK_RV rc;",
          "232:     CK_OBJECT_CLASS keyClass = CKO_SECRET_KEY;",
          "",
          "[Removed Lines]",
          "220:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "227: int create_DES2Key(CK_SESSION_HANDLE session,",
          "228:                    unsigned char key[], unsigned char klen,",
          "229:                    CK_OBJECT_HANDLE * h_key)",
          "",
          "[Added Lines]",
          "246:         if (is_rejected_by_policy(rc, session))",
          "247:             rc = CKR_POLICY_VIOLATION;",
          "248:         else",
          "249:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "256: CK_RV create_DES2Key(CK_SESSION_HANDLE session,",
          "257:                      unsigned char key[], unsigned char klen,",
          "258:                      CK_OBJECT_HANDLE * h_key)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:     memcpy(value, key, klen);",
          "247:     rc = funcs->C_CreateObject(session, keyTemplate, 5, h_key);",
          "248:     if (rc != CKR_OK) {",
          "250:     }",
          "252:     return rc;",
          "253: }",
          "259: {",
          "260:     CK_RV rc;",
          "261:     CK_OBJECT_CLASS keyClass = CKO_SECRET_KEY;",
          "",
          "[Removed Lines]",
          "249:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "256: int create_DES3Key(CK_SESSION_HANDLE session,",
          "257:                    unsigned char key[], unsigned char klen,",
          "258:                    CK_OBJECT_HANDLE * h_key)",
          "",
          "[Added Lines]",
          "278:         if (is_rejected_by_policy(rc, session))",
          "279:             rc = CKR_POLICY_VIOLATION;",
          "280:         else",
          "281:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "288: CK_RV create_DES3Key(CK_SESSION_HANDLE session,",
          "289:                      unsigned char key[], unsigned char klen,",
          "290:                      CK_OBJECT_HANDLE * h_key)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "275:     memcpy(value, key, klen);",
          "276:     rc = funcs->C_CreateObject(session, keyTemplate, 5, h_key);",
          "277:     if (rc != CKR_OK) {",
          "279:     }",
          "281:     return rc;",
          "282: }",
          "286:                             CK_BYTE key[],",
          "287:                             CK_ULONG key_len, CK_OBJECT_HANDLE * h_key)",
          "288: {",
          "",
          "[Removed Lines]",
          "278:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "285: int create_GenericSecretKey(CK_SESSION_HANDLE session,",
          "",
          "[Added Lines]",
          "310:         if (is_rejected_by_policy(rc, session))",
          "311:             rc = CKR_POLICY_VIOLATION;",
          "312:         else",
          "313:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "320: CK_RV create_GenericSecretKey(CK_SESSION_HANDLE session,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "300:     rc = funcs->C_CreateObject(session, key_attribs, 4, h_key);",
          "301:     if (rc != CKR_OK) {",
          "303:     }",
          "305:     return rc;",
          "",
          "[Removed Lines]",
          "302:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "[Added Lines]",
          "337:         if (is_rejected_by_policy(rc, session))",
          "338:             rc = CKR_POLICY_VIOLATION;",
          "339:         else",
          "340:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "359:     rc = funcs->C_CreateObject(session, template, 17, priv_key);",
          "360:     if (rc != CKR_OK) {",
          "362:     }",
          "364:     return rc;",
          "",
          "[Removed Lines]",
          "361:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "[Added Lines]",
          "399:         if (is_rejected_by_policy(rc, session))",
          "400:             rc = CKR_POLICY_VIOLATION;",
          "401:         else",
          "402:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "393:     rc = funcs->C_CreateObject(session, template, 8, publ_key);",
          "394:     if (rc != CKR_OK) {",
          "396:     }",
          "398:     return rc;",
          "",
          "[Removed Lines]",
          "395:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "[Added Lines]",
          "436:         if (is_rejected_by_policy(rc, session))",
          "437:             rc = CKR_POLICY_VIOLATION;",
          "438:         else",
          "439:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "435:                                   publicKeyTemplate,",
          "436:                                   5, privateKeyTemplate, 8, publ_key, priv_key);",
          "438:     return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:     if (is_rejected_by_policy(rc, session))",
          "483:         rc = CKR_POLICY_VIOLATION;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "476:                                   privateKeyTemplate, num_priv_attrs,",
          "477:                                   publ_key, priv_key);",
          "479:     return rc;",
          "480: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526:     if (is_rejected_by_policy(rc, session))",
          "527:         rc = CKR_POLICY_VIOLATION;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "521:     rc = funcs->C_CreateObject(session, template,",
          "522:                                sizeof(template) / sizeof(CK_ATTRIBUTE),",
          "523:                                priv_key);",
          "524:     return rc;",
          "525: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575:     if (is_rejected_by_policy(rc, session))",
          "576:         rc = CKR_POLICY_VIOLATION;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "552:     rc = funcs->C_CreateObject(session, template,",
          "553:                                sizeof(template) / sizeof(CK_ATTRIBUTE),",
          "554:                                publ_key);",
          "555:     return rc;",
          "556: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:     if (is_rejected_by_policy(rc, session))",
          "611:         rc = CKR_POLICY_VIOLATION;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "600:                                sizeof(template) / sizeof(CK_ATTRIBUTE),",
          "601:                                priv_key);",
          "602:     if (rc != CKR_OK) {",
          "604:     }",
          "606:     return rc;",
          "",
          "[Removed Lines]",
          "603:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "[Added Lines]",
          "661:         if (is_rejected_by_policy(rc, session))",
          "662:             rc = CKR_POLICY_VIOLATION;",
          "663:         else",
          "664:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "634:                            sizeof(template) / sizeof(CK_ATTRIBUTE),",
          "635:                            publ_key);",
          "636:     if (rc != CKR_OK) {",
          "638:     }",
          "640:     return rc;",
          "",
          "[Removed Lines]",
          "637:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "[Added Lines]",
          "698:         if (is_rejected_by_policy(rc, session))",
          "699:             rc = CKR_POLICY_VIOLATION;",
          "700:         else",
          "701:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "681:                                sizeof(template) / sizeof(CK_ATTRIBUTE),",
          "682:                                priv_key);",
          "683:     if (rc != CKR_OK) {",
          "685:     }",
          "687:     return rc;",
          "",
          "[Removed Lines]",
          "684:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "[Added Lines]",
          "748:         if (is_rejected_by_policy(rc, session))",
          "749:             rc = CKR_POLICY_VIOLATION;",
          "750:         else",
          "751:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "721:                                sizeof(template) / sizeof(CK_ATTRIBUTE),",
          "722:                                publ_key);",
          "723:     if (rc != CKR_OK) {",
          "725:     }",
          "727:     return rc;",
          "",
          "[Removed Lines]",
          "724:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "[Added Lines]",
          "791:         if (is_rejected_by_policy(rc, session))",
          "792:             rc = CKR_POLICY_VIOLATION;",
          "793:         else",
          "794:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "766:                                sizeof(template) / sizeof(CK_ATTRIBUTE),",
          "767:                                priv_key);",
          "768:     if (rc != CKR_OK) {",
          "770:     }",
          "772:     return rc;",
          "",
          "[Removed Lines]",
          "769:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "[Added Lines]",
          "839:         if (is_rejected_by_policy(rc, session))",
          "840:             rc = CKR_POLICY_VIOLATION;",
          "841:         else",
          "842:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "803:                                sizeof(template) / sizeof(CK_ATTRIBUTE),",
          "804:                                publ_key);",
          "805:     if (rc != CKR_OK) {",
          "807:     }",
          "809:     return rc;",
          "",
          "[Removed Lines]",
          "806:         testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "[Added Lines]",
          "879:         if (is_rejected_by_policy(rc, session))",
          "880:             rc = CKR_POLICY_VIOLATION;",
          "881:         else",
          "882:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "824:     rc = funcs->C_GenerateKey(session, mech, secret_tmpl, 2, secret_key);",
          "825:     if (rc != CKR_OK) {",
          "827:     }",
          "829:     return rc;",
          "",
          "[Removed Lines]",
          "826:         testcase_fail(\"C_GenerateKey, rc=%s\", p11_get_ckr(rc));",
          "",
          "[Added Lines]",
          "902:         if (is_rejected_by_policy(rc, session))",
          "903:             rc = CKR_POLICY_VIOLATION;",
          "904:         else",
          "905:             testcase_fail(\"C_GenerateKey, rc=%s\", p11_get_ckr(rc));",
          "",
          "---------------"
        ],
        "testcases/crypto/abfunc.c||testcases/crypto/abfunc.c": [
          "File: testcases/crypto/abfunc.c -> testcases/crypto/abfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "691:     testcase_begin(\"Create AB AES key via C_CreateObject\");",
          "692:     testcase_new_assertion();",
          "693:     rc = createABAESKey(session, &handle);",
          "695:         testcase_fail(\"C_CreateObject for AB AES key returned %s (expected CKR_ATTRIBUTE_VALUE_INVALID)\", p11_get_ckr(rc));",
          "696:     else",
          "697:         testcase_pass(\"C_CreateObject for AB AES key returned CKR_ATTRIBUTE_VALUE_INVALID as expected\");",
          "",
          "[Removed Lines]",
          "694:     if (rc != CKR_ATTRIBUTE_VALUE_INVALID)",
          "",
          "[Added Lines]",
          "694:     if (is_rejected_by_policy(rc, session))",
          "695:         testcase_skip(\"Key import is not allowed by policy\");",
          "696:     else if (rc != CKR_ATTRIBUTE_VALUE_INVALID)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "701:     testcase_begin(\"Create AB DSA private key via C_CreateObject\");",
          "702:     testcase_new_assertion();",
          "703:     rc = createABPrivateDSAKey(session, &handle);",
          "705:         testcase_fail(\"C_CreateObject for AB DSA private key returned %s (expected CKR_ATTRIBUTE_VALUE_INVALID)\", p11_get_ckr(rc));",
          "706:     else",
          "707:         testcase_pass(\"C_CreateObject for AB DSA private key returned CKR_ATTRIBUTE_VALUE_INVALID as expected\");",
          "",
          "[Removed Lines]",
          "704:     if (rc != CKR_ATTRIBUTE_VALUE_INVALID)",
          "",
          "[Added Lines]",
          "706:     if (is_rejected_by_policy(rc, session))",
          "707:         testcase_skip(\"Key import is not allowed by policy\");",
          "708:     else if (rc != CKR_ATTRIBUTE_VALUE_INVALID)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "711:     testcase_begin(\"Create AB DSA public key via C_CreateObject\");",
          "712:     testcase_new_assertion();",
          "713:     rc = createABPublicDSAKey(session, &handle);",
          "715:         testcase_fail(\"C_CreateObject for AB DSA public key returned %s (expected CKR_OK)\", p11_get_ckr(rc));",
          "716:     else",
          "717:         testcase_pass(\"C_CreateObject for AB DSA public key returned CKR_OK as expected\");",
          "",
          "[Removed Lines]",
          "714:     if (rc != CKR_OK)",
          "",
          "[Added Lines]",
          "718:     if (is_rejected_by_policy(rc, session))",
          "719:         testcase_skip(\"Key import is not allowed by policy\");",
          "720:     else if (rc != CKR_OK)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "730:     testcase_begin(\"Create AB AES key\");",
          "731:     testcase_new_assertion();",
          "732:     rc = generateABAESKey(session, 32, &keys.u.d.aes);",
          "734:         testcase_fail(\"Create AB AES key failed with rc=%s\", p11_get_ckr(rc));",
          "735:     else",
          "736:         testcase_pass(\"Successfully created AB AES key\");",
          "737:     testcase_begin(\"Create AB DES2 key\");",
          "738:     testcase_new_assertion();",
          "739:     rc = generateABDESKey(session, CKM_DES2_KEY_GEN, &keys.u.d.des2);",
          "741:         testcase_fail(\"Create AB DES2 key failed with rc=%s\", p11_get_ckr(rc));",
          "742:     else",
          "743:         testcase_pass(\"Successfully created AB DES2 key\");",
          "744:     testcase_begin(\"Create AB DES3 key\");",
          "745:     testcase_new_assertion();",
          "746:     rc = generateABDESKey(session, CKM_DES3_KEY_GEN, &keys.u.d.des3);",
          "748:         testcase_fail(\"Create AB DES3 key failed with rc=%s\", p11_get_ckr(rc));",
          "749:     else",
          "750:         testcase_pass(\"Successfully created AB DES3 key\");",
          "",
          "[Removed Lines]",
          "733:     if (rc != CKR_OK)",
          "740:     if (rc != CKR_OK)",
          "747:     if (rc != CKR_OK)",
          "",
          "[Added Lines]",
          "739:     if (is_rejected_by_policy(rc, session))",
          "740:         testcase_skip(\"Key generation is not allowed by policy\");",
          "741:     else if (rc != CKR_OK)",
          "748:     if (is_rejected_by_policy(rc, session))",
          "749:         testcase_skip(\"Key generation is not allowed by policy\");",
          "750:     else if (rc != CKR_OK)",
          "757:     if (is_rejected_by_policy(rc, session))",
          "758:         testcase_skip(\"Key generation is not allowed by policy\");",
          "759:     else if (rc != CKR_OK)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "754:         testcase_skip(\"CKM_GENERIC_SECRET_KEY_GEN not supported\");",
          "755:     } else {",
          "756:         rc = generateABGenericSecret(session, &keys.u.d.generic);",
          "758:             testcase_fail(\"Create AB generic secret key failed with rc=%s\", p11_get_ckr(rc));",
          "759:         else",
          "760:             testcase_pass(\"Successfully created AB generic secret key\");",
          "",
          "[Removed Lines]",
          "757:         if (rc != CKR_OK)",
          "",
          "[Added Lines]",
          "769:         if (is_rejected_by_policy(rc, session))",
          "770:             testcase_skip(\"Key generation is not allowed by policy\");",
          "771:         else if (rc != CKR_OK)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "762:     testcase_begin(\"Create AB RSA key\");",
          "763:     testcase_new_assertion();",
          "764:     rc = generateABRSAKey(session, TRUE, TRUE, TRUE, &keys.u.d.rsapub, &keys.u.d.rsapriv);",
          "766:         testcase_fail(\"Create AB RSA key failed with rc=%s\", p11_get_ckr(rc));",
          "767:     else",
          "768:         testcase_pass(\"Successfully created AB RSA key\");",
          "769:     testcase_begin(\"Create AB EC key\");",
          "770:     testcase_new_assertion();",
          "771:     rc = generateABECKey(session, TRUE, &keys.u.d.ecpub, &keys.u.d.ecpriv);",
          "773:         testcase_fail(\"Create AB EC key failed with rc=%s\", p11_get_ckr(rc));",
          "774:     else",
          "775:         testcase_pass(\"Successfully created AB EC key\");",
          "776:     testcase_begin(\"Create AB DSA key\");",
          "777:     testcase_new_assertion();",
          "778:     rc = generateABDSAKey(session, &keys.u.d.dsapub, &keys.u.d.dsapriv);",
          "780:         testcase_fail(\"Create AB DSA key failed with rc=%s\", p11_get_ckr(rc));",
          "781:     else",
          "782:         testcase_pass(\"Successfully created AB DSA key\");",
          "783:     testcase_begin(\"Create AB DH key\");",
          "784:     testcase_new_assertion();",
          "785:     rc = generateABDHKey(session, &keys.u.d.dhpub, &keys.u.d.dhpriv);",
          "787:         testcase_fail(\"Create AB DH key failed with rc=%s\", p11_get_ckr(rc));",
          "788:     else",
          "789:         testcase_pass(\"Successfully created AB DH key\");",
          "791:     rc = generateABRSAKey(session, FALSE, FALSE, FALSE, &keys.u.d.nonabpub, &keys.u.d.nonabpriv);",
          "792:     if (rc != CKR_OK)",
          "793:         return rc;",
          "794:     rc = generateABECKey(session, FALSE, &keys.u.d.nonabecpub, &keys.u.d.nonabecpriv);",
          "795:     return rc;",
          "796: }",
          "",
          "[Removed Lines]",
          "765:     if (rc != CKR_OK)",
          "772:     if (rc != CKR_OK)",
          "779:     if (rc != CKR_OK)",
          "786:     if (rc != CKR_OK)",
          "",
          "[Added Lines]",
          "779:     if (is_rejected_by_policy(rc, session))",
          "780:         testcase_skip(\"Key generation is not allowed by policy\");",
          "781:     else if (rc != CKR_OK)",
          "788:     if (is_rejected_by_policy(rc, session))",
          "789:         testcase_skip(\"Key generation is not allowed by policy\");",
          "790:     else if (rc != CKR_OK)",
          "797:     if (is_rejected_by_policy(rc, session))",
          "798:         testcase_skip(\"Key generation is not allowed by policy\");",
          "799:     else if (rc != CKR_OK)",
          "806:     if (is_rejected_by_policy(rc, session))",
          "807:         testcase_skip(\"Key generation is not allowed by policy\");",
          "808:     else if (rc != CKR_OK)",
          "814:     if (is_rejected_by_policy(rc, session)) {",
          "815:         testcase_skip(\"Key generation is not allowed by policy\");",
          "816:         rc = CKR_POLICY_VIOLATION;",
          "817:     }",
          "821:     if (is_rejected_by_policy(rc, session)) {",
          "822:         testcase_skip(\"Key generation is not allowed by policy\");",
          "823:         rc = CKR_POLICY_VIOLATION;",
          "824:     }",
          "826:     for (i = 0; i < NUMKEYS; ++i) {",
          "827:         if (keys.u.keys[i] == CK_INVALID_HANDLE)",
          "828:             rc = CKR_POLICY_VIOLATION;",
          "829:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1090:     do_CreateKeyObjects(session);",
          "1092:     rc = do_SetupKeys(session);",
          "1093:     if (rc != CKR_OK) {",
          "1094:         testcase_error(\"Bail out since keys were not properly created!\");",
          "1095:         goto testcase_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1129:     if (rc == CKR_POLICY_VIOLATION) {",
          "1130:         rc = CKR_OK;",
          "1131:         goto testcase_cleanup;",
          "1132:     }",
          "",
          "---------------"
        ],
        "testcases/crypto/aes_func.c||testcases/crypto/aes_func.c": [
          "File: testcases/crypto/aes_func.c -> testcases/crypto/aes_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:         rc = generate_AESKey(session, key_lens[i], !pkey,",
          "82:                              &mechkey, &h_key);",
          "83:         if (rc != CKR_OK) {",
          "84:             testcase_error(\"C_GenerateKey rc=%s\", p11_get_ckr(rc));",
          "85:             goto testcase_cleanup;",
          "86:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:             if (rc == CKR_POLICY_VIOLATION) {",
          "85:                 testcase_skip(\"AES key generation is not allowed by policy\");",
          "86:                 continue;",
          "87:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:         rc = generate_AESKey(session, key_lens[i], !pkey,",
          "221:                              &mechkey, &h_key);",
          "222:         if (rc != CKR_OK) {",
          "223:             testcase_error(\"C_GenerateKey rc=%s\", p11_get_ckr(rc));",
          "224:             goto testcase_cleanup;",
          "225:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:             if (rc == CKR_POLICY_VIOLATION) {",
          "229:                 testcase_skip(\"AES key generation is not allowed by policy\");",
          "230:                 continue;",
          "231:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "447:                            tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "449:         if (rc != CKR_OK) {",
          "450:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "451:             goto error;",
          "452:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:             if (rc == CKR_POLICY_VIOLATION) {",
          "461:                 testcase_skip(\"AES key import is not allowed by policy\");",
          "462:                 continue;",
          "463:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "584:                            tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "586:         if (rc != CKR_OK) {",
          "587:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "588:             goto error;",
          "589:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602:             if (rc == CKR_POLICY_VIOLATION) {",
          "603:                 testcase_skip(\"AES key import is not allowed by policy\");",
          "604:                 continue;",
          "605:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "762:                            tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "764:         if (rc != CKR_OK) {",
          "765:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "766:             goto error;",
          "767:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785:             if (rc == CKR_POLICY_VIOLATION) {",
          "786:                 testcase_skip(\"AES key import is not allowed by policy\");",
          "787:                 continue;",
          "788:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "896:                            tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "898:         if (rc != CKR_OK) {",
          "899:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "900:             goto error;",
          "901:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "924:             if (rc == CKR_POLICY_VIOLATION) {",
          "925:                 testcase_skip(\"AES key import is not allowed by policy\");",
          "926:                 continue;",
          "927:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1105:         rc = generate_AESKey(session, key_lens[i], CK_TRUE, &mechkey, &h_key);",
          "1106:         if (rc != CKR_OK) {",
          "1107:             testcase_error(\"C_GenerateKey rc=%s\", p11_get_ckr(rc));",
          "1108:             goto error;",
          "1109:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1137:             if (rc == CKR_POLICY_VIOLATION) {",
          "1138:                 testcase_skip(\"AES key generation is not allowed by policy\");",
          "1139:                 continue;",
          "1140:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1391:                                       NULL, 0, &publ_key, &priv_key);",
          "1393:         if (rc != CKR_OK) {",
          "1394:             testcase_error(\"C_GenerateKeyPair rc=%s\", p11_get_ckr(rc));",
          "1395:             goto testcase_cleanup;",
          "1396:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1429:             if (is_rejected_by_policy(rc, session)) {",
          "1430:                 testcase_skip(\"RSA key generation is not allowed by policy\");",
          "1431:                 continue;",
          "1432:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1401:                                   &w_key);",
          "1403:         if (rc != CKR_OK) {",
          "1404:             testcase_error(\"C_GenerateKey rc=%s\", p11_get_ckr(rc));",
          "1405:             goto testcase_cleanup;",
          "1406:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1444:             if (is_rejected_by_policy(rc, session)) {",
          "1445:                 testcase_skip(\"AES key generation is not allowed by policy\");",
          "1446:                 continue;",
          "1447:             }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1631:                                       NULL, 0,",
          "1632:                                       &publ_key, &priv_key);",
          "1633:         if (rc != CKR_OK) {",
          "1634:             testcase_error(\"C_GenerateKeyPair rc=%s\", p11_get_ckr(rc));",
          "1635:             goto testcase_cleanup;",
          "1636:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1679:             if (is_rejected_by_policy(rc, session)) {",
          "1680:                 testcase_skip(\"RSA key generation is not allowed by policy\");",
          "1681:                 continue;",
          "1682:             }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1640:                                   key_gen_tmpl, key_gen_tmpl_len,",
          "1641:                                   &w_key);",
          "1642:         if (rc != CKR_OK) {",
          "1643:             testcase_error(\"C_GenerateKey rc=%s\", p11_get_ckr(rc));",
          "1644:             goto testcase_cleanup;",
          "1645:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1693:             if (is_rejected_by_policy(rc, session)) {",
          "1694:                 testcase_skip(\"AES key generation is not allowed by policy\");",
          "1695:                 continue;",
          "1696:             }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1815:                                       NULL, 0,",
          "1816:                                       &publ_key, &priv_key);",
          "1817:         if (rc != CKR_OK) {",
          "1818:             testcase_error(\"C_GenerateKeyPair rc=%s\", p11_get_ckr(rc));",
          "1819:             goto testcase_cleanup;",
          "1820:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1873:             if (is_rejected_by_policy(rc, session)) {",
          "1874:                 testcase_skip(\"RSA key generation is not allowed by policy\");",
          "1875:                 continue;",
          "1876:             }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1824:                                   key_gen_tmpl, key_gen_tmpl_len,",
          "1825:                                   &w_key);",
          "1826:         if (rc != CKR_OK) {",
          "1827:             testcase_error(\"C_GenerateKey rc=%s\", p11_get_ckr(rc));",
          "1828:             goto testcase_cleanup;",
          "1829:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1887:             if (is_rejected_by_policy(rc, session)) {",
          "1888:                 testcase_skip(\"AES key generation is not allowed by policy\");",
          "1889:                 continue;",
          "1890:             }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1941:                            tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "1943:         if (rc != CKR_OK) {",
          "1944:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "1945:             goto error;",
          "1946:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2009:             if (rc == CKR_POLICY_VIOLATION) {",
          "2010:                 testcase_skip(\"AES key import is not allowed by policy\");",
          "2011:                 continue;",
          "2012:             }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1972:         rc = funcs->C_SignInit(session, &mech, h_key);",
          "1973:         if (rc != CKR_OK) {",
          "1974:             testcase_error(\"C_SignInit rc=%s\", p11_get_ckr(rc));",
          "1975:             goto error;",
          "1976:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2044:             if (is_rejected_by_policy(rc, session)) {",
          "2045:                 testcase_skip(\"C_SignInit with mech %s is not allowed by policy\",",
          "2046:                               mech_to_str(mech.mechanism));",
          "2047:                 goto error;",
          "2048:             }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2118:     rc = generate_AESKey(session, 16, CK_FALSE, &keygen_mech, &h_key);",
          "2119:     if (rc != CKR_OK) {",
          "2120:         testcase_fail(\"generate_AESKey rc=%s\", p11_get_ckr(rc));",
          "2121:         goto testcase_cleanup;",
          "2122:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2196:         if (rc == CKR_POLICY_VIOLATION) {",
          "2197:             testcase_skip(\"AES key generation is not allowed by policy\");",
          "2198:             goto testcase_cleanup;",
          "2199:         }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2228:     rc = funcs->C_GenerateKey(session, &keygen_mech, keygen_tmpl, keygen_tmpl_len, &h_key);",
          "2229:     if (rc != CKR_OK) {",
          "2230:         testcase_fail(\"C_GenerateKey rc=%s\", p11_get_ckr(rc));",
          "2231:         goto testcase_cleanup;",
          "2232:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2311:         if (is_rejected_by_policy(rc, session)) {",
          "2312:             testcase_skip(\"AES key generation is not allowed by policy\");",
          "2313:             goto testcase_cleanup;",
          "2314:         }",
          "",
          "---------------"
        ],
        "testcases/crypto/des3_func.c||testcases/crypto/des3_func.c": [
          "File: testcases/crypto/des3_func.c -> testcases/crypto/des3_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:         rc = create_DES3Key(session,",
          "82:                             tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "83:         if (rc != CKR_OK) {",
          "84:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "85:             goto error;",
          "86:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:             if (rc == CKR_POLICY_VIOLATION) {",
          "85:                 testcase_skip(\"DES3 key import is not allowed by policy\");",
          "86:                 continue;",
          "87:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:         rc = create_DES3Key(session,",
          "206:                             tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "207:         if (rc != CKR_OK) {",
          "208:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "209:             goto error;",
          "210:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:             if (rc == CKR_POLICY_VIOLATION) {",
          "214:                 testcase_skip(\"DES3 key import is not allowed by policy\");",
          "215:                 continue;",
          "216:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "371:         rc = create_DES3Key(session,",
          "372:                             tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "373:         if (rc != CKR_OK) {",
          "374:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "375:             goto testcase_cleanup;",
          "376:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384:             if (rc == CKR_POLICY_VIOLATION) {",
          "385:                 testcase_skip(\"DES3 key import is not allowed by policy\");",
          "386:                 continue;",
          "387:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "495:         rc = create_DES3Key(session,",
          "496:                             tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "497:         if (rc != CKR_OK) {",
          "498:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "499:             goto testcase_cleanup;",
          "500:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "513:             if (rc == CKR_POLICY_VIOLATION) {",
          "514:                 testcase_skip(\"DES3 key import is not allowed by policy\");",
          "515:                 continue;",
          "516:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1162:         else",
          "1163:             rc = CKR_KEY_TYPE_INCONSISTENT;",
          "1164:         if (rc != CKR_OK) {",
          "1165:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "1166:             goto error;",
          "1167:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1185:             if (rc == CKR_POLICY_VIOLATION) {",
          "1186:                 testcase_skip(\"DES2/DES3 key import is not allowed by policy\");",
          "1187:                 continue;",
          "1188:             }",
          "",
          "---------------"
        ],
        "testcases/crypto/des_func.c||testcases/crypto/des_func.c": [
          "File: testcases/crypto/des_func.c -> testcases/crypto/des_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         rc = create_DESKey(session,",
          "83:                            tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "84:         if (rc != CKR_OK) {",
          "85:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "86:             goto testcase_cleanup;",
          "87:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:             if (rc == CKR_POLICY_VIOLATION) {",
          "86:                 testcase_skip(\"DES key import is not allowed by policy\");",
          "87:                 continue;",
          "88:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:         rc = create_DESKey(session,",
          "206:                            tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "207:         if (rc != CKR_OK) {",
          "208:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "209:             goto testcase_cleanup;",
          "210:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:             if (rc == CKR_POLICY_VIOLATION) {",
          "214:                 testcase_skip(\"DES key import is not allowed by policy\");",
          "215:                 continue;",
          "216:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "356:         rc = create_DESKey(session,",
          "357:                            tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "358:         if (rc != CKR_OK) {",
          "359:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "360:             goto testcase_cleanup;",
          "361:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:             if (rc == CKR_POLICY_VIOLATION) {",
          "370:                 testcase_skip(\"DES key import is not allowed by policy\");",
          "371:                 continue;",
          "372:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "497:         rc = create_DESKey(session,",
          "498:                            tsuite->tv[i].key, tsuite->tv[i].klen, &h_key);",
          "499:         if (rc != CKR_OK) {",
          "500:             testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "501:             goto testcase_cleanup;",
          "502:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515:             if (rc == CKR_POLICY_VIOLATION) {",
          "516:                 testcase_skip(\"DES key import is not allowed by policy\");",
          "517:                 continue;",
          "518:             }",
          "",
          "---------------"
        ],
        "testcases/crypto/dh_func.c||testcases/crypto/dh_func.c": [
          "File: testcases/crypto/dh_func.c -> testcases/crypto/dh_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:         rc = funcs->C_GenerateKeyPair(session, &mech, publ_tmpl, 5,",
          "240:                                       priv_tmpl, 4, &publ_key, &priv_key);",
          "241:         if (rc != CKR_OK) {",
          "242:             testcase_fail(\"C_GenerateKeyPair #1: rc = %s\", p11_get_ckr(rc));",
          "243:             goto testcase_cleanup;",
          "244:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:             if (is_rejected_by_policy(rc, session)) {",
          "243:                 testcase_skip(\"DH key generation is not allowed by policy\");",
          "244:                 rc = CKR_OK;",
          "245:                 goto testcase_cleanup;",
          "246:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:                                  DH_PUBL_BASE, sizeof(DH_PUBL_BASE),",
          "272:                                  DH_PRIVATE_A, sizeof(DH_PRIVATE_A), &priv_key);",
          "273:         if (rc != CKR_OK) {",
          "274:             testcase_fail(\"C_CreateObject (DH Private Key) failed rc=%s\",",
          "275:                           p11_get_ckr(rc));",
          "276:             goto testcase_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:             if (rc == CKR_POLICY_VIOLATION) {",
          "280:                 testcase_skip(\"DH key import is not allowed by policy\");",
          "281:                 rc = CKR_OK;",
          "282:                 goto testcase_cleanup;",
          "283:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:                                 DH_PUBL_BASE, sizeof(DH_PUBL_BASE),",
          "282:                                 DH_PUBLIC_A, sizeof(DH_PUBLIC_A), &publ_key);",
          "283:         if (rc != CKR_OK) {",
          "284:             testcase_fail(\"C_CreateObject (DH Public Key) failed rc=%s\",",
          "285:                           p11_get_ckr(rc));",
          "286:             goto testcase_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:             if (rc == CKR_POLICY_VIOLATION) {",
          "295:                 testcase_skip(\"DH key import is not allowed by policy\");",
          "296:                 rc = CKR_OK;",
          "297:                 goto testcase_cleanup;",
          "298:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "292:                                  DH_PRIVATE_B, sizeof(DH_PRIVATE_B),",
          "293:                                  &peer_priv_key);",
          "294:         if (rc != CKR_OK) {",
          "295:             testcase_fail(\"C_CreateObject (DH Private Key) failed rc=%s\",",
          "296:                           p11_get_ckr(rc));",
          "297:             goto testcase_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:             if (rc == CKR_POLICY_VIOLATION) {",
          "311:                 testcase_skip(\"DH key import is not allowed by policy\");",
          "312:                 rc = CKR_OK;",
          "313:                 goto testcase_cleanup;",
          "314:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "303:                                 DH_PUBLIC_B, sizeof(DH_PUBLIC_B),",
          "304:                                 &peer_publ_key);",
          "305:         if (rc != CKR_OK) {",
          "306:             testcase_fail(\"C_CreateObject (DH Public Key) failed rc=%s\",",
          "307:                           p11_get_ckr(rc));",
          "308:             goto testcase_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:             if (rc == CKR_POLICY_VIOLATION) {",
          "327:                 testcase_skip(\"DH key import is not allowed by policy\");",
          "328:                 rc = CKR_OK;",
          "329:                 goto testcase_cleanup;",
          "330:             }",
          "",
          "---------------"
        ],
        "testcases/crypto/digest_func.c||testcases/crypto/digest_func.c": [
          "File: testcases/crypto/digest_func.c -> testcases/crypto/digest_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"regress.h\"",
          "20: #include \"digest.h\"",
          "21: #include \"common.c\"",
          "23: #define DIGEST_UPDATE_SIZE 32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"mech_to_str.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "315:         rc = create_GenericSecretKey(session, key, key_len, &h_key);",
          "316:         if (rc != CKR_OK) {",
          "317:             testcase_error(\"create_GenericSecretKey rc=%s\", p11_get_ckr(rc));",
          "318:             goto error;",
          "319:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:             if (rc == CKR_POLICY_VIOLATION) {",
          "319:                 testcase_skip(\"generic secret key generation is not allowed by policy\");",
          "320:                 continue;",
          "321:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "322:         rc = funcs->C_SignInit(session, &mech, h_key);",
          "323:         if (rc != CKR_OK) {",
          "324:             testcase_error(\"C_SignInit rc=%s\", p11_get_ckr(rc));",
          "325:             goto error;",
          "326:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:             if (is_rejected_by_policy(rc, session)) {",
          "331:                 testcase_skip(\"C_SignInit with mech %s is not allowed by policy\",",
          "332:                               mech_to_str(mech.mechanism));",
          "333:                 goto error;",
          "334:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "430:         rc = create_GenericSecretKey(session, key, key_len, &h_key);",
          "431:         if (rc != CKR_OK) {",
          "432:             testcase_error(\"create_GenericSecretKey rc=%s\", p11_get_ckr(rc));",
          "433:             goto error;",
          "434:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444:             if (rc == CKR_POLICY_VIOLATION) {",
          "445:                 testcase_skip(\"generic secret key generation is not allowed by policy\");",
          "446:                 continue;",
          "447:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "437:         rc = funcs->C_VerifyInit(session, &mech, h_key);",
          "438:         if (rc != CKR_OK) {",
          "439:             testcase_error(\"C_VerifyInit rc=%s\", p11_get_ckr(rc));",
          "440:             goto error;",
          "441:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:             if (is_rejected_by_policy(rc, session)) {",
          "457:                 testcase_skip(\"C_VerifyInit with mech %s is not allowed by policy\",",
          "458:                               mech_to_str(mech.mechanism));",
          "459:                 goto error;",
          "460:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "568:         rc = create_GenericSecretKey(session, key, key_len, &h_key);",
          "569:         if (rc != CKR_OK) {",
          "570:             testcase_error(\"create_GenericSecretKey rc=%s\", p11_get_ckr(rc));",
          "571:             goto error;",
          "572:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:             if (rc == CKR_POLICY_VIOLATION) {",
          "594:                 testcase_skip(\"generic secret key generation is not allowed by policy\");",
          "595:                 continue;",
          "596:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "712:         rc = create_GenericSecretKey(session, key, key_len, &h_key);",
          "713:         if (rc != CKR_OK) {",
          "714:             testcase_error(\"create_GenericSecretKey rc=%s\", p11_get_ckr(rc));",
          "715:             goto error;",
          "716:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:             if (rc == CKR_POLICY_VIOLATION) {",
          "743:                 testcase_skip(\"generic secret key generation is not allowed by policy\");",
          "744:                 continue;",
          "745:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "854:         rc = create_GenericSecretKey(session, key, key_len, &h_key);",
          "855:         if (rc != CKR_OK) {",
          "856:             testcase_error(\"create_GenericSecretKey rc=%s\", p11_get_ckr(rc));",
          "857:             goto error;",
          "858:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "889:             if (rc == CKR_POLICY_VIOLATION) {",
          "890:                 testcase_skip(\"generic secret key generation is not allowed by policy\");",
          "891:                 continue;",
          "892:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1038:         rc = create_GenericSecretKey(session, key, key_len, &h_key);",
          "1039:         if (rc != CKR_OK) {",
          "1040:             testcase_error(\"create_GenericSecretKey rc=%s\", p11_get_ckr(rc));",
          "1041:             goto error;",
          "1042:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:             if (rc == CKR_POLICY_VIOLATION) {",
          "1079:                 testcase_skip(\"generic secret key generation is not allowed by policy\");",
          "1080:                 continue;",
          "1081:             }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1185:         rc = create_GenericSecretKey(session, key, key_len, &h_key);",
          "1186:         if (rc != CKR_OK) {",
          "1187:             testcase_error(\"create_GenericSecretKey rc=%s\", p11_get_ckr(rc));",
          "1188:             goto error;",
          "1189:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1230:             if (rc == CKR_POLICY_VIOLATION) {",
          "1231:                 testcase_skip(\"generic secret key generation is not allowed by policy\");",
          "1232:                 continue;",
          "1233:             }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1192:         rc = funcs->C_SignInit(session, &mech, h_key);",
          "1193:         if (rc != CKR_OK) {",
          "1194:             testcase_error(\"C_SignInit rc=%s\", p11_get_ckr(rc));",
          "1195:             goto error;",
          "1196:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1242:             if (is_rejected_by_policy(rc, session)) {",
          "1243:                 testcase_skip(\"C_SignInit with mech %s is not allowed by policy\",",
          "1244:                               mech_to_str(mech.mechanism));",
          "1245:                 goto error;",
          "1246:             }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1327:         rc = create_GenericSecretKey(session, key, key_len, &h_key);",
          "1328:         if (rc != CKR_OK) {",
          "1329:             testcase_error(\"create_GenericSecretKey rc=%s\", p11_get_ckr(rc));",
          "1330:             goto error;",
          "1331:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1383:             if (rc == CKR_POLICY_VIOLATION) {",
          "1384:                 testcase_skip(\"generic secret key generation is not allowed by policy\");",
          "1385:                 continue;",
          "1386:             }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1496:     rc = generate_SecretKey(session, key_len, &secret_mech, &h_key);",
          "1497:     if (rc != CKR_OK) {",
          "1498:         testcase_error(\"generate_SecretKey rc=%s\", p11_get_ckr(rc));",
          "1499:         goto testcase_cleanup;",
          "1500:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1557:         if (rc == CKR_POLICY_VIOLATION) {",
          "1558:             testsuite_skip(1, \"generic secret key generation is not allowed by policy\");",
          "1559:             goto testcase_cleanup;",
          "1560:         }",
          "",
          "---------------"
        ],
        "testcases/crypto/dilithium_func.c||testcases/crypto/dilithium_func.c": [
          "File: testcases/crypto/dilithium_func.c -> testcases/crypto/dilithium_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:                             &priv_key);",
          "372:         testcase_new_assertion();",
          "373:         if (rc != CKR_OK) {",
          "374:             testcase_fail(\"C_CreateObject (Dilithium Private Key) failed at i=%lu, \"",
          "375:                           \"rc=%s\", i, p11_get_ckr(rc));",
          "376:             goto testcase_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374:             if (rc == CKR_POLICY_VIOLATION) {",
          "375:                 testcase_skip(\"Dilithium key import is not allowed by policy\");",
          "376:                 continue;",
          "377:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:                                 &publ_key);",
          "386:         testcase_new_assertion();",
          "387:         if (rc != CKR_OK) {",
          "388:             testcase_fail(\"C_CreateObject (Dilithium Public Key) failed at i=%lu, \"",
          "389:                           \"rc=%s\", i, p11_get_ckr(rc));",
          "390:             goto testcase_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:             if (rc == CKR_POLICY_VIOLATION) {",
          "393:                 testcase_skip(\"Dilithium key import is not allowed by policy\");",
          "394:                 goto testcase_cleanup;",
          "395:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "571:                             &priv_key);",
          "572:         testcase_new_assertion();",
          "573:         if (rc != CKR_OK) {",
          "574:             testcase_fail",
          "575:                 (\"C_CreateObject (Dilithium Private Key) failed at i=%lu, rc=%s\", i,",
          "576:                  p11_get_ckr(rc));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "582:             if (rc == CKR_POLICY_VIOLATION) {",
          "583:                 testcase_skip(\"Dilithium key import is not allowed by policy\");",
          "584:                 continue;",
          "585:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "586:                                 &publ_key);",
          "587:         testcase_new_assertion();",
          "588:         if (rc != CKR_OK) {",
          "589:             testcase_fail",
          "590:                 (\"C_CreateObject (Dilithium Public Key) failed at i=%lu, rc=%s\", i,",
          "591:                  p11_get_ckr(rc));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "601:             if (rc == CKR_POLICY_VIOLATION) {",
          "602:                 testcase_skip(\"Dilithium key import is not allowed by policy\");",
          "603:                 goto testcase_cleanup;",
          "604:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "600:         wkey_mech.ulParameterLen = 0;",
          "601:         rc = generate_AESKey(session, 32, CK_TRUE, &wkey_mech, &secret_key);",
          "602:         if (rc != CKR_OK) {",
          "603:             testcase_error(\"generate_AESKey, rc=%s\", p11_get_ckr(rc));",
          "604:             goto testcase_cleanup;",
          "605:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:             if (rc == CKR_POLICY_VIOLATION) {",
          "620:                 testcase_skip(\"AES key generation is not allowed by policy\");",
          "621:                 goto testcase_cleanup;",
          "622:             }",
          "",
          "---------------"
        ],
        "testcases/crypto/dsa_func.c||testcases/crypto/dsa_func.c": [
          "File: testcases/crypto/dsa_func.c -> testcases/crypto/dsa_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     rc = funcs->C_GenerateKeyPair(session, &mech, publ_tmpl, 3, NULL, 0,",
          "92:                                   &publ_key, &priv_key);",
          "96:         testcase_pass(\"GenerateDSAKeyPair passed\");",
          "98: testcase_cleanup:",
          "99:     funcs->C_DestroyObject(session, priv_key);",
          "",
          "[Removed Lines]",
          "93:     if (rc != CKR_OK)",
          "94:         testcase_fail(\"C_GenerateKeyPair rc=%s\", p11_get_ckr(rc));",
          "95:     else",
          "",
          "[Added Lines]",
          "93:     if (rc != CKR_OK) {",
          "94:         if (is_rejected_by_policy(rc, session)) {",
          "95:             testcase_skip(\"DSA key generation is not allowed by policy\");",
          "96:             rc = CKR_OK;",
          "97:         } else {",
          "98:             testcase_fail(\"C_GenerateKeyPair rc=%s\", p11_get_ckr(rc));",
          "99:         }",
          "100:     } else {",
          "102:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:     rc = funcs->C_GenerateKeyPair(session, &mech, publ_tmpl, 3, NULL, 0,",
          "144:                                   &publ_key, &priv_key);",
          "145:     if (rc != CKR_OK) {",
          "146:         testcase_error(\"C_GenerateKeyPair rc=%s\", p11_get_ckr(rc));",
          "147:         goto testcase_cleanup;",
          "148:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:         if (is_rejected_by_policy(rc, session)) {",
          "153:             testcase_skip(\"DSA key generation is not allowed by policy\");",
          "154:             goto testcase_cleanup;",
          "155:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "302:                               DSA1024_PRIVATE, sizeof(DSA1024_PRIVATE),",
          "303:                               &priv_key);",
          "304:     if (rc != CKR_OK) {",
          "305:         testcase_fail(\"C_CreateObject (DSA Private Key) failed rc=%s\",",
          "306:                       p11_get_ckr(rc));",
          "307:         goto testcase_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:         if (rc == CKR_POLICY_VIOLATION) {",
          "316:             testcase_skip(\"DSA key import is not allowed by policy\");",
          "317:             goto testcase_cleanup;",
          "318:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "313:                              DSA1024_BASE, sizeof(DSA1024_BASE),",
          "314:                              DSA1024_PUBLIC, sizeof(DSA1024_PUBLIC), &publ_key);",
          "315:     if (rc != CKR_OK) {",
          "316:         testcase_fail(\"C_CreateObject (DSA Public Key) failed rc=%s\",",
          "317:                       p11_get_ckr(rc));",
          "318:         goto testcase_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:         if (rc == CKR_POLICY_VIOLATION) {",
          "331:             testcase_skip(\"DSA key import is not allowed by policy\");",
          "332:             goto testcase_cleanup;",
          "333:         }",
          "",
          "---------------"
        ],
        "testcases/crypto/ec_func.c||testcases/crypto/ec_func.c": [
          "File: testcases/crypto/ec_func.c -> testcases/crypto/ec_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:                                       prv_attr_gen, prv_attr_gen_len,",
          "511:                                       &publ_keyA, &priv_keyA);",
          "512:         if (rc != CKR_OK) {",
          "513:             if (rc == CKR_MECHANISM_PARAM_INVALID ||",
          "514:                 rc == CKR_ATTRIBUTE_VALUE_INVALID ||",
          "515:                 rc == CKR_CURVE_NOT_SUPPORTED) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "513:             if (is_rejected_by_policy(rc, session)) {",
          "514:                 testcase_skip(\"EC key generation is not allowed by policy\");",
          "515:                 continue;",
          "516:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "541:                                       prv_attr_gen, prv_attr_gen_len,",
          "542:                                       &publ_keyB, &priv_keyB);",
          "543:         if (rc != CKR_OK) {",
          "544:             testcase_fail(\"C_GenerateKeyPair with valid input failed at i=%lu \"",
          "545:                           \"(%s), rc=%s\", i, der_ec_supported[i].name,",
          "546:                           p11_get_ckr(rc));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:             if (is_rejected_by_policy(rc, session)) {",
          "549:                 testcase_skip(\"EC key generation is not allowed by policy\");",
          "550:                 goto testcase_cleanup;",
          "551:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "706:                                           \"versions\\n\");",
          "707:                             continue;",
          "708:                         }",
          "710:                         testcase_fail(\"C_DeriveKey #1: rc = %s\",",
          "711:                                       p11_get_ckr(rc));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "717:                         if (is_rejected_by_policy(rc, session)) {",
          "718:                             testcase_skip(\"key derivation is not allowed by policy\");",
          "719:                             continue;",
          "720:                         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "755:                                 funcs->C_DestroyObject(session, secret_keyA);",
          "756:                             continue;",
          "757:                         }",
          "759:                         testcase_fail(\"C_DeriveKey #2: rc = %s\",",
          "760:                                       p11_get_ckr(rc));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "770:                         if (is_rejected_by_policy(rc, session)) {",
          "771:                             testcase_skip(\"key derivation is not allowed by policy\");",
          "772:                             if (secret_keyA != CK_INVALID_HANDLE)",
          "773:                                 funcs->C_DestroyObject(session, secret_keyA);",
          "774:                             continue;",
          "775:                         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "958:                                  ecdh_tv[i].pubkeyA, ecdh_tv[i].pubkey_len,",
          "959:                                  &priv_keyA, !pkey);",
          "960:         if (rc != CKR_OK) {",
          "961:             if (rc == CKR_CURVE_NOT_SUPPORTED) {",
          "962:                 testcase_skip(\"Slot %u doesn't support this curve: %s\",",
          "963:                               (unsigned int) SLOT_ID, ecdh_tv[i].name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "979:             if (rc == CKR_POLICY_VIOLATION) {",
          "980:                 testcase_skip(\"EC key import is not allowed by policy\");",
          "981:                 continue;",
          "982:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "974:                                 ecdh_tv[i].pubkeyA, ecdh_tv[i].pubkey_len,",
          "975:                                 &publ_keyA);",
          "976:         if (rc != CKR_OK) {",
          "977:             if (rc == CKR_CURVE_NOT_SUPPORTED) {",
          "978:                 testcase_skip(\"Slot %u doesn't support this curve: %s\",",
          "979:                               (unsigned int) SLOT_ID, ecdh_tv[i].name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "999:             if (rc == CKR_POLICY_VIOLATION) {",
          "1000:                 testcase_skip(\"EC key import is not allowed by policy\");",
          "1001:                 funcs->C_DestroyObject(session, priv_keyA);",
          "1002:                 continue;",
          "1003:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1543:                                       &publ_key, &priv_key);",
          "1544:         testcase_new_assertion();",
          "1545:         if (rc != CKR_OK) {",
          "1546:             if (rc == CKR_MECHANISM_PARAM_INVALID ||",
          "1547:                 rc == CKR_ATTRIBUTE_VALUE_INVALID ||",
          "1548:                 rc == CKR_CURVE_NOT_SUPPORTED) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1573:             if (is_rejected_by_policy(rc, session)) {",
          "1574:                 testcase_skip(\"EC key generation is not allowed by policy\");",
          "1575:                 continue;",
          "1576:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1666:         testcase_new_assertion();",
          "1667:         if (rc != CKR_OK) {",
          "1668:             if (rc == CKR_CURVE_NOT_SUPPORTED) {",
          "1669:                 testcase_skip(\"Slot %u doesn't support this curve: %s\",",
          "1670:                               (unsigned int) SLOT_ID, ec_tv[i].name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1699:             if (rc == CKR_POLICY_VIOLATION) {",
          "1700:                 testcase_skip(\"EC key import is not allowed by policy\");",
          "1701:                 continue;",
          "1702:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1695:         testcase_new_assertion();",
          "1696:         if (rc != CKR_OK) {",
          "1697:             if (rc == CKR_CURVE_NOT_SUPPORTED) {",
          "1698:                 testcase_skip(\"Slot %u doesn't support this curve: %s\",",
          "1699:                               (unsigned int) SLOT_ID, ec_tv[i].name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1732:             if (rc == CKR_POLICY_VIOLATION) {",
          "1733:                 testcase_skip(\"EC key import is not allowed by policy\");",
          "1734:                 funcs->C_DestroyObject(session, priv_key);",
          "1735:                 continue;",
          "1736:             }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1868:         testcase_new_assertion();",
          "1869:         if (rc != CKR_OK) {",
          "1870:             if (rc == CKR_CURVE_NOT_SUPPORTED) {",
          "1871:                 testcase_skip(\"Slot %u doesn't support this curve: %s\",",
          "1872:                               (unsigned int) SLOT_ID, ec_tv[i].name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1910:             if (rc == CKR_POLICY_VIOLATION) {",
          "1911:                 testcase_skip(\"EC key import is not allowed by policy\");",
          "1912:                 continue;",
          "1913:             }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1898:         testcase_new_assertion();",
          "1899:         if (rc != CKR_OK) {",
          "1900:             if (rc == CKR_CURVE_NOT_SUPPORTED) {",
          "1901:                 testcase_skip(\"Slot %u doesn't support this curve: %s\",",
          "1902:                               (unsigned int) SLOT_ID, ec_tv[i].name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1944:             if (rc == CKR_POLICY_VIOLATION) {",
          "1945:                 testcase_skip(\"EC key import is not allowed by policy\");",
          "1946:                 funcs->C_DestroyObject(session, priv_key);",
          "1947:                 continue;",
          "1948:             }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2182:                                        sizeof(priv_tmpl) / sizeof(CK_ATTRIBUTE),",
          "2183:                                        &priv_key);",
          "2184:             if (rc != CKR_OK) {",
          "2185:                 if (rc == CKR_CURVE_NOT_SUPPORTED) {",
          "2186:                     testcase_skip(\"Slot %u doesn't support this curve: %s\",",
          "2187:                                   (unsigned int) SLOT_ID, ec_tv[i].name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2234:                 if (is_rejected_by_policy(rc, session)) {",
          "2235:                     testcase_skip(\"EC key generation is not allowed by policy\");",
          "2236:                     continue;",
          "2237:                 }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2196:                                        sizeof(publ_tmpl) / sizeof(CK_ATTRIBUTE),",
          "2197:                                        &publ_key);",
          "2198:             if (rc != CKR_OK) {",
          "2199:                 testcase_error(\"C_CreateObject rc=%s\", p11_get_ckr(rc));",
          "2200:                 goto testcase_cleanup;",
          "2201:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2252:                 if (is_rejected_by_policy(rc, session)) {",
          "2253:                     testcase_skip(\"EC key generation is not allowed by policy\");",
          "2254:                     goto testcase_cleanup;",
          "2255:                 }",
          "",
          "---------------"
        ],
        "testcases/crypto/rsa_func.c||testcases/crypto/rsa_func.c": [
          "File: testcases/crypto/rsa_func.c -> testcases/crypto/rsa_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:                                        &publ_key, &priv_key);",
          "200:         if (rc != CKR_OK) {",
          "201:             testcase_error(\"generate_RSA_PKCS_KeyPair(), \"",
          "202:                            \"rc=%s\", p11_get_ckr(rc));",
          "203:             goto testcase_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:             if (rc == CKR_POLICY_VIOLATION) {",
          "202:                 testcase_skip(\"RSA key generation is not allowed by policy\");",
          "203:                 continue;",
          "204:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "501:                                   tsuite->tv[i].exp2_len,",
          "502:                                   tsuite->tv[i].coef_len, &priv_key);",
          "503:         if (rc != CKR_OK) {",
          "504:             testcase_error(\"create_RSAPrivateKey(), rc=%s\", p11_get_ckr(rc));",
          "505:             goto error;",
          "506:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:             if (rc == CKR_POLICY_VIOLATION) {",
          "510:                 testcase_skip(\"RSA key import is not allowed by policy\");",
          "511:                 continue;",
          "512:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "512:                                  tsuite->tv[i].mod_len,",
          "513:                                  tsuite->tv[i].pubexp_len, &publ_key);",
          "514:         if (rc != CKR_OK) {",
          "515:             testcase_error(\"create_RSAPublicKey(), rc=%s\", p11_get_ckr(rc));",
          "516:             goto error;",
          "517:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:             if (rc == CKR_POLICY_VIOLATION) {",
          "526:                 testcase_skip(\"RSA key import is not allowed by policy\");",
          "527:                 funcs->C_DestroyObject(session, priv_key);",
          "528:                 continue;",
          "529:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "774:                                        tsuite->tv[i].publ_exp_len,",
          "775:                                        &publ_key, &priv_key);",
          "776:         if (rc != CKR_OK) {",
          "777:             testcase_error(\"generate_RSA_PKCS_KeyPair(), \"",
          "778:                            \"rc=%s\", p11_get_ckr(rc));",
          "779:             goto testcase_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "793:             if (rc == CKR_POLICY_VIOLATION) {",
          "794:                 testcase_skip(\"RSA key generation is not allowed by policy\");",
          "795:                 continue;",
          "796:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "999:                                        tsuite->tv[i].publ_exp_len, &publ_key,",
          "1000:                                        &priv_key);",
          "1001:         if (rc != CKR_OK) {",
          "1002:             testcase_error(\"generate_RSA_PKCS_KeyPair(), \"",
          "1003:                            \"rc=%s\", p11_get_ckr(rc));",
          "1004:             goto error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1023:             if (rc == CKR_POLICY_VIOLATION) {",
          "1024:                 testcase_skip(\"RSA key generation is not allowed by policy\");",
          "1025:                 continue;",
          "1026:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1017:             h_len = MAX_HASH_SIZE;",
          "1019:             rc = funcs->C_DigestInit(session, &mech);",
          "1020:             if (rc != CKR_OK) {",
          "1021:                 testcase_error(\"C_DigestInit rc=%s\", p11_get_ckr(rc));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1045:             if (!mech_supported(slot_id, mech.mechanism)) {",
          "1046:                 testcase_skip(\"Slot %u doesn't support %s (0x%x)\",",
          "1047:                               (unsigned int)slot_id,",
          "1048:                               mech_to_str(mech.mechanism),",
          "1049:                               (unsigned int)mech.mechanism);",
          "1050:                 goto cleanup;",
          "1051:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1073:         else",
          "1074:             testcase_fail(\"C_Verify(), rc=%s\", p11_get_ckr(rc));",
          "1077:         rc = funcs->C_DestroyObject(session, publ_key);",
          "1078:         if (rc != CKR_OK) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1110: cleanup:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1272:         keygen_mech = tsuite->tv[i].keytype;",
          "1275:         wrap_mech = tsuite->mech;",
          "1276:         if (wrap_mech.mechanism == CKM_RSA_PKCS_OAEP) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1309:         if (!mech_supported(slot_id, keygen_mech.mechanism)) {",
          "1310:             testcase_skip(\"Slot %u doesn't support %s (0x%x)\",",
          "1311:                           (unsigned int)slot_id,",
          "1312:                           mech_to_str(keygen_mech.mechanism),",
          "1313:                           (unsigned int)keygen_mech.mechanism);",
          "1314:             continue;",
          "1315:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1278:             wrap_mech.pParameter = &oaep_params;",
          "1279:             wrap_mech.ulParameterLen = sizeof(CK_RSA_PKCS_OAEP_PARAMS);",
          "1280:         }",
          "1282:         memset(cipher, 0, sizeof(cipher));",
          "1283:         memset(re_cipher, 0, sizeof(re_cipher));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1324:         if (!mech_supported(slot_id, wrap_mech.mechanism)) {",
          "1325:             testcase_skip(\"Slot %u doesn't support %s (0x%x)\",",
          "1326:                           (unsigned int)slot_id,",
          "1327:                           mech_to_str(wrap_mech.mechanism),",
          "1328:                           (unsigned int)wrap_mech.mechanism);",
          "1329:             continue;",
          "1330:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1291:                                        tsuite->tv[i].publ_exp_len,",
          "1292:                                        &publ_key, &priv_key);",
          "1293:         if (rc != CKR_OK) {",
          "1294:             testcase_error(\"C_GenerateKeyPair() rc = %s\", p11_get_ckr(rc));",
          "1295:             goto testcase_cleanup;",
          "1296:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1345:             if (rc == CKR_POLICY_VIOLATION) {",
          "1346:                 testcase_skip(\"RSA key generation is not allowed by policy\");",
          "1347:                 continue;",
          "1348:             }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1298:         rc = generate_SecretKey(session, tsuite->tv[i].keylen,",
          "1299:                                 &keygen_mech, &secret_key);",
          "1300:         if (rc != CKR_OK) {",
          "1301:             testcase_error(\"generate_SecretKey(), rc=%s\", p11_get_ckr(rc));",
          "1302:             goto error;",
          "1303:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1357:             if (rc == CKR_POLICY_VIOLATION) {",
          "1358:                 testcase_skip(\"Generic secret key generation is not allowed by policy\");",
          "1359:                 funcs->C_DestroyObject(session, priv_key);",
          "1360:                 continue;",
          "1361:             }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1656:                                   tsuite->tv[i].exp2_len,",
          "1657:                                   tsuite->tv[i].coef_len, &priv_key);",
          "1658:         if (rc != CKR_OK) {",
          "1659:             testcase_error(\"create_RSAPrivateKey(), rc=%s\", p11_get_ckr(rc));",
          "1660:             goto error;",
          "1661:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1720:             if (rc == CKR_POLICY_VIOLATION) {",
          "1721:                 testcase_skip(\"RSA key import is not allowed by policy\");",
          "1722:                 continue;",
          "1723:             }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1818:                                  tsuite->tv[i].pubexp_len, &publ_key);",
          "1820:         if (rc != CKR_OK) {",
          "1821:             testcase_error(\"create_RSAPublicKey(), rc=%s\", p11_get_ckr(rc));",
          "1822:             goto error;",
          "1823:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1887:             if (rc == CKR_POLICY_VIOLATION) {",
          "1888:                 testcase_skip(\"RSA key import is not allowed by policy\");",
          "1889:                 continue;",
          "1890:             }",
          "",
          "---------------"
        ],
        "testcases/crypto/rsaupdate_func.c||testcases/crypto/rsaupdate_func.c": [
          "File: testcases/crypto/rsaupdate_func.c -> testcases/crypto/rsaupdate_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:                                        tsuite->tv[i].publ_exp_len,",
          "169:                                        &publ_key, &priv_key);",
          "170:         if (rc != CKR_OK) {",
          "171:             testcase_error(\"generate_RSA_PKCS_KeyPair(), rc=%s\", p11_get_ckr(rc));",
          "172:             goto testcase_cleanup;",
          "173:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:             if (rc == CKR_POLICY_VIOLATION) {",
          "172:                 testcase_skip(\"RSA key generation is not allowed by policy\");",
          "173:                 continue;",
          "174:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424:                                        tsuite->tv[i].publ_exp_len,",
          "425:                                        &publ_key, &priv_key);",
          "426:         if (rc != CKR_OK) {",
          "427:             testcase_error(\"generate_RSA_PKCS_KeyPair(), rc=%s\", p11_get_ckr(rc));",
          "428:             goto error;",
          "429:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:             if (rc == CKR_POLICY_VIOLATION) {",
          "433:                 testcase_skip(\"RSA key generation is not allowed by policy\");",
          "434:                 continue;",
          "435:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "710:                                  tsuite->tv[i].pubexp_len, &publ_key);",
          "712:         if (rc != CKR_OK) {",
          "713:             testcase_error(\"create_RSAPublicKey(), rc=%s\", p11_get_ckr(rc));",
          "714:             goto error;",
          "715:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723:             if (rc == CKR_POLICY_VIOLATION) {",
          "724:                 testcase_skip(\"RSA key import is not allowed by policy\");",
          "725:                 continue;",
          "726:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "938:                                   tsuite->tv[i].exp2_len,",
          "939:                                   tsuite->tv[i].coef_len, &priv_key);",
          "940:         if (rc != CKR_OK) {",
          "941:             testcase_error(\"create_RSAPrivateKey(), rc=%s\", p11_get_ckr(rc));",
          "942:             goto error;",
          "943:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "956:             if (rc == CKR_POLICY_VIOLATION) {",
          "957:                 testcase_skip(\"RSA key import is not allowed by policy\");",
          "958:                 continue;",
          "959:             }",
          "",
          "---------------"
        ],
        "testcases/crypto/ssl3_func.c||testcases/crypto/ssl3_func.c": [
          "File: testcases/crypto/ssl3_func.c -> testcases/crypto/ssl3_func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     rc = funcs->C_CreateObject(session, key_attribs, 4, &h_key);",
          "78:     if (rc != CKR_OK) {",
          "79:         testcase_error(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "80:         return rc;",
          "81:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:         if (is_rejected_by_policy(rc, session)) {",
          "80:             testcase_skip(\"key import is not allowed by policy\");",
          "81:             return CKR_OK;",
          "82:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:     rc = funcs->C_CreateObject(session, key_attribs, 4, &h_key);",
          "247:     if (rc != CKR_OK) {",
          "248:         testcase_error(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "249:         return rc;",
          "250:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:         if (is_rejected_by_policy(rc, session)) {",
          "253:             testcase_skip(\"key import is not allowed by policy\");",
          "254:             return CKR_OK;",
          "255:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "323:     testcase_new_assertion();",
          "324:     rc = funcs->C_GenerateKey(session, &mech, NULL, 0, &h_key);",
          "326:         testcase_fail(\"C_GenerateKey() rc = %s\", p11_get_ckr(rc));",
          "328:         testcase_pass(\"Successfully generated a generic secret key.\");",
          "330:     if (funcs->C_DestroyObject(session, h_key) != CKR_OK)",
          "331:         testcase_error(\"C_DestroyObject() failed\");",
          "",
          "[Removed Lines]",
          "325:     if (rc != CKR_OK)",
          "327:     else",
          "",
          "[Added Lines]",
          "333:     if (rc != CKR_OK) {",
          "334:         if (is_rejected_by_policy(rc, session)) {",
          "335:             testcase_skip(\"key generation is not allowed by policy\");",
          "336:             return CKR_OK;",
          "337:         }",
          "339:     } else {",
          "341:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "388:     testcase_new_assertion();",
          "389:     rc = funcs->C_GenerateKey(session, &mech, pm_tmpl, 2, &h_pm_secret);",
          "390:     if (rc != CKR_OK) {",
          "391:         testcase_fail(\"C_GenerateKey() rc= %s\", p11_get_ckr(rc));",
          "392:         goto done;",
          "393:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:         if (is_rejected_by_policy(rc, session)) {",
          "405:             testcase_skip(\"key generation is not allowed by policy\");",
          "406:             return CKR_OK;",
          "407:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "416:     testcase_new_assertion();",
          "417:     rc = funcs->C_DeriveKey(session, &mech, h_pm_secret, m_tmpl, 2, &h_mk);",
          "418:     if (rc != CKR_OK) {",
          "419:         testcase_fail(\"C_DeriveKey() rc= %s\", p11_get_ckr(rc));",
          "420:         goto done;",
          "421:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:         if (is_rejected_by_policy(rc, session)) {",
          "437:             testcase_skip(\"Key derivation is not allowed by policy\");",
          "438:             goto done;",
          "439:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "541:     rc = funcs->C_GenerateKey(session, &mech, pm_tmpl,",
          "542:                               sizeof(pm_tmpl) / sizeof(*pm_tmpl), &h_pm_secret);",
          "543:     if (rc != CKR_OK) {",
          "544:         testcase_fail(\"C_GenerateKey() rc= %s\", p11_get_ckr(rc));",
          "545:         goto done;",
          "546:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "565:         if (is_rejected_by_policy(rc, session)) {",
          "566:             testcase_skip(\"Key generation is not allowed by policy\");",
          "567:             goto done;",
          "568:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "563:     rc = funcs->C_DeriveKey(session, &mech, h_pm_secret, incomplete_tmpl,",
          "564:                             sizeof(incomplete_tmpl) / sizeof(*incomplete_tmpl),",
          "565:                             NULL);",
          "566:     if (rc != CKR_TEMPLATE_INCOMPLETE) {",
          "567:         testcase_fail(\"C_DeriveKey did not recognize missing attributes.\");",
          "568:         goto done;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "591:     if (is_rejected_by_policy(rc, session)) {",
          "592:         testcase_skip(\"key derivation is not allowed by policy\");",
          "593:         goto done;",
          "594:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "580:                             sizeof(complete_tmpl) / sizeof(*complete_tmpl),",
          "581:                             NULL);",
          "582:     if (rc != CKR_OK) {",
          "583:         testcase_fail(\"C_DeriveKey() rc= %s\", p11_get_ckr(rc));",
          "584:         goto done;",
          "585:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612:         if (is_rejected_by_policy(rc, session)) {",
          "613:             testcase_skip(\"key derivation is not allowed by policy\");",
          "614:             goto done;",
          "615:         }",
          "",
          "---------------"
        ],
        "testcases/misc_tests/cca_export_import_test.c||testcases/misc_tests/cca_export_import_test.c": [
          "File: testcases/misc_tests/cca_export_import_test.c -> testcases/misc_tests/cca_export_import_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:     rc = create_DESKey(session, key, sizeof(key), &hkey);",
          "381:     if (rc != CKR_OK) {",
          "382:  testcase_error(\"create_DESKey() rc=%s\", p11_get_ckr(rc));",
          "383:  goto testcase_cleanup;",
          "384:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382:         if (rc == CKR_POLICY_VIOLATION) {",
          "383:             testcase_skip(\"DES key generation is not allowed by policy\");",
          "384:             goto testcase_cleanup;",
          "385:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489:     rc = create_DES3Key(session, key, sizeof(key), &hkey);",
          "490:     if (rc != CKR_OK) {",
          "491:  testcase_error(\"create_DES3Key() rc=%s\", p11_get_ckr(rc));",
          "492:  goto testcase_cleanup;",
          "493:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "496:         if (rc == CKR_POLICY_VIOLATION) {",
          "497:             testcase_skip(\"DES3 key generation is not allowed by policy\");",
          "498:             goto testcase_cleanup;",
          "499:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "602:  rc = create_AESKey(session, CK_TRUE, key, keylen, &hkey);",
          "603:  if (rc != CKR_OK) {",
          "604:      testcase_error(\"create_AESKey() rc=%s\", p11_get_ckr(rc));",
          "605:      goto error;",
          "606:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:         if (rc == CKR_POLICY_VIOLATION) {",
          "615:             testcase_skip(\"AES key generation is not allowed by policy\");",
          "616:             continue;",
          "617:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "793:         goto out;",
          "794:     }",
          "796:     testcase_rw_session();",
          "797:     testcase_user_login();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811:     if (!mech_supported(SLOT_ID, mech.mechanism)) {",
          "812:         testcase_skip(\"this slot does not support CKM_SHA_1_HMAC\");",
          "813:         goto out;",
          "814:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "805:  rc = create_GenericSecretKey(session, key, keybits[i] / 8, &hkey);",
          "806:  if (rc != CKR_OK) {",
          "807:      testcase_error(\"create_GenericSecretKey() rc=%s\", p11_get_ckr(rc));",
          "808:      goto error;",
          "809:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "827:         if (rc == CKR_POLICY_VIOLATION) {",
          "828:             testcase_skip(\"Generic Secret key import is not allowed by policy\");",
          "829:             continue;",
          "830:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "909:         testcase_skip(\"this slot is not a CCA token\");",
          "910:         goto out;",
          "911:     }",
          "913:     testcase_rw_session();",
          "914:     testcase_user_login();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "937:     if (!mech_supported(SLOT_ID, CKM_RSA_PKCS_KEY_PAIR_GEN)) {",
          "938:             testcase_skip(\"this slot does not support CKM_RSA_PKCS_KEY_PAIR_GEN\");",
          "939:             goto out;",
          "940:         }",
          "941:     if (!mech_supported(SLOT_ID, mech.mechanism)) {",
          "942:         testcase_skip(\"this slot does not support CKM_RSA_PKCS\");",
          "943:         goto out;",
          "944:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "924:            exp, sizeof(exp),",
          "925:            &publ_key, &priv_key);",
          "926:  if (rc != CKR_OK) {",
          "927:      testcase_error(\"generate_RSA_PKCS_KeyPair() rc=%s\", p11_get_ckr(rc));",
          "928:      goto error;",
          "929:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "960:         if (rc == CKR_POLICY_VIOLATION) {",
          "961:             testcase_skip(\"RSA key generation is not allowed by policy\");",
          "962:             goto error;",
          "963:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1190:      goto error;",
          "1191:  }",
          "1192:  if (rc != CKR_OK) {",
          "1193:      testcase_error(\"generate_EC_KeyPair() rc=%s\", p11_get_ckr(rc));",
          "1194:      goto error;",
          "1195:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1231:         if (rc == CKR_POLICY_VIOLATION) {",
          "1232:             testcase_skip(\"ECC key generation is not allowed by policy\");",
          "1233:             goto error;",
          "1234:         }",
          "",
          "---------------"
        ],
        "testcases/misc_tests/fork.c||testcases/misc_tests/fork.c": [
          "File: testcases/misc_tests/fork.c -> testcases/misc_tests/fork.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"pkcs11types.h\"",
          "27: #include \"regress.h\"",
          "29: CK_BYTE user_pin[128];",
          "30: CK_ULONG user_pin_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"common.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     rv = funcs->C_GetMechanismInfo(slot_id, CKM_RSA_PKCS_KEY_PAIR_GEN,",
          "54:                                    &rsakeygeninfo);",
          "55:     if (rv != CKR_OK) {",
          "56:         testcase_fail(\"C_GetMechanismInfo(CKM_RSA_PKCS_KEY_PAIR_GEN) rc = %s\", p11_get_ckr(rv));",
          "58:     }",
          "60:     mech.mechanism = CKM_RSA_PKCS_KEY_PAIR_GEN;",
          "",
          "[Removed Lines]",
          "57:         return rv;;",
          "",
          "[Added Lines]",
          "57:         if (rv == CKR_MECHANISM_INVALID) {",
          "58:             testcase_skip(\"Mechanism CKM_RSA_PKCS_KEY_PAIR_GEN not supported\");",
          "59:             return CKR_POLICY_VIOLATION;",
          "60:         }",
          "62:         return rv;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:     rv = funcs->C_GenerateKeyPair(sess, &mech, pub_tmpl, 4, priv_tmpl, 2,",
          "65:                                   hPubKey, hPrivKey);",
          "66:     if (rv != CKR_OK) {",
          "67:         testcase_fail(\"C_GenerateKeyPair rc = %s\", p11_get_ckr(rv));",
          "68:         return rv;",
          "69:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:         if (is_rejected_by_policy(rv, sess)) {",
          "73:             testcase_skip(\"Key generation is not allowed by policy\");",
          "74:             return CKR_POLICY_VIOLATION;",
          "75:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:     rv = do_GenerateTokenRSAKeyPair(session, (CK_BYTE *)\"RSA-1024-CLIENT\",",
          "155:                                     1024, &hPubKey, &hPrivKey);",
          "156:     if (rv != CKR_OK) {",
          "157:         testcase_fail(\"do_GenerateTokenRSAKeyPair (client) rc = %s\", p11_get_ckr(rv));",
          "158:         goto close_session;",
          "159:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:         if (rv == CKR_POLICY_VIOLATION) {",
          "168:             rv = 0;",
          "169:             goto close_session;",
          "170:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "282:     rv = do_GenerateTokenRSAKeyPair(session, (CK_BYTE *)\"RSA-1024-PARENT\",",
          "283:                                     1024, &hPubKey, &hPrivKey);",
          "284:     if (rv != CKR_OK) {",
          "285:         testcase_fail(\"do_GenerateTokenRSAKeyPair (parent) rc = %s\", p11_get_ckr(rv));",
          "286:         goto close_session;",
          "287:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:         if (rv == CKR_POLICY_VIOLATION) {",
          "300:             ret = 0;",
          "301:             goto close_session;",
          "302:         }",
          "",
          "---------------"
        ],
        "testcases/misc_tests/obj_mgmt.c||testcases/misc_tests/obj_mgmt.c": [
          "File: testcases/misc_tests/obj_mgmt.c -> testcases/misc_tests/obj_mgmt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     rc = funcs->C_CreateObject(h_session, data_attribs, 4, &h_data);",
          "131:     if (rc != CKR_OK) {",
          "132:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "133:         return rc;",
          "134:     }",
          "136:     rc = funcs->C_CreateObject(h_session, cert_attribs, 6, &h_cert);",
          "137:     if (rc != CKR_OK) {",
          "138:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "139:         return rc;",
          "140:     }",
          "142:     rc = funcs->C_CreateObject(h_session, key_attribs, 5, &h_key);",
          "143:     if (rc != CKR_OK) {",
          "144:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "145:         return rc;",
          "146:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:         if (is_rejected_by_policy(rc, h_session)) {",
          "133:             testcase_skip(\"Key import is not allowed by policy\");",
          "134:             funcs->C_CloseAllSessions(slot_id);",
          "135:             return CKR_OK;",
          "136:         }",
          "143:         if (is_rejected_by_policy(rc, h_session)) {",
          "144:             testcase_skip(\"Key import is not allowed by policy\");",
          "145:             funcs->C_CloseAllSessions(slot_id);",
          "146:             return CKR_OK;",
          "147:         }",
          "154:         if (is_rejected_by_policy(rc, h_session)) {",
          "155:             testcase_skip(\"Key import is not allowed by policy\");",
          "156:             funcs->C_CloseAllSessions(slot_id);",
          "157:             return CKR_OK;",
          "158:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:     rc = funcs->C_CreateObject(h_session, data_attribs, 3, &h_data);",
          "268:     if (rc != CKR_OK) {",
          "269:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "270:         return rc;",
          "271:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:         if (is_rejected_by_policy(rc, h_session)) {",
          "285:             testcase_skip(\"Key import is not allowed by policy\");",
          "286:             return CKR_OK;",
          "287:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274:     rc = funcs->C_CreateObject(h_session, data_attribs2, 4, &h_data2);",
          "275:     if (rc != CKR_ATTRIBUTE_READ_ONLY) {",
          "276:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "277:         return rc;",
          "278:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:         if (is_rejected_by_policy(rc, h_session)) {",
          "296:             testcase_skip(\"Key import is not allowed by policy\");",
          "297:             return CKR_OK;",
          "298:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "490:     rc = funcs->C_CreateObject(h_session, cert_attribs, 6, &h_cert);",
          "491:     if (rc != CKR_OK) {",
          "492:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "493:         return rc;",
          "494:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515:         if (is_rejected_by_policy(rc, h_session)) {",
          "516:             testcase_skip(\"Key import is not allowed by policy\");",
          "517:             return CKR_OK;",
          "518:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "728:     rc = funcs->C_CreateObject(h_session, cert1_attribs, 6, &h_cert1);",
          "729:     if (rc != CKR_OK) {",
          "730:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "731:         return rc;",
          "732:     }",
          "734:     rc = funcs->C_CreateObject(h_session, cert2_attribs, 6, &h_cert2);",
          "735:     if (rc != CKR_OK) {",
          "736:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "737:         return rc;",
          "738:     }",
          "740:     rc = funcs->C_CreateObject(h_session, cert3_attribs, 6, &h_cert3);",
          "741:     if (rc != CKR_OK) {",
          "742:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "743:         return rc;",
          "744:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "757:         if (is_rejected_by_policy(rc, h_session)) {",
          "758:             testcase_skip(\"Key import is not allowed by policy\");",
          "759:             return CKR_OK;",
          "760:         }",
          "767:         if (is_rejected_by_policy(rc, h_session)) {",
          "768:             testcase_skip(\"Key import is not allowed by policy\");",
          "769:             return CKR_OK;",
          "770:         }",
          "777:         if (is_rejected_by_policy(rc, h_session)) {",
          "778:             testcase_skip(\"Key import is not allowed by policy\");",
          "779:             return CKR_OK;",
          "780:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "973:     rc = funcs->C_CreateObject(h_session, cert1_attribs, 7, &h_cert1);",
          "974:     if (rc != CKR_OK) {",
          "975:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "976:         return rc;",
          "977:     }",
          "979:     rc = funcs->C_CreateObject(h_session, cert2_attribs, 7, &h_cert2);",
          "980:     if (rc != CKR_OK) {",
          "981:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "982:         return rc;",
          "983:     }",
          "985:     rc = funcs->C_CreateObject(h_session, cert3_attribs, 7, &h_cert3);",
          "986:     if (rc != CKR_OK) {",
          "987:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "988:         return rc;",
          "989:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1014:         if (is_rejected_by_policy(rc, h_session)) {",
          "1015:             testcase_skip(\"Key import is not allowed by policy\");",
          "1016:             return CKR_OK;",
          "1017:         }",
          "1024:         if (is_rejected_by_policy(rc, h_session)) {",
          "1025:             testcase_skip(\"Key import is not allowed by policy\");",
          "1026:             return CKR_OK;",
          "1027:         }",
          "1034:         if (is_rejected_by_policy(rc, h_session)) {",
          "1035:             testcase_skip(\"Key import is not allowed by policy\");",
          "1036:             return CKR_OK;",
          "1037:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1340:     rc = funcs->C_CreateObject(h_session, obj1_template, 4, &h_obj1);",
          "1341:     if (rc != CKR_OK) {",
          "1342:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "1343:         return rc;",
          "1344:     }",
          "1346:     rc = funcs->C_CreateObject(h_session, obj2_template, 5, &h_obj2);",
          "1347:     if (rc != CKR_OK) {",
          "1348:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "1349:         goto destroy_1;",
          "1350:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1393:         if (is_rejected_by_policy(rc, h_session)) {",
          "1394:             testcase_skip(\"Key import is not allowed by policy\");",
          "1395:             return CKR_OK;",
          "1396:         }",
          "1403:         if (is_rejected_by_policy(rc, h_session)) {",
          "1404:             testcase_skip(\"Key import is not allowed by policy\");",
          "1405:             return CKR_OK;",
          "1406:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1355:     rc = funcs->C_CreateObject(h_session, counter1_template, 6, &h_counter1);",
          "1356:     if (rc != CKR_ATTRIBUTE_READ_ONLY) {",
          "1357:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "1358:         goto destroy_2;",
          "1359:     }",
          "1361:     rc = funcs->C_CreateObject(h_session, clock_template, 4, &h_clock);",
          "1362:     if (rc != CKR_OK) {",
          "1363:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "1364:         goto destroy_2;",
          "1365:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1416:         if (is_rejected_by_policy(rc, h_session)) {",
          "1417:             testcase_skip(\"Key import is not allowed by policy\");",
          "1418:             return CKR_OK;",
          "1419:         }",
          "1426:         if (is_rejected_by_policy(rc, h_session)) {",
          "1427:             testcase_skip(\"Key import is not allowed by policy\");",
          "1428:             return CKR_OK;",
          "1429:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1547:     rc = funcs->C_CreateObject(h_session, profile1_template, 2, &h_obj1);",
          "1548:     if (rc != CKR_OK) {",
          "1549:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "1550:         return rc;",
          "1551:     }",
          "1552:     rc = funcs->C_CreateObject(h_session, profile2_template, 1, &h_obj2);",
          "1553:     if (rc != CKR_OK) {",
          "1554:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "1555:         goto destroy_1;",
          "1556:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1616:         if (is_rejected_by_policy(rc, h_session)) {",
          "1617:             testcase_skip(\"Key import is not allowed by policy\");",
          "1618:             return CKR_OK;",
          "1619:         }",
          "1625:         if (is_rejected_by_policy(rc, h_session)) {",
          "1626:             testcase_skip(\"Key import is not allowed by policy\");",
          "1627:             return CKR_OK;",
          "1628:         }",
          "",
          "---------------"
        ],
        "testcases/misc_tests/obj_mgmt_lock.c||testcases/misc_tests/obj_mgmt_lock.c": [
          "File: testcases/misc_tests/obj_mgmt_lock.c -> testcases/misc_tests/obj_mgmt_lock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     rc = funcs->C_CreateObject(h_session, data_attribs, 4, &h_data);",
          "99:     if (rc != CKR_OK) {",
          "100:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "101:         goto done;",
          "102:     }",
          "104:     rc = funcs->C_CreateObject(h_session, cert_attribs, 6, &h_cert);",
          "105:     if (rc != CKR_OK) {",
          "106:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "107:         goto done;",
          "108:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:         if (is_rejected_by_policy(rc, h_session)) {",
          "101:             testcase_skip(\"Key import is not allowed by policy\");",
          "102:             rc = CKR_OK;",
          "103:             goto done;",
          "104:         }",
          "111:         if (is_rejected_by_policy(rc, h_session)) {",
          "112:             testcase_skip(\"Key import is not allowed by policy\");",
          "113:             rc = CKR_OK;",
          "114:             goto done;",
          "115:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:     rc = funcs->C_CreateObject(h_session, data_attribs, 3, &h_data);",
          "211:     if (rc != CKR_OK) {",
          "212:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "213:         goto done;",
          "214:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:         if (is_rejected_by_policy(rc, h_session)) {",
          "223:             testcase_skip(\"Key import is not allowed by policy\");",
          "224:             rc = CKR_OK;",
          "225:             goto done;",
          "226:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:     rc = funcs->C_CreateObject(h_session, cert_attribs, 6, &h_cert);",
          "385:     if (rc != CKR_OK) {",
          "386:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "387:         goto error;",
          "388:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:         if (is_rejected_by_policy(rc, h_session)) {",
          "402:             testcase_skip(\"Key import is not allowed by policy\");",
          "403:             rc = CKR_OK;",
          "404:             goto done;",
          "405:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "596:     rc = funcs->C_CreateObject(h_session, cert1_attribs, 6, &h_cert1);",
          "597:     if (rc != CKR_OK) {",
          "598:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "599:         goto done;",
          "600:     }",
          "602:     rc = funcs->C_CreateObject(h_session, cert2_attribs, 6, &h_cert2);",
          "603:     if (rc != CKR_OK) {",
          "604:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "605:         goto destroy_1;",
          "606:     }",
          "608:     rc = funcs->C_CreateObject(h_session, cert3_attribs, 6, &h_cert3);",
          "609:     if (rc != CKR_OK) {",
          "610:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "611:         goto destroy_2;",
          "612:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "618:         if (is_rejected_by_policy(rc, h_session)) {",
          "619:             testcase_skip(\"Key import is not allowed by policy\");",
          "620:             rc = CKR_OK;",
          "621:             goto done;",
          "622:         }",
          "629:         if (is_rejected_by_policy(rc, h_session)) {",
          "630:             testcase_skip(\"Key import is not allowed by policy\");",
          "631:             rc = CKR_OK;",
          "632:             goto done;",
          "633:         }",
          "640:         if (is_rejected_by_policy(rc, h_session)) {",
          "641:             testcase_skip(\"Key import is not allowed by policy\");",
          "642:             rc = CKR_OK;",
          "643:             goto done;",
          "644:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "826:     rc = funcs->C_CreateObject(h_session, cert1_attribs, 7, &h_cert1);",
          "827:     if (rc != CKR_OK) {",
          "828:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "829:         goto done;",
          "830:     }",
          "832:     rc = funcs->C_CreateObject(h_session, cert2_attribs, 7, &h_cert2);",
          "833:     if (rc != CKR_OK) {",
          "834:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "835:         goto destroy_1;",
          "836:     }",
          "838:     rc = funcs->C_CreateObject(h_session, cert3_attribs, 7, &h_cert3);",
          "839:     if (rc != CKR_OK) {",
          "840:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "841:         goto destroy_2;",
          "842:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "863:         if (is_rejected_by_policy(rc, h_session)) {",
          "864:             testcase_skip(\"Key import is not allowed by policy\");",
          "865:             rc = CKR_OK;",
          "866:             goto done;",
          "867:         }",
          "874:         if (is_rejected_by_policy(rc, h_session)) {",
          "875:             testcase_skip(\"Key import is not allowed by policy\");",
          "876:             rc = CKR_OK;",
          "877:             goto done;",
          "878:         }",
          "885:         if (is_rejected_by_policy(rc, h_session)) {",
          "886:             testcase_skip(\"Key import is not allowed by policy\");",
          "887:             rc = CKR_OK;",
          "888:             goto done;",
          "889:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1114:     if ((rc = funcs->C_CreateObject(h_session, obj1_template,",
          "1115:                                     4, &h_obj1)) != CKR_OK) {",
          "1116:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "1117:         goto session_close;",
          "1118:     }",
          "1120:     if ((rc = funcs->C_CreateObject(h_session, obj2_template,",
          "1121:                                     5, &h_obj2)) != CKR_OK) {",
          "1122:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "1123:         goto destroy_1;",
          "1124:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1166:         if (is_rejected_by_policy(rc, h_session)) {",
          "1167:             testcase_skip(\"Key import is not allowed by policy\");",
          "1168:             rc = CKR_OK;",
          "1169:             goto session_close;",
          "1170:         }",
          "1177:         if (is_rejected_by_policy(rc, h_session)) {",
          "1178:             testcase_skip(\"Key import is not allowed by policy\");",
          "1179:             rc = CKR_OK;",
          "1180:             goto destroy_1;",
          "1181:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1129:     if ((rc = funcs->C_CreateObject(h_session, counter1_template, 6,",
          "1130:                                     &h_counter1)) != CKR_ATTRIBUTE_READ_ONLY) {",
          "1131:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "1132:         goto destroy_2;",
          "1133:     }",
          "1135:     if ((rc = funcs->C_CreateObject(h_session, clock_template,",
          "1136:                                     4, &h_clock)) != CKR_OK) {",
          "1137:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "1138:         goto destroy_2;",
          "1139:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1191:         if (is_rejected_by_policy(rc, h_session)) {",
          "1192:             testcase_skip(\"Key import is not allowed by policy\");",
          "1193:             rc = CKR_OK;",
          "1194:             goto destroy_2;",
          "1195:         }",
          "1202:         if (is_rejected_by_policy(rc, h_session)) {",
          "1203:             testcase_skip(\"Key import is not allowed by policy\");",
          "1204:             rc = CKR_OK;",
          "1205:             goto destroy_2;",
          "1206:         }",
          "",
          "---------------"
        ],
        "testcases/misc_tests/reencrypt.c||testcases/misc_tests/reencrypt.c": [
          "File: testcases/misc_tests/reencrypt.c -> testcases/misc_tests/reencrypt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:     }",
          "431:     if (rc != CKR_OK) {",
          "432:         testcase_error(\"generate key-2 with mech %s (%u) in slot %lu \"",
          "433:                        \"failed, rc=%s\",",
          "434:                        mech_to_str(mech2->key_gen_mech.mechanism),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:         if (rc == CKR_POLICY_VIOLATION) {",
          "433:             testcase_skip(\"generate key-2 with mech %s (%u) in slot %lu \"",
          "434:                           \"is not allowed by policy\",",
          "435:                           mech_to_str(mech2->key_gen_mech.mechanism),",
          "436:                           (unsigned int)mech2->key_gen_mech.mechanism,",
          "437:                           slot_id);",
          "438:             goto testcase_cleanup;",
          "439:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "674:     }",
          "676:     if (rc != CKR_OK) {",
          "677:         testcase_error(\"generate key-1 with mech %s (%u) in slot %lu \"",
          "678:                        \"failed, rc=%s\",",
          "679:                        mech_to_str(mech1->key_gen_mech.mechanism),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:         if (rc == CKR_POLICY_VIOLATION) {",
          "687:             testcase_skip(\"generate key-1 with mech %s (%u) in slot %lu \"",
          "688:                           \"is not allowed by policy\",",
          "689:                           mech_to_str(mech1->key_gen_mech.mechanism),",
          "690:                           (unsigned int)mech1->key_gen_mech.mechanism,",
          "691:                           slot_id);",
          "692:             goto testcase_cleanup;",
          "693:         }",
          "",
          "---------------"
        ],
        "testcases/misc_tests/speed.c||testcases/misc_tests/speed.c": [
          "File: testcases/misc_tests/speed.c -> testcases/misc_tests/speed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "753:     rc = generate_AESKey(session, key_len, CK_TRUE, &mech, &h_key);",
          "754:     if (rc != CKR_OK) {",
          "755:         testcase_error(\"C_GenerateKey rc=%s\", p11_get_ckr(rc));",
          "756:         goto testcase_cleanup;",
          "757:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "755:         if (rc == CKR_POLICY_VIOLATION) {",
          "756:             testcase_skip(\"AES key generation is not allowed by policy\");",
          "757:             goto testcase_cleanup;",
          "758:         }",
          "",
          "---------------"
        ],
        "testcases/misc_tests/tok2tok_transport.c||testcases/misc_tests/tok2tok_transport.c": [
          "File: testcases/misc_tests/tok2tok_transport.c -> testcases/misc_tests/tok2tok_transport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "666:     }",
          "668:     if (rc != CKR_OK) {",
          "669:         testcase_error(\"generate to be wrapped key with mech %s (%u) in slot \"",
          "670:                        \"%lu failed, rc=%s\",",
          "671:                        mech_to_str(tsuite->wrapped_key_gen_mech.mechanism),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "669:         if (rc == CKR_POLICY_VIOLATION) {",
          "670:             testcase_skip(\"generate to be wrapped key with mech %s (%u) in slot \"",
          "671:                           \"%lu is not allowed by policy\",",
          "672:                           mech_to_str(tsuite->wrapped_key_gen_mech.mechanism),",
          "673:                           (unsigned int)tsuite->wrapped_key_gen_mech.mechanism,",
          "674:                           slot_id1);",
          "675:             rc = CKR_OK;",
          "676:             goto testcase_cleanup;",
          "677:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1034:         }",
          "1036:         rc = create_AESKey(session2, CK_TRUE, key, key_size, &sym_wrap_key2);",
          "1037:         break;",
          "1039:     case CKM_DES3_KEY_GEN:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1047:         if (rc == CKR_POLICY_VIOLATION) {",
          "1048:             testcase_skip(\"AES key import is not allowed by policy\");",
          "1049:             rc = CKR_OK;",
          "1050:             goto testcase_cleanup;",
          "1051:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1077:     }",
          "1079:     if (rc != CKR_OK) {",
          "1080:         testcase_error(\"generate wrapping key with mech %s (%u) in slot %lu \"",
          "1081:                        \"failed, rc=%s\",",
          "1082:                        mech_to_str(tsuite->wrapping_key_gen_mech.mechanism),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1095:         if (rc == CKR_POLICY_VIOLATION) {",
          "1096:             testcase_skip(\"generate wrapping key with mech %s (%u) in slot %lu \"",
          "1097:                           \"is not allowed by policy\",",
          "1098:                           mech_to_str(tsuite->wrapping_key_gen_mech.mechanism),",
          "1099:                           (unsigned int)tsuite->wrapping_key_gen_mech.mechanism,",
          "1100:                           slot_id2);",
          "1101:             rc = CKR_OK;",
          "1102:             goto testcase_cleanup;",
          "1103:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1141:     }",
          "1143:     if (rc != CKR_OK) {",
          "1144:         testcase_error(\"import wrapping key in slot %lu failed, rc=%s\",",
          "1145:                        slot_id1, p11_get_ckr(rc));",
          "1146:         goto testcase_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1169:         if (rc == CKR_POLICY_VIOLATION) {",
          "1170:             testcase_skip(\"import wrapping key in slot %lu is not allowed by policy\",",
          "1171:                           slot_id1);",
          "1172:             rc = CKR_OK;",
          "1173:             goto testcase_cleanup;",
          "1174:         }",
          "",
          "---------------"
        ],
        "testcases/pkcs11/attribute.c||testcases/pkcs11/attribute.c": [
          "File: testcases/pkcs11/attribute.c -> testcases/pkcs11/attribute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     rc = funcs->C_CreateObject(session, pub_template, 6, &obj_handle);",
          "171:     if (rc != CKR_OK) {",
          "172:         testcase_fail(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "173:         goto testcase_cleanup;",
          "174:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:         if (is_rejected_by_policy(rc, session)) {",
          "173:             testcase_skip(\"Key generation is not allowed by policy\");",
          "174:             goto testcase_cleanup;",
          "175:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:         testcase_pass(\"Successfully verified attribute-array elements.\");",
          "454: testcase_cleanup:",
          "463:     testcase_user_logout();",
          "464:     rv = funcs->C_CloseSession(session);",
          "",
          "[Removed Lines]",
          "455:     rv = funcs->C_DestroyObject(session, obj_handle);",
          "456:     if (rv != CKR_OK)",
          "457:         testcase_error(\"C_DestroyObject rv=%s\", p11_get_ckr(rv));",
          "459:     rv = funcs->C_DestroyObject(session, obj_handle_no_mod);",
          "460:      if (rv != CKR_OK)",
          "461:          testcase_error(\"C_DestroyObject rv=%s\", p11_get_ckr(rv));",
          "",
          "[Added Lines]",
          "459:     if (obj_handle != CK_INVALID_HANDLE) {",
          "460:         rv = funcs->C_DestroyObject(session, obj_handle);",
          "461:         if (rv != CKR_OK)",
          "462:             testcase_error(\"C_DestroyObject rv=%s\", p11_get_ckr(rv));",
          "463:     }",
          "465:     if (obj_handle_no_mod != CK_INVALID_HANDLE) {",
          "466:         rv = funcs->C_DestroyObject(session, obj_handle_no_mod);",
          "467:          if (rv != CKR_OK)",
          "468:              testcase_error(\"C_DestroyObject rv=%s\", p11_get_ckr(rv));",
          "469:     }",
          "",
          "---------------"
        ],
        "testcases/pkcs11/copyobjects.c||testcases/pkcs11/copyobjects.c": [
          "File: testcases/pkcs11/copyobjects.c -> testcases/pkcs11/copyobjects.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:     rc = funcs->C_CreateObject(session, aes_tmpl, 4, &keyobj);",
          "115:     if (rc != CKR_OK) {",
          "116:         testcase_error(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "117:         goto testcase_cleanup;",
          "118:     }",
          "120:     rc = funcs->C_CreateObject(session, aes_tmpl_no_copy, 5, &keyobj_no_copy);",
          "121:     if (rc != CKR_OK) {",
          "122:         testcase_error(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "123:         goto testcase_cleanup;",
          "124:     }",
          "126:     rc = funcs->C_CreateObject(session, aes_tmpl_copy, 5, &keyobj_copy);",
          "127:     if (rc != CKR_OK) {",
          "128:         testcase_error(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "129:         goto testcase_cleanup;",
          "130:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:         if (is_rejected_by_policy(rc, session)) {",
          "117:             testcase_skip(\"Key import is not allowed by policy\");",
          "118:             goto testcase_cleanup;",
          "119:         }",
          "126:         if (is_rejected_by_policy(rc, session)) {",
          "127:             testcase_skip(\"Key import is not allowed by policy\");",
          "128:             goto testcase_cleanup;",
          "129:         }",
          "136:         if (is_rejected_by_policy(rc, session)) {",
          "137:             testcase_skip(\"Key import is not allowed by policy\");",
          "138:             goto testcase_cleanup;",
          "139:         }",
          "",
          "---------------"
        ],
        "testcases/pkcs11/destroyobjects.c||testcases/pkcs11/destroyobjects.c": [
          "File: testcases/pkcs11/destroyobjects.c -> testcases/pkcs11/destroyobjects.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     for (i = 0; i < 4; i++) {",
          "86:         rc = funcs->C_CreateObject(session, aes_tmpl, 4, &keyobj[num_objs]);",
          "87:         if (rc != CKR_OK) {",
          "88:             testcase_error(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "89:             goto testcase_cleanup;",
          "90:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:             if (is_rejected_by_policy(rc, session)) {",
          "89:                 testcase_skip(\"Key generation is not allowed by policy\");",
          "90:                 goto testcase_cleanup;",
          "91:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         rc = funcs->C_GenerateKey(session, &mech, aesgen_tmpl, 5,",
          "101:                                   &keyobj[num_objs]);",
          "102:         if (rc != CKR_OK) {",
          "103:             testcase_error(\"C_GenerateObject() rc = %s\", p11_get_ckr(rc));",
          "104:             goto testcase_cleanup;",
          "105:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:             if (is_rejected_by_policy(rc, session)) {",
          "108:                 testcase_skip(\"Key generation is not allowed by policy\");",
          "109:                 goto testcase_cleanup;",
          "110:             }",
          "",
          "---------------"
        ],
        "testcases/pkcs11/findobjects.c||testcases/pkcs11/findobjects.c": [
          "File: testcases/pkcs11/findobjects.c -> testcases/pkcs11/findobjects.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:     rc = funcs->C_CreateObject(session, des3_tmpl, 4, &keyobj[num_objs]);",
          "88:     if (rc != CKR_OK) {",
          "89:         testcase_error(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "90:         return rc;",
          "91:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:         if (is_rejected_by_policy(rc, session)) {",
          "90:             testcase_skip(\"key import is not allowed by policy\");",
          "91:             return CKR_OK;",
          "92:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     rc = funcs->C_CreateObject(session, des3_tmpl, 4, &keyobj[num_objs]);",
          "95:     if (rc != CKR_OK) {",
          "96:         testcase_error(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "97:         goto testcase_cleanup;",
          "98:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:         if (is_rejected_by_policy(rc, session)) {",
          "101:             testcase_skip(\"EC key generation is not allowed by policy\");",
          "102:             goto testcase_cleanup;",
          "103:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:     rc = funcs->C_CreateObject(session, aes_tmpl, 5, &keyobj[num_objs]);",
          "103:     if (rc != CKR_OK) {",
          "104:         testcase_error(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "105:         goto testcase_cleanup;",
          "106:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:         if (is_rejected_by_policy(rc, session)) {",
          "113:             testcase_skip(\"EC key generation is not allowed by policy\");",
          "114:             goto testcase_cleanup;",
          "115:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:     rc = funcs->C_CreateObject(session, aes_tmpl, 5, &keyobj[num_objs]);",
          "110:     if (rc != CKR_OK) {",
          "111:         testcase_error(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "112:         goto testcase_cleanup;",
          "113:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:         if (is_rejected_by_policy(rc, session)) {",
          "124:             testcase_skip(\"EC key generation is not allowed by policy\");",
          "125:             goto testcase_cleanup;",
          "126:         }",
          "",
          "---------------"
        ],
        "testcases/pkcs11/generate_keypair.c||testcases/pkcs11/generate_keypair.c": [
          "File: testcases/pkcs11/generate_keypair.c -> testcases/pkcs11/generate_keypair.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     mech.ulParameterLen = 0;",
          "102:     mech.pParameter = NULL;",
          "105:     testcase_new_assertion();",
          "107:     rc = funcs->C_GenerateKeyPair(session, &mech, publ_tmpl, 3, NULL,",
          "108:                                   0, &publ_key, &priv_key);",
          "109:     if (rc != CKR_OK) {",
          "110:         testcase_fail(\"C_GenerateKeyPair() rc = %s\", p11_get_ckr(rc));",
          "111:         goto testcase_cleanup;",
          "112:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     if (!mech_supported(SLOT_ID, CKM_RSA_PKCS_KEY_PAIR_GEN)) {",
          "105:         testcase_skip(\"Mechanism CKM_RSA_PKCS_KEY_PAIR_GEN is not supported with slot \"",
          "106:                       \"%ld. Skipping key check\", SLOT_ID);",
          "107:         goto testcase_cleanup;",
          "108:     }",
          "116:         if (is_rejected_by_policy(rc, session)) {",
          "117:             testcase_skip(\"Key generation is not allowed by policy\");",
          "118:             goto testcase_cleanup;",
          "119:         }",
          "",
          "---------------"
        ],
        "testcases/pkcs11/getobjectsize.c||testcases/pkcs11/getobjectsize.c": [
          "File: testcases/pkcs11/getobjectsize.c -> testcases/pkcs11/getobjectsize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     rc = funcs->C_CreateObject(session, aes_tmpl, 4, &keyobj);",
          "63:     if (rc != CKR_OK) {",
          "64:         testcase_error(\"C_CreateObject() rc = %s\", p11_get_ckr(rc));",
          "65:         goto testcase_cleanup;",
          "66:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:         if (is_rejected_by_policy(rc, session)) {",
          "65:             testcase_skip(\"Key import is not allowed by policy\");",
          "66:             goto testcase_cleanup;",
          "67:         }",
          "",
          "---------------"
        ],
        "testcases/pkcs11/sess_opstate.c||testcases/pkcs11/sess_opstate.c": [
          "File: testcases/pkcs11/sess_opstate.c -> testcases/pkcs11/sess_opstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         goto out;",
          "76:     }",
          "79:     rc = funcs->C_DigestInit(s1, &mech1);",
          "80:     if (rc != CKR_OK) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     if (!mech_supported(SLOT_ID, mech1.mechanism)) {",
          "79:         testcase_skip(\"Mechanism CKM_SHA256 is not supported with slot \"",
          "80:                       \"%ld. Skipping key check\", SLOT_ID);",
          "81:         goto out;",
          "82:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:             goto out;",
          "162:         }",
          "166:         rc = funcs->C_DigestInit(s2, &mech2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:         if (!mech_supported(SLOT_ID, mech2.mechanism)) {",
          "171:             testcase_skip(\"Mechanism CKM_SHA_1 is not supported with slot \"",
          "172:                           \"%ld. Skipping key check\", SLOT_ID);",
          "173:             continue;",
          "174:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56c55d2c76790f8f9055813458df66540f8ba6ef",
      "candidate_info": {
        "commit_hash": "56c55d2c76790f8f9055813458df66540f8ba6ef",
        "repo": "opencryptoki/opencryptoki",
        "commit_url": "https://github.com/opencryptoki/opencryptoki/commit/56c55d2c76790f8f9055813458df66540f8ba6ef",
        "files": [
          "usr/lib/cca_stdll/cca_stdll.mk",
          "usr/lib/common/ec_defs.h",
          "usr/lib/common/ec_supported.c",
          "usr/lib/common/mech_ec.c",
          "usr/lib/common/utility.c",
          "usr/lib/common/utility_common.c",
          "usr/lib/ep11_stdll/ep11_stdll.mk",
          "usr/lib/ica_s390_stdll/ica_s390_stdll.mk",
          "usr/lib/icsf_stdll/icsf_stdll.mk",
          "usr/lib/soft_stdll/soft_stdll.mk",
          "usr/lib/tpm_stdll/tpm_stdll.mk",
          "usr/sbin/p11sak/p11sak.mk",
          "usr/sbin/pkcscca/pkcscca.mk"
        ],
        "message": "COMMON: Split utility and ec files.\n\nBoth, utility.c and ec_curves.c required a lot of additional PKCS #11\ndefinitions which made it hard to use them in several places.  Split the files\nsuch that independent parts can be reused without requiring additional PKCS\n\nSigned-off-by: Juergen Christ <jchrist@linux.ibm.com>",
        "before_after_code_files": [
          "usr/lib/cca_stdll/cca_stdll.mk||usr/lib/cca_stdll/cca_stdll.mk",
          "usr/lib/common/ec_defs.h||usr/lib/common/ec_defs.h",
          "usr/lib/common/ec_supported.c||usr/lib/common/ec_supported.c",
          "usr/lib/common/mech_ec.c||usr/lib/common/mech_ec.c",
          "usr/lib/common/utility.c||usr/lib/common/utility.c",
          "usr/lib/common/utility_common.c||usr/lib/common/utility_common.c",
          "usr/lib/ep11_stdll/ep11_stdll.mk||usr/lib/ep11_stdll/ep11_stdll.mk",
          "usr/lib/ica_s390_stdll/ica_s390_stdll.mk||usr/lib/ica_s390_stdll/ica_s390_stdll.mk",
          "usr/lib/icsf_stdll/icsf_stdll.mk||usr/lib/icsf_stdll/icsf_stdll.mk",
          "usr/lib/soft_stdll/soft_stdll.mk||usr/lib/soft_stdll/soft_stdll.mk",
          "usr/lib/tpm_stdll/tpm_stdll.mk||usr/lib/tpm_stdll/tpm_stdll.mk",
          "usr/sbin/p11sak/p11sak.mk||usr/sbin/p11sak/p11sak.mk",
          "usr/sbin/pkcscca/pkcscca.mk||usr/sbin/pkcscca/pkcscca.mk"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usr/lib/cca_stdll/cca_stdll.mk||usr/lib/cca_stdll/cca_stdll.mk": [
          "File: usr/lib/cca_stdll/cca_stdll.mk -> usr/lib/cca_stdll/cca_stdll.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  -Wl,-soname,$@ -lrt -ldl     \\",
          "17:  -Wl,--version-script=${srcdir}/opencryptoki_tok.map",
          "41: if ENABLE_LOCKS",
          "42: opencryptoki_stdll_libpkcs11_cca_la_SOURCES +=    \\",
          "",
          "[Removed Lines]",
          "19: opencryptoki_stdll_libpkcs11_cca_la_SOURCES =    \\",
          "20:  usr/lib/common/asn1.c usr/lib/common/dig_mgr.c   \\",
          "21:  usr/lib/common/hwf_obj.c usr/lib/common/trace.c   \\",
          "22:  usr/lib/common/key.c usr/lib/common/mech_list.c   \\",
          "23:  usr/lib/common/mech_dh.c usr/lib/common/mech_rng.c  \\",
          "24:  usr/lib/common/new_host.c usr/lib/common/sign_mgr.c  \\",
          "25:  usr/lib/common/cert.c usr/lib/common/dp_obj.c   \\",
          "26:  usr/lib/common/mech_aes.c usr/lib/common/mech_rsa.c  \\",
          "27:  usr/lib/common/mech_ec.c usr/lib/common/obj_mgr.c  \\",
          "28:  usr/lib/common/template.c usr/lib/common/data_obj.c  \\",
          "29:  usr/lib/common/encr_mgr.c usr/lib/common/key_mgr.c  \\",
          "30:  usr/lib/common/mech_md2.c usr/lib/common/mech_sha.c  \\",
          "31:  usr/lib/common/object.c usr/lib/common/decr_mgr.c  \\",
          "32:  usr/lib/common/globals.c usr/lib/common/loadsave.c  \\",
          "33:  usr/lib/common/utility.c usr/lib/common/mech_des.c  \\",
          "34:  usr/lib/common/mech_des3.c usr/lib/common/mech_md5.c  \\",
          "35:  usr/lib/common/mech_ssl3.c usr/lib/common/verify_mgr.c  \\",
          "36:  usr/lib/common/p11util.c usr/lib/common/sw_crypt.c  \\",
          "37:  usr/lib/common/shared_memory.c usr/lib/common/profile_obj.c \\",
          "38:  usr/lib/cca_stdll/cca_specific.c usr/lib/common/attributes.c \\",
          "39:  usr/lib/common/dlist.c",
          "",
          "[Added Lines]",
          "19: opencryptoki_stdll_libpkcs11_cca_la_SOURCES = usr/lib/common/asn1.c \\",
          "20:  usr/lib/common/dig_mgr.c usr/lib/common/hwf_obj.c  \\",
          "21:  usr/lib/common/trace.c usr/lib/common/key.c   \\",
          "22:  usr/lib/common/mech_list.c usr/lib/common/mech_dh.c  \\",
          "23:  usr/lib/common/mech_rng.c usr/lib/common/new_host.c  \\",
          "24:  usr/lib/common/sign_mgr.c usr/lib/common/cert.c   \\",
          "25:  usr/lib/common/dp_obj.c usr/lib/common/mech_aes.c  \\",
          "26:  usr/lib/common/mech_rsa.c usr/lib/common/mech_ec.c  \\",
          "27:  usr/lib/common/obj_mgr.c usr/lib/common/template.c  \\",
          "28:  usr/lib/common/data_obj.c usr/lib/common/encr_mgr.c  \\",
          "29:  usr/lib/common/key_mgr.c usr/lib/common/mech_md2.c  \\",
          "30:  usr/lib/common/mech_sha.c usr/lib/common/object.c  \\",
          "31:  usr/lib/common/decr_mgr.c usr/lib/common/globals.c  \\",
          "32:  usr/lib/common/loadsave.c usr/lib/common/utility.c  \\",
          "33:  usr/lib/common/mech_des.c usr/lib/common/mech_des3.c  \\",
          "34:  usr/lib/common/mech_md5.c usr/lib/common/mech_ssl3.c  \\",
          "35:  usr/lib/common/verify_mgr.c usr/lib/common/p11util.c  \\",
          "36:  usr/lib/common/sw_crypt.c usr/lib/common/shared_memory.c \\",
          "37:  usr/lib/common/profile_obj.c usr/lib/cca_stdll/cca_specific.c \\",
          "38:  usr/lib/common/attributes.c usr/lib/common/dlist.c  \\",
          "39:  usr/lib/common/utility_common.c usr/lib/common/ec_supported.c",
          "",
          "---------------"
        ],
        "usr/lib/common/ec_defs.h||usr/lib/common/ec_defs.h": [
          "File: usr/lib/common/ec_defs.h -> usr/lib/common/ec_defs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #ifndef _EC_DEFS",
          "12: #define _EC_DEFS",
          "14: #include <openssl/opensslv.h>",
          "15: #include \"ec_curves.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include <stdint.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #define CURVE256        0x0100",
          "30: #define CURVE320        0x0140",
          "31: #define CURVE384        0x0180",
          "32: #define CURVE456        0x01C8",
          "33: #define CURVE512        0x0200",
          "34: #define CURVE521        0x0209",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #define CURVE448        0x01C0",
          "",
          "---------------"
        ],
        "usr/lib/common/ec_supported.c||usr/lib/common/ec_supported.c": [
          "File: usr/lib/common/ec_supported.c -> usr/lib/common/ec_supported.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"pkcs11types.h\"",
          "11: #include \"ec_defs.h\"",
          "13: #include \"openssl/obj_mac.h\"",
          "14: #include <openssl/ec.h>",
          "16: #ifndef NID_brainpoolP160r1",
          "21: #define NID_brainpoolP160r1             921",
          "22: #define NID_brainpoolP160t1             922",
          "23: #define NID_brainpoolP192r1             923",
          "24: #define NID_brainpoolP192t1             924",
          "25: #define NID_brainpoolP224r1             925",
          "26: #define NID_brainpoolP224t1             926",
          "27: #define NID_brainpoolP256r1             927",
          "28: #define NID_brainpoolP256t1             928",
          "29: #define NID_brainpoolP320r1             929",
          "30: #define NID_brainpoolP320t1             930",
          "31: #define NID_brainpoolP384r1             931",
          "32: #define NID_brainpoolP384t1             932",
          "33: #define NID_brainpoolP512r1             933",
          "34: #define NID_brainpoolP512t1             934",
          "36: #endif",
          "38: #ifndef NID_X25519",
          "39: #define NID_X25519                      1034",
          "40: #define NID_X448                        1035",
          "41: #endif",
          "42: #ifndef NID_ED25519",
          "43: #define NID_ED25519                     1087",
          "44: #define NID_ED448                       1088",
          "45: #endif",
          "47: const CK_BYTE brainpoolP160r1[] = OCK_BRAINPOOL_P160R1;",
          "48: const CK_BYTE brainpoolP160t1[] = OCK_BRAINPOOL_P160T1;",
          "49: const CK_BYTE brainpoolP192r1[] = OCK_BRAINPOOL_P192R1;",
          "50: const CK_BYTE brainpoolP192t1[] = OCK_BRAINPOOL_P192T1;",
          "51: const CK_BYTE brainpoolP224r1[] = OCK_BRAINPOOL_P224R1;",
          "52: const CK_BYTE brainpoolP224t1[] = OCK_BRAINPOOL_P224T1;",
          "53: const CK_BYTE brainpoolP256r1[] = OCK_BRAINPOOL_P256R1;",
          "54: const CK_BYTE brainpoolP256t1[] = OCK_BRAINPOOL_P256T1;",
          "55: const CK_BYTE brainpoolP320r1[] = OCK_BRAINPOOL_P320R1;",
          "56: const CK_BYTE brainpoolP320t1[] = OCK_BRAINPOOL_P320T1;",
          "57: const CK_BYTE brainpoolP384r1[] = OCK_BRAINPOOL_P384R1;",
          "58: const CK_BYTE brainpoolP384t1[] = OCK_BRAINPOOL_P384T1;",
          "59: const CK_BYTE brainpoolP512r1[] = OCK_BRAINPOOL_P512R1;",
          "60: const CK_BYTE brainpoolP512t1[] = OCK_BRAINPOOL_P512T1;",
          "61: const CK_BYTE prime192v1[] = OCK_PRIME192V1;",
          "62: const CK_BYTE secp224r1[] = OCK_SECP224R1;",
          "63: const CK_BYTE prime256v1[] = OCK_PRIME256V1;",
          "64: const CK_BYTE secp384r1[] = OCK_SECP384R1;",
          "65: const CK_BYTE secp521r1[] = OCK_SECP521R1;",
          "66: const CK_BYTE secp256k1[] = OCK_SECP256K1;",
          "67: const CK_BYTE curve25519[] = OCK_CURVE25519;",
          "68: const CK_BYTE curve448[] = OCK_CURVE448;",
          "69: const CK_BYTE ed25519[] = OCK_ED25519;",
          "70: const CK_BYTE ed448[] = OCK_ED448;",
          "72: const struct _ec der_ec_supported[NUMEC] = {",
          "73:     {BRAINPOOL_CURVE, CURVE160, CURVE160, NID_brainpoolP160r1,",
          "74:             sizeof(brainpoolP160r1), &brainpoolP160r1},",
          "75:     {BRAINPOOL_CURVE, CURVE160, CURVE160, NID_brainpoolP160t1,",
          "76:             sizeof(brainpoolP160t1), &brainpoolP160t1},",
          "77:     {BRAINPOOL_CURVE, CURVE192, CURVE192, NID_brainpoolP192r1,",
          "78:             sizeof(brainpoolP192r1), &brainpoolP192r1},",
          "79:     {BRAINPOOL_CURVE, CURVE192, CURVE192, NID_brainpoolP192t1,",
          "80:             sizeof(brainpoolP192t1), &brainpoolP192t1},",
          "81:     {BRAINPOOL_CURVE, CURVE224, CURVE224, NID_brainpoolP224r1,",
          "82:             sizeof(brainpoolP224r1), &brainpoolP224r1},",
          "83:     {BRAINPOOL_CURVE, CURVE224, CURVE224, NID_brainpoolP224t1,",
          "84:             sizeof(brainpoolP224t1), &brainpoolP224t1},",
          "85:     {BRAINPOOL_CURVE, CURVE256, CURVE256, NID_brainpoolP256r1,",
          "86:             sizeof(brainpoolP256r1), &brainpoolP256r1},",
          "87:     {BRAINPOOL_CURVE, CURVE256, CURVE256, NID_brainpoolP256t1,",
          "88:             sizeof(brainpoolP256t1), &brainpoolP256t1},",
          "89:     {BRAINPOOL_CURVE, CURVE320, CURVE320, NID_brainpoolP320r1,",
          "90:             sizeof(brainpoolP320r1), &brainpoolP320r1},",
          "91:     {BRAINPOOL_CURVE, CURVE320, CURVE320, NID_brainpoolP320t1,",
          "92:             sizeof(brainpoolP320t1), &brainpoolP320t1},",
          "93:     {BRAINPOOL_CURVE, CURVE384, CURVE384, NID_brainpoolP384r1,",
          "94:             sizeof(brainpoolP384r1), &brainpoolP384r1},",
          "95:     {BRAINPOOL_CURVE, CURVE384, CURVE384, NID_brainpoolP384t1,",
          "96:             sizeof(brainpoolP384t1), &brainpoolP384t1},",
          "97:     {BRAINPOOL_CURVE, CURVE512, CURVE512, NID_brainpoolP512r1,",
          "98:             sizeof(brainpoolP512r1), &brainpoolP512r1},",
          "99:     {BRAINPOOL_CURVE, CURVE512, CURVE512, NID_brainpoolP512t1,",
          "100:             sizeof(brainpoolP512t1), &brainpoolP512t1},",
          "101:     {PRIME_CURVE, CURVE192, CURVE192, NID_X9_62_prime192v1,",
          "102:             sizeof(prime192v1), &prime192v1},",
          "103:     {PRIME_CURVE, CURVE224, CURVE224, NID_secp224r1,",
          "104:             sizeof(secp224r1), &secp224r1},",
          "105:     {PRIME_CURVE, CURVE256, CURVE256, NID_X9_62_prime256v1,",
          "106:             sizeof(prime256v1), &prime256v1},",
          "107:     {PRIME_CURVE, CURVE384, CURVE384, NID_secp384r1,",
          "108:             sizeof(secp384r1), &secp384r1},",
          "109:     {PRIME_CURVE, CURVE521, CURVE521, NID_secp521r1,",
          "110:             sizeof(secp521r1), &secp521r1},",
          "111:     {PRIME_CURVE, CURVE256, CURVE256, NID_secp256k1,",
          "112:             sizeof(secp256k1), &secp256k1},",
          "113:     {MONTGOMERY_CURVE, CURVE256, CURVE256, NID_X25519,",
          "114:             sizeof(curve25519), &curve25519},",
          "115:     {MONTGOMERY_CURVE, CURVE456, CURVE448, NID_X448,",
          "116:             sizeof(curve448), &curve448},",
          "117:     {EDWARDS_CURVE, CURVE256, CURVE256, NID_ED25519,",
          "118:             sizeof(ed25519), &ed25519},",
          "119:     {EDWARDS_CURVE, CURVE456, CURVE448, NID_ED448,",
          "120:             sizeof(ed448), &ed448},",
          "121: };",
          "",
          "---------------"
        ],
        "usr/lib/common/mech_ec.c||usr/lib/common/mech_ec.c": [
          "File: usr/lib/common/mech_ec.c -> usr/lib/common/mech_ec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"openssl/obj_mac.h\"",
          "33: #include <openssl/ec.h>",
          "135: CK_RV get_ecsiglen(OBJECT *key_obj, CK_ULONG *size)",
          "136: {",
          "137:     CK_ATTRIBUTE *attr = NULL;",
          "",
          "[Removed Lines]",
          "35: #ifndef NID_brainpoolP160r1",
          "40: #define NID_brainpoolP160r1             921",
          "41: #define NID_brainpoolP160t1             922",
          "42: #define NID_brainpoolP192r1             923",
          "43: #define NID_brainpoolP192t1             924",
          "44: #define NID_brainpoolP224r1             925",
          "45: #define NID_brainpoolP224t1             926",
          "46: #define NID_brainpoolP256r1             927",
          "47: #define NID_brainpoolP256t1             928",
          "48: #define NID_brainpoolP320r1             929",
          "49: #define NID_brainpoolP320t1             930",
          "50: #define NID_brainpoolP384r1             931",
          "51: #define NID_brainpoolP384t1             932",
          "52: #define NID_brainpoolP512r1             933",
          "53: #define NID_brainpoolP512t1             934",
          "55: #endif",
          "57: #ifndef NID_X25519",
          "58: #define NID_X25519                      1034",
          "59: #define NID_X448                        1035",
          "60: #endif",
          "61: #ifndef NID_ED25519",
          "62: #define NID_ED25519                     1087",
          "63: #define NID_ED448                       1088",
          "64: #endif",
          "66: const CK_BYTE brainpoolP160r1[] = OCK_BRAINPOOL_P160R1;",
          "67: const CK_BYTE brainpoolP160t1[] = OCK_BRAINPOOL_P160T1;",
          "68: const CK_BYTE brainpoolP192r1[] = OCK_BRAINPOOL_P192R1;",
          "69: const CK_BYTE brainpoolP192t1[] = OCK_BRAINPOOL_P192T1;",
          "70: const CK_BYTE brainpoolP224r1[] = OCK_BRAINPOOL_P224R1;",
          "71: const CK_BYTE brainpoolP224t1[] = OCK_BRAINPOOL_P224T1;",
          "72: const CK_BYTE brainpoolP256r1[] = OCK_BRAINPOOL_P256R1;",
          "73: const CK_BYTE brainpoolP256t1[] = OCK_BRAINPOOL_P256T1;",
          "74: const CK_BYTE brainpoolP320r1[] = OCK_BRAINPOOL_P320R1;",
          "75: const CK_BYTE brainpoolP320t1[] = OCK_BRAINPOOL_P320T1;",
          "76: const CK_BYTE brainpoolP384r1[] = OCK_BRAINPOOL_P384R1;",
          "77: const CK_BYTE brainpoolP384t1[] = OCK_BRAINPOOL_P384T1;",
          "78: const CK_BYTE brainpoolP512r1[] = OCK_BRAINPOOL_P512R1;",
          "79: const CK_BYTE brainpoolP512t1[] = OCK_BRAINPOOL_P512T1;",
          "80: const CK_BYTE prime192v1[] = OCK_PRIME192V1;",
          "81: const CK_BYTE secp224r1[] = OCK_SECP224R1;",
          "82: const CK_BYTE prime256v1[] = OCK_PRIME256V1;",
          "83: const CK_BYTE secp384r1[] = OCK_SECP384R1;",
          "84: const CK_BYTE secp521r1[] = OCK_SECP521R1;",
          "85: const CK_BYTE secp256k1[] = OCK_SECP256K1;",
          "86: const CK_BYTE curve25519[] = OCK_CURVE25519;",
          "87: const CK_BYTE curve448[] = OCK_CURVE448;",
          "88: const CK_BYTE ed25519[] = OCK_ED25519;",
          "89: const CK_BYTE ed448[] = OCK_ED448;",
          "91: const struct _ec der_ec_supported[NUMEC] = {",
          "92:     {BRAINPOOL_CURVE, CURVE160, NID_brainpoolP160r1,",
          "93:             sizeof(brainpoolP160r1), &brainpoolP160r1},",
          "94:     {BRAINPOOL_CURVE, CURVE160, NID_brainpoolP160t1,",
          "95:             sizeof(brainpoolP160t1), &brainpoolP160t1},",
          "96:     {BRAINPOOL_CURVE, CURVE192, NID_brainpoolP192r1,",
          "97:             sizeof(brainpoolP192r1), &brainpoolP192r1},",
          "98:     {BRAINPOOL_CURVE, CURVE192, NID_brainpoolP192t1,",
          "99:             sizeof(brainpoolP192t1), &brainpoolP192t1},",
          "100:     {BRAINPOOL_CURVE, CURVE224, NID_brainpoolP224r1,",
          "101:             sizeof(brainpoolP224r1), &brainpoolP224r1},",
          "102:     {BRAINPOOL_CURVE, CURVE224, NID_brainpoolP224t1,",
          "103:             sizeof(brainpoolP224t1), &brainpoolP224t1},",
          "104:     {BRAINPOOL_CURVE, CURVE256, NID_brainpoolP256r1,",
          "105:             sizeof(brainpoolP256r1), &brainpoolP256r1},",
          "106:     {BRAINPOOL_CURVE, CURVE256, NID_brainpoolP256t1,",
          "107:             sizeof(brainpoolP256t1), &brainpoolP256t1},",
          "108:     {BRAINPOOL_CURVE, CURVE320, NID_brainpoolP320r1,",
          "109:             sizeof(brainpoolP320r1), &brainpoolP320r1},",
          "110:     {BRAINPOOL_CURVE, CURVE320, NID_brainpoolP320t1,",
          "111:             sizeof(brainpoolP320t1), &brainpoolP320t1},",
          "112:     {BRAINPOOL_CURVE, CURVE384, NID_brainpoolP384r1,",
          "113:             sizeof(brainpoolP384r1), &brainpoolP384r1},",
          "114:     {BRAINPOOL_CURVE, CURVE384, NID_brainpoolP384t1,",
          "115:             sizeof(brainpoolP384t1), &brainpoolP384t1},",
          "116:     {BRAINPOOL_CURVE, CURVE512, NID_brainpoolP512r1,",
          "117:             sizeof(brainpoolP512r1), &brainpoolP512r1},",
          "118:     {BRAINPOOL_CURVE, CURVE512, NID_brainpoolP512t1,",
          "119:             sizeof(brainpoolP512t1), &brainpoolP512t1},",
          "120:     {PRIME_CURVE, CURVE192, NID_X9_62_prime192v1,",
          "121:             sizeof(prime192v1), &prime192v1},",
          "122:     {PRIME_CURVE, CURVE224, NID_secp224r1, sizeof(secp224r1), &secp224r1},",
          "123:     {PRIME_CURVE, CURVE256, NID_X9_62_prime256v1,",
          "124:             sizeof(prime256v1), &prime256v1},",
          "125:     {PRIME_CURVE, CURVE384, NID_secp384r1, sizeof(secp384r1), &secp384r1},",
          "126:     {PRIME_CURVE, CURVE521, NID_secp521r1, sizeof(secp521r1), &secp521r1},",
          "127:     {PRIME_CURVE, CURVE256, NID_secp256k1, sizeof(secp256k1), &secp256k1},",
          "128:     {MONTGOMERY_CURVE, CURVE256, NID_X25519, sizeof(curve25519), &curve25519},",
          "129:     {MONTGOMERY_CURVE, CURVE456, NID_X448, sizeof(curve448), &curve448},",
          "130:     {EDWARDS_CURVE, CURVE256, NID_ED25519, sizeof(ed25519), &ed25519},",
          "131:     {EDWARDS_CURVE, CURVE456, NID_ED448, sizeof(ed448), &ed448},",
          "132: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usr/lib/common/utility.c||usr/lib/common/utility.c": [
          "File: usr/lib/common/utility.c -> usr/lib/common/utility.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:     return rc;",
          "701: }",
          "855: CK_RV compute_sha(STDLL_TokData_t *tokdata, CK_BYTE *data, CK_ULONG len,",
          "856:                   CK_BYTE *hash, CK_ULONG mech)",
          "",
          "[Removed Lines]",
          "703: CK_RV get_sha_size(CK_ULONG mech, CK_ULONG *hsize)",
          "704: {",
          "705:     switch (mech) {",
          "706:     case CKM_SHA_1:",
          "708:         break;",
          "709:     case CKM_SHA224:",
          "710:     case CKM_SHA512_224:",
          "712:         break;",
          "713:     case CKM_SHA256:",
          "714:     case CKM_SHA512_256:",
          "716:         break;",
          "717:     case CKM_SHA384:",
          "719:         break;",
          "720:     case CKM_SHA512:",
          "722:         break;",
          "723:     case CKM_IBM_SHA3_224:",
          "725:         break;",
          "726:     case CKM_IBM_SHA3_256:",
          "728:         break;",
          "729:     case CKM_IBM_SHA3_384:",
          "731:         break;",
          "732:     case CKM_IBM_SHA3_512:",
          "734:         break;",
          "735:     default:",
          "736:         return CKR_MECHANISM_INVALID;",
          "737:     }",
          "738:     return CKR_OK;",
          "739: }",
          "741: CK_RV get_sha_block_size(CK_ULONG mech, CK_ULONG *bsize)",
          "742: {",
          "743:     switch (mech) {",
          "744:     case CKM_SHA_1:",
          "746:         break;",
          "747:     case CKM_SHA224:",
          "749:         break;",
          "750:     case CKM_SHA256:",
          "752:         break;",
          "753:     case CKM_SHA384:",
          "755:         break;",
          "756:     case CKM_SHA512:",
          "757:     case CKM_SHA512_224:",
          "758:     case CKM_SHA512_256:",
          "760:         break;",
          "761:     case CKM_IBM_SHA3_224:",
          "763:         break;",
          "764:     case CKM_IBM_SHA3_256:",
          "766:         break;",
          "767:     case CKM_IBM_SHA3_384:",
          "769:         break;",
          "770:     case CKM_IBM_SHA3_512:",
          "772:         break;",
          "773:     default:",
          "774:         return CKR_MECHANISM_INVALID;",
          "775:     }",
          "776:     return CKR_OK;",
          "777: }",
          "779: CK_RV get_hmac_digest(CK_ULONG mech, CK_ULONG *digest_mech, CK_BBOOL *general)",
          "780: {",
          "781:     switch (mech) {",
          "782:     case CKM_MD2_HMAC:",
          "783:     case CKM_MD2_HMAC_GENERAL:",
          "786:         break;",
          "787:     case CKM_MD5_HMAC:",
          "788:     case CKM_MD5_HMAC_GENERAL:",
          "791:         break;",
          "792:     case CKM_RIPEMD128_HMAC:",
          "793:     case CKM_RIPEMD128_HMAC_GENERAL:",
          "796:         break;",
          "797:     case CKM_SHA_1_HMAC:",
          "798:     case CKM_SHA_1_HMAC_GENERAL:",
          "801:         break;",
          "802:     case CKM_SHA224_HMAC:",
          "803:     case CKM_SHA224_HMAC_GENERAL:",
          "806:         break;",
          "807:     case CKM_SHA256_HMAC:",
          "808:     case CKM_SHA256_HMAC_GENERAL:",
          "811:         break;",
          "812:     case CKM_SHA384_HMAC:",
          "813:     case CKM_SHA384_HMAC_GENERAL:",
          "816:         break;",
          "817:     case CKM_SHA512_HMAC:",
          "818:     case CKM_SHA512_HMAC_GENERAL:",
          "821:         break;",
          "822:     case CKM_SHA512_224_HMAC:",
          "823:     case CKM_SHA512_224_HMAC_GENERAL:",
          "826:         break;",
          "827:     case CKM_SHA512_256_HMAC:",
          "828:     case CKM_SHA512_256_HMAC_GENERAL:",
          "831:         break;",
          "832:     case CKM_IBM_SHA3_224_HMAC:",
          "835:         break;",
          "836:     case CKM_IBM_SHA3_256_HMAC:",
          "839:         break;",
          "840:     case CKM_IBM_SHA3_384_HMAC:",
          "843:         break;",
          "844:     case CKM_IBM_SHA3_512_HMAC:",
          "847:         break;",
          "848:     default:",
          "849:         return CKR_MECHANISM_INVALID;",
          "850:     }",
          "851:     return CKR_OK;",
          "852: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usr/lib/common/utility_common.c||usr/lib/common/utility_common.c": [
          "File: usr/lib/common/utility_common.c -> usr/lib/common/utility_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include \"pkcs11types.h\"",
          "12: #include \"defs.h\"",
          "14: CK_RV get_sha_size(CK_ULONG mech, CK_ULONG *hsize)",
          "15: {",
          "16:     switch (mech) {",
          "17:     case CKM_SHA_1:",
          "19:         break;",
          "20:     case CKM_SHA224:",
          "21:     case CKM_SHA512_224:",
          "23:         break;",
          "24:     case CKM_SHA256:",
          "25:     case CKM_SHA512_256:",
          "27:         break;",
          "28:     case CKM_SHA384:",
          "30:         break;",
          "31:     case CKM_SHA512:",
          "33:         break;",
          "34:     case CKM_IBM_SHA3_224:",
          "36:         break;",
          "37:     case CKM_IBM_SHA3_256:",
          "39:         break;",
          "40:     case CKM_IBM_SHA3_384:",
          "42:         break;",
          "43:     case CKM_IBM_SHA3_512:",
          "45:         break;",
          "46:     default:",
          "47:         return CKR_MECHANISM_INVALID;",
          "48:     }",
          "49:     return CKR_OK;",
          "50: }",
          "52: CK_RV get_sha_block_size(CK_ULONG mech, CK_ULONG *bsize)",
          "53: {",
          "54:     switch (mech) {",
          "55:     case CKM_SHA_1:",
          "57:         break;",
          "58:     case CKM_SHA224:",
          "60:         break;",
          "61:     case CKM_SHA256:",
          "63:         break;",
          "64:     case CKM_SHA384:",
          "66:         break;",
          "67:     case CKM_SHA512:",
          "68:     case CKM_SHA512_224:",
          "69:     case CKM_SHA512_256:",
          "71:         break;",
          "72:     case CKM_IBM_SHA3_224:",
          "74:         break;",
          "75:     case CKM_IBM_SHA3_256:",
          "77:         break;",
          "78:     case CKM_IBM_SHA3_384:",
          "80:         break;",
          "81:     case CKM_IBM_SHA3_512:",
          "83:         break;",
          "84:     default:",
          "85:         return CKR_MECHANISM_INVALID;",
          "86:     }",
          "87:     return CKR_OK;",
          "88: }",
          "90: CK_RV get_hmac_digest(CK_ULONG mech, CK_ULONG *digest_mech, CK_BBOOL *general)",
          "91: {",
          "92:     switch (mech) {",
          "93:     case CKM_MD2_HMAC:",
          "94:     case CKM_MD2_HMAC_GENERAL:",
          "97:         break;",
          "98:     case CKM_MD5_HMAC:",
          "99:     case CKM_MD5_HMAC_GENERAL:",
          "102:         break;",
          "103:     case CKM_RIPEMD128_HMAC:",
          "104:     case CKM_RIPEMD128_HMAC_GENERAL:",
          "107:         break;",
          "108:     case CKM_SHA_1_HMAC:",
          "109:     case CKM_SHA_1_HMAC_GENERAL:",
          "112:         break;",
          "113:     case CKM_SHA224_HMAC:",
          "114:     case CKM_SHA224_HMAC_GENERAL:",
          "117:         break;",
          "118:     case CKM_SHA256_HMAC:",
          "119:     case CKM_SHA256_HMAC_GENERAL:",
          "122:         break;",
          "123:     case CKM_SHA384_HMAC:",
          "124:     case CKM_SHA384_HMAC_GENERAL:",
          "127:         break;",
          "128:     case CKM_SHA512_HMAC:",
          "129:     case CKM_SHA512_HMAC_GENERAL:",
          "132:         break;",
          "133:     case CKM_SHA512_224_HMAC:",
          "134:     case CKM_SHA512_224_HMAC_GENERAL:",
          "137:         break;",
          "138:     case CKM_SHA512_256_HMAC:",
          "139:     case CKM_SHA512_256_HMAC_GENERAL:",
          "142:         break;",
          "143:     case CKM_IBM_SHA3_224_HMAC:",
          "146:         break;",
          "147:     case CKM_IBM_SHA3_256_HMAC:",
          "150:         break;",
          "151:     case CKM_IBM_SHA3_384_HMAC:",
          "154:         break;",
          "155:     case CKM_IBM_SHA3_512_HMAC:",
          "158:         break;",
          "159:     default:",
          "160:         return CKR_MECHANISM_INVALID;",
          "161:     }",
          "162:     return CKR_OK;",
          "163: }",
          "",
          "---------------"
        ],
        "usr/lib/ep11_stdll/ep11_stdll.mk||usr/lib/ep11_stdll/ep11_stdll.mk": [
          "File: usr/lib/ep11_stdll/ep11_stdll.mk -> usr/lib/ep11_stdll/ep11_stdll.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  -shared -Wl,-z,defs,-Bsymbolic -lc -lpthread -lcrypto -lrt \\",
          "18:  -llber -ldl -Wl,--version-script=${srcdir}/opencryptoki_tok.map",
          "43: if ENABLE_LOCKS",
          "44: opencryptoki_stdll_libpkcs11_ep11_la_SOURCES +=    \\",
          "",
          "[Removed Lines]",
          "20: opencryptoki_stdll_libpkcs11_ep11_la_SOURCES =    \\",
          "21:  usr/lib/common/asn1.c usr/lib/common/cert.c   \\",
          "22:  usr/lib/common/hwf_obj.c usr/lib/common/dp_obj.c  \\",
          "23:  usr/lib/common/data_obj.c usr/lib/common/dig_mgr.c  \\",
          "24:  usr/lib/common/encr_mgr.c usr/lib/common/decr_mgr.c  \\",
          "25:  usr/lib/common/globals.c usr/lib/common/loadsave.c  \\",
          "26:  usr/lib/common/mech_aes.c usr/lib/common/mech_des.c  \\",
          "27:  usr/lib/common/mech_des3.c usr/lib/common/mech_ec.c  \\",
          "28:  usr/lib/common/mech_md5.c usr/lib/common/mech_md2.c  \\",
          "29:  usr/lib/common/mech_rng.c usr/lib/common/mech_rsa.c  \\",
          "30:  usr/lib/common/mech_sha.c usr/lib/common/mech_dsa.c  \\",
          "31:  usr/lib/common/mech_dh.c usr/lib/common/mech_ssl3.c  \\",
          "32:  usr/lib/common/obj_mgr.c usr/lib/common/object.c  \\",
          "33:  usr/lib/common/sign_mgr.c usr/lib/common/verify_mgr.c  \\",
          "34:  usr/lib/common/key.c usr/lib/common/key_mgr.c   \\",
          "35:  usr/lib/common/template.c usr/lib/common/p11util.c  \\",
          "36:  usr/lib/common/utility.c usr/lib/common/trace.c   \\",
          "37:  usr/lib/common/mech_list.c usr/lib/common/shared_memory.c \\",
          "38:  usr/lib/common/attributes.c usr/lib/common/sw_crypt.c  \\",
          "39:  usr/lib/common/profile_obj.c usr/lib/common/dlist.c  \\",
          "40:  usr/lib/common/pkey_utils.c     \\",
          "41:  usr/lib/ep11_stdll/new_host.c usr/lib/ep11_stdll/ep11_specific.c",
          "",
          "[Added Lines]",
          "20: opencryptoki_stdll_libpkcs11_ep11_la_SOURCES = usr/lib/common/asn1.c \\",
          "21:  usr/lib/common/cert.c usr/lib/common/hwf_obj.c   \\",
          "22:  usr/lib/common/dp_obj.c usr/lib/common/data_obj.c  \\",
          "23:  usr/lib/common/dig_mgr.c usr/lib/common/encr_mgr.c  \\",
          "24:  usr/lib/common/decr_mgr.c usr/lib/common/globals.c  \\",
          "25:  usr/lib/common/loadsave.c usr/lib/common/mech_aes.c  \\",
          "26:  usr/lib/common/mech_des.c usr/lib/common/mech_des3.c  \\",
          "27:  usr/lib/common/mech_ec.c usr/lib/common/mech_md5.c  \\",
          "28:  usr/lib/common/mech_md2.c usr/lib/common/mech_rng.c  \\",
          "29:  usr/lib/common/mech_rsa.c usr/lib/common/mech_sha.c  \\",
          "30:  usr/lib/common/mech_dsa.c usr/lib/common/mech_dh.c  \\",
          "31:  usr/lib/common/mech_ssl3.c usr/lib/common/obj_mgr.c  \\",
          "32:  usr/lib/common/object.c usr/lib/common/sign_mgr.c  \\",
          "33:  usr/lib/common/verify_mgr.c usr/lib/common/key.c  \\",
          "34:  usr/lib/common/key_mgr.c usr/lib/common/template.c  \\",
          "35:  usr/lib/common/p11util.c usr/lib/common/utility.c  \\",
          "36:  usr/lib/common/trace.c usr/lib/common/mech_list.c  \\",
          "37:  usr/lib/common/shared_memory.c usr/lib/common/attributes.c \\",
          "38:  usr/lib/common/sw_crypt.c usr/lib/common/profile_obj.c  \\",
          "39:  usr/lib/common/dlist.c usr/lib/common/pkey_utils.c  \\",
          "40:  usr/lib/ep11_stdll/new_host.c     \\",
          "41:  usr/lib/ep11_stdll/ep11_specific.c    \\",
          "42:  usr/lib/common/utility_common.c usr/lib/common/ec_supported.c",
          "",
          "---------------"
        ],
        "usr/lib/ica_s390_stdll/ica_s390_stdll.mk||usr/lib/ica_s390_stdll/ica_s390_stdll.mk": [
          "File: usr/lib/ica_s390_stdll/ica_s390_stdll.mk -> usr/lib/ica_s390_stdll/ica_s390_stdll.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  usr/lib/common/mech_list.c usr/lib/common/shared_memory.c \\",
          "36:  usr/lib/common/profile_obj.c usr/lib/common/attributes.c \\",
          "37:  usr/lib/ica_s390_stdll/ica_specific.c usr/lib/common/dlist.c \\",
          "40: if ENABLE_LOCKS",
          "41: opencryptoki_stdll_libpkcs11_ica_la_SOURCES +=    \\",
          "",
          "[Removed Lines]",
          "38:  usr/lib/common/mech_openssl.c",
          "",
          "[Added Lines]",
          "38:  usr/lib/common/mech_openssl.c     \\",
          "39:  usr/lib/common/utility_common.c usr/lib/common/ec_supported.c",
          "",
          "---------------"
        ],
        "usr/lib/icsf_stdll/icsf_stdll.mk||usr/lib/icsf_stdll/icsf_stdll.mk": [
          "File: usr/lib/icsf_stdll/icsf_stdll.mk -> usr/lib/icsf_stdll/icsf_stdll.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  -lrt -llber       \\",
          "26:  -Wl,--version-script=${srcdir}/opencryptoki_tok.map",
          "49:  usr/lib/icsf_stdll/icsf_config_parse.y    \\",
          "50:  usr/lib/icsf_stdll/icsf_config_lexer.l    \\",
          "53: if ENABLE_LOCKS",
          "54: opencryptoki_stdll_libpkcs11_icsf_la_SOURCES +=    \\",
          "",
          "[Removed Lines]",
          "28: opencryptoki_stdll_libpkcs11_icsf_la_SOURCES =    \\",
          "29:  usr/lib/common/asn1.c usr/lib/common/dig_mgr.c   \\",
          "30:  usr/lib/common/hwf_obj.c usr/lib/common/trace.c   \\",
          "31:  usr/lib/common/key.c usr/lib/common/mech_dh.c   \\",
          "32:  usr/lib/common/mech_rng.c usr/lib/common/sign_mgr.c  \\",
          "33:  usr/lib/common/cert.c usr/lib/common/dp_obj.c   \\",
          "34:  usr/lib/common/mech_aes.c usr/lib/common/mech_rsa.c  \\",
          "35:  usr/lib/common/mech_ec.c usr/lib/common/obj_mgr.c  \\",
          "36:  usr/lib/common/template.c usr/lib/common/p11util.c  \\",
          "37:  usr/lib/common/data_obj.c usr/lib/common/encr_mgr.c  \\",
          "38:  usr/lib/common/key_mgr.c usr/lib/common/mech_md2.c  \\",
          "39:  usr/lib/common/mech_sha.c usr/lib/common/object.c  \\",
          "40:  usr/lib/common/decr_mgr.c usr/lib/common/globals.c  \\",
          "41:  usr/lib/common/sw_crypt.c usr/lib/common/loadsave.c  \\",
          "42:  usr/lib/common/utility.c usr/lib/common/mech_des.c  \\",
          "43:  usr/lib/common/mech_des3.c usr/lib/common/mech_md5.c  \\",
          "44:  usr/lib/common/mech_ssl3.c usr/lib/common/verify_mgr.c  \\",
          "45:  usr/lib/common/mech_list.c usr/lib/common/shared_memory.c \\",
          "46:  usr/lib/common/attributes.c usr/lib/icsf_stdll/new_host.c \\",
          "47:  usr/lib/common/profile_obj.c usr/lib/common/dlist.c  \\",
          "48:  usr/lib/icsf_stdll/pbkdf.c usr/lib/icsf_stdll/icsf_specific.c \\",
          "51:  usr/lib/icsf_stdll/icsf.c",
          "",
          "[Added Lines]",
          "28: opencryptoki_stdll_libpkcs11_icsf_la_SOURCES = usr/lib/common/asn1.c \\",
          "29:  usr/lib/common/dig_mgr.c usr/lib/common/hwf_obj.c  \\",
          "30:  usr/lib/common/trace.c usr/lib/common/key.c   \\",
          "31:  usr/lib/common/mech_dh.c usr/lib/common/mech_rng.c  \\",
          "32:  usr/lib/common/sign_mgr.c usr/lib/common/cert.c   \\",
          "33:  usr/lib/common/dp_obj.c usr/lib/common/mech_aes.c  \\",
          "34:  usr/lib/common/mech_rsa.c usr/lib/common/mech_ec.c  \\",
          "35:  usr/lib/common/obj_mgr.c usr/lib/common/template.c  \\",
          "36:  usr/lib/common/p11util.c usr/lib/common/data_obj.c  \\",
          "37:  usr/lib/common/encr_mgr.c usr/lib/common/key_mgr.c  \\",
          "38:  usr/lib/common/mech_md2.c usr/lib/common/mech_sha.c  \\",
          "39:  usr/lib/common/object.c usr/lib/common/decr_mgr.c  \\",
          "40:  usr/lib/common/globals.c usr/lib/common/sw_crypt.c  \\",
          "41:  usr/lib/common/loadsave.c usr/lib/common/utility.c  \\",
          "42:  usr/lib/common/mech_des.c usr/lib/common/mech_des3.c  \\",
          "43:  usr/lib/common/mech_md5.c usr/lib/common/mech_ssl3.c  \\",
          "44:  usr/lib/common/verify_mgr.c usr/lib/common/mech_list.c  \\",
          "45:  usr/lib/common/shared_memory.c usr/lib/common/attributes.c \\",
          "46:  usr/lib/icsf_stdll/new_host.c usr/lib/common/profile_obj.c \\",
          "47:  usr/lib/common/dlist.c usr/lib/icsf_stdll/pbkdf.c  \\",
          "48:  usr/lib/icsf_stdll/icsf_specific.c    \\",
          "51:  usr/lib/icsf_stdll/icsf.c usr/lib/common/utility_common.c \\",
          "52:  usr/lib/common/ec_supported.c",
          "",
          "---------------"
        ],
        "usr/lib/soft_stdll/soft_stdll.mk||usr/lib/soft_stdll/soft_stdll.mk": [
          "File: usr/lib/soft_stdll/soft_stdll.mk -> usr/lib/soft_stdll/soft_stdll.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  usr/lib/common/trace.c usr/lib/common/mech_list.c  \\",
          "34:  usr/lib/common/shared_memory.c usr/lib/common/profile_obj.c \\",
          "35:  usr/lib/soft_stdll/soft_specific.c usr/lib/common/attributes.c \\",
          "38: if ENABLE_LOCKS",
          "39: opencryptoki_stdll_libpkcs11_sw_la_SOURCES +=    \\",
          "",
          "[Removed Lines]",
          "36:  usr/lib/common/dlist.c usr/lib/common/mech_openssl.c",
          "",
          "[Added Lines]",
          "36:  usr/lib/common/dlist.c usr/lib/common/mech_openssl.c  \\",
          "37:  usr/lib/common/utility_common.c usr/lib/common/ec_supported.c",
          "",
          "---------------"
        ],
        "usr/lib/tpm_stdll/tpm_stdll.mk||usr/lib/tpm_stdll/tpm_stdll.mk": [
          "File: usr/lib/tpm_stdll/tpm_stdll.mk -> usr/lib/tpm_stdll/tpm_stdll.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  usr/lib/common/shared_memory.c usr/lib/common/profile_obj.c \\",
          "36:  usr/lib/tpm_stdll/tpm_specific.c usr/lib/common/attributes.c \\",
          "37:  usr/lib/tpm_stdll/tpm_openssl.c usr/lib/tpm_stdll/tpm_util.c \\",
          "40: if ENABLE_LOCKS",
          "41: opencryptoki_stdll_libpkcs11_tpm_la_SOURCES +=    \\",
          "",
          "[Removed Lines]",
          "38:  usr/lib/common/dlist.c usr/lib/common/mech_openssl.c",
          "",
          "[Added Lines]",
          "38:  usr/lib/common/dlist.c usr/lib/common/mech_openssl.c  \\",
          "39:  usr/lib/common/utility_common.c usr/lib/common/ec_supported.c",
          "",
          "---------------"
        ],
        "usr/sbin/p11sak/p11sak.mk||usr/sbin/p11sak/p11sak.mk": [
          "File: usr/sbin/p11sak/p11sak.mk -> usr/sbin/p11sak/p11sak.mk"
        ],
        "usr/sbin/pkcscca/pkcscca.mk||usr/sbin/pkcscca/pkcscca.mk": [
          "File: usr/sbin/pkcscca/pkcscca.mk -> usr/sbin/pkcscca/pkcscca.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  -I${srcdir}/usr/lib/common     \\",
          "18:  -I${srcdir}/usr/sbin/pkcscca",
          "43: if ENABLE_LOCKS",
          "44: usr_sbin_pkcscca_pkcscca_SOURCES +=    \\",
          "45:  usr/lib/common/lock_btree.c usr/lib/common/lock_sess_mgr.c",
          "",
          "[Removed Lines]",
          "20: usr_sbin_pkcscca_pkcscca_SOURCES =     \\",
          "21:  usr/lib/common/asn1.c usr/lib/common/dig_mgr.c   \\",
          "22:  usr/lib/common/hwf_obj.c usr/lib/common/trace.c   \\",
          "23:  usr/lib/common/key.c usr/lib/common/mech_list.c   \\",
          "24:  usr/lib/common/mech_dh.c usr/lib/common/sign_mgr.c  \\",
          "25:  usr/lib/common/cert.c usr/lib/common/dp_obj.c   \\",
          "26:  usr/lib/common/mech_aes.c usr/lib/common/mech_rsa.c  \\",
          "27:  usr/lib/common/mech_ec.c usr/lib/common/obj_mgr.c  \\",
          "28:  usr/lib/common/template.c usr/lib/common/data_obj.c  \\",
          "29:  usr/lib/common/encr_mgr.c usr/lib/common/key_mgr.c  \\",
          "30:  usr/lib/common/mech_md2.c usr/lib/common/mech_sha.c  \\",
          "31:  usr/lib/common/object.c usr/lib/common/decr_mgr.c  \\",
          "32:  usr/lib/common/globals.c usr/lib/common/loadsave.c  \\",
          "33:  usr/lib/common/utility.c usr/lib/common/mech_des.c  \\",
          "34:  usr/lib/common/mech_des3.c usr/lib/common/mech_md5.c  \\",
          "35:  usr/lib/common/mech_ssl3.c usr/lib/common/verify_mgr.c  \\",
          "36:  usr/lib/common/p11util.c usr/lib/common/sw_crypt.c  \\",
          "37:  usr/lib/common/shared_memory.c usr/lib/common/profile_obj.c \\",
          "38:  usr/lib/common/attributes.c usr/lib/common/mech_rng.c  \\",
          "39:  usr/lib/common/pkcs_utils.c  usr/lib/common/dlist.c  \\",
          "40:  usr/sbin/pkcscca/pkcscca.c",
          "",
          "[Added Lines]",
          "20: usr_sbin_pkcscca_pkcscca_SOURCES = usr/lib/common/asn1.c  \\",
          "21:  usr/lib/common/dig_mgr.c usr/lib/common/hwf_obj.c  \\",
          "22:  usr/lib/common/trace.c usr/lib/common/key.c   \\",
          "23:  usr/lib/common/mech_list.c usr/lib/common/mech_dh.c  \\",
          "24:  usr/lib/common/sign_mgr.c usr/lib/common/cert.c   \\",
          "25:  usr/lib/common/dp_obj.c usr/lib/common/mech_aes.c  \\",
          "26:  usr/lib/common/mech_rsa.c usr/lib/common/mech_ec.c  \\",
          "27:  usr/lib/common/obj_mgr.c usr/lib/common/template.c  \\",
          "28:  usr/lib/common/data_obj.c usr/lib/common/encr_mgr.c  \\",
          "29:  usr/lib/common/key_mgr.c usr/lib/common/mech_md2.c  \\",
          "30:  usr/lib/common/mech_sha.c usr/lib/common/object.c  \\",
          "31:  usr/lib/common/decr_mgr.c usr/lib/common/globals.c  \\",
          "32:  usr/lib/common/loadsave.c usr/lib/common/utility.c  \\",
          "33:  usr/lib/common/mech_des.c usr/lib/common/mech_des3.c  \\",
          "34:  usr/lib/common/mech_md5.c usr/lib/common/mech_ssl3.c  \\",
          "35:  usr/lib/common/verify_mgr.c usr/lib/common/p11util.c  \\",
          "36:  usr/lib/common/sw_crypt.c usr/lib/common/shared_memory.c \\",
          "37:  usr/lib/common/profile_obj.c usr/lib/common/attributes.c \\",
          "38:  usr/lib/common/mech_rng.c usr/lib/common/pkcs_utils.c  \\",
          "39:  usr/lib/common/dlist.c usr/sbin/pkcscca/pkcscca.c  \\",
          "40:  usr/lib/common/utility_common.c usr/lib/common/ec_supported.c",
          "",
          "---------------"
        ]
      }
    }
  ]
}