{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51800912006b2b09ed61607842fce8dbb2f44a9c",
      "candidate_info": {
        "commit_hash": "51800912006b2b09ed61607842fce8dbb2f44a9c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/51800912006b2b09ed61607842fce8dbb2f44a9c",
        "files": [
          "ssl/bio_ssl.c"
        ],
        "message": "Get pointer type right in BIO_ssl_shutdown()\n\nAlso, restore 1.0.2 behavior of looping over all BIO's in the chain.\nThanks to Joseph Bester for finding this and suggesting a fix to the\ncrash.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2651)\n(cherry picked from commit 9015d34e141af747f7c750f8d08f862b2a8273c7)",
        "before_after_code_files": [
          "ssl/bio_ssl.c||ssl/bio_ssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/bio_ssl.c||ssl/bio_ssl.c": [
          "File: ssl/bio_ssl.c -> ssl/bio_ssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "518: void BIO_ssl_shutdown(BIO *b)",
          "519: {",
          "528: }",
          "",
          "[Removed Lines]",
          "520:     SSL *s;",
          "522:     b = BIO_find_type(b, BIO_TYPE_SSL);",
          "523:     if (b == NULL)",
          "524:         return;",
          "526:     s = BIO_get_data(b);",
          "527:     SSL_shutdown(s);",
          "",
          "[Added Lines]",
          "520:     BIO_SSL *bdata;",
          "522:     for (; b != NULL; b = BIO_next(b)) {",
          "523:         if (BIO_method_type(b) != BIO_TYPE_SSL)",
          "524:             continue;",
          "525:         bdata = BIO_get_data(b);",
          "526:         if (bdata != NULL && bdata->ssl != NULL)",
          "527:             SSL_shutdown(bdata->ssl);",
          "528:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11f1fd4b0d1b3aef5c79b843d081dbb9bcd0b85f",
      "candidate_info": {
        "commit_hash": "11f1fd4b0d1b3aef5c79b843d081dbb9bcd0b85f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/11f1fd4b0d1b3aef5c79b843d081dbb9bcd0b85f",
        "files": [
          "doc/ssl/SSL_get_error.pod",
          "doc/ssl/SSL_read.pod",
          "doc/ssl/SSL_write.pod",
          "ssl/record/rec_layer_s3.c",
          "test/asynciotest.c"
        ],
        "message": "Make SSL_read and SSL_write return the old behaviour and document it.\n\nBackport of beacb0f0c1ae7b0542fe053b95307f515b578eb7, revert of\n122580ef71e4e5f355a1a104c9bfb36feee43759\n\nFixes: #1903\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n\nGH: #1966",
        "before_after_code_files": [
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "test/asynciotest.c||test/asynciotest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c"
          ],
          "candidate": [
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:             if (s->mode & SSL_MODE_RELEASE_BUFFERS && !SSL_IS_DTLS(s))",
          "313:                 if (len + left == 0)",
          "314:                     ssl3_release_read_buffer(s);",
          "316:         }",
          "317:         left += i;",
          "",
          "[Removed Lines]",
          "315:             return -1;",
          "",
          "[Added Lines]",
          "312:             return i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "937:                 SSL3_BUFFER_set_left(&wb[currbuf], 0);",
          "938:             }",
          "940:         }",
          "941:         SSL3_BUFFER_add_offset(&wb[currbuf], i);",
          "942:         SSL3_BUFFER_add_left(&wb[currbuf], -i);",
          "",
          "[Removed Lines]",
          "939:             return -1;",
          "",
          "[Added Lines]",
          "933:             return i;",
          "",
          "---------------"
        ],
        "test/asynciotest.c||test/asynciotest.c": [
          "File: test/asynciotest.c -> test/asynciotest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:         for (j = 0; j < 2; j++) {",
          "310:                 goto end;",
          "311:             }",
          "323:             }",
          "325:                     || memcmp(buf, testdata, sizeof(testdata)) != 0) {",
          "326:                 printf(\"Test %d failed: Unexpected app data received\\n\", test);",
          "327:                 goto end;",
          "328:             }",
          "",
          "[Removed Lines]",
          "306:             for (ret = -1, i = 0; ret < 0 && i < 2 * sizeof(testdata); i++)",
          "307:                 ret = SSL_write(clientssl, testdata, sizeof(testdata));",
          "308:             if (ret <= 0) {",
          "309:                 printf(\"Test %d failed: Failed to write app data\\n\", test);",
          "318:             for (ret = -1, i = 0; ret < 0 && i < MAX_ATTEMPTS; i++)",
          "319:                 ret = SSL_read(serverssl, buf, sizeof(buf));",
          "320:             if (ret <= 0) {",
          "321:                 printf(\"Test %d failed: Failed to read app data\\n\", test);",
          "322:                 goto end;",
          "324:             if (ret != sizeof(testdata)",
          "",
          "[Added Lines]",
          "300:             int len;",
          "306:             for (ret = -1, i = 0, len = 0; len != sizeof(testdata) && i < 2;",
          "307:                 i++) {",
          "308:                 ret = SSL_write(clientssl, testdata + len,",
          "309:                     sizeof(testdata) - len);",
          "310:                 if (ret > 0) {",
          "311:                     len += ret;",
          "312:                 } else {",
          "313:                     int ssl_error = SSL_get_error(clientssl, ret);",
          "315:                     if (ssl_error == SSL_ERROR_SYSCALL ||",
          "316:                         ssl_error == SSL_ERROR_SSL) {",
          "317:                         printf(\"Test %d failed: Failed to write app data\\n\", test);",
          "318:                         err = -1;",
          "319:                         goto end;",
          "320:                     }",
          "321:                 }",
          "322:             }",
          "323:             if (len != sizeof(testdata)) {",
          "324:                 err = -1;",
          "325:                 printf(\"Test %d failed: Failed to write all app data\\n\", test);",
          "333:             for (ret = -1, i = 0, len = 0; len != sizeof(testdata) &&",
          "334:                 i < MAX_ATTEMPTS; i++)",
          "335:             {",
          "336:                 ret = SSL_read(serverssl, buf + len, sizeof(buf) - len);",
          "337:                 if (ret > 0) {",
          "338:                     len += ret;",
          "339:                 } else {",
          "340:                     int ssl_error = SSL_get_error(serverssl, ret);",
          "342:                     if (ssl_error == SSL_ERROR_SYSCALL ||",
          "343:                         ssl_error == SSL_ERROR_SSL) {",
          "344:                         printf(\"Test %d failed: Failed to read app data\\n\", test);",
          "345:                         err = -1;",
          "346:                         goto end;",
          "347:                     }",
          "348:                 }",
          "350:             if (len != sizeof(testdata)",
          "352:                 err = -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7dca72af91936d246700b78e06def16561a36028",
      "candidate_info": {
        "commit_hash": "7dca72af91936d246700b78e06def16561a36028",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7dca72af91936d246700b78e06def16561a36028",
        "files": [
          "crypto/err/err.c"
        ],
        "message": "In err_cleanup(), cleanup the thread local storage too\n\nFixes #3033\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3035)\n(cherry picked from commit 165f1c3ef39680471339d21b9f6c12ea86b4a26a)",
        "before_after_code_files": [
          "crypto/err/err.c||crypto/err/err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/err/err.c||crypto/err/err.c": [
          "File: crypto/err/err.c -> crypto/err/err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: void err_cleanup(void)",
          "261: {",
          "262:     CRYPTO_THREAD_lock_free(err_string_lock);",
          "263:     err_string_lock = NULL;",
          "264: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:     CRYPTO_THREAD_cleanup_local(&err_thread_local);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a99be00636e73206f7a40b626595466003fa250e",
      "candidate_info": {
        "commit_hash": "a99be00636e73206f7a40b626595466003fa250e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a99be00636e73206f7a40b626595466003fa250e",
        "files": [
          "crypto/ct/ct_err.c",
          "crypto/ct/ct_locl.h",
          "crypto/ct/ct_policy.c",
          "crypto/ct/ct_sct.c",
          "crypto/ct/ct_sct_ctx.c",
          "crypto/ct/ct_vfy.c",
          "include/openssl/ct.h",
          "ssl/ssl_lib.c",
          "test/ct_test.c",
          "util/libcrypto.num"
        ],
        "message": "Check that SCT timestamps are not in the future\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1554)\n(cherry picked from commit 1fa9ffd934429f140edcfbaf76d2f32cc21e449b)",
        "before_after_code_files": [
          "crypto/ct/ct_err.c||crypto/ct/ct_err.c",
          "crypto/ct/ct_locl.h||crypto/ct/ct_locl.h",
          "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c",
          "crypto/ct/ct_sct.c||crypto/ct/ct_sct.c",
          "crypto/ct/ct_sct_ctx.c||crypto/ct/ct_sct_ctx.c",
          "crypto/ct/ct_vfy.c||crypto/ct/ct_vfy.c",
          "include/openssl/ct.h||include/openssl/ct.h",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "test/ct_test.c||test/ct_test.c",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_err.c||crypto/ct/ct_err.c": [
          "File: crypto/ct/ct_err.c -> crypto/ct/ct_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     {ERR_FUNC(CT_F_O2I_SCT_LIST), \"o2i_SCT_LIST\"},",
          "37:     {ERR_FUNC(CT_F_O2I_SCT_SIGNATURE), \"o2i_SCT_signature\"},",
          "38:     {ERR_FUNC(CT_F_SCT_CTX_NEW), \"SCT_CTX_new\"},",
          "39:     {ERR_FUNC(CT_F_SCT_NEW), \"SCT_new\"},",
          "40:     {ERR_FUNC(CT_F_SCT_NEW_FROM_BASE64), \"SCT_new_from_base64\"},",
          "41:     {ERR_FUNC(CT_F_SCT_SET0_LOG_ID), \"SCT_set0_log_id\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     {ERR_FUNC(CT_F_SCT_CTX_VERIFY), \"SCT_CTX_verify\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     {ERR_FUNC(CT_F_SCT_SET_LOG_ENTRY_TYPE), \"SCT_set_log_entry_type\"},",
          "46:     {ERR_FUNC(CT_F_SCT_SET_SIGNATURE_NID), \"SCT_set_signature_nid\"},",
          "47:     {ERR_FUNC(CT_F_SCT_SET_VERSION), \"SCT_set_version\"},",
          "49:     {0, NULL}",
          "50: };",
          "",
          "[Removed Lines]",
          "48:     {ERR_FUNC(CT_F_SCT_CTX_VERIFY), \"SCT_CTX_verify\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:      \"log conf missing description\"},",
          "59:     {ERR_REASON(CT_R_LOG_CONF_MISSING_KEY), \"log conf missing key\"},",
          "60:     {ERR_REASON(CT_R_LOG_KEY_INVALID), \"log key invalid\"},",
          "61:     {ERR_REASON(CT_R_SCT_INVALID), \"sct invalid\"},",
          "62:     {ERR_REASON(CT_R_SCT_INVALID_SIGNATURE), \"sct invalid signature\"},",
          "63:     {ERR_REASON(CT_R_SCT_LIST_INVALID), \"sct list invalid\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     {ERR_REASON(CT_R_SCT_FUTURE_TIMESTAMP), \"sct future timestamp\"},",
          "",
          "---------------"
        ],
        "crypto/ct/ct_locl.h||crypto/ct/ct_locl.h": [
          "File: crypto/ct/ct_locl.h -> crypto/ct/ct_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     unsigned char *preder;",
          "100:     size_t prederlen;",
          "101: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     uint64_t epoch_time_in_ms;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     X509 *cert;",
          "106:     X509 *issuer;",
          "107:     CTLOG_STORE *log_store;",
          "108: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     uint64_t epoch_time_in_ms;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151: __owur int SCT_CTX_set1_pubkey(SCT_CTX *sctx, X509_PUBKEY *pubkey);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163: void SCT_CTX_set_time(SCT_CTX *sctx, uint64_t time_in_ms);",
          "",
          "---------------"
        ],
        "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c": [
          "File: crypto/ct/ct_policy.c -> crypto/ct/ct_policy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     ctx->log_store = log_store;",
          "60: }",
          "62: X509* CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx)",
          "63: {",
          "64:     return ctx->cert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms)",
          "63: {",
          "64:     ctx->epoch_time_in_ms = time_in_ms;",
          "65: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     return ctx->log_store;",
          "75: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx)",
          "83: {",
          "84:     return ctx->epoch_time_in_ms;",
          "85: }",
          "",
          "---------------"
        ],
        "crypto/ct/ct_sct.c||crypto/ct/ct_sct.c": [
          "File: crypto/ct/ct_sct.c -> crypto/ct/ct_sct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:             goto err;",
          "330:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:     SCT_CTX_set_time(sctx, ctx->epoch_time_in_ms);",
          "",
          "---------------"
        ],
        "crypto/ct/ct_sct_ctx.c||crypto/ct/ct_sct_ctx.c": [
          "File: crypto/ct/ct_sct_ctx.c -> crypto/ct/ct_sct_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:     sctx->pkey = pkey;",
          "257:     return 1;",
          "258: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: void SCT_CTX_set_time(SCT_CTX *sctx, uint64_t time_in_ms)",
          "261: {",
          "262:     sctx->epoch_time_in_ms = time_in_ms;",
          "263: }",
          "",
          "---------------"
        ],
        "crypto/ct/ct_vfy.c||crypto/ct/ct_vfy.c": [
          "File: crypto/ct/ct_vfy.c -> crypto/ct/ct_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:         CTerr(CT_F_SCT_CTX_VERIFY, CT_R_SCT_LOG_ID_MISMATCH);",
          "114:         return 0;",
          "115:     }",
          "117:     ctx = EVP_MD_CTX_new();",
          "118:     if (ctx == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     if (sct->timestamp > sctx->epoch_time_in_ms) {",
          "117:         CTerr(CT_F_SCT_CTX_VERIFY, CT_R_SCT_FUTURE_TIMESTAMP);",
          "118:         return 0;",
          "119:     }",
          "",
          "---------------"
        ],
        "include/openssl/ct.h||include/openssl/ct.h": [
          "File: include/openssl/ct.h -> include/openssl/ct.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,",
          "99:                                                CTLOG_STORE *log_store);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx);",
          "114: void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482: # define CT_F_O2I_SCT_LIST                                111",
          "483: # define CT_F_O2I_SCT_SIGNATURE                           112",
          "484: # define CT_F_SCT_CTX_NEW                                 126",
          "485: # define CT_F_SCT_NEW                                     100",
          "486: # define CT_F_SCT_NEW_FROM_BASE64                         127",
          "487: # define CT_F_SCT_SET0_LOG_ID                             101",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500: # define CT_F_SCT_CTX_VERIFY                              128",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "491: # define CT_F_SCT_SET_LOG_ENTRY_TYPE                      102",
          "492: # define CT_F_SCT_SET_SIGNATURE_NID                       103",
          "493: # define CT_F_SCT_SET_VERSION                             104",
          "497: # define CT_R_BASE64_DECODE_ERROR                         108",
          "",
          "[Removed Lines]",
          "494: # define CT_F_SCT_CTX_VERIFY                              128",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501: # define CT_R_LOG_CONF_MISSING_DESCRIPTION                111",
          "502: # define CT_R_LOG_CONF_MISSING_KEY                        112",
          "503: # define CT_R_LOG_KEY_INVALID                             113",
          "504: # define CT_R_SCT_INVALID                                 104",
          "505: # define CT_R_SCT_INVALID_SIGNATURE                       107",
          "506: # define CT_R_SCT_LIST_INVALID                            105",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519: # define CT_R_SCT_FUTURE_TIMESTAMP                        116",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4175:     CT_POLICY_EVAL_CTX_set1_cert(ctx, cert);",
          "4176:     CT_POLICY_EVAL_CTX_set1_issuer(ctx, issuer);",
          "4177:     CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(ctx, s->ctx->ctlog_store);",
          "4179:     scts = SSL_get0_peer_scts(s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4178:     CT_POLICY_EVAL_CTX_set_time(ctx, SSL_SESSION_get_time(SSL_get0_session(s)));",
          "",
          "---------------"
        ],
        "test/ct_test.c||test/ct_test.c": [
          "File: test/ct_test.c -> test/ct_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: typedef struct ct_test_fixture {",
          "31:     const char *test_case_name;",
          "33:     CTLOG_STORE* ctlog_store;",
          "35:     const char *certs_dir;",
          "36:     char *certificate_file;",
          "37:     char *issuer_file;",
          "38:     int expected_sct_count;",
          "40:     const unsigned char *tls_sct_list;",
          "41:     size_t tls_sct_list_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     uint64_t epoch_time_in_ms;",
          "43:     int expected_valid_sct_count;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250:         }",
          "251:     }",
          "254:         int unverified_sct_count = sk_SCT_num(scts) -",
          "255:                 invalid_sct_count - valid_sct_count;",
          "",
          "[Removed Lines]",
          "253:     if (valid_sct_count != fixture.expected_sct_count) {",
          "",
          "[Added Lines]",
          "258:     if (valid_sct_count != fixture.expected_valid_sct_count) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260:                 \"%d SCTs were unverified\\n\",",
          "261:                 invalid_sct_count,",
          "262:                 valid_sct_count,",
          "264:                 unverified_sct_count);",
          "265:         return 0;",
          "266:     }",
          "",
          "[Removed Lines]",
          "263:                 fixture.expected_sct_count,",
          "",
          "[Added Lines]",
          "268:                 fixture.expected_valid_sct_count,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "297:     CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(",
          "298:             ct_policy_ctx, fixture.ctlog_store);",
          "300:     if (fixture.certificate_file != NULL) {",
          "301:         int sct_extension_index;",
          "302:         X509_EXTENSION *sct_extension = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305:     CT_POLICY_EVAL_CTX_set_time(ct_policy_ctx, fixture.epoch_time_in_ms);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "443:     fixture.certs_dir = certs_dir;",
          "444:     fixture.certificate_file = \"embeddedSCTs1.pem\";",
          "445:     fixture.issuer_file = \"embeddedSCTs1_issuer.pem\";",
          "447:     fixture.test_validity = 1;",
          "448:     EXECUTE_CT_TEST();",
          "449: }",
          "",
          "[Removed Lines]",
          "446:     fixture.expected_sct_count = 1;",
          "",
          "[Added Lines]",
          "453:     fixture.expected_sct_count = fixture.expected_valid_sct_count = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "454:     fixture.certs_dir = certs_dir;",
          "455:     fixture.certificate_file = \"embeddedSCTs3.pem\";",
          "456:     fixture.issuer_file = \"embeddedSCTs3_issuer.pem\";",
          "458:     fixture.test_validity = 1;",
          "459:     EXECUTE_CT_TEST();",
          "460: }",
          "",
          "[Removed Lines]",
          "457:     fixture.expected_sct_count = 3;",
          "",
          "[Added Lines]",
          "464:     fixture.expected_sct_count = fixture.expected_valid_sct_count = 3;",
          "465:     fixture.test_validity = 1;",
          "466:     EXECUTE_CT_TEST();",
          "467: }",
          "469: static int test_verify_fails_for_future_sct()",
          "470: {",
          "471:     SETUP_CT_TEST_FIXTURE();",
          "473:     fixture.certs_dir = certs_dir;",
          "474:     fixture.certificate_file = \"embeddedSCTs1.pem\";",
          "475:     fixture.issuer_file = \"embeddedSCTs1_issuer.pem\";",
          "476:     fixture.expected_sct_count = 1;",
          "477:     fixture.expected_valid_sct_count = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "548:     ADD_TEST(test_multiple_scts_in_certificate);",
          "549:     ADD_TEST(test_verify_one_sct);",
          "550:     ADD_TEST(test_verify_multiple_scts);",
          "551:     ADD_TEST(test_decode_tls_sct);",
          "552:     ADD_TEST(test_encode_tls_sct);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571:     ADD_TEST(test_verify_fails_for_future_sct);",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4208: OCSP_RESPID_match                       4159 1_1_0a EXIST::FUNCTION:OCSP",
          "4209: DSO_pathbyaddr                          4170 1_1_0c EXIST::FUNCTION:",
          "4210: DSO_dsobyaddr                           4171 1_1_0c EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4211: CT_POLICY_EVAL_CTX_get_time             4172 1_1_1 EXIST::FUNCTION:CT",
          "4212: CT_POLICY_EVAL_CTX_set_time             4173 1_1_1 EXIST::FUNCTION:CT",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88bf0d36048569e0dd5e6193c4ec21d2a9da5aba",
      "candidate_info": {
        "commit_hash": "88bf0d36048569e0dd5e6193c4ec21d2a9da5aba",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/88bf0d36048569e0dd5e6193c4ec21d2a9da5aba",
        "files": [
          "crypto/mem_sec.c"
        ],
        "message": "Ensure minsize >= sizeof(SH_LIST)\n\nThe sh_add_to_list function will overwrite subsequent slots in the free list\nfor small allocations.  This causes a segmentation fault if the writes goes\noff the end of the secure memory.  I've not investigated if this problem\ncan overwrite memory without the segmentation fault, but it seems likely.\n\nThis fix limits the minsize to the sizeof of the SH_LIST structure (which\nalso has a side effect of properly aligning the pointers).\n\nThe alternative would be to return an error if minsize is too small.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2657)\n\n(cherry picked from commit 70e14ffbaf6a67dab56c24cae01f1248cf3f1e77)",
        "before_after_code_files": [
          "crypto/mem_sec.c||crypto/mem_sec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/mem_sec.c||crypto/mem_sec.c": [
          "File: crypto/mem_sec.c -> crypto/mem_sec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:     if (minsize <= 0 || (minsize & (minsize - 1)) != 0)",
          "353:         goto err;",
          "355:     sh.arena_size = size;",
          "356:     sh.minsize = minsize;",
          "357:     sh.bittable_size = (sh.arena_size / sh.minsize) * 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:     while (minsize < (int)sizeof(SH_LIST))",
          "356:         minsize *= 2;",
          "",
          "---------------"
        ]
      }
    }
  ]
}