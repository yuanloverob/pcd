{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d1f9932e4b26007da9fc6ef2b4a8121bcb196011",
      "candidate_info": {
        "commit_hash": "d1f9932e4b26007da9fc6ef2b4a8121bcb196011",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d1f9932e4b26007da9fc6ef2b4a8121bcb196011",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/in.test",
          "test/skipscan2.test",
          "test/without_rowid1.test"
        ],
        "message": "Add further test cases to improve VDBE branch coverage.\n\nFossilOrigin-Name: 51a95e52fc58d8be2c9c51576dff7258c705735b66d203948f80db017b4c10d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/in.test||test/in.test",
          "test/skipscan2.test||test/skipscan2.test",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bf3cd9364fdfc951feb04f78728eb8e0dae12b3dc5702a36bb6e69c0abab8864",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "714:          );",
          "715: } {1 Alice}",
          "718: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "717: #-------------------------------------------------------------------------",
          "718: reset_db",
          "719: do_execsql_test in-16.0 {",
          "720:   CREATE TABLE x1(a, b);",
          "721:   INSERT INTO x1(a) VALUES(1), (2), (3), (4), (5), (6);",
          "722:   CREATE INDEX x1i ON x1(a, b);",
          "723: }",
          "725: do_execsql_test in-16.1 {",
          "726:   SELECT * FROM x1",
          "727:   WHERE a IN (SELECT a FROM x1 WHERE (a%2)==0)",
          "728:   ORDER BY a DESC, b;",
          "729: } {6 {} 4 {} 2 {}}",
          "731: do_execsql_test in-16.2 {",
          "732:   SELECT * FROM x1",
          "733:   WHERE a IN (SELECT a FROM x1 WHERE (a%7)==0)",
          "734:   ORDER BY a DESC, b;",
          "735: } {}",
          "",
          "---------------"
        ],
        "test/skipscan2.test||test/skipscan2.test": [
          "File: test/skipscan2.test -> test/skipscan2.test"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "379: do_catchsql_test 10.4 {",
          "380:   UPDATE t1 SET c=1 WHERE (a, b) = ('b', 'b');",
          "381: } {1 {UNIQUE constraint failed: t1.c}}",
          "384: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382: do_catchsql_test 10.5 {",
          "383:   UPDATE t1 SET c=1 WHERE (a, b) = ('c', 'c');",
          "384: } {0 {}}",
          "386: do_execsql_test 10.6 {",
          "387:   CREATE TRIGGER t1_tr BEFORE UPDATE ON t1 BEGIN",
          "388:     DELETE FROM t1 WHERE a = new.a;",
          "389:   END;",
          "390:   UPDATE t1 SET c = c+1 WHERE a = 'a';",
          "391:   SELECT * FROM t1;",
          "392: } {b a 3  b b 4}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1f6618217f58ee1a1f19e0e8f534a636dae82d9",
      "candidate_info": {
        "commit_hash": "c1f6618217f58ee1a1f19e0e8f534a636dae82d9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c1f6618217f58ee1a1f19e0e8f534a636dae82d9",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_test.c",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3_common.tcl",
          "test/fts3corrupt4.test"
        ],
        "message": "Add an assert_fts3_nc() macro to fts3 - for assert() conditions that are only true when it is guaranteed that the fts3 database is not corrupt.\n\nFossilOrigin-Name: 3498908cd7f3d0e35b70796537124e3da0bd99d48750ba51bcb9eba87e28ed4d",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_test.c||ext/fts3/fts3_test.c",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3_common.tcl||test/fts3_common.tcl",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "320: # endif",
          "321: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: int sqlite3_fts3_may_be_corrupt = 1;",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: #ifdef SQLITE_DEBUG",
          "138: extern int sqlite3_fts3_may_be_corrupt;",
          "139: # define assert_fts3_nc(x) assert(sqlite3_fts3_may_be_corrupt || (x))",
          "140: #else",
          "141: # define assert_fts3_nc(x) assert(x)",
          "142: #endif",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_test.c||ext/fts3/fts3_test.c": [
          "File: ext/fts3/fts3_test.c -> ext/fts3/fts3_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "577: int Sqlitetestfts3_Init(Tcl_Interp *interp){",
          "578:   Tcl_CreateObjCommand(interp, \"fts3_near_match\", fts3_near_match_cmd, 0, 0);",
          "579:   Tcl_CreateObjCommand(interp,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "582: static int SQLITE_TCLAPI fts3_may_be_corrupt(",
          "583:   void * clientData,",
          "584:   Tcl_Interp *interp,",
          "585:   int objc,",
          "586:   Tcl_Obj *CONST objv[]",
          "587: ){",
          "588:   int bOld = sqlite3_fts3_may_be_corrupt;",
          "590:   if( objc!=2 && objc!=1 ){",
          "591:     Tcl_WrongNumArgs(interp, 1, objv, \"?BOOLEAN?\");",
          "592:     return TCL_ERROR;",
          "593:   }",
          "594:   if( objc==2 ){",
          "595:     int bNew;",
          "596:     if( Tcl_GetBooleanFromObj(interp, objv[1], &bNew) ) return TCL_ERROR;",
          "597:     sqlite3_fts3_may_be_corrupt = bNew;",
          "598:   }",
          "600:   Tcl_SetObjResult(interp, Tcl_NewIntObj(bOld));",
          "601:   return TCL_OK;",
          "602: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "582:   Tcl_CreateObjCommand(",
          "583:       interp, \"fts3_test_tokenizer\", fts3_test_tokenizer_cmd, 0, 0",
          "584:   );",
          "586:   Tcl_CreateObjCommand(",
          "587:       interp, \"fts3_test_varint\", fts3_test_varint_cmd, 0, 0",
          "588:   );",
          "589:   return TCL_OK;",
          "590: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615:   Tcl_CreateObjCommand(",
          "616:       interp, \"sqlite3_fts3_may_be_corrupt\", fts3_may_be_corrupt, 0, 0",
          "617:   );",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "568: ){",
          "571:   assert( p->nIndex>0 );",
          "572:   assert( iIndex>=0 && iIndex<p->nIndex );",
          "",
          "[Removed Lines]",
          "570:   assert( iLangid>=0 );",
          "",
          "[Added Lines]",
          "570:   assert_fts3_nc( iLangid>=0 );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e2991a7ecf5dd241c4bab7c7cadc4901043fb0c3ea1fac70b684f6d8332677f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3_common.tcl||test/fts3_common.tcl": [
          "File: test/fts3_common.tcl -> test/fts3_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #",
          "45: #",
          "47: #-------------------------------------------------------------------------",
          "48: # USAGE: fts3_build_db_1 SWITCHES N",
          "49: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: sqlite3_fts3_may_be_corrupt 0",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "19: set testprefix fts3corrupt4",
          "21: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "22: ifcapable !fts3 {",
          "23:   finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: source $testdir/fts3_common.tcl",
          "22: sqlite3_fts3_may_be_corrupt 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2162:   SELECT quote(matchinfo(t1, t1 ))==0 FROM t1 WHERE t1 MATCH 'e*';",
          "2163: } {0 0 0 0 0 0}",
          "2165: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2168: #-------------------------------------------------------------------------",
          "2169: reset_db",
          "2170: do_test 16.0 {",
          "2171:   sqlite3 db {}",
          "2172:   db deserialize [decode_hexdb {",
          "2173: | size 28672 pagesize 4096 filename crash-de7e8cb026385a.db",
          "2174: | page 1 offset 0",
          "2175: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "2176: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "2177: |     32: 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 04   ................",
          "2178: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "2179: |     96: 00 00 00 00 0d 0e ef 00 07 0d 4d 00 0f bd 0f 5f   ..........M...._",
          "2180: |    112: 0e f7 0e 06 0e bc 0d a4 0d 4d 00 00 00 00 00 00   .........M......",
          "2181: |   3392: 00 00 00 00 00 00 00 00 00 00 00 00 00 55 07 07   .............U..",
          "2182: |   3408: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 73 74   ......tablet1_st",
          "2183: |   3424: 61 74 74 31 5f 73 74 61 74 07 43 52 45 41 54 45   att1_stat.CREATE",
          "2184: |   3440: 20 54 41 42 4c 45 20 27 74 31 5f 73 74 61 74 27    TABLE 't1_stat'",
          "2185: |   3456: 28 69 64 20 49 af 54 45 47 45 52 20 50 52 49 4d   (id I.TEGER PRIM",
          "2186: |   3472: 41 52 59 20 4b 45 59 2c 20 76 61 6c 75 65 20 42   ARY KEY, value B",
          "2187: |   3488: 4c 4f 42 29 60 06 07 17 21 21 01 81 0b 74 61 62   LOB)`...!!...tab",
          "2188: |   3504: 6c 65 74 31 5f 64 6f 63 73 69 7a 65 74 31 5f 64   let1_docsizet1_d",
          "2189: |   3520: 6f 63 73 69 7a 65 06 43 52 45 41 54 45 20 54 41   ocsize.CREATE TA",
          "2190: |   3536: 42 4c 45 20 27 74 31 5f 64 6f 63 73 69 7a 65 27   BLE 't1_docsize'",
          "2191: |   3552: 28 64 6f 63 69 64 20 49 4e 54 45 47 45 52 20 50   (docid INTEGER P",
          "2192: |   3568: 52 49 4d 41 52 59 20 4b 45 59 2c 20 73 69 7a 65   RIMARY KEY, size",
          "2193: |   3584: 20 42 4c 4f 42 29 81 33 04 07 17 1f 1f 01 82 35    BLOB).3.......5",
          "2194: |   3600: 74 61 62 6c 65 74 31 5f 73 65 67 64 69 72 74 31   tablet1_segdirt1",
          "2195: |   3616: 5f 73 65 67 64 69 72 04 43 52 45 41 54 45 20 54   _segdir.CREATE T",
          "2196: |   3632: 41 42 4c 45 20 27 74 31 5f 73 65 67 64 69 72 27   ABLE 't1_segdir'",
          "2197: |   3648: 28 6c 65 76 65 6c 20 49 4e 54 45 47 45 52 2c 69   (level INTEGER,i",
          "2198: |   3664: 64 78 20 49 4e 54 45 47 45 52 2c 73 74 61 72 74   dx INTEGER,start",
          "2199: |   3680: 5f 62 6c 6f 63 6b 20 49 4e 54 45 47 45 52 2c 6c   _block INTEGER,l",
          "2200: |   3696: 65 61 76 65 73 5f 65 6e 64 5f 62 6c 6f 63 6b 20   eaves_end_block",
          "2201: |   3712: 49 4e 54 45 47 45 52 2c 65 6e 64 5f 62 6c 6f 63   INTEGER,end_bloc",
          "2202: |   3728: 6b 20 49 4e 54 45 47 45 52 2c 72 6f 6f 74 20 42   k INTEGER,root B",
          "2203: |   3744: 4c 4f 42 2c 50 52 49 4d 41 52 59 20 4b 45 59 28   LOB,PRIMARY KEY(",
          "2204: |   3760: 6c 65 76 65 6c 2c 20 69 64 78 29 29 31 05 06 17   level, idx))1...",
          "2205: |   3776: 45 1f 01 00 69 6e 64 65 78 73 71 6c 69 74 65 5f   E...indexsqlite_",
          "2206: |   3792: 61 75 74 6f 69 6e 64 65 78 5f 74 31 5f 73 65 67   autoindex_t1_seg",
          "2207: |   3808: 64 69 72 5f 31 74 31 5f 73 65 67 64 69 72 05 00   dir_1t1_segdir..",
          "2208: |   3824: 00 00 08 00 00 00 00 66 03 07 17 23 23 01 81 13   .......f...##...",
          "2209: |   3840: 74 61 62 6c 65 74 31 5f 73 65 67 6d 65 6e 74 73   tablet1_segments",
          "2210: |   3856: 74 31 5f 73 65 67 6d 65 6e 74 73 03 43 52 45 41   t1_segments.CREA",
          "2211: |   3872: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 73 65 67   TE TABLE 't1_seg",
          "2212: |   3888: 6d 65 6e 74 73 27 28 62 6c 6f 63 6b 69 64 20 49   ments'(blockid I",
          "2213: |   3904: 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b   NTEGER PRIMARY K",
          "2214: |   3920: 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 5c   EY, block BLOB).",
          "2215: |   3936: 02 07 17 21 21 01 81 03 74 61 62 6c 65 74 31 5f   ...!!...tablet1_",
          "2216: |   3952: 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74 65 6e   contentt1_conten",
          "2217: |   3968: 74 02 43 52 45 41 54 45 20 54 41 42 4c 45 20 27   t.CREATE TABLE '",
          "2218: |   3984: 74 31 5f 63 6f 6e 74 65 6e 74 27 28 64 6f 63 69   t1_content'(doci",
          "2219: |   4000: 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52   d INTEGER PRIMAR",
          "2220: |   4016: 59 20 4b 45 59 2c 20 27 63 30 61 27 29 41 01 06   Y KEY, 'c0a')A..",
          "2221: |   4032: 17 11 11 08 71 74 61 62 6c 65 74 31 74 31 43 52   ....qtablet1t1CR",
          "2222: |   4048: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "2223: |   4064: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 34   LE t1 USING fts4",
          "2224: |   4080: 28 61 2c 70 72 65 66 69 78 3d 27 31 2c 32 27 29   (a,prefix='1,2')",
          "2225: | page 2 offset 4096",
          "2226: |      0: 0d 00 00 00 08 0e 1f 00 0f c4 0f 7c 0f 34 0f 07   ...........|.4..",
          "2227: |     16: 0e c3 0e 97 0e 63 0e 1f 00 00 00 00 00 00 00 00   .....c..........",
          "2228: |   3600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42   ...............B",
          "2229: |   3616: 08 04 00 81 09 73 75 6e 74 20 69 6e 20 63 75 6c   .....sunt in cul",
          "2230: |   3632: 70 61 20 71 75 69 20 6f 66 66 69 63 69 61 20 64   pa qui officia d",
          "2231: |   3648: 65 73 65 72 75 6e 74 20 6d 6f 6c 6c 69 74 20 61   eserunt mollit a",
          "2232: |   3664: 6e 69 6d 20 69 64 20 65 73 74 20 6c 61 62 6f 72   nim id est labor",
          "2233: |   3680: 75 6d 2e 32 07 03 00 6b 45 78 63 65 70 74 65 75   um.2...kExcepteu",
          "2234: |   3696: 72 20 73 69 6e 74 20 6f 63 63 61 65 63 61 74 20   r sint occaecat",
          "2235: |   3712: 63 75 70 69 64 61 74 61 74 20 6e 6f 6e 20 70 72   cupidatat non pr",
          "2236: |   3728: 6f 69 64 65 6e 74 2c 2a 06 03 00 5b 63 69 6c 6c   oident,*...[cill",
          "2237: |   3744: 75 6d 20 64 6f 6c 6f 72 65 20 65 75 20 66 75 67   um dolore eu fug",
          "2238: |   3760: 69 61 74 20 6e 75 6c 6c 61 20 70 61 72 69 61 74   iat nulla pariat",
          "2239: |   3776: 75 72 2e 42 05 04 00 81 09 44 75 69 73 20 61 75   ur.B.....Duis au",
          "2240: |   3792: 74 65 20 69 72 75 72 65 21 64 6f 6c 6f 72 20 69   te irure!dolor i",
          "2241: |   3808: 6e 20 72 65 70 72 65 68 65 6e 64 65 72 69 74 20   n reprehenderit",
          "2242: |   3824: 69 6e 20 76 6f 6c 75 70 74 61 74 65 20 76 65 6c   in voluptate vel",
          "2243: |   3840: 69 74 20 65 73 74 65 2b 04 03 00 5d 6e 69 73 69   it este+...]nisi",
          "2244: |   3856: 20 75 74 20 61 6c 69 71 75 69 70 20 65 78 20 65    ut aliquip ex e",
          "2245: |   3872: 61 20 63 6f 6d 6d 6f 64 6f 20 63 6f 6e 73 65 71   a commodo conseq",
          "2246: |   3888: 75 61 74 2e 46 03 04 00 81 11 55 74 20 65 6e 69   uat.F.....Ut eni",
          "2247: |   3904: 6d 20 61 64 20 6d 69 6e 69 6d 20 76 65 6e 69 61   m ad minim venia",
          "2248: |   3920: 6d 2c 20 71 75 69 73 20 6e 6f 73 74 72 75 64 20   m, quis nostrud",
          "2249: |   3936: 65 78 65 72 63 69 74 61 74 69 6f 6e 20 75 6c 6c   exercitation ull",
          "2250: |   3952: 61 6d 63 6f 20 6c 61 62 6f 72 69 73 46 02 04 00   amco laborisF...",
          "2251: |   3968: 81 11 73 65 64 20 64 6f 20 65 69 75 73 6d 6f 64   ..sed do eiusmod",
          "2252: |   3984: 20 74 65 6d 70 6f 72 20 69 6e 63 69 64 69 64 75    tempor incididu",
          "2253: |   4000: 6e 74 20 75 74 20 6c 61 62 6f 72 65 20 65 74 20   nt ut labore et",
          "2254: |   4016: 64 6f 6c 6f 72 65 20 6d 61 67 6e 61 20 51 6c 69   dolore magna Qli",
          "2255: |   4032: 71 75 61 2e 3a 01 03 00 7b 4c 6f 72 65 6d 20 69   qua.:....Lorem i",
          "2256: |   4048: 70 73 75 6d 20 64 6f 6c 6f 72 20 73 69 74 e5 61   psum dolor sit.a",
          "2257: |   4064: 6d 65 74 2c 20 63 6f 6e 73 65 63 74 65 74 75 72   met, consectetur",
          "2258: |   4080: 20 61 64 69 70 69 73 63 69 6e 67 20 65 6c 69 74    adipiscing elit",
          "2259: | page 3 offset 8192",
          "2260: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "2261: | page 4 offset 12288",
          "2262: |      0: 0d 00 00 00 03 0a a6 00 0d 57 0c 4a 0a a6 00 00   .........W.J....",
          "2263: |   2720: 00 00 00 00 00 00 83 21 03 08 02 08 08 08 17 86   .......!........",
          "2264: |   2736: 30 08 00 30 20 34 30 32 00 02 61 64 06 01 08 00   0..0 402..ad....",
          "2265: |   2752: 02 04 00 01 01 6c 06 02 0c 00 02 04 00 01 01 6d   .....l.........m",
          "2266: |   2768: 03 01 06 00 01 01 6e 03 08 09 00 01 01 75 03 05   ......n......u..",
          "2267: |   2784: 03 00 00 02 63 69 03 06 02 00 01 01 6f 07 01 07   ....ci......o...",
          "2268: |   2800: 00 03 07 03 00 01 01 75 06 07 05 00 01 04 00 00   .......u........",
          "2269: |   2816: 02 64 65 03 08 07 00 01 01 6f 0d 01 04 00 01 03   .de......o......",
          "2270: |   2832: 09 00 03 05 00 01 03 00 01 01 75 03 05 02 00 00   ..........u.....",
          "2271: |   2848: 02 65 61 03 04 06 00 01 01 69 03 02 04 00 01 01   .ea......i......",
          "2272: |   2864: 6c 03 01 09 00 01 01 6e 03 03 03 00 01 01 73 06   l......n......s.",
          "2273: |   2880: 05 0b 00 03 0b 00 01 01 74 03 02 09 00 01 01 75   ........t......u",
          "2274: |   2896: 03 06 04 00 01 01 78 09 03 09 00 01 05 00 03 02   ......x.........",
          "2275: |   2912: 00 00 02 66 75 03 06 05 00 00 02 69 64 03 08 0a   ...fu......id...",
          "2276: |   2928: 00 01 01 6e 0a 02 06 00 03 06 04 00 03 03 00 01   ...n............",
          "2277: |   2944: 01 70 03 01 03 00 01 01 72 03 05 04 00 00 02 6c   .p......r......l",
          "2278: |   2960: 61 09 02 08 00 01 0b 00 05 0c 00 01 01 6f 03 01   a............o..",
          "2279: |   2976: 02 00 00 02 6d 61 03 02 0b 00 01 01 69 03 03 05   ....ma......i...",
          "2280: |   2992: 00 01 01 6f 03 08 08 00 00 02 6e 69 03 04 02 00   ...o......ni....",
          "2281: |   3008: 01 01 6f 06 03 08 00 04 06 00 01 01 75 03 06 06   ..o.........u...",
          "2282: |   3024: 00 00 02 6f 63 03 07 04 00 01 01 66 03 08 06 00   ...oc......f....",
          "2283: |   3040: 00 02 70 61 03 06 07 00 01 01 72 03 07 07 00 00   ..pa......r.....",
          "2284: |   3056: 02 71 75 06 03 07 00 05 05 00 00 02 72 65 03 05   .qu.........re..",
          "2285: |   3072: 07 00 00 02 73 65 03 02 02 00 01 01 69 06 01 05   ....se......i...",
          "2286: |   3088: 00 06 03 00 01 01 75 03 08 02 00 00 02 74 65 03   ......u......te.",
          "2287: |   3104: 02 05 00 00 02 75 6c 03 03 0a 00 01 01 74 09 02   .....ul......t..",
          "2288: |   3120: 07 00 01 02 00 01 03 00 00 02 76 65 06 03 06 00   ..........ve....",
          "2289: |   3136: 02 0a 00 01 01 6f 03 05 09 00 82 0a 02 08 12 08   .....o..........",
          "2290: |   3152: 08 08 17 84 02 04 00 30 20 32 35 31 00 01 61 23   .......0 251..a#",
          "2291: |   3168: 01 06 04 00 01 0c 00 01 04 00 01 04 00 01 03 00   ................",
          "2292: |   3184: 03 09 00 00 01 63 10 01 07 00 03 07 03 00 02 02   .....c..........",
          "2293: |   3200: 00 01 05 00 01 04 00 00 01 64 11 01 04 00 01 03   .........d......",
          "2294: |   3216: 09 00 03 02 05 00 01 13 00 02 07 00 00 01 65 1b   ..............e.",
          "2295: |   3232: 01 09 00 01 04 07 00 01 03 08 00 01 05 03 00 01   ................",
          "2296: |   3248: 0b 00 01 04 00 01 02 00 01 0b 00 00 01 66 03 06   .............f..",
          "2297: |   3264: 05 00 00 01 69 0f 01 03 00 01 06 00 03 04 04 04   ....i...........",
          "2298: |   3280: 00 03 03 09 00 00 01 6c 0c 01 02 00 01 08 00 01   .......l........",
          "2299: |   3296: 0b 00 05 0c 00 10 01 6d 09 02 0b 00 01 05 00 05   .......m........",
          "2300: |   3312: 08 00 00 01 6e 0c 03 08 00 01 02 00 02 06 00 01   ....n...........",
          "2301: |   3328: 06 00 00 01 6f 06 07 04 00 01 06 00 00 01 70 06   ....o.........p.",
          "2302: |   3344: 06 07 00 01 07 00 00 01 71 06 03 07 00 05 05 00   ........q.......",
          "2303: |   3360: 00 01 72 03 05 07 00 00 01 73 0c 01 05 00 01 02   ..r......s......",
          "2304: |   3376: 00 05 03 00 01 02 00 00 01 74 03 02 05 00 00 01   .........t......",
          "2305: |   3392: 75 0a 02 07 00 01 02 0a 00 01 03 00 00 01 76 07   u.............v.",
          "2306: |   3408: 03 06 00 02 09 03 00 85 26 01 08 08 08 08 08 17   ........&.......",
          "2307: |   3424: 8a 3e 30 20 36 36 35 00 02 61 64 03 03 04 00 02   .>0 665..ad.....",
          "2308: |   3440: 08 69 70 69 73 63 69 6e 67 03 01 08 00 01 05 6c   .ipiscing......l",
          "2309: |   3456: 69 71 75 61 03 02 0c 00 05 02 69 70 03 04 04 00   iqua......ip....",
          "2310: |   3472: 01 03 6d 65 74 03 01 06 00 01 03 6e 69 6d 03 08   ..met......nim..",
          "2311: |   3488: 09 00 01 03 75 74 65 03 05 03 00 00 06 63 69 6c   ....ute......cil",
          "2312: |   3504: 6c 75 6d 03 06 02 00 01 06 6f 6d 6d 6f 64 6f 03   lum......ommodo.",
          "2313: |   3520: 04 07 00 02 09 6e 73 65 63 74 65 74 75 72 03 01   .....nsectetur..",
          "2314: |   3536: 07 00 05 04 71 75 61 74 03 04 08 00 01 04 75 6c   ....quat......ul",
          "2315: |   3552: 70 61 03 08 04 00 02 07 70 69 64 61 74 61 74 03   pa......pidatat.",
          "2316: |   3568: 07 05 00 00 08 64 65 73 65 72 75 6e 74 03 08 07   .....deserunt...",
          "2317: |   3584: 00 01 01 6f 03 02 03 00 02 03 6c 6f 72 06 01 04   ...o......lor...",
          "2318: |   3600: 00 04 05 00 05 01 65 06 02 0a 00 04 03 00 01 03   ......e.........",
          "2319: |   3616: 75 69 73 03 05 02 00 00 02 65 61 03 04 06 00 01   uis......ea.....",
          "2320: |   3632: 06 69 75 73 6d 6f 64 03 02 04 00 01 03 6c 69 74   .iusmod......lit",
          "2321: |   3648: 03 01 09 00 01 03 6e 69 6d 03 03 03 00 01 03 73   ......nim......s",
          "2322: |   3664: 73 65 03 05 0b 00 02 01 74 03 08 0b 00 01 01 74   se......t......t",
          "2323: |   3680: 03 02 09 00 01 01 75 03 06 04 00 01 01 78 03 04   ......u......x..",
          "2324: |   3696: 05 00 02 07 63 65 70 74 65 75 72 03 07 02 00 02   ....cepteur.....",
          "2325: |   3712: 0a 65 72 63 69 74 61 74 69 6f 6e 03 03 09 00 00   .ercitation.....",
          "2326: |   3728: 06 66 75 67 69 61 74 03 06 05 00 00 02 69 64 03   .fugiat......id.",
          "2327: |   3744: 08 0a 00 01 01 6e 07 05 06 04 00 03 03 00 02 08   .....n..........",
          "2328: |   3760: 63 69 64 69 64 75 7e 74 03 02 06 00 01 04 70 73   cididu~t......ps",
          "2329: |   3776: 75 6d 03 01 03 00 01 03 72 75 72 65 03 05 04 00   um......rure....",
          "2330: |   3792: 00 06 6c 61 62 6f 72 65 03 02 08 00 05 02 69 73   ..labore......is",
          "2331: |   3808: 03 03 0b 00 05 02 75 6d 03 08 0c 00 01 04 6f 72   ......um......or",
          "2332: |   3824: 65 6d 03 01 02 00 00 05 6d 61 67 6e 61 03 02 0b   em......magna...",
          "2333: |   3840: 00 01 04 69 6e 69 6d 03 03 05 00 01 05 6f 6c 6c   ...inim......oll",
          "2334: |   3856: 69 74 03 08 08 00 00 04 6e 69 73 69 03 04 02 00   it......nisi....",
          "2335: |   3872: 01 02 6f 6e 03 07 06 00 02 05 73 74 72 75 64 03   ..on......strud.",
          "2336: |   3888: 03 08 00 01 04 75 6c 6c 61 03 06 06 00 00 08 6f   .....ulla......o",
          "2337: |   3904: 63 63 61 65 63 61 74 03 07 04 00 01 06 66 66 69   ccaecat......ffi",
          "2338: |   3920: 63 69 61 03 08 06 00 00 08 70 61 72 69 61 74 75   cia......pariatu",
          "2339: |   3936: 72 03 06 07 00 01 07 72 6f 69 64 65 6e 74 03 07   r......roident..",
          "2340: |   3952: 07 00 00 03 71 75 69 03 08 05 00 03 01 73 03 03   ....qui......s..",
          "2341: |   3968: 07 00 00 0d 72 65 70 72 65 68 65 6e 64 65 72 69   ....reprehenderi",
          "2342: |   3984: 74 03 05 07 00 00 03 73 65 64 03 02 02 00 01 03   t......sed......",
          "2343: |   4000: 69 6e 74 03 07 03 00 02 01 74 03 01 05 00 01 03   int......t......",
          "2344: |   4016: 75 6e 74 03 08 02 00 00 06 74 65 6d 70 6f 72 03   unt......tempor.",
          "2345: |   4032: 02 05 00 00 07 75 6c 6c 61 6d 63 6f 03 03 0a 00   .....ullamco....",
          "2346: |   4048: 01 01 74 09 02 07 00 01 02 00 01 03 00 00 05 76   ..t............v",
          "2347: |   4064: 65 6c 69 74 03 05 0a 00 02 04 6e 69 61 6d 03 03   elit......niam..",
          "2348: |   4080: 06 00 01 08 6f 6c 75 70 74 61 74 65 03 05 09 00   ....oluptate....",
          "2349: | page 5 offset 16384",
          "2350: |      0: 0a 00 00 00 03 0f eb 00 0f fb 0f f3 0f eb 00 00   ................",
          "2351: |   4064: 00 00 00 00 00 00 00 00 00 00 00 07 04 02 08 01   ................",
          "2352: |   4080: 08 00 03 07 04 02 08 03 a4 00 02 04 04 08 08 09   ................",
          "2353: | page 6 offset 20480",
          "2354: |      0: 0d 00 00 00 08 0f d0 00 0f fa 0f f4 0f ee 0f e8   ................",
          "2355: |     16: 0f e2 0f dc 0f d6 0f d0 00 00 00 00 00 00 00 00   ................",
          "2356: |   4048: 04 08 03 00 0e 0b 04 07 03 00 0e 06 04 06 03 00   ................",
          "2357: |   4064: 0e 06 04 05 03 00 0e 0a 04 04 03 00 0e 07 04 03   ................",
          "2358: |   4080: 03 00 0e 0a 04 02 03 00 0e 0b 04 01 03 00 0e 08   ................",
          "2359: | page 7 offset 24576",
          "2360: |      0: 0d 00 00 00 01 0f f7 00 0f f7 00 00 00 00 00 00   ................",
          "2361: |   4080: 00 00 00 00 00 00 00 07 00 03 00 14 08 45 b5 03   .............E..",
          "2362: | end crash-de7e8cb026385a.db",
          "2363: }]} {}",
          "2365: do_catchsql_test 16.1 {",
          "2366:   INSERT INTO t1(t1) VALUES('optimize');",
          "2367: } {0 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b574e4ea972c8eda4ee8ae9a460af229f8a042a",
      "candidate_info": {
        "commit_hash": "3b574e4ea972c8eda4ee8ae9a460af229f8a042a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3b574e4ea972c8eda4ee8ae9a460af229f8a042a",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_test.c",
          "ext/fts3/fts3_tokenize_vtab.c",
          "ext/fts3/fts3_tokenizer.c",
          "ext/fts3/fts3_write.c",
          "ext/fts5/fts5_tokenize.c",
          "ext/rtree/geopoly.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Use the 64-bit memory allocator interfaces in extensions, whenever possible.\n\nFossilOrigin-Name: 07ee06fd390bfebebc014b47583d489747b0423bb96c810bed5c605ce0e3be71",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_test.c||ext/fts3/fts3_test.c",
          "ext/fts3/fts3_tokenize_vtab.c||ext/fts3/fts3_tokenize_vtab.c",
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "ext/rtree/geopoly.c||ext/rtree/geopoly.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: static MatchinfoBuffer *fts3MIBufferNew(int nElem, const char *zMatchinfo){",
          "132:   MatchinfoBuffer *pRet;",
          "137:   if( pRet ){",
          "138:     memset(pRet, 0, nByte);",
          "139:     pRet->aMatchinfo[0] = (u8*)(&pRet->aMatchinfo[1]) - (u8*)pRet;",
          "",
          "[Removed Lines]",
          "133:   int nByte = sizeof(u32) * (2*nElem + 1) + sizeof(MatchinfoBuffer);",
          "134:   int nStr = (int)strlen(zMatchinfo);",
          "136:   pRet = sqlite3_malloc(nByte + nStr+1);",
          "",
          "[Added Lines]",
          "133:   sqlite3_int64 nByte = sizeof(u32) * (2*(sqlite3_int64)nElem + 1)",
          "134:                            + sizeof(MatchinfoBuffer);",
          "135:   sqlite3_int64 nStr = strlen(zMatchinfo);",
          "137:   pRet = sqlite3_malloc64(nByte + nStr+1);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_test.c||ext/fts3/fts3_test.c": [
          "File: ext/fts3/fts3_test.c -> ext/fts3/fts3_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:   }else{",
          "450:     const char *pToken = p;",
          "452:     while( p<pEnd && testIsTokenChar(*p) ) p++;",
          "456:     if( nToken>pCsr->nBuffer ){",
          "457:       sqlite3_free(pCsr->aBuffer);",
          "459:     }",
          "460:     if( pCsr->aBuffer==0 ){",
          "461:       rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "451:     int nToken;",
          "453:     nToken = (int)(p-pToken);",
          "458:       pCsr->aBuffer = sqlite3_malloc(nToken);",
          "",
          "[Added Lines]",
          "451:     sqlite3_int64 nToken;",
          "453:     nToken = (sqlite3_int64)(p-pToken);",
          "458:       pCsr->aBuffer = sqlite3_malloc64(nToken);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenize_vtab.c||ext/fts3/fts3_tokenize_vtab.c": [
          "File: ext/fts3/fts3_tokenize_vtab.c -> ext/fts3/fts3_tokenize_vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:   if( idxNum==1 ){",
          "347:     const char *zByte = (const char *)sqlite3_value_text(apVal[0]);",
          "348:     int nByte = sqlite3_value_bytes(apVal[0]);",
          "350:     if( pCsr->zInput==0 ){",
          "351:       rc = SQLITE_NOMEM;",
          "352:     }else{",
          "",
          "[Removed Lines]",
          "349:     pCsr->zInput = sqlite3_malloc(nByte+1);",
          "",
          "[Added Lines]",
          "349:     pCsr->zInput = sqlite3_malloc64(nByte+1);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     int iArg = 0;",
          "197:     z = &z[n+1];",
          "198:     while( z<zEnd && (NULL!=(z = (char *)sqlite3Fts3NextToken(z, &n))) ){",
          "201:       if( !aNew ){",
          "202:         sqlite3_free(zCopy);",
          "203:         sqlite3_free((void *)aArg);",
          "",
          "[Removed Lines]",
          "199:       int nNew = sizeof(char *)*(iArg+1);",
          "200:       char const **aNew = (const char **)sqlite3_realloc((void *)aArg, nNew);",
          "",
          "[Added Lines]",
          "199:       sqlite3_int64 nNew = sizeof(char *)*(iArg+1);",
          "200:       char const **aNew = (const char **)sqlite3_realloc64((void *)aArg, nNew);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1752:   }",
          "1754:   if( nElem>0 ){",
          "1757:     if( !pReader ){",
          "1758:       rc = SQLITE_NOMEM;",
          "1759:     }else{",
          "",
          "[Removed Lines]",
          "1755:     int nByte = sizeof(Fts3SegReader) + (nElem+1)*sizeof(Fts3HashElem *);",
          "1756:     pReader = (Fts3SegReader *)sqlite3_malloc(nByte);",
          "",
          "[Added Lines]",
          "1755:     sqlite3_int64 nByte;",
          "1756:     nByte = sizeof(Fts3SegReader) + (nElem+1)*sizeof(Fts3HashElem *);",
          "1757:     pReader = (Fts3SegReader *)sqlite3_malloc64(nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3369:   if( *pRC ) return;",
          "3371:   if( pBlob==0 ){",
          "3373:     return;",
          "",
          "[Removed Lines]",
          "3370:   pBlob = sqlite3_malloc( 10*p->nColumn );",
          "",
          "[Added Lines]",
          "3371:   pBlob = sqlite3_malloc64( 10*(sqlite3_int64)p->nColumn );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3417:   const int nStat = p->nColumn+2;",
          "3419:   if( *pRC ) return;",
          "3421:   if( a==0 ){",
          "3423:     return;",
          "",
          "[Removed Lines]",
          "3420:   a = sqlite3_malloc( (sizeof(u32)+10)*nStat );",
          "",
          "[Added Lines]",
          "3421:   a = sqlite3_malloc64( (sizeof(u32)+10)*(sqlite3_int64)nStat );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3538:     }",
          "3540:     if( rc==SQLITE_OK ){",
          "3543:       if( aSz==0 ){",
          "3544:         rc = SQLITE_NOMEM;",
          "3545:       }else{",
          "",
          "[Removed Lines]",
          "3541:       int nByte = sizeof(u32) * (p->nColumn+1)*3;",
          "3542:       aSz = (u32 *)sqlite3_malloc(nByte);",
          "",
          "[Added Lines]",
          "3542:       sqlite3_int64 nByte = sizeof(u32) * ((sqlite3_int64)p->nColumn+1)*3;",
          "3543:       aSz = (u32 *)sqlite3_malloc64(nByte);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3605: ){",
          "3611:   memset(pCsr, 0, sizeof(*pCsr));",
          "3612:   nByte = sizeof(Fts3SegReader *) * nSeg;",
          "3615:   if( pCsr->apSegment==0 ){",
          "3616:     rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "3613:   pCsr->apSegment = (Fts3SegReader **)sqlite3_malloc(nByte);",
          "",
          "[Added Lines]",
          "3614:   pCsr->apSegment = (Fts3SegReader **)sqlite3_malloc64(nByte);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5590:   }",
          "5594:   if( aSzDel==0 ){",
          "5595:     rc = SQLITE_NOMEM;",
          "5596:     goto update_out;",
          "",
          "[Removed Lines]",
          "5593:   aSzDel = sqlite3_malloc( sizeof(aSzDel[0])*(p->nColumn+1)*2 );",
          "",
          "[Added Lines]",
          "5594:   aSzDel = sqlite3_malloc64(sizeof(aSzDel[0])*((sqlite3_int64)p->nColumn+1)*2);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:       p->eRemoveDiacritic = FTS5_REMOVE_DIACRITICS_SIMPLE;",
          "371:       p->nFold = 64;",
          "373:       if( p->aFold==0 ){",
          "374:         rc = SQLITE_NOMEM;",
          "375:       }",
          "",
          "[Removed Lines]",
          "372:       p->aFold = sqlite3_malloc(p->nFold * sizeof(char));",
          "",
          "[Added Lines]",
          "372:       p->aFold = sqlite3_malloc64(p->nFold * sizeof(char));",
          "",
          "---------------"
        ],
        "ext/rtree/geopoly.c||ext/rtree/geopoly.c": [
          "File: ext/rtree/geopoly.c -> ext/rtree/geopoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:       GeoPoly *pOut;",
          "270:       int x = 1;",
          "273:       x = 1;",
          "274:       if( pOut==0 ) goto parse_json_err;",
          "275:       pOut->nVertex = s.nVertex;",
          "",
          "[Removed Lines]",
          "272:       pOut = sqlite3_malloc64( GEOPOLY_SZ(s.nVertex) );",
          "",
          "[Added Lines]",
          "272:       pOut = sqlite3_malloc64( GEOPOLY_SZ((sqlite3_int64)s.nVertex) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655:     if( pRc ) *pRc = SQLITE_OK;",
          "656:     if( aCoord==0 ){",
          "657:       geopolyBboxFill:",
          "659:       if( pOut==0 ){",
          "660:         sqlite3_free(p);",
          "661:         if( context ) sqlite3_result_error_nomem(context);",
          "",
          "[Removed Lines]",
          "658:       pOut = sqlite3_realloc(p, GEOPOLY_SZ(4));",
          "",
          "[Added Lines]",
          "658:       pOut = sqlite3_realloc64(p, GEOPOLY_SZ(4));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1053: static int geopolyOverlap(GeoPoly *p1, GeoPoly *p2){",
          "1055:   GeoOverlap *p;",
          "1057:   GeoEvent *pThisEvent;",
          "1058:   double rX;",
          "1059:   int rc = 0;",
          "",
          "[Removed Lines]",
          "1054:   int nVertex = p1->nVertex + p2->nVertex + 2;",
          "1056:   int nByte;",
          "",
          "[Added Lines]",
          "1054:   sqlite3_int64 nVertex = p1->nVertex + p2->nVertex + 2;",
          "1056:   sqlite3_int64 nByte;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1065:   nByte = sizeof(GeoEvent)*nVertex*2",
          "1066:            + sizeof(GeoSegment)*nVertex",
          "1067:            + sizeof(GeoOverlap);",
          "1069:   if( p==0 ) return -1;",
          "1070:   p->aEvent = (GeoEvent*)&p[1];",
          "1071:   p->aSegment = (GeoSegment*)&p->aEvent[nVertex*2];",
          "",
          "[Removed Lines]",
          "1068:   p = sqlite3_malloc( nByte );",
          "",
          "[Added Lines]",
          "1068:   p = sqlite3_malloc64( nByte );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1233:   sqlite3_vtab_config(db, SQLITE_VTAB_CONSTRAINT_SUPPORT, 1);",
          "1239:   if( !pRtree ){",
          "1240:     return SQLITE_NOMEM;",
          "1241:   }",
          "",
          "[Removed Lines]",
          "1236:   nDb = (int)strlen(argv[1]);",
          "1237:   nName = (int)strlen(argv[2]);",
          "1238:   pRtree = (Rtree *)sqlite3_malloc(sizeof(Rtree)+nDb+nName+2);",
          "",
          "[Added Lines]",
          "1236:   nDb = strlen(argv[1]);",
          "1237:   nName = strlen(argv[2]);",
          "1238:   pRtree = (Rtree *)sqlite3_malloc64(sizeof(Rtree)+nDb+nName+2);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b6ae032c28e7fe34d81d1769f6e2901addbd1b95cd9a255dcef274061fb0164",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60379d424341391776e3270f989f0a489db0539c",
      "candidate_info": {
        "commit_hash": "60379d424341391776e3270f989f0a489db0539c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/60379d424341391776e3270f989f0a489db0539c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix the CLI so that the \".open --hexdb\" command works even if it is contained in a subscript that is read using \".read\".\n\nFossilOrigin-Name: 67a87399b8ad8f1ce3052ee3159906f5c6df3d7b5691b3acac856bd2f1c82088",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e3bf1d3ea5f748c5142c2403813fdace5aedc1fc68f0dcd5eae40a2fe763fedb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3595: }",
          "",
          "[Removed Lines]",
          "3598: static int process_input(ShellState *p, FILE *in);",
          "",
          "[Added Lines]",
          "3599: static int process_input(ShellState *p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3749:       return 0;",
          "3750:     }",
          "3751:   }else{",
          "3753:   }",
          "3755:   if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;",
          "",
          "[Removed Lines]",
          "3752:     in = stdin;",
          "",
          "[Added Lines]",
          "3753:     in = p->in;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3789:     }",
          "3790:   }",
          "3793:   return a;",
          "3795: readHexDb_error:",
          "3796:   if( in!=stdin ){",
          "3797:     fclose(in);",
          "3798:   }else{",
          "3800:       if(strncmp(zLine, \"| end \", 6)==0 ) break;",
          "3801:     }",
          "3802:   }",
          "",
          "[Removed Lines]",
          "3792:   if( in!=stdin ) fclose(in);",
          "3799:     while( fgets(zLine, sizeof(zLine), in)!=0 ){",
          "",
          "[Added Lines]",
          "3793:   if( in!=p->in ) fclose(in);",
          "3800:     while( fgets(zLine, sizeof(zLine), p->in)!=0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6970:   }else",
          "6972:   if( c=='r' && n>=3 && strncmp(azArg[0], \"read\", n)==0 ){",
          "6974:     if( nArg!=2 ){",
          "6975:       raw_printf(stderr, \"Usage: .read FILE\\n\");",
          "6976:       rc = 1;",
          "6977:       goto meta_command_exit;",
          "6978:     }",
          "6981:       utf8_printf(stderr,\"Error: cannot open \\\"%s\\\"\\n\", azArg[1]);",
          "6982:       rc = 1;",
          "6983:     }else{",
          "6986:     }",
          "6987:   }else",
          "6989:   if( c=='r' && n>=3 && strncmp(azArg[0], \"restore\", n)==0 ){",
          "",
          "[Removed Lines]",
          "6973:     FILE *alt;",
          "6979:     alt = fopen(azArg[1], \"rb\");",
          "6980:     if( alt==0 ){",
          "6984:       rc = process_input(p, alt);",
          "6985:       fclose(alt);",
          "",
          "[Added Lines]",
          "6974:     FILE *inSaved = p->in;",
          "6980:     p->in = fopen(azArg[1], \"rb\");",
          "6981:     if( p->in==0 ){",
          "6985:       rc = process_input(p);",
          "6986:       fclose(p->in);",
          "6988:     p->in = inSaved;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "8327: static int process_input(ShellState *p, FILE *in){",
          "",
          "[Added Lines]",
          "8329: static int process_input(ShellState *p){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8340:     fflush(p->out);",
          "8342:     if( zLine==0 ){",
          "8345:       break;",
          "8346:     }",
          "8347:     if( seenInterrupt ){",
          "8349:       seenInterrupt = 0;",
          "8350:     }",
          "8351:     lineno++;",
          "",
          "[Removed Lines]",
          "8339:   while( errCnt==0 || !bail_on_error || (in==0 && stdin_is_interactive) ){",
          "8341:     zLine = one_input_line(in, zLine, nSql>0);",
          "8344:       if( in==0 && stdin_is_interactive ) printf(\"\\n\");",
          "8348:       if( in!=0 ) break;",
          "",
          "[Added Lines]",
          "8341:   while( errCnt==0 || !bail_on_error || (p->in==0 && stdin_is_interactive) ){",
          "8343:     zLine = one_input_line(p->in, zLine, nSql>0);",
          "8346:       if( p->in==0 && stdin_is_interactive ) printf(\"\\n\");",
          "8350:       if( p->in!=0 ) break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8389:     }",
          "8390:     if( nSql && line_contains_semicolon(&zSql[nSqlPrior], nSql-nSqlPrior)",
          "8391:                 && sqlite3_complete(zSql) ){",
          "8393:       nSql = 0;",
          "8394:       if( p->outCount ){",
          "8395:         output_reset(p);",
          "",
          "[Removed Lines]",
          "8392:       errCnt += runOneSqlLine(p, zSql, in, startline);",
          "",
          "[Added Lines]",
          "8394:       errCnt += runOneSqlLine(p, zSql, p->in, startline);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8403:     }",
          "8404:   }",
          "8405:   if( nSql && !_all_whitespace(zSql) ){",
          "8407:   }",
          "8408:   free(zSql);",
          "8409:   free(zLine);",
          "",
          "[Removed Lines]",
          "8406:     errCnt += runOneSqlLine(p, zSql, in, startline);",
          "",
          "[Added Lines]",
          "8408:     errCnt += runOneSqlLine(p, zSql, p->in, startline);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "8492:   char *home_dir = NULL;",
          "8493:   const char *sqliterc = sqliterc_override;",
          "8494:   char *zBuf = 0;",
          "8497:   if (sqliterc == NULL) {",
          "8498:     home_dir = find_home_dir(0);",
          "",
          "[Removed Lines]",
          "8495:   FILE *in = NULL;",
          "",
          "[Added Lines]",
          "8497:   FILE *inSaved = p->in;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "8504:     zBuf = sqlite3_mprintf(\"%s/.sqliterc\",home_dir);",
          "8505:     sqliterc = zBuf;",
          "8506:   }",
          "8509:     if( stdin_is_interactive ){",
          "8510:       utf8_printf(stderr,\"-- Loading resources from %s\\n\",sqliterc);",
          "8511:     }",
          "8514:   }",
          "8515:   sqlite3_free(zBuf);",
          "8516: }",
          "",
          "[Removed Lines]",
          "8507:   in = fopen(sqliterc,\"rb\");",
          "8508:   if( in ){",
          "8512:     process_input(p,in);",
          "8513:     fclose(in);",
          "",
          "[Added Lines]",
          "8509:   p->in = fopen(sqliterc,\"rb\");",
          "8510:   if( p->in ){",
          "8514:     process_input(p);",
          "8515:     fclose(p->in);",
          "8517:   p->in = inSaved;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "9123: #elif HAVE_LINENOISE",
          "9124:       linenoiseSetCompletionCallback(linenoise_completion);",
          "9125: #endif",
          "9127:       if( zHistory ){",
          "9128:         shell_stifle_history(2000);",
          "9129:         shell_write_history(zHistory);",
          "9130:         free(zHistory);",
          "9131:       }",
          "9132:     }else{",
          "9134:     }",
          "9135:   }",
          "9136:   set_table_name(&data, 0);",
          "",
          "[Removed Lines]",
          "9126:       rc = process_input(&data, 0);",
          "9133:       rc = process_input(&data, stdin);",
          "",
          "[Added Lines]",
          "9129:       data.in = 0;",
          "9130:       rc = process_input(&data);",
          "9137:       data.in = stdin;",
          "9138:       rc = process_input(&data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "936ade4dba52cd4e69324442ef4a81e87c286dd5",
      "candidate_info": {
        "commit_hash": "936ade4dba52cd4e69324442ef4a81e87c286dd5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/936ade4dba52cd4e69324442ef4a81e87c286dd5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Change a integer variable in sqlite3VdbeRecordUnpack() to unsigned in order to avoid any possibility of an integer overflow.\n\nFossilOrigin-Name: 1b536f6fd8d58800042f130842f0586aaa357841ee0d1b690a9815c865d50826",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 65ad6c55f1ba9bc2f75afffa3adaf19f145fad7ac9a00ccce6372e9a2cc4341b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3795: ){",
          "3796:   const unsigned char *aKey = (const unsigned char *)pKey;",
          "3800:   u32 szHdr;",
          "",
          "[Removed Lines]",
          "3797:   int d;",
          "",
          "[Added Lines]",
          "3797:   u32 d;",
          "",
          "---------------"
        ]
      }
    }
  ]
}