{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2e5beddb34c20868fb45ff5e3bbb6fb9e603042c",
      "candidate_info": {
        "commit_hash": "2e5beddb34c20868fb45ff5e3bbb6fb9e603042c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2e5beddb34c20868fb45ff5e3bbb6fb9e603042c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/dbstat.c",
          "test/stat.test"
        ],
        "message": "Fix DBSTAT so that it returns now rows, rather than an error when the WHERE clause is \"schema=NULL\".\n\nFossilOrigin-Name: 5b246b47aeadc25dbec0956e2d6edcd49fbe874a01734fdf15b770507648222d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/dbstat.c||src/dbstat.c",
          "test/stat.test||test/stat.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8452fe03430d34abecab618d6136b863630f91d68d69ebbc115f808bc81c3817",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:     const char *zDbase = (const char*)sqlite3_value_text(argv[iArg++]);",
          "701:     pCsr->iDb = sqlite3FindDbName(pTab->db, zDbase);",
          "702:     if( pCsr->iDb<0 ){",
          "706:     }",
          "707:   }else{",
          "708:     pCsr->iDb = pTab->iDb;",
          "",
          "[Removed Lines]",
          "703:       sqlite3_free(pCursor->pVtab->zErrMsg);",
          "704:       pCursor->pVtab->zErrMsg = sqlite3_mprintf(\"no such schema: %s\", zDbase);",
          "705:       return pCursor->pVtab->zErrMsg ? SQLITE_ERROR : SQLITE_NOMEM_BKPT;",
          "",
          "[Added Lines]",
          "703:       pCsr->iDb = 0;",
          "704:       pCsr->isEof = 1;",
          "705:       return SQLITE_OK;",
          "",
          "---------------"
        ],
        "test/stat.test||test/stat.test": [
          "File: test/stat.test -> test/stat.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   CREATE VIRTUAL TABLE st4 USING dbstat;",
          "304: }",
          "305: do_execsql_test 8.2 {",
          "307: }",
          "308: do_execsql_test 8.3 {",
          "309:   SELECT aggregate=1 FROM st4 WHERE aggregate = 5",
          "310: }",
          "311: do_execsql_test 8.4 {",
          "312:   SELECT * FROM st4 WHERE name = NULL;",
          "315:   SELECT * FROM st4 WHERE schema = NULL;",
          "318: finish_test",
          "",
          "[Removed Lines]",
          "306:   SELECT * FROM st4 WHERE st4.aggregate = NULL",
          "313: }",
          "314: do_catchsql_test 8.5 {",
          "316: } {1 {no such schema: }}",
          "",
          "[Added Lines]",
          "306:   SELECT * FROM st4 WHERE st4.aggregate = NULL;",
          "313: } {}",
          "314: do_execsql_test 8.5 {",
          "316: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "012b15e2d7dfc7cc443a00e2d977c17d90160745",
      "candidate_info": {
        "commit_hash": "012b15e2d7dfc7cc443a00e2d977c17d90160745",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/012b15e2d7dfc7cc443a00e2d977c17d90160745",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/dbstat.c",
          "test/stat.test"
        ],
        "message": "Get the aggregate=TRUE feature working on the DBSTAT virtual  table.\n\nFossilOrigin-Name: 16fef3db063830884de46d53a289f637a7204fe84fcdee7ea81dbb8bca578952",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/dbstat.c||src/dbstat.c",
          "test/stat.test||test/stat.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9b5722f0fe666b99677e5f333dd8413aefb9ace7a461d74f6558f0ac53768719",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: typedef struct StatTable StatTable;",
          "",
          "[Removed Lines]",
          "59: #define VTAB_SCHEMA                                                          \\",
          "60:   \"CREATE TABLE xx( \"                                                        \\",
          "61:   \"  name       TEXT,\"          /*  0 Name of table or index */              \\",
          "62:   \"  path       TEXT,\"          /*  1 Path to page from root */              \\",
          "63:   \"  pageno     INTEGER,\"       /*  2 Page number */                         \\",
          "64:   \"  pagetype   TEXT,\"          /*  3 'internal', 'leaf' or 'overflow' */    \\",
          "65:   \"  ncell      INTEGER,\"       /*  4 Cells on page (0 for overflow) */      \\",
          "66:   \"  payload    INTEGER,\"       /*  5 Bytes of payload on this page */       \\",
          "67:   \"  unused     INTEGER,\"       /*  6 Bytes of unused space on this page */  \\",
          "68:   \"  mx_payload INTEGER,\"       /*  7 Largest payload size of all cells */   \\",
          "69:   \"  pgoffset   INTEGER,\"       /*  8 Offset of page in file */              \\",
          "70:   \"  pgsize     INTEGER,\"       /*  9 Size of the page */                    \\",
          "71:   \"  schema     TEXT HIDDEN,\"   /* 10 Database schema being analyzed */      \\",
          "72:   \"  aggregate  BOOLEAN HIDDEN\" /* 11 aggregate info for each table */       \\",
          "73:   \");\"",
          "",
          "[Added Lines]",
          "59: static const char zDbstatSchema[] =",
          "60:   \"CREATE TABLE x(\"",
          "73:   \")\"",
          "74: ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   }else{",
          "166:     iDb = 0;",
          "167:   }",
          "169:   if( rc==SQLITE_OK ){",
          "170:     pTab = (StatTable *)sqlite3_malloc64(sizeof(StatTable));",
          "171:     if( pTab==0 ) rc = SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "168:   rc = sqlite3_declare_vtab(db, VTAB_SCHEMA);",
          "",
          "[Added Lines]",
          "170:   rc = sqlite3_declare_vtab(db, zDbstatSchema);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "323:   pCsr->isEof = 0;",
          "324: }",
          "329: static int statClose(sqlite3_vtab_cursor *pCursor){",
          "330:   StatCursor *pCsr = (StatCursor *)pCursor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: static void statResetCounts(StatCursor *pCsr){",
          "330:   pCsr->nCell = 0;",
          "331:   pCsr->nMxPayload = 0;",
          "332:   pCsr->nUnused = 0;",
          "333:   pCsr->nPayload = 0;",
          "334:   pCsr->szPage = 0;",
          "335:   pCsr->nPage = 0;",
          "336: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "481:   sqlite3_file *fd;",
          "482:   sqlite3_int64 x[2];",
          "491:   fd = sqlite3PagerFile(pPager);",
          "492:   x[0] = pCsr->iPageno;",
          "493:   if( sqlite3OsFileControl(fd, 230440, &x)==SQLITE_OK ){",
          "494:     pCsr->iOffset = x[0];",
          "496:   }",
          "497: }",
          "502: static int statNext(sqlite3_vtab_cursor *pCursor){",
          "503:   int rc;",
          "",
          "[Removed Lines]",
          "485:   pCsr->szPage = sqlite3BtreeGetPageSize(pBt);",
          "486:   pCsr->iOffset = (i64)pCsr->szPage * (pCsr->iPageno - 1);",
          "495:     pCsr->szPage = (int)x[1];",
          "",
          "[Added Lines]",
          "506:     pCsr->szPage += x[1];",
          "507:   }else{",
          "509:     pCsr->szPage += sqlite3BtreeGetPageSize(pBt);",
          "510:     pCsr->iOffset = (i64)pCsr->szPage * (pCsr->iPageno - 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "514: statNextRestart:",
          "515:   if( pCsr->aPage[0].pPg==0 ){",
          "516:     rc = sqlite3_step(pCsr->pStmt);",
          "517:     if( rc==SQLITE_ROW ){",
          "518:       int nPage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534:     statResetCounts(pCsr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "525:       rc = sqlite3PagerGet(pPager, iRoot, &pCsr->aPage[0].pPg, 0);",
          "526:       pCsr->aPage[0].iPgno = iRoot;",
          "527:       pCsr->aPage[0].iCell = 0;",
          "529:       pCsr->iPage = 0;",
          "531:     }else{",
          "532:       pCsr->isEof = 1;",
          "533:       return sqlite3_reset(pCsr->pStmt);",
          "534:     }",
          "535:   }else{",
          "538:     StatPage *p = &pCsr->aPage[pCsr->iPage];",
          "540:     while( p->iCell<p->nCell ){",
          "541:       StatCell *pCell = &p->aCell[p->iCell];",
          "544:         sqlite3BtreeEnter(pBt);",
          "545:         nUsable = sqlite3BtreeGetPageSize(pBt) -",
          "546:                         sqlite3BtreeGetReserveNoMutex(pBt);",
          "547:         sqlite3BtreeLeave(pBt);",
          "556:         if( pCell->iOvfl<pCell->nOvfl-1 ){",
          "559:         }else{",
          "562:         }",
          "563:         pCell->iOvfl++;",
          "566:       }",
          "567:       if( p->iRightChildPg ) break;",
          "568:       p->iCell++;",
          "",
          "[Removed Lines]",
          "528:       pCsr->aPage[0].zPath = z = sqlite3_mprintf(\"/\");",
          "530:       if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "542:       if( pCell->iOvfl<pCell->nOvfl ){",
          "543:         int nUsable;",
          "548:         pCsr->zName = (char *)sqlite3_column_text(pCsr->pStmt, 0);",
          "549:         pCsr->iPageno = pCell->aOvfl[pCell->iOvfl];",
          "550:         pCsr->zPagetype = \"overflow\";",
          "551:         pCsr->nCell = 0;",
          "552:         pCsr->nMxPayload = 0;",
          "553:         pCsr->zPath = z = sqlite3_mprintf(",
          "554:             \"%s%.3x+%.6x\", p->zPath, p->iCell, pCell->iOvfl",
          "555:         );",
          "557:           pCsr->nUnused = 0;",
          "558:           pCsr->nPayload = nUsable - 4;",
          "560:           pCsr->nPayload = pCell->nLastOvfl;",
          "561:           pCsr->nUnused = nUsable - 4 - pCsr->nPayload;",
          "564:         statSizeAndOffset(pCsr);",
          "565:         return z==0 ? SQLITE_NOMEM_BKPT : SQLITE_OK;",
          "",
          "[Added Lines]",
          "547:       if( !pCsr->isAgg ){",
          "548:         pCsr->aPage[0].zPath = z = sqlite3_mprintf(\"/\");",
          "549:         if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "550:       }",
          "552:       pCsr->nPage = 1;",
          "560:     if( !pCsr->isAgg ) statResetCounts(pCsr);",
          "563:       while( pCell->iOvfl<pCell->nOvfl ){",
          "564:         int nUsable, iOvfl;",
          "569:         pCsr->nPage++;",
          "570:         statSizeAndOffset(pCsr);",
          "572:           pCsr->nPayload += nUsable - 4;",
          "574:           pCsr->nPayload += pCell->nLastOvfl;",
          "575:           pCsr->nUnused += nUsable - 4 - pCell->nLastOvfl;",
          "577:         iOvfl = pCell->iOvfl;",
          "579:         if( !pCsr->isAgg ){",
          "580:           pCsr->zName = (char *)sqlite3_column_text(pCsr->pStmt, 0);",
          "581:           pCsr->iPageno = pCell->aOvfl[iOvfl];",
          "582:           pCsr->zPagetype = \"overflow\";",
          "583:           pCsr->zPath = z = sqlite3_mprintf(",
          "584:               \"%s%.3x+%.6x\", p->zPath, p->iCell, iOvfl",
          "585:           );",
          "586:           return z==0 ? SQLITE_NOMEM_BKPT : SQLITE_OK;",
          "587:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "571:     if( !p->iRightChildPg || p->iCell>p->nCell ){",
          "572:       statClearPage(p);",
          "576:     }",
          "577:     pCsr->iPage++;",
          "",
          "[Removed Lines]",
          "573:       if( pCsr->iPage==0 ) return statNext(pCursor);",
          "574:       pCsr->iPage--;",
          "",
          "[Added Lines]",
          "595:       if( pCsr->iPage>0 ){",
          "596:         pCsr->iPage--;",
          "597:       }else if( pCsr->isAgg ){",
          "600:         return SQLITE_OK;",
          "601:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "587:       p[1].iPgno = p->aCell[p->iCell].iChildPg;",
          "588:     }",
          "589:     rc = sqlite3PagerGet(pPager, p[1].iPgno, &p[1].pPg, 0);",
          "590:     p[1].iCell = 0;",
          "592:     p->iCell++;",
          "594:   }",
          "",
          "[Removed Lines]",
          "591:     p[1].zPath = z = sqlite3_mprintf(\"%s%.3x/\", p->zPath, p->iCell);",
          "593:     if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "",
          "[Added Lines]",
          "617:     pCsr->nPage++;",
          "619:     if( !pCsr->isAgg ){",
          "620:       p[1].zPath = z = sqlite3_mprintf(\"%s%.3x/\", p->zPath, p->iCell);",
          "621:       if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "622:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "620:           pCsr->zPagetype = \"corrupted\";",
          "621:           break;",
          "622:       }",
          "628:       nPayload = 0;",
          "629:       for(i=0; i<p->nCell; i++){",
          "630:         nPayload += p->aCell[i].nLocal;",
          "631:       }",
          "633:     }",
          "634:   }",
          "",
          "[Removed Lines]",
          "623:       pCsr->nCell = p->nCell;",
          "624:       pCsr->nUnused = p->nUnused;",
          "625:       pCsr->nMxPayload = p->nMxPayload;",
          "626:       pCsr->zPath = z = sqlite3_mprintf(\"%s\", p->zPath);",
          "627:       if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "632:       pCsr->nPayload = nPayload;",
          "",
          "[Added Lines]",
          "653:       pCsr->nCell += p->nCell;",
          "654:       pCsr->nUnused += p->nUnused;",
          "655:       if( p->nMxPayload>pCsr->nMxPayload ) pCsr->nMxPayload = p->nMxPayload;",
          "656:       if( !pCsr->isAgg ){",
          "657:         pCsr->zPath = z = sqlite3_mprintf(\"%s\", p->zPath);",
          "658:         if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "659:       }",
          "664:       pCsr->nPayload += nPayload;",
          "669:       if( pCsr->isAgg ) goto statNextRestart;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "722:       sqlite3_result_text(ctx, pCsr->zName, -1, SQLITE_TRANSIENT);",
          "723:       break;",
          "726:       break;",
          "729:       break;",
          "732:       break;",
          "734:       sqlite3_result_int(ctx, pCsr->nCell);",
          "",
          "[Removed Lines]",
          "725:       sqlite3_result_text(ctx, pCsr->zPath, -1, SQLITE_TRANSIENT);",
          "728:       sqlite3_result_int64(ctx, pCsr->iPageno);",
          "731:       sqlite3_result_text(ctx, pCsr->zPagetype, -1, SQLITE_STATIC);",
          "",
          "[Added Lines]",
          "762:       if( !pCsr->isAgg ){",
          "763:         sqlite3_result_text(ctx, pCsr->zPath, -1, SQLITE_TRANSIENT);",
          "764:       }",
          "767:       if( pCsr->isAgg ){",
          "768:         sqlite3_result_int64(ctx, pCsr->nPage);",
          "769:       }else{",
          "770:         sqlite3_result_int64(ctx, pCsr->iPageno);",
          "771:       }",
          "774:       if( !pCsr->isAgg ){",
          "775:         sqlite3_result_text(ctx, pCsr->zPagetype, -1, SQLITE_STATIC);",
          "776:       }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "743:       sqlite3_result_int(ctx, pCsr->nMxPayload);",
          "744:       break;",
          "747:       break;",
          "749:       sqlite3_result_int(ctx, pCsr->szPage);",
          "",
          "[Removed Lines]",
          "746:       sqlite3_result_int64(ctx, pCsr->iOffset);",
          "",
          "[Added Lines]",
          "791:       if( !pCsr->isAgg ){",
          "792:         sqlite3_result_int64(ctx, pCsr->iOffset);",
          "793:       }",
          "",
          "---------------"
        ],
        "test/stat.test||test/stat.test": [
          "File: test/stat.test -> test/stat.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   t3 /00f/ 23 leaf 2 738 268 370                         \\",
          "135: ]",
          "137: # With every index entry overflowing, make sure no pages are missed",
          "138: # (other than the locking page which is 64 in this test build.)",
          "139: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: do_execsql_test stat-2.1agg {",
          "138:   SELECT * FROM dbstat WHERE aggregate=TRUE ORDER BY name;",
          "139: } [list \\",
          "140:   sqlite_autoindex_t3_1 {}  5 {} 32  3898 1065 132 {}  5120 \\",
          "141:   sqlite_master         {}  1 {}  2    84  824  49 {}  1024 \\",
          "142:   t3                    {} 17 {} 47 11188 5815 370 {} 17408 \\",
          "143: ]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:   t4 /000+000006 18 overflow 0 1020 0 0      \\",
          "172: ]",
          "174: do_execsql_test stat-4.1 {",
          "175:   CREATE TABLE t5(x);",
          "176:   CREATE INDEX i5 ON t5(x);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182: do_execsql_test stat-3.2 {",
          "183:   SELECT *, '|' FROM dbstat WHERE aggregate=TRUE ORDER BY name;",
          "184: } [list \\",
          "185:   i4            {} 9 {} 1 7782 1386 7782 {} 9216 | \\",
          "186:   sqlite_master {} 1 {} 2   74  834   40 {} 1024 | \\",
          "187:   t4            {} 8 {} 1 7780  367 7780 {} 8192 | \\",
          "188: ]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:   t1 /001+000000 4 overflow 0 1020 0 0    \\",
          "202: ]",
          "204: do_catchsql_test stat-6.1 {",
          "205:   CREATE VIRTUAL TABLE temp.s2 USING dbstat(mainx);",
          "206: } {1 {no such database: mainx}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: do_execsql_test stat-5.20 {",
          "222:   SELECT name, quote(path), pageno, quote(pagetype), ncell, payload,",
          "223:          unused, mx_payload, '|' FROM dbstat('main',1);",
          "224: } {sqlite_master NULL 1 NULL 1 34 878 34 | tx NULL 1 NULL 0 0 1016 0 |}",
          "225: do_execsql_test stat-5.21 {",
          "226:   SELECT name, quote(path), pageno, quote(pagetype), ncell, payload,",
          "227:          unused, mx_payload, '|' FROM dbstat('aux1',1);",
          "228: } {sqlite_master NULL 1 NULL 1 34 878 34 | t1 NULL 3 NULL 2 3033 5 1517 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e78c027b6440ed9f68ed32cf66c86f11adb3997a",
      "candidate_info": {
        "commit_hash": "e78c027b6440ed9f68ed32cf66c86f11adb3997a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e78c027b6440ed9f68ed32cf66c86f11adb3997a",
        "files": [
          "ext/misc/decimal.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: e1416c8b0628afa062d8cff40d0cd3576dc85460e55b21a271f88fcb608b9f59",
        "before_after_code_files": [
          "ext/misc/decimal.c||ext/misc/decimal.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/decimal.c||ext/misc/decimal.c": [
          "File: ext/misc/decimal.c -> ext/misc/decimal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "550:     signed char f = pA->a[i];",
          "551:     int carry = 0, x;",
          "552:     for(j=pB->nDigit-1, k=i+j+3; j>=0; j--, k--){",
          "554:       acc[k] = x%10;",
          "555:       carry = x/10;",
          "556:     }",
          "",
          "[Removed Lines]",
          "553:       int x = acc[k] + f*pB->a[j] + carry;",
          "",
          "[Added Lines]",
          "553:       x = acc[k] + f*pB->a[j] + carry;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0294ce071c863eb517e97beff31c3d95a4370e979a969415162302a90d3fda0e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2493dcdd07c630aa452757d2c6d4132b5dbebdc2",
      "candidate_info": {
        "commit_hash": "2493dcdd07c630aa452757d2c6d4132b5dbebdc2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2493dcdd07c630aa452757d2c6d4132b5dbebdc2",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test case in test/fuzzdata8.db.\n\nFossilOrigin-Name: fa11230135610f01c56d6f436f30a8b57a50b430fe7397ea3a0b6642986b3a39",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 155e6649efe8614718be7ac6c3cccf5b073ae57496dc220db5e4313621f5188e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30b5db126149763c826250ed171318f8b4d075ec",
      "candidate_info": {
        "commit_hash": "30b5db126149763c826250ed171318f8b4d075ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/30b5db126149763c826250ed171318f8b4d075ec",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix a problem that could cause an infinite loop in the fts3 'merge' command.\n\nFossilOrigin-Name: be545f85a6ef09cc6c762f7d2ab7a0b3adf5590c3fbdc9903e6b5b5cec6e823f",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "344:          \"  FROM %Q.'%q_segdir' WHERE level = ? AND idx < ?\",",
          "",
          "[Added Lines]",
          "344:          \"  FROM (SELECT * FROM %Q.'%q_segdir' \"",
          "345:          \"        WHERE level = ? ORDER BY idx ASC LIMIT ?\"",
          "346:          \"  )\",",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e12225d59c63ba392db4fa8dc26700ac26b20c8b98ea5107eef0e0b5138ace87",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6123:   SELECT offsets(t1) FROM t1 WHERE t1 MATCH 'rtree ner \"json1^enable\"';",
          "6124: }",
          "6126: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6126: #-------------------------------------------------------------------------",
          "6127: do_execsql_test 42.1 {",
          "6128:   CREATE VIRTUAL TABLE f USING fts3(a, b);",
          "6129: }",
          "6130: do_execsql_test 42.2 {",
          "6131:   INSERT INTO f_segdir VALUES(0,2,1111,0,0,X'00');",
          "6132:   INSERT INTO f_segdir VALUES(0,3,0   ,0,0,X'00013003010200');",
          "6133: }",
          "6134: do_execsql_test 42.3 {",
          "6135:   INSERT INTO f(f) VALUES ('merge=107,2');",
          "6136: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}