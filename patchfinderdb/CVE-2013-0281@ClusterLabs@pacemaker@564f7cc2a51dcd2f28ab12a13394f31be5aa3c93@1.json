{
  "cve_id": "CVE-2013-0281",
  "cve_desc": "Pacemaker 1.1.10, when remote Cluster Information Base (CIB) configuration or resource management is enabled, does not limit the duration of connections to the blocking sockets, which allows remote attackers to cause a denial of service (connection blocking).",
  "repo": "ClusterLabs/pacemaker",
  "patch_hash": "564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
  "patch_info": {
    "commit_hash": "564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
    "repo": "ClusterLabs/pacemaker",
    "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
    "files": [
      "cib/callbacks.c",
      "cib/callbacks.h",
      "cib/notify.c",
      "cib/remote.c",
      "include/crm_internal.h",
      "lib/cib/cib_remote.c",
      "lib/common/mainloop.c",
      "lib/common/remote.c",
      "tools/crm_mon.c"
    ],
    "message": "High: core: Internal tls api improvements for reuse with future LRMD tls backend.",
    "before_after_code_files": [
      "cib/callbacks.c||cib/callbacks.c",
      "cib/callbacks.h||cib/callbacks.h",
      "cib/notify.c||cib/notify.c",
      "cib/remote.c||cib/remote.c",
      "include/crm_internal.h||include/crm_internal.h",
      "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
      "lib/common/mainloop.c||lib/common/mainloop.c",
      "lib/common/remote.c||lib/common/remote.c",
      "tools/crm_mon.c||tools/crm_mon.c"
    ]
  },
  "patch_diff": {
    "cib/callbacks.c||cib/callbacks.c": [
      "File: cib/callbacks.c -> cib/callbacks.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "347:         int rid = 0;",
      "349:         if(sync_reply) {",
      "356:                       rid, client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
      "358:         } else {",
      "359:             crm_trace(\"Sending an event to %s %s\",",
      "",
      "[Removed Lines]",
      "350:             CRM_LOG_ASSERT(client_obj->request_id);",
      "352:             rid = client_obj->request_id;",
      "353:             client_obj->request_id = 0;",
      "355:             crm_trace(\"Sending response %d to %s %s\",",
      "",
      "[Added Lines]",
      "350:             if (client_obj->ipc) {",
      "351:                 CRM_LOG_ASSERT(client_obj->request_id);",
      "353:                 rid = client_obj->request_id;",
      "354:                 client_obj->request_id = 0;",
      "356:                 crm_trace(\"Sending response %d to %s %s\",",
      "358:             } else {",
      "359:                 crm_trace(\"Sending response to %s %s\",",
      "360:                       client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
      "361:             }",
      "",
      "---------------"
    ],
    "cib/callbacks.h||cib/callbacks.h": [
      "File: cib/callbacks.h -> cib/callbacks.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:     char *name;",
      "42:     char *callback_id;",
      "43:     char *user;",
      "44:     int request_id;",
      "46:     qb_ipcs_connection_t *ipc;",
      "48: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "49:     gnutls_session *session;",
      "50: #else",
      "51:     void *session;",
      "52: #endif",
      "53:     gboolean encrypted;",
      "54:     mainloop_io_t *remote;",
      "56:     unsigned long num_calls;",
      "58:     int pre_notify;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     char *recv_buf;",
      "51:     gboolean handshake_complete;",
      "56:     gboolean remote_auth;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60:     int confirmations;",
      "61:     int replace;",
      "62:     int diffs;",
      "64:     GList *delegated_calls;",
      "65: } cib_client_t;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:     int remote_auth_timeout;",
      "",
      "---------------"
    ],
    "cib/notify.c||cib/notify.c": [
      "File: cib/notify.c -> cib/notify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:     CRM_CHECK(client != NULL, return TRUE);",
      "84:     CRM_CHECK(update_msg != NULL, return TRUE);",
      "87:         crm_warn(\"Skipping client with NULL channel\");",
      "88:         return FALSE;",
      "89:     }",
      "",
      "[Removed Lines]",
      "86:     if (client->ipc == NULL) {",
      "",
      "[Added Lines]",
      "86:     if (client->ipc == NULL && client->session == NULL) {",
      "",
      "---------------"
    ],
    "cib/remote.c||cib/remote.c": [
      "File: cib/remote.c -> cib/remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "60: #  endif",
      "61: #endif",
      "67: extern int remote_tls_fd;",
      "68: extern gboolean cib_shutdown_flag;",
      "",
      "[Removed Lines]",
      "63: #ifdef HAVE_DECL_NANOSLEEP",
      "64: #  include <time.h>",
      "65: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "74: #  define DH_BITS 1024",
      "75: gnutls_dh_params dh_params;",
      "77: static void",
      "78: debug_log(int level, const char *str)",
      "79: {",
      "80:     fputs(str, stderr);",
      "81: }",
      "85: #endif",
      "87: int num_clients;",
      "88: int authenticate_user(const char *user, const char *passwd);",
      "89: int cib_remote_listen(gpointer data);",
      "",
      "[Removed Lines]",
      "76: extern gnutls_anon_server_credentials anon_cred_s;",
      "83: extern gnutls_session *create_tls_session(int csock, int type);",
      "",
      "[Added Lines]",
      "72: gnutls_anon_server_credentials anon_cred_s;",
      "80: #define REMOTE_AUTH_TIMEOUT 10000",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "215:     return FALSE;",
      "216: }",
      "218: int",
      "219: cib_remote_listen(gpointer data)",
      "220: {",
      "222:     int csock = 0;",
      "223:     unsigned laddr;",
      "226:     struct sockaddr_in addr;",
      "227:     int ssock = *(int *)data;",
      "229: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "230:     gnutls_session *session = NULL;",
      "231: #endif",
      "232:     cib_client_t *new_client = NULL;",
      "243:     static struct mainloop_fd_callbacks remote_client_fd_callbacks =",
      "244:         {",
      "245:             .dispatch = cib_remote_msg,",
      "246:             .destroy = cib_remote_connection_destroy,",
      "250:     laddr = sizeof(addr);",
      "251:     csock = accept(ssock, (struct sockaddr *)&addr, &laddr);",
      "",
      "[Removed Lines]",
      "221:     int lpc = 0;",
      "224:     time_t now = 0;",
      "225:     time_t start = time(NULL);",
      "234:     xmlNode *login = NULL;",
      "235:     const char *user = NULL;",
      "236:     const char *pass = NULL;",
      "237:     const char *tmp = NULL;",
      "239: #ifdef HAVE_DECL_NANOSLEEP",
      "241: #endif",
      "247:         };",
      "",
      "[Added Lines]",
      "213: static gboolean",
      "214: cib_remote_auth(xmlNode *login)",
      "215: {",
      "216:     const char *user = NULL;",
      "217:     const char *pass = NULL;",
      "218:     const char *tmp = NULL;",
      "220:     crm_log_xml_info(login, \"Login: \");",
      "221:     if (login == NULL) {",
      "222:         return FALSE;",
      "223:     }",
      "225:     tmp = crm_element_name(login);",
      "226:     if (safe_str_neq(tmp, \"cib_command\")) {",
      "227:         crm_err(\"Wrong tag: %s\", tmp);",
      "228:         return FALSE;",
      "229:     }",
      "231:     tmp = crm_element_value(login, \"op\");",
      "232:     if (safe_str_neq(tmp, \"authenticate\")) {",
      "233:         crm_err(\"Wrong operation: %s\", tmp);",
      "234:         return FALSE;",
      "235:     }",
      "237:     user = crm_element_value(login, \"user\");",
      "238:     pass = crm_element_value(login, \"password\");",
      "240:     if (!user || !pass) {",
      "241:         crm_err(\"missing auth credentials\");",
      "242:         return FALSE;",
      "243:     }",
      "248:     if (check_group_membership(user, CRM_DAEMON_GROUP) == FALSE) {",
      "249:         crm_err(\"User is not a member of the required group\");",
      "250:         return FALSE;",
      "252:     } else if (authenticate_user(user, pass) == FALSE) {",
      "253:         crm_err(\"PAM auth failed\");",
      "254:         return FALSE;",
      "255:     }",
      "257:     return TRUE;",
      "258: }",
      "260: static gboolean",
      "261: remote_auth_timeout_cb(gpointer data)",
      "262: {",
      "263:     cib_client_t *client = data;",
      "265:     client->remote_auth_timeout = 0;",
      "267:     if (client->remote_auth == TRUE) {",
      "268:         return FALSE;",
      "269:     }",
      "271:     mainloop_del_fd(client->remote);",
      "272:     crm_err(\"Remote client authentication timed out\");",
      "274:     return FALSE;",
      "275: }",
      "283:     int flag;",
      "294:         };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "257:         return TRUE;",
      "258:     }",
      "260:     if (ssock == remote_tls_fd) {",
      "261: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "264:         if (session == NULL) {",
      "265:             crm_err(\"TLS session creation failed\");",
      "266:             close(csock);",
      "",
      "[Removed Lines]",
      "263:         session = create_tls_session(csock, GNUTLS_SERVER);",
      "",
      "[Added Lines]",
      "307:     if ((flag = fcntl(csock, F_GETFL)) >= 0) {",
      "308:         if (fcntl(csock, F_SETFL, flag | O_NONBLOCK) < 0) {",
      "309:             crm_err( \"fcntl() write failed\");",
      "310:             close(csock);",
      "311:             return TRUE;",
      "312:         }",
      "313:     } else {",
      "314:         crm_err( \"fcntl() read failed\");",
      "315:         close(csock);",
      "316:         return TRUE;",
      "317:     }",
      "322:         session = crm_create_anon_tls_session(csock, GNUTLS_SERVER, anon_cred_s);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "269: #endif",
      "270:     }",
      "327:     num_clients++;",
      "328:     new_client = calloc(1, sizeof(cib_client_t));",
      "332:     new_client->id = crm_generate_uuid();",
      "338:     new_client->callback_id = NULL;",
      "339:     if (ssock == remote_tls_fd) {",
      "340: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "341:         new_client->encrypted = TRUE;",
      "",
      "[Removed Lines]",
      "272:     do {",
      "273:         crm_trace(\"Iter: %d\", lpc++);",
      "274:         if (ssock == remote_tls_fd) {",
      "275: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "276:             login = crm_recv_remote_msg(session, TRUE);",
      "277: #endif",
      "278:         } else {",
      "279:             login = crm_recv_remote_msg(GINT_TO_POINTER(csock), FALSE);",
      "280:         }",
      "281:         if (login != NULL) {",
      "282:             break;",
      "283:         }",
      "284: #ifdef HAVE_DECL_NANOSLEEP",
      "285:         nanosleep(&sleepfast, NULL);",
      "286: #else",
      "287:         sleep(1);",
      "288: #endif",
      "289:         now = time(NULL);",
      "292:     } while (login == NULL && (start - now) < 4);",
      "294:     crm_log_xml_info(login, \"Login: \");",
      "295:     if (login == NULL) {",
      "296:         goto bail;",
      "297:     }",
      "299:     tmp = crm_element_name(login);",
      "300:     if (safe_str_neq(tmp, \"cib_command\")) {",
      "301:         crm_err(\"Wrong tag: %s\", tmp);",
      "302:         goto bail;",
      "303:     }",
      "305:     tmp = crm_element_value(login, \"op\");",
      "306:     if (safe_str_neq(tmp, \"authenticate\")) {",
      "307:         crm_err(\"Wrong operation: %s\", tmp);",
      "308:         goto bail;",
      "309:     }",
      "311:     user = crm_element_value(login, \"user\");",
      "312:     pass = crm_element_value(login, \"password\");",
      "317:     if (check_group_membership(user, CRM_DAEMON_GROUP) == FALSE) {",
      "318:         crm_err(\"User is not a member of the required group\");",
      "319:         goto bail;",
      "321:     } else if (authenticate_user(user, pass) == FALSE) {",
      "322:         crm_err(\"PAM auth failed\");",
      "323:         goto bail;",
      "324:     }",
      "329:     new_client->name = crm_element_value_copy(login, \"name\");",
      "331:     CRM_CHECK(new_client->id == NULL, free(new_client->id));",
      "334: #if ENABLE_ACL",
      "335:     new_client->user = strdup(user);",
      "336: #endif",
      "",
      "[Added Lines]",
      "336:     new_client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, new_client);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "345:         new_client->session = GINT_TO_POINTER(csock);",
      "346:     }",
      "355:     new_client->remote = mainloop_add_fd(",
      "356:         \"cib-remote-client\", G_PRIORITY_DEFAULT, csock, new_client, &remote_client_fd_callbacks);",
      "358:     g_hash_table_insert(client_list, new_client->id, new_client);",
      "360:     return TRUE;",
      "373: }",
      "375: void",
      "376: cib_remote_connection_destroy(gpointer user_data)",
      "377: {",
      "378:     cib_client_t *client = user_data;",
      "380:     if (client == NULL) {",
      "381:         return;",
      "",
      "[Removed Lines]",
      "348:     free_xml(login);",
      "349:     login = create_xml_node(NULL, \"cib_result\");",
      "350:     crm_xml_add(login, F_CIB_OPERATION, CRM_OP_REGISTER);",
      "351:     crm_xml_add(login, F_CIB_CLIENTID, new_client->id);",
      "352:     crm_send_remote_msg(new_client->session, login, new_client->encrypted);",
      "353:     free_xml(login);",
      "362:   bail:",
      "363:     if (ssock == remote_tls_fd) {",
      "364: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "365:         gnutls_bye(*session, GNUTLS_SHUT_RDWR);",
      "366:         gnutls_deinit(*session);",
      "367:         gnutls_free(session);",
      "368: #endif",
      "369:     }",
      "370:     close(csock);",
      "371:     free_xml(login);",
      "372:     return TRUE;",
      "",
      "[Added Lines]",
      "359:     int csock = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "393:     crm_trace(\"Destroying %s (%p)\", client->name, user_data);",
      "394:     num_clients--;",
      "395:     crm_trace(\"Num unfree'd clients: %d\", num_clients);",
      "396:     free(client->name);",
      "397:     free(client->callback_id);",
      "398:     free(client->id);",
      "399:     free(client->user);",
      "400:     free(client);",
      "401:     crm_trace(\"Freed the cib client\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377:     if (client->remote_auth_timeout) {",
      "378:         g_source_remove(client->remote_auth_timeout);",
      "379:     }",
      "381:     if (client->encrypted) {",
      "382: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "383:         if (client->session) {",
      "384:             void *sock_ptr = gnutls_transport_get_ptr(*client->session);",
      "385:             csock = GPOINTER_TO_INT(sock_ptr);",
      "386:             if (client->handshake_complete) {",
      "387:                 gnutls_bye(*client->session, GNUTLS_SHUT_WR);",
      "388:             }",
      "389:             gnutls_deinit(*client->session);",
      "390:             gnutls_free(client->session);",
      "391:         }",
      "392: #endif",
      "393:     } else {",
      "394:         csock = GPOINTER_TO_INT(client->session);",
      "395:     }",
      "396:     client->session = NULL;",
      "398:     if (csock > 0) {",
      "399:         close(csock);",
      "400:     }",
      "406:     free(client->recv_buf);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "406:     return;",
      "407: }",
      "411: {",
      "412:     const char *value = NULL;",
      "423:     value = crm_element_name(command);",
      "424:     if (safe_str_neq(value, \"cib_command\")) {",
      "425:         crm_log_xml_trace(command, \"Bad command: \");",
      "427:     }",
      "429:     if (client->name == NULL) {",
      "",
      "[Removed Lines]",
      "409: int",
      "410: cib_remote_msg(gpointer data)",
      "413:     xmlNode *command = NULL;",
      "414:     cib_client_t *client = data;",
      "416:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
      "418:     command = crm_recv_remote_msg(client->session, client->encrypted);",
      "419:     if (command == NULL) {",
      "420:         return -1;",
      "421:     }",
      "426:         goto bail;",
      "",
      "[Added Lines]",
      "416: static void",
      "417: cib_handle_remote_msg(cib_client_t *client, xmlNode *command)",
      "424:         return;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "473:     crm_log_xml_trace(command, \"Remote command: \");",
      "474:     cib_common_callback_worker(0, 0, command, client, TRUE);",
      "478:     return 0;",
      "479: }",
      "",
      "[Removed Lines]",
      "475:   bail:",
      "476:     free_xml(command);",
      "477:     command = NULL;",
      "",
      "[Added Lines]",
      "473: }",
      "475: int",
      "476: cib_remote_msg(gpointer data)",
      "477: {",
      "478:     xmlNode *command = NULL;",
      "479:     cib_client_t *client = data;",
      "480:     int disconnected = 0;",
      "481:     int timeout = client->remote_auth ? -1 : 1000;",
      "483:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
      "485: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "486:     if (client->encrypted && (client->handshake_complete == FALSE)) {",
      "487:         int rc = 0;",
      "491:         do {",
      "492:             rc = gnutls_handshake(*client->session);",
      "494:             if (rc < 0 && rc != GNUTLS_E_AGAIN) {",
      "495:                 crm_err(\"Remote cib tls handshake failed\");",
      "496:                 return -1;",
      "497:             }",
      "498:         } while (rc == GNUTLS_E_INTERRUPTED);",
      "500:         if (rc == 0) {",
      "501:             crm_debug(\"Remote cib tls handshake completed\");",
      "502:             client->handshake_complete = TRUE;",
      "503:             if (client->remote_auth_timeout) {",
      "504:                 g_source_remove(client->remote_auth_timeout);",
      "505:             }",
      "507:             client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, client);",
      "508:         }",
      "509:         return 0;",
      "510:     }",
      "511: #endif",
      "513:     crm_recv_remote_msg(client->session, &client->recv_buf, client->encrypted, timeout, &disconnected);",
      "516:     if (client->remote_auth == FALSE) {",
      "517:         xmlNode *reg;",
      "518: #if ENABLE_ACL",
      "519:         const char *user = NULL;",
      "520: #endif",
      "521:         command = crm_parse_remote_buffer(&client->recv_buf);",
      "522:         if (cib_remote_auth(command) == FALSE) {",
      "523:             free_xml(command);",
      "524:             return -1;",
      "525:         }",
      "527:         crm_debug(\"remote connection authenticated successfully\");",
      "528:         client->remote_auth = TRUE;",
      "529:         g_source_remove(client->remote_auth_timeout);",
      "530:         client->remote_auth_timeout = 0;",
      "531:         client->name = crm_element_value_copy(command, \"name\");",
      "533: #if ENABLE_ACL",
      "534:         user = crm_element_value(command, \"user\");",
      "535:         if (user) {",
      "536:            new_client->user = strdup(user);",
      "537:         }",
      "538: #endif",
      "541:         reg = create_xml_node(NULL, \"cib_result\");",
      "542:         crm_xml_add(reg, F_CIB_OPERATION, CRM_OP_REGISTER);",
      "543:         crm_xml_add(reg, F_CIB_CLIENTID, client->id);",
      "544:         crm_send_remote_msg(client->session, reg, client->encrypted);",
      "545:         free_xml(reg);",
      "546:         free_xml(command);",
      "547:     }",
      "549:     command = crm_parse_remote_buffer(&client->recv_buf);",
      "550:     while (command) {",
      "551:         crm_trace(\"command received\");",
      "552:         cib_handle_remote_msg(client, command);",
      "553:         free_xml(command);",
      "554:         command = crm_parse_remote_buffer(&client->recv_buf);",
      "555:     }",
      "557:     if (disconnected) {",
      "558:         crm_trace(\"disconnected while receiving remote cib msg.\");",
      "559:         return -1;",
      "560:     }",
      "",
      "---------------"
    ],
    "include/crm_internal.h||include/crm_internal.h": [
      "File: include/crm_internal.h -> include/crm_internal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "199: long long crm_int_helper(const char *text, char **end_text);",
      "200: char *crm_concat(const char *prefix, const char *suffix, char join);",
      "201: char *generate_hash_key(const char *crm_msg_reference, const char *sys);",
      "205: const char *daemon_option(const char *option);",
      "206: void set_daemon_option(const char *option, const char *value);",
      "",
      "[Removed Lines]",
      "202: xmlNode *crm_recv_remote_msg(void *session, gboolean encrypted);",
      "203: void crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
      "",
      "[Added Lines]",
      "205: gboolean crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout_ms, int *disconnected);",
      "206: char *crm_recv_remote_raw(void *data, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected);",
      "207: int crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
      "208: int crm_recv_remote_ready(void *session, gboolean encrypted, int timeout_ms);",
      "209: xmlNode *crm_parse_remote_buffer(char **msg_buf);",
      "210: int crm_remote_tcp_connect(const char *host, int port);",
      "212: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "221: int crm_initiate_client_tls_handshake(void *session_data, int timeout_ms);",
      "232: void *crm_create_anon_tls_session(int sock, int type, void *credentials);",
      "233: #endif",
      "235: #define REMOTE_MSG_TERMINATOR \"\\r\\n\\r\\n\"",
      "",
      "---------------"
    ],
    "lib/cib/cib_remote.c||lib/cib/cib_remote.c": [
      "File: lib/cib/cib_remote.c -> lib/cib/cib_remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "39: #  undef KEYFILE",
      "40: #  include <gnutls/gnutls.h>",
      "44: const int kx_prio[] = {",
      "45:     GNUTLS_KX_ANON_DH,",
      "46:     0",
      "47: };",
      "49: #else",
      "50: typedef void gnutls_session;",
      "51: #endif",
      "",
      "[Removed Lines]",
      "41: extern gnutls_anon_client_credentials anon_cred_c;",
      "42: extern gnutls_session *create_tls_session(int csock, int type);",
      "",
      "[Added Lines]",
      "41: gnutls_anon_client_credentials anon_cred_c;",
      "49: static gboolean remote_gnutls_credentials_init = FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:     gnutls_session *session;",
      "62:     mainloop_io_t *source;",
      "63:     char *token;",
      "64: };",
      "66: typedef struct cib_remote_opaque_s {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:     char *recv_buf;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76: } cib_remote_opaque_t;",
      "78: void cib_remote_connection_destroy(gpointer user_data);",
      "80: int cib_remote_signon(cib_t * cib, const char *name, enum cib_conn_type type);",
      "81: int cib_remote_signoff(cib_t * cib);",
      "82: int cib_remote_free(cib_t * cib);",
      "",
      "[Removed Lines]",
      "79: int cib_remote_dispatch(gpointer user_data);",
      "",
      "[Added Lines]",
      "81: int cib_remote_callback_dispatch(gpointer user_data);",
      "82: int cib_remote_command_dispatch(gpointer user_data);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "158: {",
      "159:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "166: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "167:     if (private->command.encrypted) {",
      "178:     }",
      "179: #endif",
      "180:     return 0;",
      "181: }",
      "183: static int",
      "185: {",
      "186:     int sock;",
      "187:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "189:     int rc = 0;",
      "196:     xmlNode *answer = NULL;",
      "197:     xmlNode *login = NULL;",
      "205:     connection->socket = 0;",
      "206:     connection->session = NULL;",
      "259:     }",
      "261:     if (connection->encrypted) {",
      "263: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "272:             cib_tls_close(cib);",
      "273:             return -1;",
      "274:         }",
      "",
      "[Removed Lines]",
      "163:     close(private->command.socket);",
      "164:     close(private->callback.socket);",
      "168:         gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
      "169:         gnutls_deinit(*(private->command.session));",
      "170:         gnutls_free(private->command.session);",
      "172:         gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
      "173:         gnutls_deinit(*(private->callback.session));",
      "174:         gnutls_free(private->callback.session);",
      "176:         gnutls_anon_free_client_credentials(anon_cred_c);",
      "177:         gnutls_global_deinit();",
      "184: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection)",
      "188:     struct sockaddr_in addr;",
      "190:     char *server = private->server;",
      "192:     int ret_ga;",
      "193:     struct addrinfo *res;",
      "194:     struct addrinfo hints;",
      "199:     static struct mainloop_fd_callbacks cib_fd_callbacks =",
      "200:         {",
      "201:             .dispatch = cib_remote_dispatch,",
      "202:             .destroy = cib_remote_connection_destroy,",
      "203:         };",
      "209:     sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);",
      "210:     if (sock == -1) {",
      "211:         crm_perror(LOG_ERR, \"Socket creation failed\");",
      "212:         return -1;",
      "213:     }",
      "216:     bzero(&hints, sizeof(struct addrinfo));",
      "217:     hints.ai_flags = AI_CANONNAME;",
      "218:     hints.ai_family = AF_INET;",
      "219:     hints.ai_socktype = SOCK_RAW;",
      "221:     if (hints.ai_family == AF_INET6) {",
      "222:         hints.ai_protocol = IPPROTO_ICMPV6;",
      "223:     } else {",
      "224:         hints.ai_protocol = IPPROTO_ICMP;",
      "225:     }",
      "227:     crm_debug(\"Looking up %s\", server);",
      "228:     ret_ga = getaddrinfo(server, NULL, &hints, &res);",
      "229:     if (ret_ga) {",
      "230:         crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));",
      "231:         close(sock);",
      "232:         return -1;",
      "233:     }",
      "235:     if (res->ai_canonname) {",
      "236:         server = res->ai_canonname;",
      "237:     }",
      "239:     crm_debug(\"Got address %s for %s\", server, private->server);",
      "241:     if (!res->ai_addr) {",
      "242:         fprintf(stderr, \"getaddrinfo failed\");",
      "243:         crm_exit(1);",
      "244:     }",
      "245: #if 1",
      "246:     memcpy(&addr, res->ai_addr, res->ai_addrlen);",
      "247: #else",
      "249:     memset(&addr, 0, sizeof(addr));",
      "250:     addr.sin_family = AF_INET;",
      "251:     addr.sin_addr.s_addr = inet_addr(server);",
      "252: #endif",
      "253:     addr.sin_port = htons(private->port);",
      "255:     if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1) {",
      "256:         crm_perror(LOG_ERR, \"Connection to %s:%d failed\", server, private->port);",
      "257:         close(sock);",
      "258:         return -1;",
      "264:         gnutls_global_init();",
      "265:         gnutls_anon_allocate_client_credentials(&anon_cred_c);",
      "268:         connection->session = create_tls_session(sock, GNUTLS_CLIENT);",
      "269:         if (connection->session == NULL) {",
      "270:             crm_perror(LOG_ERR, \"Session creation for %s:%d failed\", server, private->port);",
      "271:             close(sock);",
      "",
      "[Added Lines]",
      "166:         if (private->command.session) {",
      "167:             gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
      "168:             gnutls_deinit(*(private->command.session));",
      "169:             gnutls_free(private->command.session);",
      "170:         }",
      "172:         if (private->callback.session) {",
      "173:             gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
      "174:             gnutls_deinit(*(private->callback.session));",
      "175:             gnutls_free(private->callback.session);",
      "176:         }",
      "177:         private->command.session = NULL;",
      "178:         private->callback.session = NULL;",
      "179:         if (remote_gnutls_credentials_init) {",
      "180:             gnutls_anon_free_client_credentials(anon_cred_c);",
      "181:             gnutls_global_deinit();",
      "182:             remote_gnutls_credentials_init = FALSE;",
      "183:         }",
      "187:     if (private->command.socket) {",
      "189:         close(private->command.socket);",
      "190:     }",
      "191:     if (private->callback.socket) {",
      "193:         close(private->callback.socket);",
      "194:     }",
      "195:     private->command.socket = 0;",
      "196:     private->callback.socket = 0;",
      "198:     free(private->command.recv_buf);",
      "199:     free(private->callback.recv_buf);",
      "200:     private->command.recv_buf = NULL;",
      "201:     private->callback.recv_buf = NULL;",
      "207: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection, gboolean event_channel)",
      "212:     int disconnected = 0;",
      "217:     static struct mainloop_fd_callbacks cib_fd_callbacks = { 0, };",
      "219:     cib_fd_callbacks.dispatch = event_channel ? cib_remote_callback_dispatch : cib_remote_command_dispatch;",
      "220:     cib_fd_callbacks.destroy = cib_remote_connection_destroy;",
      "225:     sock = crm_remote_tcp_connect(private->server, private->port);",
      "226:     if (sock <= 0) {",
      "227:         crm_perror(LOG_ERR, \"remote tcp connection to %s:%d failed\", private->server, private->port);",
      "230:     connection->socket = sock;",
      "234:         if (remote_gnutls_credentials_init == FALSE) {",
      "235:             gnutls_global_init();",
      "236:             gnutls_anon_allocate_client_credentials(&anon_cred_c);",
      "237:             remote_gnutls_credentials_init = TRUE;",
      "238:         }",
      "241:         connection->session = crm_create_anon_tls_session(sock, GNUTLS_CLIENT, anon_cred_c);",
      "243:         if (crm_initiate_client_tls_handshake(connection->session, DEFAULT_CLIENT_HANDSHAKE_TIMEOUT) != 0) {",
      "244:             crm_err(\"Session creation for %s:%d failed\", private->server, private->port);",
      "246:             gnutls_deinit(*connection->session);",
      "247:             gnutls_free(connection->session);",
      "248:             connection->session = NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "289:     crm_send_remote_msg(connection->session, login, connection->encrypted);",
      "290:     free_xml(login);",
      "293:     crm_log_xml_trace(answer, \"Reply\");",
      "294:     if (answer == NULL) {",
      "295:         rc = -EPROTO;",
      "",
      "[Removed Lines]",
      "292:     answer = crm_recv_remote_msg(connection->session, connection->encrypted);",
      "",
      "[Added Lines]",
      "269:     crm_recv_remote_msg(connection->session, &connection->recv_buf, connection->encrypted, -1, &disconnected);",
      "271:     if (disconnected) {",
      "272:         rc = -ENOTCONN;",
      "273:     }",
      "275:     answer = crm_parse_remote_buffer(&connection->recv_buf);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "310:             connection->token = strdup(tmp_ticket);",
      "311:         }",
      "312:     }",
      "314:     if (rc != 0) {",
      "315:         cib_tls_close(cib);",
      "316:     }",
      "319:     connection->source = mainloop_add_fd(\"cib-remote\", G_PRIORITY_HIGH, connection->socket, cib, &cib_fd_callbacks);",
      "320:     return rc;",
      "321: }",
      "",
      "[Removed Lines]",
      "318:     connection->socket = sock;",
      "",
      "[Added Lines]",
      "297:     free_xml(answer);",
      "298:     answer = NULL;",
      "302:         return rc;",
      "305:     crm_trace(\"remote client connection established\");",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "331: }",
      "333: int",
      "335: {",
      "336:     cib_t *cib = user_data;",
      "337:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "339:     xmlNode *msg = NULL;",
      "342:     crm_info(\"Message on callback channel\");",
      "359:         free_xml(msg);",
      "361:     }",
      "363: }",
      "365: int",
      "",
      "[Removed Lines]",
      "334: cib_remote_dispatch(gpointer user_data)",
      "340:     const char *type = NULL;",
      "343:     msg = crm_recv_remote_msg(private->callback.session, private->callback.encrypted);",
      "345:     type = crm_element_value(msg, F_TYPE);",
      "346:     crm_trace(\"Activating %s callbacks...\", type);",
      "348:     if (safe_str_eq(type, T_CIB)) {",
      "349:         cib_native_callback(cib, msg, 0, 0);",
      "351:     } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
      "352:         g_list_foreach(cib->notify_list, cib_native_notify, msg);",
      "354:     } else {",
      "355:         crm_err(\"Unknown message type: %s\", type);",
      "356:     }",
      "358:     if (msg != NULL) {",
      "360:         return 0;",
      "362:     return -1;",
      "",
      "[Added Lines]",
      "321: cib_remote_command_dispatch(gpointer user_data)",
      "322: {",
      "323:     int disconnected = 0;",
      "324:     cib_t *cib = user_data;",
      "325:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "327:     crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, -1, &disconnected);",
      "329:     free(private->command.recv_buf);",
      "330:     private->command.recv_buf = NULL;",
      "331:     crm_err(\"received late reply for remote cib connection, discarding\");",
      "333:     if (disconnected) {",
      "334:         return -1;",
      "335:     }",
      "336:     return 0;",
      "337: }",
      "339: int",
      "340: cib_remote_callback_dispatch(gpointer user_data)",
      "346:     int disconnected = 0;",
      "350:     crm_recv_remote_msg(private->callback.session, &private->callback.recv_buf, private->callback.encrypted, -1, &disconnected);",
      "352:     msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
      "353:     while (msg) {",
      "354:         const char *type = crm_element_value(msg, F_TYPE);",
      "355:         crm_trace(\"Activating %s callbacks...\", type);",
      "357:         if (safe_str_eq(type, T_CIB)) {",
      "358:             cib_native_callback(cib, msg, 0, 0);",
      "360:         } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
      "361:             g_list_foreach(cib->notify_list, cib_native_notify, msg);",
      "363:         } else {",
      "364:             crm_err(\"Unknown message type: %s\", type);",
      "365:         }",
      "368:         msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
      "369:     }",
      "371:     if (disconnected) {",
      "372:         return -1;",
      "375:     return 0;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "394:     }",
      "396:     if (rc == pcmk_ok) {",
      "398:     }",
      "400:     if (rc == pcmk_ok) {",
      "402:     }",
      "404:     if (rc == pcmk_ok) {",
      "",
      "[Removed Lines]",
      "397:         rc = cib_tls_signon(cib, &(private->command));",
      "401:         rc = cib_tls_signon(cib, &(private->callback));",
      "",
      "[Added Lines]",
      "410:         rc = cib_tls_signon(cib, &(private->command), FALSE);",
      "414:         rc = cib_tls_signon(cib, &(private->callback), TRUE);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "463:     return rc;",
      "464: }",
      "482: int",
      "483: cib_remote_perform_op(cib_t * cib, const char *op, const char *host, const char *section,",
      "484:                       xmlNode * data, xmlNode ** output_data, int call_options, const char *name)",
      "485: {",
      "486:     int rc = pcmk_ok;",
      "488:     xmlNode *op_msg = NULL;",
      "489:     xmlNode *op_reply = NULL;",
      "491:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "497:     if (cib->state == cib_disconnected) {",
      "498:         return -ENOTCONN;",
      "499:     }",
      "",
      "[Removed Lines]",
      "466: static gboolean timer_expired = FALSE;",
      "467: static struct timer_rec_s *sync_timer = NULL;",
      "468: static gboolean",
      "469: cib_timeout_handler(gpointer data)",
      "470: {",
      "471:     struct timer_rec_s *timer = data;",
      "473:     timer_expired = TRUE;",
      "474:     crm_err(\"Call %d timed out after %ds\", timer->call_id, timer->timeout);",
      "479:     return TRUE;",
      "480: }",
      "493:     if (sync_timer == NULL) {",
      "494:         sync_timer = calloc(1, sizeof(struct timer_rec_s));",
      "495:     }",
      "",
      "[Added Lines]",
      "484:     int disconnected = 0;",
      "485:     int remaining_time = 0;",
      "486:     time_t start_time;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "524:     }",
      "526:     crm_trace(\"Sending %s message to CIB service\", op);",
      "528:     free_xml(op_msg);",
      "530:     if ((call_options & cib_discard_reply)) {",
      "",
      "[Removed Lines]",
      "527:     crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
      "",
      "[Added Lines]",
      "523:     if (!(call_options & cib_sync_call)) {",
      "524:         crm_send_remote_msg(private->callback.session, op_msg, private->command.encrypted);",
      "525:     } else {",
      "526:         crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
      "527:     }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "538:     crm_trace(\"Waiting for a syncronous reply\");",
      "551:         int reply_id = -1;",
      "552:         int msg_id = cib->call_id;",
      "556:             break;",
      "557:         }",
      "559:         crm_element_value_int(op_reply, F_CIB_CALLID, &reply_id);",
      "565:         if (reply_id == msg_id) {",
      "566:             break;",
      "",
      "[Removed Lines]",
      "540:     if (cib->call_timeout > 0) {",
      "544:         timer_expired = FALSE;",
      "545:         sync_timer->call_id = cib->call_id;",
      "546:         sync_timer->timeout = cib->call_timeout * 1000;",
      "547:         sync_timer->ref = g_timeout_add(sync_timer->timeout, cib_timeout_handler, sync_timer);",
      "548:     }",
      "550:     while (timer_expired == FALSE) {",
      "554:         op_reply = crm_recv_remote_msg(private->command.session, private->command.encrypted);",
      "555:         if (op_reply == NULL) {",
      "560:         CRM_CHECK(reply_id > 0, free_xml(op_reply);",
      "561:                   if (sync_timer->ref > 0) {",
      "562:                   g_source_remove(sync_timer->ref); sync_timer->ref = 0;}",
      "563:                   return -ENOMSG) ;",
      "",
      "[Added Lines]",
      "540:     start_time = time(NULL);",
      "541:     remaining_time = cib->call_timeout ? cib->call_timeout : 60;",
      "543:     while (remaining_time > 0 && !disconnected) {",
      "547:         crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, remaining_time * 1000, &disconnected);",
      "548:         op_reply = crm_parse_remote_buffer(&private->command.recv_buf);",
      "550:         if (!op_reply) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "580:         free_xml(op_reply);",
      "581:         op_reply = NULL;",
      "591:     }",
      "",
      "[Removed Lines]",
      "582:     }",
      "584:     if (sync_timer->ref > 0) {",
      "585:         g_source_remove(sync_timer->ref);",
      "586:         sync_timer->ref = 0;",
      "587:     }",
      "589:     if (timer_expired) {",
      "590:         return -ETIME;",
      "",
      "[Added Lines]",
      "575:         remaining_time = time(NULL) - start_time;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "600:         crm_err(\"No reply message - empty\");",
      "601:         return -ENOMSG;",
      "602:     }",
      "",
      "[Removed Lines]",
      "599:     if (op_reply == NULL) {",
      "",
      "[Added Lines]",
      "584:     if (disconnected) {",
      "585:         crm_err(\"Disconnected while waiting for reply.\");",
      "586:         return -ENOTCONN;",
      "587:     } else if (op_reply == NULL) {",
      "",
      "---------------"
    ],
    "lib/common/mainloop.c||lib/common/mainloop.c": [
      "File: lib/common/mainloop.c -> lib/common/mainloop.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "178:     source->trigger = FALSE;",
      "179:     if (source->id > 0) {",
      "180:         g_source_remove(source->id);",
      "181:     }",
      "182:     return TRUE;",
      "183: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "181:         source->id = 0;",
      "",
      "---------------"
    ],
    "lib/common/remote.c||lib/common/remote.c": [
      "File: lib/common/remote.c -> lib/common/remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: #include <sys/stat.h>",
      "26: #include <unistd.h>",
      "27: #include <sys/socket.h>",
      "29: #include <netinet/ip.h>",
      "31: #include <stdlib.h>",
      "32: #include <errno.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #include <arpa/inet.h>",
      "30: #include <netdb.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: #endif",
      "44: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "46:     GNUTLS_KX_ANON_DH,",
      "47:     GNUTLS_KX_DHE_RSA,",
      "48:     GNUTLS_KX_DHE_DSS,",
      "",
      "[Removed Lines]",
      "45: const int tls_kx_order[] = {",
      "",
      "[Added Lines]",
      "47: const int anon_tls_kx_order[] = {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:     0",
      "51: };",
      "67: {",
      "69:     gnutls_session *session = gnutls_malloc(sizeof(gnutls_session));",
      "71:     gnutls_init(session, type);",
      "",
      "[Removed Lines]",
      "53: gnutls_anon_client_credentials anon_cred_c;",
      "54: gnutls_anon_server_credentials anon_cred_s;",
      "55: static char *cib_send_tls(gnutls_session * session, xmlNode * msg);",
      "56: static char *cib_recv_tls(gnutls_session * session);",
      "57: #endif",
      "59: char *cib_recv_plaintext(int sock);",
      "60: char *cib_send_plaintext(int sock, xmlNode * msg);",
      "62: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "63: gnutls_session *create_tls_session(int csock, int type);",
      "65: gnutls_session *",
      "66: create_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */ )",
      "68:     int rc = 0;",
      "",
      "[Added Lines]",
      "55: int",
      "56: crm_initiate_client_tls_handshake(void *session_data, int timeout_ms)",
      "57: {",
      "58:     int rc = 0;",
      "59:     int pollrc = 0;",
      "60:     time_t start = time(NULL);",
      "61:     gnutls_session *session = session_data;",
      "63:     do {",
      "64:         rc = gnutls_handshake(*session);",
      "65:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "66:             pollrc = crm_recv_remote_ready(session, TRUE, 1000);",
      "67:             if (pollrc < 0) {",
      "69:                 rc = -1;",
      "70:             }",
      "71:         }",
      "72:     } while (((time(NULL) - start) < (timeout_ms/1000)) &&",
      "73:             (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN));",
      "75:     return rc;",
      "76: }",
      "78: void *",
      "79: crm_create_anon_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */, void *credentials)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "76: #  else",
      "77:     gnutls_set_default_priority(*session);",
      "79: #  endif",
      "80:     gnutls_transport_set_ptr(*session, (gnutls_transport_ptr) GINT_TO_POINTER(csock));",
      "81:     switch (type) {",
      "88:     }",
      "100:     return session;",
      "101: }",
      "105: {",
      "113:     }",
      "142:         }",
      "144:     }",
      "148: }",
      "150: static char *",
      "152: {",
      "153:     char *buf = NULL;",
      "155:     int rc = 0;",
      "159:     if (session == NULL) {",
      "161:     }",
      "165:     while (TRUE) {",
      "182:             len += rc;",
      "198:         }",
      "199:     }",
      "204: }",
      "205: #endif",
      "209: {",
      "236:             goto retry;",
      "240:         }",
      "241:     }",
      "245: }",
      "249: {",
      "250:     char *buf = NULL;",
      "252:     ssize_t rc = 0;",
      "253:     ssize_t len = 0;",
      "280:             CRM_ASSERT(buf != NULL);",
      "285:             len += rc;",
      "291:         }",
      "292:     }",
      "297: }",
      "301: {",
      "302:     if (encrypted) {",
      "303: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "305: #else",
      "306:         CRM_ASSERT(encrypted == FALSE);",
      "307: #endif",
      "308:     } else {",
      "310:     }",
      "311: }",
      "313: xmlNode *",
      "315: {",
      "317:     xmlNode *xml = NULL;",
      "319:     if (encrypted) {",
      "320: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "322: #else",
      "323:         CRM_ASSERT(encrypted == FALSE);",
      "324: #endif",
      "325:     } else {",
      "327:     }",
      "328:     if (reply == NULL || strlen(reply) == 0) {",
      "329:         crm_trace(\"Empty reply\");",
      "335:         }",
      "336:     }",
      "340: }",
      "",
      "[Removed Lines]",
      "78:     gnutls_kx_set_priority(*session, tls_kx_order);",
      "82:         case GNUTLS_SERVER:",
      "83:             gnutls_credentials_set(*session, GNUTLS_CRD_ANON, anon_cred_s);",
      "84:             break;",
      "85:         case GNUTLS_CLIENT:",
      "86:             gnutls_credentials_set(*session, GNUTLS_CRD_ANON, anon_cred_c);",
      "87:             break;",
      "90:     do {",
      "91:         rc = gnutls_handshake(*session);",
      "92:     } while (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN);",
      "94:     if (rc < 0) {",
      "95:         crm_err(\"Handshake failed: %s\", gnutls_strerror(rc));",
      "96:         gnutls_deinit(*session);",
      "97:         gnutls_free(session);",
      "98:         return NULL;",
      "99:     }",
      "103: static char *",
      "104: cib_send_tls(gnutls_session * session, xmlNode * msg)",
      "106:     char *xml_text = NULL;",
      "108: #  if 0",
      "109:     const char *name = crm_element_name(msg);",
      "111:     if (safe_str_neq(name, \"cib_command\")) {",
      "112:         xmlNodeSetName(msg, \"cib_result\");",
      "114: #  endif",
      "115:     xml_text = dump_xml_unformatted(msg);",
      "116:     if (xml_text != NULL) {",
      "117:         char *unsent = xml_text;",
      "118:         int len = strlen(xml_text);",
      "119:         int rc = 0;",
      "122:         crm_trace(\"Message size: %d\", len);",
      "124:         while (TRUE) {",
      "125:             rc = gnutls_record_send(*session, unsent, len);",
      "126:             crm_debug(\"Sent %d bytes\", rc);",
      "128:             if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "129:                 crm_debug(\"Retry\");",
      "131:             } else if (rc < 0) {",
      "132:                 crm_debug(\"Connection terminated\");",
      "133:                 break;",
      "135:             } else if (rc < len) {",
      "136:                 crm_debug(\"Only sent %d of %d bytes\", rc, len);",
      "137:                 len -= rc;",
      "138:                 unsent += rc;",
      "139:             } else {",
      "140:                 break;",
      "141:             }",
      "145:     free(xml_text);",
      "146:     return NULL;",
      "151: cib_recv_tls(gnutls_session * session)",
      "156:     int len = 0;",
      "157:     int chunk_size = 1024;",
      "160:         return NULL;",
      "163:     buf = calloc(1, chunk_size);",
      "166:         errno = 0;",
      "167:         rc = gnutls_record_recv(*session, buf + len, chunk_size);",
      "168:         crm_trace(\"Got %d more bytes. errno=%d\", rc, errno);",
      "170:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "171:             crm_trace(\"Retry\");",
      "173:         } else if (rc == GNUTLS_E_UNEXPECTED_PACKET_LENGTH) {",
      "174:             crm_trace(\"Session disconnected\");",
      "175:             goto bail;",
      "177:         } else if (rc < 0) {",
      "178:             crm_err(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
      "179:             goto bail;",
      "181:         } else if (rc == chunk_size) {",
      "183:             chunk_size *= 2;",
      "184:             buf = realloc(buf, len + chunk_size);",
      "185:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "186:             CRM_ASSERT(buf != NULL);",
      "188:         } else if (buf[len + rc - 1] != 0) {",
      "189:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
      "190:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "191:             len += rc;",
      "192:             buf = realloc(buf, len + chunk_size);",
      "193:             CRM_ASSERT(buf != NULL);",
      "195:         } else {",
      "196:             crm_trace(\"Got %d more bytes\", (int)rc);",
      "197:             return buf;",
      "200:   bail:",
      "201:     free(buf);",
      "202:     return NULL;",
      "207: char *",
      "208: cib_send_plaintext(int sock, xmlNode * msg)",
      "210:     char *xml_text = dump_xml_unformatted(msg);",
      "212:     if (xml_text != NULL) {",
      "213:         int rc = 0;",
      "214:         char *unsent = xml_text;",
      "215:         int len = strlen(xml_text);",
      "218:         crm_trace(\"Message on socket %d: size=%d\", sock, len);",
      "219:   retry:",
      "220:         rc = write(sock, unsent, len);",
      "221:         if (rc < 0) {",
      "222:             switch (errno) {",
      "223:                 case EINTR:",
      "224:                 case EAGAIN:",
      "225:                     crm_trace(\"Retry\");",
      "226:                     goto retry;",
      "227:                 default:",
      "228:                     crm_perror(LOG_ERR, \"Could only write %d of the remaining %d bytes\", rc, len);",
      "229:                     break;",
      "230:             }",
      "232:         } else if (rc < len) {",
      "233:             crm_trace(\"Only sent %d of %d remaining bytes\", rc, len);",
      "234:             len -= rc;",
      "235:             unsent += rc;",
      "238:         } else {",
      "239:             crm_trace(\"Sent %d bytes: %.100s\", rc, xml_text);",
      "242:     free(xml_text);",
      "243:     return NULL;",
      "247: char *",
      "248: cib_recv_plaintext(int sock)",
      "254:     ssize_t chunk_size = 512;",
      "256:     buf = calloc(1, chunk_size);",
      "258:     while (1) {",
      "259:         errno = 0;",
      "260:         rc = read(sock, buf + len, chunk_size);",
      "261:         crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
      "263:         if (errno == EINTR || errno == EAGAIN) {",
      "264:             crm_trace(\"Retry: %d\", (int)rc);",
      "265:             if (rc > 0) {",
      "266:                 len += rc;",
      "267:                 buf = realloc(buf, len + chunk_size);",
      "268:                 CRM_ASSERT(buf != NULL);",
      "269:             }",
      "271:         } else if (rc < 0) {",
      "272:             crm_perror(LOG_ERR, \"Error receiving message: %d\", (int)rc);",
      "273:             goto bail;",
      "275:         } else if (rc == chunk_size) {",
      "276:             len += rc;",
      "277:             chunk_size *= 2;",
      "278:             buf = realloc(buf, len + chunk_size);",
      "279:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "282:         } else if (buf[len + rc - 1] != 0) {",
      "283:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
      "284:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "286:             buf = realloc(buf, len + chunk_size);",
      "287:             CRM_ASSERT(buf != NULL);",
      "289:         } else {",
      "290:             return buf;",
      "293:   bail:",
      "294:     free(buf);",
      "295:     return NULL;",
      "299: void",
      "300: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
      "304:         cib_send_tls(session, msg);",
      "309:         cib_send_plaintext(GPOINTER_TO_INT(session), msg);",
      "314: crm_recv_remote_msg(void *session, gboolean encrypted)",
      "316:     char *reply = NULL;",
      "321:         reply = cib_recv_tls(session);",
      "326:         reply = cib_recv_plaintext(GPOINTER_TO_INT(session));",
      "331:     } else {",
      "332:         xml = string2xml(reply);",
      "333:         if (xml == NULL) {",
      "334:             crm_err(\"Couldn't parse: '%.120s'\", reply);",
      "338:     free(reply);",
      "339:     return xml;",
      "",
      "[Added Lines]",
      "90:     gnutls_kx_set_priority(*session, anon_tls_kx_order);",
      "94:     case GNUTLS_SERVER:",
      "95:         gnutls_credentials_set(*session, GNUTLS_CRD_ANON, (gnutls_anon_server_credentials_t) credentials);",
      "96:         break;",
      "97:     case GNUTLS_CLIENT:",
      "98:         gnutls_credentials_set(*session, GNUTLS_CRD_ANON, (gnutls_anon_client_credentials_t) credentials);",
      "99:         break;",
      "105: static int",
      "106: crm_send_tls(gnutls_session * session, const char *buf, size_t len)",
      "108:     const char *unsent = buf;",
      "109:     int rc = 0;",
      "110:     int total_send;",
      "112:     if (buf == NULL) {",
      "113:         return -1;",
      "116:     total_send = len;",
      "117:     crm_trace(\"Message size: %d\", len);",
      "119:     while (TRUE) {",
      "120:         rc = gnutls_record_send(*session, unsent, len);",
      "122:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "123:             crm_debug(\"Retry\");",
      "125:         } else if (rc < 0) {",
      "126:             crm_err(\"Connection terminated rc = %d\", rc);",
      "127:             break;",
      "129:         } else if (rc < len) {",
      "130:             crm_debug(\"Only sent %d of %d bytes\", rc, len);",
      "131:             len -= rc;",
      "132:             unsent += rc;",
      "133:         } else {",
      "134:             crm_debug(\"Sent %d bytes\", rc);",
      "135:             break;",
      "139:     return rc < 0 ? rc : total_send;",
      "157: crm_recv_tls(gnutls_session * session, size_t max_size, size_t *recv_len, int *disconnected)",
      "161:     size_t len = 0;",
      "162:     size_t chunk_size = max_size ? max_size : 1024;",
      "163:     size_t buf_size = 0;",
      "164:     size_t read_size = 0;",
      "167:         if (disconnected) {",
      "169:         }",
      "170:         goto done;",
      "173:     buf = calloc(1, chunk_size + 1);",
      "174:     buf_size = chunk_size;",
      "177:         read_size = buf_size - len;",
      "180:         if (!max_size && (read_size < (chunk_size / 2))) {",
      "181:             buf_size += chunk_size;",
      "182:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size, buf_size);",
      "183:             buf = realloc(buf, buf_size + 1);",
      "184:             CRM_ASSERT(buf != NULL);",
      "186:             read_size = buf_size - len;",
      "187:         }",
      "189:         rc = gnutls_record_recv(*session, buf + len, read_size);",
      "191:         if (rc > 0) {",
      "192:             crm_trace(\"Got %d more bytes.\", rc);",
      "195:             buf[len] = '\\0';",
      "196:         }",
      "197:         if (max_size && (max_size == read_size)) {",
      "198:             crm_trace(\"Buffer max read size %d met\" , max_size);",
      "199:             goto done;",
      "200:         }",
      "203:         if (rc == GNUTLS_E_INTERRUPTED) {",
      "204:             crm_trace(\"EINTR encoutered, retry tls read\");",
      "205:         } else if (rc == GNUTLS_E_AGAIN) {",
      "206:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
      "207:             goto done;",
      "208:         } else if (rc <= 0) {",
      "209:             if (rc == 0) {",
      "210:                 crm_debug(\"EOF encoutered during TLS read\");",
      "211:             } else {",
      "212:                 crm_debug(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
      "213:             }",
      "214:             if (disconnected) {",
      "216:             }",
      "217:             goto done;",
      "221: done:",
      "222:     if (recv_len) {",
      "224:     }",
      "225:     if (!len) {",
      "226:         free(buf);",
      "227:         buf = NULL;",
      "228:     }",
      "229:     return buf;",
      "234: static int",
      "235: crm_send_plaintext(int sock, const char *buf, size_t len)",
      "238:     int rc = 0;",
      "239:     const char *unsent = buf;",
      "240:     int total_send;",
      "242:     if (buf == NULL) {",
      "243:         return -1;",
      "244:     }",
      "245:     total_send = len;",
      "247:     crm_trace(\"Message on socket %d: size=%d\", sock, len);",
      "248:   retry:",
      "249:     rc = write(sock, unsent, len);",
      "250:     if (rc < 0) {",
      "251:         switch (errno) {",
      "252:         case EINTR:",
      "253:         case EAGAIN:",
      "254:             crm_trace(\"Retry\");",
      "256:         default:",
      "257:             crm_perror(LOG_ERR, \"Could only write %d of the remaining %d bytes\", rc, (int) len);",
      "258:             break;",
      "261:     } else if (rc < len) {",
      "262:         crm_trace(\"Only sent %d of %d remaining bytes\", rc, len);",
      "263:         len -= rc;",
      "264:         unsent += rc;",
      "265:         goto retry;",
      "267:      } else {",
      "268:         crm_trace(\"Sent %d bytes: %.100s\", rc, buf);",
      "271:     return rc < 0 ? rc : total_send;",
      "288: static char *",
      "289: crm_recv_plaintext(int sock, size_t max_size, size_t *recv_len, int *disconnected)",
      "294:     ssize_t chunk_size = max_size ? max_size : 1024;",
      "295:     size_t buf_size = 0;",
      "296:     size_t read_size = 0;",
      "298:     if (sock <= 0) {",
      "299:         if (disconnected) {",
      "301:         }",
      "302:         goto done;",
      "303:     }",
      "305:     buf = calloc(1, chunk_size + 1);",
      "306:     buf_size = chunk_size;",
      "308:     while (TRUE) {",
      "309:         errno = 0;",
      "310:         read_size = buf_size - len;",
      "313:         if (!max_size && (read_size < (chunk_size / 2))) {",
      "314:             buf_size += chunk_size;",
      "315:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size, buf_size);",
      "316:             buf = realloc(buf, buf_size + 1);",
      "319:             read_size = buf_size - len;",
      "320:         }",
      "322:         rc = read(sock, buf + len, chunk_size);",
      "324:         if (rc > 0) {",
      "325:             crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
      "328:             buf[len] = '\\0';",
      "329:         }",
      "330:         if (max_size && (max_size == read_size)) {",
      "331:             crm_trace(\"Buffer max read size %d met\" , max_size);",
      "332:             goto done;",
      "333:         }",
      "335:         if (rc > 0) {",
      "336:             continue;",
      "337:         } else if (rc == 0) {",
      "338:             if (disconnected) {",
      "340:             }",
      "341:             crm_trace(\"EOF encoutered during read\");",
      "342:             goto done;",
      "343:         }",
      "346:         if (errno == EINTR) {",
      "347:             crm_trace(\"EINTER encoutered, retry socket read.\");",
      "348:         } else if (errno == EAGAIN) {",
      "349:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
      "350:             goto done;",
      "351:         } else if (errno <= 0) {",
      "352:             if (disconnected) {",
      "354:             }",
      "355:             crm_debug(\"Error receiving message: %d\", (int)rc);",
      "356:             goto done;",
      "360: done:",
      "361:     if (recv_len) {",
      "363:     }",
      "364:     if (!len) {",
      "365:         free(buf);",
      "366:         buf = NULL;",
      "367:     }",
      "368:     return buf;",
      "371: static int",
      "372: crm_send_remote_msg_raw(void *session, const char *buf, size_t len, gboolean encrypted)",
      "374:     int rc = -1;",
      "377:         rc = crm_send_tls(session, buf, len);",
      "382:         rc = crm_send_plaintext(GPOINTER_TO_INT(session), buf, len);",
      "384:     return rc;",
      "387: int",
      "388: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
      "389: {",
      "390:     int rc = -1;",
      "391:     char *xml_text = NULL;",
      "392:     int len = 0;",
      "394:     xml_text = dump_xml_unformatted(msg);",
      "395:     if (xml_text) {",
      "396:         len = strlen(xml_text);",
      "397:     } else {",
      "398:         crm_err(\"Invalid XML, can not send msg\");",
      "399:         return -1;",
      "400:     }",
      "402:     rc = crm_send_remote_msg_raw(session, xml_text, len, encrypted);",
      "403:     if (rc < 0) {",
      "404:         goto done;",
      "405:     }",
      "406:     rc = crm_send_remote_msg_raw(session, REMOTE_MSG_TERMINATOR, strlen(REMOTE_MSG_TERMINATOR), encrypted);",
      "408: done:",
      "409:     if (rc < 0) {",
      "410:         crm_err(\"Failed to send remote msg, rc = %d\", rc);",
      "411:     }",
      "413:     free(xml_text);",
      "414:     return rc;",
      "415: }",
      "423: crm_parse_remote_buffer(char **msg_buf)",
      "425:     char *buf = NULL;",
      "426:     char *start = NULL;",
      "427:     char *end = NULL;",
      "430:     if (*msg_buf == NULL) {",
      "431:         return NULL;",
      "432:     }",
      "435:     buf = *msg_buf;",
      "439:     start = buf;",
      "440:     end = strstr(start, REMOTE_MSG_TERMINATOR);",
      "442:     while (!xml && end) {",
      "445:         end[0] = '\\0';",
      "446:         end += strlen(REMOTE_MSG_TERMINATOR);",
      "448:         xml = string2xml(start);",
      "449:         if (xml == NULL) {",
      "450:             crm_err(\"Couldn't parse: '%.120s'\", start);",
      "451:         }",
      "452:         start = end;",
      "453:         end = strstr(start, REMOTE_MSG_TERMINATOR);",
      "454:     }",
      "456:     if (xml && start) {",
      "459:         free(buf);",
      "460:     } else if (!xml) {",
      "463:     }",
      "465:     return xml;",
      "466: }",
      "476: int",
      "477: crm_recv_remote_ready(void *session, gboolean encrypted, int timeout /* ms */)",
      "478: {",
      "479:     struct pollfd fds = { 0, };",
      "480:     int sock = 0;",
      "481:     void *sock_ptr = NULL;",
      "482:     int rc = 0;",
      "483:     time_t start;",
      "485:     if (encrypted) {",
      "486: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "487:         gnutls_session *tls_session = session;",
      "488:         sock_ptr = gnutls_transport_get_ptr(*tls_session);",
      "489: #else",
      "490:         CRM_ASSERT(encrypted == FALSE);",
      "491: #endif",
      "492:     } else {",
      "493:         sock_ptr = session;",
      "494:     }",
      "496:     sock = GPOINTER_TO_INT(sock_ptr);",
      "497:     if (sock <= 0) {",
      "498:         return -ENOTCONN;",
      "499:     }",
      "501:     start = time(NULL);",
      "502:     errno = 0;",
      "503:     do {",
      "504:         fds.fd = sock;",
      "505:         fds.events = POLLIN;",
      "510:         if (errno == EINTR && (timeout > 0)) {",
      "511:             timeout = timeout - ((time(NULL) - start) * 1000);",
      "512:             if (timeout < 1000) {",
      "513:                 timeout = 1000;",
      "514:             }",
      "515:         }",
      "517:         rc = poll(&fds, 1, timeout);",
      "518:     } while (rc < 0 && errno == EINTR);",
      "520:     return rc;",
      "521: }",
      "523: char *",
      "524: crm_recv_remote_raw(void *session, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected)",
      "525: {",
      "526:     char *reply = NULL;",
      "527:     if (recv_len) {",
      "529:     }",
      "531:     if (disconnected) {",
      "533:     }",
      "537:         reply = crm_recv_tls(session, max_recv, recv_len, disconnected);",
      "542:         reply = crm_recv_plaintext(GPOINTER_TO_INT(session), max_recv, recv_len, disconnected);",
      "546:     }",
      "548:     return reply;",
      "549: }",
      "558: gboolean",
      "559: crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout /*ms */, int *disconnected)",
      "560: {",
      "561:     int ret;",
      "562:     size_t request_len = 0;",
      "563:     time_t start = time(NULL);",
      "564:     char *raw_request = NULL;",
      "565:     int remaining_timeout = 0;",
      "567:     if (total_timeout == 0) {",
      "568:         total_timeout = 10000;",
      "569:     } else if (total_timeout < 0) {",
      "570:         total_timeout = 60000;",
      "571:     }",
      "574:     remaining_timeout = total_timeout;",
      "575:     while ((remaining_timeout > 0) && !(*disconnected)) {",
      "578:         crm_trace(\"waiting to receive remote msg, starting timeout %d, remaining_timeout %d\", total_timeout, remaining_timeout);",
      "579:         ret = crm_recv_remote_ready(session, encrypted, remaining_timeout);",
      "580:         raw_request = NULL;",
      "582:         if (ret == 0) {",
      "583:             crm_err(\"poll timed out (%d ms) while waiting to receive msg\", remaining_timeout);",
      "584:             return FALSE;",
      "586:         } else if (ret < 0) {",
      "587:             if (errno != EINTR) {",
      "588:                 crm_debug(\"poll returned error while waiting for msg, rc: %d, errno: %d\", ret, errno);",
      "590:                 return FALSE;",
      "591:             }",
      "592:             crm_debug(\"poll EINTR encountered during poll, retrying\");",
      "593:         } else {",
      "594:             raw_request = crm_recv_remote_raw(session, encrypted, 0, &request_len, disconnected);",
      "595:         }",
      "597:         remaining_timeout = remaining_timeout - ((time(NULL) - start) * 1000);",
      "599:         if (!raw_request) {",
      "600:             crm_debug(\"Empty msg received after poll\");",
      "601:             continue;",
      "602:         }",
      "604:         if (*recv_buf) {",
      "605:             int old_len = strlen(*recv_buf);",
      "607:             crm_trace(\"Expanding recv buffer from %d to %d\", old_len, old_len+request_len);",
      "610:             memcpy(*recv_buf + old_len, raw_request, request_len);",
      "612:             free(raw_request);",
      "613:         } else {",
      "615:         }",
      "617:         if (strstr(*recv_buf, REMOTE_MSG_TERMINATOR)) {",
      "618:             return TRUE;",
      "622:     return FALSE;",
      "631: int",
      "632: crm_remote_tcp_connect(const char *host, int port)",
      "633: {",
      "634:     struct addrinfo *res;",
      "635:     struct addrinfo *rp;",
      "636:     struct addrinfo hints;",
      "637:     const char *server = host;",
      "638:     int ret_ga;",
      "639:     int sock;",
      "642:     memset(&hints, 0, sizeof(struct addrinfo));",
      "644:     hints.ai_socktype = SOCK_STREAM;",
      "645:     hints.ai_flags = AI_CANONNAME;",
      "647:     crm_debug(\"Looking up %s\", server);",
      "648:     ret_ga = getaddrinfo(server, NULL, &hints, &res);",
      "649:     if (ret_ga) {",
      "650:         crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));",
      "651:         return -1;",
      "652:     }",
      "654:     if (!res || !res->ai_addr) {",
      "655:         crm_err(\"getaddrinfo failed\");",
      "656:         return -1;",
      "657:     }",
      "659:     for (rp = res; rp != NULL; rp = rp->ai_next) {",
      "660:         struct sockaddr *addr = rp->ai_addr;",
      "661:         int flag = 0;",
      "662:         if (!addr) {",
      "663:             continue;",
      "664:         }",
      "666:         if (rp->ai_canonname) {",
      "667:             server = res->ai_canonname;",
      "668:         }",
      "669:         crm_debug(\"Got address %s for %s\", server, host);",
      "672:         sock = socket(rp->ai_family, SOCK_STREAM, IPPROTO_TCP);",
      "673:         if (sock == -1) {",
      "674:             crm_err(\"Socket creation failed for remote client connection.\");",
      "675:             continue;",
      "676:         }",
      "677:         if (addr->sa_family == AF_INET6) {",
      "678:             struct sockaddr_in6 *addr_in = (struct sockaddr_in6 *) addr;",
      "679:             addr_in->sin6_port = htons(port);",
      "680:         } else {",
      "681:             struct sockaddr_in *addr_in = (struct sockaddr_in *) addr;",
      "682:             addr_in->sin_port = htons(port);",
      "683:             crm_info(\"Attempting to connect to remote server at %s:%d\", inet_ntoa(addr_in->sin_addr), port);",
      "684:         }",
      "686:         if (connect(sock, rp->ai_addr, rp->ai_addrlen) == 0) {",
      "687:             if ((flag = fcntl(sock, F_GETFL)) >= 0) {",
      "688:                 if (fcntl(sock, F_SETFL, flag | O_NONBLOCK) < 0) {",
      "689:                     crm_err( \"fcntl() write failed\");",
      "690:                     close(sock);",
      "691:                     sock = -1;",
      "692:                     continue;",
      "693:                 }",
      "694:             }",
      "696:         }",
      "698:         close(sock);",
      "699:         sock = -1;",
      "700:     }",
      "701:     freeaddrinfo(res);",
      "703:     return sock;",
      "704: }",
      "",
      "---------------"
    ],
    "tools/crm_mon.c||tools/crm_mon.c": [
      "File: tools/crm_mon.c -> tools/crm_mon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "275:             if (rc == pcmk_ok) {",
      "276:                 rc = cib->cmds->set_connection_dnotify(cib, mon_cib_connection_destroy);",
      "277:                 if (rc == -EPROTONOSUPPORT) {",
      "279:                     if (as_console) {",
      "280:                         sleep(2);",
      "281:                     }",
      "",
      "[Removed Lines]",
      "278:                     print_as(\"Notification setup failed, won't be able to reconnect after failure\");",
      "",
      "[Added Lines]",
      "278:                     print_as(\"Notification setup not supported, won't be able to reconnect after failure\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d94140d7bdb8126a24e1cb28a5addc71c4994af8",
      "candidate_info": {
        "commit_hash": "d94140d7bdb8126a24e1cb28a5addc71c4994af8",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/d94140d7bdb8126a24e1cb28a5addc71c4994af8",
        "files": [
          "crmd/control.c",
          "crmd/lrm_state.c",
          "lib/cluster/cluster.c",
          "lib/cluster/membership.c",
          "lib/common/mainloop.c",
          "lib/fencing/st_client.c",
          "lib/lrmd/lrmd_client.c",
          "mcp/pacemaker.sysconfig",
          "valgrind-pcmk.suppressions"
        ],
        "message": "Fix: crmd: Clean up more memory before exit",
        "before_after_code_files": [
          "crmd/control.c||crmd/control.c",
          "crmd/lrm_state.c||crmd/lrm_state.c",
          "lib/cluster/cluster.c||licluster/cluster.c",
          "lib/cluster/membership.c||licluster/membership.c",
          "lib/common/mainloop.c||licommon/mainloop.c",
          "lib/fencing/st_client.c||lifencing/st_client.c",
          "lib/lrmd/lrmd_client.c||lilrmd/lrmd_client.c",
          "mcp/pacemaker.sysconfig||mcp/pacemaker.sysconfig",
          "valgrind-pcmk.suppressions||valgrind-pcmk.suppressions"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crmd/control.c||crmd/control.c": [
          "File: crmd/control.c -> crmd/control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:     GListPtr gIter = NULL;",
          "212:     crm_trace(\"Preparing to exit\");",
          "213:     if (attrd_ipc) {",
          "214:         crm_ipc_close(attrd_ipc);",
          "215:         crm_ipc_destroy(attrd_ipc);",
          "220:     }",
          "221: #if SUPPORT_HEARTBEAT",
          "222:     if (fsa_cluster_conn) {",
          "223:         fsa_cluster_conn->llc_ops->delete(fsa_cluster_conn);",
          "224:         fsa_cluster_conn = NULL;",
          "225:     }",
          "",
          "[Removed Lines]",
          "216:     }",
          "217:     if (crmd_mainloop) {",
          "218:         g_main_loop_quit(crmd_mainloop);",
          "219:         g_main_loop_unref(crmd_mainloop);",
          "",
          "[Added Lines]",
          "214:     if(ipcs) {",
          "215:         crm_trace(\"Closing IPC server\");",
          "216:         mainloop_del_ipc_server(ipcs);",
          "217:     }",
          "220:         crm_trace(\"Closing attrd connection\");",
          "223:         attrd_ipc = NULL;",
          "227:         crm_trace(\"Disconnecting heartbeat\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:     g_list_free(fsa_message_queue);",
          "238:     fsa_message_queue = NULL;",
          "243:     clear_bit(fsa_input_register, R_MEMBERSHIP);",
          "251:     if (pe_subsystem->client && pe_subsystem->client->ipcs) {",
          "253:         qb_ipcs_disconnect(pe_subsystem->client->ipcs);",
          "254:     }",
          "255:     free(pe_subsystem);",
          "257:     free(cib_subsystem);",
          "259:     if (reload_hash) {",
          "260:         g_hash_table_destroy(reload_hash);",
          "261:     }",
          "262:     if (voted) {",
          "263:         g_hash_table_destroy(voted);",
          "264:     }",
          "",
          "[Removed Lines]",
          "240:     crm_client_cleanup();",
          "241:     empty_uuid_cache();",
          "242:     crm_peer_destroy();",
          "245:     if (te_subsystem->client && te_subsystem->client->ipcs) {",
          "246:         crm_debug(\"Full destroy: TE\");",
          "247:         qb_ipcs_disconnect(te_subsystem->client->ipcs);",
          "248:     }",
          "249:     free(te_subsystem);",
          "252:         crm_debug(\"Full destroy: PE\");",
          "",
          "[Added Lines]",
          "248:         crm_trace(\"Disconnecting Policy Engine\");",
          "254:     free(te_subsystem);",
          "257:         crm_trace(\"Destroying reload cache with %d members\", g_hash_table_size(reload_hash));",
          "261:         crm_trace(\"Destroying voted cache with %d members\", g_hash_table_size(voted));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "270:     clear_bit(fsa_input_register, R_LRM_CONNECTED);",
          "271:     lrm_state_destroy_all();",
          "273:     free(transition_timer);",
          "274:     free(integration_timer);",
          "275:     free(finalization_timer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272:     mainloop_destroy_trigger(fsa_source);",
          "273:     mainloop_destroy_trigger(config_read);",
          "274:     mainloop_destroy_trigger(stonith_reconnect);",
          "276:     if(stonith_api) {",
          "277:         crm_trace(\"Disconnecting fencing API\");",
          "278:         stonith_api->cmds->free(stonith_api);",
          "279:     }",
          "281:     crm_client_cleanup();",
          "282:     empty_uuid_cache();",
          "283:     crm_peer_destroy();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "283:     free(fsa_our_uname);",
          "284:     free(fsa_our_uuid);",
          "285:     free(fsa_our_dc);",
          "287:     free(max_generation_from);",
          "288:     free_xml(max_generation_xml);",
          "290:     return crm_exit(rc);",
          "291: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:     free(te_uuid);",
          "300:     free(fsa_pe_ref);",
          "305:     mainloop_destroy_signal(SIGUSR1);",
          "306:     mainloop_destroy_signal(SIGTERM);",
          "307:     mainloop_destroy_signal(SIGTRAP);",
          "308:     mainloop_destroy_signal(SIGCHLD);",
          "310:     if (crmd_mainloop) {",
          "311:         int lpc = 0;",
          "312:         GMainContext *ctx = g_main_loop_get_context(crmd_mainloop);",
          "313:         crm_trace(\"Draining mainloop %d %d\", g_main_loop_is_running(crmd_mainloop), g_main_context_pending(ctx));",
          "314:         while(g_main_context_pending(ctx) && lpc < 10) {",
          "315:             lpc++;",
          "316:             crm_trace(\"Iteration %d\", lpc);",
          "317:             g_main_context_dispatch(ctx);",
          "318:         }",
          "320:         crm_trace(\"Closing mainloop %d %d\", g_main_loop_is_running(crmd_mainloop), g_main_context_pending(ctx));",
          "321:         g_main_loop_quit(crmd_mainloop);",
          "322:         g_main_loop_unref(crmd_mainloop);",
          "323:         crmd_mainloop = NULL;",
          "324:     }",
          "326:     crm_trace(\"Done\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "606:         stop_subsystem(pe_subsystem, FALSE);",
          "607:     }",
          "610:     register_fsa_input(C_FSA_INTERNAL, I_TERMINATE, NULL);",
          "611: }",
          "",
          "[Removed Lines]",
          "609:     mainloop_del_ipc_server(ipcs);",
          "",
          "[Added Lines]",
          "646:     crm_trace(\"Closing IPC server\");",
          "647:     mainloop_del_ipc_server(ipcs); ipcs = NULL;",
          "",
          "---------------"
        ],
        "crmd/lrm_state.c||crmd/lrm_state.c": [
          "File: crmd/lrm_state.c -> crmd/lrm_state.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:         return;",
          "142:     }",
          "144:     g_hash_table_foreach_remove(proxy_table, remote_proxy_remove_by_node, (char *) lrm_state->node_name);",
          "145:     remote_ra_cleanup(lrm_state);",
          "146:     lrmd_api_delete(lrm_state->conn);",
          "148:     if (lrm_state->resource_history) {",
          "149:         g_hash_table_destroy(lrm_state->resource_history);",
          "150:     }",
          "151:     if (lrm_state->deletion_ops) {",
          "152:         g_hash_table_destroy(lrm_state->deletion_ops);",
          "153:     }",
          "154:     if (lrm_state->pending_ops) {",
          "155:         g_hash_table_destroy(lrm_state->pending_ops);",
          "156:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:     crm_trace(\"Destroying proxy table with %d members\", g_hash_table_size(proxy_table));",
          "150:         crm_trace(\"Destroying history op cache with %d members\", g_hash_table_size(lrm_state->resource_history));",
          "154:         crm_trace(\"Destroying deletion op cache with %d members\", g_hash_table_size(lrm_state->deletion_ops));",
          "158:         crm_trace(\"Destroying pending op cache with %d members\", g_hash_table_size(lrm_state->pending_ops));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215: lrm_state_destroy_all(void)",
          "216: {",
          "217:     if (lrm_state_table) {",
          "218:         g_hash_table_destroy(lrm_state_table);",
          "219:     }",
          "220: }",
          "222: lrm_state_t *",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:         crm_trace(\"Destroying state table with %d members\", g_hash_table_size(lrm_state_table));",
          "225:     if(proxy_table) {",
          "226:         crm_trace(\"Destroying proxy table with %d members\", g_hash_table_size(proxy_table));",
          "227:         g_hash_table_destroy(proxy_table);",
          "228:     }",
          "",
          "---------------"
        ],
        "lib/cluster/cluster.c||licluster/cluster.c": [
          "File: lib/cluster/cluster.c -> licluster/cluster.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:         g_hash_table_destroy(crm_uuid_cache);",
          "329:         crm_uuid_cache = NULL;",
          "330:     }",
          "331: }",
          "333: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cluster/membership.c||licluster/membership.c": [
          "File: lib/cluster/membership.c -> licluster/membership.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188: crm_peer_destroy(void)",
          "189: {",
          "190:     if (crm_peer_cache != NULL) {",
          "191:         g_hash_table_destroy(crm_peer_cache);",
          "192:         crm_peer_cache = NULL;",
          "193:     }",
          "195:     if (crm_peer_id_cache != NULL) {",
          "196:         g_hash_table_destroy(crm_peer_id_cache);",
          "197:         crm_peer_id_cache = NULL;",
          "198:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/common/mainloop.c||licommon/mainloop.c": [
          "File: lib/common/mainloop.c -> licommon/mainloop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175: gboolean",
          "176: mainloop_destroy_trigger(crm_trigger_t * source)",
          "177: {",
          "183:     return TRUE;",
          "184: }",
          "",
          "[Removed Lines]",
          "178:     source->trigger = FALSE;",
          "179:     if (source->id > 0) {",
          "180:         g_source_remove(source->id);",
          "181:         source->id = 0;",
          "182:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:         return TRUE;",
          "324:     }",
          "326:     tmp = crm_signals[sig];",
          "327:     crm_signals[sig] = NULL;",
          "328:     mainloop_destroy_trigger((crm_trigger_t *) tmp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/fencing/st_client.c||lifencing/st_client.c": [
          "File: lib/fencing/st_client.c -> lifencing/st_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1534:         crm_ipc_destroy(ipc);",
          "1535:     }",
          "1537:     stonith->state = stonith_disconnected;",
          "1538:     return pcmk_ok;",
          "1539: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2224:         stonith_private_t *private = stonith->private;",
          "2226:         g_hash_table_destroy(private->stonith_op_callback_table);",
          "2228:         free(stonith->private);",
          "2229:         free(stonith->cmds);",
          "2230:         free(stonith);",
          "2231:     }",
          "2233:     return rc;",
          "",
          "[Removed Lines]",
          "2227:         free(private->token);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/lrmd/lrmd_client.c||lilrmd/lrmd_client.c": [
          "File: lib/lrmd/lrmd_client.c -> lilrmd/lrmd_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1986:         free(native->remote_nodename);",
          "1987:         free(native->remote);",
          "1988:     }",
          "1989:     free(lrmd->private);",
          "1990:     free(lrmd);",
          "1991: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mcp/pacemaker.sysconfig||mcp/pacemaker.sysconfig": [
          "File: mcp/pacemaker.sysconfig -> mcp/pacemaker.sysconfig",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: # PCMK_valgrind_enabled=cib,crmd",
          "90: # PCMK_callgrind_enabled=yes",
          "91: # PCMK_callgrind_enabled=cib,crmd",
          "",
          "[Removed Lines]",
          "92: # VALGRIND_OPTS=\"--leak-check=full --trace-children=no --num-callers=25 --log-file=/var/lib/pacemaker/valgrind-%p\"",
          "",
          "[Added Lines]",
          "92: # VALGRIND_OPTS=\"--leak-check=full --trace-children=no --num-callers=25 --log-file=/var/lib/pacemaker/valgrind-%p --suppressions=/usr/share/pacemaker/tests/valgrind-pcmk.suppressions --gen-suppressions=all\"",
          "",
          "---------------"
        ],
        "valgrind-pcmk.suppressions||valgrind-pcmk.suppressions": [
          "File: valgrind-pcmk.suppressions -> valgrind-pcmk.suppressions",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:    Memcheck:Param",
          "38:    socketcall.sendmsg(msg)",
          "39:    fun:__sendmsg_nocancel",
          "42: }",
          "44: {",
          "45:    Cman - Jump or move depends on uninitialized values",
          "46:    Memcheck:Cond",
          "49: }",
          "51: {",
          "",
          "[Removed Lines]",
          "40:    obj:/usr/lib64/libcman.so.3.0",
          "41:    obj:/usr/lib64/libcman.so.3.0",
          "47:    obj:/usr/lib64/libcman.so.3.0",
          "48:    obj:/usr/lib64/libcman.so.3.0",
          "",
          "[Added Lines]",
          "40:    obj:*/libcman.so.3.0",
          "41:    obj:*/libcman.so.3.0",
          "47:    obj:*/libcman.so.3.0",
          "48:    obj:*/libcman.so.3.0",
          "49: }",
          "51: {",
          "52:    quarks - hashtable",
          "53:    Memcheck:Leak",
          "54:    fun:calloc",
          "55:    fun:g_malloc0",
          "56:    obj:*/libglib-*",
          "57:    fun:g_slice_alloc",
          "58:    fun:g_hash_table_new_full",
          "59:    fun:g_quark_from_static_string",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75ac1e7a0b2190f552270162df1e38b92f1ea727",
      "candidate_info": {
        "commit_hash": "75ac1e7a0b2190f552270162df1e38b92f1ea727",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/75ac1e7a0b2190f552270162df1e38b92f1ea727",
        "files": [
          "lib/common/remote.c"
        ],
        "message": "Log: remote: Correctly log connections to IPv6 servers",
        "before_after_code_files": [
          "lib/common/remote.c||lib/common/remote.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/common/remote.c||lib/common/remote.c"
          ],
          "candidate": [
            "lib/common/remote.c||lib/common/remote.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/common/remote.c||lib/common/remote.c": [
          "File: lib/common/remote.c -> lib/common/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "814:                              void *userdata, void (*callback) (void *userdata, int sock))",
          "815: {",
          "816:     struct addrinfo *res = NULL;",
          "817:     struct addrinfo *rp = NULL;",
          "818:     struct addrinfo hints;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "816:     char buffer[256];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "856:             crm_err(\"Socket creation failed for remote client connection.\");",
          "857:             continue;",
          "858:         }",
          "859:         if (addr->sa_family == AF_INET6) {",
          "860:             struct sockaddr_in6 *addr_in = (struct sockaddr_in6 *)addr;",
          "862:             addr_in->sin6_port = htons(port);",
          "863:         } else {",
          "864:             struct sockaddr_in *addr_in = (struct sockaddr_in *)addr;",
          "866:             addr_in->sin_port = htons(port);",
          "869:         }",
          "871:         if (callback) {",
          "872:             if (internal_tcp_connect_async",
          "873:                 (sock, rp->ai_addr, rp->ai_addrlen, timeout, userdata, callback) == 0) {",
          "",
          "[Removed Lines]",
          "867:             crm_info(\"Attempting to connect to remote server at %s:%d\",",
          "868:                      inet_ntoa(addr_in->sin_addr), port);",
          "",
          "[Added Lines]",
          "861:         memset(buffer, 0, DIMOF(buffer));",
          "866:             inet_ntop(addr->sa_family, &addr_in->sin6_addr, buffer, DIMOF(buffer));",
          "872:             inet_ntop(addr->sa_family, &addr_in->sin_addr, buffer, DIMOF(buffer));",
          "875:         crm_info(\"Attempting to connect to remote server at %s:%d\", buffer, port);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "165b05e9bf15e5f37375aea1eecfa24b352faac8",
      "candidate_info": {
        "commit_hash": "165b05e9bf15e5f37375aea1eecfa24b352faac8",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/165b05e9bf15e5f37375aea1eecfa24b352faac8",
        "files": [
          "cib/callbacks.c",
          "cib/callbacks.h",
          "cib/main.c",
          "cib/notify.c",
          "cib/remote.c",
          "crmd/control.c",
          "crmd/crmd_fsa.h",
          "crmd/crmd_messages.h",
          "crmd/crmd_utils.h",
          "crmd/messages.c",
          "crmd/utils.c",
          "fencing/commands.c",
          "fencing/internal.h",
          "fencing/main.c",
          "fencing/remote.c",
          "include/crm/common/Makefile.am",
          "include/crm/common/ipc.h",
          "include/crm/common/ipcs.h",
          "include/crm/common/mainloop.h",
          "lib/common/ipc.c",
          "lib/common/mainloop.c",
          "lrmd/Makefile.am",
          "lrmd/lrmd.c",
          "lrmd/lrmd_private.h",
          "lrmd/main.c",
          "mcp/pacemaker.c",
          "pengine/main.c",
          "pengine/pengine.c",
          "tools/attrd.c",
          "tools/crmadmin.c"
        ],
        "message": "Refactor: IPC: Create a common wrapper for client connections\n\nReduces code duplication and will allow us to add event queues down the track.\n\nBreaks API for IPC server functionality:\n- crm_ipcs_send_ack()\n- crm_ipcs_send()\n- crm_ipcs_recv()",
        "before_after_code_files": [
          "cib/callbacks.c||cib/callbacks.c",
          "cib/callbacks.h||cib/callbacks.h",
          "cib/main.c||cib/main.c",
          "cib/notify.c||cib/notify.c",
          "cib/remote.c||cib/remote.c",
          "crmd/control.c||crmd/control.c",
          "crmd/crmd_fsa.h||crmd/crmd_fsa.h",
          "crmd/crmd_messages.h||crmd/crmd_messages.h",
          "crmd/crmd_utils.h||crmd/crmd_utils.h",
          "crmd/messages.c||crmd/messages.c",
          "crmd/utils.c||crmd/utils.c",
          "fencing/commands.c||fencing/commands.c",
          "fencing/internal.h||fencing/internal.h",
          "fencing/main.c||fencing/main.c",
          "fencing/remote.c||fencing/remote.c",
          "include/crm/common/Makefile.am||include/crm/common/Makefile.am",
          "include/crm/common/ipc.h||include/crm/common/ipc.h",
          "include/crm/common/ipcs.h||include/crm/common/ipcs.h",
          "include/crm/common/mainloop.h||include/crm/common/mainloop.h",
          "lib/common/ipc.c||lib/common/ipc.c",
          "lib/common/mainloop.c||lib/common/mainloop.c",
          "lrmd/Makefile.am||lrmd/Makefile.am",
          "lrmd/lrmd.c||lrmd/lrmd.c",
          "lrmd/lrmd_private.h||lrmd/lrmd_private.h",
          "lrmd/main.c||lrmd/main.c",
          "mcp/pacemaker.c||mcp/pacemaker.c",
          "pengine/main.c||pengine/main.c",
          "pengine/pengine.c||pengine/pengine.c",
          "tools/attrd.c||tools/attrd.c",
          "tools/crmadmin.c||tools/crmadmin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/callbacks.h||cib/callbacks.h",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c",
            "lib/common/mainloop.c||lib/common/mainloop.c"
          ],
          "candidate": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/callbacks.h||cib/callbacks.h",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c",
            "lib/common/mainloop.c||lib/common/mainloop.c"
          ]
        }
      },
      "candidate_diff": {
        "cib/callbacks.c||cib/callbacks.c": [
          "File: cib/callbacks.c -> cib/callbacks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <crm/cib.h>",
          "33: #include <crm/msg_xml.h>",
          "34: #include <crm/common/ipc.h>",
          "35: #include <crm/cluster/internal.h>",
          "37: #include <crm/common/xml.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: gboolean can_write(int flags);",
          "72: void send_cib_replace(const xmlNode * sync_request, const char *host);",
          "73: void cib_process_request(xmlNode * request, gboolean privileged, gboolean force_synchronous,",
          "77: extern GHashTable *local_notify_queue;",
          "79: int next_client_id = 0;",
          "",
          "[Removed Lines]",
          "74:                          gboolean from_peer, cib_client_t * cib_client);",
          "76: extern GHashTable *client_list;",
          "",
          "[Added Lines]",
          "75:                          gboolean from_peer, crm_client_t * cib_client);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90: static int32_t",
          "91: cib_ipc_accept(qb_ipcs_connection_t *c, uid_t uid, gid_t gid)",
          "92: {",
          "99:     if (cib_shutdown_flag) {",
          "100:         crm_info(\"Ignoring new client [%d] during shutdown\", crm_ipcs_client_pid(c));",
          "101:         return -EPERM;",
          "102:     }",
          "114:     }",
          "126:     return 0;",
          "127: }",
          "129: static void",
          "130: cib_ipc_created(qb_ipcs_connection_t *c)",
          "131: {",
          "135: }",
          "137: static int32_t",
          "138: cib_ipc_dispatch_rw(qb_ipcs_connection_t *c, void *data, size_t size)",
          "139: {",
          "142:     return cib_common_callback(c, data, size, TRUE);",
          "143: }",
          "145: static int32_t",
          "146: cib_ipc_dispatch_ro(qb_ipcs_connection_t *c, void *data, size_t size)",
          "147: {",
          "150:     return cib_common_callback(c, data, size, FALSE);",
          "151: }",
          "",
          "[Removed Lines]",
          "93:     cib_client_t *new_client = NULL;",
          "94: #if ENABLE_ACL",
          "95:     struct group *crm_grp = NULL;",
          "96: #endif",
          "98:     crm_trace(\"Connecting %p for uid=%d gid=%d pid=%d\", c, uid, gid, crm_ipcs_client_pid(c));",
          "104:     new_client = calloc(1, sizeof(cib_client_t));",
          "105:     new_client->ipc = c;",
          "107:     CRM_CHECK(new_client->id == NULL, free(new_client->id));",
          "108:     new_client->id = crm_generate_uuid();",
          "110: #if ENABLE_ACL",
          "111:     crm_grp = getgrnam(CRM_DAEMON_GROUP);",
          "112:     if (crm_grp) {",
          "113:         qb_ipcs_connection_auth_set(c, -1, crm_grp->gr_gid, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);",
          "116:     new_client->user = uid2username(uid);",
          "117: #endif",
          "122:     g_hash_table_insert(client_list, new_client->id, new_client);",
          "124:     qb_ipcs_context_set(c, new_client);",
          "132:     cib_client_t *cib_client = qb_ipcs_context_get(c);",
          "134:     crm_trace(\"%p connected for client %s\", c, cib_client->id);",
          "140:     cib_client_t *cib_client = qb_ipcs_context_get(c);",
          "141:     crm_trace(\"%p message from %s\", c, cib_client->id);",
          "148:     cib_client_t *cib_client = qb_ipcs_context_get(c);",
          "149:     crm_trace(\"%p message from %s\", c, cib_client->id);",
          "",
          "[Added Lines]",
          "93:     crm_trace(\"Connection %p\", c);",
          "99:     if(crm_client_new(c, uid, gid) == NULL) {",
          "100:         return -EIO;",
          "108:     crm_trace(\"Connection %p\", c);",
          "114:     crm_client_t *client = crm_client_get(c);",
          "115:     crm_trace(\"%p message from %s\", c, client->id);",
          "122:     crm_client_t *client = crm_client_get(c);",
          "123:     crm_trace(\"%p message from %s\", c, client->id);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154: static int32_t",
          "155: cib_ipc_closed(qb_ipcs_connection_t *c)",
          "156: {",
          "167:     return 0;",
          "168: }",
          "170: static void",
          "171: cib_ipc_destroy(qb_ipcs_connection_t *c)",
          "172: {",
          "189:     if (cib_shutdown_flag) {",
          "190:         cib_shutdown(0);",
          "191:     }",
          "",
          "[Removed Lines]",
          "157:     cib_client_t *cib_client = qb_ipcs_context_get(c);",
          "158:     crm_trace(\"Connection %p closed\", c);",
          "160:     CRM_ASSERT(cib_client != NULL);",
          "161:     CRM_ASSERT(cib_client->id != NULL);",
          "163:     if (!g_hash_table_remove(client_list, cib_client->id)) {",
          "164:         crm_err(\"Client %s not found in the hashtable\", cib_client->name);",
          "165:     }",
          "173:     cib_client_t *cib_client = qb_ipcs_context_get(c);",
          "175:     CRM_ASSERT(cib_client != NULL);",
          "176:     CRM_ASSERT(cib_client->id != NULL);",
          "179:     g_hash_table_remove(client_list, cib_client->id);",
          "181:     crm_trace(\"Destroying %s (%p)\", cib_client->name, c);",
          "182:     free(cib_client->name);",
          "183:     free(cib_client->callback_id);",
          "184:     free(cib_client->id);",
          "185:     free(cib_client->user);",
          "186:     free(cib_client);",
          "187:     crm_trace(\"Freed the cib client\");",
          "",
          "[Added Lines]",
          "131:     crm_client_t *client = crm_client_get(c);",
          "132:     crm_trace(\"Connection %p\", c);",
          "133:     crm_client_destroy(client);",
          "140:     crm_trace(\"Connection %p\", c);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "210: };",
          "212: void",
          "214: {",
          "215:     const char *op = crm_element_value(op_request, F_CIB_OPERATION);",
          "",
          "[Removed Lines]",
          "213: cib_common_callback_worker(uint32_t id, uint32_t flags, xmlNode * op_request, cib_client_t * cib_client, gboolean privileged)",
          "",
          "[Added Lines]",
          "165: cib_common_callback_worker(uint32_t id, uint32_t flags, xmlNode * op_request, crm_client_t * cib_client, gboolean privileged)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "221:             crm_xml_add(ack, F_CIB_OPERATION, CRM_OP_REGISTER);",
          "222:             crm_xml_add(ack, F_CIB_CLIENTID, cib_client->id);",
          "224:             cib_client->request_id = 0;",
          "225:             free_xml(ack);",
          "226:         }",
          "",
          "[Removed Lines]",
          "223:             crm_ipcs_send(cib_client->ipc, id, ack, FALSE);",
          "",
          "[Added Lines]",
          "175:             crm_ipcs_send(cib_client, id, ack, FALSE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "229:     } else if (crm_str_eq(op, T_CIB_NOTIFY, TRUE)) {",
          "231:         int on_off = 0;",
          "232:         const char *type = crm_element_value(op_request, F_CIB_NOTIFY_TYPE);",
          "233:         crm_element_value_int(op_request, F_CIB_NOTIFY_ACTIVATE, &on_off);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:         long long bit = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "236:                   type, cib_client->name, cib_client->id, on_off ? \"on\" : \"off\");",
          "238:         if (safe_str_eq(type, T_CIB_POST_NOTIFY)) {",
          "241:         } else if (safe_str_eq(type, T_CIB_PRE_NOTIFY)) {",
          "244:         } else if (safe_str_eq(type, T_CIB_UPDATE_CONFIRM)) {",
          "247:         } else if (safe_str_eq(type, T_CIB_DIFF_NOTIFY)) {",
          "250:         } else if (safe_str_eq(type, T_CIB_REPLACE_NOTIFY)) {",
          "252:         }",
          "254:         if(flags & crm_ipc_client_response) {",
          "257:             cib_client->request_id = 0;",
          "258:         }",
          "259:         return;",
          "260:     }",
          "263:     cib_process_request(op_request, FALSE, privileged, FALSE, cib_client);",
          "264: }",
          "",
          "[Removed Lines]",
          "239:             cib_client->post_notify = on_off;",
          "242:             cib_client->pre_notify = on_off;",
          "245:             cib_client->confirmations = on_off;",
          "248:             cib_client->diffs = on_off;",
          "251:             cib_client->replace = on_off;",
          "256:             crm_ipcs_send_ack(cib_client->ipc, id, \"ack\", __FUNCTION__, __LINE__);",
          "262:     cib_client->num_calls++;",
          "",
          "[Added Lines]",
          "192:             bit = cib_notify_post;",
          "195:             bit = cib_notify_pre;",
          "198:             bit = cib_notify_confirm;",
          "201:             bit = cib_notify_diff;",
          "204:             bit = cib_notify_replace;",
          "205:         }",
          "207:         if(on_off) {",
          "208:             set_bit(cib_client->options, bit);",
          "209:         } else {",
          "210:             clear_bit(cib_client->options, bit);",
          "215:             crm_ipcs_send_ack(cib_client, id, \"ack\", __FUNCTION__, __LINE__);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "269:     uint32_t id = 0;",
          "270:     uint32_t flags = 0;",
          "271:     int call_options = 0;",
          "275:     if(op_request) {",
          "276:         crm_element_value_int(op_request, F_CIB_CALLOPTS, &call_options);",
          "",
          "[Removed Lines]",
          "272:     xmlNode *op_request = crm_ipcs_recv(c, data, size, &id, &flags);",
          "273:     cib_client_t *cib_client = qb_ipcs_context_get(c);",
          "",
          "[Added Lines]",
          "230:     crm_client_t *cib_client = crm_client_get(c);",
          "231:     xmlNode *op_request = crm_ipcs_recv(cib_client, data, size, &id, &flags);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "279:     crm_trace(\"Inbound: %.200s\", data);",
          "280:     if (op_request == NULL || cib_client == NULL) {",
          "282:         return 0;",
          "283:     }",
          "",
          "[Removed Lines]",
          "281:         crm_ipcs_send_ack(c, id, \"nack\", __FUNCTION__, __LINE__);",
          "",
          "[Added Lines]",
          "239:         crm_ipcs_send_ack(cib_client, id, \"nack\", __FUNCTION__, __LINE__);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "292:     }",
          "295:     if (cib_client->name == NULL) {",
          "296:         const char *value = crm_element_value(op_request, F_CIB_CLIENTNAME);",
          "297:         if (value == NULL) {",
          "299:         } else {",
          "300:             cib_client->name = strdup(value);",
          "301:         }",
          "302:     }",
          "314:     crm_xml_add(op_request, F_CIB_CLIENTID, cib_client->id);",
          "315:     crm_xml_add(op_request, F_CIB_CLIENTNAME, cib_client->name);",
          "",
          "[Removed Lines]",
          "298:             cib_client->name = crm_itoa(crm_ipcs_client_pid(c));",
          "304:     if (cib_client->callback_id == NULL) {",
          "305:         const char *value = crm_element_value(op_request, F_CIB_CALLBACK_TOKEN);",
          "306:         if (value != NULL) {",
          "307:             cib_client->callback_id = strdup(value);",
          "309:         } else {",
          "310:             cib_client->callback_id = strdup(cib_client->id);",
          "311:         }",
          "312:     }",
          "",
          "[Added Lines]",
          "255:             cib_client->name = crm_itoa(cib_client->pid);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "331:                 gboolean sync_reply, gboolean from_peer)",
          "332: {",
          "335:     int local_rc = pcmk_ok;",
          "337:     if (client_id != NULL) {",
          "341:     }",
          "343:     if (client_obj == NULL) {",
          "344:         local_rc = -ECONNRESET;",
          "346:     } else {",
          "347:         int rid = 0;",
          "",
          "[Removed Lines]",
          "334:     cib_client_t *client_obj = NULL;",
          "338:         client_obj = g_hash_table_lookup(client_list, client_id);",
          "339:     } else {",
          "340:         crm_trace(\"No client to sent the response to. F_CIB_CLIENTID not set.\");",
          "",
          "[Added Lines]",
          "281:     crm_client_t *client_obj = NULL;",
          "285:         client_obj = crm_client_get_by_id(client_id);",
          "290:         crm_trace(\"No client to sent the response to. F_CIB_CLIENTID not set.\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "360:                       client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
          "361:         }",
          "372:         }",
          "373:     }",
          "",
          "[Removed Lines]",
          "363:         if (client_obj->ipc && crm_ipcs_send(client_obj->ipc, rid, notify_src, !sync_reply) < 0) {",
          "364:             local_rc = -ENOMSG;",
          "366: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "367:         } else if (client_obj->session) {",
          "368:             crm_send_remote_msg(client_obj->session, notify_src, client_obj->encrypted);",
          "369: #endif",
          "370:         } else if(client_obj->ipc == NULL) {",
          "371:             crm_err(\"Unknown transport for %s\", client_obj->name);",
          "",
          "[Added Lines]",
          "309:         switch(client_obj->kind) {",
          "310:             case client_type_ipc:",
          "311:                 if (crm_ipcs_send(client_obj, rid, notify_src, !sync_reply) < 0) {",
          "312:                     local_rc = -ENOMSG;",
          "313:                 }",
          "314:                 break;",
          "315:             case client_type_tls:",
          "316:             case client_type_tcp:",
          "317:                 if(client_obj->userdata) {",
          "318:                     crm_send_remote_msg(",
          "319:                         client_obj->session, notify_src, client_obj->kind == client_type_tls);",
          "320:                 } else {",
          "321:                     crm_warn(\"Notification of remote client %s/%s failed\",",
          "322:                              client_obj->name, client_obj->id);",
          "323:                 }",
          "324:                 break;",
          "325:             default:",
          "326:                 crm_err(\"Unknown transport %d for %s\", client_obj->kind, client_obj->name);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "425: }",
          "427: static void",
          "429:                     const char *op, gboolean * local_notify, gboolean * needs_reply,",
          "430:                     gboolean * process, gboolean * needs_forward)",
          "431: {",
          "",
          "[Removed Lines]",
          "428: parse_local_options(cib_client_t * cib_client, int call_type, int call_options, const char *host,",
          "",
          "[Added Lines]",
          "383: parse_local_options(crm_client_t * cib_client, int call_type, int call_options, const char *host,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "550: }",
          "552: static void",
          "554: {",
          "555:     const char *op = crm_element_value(request, F_CIB_OPERATION);",
          "556:     const char *host = crm_element_value(request, F_CIB_HOST);",
          "",
          "[Removed Lines]",
          "553: forward_request(xmlNode * request, cib_client_t * cib_client, int call_options)",
          "",
          "[Added Lines]",
          "508: forward_request(xmlNode * request, crm_client_t * cib_client, int call_options)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "627: void",
          "628: cib_process_request(xmlNode * request, gboolean force_synchronous, gboolean privileged,",
          "630: {",
          "631:     int call_type = 0;",
          "632:     int call_options = 0;",
          "",
          "[Removed Lines]",
          "629:                     gboolean unused, cib_client_t * cib_client)",
          "",
          "[Added Lines]",
          "584:                     gboolean unused, crm_client_t * cib_client)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1334: static void",
          "1335: disconnect_remote_client(gpointer key, gpointer value, gpointer user_data)",
          "1336: {",
          "1338:     crm_err(\"Disconnecting %s... Not implemented\", crm_str(a_client->name));",
          "1339: }",
          "",
          "[Removed Lines]",
          "1337:     cib_client_t *a_client = value;",
          "",
          "[Added Lines]",
          "1292:     crm_client_t *a_client = value;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1381:             disconnects++;",
          "1382:         }",
          "1388:         crm_info(\"Disconnected %d clients\", disconnects);",
          "1389:     }",
          "1391:     qb_ipcs_stats_get(ipcs_rw, &srv_stats, QB_FALSE);",
          "1394:         crm_info(\"All clients disconnected (%d)\", srv_stats.active_connections);",
          "1395:         initiate_exit();",
          "1397:     } else {",
          "1399:     }",
          "1400: }",
          "",
          "[Removed Lines]",
          "1384:         disconnects += g_hash_table_size(client_list);",
          "1386:         crm_debug(\"Disconnecting %d remote clients\", g_hash_table_size(client_list));",
          "1387:         g_hash_table_foreach(client_list, disconnect_remote_client, NULL);",
          "1393:     if(g_hash_table_size(client_list) == 0) {",
          "1398:         crm_info(\"Waiting on %d clients to disconnect (%d)\", g_hash_table_size(client_list), srv_stats.active_connections);",
          "",
          "[Added Lines]",
          "1339:         disconnects += crm_hash_table_size(client_connections);",
          "1341:         crm_debug(\"Disconnecting %d remote clients\", crm_hash_table_size(client_connections));",
          "1342:         g_hash_table_foreach(client_connections, disconnect_remote_client, NULL);",
          "1348:     if(crm_hash_table_size(client_connections) == 0) {",
          "1353:         crm_info(\"Waiting on %d clients to disconnect (%d)\",",
          "1354:                  crm_hash_table_size(client_connections), srv_stats.active_connections);",
          "",
          "---------------"
        ],
        "cib/callbacks.h||cib/callbacks.h": [
          "File: cib/callbacks.h -> cib/callbacks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: extern gboolean cib_is_master;",
          "36: extern GHashTable *peer_hash;",
          "37: extern GHashTable *config_hash;",
          "67: typedef struct cib_operation_s {",
          "68:     const char *operation;",
          "",
          "[Removed Lines]",
          "35: extern GHashTable *client_list;",
          "39: typedef struct cib_client_s {",
          "40:     char *id;",
          "41:     char *name;",
          "42:     char *callback_id;",
          "43:     char *user;",
          "44:     int request_id;",
          "46:     qb_ipcs_connection_t *ipc;",
          "48: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "49:     gnutls_session *session;",
          "50: #else",
          "51:     void *session;",
          "52: #endif",
          "53:     gboolean encrypted;",
          "54:     mainloop_io_t *remote;",
          "56:     unsigned long num_calls;",
          "58:     int pre_notify;",
          "59:     int post_notify;",
          "60:     int confirmations;",
          "61:     int replace;",
          "62:     int diffs;",
          "64:     GList *delegated_calls;",
          "65: } cib_client_t;",
          "",
          "[Added Lines]",
          "38: enum cib_notifications",
          "39: {",
          "40:     cib_notify_pre     = 0x0001,",
          "41:     cib_notify_post    = 0x0002,",
          "42:     cib_notify_replace = 0x0004,",
          "43:     cib_notify_confirm = 0x0008,",
          "44:     cib_notify_diff    = 0x0010,",
          "45: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: extern void cib_peer_callback(xmlNode * msg, void *private_data);",
          "85: extern void cib_client_status_callback(const char *node, const char *client,",
          "86:                                        const char *status, void *private);",
          "89: void cib_shutdown(int nsig);",
          "90: void initiate_exit(void);",
          "",
          "[Removed Lines]",
          "87: extern void cib_common_callback_worker(uint32_t id, uint32_t flags, xmlNode * op_request, cib_client_t * cib_client, gboolean privileged);",
          "",
          "[Added Lines]",
          "67: extern void cib_common_callback_worker(uint32_t id, uint32_t flags, xmlNode * op_request, crm_client_t * cib_client, gboolean privileged);",
          "",
          "---------------"
        ],
        "cib/main.c||cib/main.c": [
          "File: cib/main.c -> cib/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: gboolean startCib(const char *filename);",
          "88: extern int write_cib_contents(gpointer p);",
          "91: GHashTable *config_hash = NULL;",
          "92: GHashTable *local_notify_queue = NULL;",
          "",
          "[Removed Lines]",
          "90: GHashTable *client_list = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110: static void",
          "111: log_cib_client(gpointer key, gpointer value, gpointer user_data)",
          "112: {",
          "116: }",
          "",
          "[Removed Lines]",
          "113:     cib_client_t *a_client = value;",
          "115:     crm_info(\"Client %s\", crm_str(a_client->name));",
          "",
          "[Added Lines]",
          "112:     crm_info(\"Client %s\", crm_client_name(value));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:     cib_writer = mainloop_add_trigger(G_PRIORITY_LOW, write_cib_contents, NULL);",
          "151:     crm_peer_init();",
          "154:     while (1) {",
          "155:         flag = crm_get_option(argc, argv, &index);",
          "",
          "[Removed Lines]",
          "152:     client_list = g_hash_table_new(crm_str_hash, g_str_equal);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:     rc = cib_init();",
          "250:     cib_cleanup();",
          "252: #if SUPPORT_HEARTBEAT",
          "",
          "[Removed Lines]",
          "248:     CRM_CHECK(g_hash_table_size(client_list) == 0, crm_warn(\"Not all clients gone at exit\"));",
          "249:     g_hash_table_foreach(client_list, log_cib_client, NULL);",
          "",
          "[Added Lines]",
          "244:     CRM_CHECK(crm_hash_table_size(client_connections) == 0, crm_warn(\"Not all clients gone at exit\"));",
          "245:     g_hash_table_foreach(client_connections, log_cib_client, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "266:     if (local_notify_queue) {",
          "267:         g_hash_table_destroy(local_notify_queue);",
          "268:     }",
          "269:     g_hash_table_destroy(config_hash);",
          "271:     free(cib_our_uname);",
          "272:     free(channel1);",
          "273:     free(channel2);",
          "",
          "[Removed Lines]",
          "270:     g_hash_table_destroy(client_list);",
          "",
          "[Added Lines]",
          "265:     crm_client_cleanup();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "442:         return;",
          "443:     }",
          "444: #endif",
          "446:         crm_info(\"No more peers\");",
          "447:         terminate_cib(__FUNCTION__, FALSE);",
          "448:     }",
          "",
          "[Removed Lines]",
          "445:     if(cib_shutdown_flag && crm_active_peers() < 2 && g_hash_table_size(client_list) == 0) {",
          "",
          "[Added Lines]",
          "441:     if(cib_shutdown_flag && crm_active_peers() < 2 && crm_hash_table_size(client_connections) == 0) {",
          "",
          "---------------"
        ],
        "cib/notify.c||cib/notify.c": [
          "File: cib/notify.c -> cib/notify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <cibio.h>",
          "38: #include <callbacks.h>",
          "39: #include <notify.h>",
          "41: int pending_updates = 0;",
          "44: gboolean cib_notify_client(gpointer key, gpointer value, gpointer user_data);",
          "45: void attach_cib_generation(xmlNode * msg, const char *field, xmlNode * a_cib);",
          "",
          "[Removed Lines]",
          "42: extern GHashTable *client_list;",
          "",
          "[Added Lines]",
          "40: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: static void",
          "51: need_pre_notify(gpointer key, gpointer value, gpointer user_data)",
          "52: {",
          "56:         gboolean *needed = user_data;",
          "",
          "[Removed Lines]",
          "53:     cib_client_t *client = value;",
          "55:     if (client->pre_notify) {",
          "",
          "[Added Lines]",
          "53:     crm_client_t *client = value;",
          "55:     if (is_set(client->options, cib_notify_pre)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: static void",
          "63: need_post_notify(gpointer key, gpointer value, gpointer user_data)",
          "64: {",
          "68:         gboolean *needed = user_data;",
          "",
          "[Removed Lines]",
          "65:     cib_client_t *client = value;",
          "67:     if (client->post_notify) {",
          "",
          "[Added Lines]",
          "65:     crm_client_t *client = value;",
          "67:     if (is_set(client->options, cib_notify_post)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:     const char *type = NULL;",
          "78:     gboolean do_send = FALSE;",
          "81:     xmlNode *update_msg = user_data;",
          "83:     CRM_CHECK(client != NULL, return TRUE);",
          "84:     CRM_CHECK(update_msg != NULL, return TRUE);",
          "87:         crm_warn(\"Skipping client with NULL channel\");",
          "88:         return FALSE;",
          "89:     }",
          "",
          "[Removed Lines]",
          "80:     cib_client_t *client = value;",
          "86:     if (client->ipc == NULL) {",
          "",
          "[Added Lines]",
          "80:     crm_client_t *client = value;",
          "86:     if (client->ipcs == NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91:     type = crm_element_value(update_msg, F_SUBTYPE);",
          "93:     CRM_LOG_ASSERT(type != NULL);",
          "95:         do_send = TRUE;",
          "98:         do_send = TRUE;",
          "101:         do_send = TRUE;",
          "104:         do_send = TRUE;",
          "107:         do_send = TRUE;",
          "108:     }",
          "110:     if (do_send) {",
          "124:         }",
          "125:     }",
          "126:     return FALSE;",
          "",
          "[Removed Lines]",
          "94:     if (client->diffs && safe_str_eq(type, T_CIB_DIFF_NOTIFY)) {",
          "97:     } else if (client->replace && safe_str_eq(type, T_CIB_REPLACE_NOTIFY)) {",
          "100:     } else if (client->confirmations && safe_str_eq(type, T_CIB_UPDATE_CONFIRM)) {",
          "103:     } else if (client->pre_notify && safe_str_eq(type, T_CIB_PRE_NOTIFY)) {",
          "106:     } else if (client->post_notify && safe_str_eq(type, T_CIB_POST_NOTIFY)) {",
          "111:         if (client->ipc) {",
          "112:             if(crm_ipcs_send(client->ipc, 0, update_msg, TRUE) == FALSE) {",
          "113:                 crm_warn(\"Notification of client %s/%s failed\", client->name, client->id);",
          "114:             }",
          "116: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "117:         } else if (client->session) {",
          "118:             crm_debug(\"Sent %s notification to client %s/%s\", type, client->name, client->id);",
          "119:             crm_send_remote_msg(client->session, update_msg, client->encrypted);",
          "121: #endif",
          "122:         } else {",
          "123:             crm_err(\"Unknown transport for %s\", client->name);",
          "",
          "[Added Lines]",
          "94:     if (is_set(client->options, cib_notify_diff) && safe_str_eq(type, T_CIB_DIFF_NOTIFY)) {",
          "97:     } else if (is_set(client->options, cib_notify_replace) && safe_str_eq(type, T_CIB_REPLACE_NOTIFY)) {",
          "100:     } else if (is_set(client->options, cib_notify_confirm) && safe_str_eq(type, T_CIB_UPDATE_CONFIRM)) {",
          "103:     } else if (is_set(client->options, cib_notify_pre) && safe_str_eq(type, T_CIB_PRE_NOTIFY)) {",
          "106:     } else if (is_set(client->options, cib_notify_post) && safe_str_eq(type, T_CIB_POST_NOTIFY)) {",
          "111:         switch(client->kind) {",
          "112:             case client_type_ipc:",
          "113:                 if(crm_ipcs_send(client, 0, update_msg, TRUE) == FALSE) {",
          "114:                     crm_warn(\"Notification of client %s/%s failed\", client->name, client->id);",
          "115:                 }",
          "116:                 break;",
          "117:             case client_type_tls:",
          "118:             case client_type_tcp:",
          "119:                 if(client->userdata) {",
          "120:                     crm_debug(\"Sent %s notification to client %s/%s\", type, client->name, client->id);",
          "121:                     crm_send_remote_msg(client->session, update_msg, client->kind == client_type_tls);",
          "122:                 } else {",
          "123:                     crm_warn(\"Notification of remote client %s/%s failed\", client->name, client->id);",
          "124:                 }",
          "125:                 break;",
          "126:             default:",
          "127:                 crm_err(\"Unknown transport %d for %s\", client->kind, client->name);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134:     const char *id = NULL;",
          "135:     gboolean needed = FALSE;",
          "138:     if (needed == FALSE) {",
          "139:         return;",
          "140:     }",
          "",
          "[Removed Lines]",
          "137:     g_hash_table_foreach(client_list, need_pre_notify, &needed);",
          "",
          "[Added Lines]",
          "141:     g_hash_table_foreach(client_connections, need_pre_notify, &needed);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "170:         add_message_xml(update_msg, F_CIB_UPDATE, update);",
          "171:     }",
          "175:     if (update == NULL) {",
          "176:         crm_trace(\"Performing operation %s (on section=%s)\", op, type);",
          "",
          "[Removed Lines]",
          "173:     g_hash_table_foreach_remove(client_list, cib_notify_client, update_msg);",
          "",
          "[Added Lines]",
          "177:     g_hash_table_foreach_remove(client_connections, cib_notify_client, update_msg);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "188: {",
          "189:     gboolean needed = FALSE;",
          "192:     if (needed == FALSE) {",
          "193:         return;",
          "194:     }",
          "",
          "[Removed Lines]",
          "191:     g_hash_table_foreach(client_list, need_post_notify, &needed);",
          "",
          "[Added Lines]",
          "195:     g_hash_table_foreach(client_connections, need_post_notify, &needed);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "281:     }",
          "283:     crm_trace(\"Notifying clients\");",
          "285:     free_xml(update_msg);",
          "286:     crm_trace(\"Notify complete\");",
          "287: }",
          "",
          "[Removed Lines]",
          "284:     g_hash_table_foreach_remove(client_list, cib_notify_client, update_msg);",
          "",
          "[Added Lines]",
          "288:     g_hash_table_foreach_remove(client_connections, cib_notify_client, update_msg);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "341:     crm_log_xml_trace(replace_msg, \"CIB Replaced\");",
          "344:     free_xml(replace_msg);",
          "345: }",
          "",
          "[Removed Lines]",
          "343:     g_hash_table_foreach_remove(client_list, cib_notify_client, replace_msg);",
          "",
          "[Added Lines]",
          "347:     g_hash_table_foreach_remove(client_connections, cib_notify_client, replace_msg);",
          "",
          "---------------"
        ],
        "cib/remote.c||cib/remote.c": [
          "File: cib/remote.c -> cib/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <crm/msg_xml.h>",
          "38: #include <crm/common/ipc.h>",
          "39: #include <crm/common/xml.h>",
          "40: #include <crm/cib/internal.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "230:     gnutls_session *session = NULL;",
          "231: #endif",
          "234:     xmlNode *login = NULL;",
          "235:     const char *user = NULL;",
          "",
          "[Removed Lines]",
          "232:     cib_client_t *new_client = NULL;",
          "",
          "[Added Lines]",
          "233:     crm_client_t *new_client = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:     num_clients++;",
          "332:     new_client->id = crm_generate_uuid();",
          "334: #if ENABLE_ACL",
          "335:     new_client->user = strdup(user);",
          "336: #endif",
          "",
          "[Removed Lines]",
          "328:     new_client = calloc(1, sizeof(cib_client_t));",
          "329:     new_client->name = crm_element_value_copy(login, \"name\");",
          "331:     CRM_CHECK(new_client->id == NULL, free(new_client->id));",
          "",
          "[Added Lines]",
          "330:     crm_client_init();",
          "331:     new_client = calloc(1, sizeof(crm_client_t));",
          "334:     new_client->name = crm_element_value_copy(login, \"name\");",
          "336:     g_hash_table_insert(client_connections, new_client->id/* Should work */, new_client);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "338:     new_client->callback_id = NULL;",
          "339:     if (ssock == remote_tls_fd) {",
          "340: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "342:         new_client->session = session;",
          "343: #endif",
          "344:     } else {",
          "345:         new_client->session = GINT_TO_POINTER(csock);",
          "346:     }",
          "348:     free_xml(login);",
          "349:     login = create_xml_node(NULL, \"cib_result\");",
          "350:     crm_xml_add(login, F_CIB_OPERATION, CRM_OP_REGISTER);",
          "351:     crm_xml_add(login, F_CIB_CLIENTID, new_client->id);",
          "353:     free_xml(login);",
          "355:     new_client->remote = mainloop_add_fd(",
          "356:         \"cib-remote-client\", G_PRIORITY_DEFAULT, csock, new_client, &remote_client_fd_callbacks);",
          "360:     return TRUE;",
          "362:   bail:",
          "",
          "[Removed Lines]",
          "341:         new_client->encrypted = TRUE;",
          "352:     crm_send_remote_msg(new_client->session, login, new_client->encrypted);",
          "358:     g_hash_table_insert(client_list, new_client->id, new_client);",
          "",
          "[Added Lines]",
          "346:         new_client->kind = client_type_tls;",
          "349:         new_client->kind = client_type_tcp;",
          "357:     crm_send_remote_msg(new_client->session, login, new_client->kind == client_type_tls);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "375: void",
          "376: cib_remote_connection_destroy(gpointer user_data)",
          "377: {",
          "380:     if (client == NULL) {",
          "381:         return;",
          "",
          "[Removed Lines]",
          "378:     cib_client_t *client = user_data;",
          "",
          "[Added Lines]",
          "381:     crm_client_t *client = user_data;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "384:     crm_trace(\"Cleaning up after client disconnect: %s/%s\",",
          "385:               crm_str(client->name), client->id);",
          "401:     crm_trace(\"Freed the cib client\");",
          "403:     if (cib_shutdown_flag) {",
          "",
          "[Removed Lines]",
          "387:     if (client->id != NULL) {",
          "388:         if (!g_hash_table_remove(client_list, client->id)) {",
          "389:             crm_err(\"Client %s not found in the hashtable\", client->name);",
          "390:         }",
          "391:     }",
          "393:     crm_trace(\"Destroying %s (%p)\", client->name, user_data);",
          "394:     num_clients--;",
          "395:     crm_trace(\"Num unfree'd clients: %d\", num_clients);",
          "396:     free(client->name);",
          "397:     free(client->callback_id);",
          "398:     free(client->id);",
          "399:     free(client->user);",
          "400:     free(client);",
          "",
          "[Added Lines]",
          "390:     crm_client_destroy(client);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "411: {",
          "412:     const char *value = NULL;",
          "413:     xmlNode *command = NULL;",
          "419:     if (command == NULL) {",
          "420:         return -1;",
          "421:     }",
          "",
          "[Removed Lines]",
          "414:     cib_client_t *client = data;",
          "416:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
          "418:     command = crm_recv_remote_msg(client->session, client->encrypted);",
          "",
          "[Added Lines]",
          "404:     crm_client_t *client = data;",
          "406:     crm_trace(\"%s callback\", client->kind == client_type_tls ? \"secure\" : \"clear-text\");",
          "408:     command = crm_recv_remote_msg(client->session, client->kind == client_type_tls);",
          "",
          "---------------"
        ],
        "crmd/control.c||crmd/control.c": [
          "File: crmd/control.c -> crmd/control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <crm/pengine/rules.h>",
          "28: #include <crm/cluster/internal.h>",
          "30: #include <crmd.h>",
          "31: #include <crmd_fsa.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: gboolean crm_read_options(gpointer user_data);",
          "50: gboolean fsa_has_quorum = FALSE;",
          "52: crm_trigger_t *fsa_source = NULL;",
          "53: crm_trigger_t *config_read = NULL;",
          "",
          "[Removed Lines]",
          "51: GHashTable *ipc_clients = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202: void",
          "203: log_connected_client(gpointer key, gpointer value, gpointer user_data)",
          "204: {",
          "208: }",
          "210: int",
          "",
          "[Removed Lines]",
          "205:     crmd_client_t *client = value;",
          "207:     crm_err(\"%s is still connected at exit\", client->table_key);",
          "",
          "[Added Lines]",
          "205:     crm_client_t *client = value;",
          "207:     crm_err(\"%s is still connected at exit\", crm_client_name(client));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:     g_list_free(fsa_message_queue);",
          "240:     fsa_message_queue = NULL;",
          "248:     empty_uuid_cache();",
          "249:     crm_peer_destroy();",
          "250:     clear_bit(fsa_input_register, R_MEMBERSHIP);",
          "253:         crm_debug(\"Full destroy: TE\");",
          "255:     }",
          "256:     free(te_subsystem);",
          "259:         crm_debug(\"Full destroy: PE\");",
          "261:     }",
          "262:     free(pe_subsystem);",
          "",
          "[Removed Lines]",
          "242:     if (ipc_clients) {",
          "243:         crm_debug(\"Number of connected clients: %d\", g_hash_table_size(ipc_clients));",
          "245:         g_hash_table_destroy(ipc_clients);",
          "246:     }",
          "252:     if (te_subsystem->client && te_subsystem->client->ipc) {",
          "254:         qb_ipcs_disconnect(te_subsystem->client->ipc);",
          "258:     if (pe_subsystem->client && pe_subsystem->client->ipc) {",
          "260:         qb_ipcs_disconnect(pe_subsystem->client->ipc);",
          "",
          "[Added Lines]",
          "242:     crm_client_cleanup();",
          "247:     if (te_subsystem->client && te_subsystem->client->ipcs) {",
          "249:         qb_ipcs_disconnect(te_subsystem->client->ipcs);",
          "253:     if (pe_subsystem->client && pe_subsystem->client->ipcs) {",
          "255:         qb_ipcs_disconnect(pe_subsystem->client->ipcs);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "359:     fsa_source = mainloop_add_trigger(G_PRIORITY_HIGH, crm_fsa_trigger, NULL);",
          "360:     config_read = mainloop_add_trigger(G_PRIORITY_HIGH, crm_read_options, NULL);",
          "364:     crm_debug(\"Creating CIB and LRM objects\");",
          "365:     fsa_cib_conn = cib_new();",
          "366:     fsa_lrm_conn = lrmd_api_new();",
          "",
          "[Removed Lines]",
          "362:     ipc_clients = g_hash_table_new(crm_str_hash, g_str_equal);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "532: static int32_t",
          "533: crmd_ipc_accept(qb_ipcs_connection_t *c, uid_t uid, gid_t gid)",
          "534: {",
          "556:     }",
          "563:     return 0;",
          "564: }",
          "566: static void",
          "567: crmd_ipc_created(qb_ipcs_connection_t *c)",
          "568: {",
          "570: }",
          "572: static int32_t",
          "",
          "[Removed Lines]",
          "535:     crmd_client_t *blank_client = NULL;",
          "536: #if ENABLE_ACL",
          "537:     struct group *crm_grp = NULL;",
          "538: #endif",
          "540:     crm_trace(\"Connecting %p for uid=%d gid=%d\", c, uid, gid);",
          "542:     blank_client = calloc(1, sizeof(crmd_client_t));",
          "543:     CRM_ASSERT(blank_client != NULL);",
          "545:     crm_trace(\"Created client: %p\", blank_client);",
          "547:     blank_client->ipc = c;",
          "548:     blank_client->sub_sys = NULL;",
          "549:     blank_client->uuid = NULL;",
          "550:     blank_client->table_key = NULL;",
          "552: #if ENABLE_ACL",
          "553:     crm_grp = getgrnam(CRM_DAEMON_GROUP);",
          "554:     if (crm_grp) {",
          "555:         qb_ipcs_connection_auth_set(c, -1, crm_grp->gr_gid, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);",
          "558:     blank_client->user = uid2username(uid);",
          "559: #endif",
          "561:     qb_ipcs_context_set(c, blank_client);",
          "569:     crm_trace(\"Client %p connected\", c);",
          "",
          "[Added Lines]",
          "528:     crm_trace(\"Connection %p\", c);",
          "529:     if(crm_client_new(c, uid, gid) == NULL) {",
          "530:         return -EIO;",
          "538:     crm_trace(\"Connection %p\", c);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "574: {",
          "575:     uint32_t id = 0;",
          "576:     uint32_t flags = 0;",
          "582:     if(flags & crm_ipc_client_response) {",
          "584:     }",
          "586:     if (msg == NULL) {",
          "",
          "[Removed Lines]",
          "577:     crmd_client_t *client = qb_ipcs_context_get(c);",
          "579:     xmlNode *msg = crm_ipcs_recv(c, data, size, &id, &flags);",
          "580:     crm_trace(\"Invoked: %s\", client->table_key);",
          "583:         crm_ipcs_send_ack(c, id, \"ack\", __FUNCTION__, __LINE__);",
          "",
          "[Added Lines]",
          "546:     crm_client_t *client = crm_client_get(c);",
          "548:     xmlNode *msg = crm_ipcs_recv(client, data, size, &id, &flags);",
          "549:     crm_trace(\"Invoked: %s\", crm_client_name(client));",
          "552:         crm_ipcs_send_ack(client, id, \"ack\", __FUNCTION__, __LINE__);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "591:     determine_request_user(client->user, msg, F_CRM_USER);",
          "592: #endif",
          "595:     crm_log_xml_trace(msg, \"CRMd[inbound]\");",
          "597:     if (crmd_authorize_message(msg, client)) {",
          "598:         route_message(C_IPC_MESSAGE, msg);",
          "599:     }",
          "",
          "[Removed Lines]",
          "594:     crm_trace(\"Processing msg from %s\", client->table_key);",
          "",
          "[Added Lines]",
          "563:     crm_trace(\"Processing msg from %s\", crm_client_name(client));",
          "566:     crm_xml_add(msg, F_CRM_SYS_FROM, client->id);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "606: static int32_t",
          "607: crmd_ipc_closed(qb_ipcs_connection_t *c)",
          "608: {",
          "620:     }",
          "631:     trigger_fsa(fsa_source);",
          "632: }",
          "",
          "[Removed Lines]",
          "609:     return 0;",
          "610: }",
          "612: static void",
          "613: crmd_ipc_destroy(qb_ipcs_connection_t *c)",
          "614: {",
          "615:     crmd_client_t *client = qb_ipcs_context_get(c);",
          "617:     if (client == NULL) {",
          "618:         crm_trace(\"No client to delete\");",
          "619:         return;",
          "622:     process_client_disconnect(client);",
          "624:     crm_trace(\"Disconnecting client %s (%p)\", client->table_key, client);",
          "625:     free(client->table_key);",
          "626:     free(client->sub_sys);",
          "627:     free(client->uuid);",
          "628:     free(client->user);",
          "629:     free(client);",
          "",
          "[Added Lines]",
          "579:     crm_client_t *client = crm_client_get(c);",
          "580:     struct crm_subsystem_s *the_subsystem = NULL;",
          "582:     crm_trace(\"Connection %p\", c);",
          "584:     if (client->userdata == NULL) {",
          "585:         crm_trace(\"Client hadn't registered with us yet\");",
          "587:     } else if (strcasecmp(CRM_SYSTEM_PENGINE, client->userdata) == 0) {",
          "588:         the_subsystem = pe_subsystem;",
          "590:     } else if (strcasecmp(CRM_SYSTEM_TENGINE, client->userdata) == 0) {",
          "591:         the_subsystem = te_subsystem;",
          "593:     } else if (strcasecmp(CRM_SYSTEM_CIB, client->userdata) == 0) {",
          "594:         the_subsystem = cib_subsystem;",
          "597:     if (the_subsystem != NULL) {",
          "598:         the_subsystem->source = NULL;",
          "599:         the_subsystem->client = NULL;",
          "600:         crm_info(\"Received HUP from %s:[%d]\", the_subsystem->name, the_subsystem->pid);",
          "602:     } else {",
          "604:         crm_trace(\"Received HUP from transient client\");",
          "605:     }",
          "607:     crm_trace(\"Disconnecting client %s (%p)\", crm_client_name(client), client);",
          "608:     free(client->userdata);",
          "609:     crm_client_destroy(client);",
          "612:     return 0;",
          "613: }",
          "615: static void",
          "616: crmd_ipc_destroy(qb_ipcs_connection_t *c)",
          "617: {",
          "618:     crm_trace(\"Connection %p\", c);",
          "",
          "---------------"
        ],
        "crmd/crmd_fsa.h||crmd/crmd_fsa.h": [
          "File: crmd/crmd_fsa.h -> crmd/crmd_fsa.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: extern ll_cluster_t *fsa_cluster_conn;",
          "32: #  endif",
          "",
          "[Removed Lines]",
          "34: typedef struct crmd_client_s {",
          "35:     char *sub_sys;",
          "36:     char *uuid;",
          "37:     char *table_key;",
          "38:     char *user;",
          "39:     qb_ipcs_connection_t *ipc;",
          "40: } crmd_client_t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crmd/crmd_messages.h||crmd/crmd_messages.h": [
          "File: crmd/crmd_messages.h -> crmd/crmd_messages.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:                                            const char *crm_msg_reference,",
          "101:                                            const char *sys_to, const char *sys_from);",
          "105: extern gboolean send_request(xmlNode * msg, char **msg_reference);",
          "",
          "[Removed Lines]",
          "103: extern gboolean crmd_authorize_message(xmlNode * client_msg, crmd_client_t * curr_client);",
          "",
          "[Added Lines]",
          "103: extern gboolean crmd_authorize_message(xmlNode * client_msg, crm_client_t * curr_client);",
          "",
          "---------------"
        ],
        "crmd/crmd_utils.h||crmd/crmd_utils.h": [
          "File: crmd/crmd_utils.h -> crmd/crmd_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #  define CLIENT_EXIT_WAIT 30",
          "26: #  define FAKE_TE_ID \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
          "30: #  define fsa_cib_update(section, data, options, call_id, user_name) \\",
          "31:  if(fsa_cib_conn != NULL) {     \\",
          "32:      call_id = cib_internal_op(                                  \\",
          "",
          "[Removed Lines]",
          "28: extern void process_client_disconnect(crmd_client_t * curr_client);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crmd/messages.c||crmd/messages.c": [
          "File: crmd/messages.c -> crmd/messages.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <crm/cluster/internal.h>",
          "31: #include <crm/cib.h>",
          "33: #include <crmd.h>",
          "34: #include <crmd_messages.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477: static gboolean",
          "478: process_hello_message(xmlNode * hello,",
          "480: {",
          "482:     const char *local_client_name;",
          "483:     const char *local_major_version;",
          "484:     const char *local_minor_version;",
          "",
          "[Removed Lines]",
          "479:                       char **uuid, char **client_name, char **major_version, char **minor_version)",
          "481:     const char *local_uuid;",
          "",
          "[Added Lines]",
          "480:                       char **client_name, char **major_version, char **minor_version)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "492:         return FALSE;",
          "493:     }",
          "496:     local_client_name = crm_element_value(hello, \"client_name\");",
          "497:     local_major_version = crm_element_value(hello, \"major_version\");",
          "498:     local_minor_version = crm_element_value(hello, \"minor_version\");",
          "505:         crm_err(\"Hello message was not valid (field %s not found)\", \"client name\");",
          "506:         return FALSE;",
          "",
          "[Removed Lines]",
          "495:     local_uuid = crm_element_value(hello, \"client_uuid\");",
          "500:     if (local_uuid == NULL || strlen(local_uuid) == 0) {",
          "501:         crm_err(\"Hello message was not valid (field %s not found)\", \"uuid\");",
          "502:         return FALSE;",
          "504:     } else if (local_client_name == NULL || strlen(local_client_name) == 0) {",
          "",
          "[Added Lines]",
          "498:     if (local_client_name == NULL || strlen(local_client_name) == 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "524: }",
          "526: gboolean",
          "528: {",
          "532:     char *client_name = NULL;",
          "533:     char *major_version = NULL;",
          "534:     char *minor_version = NULL;",
          "537:     gboolean auth_result = FALSE;",
          "540:     xmlNode *xml = NULL;",
          "541:     const char *op = crm_element_value(client_msg, F_CRM_TASK);",
          "569:     }",
          "571:     crm_trace(\"received client join msg\");",
          "572:     crm_log_xml_trace(client_msg, \"join\");",
          "573:     xml = get_message_xml(client_msg, F_CRM_DATA);",
          "576:     if (auth_result == TRUE) {",
          "578:             crm_err(\"Bad client details (client_name=%s, uuid=%s)\",",
          "580:             auth_result = FALSE;",
          "581:         }",
          "582:     }",
          "",
          "[Removed Lines]",
          "527: crmd_authorize_message(xmlNode * client_msg, crmd_client_t * curr_client)",
          "530:     const char *sys_from = crm_element_value(client_msg, F_CRM_SYS_FROM);",
          "531:     char *uuid = NULL;",
          "535:     const char *filtered_from;",
          "536:     gpointer table_key = NULL;",
          "543:     if (safe_str_neq(CRM_OP_HELLO, op)) {",
          "545:         if (sys_from == NULL) {",
          "546:             crm_warn(\"Message [%s] was had no value for %s... discarding\",",
          "547:                      crm_element_value(client_msg, XML_ATTR_REFERENCE), F_CRM_SYS_FROM);",
          "548:             return FALSE;",
          "549:         }",
          "551:         filtered_from = sys_from;",
          "554:         if (strcasecmp(sys_from, CRM_SYSTEM_DCIB) == 0)",
          "555:             filtered_from = CRM_SYSTEM_CIB;",
          "557:         if (g_hash_table_lookup(ipc_clients, filtered_from) != NULL) {",
          "559:         }",
          "561:         crm_trace(\"Message reply can%s be routed from %s.\", can_reply ? \"\" : \" not\", sys_from);",
          "563:         if (can_reply == FALSE) {",
          "564:             crm_warn(\"Message [%s] not authorized\",",
          "565:                      crm_element_value(client_msg, XML_ATTR_REFERENCE));",
          "566:         }",
          "568:         return can_reply;",
          "574:     auth_result = process_hello_message(xml, &uuid, &client_name, &major_version, &minor_version);",
          "577:         if (client_name == NULL || uuid == NULL) {",
          "579:                     crm_str(client_name), crm_str(uuid));",
          "",
          "[Added Lines]",
          "520: crmd_authorize_message(xmlNode * client_msg, crm_client_t * curr_client)",
          "530:     if(curr_client == NULL) {",
          "531:         crm_warn(\"Message [%s] not authorized\", crm_element_value(client_msg, XML_ATTR_REFERENCE));",
          "532:         return FALSE;",
          "534:     } else if (safe_str_neq(CRM_OP_HELLO, op)) {",
          "535:         return TRUE;",
          "542:     auth_result = process_hello_message(xml, &client_name, &major_version, &minor_version);",
          "545:         if (client_name == NULL) {",
          "547:                     crm_str(client_name), curr_client->id);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "593:         }",
          "594:     }",
          "598:     if (auth_result == TRUE) {",
          "608:         crm_trace(\"Triggering FSA: %s\", __FUNCTION__);",
          "609:         mainloop_set_trigger(fsa_source);",
          "611:     } else {",
          "613:         crm_warn(\"Rejected client logon request\");",
          "615:     }",
          "618:     free(minor_version);",
          "619:     free(major_version);",
          "620:     free(client_name);",
          "",
          "[Removed Lines]",
          "596:     table_key = (gpointer) generate_hash_key(client_name, uuid);",
          "599:         crm_trace(\"Accepted client %s\", crm_str(table_key));",
          "601:         curr_client->table_key = table_key;",
          "602:         curr_client->sub_sys = strdup(client_name);",
          "603:         curr_client->uuid = strdup(uuid);",
          "605:         g_hash_table_insert(ipc_clients, table_key, curr_client->ipc);",
          "606:         crm_trace(\"Updated client list with %s\", crm_str(table_key));",
          "612:         free(table_key);",
          "614:         qb_ipcs_disconnect(curr_client->ipc);",
          "617:     free(uuid);",
          "",
          "[Added Lines]",
          "565:         crm_trace(\"Accepted client %s\", crm_client_name(curr_client));",
          "566:         curr_client->userdata = strdup(client_name);",
          "573:         qb_ipcs_disconnect(curr_client->ipcs);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "910: send_msg_via_ipc(xmlNode * msg, const char *sys)",
          "911: {",
          "912:     gboolean send_ok = TRUE;",
          "917:     if (crm_element_value(msg, F_CRM_HOST_FROM) == NULL) {",
          "918:         crm_xml_add(msg, F_CRM_HOST_FROM, fsa_our_uname);",
          "",
          "[Removed Lines]",
          "913:     qb_ipcs_connection_t *client_channel;",
          "915:     client_channel = (qb_ipcs_connection_t *) g_hash_table_lookup(ipc_clients, sys);",
          "",
          "[Added Lines]",
          "871:     crm_client_t *client_channel = crm_client_get_by_id(sys);",
          "",
          "---------------"
        ],
        "crmd/utils.c||crmd/utils.c": [
          "File: crmd/utils.c -> crmd/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:     }",
          "954: }",
          "1002: gboolean",
          "1003: update_dc(xmlNode * msg)",
          "1004: {",
          "",
          "[Removed Lines]",
          "956: extern GHashTable *ipc_clients;",
          "958: void",
          "959: process_client_disconnect(crmd_client_t * curr_client)",
          "960: {",
          "961:     struct crm_subsystem_s *the_subsystem = NULL;",
          "963:     CRM_CHECK(curr_client != NULL, return);",
          "964:     crm_trace(\"received HUP from %s\", curr_client->table_key);",
          "966:     if (curr_client->sub_sys == NULL) {",
          "967:         crm_trace(\"Client hadn't registered with us yet\");",
          "969:     } else if (strcasecmp(CRM_SYSTEM_PENGINE, curr_client->sub_sys) == 0) {",
          "970:         the_subsystem = pe_subsystem;",
          "972:     } else if (strcasecmp(CRM_SYSTEM_TENGINE, curr_client->sub_sys) == 0) {",
          "973:         the_subsystem = te_subsystem;",
          "975:     } else if (strcasecmp(CRM_SYSTEM_CIB, curr_client->sub_sys) == 0) {",
          "976:         the_subsystem = cib_subsystem;",
          "977:     }",
          "979:     if (the_subsystem != NULL) {",
          "980:         the_subsystem->source = NULL;",
          "981:         the_subsystem->client = NULL;",
          "982:         crm_info(\"Received HUP from %s:[%d]\", the_subsystem->name, the_subsystem->pid);",
          "984:     } else {",
          "986:         crm_trace(\"Received HUP from transient client\");",
          "987:     }",
          "989:     if (curr_client->table_key != NULL) {",
          "998:         g_hash_table_remove(ipc_clients, curr_client->table_key);",
          "999:     }",
          "1000: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fencing/commands.c||fencing/commands.c": [
          "File: fencing/commands.c -> fencing/commands.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <crm/crm.h>",
          "35: #include <crm/msg_xml.h>",
          "36: #include <crm/common/ipc.h>",
          "37: #include <crm/cluster/internal.h>",
          "38: #include <crm/common/mainloop.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1655: }",
          "1657: static int",
          "1659: {",
          "1660:     int call_options = 0;",
          "1661:     int rc = -EOPNOTSUPP;",
          "",
          "[Removed Lines]",
          "1658: handle_request(stonith_client_t *client, uint32_t id, uint32_t flags, xmlNode *request, const char *remote_peer)",
          "",
          "[Added Lines]",
          "1659: handle_request(crm_client_t *client, uint32_t id, uint32_t flags, xmlNode *request, const char *remote_peer)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1679:         CRM_ASSERT(client);",
          "1680:         crm_xml_add(reply, F_STONITH_OPERATION, CRM_OP_REGISTER);",
          "1681:         crm_xml_add(reply, F_STONITH_CLIENTID,  client->id);",
          "1683:         client->request_id = 0;",
          "1684:         free_xml(reply);",
          "1685:         return 0;",
          "",
          "[Removed Lines]",
          "1682:         crm_ipcs_send(client->channel, id, reply, FALSE);",
          "",
          "[Added Lines]",
          "1683:         crm_ipcs_send(client, id, reply, FALSE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1711:         if(flag_name) {",
          "1712:             crm_debug(\"Setting %s callbacks for %s (%s): ON\",",
          "1713:                       flag_name, client->name, client->id);",
          "1715:         }",
          "1717:         flag_name = crm_element_value(request, F_STONITH_NOTIFY_DEACTIVATE);",
          "1718:         if(flag_name) {",
          "1719:             crm_debug(\"Setting %s callbacks for %s (%s): off\",",
          "1720:                       flag_name, client->name, client->id);",
          "1722:         }",
          "1724:         if(flags & crm_ipc_client_response) {",
          "1726:             client->request_id = 0;",
          "1727:         }",
          "1728:         return 0;",
          "",
          "[Removed Lines]",
          "1714:             client->flags |= get_stonith_flag(flag_name);",
          "1721:             client->flags |= get_stonith_flag(flag_name);",
          "1725:             crm_ipcs_send_ack(client->channel, id, \"ack\", __FUNCTION__, __LINE__);",
          "",
          "[Added Lines]",
          "1715:             client->options |= get_stonith_flag(flag_name);",
          "1722:             client->options |= get_stonith_flag(flag_name);",
          "1726:             crm_ipcs_send_ack(client, id, \"ack\", __FUNCTION__, __LINE__);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1881: }",
          "1883: static void",
          "1885: {",
          "1886:     const char *op = crm_element_value(request, F_STONITH_OPERATION);",
          "",
          "[Removed Lines]",
          "1884: handle_reply(stonith_client_t *client, xmlNode *request, const char *remote_peer)",
          "",
          "[Added Lines]",
          "1885: handle_reply(crm_client_t *client, xmlNode *request, const char *remote_peer)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1899: }",
          "1901: void",
          "1903: {",
          "1904:     int call_options = 0;",
          "1905:     int rc = 0;",
          "",
          "[Removed Lines]",
          "1902: stonith_command(stonith_client_t *client, uint32_t id, uint32_t flags, xmlNode *request, const char *remote_peer)",
          "",
          "[Added Lines]",
          "1903: stonith_command(crm_client_t *client, uint32_t id, uint32_t flags, xmlNode *request, const char *remote_peer)",
          "",
          "---------------"
        ],
        "fencing/internal.h||fencing/internal.h": [
          "File: fencing/internal.h -> fencing/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     gboolean api_registered;",
          "44: } stonith_device_t;",
          "60: typedef struct remote_fencing_op_s {",
          "62:     char *id;",
          "",
          "[Removed Lines]",
          "46: typedef struct stonith_client_s {",
          "47:     char *id;",
          "48:     char *name;",
          "50:     int pid;",
          "51:     int request_id;",
          "53:     char *channel_name;",
          "54:     qb_ipcs_connection_t *channel;",
          "56:     long long flags;",
          "58: } stonith_client_t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131: extern long long get_stonith_flag(const char *name);",
          "135: extern int stonith_device_register(xmlNode * msg, const char **desc, gboolean from_cib);",
          "",
          "[Removed Lines]",
          "133: extern void stonith_command(stonith_client_t * client, uint32_t id, uint32_t flags, xmlNode * op_request, const char *remote_peer);",
          "",
          "[Added Lines]",
          "119: extern void stonith_command(crm_client_t * client, uint32_t id, uint32_t flags, xmlNode * op_request, const char *remote_peer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151: extern void do_stonith_notify(int options, const char *type, int result, xmlNode * data);",
          "154:                                                        gboolean manual_ack);",
          "156: extern int process_remote_stonith_exec(xmlNode * msg);",
          "",
          "[Removed Lines]",
          "153: extern remote_fencing_op_t *initiate_remote_stonith_op(stonith_client_t * client, xmlNode * request,",
          "",
          "[Added Lines]",
          "139: extern remote_fencing_op_t *initiate_remote_stonith_op(crm_client_t * client, xmlNode * request,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170: extern gboolean stand_alone;",
          "171: extern GHashTable *device_list;",
          "172: extern GHashTable *topology;",
          "",
          "[Removed Lines]",
          "173: extern GHashTable *client_list;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fencing/main.c||fencing/main.c": [
          "File: fencing/main.c -> fencing/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <crm/crm.h>",
          "33: #include <crm/msg_xml.h>",
          "34: #include <crm/common/ipc.h>",
          "35: #include <crm/cluster/internal.h>",
          "37: #include <crm/stonith-ng.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: char *stonith_our_uname = NULL;",
          "51: GMainLoop *mainloop = NULL;",
          "54: gboolean stand_alone = FALSE;",
          "55: gboolean no_cib_connect = FALSE;",
          "",
          "[Removed Lines]",
          "52: GHashTable *client_list = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: static int32_t",
          "64: st_ipc_accept(qb_ipcs_connection_t *c, uid_t uid, gid_t gid)",
          "65: {",
          "67:     if(stonith_shutdown_flag) {",
          "68:         crm_info(\"Ignoring new client [%d] during shutdown\", crm_ipcs_client_pid(c));",
          "69:         return -EPERM;",
          "70:     }",
          "71:     return 0;",
          "72: }",
          "74: static void",
          "75: st_ipc_created(qb_ipcs_connection_t *c)",
          "76: {",
          "103: }",
          "106: static int32_t",
          "108: {",
          "109:     uint32_t id = 0;",
          "110:     uint32_t flags = 0;",
          "111:     xmlNode *request = NULL;",
          "114:     request = crm_ipcs_recv(c, data, size, &id, &flags);",
          "115:     if (request == NULL) {",
          "",
          "[Removed Lines]",
          "66:     crm_trace(\"Connecting %p for uid=%d gid=%d\", c, uid, gid);",
          "77:     stonith_client_t *new_client = NULL;",
          "79: #if 0",
          "80:     struct qb_ipcs_stats srv_stats;",
          "82:     qb_ipcs_stats_get(s1, &srv_stats, QB_FALSE);",
          "83:     qb_log(LOG_INFO, \"Connection created (active:%d, closed:%d)\",",
          "84:            srv_stats.active_connections,",
          "85:            srv_stats.closed_connections);",
          "86: #endif",
          "88:     new_client = calloc(1, sizeof(stonith_client_t));",
          "89:     new_client->channel = c;",
          "90:     new_client->pid = crm_ipcs_client_pid(c);",
          "91:     new_client->channel_name = strdup(\"ipc\");",
          "93:     CRM_CHECK(new_client->id == NULL, free(new_client->id));",
          "94:     new_client->id = crm_generate_uuid();",
          "95:     crm_trace(\"Created channel %p for client %s\", c, new_client->id);",
          "100:     g_hash_table_insert(client_list, new_client->id, new_client);",
          "101:     qb_ipcs_context_set(c, new_client);",
          "102:     CRM_ASSERT(qb_ipcs_context_get(c) != NULL);",
          "107: st_ipc_dispatch(qb_ipcs_connection_t *c, void *data, size_t size)",
          "112:     stonith_client_t *client = (stonith_client_t*)qb_ipcs_context_get(c);",
          "",
          "[Added Lines]",
          "71:     if(crm_client_new(c, uid, gid) == NULL) {",
          "72:         return -EIO;",
          "73:     }",
          "80:     crm_trace(\"Connection created for %p\", c);",
          "85: st_ipc_dispatch(qb_ipcs_connection_t *qbc, void *data, size_t size)",
          "90:     crm_client_t *c = crm_client_get(qbc);",
          "92:     CRM_CHECK(c != NULL, goto cleanup);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:         return 0;",
          "118:     }",
          "123:         const char *value = crm_element_value(request, F_STONITH_CLIENTNAME);",
          "124:         if(value == NULL) {",
          "125:             value = \"unknown\";",
          "126:         }",
          "128:     }",
          "132:     if(flags & crm_ipc_client_response) {",
          "135:     }",
          "139:     crm_xml_add(request, F_STONITH_CLIENTNODE, stonith_our_uname);",
          "141:     crm_log_xml_trace(request, \"Client[inbound]\");",
          "144:   cleanup:",
          "146:         crm_log_xml_notice(request, \"Invalid client\");",
          "147:     }",
          "",
          "[Removed Lines]",
          "120:     CRM_CHECK(client != NULL, goto cleanup);",
          "122:     if(client->name == NULL) {",
          "127:         client->name = g_strdup_printf(\"%s.%u\", value, client->pid);",
          "130:     CRM_CHECK(client->id != NULL, crm_err(\"Invalid client: %p/%s\", client, client->name); goto cleanup);",
          "137:     crm_xml_add(request, F_STONITH_CLIENTID, client->id);",
          "138:     crm_xml_add(request, F_STONITH_CLIENTNAME, client->name);",
          "142:     stonith_command(client, id, flags, request, NULL);",
          "145:     if(client == NULL || client->id == NULL) {",
          "",
          "[Added Lines]",
          "100:     if(c->name == NULL) {",
          "105:         c->name = g_strdup_printf(\"%s.%u\", value, c->pid);",
          "113:     crm_xml_add(request, F_STONITH_CLIENTID, c->id);",
          "114:     crm_xml_add(request, F_STONITH_CLIENTNAME, crm_client_name(c));",
          "118:     stonith_command(c, id, flags, request, NULL);",
          "121:     if(c == NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154: static int32_t",
          "155: st_ipc_closed(qb_ipcs_connection_t *c)",
          "156: {",
          "187:     return 0;",
          "",
          "[Removed Lines]",
          "157:     stonith_client_t *client = (stonith_client_t*)qb_ipcs_context_get(c);",
          "159: #if 0",
          "160:     qb_ipcs_stats_get(s1, &srv_stats, QB_FALSE);",
          "161:     qb_ipcs_connection_stats_get(c, &stats, QB_FALSE);",
          "162:     qb_log(LOG_INFO, \"Connection to pid:%d destroyed (active:%d, closed:%d)\",",
          "163:            stats.client_pid,",
          "164:            srv_stats.active_connections,",
          "165:            srv_stats.closed_connections);",
          "167:     qb_log(LOG_DEBUG, \" Requests %\"PRIu64\"\", stats.requests);",
          "168:     qb_log(LOG_DEBUG, \" Responses %\"PRIu64\"\", stats.responses);",
          "169:     qb_log(LOG_DEBUG, \" Events %\"PRIu64\"\", stats.events);",
          "170:     qb_log(LOG_DEBUG, \" Send retries %\"PRIu64\"\", stats.send_retries);",
          "171:     qb_log(LOG_DEBUG, \" Recv retries %\"PRIu64\"\", stats.recv_retries);",
          "172:     qb_log(LOG_DEBUG, \" FC state %d\", stats.flow_control_state);",
          "173:     qb_log(LOG_DEBUG, \" FC count %\"PRIu64\"\", stats.flow_control_count);",
          "174: #endif",
          "176:     if (client == NULL) {",
          "177:         crm_err(\"No client\");",
          "178:         return 0;",
          "179:     }",
          "181:     crm_trace(\"Cleaning up after client disconnect: %p/%s/%s\", client, crm_str(client->name), client->id);",
          "182:     if(client->id != NULL) {",
          "183:         g_hash_table_remove(client_list, client->id);",
          "184:     }",
          "",
          "[Added Lines]",
          "133:     crm_client_t *client = crm_client_get(c);",
          "135:     crm_trace(\"Connection %p closed\", c);",
          "136:     crm_client_destroy(client);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "190: static void",
          "191: st_ipc_destroy(qb_ipcs_connection_t *c)",
          "192: {",
          "211: }",
          "213: static void",
          "",
          "[Removed Lines]",
          "193:     stonith_client_t *client = (stonith_client_t*)qb_ipcs_context_get(c);",
          "196:     st_ipc_closed(c);",
          "198:     if(client == NULL) {",
          "199:         crm_trace(\"Nothing to destroy\");",
          "200:         return;",
          "201:     }",
          "203:     crm_trace(\"Destroying %s (%p)\", client->name, client);",
          "205:     free(client->name);",
          "206:     free(client->id);",
          "207:     free(client);",
          "208:     crm_trace(\"Done\");",
          "210:     return;",
          "",
          "[Added Lines]",
          "145:     crm_trace(\"Connection %p destroyed\", c);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "281:              gboolean sync_reply, gboolean from_peer)",
          "282: {",
          "285:     int local_rc = pcmk_ok;",
          "287:     crm_trace(\"Sending response\");",
          "296:     crm_trace(\"Sending callback to request originator\");",
          "297:     if(client_obj == NULL) {",
          "298:         local_rc = -1;",
          "300:     } else {",
          "301:         int rid = 0;",
          "",
          "[Removed Lines]",
          "284:     stonith_client_t *client_obj = NULL;",
          "289:     if(client_id != NULL) {",
          "290:         client_obj = g_hash_table_lookup(client_list, client_id);",
          "291:     } else {",
          "292:         crm_trace(\"No client to sent the response to.\"",
          "293:                     \"  F_STONITH_CLIENTID not set.\");",
          "294:     }",
          "",
          "[Added Lines]",
          "219:     crm_client_t *client_obj = NULL;",
          "223:     client_obj = crm_client_get_by_id(client_id);",
          "228:         crm_trace(\"No client to sent the response to.  F_STONITH_CLIENTID not set.\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "314:                       client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
          "315:         }",
          "318:     }",
          "320:     if(local_rc < pcmk_ok && client_obj != NULL) {",
          "",
          "[Removed Lines]",
          "317:         local_rc = crm_ipcs_send(client_obj->channel, rid, notify_src, !sync_reply);",
          "",
          "[Added Lines]",
          "247:         local_rc = crm_ipcs_send(client_obj, rid, notify_src, !sync_reply);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "343: {",
          "345:     xmlNode *update_msg = user_data;",
          "347:     const char *type = NULL;",
          "349:     CRM_CHECK(client != NULL, return);",
          "",
          "[Removed Lines]",
          "346:     stonith_client_t *client = value;",
          "",
          "[Added Lines]",
          "276:     crm_client_t *client = value;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "352:     type = crm_element_value(update_msg, F_SUBTYPE);",
          "353:     CRM_CHECK(type != NULL, crm_log_xml_err(update_msg, \"notify\"); return);",
          "356:         crm_trace(\"Skipping client with NULL channel\");",
          "357:         return;",
          "362:     }",
          "366:         if(rc <= 0) {",
          "367:             crm_warn(\"%s notification of client %s.%.6s failed: %s (%d)\",",
          "369:         } else {",
          "371:         }",
          "372:     }",
          "373: }",
          "",
          "[Removed Lines]",
          "355:     if(client->channel == NULL) {",
          "359:     } else if(client->name == NULL) {",
          "360:         crm_trace(\"Skipping unnammed client / comamnd channel\");",
          "361:         return;",
          "364:     if(client->flags & get_stonith_flag(type)) {",
          "365:         int rc = crm_ipcs_send(client->channel, 0, update_msg, crm_ipc_server_event|crm_ipc_server_error);",
          "368:                      type, client->name, client->id, pcmk_strerror(rc), rc);",
          "370:             crm_trace(\"Sent %s notification to client %s.%.6s\", type, client->name, client->id);",
          "",
          "[Added Lines]",
          "285:     if(client->ipcs == NULL) {",
          "290:     if(client->options & get_stonith_flag(type)) {",
          "291:         int rc = crm_ipcs_send(client, 0, update_msg, crm_ipc_server_event|crm_ipc_server_error);",
          "294:                      type, crm_client_name(client), client->id, pcmk_strerror(rc), rc);",
          "296:             crm_trace(\"Sent %s notification to client %s.%.6s\", type, crm_client_name(client), client->id);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "375: void",
          "376: do_stonith_async_timeout_update(const char *client_id, const char *call_id, int timeout)",
          "377: {",
          "379:     xmlNode *notify_data = NULL;",
          "381:     if (!timeout || !call_id || !client_id) {",
          "382:         return;",
          "383:     }",
          "386:     if (!client) {",
          "387:         return;",
          "388:     }",
          "",
          "[Removed Lines]",
          "378:     stonith_client_t *client = NULL;",
          "385:     client = g_hash_table_lookup(client_list, client_id);",
          "",
          "[Added Lines]",
          "304:     crm_client_t *client = NULL;",
          "311:     client = crm_client_get_by_id(client_id);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "395:     crm_trace(\"timeout update is %d for client %s and call id %s\", timeout, client_id, call_id);",
          "399:     }",
          "401:     free_xml(notify_data);",
          "",
          "[Removed Lines]",
          "397:     if (client->channel) {",
          "398:         crm_ipcs_send(client->channel, 0, notify_data, crm_ipc_server_event);",
          "",
          "[Added Lines]",
          "323:     if (client) {",
          "324:         crm_ipcs_send(client, 0, notify_data, crm_ipc_server_event);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "419:     }",
          "421:     crm_trace(\"Notifying clients\");",
          "423:     free_xml(update_msg);",
          "424:     crm_trace(\"Notify complete\");",
          "425: }",
          "",
          "[Removed Lines]",
          "422:     g_hash_table_foreach(client_list, stonith_notify_client, update_msg);",
          "",
          "[Added Lines]",
          "348:     g_hash_table_foreach(client_connections, stonith_notify_client, update_msg);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "773: stonith_shutdown(int nsig)",
          "774: {",
          "775:     stonith_shutdown_flag = TRUE;",
          "777:     if(mainloop != NULL && g_main_is_running(mainloop)) {",
          "778:         g_main_quit(mainloop);",
          "779:     } else {",
          "",
          "[Removed Lines]",
          "776:     crm_info(\"Terminating with  %d clients\", g_hash_table_size(client_list));",
          "",
          "[Added Lines]",
          "702:     crm_info(\"Terminating with  %d clients\", crm_hash_table_size(client_connections));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "811:         qb_ipcs_destroy(ipcs);",
          "812:     }",
          "813:     crm_peer_destroy();",
          "815:     free(stonith_our_uname);",
          "816: }",
          "",
          "[Removed Lines]",
          "814:     g_hash_table_destroy(client_list);",
          "",
          "[Added Lines]",
          "740:     crm_client_cleanup();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1025:     mainloop_add_signal(SIGTERM, stonith_shutdown);",
          "1027:     crm_peer_init();",
          "1030:     if(stand_alone == FALSE) {",
          "1031: #if SUPPORT_HEARTBEAT",
          "",
          "[Removed Lines]",
          "1028:     client_list = g_hash_table_new(crm_str_hash, g_str_equal);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fencing/remote.c||fencing/remote.c": [
          "File: fencing/remote.c -> fencing/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <crm/crm.h>",
          "35: #include <crm/msg_xml.h>",
          "36: #include <crm/common/ipc.h>",
          "37: #include <crm/cluster/internal.h>",
          "39: #include <crm/stonith-ng.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524:     return op;",
          "525: }",
          "528: {",
          "529:     xmlNode *query = NULL;",
          "530:     const char *client_id = NULL;",
          "",
          "[Removed Lines]",
          "527: remote_fencing_op_t *initiate_remote_stonith_op(stonith_client_t *client, xmlNode *request, gboolean manual_ack)",
          "",
          "[Added Lines]",
          "528: remote_fencing_op_t *initiate_remote_stonith_op(crm_client_t *client, xmlNode *request, gboolean manual_ack)",
          "",
          "---------------"
        ],
        "include/crm/common/Makefile.am||include/crm/common/Makefile.am": [
          "File: include/crm/common/Makefile.am -> include/crm/common/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: headerdir=$(pkgincludedir)/crm/common",
          "23: header_HEADERS = xml.h ipc.h util.h iso8601.h mainloop.h logging.h",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: noinst_HEADERS = ipcs.h",
          "",
          "---------------"
        ],
        "include/crm/common/ipc.h||include/crm/common/ipc.h": [
          "File: include/crm/common/ipc.h -> include/crm/common/ipc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: enum crm_ipc_flags",
          "55: {",
          "56:     crm_ipc_client_none     = 0x0000,",
          "58: };",
          "65: #include <qb/qbipcc.h>",
          "66: typedef struct crm_ipc_s crm_ipc_t;",
          "",
          "[Removed Lines]",
          "43: #include <qb/qbipcs.h>",
          "45: enum crm_ipc_server_flags",
          "46: {",
          "47:     crm_ipc_server_none  = 0x0000,",
          "52: };",
          "60: void crm_ipcs_send_ack(qb_ipcs_connection_t *c, uint32_t request, const char *tag, const char *function, int line);",
          "61: ssize_t crm_ipcs_send(qb_ipcs_connection_t *c, uint32_t request, xmlNode *message, enum crm_ipc_server_flags flags);",
          "62: xmlNode *crm_ipcs_recv(qb_ipcs_connection_t *c, void *data, size_t size, uint32_t *id, uint32_t *flags);",
          "63: int crm_ipcs_client_pid(qb_ipcs_connection_t *c);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/crm/common/ipcs.h||include/crm/common/ipcs.h": [
          "File: include/crm/common/ipcs.h -> include/crm/common/ipcs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #ifndef CRM_COMMON_IPCS__H",
          "19: #  define CRM_COMMON_IPCS__H",
          "21: #include <qb/qbipcs.h>",
          "22: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "23: #  undef KEYFILE",
          "24: #  include <gnutls/gnutls.h>",
          "25: #endif",
          "27: typedef struct mainloop_io_s mainloop_io_t;",
          "29: enum client_type",
          "30: {",
          "31:         client_type_ipc = 1,",
          "32:         client_type_tcp = 2,",
          "33:         client_type_tls = 3,",
          "34: };",
          "36: struct crm_client_s",
          "37: {",
          "38:         uint pid;",
          "40:         uid_t uid;",
          "41:         gid_t gid;",
          "43:         char *id;",
          "44:         char *name;",
          "45:         char *user;",
          "47:         long long options;",
          "49:         int request_id;",
          "50:         GList *pending;",
          "51:         void *userdata;",
          "56:         enum client_type kind;",
          "59:         char *callback_id;",
          "62:         qb_ipcs_connection_t *ipcs;",
          "65:         char *recv_buf;",
          "66:         int remote_auth_timeout;",
          "67:         mainloop_io_t *remote;",
          "70: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "71:         gnutls_session *session;",
          "72:         gboolean tls_handshake_complete;",
          "73: #else",
          "74:         void *session;",
          "75: #endif",
          "76: };",
          "78: enum crm_ipc_server_flags",
          "79: {",
          "80:     crm_ipc_server_none  = 0x0000,",
          "85: };",
          "87: extern GHashTable *client_connections;",
          "89: typedef struct crm_client_s crm_client_t;",
          "91: void crm_client_init(void);",
          "92: void crm_client_cleanup(void);",
          "94: crm_client_t *crm_client_get(qb_ipcs_connection_t *c);",
          "95: crm_client_t *crm_client_get_by_id(const char *id);",
          "96: const char *crm_client_name(crm_client_t *c);",
          "98: crm_client_t *crm_client_new(qb_ipcs_connection_t *c, uid_t uid, gid_t gid);",
          "99: void crm_client_destroy(crm_client_t *c);",
          "101: void crm_ipcs_send_ack(crm_client_t *c, uint32_t request, const char *tag, const char *function, int line);",
          "102: ssize_t crm_ipcs_send(crm_client_t *c, uint32_t request, xmlNode *message, enum crm_ipc_server_flags flags);",
          "103: xmlNode *crm_ipcs_recv(crm_client_t *c, void *data, size_t size, uint32_t *id, uint32_t *flags);",
          "105: int crm_ipcs_client_pid(qb_ipcs_connection_t *c);",
          "107: #endif",
          "",
          "---------------"
        ],
        "include/crm/common/mainloop.h||include/crm/common/mainloop.h": [
          "File: include/crm/common/mainloop.h -> include/crm/common/mainloop.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: gboolean mainloop_destroy_signal(int sig);",
          "46: #include <crm/common/ipc.h>",
          "48: struct ipc_client_callbacks",
          "49: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #include <crm/common/ipcs.h>",
          "",
          "---------------"
        ],
        "lib/common/ipc.c||lib/common/ipc.c": [
          "File: lib/common/ipc.c -> lib/common/ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <crm/crm.h>",
          "32: #include <crm/msg_xml.h>",
          "33: #include <crm/common/ipc.h>",
          "35: struct crm_ipc_request_header",
          "36: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169: int",
          "170: crm_ipcs_client_pid(qb_ipcs_connection_t *c)",
          "171: {",
          "176: }",
          "178: xmlNode *",
          "180: {",
          "181:     char *text = ((char*)data) + sizeof(struct crm_ipc_request_header);",
          "182:     crm_trace(\"Received %.200s\", text);",
          "",
          "[Removed Lines]",
          "172:     struct qb_ipcs_connection_stats stats;",
          "173:     stats.client_pid = 0;",
          "174:     qb_ipcs_connection_stats_get(c, &stats, 0);",
          "175:     return stats.client_pid;",
          "179: crm_ipcs_recv(qb_ipcs_connection_t *c, void *data, size_t size, uint32_t *id, uint32_t *flags)",
          "",
          "[Added Lines]",
          "170: GHashTable *client_connections = NULL;",
          "172: crm_client_t *",
          "173: crm_client_get(qb_ipcs_connection_t *c)",
          "174: {",
          "175:     if(client_connections) {",
          "176:         return g_hash_table_lookup(client_connections, c);",
          "177:     }",
          "179:     crm_trace(\"No client found for %p\", c);",
          "180:     return NULL;",
          "181: }",
          "183: crm_client_t *",
          "184: crm_client_get_by_id(const char *id)",
          "185: {",
          "186:     gpointer key;",
          "187:     crm_client_t *client;",
          "188:     GHashTableIter iter;",
          "190:     if(client_connections) {",
          "191:         g_hash_table_iter_init(&iter, client_connections);",
          "192:         while (g_hash_table_iter_next(&iter, &key, (gpointer *) & client)) {",
          "193:             if(strcmp(client->id, id) == 0) {",
          "194:                 return client;",
          "195:             }",
          "196:         }",
          "197:     }",
          "199:     crm_trace(\"No client found with id=%s\", id);",
          "200:     return NULL;",
          "201: }",
          "203: const char *",
          "204: crm_client_name(crm_client_t *c)",
          "205: {",
          "206:     if(c == NULL){",
          "207:         return \"null\";",
          "208:     } else if(c->name == NULL && c->id == NULL) {",
          "209:         return \"unknown\";",
          "210:     } else if(c->name == NULL) {",
          "211:         return c->id;",
          "212:     } else {",
          "213:         return c->name;",
          "214:     }",
          "215: }",
          "217: void",
          "218: crm_client_init(void)",
          "219: {",
          "220:     if(client_connections == NULL) {",
          "221:         crm_trace(\"Creating client hash table\");",
          "222:         client_connections = g_hash_table_new(g_direct_hash, g_direct_equal);",
          "223:     }",
          "224: }",
          "226: void",
          "227: crm_client_cleanup(void)",
          "228: {",
          "229:     if(client_connections == NULL) {",
          "230:         int active = g_hash_table_size(client_connections);",
          "231:         if(active) {",
          "232:             crm_err(\"Exiting with %d active connections\", active);",
          "233:         }",
          "234:         g_hash_table_destroy(client_connections);",
          "235:     }",
          "236: }",
          "238: crm_client_t *",
          "239: crm_client_new(qb_ipcs_connection_t *c, uid_t uid, gid_t gid)",
          "240: {",
          "241:     crm_client_t *client = NULL;",
          "243:     CRM_LOG_ASSERT(c);",
          "244:     if(c == NULL) {",
          "245:         return NULL;",
          "246:     }",
          "248:     crm_client_init();",
          "250:     client = calloc(1, sizeof(crm_client_t));",
          "252:     client->ipcs = c;",
          "253:     client->kind = client_type_ipc;",
          "254:     client->pid = crm_ipcs_client_pid(c);",
          "256:     client->id = crm_generate_uuid();",
          "258:     crm_info(\"Connecting %p for uid=%d gid=%d pid=%u id=%s\",",
          "259:               c, uid, gid, client->pid, client->id);",
          "261: #if ENABLE_ACL",
          "262:     {",
          "263:         struct group *crm_grp = NULL;",
          "264:         crm_grp = getgrnam(CRM_DAEMON_GROUP);",
          "265:         if (crm_grp) {",
          "266:             qb_ipcs_connection_auth_set(c, -1, crm_grp->gr_gid, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);",
          "267:         }",
          "268:         client->user = uid2username(uid);",
          "269:     }",
          "270: #endif",
          "272:     g_hash_table_insert(client_connections, c, client);",
          "273:     return client;",
          "274: }",
          "276: void",
          "277: crm_client_destroy(crm_client_t *c)",
          "278: {",
          "279:     if(c == NULL) {",
          "280:         return;",
          "281:     }",
          "283:     if(client_connections) {",
          "284:         if(c->ipcs) {",
          "285:             crm_trace(\"Destroying %p (%d remaining)\",",
          "286:                       c->ipcs, crm_hash_table_size(client_connections));",
          "287:             g_hash_table_remove(client_connections, c->ipcs);",
          "288:         } else {",
          "289:             crm_trace(\"Destroying remote connection %p (%d remaining)\",",
          "290:                       c, crm_hash_table_size(client_connections));",
          "291:             g_hash_table_remove(client_connections, c->id);",
          "292:         }",
          "293:     }",
          "295:     free(c->id);",
          "296:     free(c->name);",
          "297:     free(c->user);",
          "298:     free(c->callback_id);",
          "299:     free(c);",
          "300: }",
          "305:      struct qb_ipcs_connection_stats stats;",
          "306:      stats.client_pid = 0;",
          "307:      qb_ipcs_connection_stats_get(c, &stats, 0);",
          "308:      return stats.client_pid;",
          "312: crm_ipcs_recv(crm_client_t *c, void *data, size_t size, uint32_t *id, uint32_t *flags)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190: }",
          "192: ssize_t",
          "194: {",
          "195:     int rc;",
          "196:     int lpc = 0;",
          "",
          "[Removed Lines]",
          "193: crm_ipcs_send(qb_ipcs_connection_t *c, uint32_t request, xmlNode *message, enum crm_ipc_server_flags flags)",
          "",
          "[Added Lines]",
          "326: crm_ipcs_send(crm_client_t *c, uint32_t request, xmlNode *message, enum crm_ipc_server_flags flags)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "231:     while(lpc < retries) {",
          "232:         if(flags & crm_ipc_server_event) {",
          "233:             type = \"Event\";",
          "236:         } else {",
          "238:         }",
          "240:         if(rc == -EPIPE || rc == -ENOTCONN) {",
          "242:             level = LOG_INFO;",
          "243:         }",
          "",
          "[Removed Lines]",
          "234:             rc = qb_ipcs_event_sendv(c, iov, 2);",
          "237:             rc = qb_ipcs_response_sendv(c, iov, 2);",
          "241:             crm_trace(\"Client %p disconnected\", c);",
          "",
          "[Added Lines]",
          "367:             rc = qb_ipcs_event_sendv(c->ipcs, iov, 2);",
          "370:             rc = qb_ipcs_response_sendv(c->ipcs, iov, 2);",
          "374:             crm_trace(\"Client %p disconnected\", c->ipcs);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "249:         lpc++;",
          "250:         crm_debug(\"Attempting resend %d of %s %d (%d bytes) to %p[%d]: %.120s\",",
          "252:         nanosleep(&delay, NULL);",
          "253:     }",
          "255:     if(rc < header.size) {",
          "257:         do_crm_log(level,",
          "258:                    \"%s %d failed, size=%d, to=%p[%d], queue=%d, retries=%d, rc=%d: %.120s\",",
          "260:         free(stats);",
          "262:     } else {",
          "263:         crm_trace(\"%s %d sent, %d bytes to %p[%d]: %.120s\", type, header.id, rc,",
          "265:     }",
          "266:     free(buffer);",
          "267:     return rc;",
          "",
          "[Removed Lines]",
          "251:                   lpc, type, header.id, header.size, c, crm_ipcs_client_pid(c), buffer);",
          "256:         struct qb_ipcs_connection_stats_2 *stats = qb_ipcs_connection_stats_get_2(c, 0);",
          "259:                    type, header.id, header.size, c, stats->client_pid, stats->event_q_length, lpc, rc, buffer);",
          "264:                   c, crm_ipcs_client_pid(c), buffer);",
          "",
          "[Added Lines]",
          "384:                   lpc, type, header.id, header.size, c->ipcs, c->pid, buffer);",
          "389:         struct qb_ipcs_connection_stats_2 *stats = qb_ipcs_connection_stats_get_2(c->ipcs, 0);",
          "392:                    type, header.id, header.size, c->ipcs, c->pid, stats->event_q_length, lpc, rc, buffer);",
          "397:                   c->ipcs, c->pid, buffer);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "270: void",
          "271: crm_ipcs_send_ack(",
          "273: {",
          "274:     xmlNode *ack = create_xml_node(NULL, tag);",
          "275:     crm_xml_add(ack, \"function\", function);",
          "276:     crm_xml_add_int(ack, \"line\", line);",
          "278:     free_xml(ack);",
          "279: }",
          "",
          "[Removed Lines]",
          "272:     qb_ipcs_connection_t *c, uint32_t request, const char *tag, const char *function, int line)",
          "277:     crm_ipcs_send(c, request, ack, FALSE);",
          "",
          "[Added Lines]",
          "405:     crm_client_t *c, uint32_t request, const char *tag, const char *function, int line)",
          "410:     crm_ipcs_send(c, request, ack, 0);",
          "",
          "---------------"
        ],
        "lib/common/mainloop.c||lib/common/mainloop.c": [
          "File: lib/common/mainloop.c -> lib/common/mainloop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "500:         gio_map = qb_array_create_2(64, sizeof(struct gio_to_qb_poll), 1);",
          "501:     }",
          "503:     server = qb_ipcs_create(name, 0, pick_ipc_type(type), callbacks);",
          "504:     qb_ipcs_poll_handlers_set(server, &gio_poll_funcs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:     crm_client_init();",
          "",
          "---------------"
        ],
        "lrmd/Makefile.am||lrmd/Makefile.am": [
          "File: lrmd/Makefile.am -> lrmd/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:    $(top_builddir)/lib/services/libcrmservice.la \\",
          "39:    $(top_builddir)/lib/pengine/libpe_status.la \\",
          "40:    $(top_builddir)/pengine/libpengine.la",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: noinst_HEADERS  = lrmd_private.h",
          "",
          "---------------"
        ],
        "lrmd/lrmd.c||lrmd/lrmd.c": [
          "File: lrmd/lrmd.c -> lrmd/lrmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <crm/services.h>",
          "27: #include <crm/common/mainloop.h>",
          "28: #include <crm/common/ipc.h>",
          "29: #include <crm/msg_xml.h>",
          "31: #include <lrmd_private.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: #endif",
          "37: GHashTable *rsc_list = NULL;",
          "40: typedef struct lrmd_cmd_s {",
          "41:     int timeout;",
          "",
          "[Removed Lines]",
          "38: GHashTable *client_list = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148: }",
          "150: static lrmd_cmd_t *",
          "152: {",
          "153:     int call_options = 0;",
          "154:     xmlNode *rsc_xml = get_xpath_object(\"//\" F_LRMD_RSC, msg, LOG_ERR);",
          "",
          "[Removed Lines]",
          "151: create_lrmd_cmd(xmlNode * msg, lrmd_client_t * client)",
          "",
          "[Added Lines]",
          "151: create_lrmd_cmd(xmlNode * msg, crm_client_t * client)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "259: }",
          "261: static void",
          "263: {",
          "264:     int send_rc = 0;",
          "265:     xmlNode *reply = NULL;",
          "",
          "[Removed Lines]",
          "262: send_reply(lrmd_client_t * client, int rc, uint32_t id, int call_id)",
          "",
          "[Added Lines]",
          "262: send_reply(crm_client_t * client, int rc, uint32_t id, int call_id)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "269:     crm_xml_add_int(reply, F_LRMD_RC, rc);",
          "270:     crm_xml_add_int(reply, F_LRMD_CALLID, call_id);",
          "274:     free_xml(reply);",
          "275:     if (send_rc < 0) {",
          "",
          "[Removed Lines]",
          "272:     send_rc = crm_ipcs_send(client->channel, id, reply, FALSE);",
          "",
          "[Added Lines]",
          "272:     send_rc = crm_ipcs_send(client, id, reply, FALSE);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "281: send_client_notify(gpointer key, gpointer value, gpointer user_data)",
          "282: {",
          "283:     xmlNode *update_msg = user_data;",
          "286:     if (client == NULL) {",
          "287:         crm_err(\"Asked to send event to  NULL client\");",
          "288:         return;",
          "290:         crm_trace(\"Asked to send event to disconnected client\");",
          "291:         return;",
          "292:     } else if (client->name == NULL) {",
          "",
          "[Removed Lines]",
          "284:     lrmd_client_t *client = value;",
          "289:     } else if (client->channel == NULL) {",
          "",
          "[Added Lines]",
          "284:     crm_client_t *client = value;",
          "289:     } else if (client->ipcs == NULL) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "294:         return;",
          "295:     }",
          "298:         crm_warn(\"Notification of client %s/%s failed\", client->name, client->id);",
          "299:     }",
          "300: }",
          "",
          "[Removed Lines]",
          "297:     if (crm_ipcs_send(client->channel, 0, update_msg, TRUE) <= 0) {",
          "",
          "[Added Lines]",
          "297:     if (crm_ipcs_send(client, 0, update_msg, TRUE) <= 0) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "385:     }",
          "387:     if (cmd->client_id && (cmd->call_opts & lrmd_opt_notify_orig_only)) {",
          "390:         if (client) {",
          "391:             send_client_notify(client->id, client, notify);",
          "392:         }",
          "393:     } else {",
          "395:     }",
          "397:     free_xml(notify);",
          "",
          "[Removed Lines]",
          "388:         lrmd_client_t *client = g_hash_table_lookup(client_list, cmd->client_id);",
          "394:         g_hash_table_foreach(client_list, send_client_notify, notify);",
          "",
          "[Added Lines]",
          "388:         crm_client_t *client = crm_client_get_by_id(cmd->client_id);",
          "394:         g_hash_table_foreach(client_connections, send_client_notify, notify);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "415:     crm_xml_add(notify, F_LRMD_OPERATION, op);",
          "416:     crm_xml_add(notify, F_LRMD_RSC_ID, rsc_id);",
          "420:     free_xml(notify);",
          "421: }",
          "",
          "[Removed Lines]",
          "418:     g_hash_table_foreach(client_list, send_client_notify, notify);",
          "",
          "[Added Lines]",
          "418:     g_hash_table_foreach(client_connections, send_client_notify, notify);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "919: }",
          "921: static int",
          "923: {",
          "924:     xmlNode *reply = create_xml_node(NULL, \"reply\");",
          "926:     crm_xml_add(reply, F_LRMD_OPERATION, CRM_OP_REGISTER);",
          "927:     crm_xml_add(reply, F_LRMD_CLIENTID, client->id);",
          "930:     free_xml(reply);",
          "931:     return pcmk_ok;",
          "932: }",
          "934: static int",
          "936: {",
          "937:     int rc = pcmk_ok;",
          "938:     lrmd_rsc_t *rsc = build_rsc_from_xml(request);",
          "",
          "[Removed Lines]",
          "922: process_lrmd_signon(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "928:     crm_ipcs_send(client->channel, id, reply, FALSE);",
          "935: process_lrmd_rsc_register(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "[Added Lines]",
          "922: process_lrmd_signon(crm_client_t * client, uint32_t id, xmlNode * request)",
          "928:     crm_ipcs_send(client, id, reply, FALSE);",
          "935: process_lrmd_rsc_register(crm_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "957: }",
          "959: static void",
          "961: {",
          "962:     int rc = pcmk_ok;",
          "963:     int send_rc = 0;",
          "",
          "[Removed Lines]",
          "960: process_lrmd_get_rsc_info(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "[Added Lines]",
          "960: process_lrmd_get_rsc_info(crm_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "995:         crm_xml_add(reply, F_LRMD_TYPE, rsc->type);",
          "996:     }",
          "1000:     if (send_rc < 0) {",
          "1001:         crm_warn(\"LRMD reply to %s failed: %d\", client->name, send_rc);",
          "",
          "[Removed Lines]",
          "998:     send_rc = crm_ipcs_send(client->channel, id, reply, FALSE);",
          "",
          "[Added Lines]",
          "998:     send_rc = crm_ipcs_send(client, id, reply, FALSE);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1005: }",
          "1007: static int",
          "1009: {",
          "1010:     int rc = pcmk_ok;",
          "1011:     lrmd_rsc_t *rsc = NULL;",
          "",
          "[Removed Lines]",
          "1008: process_lrmd_rsc_unregister(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "[Added Lines]",
          "1008: process_lrmd_rsc_unregister(crm_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1034: }",
          "1036: static int",
          "1038: {",
          "1039:     lrmd_rsc_t *rsc = NULL;",
          "1040:     lrmd_cmd_t *cmd = NULL;",
          "",
          "[Removed Lines]",
          "1037: process_lrmd_rsc_exec(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "[Added Lines]",
          "1037: process_lrmd_rsc_exec(crm_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1151: }",
          "1153: static int",
          "1155: {",
          "1156:     xmlNode *rsc_xml = get_xpath_object(\"//\" F_LRMD_RSC, request, LOG_ERR);",
          "1157:     const char *rsc_id = crm_element_value(rsc_xml, F_LRMD_RSC_ID);",
          "",
          "[Removed Lines]",
          "1154: process_lrmd_rsc_cancel(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "[Added Lines]",
          "1154: process_lrmd_rsc_cancel(crm_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1168: }",
          "1170: void",
          "1172: {",
          "1173:     int rc = pcmk_ok;",
          "1174:     int call_id = 0;",
          "",
          "[Removed Lines]",
          "1171: process_lrmd_message(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "[Added Lines]",
          "1171: process_lrmd_message(crm_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "---------------"
        ],
        "lrmd/lrmd_private.h||lrmd/lrmd_private.h": [
          "File: lrmd/lrmd_private.h -> lrmd/lrmd_private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #  include <crm/stonith-ng.h>",
          "28: GHashTable *rsc_list;",
          "31: typedef struct lrmd_rsc_s {",
          "32:     char *rsc_id;",
          "",
          "[Removed Lines]",
          "29: GHashTable *client_list;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     crm_trigger_t *work;",
          "54: } lrmd_rsc_t;",
          "68: void free_rsc(gpointer data);",
          "",
          "[Removed Lines]",
          "56: typedef struct lrmd_client_s {",
          "57:     char *id;",
          "58:     char *name;",
          "60:     qb_ipcs_connection_t *channel;",
          "62:     long long flags;",
          "64: } lrmd_client_t;",
          "66: void process_lrmd_message(lrmd_client_t * client, uint32_t id, xmlNode * request);",
          "",
          "[Added Lines]",
          "55: void process_lrmd_message(crm_client_t * client, uint32_t id, xmlNode * request);",
          "",
          "---------------"
        ],
        "lrmd/main.c||lrmd/main.c": [
          "File: lrmd/main.c -> lrmd/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <crm/services.h>",
          "28: #include <crm/common/mainloop.h>",
          "29: #include <crm/common/ipc.h>",
          "31: #include <lrmd_private.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: static int32_t",
          "82: lrmd_ipc_accept(qb_ipcs_connection_t * c, uid_t uid, gid_t gid)",
          "83: {",
          "89:     return 0;",
          "90: }",
          "92: static void",
          "93: lrmd_ipc_created(qb_ipcs_connection_t * c)",
          "94: {",
          "105: }",
          "107: static int32_t",
          "",
          "[Removed Lines]",
          "84:     struct qb_ipcs_connection_stats stats = { 0, };",
          "86:     qb_ipcs_connection_stats_get(c, &stats, 1);",
          "87:     crm_info(\"Accepting client connection: %p pid=%d for uid=%d gid=%d\",",
          "88:              c, stats.client_pid, uid, gid);",
          "95:     lrmd_client_t *new_client = NULL;",
          "97:     new_client = calloc(1, sizeof(lrmd_client_t));",
          "98:     new_client->channel = c;",
          "100:     new_client->id = crm_generate_uuid();",
          "101:     crm_trace(\"LRMD client connection established. %p id: %s\", c, new_client->id);",
          "103:     g_hash_table_insert(client_list, new_client->id, new_client);",
          "104:     qb_ipcs_context_set(c, new_client);",
          "",
          "[Added Lines]",
          "85:     crm_trace(\"Connection %p\", c);",
          "86:     if(crm_client_new(c, uid, gid) == NULL) {",
          "87:         return -EIO;",
          "88:     }",
          "95:     crm_trace(\"Connection %p\", c);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109: {",
          "110:     uint32_t id = 0;",
          "111:     uint32_t flags = 0;",
          "115:     CRM_CHECK(client != NULL, crm_err(\"Invalid client\");",
          "116:               return FALSE);",
          "",
          "[Removed Lines]",
          "112:     xmlNode *request = crm_ipcs_recv(c, data, size, &id, &flags);",
          "113:     lrmd_client_t *client = (lrmd_client_t *) qb_ipcs_context_get(c);",
          "",
          "[Added Lines]",
          "103:     crm_client_t *client = crm_client_get(c);",
          "104:     xmlNode *request = crm_ipcs_recv(client, data, size, &id, &flags);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152: static int32_t",
          "153: lrmd_ipc_closed(qb_ipcs_connection_t * c)",
          "154: {",
          "171:     return 0;",
          "172: }",
          "174: static void",
          "175: lrmd_ipc_destroy(qb_ipcs_connection_t * c)",
          "176: {",
          "192: }",
          "194: static struct qb_ipcs_service_handlers lrmd_ipc_callbacks = {",
          "",
          "[Removed Lines]",
          "155:     lrmd_client_t *client = (lrmd_client_t *) qb_ipcs_context_get(c);",
          "156:     int found = 0;",
          "158:     if (!client) {",
          "159:         crm_err(\"No client for ipc\");",
          "160:         return 0;",
          "161:     }",
          "163:     if (client->id) {",
          "164:         found = g_hash_table_remove(client_list, client->id);",
          "165:     }",
          "167:     if (!found) {",
          "168:         crm_err(\"Asked to remove unknown client with id %d\", client->id);",
          "169:     }",
          "177:     lrmd_client_t *client = (lrmd_client_t *) qb_ipcs_context_get(c);",
          "179:     if (!client) {",
          "180:         crm_err(\"No client for ipc\");",
          "181:         return;",
          "182:     }",
          "184:     crm_info(\"LRMD client disconnecting %p - name: %s id: %s\", c, client->name, client->id);",
          "186:     client_disconnect_cleanup(client->id);",
          "188:     qb_ipcs_context_set(c, NULL);",
          "189:     free(client->name);",
          "190:     free(client->id);",
          "191:     free(client);",
          "",
          "[Added Lines]",
          "146:     crm_client_t *client = crm_client_get(c);",
          "147:     crm_trace(\"Connection %p\", c);",
          "148:     client_disconnect_cleanup(client->id);",
          "149:     crm_client_destroy(client);",
          "156:     crm_trace(\"Connection %p\", c);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "202: void",
          "203: lrmd_shutdown(int nsig)",
          "204: {",
          "206:     if (ipcs) {",
          "207:         mainloop_del_ipc_server(ipcs);",
          "208:     }",
          "",
          "[Removed Lines]",
          "205:     crm_info(\"Terminating with  %d clients\", g_hash_table_size(client_list));",
          "",
          "[Added Lines]",
          "170:     crm_info(\"Terminating with  %d clients\", crm_hash_table_size(client_connections));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "255:     }",
          "257:     rsc_list = g_hash_table_new_full(crm_str_hash, g_str_equal, NULL, free_rsc);",
          "259:     ipcs = mainloop_add_ipc_server(CRM_SYSTEM_LRMD, QB_IPC_SHM, &lrmd_ipc_callbacks);",
          "260:     if (ipcs == NULL) {",
          "261:         crm_err(\"Failed to create IPC server: shutting down and inhibiting respawn\");",
          "",
          "[Removed Lines]",
          "258:     client_list = g_hash_table_new(crm_str_hash, g_str_equal);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "268:     g_main_run(mainloop);",
          "270:     mainloop_del_ipc_server(ipcs);",
          "272:     g_hash_table_destroy(rsc_list);",
          "274:     if (stonith_api) {",
          "",
          "[Removed Lines]",
          "271:     g_hash_table_destroy(client_list);",
          "",
          "[Added Lines]",
          "235:     crm_client_cleanup();",
          "",
          "---------------"
        ],
        "mcp/pacemaker.c||mcp/pacemaker.c": [
          "File: mcp/pacemaker.c -> mcp/pacemaker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <ctype.h>",
          "35: gboolean fatal_error = FALSE;",
          "36: GMainLoop *mainloop = NULL;",
          "38: GHashTable *peers = NULL;",
          "40: #define PCMK_PROCESS_CHECK_INTERVAL 5",
          "",
          "[Removed Lines]",
          "37: GHashTable *client_list = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "443: static int32_t",
          "444: pcmk_ipc_accept(qb_ipcs_connection_t *c, uid_t uid, gid_t gid)",
          "445: {",
          "447:     return 0;",
          "448: }",
          "450: static void",
          "451: pcmk_ipc_created(qb_ipcs_connection_t *c)",
          "452: {",
          "456: }",
          "459: static int32_t",
          "461: {",
          "462:     uint32_t id = 0;",
          "463:     uint32_t flags = 0;",
          "464:     const char *task = NULL;",
          "465:     xmlNode *msg = crm_ipcs_recv(c, data, size, &id, &flags);",
          "468:     if(flags & crm_ipc_client_response) {",
          "469:         crm_ipcs_send_ack(c, id, \"ack\", __FUNCTION__, __LINE__);",
          "470:     }",
          "",
          "[Removed Lines]",
          "446:     crm_trace(\"Connecting %p for uid=%d gid=%d\", c, uid, gid);",
          "453:     g_hash_table_insert(client_list, c, c);",
          "454:     crm_debug(\"Channel %p connected: %d children\", c, g_hash_table_size(client_list));",
          "460: pcmk_ipc_dispatch(qb_ipcs_connection_t *c, void *data, size_t size)",
          "467:     crm_trace(\"Message from %p\", c);",
          "",
          "[Added Lines]",
          "445:     crm_trace(\"Connection %p\", c);",
          "446:     if(crm_client_new(c, uid, gid) == NULL) {",
          "447:         return -EIO;",
          "448:     }",
          "455:     crm_trace(\"Connection %p\", c);",
          "460: pcmk_ipc_dispatch(qb_ipcs_connection_t *qbc, void *data, size_t size)",
          "465:     crm_client_t *c = crm_client_get(qbc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494: static int32_t",
          "495: pcmk_ipc_closed(qb_ipcs_connection_t *c)",
          "496: {",
          "498:     return 0;",
          "499: }",
          "501: static void",
          "502: pcmk_ipc_destroy(qb_ipcs_connection_t *c)",
          "503: {",
          "506: }",
          "508: struct qb_ipcs_service_handlers ipc_callbacks =",
          "",
          "[Removed Lines]",
          "497:     crm_trace(\"%p closed\", c);",
          "504:     crm_trace(\"%p destroy\", c);",
          "505:     g_hash_table_remove(client_list, c);",
          "",
          "[Added Lines]",
          "497:     crm_client_t *client = crm_client_get(c);",
          "498:     crm_trace(\"Connection %p\", c);",
          "499:     crm_client_destroy(client);",
          "506:     crm_trace(\"Connection %p\", c);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "515: };",
          "519: ghash_send_proc_details(gpointer key, gpointer value, gpointer data)",
          "520: {",
          "526: }",
          "528: static void",
          "",
          "[Removed Lines]",
          "518: static gboolean",
          "521:     if (crm_ipcs_send(key, 0, data, TRUE) <= 0) {",
          "523:         return TRUE;",
          "524:     }",
          "525:     return FALSE;",
          "",
          "[Added Lines]",
          "519: static void",
          "522:     crm_ipcs_send(value, 0, data, TRUE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "543: {",
          "544:     xmlNode *update = create_xml_node(NULL, \"nodes\");",
          "548:     g_hash_table_foreach(peers, peer_loop_fn, update);",
          "551:     free_xml(update);",
          "552: }",
          "",
          "[Removed Lines]",
          "546:     crm_trace(\"Sending process list to %d children\", g_hash_table_size(client_list));",
          "549:     g_hash_table_foreach_remove(client_list, ghash_send_proc_details, update);",
          "",
          "[Added Lines]",
          "543:     crm_trace(\"Sending process list to %d children\", crm_hash_table_size(client_connections));",
          "546:     g_hash_table_foreach(client_connections, ghash_send_proc_details, update);",
          "",
          "---------------"
        ],
        "pengine/main.c||pengine/main.c": [
          "File: pengine/main.c -> pengine/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: static int32_t",
          "47: pe_ipc_accept(qb_ipcs_connection_t *c, uid_t uid, gid_t gid)",
          "48: {",
          "50:     return 0;",
          "51: }",
          "53: static void",
          "54: pe_ipc_created(qb_ipcs_connection_t *c)",
          "55: {",
          "56: }",
          "60: static int32_t",
          "62: {",
          "63:     uint32_t id = 0;",
          "64:     uint32_t flags = 0;",
          "65:     xmlNode *msg = crm_ipcs_recv(c, data, size, &id, &flags);",
          "67:     if(flags & crm_ipc_client_response) {",
          "",
          "[Removed Lines]",
          "49:     crm_trace(\"Connecting %p for uid=%d gid=%d\", c, uid, gid);",
          "58: gboolean process_pe_message(xmlNode * msg, xmlNode * xml_data, qb_ipcs_connection_t* sender);",
          "61: pe_ipc_dispatch(qb_ipcs_connection_t *c, void *data, size_t size)",
          "",
          "[Added Lines]",
          "49:     crm_trace(\"Connection %p\", c);",
          "50:     if(crm_client_new(c, uid, gid) == NULL) {",
          "51:         return -EIO;",
          "52:     }",
          "59:     crm_trace(\"Connection %p\", c);",
          "62: gboolean process_pe_message(xmlNode * msg, xmlNode * xml_data, crm_client_t* sender);",
          "65: pe_ipc_dispatch(qb_ipcs_connection_t *qbc, void *data, size_t size)",
          "69:     crm_client_t *c = crm_client_get(qbc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: static int32_t",
          "82: pe_ipc_closed(qb_ipcs_connection_t *c)",
          "83: {",
          "84:     return 0;",
          "85: }",
          "87: static void",
          "88: pe_ipc_destroy(qb_ipcs_connection_t *c)",
          "89: {",
          "91: }",
          "93: struct qb_ipcs_service_handlers ipc_callbacks =",
          "",
          "[Removed Lines]",
          "90:     crm_trace(\"Disconnecting %p\", c);",
          "",
          "[Added Lines]",
          "89:     crm_client_t *client = crm_client_get(c);",
          "90:     crm_trace(\"Connection %p\", c);",
          "91:     crm_client_destroy(client);",
          "98:     crm_trace(\"Connection %p\", c);",
          "",
          "---------------"
        ],
        "pengine/pengine.c||pengine/pengine.c": [
          "File: pengine/pengine.c -> pengine/pengine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <pengine.h>",
          "33: #include <allocate.h>",
          "34: #include <utils.h>",
          "36: xmlNode *do_calculations(pe_working_set_t * data_set, xmlNode * xml_input, crm_time_t * now);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     {\"pe-input\", \"pe-input-series-max\", 400},",
          "57: };",
          "61: gboolean",
          "63: {",
          "64:     static char *last_digest = NULL;",
          "",
          "[Removed Lines]",
          "59: gboolean process_pe_message(xmlNode * msg, xmlNode * xml_data, qb_ipcs_connection_t* sender);",
          "62: process_pe_message(xmlNode * msg, xmlNode * xml_data, qb_ipcs_connection_t* sender)",
          "",
          "[Added Lines]",
          "60: gboolean process_pe_message(xmlNode * msg, xmlNode * xml_data, crm_client_t* sender);",
          "63: process_pe_message(xmlNode * msg, xmlNode * xml_data, crm_client_t* sender)",
          "",
          "---------------"
        ],
        "tools/attrd.c||tools/attrd.c": [
          "File: tools/attrd.c -> tools/attrd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <crm/cib/internal.h>",
          "34: #include <crm/msg_xml.h>",
          "35: #include <crm/common/ipc.h>",
          "36: #include <crm/cluster/internal.h>",
          "37: #include <crm/common/mainloop.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: GHashTable *attr_hash = NULL;",
          "54: cib_t *cib_conn = NULL;",
          "60: typedef struct attr_hash_entry_s {",
          "61:     char *uuid;",
          "62:     char *id;",
          "",
          "[Removed Lines]",
          "56: typedef struct attrd_client_s {",
          "57:     char *user;",
          "58: } attrd_client_t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101: static int32_t",
          "102: attrd_ipc_accept(qb_ipcs_connection_t *c, uid_t uid, gid_t gid)",
          "103: {",
          "111:     if (need_shutdown) {",
          "114:     }",
          "122:     }",
          "129:     return 0;",
          "130: }",
          "132: static void",
          "133: attrd_ipc_created(qb_ipcs_connection_t *c)",
          "134: {",
          "136: }",
          "",
          "[Removed Lines]",
          "104:     attrd_client_t *new_client = NULL;",
          "105: #if ENABLE_ACL",
          "106:     struct group *crm_grp = NULL;",
          "107: #endif",
          "109:     crm_trace(\"Connecting %p for connection from %d by uid=%d gid=%d\",",
          "110:               c, crm_ipcs_client_pid(c), uid, gid);",
          "112:         crm_info(\"Ignoring connection request during shutdown\");",
          "113:         return FALSE;",
          "116:     new_client = calloc(1, sizeof(attrd_client_t));",
          "118: #if ENABLE_ACL",
          "119:     crm_grp = getgrnam(CRM_DAEMON_GROUP);",
          "120:     if (crm_grp) {",
          "121:         qb_ipcs_connection_auth_set(c, -1, crm_grp->gr_gid, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);",
          "124:     new_client->user = uid2username(uid);",
          "125: #endif",
          "127:     qb_ipcs_context_set(c, new_client);",
          "135:     crm_trace(\"Client %p connected from %d\", c, crm_ipcs_client_pid(c));",
          "",
          "[Added Lines]",
          "101:     crm_trace(\"Connection %p\", c);",
          "103:         crm_info(\"Ignoring new client [%d] during shutdown\", crm_ipcs_client_pid(c));",
          "104:         return -EPERM;",
          "107:     if(crm_client_new(c, uid, gid) == NULL) {",
          "108:         return -EIO;",
          "116:     crm_trace(\"Connection %p\", c);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141: {",
          "142:     uint32_t id = 0;",
          "143:     uint32_t flags = 0;",
          "149:     if(flags & crm_ipc_client_response) {",
          "150:         crm_trace(\"Ack'ing msg from %d (%p)\", crm_ipcs_client_pid(c), c);",
          "152:     }",
          "154:     if (msg == NULL) {",
          "",
          "[Removed Lines]",
          "144: #if ENABLE_ACL",
          "145:     attrd_client_t *client = qb_ipcs_context_get(c);",
          "146: #endif",
          "147:     xmlNode *msg = crm_ipcs_recv(c, data, size, &id, &flags);",
          "151:         crm_ipcs_send_ack(c, id, \"ack\", __FUNCTION__, __LINE__);",
          "",
          "[Added Lines]",
          "125:     crm_client_t *client = crm_client_get(c);",
          "126:     xmlNode *msg = crm_ipcs_recv(client, data, size, &id, &flags);",
          "130:         crm_ipcs_send_ack(client, id, \"ack\", __FUNCTION__, __LINE__);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173: static int32_t",
          "174: attrd_ipc_closed(qb_ipcs_connection_t *c)",
          "175: {",
          "177:     return 0;",
          "178: }",
          "180: static void",
          "181: attrd_ipc_destroy(qb_ipcs_connection_t *c)",
          "182: {",
          "195: }",
          "197: struct qb_ipcs_service_handlers ipc_callbacks =",
          "",
          "[Removed Lines]",
          "176:     crm_trace(\"Connection %p from %d closed\", c, crm_ipcs_client_pid(c));",
          "183:     attrd_client_t *client = qb_ipcs_context_get(c);",
          "185:     if (client == NULL) {",
          "186:         return;",
          "187:     }",
          "189:     crm_trace(\"Destroying %p\", c);",
          "190:     free(client->user);",
          "191:     free(client);",
          "192:     crm_trace(\"Free'd the attrd client\");",
          "194:     return;",
          "",
          "[Added Lines]",
          "155:     crm_client_t *client = crm_client_get(c);",
          "156:     crm_trace(\"Connection %p\", c);",
          "157:     crm_client_destroy(client);",
          "164:     crm_trace(\"Connection %p\", c);",
          "",
          "---------------"
        ],
        "tools/crmadmin.c||tools/crmadmin.c": [
          "File: tools/crmadmin.c -> tools/crmadmin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "426:     return FALSE;",
          "427: }",
          "430: validate_crm_message(xmlNode * msg, const char *sys, const char *uuid, const char *msg_type)",
          "431: {",
          "433:     const char *type = NULL;",
          "434:     const char *crm_msg_reference = NULL;",
          "439:     if (msg == NULL) {",
          "441:     }",
          "444:     type = crm_element_value(msg, F_CRM_MSG_TYPE);",
          "446:     crm_msg_reference = crm_element_value(msg, XML_ATTR_REFERENCE);",
          "465:     if (type == NULL) {",
          "466:         crm_info(\"No message type defined.\");",
          "469:     } else if (msg_type != NULL && strcasecmp(msg_type, type) != 0) {",
          "470:         crm_info(\"Expecting a (%s) message but received a (%s).\", msg_type, type);",
          "472:     }",
          "474:     if (crm_msg_reference == NULL) {",
          "475:         crm_info(\"No message crm_msg_reference defined.\");",
          "477:     }",
          "487: }",
          "489: int",
          "",
          "[Removed Lines]",
          "429: static xmlNode *",
          "432:     const char *to = NULL;",
          "435:     xmlNode *action = NULL;",
          "436:     const char *true_sys;",
          "437:     char *local_sys = NULL;",
          "440:         return NULL;",
          "443:     to = crm_element_value(msg, F_CRM_SYS_TO);",
          "447:     action = msg;",
          "448:     true_sys = sys;",
          "450:     if (uuid != NULL) {",
          "451:         local_sys = generate_hash_key(sys, uuid);",
          "452:         true_sys = local_sys;",
          "453:     }",
          "455:     if (to == NULL) {",
          "456:         crm_info(\"No sub-system defined.\");",
          "457:         action = NULL;",
          "458:     } else if (true_sys != NULL && strcasecmp(to, true_sys) != 0) {",
          "459:         crm_trace(\"The message is not for this sub-system (%s != %s).\", to, true_sys);",
          "460:         action = NULL;",
          "461:     }",
          "463:     free(local_sys);",
          "467:         return NULL;",
          "471:         action = NULL;",
          "476:         action = NULL;",
          "479:   if(action != NULL)",
          "480:   crm_trace(",
          "481:          \"XML is valid and node with message type (%s) found.\",",
          "482:          type);",
          "483:  crm_trace(\"Returning node (%s)\", crm_element_name(action));",
          "486:     return action;",
          "",
          "[Added Lines]",
          "429: static bool",
          "436:         return FALSE;",
          "444:         return FALSE;",
          "448:         return FALSE;",
          "453:         return FALSE;",
          "456:     return TRUE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "577e4e8fb0004751985f8dea0a7734a76bb71a3f",
      "candidate_info": {
        "commit_hash": "577e4e8fb0004751985f8dea0a7734a76bb71a3f",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/577e4e8fb0004751985f8dea0a7734a76bb71a3f",
        "files": [
          "cib/callbacks.c",
          "cib/notify.c",
          "cib/remote.c",
          "lib/cib/cib_remote.c",
          "lib/lrmd/lrmd_client.c"
        ],
        "message": "Low: core: Fix compile errors when gnutls-devel is not installed",
        "before_after_code_files": [
          "cib/callbacks.c||cib/callbacks.c",
          "cib/notify.c||cib/notify.c",
          "cib/remote.c||cib/remote.c",
          "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
          "lib/lrmd/lrmd_client.c||lib/lrmd/lrmd_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c",
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c"
          ],
          "candidate": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c",
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c"
          ]
        }
      },
      "candidate_diff": {
        "cib/callbacks.c||cib/callbacks.c": [
          "File: cib/callbacks.c -> cib/callbacks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:                     local_rc = -ENOMSG;",
          "317:                 }",
          "318:                 break;",
          "319:             case CRM_CLIENT_TLS:",
          "320:             case CRM_CLIENT_TCP:",
          "321:                 crm_remote_send(client_obj->remote, notify_src);",
          "322:                 break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319: #  ifdef HAVE_GNUTLS_GNUTLS_H",
          "321: #  endif",
          "",
          "---------------"
        ],
        "cib/notify.c||cib/notify.c": [
          "File: cib/notify.c -> cib/notify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:                     crm_warn(\"Notification of client %s/%s failed\", client->name, client->id);",
          "120:                 }",
          "121:                 break;",
          "122:             case CRM_CLIENT_TLS:",
          "123:             case CRM_CLIENT_TCP:",
          "124:                 crm_debug(\"Sent %s notification to client %s/%s\", type, client->name, client->id);",
          "125:                 crm_remote_send(client->remote, update->msg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #  ifdef HAVE_GNUTLS_GNUTLS_H",
          "124: #  endif",
          "",
          "---------------"
        ],
        "cib/remote.c||cib/remote.c": [
          "File: cib/remote.c -> cib/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:     num_clients--;",
          "374:     crm_trace(\"Num unfree'd clients: %d\", num_clients);",
          "377: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "383:             }",
          "387: #endif",
          "390:     }",
          "393:     if (csock > 0) {",
          "394:         close(csock);",
          "",
          "[Removed Lines]",
          "376:     if (client->kind == CRM_CLIENT_TLS) {",
          "378:         if (client->remote->tls_session) {",
          "379:             void *sock_ptr = gnutls_transport_get_ptr(*client->remote->tls_session);",
          "380:             csock = GPOINTER_TO_INT(sock_ptr);",
          "381:             if (client->remote->tls_handshake_complete) {",
          "382:                 gnutls_bye(*client->remote->tls_session, GNUTLS_SHUT_WR);",
          "384:             gnutls_deinit(*client->remote->tls_session);",
          "385:             gnutls_free(client->remote->tls_session);",
          "386:         }",
          "388:     } else {",
          "389:         csock = GPOINTER_TO_INT(client->remote->tls_session);",
          "391:     client->remote->tls_session = NULL;",
          "",
          "[Added Lines]",
          "376:     switch (client->kind) {",
          "377:         case CRM_CLIENT_TCP:",
          "378:             csock = client->remote->tcp_socket;",
          "379:             break;",
          "381:         case CRM_CLIENT_TLS:",
          "382:             if (client->remote->tls_session) {",
          "383:                 void *sock_ptr = gnutls_transport_get_ptr(*client->remote->tls_session);",
          "384:                 csock = GPOINTER_TO_INT(sock_ptr);",
          "385:                 if (client->remote->tls_handshake_complete) {",
          "386:                     gnutls_bye(*client->remote->tls_session, GNUTLS_SHUT_WR);",
          "387:                 }",
          "388:                 gnutls_deinit(*client->remote->tls_session);",
          "389:                 gnutls_free(client->remote->tls_session);",
          "390:                 client->remote->tls_session = NULL;",
          "392:             break;",
          "394:         default:",
          "395:             crm_warn(\"Unexpected client type %d\" , client->kind);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "471:     int disconnected = 0;",
          "472:     int timeout = client->remote->authenticated ? -1 : 1000;",
          "476: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "477:     if (client->kind == CRM_CLIENT_TLS && (client->remote->tls_handshake_complete == FALSE)) {",
          "",
          "[Removed Lines]",
          "474:     crm_trace(\"%s callback\", client->kind == CRM_CLIENT_TLS ? \"secure\" : \"clear-text\");",
          "",
          "[Added Lines]",
          "479:     crm_trace(\"%s callback\", client->kind != CRM_CLIENT_TCP ? \"secure\" : \"clear-text\");",
          "",
          "---------------"
        ],
        "lib/cib/cib_remote.c||lib/cib/cib_remote.c": [
          "File: lib/cib/cib_remote.c -> lib/cib/cib_remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:     cib_fd_callbacks.destroy = cib_remote_connection_destroy;",
          "213:     connection->tcp_socket = 0;",
          "214:     connection->tls_session = NULL;",
          "216:     sock = crm_remote_tcp_connect(private->server, private->port);",
          "217:     if (sock <= 0) {",
          "218:         crm_perror(LOG_ERR, \"remote tcp connection to %s:%d failed\", private->server, private->port);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "216: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243: #else",
          "244:         return -EPROTONOSUPPORT;",
          "245: #endif",
          "248:     }",
          "",
          "[Removed Lines]",
          "246:     } else {",
          "247:         connection->tls_session = GUINT_TO_POINTER(sock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/lrmd/lrmd_client.c||lib/lrmd/lrmd_client.c": [
          "File: lib/lrmd/lrmd_client.c -> lib/lrmd/lrmd_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "701:     case CRM_CLIENT_IPC:",
          "702:         rc = crm_ipc_send(native->ipc, msg, crm_ipc_client_none, 0, NULL);",
          "703:         break;",
          "705: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "706:         rc = lrmd_tls_send(lrmd, msg);",
          "708:         break;",
          "709:     default:",
          "710:         crm_err(\"Unsupported connection type: %d\", native->type);",
          "711:     }",
          "",
          "[Removed Lines]",
          "704:     case CRM_CLIENT_TLS:",
          "707: #endif",
          "",
          "[Added Lines]",
          "705:     case CRM_CLIENT_TLS:",
          "708: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "991:     return rc;",
          "992: }",
          "995: static void",
          "996: lrmd_gnutls_global_init(void)",
          "",
          "[Removed Lines]",
          "993: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1002:     }",
          "1003:     gnutls_init = 1;",
          "1004: }",
          "1006: static void",
          "1007: report_async_connection_result(lrmd_t *lrmd, int rc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1004: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1067:     return;",
          "1068: }",
          "1071: static int",
          "1072: lrmd_tls_connect_async(lrmd_t *lrmd, int timeout /*ms*/)",
          "1073: {",
          "1075:     int rc = 0;",
          "1076:     lrmd_private_t *native = lrmd->private;",
          "",
          "[Removed Lines]",
          "1069: #endif",
          "1074: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1080:     rc = crm_remote_tcp_connect_async(native->server, native->port, timeout, lrmd, lrmd_tcp_connect_cb);",
          "1082:     return rc;",
          "1087: }",
          "1089: static int",
          "1090: lrmd_tls_connect(lrmd_t *lrmd, int *fd)",
          "1091: {",
          "1093:     static struct mainloop_fd_callbacks lrmd_tls_callbacks =",
          "1094:         {",
          "1095:             .dispatch = lrmd_tls_dispatch,",
          "",
          "[Removed Lines]",
          "1083: #else",
          "1084:     crm_err(\"TLS not enabled for this build.\");",
          "1085:     return -ENOTCONN;",
          "1086: #endif",
          "1092: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1134:         native->source = mainloop_add_fd(name, G_PRIORITY_HIGH, native->sock, lrmd, &lrmd_tls_callbacks);",
          "1135:     }",
          "1136:     return pcmk_ok;",
          "1141: }",
          "1143: static int",
          "1144: lrmd_api_connect(lrmd_t * lrmd, const char *name, int *fd)",
          "",
          "[Removed Lines]",
          "1137: #else",
          "1138:     crm_err(\"TLS not enabled for this build.\");",
          "1139:     return -ENOTCONN;",
          "1140: #endif",
          "",
          "[Added Lines]",
          "1131: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1186:             report_async_connection_result(lrmd, rc);",
          "1187:         }",
          "1188:         break;",
          "1189:     case CRM_CLIENT_TLS:",
          "1190:         rc = lrmd_tls_connect_async(lrmd, timeout);",
          "1191:         if (rc) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1179: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1193:             report_async_connection_result(lrmd, rc);",
          "1194:         }",
          "1195:         break;",
          "1196:     default:",
          "1197:         crm_err(\"Unsupported connection type: %d\", native->type);",
          "1198:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1187: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ad0dd9351cec240a00ca2ba97bb90268caa0010",
      "candidate_info": {
        "commit_hash": "0ad0dd9351cec240a00ca2ba97bb90268caa0010",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/0ad0dd9351cec240a00ca2ba97bb90268caa0010",
        "files": [
          "cib/callbacks.c",
          "cib/remote.c",
          "configure.ac",
          "crmd/pengine.c",
          "crmd/tengine.c",
          "fencing/main.c",
          "fencing/remote.c",
          "include/crm/common/util.h",
          "lib/common/utils.c",
          "pacemaker.spec.in"
        ],
        "message": "Low: Core: Simplify uuid creation",
        "before_after_code_files": [
          "cib/callbacks.c||cib/callbacks.c",
          "cib/remote.c||cib/remote.c",
          "configure.ac||configure.ac",
          "crmd/pengine.c||crmd/pengine.c",
          "crmd/tengine.c||crmd/tengine.c",
          "fencing/main.c||fencing/main.c",
          "fencing/remote.c||fencing/remote.c",
          "include/crm/common/util.h||include/crm/common/util.h",
          "lib/common/utils.c||lib/common/utils.c",
          "pacemaker.spec.in||pacemaker.spec.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/remote.c||cib/remote.c"
          ],
          "candidate": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/remote.c||cib/remote.c"
          ]
        }
      },
      "candidate_diff": {
        "cib/callbacks.c||cib/callbacks.c": [
          "File: cib/callbacks.c -> cib/callbacks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: static void",
          "94: cib_ipc_created(qb_ipcs_connection_t *c)",
          "95: {",
          "97:     cib_client_t *new_client = NULL;",
          "100:     crm_malloc0(new_client, sizeof(cib_client_t));",
          "101:     new_client->ipc = c;",
          "106:     CRM_CHECK(new_client->id == NULL, crm_free(new_client->id));",
          "108:     crm_trace(\"%p connected for client %s\", c, new_client->id);",
          "",
          "[Removed Lines]",
          "96:     cl_uuid_t client_id;",
          "98:     char uuid_str[UU_UNPARSE_SIZEOF];",
          "103:     cl_uuid_generate(&client_id);",
          "104:     cl_uuid_unparse(&client_id, uuid_str);",
          "107:     new_client->id = crm_strdup(uuid_str);",
          "",
          "[Added Lines]",
          "102:     new_client->id = crm_generate_uuid();",
          "",
          "---------------"
        ],
        "cib/remote.c||cib/remote.c": [
          "File: cib/remote.c -> cib/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:     const char *pass = NULL;",
          "227:     const char *tmp = NULL;",
          "232: #ifdef HAVE_DECL_NANOSLEEP",
          "234: #endif",
          "",
          "[Removed Lines]",
          "229:     cl_uuid_t client_id;",
          "230:     char uuid_str[UU_UNPARSE_SIZEOF];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "321:     crm_malloc0(new_client, sizeof(cib_client_t));",
          "322:     new_client->name = crm_element_value_copy(login, \"name\");",
          "327:     CRM_CHECK(new_client->id == NULL, crm_free(new_client->id));",
          "330: #if ENABLE_ACL",
          "331:     new_client->user = crm_strdup(user);",
          "",
          "[Removed Lines]",
          "324:     cl_uuid_generate(&client_id);",
          "325:     cl_uuid_unparse(&client_id, uuid_str);",
          "328:     new_client->id = crm_strdup(uuid_str);",
          "",
          "[Added Lines]",
          "322:     new_client->id = crm_generate_uuid();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455: #endif",
          "457:     if (crm_element_value(command, F_CIB_CALLID) == NULL) {",
          "464:         crm_xml_add(command, F_CIB_CALLID, call_uuid);",
          "465:     }",
          "467:     if (crm_element_value(command, F_CIB_CALLOPTS) == NULL) {",
          "",
          "[Removed Lines]",
          "458:         cl_uuid_t call_id;",
          "459:         char call_uuid[UU_UNPARSE_SIZEOF];",
          "462:         cl_uuid_generate(&call_id);",
          "463:         cl_uuid_unparse(&call_id, call_uuid);",
          "",
          "[Added Lines]",
          "452:         char *call_uuid = crm_generate_uuid();",
          "456:         free(call_uuid);",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "592: AC_CHECK_LIB(rt, sched_getscheduler)            dnl -lrt (for Tru64)",
          "593: AC_CHECK_LIB(gnugetopt, getopt_long)  dnl -lgnugetopt ( if available )",
          "594: AC_CHECK_LIB(pam, pam_start)   dnl -lpam (if available)",
          "598: if test x\"${PKGCONFIG}\" = x\"\"; then",
          "599:    AC_MSG_ERROR(You need pkgconfig installed in order to build ${PACKAGE})",
          "",
          "[Removed Lines]",
          "595: AC_CHECK_LIB(uuid, uuid_parse)   dnl e2fsprogs",
          "596: AC_CHECK_LIB(uuid, uuid_create)   dnl ossp",
          "",
          "[Added Lines]",
          "595: AC_CHECK_LIB(uuid, uuid_parse)   dnl libuuid",
          "597: if test \"x$ac_cv_lib_uuid_uuid_parse\" != x\"\"yes; then",
          "598:    AC_MSG_ERROR(You do not have the libuuid development package installed)",
          "599: fi",
          "",
          "---------------"
        ],
        "crmd/pengine.c||crmd/pengine.c": [
          "File: crmd/pengine.c -> crmd/pengine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     clear_bit_inplace(fsa_input_register, pe_subsystem->flag_connected);",
          "90:     if (is_set(fsa_input_register, pe_subsystem->flag_required)) {",
          "91:         int rc = cib_ok;",
          "98:         crm_crit(\"Connection to the Policy Engine failed (pid=%d, uuid=%s)\",",
          "99:                  pe_subsystem->pid, uuid_str);",
          "",
          "[Removed Lines]",
          "92:         cl_uuid_t new_uuid;",
          "93:         char uuid_str[UU_UNPARSE_SIZEOF];",
          "95:         cl_uuid_generate(&new_uuid);",
          "96:         cl_uuid_unparse(&new_uuid, uuid_str);",
          "",
          "[Added Lines]",
          "92:         char *uuid_str = crm_generate_uuid();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:         rc = fsa_cib_conn->cmds->query(fsa_cib_conn, NULL, NULL, cib_scope_local);",
          "113:                                               \"save_cib_contents\", save_cib_contents);",
          "115:     } else {",
          "",
          "[Removed Lines]",
          "112:         fsa_cib_conn->cmds->register_callback(fsa_cib_conn, rc, 5, FALSE, crm_strdup(uuid_str),",
          "",
          "[Added Lines]",
          "108:         fsa_cib_conn->cmds->register_callback(fsa_cib_conn, rc, 5, FALSE, uuid_str,",
          "",
          "---------------"
        ],
        "crmd/tengine.c||crmd/tengine.c": [
          "File: crmd/tengine.c -> crmd/tengine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: {",
          "78:     gboolean init_ok = TRUE;",
          "83:     if (action & A_TE_STOP) {",
          "84:         if (transition_graph) {",
          "85:             destroy_graph(transition_graph);",
          "",
          "[Removed Lines]",
          "80:     cl_uuid_t new_uuid;",
          "81:     char uuid_str[UU_UNPARSE_SIZEOF];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:         return;",
          "109:     }",
          "114:     crm_info(\"Registering TE UUID: %s\", te_uuid);",
          "116:     if (transition_trigger == NULL) {",
          "",
          "[Removed Lines]",
          "111:     cl_uuid_generate(&new_uuid);",
          "112:     cl_uuid_unparse(&new_uuid, uuid_str);",
          "113:     te_uuid = crm_strdup(uuid_str);",
          "",
          "[Added Lines]",
          "108:     te_uuid = crm_generate_uuid();",
          "",
          "---------------"
        ],
        "fencing/main.c||fencing/main.c": [
          "File: fencing/main.c -> fencing/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: static void",
          "75: st_ipc_created(qb_ipcs_connection_t *c)",
          "76: {",
          "78:     stonith_client_t *new_client = NULL;",
          "81: #if 0",
          "82:     struct qb_ipcs_stats srv_stats;",
          "",
          "[Removed Lines]",
          "77:     cl_uuid_t client_id;",
          "79:     char uuid_str[UU_UNPARSE_SIZEOF];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     new_client->channel = c;",
          "92:     new_client->channel_name = crm_strdup(\"ipc\");",
          "97:     CRM_CHECK(new_client->id == NULL, crm_free(new_client->id));",
          "99:     crm_trace(\"Created channel %p for client %s\", c, new_client->id);",
          "",
          "[Removed Lines]",
          "94:     cl_uuid_generate(&client_id);",
          "95:     cl_uuid_unparse(&client_id, uuid_str);",
          "98:     new_client->id = crm_strdup(uuid_str);",
          "",
          "[Added Lines]",
          "93:     new_client->id = crm_generate_uuid();",
          "",
          "---------------"
        ],
        "fencing/remote.c||fencing/remote.c": [
          "File: fencing/remote.c -> fencing/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:         crm_trace(\"Recorded new stonith op: %s\", op->id);",
          "289:     } else {",
          "297:         crm_trace(\"Generated new stonith op: %s\", op->id);",
          "298:     }",
          "",
          "[Removed Lines]",
          "290:  cl_uuid_t new_uuid;",
          "291:  char uuid_str[UU_UNPARSE_SIZEOF];",
          "293:  cl_uuid_generate(&new_uuid);",
          "294:  cl_uuid_unparse(&new_uuid, uuid_str);",
          "296:  op->id = crm_strdup(uuid_str);",
          "",
          "[Added Lines]",
          "290:  op->id = crm_generate_uuid();",
          "",
          "---------------"
        ],
        "include/crm/common/util.h||include/crm/common/util.h": [
          "File: include/crm/common/util.h -> include/crm/common/util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "370: extern void *convert_const_pointer(const void *ptr);",
          "372: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: extern char *crm_generate_uuid(void);",
          "",
          "---------------"
        ],
        "lib/common/utils.c||lib/common/utils.c": [
          "File: lib/common/utils.c -> lib/common/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2779:     return (void *)ptr;",
          "2780: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2782: #include <uuid/uuid.h>",
          "2784: char *crm_generate_uuid(void)",
          "2785: {",
          "2786:  unsigned char uuid[16];",
          "2788:  uuid_generate(uuid);",
          "2789:  uuid_unparse(uuid, buffer);",
          "2790:         return buffer;",
          "2791: }",
          "",
          "---------------"
        ],
        "pacemaker.spec.in||pacemaker.spec.in": [
          "File: pacemaker.spec.in -> pacemaker.spec.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "96: # Required for core functionality",
          "97: BuildRequires: automake autoconf libtool pkgconfig python libtool-ltdl-devel",
          "98: BuildRequires: glib2-devel cluster-glue-libs-devel libxml2-devel libxslt-devel",
          "101: %if 0%{?suse_version} >= 1100",
          "102: # Renamed since opensuse-11.0",
          "",
          "[Removed Lines]",
          "99: BuildRequires: pkgconfig python-devel gcc-c++ bzip2-devel pam-devel",
          "",
          "[Added Lines]",
          "99: BuildRequires: pkgconfig python-devel gcc-c++ bzip2-devel pam-devel libuuid-devel",
          "",
          "---------------"
        ]
      }
    }
  ]
}