{
  "cve_id": "CVE-2014-0224",
  "cve_desc": "OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h does not properly restrict processing of ChangeCipherSpec messages, which allows man-in-the-middle attackers to trigger use of a zero-length master key in certain OpenSSL-to-OpenSSL communications, and consequently hijack sessions or obtain sensitive information, via a crafted TLS handshake, aka the \"CCS Injection\" vulnerability.",
  "repo": "openssl/openssl",
  "patch_hash": "a91be10833e61bcdc9002de28489405101c52650",
  "patch_info": {
    "commit_hash": "a91be10833e61bcdc9002de28489405101c52650",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/a91be10833e61bcdc9002de28489405101c52650",
    "files": [
      "ssl/s3_clnt.c",
      "ssl/s3_pkt.c",
      "ssl/s3_srvr.c",
      "ssl/ssl3.h"
    ],
    "message": "Fix for CVE-2014-0224\n\nOnly accept change cipher spec when it is expected instead of at any\ntime. This prevents premature setting of session keys before the master\nsecret is determined which an attacker could use as a MITM attack.\n\nThanks to KIKUCHI Masashi (Lepidum Co. Ltd.) for reporting this issue\nand providing the initial fix this patch is based on.\n(cherry picked from commit bc8923b1ec9c467755cd86f7848c50ee8812e441)",
    "before_after_code_files": [
      "ssl/s3_clnt.c||ssl/s3_clnt.c",
      "ssl/s3_pkt.c||ssl/s3_pkt.c",
      "ssl/s3_srvr.c||ssl/s3_srvr.c",
      "ssl/ssl3.h||ssl/ssl3.h"
    ]
  },
  "patch_diff": {
    "ssl/s3_clnt.c||ssl/s3_clnt.c": [
      "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "599:   case SSL3_ST_CR_FINISHED_A:",
      "600:   case SSL3_ST_CR_FINISHED_B:",
      "602:    ret=ssl3_get_finished(s,SSL3_ST_CR_FINISHED_A,",
      "603:     SSL3_ST_CR_FINISHED_B);",
      "604:    if (ret <= 0) goto end;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "602:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1051:   SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT);",
      "1052:   goto f_err;",
      "1053:   }",
      "1054:      s->hit=1;",
      "1055:      }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1055:      s->s3->flags |= SSL3_FLAGS_CCS_OK;",
      "",
      "---------------"
    ],
    "ssl/s3_pkt.c||ssl/s3_pkt.c": [
      "File: ssl/s3_pkt.c -> ssl/s3_pkt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1593:    goto f_err;",
      "1594:    }",
      "1596:   rr->length=0;",
      "1598:   if (s->msg_callback)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1596:   if (!(s->s3->flags & SSL3_FLAGS_CCS_OK))",
      "1597:    {",
      "1598:    al=SSL_AD_UNEXPECTED_MESSAGE;",
      "1599:    SSLerr(SSL_F_SSL3_READ_BYTES,SSL_R_CCS_RECEIVED_EARLY);",
      "1600:    goto f_err;",
      "1601:    }",
      "1603:   s->s3->flags &= ~SSL3_FLAGS_CCS_OK;",
      "",
      "---------------"
    ],
    "ssl/s3_srvr.c||ssl/s3_srvr.c": [
      "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "708:   case SSL3_ST_SR_CERT_VRFY_A:",
      "709:   case SSL3_ST_SR_CERT_VRFY_B:",
      "712:    ret=ssl3_get_cert_verify(s);",
      "713:    if (ret <= 0) goto end;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "711:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "736:   case SSL3_ST_SR_FINISHED_A:",
      "737:   case SSL3_ST_SR_FINISHED_B:",
      "738:    ret=ssl3_get_finished(s,SSL3_ST_SR_FINISHED_A,",
      "739:     SSL3_ST_SR_FINISHED_B);",
      "740:    if (ret <= 0) goto end;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "739:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "805:     s->s3->tmp.next_state=SSL3_ST_SR_FINISHED_A;",
      "806: #else",
      "807:     if (s->s3->next_proto_neg_seen)",
      "808:      s->s3->tmp.next_state=SSL3_ST_SR_NEXT_PROTO_A;",
      "809:     else",
      "810:      s->s3->tmp.next_state=SSL3_ST_SR_FINISHED_A;",
      "811: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "810:      {",
      "811:      s->s3->flags |= SSL3_FLAGS_CCS_OK;",
      "813:      }",
      "",
      "---------------"
    ],
    "ssl/ssl3.h||ssl/ssl3.h": [
      "File: ssl/ssl3.h -> ssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "428: #define TLS1_FLAGS_TLS_PADDING_BUG  0x0008",
      "429: #define TLS1_FLAGS_SKIP_CERT_VERIFY  0x0010",
      "430: #define TLS1_FLAGS_KEEP_HANDSHAKE  0x0020",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "431: #define SSL3_FLAGS_CCS_OK   0x0080",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bc8923b1ec9c467755cd86f7848c50ee8812e441",
      "candidate_info": {
        "commit_hash": "bc8923b1ec9c467755cd86f7848c50ee8812e441",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/bc8923b1ec9c467755cd86f7848c50ee8812e441",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/s3_pkt.c",
          "ssl/s3_srvr.c",
          "ssl/ssl3.h"
        ],
        "message": "Fix for CVE-2014-0224\n\nOnly accept change cipher spec when it is expected instead of at any\ntime. This prevents premature setting of session keys before the master\nsecret is determined which an attacker could use as a MITM attack.\n\nThanks to KIKUCHI Masashi (Lepidum Co. Ltd.) for reporting this issue\nand providing the initial fix this patch is based on.",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_pkt.c||ssl/s3_pkt.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl3.h||ssl/ssl3.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/s3_pkt.c||ssl/s3_pkt.c",
            "ssl/s3_srvr.c||ssl/s3_srvr.c",
            "ssl/ssl3.h||ssl/ssl3.h"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/s3_pkt.c||ssl/s3_pkt.c",
            "ssl/s3_srvr.c||ssl/s3_srvr.c",
            "ssl/ssl3.h||ssl/ssl3.h"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:   case SSL3_ST_CR_FINISHED_A:",
          "560:   case SSL3_ST_CR_FINISHED_B:",
          "562:    ret=ssl3_get_finished(s,SSL3_ST_CR_FINISHED_A,",
          "563:     SSL3_ST_CR_FINISHED_B);",
          "564:    if (ret <= 0) goto end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "915:   SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT);",
          "916:   goto f_err;",
          "917:   }",
          "918:      s->hit=1;",
          "919:      }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "919:      s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------"
        ],
        "ssl/s3_pkt.c||ssl/s3_pkt.c": [
          "File: ssl/s3_pkt.c -> ssl/s3_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1316:    goto f_err;",
          "1317:    }",
          "1319:   rr->length=0;",
          "1321:   if (s->msg_callback)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1319:   if (!(s->s3->flags & SSL3_FLAGS_CCS_OK))",
          "1320:    {",
          "1321:    al=SSL_AD_UNEXPECTED_MESSAGE;",
          "1322:    SSLerr(SSL_F_SSL3_READ_BYTES,SSL_R_CCS_RECEIVED_EARLY);",
          "1323:    goto f_err;",
          "1324:    }",
          "1326:   s->s3->flags &= ~SSL3_FLAGS_CCS_OK;",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:   case SSL3_ST_SR_CERT_VRFY_A:",
          "674:   case SSL3_ST_SR_CERT_VRFY_B:",
          "677:    ret=ssl3_get_cert_verify(s);",
          "678:    if (ret <= 0) goto end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "701:   case SSL3_ST_SR_FINISHED_A:",
          "702:   case SSL3_ST_SR_FINISHED_B:",
          "703:    ret=ssl3_get_finished(s,SSL3_ST_SR_FINISHED_A,",
          "704:     SSL3_ST_SR_FINISHED_B);",
          "705:    if (ret <= 0) goto end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "770:     s->s3->tmp.next_state=SSL3_ST_SR_FINISHED_A;",
          "771: #else",
          "772:     if (s->s3->next_proto_neg_seen)",
          "773:      s->s3->tmp.next_state=SSL3_ST_SR_NEXT_PROTO_A;",
          "774:     else",
          "775:      s->s3->tmp.next_state=SSL3_ST_SR_FINISHED_A;",
          "776: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:      {",
          "776:      s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "778:      }",
          "",
          "---------------"
        ],
        "ssl/ssl3.h||ssl/ssl3.h": [
          "File: ssl/ssl3.h -> ssl/ssl3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "388: #define TLS1_FLAGS_TLS_PADDING_BUG  0x0008",
          "389: #define TLS1_FLAGS_SKIP_CERT_VERIFY  0x0010",
          "390: #define TLS1_FLAGS_KEEP_HANDSHAKE  0x0020",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391: #define SSL3_FLAGS_CCS_OK   0x0080",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77719aefb8f549ccc7f04222174889615d62057b",
      "candidate_info": {
        "commit_hash": "77719aefb8f549ccc7f04222174889615d62057b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/77719aefb8f549ccc7f04222174889615d62057b",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/s3_pkt.c",
          "ssl/s3_srvr.c",
          "ssl/ssl3.h"
        ],
        "message": "Fix for CVE-2014-0224\n\nOnly accept change cipher spec when it is expected instead of at any\ntime. This prevents premature setting of session keys before the master\nsecret is determined which an attacker could use as a MITM attack.\n\nThanks to KIKUCHI Masashi (Lepidum Co. Ltd.) for reporting this issue\nand providing the initial fix this patch is based on.\n(cherry picked from commit bc8923b1ec9c467755cd86f7848c50ee8812e441)",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_pkt.c||ssl/s3_pkt.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl3.h||ssl/ssl3.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/s3_pkt.c||ssl/s3_pkt.c",
            "ssl/s3_srvr.c||ssl/s3_srvr.c",
            "ssl/ssl3.h||ssl/ssl3.h"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/s3_pkt.c||ssl/s3_pkt.c",
            "ssl/s3_srvr.c||ssl/s3_srvr.c",
            "ssl/ssl3.h||ssl/ssl3.h"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "592:   case SSL3_ST_CR_FINISHED_A:",
          "593:   case SSL3_ST_CR_FINISHED_B:",
          "595:    ret=ssl3_get_finished(s,SSL3_ST_CR_FINISHED_A,",
          "596:     SSL3_ST_CR_FINISHED_B);",
          "597:    if (ret <= 0) goto end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1045:   SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT);",
          "1046:   goto f_err;",
          "1047:   }",
          "1048:      s->hit=1;",
          "1049:      }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1049:      s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------"
        ],
        "ssl/s3_pkt.c||ssl/s3_pkt.c": [
          "File: ssl/s3_pkt.c -> ssl/s3_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1498:    goto f_err;",
          "1499:    }",
          "1501:   rr->length=0;",
          "1503:   if (s->msg_callback)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1501:   if (!(s->s3->flags & SSL3_FLAGS_CCS_OK))",
          "1502:    {",
          "1503:    al=SSL_AD_UNEXPECTED_MESSAGE;",
          "1504:    SSLerr(SSL_F_SSL3_READ_BYTES,SSL_R_CCS_RECEIVED_EARLY);",
          "1505:    goto f_err;",
          "1506:    }",
          "1508:   s->s3->flags &= ~SSL3_FLAGS_CCS_OK;",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "701:   case SSL3_ST_SR_CERT_VRFY_A:",
          "702:   case SSL3_ST_SR_CERT_VRFY_B:",
          "705:    ret=ssl3_get_cert_verify(s);",
          "706:    if (ret <= 0) goto end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "729:   case SSL3_ST_SR_FINISHED_A:",
          "730:   case SSL3_ST_SR_FINISHED_B:",
          "731:    ret=ssl3_get_finished(s,SSL3_ST_SR_FINISHED_A,",
          "732:     SSL3_ST_SR_FINISHED_B);",
          "733:    if (ret <= 0) goto end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "732:    s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "798:     s->s3->tmp.next_state=SSL3_ST_SR_FINISHED_A;",
          "799: #else",
          "800:     if (s->s3->next_proto_neg_seen)",
          "801:      s->s3->tmp.next_state=SSL3_ST_SR_NEXT_PROTO_A;",
          "802:     else",
          "803:      s->s3->tmp.next_state=SSL3_ST_SR_FINISHED_A;",
          "804: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "803:      {",
          "804:      s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "806:      }",
          "",
          "---------------"
        ],
        "ssl/ssl3.h||ssl/ssl3.h": [
          "File: ssl/ssl3.h -> ssl/ssl3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "407: #define TLS1_FLAGS_TLS_PADDING_BUG  0x0008",
          "408: #define TLS1_FLAGS_SKIP_CERT_VERIFY  0x0010",
          "409: #define TLS1_FLAGS_KEEP_HANDSHAKE  0x0020",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410: #define SSL3_FLAGS_CCS_OK   0x0080",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d69f9e69d2f5069ab37da68f4b93a6f337fb13e",
      "candidate_info": {
        "commit_hash": "4d69f9e69d2f5069ab37da68f4b93a6f337fb13e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4d69f9e69d2f5069ab37da68f4b93a6f337fb13e",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/s3_lib.c",
          "ssl/ssl_cert.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h",
          "ssl/ssl_rsa.c",
          "ssl/t1_lib.c"
        ],
        "message": "move masks out of CERT structure\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/ssl_rsa.c||ssl/ssl_rsa.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "957: {",
          "958:     STACK_OF(SSL_CIPHER) *sk;",
          "959:     const SSL_CIPHER *c;",
          "961:     unsigned char *p, *d;",
          "962:     int i, al = SSL_AD_INTERNAL_ERROR, ok;",
          "963:     unsigned int j;",
          "",
          "[Removed Lines]",
          "960:     CERT *ct = s->cert;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1151:     }",
          "1153:     if (!SSL_USE_TLS1_2_CIPHERS(s))",
          "1155:     else",
          "",
          "[Removed Lines]",
          "1154:         ct->mask_ssl = SSL_TLSV1_2;",
          "1156:         ct->mask_ssl = 0;",
          "",
          "[Added Lines]",
          "1153:         s->s3->tmp.mask_ssl = SSL_TLSV1_2;",
          "1155:         s->s3->tmp.mask_ssl = 0;",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3843:     SSL_CIPHER *c, *ret = NULL;",
          "3844:     STACK_OF(SSL_CIPHER) *prio, *allow;",
          "3845:     int i, ii, ok;",
          "3847:     unsigned long alg_k, alg_a, mask_k, mask_a, emask_k, emask_a;",
          "3852: #if 0",
          "",
          "[Removed Lines]",
          "3846:     CERT *cert;",
          "3850:     cert = s->cert;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3893:             continue;",
          "3895:         ssl_set_masks(s, c);",
          "3900: #ifndef OPENSSL_NO_SRP",
          "3901:         if (s->srp_ctx.srp_Mask & SSL_kSRP) {",
          "3902:             mask_k |= SSL_kSRP;",
          "",
          "[Removed Lines]",
          "3896:         mask_k = cert->mask_k;",
          "3897:         mask_a = cert->mask_a;",
          "3898:         emask_k = cert->export_mask_k;",
          "3899:         emask_a = cert->export_mask_a;",
          "",
          "[Added Lines]",
          "3894:         mask_k = s->s3->tmp.mask_k;",
          "3895:         mask_a = s->s3->tmp.mask_a;",
          "3896:         emask_k = s->s3->tmp.export_mask_k;",
          "3897:         emask_a = s->s3->tmp.export_mask_a;",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     memset(ret, 0, sizeof(*ret));",
          "198:     ret->key = &ret->pkeys[cert->key - cert->pkeys];",
          "205: #ifndef OPENSSL_NO_RSA",
          "206:     if (cert->rsa_tmp != NULL) {",
          "",
          "[Removed Lines]",
          "199:     ret->valid = cert->valid;",
          "200:     ret->mask_k = cert->mask_k;",
          "201:     ret->mask_a = cert->mask_a;",
          "202:     ret->export_mask_k = cert->export_mask_k;",
          "203:     ret->export_mask_a = cert->export_mask_a;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2114:     emask_a |= SSL_aPSK;",
          "2115: #endif",
          "2122: }",
          "",
          "[Removed Lines]",
          "2117:     c->mask_k = mask_k;",
          "2118:     c->mask_a = mask_a;",
          "2119:     c->export_mask_k = emask_k;",
          "2120:     c->export_mask_a = emask_a;",
          "2121:     c->valid = 1;",
          "",
          "[Added Lines]",
          "2117:     s->s3->tmp.mask_k = mask_k;",
          "2118:     s->s3->tmp.mask_a = mask_a;",
          "2119:     s->s3->tmp.export_mask_k = emask_k;",
          "2120:     s->s3->tmp.export_mask_a = emask_a;",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1303:         int valid_flags[SSL_PKEY_NUM];",
          "1304:     } tmp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1309:         unsigned long mask_k;",
          "1310:         unsigned long mask_a;",
          "1311:         unsigned long export_mask_k;",
          "1312:         unsigned long export_mask_a;",
          "1314:         unsigned long mask_ssl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1511:     CERT_PKEY *key;",
          "1524: # ifndef OPENSSL_NO_RSA",
          "1525:     RSA *rsa_tmp;",
          "1526:     RSA *(*rsa_tmp_cb) (SSL *ssl, int is_export, int keysize);",
          "",
          "[Removed Lines]",
          "1517:     int valid;",
          "1518:     unsigned long mask_k;",
          "1519:     unsigned long mask_a;",
          "1520:     unsigned long export_mask_k;",
          "1521:     unsigned long export_mask_a;",
          "1523:     unsigned long mask_ssl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_rsa.c||ssl/ssl_rsa.c": [
          "File: ssl/ssl_rsa.c -> ssl/ssl_rsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:     CRYPTO_add(&pkey->references, 1, CRYPTO_LOCK_EVP_PKEY);",
          "217:     c->pkeys[i].privatekey = pkey;",
          "218:     c->key = &(c->pkeys[i]);",
          "220:     return (1);",
          "221: }",
          "",
          "[Removed Lines]",
          "219:     c->valid = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "420:     c->pkeys[i].x509 = x;",
          "421:     c->key = &(c->pkeys[i]);",
          "424:     return (1);",
          "425: }",
          "",
          "[Removed Lines]",
          "423:     c->valid = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1049: void ssl_set_client_disabled(SSL *s)",
          "1050: {",
          "1055:     if (!SSL_CLIENT_USE_TLS1_2_CIPHERS(s))",
          "1057:     else",
          "1070: # ifndef OPENSSL_NO_PSK",
          "1072:     if (!s->psk_client_callback) {",
          "1075:     }",
          "1077: # ifndef OPENSSL_NO_SRP",
          "1078:     if (!(s->srp_ctx.srp_Mask & SSL_kSRP)) {",
          "1081:     }",
          "1082: # endif",
          "1084: }",
          "1086: int ssl_cipher_disabled(SSL *s, const SSL_CIPHER *c, int op)",
          "1087: {",
          "1091:         return 1;",
          "1092:     return !ssl_security(s, op, c->strength_bits, 0, (void *)c);",
          "1093: }",
          "",
          "[Removed Lines]",
          "1051:     CERT *c = s->cert;",
          "1052:     c->mask_a = 0;",
          "1053:     c->mask_k = 0;",
          "1056:         c->mask_ssl = SSL_TLSV1_2;",
          "1058:         c->mask_ssl = 0;",
          "1059:     ssl_set_sig_mask(&c->mask_a, s, SSL_SECOP_SIGALG_MASK);",
          "1064:     if (c->mask_a & SSL_aRSA)",
          "1065:         c->mask_k |= SSL_kDHr | SSL_kECDHr;",
          "1066:     if (c->mask_a & SSL_aDSS)",
          "1067:         c->mask_k |= SSL_kDHd;",
          "1068:     if (c->mask_a & SSL_aECDSA)",
          "1069:         c->mask_k |= SSL_kECDHe;",
          "1073:         c->mask_a |= SSL_aPSK;",
          "1074:         c->mask_k |= SSL_kPSK;",
          "1079:         c->mask_a |= SSL_aSRP;",
          "1080:         c->mask_k |= SSL_kSRP;",
          "1083:     c->valid = 1;",
          "1088:     CERT *ct = s->cert;",
          "1089:     if (c->algorithm_ssl & ct->mask_ssl || c->algorithm_mkey & ct->mask_k",
          "1090:         || c->algorithm_auth & ct->mask_a)",
          "",
          "[Added Lines]",
          "1051:     s->s3->tmp.mask_a = 0;",
          "1052:     s->s3->tmp.mask_k = 0;",
          "1055:         s->s3->tmp.mask_ssl = SSL_TLSV1_2;",
          "1057:         s->s3->tmp.mask_ssl = 0;",
          "1058:     ssl_set_sig_mask(&s->s3->tmp.mask_a, s, SSL_SECOP_SIGALG_MASK);",
          "1063:     if (s->s3->tmp.mask_a & SSL_aRSA)",
          "1064:         s->s3->tmp.mask_k |= SSL_kDHr | SSL_kECDHr;",
          "1065:     if (s->s3->tmp.mask_a & SSL_aDSS)",
          "1066:         s->s3->tmp.mask_k |= SSL_kDHd;",
          "1067:     if (s->s3->tmp.mask_a & SSL_aECDSA)",
          "1068:         s->s3->tmp.mask_k |= SSL_kECDHe;",
          "1072:         s->s3->tmp.mask_a |= SSL_aPSK;",
          "1073:         s->s3->tmp.mask_k |= SSL_kPSK;",
          "1078:         s->s3->tmp.mask_a |= SSL_aSRP;",
          "1079:         s->s3->tmp.mask_k |= SSL_kSRP;",
          "1086:     if (c->algorithm_ssl & s->s3->tmp.mask_ssl",
          "1087:         || c->algorithm_mkey & s->s3->tmp.mask_k",
          "1088:         || c->algorithm_auth & s->s3->tmp.mask_a)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd865cadcb603918bdcfcf44e487721c657a1117",
      "candidate_info": {
        "commit_hash": "fd865cadcb603918bdcfcf44e487721c657a1117",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fd865cadcb603918bdcfcf44e487721c657a1117",
        "files": [
          "ssl/d1_pkt.c",
          "ssl/s3_pkt.c"
        ],
        "message": "Use constants not numbers\n\nThis patch uses warning/fatal constants instead of numbers with comments for\nwarning/alerts in d1_pkt.c and s3_pkt.c\n\nRT#3725\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_pkt.c||ssl/d1_pkt.c",
          "ssl/s3_pkt.c||ssl/s3_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_pkt.c||ssl/s3_pkt.c"
          ],
          "candidate": [
            "ssl/s3_pkt.c||ssl/s3_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_pkt.c||ssl/d1_pkt.c": [
          "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1088:             cb(s, SSL_CB_READ_ALERT, j);",
          "1089:         }",
          "1092:             s->s3->warn_alert = alert_descr;",
          "1093:             if (alert_descr == SSL_AD_CLOSE_NOTIFY) {",
          "1094: #ifndef OPENSSL_NO_SCTP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1091:         if (alert_level == SSL3_AL_WARNING) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1137:                 }",
          "1138:             }",
          "1139: #endif",
          "1141:             char tmp[16];",
          "1143:             s->rwstate = SSL_NOTHING;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1140:         } else if (alert_level == SSL3_AL_FATAL) {",
          "",
          "---------------"
        ],
        "ssl/s3_pkt.c||ssl/s3_pkt.c": [
          "File: ssl/s3_pkt.c -> ssl/s3_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1451:             cb(s, SSL_CB_READ_ALERT, j);",
          "1452:         }",
          "1455:             s->s3->warn_alert = alert_descr;",
          "1456:             if (alert_descr == SSL_AD_CLOSE_NOTIFY) {",
          "1457:                 s->shutdown |= SSL_RECEIVED_SHUTDOWN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1454:         if (alert_level == SSL3_AL_WARNING) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1474:             else if (alert_descr == SSL_AD_MISSING_SRP_USERNAME)",
          "1475:                 return (0);",
          "1476: #endif",
          "1478:             char tmp[16];",
          "1480:             s->rwstate = SSL_NOTHING;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1477:         } else if (alert_level == SSL3_AL_FATAL) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e3d015363ed09c4eff5c02ad41153387ffdf5af",
      "candidate_info": {
        "commit_hash": "6e3d015363ed09c4eff5c02ad41153387ffdf5af",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6e3d015363ed09c4eff5c02ad41153387ffdf5af",
        "files": [
          "include/openssl/ssl.h",
          "ssl/s3_clnt.c",
          "ssl/ssl_err.c"
        ],
        "message": "Repair EAP-FAST session resumption\n\nEAP-FAST session resumption relies on handshake message lookahead\nto determine server intentions. Commits\n980bc1ec6114f5511b20c2e6ca741e61a39b99d6\nand\n7b3ba508af5c86afe43e28174aa3c53a0a24f4d9\nremoved the lookahead so broke session resumption.\n\nThis change partially reverts the commits and brings the lookahead back\nin reduced capacity for TLS + EAP-FAST only. Since EAP-FAST does not\nsupport regular session tickets, the lookahead now only checks for a\nFinished message.\n\nRegular handshakes are unaffected by this change.\n\nReviewed-by: David Benjamin <davidben@chromium.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl_err.c||ssl/ssl_err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1981: # define SSL_F_SSL3_CHANGE_CIPHER_STATE                   129",
          "1982: # define SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM              130",
          "1983: # define SSL_F_SSL3_CHECK_CLIENT_HELLO                    304",
          "1984: # define SSL_F_SSL3_CLIENT_HELLO                          131",
          "1985: # define SSL_F_SSL3_CONNECT                               132",
          "1986: # define SSL_F_SSL3_CTRL                                  213",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1984: # define SSL_F_SSL3_CHECK_FINISHED                        339",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2038: # define SSL_F_SSL_BAD_METHOD                             160",
          "2039: # define SSL_F_SSL_BUILD_CERT_CHAIN                       332",
          "2040: # define SSL_F_SSL_BYTES_TO_CIPHER_LIST                   161",
          "2042: # define SSL_F_SSL_CERT_DUP                               221",
          "2043: # define SSL_F_SSL_CERT_INSTANTIATE                       214",
          "2044: # define SSL_F_SSL_CERT_NEW                               162",
          "",
          "[Removed Lines]",
          "2041: # define SSL_F_SSL_CERT_ADD0_CHAIN_CERT                   339",
          "",
          "[Added Lines]",
          "2042: # define SSL_F_SSL_CERT_ADD0_CHAIN_CERT                   346",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: #endif",
          "167: static int ca_dn_cmp(const X509_NAME *const *a, const X509_NAME *const *b);",
          "169: #ifndef OPENSSL_NO_SSL3_METHOD",
          "170: static const SSL_METHOD *ssl3_get_client_method(int ver)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168: #ifndef OPENSSL_NO_TLSEXT",
          "169: static int ssl3_check_finished(SSL *s);",
          "170: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "321:             break;",
          "322:         case SSL3_ST_CR_CERT_A:",
          "323:         case SSL3_ST_CR_CERT_B:",
          "326:             if (!",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327: #ifndef OPENSSL_NO_TLSEXT",
          "329:             ret = ssl3_check_finished(s);",
          "330:             if (ret < 0)",
          "331:                 goto end;",
          "332:             if (ret == 1) {",
          "333:                 s->hit = 1;",
          "334:                 s->state = SSL3_ST_CR_FINISHED_A;",
          "335:                 s->init_num = 0;",
          "336:                 break;",
          "337:             }",
          "338: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "558:         case SSL3_ST_CR_FINISHED_A:",
          "559:         case SSL3_ST_CR_FINISHED_B:",
          "561:             ret = ssl3_get_finished(s, SSL3_ST_CR_FINISHED_A,",
          "562:                                     SSL3_ST_CR_FINISHED_B);",
          "563:             if (ret <= 0)",
          "",
          "[Removed Lines]",
          "560:             s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "575:             if (!s->s3->change_cipher_spec)",
          "576:                 s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "663:     buf = (unsigned char *)s->init_buf->data;",
          "664:     if (s->state == SSL3_ST_CW_CLNT_HELLO_A) {",
          "665:         SSL_SESSION *sess = s->session;",
          "669:             if (!ssl_get_new_session(s, 0))",
          "670:                 goto err;",
          "671:         }",
          "",
          "[Removed Lines]",
          "666:         if ((sess == NULL) ||",
          "667:             (sess->ssl_version != s->version) ||",
          "668:             !sess->session_id_length || (sess->not_resumable)) {",
          "",
          "[Added Lines]",
          "682:         if ((sess == NULL) || (sess->ssl_version != s->version) ||",
          "683: #ifdef OPENSSL_NO_TLSEXT",
          "684:             !sess->session_id_length ||",
          "685: #else",
          "690:             (!sess->session_id_length && !sess->tlsext_tick) ||",
          "691: #endif",
          "692:             (sess->not_resumable)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "953:     }",
          "954: #ifndef OPENSSL_NO_TLSEXT",
          "960:         SSL_CIPHER *pref_cipher = NULL;",
          "961:         s->session->master_key_length = sizeof(s->session->master_key);",
          "962:         if (s->tls_session_secret_cb(s, s->session->master_key,",
          "",
          "[Removed Lines]",
          "959:     if (s->version >= TLS1_VERSION && s->tls_session_secret_cb) {",
          "",
          "[Added Lines]",
          "991:     if (s->version >= TLS1_VERSION && s->tls_session_secret_cb &&",
          "992:         s->session->tlsext_tick) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "965:                                      s->tls_session_secret_cb_arg)) {",
          "966:             s->session->cipher = pref_cipher ?",
          "967:                 pref_cipher : ssl_get_cipher_by_char(s, p + j);",
          "969:         }",
          "970:     }",
          "974:         && memcmp(p, s->session->session_id, j) == 0) {",
          "975:         if (s->sid_ctx_length != s->session->sid_ctx_length",
          "976:             || memcmp(s->session->sid_ctx, s->sid_ctx, s->sid_ctx_length)) {",
          "",
          "[Removed Lines]",
          "968:             s->hit = 1;",
          "973:     if (!s->hit && j != 0 && j == s->session->session_id_length",
          "",
          "[Added Lines]",
          "1001:         } else {",
          "1002:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1003:             al = SSL_AD_INTERNAL_ERROR;",
          "1004:             goto f_err;",
          "1009:     if (j != 0 && j == s->session->session_id_length",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "981:             goto f_err;",
          "982:         }",
          "983:         s->hit = 1;",
          "991:         if (s->session->session_id_length > 0) {",
          "992:             if (!ssl_get_new_session(s, 0)) {",
          "",
          "[Removed Lines]",
          "984:     }",
          "986:     if (!s->hit) {",
          "",
          "[Added Lines]",
          "1020:     } else {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3473:     return (0);",
          "3474: }",
          "3483: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "3484: int ssl3_send_next_proto(SSL *s)",
          "3485: {",
          "",
          "[Removed Lines]",
          "3482: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "3513: #ifndef OPENSSL_NO_TLSEXT",
          "3523: static int ssl3_check_finished(SSL *s)",
          "3524: {",
          "3525:     int ok = 0;",
          "3527:     if (s->version < TLS1_VERSION || !s->tls_session_secret_cb ||",
          "3528:         !s->session->tlsext_tick)",
          "3529:         return 0;",
          "3532:     s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "3539:     s->method->ssl_get_message(s,",
          "3540:                                SSL3_ST_CR_CERT_A,",
          "3541:                                SSL3_ST_CR_CERT_B,",
          "3542:                                -1, s->max_cert_list, &ok);",
          "3543:     s->s3->flags &= ~SSL3_FLAGS_CCS_OK;",
          "3545:     if (!ok)",
          "3546:         return -1;",
          "3548:     s->s3->tmp.reuse_message = 1;",
          "3550:     if (s->s3->tmp.message_type == SSL3_MT_FINISHED)",
          "3551:         return 1;",
          "3554:     if (s->s3->change_cipher_spec) {",
          "3555:         SSLerr(SSL_F_SSL3_CHECK_FINISHED, SSL_R_CCS_RECEIVED_EARLY);",
          "3556:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_UNEXPECTED_MESSAGE);",
          "3557:         return -1;",
          "3558:     }",
          "3560:     return 0;",
          "3561: }",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:     {ERR_FUNC(SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM),",
          "127:      \"ssl3_check_cert_and_algorithm\"},",
          "128:     {ERR_FUNC(SSL_F_SSL3_CHECK_CLIENT_HELLO), \"ssl3_check_client_hello\"},",
          "129:     {ERR_FUNC(SSL_F_SSL3_CLIENT_HELLO), \"ssl3_client_hello\"},",
          "130:     {ERR_FUNC(SSL_F_SSL3_CONNECT), \"ssl3_connect\"},",
          "131:     {ERR_FUNC(SSL_F_SSL3_CTRL), \"ssl3_ctrl\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     {ERR_FUNC(SSL_F_SSL3_CHECK_FINISHED), \"SSL3_CHECK_FINISHED\"},",
          "",
          "---------------"
        ]
      }
    }
  ]
}