{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1ea42556073c45dc07c31631f4cd12938761889",
      "candidate_info": {
        "commit_hash": "f1ea42556073c45dc07c31631f4cd12938761889",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f1ea42556073c45dc07c31631f4cd12938761889",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/sqliteInt.h",
          "test/with1.test"
        ],
        "message": "DISTINCT may not be ignored inside a UNION ALL common table expression. Fix for ticket [c51489c3b8f919c5]\n\nFossilOrigin-Name: 7d2b590d3abd66a7e6ae9046198eb669e0fd2f223f7691281e9ad795a12b8903",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ea3039b538ffd0f348c8fbc9452af1fbf899a1f668af9a2404bdd0f8dd21351",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5808:   assert( p->pOrderBy==0 || pDest->eDest!=SRT_Fifo );",
          "5809:   assert( p->pOrderBy==0 || pDest->eDest!=SRT_DistQueue );",
          "5810:   assert( p->pOrderBy==0 || pDest->eDest!=SRT_Queue );",
          "5818:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "5819:     p->pOrderBy = 0;",
          "5820:     p->selFlags &= ~SF_Distinct;",
          "",
          "[Removed Lines]",
          "5811:   if( IgnorableOrderby(pDest) ){",
          "5812:     assert(pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union ||",
          "5813:            pDest->eDest==SRT_Except || pDest->eDest==SRT_Discard ||",
          "5814:            pDest->eDest==SRT_Queue  || pDest->eDest==SRT_DistFifo ||",
          "5815:            pDest->eDest==SRT_DistQueue || pDest->eDest==SRT_Fifo);",
          "",
          "[Added Lines]",
          "5811:   if( IgnorableDistinct(pDest) ){",
          "5812:     assert(pDest->eDest==SRT_Exists     || pDest->eDest==SRT_Union ||",
          "5813:            pDest->eDest==SRT_Except     || pDest->eDest==SRT_Discard ||",
          "5814:            pDest->eDest==SRT_DistQueue  || pDest->eDest==SRT_DistFifo );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3220: #define IgnorableOrderby(X) ((X->eDest)<=SRT_DistQueue)",
          "",
          "[Added Lines]",
          "3216: #define IgnorableDistinct(X) ((X->eDest)<=SRT_DistQueue)",
          "3222: #define IgnorableOrderby(X) ((X->eDest)<=SRT_Fifo)",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1171:   SELECT x,O. * O FROM i \u00acI,I? 10;",
          "1172: } {1 {near \"O\": syntax error}}",
          "1174: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1174: # 2020-09-17 ticket c51489c3b8f919c5",
          "1175: # DISTINCT cannot be ignored in a UNION ALL recursive CTE",
          "1176: #",
          "1177: reset_db",
          "1178: do_execsql_test 26.1 {",
          "1179:   CREATE TABLE t (label VARCHAR(10), step INTEGER);",
          "1180:   INSERT INTO T VALUES('a', 1);",
          "1181:   INSERT INTO T VALUES('a', 1);",
          "1182:   INSERT INTO T VALUES('b', 1);",
          "1183:   WITH RECURSIVE cte(label, step) AS (",
          "1184:       SELECT DISTINCT * FROM t",
          "1185:     UNION ALL",
          "1186:       SELECT label, step + 1 FROM cte WHERE step < 3",
          "1187:   )",
          "1188:   SELECT * FROM cte ORDER BY +label, +step;",
          "1189: } {a 1 a 2 a 3 b 1 b 2 b 3}",
          "1190: do_execsql_test 26.2 {",
          "1191:   WITH RECURSIVE cte(label, step) AS (",
          "1192:       SELECT * FROM t",
          "1193:     UNION",
          "1194:       SELECT label, step + 1 FROM cte WHERE step < 3",
          "1195:   )",
          "1196:   SELECT * FROM cte ORDER BY +label, +step;",
          "1197: } {a 1 a 2 a 3 b 1 b 2 b 3}",
          "1198: do_execsql_test 26.3 {",
          "1199:   CREATE TABLE tworow(x);",
          "1200:   INSERT INTO tworow(x) VALUES(1),(2);",
          "1201:   DELETE FROM t WHERE rowid=2;",
          "1202:   WITH RECURSIVE cte(label, step) AS (",
          "1203:       SELECT * FROM t",
          "1204:     UNION ALL",
          "1205:       SELECT DISTINCT label, step + 1 FROM cte, tworow WHERE step < 3",
          "1206:   )",
          "1207:   SELECT * FROM cte ORDER BY +label, +step;",
          "1208: } {a 1 a 2 a 3 b 1 b 2 b 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe293347ac982ca99a6735557b1f491af11ae234",
      "candidate_info": {
        "commit_hash": "fe293347ac982ca99a6735557b1f491af11ae234",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fe293347ac982ca99a6735557b1f491af11ae234",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/GetFile.cs"
        ],
        "message": "Minor enhancements to the TclKit download tool.\n\nFossilOrigin-Name: 75e31b1d56781fc4d28aea6c7f1393a18fd34870a5beb92df81c088d61351b4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/GetFile.cs||tool/GetFile.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d66f95a51530259ab48f78c9f91acc38055caf338b6fee846b99a8c077466e95",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/GetFile.cs||tool/GetFile.cs": [
          "File: tool/GetFile.cs -> tool/GetFile.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:             string fileName = Path.GetFileName(",
          "168:                 Process.GetCurrentProcess().MainModule.FileName);",
          "171:         }",
          "",
          "[Removed Lines]",
          "170:             Console.WriteLine(String.Format(\"usage: {0} <uri>\", fileName));",
          "",
          "[Added Lines]",
          "170:             Console.WriteLine(String.Format(",
          "171:                 \"usage: {0} <uri> [fileName]\", fileName));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:                 return (int)ExitCode.MissingArgs;",
          "337:             }",
          "340:             {",
          "341:                 Error(null, true);",
          "342:                 return (int)ExitCode.WrongNumArgs;",
          "",
          "[Removed Lines]",
          "339:             if (args.Length != 1)",
          "",
          "[Added Lines]",
          "340:             if ((args.Length < 1) || (args.Length > 2))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "355:             }",
          "364:             {",
          "367:             }",
          "",
          "[Removed Lines]",
          "361:             string fileName = GetFileName(uri);",
          "363:             if (fileName == null)",
          "365:                 Error(\"Could not extract the file name from the URI.\", false);",
          "366:                 return (int)ExitCode.BadFileName;",
          "",
          "[Added Lines]",
          "363:             string fileName = (args.Length == 2) ?",
          "364:                 Path.GetFileName(args[1]) : null;",
          "366:             if (String.IsNullOrEmpty(fileName))",
          "372:                 fileName = GetFileName(uri);",
          "374:                 if (fileName == null)",
          "375:                 {",
          "376:                     Error(\"Could not extract file name from URI.\", false);",
          "377:                     return (int)ExitCode.BadFileName;",
          "378:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "382:             try",
          "383:             {",
          "384:                 using (WebClient webClient = new WebClient())",
          "385:                 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402:                 ServicePointManager.SecurityProtocol =",
          "403:                     (SecurityProtocolType)0xC00;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af3711536b96e90ab11d8181819f90be371a4689",
      "candidate_info": {
        "commit_hash": "af3711536b96e90ab11d8181819f90be371a4689",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af3711536b96e90ab11d8181819f90be371a4689",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/join.test"
        ],
        "message": "In the query flattener when substituting expression Y in place of expression X, if X is marked has having come from an ON or USING clause of a LEFT JOIN, then be sure that all subexpressions of Y, not just the root node of Y, are similarly marked.  Otherwise, if Y is an AND operator, it will be split up during WHERE clause analysis and the subexpressions will not get the special treatment needed by LEFT JOIN ON/USING clauses. Fix for ticket [66e4b0e271c47145].\n\nFossilOrigin-Name: 69f9eb7343a416c5ab426c8e1b9f0ae576544b4ccc5d87f5481c8ff884f696e1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ce6d8d621505f25e4fd43e7cf27445e1a2ddd58d79108d63499c2ae30cc9f610",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3515:           ExprSetProperty(pNew, EP_CanBeNull);",
          "3516:         }",
          "3517:         if( pNew && ExprHasProperty(pExpr,EP_FromJoin) ){",
          "3520:         }",
          "3521:         sqlite3ExprDelete(db, pExpr);",
          "3522:         pExpr = pNew;",
          "",
          "[Removed Lines]",
          "3518:           pNew->iRightJoinTable = pExpr->iRightJoinTable;",
          "3519:           ExprSetProperty(pNew, EP_FromJoin);",
          "",
          "[Added Lines]",
          "3518:           sqlite3SetJoinExpr(pNew, pExpr->iRightJoinTable);",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1025:   SELECT * FROM t2 LEFT JOIN t1 ON a=0 WHERE (x='x' OR x IS NULL);",
          "1026: } {1 {} {}}",
          "",
          "[Removed Lines]",
          "1028: finish_test",
          "",
          "[Added Lines]",
          "1028: # 2020-09-30 ticket 66e4b0e271c47145",
          "1029: # The query flattener inserts an \"expr AND expr\" expression as a substitution",
          "1030: # for the column of a view where that view column is part of an ON expression",
          "1031: # of a LEFT JOIN.",
          "1032: #",
          "1033: reset_db",
          "1034: do_execsql_test join-25.1 {",
          "1035:   CREATE TABLE t0(c0 INT);",
          "1036:   CREATE VIEW v0 AS SELECT (NULL AND 5) as c0 FROM t0;",
          "1037:   INSERT INTO t0(c0) VALUES (NULL);",
          "1038:   SELECT count(*)  FROM v0 LEFT JOIN t0 ON v0.c0;",
          "1039: } {1}",
          "1042: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e752040c099f4137c7cbab3c4a51c684ed8173be",
      "candidate_info": {
        "commit_hash": "e752040c099f4137c7cbab3c4a51c684ed8173be",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e752040c099f4137c7cbab3c4a51c684ed8173be",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5savepoint.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix an assert() in fts5 that could fail if an xSavepoint() call on another vtab fails.\n\nFossilOrigin-Name: a5d7f5d24a239f729de0b8aa5becf5af35ba87160565ee0713c335b8d1bbf12d",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5savepoint.test||ext/fts5/test/fts5savepoint.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:     case FTS5_ROLLBACKTO:",
          "290:       assert( p->ts.eState==1 );",
          "291:       assert( iSavepoint>=-1 );",
          "293:       p->ts.iSavepoint = iSavepoint;",
          "294:       break;",
          "295:   }",
          "",
          "[Removed Lines]",
          "292:       assert( iSavepoint<=p->ts.iSavepoint );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5savepoint.test||ext/fts5/test/fts5savepoint.test": [
          "File: ext/fts5/test/fts5savepoint.test -> ext/fts5/test/fts5savepoint.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 Dec 26",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname [info script]] fts5_common.tcl]",
          "14: set testprefix fts5savepoint",
          "16: # If SQLITE_ENABLE_FTS5 is defined, omit this file.",
          "17: ifcapable !fts5 {",
          "18:   finish_test",
          "19:   return",
          "20: }",
          "22: do_execsql_test 1.0 {",
          "23:   CREATE VIRTUAL TABLE ft USING fts5(c);",
          "24:   BEGIN;",
          "25:     SAVEPOINT one;",
          "26:       INSERT INTO ft VALUES('a');",
          "27:       SAVEPOINT two;",
          "28:         INSERT INTO ft VALUES('b');",
          "29:       RELEASE two;",
          "30:       SAVEPOINT four;",
          "31:         INSERT INTO ft VALUES('c');",
          "32:       RELEASE four;",
          "33:       SAVEPOINT three;",
          "34:         INSERT INTO ft VALUES('d');",
          "35:       ROLLBACK TO three;",
          "36:   COMMIT;",
          "37:   SELECT * FROM ft",
          "38: } {a b c}",
          "40: reset_db",
          "41: do_catchsql_test 2.0 {",
          "42:   CREATE VIRTUAL TABLE ft1 USING fts5(c);",
          "43:   CREATE VIRTUAL TABLE ft2 USING fts5(c);",
          "44:   DROP TABLE ft2_idx;",
          "45:   BEGIN;",
          "46:       INSERT INTO ft2 VALUES('a');",
          "47:       INSERT INTO ft1 VALUES('a');",
          "48:       SAVEPOINT two;",
          "49:         INSERT INTO ft1 VALUES('b');",
          "50:   COMMIT;",
          "51: } {1 {SQL logic error}}",
          "53: reset_db",
          "54: ifcapable fts3 {",
          "55:   do_execsql_test 3.0 {",
          "56:     CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "57:     CREATE VIRTUAL TABLE vt1 USING fts4(c0);",
          "58:     INSERT INTO vt1(c0) VALUES(0);",
          "59:   }",
          "61:   do_execsql_test 3.1 {",
          "62:     BEGIN;",
          "63:       UPDATE vt1 SET c0 = 0;",
          "64:       INSERT INTO vt1(c0) VALUES (0), (0);",
          "65:       UPDATE vt0 SET c0 = 0;",
          "66:       INSERT INTO vt1(c0) VALUES (0);",
          "67:       UPDATE vt1 SET c0 = 0;",
          "68:       INSERT INTO vt1(vt1) VALUES('automerge=1');",
          "69:       UPDATE vt1 SET c0 = 0;",
          "70:   }",
          "72:   do_catchsql_test 3.2 {",
          "73:     DROP TABLE vt1;",
          "74:   } {1 {SQL logic error}}",
          "76:   do_execsql_test 3.3 {",
          "77:     SAVEPOINT x;",
          "78:       INSERT INTO vt0 VALUES('x');",
          "79:     COMMIT;",
          "80:     INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "81:   }",
          "82: }",
          "84: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f482a4cdfa768941e22c399de8ec29a55e729529eeae86d3832077ad1bef22f3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d262c2db8f6ac584d377b347a0dd810f998cbd93",
      "candidate_info": {
        "commit_hash": "d262c2db8f6ac584d377b347a0dd810f998cbd93",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d262c2db8f6ac584d377b347a0dd810f998cbd93",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "In the WHERE clause debugging output (the .wheretrace output) show the parent index of any WhereTerm that is a child.\n\nFossilOrigin-Name: 7fc733328c5914c747e048c830522ec13e433c0a86388bae47b198a3e220c6c2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 56539e1c132632c075efc217ad5951a35e4459605ac128914aec3a7be1e25718",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1762:        iTerm, pTerm, zType, zLeft, pTerm->truthProb,",
          "1763:        pTerm->eOperator, pTerm->wtFlags);",
          "1764:     if( pTerm->iField ){",
          "1768:     }",
          "1769:     sqlite3TreeViewExpr(0, pTerm->pExpr, 0);",
          "1770:   }",
          "1771: }",
          "",
          "[Removed Lines]",
          "1765:       sqlite3DebugPrintf(\" iField=%d\\n\", pTerm->iField);",
          "1766:     }else{",
          "1767:       sqlite3DebugPrintf(\"\\n\");",
          "",
          "[Added Lines]",
          "1765:       sqlite3DebugPrintf(\" iField=%d\", pTerm->iField);",
          "1766:     }",
          "1767:     if( pTerm->iParent>=0 ){",
          "1768:       sqlite3DebugPrintf(\" iParent=%d\", pTerm->iParent);",
          "1770:     sqlite3DebugPrintf(\"\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}