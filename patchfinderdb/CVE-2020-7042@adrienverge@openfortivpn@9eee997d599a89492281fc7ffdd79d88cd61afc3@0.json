{
  "cve_id": "CVE-2020-7042",
  "cve_desc": "An issue was discovered in openfortivpn 1.11.0 when used with OpenSSL 1.0.2 or later. tunnel.c mishandles certificate validation because the hostname check operates on uninitialized memory. The outcome is that a valid certificate is never accepted (only a malformed certificate may be accepted).",
  "repo": "adrienverge/openfortivpn",
  "patch_hash": "9eee997d599a89492281fc7ffdd79d88cd61afc3",
  "patch_info": {
    "commit_hash": "9eee997d599a89492281fc7ffdd79d88cd61afc3",
    "repo": "adrienverge/openfortivpn",
    "commit_url": "https://github.com/adrienverge/openfortivpn/commit/9eee997d599a89492281fc7ffdd79d88cd61afc3",
    "files": [
      "src/tunnel.c"
    ],
    "message": "supply proper input buffer to X509_check_host\n\nCVE-2020-7042 use of uninitialized memory in X509_check_host is fixed with\nthis commit\n\nthe uninitialized buffer common_name was passed as argument to X509_check_host\nwhich prevented proper host name validation when openssl >= 1.0.2 was in use.\nThis came in with #282 which went into openfortivpn 1.7.1.\nUnfortunately, this problem has stayed unnoticed because the return value\nwas not properly checked either (which is a separate issue, with CVE-2020-7041,\nand which has been fixed by the previous commit)",
    "before_after_code_files": [
      "src/tunnel.c||src/tunnel.c"
    ]
  },
  "patch_diff": {
    "src/tunnel.c||src/tunnel.c": [
      "File: src/tunnel.c -> src/tunnel.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "652:  char *line;",
      "653:  int i;",
      "654:  X509_NAME *subj;",
      "657:  SSL_set_verify(tunnel->ssl_handle, SSL_VERIFY_PEER, NULL);",
      "",
      "[Removed Lines]",
      "655:  char common_name[FIELD_SIZE + 1];",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "667: #ifdef HAVE_X509_CHECK_HOST",
      "671:   cert_valid = 1;",
      "672: #else",
      "675:  if (subj",
      "",
      "[Removed Lines]",
      "670:  if (X509_check_host(cert, common_name, FIELD_SIZE, 0, NULL) == 1)",
      "",
      "[Added Lines]",
      "670:  if (X509_check_host(cert, tunnel->config->gateway_host,",
      "671:                      0, 0, NULL) == 1)",
      "674:  char common_name[FIELD_SIZE + 1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6328a070ddaab16faaf008cb9a8a62439c30f2a8",
      "candidate_info": {
        "commit_hash": "6328a070ddaab16faaf008cb9a8a62439c30f2a8",
        "repo": "adrienverge/openfortivpn",
        "commit_url": "https://github.com/adrienverge/openfortivpn/commit/6328a070ddaab16faaf008cb9a8a62439c30f2a8",
        "files": [
          "Makefile.am",
          "src/openssl_hostname_validation.c",
          "src/openssl_hostname_validation.h",
          "src/tunnel.c",
          "tests/lint/run.sh"
        ],
        "message": "fix TLS Certificate CommonName NULL Byte Vulnerability\n\nCVE-2020-7043 TLS Certificate CommonName NULL Byte Vulnerability is fixed\nwith this commit\n\nwith #8 hostname validation for the certificate was introduced\nbut unfortunately strncasecmp() was used to compare the byte array\nagainst the expected hostname. This does not correctly treat a CN\nwhich contains a NULL byte. In order to fix this vulnerability\nthe reference implementation from iSECPartners has been included\ninto the code.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/openssl_hostname_validation.c||src/openssl_hostname_validation.c",
          "src/openssl_hostname_validation.h||src/openssl_hostname_validation.h",
          "src/tunnel.c||src/tunnel.c",
          "tests/lint/run.sh||tests/lint/run.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/tunnel.c||src/tunnel.c"
          ],
          "candidate": [
            "src/tunnel.c||src/tunnel.c"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:          src/http.c src/http.h src/io.c src/io.h src/ipv4.c \\",
          "6:          src/ipv4.h src/log.c src/log.h src/tunnel.c \\",
          "7:          src/tunnel.h src/main.c src/ssl.h src/xml.c \\",
          "9: openfortivpn_CFLAGS = -Wall -pedantic -std=gnu99",
          "10: openfortivpn_CPPFLAGS = -DSYSCONFDIR=\\\"$(sysconfdir)\\\" \\",
          "11:    -DPPP_PATH=\\\"@PPP_PATH@\\\" \\",
          "",
          "[Removed Lines]",
          "8:          src/xml.h src/userinput.c src/userinput.h",
          "",
          "[Added Lines]",
          "8:          src/xml.h src/userinput.c src/userinput.h \\",
          "9:          src/openssl_hostname_validation.c \\",
          "10:          src/openssl_hostname_validation.h",
          "",
          "---------------"
        ],
        "src/openssl_hostname_validation.c||src/openssl_hostname_validation.c": [
          "File: src/openssl_hostname_validation.c -> src/openssl_hostname_validation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include <strings.h>",
          "32: #include <openssl/x509v3.h>",
          "33: #include <openssl/ssl.h>",
          "35: #define HOSTNAME_MAX_SIZE 255",
          "37: #ifndef HAVE_X509_CHECK_HOST",
          "39: #include \"openssl_hostname_validation.h\"",
          "50: static HostnameValidationResult matches_common_name(const char *hostname, const X509 *server_cert) {",
          "51:  int common_name_loc = -1;",
          "52:  X509_NAME_ENTRY *common_name_entry = NULL;",
          "53:  ASN1_STRING *common_name_asn1 = NULL;",
          "54:  char *common_name_str = NULL;",
          "57:  common_name_loc = X509_NAME_get_index_by_NID(X509_get_subject_name((X509 *) server_cert), NID_commonName, -1);",
          "58:  if (common_name_loc < 0) {",
          "59:   return Error;",
          "60:  }",
          "63:  common_name_entry = X509_NAME_get_entry(X509_get_subject_name((X509 *) server_cert), common_name_loc);",
          "64:  if (common_name_entry == NULL) {",
          "65:   return Error;",
          "66:  }",
          "69:  common_name_asn1 = X509_NAME_ENTRY_get_data(common_name_entry);",
          "70:  if (common_name_asn1 == NULL) {",
          "71:   return Error;",
          "72:  }",
          "73:  common_name_str = (char *) ASN1_STRING_data(common_name_asn1);",
          "76:  if (ASN1_STRING_length(common_name_asn1) != strlen(common_name_str)) {",
          "77:   return MalformedCertificate;",
          "78:  }",
          "81:  if (strcasecmp(hostname, common_name_str) == 0) {",
          "82:   return MatchFound;",
          "83:  }",
          "84:  else {",
          "85:   return MatchNotFound;",
          "86:  }",
          "87: }",
          "98: static HostnameValidationResult matches_subject_alternative_name(const char *hostname, const X509 *server_cert) {",
          "99:  HostnameValidationResult result = MatchNotFound;",
          "100:  int i;",
          "101:  int san_names_nb = -1;",
          "102:  STACK_OF(GENERAL_NAME) *san_names = NULL;",
          "105:  san_names = X509_get_ext_d2i((X509 *) server_cert, NID_subject_alt_name, NULL, NULL);",
          "106:  if (san_names == NULL) {",
          "107:   return NoSANPresent;",
          "108:  }",
          "109:  san_names_nb = sk_GENERAL_NAME_num(san_names);",
          "112:  for (i=0; i<san_names_nb; i++) {",
          "113:   const GENERAL_NAME *current_name = sk_GENERAL_NAME_value(san_names, i);",
          "115:   if (current_name->type == GEN_DNS) {",
          "117:    char *dns_name = (char *) ASN1_STRING_data(current_name->d.dNSName);",
          "120:    if (ASN1_STRING_length(current_name->d.dNSName) != strlen(dns_name)) {",
          "121:     result = MalformedCertificate;",
          "122:     break;",
          "123:    }",
          "124:    else { // Compare expected hostname with the DNS name",
          "125:     if (strcasecmp(hostname, dns_name) == 0) {",
          "126:      result = MatchFound;",
          "127:      break;",
          "128:     }",
          "129:    }",
          "130:   }",
          "131:  }",
          "132:  sk_GENERAL_NAME_pop_free(san_names, GENERAL_NAME_free);",
          "134:  return result;",
          "135: }",
          "149: HostnameValidationResult validate_hostname(const char *hostname, const X509 *server_cert) {",
          "150:  HostnameValidationResult result;",
          "152:  if((hostname == NULL) || (server_cert == NULL))",
          "153:   return Error;",
          "156:  result = matches_subject_alternative_name(hostname, server_cert);",
          "157:  if (result == NoSANPresent) {",
          "159:   result = matches_common_name(hostname, server_cert);",
          "160:  }",
          "162:  return result;",
          "163: }",
          "165: #endif",
          "",
          "---------------"
        ],
        "src/openssl_hostname_validation.h||src/openssl_hostname_validation.h": [
          "File: src/openssl_hostname_validation.h -> src/openssl_hostname_validation.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #ifndef HAVE_X509_CHECK_HOST",
          "32: typedef enum {",
          "33:  MatchFound,",
          "34:  MatchNotFound,",
          "35:  NoSANPresent,",
          "36:  MalformedCertificate,",
          "37:  Error",
          "38: } HostnameValidationResult;",
          "51: HostnameValidationResult validate_hostname(const char *hostname, const X509 *server_cert);",
          "53: #endif",
          "",
          "---------------"
        ],
        "src/tunnel.c||src/tunnel.c": [
          "File: src/tunnel.c -> src/tunnel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"tunnel.h\"",
          "30: #include \"http.h\"",
          "31: #include \"log.h\"",
          "33: #include <unistd.h>",
          "34: #include <fcntl.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #ifndef HAVE_X509_CHECK_HOST",
          "33: #include \"openssl_hostname_validation.h\"",
          "34: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "671:                      0, 0, NULL) == 1)",
          "672:   cert_valid = 1;",
          "673: #else",
          "683: #endif",
          "",
          "[Removed Lines]",
          "674:  char common_name[FIELD_SIZE + 1];",
          "677:  if (subj",
          "678:      && X509_NAME_get_text_by_NID(subj, NID_commonName, common_name,",
          "679:                                   FIELD_SIZE) > 0",
          "680:      && strncasecmp(common_name, tunnel->config->gateway_host,",
          "681:                     FIELD_SIZE) == 0)",
          "682:   cert_valid = 1;",
          "",
          "[Added Lines]",
          "679:  if (validate_hostname(tunnel->config->gateway_host, cert) == MatchFound)",
          "680:    cert_valid = 1;",
          "",
          "---------------"
        ],
        "tests/lint/run.sh||tests/lint/run.sh": [
          "File: tests/lint/run.sh -> tests/lint/run.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: rc=0",
          "12: exit $rc",
          "",
          "[Removed Lines]",
          "6: ./tests/lint/eol-at-eof.sh $(git ls-files) || rc=1",
          "8: ./tests/lint/line_length.py $(git ls-files '*.[ch]') || rc=1",
          "10: ./tests/lint/astyle.sh $(git ls-files '*.[ch]') || rc=1",
          "",
          "[Added Lines]",
          "6: ./tests/lint/eol-at-eof.sh $(git ls-files | grep -v openssl_hostname_validation) || rc=1",
          "8: ./tests/lint/line_length.py $(git ls-files '*.[ch]' | grep -v openssl_hostname_validation) || rc=1",
          "10: ./tests/lint/astyle.sh $(git ls-files '*.[ch]' | grep -v openssl_hostname_validation) || rc=1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "191377cb90138bb771634deb0bd8115ae7c1341d",
      "candidate_info": {
        "commit_hash": "191377cb90138bb771634deb0bd8115ae7c1341d",
        "repo": "adrienverge/openfortivpn",
        "commit_url": "https://github.com/adrienverge/openfortivpn/commit/191377cb90138bb771634deb0bd8115ae7c1341d",
        "files": [
          "src/tunnel.c"
        ],
        "message": "Fix indentation style issue in tunnel.c",
        "before_after_code_files": [
          "src/tunnel.c||src/tunnel.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/tunnel.c||src/tunnel.c"
          ],
          "candidate": [
            "src/tunnel.c||src/tunnel.c"
          ]
        }
      },
      "candidate_diff": {
        "src/tunnel.c||src/tunnel.c": [
          "File: src/tunnel.c -> src/tunnel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "679:  if (validate_hostname(tunnel->config->gateway_host, cert) == MatchFound)",
          "681: #endif",
          "",
          "[Removed Lines]",
          "680:    cert_valid = 1;",
          "",
          "[Added Lines]",
          "680:   cert_valid = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60660e00b80bad0fadcf39aee86f6f8756c94f91",
      "candidate_info": {
        "commit_hash": "60660e00b80bad0fadcf39aee86f6f8756c94f91",
        "repo": "adrienverge/openfortivpn",
        "commit_url": "https://github.com/adrienverge/openfortivpn/commit/60660e00b80bad0fadcf39aee86f6f8756c94f91",
        "files": [
          "src/tunnel.c"
        ],
        "message": "correctly check return value of X509_check_host\n\nCVE-2020-7041 incorrect use of X509_check_host (regarding return value)\nis fixed with this commit.\n\nThe flaw came in with #242 and prevented proper host name verification\nwhen openssl >= 1.0.2 was in use since openfortivpn 1.7.0.",
        "before_after_code_files": [
          "src/tunnel.c||src/tunnel.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/tunnel.c||src/tunnel.c"
          ],
          "candidate": [
            "src/tunnel.c||src/tunnel.c"
          ]
        }
      },
      "candidate_diff": {
        "src/tunnel.c||src/tunnel.c": [
          "File: src/tunnel.c -> src/tunnel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "667: #ifdef HAVE_X509_CHECK_HOST",
          "670:   cert_valid = 1;",
          "671: #else",
          "",
          "[Removed Lines]",
          "669:  if (X509_check_host(cert, common_name, FIELD_SIZE, 0, NULL))",
          "",
          "[Added Lines]",
          "670:  if (X509_check_host(cert, common_name, FIELD_SIZE, 0, NULL) == 1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}