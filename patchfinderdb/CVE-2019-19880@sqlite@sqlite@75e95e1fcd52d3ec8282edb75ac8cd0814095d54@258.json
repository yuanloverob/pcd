{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01a3b6b1b2dae46b1a54264ce78ff95fb7fc2d95",
      "candidate_info": {
        "commit_hash": "01a3b6b1b2dae46b1a54264ce78ff95fb7fc2d95",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01a3b6b1b2dae46b1a54264ce78ff95fb7fc2d95",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "src/window.c"
        ],
        "message": "Change the meaning of the SQLITE_SUBTYPE flag so that it indicates that the user-defined function cares about the subtypes of its arguments.\n\nFossilOrigin-Name: af1bc20f502816db460d2b2d353f715da5cf660e59095de5214c829c1cb20981",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2504: #endif",
          "2505:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "2506:     rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg,",
          "2510:   }",
          "2511: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "2512:   for(i=0; i<sizeof(aAgg)/sizeof(aAgg[0]) && rc==SQLITE_OK; i++){",
          "2513:     rc = sqlite3_create_window_function(db, aAgg[i].zName, aAgg[i].nArg,",
          "2515:                                  aAgg[i].xStep, aAgg[i].xFinal,",
          "2516:                                  aAgg[i].xValue, jsonGroupInverse, 0);",
          "2517:   }",
          "",
          "[Removed Lines]",
          "2507:                         SQLITE_UTF8 | SQLITE_DETERMINISTIC | SQLITE_SUBTYPE,",
          "2508:                         (void*)&aFunc[i].flag,",
          "2509:                         aFunc[i].xFunc, 0, 0);",
          "2514:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "[Added Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2508:                                  (void*)&aFunc[i].flag,",
          "2509:                                  aFunc[i].xFunc, 0, 0);",
          "2514:                 SQLITE_SUBTYPE | SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14ef7543465dd14d8fa141fcceb1950b5c2d265a3e862323969d747b39c0cd8c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "869: }",
          "",
          "[Removed Lines]",
          "875: int exprListContainsSubtype(Parse *pParse, ExprList *pList){",
          "876:   if( pList ){",
          "877:     sqlite3 *db = pParse->db;",
          "878:     int i;",
          "879:     for(i=0; i<pList->nExpr; i++){",
          "880:       Expr *p = pList->a[i].pExpr;",
          "881:       if( p->op==TK_FUNCTION ){",
          "882:         FuncDef *pDef;",
          "883:         int nArg = 0;",
          "884:         if( !ExprHasProperty(p, EP_TokenOnly) && p->x.pList ){",
          "885:           nArg = p->x.pList->nExpr;",
          "886:         }",
          "887:         pDef = sqlite3FindFunction(db, p->u.zToken, nArg, db->enc, 0);",
          "888:         if( pDef && (pDef->funcFlags & SQLITE_FUNC_SUBTYPE) ){",
          "889:           return 1;",
          "890:         }",
          "891:       }",
          "892:     }",
          "893:   }",
          "894:   return 0;",
          "895: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "994:       ExprList *pArgs = pWin->pOwner->x.pList;",
          "996:         selectWindowRewriteEList(pParse, pMWin, pSrc, pArgs, pTab, &pSublist);",
          "997:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "998:         pWin->bExprArgs = 1;",
          "",
          "[Removed Lines]",
          "995:       if( exprListContainsSubtype(pParse, pArgs) ){",
          "",
          "[Added Lines]",
          "969:       if( pWin->pFunc->funcFlags & SQLITE_FUNC_SUBTYPE ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
      "candidate_info": {
        "commit_hash": "aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix another potential \"jump depends on uninitialized value\" warning.\n\nFossilOrigin-Name: 633b214e9b9d99788ed72ab4823a69a43c7c40ed07fb76c7d56c50453c0e58ab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b6751cd90601a1e2744a7d233c973291ecb783801b9327c3b99734dd22bcd27",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2268: ){",
          "2269:   WhereTerm *pTerm, *pX;",
          "2270:   Bitmask notAllowed = ~(pLoop->prereq|pLoop->maskSelf);",
          "2274:   assert( (pLoop->wsFlags & WHERE_AUTO_INDEX)==0 );",
          "",
          "[Removed Lines]",
          "2271:   int i, j, k;",
          "",
          "[Added Lines]",
          "2271:   int i, j;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2294:         pLoop->nOut--;",
          "2295:         if( pTerm->eOperator&(WO_EQ|WO_IS) ){",
          "2296:           Expr *pRight = pTerm->pExpr->pRight;",
          "2297:           testcase( pTerm->pExpr->op==TK_IS );",
          "2298:           if( sqlite3ExprIsInteger(pRight, &k) && k>=(-1) && k<=1 ){",
          "2299:             k = 10;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2297:           int k = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29e9af88484b2266189d694faa3eb3e69f0a7190",
      "candidate_info": {
        "commit_hash": "29e9af88484b2266189d694faa3eb3e69f0a7190",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29e9af88484b2266189d694faa3eb3e69f0a7190",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Change the way a comparison used to detect corrupt databases in fts3 is done to avoid potential pointer overflow in 32-bit builds.\n\nFossilOrigin-Name: 95a9a39ff784b960b62dd6298e722a620ba3f9c8b76839a49bbef35d7bc84a8e",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1413:    || (pReader->nPopulate==0 && pReader->aDoclist[pReader->nDoclist-1])",
          "1414:   ){",
          "1415:     return FTS_CORRUPT_VTAB;",
          "",
          "[Removed Lines]",
          "1412:   if( (&pReader->aNode[pReader->nNode] - pReader->aDoclist)<pReader->nDoclist",
          "",
          "[Added Lines]",
          "1412:   if( pReader->nDoclist-(pReader->aDoclist-pReader->aNode) > pReader->nNode",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b6494b1509f0d0189f98aa34c990eee99c775ff57826e79b2c5b0a12b4c97ad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab45fc041389b937cf82c20bec231905105f829d",
      "candidate_info": {
        "commit_hash": "ab45fc041389b937cf82c20bec231905105f829d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ab45fc041389b937cf82c20bec231905105f829d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h"
        ],
        "message": "INSERT with named columns for a table with generated columns.\n\nFossilOrigin-Name: 64db39f92d68d1b9f23e48af35e16b969c38b58041fbe900066eeb3ddb291cef",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 120c6b78cb51532f783014605f1107d40b2e4f54e3852fb1f8f167d0c0b78c69",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3382: ){",
          "3383:   Vdbe *v = pParse->pVdbe;",
          "3384:   assert( v!=0 );",
          "3385:   if( pTab==0 ){",
          "3386:     sqlite3VdbeAddOp3(v, OP_Column, iTabCur, iCol, regOut);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3384:   Column *pCol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3395:       op = OP_VColumn;",
          "3396:       x = iCol;",
          "3397: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3403:       return;",
          "3404: #endif",
          "3405:     }else if( !HasRowid(pTab) ){",
          "",
          "[Removed Lines]",
          "3398:     }else if( pTab->aCol[iCol].colFlags & COLFLAG_VIRTUAL ){",
          "3399:       int savedSelfTab = pParse->iSelfTab;",
          "3400:       pParse->iSelfTab = iTabCur+1;",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, regOut);",
          "3402:       pParse->iSelfTab = savedSelfTab;",
          "",
          "[Added Lines]",
          "3399:     }else if( (pCol = &pTab->aCol[iCol])->colFlags & COLFLAG_VIRTUAL ){",
          "3400:       if( pCol->colFlags & COLFLAG_BUSY ){",
          "3401:         sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\", pCol->zName);",
          "3402:       }else{",
          "3403:         int savedSelfTab = pParse->iSelfTab;",
          "3404:         pCol->colFlags |= COLFLAG_BUSY;",
          "3405:         pParse->iSelfTab = iTabCur+1;",
          "3406:         sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, regOut);",
          "3407:         pParse->iSelfTab = savedSelfTab;",
          "3408:         pCol->colFlags &= ~COLFLAG_BUSY;",
          "3409:       }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){",
          "134:   char *zColAff = pTab->zColAff;",
          "135:   if( zColAff==0 ){",
          "136:     sqlite3 *db = sqlite3VdbeDb(v);",
          "",
          "[Removed Lines]",
          "133:   int i;",
          "",
          "[Added Lines]",
          "133:   int i, j;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:       return;",
          "141:     }",
          "144:       assert( pTab->aCol[i].affinity!=0 );",
          "146:     }",
          "147:     do{",
          "150:     pTab->zColAff = zColAff;",
          "151:   }",
          "152:   assert( zColAff!=0 );",
          "",
          "[Removed Lines]",
          "143:     for(i=0; i<pTab->nCol; i++){",
          "145:       zColAff[i] = pTab->aCol[i].affinity;",
          "148:       zColAff[i--] = 0;",
          "149:     }while( i>=0 && zColAff[i]<=SQLITE_AFF_BLOB );",
          "",
          "[Added Lines]",
          "143:     for(i=j=0; i<pTab->nCol; i++){",
          "145:       if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ){",
          "146:         zColAff[j++] = pTab->aCol[i].affinity;",
          "147:       }",
          "150:       zColAff[j--] = 0;",
          "151:     }while( j>=0 && zColAff[j]<=SQLITE_AFF_BLOB );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1006:     nHidden = 0;",
          "1007:     iRegStore = regRowid+1;",
          "1008:     for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "1009:       if( i==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:       int k;",
          "1012:       assert( i>=nHidden );",
          "1013:       assert( iRegStore==sqlite3ColumnOfTable(pTab,i)+regRowid+1 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1015:         sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "1016:         continue;",
          "1017:       }",
          "1026:         }else{",
          "1032:         }",
          "1033:       }",
          "1035:         sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1038:       }else if( pSelect ){",
          "1039:         if( regFromSelect!=regData ){",
          "1041:         }",
          "1042:       }else{",
          "1044:       }",
          "1045:     }",
          "",
          "[Removed Lines]",
          "1018:       if( pColumn==0 ){",
          "1019:         if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ){",
          "1020:           j = -1;",
          "1021:           nHidden++;",
          "1022:           if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1023:             iRegStore--;",
          "1024:             continue;",
          "1025:           }",
          "1027:           j = i - nHidden;",
          "1028:         }",
          "1029:       }else{",
          "1030:         for(j=0; j<pColumn->nId; j++){",
          "1031:           if( pColumn->a[j].idx==i ) break;",
          "1034:       if( j<0 || nColumn==0 || (pColumn && j>=pColumn->nId) ){",
          "1036:       }else if( useTempTable ){",
          "1037:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, j, iRegStore);",
          "1040:           sqlite3VdbeAddOp2(v, OP_SCopy, regFromSelect+j, iRegStore);",
          "1043:         sqlite3ExprCode(pParse, pList->a[j].pExpr, iRegStore);",
          "",
          "[Added Lines]",
          "1023:       if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ){",
          "1024:         nHidden++;",
          "1025:         if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1027:           iRegStore--;",
          "1030:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1032:         continue;",
          "1034:       if( pColumn ){",
          "1035:         for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}",
          "1036:         if( j>=pColumn->nId ){",
          "1039:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1040:           continue;",
          "1041:         }",
          "1042:         k = j;",
          "1043:       }else if( nColumn==0 ){",
          "1045:         continue;",
          "1046:       }else{",
          "1047:         k = i - nHidden;",
          "1048:       }",
          "1050:       if( useTempTable ){",
          "1051:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, k, iRegStore);",
          "1054:           sqlite3VdbeAddOp2(v, OP_SCopy, regFromSelect+k, iRegStore);",
          "1057:         sqlite3ExprCode(pParse, pList->a[k].pExpr, iRegStore);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "323096175ee537ccf20ff370868170ebc32a2c32",
      "candidate_info": {
        "commit_hash": "323096175ee537ccf20ff370868170ebc32a2c32",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/323096175ee537ccf20ff370868170ebc32a2c32",
        "files": [
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove the vfslog.c extension from the testfixture target in main.mk, as that extension has no TCL bindings and is inaccessible.\n\nFossilOrigin-Name: d71f8bbc4efd8af935671c4e7626862d6e5a4c2e51527b9e82b2f0c94ddf6e93",
        "before_after_code_files": [
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:   $(TOP)/ext/misc/totype.c \\",
          "379:   $(TOP)/ext/misc/unionvtab.c \\",
          "380:   $(TOP)/ext/misc/wholenumber.c \\",
          "382:   $(TOP)/ext/misc/zipfile.c \\",
          "383:   $(TOP)/ext/fts5/fts5_tcl.c \\",
          "384:   $(TOP)/ext/fts5/fts5_test_mi.c \\",
          "",
          "[Removed Lines]",
          "381:   $(TOP)/ext/misc/vfslog.c \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 31eb27f438ad727b095a518bfe0f7ed37cb806fc1e6929b821eddcc6cc9de260",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}