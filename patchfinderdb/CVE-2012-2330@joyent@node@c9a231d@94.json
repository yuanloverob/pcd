{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "92cb684e784d09c05d3e5d9fc16b2e4ef9fbeba8",
      "candidate_info": {
        "commit_hash": "92cb684e784d09c05d3e5d9fc16b2e4ef9fbeba8",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/92cb684e784d09c05d3e5d9fc16b2e4ef9fbeba8",
        "files": [
          "test/fixtures/a1.js"
        ],
        "message": "Change test fixture from symlink to regular file\n\nThe only test using this is test/simple/test-fs-chmod.js, and it was\ntreating a.js and a1.js as two separate files, resulting in a race\ncondition.  (Interestingly enough, it was *not* using the symlink file to\ntest lchmod, which uses a different temp file.)",
        "before_after_code_files": [
          "test/fixtures/a1.js||test/fixtures/a1.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/fixtures/a1.js||test/fixtures/a1.js": [
          "File: test/fixtures/a1.js -> test/fixtures/a1.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var c = require('./b/c');",
          "24: console.error('load fixtures/a.js');",
          "26: var string = 'A';",
          "28: exports.SomeClass = c.SomeClass;",
          "30: exports.A = function() {",
          "31:   return string;",
          "32: };",
          "34: exports.C = function() {",
          "35:   return c.C();",
          "36: };",
          "38: exports.D = function() {",
          "39:   return c.D();",
          "40: };",
          "42: exports.number = 42;",
          "44: process.on('exit', function() {",
          "45:   string = 'A done';",
          "46: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ebbd4039bceb82e47573bdb213d1ec015ad67b61",
      "candidate_info": {
        "commit_hash": "ebbd4039bceb82e47573bdb213d1ec015ad67b61",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ebbd4039bceb82e47573bdb213d1ec015ad67b61",
        "files": [
          "doc/api/buffer.markdown",
          "lib/buffer.js",
          "test/simple/test-buffer.js"
        ],
        "message": "buffer: add UTF-16LE encoding name.",
        "before_after_code_files": [
          "lib/buffer.js||libuffer.js",
          "test/simple/test-buffer.js||test/simple/test-buffer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/buffer.js||libuffer.js": [
          "File: lib/buffer.js -> libuffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     case 'ucs2':",
          "91:     case 'ucs-2':",
          "92:       return this.ucs2Slice(start, end);",
          "94:     default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:     case 'ucs2':",
          "175:     case 'ucs-2':",
          "176:       return this.ucs2Write(string, offset, length);",
          "178:     default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "375:     case 'ucs2':",
          "376:     case 'ucs-2':",
          "377:       ret = this.parent.ucs2Write(string, this.offset + offset, length);",
          "378:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "426:     case 'ucs2':",
          "427:     case 'ucs-2':",
          "428:       return this.parent.ucs2Slice(start, end);",
          "430:     default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-buffer.js||test/simple/test-buffer.js": [
          "File: test/simple/test-buffer.js -> test/simple/test-buffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "266: assert.equal(charsWritten, 2);",
          "267: assert.deepEqual(f, new Buffer([0x42, 0x30, 0x44, 0x30, 0x00]));",
          "270: var arrayIsh = {0: 0, 1: 1, 2: 2, 3: 3, length: 4};",
          "271: var g = new Buffer(arrayIsh);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: var f = new Buffer('\\uD83D\\uDC4D', 'utf-16le'); // THUMBS UP SIGN (U+1F44D)",
          "270: assert.equal(f.length, 4);",
          "271: assert.deepEqual(f, new Buffer('3DD84DDC', 'hex'));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d53cdc5378db082cda85179f1172db27a14dd33e",
      "candidate_info": {
        "commit_hash": "d53cdc5378db082cda85179f1172db27a14dd33e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d53cdc5378db082cda85179f1172db27a14dd33e",
        "files": [
          "doc/api/buffer.markdown",
          "lib/buffer.js",
          "test/simple/test-buffer-concat.js"
        ],
        "message": "Add Buffer.concat method\n\nWe write out this loop a lot of places throughout node.\nIt clearly needs to be an API method.",
        "before_after_code_files": [
          "lib/buffer.js||libuffer.js",
          "test/simple/test-buffer-concat.js||test/simple/test-buffer-concat.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/buffer.js||libuffer.js": [
          "File: lib/buffer.js -> libuffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "469: };",
          "473: Buffer.prototype.copy = function(target, target_start, start, end) {",
          "474:   var source = this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-buffer-concat.js||test/simple/test-buffer-concat.js": [
          "File: test/simple/test-buffer-concat.js -> test/simple/test-buffer-concat.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: var zero = [];",
          "26: var one  = [ new Buffer('asdf') ];",
          "27: var long = [];",
          "28: for (var i = 0; i < 10; i++) long.push(new Buffer('asdf'));",
          "30: var flatZero = Buffer.concat(zero);",
          "31: var flatOne = Buffer.concat(one);",
          "32: var flatLong = Buffer.concat(long);",
          "33: var flatLongLen = Buffer.concat(long, 40);",
          "35: assert(flatZero.length === 0);",
          "36: assert(flatOne.toString() === 'asdf');",
          "37: assert(flatOne === one[0]);",
          "38: assert(flatLong.toString() === (new Array(10+1).join('asdf')));",
          "39: assert(flatLongLen.toString() === (new Array(10+1).join('asdf')));",
          "41: console.log(\"ok\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff0f0aeb401765646fefd9bbdc0f2a68d1ad342c",
      "candidate_info": {
        "commit_hash": "ff0f0aeb401765646fefd9bbdc0f2a68d1ad342c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ff0f0aeb401765646fefd9bbdc0f2a68d1ad342c",
        "files": [
          "src/node.js",
          "test/fixtures/catch-stdout-error.js",
          "test/simple/test-stdout-close-catch.js"
        ],
        "message": "Fix #2507 Raise errors less agressively when destroying stdio streams\n\nAlso, if an error is already provided, then raise the provided\nerror, rather than throwing it with a less helpful 'stdout cannot\nbe closed' message.\n\nThis is important for properly handling EPIPEs.",
        "before_after_code_files": [
          "src/node.js||src/node.js",
          "test/fixtures/catch-stdout-error.js||test/fixtures/catch-stdout-error.js",
          "test/simple/test-stdout-close-catch.js||test/simple/test-stdout-close-catch.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:     process.__defineGetter__('stdout', function() {",
          "281:       if (stdout) return stdout;",
          "282:       stdout = createWritableStdioStream(1);",
          "285:       };",
          "286:       return stdout;",
          "287:     });",
          "",
          "[Removed Lines]",
          "283:       stdout.end = stdout.destroy = stdout.destroySoon = function() {",
          "284:         throw new Error('process.stdout cannot be closed');",
          "",
          "[Added Lines]",
          "283:       stdout.destroy = stdout.destroySoon = function(er) {",
          "284:         er = er || new Error('process.stdout cannot be closed.');",
          "285:         stdout.emit('error', er);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:     process.__defineGetter__('stderr', function() {",
          "290:       if (stderr) return stderr;",
          "291:       stderr = createWritableStdioStream(2);",
          "294:       };",
          "295:       return stderr;",
          "296:     });",
          "",
          "[Removed Lines]",
          "292:       stderr.end = stderr.destroy = stderr.destroySoon = function() {",
          "293:         throw new Error('process.stderr cannot be closed');",
          "",
          "[Added Lines]",
          "293:       stderr.destroy = stderr.destroySoon = function(er) {",
          "294:         er = er || new Error('process.stderr cannot be closed.');",
          "295:         stderr.emit('error', er);",
          "",
          "---------------"
        ],
        "test/fixtures/catch-stdout-error.js||test/fixtures/catch-stdout-error.js": [
          "File: test/fixtures/catch-stdout-error.js -> test/fixtures/catch-stdout-error.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: function write() {",
          "23:   try {",
          "24:     process.stdout.write('Hello, world\\n');",
          "25:   } catch (ex) {",
          "26:     throw new Error('this should never happen');",
          "27:   }",
          "28:   process.nextTick(function () {",
          "29:     write();",
          "30:   });",
          "31: }",
          "33: process.stdout.on('error', function (er) {",
          "34:   console.error(JSON.stringify(er));",
          "35:   process.exit(42);",
          "36: });",
          "38: write();",
          "",
          "---------------"
        ],
        "test/simple/test-stdout-close-catch.js||test/simple/test-stdout-close-catch.js": [
          "File: test/simple/test-stdout-close-catch.js -> test/simple/test-stdout-close-catch.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: var common = require('../common');",
          "24: var assert = require('assert');",
          "25: var path = require('path');",
          "26: var child_process = require('child_process');",
          "27: var fs = require('fs');",
          "29: var testScript = path.join(common.fixturesDir, 'catch-stdout-error.js');",
          "31: var cmd = JSON.stringify(process.execPath) + ' ' +",
          "32:           JSON.stringify(testScript) + ' | ' +",
          "33:           JSON.stringify(process.execPath) + ' ' +",
          "34:           '-pe \"process.exit(1);\"';",
          "36: var child = child_process.exec(cmd);",
          "37: var output = '';",
          "38: var outputExpect = { 'code': 'EPIPE',",
          "39:                      'errno': 'EPIPE',",
          "40:                      'syscall': 'write' };",
          "42: child.stderr.on('data', function (c) {",
          "43:   output += c;",
          "44: });",
          "46: child.on('exit', function(code) {",
          "47:   try {",
          "48:     output = JSON.parse(output);",
          "49:   } catch (er) {",
          "50:     console.error(output);",
          "51:     process.exit(1);",
          "52:   }",
          "54:   assert.deepEqual(output, outputExpect);",
          "55:   console.log('ok');",
          "56: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09150b0616906a9ce1533796ec49c4bee8841e48",
      "candidate_info": {
        "commit_hash": "09150b0616906a9ce1533796ec49c4bee8841e48",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/09150b0616906a9ce1533796ec49c4bee8841e48",
        "files": [
          "src/node.h",
          "src/node_file.cc"
        ],
        "message": "node: replace NODE_STAT_STRUCT with uv_statbuf_t",
        "before_after_code_files": [
          "src/node.h||src/node.h",
          "src/node_file.cc||src/node_file.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:                     v8::Handle<v8::Value>,",
          "145:                     enum encoding encoding = BINARY);",
          "",
          "[Removed Lines]",
          "149: #if __POSIX__",
          "150: # define NODE_STAT        stat",
          "151: # define NODE_FSTAT       fstat",
          "152: # define NODE_STAT_STRUCT struct stat",
          "153: #else // _WIN32",
          "154: # define NODE_STAT        _stati64",
          "155: # define NODE_FSTAT       _fstati64",
          "156: # define NODE_STAT_STRUCT struct _stati64",
          "157: #endif",
          "159: v8::Local<v8::Object> BuildStatsObject(NODE_STAT_STRUCT *s);",
          "",
          "[Added Lines]",
          "147: v8::Local<v8::Object> BuildStatsObject(const uv_statbuf_t* s);",
          "",
          "---------------"
        ],
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:       case UV_FS_STAT:",
          "159:       case UV_FS_LSTAT:",
          "160:       case UV_FS_FSTAT:",
          "165:         break;",
          "167:       case UV_FS_READLINK:",
          "",
          "[Removed Lines]",
          "161:         {",
          "162:           NODE_STAT_STRUCT *s = reinterpret_cast<NODE_STAT_STRUCT*>(req->ptr);",
          "163:           argv[1] = BuildStatsObject(s);",
          "164:         }",
          "",
          "[Added Lines]",
          "161:         argv[1] = BuildStatsObject(static_cast<const uv_statbuf_t*>(req->ptr));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284: static Persistent<String> mtime_symbol;",
          "285: static Persistent<String> ctime_symbol;",
          "288:   HandleScope scope;",
          "290:   if (dev_symbol.IsEmpty()) {",
          "",
          "[Removed Lines]",
          "287: Local<Object> BuildStatsObject(NODE_STAT_STRUCT *s) {",
          "",
          "[Added Lines]",
          "284: Local<Object> BuildStatsObject(const uv_statbuf_t* s) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362:     ASYNC_CALL(stat, args[1], *path)",
          "363:   } else {",
          "364:     SYNC_CALL(stat, *path, *path)",
          "366:   }",
          "367: }",
          "",
          "[Removed Lines]",
          "365:     return scope.Close(BuildStatsObject((NODE_STAT_STRUCT*)SYNC_REQ.ptr));",
          "",
          "[Added Lines]",
          "362:     return scope.Close(",
          "363:         BuildStatsObject(static_cast<const uv_statbuf_t*>(SYNC_REQ.ptr)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378:     ASYNC_CALL(lstat, args[1], *path)",
          "379:   } else {",
          "380:     SYNC_CALL(lstat, *path, *path)",
          "382:   }",
          "383: }",
          "",
          "[Removed Lines]",
          "381:     return scope.Close(BuildStatsObject((NODE_STAT_STRUCT*)SYNC_REQ.ptr));",
          "",
          "[Added Lines]",
          "379:     return scope.Close(",
          "380:         BuildStatsObject(static_cast<const uv_statbuf_t*>(SYNC_REQ.ptr)));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "395:     ASYNC_CALL(fstat, args[1], fd)",
          "396:   } else {",
          "397:     SYNC_CALL(fstat, 0, fd)",
          "399:   }",
          "400: }",
          "",
          "[Removed Lines]",
          "398:     return scope.Close(BuildStatsObject((NODE_STAT_STRUCT*)SYNC_REQ.ptr));",
          "",
          "[Added Lines]",
          "397:     return scope.Close(",
          "398:         BuildStatsObject(static_cast<const uv_statbuf_t*>(SYNC_REQ.ptr)));",
          "",
          "---------------"
        ]
      }
    }
  ]
}