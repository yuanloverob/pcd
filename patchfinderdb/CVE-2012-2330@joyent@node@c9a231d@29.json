{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ad2717fd88e5ddd28a1c245c78b37bfe9aa4197",
      "candidate_info": {
        "commit_hash": "0ad2717fd88e5ddd28a1c245c78b37bfe9aa4197",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0ad2717fd88e5ddd28a1c245c78b37bfe9aa4197",
        "files": [
          "src/node_zlib.cc"
        ],
        "message": "Make sure that zlib contexts are not garbage collected when busy",
        "before_after_code_files": [
          "src/node_zlib.cc||src/node_zlib.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:                   ZCtx<mode>::After);",
          "136:     req_wrap->Dispatched();",
          "138:     return req_wrap->object_;",
          "139:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:     ctx->Ref();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:     delete req_wrap;",
          "194:   }",
          "196:   static Handle<Value>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:     ctx->Unref();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "acf19500eed8805cd038e38c14d692f5684ea375",
      "candidate_info": {
        "commit_hash": "acf19500eed8805cd038e38c14d692f5684ea375",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/acf19500eed8805cd038e38c14d692f5684ea375",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on 0.6.17",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 6",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "31: #define NODE_PATCH_VERSION 16",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "31: #define NODE_PATCH_VERSION 17",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd9fa2e8419dda3ecff55ca7d801af3db4aeb5b2",
      "candidate_info": {
        "commit_hash": "bd9fa2e8419dda3ecff55ca7d801af3db4aeb5b2",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/bd9fa2e8419dda3ecff55ca7d801af3db4aeb5b2",
        "files": [
          "src/udp_wrap.cc"
        ],
        "message": "dgram: use slab memory allocator\n\nChange udp memory allocation scheme from uv_buf_init to slab allocation. Takes\nslab allocation scheme from stream_wrap.",
        "before_after_code_files": [
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     return scope.Close(Integer::New(-1));                                   \\",
          "60:   }",
          "63: Persistent<String> address_symbol;",
          "64: Persistent<String> port_symbol;",
          "65: Persistent<String> buffer_sym;",
          "67: void AddressToJS(Handle<Object> info,",
          "68:                  const sockaddr* addr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: #define SLAB_SIZE (1024 * 1024)",
          "63: #define MIN(a, b) ((a) < (b) ? (a) : (b))",
          "69: static Persistent<String> udp_slab_sym;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: typedef ReqWrap<uv_udp_send_t> SendWrap;",
          "73: class UDPWrap: public HandleWrap {",
          "74: public:",
          "75:   static void Initialize(Handle<Object> target);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: static size_t slab_used;",
          "79: size_t slab_offset_;",
          "80: static uv_handle_t* handle_that_last_alloced;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:   static Handle<Value> GetSockName(const Arguments& args);",
          "85: private:",
          "86:   UDPWrap(Handle<Object> object);",
          "87:   virtual ~UDPWrap();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:   static inline char* NewSlab(v8::Handle<v8::Object> global, v8::Handle<v8::Object> wrap_obj);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:   HandleScope scope;",
          "121:   buffer_sym = NODE_PSYMBOL(\"buffer\");",
          "122:   port_symbol = NODE_PSYMBOL(\"port\");",
          "123:   address_symbol = NODE_PSYMBOL(\"address\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:   udp_slab_sym = Persistent<String>::New(String::NewSymbol(\"udpslab\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "334: uv_buf_t UDPWrap::OnAlloc(uv_handle_t* handle, size_t suggested_size) {",
          "342: }",
          "",
          "[Removed Lines]",
          "336:   return uv_buf_init(new char[suggested_size], suggested_size);",
          "337: }",
          "340: static void ReleaseMemory(char* data, void* arg) {",
          "341:   delete[] data; // data == buf.base",
          "",
          "[Added Lines]",
          "347:   HandleScope scope;",
          "349:   UDPWrap* wrap = static_cast<UDPWrap*>(handle->data);",
          "351:   char* slab = NULL;",
          "353:   Handle<Object> global = Context::GetCurrent()->Global();",
          "354:   Local<Value> slab_v = global->GetHiddenValue(udp_slab_sym);",
          "356:   if (slab_v.IsEmpty()) {",
          "358:     slab = NewSlab(global, wrap->object_);",
          "359:   } else {",
          "361:     Local<Object> slab_obj = slab_v->ToObject();",
          "362:     slab = Buffer::Data(slab_obj);",
          "363:     assert(Buffer::Length(slab_obj) == SLAB_SIZE);",
          "364:     assert(SLAB_SIZE >= slab_used);",
          "367:     if (SLAB_SIZE - slab_used < 64 * 1024) {",
          "368:       slab = NewSlab(global, wrap->object_);",
          "369:     } else {",
          "370:       wrap->object_->SetHiddenValue(udp_slab_sym, slab_obj);",
          "371:     }",
          "372:   }",
          "374:   uv_buf_t buf;",
          "375:   buf.base = slab + slab_used;",
          "376:   buf.len = MIN(SLAB_SIZE - slab_used, suggested_size);",
          "378:   slab_offset_ = slab_used;",
          "379:   slab_used += buf.len;",
          "381:   handle_that_last_alloced = reinterpret_cast<uv_handle_t*>(handle);",
          "383:   return buf;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "348:                      struct sockaddr* addr,",
          "349:                      unsigned flags) {",
          "350:   if (nread == 0) {",
          "352:     return;",
          "353:   }",
          "",
          "[Removed Lines]",
          "351:     ReleaseMemory(buf.base, NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "366:   if (nread == -1) {",
          "367:     SetErrno(uv_last_error(uv_default_loop()));",
          "369:   }",
          "370:   else {",
          "371:     Local<Object> rinfo = Object::New();",
          "372:     AddressToJS(rinfo, addr, sizeof *addr);",
          "374:     argv[3] = rinfo;",
          "375:   }",
          "377:   MakeCallback(wrap->object_, \"onmessage\", ARRAY_SIZE(argv), argv);",
          "378: }",
          "381: void AddressToJS(Handle<Object> info,",
          "382:                  const sockaddr* addr,",
          "",
          "[Removed Lines]",
          "368:     ReleaseMemory(buf.base, NULL);",
          "373:     argv[2] = Buffer::New(buf.base, nread, ReleaseMemory, NULL)->handle_;",
          "",
          "[Added Lines]",
          "414:     argv[2] = Buffer::New(buf.base, nread, NULL, NULL)->handle_;",
          "421: inline char* UDPWrap::NewSlab(Handle<Object> global,",
          "422:                                         Handle<Object> wrap_obj) {",
          "423:   Buffer* b = Buffer::New(SLAB_SIZE);",
          "424:   global->SetHiddenValue(udp_slab_sym, b->handle_);",
          "425:   assert(Buffer::Length(b) == SLAB_SIZE);",
          "426:   slab_used = 0;",
          "427:   wrap_obj->SetHiddenValue(udp_slab_sym, b->handle_);",
          "428:   return Buffer::Data(b);",
          "429: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07d8a4650e9e499d479715b6031cdba7096b7385",
      "candidate_info": {
        "commit_hash": "07d8a4650e9e499d479715b6031cdba7096b7385",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/07d8a4650e9e499d479715b6031cdba7096b7385",
        "files": [
          "lib/http.js"
        ],
        "message": "Break up huge function in ClientRequest.onSocket",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:   if (sentConnectionHeader === false) {",
          "492:     if (this.shouldKeepAlive &&",
          "494:       messageHeader += 'Connection: keep-alive\\r\\n';",
          "495:     } else {",
          "496:       this._last = true;",
          "",
          "[Removed Lines]",
          "493:         (sentContentLengthHeader || this.useChunkedEncodingByDefault || this.agent)) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524: OutgoingMessage.prototype.setHeader = function(name, value) {",
          "525:   if (arguments.length < 2) {",
          "527:   }",
          "529:   if (this._header) {",
          "",
          "[Removed Lines]",
          "526:     throw new Error(\"`name` and `value` are required for setHeader().\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "541: OutgoingMessage.prototype.getHeader = function(name) {",
          "542:   if (arguments.length < 1) {",
          "544:   }",
          "546:   if (!this._headers) return;",
          "",
          "[Removed Lines]",
          "543:     throw new Error(\"`name` is required for getHeader().\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "553: OutgoingMessage.prototype.removeHeader = function(name) {",
          "554:   if (arguments.length < 1) {",
          "556:   }",
          "558:   if (this._header) {",
          "",
          "[Removed Lines]",
          "555:     throw new Error(\"`name` is required for removeHeader().\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1078:     self._last = true;",
          "1079:     self.shouldKeepAlive = false;",
          "1080:     if (options.createConnection) {",
          "1082:     } else {",
          "1083:       self.onSocket(net.createConnection(options.port, options.host));",
          "1084:     }",
          "",
          "[Removed Lines]",
          "1081:       self.onSocket(options.createConnection(options.port, options.host, options));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1095: exports.ClientRequest = ClientRequest;",
          "1097: ClientRequest.prototype._implicitHeader = function() {",
          "1099: };",
          "1101: ClientRequest.prototype.abort = function() {",
          "",
          "[Removed Lines]",
          "1098:   this._storeHeader(this.method + ' ' + this.path + ' HTTP/1.1\\r\\n', this._renderHeaders());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1131:     if (parser.socket) {",
          "1132:       parser.socket.onend = null;",
          "1133:       parser.socket.ondata = null;",
          "1134:     }",
          "1135:     parser.socket = null;",
          "1136:     parser.incoming = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1140:   if (req) {",
          "1141:     req.parser = null;",
          "1142:   }",
          "1146: ClientRequest.prototype.onSocket = function(socket) {",
          "1147:   var req = this;",
          "1148:   process.nextTick(function() {",
          "1149:     var parser = parsers.alloc();",
          "1150:     req.socket = socket;",
          "1151:     req.connection = socket;",
          "1153:     parser.socket = socket;",
          "1154:     parser.incoming = null;",
          "1155:     req.parser = parser;",
          "1157:     socket._httpMessage = req;",
          "1159:     httpSocketSetup(socket);",
          "1309:     req.emit('socket', socket);",
          "1310:   });",
          "1312: };",
          "1314: ClientRequest.prototype._deferToConnect = function(method, arguments_, cb) {",
          "",
          "[Removed Lines]",
          "1143: };",
          "1152:     parser.reinitialize(HTTPParser.RESPONSE);",
          "1161:     function errorListener(err) {",
          "1162:       debug('HTTP SOCKET ERROR: ' + err.message + '\\n' + err.stack);",
          "1163:       if (req) {",
          "1164:         req.emit('error', err);",
          "1167:         req._hadError = true;",
          "1168:       }",
          "1169:       if (parser) {",
          "1170:         parser.finish();",
          "1171:         freeParser(parser, req);",
          "1172:       }",
          "1173:       socket.destroy();",
          "1174:     }",
          "1176:     socket.on('error', errorListener);",
          "1178:     socket.ondata = function(d, start, end) {",
          "1179:       var ret = parser.execute(d, start, end - start);",
          "1180:       if (ret instanceof Error) {",
          "1181:         debug('parse error');",
          "1182:         freeParser(parser, req);",
          "1183:         socket.destroy(ret);",
          "1184:       } else if (parser.incoming && parser.incoming.upgrade) {",
          "1185:         var bytesParsed = ret;",
          "1186:         socket.ondata = null;",
          "1187:         socket.onend = null;",
          "1189:         var res = parser.incoming;",
          "1190:         req.res = res;",
          "1193:         var upgradeHead = d.slice(start + bytesParsed, end);",
          "1194:         if (req.listeners('upgrade').length) {",
          "1196:           req.upgraded = true;",
          "1197:           req.emit('upgrade', res, socket, upgradeHead);",
          "1198:           socket.emit('agentRemove');",
          "1199:         } else {",
          "1201:           socket.destroy();",
          "1202:         }",
          "1203:         freeParser(parser, req);",
          "1204:       } else if (parser.incoming && parser.incoming.complete &&",
          "1208:                  parser.incoming.statusCode !== 100) {",
          "1209:         freeParser(parser, req);",
          "1210:       }",
          "1211:     };",
          "1213:     socket.onend = function() {",
          "1214:       if (!req.res) {",
          "1217:         req.emit('error', createHangUpError());",
          "1218:         req._hadError = true;",
          "1219:       }",
          "1220:       if (parser) {",
          "1221:         parser.finish();",
          "1222:         freeParser(parser, req);",
          "1223:       }",
          "1224:       socket.destroy();",
          "1225:     };",
          "1227:     var closeListener = function() {",
          "1228:       debug('HTTP socket close');",
          "1229:       req.emit('close');",
          "1230:       if (req.res && req.res.readable) {",
          "1232:         req.res.emit('aborted');",
          "1233:         req.res.emit('end');",
          "1234:         req.res.emit('close');",
          "1235:       } else if (!req.res && !req._hadError) {",
          "1239:         req.emit('error', createHangUpError());",
          "1240:       }",
          "1246:       req = null;",
          "1247:       socket._httpMessage = null;",
          "1248:     }",
          "1249:     socket.on('close', closeListener);",
          "1251:     parser.onIncoming = function(res, shouldKeepAlive) {",
          "1252:       debug('AGENT incoming response!');",
          "1254:       if (req.res) {",
          "1257:         socket.destroy();",
          "1258:         return;",
          "1259:       }",
          "1260:       req.res = res;",
          "1267:       var isHeadResponse = req.method == 'HEAD';",
          "1268:       debug('AGENT isHeadResponse ' + isHeadResponse);",
          "1270:       if (res.statusCode == 100) {",
          "1272:         delete req.res; // Clear res so that we don't hit double-responses.",
          "1273:         req.emit('continue');",
          "1274:         return true;",
          "1275:       }",
          "1277:       if (req.shouldKeepAlive && !shouldKeepAlive && !req.upgraded) {",
          "1281:         req.shouldKeepAlive = false;",
          "1282:       }",
          "1284:       res.addListener('end', function() {",
          "1285:         if (!req.shouldKeepAlive) {",
          "1286:           if (socket.writable) {",
          "1287:             debug('AGENT socket.destroySoon()');",
          "1288:             socket.destroySoon();",
          "1289:           }",
          "1290:           assert(!socket.writable);",
          "1291:         } else {",
          "1292:           debug('AGENT socket keep-alive');",
          "1293:         }",
          "1294:       });",
          "1296:       DTRACE_HTTP_CLIENT_RESPONSE(socket, req);",
          "1297:       req.emit('response', res);",
          "1299:       res.on('end', function() {",
          "1300:         if (req.shouldKeepAlive) {",
          "1301:           socket.removeListener('close', closeListener);",
          "1302:           socket.removeListener('error', errorListener);",
          "1303:           socket.emit('free');",
          "1304:         }",
          "1305:       });",
          "1307:       return isHeadResponse;",
          "1308:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d1476a3168effe3edb32510f56cf9b00bce8392",
      "candidate_info": {
        "commit_hash": "3d1476a3168effe3edb32510f56cf9b00bce8392",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3d1476a3168effe3edb32510f56cf9b00bce8392",
        "files": [
          "tools/addon.gypi",
          "tools/gyp_addon",
          "tools/installer.js",
          "tools/node-gyp"
        ],
        "message": "gyp: install node-gyp\n\n* fixes #2480",
        "before_after_code_files": [
          "tools/addon.gypi||tools/addon.gypi",
          "tools/installer.js||tools/installer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/addon.gypi||tools/addon.gypi": [
          "File: tools/addon.gypi -> tools/addon.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:     'type': 'loadable_module',",
          "4:     'product_extension': 'node',",
          "5:     'product_prefix': '',",
          "12:     'conditions': [",
          "13:       [ 'OS==\"mac\"', {",
          "15:       }]",
          "16:     ]",
          "17:   }",
          "",
          "[Removed Lines]",
          "6:     'include_dirs': [",
          "7:       '../src',",
          "8:       '../deps/uv/include',",
          "9:       '../deps/v8/include'",
          "10:     ],",
          "14:         'libraries': [ '-undefined dynamic_lookup' ],",
          "",
          "[Added Lines]",
          "9:         'libraries': [ '-undefined dynamic_lookup' ]",
          "10:       }],",
          "11:       [ 'OS==\"win\"', {",
          "12:         'include_dirs': [",
          "13:           '../src',",
          "14:           '../deps/uv/include',",
          "15:           '../deps/v8/include'",
          "16:         ],",
          "17:         'libraries': [ '-l<(node_root_dir>/Debug/node.lib' ],",
          "18:       }, {",
          "19:         'include_dirs': ['../../../include/node']",
          "",
          "---------------"
        ],
        "tools/installer.js||tools/installer.js": [
          "File: tools/installer.js -> tools/installer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   copy([",
          "94:     'deps/uv/include/ares.h',",
          "95:     'deps/uv/include/ares_version.h'",
          "99:   copy('out/Release/node', 'bin/node');",
          "",
          "[Removed Lines]",
          "96:   ], 'include/node/c-ares/');",
          "",
          "[Added Lines]",
          "96:   ], 'include/node/');",
          "99:   copy('common.gypi', 'lib/node/');",
          "100:   copy('tools/*', 'lib/node/tools/');",
          "101:   queue.push('ln -sf ../lib/node/tools/node-gyp ' +",
          "102:              path.join(node_prefix, 'bin/node-gyp'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   }",
          "107: } else {",
          "108:   remove([",
          "110:   ]);",
          "111: }",
          "",
          "[Removed Lines]",
          "109:      'bin/node', 'bin/npm', 'include/node/*', 'lib/node_modules'",
          "",
          "[Added Lines]",
          "115:      'bin/node', 'bin/npm', 'bin/node-gyp', 'include/node/*',",
          "116:      'lib/node', 'lib/node_modules'",
          "",
          "---------------"
        ]
      }
    }
  ]
}