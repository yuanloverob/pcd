{
  "cve_id": "CVE-2018-20406",
  "cve_desc": "Modules/_pickle.c in Python before 3.7.1 has an integer overflow via a large LONG_BINPUT value that is mishandled during a \"resize to twice the size\" attempt. This issue might cause memory exhaustion, but is only relevant if the pickle format is used for serializing tens or hundreds of gigabytes of data. This issue is fixed in: v3.4.10, v3.4.10rc1; v3.5.10, v3.5.10rc1, v3.5.7, v3.5.7rc1, v3.5.8, v3.5.8rc1, v3.5.8rc2, v3.5.9; v3.6.10, v3.6.10rc1, v3.6.11, v3.6.11rc1, v3.6.12, v3.6.7, v3.6.7rc1, v3.6.7rc2, v3.6.8, v3.6.8rc1, v3.6.9, v3.6.9rc1; v3.7.1, v3.7.1rc1, v3.7.1rc2, v3.7.2, v3.7.2rc1, v3.7.3, v3.7.3rc1, v3.7.4, v3.7.4rc1, v3.7.4rc2, v3.7.5, v3.7.5rc1, v3.7.6, v3.7.6rc1, v3.7.7, v3.7.7rc1, v3.7.8, v3.7.8rc1, v3.7.9.",
  "repo": "python/cpython",
  "patch_hash": "a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
  "patch_info": {
    "commit_hash": "a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
    "files": [
      "Modules/_pickle.c"
    ],
    "message": "closes bpo-34656: Avoid relying on signed overflow in _pickle memos. (GH-9261)",
    "before_after_code_files": [
      "Modules/_pickle.c||Modules/_pickle.c"
    ]
  },
  "patch_diff": {
    "Modules/_pickle.c||Modules/_pickle.c": [
      "File: Modules/_pickle.c -> Modules/_pickle.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "602: } PyMemoEntry;",
      "604: typedef struct {",
      "608:     PyMemoEntry *mt_table;",
      "609: } PyMemoTable;",
      "",
      "[Removed Lines]",
      "605:     Py_ssize_t mt_mask;",
      "606:     Py_ssize_t mt_used;",
      "607:     Py_ssize_t mt_allocated;",
      "",
      "[Added Lines]",
      "605:     size_t mt_mask;",
      "606:     size_t mt_used;",
      "607:     size_t mt_allocated;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "737: static PyMemoTable *",
      "738: PyMemoTable_Copy(PyMemoTable *self)",
      "739: {",
      "741:     PyMemoTable *new = PyMemoTable_New();",
      "742:     if (new == NULL)",
      "743:         return NULL;",
      "",
      "[Removed Lines]",
      "740:     Py_ssize_t i;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "754:         PyErr_NoMemory();",
      "755:         return NULL;",
      "756:     }",
      "758:         Py_XINCREF(self->mt_table[i].me_key);",
      "759:     }",
      "760:     memcpy(new->mt_table, self->mt_table,",
      "",
      "[Removed Lines]",
      "757:     for (i = 0; i < self->mt_allocated; i++) {",
      "",
      "[Added Lines]",
      "756:     for (size_t i = 0; i < self->mt_allocated; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "800: {",
      "801:     size_t i;",
      "802:     size_t perturb;",
      "804:     PyMemoEntry *table = self->mt_table;",
      "805:     PyMemoEntry *entry;",
      "806:     Py_hash_t hash = (Py_hash_t)key >> 3;",
      "",
      "[Removed Lines]",
      "803:     size_t mask = (size_t)self->mt_mask;",
      "",
      "[Added Lines]",
      "802:     size_t mask = self->mt_mask;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "823: static int",
      "825: {",
      "826:     PyMemoEntry *oldtable = NULL;",
      "827:     PyMemoEntry *oldentry, *newentry;",
      "831:     assert(min_size > 0);",
      "837:         PyErr_NoMemory();",
      "838:         return -1;",
      "839:     }",
      "841:     assert((new_size & (new_size - 1)) == 0);",
      "",
      "[Removed Lines]",
      "824: _PyMemoTable_ResizeTable(PyMemoTable *self, Py_ssize_t min_size)",
      "828:     Py_ssize_t new_size = MT_MINSIZE;",
      "829:     Py_ssize_t to_process;",
      "834:     while (new_size < min_size && new_size > 0)",
      "835:         new_size <<= 1;",
      "836:     if (new_size <= 0) {",
      "",
      "[Added Lines]",
      "823: _PyMemoTable_ResizeTable(PyMemoTable *self, size_t min_size)",
      "827:     size_t new_size = MT_MINSIZE;",
      "828:     size_t to_process;",
      "832:     if (min_size > PY_SSIZE_T_MAX) {",
      "838:     while (new_size < min_size) {",
      "839:         new_size <<= 1;",
      "840:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "913:         return 0;",
      "916: }",
      "918: #undef MT_MINSIZE",
      "",
      "[Removed Lines]",
      "912:     if (!(self->mt_used * 3 >= (self->mt_mask + 1) * 2))",
      "914:     return _PyMemoTable_ResizeTable(self,",
      "915:         (self->mt_used > 50000 ? 2 : 4) * self->mt_used);",
      "",
      "[Added Lines]",
      "913:     if (SIZE_MAX / 3 >= self->mt_used && self->mt_used * 3 < self->mt_allocated * 2) {",
      "915:     }",
      "917:     size_t desired_size = (self->mt_used > 50000 ? 2 : 4) * self->mt_used;",
      "918:     return _PyMemoTable_ResizeTable(self, desired_size);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1378: static int",
      "1380: {",
      "1383:     assert(new_size > self->memo_size);",
      "",
      "[Removed Lines]",
      "1379: _Unpickler_ResizeMemoList(UnpicklerObject *self, Py_ssize_t new_size)",
      "1381:     Py_ssize_t i;",
      "",
      "[Added Lines]",
      "1382: _Unpickler_ResizeMemoList(UnpicklerObject *self, size_t new_size)",
      "1384:     size_t i;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1399: static PyObject *",
      "1401: {",
      "1403:         return NULL;",
      "1405:     return self->memo[idx];",
      "",
      "[Removed Lines]",
      "1400: _Unpickler_MemoGet(UnpicklerObject *self, Py_ssize_t idx)",
      "1402:     if (idx < 0 || idx >= self->memo_size)",
      "",
      "[Added Lines]",
      "1403: _Unpickler_MemoGet(UnpicklerObject *self, size_t idx)",
      "1405:     if (idx >= self->memo_size)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1410: static int",
      "1412: {",
      "1413:     PyObject *old_item;",
      "",
      "[Removed Lines]",
      "1411: _Unpickler_MemoPut(UnpicklerObject *self, Py_ssize_t idx, PyObject *value)",
      "",
      "[Added Lines]",
      "1414: _Unpickler_MemoPut(UnpicklerObject *self, size_t idx, PyObject *value)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "4413: _pickle_PicklerMemoProxy_copy_impl(PicklerMemoProxyObject *self)",
      "4415: {",
      "4417:     PyMemoTable *memo;",
      "4418:     PyObject *new_memo = PyDict_New();",
      "4419:     if (new_memo == NULL)",
      "4420:         return NULL;",
      "4422:     memo = self->pickler->memo;",
      "4424:         PyMemoEntry entry = memo->mt_table[i];",
      "4425:         if (entry.me_key != NULL) {",
      "4426:             int status;",
      "",
      "[Removed Lines]",
      "4416:     Py_ssize_t i;",
      "4423:     for (i = 0; i < memo->mt_allocated; ++i) {",
      "",
      "[Added Lines]",
      "4425:     for (size_t i = 0; i < memo->mt_allocated; ++i) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "6843: _pickle_UnpicklerMemoProxy_copy_impl(UnpicklerMemoProxyObject *self)",
      "6845: {",
      "6847:     PyObject *new_memo = PyDict_New();",
      "6848:     if (new_memo == NULL)",
      "6849:         return NULL;",
      "",
      "[Removed Lines]",
      "6846:     Py_ssize_t i;",
      "",
      "[Added Lines]",
      "6848:     size_t i;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "6994: Unpickler_set_memo(UnpicklerObject *self, PyObject *obj)",
      "6995: {",
      "6996:     PyObject **new_memo;",
      "7000:     if (obj == NULL) {",
      "7001:         PyErr_SetString(PyExc_TypeError,",
      "",
      "[Removed Lines]",
      "6997:     Py_ssize_t new_memo_size = 0;",
      "6998:     Py_ssize_t i;",
      "",
      "[Added Lines]",
      "6999:     size_t new_memo_size = 0;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "7012:         if (new_memo == NULL)",
      "7013:             return -1;",
      "7016:             Py_XINCREF(unpickler->memo[i]);",
      "7017:             new_memo[i] = unpickler->memo[i];",
      "7018:         }",
      "",
      "[Removed Lines]",
      "7015:         for (i = 0; i < new_memo_size; i++) {",
      "",
      "[Added Lines]",
      "7016:         for (size_t i = 0; i < new_memo_size; i++) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "7061:   error:",
      "7062:     if (new_memo_size) {",
      "7065:             Py_XDECREF(new_memo[i]);",
      "7066:         }",
      "7067:         PyMem_FREE(new_memo);",
      "",
      "[Removed Lines]",
      "7063:         i = new_memo_size;",
      "7064:         while (--i >= 0) {",
      "",
      "[Added Lines]",
      "7064:         for (size_t i = new_memo_size - 1; i != SIZE_MAX; i--) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "71a9c65e74a70b6ed39adc4ba81d311ac1aa2acc",
      "candidate_info": {
        "commit_hash": "71a9c65e74a70b6ed39adc4ba81d311ac1aa2acc",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/71a9c65e74a70b6ed39adc4ba81d311ac1aa2acc",
        "files": [
          "Modules/_pickle.c"
        ],
        "message": "closes bpo-34656: Avoid relying on signed overflow in _pickle memos. (GH-9261)\n\n(cherry picked from commit a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd)\n\nCo-authored-by: Benjamin Peterson <benjamin@python.org>",
        "before_after_code_files": [
          "Modules/_pickle.c||Modules/_pickle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "Modules/_pickle.c||Modules/_pickle.c"
          ],
          "candidate": [
            "Modules/_pickle.c||Modules/_pickle.c"
          ]
        }
      },
      "candidate_diff": {
        "Modules/_pickle.c||Modules/_pickle.c": [
          "File: Modules/_pickle.c -> Modules/_pickle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "596: } PyMemoEntry;",
          "598: typedef struct {",
          "602:     PyMemoEntry *mt_table;",
          "603: } PyMemoTable;",
          "",
          "[Removed Lines]",
          "599:     Py_ssize_t mt_mask;",
          "600:     Py_ssize_t mt_used;",
          "601:     Py_ssize_t mt_allocated;",
          "",
          "[Added Lines]",
          "599:     size_t mt_mask;",
          "600:     size_t mt_used;",
          "601:     size_t mt_allocated;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "731: static PyMemoTable *",
          "732: PyMemoTable_Copy(PyMemoTable *self)",
          "733: {",
          "735:     PyMemoTable *new = PyMemoTable_New();",
          "736:     if (new == NULL)",
          "737:         return NULL;",
          "",
          "[Removed Lines]",
          "734:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "748:         PyErr_NoMemory();",
          "749:         return NULL;",
          "750:     }",
          "752:         Py_XINCREF(self->mt_table[i].me_key);",
          "753:     }",
          "754:     memcpy(new->mt_table, self->mt_table,",
          "",
          "[Removed Lines]",
          "751:     for (i = 0; i < self->mt_allocated; i++) {",
          "",
          "[Added Lines]",
          "750:     for (size_t i = 0; i < self->mt_allocated; i++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "794: {",
          "795:     size_t i;",
          "796:     size_t perturb;",
          "798:     PyMemoEntry *table = self->mt_table;",
          "799:     PyMemoEntry *entry;",
          "800:     Py_hash_t hash = (Py_hash_t)key >> 3;",
          "",
          "[Removed Lines]",
          "797:     size_t mask = (size_t)self->mt_mask;",
          "",
          "[Added Lines]",
          "796:     size_t mask = self->mt_mask;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "818: static int",
          "820: {",
          "821:     PyMemoEntry *oldtable = NULL;",
          "822:     PyMemoEntry *oldentry, *newentry;",
          "826:     assert(min_size > 0);",
          "832:         PyErr_NoMemory();",
          "833:         return -1;",
          "834:     }",
          "836:     assert((new_size & (new_size - 1)) == 0);",
          "",
          "[Removed Lines]",
          "819: _PyMemoTable_ResizeTable(PyMemoTable *self, Py_ssize_t min_size)",
          "823:     Py_ssize_t new_size = MT_MINSIZE;",
          "824:     Py_ssize_t to_process;",
          "829:     while (new_size < min_size && new_size > 0)",
          "830:         new_size <<= 1;",
          "831:     if (new_size <= 0) {",
          "",
          "[Added Lines]",
          "818: _PyMemoTable_ResizeTable(PyMemoTable *self, size_t min_size)",
          "822:     size_t new_size = MT_MINSIZE;",
          "823:     size_t to_process;",
          "827:     if (min_size > PY_SSIZE_T_MAX) {",
          "833:     while (new_size < min_size) {",
          "834:         new_size <<= 1;",
          "835:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "908:         return 0;",
          "911: }",
          "913: #undef MT_MINSIZE",
          "",
          "[Removed Lines]",
          "907:     if (!(self->mt_used * 3 >= (self->mt_mask + 1) * 2))",
          "909:     return _PyMemoTable_ResizeTable(self,",
          "910:         (self->mt_used > 50000 ? 2 : 4) * self->mt_used);",
          "",
          "[Added Lines]",
          "908:     if (SIZE_MAX / 3 >= self->mt_used && self->mt_used * 3 < self->mt_allocated * 2) {",
          "910:     }",
          "912:     size_t desired_size = (self->mt_used > 50000 ? 2 : 4) * self->mt_used;",
          "913:     return _PyMemoTable_ResizeTable(self, desired_size);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1354: static int",
          "1356: {",
          "1359:     assert(new_size > self->memo_size);",
          "",
          "[Removed Lines]",
          "1355: _Unpickler_ResizeMemoList(UnpicklerObject *self, Py_ssize_t new_size)",
          "1357:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "1358: _Unpickler_ResizeMemoList(UnpicklerObject *self, size_t new_size)",
          "1360:     size_t i;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1375: static PyObject *",
          "1377: {",
          "1379:         return NULL;",
          "1381:     return self->memo[idx];",
          "",
          "[Removed Lines]",
          "1376: _Unpickler_MemoGet(UnpicklerObject *self, Py_ssize_t idx)",
          "1378:     if (idx < 0 || idx >= self->memo_size)",
          "",
          "[Added Lines]",
          "1379: _Unpickler_MemoGet(UnpicklerObject *self, size_t idx)",
          "1381:     if (idx >= self->memo_size)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1386: static int",
          "1388: {",
          "1389:     PyObject *old_item;",
          "",
          "[Removed Lines]",
          "1387: _Unpickler_MemoPut(UnpicklerObject *self, Py_ssize_t idx, PyObject *value)",
          "",
          "[Added Lines]",
          "1390: _Unpickler_MemoPut(UnpicklerObject *self, size_t idx, PyObject *value)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4328: _pickle_PicklerMemoProxy_copy_impl(PicklerMemoProxyObject *self)",
          "4330: {",
          "4332:     PyMemoTable *memo;",
          "4333:     PyObject *new_memo = PyDict_New();",
          "4334:     if (new_memo == NULL)",
          "4335:         return NULL;",
          "4337:     memo = self->pickler->memo;",
          "4339:         PyMemoEntry entry = memo->mt_table[i];",
          "4340:         if (entry.me_key != NULL) {",
          "4341:             int status;",
          "",
          "[Removed Lines]",
          "4331:     Py_ssize_t i;",
          "4338:     for (i = 0; i < memo->mt_allocated; ++i) {",
          "",
          "[Added Lines]",
          "4340:     for (size_t i = 0; i < memo->mt_allocated; ++i) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6764: _pickle_UnpicklerMemoProxy_copy_impl(UnpicklerMemoProxyObject *self)",
          "6766: {",
          "6768:     PyObject *new_memo = PyDict_New();",
          "6769:     if (new_memo == NULL)",
          "6770:         return NULL;",
          "",
          "[Removed Lines]",
          "6767:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "6769:     size_t i;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6915: Unpickler_set_memo(UnpicklerObject *self, PyObject *obj)",
          "6916: {",
          "6917:     PyObject **new_memo;",
          "6921:     if (obj == NULL) {",
          "6922:         PyErr_SetString(PyExc_TypeError,",
          "",
          "[Removed Lines]",
          "6918:     Py_ssize_t new_memo_size = 0;",
          "6919:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "6920:     size_t new_memo_size = 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6933:         if (new_memo == NULL)",
          "6934:             return -1;",
          "6937:             Py_XINCREF(unpickler->memo[i]);",
          "6938:             new_memo[i] = unpickler->memo[i];",
          "6939:         }",
          "",
          "[Removed Lines]",
          "6936:         for (i = 0; i < new_memo_size; i++) {",
          "",
          "[Added Lines]",
          "6937:         for (size_t i = 0; i < new_memo_size; i++) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6982:   error:",
          "6983:     if (new_memo_size) {",
          "6986:             Py_XDECREF(new_memo[i]);",
          "6987:         }",
          "6988:         PyMem_FREE(new_memo);",
          "",
          "[Removed Lines]",
          "6984:         i = new_memo_size;",
          "6985:         while (--i >= 0) {",
          "",
          "[Added Lines]",
          "6985:         for (size_t i = new_memo_size - 1; i != SIZE_MAX; i--) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef33dd6036aafbd3f06c1d56e2b1a81dae3da63c",
      "candidate_info": {
        "commit_hash": "ef33dd6036aafbd3f06c1d56e2b1a81dae3da63c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ef33dd6036aafbd3f06c1d56e2b1a81dae3da63c",
        "files": [
          "Modules/_pickle.c"
        ],
        "message": "closes bpo-34656: Avoid relying on signed overflow in _pickle memos. (GH-9261) (#11869)\n\n(cherry picked from commit a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd)",
        "before_after_code_files": [
          "Modules/_pickle.c||Modules/_pickle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "Modules/_pickle.c||Modules/_pickle.c"
          ],
          "candidate": [
            "Modules/_pickle.c||Modules/_pickle.c"
          ]
        }
      },
      "candidate_diff": {
        "Modules/_pickle.c||Modules/_pickle.c": [
          "File: Modules/_pickle.c -> Modules/_pickle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527: } PyMemoEntry;",
          "529: typedef struct {",
          "533:     PyMemoEntry *mt_table;",
          "534: } PyMemoTable;",
          "",
          "[Removed Lines]",
          "530:     Py_ssize_t mt_mask;",
          "531:     Py_ssize_t mt_used;",
          "532:     Py_ssize_t mt_allocated;",
          "",
          "[Added Lines]",
          "530:     size_t mt_mask;",
          "531:     size_t mt_used;",
          "532:     size_t mt_allocated;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "658: static PyMemoTable *",
          "659: PyMemoTable_Copy(PyMemoTable *self)",
          "660: {",
          "662:     PyMemoTable *new = PyMemoTable_New();",
          "663:     if (new == NULL)",
          "664:         return NULL;",
          "",
          "[Removed Lines]",
          "661:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "675:         PyErr_NoMemory();",
          "676:         return NULL;",
          "677:     }",
          "679:         Py_XINCREF(self->mt_table[i].me_key);",
          "680:     }",
          "681:     memcpy(new->mt_table, self->mt_table,",
          "",
          "[Removed Lines]",
          "678:     for (i = 0; i < self->mt_allocated; i++) {",
          "",
          "[Added Lines]",
          "677:     for (size_t i = 0; i < self->mt_allocated; i++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "721: {",
          "722:     size_t i;",
          "723:     size_t perturb;",
          "725:     PyMemoEntry *table = self->mt_table;",
          "726:     PyMemoEntry *entry;",
          "727:     Py_hash_t hash = (Py_hash_t)key >> 3;",
          "",
          "[Removed Lines]",
          "724:     size_t mask = (size_t)self->mt_mask;",
          "",
          "[Added Lines]",
          "723:     size_t mask = self->mt_mask;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "745: static int",
          "747: {",
          "748:     PyMemoEntry *oldtable = NULL;",
          "749:     PyMemoEntry *oldentry, *newentry;",
          "753:     assert(min_size > 0);",
          "759:         PyErr_NoMemory();",
          "760:         return -1;",
          "761:     }",
          "763:     assert((new_size & (new_size - 1)) == 0);",
          "",
          "[Removed Lines]",
          "746: _PyMemoTable_ResizeTable(PyMemoTable *self, Py_ssize_t min_size)",
          "750:     Py_ssize_t new_size = MT_MINSIZE;",
          "751:     Py_ssize_t to_process;",
          "756:     while (new_size < min_size && new_size > 0)",
          "757:         new_size <<= 1;",
          "758:     if (new_size <= 0) {",
          "",
          "[Added Lines]",
          "745: _PyMemoTable_ResizeTable(PyMemoTable *self, size_t min_size)",
          "749:     size_t new_size = MT_MINSIZE;",
          "750:     size_t to_process;",
          "754:     if (min_size > PY_SSIZE_T_MAX) {",
          "760:     while (new_size < min_size) {",
          "761:         new_size <<= 1;",
          "762:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "808: PyMemoTable_Set(PyMemoTable *self, PyObject *key, Py_ssize_t value)",
          "809: {",
          "810:     PyMemoEntry *entry;",
          "812:     assert(key != NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:     size_t desired_size;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "835:         return 0;",
          "838: }",
          "840: #undef MT_MINSIZE",
          "",
          "[Removed Lines]",
          "834:     if (!(self->mt_used * 3 >= (self->mt_mask + 1) * 2))",
          "836:     return _PyMemoTable_ResizeTable(self,",
          "837:         (self->mt_used > 50000 ? 2 : 4) * self->mt_used);",
          "",
          "[Added Lines]",
          "836:     if (SIZE_MAX / 3 >= self->mt_used && self->mt_used * 3 < self->mt_allocated * 2) {",
          "838:     }",
          "840:     desired_size = (self->mt_used > 50000 ? 2 : 4) * self->mt_used;",
          "841:     return _PyMemoTable_ResizeTable(self, desired_size);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1275: static int",
          "1277: {",
          "1280:     assert(new_size > self->memo_size);",
          "",
          "[Removed Lines]",
          "1276: _Unpickler_ResizeMemoList(UnpicklerObject *self, Py_ssize_t new_size)",
          "1278:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "1280: _Unpickler_ResizeMemoList(UnpicklerObject *self, size_t new_size)",
          "1282:     size_t i;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1294: static PyObject *",
          "1296: {",
          "1298:         return NULL;",
          "1300:     return self->memo[idx];",
          "",
          "[Removed Lines]",
          "1295: _Unpickler_MemoGet(UnpicklerObject *self, Py_ssize_t idx)",
          "1297:     if (idx < 0 || idx >= self->memo_size)",
          "",
          "[Added Lines]",
          "1299: _Unpickler_MemoGet(UnpicklerObject *self, size_t idx)",
          "1301:     if (idx >= self->memo_size)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1305: static int",
          "1307: {",
          "1308:     PyObject *old_item;",
          "",
          "[Removed Lines]",
          "1306: _Unpickler_MemoPut(UnpicklerObject *self, Py_ssize_t idx, PyObject *value)",
          "",
          "[Added Lines]",
          "1310: _Unpickler_MemoPut(UnpicklerObject *self, size_t idx, PyObject *value)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4194: _pickle_PicklerMemoProxy_copy_impl(PicklerMemoProxyObject *self)",
          "4196: {",
          "4198:     PyMemoTable *memo;",
          "4199:     PyObject *new_memo = PyDict_New();",
          "4200:     if (new_memo == NULL)",
          "4201:         return NULL;",
          "4203:     memo = self->pickler->memo;",
          "4205:         PyMemoEntry entry = memo->mt_table[i];",
          "4206:         if (entry.me_key != NULL) {",
          "4207:             int status;",
          "",
          "[Removed Lines]",
          "4197:     Py_ssize_t i;",
          "4204:     for (i = 0; i < memo->mt_allocated; ++i) {",
          "",
          "[Added Lines]",
          "4207:     for (size_t i = 0; i < memo->mt_allocated; ++i) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6620: _pickle_UnpicklerMemoProxy_copy_impl(UnpicklerMemoProxyObject *self)",
          "6622: {",
          "6624:     PyObject *new_memo = PyDict_New();",
          "6625:     if (new_memo == NULL)",
          "6626:         return NULL;",
          "",
          "[Removed Lines]",
          "6623:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "6626:     size_t i;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6771: Unpickler_set_memo(UnpicklerObject *self, PyObject *obj)",
          "6772: {",
          "6773:     PyObject **new_memo;",
          "6777:     if (obj == NULL) {",
          "6778:         PyErr_SetString(PyExc_TypeError,",
          "",
          "[Removed Lines]",
          "6774:     Py_ssize_t new_memo_size = 0;",
          "6775:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "6777:     size_t new_memo_size = 0;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6789:         if (new_memo == NULL)",
          "6790:             return -1;",
          "6793:             Py_XINCREF(unpickler->memo[i]);",
          "6794:             new_memo[i] = unpickler->memo[i];",
          "6795:         }",
          "",
          "[Removed Lines]",
          "6792:         for (i = 0; i < new_memo_size; i++) {",
          "",
          "[Added Lines]",
          "6794:         for (size_t i = 0; i < new_memo_size; i++) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6838:   error:",
          "6839:     if (new_memo_size) {",
          "6842:             Py_XDECREF(new_memo[i]);",
          "6843:         }",
          "6844:         PyMem_FREE(new_memo);",
          "",
          "[Removed Lines]",
          "6840:         i = new_memo_size;",
          "6841:         while (--i >= 0) {",
          "",
          "[Added Lines]",
          "6842:         for (size_t i = new_memo_size - 1; i != SIZE_MAX; i--) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef4306b24c9034d6b37bb034e2ebe82e745d4b77",
      "candidate_info": {
        "commit_hash": "ef4306b24c9034d6b37bb034e2ebe82e745d4b77",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ef4306b24c9034d6b37bb034e2ebe82e745d4b77",
        "files": [
          "Modules/_pickle.c"
        ],
        "message": "closes bpo-34656: Avoid relying on signed overflow in _pickle memos. (GH-9261)\n\n(cherry picked from commit a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd)\n\nCo-authored-by: Benjamin Peterson <benjamin@python.org>",
        "before_after_code_files": [
          "Modules/_pickle.c||Modules/_pickle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "Modules/_pickle.c||Modules/_pickle.c"
          ],
          "candidate": [
            "Modules/_pickle.c||Modules/_pickle.c"
          ]
        }
      },
      "candidate_diff": {
        "Modules/_pickle.c||Modules/_pickle.c": [
          "File: Modules/_pickle.c -> Modules/_pickle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "600: } PyMemoEntry;",
          "602: typedef struct {",
          "606:     PyMemoEntry *mt_table;",
          "607: } PyMemoTable;",
          "",
          "[Removed Lines]",
          "603:     Py_ssize_t mt_mask;",
          "604:     Py_ssize_t mt_used;",
          "605:     Py_ssize_t mt_allocated;",
          "",
          "[Added Lines]",
          "603:     size_t mt_mask;",
          "604:     size_t mt_used;",
          "605:     size_t mt_allocated;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "735: static PyMemoTable *",
          "736: PyMemoTable_Copy(PyMemoTable *self)",
          "737: {",
          "739:     PyMemoTable *new = PyMemoTable_New();",
          "740:     if (new == NULL)",
          "741:         return NULL;",
          "",
          "[Removed Lines]",
          "738:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "752:         PyErr_NoMemory();",
          "753:         return NULL;",
          "754:     }",
          "756:         Py_XINCREF(self->mt_table[i].me_key);",
          "757:     }",
          "758:     memcpy(new->mt_table, self->mt_table,",
          "",
          "[Removed Lines]",
          "755:     for (i = 0; i < self->mt_allocated; i++) {",
          "",
          "[Added Lines]",
          "754:     for (size_t i = 0; i < self->mt_allocated; i++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "798: {",
          "799:     size_t i;",
          "800:     size_t perturb;",
          "802:     PyMemoEntry *table = self->mt_table;",
          "803:     PyMemoEntry *entry;",
          "804:     Py_hash_t hash = (Py_hash_t)key >> 3;",
          "",
          "[Removed Lines]",
          "801:     size_t mask = (size_t)self->mt_mask;",
          "",
          "[Added Lines]",
          "800:     size_t mask = self->mt_mask;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "821: static int",
          "823: {",
          "824:     PyMemoEntry *oldtable = NULL;",
          "825:     PyMemoEntry *oldentry, *newentry;",
          "829:     assert(min_size > 0);",
          "835:         PyErr_NoMemory();",
          "836:         return -1;",
          "837:     }",
          "839:     assert((new_size & (new_size - 1)) == 0);",
          "",
          "[Removed Lines]",
          "822: _PyMemoTable_ResizeTable(PyMemoTable *self, Py_ssize_t min_size)",
          "826:     Py_ssize_t new_size = MT_MINSIZE;",
          "827:     Py_ssize_t to_process;",
          "832:     while (new_size < min_size && new_size > 0)",
          "833:         new_size <<= 1;",
          "834:     if (new_size <= 0) {",
          "",
          "[Added Lines]",
          "821: _PyMemoTable_ResizeTable(PyMemoTable *self, size_t min_size)",
          "825:     size_t new_size = MT_MINSIZE;",
          "826:     size_t to_process;",
          "830:     if (min_size > PY_SSIZE_T_MAX) {",
          "836:     while (new_size < min_size) {",
          "837:         new_size <<= 1;",
          "838:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "911:         return 0;",
          "914: }",
          "916: #undef MT_MINSIZE",
          "",
          "[Removed Lines]",
          "910:     if (!(self->mt_used * 3 >= (self->mt_mask + 1) * 2))",
          "912:     return _PyMemoTable_ResizeTable(self,",
          "913:         (self->mt_used > 50000 ? 2 : 4) * self->mt_used);",
          "",
          "[Added Lines]",
          "911:     if (SIZE_MAX / 3 >= self->mt_used && self->mt_used * 3 < self->mt_allocated * 2) {",
          "913:     }",
          "915:     size_t desired_size = (self->mt_used > 50000 ? 2 : 4) * self->mt_used;",
          "916:     return _PyMemoTable_ResizeTable(self, desired_size);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1376: static int",
          "1378: {",
          "1381:     assert(new_size > self->memo_size);",
          "",
          "[Removed Lines]",
          "1377: _Unpickler_ResizeMemoList(UnpicklerObject *self, Py_ssize_t new_size)",
          "1379:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "1380: _Unpickler_ResizeMemoList(UnpicklerObject *self, size_t new_size)",
          "1382:     size_t i;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1397: static PyObject *",
          "1399: {",
          "1401:         return NULL;",
          "1403:     return self->memo[idx];",
          "",
          "[Removed Lines]",
          "1398: _Unpickler_MemoGet(UnpicklerObject *self, Py_ssize_t idx)",
          "1400:     if (idx < 0 || idx >= self->memo_size)",
          "",
          "[Added Lines]",
          "1401: _Unpickler_MemoGet(UnpicklerObject *self, size_t idx)",
          "1403:     if (idx >= self->memo_size)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1408: static int",
          "1410: {",
          "1411:     PyObject *old_item;",
          "",
          "[Removed Lines]",
          "1409: _Unpickler_MemoPut(UnpicklerObject *self, Py_ssize_t idx, PyObject *value)",
          "",
          "[Added Lines]",
          "1412: _Unpickler_MemoPut(UnpicklerObject *self, size_t idx, PyObject *value)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4415: _pickle_PicklerMemoProxy_copy_impl(PicklerMemoProxyObject *self)",
          "4417: {",
          "4419:     PyMemoTable *memo;",
          "4420:     PyObject *new_memo = PyDict_New();",
          "4421:     if (new_memo == NULL)",
          "4422:         return NULL;",
          "4424:     memo = self->pickler->memo;",
          "4426:         PyMemoEntry entry = memo->mt_table[i];",
          "4427:         if (entry.me_key != NULL) {",
          "4428:             int status;",
          "",
          "[Removed Lines]",
          "4418:     Py_ssize_t i;",
          "4425:     for (i = 0; i < memo->mt_allocated; ++i) {",
          "",
          "[Added Lines]",
          "4427:     for (size_t i = 0; i < memo->mt_allocated; ++i) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6855: _pickle_UnpicklerMemoProxy_copy_impl(UnpicklerMemoProxyObject *self)",
          "6857: {",
          "6859:     PyObject *new_memo = PyDict_New();",
          "6860:     if (new_memo == NULL)",
          "6861:         return NULL;",
          "",
          "[Removed Lines]",
          "6858:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "6860:     size_t i;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7006: Unpickler_set_memo(UnpicklerObject *self, PyObject *obj)",
          "7007: {",
          "7008:     PyObject **new_memo;",
          "7012:     if (obj == NULL) {",
          "7013:         PyErr_SetString(PyExc_TypeError,",
          "",
          "[Removed Lines]",
          "7009:     Py_ssize_t new_memo_size = 0;",
          "7010:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "7011:     size_t new_memo_size = 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7024:         if (new_memo == NULL)",
          "7025:             return -1;",
          "7028:             Py_XINCREF(unpickler->memo[i]);",
          "7029:             new_memo[i] = unpickler->memo[i];",
          "7030:         }",
          "",
          "[Removed Lines]",
          "7027:         for (i = 0; i < new_memo_size; i++) {",
          "",
          "[Added Lines]",
          "7028:         for (size_t i = 0; i < new_memo_size; i++) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7073:   error:",
          "7074:     if (new_memo_size) {",
          "7077:             Py_XDECREF(new_memo[i]);",
          "7078:         }",
          "7079:         PyMem_FREE(new_memo);",
          "",
          "[Removed Lines]",
          "7075:         i = new_memo_size;",
          "7076:         while (--i >= 0) {",
          "",
          "[Added Lines]",
          "7076:         for (size_t i = new_memo_size - 1; i != SIZE_MAX; i--) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b42d575bf0fb01192b3ec54b7e224b238691527",
      "candidate_info": {
        "commit_hash": "4b42d575bf0fb01192b3ec54b7e224b238691527",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/4b42d575bf0fb01192b3ec54b7e224b238691527",
        "files": [
          "Modules/_pickle.c"
        ],
        "message": "[3.4] bpo-34656: Avoid relying on signed overflow in _pickle memos (GH-9261) (#11870)\n\n* bpo-34656: Avoid relying on signed overflow in _pickle memos (GH-9261)\n\n(cherry picked from commit a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd)",
        "before_after_code_files": [
          "Modules/_pickle.c||Modules/_pickle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "Modules/_pickle.c||Modules/_pickle.c"
          ],
          "candidate": [
            "Modules/_pickle.c||Modules/_pickle.c"
          ]
        }
      },
      "candidate_diff": {
        "Modules/_pickle.c||Modules/_pickle.c": [
          "File: Modules/_pickle.c -> Modules/_pickle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "516: } PyMemoEntry;",
          "518: typedef struct {",
          "522:     PyMemoEntry *mt_table;",
          "523: } PyMemoTable;",
          "",
          "[Removed Lines]",
          "519:     Py_ssize_t mt_mask;",
          "520:     Py_ssize_t mt_used;",
          "521:     Py_ssize_t mt_allocated;",
          "",
          "[Added Lines]",
          "519:     size_t mt_mask;",
          "520:     size_t mt_used;",
          "521:     size_t mt_allocated;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "647: static PyMemoTable *",
          "648: PyMemoTable_Copy(PyMemoTable *self)",
          "649: {",
          "651:     PyMemoTable *new = PyMemoTable_New();",
          "652:     if (new == NULL)",
          "653:         return NULL;",
          "",
          "[Removed Lines]",
          "650:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "650:     size_t i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "710: {",
          "711:     size_t i;",
          "712:     size_t perturb;",
          "714:     PyMemoEntry *table = self->mt_table;",
          "715:     PyMemoEntry *entry;",
          "716:     Py_hash_t hash = (Py_hash_t)key >> 3;",
          "",
          "[Removed Lines]",
          "713:     size_t mask = (size_t)self->mt_mask;",
          "",
          "[Added Lines]",
          "713:     size_t mask = self->mt_mask;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "734: static int",
          "736: {",
          "737:     PyMemoEntry *oldtable = NULL;",
          "738:     PyMemoEntry *oldentry, *newentry;",
          "742:     assert(min_size > 0);",
          "748:         PyErr_NoMemory();",
          "749:         return -1;",
          "750:     }",
          "752:     assert((new_size & (new_size - 1)) == 0);",
          "",
          "[Removed Lines]",
          "735: _PyMemoTable_ResizeTable(PyMemoTable *self, Py_ssize_t min_size)",
          "739:     Py_ssize_t new_size = MT_MINSIZE;",
          "740:     Py_ssize_t to_process;",
          "745:     while (new_size < min_size && new_size > 0)",
          "746:         new_size <<= 1;",
          "747:     if (new_size <= 0) {",
          "",
          "[Added Lines]",
          "735: _PyMemoTable_ResizeTable(PyMemoTable *self, size_t min_size)",
          "739:     size_t new_size = MT_MINSIZE;",
          "740:     size_t to_process;",
          "744:     if (min_size > PY_SSIZE_T_MAX) {",
          "750:     while (new_size < min_size) {",
          "751:         new_size <<= 1;",
          "752:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "797: PyMemoTable_Set(PyMemoTable *self, PyObject *key, Py_ssize_t value)",
          "798: {",
          "799:     PyMemoEntry *entry;",
          "801:     assert(key != NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:     size_t desired_size;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "824:         return 0;",
          "827: }",
          "829: #undef MT_MINSIZE",
          "",
          "[Removed Lines]",
          "823:     if (!(self->mt_used * 3 >= (self->mt_mask + 1) * 2))",
          "825:     return _PyMemoTable_ResizeTable(self,",
          "826:         (self->mt_used > 50000 ? 2 : 4) * self->mt_used);",
          "",
          "[Added Lines]",
          "826:     if (SIZE_MAX / 3 >= self->mt_used && self->mt_used * 3 < self->mt_allocated * 2) {",
          "828:     }",
          "830:     desired_size = (self->mt_used > 50000 ? 2 : 4) * self->mt_used;",
          "831:     return _PyMemoTable_ResizeTable(self, desired_size);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1265: static int",
          "1267: {",
          "1270:     assert(new_size > self->memo_size);",
          "",
          "[Removed Lines]",
          "1266: _Unpickler_ResizeMemoList(UnpicklerObject *self, Py_ssize_t new_size)",
          "1268:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "1271: _Unpickler_ResizeMemoList(UnpicklerObject *self, size_t new_size)",
          "1273:     size_t i;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1284: static PyObject *",
          "1286: {",
          "1288:         return NULL;",
          "1290:     return self->memo[idx];",
          "",
          "[Removed Lines]",
          "1285: _Unpickler_MemoGet(UnpicklerObject *self, Py_ssize_t idx)",
          "1287:     if (idx < 0 || idx >= self->memo_size)",
          "",
          "[Added Lines]",
          "1290: _Unpickler_MemoGet(UnpicklerObject *self, size_t idx)",
          "1292:     if (idx >= self->memo_size)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1295: static int",
          "1297: {",
          "1298:     PyObject *old_item;",
          "",
          "[Removed Lines]",
          "1296: _Unpickler_MemoPut(UnpicklerObject *self, Py_ssize_t idx, PyObject *value)",
          "",
          "[Added Lines]",
          "1301: _Unpickler_MemoPut(UnpicklerObject *self, size_t idx, PyObject *value)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4129: _pickle_PicklerMemoProxy_copy_impl(PicklerMemoProxyObject *self)",
          "4131: {",
          "4133:     PyMemoTable *memo;",
          "4134:     PyObject *new_memo = PyDict_New();",
          "4135:     if (new_memo == NULL)",
          "",
          "[Removed Lines]",
          "4132:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "4137:     size_t i;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6545: _pickle_UnpicklerMemoProxy_copy_impl(UnpicklerMemoProxyObject *self)",
          "6547: {",
          "6549:     PyObject *new_memo = PyDict_New();",
          "6550:     if (new_memo == NULL)",
          "6551:         return NULL;",
          "",
          "[Removed Lines]",
          "6548:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "6553:     size_t i;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6696: Unpickler_set_memo(UnpicklerObject *self, PyObject *obj)",
          "6697: {",
          "6698:     PyObject **new_memo;",
          "6702:     if (obj == NULL) {",
          "6703:         PyErr_SetString(PyExc_TypeError,",
          "",
          "[Removed Lines]",
          "6699:     Py_ssize_t new_memo_size = 0;",
          "6700:     Py_ssize_t i;",
          "",
          "[Added Lines]",
          "6704:     size_t new_memo_size = 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6706:     }",
          "6708:     if (Py_TYPE(obj) == &UnpicklerMemoProxyType) {",
          "6709:         UnpicklerObject *unpickler =",
          "6710:             ((UnpicklerMemoProxyObject *)obj)->unpickler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6713:         size_t i;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6763:   error:",
          "6764:     if (new_memo_size) {",
          "6767:             Py_XDECREF(new_memo[i]);",
          "6768:         }",
          "6769:         PyMem_FREE(new_memo);",
          "",
          "[Removed Lines]",
          "6765:         i = new_memo_size;",
          "6766:         while (--i >= 0) {",
          "",
          "[Added Lines]",
          "6770:         size_t i;",
          "6771:         for (i = new_memo_size - 1; i != SIZE_MAX; i--) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}