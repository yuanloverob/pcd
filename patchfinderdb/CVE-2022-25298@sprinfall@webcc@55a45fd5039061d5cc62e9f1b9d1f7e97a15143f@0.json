{
  "cve_id": "CVE-2022-25298",
  "cve_desc": "This affects the package sprinfall/webcc before 0.3.0. It is possible to traverse directories to fetch arbitrary files from the server.",
  "repo": "sprinfall/webcc",
  "patch_hash": "55a45fd5039061d5cc62e9f1b9d1f7e97a15143f",
  "patch_info": {
    "commit_hash": "55a45fd5039061d5cc62e9f1b9d1f7e97a15143f",
    "repo": "sprinfall/webcc",
    "commit_url": "https://github.com/sprinfall/webcc/commit/55a45fd5039061d5cc62e9f1b9d1f7e97a15143f",
    "files": [
      "examples/CMakeLists.txt",
      "examples/encoding.cc",
      "examples/encoding.h",
      "examples/url_unicode.cc",
      "webcc/body.cc",
      "webcc/fs.h",
      "webcc/request_parser.cc",
      "webcc/request_parser.h",
      "webcc/router.cc",
      "webcc/router.h",
      "webcc/server.cc",
      "webcc/server.h",
      "webcc/string.cc",
      "webcc/string.h",
      "webcc/url.cc",
      "webcc/url.h",
      "webcc/utility.cc",
      "webcc/utility.h"
    ],
    "message": "fix static file serving security issue; fix url path encoding issue",
    "before_after_code_files": [
      "examples/encoding.cc||examples/encoding.cc",
      "examples/encoding.h||examples/encoding.h",
      "webcc/body.cc||webcc/body.cc",
      "webcc/fs.h||webcc/fs.h",
      "webcc/request_parser.cc||webcc/request_parser.cc",
      "webcc/request_parser.h||webcc/request_parser.h",
      "webcc/router.cc||webcc/router.cc",
      "webcc/router.h||webcc/router.h",
      "webcc/server.cc||webcc/server.cc",
      "webcc/server.h||webcc/server.h",
      "webcc/string.cc||webcc/string.cc",
      "webcc/string.h||webcc/string.h",
      "webcc/url.cc||webcc/url.cc",
      "webcc/url.h||webcc/url.h",
      "webcc/utility.cc||webcc/utility.cc",
      "webcc/utility.h||webcc/utility.h"
    ]
  },
  "patch_diff": {
    "examples/encoding.cc||examples/encoding.cc": [
      "File: examples/encoding.cc -> examples/encoding.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "examples/encoding.h||examples/encoding.h": [
      "File: examples/encoding.h -> examples/encoding.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "webcc/body.cc||webcc/body.cc": [
      "File: webcc/body.cc -> webcc/body.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "202: }",
      "204: void FileBody::Dump(std::ostream& os, const std::string& prefix) const {",
      "206: }",
      "208: bool FileBody::Move(const fs::path& new_path) {",
      "",
      "[Removed Lines]",
      "205:   os << prefix << \"<file: \" << path_.string() << \">\" << std::endl;",
      "",
      "[Added Lines]",
      "205:   os << prefix << \"<file: \" << path_.u8string() << \">\" << std::endl;",
      "",
      "---------------"
    ],
    "webcc/fs.h||webcc/fs.h": [
      "File: webcc/fs.h -> webcc/fs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: using std::filesystem::filesystem_error;",
      "30: using std::filesystem::rename;",
      "31: using std::filesystem::remove;",
      "32: using std::filesystem::exists;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: using std::filesystem::absolute;",
      "31: using std::filesystem::canonical;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47: using boost::filesystem::filesystem_error;",
      "50: using boost::filesystem::rename;",
      "51: using boost::filesystem::remove;",
      "52: using boost::filesystem::exists;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52: using boost::filesystem::absolute;",
      "53: using boost::filesystem::canonical;",
      "",
      "---------------"
    ],
    "webcc/request_parser.cc||webcc/request_parser.cc": [
      "File: webcc/request_parser.cc -> webcc/request_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: }",
      "26: bool RequestParser::OnHeadersEnd() {",
      "30:   if (!matched) {",
      "31:     LOG_WARN(\"No view matches the request: %s %s\", request_->method().c_str(),",
      "33:   }",
      "35:   return matched;",
      "36: }",
      "",
      "[Removed Lines]",
      "27:   bool matched = view_matcher_(request_->method(), request_->url().path(),",
      "28:                                &stream_);",
      "32:              request_->url().path().c_str());",
      "",
      "[Added Lines]",
      "28:   std::string url_path = Url::DecodeUnsafe(request_->url().path());",
      "29:   bool matched = view_matcher_(request_->method(), url_path, &stream_);",
      "32:              url_path.c_str());",
      "",
      "---------------"
    ],
    "webcc/request_parser.h||webcc/request_parser.h": [
      "File: webcc/request_parser.h -> webcc/request_parser.h"
    ],
    "webcc/router.cc||webcc/router.cc": [
      "File: webcc/router.cc -> webcc/router.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "67:   return ViewPtr();",
      "68: }",
      "71:                        bool* stream) {",
      "72:   assert(stream != nullptr);",
      "",
      "[Removed Lines]",
      "70: bool Router::MatchView(const std::string& method, const std::string& url,",
      "",
      "[Added Lines]",
      "70: bool Router::MatchView(const std::string& method, const std::string& url_path,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "81:     if (route.url.empty()) {",
      "82:       std::smatch match;",
      "86:         return true;",
      "87:       }",
      "88:     } else {",
      "91:         return true;",
      "92:       }",
      "",
      "[Removed Lines]",
      "84:       if (std::regex_match(url, match, route.url_regex)) {",
      "89:       if (boost::iequals(route.url, url)) {",
      "",
      "[Added Lines]",
      "83:       if (std::regex_match(url_path, match, route.url_regex)) {",
      "88:       if (boost::iequals(route.url, url_path)) {",
      "",
      "---------------"
    ],
    "webcc/router.h||webcc/router.h": [
      "File: webcc/router.h -> webcc/router.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:   ViewPtr FindView(const std::string& method, const std::string& url,",
      "29:                    UrlArgs* args);",
      "35:                  bool* stream);",
      "37: private:",
      "",
      "[Removed Lines]",
      "34:   bool MatchView(const std::string& method, const std::string& url,",
      "",
      "[Added Lines]",
      "34:   bool MatchView(const std::string& method, const std::string& url_path,",
      "",
      "---------------"
    ],
    "webcc/server.cc||webcc/server.cc": [
      "File: webcc/server.cc -> webcc/server.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include <fstream>",
      "5: #include <utility>",
      "7: #include \"webcc/body.h\"",
      "8: #include \"webcc/logger.h\"",
      "9: #include \"webcc/request.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #include \"boost/algorithm/string/trim.hpp\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32:       doc_root_(doc_root),",
      "33:       acceptor_(io_context_),",
      "34:       signals_(io_context_) {",
      "35:   AddSignals();",
      "36: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37:   CheckDocRoot();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "105:   return running_ && !io_context_.stopped();",
      "106: }",
      "108: void Server::AddSignals() {",
      "109:   signals_.add(SIGINT);  // Ctrl+C",
      "110:   signals_.add(SIGTERM);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111: void Server::CheckDocRoot() {",
      "112:   try {",
      "113:     if (!fs::exists(doc_root_) || !fs::is_directory(doc_root_)) {",
      "114:       LOG_ERRO(\"Doc root is not an existing directory!\");",
      "115:       return;",
      "116:     }",
      "118:     if (doc_root_.is_relative()) {",
      "119:       doc_root_ = fs::absolute(doc_root_);",
      "120:     }",
      "122:     doc_root_ = fs::canonical(doc_root_);",
      "124:   } catch (fs::filesystem_error& e) {",
      "125:     LOG_ERRO(\"Doc root error: %s\", e.what());",
      "126:     doc_root_.clear();",
      "127:   }",
      "129:   LOG_INFO(\"Doc root: %s\", doc_root_.u8string().c_str());",
      "130: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "314: }",
      "316: bool Server::MatchViewOrStatic(const std::string& method,",
      "319:     return true;",
      "320:   }",
      "323:   if (method == methods::kGet && !doc_root_.empty()) {",
      "326:     fs::error_code ec;",
      "327:     if (!fs::is_directory(path, ec) && fs::exists(path, ec)) {",
      "",
      "[Removed Lines]",
      "317:                                const std::string& url, bool* stream) {",
      "318:   if (Router::MatchView(method, url, stream)) {",
      "324:     fs::path path = doc_root_ / url;",
      "",
      "[Added Lines]",
      "341:                                const std::string& url_path, bool* stream) {",
      "342:   if (Router::MatchView(method, url_path, stream)) {",
      "348:     fs::path sub_path = utility::TranslatePath(url_path);",
      "350:     fs::path path = doc_root_ / sub_path;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "340:     return {};",
      "341:   }",
      "345:   try {",
      "",
      "[Removed Lines]",
      "343:   fs::path path = doc_root_ / request->url().path();",
      "",
      "[Added Lines]",
      "369:   std::string url_path = Url::DecodeUnsafe(request->url().path());",
      "370:   fs::path sub_path = utility::TranslatePath(url_path);",
      "371:   fs::path path = doc_root_ / sub_path;",
      "",
      "---------------"
    ],
    "webcc/server.h||webcc/server.h": [
      "File: webcc/server.h -> webcc/server.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:   bool IsRunning() const;",
      "63: private:",
      "65:   void AddSignals();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:   void CheckDocRoot();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "91:   virtual void Handle(ConnectionPtr connection);",
      "97:                          bool* stream);",
      "",
      "[Removed Lines]",
      "96:   bool MatchViewOrStatic(const std::string& method, const std::string& url,",
      "",
      "[Added Lines]",
      "103:   bool MatchViewOrStatic(const std::string& method, const std::string& url_path,",
      "",
      "---------------"
    ],
    "webcc/string.cc||webcc/string.cc": [
      "File: webcc/string.cc -> webcc/string.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #include \"webcc/string.h\"",
      "3: #include <random>",
      "5: #include \"boost/algorithm/string/trim.hpp\"",
      "7: namespace webcc {",
      "10: std::string RandomString(std::size_t length) {",
      "11:   static const char chrs[] =",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: #if (defined(_WIN32) || defined(_WIN64))",
      "4: #include <Windows.h>",
      "5: #endif",
      "13: #if (defined(_WIN32) || defined(_WIN64))",
      "16: static std::wstring MB2WC(const std::string& input, unsigned int code_page) {",
      "17:   if (input.empty()) {",
      "18:     return L\"\";",
      "19:   }",
      "21:   int length = ::MultiByteToWideChar(code_page, 0, &input[0],",
      "22:                                      static_cast<int>(input.size()),",
      "23:                                      NULL, 0);",
      "25:   std::wstring output(length, '\\0');",
      "27:   ::MultiByteToWideChar(code_page, 0, &input[0], static_cast<int>(input.size()),",
      "28:                         &output[0], static_cast<int>(output.size()));",
      "30:   return output;",
      "31: }",
      "34: static std::string WC2MB(const std::wstring& input, unsigned int code_page) {",
      "35:   if (input.empty()) {",
      "36:     return \"\";",
      "37:   }",
      "42:   DWORD flags = 0;",
      "43:   if (code_page != 65001 && code_page != 54936) {",
      "44:     flags = WC_NO_BEST_FIT_CHARS | WC_COMPOSITECHECK | WC_DEFAULTCHAR;",
      "45:   }",
      "47:   int length = ::WideCharToMultiByte(code_page, flags, &input[0],",
      "48:                                      static_cast<int>(input.size()), NULL, 0,",
      "49:                                      NULL, NULL);",
      "51:   std::string output(length, '\\0');",
      "53:   ::WideCharToMultiByte(code_page, flags, &input[0],",
      "54:                         static_cast<int>(input.size()), &output[0],",
      "55:                         static_cast<int>(output.size()), NULL, NULL);",
      "57:   return output;",
      "58: }",
      "60: std::string Utf16To8(const std::wstring& utf16_string) {",
      "61:   return WC2MB(utf16_string, CP_UTF8);",
      "62: }",
      "64: std::wstring Utf8To16(const std::string& utf8_string) {",
      "65:   return MB2WC(utf8_string, CP_UTF8);",
      "66: }",
      "68: #endif  // defined(_WIN32) || defined(_WIN64)",
      "",
      "---------------"
    ],
    "webcc/string.h||webcc/string.h": [
      "File: webcc/string.h -> webcc/string.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: namespace webcc {",
      "12: std::string RandomString(std::size_t length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: #if (defined(_WIN32) || defined(_WIN64))",
      "12: std::string Utf16To8(const std::wstring& utf16_string);",
      "13: std::wstring Utf8To16(const std::string& utf8_string);",
      "14: #endif",
      "",
      "---------------"
    ],
    "webcc/url.cc||webcc/url.cc": [
      "File: webcc/url.cc -> webcc/url.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:   return true;",
      "30: }",
      "79: std::string EncodeImpl(string_view raw,  // UTF8",
      "80:                        std::function<bool(int)> should_encode) {",
      "",
      "[Removed Lines]",
      "32: bool Decode(string_view encoded, std::string* raw) {",
      "33:   for (auto iter = encoded.begin(); iter != encoded.end(); ++iter) {",
      "34:     if (*iter == '%') {",
      "35:       if (++iter == encoded.end()) {",
      "37:         return false;",
      "38:       }",
      "40:       int h_decimal = 0;",
      "41:       if (!HexToDecimal(*iter, &h_decimal)) {",
      "42:         return false;",
      "43:       }",
      "45:       if (++iter == encoded.end()) {",
      "47:         return false;",
      "48:       }",
      "50:       int l_decimal = 0;",
      "51:       if (!HexToDecimal(*iter, &l_decimal)) {",
      "52:         return false;",
      "53:       }",
      "55:       raw->push_back(static_cast<char>((h_decimal << 4) + l_decimal));",
      "57:     } else if (*iter > 127 || *iter < 0) {",
      "59:       return false;",
      "60:     } else {",
      "61:       raw->push_back(*iter);",
      "62:     }",
      "63:   }",
      "65:   return true;",
      "66: }",
      "70: std::string DecodeUnsafe(string_view encoded) {",
      "71:   std::string raw;",
      "72:   if (Decode(encoded, &raw)) {",
      "73:     return raw;",
      "74:   }",
      "75:   return ToString(encoded);",
      "76: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "195:   });",
      "196: }",
      "200: Url::Url(string_view str, bool encode) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "152: bool Url::Decode(string_view encoded, std::string* raw) {",
      "153:   for (auto iter = encoded.begin(); iter != encoded.end(); ++iter) {",
      "154:     if (*iter == '%') {",
      "155:       if (++iter == encoded.end()) {",
      "157:         return false;",
      "158:       }",
      "160:       int h_decimal = 0;",
      "161:       if (!HexToDecimal(*iter, &h_decimal)) {",
      "162:         return false;",
      "163:       }",
      "165:       if (++iter == encoded.end()) {",
      "167:         return false;",
      "168:       }",
      "170:       int l_decimal = 0;",
      "171:       if (!HexToDecimal(*iter, &l_decimal)) {",
      "172:         return false;",
      "173:       }",
      "175:       raw->push_back(static_cast<char>((h_decimal << 4) + l_decimal));",
      "177:     } else if (*iter > 127 || *iter < 0) {",
      "179:       return false;",
      "180:     } else {",
      "181:       raw->push_back(*iter);",
      "182:     }",
      "183:   }",
      "185:   return true;",
      "186: }",
      "188: std::string Url::DecodeUnsafe(string_view encoded) {",
      "189:   std::string raw;",
      "190:   if (Decode(encoded, &raw)) {",
      "191:     return raw;",
      "192:   }",
      "193:   return ToString(encoded);",
      "194: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "318:       string_view key;",
      "319:       string_view value;",
      "320:       if (SplitKV(kv, '=', false, &key, &value)) {",
      "322:       }",
      "323:     }",
      "324:   }",
      "",
      "[Removed Lines]",
      "321:         parameters_.push_back({ DecodeUnsafe(key), DecodeUnsafe(value) });",
      "",
      "[Added Lines]",
      "319:         parameters_.push_back(",
      "320:             { Url::DecodeUnsafe(key), Url::DecodeUnsafe(value) });",
      "",
      "---------------"
    ],
    "webcc/url.h||webcc/url.h": [
      "File: webcc/url.h -> webcc/url.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "22:   static std::string EncodeQuery(string_view utf8_str);",
      "23:   static std::string EncodeFull(string_view utf8_str);",
      "25: public:",
      "26:   Url() = default;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25:   static bool Decode(string_view encoded, std::string* raw);",
      "29:   static std::string DecodeUnsafe(string_view encoded);",
      "",
      "---------------"
    ],
    "webcc/utility.cc||webcc/utility.cc": [
      "File: webcc/utility.cc -> webcc/utility.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #include <iostream>",
      "8: #include <sstream>",
      "10: #include \"webcc/string.h\"",
      "11: #include \"webcc/version.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: #include \"boost/algorithm/string.hpp\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "91:   return ss.str();",
      "92: }",
      "94: }  // namespace utility",
      "95: }  // namespace webcc",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96: fs::path TranslatePath(const std::string& utf8_url_path) {",
      "97: #if (defined(_WIN32) || defined(_WIN64))",
      "98:   std::wstring url_path = Utf8To16(utf8_url_path);",
      "99:   std::vector<std::wstring> words;",
      "100:   boost::split(words, url_path, boost::is_any_of(L\"/\"),",
      "101:                boost::token_compress_on);",
      "102: #else",
      "103:   std::vector<std::string> words;",
      "104:   boost::split(words, utf8_url_path, boost::is_any_of(\"/\"),",
      "105:                boost::token_compress_on);",
      "106: #endif  // defined(_WIN32) || defined(_WIN64)",
      "108:   fs::path path;",
      "109:   for (auto& word : words) {",
      "111: #if (defined(_WIN32) || defined(_WIN64))",
      "112:     if (word == L\".\" || word == L\"..\") {",
      "113: #else",
      "114:     if (word == \".\" || word == \"..\") {",
      "115: #endif",
      "116:       continue;",
      "117:     }",
      "119:     fs::path p{ word };",
      "123:     if (!p.parent_path().empty()) {",
      "124:       continue;",
      "125:     }",
      "127:     path /= p;",
      "128:   }",
      "130:   return path;",
      "131: }",
      "",
      "---------------"
    ],
    "webcc/utility.h||webcc/utility.h": [
      "File: webcc/utility.h -> webcc/utility.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: std::string EndpointToString(const boost::asio::ip::tcp::endpoint& endpoint);",
      "42: }  // namespace utility",
      "43: }  // namespace webcc",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53: fs::path TranslatePath(const std::string& utf8_url_path);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fcd822037138ada85a64cc015983c7ff09caceba",
      "candidate_info": {
        "commit_hash": "fcd822037138ada85a64cc015983c7ff09caceba",
        "repo": "sprinfall/webcc",
        "commit_url": "https://github.com/sprinfall/webcc/commit/fcd822037138ada85a64cc015983c7ff09caceba",
        "files": [
          "CMakeLists.txt",
          "unittest/base64_unittest.cc",
          "unittest/string_unittest.cc",
          "webcc/base64.cc",
          "webcc/base64.h",
          "webcc/body.cc",
          "webcc/body.h",
          "webcc/client_base.cc",
          "webcc/client_base.h",
          "webcc/client_session.cc",
          "webcc/client_session.h",
          "webcc/common.cc",
          "webcc/common.h",
          "webcc/globals.h",
          "webcc/message.cc",
          "webcc/message.h",
          "webcc/request.h",
          "webcc/request_builder.cc",
          "webcc/request_builder.h",
          "webcc/request_parser.cc",
          "webcc/response_builder.cc",
          "webcc/response_builder.h",
          "webcc/router.cc",
          "webcc/router.h",
          "webcc/string.cc",
          "webcc/string.h",
          "webcc/url.cc",
          "webcc/url.h",
          "webcc/utility.cc",
          "webcc/utility.h"
        ],
        "message": "rework the usage of string_view",
        "before_after_code_files": [
          "unittest/base64_unittest.cc||unittest/base64_unittest.cc",
          "unittest/string_unittest.cc||unittest/string_unittest.cc",
          "webcc/base64.cc||webcc/base64.cc",
          "webcc/base64.h||webcc/base64.h",
          "webcc/body.cc||webcc/body.cc",
          "webcc/body.h||webcc/body.h",
          "webcc/client_base.cc||webcc/client_base.cc",
          "webcc/client_base.h||webcc/client_base.h",
          "webcc/client_session.cc||webcc/client_session.cc",
          "webcc/client_session.h||webcc/client_session.h",
          "webcc/common.cc||webcc/common.cc",
          "webcc/common.h||webcc/common.h",
          "webcc/globals.h||webcc/globals.h",
          "webcc/message.cc||webcc/message.cc",
          "webcc/message.h||webcc/message.h",
          "webcc/request.h||webcc/request.h",
          "webcc/request_builder.cc||webcc/request_builder.cc",
          "webcc/request_builder.h||webcc/request_builder.h",
          "webcc/request_parser.cc||webcc/request_parser.cc",
          "webcc/response_builder.cc||webcc/response_builder.cc",
          "webcc/response_builder.h||webcc/response_builder.h",
          "webcc/router.cc||webcc/router.cc",
          "webcc/router.h||webcc/router.h",
          "webcc/string.cc||webcc/string.cc",
          "webcc/string.h||webcc/string.h",
          "webcc/url.cc||webcc/url.cc",
          "webcc/url.h||webcc/url.h",
          "webcc/utility.cc||webcc/utility.cc",
          "webcc/utility.h||webcc/utility.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "webcc/body.cc||webcc/body.cc",
            "webcc/request_parser.cc||webcc/request_parser.cc",
            "webcc/router.cc||webcc/router.cc",
            "webcc/router.h||webcc/router.h",
            "webcc/string.cc||webcc/string.cc",
            "webcc/string.h||webcc/string.h",
            "webcc/url.cc||webcc/url.cc",
            "webcc/url.h||webcc/url.h",
            "webcc/utility.cc||webcc/utility.cc",
            "webcc/utility.h||webcc/utility.h"
          ],
          "candidate": [
            "webcc/body.cc||webcc/body.cc",
            "webcc/request_parser.cc||webcc/request_parser.cc",
            "webcc/router.cc||webcc/router.cc",
            "webcc/router.h||webcc/router.h",
            "webcc/string.cc||webcc/string.cc",
            "webcc/string.h||webcc/string.h",
            "webcc/url.cc||webcc/url.cc",
            "webcc/url.h||webcc/url.h",
            "webcc/utility.cc||webcc/utility.cc",
            "webcc/utility.h||webcc/utility.h"
          ]
        }
      },
      "candidate_diff": {
        "unittest/base64_unittest.cc||unittest/base64_unittest.cc": [
          "File: unittest/base64_unittest.cc -> unittest/base64_unittest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"webcc/base64.h\"",
          "5: TEST(Base64Test, Encode) {",
          "16: }",
          "18: TEST(Base64Test, Decode) {",
          "29: }",
          "",
          "[Removed Lines]",
          "6:   std::string encoded;",
          "8:   encoded = webcc::Base64Encode(\"ban\");",
          "9:   EXPECT_EQ(encoded, \"YmFu\");",
          "11:   encoded = webcc::Base64Encode(\"bana\");",
          "12:   EXPECT_EQ(encoded, \"YmFuYQ==\");",
          "14:   encoded = webcc::Base64Encode(\"banan\");",
          "15:   EXPECT_EQ(encoded, \"YmFuYW4=\");",
          "19:   std::string decoded;",
          "21:   decoded = webcc::Base64Decode(\"YmFu\");",
          "22:   EXPECT_EQ(decoded, \"ban\");",
          "24:   decoded = webcc::Base64Decode(\"YmFuYQ==\");",
          "25:   EXPECT_EQ(decoded, \"bana\");",
          "27:   decoded = webcc::Base64Decode(\"YmFuYW4=\");",
          "28:   EXPECT_EQ(decoded, \"banan\");",
          "",
          "[Added Lines]",
          "6:   using webcc::base64::Encode;",
          "8:   EXPECT_EQ(Encode(\"ban\"), \"YmFu\");",
          "9:   EXPECT_EQ(Encode(\"bana\"), \"YmFuYQ==\");",
          "10:   EXPECT_EQ(Encode(\"banan\"), \"YmFuYW4=\");",
          "14:   using webcc::base64::Decode;",
          "16:   EXPECT_EQ(Decode(\"YmFu\"), \"ban\");",
          "17:   EXPECT_EQ(Decode(\"YmFuYQ==\"), \"bana\");",
          "18:   EXPECT_EQ(Decode(\"YmFuYW4=\"), \"banan\");",
          "",
          "---------------"
        ],
        "unittest/string_unittest.cc||unittest/string_unittest.cc": [
          "File: unittest/string_unittest.cc -> unittest/string_unittest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: }",
          "19: TEST(StringTest, Trim) {",
          "22:   webcc::Trim(sv);",
          "23:   EXPECT_EQ(sv, \"trim me\");",
          "24: }",
          "26: TEST(StringTest, Trim_Left) {",
          "29:   webcc::Trim(sv);",
          "30:   EXPECT_EQ(sv, \"trim me\");",
          "31: }",
          "33: TEST(StringTest, Trim_Right) {",
          "36:   webcc::Trim(sv);",
          "37:   EXPECT_EQ(sv, \"trim me\");",
          "38: }",
          "40: TEST(StringTest, Trim_Empty) {",
          "43:   webcc::Trim(sv);",
          "44:   EXPECT_EQ(sv, \"\");",
          "45: }",
          "47: TEST(StringTest, Split) {",
          "49:   webcc::Split(\"GET /path/to HTTP/1.1\", ' ', false, &parts);",
          "51:   ASSERT_EQ(parts.size(), 3);",
          "",
          "[Removed Lines]",
          "20:   std::string str = \"   trim me  \";",
          "21:   webcc::string_view sv = str;",
          "27:   std::string str = \"   trim me\";",
          "28:   webcc::string_view sv = str;",
          "34:   std::string str = \"trim me  \";",
          "35:   webcc::string_view sv = str;",
          "41:   std::string str = \"\";",
          "42:   webcc::string_view sv = str;",
          "48:   std::vector<webcc::string_view> parts;",
          "",
          "[Added Lines]",
          "20:   std::string_view sv = \"   trim me  \";",
          "26:   std::string_view sv = \"   trim me\";",
          "32:   std::string_view sv = \"trim me  \";",
          "38:   std::string_view sv = \"\";",
          "43: TEST(StringTest, Unquote) {",
          "44:   EXPECT_EQ(webcc::Unquote(\"\"), \"\");",
          "45:   EXPECT_EQ(webcc::Unquote(\"\\\"\\\"\"), \"\");",
          "46:   EXPECT_EQ(webcc::Unquote(\"\\\" test \\\"\"), \" test \");",
          "47:   EXPECT_EQ(webcc::Unquote(\" \\\"test\\\" \"), \" \\\"test\\\" \");",
          "48: }",
          "51:   std::vector<std::string_view> parts;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: }",
          "57: TEST(StringTest, Split_TokenCompressOff) {",
          "66:   ASSERT_EQ(parts.size(), 6);",
          "67:   EXPECT_EQ(parts[0], \"one\");",
          "",
          "[Removed Lines]",
          "58:   std::string str = \"one,two,,three,,\";",
          "59:   std::vector<webcc::string_view> parts;",
          "64:   webcc::Split(str, ',', false, &parts);",
          "",
          "[Added Lines]",
          "64:   std::vector<std::string_view> parts;",
          "65:   webcc::Split(\"one,two,,three,,\", ',', false, &parts);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73: }",
          "75: TEST(StringTest, Split_TokenCompressOn) {",
          "84:   ASSERT_EQ(parts.size(), 4);",
          "85:   EXPECT_EQ(parts[0], \"one\");",
          "",
          "[Removed Lines]",
          "76:   std::string str = \"one,two,,three,,\";",
          "77:   std::vector<webcc::string_view> parts;",
          "82:   webcc::Split(str, ',', true, &parts);",
          "",
          "[Added Lines]",
          "80:   std::vector<std::string_view> parts;",
          "81:   webcc::Split(\"one,two,,three,,\", ',', true, &parts);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89: }",
          "91: TEST(StringTest, Split_TokensOnly) {",
          "97:   ASSERT_EQ(parts.size(), 2);",
          "98:   EXPECT_EQ(parts[0], \"\");",
          "99:   EXPECT_EQ(parts[1], \"\");",
          "",
          "[Removed Lines]",
          "92:   std::string str = \",,,,,\";",
          "93:   std::vector<webcc::string_view> parts;",
          "96:   webcc::Split(str, ',', true, &parts);",
          "",
          "[Added Lines]",
          "92:   std::vector<std::string_view> parts;",
          "93:   webcc::Split(\",,,,,\", ',', true, &parts);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101:   parts.clear();",
          "105:   ASSERT_EQ(parts.size(), 6);",
          "106:   EXPECT_EQ(parts[0], \"\");",
          "107:   EXPECT_EQ(parts[1], \"\");",
          "",
          "[Removed Lines]",
          "104:   webcc::Split(str, ',', false, &parts);",
          "",
          "[Added Lines]",
          "101:   webcc::Split(\",,,,,\", ',', false, &parts);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "109: }",
          "111: TEST(StringTest, Split_NewLine) {",
          "113:   webcc::Split(\"line one\\nline two\\nline 3\", '\\n', false, &lines);",
          "115:   ASSERT_EQ(lines.size(), 3);",
          "",
          "[Removed Lines]",
          "112:   std::vector<webcc::string_view> lines;",
          "",
          "[Added Lines]",
          "109:   std::vector<std::string_view> lines;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "119: }",
          "121: TEST(StringTest, SplitKV) {",
          "128:   EXPECT_TRUE(ok);",
          "129:   EXPECT_EQ(key, \"key\");",
          "",
          "[Removed Lines]",
          "122:   const std::string str = \"key=value\";",
          "124:   webcc::string_view key;",
          "125:   webcc::string_view value;",
          "126:   bool ok = webcc::SplitKV(str, '=', true, &key, &value);",
          "",
          "[Added Lines]",
          "119:   std::string_view key;",
          "120:   std::string_view value;",
          "121:   bool ok = webcc::SplitKV(\"key=value\", '=', true, &key, &value);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "131: }",
          "133: TEST(StringTest, SplitKV_OtherDelim) {",
          "140:   EXPECT_TRUE(ok);",
          "141:   EXPECT_EQ(key, \"key\");",
          "",
          "[Removed Lines]",
          "134:   const std::string str = \"key:value\";",
          "136:   webcc::string_view key;",
          "137:   webcc::string_view value;",
          "138:   bool ok = webcc::SplitKV(str, ':', true, &key, &value);",
          "",
          "[Added Lines]",
          "129:   std::string_view key;",
          "130:   std::string_view value;",
          "131:   bool ok = webcc::SplitKV(\"key:value\", ':', true, &key, &value);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "143: }",
          "145: TEST(StringTest, SplitKV_Spaces) {",
          "152:   EXPECT_TRUE(ok);",
          "153:   EXPECT_EQ(key, \"key\");",
          "",
          "[Removed Lines]",
          "146:   const std::string str = \" key =  value \";",
          "148:   webcc::string_view key;",
          "149:   webcc::string_view value;",
          "150:   bool ok = webcc::SplitKV(str, '=', true, &key, &value);",
          "",
          "[Added Lines]",
          "139:   std::string_view key;",
          "140:   std::string_view value;",
          "141:   bool ok = webcc::SplitKV(\" key =  value \", '=', true, &key, &value);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "155: }",
          "157: TEST(StringTest, SplitKV_SpacesNoTrim) {",
          "164:   EXPECT_TRUE(ok);",
          "165:   EXPECT_EQ(key, \" key \");",
          "",
          "[Removed Lines]",
          "158:   const std::string str = \" key =  value \";",
          "160:   webcc::string_view key;",
          "161:   webcc::string_view value;",
          "162:   bool ok = webcc::SplitKV(str, '=', false, &key, &value);",
          "",
          "[Added Lines]",
          "149:   std::string_view key;",
          "150:   std::string_view value;",
          "151:   bool ok = webcc::SplitKV(\" key =  value \", '=', false, &key, &value);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "167: }",
          "169: TEST(StringTest, SplitKV_NoKey) {",
          "176:   EXPECT_TRUE(ok);",
          "177:   EXPECT_EQ(key, \"\");",
          "",
          "[Removed Lines]",
          "170:   const std::string str = \"=value\";",
          "172:   webcc::string_view key;",
          "173:   webcc::string_view value;",
          "174:   bool ok = webcc::SplitKV(str, '=', true, &key, &value);",
          "",
          "[Added Lines]",
          "159:   std::string_view key;",
          "160:   std::string_view value;",
          "161:   bool ok = webcc::SplitKV(\"=value\", '=', true, &key, &value);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "179: }",
          "181: TEST(StringTest, SplitKV_NoValue) {",
          "188:   EXPECT_TRUE(ok);",
          "189:   EXPECT_EQ(key, \"key\");",
          "",
          "[Removed Lines]",
          "182:   const std::string str = \"key=\";",
          "184:   webcc::string_view key;",
          "185:   webcc::string_view value;",
          "186:   bool ok = webcc::SplitKV(str, '=', true, &key, &value);",
          "",
          "[Added Lines]",
          "169:   std::string_view key;",
          "170:   std::string_view value;",
          "171:   bool ok = webcc::SplitKV(\"key=\", '=', true, &key, &value);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "191: }",
          "193: TEST(StringTest, SplitKV_NoKeyNoValue) {",
          "200:   EXPECT_TRUE(ok);",
          "201:   EXPECT_EQ(key, \"\");",
          "",
          "[Removed Lines]",
          "194:   const std::string str = \"=\";",
          "196:   webcc::string_view key;",
          "197:   webcc::string_view value;",
          "198:   bool ok = webcc::SplitKV(str, '=', true, &key, &value);",
          "",
          "[Added Lines]",
          "179:   std::string_view key;",
          "180:   std::string_view value;",
          "181:   bool ok = webcc::SplitKV(\"=\", '=', true, &key, &value);",
          "",
          "---------------"
        ],
        "webcc/base64.cc||webcc/base64.cc": [
          "File: webcc/base64.cc -> webcc/base64.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: namespace webcc {",
          "49: static const char kAlphabet[] =",
          "",
          "[Removed Lines]",
          "46: namespace base64 {",
          "",
          "[Added Lines]",
          "46: namespace base64_internal {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:           in - reinterpret_cast<const unsigned char*>(src)};",
          "160: }",
          "165:   std::string dst;",
          "168:   return dst;",
          "169: }",
          "174: }",
          "177:   std::string dst;",
          "180:   dst.resize(result.first);",
          "181:   return dst;",
          "182: }",
          "184: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "162: }  // namespace base64",
          "164: std::string Base64Encode(const std::uint8_t* data, std::size_t length) {",
          "166:   dst.resize(base64::EncodedSize(length));",
          "167:   dst.resize(base64::Encode(data, length, &dst[0]));",
          "171: std::string Base64Encode(const std::string& input) {",
          "172:   return Base64Encode(reinterpret_cast<const std::uint8_t*>(input.data()),",
          "173:                       input.size());",
          "176: std::string Base64Decode(const std::string& input) {",
          "178:   dst.resize(base64::DecodedSize(input.size()));",
          "179:   auto result = base64::Decode(input.data(), input.size(), &dst[0]);",
          "",
          "[Added Lines]",
          "166: }  // namespace base64_internal",
          "168: namespace base64 {",
          "170: std::string Encode(const std::uint8_t* data, std::size_t length) {",
          "172:   dst.resize(base64_internal::EncodedSize(length));",
          "173:   dst.resize(base64_internal::Encode(data, length, &dst[0]));",
          "177: std::string Encode(const std::string_view& input) {",
          "178:   return Encode(reinterpret_cast<const std::uint8_t*>(input.data()),",
          "179:                 input.size());",
          "182: std::string Decode(const std::string_view& input) {",
          "184:   dst.resize(base64_internal::DecodedSize(input.size()));",
          "185:   auto result = base64_internal::Decode(input.data(), input.size(), &dst[0]);",
          "190: }  // namespace base64",
          "",
          "---------------"
        ],
        "webcc/base64.h||webcc/base64.h": [
          "File: webcc/base64.h -> webcc/base64.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <cstdint>",
          "5: #include <string>",
          "7: namespace webcc {",
          "15: }  // namespace webcc",
          "17: #endif  // WEBCC_BASE64_H_",
          "",
          "[Removed Lines]",
          "9: std::string Base64Encode(const std::uint8_t* data, std::size_t length);",
          "11: std::string Base64Encode(const std::string& input);",
          "13: std::string Base64Decode(const std::string& input);",
          "",
          "[Added Lines]",
          "6: #include <string_view>",
          "9: namespace base64 {",
          "11: std::string Encode(const std::uint8_t* data, std::size_t length);",
          "13: std::string Encode(const std::string_view& input);",
          "15: std::string Decode(const std::string_view& input);",
          "17: }  // namespace base64",
          "",
          "---------------"
        ],
        "webcc/body.cc||webcc/body.cc": [
          "File: webcc/body.cc -> webcc/body.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:   if (!data_.empty()) {",
          "75:     utility::DumpByLine(data_, os, prefix);",
          "76:   }",
          "",
          "[Removed Lines]",
          "73: void StringBody::Dump(std::ostream& os, const std::string& prefix) const {",
          "",
          "[Added Lines]",
          "73: void StringBody::Dump(std::ostream& os, std::string_view prefix) const {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   return size;",
          "97: }",
          "100:   for (auto& part : parts_) {",
          "101:     os << prefix << \"--\" << boundary_ << std::endl;",
          "102:     part->Dump(os, prefix);",
          "",
          "[Removed Lines]",
          "99: void FormBody::Dump(std::ostream& os, const std::string& prefix) const {",
          "",
          "[Added Lines]",
          "99: void FormBody::Dump(std::ostream& os, std::string_view prefix) const {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:   return {};",
          "207: }",
          "210:   os << prefix << \"<file: \" << path_.u8string() << \">\" << std::endl;",
          "211: }",
          "",
          "[Removed Lines]",
          "209: void FileBody::Dump(std::ostream& os, const std::string& prefix) const {",
          "",
          "[Added Lines]",
          "209: void FileBody::Dump(std::ostream& os, std::string_view prefix) const {",
          "",
          "---------------"
        ],
        "webcc/body.h||webcc/body.h": [
          "File: webcc/body.h -> webcc/body.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   }",
          "61:   }",
          "62: };",
          "",
          "[Removed Lines]",
          "60:   virtual void Dump(std::ostream& os, const std::string& prefix) const {",
          "",
          "[Added Lines]",
          "60:   virtual void Dump(std::ostream& os, std::string_view prefix) const {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:       : data_(std::move(data)), compressed_(compressed) {",
          "76:   }",
          "78:   std::size_t GetSize() const override {",
          "79:     return data_.size();",
          "80:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   ~StringBody() override = default;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:   Payload NextPayload(bool free_previous = false) override;",
          "104: private:",
          "105:   std::string data_;",
          "",
          "[Removed Lines]",
          "102:   void Dump(std::ostream& os, const std::string& prefix) const override;",
          "",
          "[Added Lines]",
          "104:   void Dump(std::ostream& os, std::string_view prefix) const override;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118: public:",
          "119:   FormBody(const std::vector<FormPartPtr>& parts, const std::string& boundary);",
          "121:   std::size_t GetSize() const override;",
          "123:   const std::vector<FormPartPtr>& parts() const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:   ~FormBody() override = default;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "129:   Payload NextPayload(bool free_previous = false) override;",
          "133: private:",
          "134:   void AddBoundary(Payload* payload);",
          "",
          "[Removed Lines]",
          "131:   void Dump(std::ostream& os, const std::string& prefix) const override;",
          "",
          "[Added Lines]",
          "135:   void Dump(std::ostream& os, std::string_view prefix) const override;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "169:   Payload NextPayload(bool free_previous = false) override;",
          "173:   const sfs::path& path() const {",
          "174:     return path_;",
          "",
          "[Removed Lines]",
          "171:   void Dump(std::ostream& os, const std::string& prefix) const override;",
          "",
          "[Added Lines]",
          "175:   void Dump(std::ostream& os, std::string_view prefix) const override;",
          "",
          "---------------"
        ],
        "webcc/client_base.cc||webcc/client_base.cc": [
          "File: webcc/client_base.cc -> webcc/client_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   }",
          "90: }",
          "93:   std::string port = request_->port();",
          "94:   if (port.empty()) {",
          "96:   }",
          "98:   LOG_VERB(\"Resolve host (%s)\", request_->host().c_str());",
          "",
          "[Removed Lines]",
          "92: void ClientBase::AsyncResolve(string_view default_port) {",
          "95:     port = ToString(default_port);",
          "",
          "[Added Lines]",
          "92: void ClientBase::AsyncResolve(std::string_view default_port) {",
          "95:     port = default_port;",
          "",
          "---------------"
        ],
        "webcc/client_base.h||webcc/client_base.h": [
          "File: webcc/client_base.h -> webcc/client_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:   void CloseSocket();",
          "91:   void OnResolve(boost::system::error_code ec,",
          "92:                  boost::asio::ip::tcp::resolver::results_type endpoints);",
          "",
          "[Removed Lines]",
          "89:   void AsyncResolve(string_view default_port);",
          "",
          "[Added Lines]",
          "89:   void AsyncResolve(std::string_view default_port);",
          "",
          "---------------"
        ],
        "webcc/client_session.cc||webcc/client_session.cc": [
          "File: webcc/client_session.cc -> webcc/client_session.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   started_ = false;",
          "135: }",
          "138:   if (!content_types.empty()) {",
          "139:     headers_.Set(headers::kAccept, content_types);",
          "140:   }",
          "",
          "[Removed Lines]",
          "137: void ClientSession::Accept(string_view content_types) {",
          "",
          "[Added Lines]",
          "137: void ClientSession::Accept(std::string_view content_types) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175: #endif  // WEBCC_ENABLE_GZIP",
          "192: ResponsePtr ClientSession::Send(RequestPtr request, bool stream,",
          "193:                                 ProgressCallback callback) {",
          "194:   assert(request);",
          "",
          "[Removed Lines]",
          "177: void ClientSession::Auth(string_view type, string_view credentials) {",
          "178:   headers_.Set(headers::kAuthorization,",
          "179:                ToString(type) + \" \" + ToString(credentials));",
          "180: }",
          "182: void ClientSession::AuthBasic(string_view login, string_view password) {",
          "183:   auto credentials =",
          "184:       Base64Encode(ToString(login) + \":\" + ToString(password));",
          "185:   return Auth(\"Basic\", credentials);",
          "186: }",
          "188: void ClientSession::AuthToken(string_view token) {",
          "189:   return Auth(\"Token\", token);",
          "190: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "webcc/client_session.h||webcc/client_session.h": [
          "File: webcc/client_session.h -> webcc/client_session.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     buffer_size_ = buffer_size;",
          "57:   }",
          "60:     headers_.Set(key, value);",
          "61:   }",
          "",
          "[Removed Lines]",
          "59:   void SetHeader(string_view key, string_view value) {",
          "",
          "[Added Lines]",
          "59:   void SetHeader(std::string_view key, std::string_view value) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   }",
          "75: #if WEBCC_ENABLE_GZIP",
          "",
          "[Removed Lines]",
          "67:   void SetContentType(string_view media_type, string_view charset = \"\") {",
          "68:     media_type_ = ToString(media_type);",
          "69:     charset_ = ToString(charset);",
          "73:   void Accept(string_view content_types);",
          "",
          "[Added Lines]",
          "67:   void SetContentType(std::string_view media_type,",
          "68:                       std::string_view charset = \"\") {",
          "69:     media_type_ = media_type;",
          "70:     charset_ = charset;",
          "74:   void Accept(std::string_view content_types);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80: #endif  // WEBCC_ENABLE_GZIP",
          "",
          "[Removed Lines]",
          "83:   void Auth(string_view type, string_view credentials);",
          "86:   void AuthBasic(string_view login, string_view password);",
          "89:   void AuthToken(string_view token);",
          "",
          "[Added Lines]",
          "85:   void Auth(const std::string& type, const std::string& credentials) {",
          "86:     headers_.Set(headers::kAuthorization, type + \" \" + credentials);",
          "87:   }",
          "91:   void AuthBasic(const std::string& login, const std::string& password) {",
          "92:     return Auth(\"Basic\", base64::Encode(login + \":\" + password));",
          "93:   }",
          "97:   void AuthToken(const std::string& token) {",
          "98:     return Auth(\"Token\", token);",
          "99:   }",
          "",
          "---------------"
        ],
        "webcc/common.cc||webcc/common.cc": [
          "File: webcc/common.cc -> webcc/common.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   if (value.empty()) {",
          "17:     return false;",
          "18:   }",
          "20:   auto it = Find(key);",
          "21:   if (it != headers_.end()) {",
          "23:   } else {",
          "25:   }",
          "27:   return true;",
          "28: }",
          "31:   return const_cast<Headers*>(this)->Find(key) != headers_.end();",
          "32: }",
          "35:   auto it = const_cast<Headers*>(this)->Find(key);",
          "37:   if (existed != nullptr) {",
          "",
          "[Removed Lines]",
          "15: bool Headers::Set(string_view key, string_view value) {",
          "22:     it->second = ToString(value);",
          "24:     headers_.push_back({ ToString(key), ToString(value) });",
          "30: bool Headers::Has(string_view key) const {",
          "34: const std::string& Headers::Get(string_view key, bool* existed) const {",
          "",
          "[Added Lines]",
          "15: bool Headers::Set(std::string_view key, std::string_view value) {",
          "22:     it->second = value;",
          "24:     headers_.emplace_back(key, value);",
          "30: bool Headers::Has(std::string_view key) const {",
          "35: const std::string& Headers::Get(std::string_view key, bool* existed) const {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   return s_no_value;",
          "47: }",
          "50:   auto it = headers_.begin();",
          "51:   for (; it != headers_.end(); ++it) {",
          "52:     if (boost::iequals(it->first, key)) {",
          "",
          "[Removed Lines]",
          "49: std::vector<Header>::iterator Headers::Find(string_view key) {",
          "",
          "[Added Lines]",
          "50: std::vector<Header>::iterator Headers::Find(std::string_view key) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:   if (!SplitKV(str, '=', true, &key, value)) {",
          "65:     return false;",
          "66:   }",
          "",
          "[Removed Lines]",
          "61: static bool ParseValue(const std::string& str, const char* expected_key,",
          "62:                        string_view* value) {",
          "63:   string_view key;",
          "",
          "[Added Lines]",
          "62: static bool ParseValue(std::string_view str, const char* expected_key,",
          "63:                        std::string_view* value) {",
          "64:   std::string_view key;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:   return !value->empty();",
          "71: }",
          "74:   Init(str);",
          "75: }",
          "78:   Reset();",
          "79:   Init(str);",
          "80: }",
          "",
          "[Removed Lines]",
          "73: ContentType::ContentType(string_view str) {",
          "77: void ContentType::Parse(string_view str) {",
          "",
          "[Added Lines]",
          "74: ContentType::ContentType(std::string_view str) {",
          "78: void ContentType::Parse(std::string_view str) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "97:   return true;",
          "98: }",
          "103:   std::size_t pos = str.find(';');",
          "106:   } else {",
          "109:   }",
          "111:   boost::trim(media_type_);",
          "114:   if (media_type_ == \"multipart/form-data\") {",
          "115:     multipart_ = true;",
          "117:     if (ParseValue(other, \"boundary\", &boundary)) {",
          "119:       LOG_INFO(\"Content-type multipart boundary: %s\", additional_.c_str());",
          "120:     } else {",
          "121:       LOG_ERRO(\"Invalid 'multipart/form-data' content-type (no boundary)\");",
          "122:     }",
          "123:   } else {",
          "125:     if (ParseValue(other, \"charset\", &charset)) {",
          "127:       LOG_INFO(\"Content-type charset: %s\", additional_.c_str());",
          "128:     }",
          "129:   }",
          "",
          "[Removed Lines]",
          "100: void ContentType::Init(string_view str) {",
          "101:   std::string other;",
          "104:   if (pos == str.npos) {",
          "105:     media_type_ = ToString(str);",
          "107:     media_type_ = ToString(str.substr(0, pos));",
          "108:     other = ToString(str.substr(pos + 1));",
          "112:   boost::trim(other);",
          "116:     string_view boundary;",
          "118:       additional_ = ToString(boundary);",
          "124:     string_view charset;",
          "126:       additional_ = ToString(charset);",
          "",
          "[Added Lines]",
          "101: void ContentType::Init(std::string_view str) {",
          "102:   std::string_view other;",
          "105:   if (pos == std::string_view::npos) {",
          "106:     media_type_ = str;",
          "108:     media_type_ = str.substr(0, pos);",
          "109:     other = str.substr(pos + 1);",
          "113:   Trim(other);",
          "117:     std::string_view boundary;",
          "119:       additional_ = boundary;",
          "125:     std::string_view charset;",
          "127:       additional_ = charset;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "141:   Split(str, ';', false, &parts);",
          "143:   if (parts.empty()) {",
          "",
          "[Removed Lines]",
          "135: static inline void Unquote(std::string& str) {",
          "136:   boost::trim_if(str, boost::is_any_of(\"\\\"\"));",
          "137: }",
          "139: bool ContentDisposition::Init(string_view str) {",
          "140:   std::vector<string_view> parts;",
          "",
          "[Added Lines]",
          "135: bool ContentDisposition::Init(std::string_view str) {",
          "136:   std::vector<std::string_view> parts;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "148:     return false;",
          "149:   }",
          "153:   for (std::size_t i = 1; i < parts.size(); ++i) {",
          "154:     if (!SplitKV(parts[i], '=', true, &key, &value)) {",
          "155:       return false;",
          "156:     }",
          "158:     if (key == \"name\") {",
          "161:     } else if (key == \"filename\") {",
          "164:     }",
          "165:   }",
          "",
          "[Removed Lines]",
          "151:   string_view key;",
          "152:   string_view value;",
          "159:       name_ = ToString(value);",
          "160:       Unquote(name_);",
          "162:       file_name_ = ToString(value);",
          "163:       Unquote(file_name_);",
          "",
          "[Added Lines]",
          "147:   std::string_view key;",
          "148:   std::string_view value;",
          "155:       name_ = Unquote(value);",
          "157:       file_name_ = Unquote(value);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "174:   auto form_part = std::make_shared<FormPart>();",
          "177:   form_part->data_ = std::move(data);",
          "180:   return form_part;",
          "181: }",
          "185:   auto form_part = std::make_shared<FormPart>();",
          "188:   form_part->path_ = path;",
          "",
          "[Removed Lines]",
          "172: FormPartPtr FormPart::New(string_view name, std::string&& data,",
          "173:                           string_view media_type) {",
          "176:   form_part->name_ = ToString(name);",
          "178:   form_part->media_type_ = ToString(media_type);",
          "183: FormPartPtr FormPart::NewFile(string_view name, const sfs::path& path,",
          "184:                               string_view media_type) {",
          "187:   form_part->name_ = ToString(name);",
          "189:   form_part->media_type_ = ToString(media_type);",
          "",
          "[Added Lines]",
          "166: FormPartPtr FormPart::New(std::string_view name, std::string&& data,",
          "167:                           std::string_view media_type) {",
          "170:   form_part->name_ = name;",
          "172:   form_part->media_type_ = media_type;",
          "177: FormPartPtr FormPart::NewFile(std::string_view name, const sfs::path& path,",
          "178:                               std::string_view media_type) {",
          "181:   form_part->name_ = name;",
          "183:   form_part->media_type_ = media_type;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "276:   return size;",
          "277: }",
          "280:   for (auto& h : headers_.data()) {",
          "281:     os << prefix << h.first << \": \" << h.second << std::endl;",
          "282:   }",
          "",
          "[Removed Lines]",
          "279: void FormPart::Dump(std::ostream& os, string_view prefix) const {",
          "",
          "[Added Lines]",
          "273: void FormPart::Dump(std::ostream& os, std::string_view prefix) const {",
          "",
          "---------------"
        ],
        "webcc/common.h||webcc/common.h": [
          "File: webcc/common.h -> webcc/common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     return headers_;",
          "29:   }",
          "36:   const Header& Get(std::size_t index) const {",
          "",
          "[Removed Lines]",
          "31:   bool Set(string_view key, string_view value);",
          "33:   bool Has(string_view key) const;",
          "",
          "[Added Lines]",
          "31:   bool Set(std::string_view key, std::string_view value);",
          "33:   bool Has(std::string_view key) const;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   void Clear() {",
          "47:     headers_.clear();",
          "48:   }",
          "50: private:",
          "53:   std::vector<Header> headers_;",
          "54: };",
          "",
          "[Removed Lines]",
          "44:   const std::string& Get(string_view key, bool* existed = nullptr) const;",
          "51:   std::vector<Header>::iterator Find(string_view key);",
          "",
          "[Added Lines]",
          "44:   const std::string& Get(std::string_view key, bool* existed = nullptr) const;",
          "51:   std::vector<Header>::iterator Find(std::string_view key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: class ContentType {",
          "63: public:",
          "68:   void Reset();",
          "",
          "[Removed Lines]",
          "64:   explicit ContentType(string_view str = \"\");",
          "66:   void Parse(string_view str);",
          "",
          "[Added Lines]",
          "64:   explicit ContentType(std::string_view str = \"\");",
          "66:   void Parse(std::string_view str);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:   }",
          "90: private:",
          "93: private:",
          "94:   std::string media_type_;",
          "",
          "[Removed Lines]",
          "91:   void Init(string_view str);",
          "",
          "[Added Lines]",
          "91:   void Init(std::string_view str);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "107: class ContentDisposition {",
          "108: public:",
          "110:     valid_ = Init(str);",
          "111:   }",
          "",
          "[Removed Lines]",
          "109:   explicit ContentDisposition(string_view str) {",
          "",
          "[Added Lines]",
          "109:   explicit ContentDisposition(std::string_view str) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:   }",
          "125: private:",
          "128: private:",
          "129:   std::string name_;",
          "",
          "[Removed Lines]",
          "126:   bool Init(string_view str);",
          "",
          "[Added Lines]",
          "126:   bool Init(std::string_view str);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "161:   const std::string& name() const {",
          "",
          "[Removed Lines]",
          "151:   static FormPartPtr New(string_view name, std::string&& data,",
          "152:                          string_view media_type = \"\");",
          "157:   static FormPartPtr NewFile(string_view name, const sfs::path& path,",
          "158:                              string_view media_type = \"\");",
          "",
          "[Added Lines]",
          "151:   static FormPartPtr New(std::string_view name, std::string&& data,",
          "152:                          std::string_view media_type = \"\");",
          "157:   static FormPartPtr NewFile(std::string_view name, const sfs::path& path,",
          "158:                              std::string_view media_type = \"\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "211:   std::size_t GetDataSize();",
          "216: private:",
          "",
          "[Removed Lines]",
          "214:   void Dump(std::ostream& os, string_view prefix) const;",
          "",
          "[Added Lines]",
          "214:   void Dump(std::ostream& os, std::string_view prefix) const;",
          "",
          "---------------"
        ],
        "webcc/globals.h||webcc/globals.h": [
          "File: webcc/globals.h -> webcc/globals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   };",
          "178: public:",
          "180:       : code_(code), message_(message) {",
          "181:   }",
          "",
          "[Removed Lines]",
          "179:   explicit Error(Code code = kOK, string_view message = \"\")",
          "",
          "[Added Lines]",
          "179:   explicit Error(Code code = kOK, std::string_view message = \"\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:     return message_;",
          "194:   }",
          "197:     code_ = code;",
          "199:   }",
          "201:   bool timeout() const {",
          "",
          "[Removed Lines]",
          "196:   void Set(Code code, string_view message) {",
          "198:     message_ = ToString(message);",
          "",
          "[Added Lines]",
          "196:   void Set(Code code, std::string_view message) {",
          "198:     message_ = message;",
          "",
          "---------------"
        ],
        "webcc/message.cc||webcc/message.cc": [
          "File: webcc/message.cc -> webcc/message.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   return GetHeader(headers::kAcceptEncoding).find(\"gzip\") != std::string::npos;",
          "72: }",
          "75:   if (!media_type.empty()) {",
          "76:     if (charset.empty()) {",
          "77:       SetHeader(headers::kContentType, media_type);",
          "78:     } else {",
          "80:       value += \"; charset=\";",
          "82:       SetHeader(headers::kContentType, value);",
          "83:     }",
          "84:   }",
          "",
          "[Removed Lines]",
          "74: void Message::SetContentType(string_view media_type, string_view charset) {",
          "79:       std::string value = ToString(media_type);",
          "81:       value += ToString(charset);",
          "",
          "[Added Lines]",
          "74: void Message::SetContentType(std::string_view media_type,",
          "75:                              std::string_view charset) {",
          "80:       std::string value{ media_type };",
          "82:       value += charset;",
          "",
          "---------------"
        ],
        "webcc/message.h||webcc/message.h": [
          "File: webcc/message.h -> webcc/message.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     return start_line_;",
          "26:   }",
          "30:   }",
          "32:   void SetHeader(Header&& header) {",
          "33:     headers_.Set(std::move(header.first), std::move(header.second));",
          "34:   }",
          "37:     headers_.Set(key, value);",
          "38:   }",
          "41:     return headers_.Get(key, existed);",
          "42:   }",
          "45:     return headers_.Has(key);",
          "46:   }",
          "",
          "[Removed Lines]",
          "28:   void set_start_line(string_view start_line) {",
          "29:     start_line_ = ToString(start_line);",
          "36:   void SetHeader(string_view key, string_view value) {",
          "40:   const std::string& GetHeader(string_view key, bool* existed = nullptr) const {",
          "44:   bool HasHeader(string_view key) const {",
          "",
          "[Added Lines]",
          "28:   void set_start_line(std::string_view start_line) {",
          "29:     start_line_ = start_line;",
          "36:   void SetHeader(std::string_view key, std::string_view value) {",
          "40:   const std::string& GetHeader(std::string_view key, bool* existed = nullptr) const {",
          "44:   bool HasHeader(std::string_view key) const {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     SetHeader(headers::kContentType, content_type);",
          "84:   }",
          "91:   virtual void Prepare() = 0;",
          "",
          "[Removed Lines]",
          "82:   void SetContentType(string_view content_type) {",
          "88:   void SetContentType(string_view media_type, string_view charset);",
          "",
          "[Added Lines]",
          "82:   void SetContentType(std::string_view content_type) {",
          "88:   void SetContentType(std::string_view media_type, std::string_view charset);",
          "",
          "---------------"
        ],
        "webcc/request.h||webcc/request.h": [
          "File: webcc/request.h -> webcc/request.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     return method_;",
          "24:   }",
          "28:   }",
          "30:   const Url& url() const {",
          "",
          "[Removed Lines]",
          "26:   void set_method(string_view method) {",
          "27:     method_ = ToString(method);",
          "",
          "[Added Lines]",
          "26:   void set_method(std::string_view method) {",
          "27:     method_ = method;",
          "",
          "---------------"
        ],
        "webcc/request_builder.cc||webcc/request_builder.cc": [
          "File: webcc/request_builder.cc -> webcc/request_builder.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"webcc/request_builder.h\"",
          "4: #include \"webcc/logger.h\"",
          "5: #include \"webcc/string.h\"",
          "8: #if WEBCC_ENABLE_GZIP",
          "9: #include \"webcc/gzip.h\"",
          "",
          "[Removed Lines]",
          "3: #include \"webcc/base64.h\"",
          "6: #include \"webcc/utility.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:   return *this;",
          "78: }",
          "124: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "80: RequestBuilder& RequestBuilder::FormFile(string_view name,",
          "81:                                          const sfs::path& path,",
          "82:                                          string_view media_type) {",
          "83:   assert(!name.empty());",
          "84:   return Form(FormPart::NewFile(name, path, media_type));",
          "85: }",
          "87: RequestBuilder& RequestBuilder::FormData(string_view name,",
          "88:                                          std::string&& data,",
          "89:                                          string_view media_type) {",
          "90:   assert(!name.empty());",
          "91:   return Form(FormPart::New(name, std::move(data), media_type));",
          "92: }",
          "94: RequestBuilder& RequestBuilder::Header(string_view key, string_view value) {",
          "95:   headers_.push_back(ToString(key));",
          "96:   headers_.push_back(ToString(value));",
          "97:   return *this;",
          "98: }",
          "100: RequestBuilder& RequestBuilder::Auth(string_view type,",
          "101:                                      string_view credentials) {",
          "102:   headers_.push_back(headers::kAuthorization);",
          "103:   headers_.push_back(ToString(type) + \" \" + ToString(credentials));",
          "104:   return *this;",
          "105: }",
          "107: RequestBuilder& RequestBuilder::AuthBasic(string_view login,",
          "108:                                           string_view password) {",
          "109:   auto credentials =",
          "110:       Base64Encode(ToString(login) + \":\" + ToString(password));",
          "111:   return Auth(\"Basic\", credentials);",
          "112: }",
          "114: RequestBuilder& RequestBuilder::AuthToken(string_view token) {",
          "115:   return Auth(\"Token\", token);",
          "116: }",
          "118: RequestBuilder& RequestBuilder::Date() {",
          "119:   headers_.push_back(headers::kDate);",
          "120:   headers_.push_back(utility::HttpDate());",
          "121:   return *this;",
          "122: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "webcc/request_builder.h||webcc/request_builder.h": [
          "File: webcc/request_builder.h -> webcc/request_builder.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <string>",
          "5: #include <vector>",
          "7: #include \"webcc/request.h\"",
          "8: #include \"webcc/url.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"webcc/base64.h\"",
          "10: #include \"webcc/utility.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:   RequestPtr operator()();",
          "46:     return *this;",
          "47:   }",
          "50:     return Method(methods::kGet).Url(url, encode);",
          "51:   }",
          "54:     return Method(methods::kHead).Url(url, encode);",
          "55:   }",
          "58:     return Method(methods::kPost).Url(url, encode);",
          "59:   }",
          "62:     return Method(methods::kPut).Url(url, encode);",
          "63:   }",
          "66:     return Method(methods::kDelete).Url(url, encode);",
          "67:   }",
          "70:     return Method(methods::kPatch).Url(url, encode);",
          "71:   }",
          "74:     url_ = webcc::Url{ url, encode };",
          "75:     return *this;",
          "76:   }",
          "79:     url_.set_port(port);",
          "80:     return *this;",
          "81:   }",
          "",
          "[Removed Lines]",
          "44:   RequestBuilder& Method(string_view method) {",
          "45:     method_ = ToString(method);",
          "49:   RequestBuilder& Get(string_view url, bool encode = false) {",
          "53:   RequestBuilder& Head(string_view url, bool encode = false) {",
          "57:   RequestBuilder& Post(string_view url, bool encode = false) {",
          "61:   RequestBuilder& Put(string_view url, bool encode = false) {",
          "65:   RequestBuilder& Delete(string_view url, bool encode = false) {",
          "69:   RequestBuilder& Patch(string_view url, bool encode = false) {",
          "73:   RequestBuilder& Url(string_view url, bool encode = false) {",
          "78:   RequestBuilder& Port(string_view port) {",
          "",
          "[Added Lines]",
          "46:   RequestBuilder& Method(std::string_view method) {",
          "47:     method_ = method;",
          "51:   RequestBuilder& Get(std::string_view url, bool encode = false) {",
          "55:   RequestBuilder& Head(std::string_view url, bool encode = false) {",
          "59:   RequestBuilder& Post(std::string_view url, bool encode = false) {",
          "63:   RequestBuilder& Put(std::string_view url, bool encode = false) {",
          "67:   RequestBuilder& Delete(std::string_view url, bool encode = false) {",
          "71:   RequestBuilder& Patch(std::string_view url, bool encode = false) {",
          "75:   RequestBuilder& Url(std::string_view url, bool encode = false) {",
          "80:   RequestBuilder& Port(std::string_view port) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:   }",
          "90:     url_.AppendPath(path, encode);",
          "91:     return *this;",
          "92:   }",
          "96:                         bool encode = false) {",
          "97:     url_.AppendQuery(key, value, encode);",
          "98:     return *this;",
          "99:   }",
          "103:     return *this;",
          "104:   }",
          "108:     return *this;",
          "109:   }",
          "",
          "[Removed Lines]",
          "89:   RequestBuilder& Path(string_view path, bool encode = false) {",
          "95:   RequestBuilder& Query(string_view key, string_view value,",
          "101:   RequestBuilder& MediaType(string_view media_type) {",
          "102:     media_type_ = ToString(media_type);",
          "106:   RequestBuilder& Charset(string_view charset) {",
          "107:     charset_ = ToString(charset);",
          "",
          "[Added Lines]",
          "91:   RequestBuilder& Path(std::string_view path, bool encode = false) {",
          "98:   RequestBuilder& Query(const std::string& key, const std::string& value,",
          "104:   RequestBuilder& MediaType(std::string_view media_type) {",
          "105:     media_type_ = media_type;",
          "109:   RequestBuilder& Charset(std::string_view charset) {",
          "110:     charset_ = charset;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:     return Header(headers::kAccept, content_types);",
          "127:   }",
          "",
          "[Removed Lines]",
          "125:   RequestBuilder& Accept(string_view content_types) {",
          "",
          "[Added Lines]",
          "128:   RequestBuilder& Accept(std::string_view content_types) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:   }",
          "165:   RequestBuilder& KeepAlive(bool keep_alive = true) {",
          "166:     keep_alive_ = keep_alive;",
          "167:     return *this;",
          "168:   }",
          "179: #if WEBCC_ENABLE_GZIP",
          "",
          "[Removed Lines]",
          "156:   RequestBuilder& FormFile(string_view name, const sfs::path& path,",
          "157:                            string_view media_type = \"\");",
          "160:   RequestBuilder& FormData(string_view name, std::string&& data,",
          "161:                            string_view media_type = \"\");",
          "163:   RequestBuilder& Header(string_view key, string_view value);",
          "170:   RequestBuilder& Auth(string_view type, string_view credentials);",
          "172:   RequestBuilder& AuthBasic(string_view login, string_view password);",
          "174:   RequestBuilder& AuthToken(string_view token);",
          "177:   RequestBuilder& Date();",
          "",
          "[Added Lines]",
          "159:   RequestBuilder& FormFile(std::string_view name, const sfs::path& path,",
          "160:                            std::string_view media_type = \"\") {",
          "161:     assert(!name.empty());",
          "162:     return Form(FormPart::NewFile(name, path, media_type));",
          "163:   }",
          "166:   RequestBuilder& FormData(std::string_view name, std::string&& data,",
          "167:                            std::string_view media_type = \"\") {",
          "168:     assert(!name.empty());",
          "169:     return Form(FormPart::New(name, std::move(data), media_type));",
          "170:   }",
          "172:   RequestBuilder& Header(std::string_view key, std::string_view value) {",
          "173:     headers_.emplace_back(key);",
          "174:     headers_.emplace_back(value);",
          "175:     return *this;",
          "176:   }",
          "183:   RequestBuilder& Auth(const std::string& type,",
          "184:                        const std::string& credentials) {",
          "185:     headers_.emplace_back(headers::kAuthorization);",
          "186:     headers_.emplace_back(type + \" \" + credentials);",
          "187:     return *this;",
          "188:   }",
          "190:   RequestBuilder& AuthBasic(const std::string& login,",
          "191:                             const std::string& password) {",
          "192:     return Auth(\"Basic\", base64::Encode(login + \":\" + password));",
          "193:   }",
          "195:   RequestBuilder& AuthToken(const std::string& token) {",
          "196:     return Auth(\"Token\", token);",
          "197:   }",
          "200:   RequestBuilder& Date() {",
          "201:     headers_.emplace_back(headers::kDate);",
          "202:     headers_.emplace_back(utility::HttpDate());",
          "203:     return *this;",
          "204:   }",
          "",
          "---------------"
        ],
        "webcc/request_parser.cc||webcc/request_parser.cc": [
          "File: webcc/request_parser.cc -> webcc/request_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: }",
          "38: bool RequestParser::ParseStartLine(const std::string& line) {",
          "40:   Split(line, ' ', true, &parts);",
          "42:   if (parts.size() != 3) {",
          "",
          "[Removed Lines]",
          "39:   std::vector<string_view> parts;",
          "",
          "[Added Lines]",
          "39:   std::vector<std::string_view> parts;",
          "",
          "---------------"
        ],
        "webcc/response_builder.cc||webcc/response_builder.cc": [
          "File: webcc/response_builder.cc -> webcc/response_builder.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"webcc/response_builder.h\"",
          "4: #include \"webcc/logger.h\"",
          "7: #if WEBCC_ENABLE_GZIP",
          "8: #include \"webcc/gzip.h\"",
          "",
          "[Removed Lines]",
          "3: #include \"webcc/base64.h\"",
          "5: #include \"webcc/utility.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   return *this;",
          "56: }",
          "70: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "58: ResponseBuilder& ResponseBuilder::Header(string_view key, string_view value) {",
          "59:   headers_.push_back(ToString(key));",
          "60:   headers_.push_back(ToString(value));",
          "61:   return *this;",
          "62: }",
          "64: ResponseBuilder& ResponseBuilder::Date() {",
          "65:   headers_.push_back(headers::kDate);",
          "66:   headers_.push_back(utility::HttpDate());",
          "67:   return *this;",
          "68: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "webcc/response_builder.h||webcc/response_builder.h": [
          "File: webcc/response_builder.h -> webcc/response_builder.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <string>",
          "5: #include <vector>",
          "7: #include \"webcc/request.h\"",
          "8: #include \"webcc/response.h\"",
          "10: namespace webcc {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"webcc/base64.h\"",
          "10: #include \"webcc/utility.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     return *this;",
          "61:   }",
          "65:     return *this;",
          "66:   }",
          "70:     return *this;",
          "71:   }",
          "",
          "[Removed Lines]",
          "63:   ResponseBuilder& MediaType(string_view media_type) {",
          "64:     media_type_ = ToString(media_type);",
          "68:   ResponseBuilder& Charset(string_view charset) {",
          "69:     charset_ = ToString(charset);",
          "",
          "[Added Lines]",
          "65:   ResponseBuilder& MediaType(std::string_view media_type) {",
          "66:     media_type_ = media_type;",
          "70:   ResponseBuilder& Charset(std::string_view charset) {",
          "71:     charset_ = charset;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:   ResponseBuilder& File(const sfs::path& path, bool infer_media_type = true,",
          "98:                         std::size_t chunk_size = 1024);",
          "105: #if WEBCC_ENABLE_GZIP",
          "106:   ResponseBuilder& Gzip(bool gzip = true) {",
          "",
          "[Removed Lines]",
          "100:   ResponseBuilder& Header(string_view key, string_view value);",
          "103:   ResponseBuilder& Date();",
          "",
          "[Added Lines]",
          "102:   ResponseBuilder& Header(std::string_view key, std::string_view value) {",
          "103:     headers_.emplace_back(key);",
          "104:     headers_.emplace_back(value);",
          "105:     return *this;",
          "106:   }",
          "109:   ResponseBuilder& Date() {",
          "110:     headers_.emplace_back(headers::kDate);",
          "111:     headers_.emplace_back(utility::HttpDate());",
          "112:     return *this;",
          "113:   }",
          "",
          "---------------"
        ],
        "webcc/router.cc||webcc/router.cc": [
          "File: webcc/router.cc -> webcc/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: namespace webcc {",
          "13:   assert(view);",
          "19:   return true;",
          "20: }",
          "22: bool Router::Route(const UrlRegex& regex_url, ViewPtr view,",
          "24:   assert(view);",
          "28:   try {",
          "31:   } catch (const std::regex_error& e) {",
          "32:     LOG_ERRO(\"Not a valid regular expression: %s\", e.what());",
          "",
          "[Removed Lines]",
          "11: bool Router::Route(string_view url, ViewPtr view,",
          "12:                    const std::vector<std::string>& methods) {",
          "17:   routes_.push_back({ ToString(url), {}, view, methods });",
          "23:                    const std::vector<std::string>& methods) {",
          "29:     routes_.push_back({ \"\", regex_url(), view, methods });",
          "",
          "[Added Lines]",
          "11: bool Router::Route(std::string_view url, ViewPtr view,",
          "12:                    std::vector<std::string>&& methods) {",
          "15:   routes_.emplace_back(url, view,",
          "16:                        std::forward<std::vector<std::string>>(methods));",
          "22:                    std::vector<std::string>&& methods) {",
          "28:     routes_.emplace_back(regex_url(), view,",
          "29:                          std::forward<std::vector<std::string>>(methods));",
          "",
          "---------------"
        ],
        "webcc/router.h||webcc/router.h": [
          "File: webcc/router.h -> webcc/router.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: namespace webcc {",
          "12: class Router {",
          "13: public:",
          "14:   virtual ~Router() = default;",
          "24:   bool Route(const UrlRegex& regex_url, ViewPtr view,",
          "28:   ViewPtr FindView(const std::string& method, const std::string& url_path,",
          "",
          "[Removed Lines]",
          "18:   bool Route(string_view url, ViewPtr view,",
          "19:              const std::vector<std::string>& methods = { \"GET\" });",
          "25:              const std::vector<std::string>& methods = { \"GET\" });",
          "",
          "[Added Lines]",
          "12: struct RouteInfo {",
          "13:   RouteInfo(std::string_view _url, ViewPtr _view,",
          "14:             std::vector<std::string>&& _methods)",
          "15:       : url(_url), view(_view), methods(std::move(_methods)) {",
          "16:   }",
          "18:   RouteInfo(std::regex&& _url_regex, ViewPtr _view,",
          "19:             std::vector<std::string>&& _methods)",
          "20:       : url_regex(std::move(_url_regex)),",
          "21:         view(_view),",
          "22:         methods(std::move(_methods)) {",
          "23:   }",
          "25:   std::string url;",
          "26:   std::regex url_regex;",
          "27:   ViewPtr view;",
          "28:   std::vector<std::string> methods;",
          "29: };",
          "37:   bool Route(std::string_view url, ViewPtr view,",
          "38:              std::vector<std::string>&& methods = { \"GET\" });",
          "44:              std::vector<std::string>&& methods = { \"GET\" });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:                  bool* stream);",
          "37: private:",
          "46:   std::vector<RouteInfo> routes_;",
          "47: };",
          "",
          "[Removed Lines]",
          "38:   struct RouteInfo {",
          "39:     std::string url;",
          "40:     std::regex url_regex;",
          "41:     ViewPtr view;",
          "42:     std::vector<std::string> methods;",
          "43:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "webcc/string.cc||webcc/string.cc": [
          "File: webcc/string.cc -> webcc/string.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   return true;",
          "40: }",
          "53:     if (compress_token) {",
          "56:       }",
          "57:     }",
          "60:   }",
          "63: }",
          "66:   sv.remove_prefix(std::min(sv.find_first_not_of(spaces), sv.size()));",
          "67:   std::size_t pos = sv.find_last_not_of(spaces);",
          "69:     sv.remove_suffix(sv.size() - pos - 1);",
          "70:   }",
          "71: }",
          "75:   std::size_t pos = input.find(delim);",
          "77:     return false;",
          "78:   }",
          "",
          "[Removed Lines]",
          "42: void Split(string_view input, char delim, bool compress_token,",
          "43:            std::vector<string_view>* output) {",
          "44:   std::size_t i = 0;",
          "45:   std::size_t p = 0;",
          "47:   i = input.find(delim);",
          "49:   while (i != string_view::npos) {",
          "50:     output->emplace_back(input.substr(p, i - p));",
          "51:     p = i + 1;",
          "54:       while (p < input.size() && input[p] == delim) {",
          "55:         ++p;",
          "59:     i = input.find(delim, p);",
          "62:   output->emplace_back(input.substr(p, i - p));",
          "65: void Trim(string_view& sv, const char* spaces) {",
          "68:   if (pos != string_view::npos) {",
          "73: bool SplitKV(string_view input, char delim, bool trim_spaces, string_view* key,",
          "74:              string_view* value) {",
          "76:   if (pos == string_view::npos) {",
          "",
          "[Added Lines]",
          "42: void Split(std::string_view input, char delim, bool compress_token,",
          "43:            std::vector<std::string_view>* output) {",
          "44:   std::size_t off = 0;",
          "45:   std::size_t pos = 0;",
          "47:   while (true) {",
          "48:     if (off == input.size()) {",
          "49:       output->emplace_back(std::string_view{});",
          "50:       break;",
          "51:     }",
          "53:     pos = input.find(delim, off);",
          "54:     if (pos == std::string_view::npos) {",
          "55:       output->emplace_back(input.substr(off));",
          "56:       break;",
          "57:     }",
          "59:     output->emplace_back(input.substr(off, pos - off));",
          "61:     off = pos + 1;",
          "64:       while (off < input.size() && input[off] == delim) {",
          "65:         ++off;",
          "71: void Trim(std::string_view& sv, const char* spaces) {",
          "75:   if (pos != std::string_view::npos) {",
          "80: bool SplitKV(std::string_view input, char delim, bool trim_spaces,",
          "81:              std::string_view* key, std::string_view* value) {",
          "83:   if (pos == std::string_view::npos) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:   return true;",
          "89: }",
          "98:     return true;",
          "99:   }",
          "100:   return false;",
          "",
          "[Removed Lines]",
          "91: bool SplitKV(string_view input, char delim, bool trim_spaces, std::string* key,",
          "92:              std::string* value) {",
          "93:   string_view key_view;",
          "94:   string_view value_view;",
          "95:   if (SplitKV(input, delim, trim_spaces, &key_view, &value_view)) {",
          "",
          "[Added Lines]",
          "98: bool SplitKV(std::string_view input, char delim, bool trim_spaces,",
          "99:              std::string* key, std::string* value) {",
          "100:   std::string_view key_sv;",
          "101:   std::string_view value_sv;",
          "102:   if (SplitKV(input, delim, trim_spaces, &key_sv, &value_sv)) {",
          "",
          "---------------"
        ],
        "webcc/string.h||webcc/string.h": [
          "File: webcc/string.h -> webcc/string.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #define WEBCC_STRING_H_",
          "4: #include <string>",
          "5: #include <vector>",
          "7: #include \"webcc/config.h\"",
          "15: namespace webcc {",
          "32: std::string RandomAsciiString(std::size_t length);",
          "",
          "[Removed Lines]",
          "9: #if WEBCC_USE_STD_STRING_VIEW",
          "10: #include <string_view>",
          "11: #else",
          "12: #include \"boost/utility/string_view.hpp\"",
          "13: #endif  // WEBCC_USE_STD_STRING_VIEW",
          "17: #if WEBCC_USE_STD_STRING_VIEW",
          "18: using string_view = std::string_view;",
          "19: #else",
          "20: using string_view = boost::string_view;",
          "21: #endif",
          "23: inline std::string ToString(string_view sv) {",
          "24: #if WEBCC_USE_STD_STRING_VIEW",
          "25:   return std::string{ sv };",
          "26: #else",
          "27:   return sv.to_string();",
          "28: #endif",
          "29: }",
          "",
          "[Added Lines]",
          "5: #include <string_view>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: bool ToSizeT(const std::string& str, int base, std::size_t* size);",
          "53:              std::string* key, std::string* value);",
          "",
          "[Removed Lines]",
          "38: void Trim(string_view& sv, const char* spaces = \" \");",
          "42: void Split(string_view input, char delim, bool compress_token,",
          "43:            std::vector<string_view>* output);",
          "47: bool SplitKV(string_view input, char delim, bool trim_spaces, string_view* key,",
          "48:              string_view* value);",
          "52: bool SplitKV(string_view input, char delim, bool trim_spaces,",
          "",
          "[Added Lines]",
          "20: void Trim(std::string_view& sv, const char* spaces = \" \\t\");",
          "22: inline std::string_view Unquote(std::string_view sv) {",
          "23:   Trim(sv, \"\\\"\");",
          "24:   return sv;",
          "25: }",
          "29: void Split(std::string_view input, char delim, bool compress_token,",
          "30:            std::vector<std::string_view>* output);",
          "34: bool SplitKV(std::string_view input, char delim, bool trim_spaces,",
          "35:              std::string_view* key, std::string_view* value);",
          "39: bool SplitKV(std::string_view input, char delim, bool trim_spaces,",
          "",
          "---------------"
        ],
        "webcc/url.cc||webcc/url.cc": [
          "File: webcc/url.cc -> webcc/url.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: }",
          "34:                        std::function<bool(int)> should_encode) {",
          "35:   const char kHex[] = \"0123456789ABCDEF\";",
          "",
          "[Removed Lines]",
          "33: std::string EncodeImpl(string_view raw,  // UTF8",
          "",
          "[Added Lines]",
          "33: std::string EncodeImpl(std::string_view raw,  // UTF8",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:   return EncodeImpl(utf8_str, [](int c) -> bool { return c > 127; });",
          "132: }",
          "135:   return EncodeImpl(utf8_str, [](int c) -> bool {",
          "136:     return !IsPathChar(c) || c == '%' || c == '+';",
          "137:   });",
          "138: }",
          "141:   return EncodeImpl(utf8_str, [](int c) -> bool {",
          "142:     return !IsQueryChar(c) || c == '%' || c == '+';",
          "143:   });",
          "144: }",
          "147:   return EncodeImpl(utf8_str, [](int c) -> bool {",
          "148:     return !IsUnreserved(c) && !IsReserved(c);",
          "149:   });",
          "150: }",
          "153:   for (auto iter = encoded.begin(); iter != encoded.end(); ++iter) {",
          "154:     if (*iter == '%') {",
          "155:       if (++iter == encoded.end()) {",
          "",
          "[Removed Lines]",
          "130: std::string Url::EncodeHost(string_view utf8_str) {",
          "134: std::string Url::EncodePath(string_view utf8_str) {",
          "140: std::string Url::EncodeQuery(string_view utf8_str) {",
          "146: std::string Url::EncodeFull(string_view utf8_str) {",
          "152: bool Url::Decode(string_view encoded, std::string* raw) {",
          "",
          "[Added Lines]",
          "130: std::string Url::EncodeHost(std::string_view utf8_str) {",
          "134: std::string Url::EncodePath(std::string_view utf8_str) {",
          "140: std::string Url::EncodeQuery(std::string_view utf8_str) {",
          "146: std::string Url::EncodeFull(std::string_view utf8_str) {",
          "152: bool Url::Decode(std::string_view encoded, std::string* raw) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:   return true;",
          "186: }",
          "189:   std::string raw;",
          "190:   if (Decode(encoded, &raw)) {",
          "191:     return raw;",
          "192:   }",
          "194: }",
          "199:   if (encode) {",
          "200:     Parse(Url::EncodeFull(str));",
          "201:   } else {",
          "",
          "[Removed Lines]",
          "188: std::string Url::DecodeUnsafe(string_view encoded) {",
          "193:   return ToString(encoded);",
          "198: Url::Url(string_view str, bool encode) {",
          "",
          "[Added Lines]",
          "188: std::string Url::DecodeUnsafe(std::string_view encoded) {",
          "193:   return std::string{ encoded };",
          "198: Url::Url(std::string_view str, bool encode) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203:   }",
          "204: }",
          "207:   if (piece.empty() || piece == \"/\") {",
          "208:     return;",
          "209:   }",
          "",
          "[Removed Lines]",
          "206: void Url::AppendPath(string_view piece, bool encode) {",
          "",
          "[Added Lines]",
          "206: void Url::AppendPath(std::string_view piece, bool encode) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "222:   if (encode) {",
          "223:     path_.append(Url::EncodePath(piece));",
          "224:   } else {",
          "226:   }",
          "227: }",
          "230:   if (!query_.empty()) {",
          "231:     query_ += \"&\";",
          "232:   }",
          "233:   if (encode) {",
          "234:     query_ += Url::EncodeQuery(key) + \"=\" + Url::EncodeQuery(value);",
          "235:   } else {",
          "237:   }",
          "238: }",
          "246:   std::size_t p = npos;",
          "249:   if (p != std::string::npos) {",
          "252:   }",
          "255:   if (p != std::string::npos) {",
          "261:     if (p != std::string::npos) {",
          "264:     } else {",
          "266:     }",
          "267:   } else {",
          "268:     path_ = \"\";",
          "271:     if (p != std::string::npos) {",
          "274:     } else {",
          "276:     }",
          "277:   }",
          "",
          "[Removed Lines]",
          "225:     path_.append(ToString(piece));",
          "229: void Url::AppendQuery(string_view key, string_view value, bool encode) {",
          "236:     query_ += ToString(key) + \"=\" + ToString(value);",
          "240: void Url::Parse(string_view str) {",
          "241:   string_view tmp = str;// ToString(str);",
          "244:   constexpr auto npos = string_view::npos;",
          "248:   p = tmp.find(\"://\");",
          "250:     scheme_ = tmp.substr(0, p);",
          "251:     tmp = tmp.substr(p + 3);",
          "254:   p = tmp.find('/');",
          "256:     host_ = tmp.substr(0, p);",
          "258:     tmp = tmp.substr(p);",
          "260:     p = tmp.find('?');",
          "262:       path_ = tmp.substr(0, p);",
          "263:       query_ = tmp.substr(p + 1);",
          "265:       path_ = tmp;",
          "270:     p = tmp.find('?');",
          "272:       host_ = tmp.substr(0, p);",
          "273:       query_ = tmp.substr(p + 1);",
          "275:       host_ = tmp;",
          "",
          "[Added Lines]",
          "225:     path_.append(piece);",
          "229: void Url::AppendQuery(const std::string& key, const std::string& value,",
          "230:                       bool encode) {",
          "237:     query_ += key + \"=\" + value;",
          "241: void Url::Parse(std::string_view str) {",
          "242:   constexpr auto npos = std::string_view::npos;",
          "244:   Trim(str);",
          "248:   p = str.find(\"://\");",
          "250:     scheme_ = str.substr(0, p);",
          "251:     str = str.substr(p + 3);",
          "254:   p = str.find('/');",
          "256:     host_ = str.substr(0, p);",
          "258:     str = str.substr(p);",
          "260:     p = str.find('?');",
          "262:       path_ = str.substr(0, p);",
          "263:       query_ = str.substr(p + 1);",
          "265:       path_ = str;",
          "270:     p = str.find('?');",
          "272:       host_ = str.substr(0, p);",
          "273:       query_ = str.substr(p + 1);",
          "275:       host_ = str;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "315:         i = j + 1;",
          "316:       }",
          "320:       if (SplitKV(kv, '=', false, &key, &value)) {",
          "321:         parameters_.push_back(",
          "322:             { Url::DecodeUnsafe(key), Url::DecodeUnsafe(value) });",
          "",
          "[Removed Lines]",
          "318:       string_view key;",
          "319:       string_view value;",
          "",
          "[Added Lines]",
          "318:       std::string_view key;",
          "319:       std::string_view value;",
          "",
          "---------------"
        ],
        "webcc/url.h||webcc/url.h": [
          "File: webcc/url.h -> webcc/url.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: class Url {",
          "18: public:",
          "31: public:",
          "32:   Url() = default;",
          "36:   const std::string& scheme() const {",
          "37:     return scheme_;",
          "",
          "[Removed Lines]",
          "20:   static std::string EncodeHost(string_view utf8_str);",
          "21:   static std::string EncodePath(string_view utf8_str);",
          "22:   static std::string EncodeQuery(string_view utf8_str);",
          "23:   static std::string EncodeFull(string_view utf8_str);",
          "25:   static bool Decode(string_view encoded, std::string* raw);",
          "29:   static std::string DecodeUnsafe(string_view encoded);",
          "34:   explicit Url(string_view str, bool encode = false);",
          "",
          "[Added Lines]",
          "20:   static std::string EncodeHost(std::string_view utf8_str);",
          "21:   static std::string EncodePath(std::string_view utf8_str);",
          "22:   static std::string EncodeQuery(std::string_view utf8_str);",
          "23:   static std::string EncodeFull(std::string_view utf8_str);",
          "25:   static bool Decode(std::string_view encoded, std::string* raw);",
          "29:   static std::string DecodeUnsafe(std::string_view encoded);",
          "34:   explicit Url(std::string_view str, bool encode = false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     return query_;",
          "54:   }",
          "58:   }",
          "66: private:",
          "69:   void Clear();",
          "",
          "[Removed Lines]",
          "56:   void set_port(string_view port) {",
          "57:     port_ = ToString(port);",
          "61:   void AppendPath(string_view piece, bool encode = false);",
          "64:   void AppendQuery(string_view key, string_view value, bool encode = false);",
          "67:   void Parse(string_view str);",
          "",
          "[Added Lines]",
          "56:   void set_port(std::string_view port) {",
          "57:     port_ = port;",
          "61:   void AppendPath(std::string_view piece, bool encode = false);",
          "65:   void AppendQuery(const std::string& key, const std::string& value,",
          "66:                    bool encode = false);",
          "69:   void Parse(std::string_view str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131: class UrlRegex {",
          "132: public:",
          "134:   }",
          "136:   std::regex operator()() const {",
          "",
          "[Removed Lines]",
          "133:   explicit UrlRegex(string_view url) : url_(url) {",
          "",
          "[Added Lines]",
          "135:   explicit UrlRegex(std::string_view url) : url_(url) {",
          "",
          "---------------"
        ],
        "webcc/utility.cc||webcc/utility.cc": [
          "File: webcc/utility.cc -> webcc/utility.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   return true;",
          "60: }",
          "64:   Split(data, '\\n', false, &lines);",
          "66:   std::size_t size = 0;",
          "",
          "[Removed Lines]",
          "62: void DumpByLine(const std::string& data, std::ostream& os, string_view prefix) {",
          "63:   std::vector<string_view> lines;",
          "",
          "[Added Lines]",
          "62: void DumpByLine(const std::string& data, std::ostream& os, std::string_view prefix) {",
          "63:   std::vector<std::string_view> lines;",
          "",
          "---------------"
        ],
        "webcc/utility.h||webcc/utility.h": [
          "File: webcc/utility.h -> webcc/utility.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "34: void DumpByLine(const std::string& data, std::ostream& os, string_view prefix);",
          "",
          "[Added Lines]",
          "34: void DumpByLine(const std::string& data, std::ostream& os, std::string_view prefix);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05c5c0dd0631d4706715ec0437ad58b137895d96",
      "candidate_info": {
        "commit_hash": "05c5c0dd0631d4706715ec0437ad58b137895d96",
        "repo": "sprinfall/webcc",
        "commit_url": "https://github.com/sprinfall/webcc/commit/05c5c0dd0631d4706715ec0437ad58b137895d96",
        "files": [
          "webcc/connection.h",
          "webcc/connection_pool.cc",
          "webcc/request_parser.cc",
          "webcc/server.cc"
        ],
        "message": "fix server socket close issues",
        "before_after_code_files": [
          "webcc/connection.h||webcc/connection.h",
          "webcc/connection_pool.cc||webcc/connection_pool.cc",
          "webcc/request_parser.cc||webcc/request_parser.cc",
          "webcc/server.cc||webcc/server.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "webcc/request_parser.cc||webcc/request_parser.cc",
            "webcc/server.cc||webcc/server.cc"
          ],
          "candidate": [
            "webcc/request_parser.cc||webcc/request_parser.cc",
            "webcc/server.cc||webcc/server.cc"
          ]
        }
      },
      "candidate_diff": {
        "webcc/connection.h||webcc/connection.h": [
          "File: webcc/connection.h -> webcc/connection.h"
        ],
        "webcc/connection_pool.cc||webcc/connection_pool.cc": [
          "File: webcc/connection_pool.cc -> webcc/connection_pool.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: }",
          "19: void ConnectionPool::Close(ConnectionPtr c) {",
          "29: }",
          "31: void ConnectionPool::Clear() {",
          "",
          "[Removed Lines]",
          "20:   LOG_VERB(\"Close connection\");",
          "22:   {",
          "24:     std::lock_guard<std::mutex> lock{ mutex_ };",
          "25:     connections_.erase(c);",
          "26:   }",
          "28:   c->Close();",
          "",
          "[Added Lines]",
          "23:   std::lock_guard<std::mutex> lock{ mutex_ };",
          "26:   if (connections_.erase(c) == 1) {",
          "27:     LOG_VERB(\"Close connection\");",
          "28:     c->Close();",
          "29:   }  // else: Already closed by Clear()",
          "",
          "---------------"
        ],
        "webcc/request_parser.cc||webcc/request_parser.cc": [
          "File: webcc/request_parser.cc -> webcc/request_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   std::string url_path = Url::DecodeUnsafe(request_->url().path());",
          "30:   if (view_matcher_(request_->method(), url_path, &stream_)) {",
          "32:   }  // else: Do nothing!",
          "",
          "[Removed Lines]",
          "31:     LOG_INFO(\"The URL path matches a view which askes for data streaming\");",
          "",
          "[Added Lines]",
          "31:     if (stream_) {",
          "32:       LOG_INFO(\"The URL path matches a view which askes for data streaming\");",
          "33:     }",
          "",
          "---------------"
        ],
        "webcc/server.cc||webcc/server.cc": [
          "File: webcc/server.cc -> webcc/server.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "198: void Server::AsyncAccept() {",
          "199: #if WEBCC_STUDY_SERVER_THREADING",
          "201: #endif",
          "203:   acceptor_.async_accept(",
          "",
          "[Removed Lines]",
          "200:   LOG_USER(\"Async accept\");",
          "",
          "[Added Lines]",
          "200:   LOG_USER(\"AsyncAccept()\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc91ecfdef970ed9355e71eda846478a14c5f6d4",
      "candidate_info": {
        "commit_hash": "cc91ecfdef970ed9355e71eda846478a14c5f6d4",
        "repo": "sprinfall/webcc",
        "commit_url": "https://github.com/sprinfall/webcc/commit/cc91ecfdef970ed9355e71eda846478a14c5f6d4",
        "files": [
          "examples/CMakeLists.txt",
          "examples/url_unicode.cc",
          "unittest/request_parser_unittest.cc",
          "webcc/CMakeLists.txt",
          "webcc/async_client_base.cc",
          "webcc/async_client_base.h",
          "webcc/body.cc",
          "webcc/client_session.cc",
          "webcc/common.cc",
          "webcc/connection_base.cc",
          "webcc/globals.cc",
          "webcc/globals.h",
          "webcc/internal/globals.h",
          "webcc/logger.cc",
          "webcc/logger.h",
          "webcc/message.cc",
          "webcc/message.h",
          "webcc/message_parser.cc",
          "webcc/message_parser.h",
          "webcc/parser.cc",
          "webcc/parser.h",
          "webcc/request_parser.cc",
          "webcc/request_parser.h",
          "webcc/response_parser.cc",
          "webcc/response_parser.h",
          "webcc/server.cc",
          "webcc/ssl_client.cc",
          "webcc/string.cc",
          "webcc/string.h",
          "webcc/utility.cc",
          "webcc/utility.h"
        ],
        "message": "refactor",
        "before_after_code_files": [
          "unittest/request_parser_unittest.cc||unittest/request_parser_unittest.cc",
          "webcc/async_client_base.cc||webcc/async_client_base.cc",
          "webcc/async_client_base.h||webcc/async_client_base.h",
          "webcc/body.cc||webcc/body.cc",
          "webcc/client_session.cc||webcc/client_session.cc",
          "webcc/common.cc||webcc/common.cc",
          "webcc/connection_base.cc||webcc/connection_base.cc",
          "webcc/globals.cc||webcc/globals.cc",
          "webcc/globals.h||webcc/globals.h",
          "webcc/internal/globals.h||webcc/internal/globals.h",
          "webcc/logger.cc||webcc/logger.cc",
          "webcc/logger.h||webcc/logger.h",
          "webcc/message.cc||webcc/message.cc",
          "webcc/message.h||webcc/message.h",
          "webcc/parser.cc||webcc/message_parser.cc",
          "webcc/parser.h||webcc/message_parser.h",
          "webcc/request_parser.cc||webcc/request_parser.cc",
          "webcc/request_parser.h||webcc/request_parser.h",
          "webcc/response_parser.cc||webcc/response_parser.cc",
          "webcc/response_parser.h||webcc/response_parser.h",
          "webcc/server.cc||webcc/server.cc",
          "webcc/ssl_client.cc||webcc/ssl_client.cc",
          "webcc/string.cc||webcc/string.cc",
          "webcc/string.h||webcc/string.h",
          "webcc/utility.cc||webcc/utility.cc",
          "webcc/utility.h||webcc/utility.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "webcc/body.cc||webcc/body.cc",
            "webcc/request_parser.cc||webcc/request_parser.cc",
            "webcc/request_parser.h||webcc/request_parser.h",
            "webcc/server.cc||webcc/server.cc",
            "webcc/string.cc||webcc/string.cc",
            "webcc/string.h||webcc/string.h",
            "webcc/utility.cc||webcc/utility.cc",
            "webcc/utility.h||webcc/utility.h"
          ],
          "candidate": [
            "webcc/body.cc||webcc/body.cc",
            "webcc/request_parser.cc||webcc/request_parser.cc",
            "webcc/request_parser.h||webcc/request_parser.h",
            "webcc/server.cc||webcc/server.cc",
            "webcc/string.cc||webcc/string.cc",
            "webcc/string.h||webcc/string.h",
            "webcc/utility.cc||webcc/utility.cc",
            "webcc/utility.h||webcc/utility.h"
          ]
        }
      },
      "candidate_diff": {
        "unittest/request_parser_unittest.cc||unittest/request_parser_unittest.cc": [
          "File: unittest/request_parser_unittest.cc -> unittest/request_parser_unittest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     EXPECT_EQ(request.GetHeader(\"Connection\"), \"Close\");",
          "33:     EXPECT_EQ(request.data(), \"\");",
          "35:   }",
          "37:   std::string payload_;",
          "",
          "[Removed Lines]",
          "34:     EXPECT_EQ(request.content_length(), webcc::kInvalidLength);",
          "",
          "[Added Lines]",
          "34:     EXPECT_EQ(request.content_length(), webcc::kInvalidSize);",
          "",
          "---------------"
        ],
        "webcc/async_client_base.cc||webcc/async_client_base.cc": [
          "File: webcc/async_client_base.cc -> webcc/async_client_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"boost/asio/connect.hpp\"",
          "7: #include \"webcc/logger.h\"",
          "9: using boost::asio::ip::tcp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"webcc/internal/globals.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160: }",
          "162: void AsyncClientBase::AsyncWrite() {",
          "164:   LOG_INFO(\"Send request...\");",
          "166:   AsyncWrite(request_->GetPayload(),",
          "",
          "[Removed Lines]",
          "163:   LOG_VERB(\"Request:\\n%s\", request_->Dump(log_prefix::kOutgoing).c_str());",
          "",
          "[Added Lines]",
          "164:   LOG_VERB(\"Request:\\n%s\",",
          "165:            request_->Dump(internal::log_prefix::kOutgoing).c_str());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168: }",
          "170: void AsyncClientBase::OnWrite(boost::system::error_code ec,",
          "172:   if (ec) {",
          "173:     HandleWriteError(ec);",
          "174:     return;",
          "",
          "[Removed Lines]",
          "171:                               std::size_t length) {",
          "",
          "[Added Lines]",
          "173:                               std::size_t /*length*/) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "243:     return;",
          "244:   }",
          "248:   LOG_INFO(\"Read length: %u\", length);",
          "251:   if (!response_parser_.Parse(buffer_.data(), length)) {",
          "",
          "[Removed Lines]",
          "246:   length_read_ += length;",
          "",
          "[Added Lines]",
          "249:   length_read_ += length;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "266:   }",
          "268:   if (response_parser_.finished()) {",
          "271:     if (response_->IsConnectionKeepAlive()) {",
          "272:       LOG_INFO(\"Keep the socket connection alive\");",
          "",
          "[Removed Lines]",
          "269:     LOG_VERB(\"Response:\\n%s\", response_->Dump(log_prefix::kIncoming).c_str());",
          "",
          "[Added Lines]",
          "270:     LOG_VERB(\"Response:\\n%s\",",
          "271:              response_->Dump(internal::log_prefix::kIncoming).c_str());",
          "",
          "---------------"
        ],
        "webcc/async_client_base.h||webcc/async_client_base.h": [
          "File: webcc/async_client_base.h -> webcc/async_client_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: using SocketType = boost::asio::basic_socket<boost::asio::ip::tcp,",
          "22:                                              boost::asio::any_io_executor>;",
          "24: class AsyncClientBase : public std::enable_shared_from_this<AsyncClientBase> {",
          "25: public:",
          "26:   AsyncClientBase(boost::asio::io_context& io_context,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: using ProgressCallback =",
          "25:     std::function<void(std::size_t current, std::size_t total)>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   ResponsePtr response_;",
          "147:   ResponseParser response_parser_;",
          "153:   std::vector<char> buffer_;",
          "",
          "[Removed Lines]",
          "150:   std::size_t length_read_ = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:   bool connected_ = false;",
          "174:   ProgressCallback progress_callback_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:   std::size_t length_read_ = 0;",
          "",
          "---------------"
        ],
        "webcc/body.cc||webcc/body.cc": [
          "File: webcc/body.cc -> webcc/body.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"boost/core/ignore_unused.hpp\"",
          "5: #include \"webcc/logger.h\"",
          "6: #include \"webcc/utility.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"webcc/internal/globals.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12: namespace webcc {",
          "16: #if WEBCC_ENABLE_GZIP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: namespace literal_buffers = internal::literal_buffers;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160: FileBody::FileBody(const sfs::path& path, std::size_t chunk_size)",
          "161:     : path_(path), chunk_size_(chunk_size), auto_delete_(false), size_(0) {",
          "162:   size_ = utility::TellSize(path_);",
          "164:     throw Error{ error_codes::kFileError, \"Cannot read the file\" };",
          "165:   }",
          "166: }",
          "",
          "[Removed Lines]",
          "163:   if (size_ == kInvalidLength) {",
          "",
          "[Added Lines]",
          "166:   if (size_ == kInvalidSize) {",
          "",
          "---------------"
        ],
        "webcc/client_session.cc||webcc/client_session.cc": [
          "File: webcc/client_session.cc -> webcc/client_session.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <cassert>",
          "7: #include <cryptuiapi.h>",
          "8: #include <wincrypt.h>",
          "9: #include <windows.h>",
          "11: #include \"openssl/x509.h\"",
          "15: #include \"boost/algorithm/string.hpp\"",
          "16: #include \"boost/asio/ssl.hpp\"",
          "",
          "[Removed Lines]",
          "5: #if (defined(_WIN32) || defined(_WIN64))",
          "13: #endif  // defined(_WIN32) || defined(_WIN64)",
          "",
          "[Added Lines]",
          "5: #ifdef _WIN32",
          "11: #endif  // _WIN32",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "30: #if (defined(_WIN32) || defined(_WIN64))",
          "",
          "[Added Lines]",
          "28: #ifdef _WIN32",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:   return true;",
          "88: }",
          "",
          "[Removed Lines]",
          "90: #endif  // defined(_WIN32) || defined(_WIN64)",
          "",
          "[Added Lines]",
          "88: #endif  // _WIN32",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:     default_.first.reset(new ssl::context{ ssl::context::sslv23_client });",
          "180:     default_.second = SslVerify::kHostName;",
          "183:     UseSystemCertificateStore(default_.first->native_handle());",
          "184: #else",
          "185:     default_.first->set_default_verify_paths();",
          "",
          "[Removed Lines]",
          "182: #if (defined(_WIN32) || defined(_WIN64))",
          "",
          "[Added Lines]",
          "180: #ifdef _WIN32",
          "",
          "---------------"
        ],
        "webcc/common.cc||webcc/common.cc": [
          "File: webcc/common.cc -> webcc/common.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"boost/algorithm/string.hpp\"",
          "7: #include \"webcc/logger.h\"",
          "8: #include \"webcc/string.h\"",
          "9: #include \"webcc/utility.h\"",
          "11: namespace webcc {",
          "15: bool Headers::Set(std::string_view key, std::string_view value) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"webcc/internal/globals.h\"",
          "14: namespace literal_buffers = internal::literal_buffers;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:   }",
          "244:   std::size_t size = utility::TellSize(path_);",
          "246:     throw Error{ error_codes::kFileError, \"Cannot read the file\" };",
          "247:   }",
          "",
          "[Removed Lines]",
          "245:   if (size == kInvalidLength) {",
          "",
          "[Added Lines]",
          "248:   if (size == kInvalidSize) {",
          "",
          "---------------"
        ],
        "webcc/connection_base.cc||webcc/connection_base.cc": [
          "File: webcc/connection_base.cc -> webcc/connection_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"boost/asio/write.hpp\"",
          "5: #include \"webcc/connection_pool.h\"",
          "6: #include \"webcc/logger.h\"",
          "7: #include \"webcc/utility.h\"  // for utility::HttpDate()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include \"webcc/internal/globals.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:     return;",
          "136:   }",
          "",
          "[Removed Lines]",
          "138:   LOG_VERB(\"Request:\\n%s\", request_->Dump(log_prefix::kIncoming).c_str());",
          "",
          "[Added Lines]",
          "139:   LOG_VERB(\"Request:\\n%s\",",
          "140:            request_->Dump(internal::log_prefix::kIncoming).c_str());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:   LOG_USER(\"[%u] AsyncWrite()\", (unsigned int)this);",
          "148: #endif",
          "152:   AsyncWrite(response_->GetPayload(), std::bind(&ConnectionBase::OnWriteHeaders,",
          "153:                                                 shared_from_this(), _1, _2));",
          "154: }",
          "156: void ConnectionBase::OnWriteHeaders(boost::system::error_code ec,",
          "158: #if WEBCC_STUDY_SERVER_THREADING",
          "159:   LOG_USER(\"[%u] OnWriteHeaders()\", (unsigned int)this);",
          "160: #endif",
          "",
          "[Removed Lines]",
          "150:   LOG_VERB(\"Response:\\n%s\", response_->Dump(log_prefix::kOutgoing).c_str());",
          "157:                                 std::size_t length) {",
          "",
          "[Added Lines]",
          "152:   LOG_VERB(\"Response:\\n%s\",",
          "153:            response_->Dump(internal::log_prefix::kOutgoing).c_str());",
          "160:                                     std::size_t /*length*/) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:   }",
          "181: }",
          "184: #if WEBCC_STUDY_SERVER_THREADING",
          "185:   LOG_USER(\"[%u] OnWriteBody()\", (unsigned int)this);",
          "186: #endif",
          "",
          "[Removed Lines]",
          "183: void ConnectionBase::OnWriteBody(boost::system::error_code ec, std::size_t length) {",
          "",
          "[Added Lines]",
          "186: void ConnectionBase::OnWriteBody(boost::system::error_code ec,",
          "187:                                  std::size_t /*length*/) {",
          "",
          "---------------"
        ],
        "webcc/globals.cc||webcc/globals.cc": [
          "File: webcc/globals.cc -> webcc/globals.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: namespace media_types {",
          "23: std::string FromExtension(const std::string& ext) {",
          "",
          "[Removed Lines]",
          "11: namespace literal_buffers {",
          "13: const char HEADER_SEPARATOR[2] = { ':', ' ' };",
          "14: const char CRLF[2] = { '\\r', '\\n' };",
          "15: const char DOUBLE_DASHES[2] = { '-', '-' };",
          "17: }  // namespace literal_buffers",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "webcc/globals.h||webcc/globals.h": [
          "File: webcc/globals.h -> webcc/globals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <cassert>",
          "5: #include <exception>",
          "6: #include <filesystem>",
          "8: #include <iosfwd>",
          "9: #include <string>",
          "10: #include <vector>",
          "",
          "[Removed Lines]",
          "7: #include <functional>",
          "",
          "[Added Lines]",
          "8: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: using Payload = std::vector<boost::asio::const_buffer>;",
          "",
          "[Removed Lines]",
          "29: using ProgressCallback =",
          "30:     std::function<void(std::size_t length, std::size_t total_length)>;",
          "34: const char* const kCRLF = \"\\r\\n\";",
          "36: const std::size_t kInvalidLength = -1;",
          "39: const int kMaxReadSeconds = 30;",
          "44: const std::size_t kMaxDumpSize = 2048;",
          "47: const std::size_t kBufferSize = 1024;",
          "52: const std::size_t kGzipThreshold = 1400;",
          "56: namespace literal_buffers {",
          "61: extern const char HEADER_SEPARATOR[2];",
          "62: extern const char CRLF[2];",
          "63: extern const char DOUBLE_DASHES[2];",
          "65: }  // namespace literal_buffers",
          "",
          "[Added Lines]",
          "31: constexpr std::size_t kInvalidSize = std::numeric_limits<std::size_t>::max();",
          "34: constexpr int kMaxReadSeconds = 30;",
          "39: constexpr std::size_t kMaxDumpSize = 2048;",
          "42: constexpr std::size_t kBufferSize = 1024;",
          "47: constexpr std::size_t kGzipThreshold = 1400;",
          "",
          "---------------"
        ],
        "webcc/internal/globals.h||webcc/internal/globals.h": [
          "File: webcc/internal/globals.h -> webcc/internal/globals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef WEBCC_INTERNAL_GLOBALS_H_",
          "2: #define WEBCC_INTERNAL_GLOBALS_H_",
          "4: namespace webcc {",
          "5: namespace internal {",
          "7: const char* const kCRLF = \"\\r\\n\";",
          "9: namespace literal_buffers {",
          "14: const char HEADER_SEPARATOR[2] = { ':', ' ' };",
          "15: const char CRLF[2] = { '\\r', '\\n' };",
          "16: const char DOUBLE_DASHES[2] = { '-', '-' };",
          "18: }  // namespace literal_buffers",
          "20: namespace log_prefix {",
          "22: const char* const kIncoming = \"    < \";",
          "23: const char* const kOutgoing = \"    > \";",
          "25: }  // namespace log_prefix",
          "27: }  // namespace internal",
          "28: }  // namespace webcc",
          "30: #endif  // WEBCC_INTERNAL_GLOBALS_H_",
          "",
          "---------------"
        ],
        "webcc/logger.cc||webcc/logger.cc": [
          "File: webcc/logger.cc -> webcc/logger.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <string>",
          "11: #include <thread>",
          "14: #include <Windows.h>",
          "15: #else",
          "17: #include <unistd.h>",
          "18: #include <sys/syscall.h>  // For SYS_xxx definitions",
          "19: #include <sys/types.h>",
          "22: namespace webcc {",
          "",
          "[Removed Lines]",
          "13: #if (defined(_WIN32) || defined(_WIN64))",
          "20: #endif  // defined(_WIN32) || defined(_WIN64)",
          "",
          "[Added Lines]",
          "13: #ifdef _WIN32",
          "20: #endif  // _WIN32",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: static FILE* FOpen(const sfs::path& path, bool overwrite) {",
          "38:   return _wfopen(path.wstring().c_str(), overwrite ? L\"w+\" : L\"a+\");",
          "39: #else",
          "40:   return fopen(path.string().c_str(), overwrite ? \"w+\" : \"a+\");",
          "42: }",
          "44: struct Logger {",
          "",
          "[Removed Lines]",
          "37: #if (defined(_WIN32) || defined(_WIN64))",
          "41: #endif  // defined(_WIN32) || defined(_WIN64)",
          "",
          "[Added Lines]",
          "37: #ifdef _WIN32",
          "41: #endif  // _WIN32",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: static const bool g_terminal_has_color = []() {",
          "78: #ifndef ENABLE_VIRTUAL_TERMINAL_PROCESSING",
          "79: #define ENABLE_VIRTUAL_TERMINAL_PROCESSING 0x0004",
          "80: #endif",
          "",
          "[Removed Lines]",
          "77: #if (defined(_WIN32) || defined(_WIN64))",
          "",
          "[Added Lines]",
          "77: #ifdef _WIN32",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103: #endif",
          "104: }();",
          "107: #define VTSEQ(ID) (\"\\x1b[1;\" #ID \"m\")",
          "108: #else",
          "109: #define VTSEQ(ID) (\"\\x1b[\" #ID \"m\")",
          "",
          "[Removed Lines]",
          "106: #if (defined(_WIN32) || defined(_WIN64))",
          "",
          "[Added Lines]",
          "106: #ifdef _WIN32",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136: static std::string DoGetThreadID() {",
          "138:   auto thread_id = std::this_thread::get_id();",
          "139:   std::ostringstream ss;",
          "140:   ss << thread_id;",
          "",
          "[Removed Lines]",
          "137: #if (defined(_WIN32) || defined(_WIN64))",
          "",
          "[Added Lines]",
          "137: #ifdef _WIN32",
          "",
          "---------------"
        ],
        "webcc/logger.h||webcc/logger.h": [
          "File: webcc/logger.h -> webcc/logger.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "54: #if (defined(_WIN32) || defined(_WIN64))",
          "",
          "[Added Lines]",
          "52: #ifdef _WIN32",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: #define __FILENAME__ std::strrchr(\"/\" __FILE__, '/') + 1",
          "68: #if WEBCC_LOG_LEVEL <= WEBCC_VERB",
          "69: #define LOG_VERB(format, ...) \\",
          "",
          "[Removed Lines]",
          "66: #endif  // defined(_WIN32) || defined(_WIN64)",
          "",
          "[Added Lines]",
          "64: #endif  // _WIN32",
          "",
          "---------------"
        ],
        "webcc/message.cc||webcc/message.cc": [
          "File: webcc/message.cc -> webcc/message.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"boost/algorithm/string.hpp\"",
          "7: #include \"webcc/logger.h\"",
          "8: #include \"webcc/utility.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"webcc/internal/globals.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: Payload Message::GetPayload() const {",
          "78:   using boost::asio::buffer;",
          "80:   Payload payload;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   namespace literal_buffers = internal::literal_buffers;",
          "",
          "---------------"
        ],
        "webcc/message.h||webcc/message.h": [
          "File: webcc/message.h -> webcc/message.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: namespace webcc {",
          "20: class Message {",
          "21: public:",
          "22:   Message();",
          "",
          "[Removed Lines]",
          "15: namespace log_prefix {",
          "16: const char* const kIncoming = \"    < \";",
          "17: const char* const kOutgoing = \"    > \";",
          "18: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:   Headers headers_;",
          "121:   BodyPtr body_;",
          "122: };",
          "",
          "[Removed Lines]",
          "119:   std::size_t content_length_ = kInvalidLength;",
          "",
          "[Added Lines]",
          "114:   std::size_t content_length_ = kInvalidSize;",
          "",
          "---------------"
        ],
        "webcc/parser.cc||webcc/message_parser.cc": [
          "File: webcc/parser.cc -> webcc/message_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"boost/algorithm/string.hpp\"",
          "5: #include \"webcc/logger.h\"",
          "6: #include \"webcc/message.h\"",
          "7: #include \"webcc/string.h\"",
          "",
          "[Removed Lines]",
          "1: #include \"webcc/parser.h\"",
          "",
          "[Added Lines]",
          "1: #include \"webcc/message_parser.h\"",
          "5: #include \"webcc/internal/globals.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:   return true;",
          "92: }",
          "97: }",
          "99: void FileBodyHandler::AddContent(const std::string& data) {",
          "",
          "[Removed Lines]",
          "94: void FileBodyHandler::AddContent(const char* data, std::size_t count) {",
          "95:   ofstream_.write(data, count);",
          "96:   streamed_size_ += count;",
          "",
          "[Added Lines]",
          "95: void FileBodyHandler::AddContent(const char* data, std::size_t length) {",
          "96:   ofstream_.write(data, length);",
          "97:   streamed_size_ += length;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:   message_ = message;",
          "122:   body_handler_.reset();",
          "",
          "[Removed Lines]",
          "119: void Parser::Init(Message* message) {",
          "",
          "[Added Lines]",
          "120: void MessageParser::Init(Message* message) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:   pending_data_.clear();",
          "126:   header_length_ = 0;",
          "129:   content_type_.Clear();",
          "130:   start_line_parsed_ = false;",
          "131:   content_length_parsed_ = false;",
          "132:   header_ended_ = false;",
          "133:   chunked_ = false;",
          "135:   finished_ = false;",
          "136: }",
          "139:   if (header_ended_) {",
          "140:     return ParseContent(data, length);",
          "141:   }",
          "",
          "[Removed Lines]",
          "128:   content_length_ = kInvalidLength;",
          "134:   chunk_size_ = kInvalidLength;",
          "138: bool Parser::Parse(const char* data, std::size_t length) {",
          "",
          "[Added Lines]",
          "129:   content_length_ = kInvalidSize;",
          "135:   chunk_size_ = kInvalidSize;",
          "139: bool MessageParser::Parse(const char* data, std::size_t length) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "176:   return ParseContent(\"\", 0);",
          "177: }",
          "180:   std::size_t off = 0;",
          "182:   while (true) {",
          "",
          "[Removed Lines]",
          "179: bool Parser::ParseHeaders() {",
          "",
          "[Added Lines]",
          "180: bool MessageParser::ParseHeaders() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "213:   return true;",
          "214: }",
          "217:   if (stream_) {",
          "218:     auto file_body_handler = new FileBodyHandler{ message_ };",
          "219:     if (!file_body_handler->OpenFile()) {",
          "",
          "[Removed Lines]",
          "216: void Parser::CreateBodyHandler() {",
          "",
          "[Added Lines]",
          "217: void MessageParser::CreateBodyHandler() {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "227:   }",
          "228: }",
          "232:   if (pos == std::string::npos) {",
          "233:     return false;",
          "234:   }",
          "",
          "[Removed Lines]",
          "230: bool Parser::GetNextLine(std::size_t off, std::string* line, bool erase) {",
          "231:   std::size_t pos = pending_data_.find(kCRLF, off);",
          "",
          "[Added Lines]",
          "231: bool MessageParser::GetNextLine(std::size_t off, std::string* line,",
          "232:                                 bool erase) {",
          "233:   std::size_t pos = pending_data_.find(internal::kCRLF, off);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "245:   return true;",
          "246: }",
          "249:   Header header;",
          "250:   if (!SplitKV(line, ':', true, &header.first, &header.second)) {",
          "251:     LOG_ERRO(\"Invalid header: %s\", line.c_str());",
          "",
          "[Removed Lines]",
          "248: bool Parser::ParseHeaderLine(const std::string& line) {",
          "",
          "[Added Lines]",
          "250: bool MessageParser::ParseHeaderLine(const std::string& line) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "255:   if (boost::iequals(header.first, headers::kContentLength)) {",
          "256:     content_length_parsed_ = true;",
          "259:     if (!ToSizeT(header.second, 10, &content_length)) {",
          "260:       LOG_ERRO(\"Invalid content length: %s\", header.second.c_str());",
          "261:       return false;",
          "",
          "[Removed Lines]",
          "258:     std::size_t content_length = kInvalidLength;",
          "",
          "[Added Lines]",
          "260:     std::size_t content_length = kInvalidSize;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "282:   return true;",
          "283: }",
          "286:   if (chunked_) {",
          "287:     return ParseChunkedContent(data, length);",
          "288:   } else {",
          "",
          "[Removed Lines]",
          "285: bool Parser::ParseContent(const char* data, std::size_t length) {",
          "",
          "[Added Lines]",
          "287: bool MessageParser::ParseContent(const char* data, std::size_t length) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "290:   }",
          "291: }",
          "294:   if (!content_length_parsed_) {",
          "296:     Finish();",
          "297:     return true;",
          "298:   }",
          "302:     return false;",
          "303:   }",
          "",
          "[Removed Lines]",
          "293: bool Parser::ParseFixedContent(const char* data, std::size_t length) {",
          "300:   if (content_length_ == kInvalidLength) {",
          "",
          "[Added Lines]",
          "295: bool MessageParser::ParseFixedContent(const char* data, std::size_t length) {",
          "302:   if (content_length_ == kInvalidSize) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "319:   return true;",
          "320: }",
          "323:   pending_data_.append(data, length);",
          "325:   while (true) {",
          "",
          "[Removed Lines]",
          "322: bool Parser::ParseChunkedContent(const char* data, std::size_t length) {",
          "",
          "[Added Lines]",
          "324: bool MessageParser::ParseChunkedContent(const char* data, std::size_t length) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "329:     }",
          "333:       std::string line;",
          "334:       if (!GetNextLine(0, &line, true)) {",
          "",
          "[Removed Lines]",
          "332:     if (chunk_size_ == kInvalidLength) {",
          "",
          "[Added Lines]",
          "334:     if (chunk_size_ == kInvalidSize) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "359:       pending_data_.erase(0, chunk_size_ + 2);",
          "365:       continue;",
          "",
          "[Removed Lines]",
          "362:       chunk_size_ = kInvalidLength;",
          "",
          "[Added Lines]",
          "364:       chunk_size_ = kInvalidSize;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "386:   return true;",
          "387: }",
          "390:   LOG_VERB(\"Chunk size line: [%s]\", line.c_str());",
          "392:   std::string hex_str;  // e.g., \"cf0\" (3312)",
          "",
          "[Removed Lines]",
          "389: bool Parser::ParseChunkSize(const std::string& line) {",
          "",
          "[Added Lines]",
          "391: bool MessageParser::ParseChunkSize(const std::string& line) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "405:   return true;",
          "406: }",
          "410:   return body_handler_->GetContentLength() >= content_length_;",
          "411: }",
          "414:   finished_ = true;",
          "418:   message_->set_content_length(content_length_);",
          "",
          "[Removed Lines]",
          "408: bool Parser::IsFixedContentFull() const {",
          "409:   assert(content_length_ != kInvalidLength);",
          "413: bool Parser::Finish() {",
          "",
          "[Added Lines]",
          "410: bool MessageParser::IsFixedContentFull() const {",
          "411:   assert(content_length_ != kInvalidSize);",
          "415: bool MessageParser::Finish() {",
          "",
          "---------------"
        ],
        "webcc/parser.h||webcc/message_parser.h": [
          "File: webcc/parser.h -> webcc/message_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <fstream>",
          "5: #include <string>",
          "",
          "[Removed Lines]",
          "1: #ifndef WEBCC_PARSER_H_",
          "2: #define WEBCC_PARSER_H_",
          "",
          "[Added Lines]",
          "1: #ifndef WEBCC_MESSAGE_PARSER_H_",
          "2: #define WEBCC_MESSAGE_PARSER_H_",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:   virtual ~BodyHandler() = default;",
          "28:   virtual void AddContent(const std::string& data) = 0;",
          "",
          "[Removed Lines]",
          "26:   virtual void AddContent(const char* data, std::size_t count) = 0;",
          "",
          "[Added Lines]",
          "26:   virtual void AddContent(const char* data, std::size_t length) = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:   ~StringBodyHandler() override = default;",
          "51:   void AddContent(const std::string& data) override;",
          "53:   std::size_t GetContentLength() const override {",
          "",
          "[Removed Lines]",
          "50:   void AddContent(const char* data, std::size_t count) override;",
          "",
          "[Added Lines]",
          "50:   void AddContent(const char* data, std::size_t length) override;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:   bool OpenFile();",
          "77:   void AddContent(const std::string& data) override;",
          "79:   std::size_t GetContentLength() const override {",
          "",
          "[Removed Lines]",
          "76:   void AddContent(const char* data, std::size_t count) override;",
          "",
          "[Added Lines]",
          "75:   void AddContent(const char* data, std::size_t length) override;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95: public:",
          "103:   void Init(Message* message);",
          "",
          "[Removed Lines]",
          "94: class Parser {",
          "96:   Parser() = default;",
          "98:   Parser(const Parser&) = delete;",
          "99:   Parser& operator=(const Parser&) = delete;",
          "101:   virtual ~Parser() = default;",
          "",
          "[Added Lines]",
          "92: class MessageParser {",
          "94:   MessageParser() = default;",
          "96:   MessageParser(const MessageParser&) = delete;",
          "97:   MessageParser& operator=(const MessageParser&) = delete;",
          "99:   virtual ~MessageParser() = default;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "171:   bool stream_ = false;",
          "174:   std::string pending_data_;",
          "177:   std::size_t header_length_ = 0;",
          "181:   ContentType content_type_;",
          "182:   bool start_line_parsed_ = false;",
          "183:   bool content_length_parsed_ = false;",
          "184:   bool header_ended_ = false;",
          "185:   bool chunked_ = false;",
          "187:   bool finished_ = false;",
          "188: };",
          "190: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "180:   std::size_t content_length_ = kInvalidLength;",
          "186:   std::size_t chunk_size_ = kInvalidLength;",
          "192: #endif  // WEBCC_PARSER_H_",
          "",
          "[Added Lines]",
          "177:   std::size_t content_length_ = kInvalidSize;",
          "183:   std::size_t chunk_size_ = kInvalidSize;",
          "189: #endif  // WEBCC_MESSAGE_PARSER_H_",
          "",
          "---------------"
        ],
        "webcc/request_parser.cc||webcc/request_parser.cc": [
          "File: webcc/request_parser.cc -> webcc/request_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"boost/algorithm/string.hpp\"",
          "7: #include \"webcc/logger.h\"",
          "8: #include \"webcc/request.h\"",
          "9: #include \"webcc/string.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"webcc/internal/globals.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: void RequestParser::Init(Request* request, ViewMatcher view_matcher) {",
          "15:   assert(view_matcher != nullptr);",
          "19:   request_ = request;",
          "20:   view_matcher_ = view_matcher;",
          "",
          "[Removed Lines]",
          "17:   Parser::Init(request);",
          "",
          "[Added Lines]",
          "18:   MessageParser::Init(request);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:   if (content_type_.multipart()) {",
          "59:     return ParseMultipartContent(data, length);",
          "60:   } else {",
          "62:   }",
          "63: }",
          "",
          "[Removed Lines]",
          "61:     return Parser::ParseContent(data, length);",
          "",
          "[Added Lines]",
          "62:     return MessageParser::ParseContent(data, length);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66:                                           std::size_t length) {",
          "67:   pending_data_.append(data, length);",
          "71:     return false;",
          "72:   }",
          "",
          "[Removed Lines]",
          "69:   if (!content_length_parsed_ || content_length_ == kInvalidLength) {",
          "",
          "[Added Lines]",
          "70:   if (!content_length_parsed_ || content_length_ == kInvalidSize) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "222:   return true;",
          "223: }",
          "227:   std::size_t off = 0;",
          "229:   while (true) {",
          "231:     if (pos == std::string::npos) {",
          "232:       break;",
          "233:     }",
          "237:       off = pos + 2;",
          "238:       continue;  // Empty line",
          "239:     }",
          "244:       return true;",
          "245:     }",
          "",
          "[Removed Lines]",
          "225: bool RequestParser::GetNextBoundaryLine(std::size_t* b_off, std::size_t* b_len,",
          "226:                                         bool* ended) {",
          "230:     std::size_t pos = pending_data_.find(kCRLF, off);",
          "235:     std::size_t len = pos - off;",
          "236:     if (len == 0) {",
          "241:     if (IsBoundary(pending_data_, off, len, ended)) {",
          "",
          "[Added Lines]",
          "226: bool RequestParser::GetNextBoundaryLine(std::size_t* b_off,",
          "227:                                         std::size_t* b_count, bool* ended) {",
          "231:     std::size_t pos = pending_data_.find(internal::kCRLF, off);",
          "236:     std::size_t count = pos - off;",
          "237:     if (count == 0) {",
          "242:     if (IsBoundary(pending_data_, off, count, ended)) {",
          "",
          "---------------"
        ],
        "webcc/request_parser.h||webcc/request_parser.h": [
          "File: webcc/request_parser.h -> webcc/request_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <functional>",
          "5: #include <string>",
          "9: namespace webcc {",
          "",
          "[Removed Lines]",
          "7: #include \"webcc/parser.h\"",
          "",
          "[Added Lines]",
          "7: #include \"webcc/message_parser.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: class Request;",
          "18: public:",
          "19:   RequestParser() = default;",
          "",
          "[Removed Lines]",
          "17: class RequestParser : public Parser {",
          "",
          "[Added Lines]",
          "17: class RequestParser : public MessageParser {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:   bool ParseMultipartContent(const char* data, std::size_t length);",
          "38:   bool ParsePartHeaders(bool* need_more_data);",
          "42:   bool IsBoundary(const std::string& str, std::size_t off,",
          "",
          "[Removed Lines]",
          "39:   bool GetNextBoundaryLine(std::size_t* b_off, std::size_t* b_len, bool* ended);",
          "",
          "[Added Lines]",
          "40:   bool GetNextBoundaryLine(std::size_t* b_off, std::size_t* b_count,",
          "41:                            bool* ended);",
          "",
          "---------------"
        ],
        "webcc/response_parser.cc||webcc/response_parser.cc": [
          "File: webcc/response_parser.cc -> webcc/response_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: void ResponseParser::Init(Response* response, bool stream) {",
          "45:   response_ = response;",
          "46:   stream_ = stream;",
          "",
          "[Removed Lines]",
          "43:   Parser::Init(response);",
          "",
          "[Added Lines]",
          "43:   MessageParser::Init(response);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     Finish();",
          "80:     return true;",
          "81:   }",
          "83: }",
          "85: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "82:   return Parser::ParseContent(data, length);",
          "",
          "[Added Lines]",
          "82:   return MessageParser::ParseContent(data, length);",
          "",
          "---------------"
        ],
        "webcc/response_parser.h||webcc/response_parser.h": [
          "File: webcc/response_parser.h -> webcc/response_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <string>",
          "8: namespace webcc {",
          "10: class Response;",
          "13: public:",
          "14:   ResponseParser() = default;",
          "15:   ~ResponseParser() override = default;",
          "",
          "[Removed Lines]",
          "6: #include \"webcc/parser.h\"",
          "12: class ResponseParser : public Parser {",
          "",
          "[Added Lines]",
          "6: #include \"webcc/message_parser.h\"",
          "12: class ResponseParser : public MessageParser {",
          "",
          "---------------"
        ],
        "webcc/server.cc||webcc/server.cc": [
          "File: webcc/server.cc -> webcc/server.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "384: }",
          "386: sfs::path Server::TranslatePath(const std::string& utf8_url_path) {",
          "389:   std::vector<std::wstring> words;",
          "390:   boost::split(words, url_path, boost::is_any_of(L\"/\"),",
          "391:                boost::token_compress_on);",
          "",
          "[Removed Lines]",
          "387: #if (defined(_WIN32) || defined(_WIN64))",
          "388:   std::wstring url_path = Utf8To16(utf8_url_path);",
          "",
          "[Added Lines]",
          "387: #ifdef _WIN32",
          "388:   std::wstring url_path;",
          "389:   if (!windows_only::Utf8ToWstr(utf8_url_path, &url_path)) {",
          "390:     return {};  // TODO",
          "391:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:   std::vector<std::string> words;",
          "394:   boost::split(words, utf8_url_path, boost::is_any_of(\"/\"),",
          "395:                boost::token_compress_on);",
          "398:   sfs::path path;",
          "399:   for (auto& word : words) {",
          "402:     if (word == L\".\" || word == L\"..\") {",
          "403: #else",
          "404:     if (word == \".\" || word == \"..\") {",
          "",
          "[Removed Lines]",
          "396: #endif  // defined(_WIN32) || defined(_WIN64)",
          "401: #if (defined(_WIN32) || defined(_WIN64))",
          "",
          "[Added Lines]",
          "400: #endif  // _WIN32",
          "406: #ifdef _WIN32",
          "",
          "---------------"
        ],
        "webcc/ssl_client.cc||webcc/ssl_client.cc": [
          "File: webcc/ssl_client.cc -> webcc/ssl_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include \"webcc/logger.h\"",
          "10: using namespace std::placeholders;",
          "12: using boost::asio::ip::tcp;",
          "13: namespace ssl = boost::asio::ssl;",
          "15: void SslClient::Close() {",
          "16:   boost::system::error_code ec;",
          "17:   GetSocket().cancel(ec);",
          "",
          "[Removed Lines]",
          "8: namespace webcc {",
          "",
          "[Added Lines]",
          "12: namespace webcc {",
          "",
          "---------------"
        ],
        "webcc/string.cc||webcc/string.cc": [
          "File: webcc/string.cc -> webcc/string.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"webcc/string.h\"",
          "4: #define NOMINMAX",
          "5: #include <Windows.h>",
          "6: #endif",
          "",
          "[Removed Lines]",
          "3: #if (defined(_WIN32) || defined(_WIN64))",
          "",
          "[Added Lines]",
          "3: #ifdef _WIN32",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:   return false;",
          "108: }",
          "116:   }",
          "127: }",
          "133:   }",
          "138:   DWORD flags = 0;",
          "141:   }",
          "154: }",
          "158: }",
          "162: }",
          "166: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "110: #if (defined(_WIN32) || defined(_WIN64))",
          "113: static std::wstring MB2WC(const std::string& input, unsigned int code_page) {",
          "114:   if (input.empty()) {",
          "115:     return L\"\";",
          "118:   int length = ::MultiByteToWideChar(code_page, 0, &input[0],",
          "119:                                      static_cast<int>(input.size()), NULL, 0);",
          "121:   std::wstring output(length, '\\0');",
          "123:   ::MultiByteToWideChar(code_page, 0, &input[0], static_cast<int>(input.size()),",
          "124:                         &output[0], static_cast<int>(output.size()));",
          "126:   return output;",
          "130: static std::string WC2MB(const std::wstring& input, unsigned int code_page) {",
          "131:   if (input.empty()) {",
          "132:     return \"\";",
          "139:   if (code_page != 65001 && code_page != 54936) {",
          "140:     flags = WC_NO_BEST_FIT_CHARS | WC_COMPOSITECHECK | WC_DEFAULTCHAR;",
          "143:   int length = ::WideCharToMultiByte(code_page, flags, &input[0],",
          "144:                                      static_cast<int>(input.size()), NULL, 0,",
          "145:                                      NULL, NULL);",
          "147:   std::string output(length, '\\0');",
          "149:   ::WideCharToMultiByte(code_page, flags, &input[0],",
          "150:                         static_cast<int>(input.size()), &output[0],",
          "151:                         static_cast<int>(output.size()), NULL, NULL);",
          "153:   return output;",
          "156: std::string Utf16To8(const std::wstring& utf16_string) {",
          "157:   return WC2MB(utf16_string, CP_UTF8);",
          "160: std::wstring Utf8To16(const std::string& utf8_string) {",
          "161:   return MB2WC(utf8_string, CP_UTF8);",
          "164: #endif  // defined(_WIN32) || defined(_WIN64)",
          "",
          "[Added Lines]",
          "110: #ifdef _WIN32",
          "112: namespace windows_only {",
          "115: static bool MB2WC(std::string_view input, unsigned int code_page,",
          "116:                   std::wstring* output) {",
          "117:   const int input_size = static_cast<int>(input.size());",
          "118:   if (input_size == 0) {",
          "119:     return false;",
          "122:   DWORD flags = MB_PRECOMPOSED | MB_ERR_INVALID_CHARS;",
          "124:   int size = ::MultiByteToWideChar(code_page, flags, input.data(), input_size,",
          "125:                                    NULL, 0);",
          "127:   if (size == 0) {",
          "128:     return false;",
          "129:   }",
          "131:   output->resize(size);",
          "133:   if (::MultiByteToWideChar(code_page, flags, input.data(), input_size,",
          "134:                             output->data(), size) == 0) {",
          "135:     return false;",
          "136:   }",
          "138:   return true;",
          "142: static bool WC2MB(std::wstring_view input, unsigned int code_page,",
          "143:                   std::string* output) {",
          "144:   const int input_size = static_cast<int>(input.size());",
          "145:   if (input_size == 0) {",
          "146:     return false;",
          "153:   if (code_page != CP_UTF8 && code_page != 54936) {",
          "157:     flags = WC_ERR_INVALID_CHARS;",
          "160:   int size = ::WideCharToMultiByte(code_page, flags, input.data(), input_size,",
          "161:                                    NULL, 0, NULL, NULL);",
          "163:   if (size == 0) {",
          "164:     return false;",
          "165:   }",
          "167:   output->resize(size);",
          "169:   if (::WideCharToMultiByte(code_page, flags, input.data(), input_size,",
          "170:                             output->data(), size, NULL, NULL) == 0) {",
          "171:     return false;",
          "172:   }",
          "174:   return true;",
          "177: bool WstrToUtf8(std::wstring_view wstr, std::string* utf8) {",
          "178:   return WC2MB(wstr, CP_UTF8, utf8);",
          "181: bool Utf8ToWstr(std::string_view utf8, std::wstring* wstr) {",
          "182:   return MB2WC(utf8, CP_UTF8, wstr);",
          "185: }  // namespace windows_only",
          "187: #endif  // _WIN32",
          "",
          "---------------"
        ],
        "webcc/string.h||webcc/string.h": [
          "File: webcc/string.h -> webcc/string.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: bool SplitKV(std::string_view input, char delim, bool trim_spaces,",
          "38:              std::string* key, std::string* value);",
          "46: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "41: #if (defined(_WIN32) || defined(_WIN64))",
          "42: std::string Utf16To8(const std::wstring& utf16_string);",
          "43: std::wstring Utf8To16(const std::string& utf8_string);",
          "44: #endif",
          "",
          "[Added Lines]",
          "40: #ifdef _WIN32",
          "41: namespace windows_only {",
          "43: bool WstrToUtf8(std::wstring_view wstr, std::string* utf8);",
          "45: bool Utf8ToWstr(std::string_view utf8, std::wstring* wstr);",
          "47: }  // namespace windows_only",
          "48: #endif  // _WIN32",
          "",
          "---------------"
        ],
        "webcc/utility.cc||webcc/utility.cc": [
          "File: webcc/utility.cc -> webcc/utility.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   std::ifstream stream{ path, std::ios::binary | std::ios::ate };",
          "37:   if (stream.fail()) {",
          "39:   }",
          "40:   return static_cast<std::size_t>(stream.tellg());",
          "41: }",
          "",
          "[Removed Lines]",
          "38:     return kInvalidLength;",
          "",
          "[Added Lines]",
          "38:     return kInvalidSize;",
          "",
          "---------------"
        ],
        "webcc/utility.h||webcc/utility.h": [
          "File: webcc/utility.h -> webcc/utility.h"
        ]
      }
    },
    {
      "candidate_hash": "546b6f73044de47d283fdb622bb0306bf714cee4",
      "candidate_info": {
        "commit_hash": "546b6f73044de47d283fdb622bb0306bf714cee4",
        "repo": "sprinfall/webcc",
        "commit_url": "https://github.com/sprinfall/webcc/commit/546b6f73044de47d283fdb622bb0306bf714cee4",
        "files": [
          "examples/book_server/views.cc",
          "webcc/server.cc"
        ],
        "message": "refine the handling of not found and bad request",
        "before_after_code_files": [
          "examples/book_server/views.cc||examples/book_server/views.cc",
          "webcc/server.cc||webcc/server.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "webcc/server.cc||webcc/server.cc"
          ],
          "candidate": [
            "webcc/server.cc||webcc/server.cc"
          ]
        }
      },
      "candidate_diff": {
        "examples/book_server/views.cc||examples/book_server/views.cc": [
          "File: examples/book_server/views.cc -> examples/book_server/views.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     return webcc::ResponseBuilder{}.NotFound()();",
          "89:   }",
          "92: }",
          "94: webcc::ResponsePtr BookDetailView::Put(webcc::RequestPtr request) {",
          "",
          "[Removed Lines]",
          "91:   return webcc::ResponseBuilder{}.OK().Body(BookToJsonString(book)).Json().Utf8()();",
          "",
          "[Added Lines]",
          "91:   return webcc::ResponseBuilder{}",
          "92:       .OK()",
          "93:       .Body(BookToJsonString(book))",
          "94:       .Json()",
          "95:       .Utf8()();",
          "",
          "---------------"
        ],
        "webcc/server.cc||webcc/server.cc": [
          "File: webcc/server.cc -> webcc/server.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:   UrlArgs args;",
          "313:   ViewPtr view = FindView(request->method(), url_path, &args);",
          "319:     if (request->method() == methods::kGet) {",
          "321:       ResponsePtr response = ServeStatic(request);",
          "322:       if (response != nullptr) {",
          "323:         connection->SendResponse(response);",
          "324:       } else {",
          "326:         connection->SendResponse(status_codes::kNotFound);",
          "327:       }",
          "328:     } else {",
          "329:       connection->SendResponse(status_codes::kNotFound);",
          "330:     }",
          "346:   }",
          "347: }",
          "",
          "[Removed Lines]",
          "315:   if (view == nullptr) {",
          "332:     return;",
          "333:   }",
          "336:   request->set_args(std::move(args));",
          "339:   ResponsePtr response = view->Handle(request);",
          "342:   if (response  != nullptr) {",
          "343:     connection->SendResponse(response);",
          "344:   } else {",
          "345:     connection->SendResponse(status_codes::kBadRequest);",
          "",
          "[Added Lines]",
          "315:   if (view != nullptr) {",
          "317:     request->set_args(std::move(args));",
          "320:     ResponsePtr response = view->Handle(request);",
          "323:     if (response != nullptr) {",
          "324:       connection->SendResponse(response);",
          "325:     } else {",
          "328:       connection->SendResponse(status_codes::kBadRequest);",
          "329:     }",
          "330:   } else {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355:     return {};",
          "356:   }",
          "361:   try {",
          "362:     if (!sfs::exists(path) || !sfs::is_regular_file(path)) {",
          "364:       return {};",
          "365:     }",
          "",
          "[Removed Lines]",
          "358:   std::string url_path = Url::DecodeUnsafe(request->url().path());",
          "359:   sfs::path path = doc_root_ / TranslatePath(url_path);",
          "363:       LOG_WARN(\"The file doesn't exist: %s\", url_path.c_str());",
          "",
          "[Added Lines]",
          "357:   const std::string utf8_url_path = Url::DecodeUnsafe(request->url().path());",
          "359:   sfs::path local_sub_path = TranslatePath(utf8_url_path);",
          "360:   if (local_sub_path.empty()) {",
          "361:     return {};",
          "362:   }",
          "364:   sfs::path path = doc_root_ / local_sub_path;",
          "368:       LOG_WARN(\"The file doesn't exist: %s\", utf8_url_path.c_str());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "387: #ifdef _WIN32",
          "388:   std::wstring url_path;",
          "389:   if (!windows_only::Utf8ToWstr(utf8_url_path, &url_path)) {",
          "391:   }",
          "393:   std::vector<std::wstring> words;",
          "394:   boost::split(words, url_path, boost::is_any_of(L\"/\"),",
          "395:                boost::token_compress_on);",
          "",
          "[Removed Lines]",
          "390:     return {};  // TODO",
          "",
          "[Added Lines]",
          "395:     return {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3da1394b587a1819757c7451a0afb966d505822a",
      "candidate_info": {
        "commit_hash": "3da1394b587a1819757c7451a0afb966d505822a",
        "repo": "sprinfall/webcc",
        "commit_url": "https://github.com/sprinfall/webcc/commit/3da1394b587a1819757c7451a0afb966d505822a",
        "files": [
          "autotest/client_autotest/client_autotest.cc",
          "unittest/response_builder_unittest.cc",
          "unittest/url_unittest.cc",
          "webcc/client_session.cc",
          "webcc/common.cc",
          "webcc/common.h",
          "webcc/message.cc",
          "webcc/message.h",
          "webcc/router.cc",
          "webcc/url.cc",
          "webcc/url.h"
        ],
        "message": "more rework on string_view",
        "before_after_code_files": [
          "autotest/client_autotest/client_autotest.cc||autotest/client_autotest/client_autotest.cc",
          "unittest/response_builder_unittest.cc||unittest/response_builder_unittest.cc",
          "unittest/url_unittest.cc||unittest/url_unittest.cc",
          "webcc/client_session.cc||webcc/client_session.cc",
          "webcc/common.cc||webcc/common.cc",
          "webcc/common.h||webcc/common.h",
          "webcc/message.cc||webcc/message.cc",
          "webcc/message.h||webcc/message.h",
          "webcc/router.cc||webcc/router.cc",
          "webcc/url.cc||webcc/url.cc",
          "webcc/url.h||webcc/url.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "webcc/router.cc||webcc/router.cc",
            "webcc/url.cc||webcc/url.cc",
            "webcc/url.h||webcc/url.h"
          ],
          "candidate": [
            "webcc/router.cc||webcc/router.cc",
            "webcc/url.cc||webcc/url.cc",
            "webcc/url.h||webcc/url.h"
          ]
        }
      },
      "candidate_diff": {
        "autotest/client_autotest/client_autotest.cc||autotest/client_autotest/client_autotest.cc": [
          "File: autotest/client_autotest/client_autotest.cc -> autotest/client_autotest/client_autotest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     EXPECT_EQ(webcc::status_codes::kOK, r->status());",
          "45:     EXPECT_EQ(\"OK\", r->reason());",
          "50:     EXPECT_EQ(\"\", r->data());",
          "",
          "[Removed Lines]",
          "47:     EXPECT_TRUE(r->HasHeader(webcc::headers::kContentLength));",
          "",
          "[Added Lines]",
          "47:     EXPECT_TRUE(r->HeaderExist(webcc::headers::kContentLength));",
          "",
          "---------------"
        ],
        "unittest/response_builder_unittest.cc||unittest/response_builder_unittest.cc": [
          "File: unittest/response_builder_unittest.cc -> unittest/response_builder_unittest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"webcc/response_builder.h\"",
          "6: TEST(ResponseBuilderTest, EmptyBody) {",
          "7:   using namespace webcc;",
          "9:   auto response = ResponseBuilder{}.OK()();",
          "16:   EXPECT_EQ(value, \"0\");",
          "17: }",
          "",
          "[Removed Lines]",
          "11:   bool existed = false;",
          "12:   const std::string& value =",
          "13:       response->GetHeader(headers::kContentLength, &existed);",
          "15:   EXPECT_TRUE(existed);",
          "",
          "[Added Lines]",
          "11:   std::string_view value = response->GetHeader(headers::kContentLength);",
          "",
          "---------------"
        ],
        "unittest/url_unittest.cc||unittest/url_unittest.cc": [
          "File: unittest/url_unittest.cc -> unittest/url_unittest.cc"
        ],
        "webcc/client_session.cc||webcc/client_session.cc": [
          "File: webcc/client_session.cc -> webcc/client_session.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:   }",
          "187:   for (auto& h : headers_.data()) {",
          "189:       request->SetHeader(h.first, h.second);",
          "190:     }",
          "191:   }",
          "195:     request->SetContentType(media_type_, charset_);",
          "196:   }",
          "",
          "[Removed Lines]",
          "188:     if (!request->HasHeader(h.first)) {",
          "193:   if (!request->body()->IsEmpty() &&",
          "194:       !media_type_.empty() && !request->HasHeader(headers::kContentType)) {",
          "",
          "[Added Lines]",
          "188:     if (!request->HeaderExist(h.first)) {",
          "193:   if (!request->body()->IsEmpty() && !media_type_.empty() &&",
          "194:       !request->HeaderExist(headers::kContentType)) {",
          "",
          "---------------"
        ],
        "webcc/common.cc||webcc/common.cc": [
          "File: webcc/common.cc -> webcc/common.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: bool Headers::Set(std::string_view key, std::string_view value) {",
          "17:     return false;",
          "18:   }",
          "",
          "[Removed Lines]",
          "16:   if (value.empty()) {",
          "",
          "[Added Lines]",
          "16:   if (key.empty() || value.empty()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:   return true;",
          "28: }",
          "50: std::vector<Header>::iterator Headers::Find(std::string_view key) {",
          "51:   auto it = headers_.begin();",
          "52:   for (; it != headers_.end(); ++it) {",
          "",
          "[Removed Lines]",
          "30: bool Headers::Has(std::string_view key) const {",
          "31:   return const_cast<Headers*>(this)->Find(key) != headers_.end();",
          "32: }",
          "35: const std::string& Headers::Get(std::string_view key, bool* existed) const {",
          "36:   auto it = const_cast<Headers*>(this)->Find(key);",
          "38:   if (existed != nullptr) {",
          "40:   }",
          "42:   if (it != headers_.end()) {",
          "43:     return it->second;",
          "44:   }",
          "46:   static const std::string s_no_value;",
          "47:   return s_no_value;",
          "48: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "webcc/common.h||webcc/common.h": [
          "File: webcc/common.h -> webcc/common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     return headers_;",
          "29:   }",
          "31:   bool Set(std::string_view key, std::string_view value);",
          "36:   const Header& Get(std::size_t index) const {",
          "37:     assert(index < size());",
          "38:     return headers_[index];",
          "39:   }",
          "46:   void Clear() {",
          "47:     headers_.clear();",
          "",
          "[Removed Lines]",
          "33:   bool Has(std::string_view key) const;",
          "44:   const std::string& Get(std::string_view key, bool* existed = nullptr) const;",
          "",
          "[Added Lines]",
          "42:   std::string_view Get(std::string_view key) const {",
          "43:     auto it = Find(key);",
          "44:     if (it != headers_.end()) {",
          "45:       return it->second;",
          "46:     }",
          "47:     return std::string_view{};",
          "48:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: private:",
          "51:   std::vector<Header>::iterator Find(std::string_view key);",
          "53:   std::vector<Header> headers_;",
          "54: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   std::vector<Header>::const_iterator Find(std::string_view key) const {",
          "58:     return const_cast<Headers*>(this)->Find(key);",
          "59:   }",
          "",
          "---------------"
        ],
        "webcc/message.cc||webcc/message.cc": [
          "File: webcc/message.cc -> webcc/message.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   return string_body->data();",
          "40: }",
          "46: bool Message::IsConnectionKeepAlive() const {",
          "52:     return true;",
          "53:   }",
          "56: }",
          "58: ContentEncoding Message::GetContentEncoding() const {",
          "62:     return ContentEncoding::kGzip;",
          "64:     return ContentEncoding::kDeflate;",
          "65:   } else {",
          "66:     return ContentEncoding::kUnknown;",
          "67:   }",
          "68: }",
          "74: void Message::SetContentType(std::string_view media_type,",
          "75:                              std::string_view charset) {",
          "76:   if (!media_type.empty()) {",
          "",
          "[Removed Lines]",
          "42: std::shared_ptr<FileBody> Message::file_body() const {",
          "43:   return std::dynamic_pointer_cast<FileBody>(body_);",
          "44: }",
          "47:   bool existed = false;",
          "48:   const auto& connection = GetHeader(headers::kConnection, &existed);",
          "50:   if (!existed) {",
          "55:   return boost::iequals(connection, \"Keep-Alive\");",
          "59:   const auto& encoding = GetHeader(headers::kContentEncoding);",
          "61:   if (encoding == \"gzip\") {",
          "63:   } else if (encoding == \"deflate\") {",
          "70: bool Message::AcceptEncodingGzip() const {",
          "71:   return GetHeader(headers::kAcceptEncoding).find(\"gzip\") != std::string::npos;",
          "72: }",
          "",
          "[Added Lines]",
          "43:   std::string_view value = GetHeader(headers::kConnection);",
          "44:   if (value.empty()) {",
          "49:   return boost::iequals(value, \"Keep-Alive\");",
          "53:   std::string_view value = GetHeader(headers::kContentEncoding);",
          "54:   if (value == \"gzip\") {",
          "56:   } else if (value == \"deflate\") {",
          "",
          "---------------"
        ],
        "webcc/message.h||webcc/message.h": [
          "File: webcc/message.h -> webcc/message.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     headers_.Set(key, value);",
          "38:   }",
          "42:   }",
          "46:   }",
          "48:   std::size_t content_length() const {",
          "",
          "[Removed Lines]",
          "40:   const std::string& GetHeader(std::string_view key, bool* existed = nullptr) const {",
          "41:     return headers_.Get(key, existed);",
          "44:   bool HasHeader(std::string_view key) const {",
          "45:     return headers_.Has(key);",
          "",
          "[Added Lines]",
          "40:   std::string_view GetHeader(std::string_view key) const {",
          "41:     return headers_.Get(key);",
          "44:   bool HeaderExist(std::string_view key) const {",
          "45:     return !headers_.Get(key).empty();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   const std::string& data() const;",
          "71:   bool IsConnectionKeepAlive() const;",
          "",
          "[Removed Lines]",
          "68:   std::shared_ptr<FileBody> file_body() const;",
          "",
          "[Added Lines]",
          "69:   std::shared_ptr<FileBody> file_body() const {",
          "70:     return std::dynamic_pointer_cast<FileBody>(body_);",
          "71:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:   ContentEncoding GetContentEncoding() const;",
          "",
          "[Removed Lines]",
          "78:   bool AcceptEncodingGzip() const;",
          "",
          "[Added Lines]",
          "81:   bool AcceptEncodingGzip() const {",
          "82:     return GetHeader(headers::kAcceptEncoding).find(\"gzip\") !=",
          "83:            std::string_view::npos;",
          "84:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:   std::string Dump() const;",
          "103: protected:",
          "106:   Headers headers_;",
          "110:   std::size_t content_length_ = kInvalidLength;",
          "111: };",
          "113: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "104:   BodyPtr body_;",
          "108:   std::string start_line_;",
          "",
          "[Added Lines]",
          "110:   std::string start_line_;",
          "116:   BodyPtr body_;",
          "",
          "---------------"
        ],
        "webcc/router.cc||webcc/router.cc": [
          "File: webcc/router.cc -> webcc/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:                    std::vector<std::string>&& methods) {",
          "13:   assert(view);",
          "18:   return true;",
          "19: }",
          "",
          "[Removed Lines]",
          "15:   routes_.emplace_back(url, view,",
          "16:                        std::forward<std::vector<std::string>>(methods));",
          "",
          "[Added Lines]",
          "15:   routes_.emplace_back(url, view, std::move(methods));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:                    std::vector<std::string>&& methods) {",
          "23:   assert(view);",
          "27:   try {",
          "31:   } catch (const std::regex_error& e) {",
          "32:     LOG_ERRO(\"Not a valid regular expression: %s\", e.what());",
          "",
          "[Removed Lines]",
          "28:     routes_.emplace_back(regex_url(), view,",
          "29:                          std::forward<std::vector<std::string>>(methods));",
          "",
          "[Added Lines]",
          "25:     routes_.emplace_back(regex_url(), view, std::move(methods));",
          "",
          "---------------"
        ],
        "webcc/url.cc||webcc/url.cc": [
          "File: webcc/url.cc -> webcc/url.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:   if (!encoded_str.empty()) {",
          "307:       std::size_t j = encoded_str.find_first_of('&', i);",
          "311:         kv = encoded_str.substr(i);",
          "313:       } else {",
          "314:         kv = encoded_str.substr(i, j - i);",
          "315:         i = j + 1;",
          "",
          "[Removed Lines]",
          "303: UrlQuery::UrlQuery(const std::string& encoded_str) {",
          "306:     for (std::size_t i = 0; i != std::string::npos;) {",
          "309:       std::string kv;",
          "310:       if (j == std::string::npos) {",
          "312:         i = std::string::npos;",
          "",
          "[Added Lines]",
          "303: UrlQuery::UrlQuery(std::string_view encoded_str) {",
          "304:   constexpr auto npos = std::string_view::npos;",
          "308:     for (std::size_t i = 0; i != npos;) {",
          "311:       std::string_view kv;",
          "312:       if (j == npos) {",
          "314:         i = npos;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318:       std::string_view key;",
          "319:       std::string_view value;",
          "320:       if (SplitKV(kv, '=', false, &key, &value)) {",
          "323:       }",
          "324:     }",
          "325:   }",
          "326: }",
          "356: std::string UrlQuery::ToString(bool encode) const {",
          "357:   if (parameters_.empty()) {",
          "358:     return \"\";",
          "",
          "[Removed Lines]",
          "321:         parameters_.push_back(",
          "322:             { Url::DecodeUnsafe(key), Url::DecodeUnsafe(value) });",
          "328: const std::string& UrlQuery::Get(const std::string& key) const {",
          "329:   auto it = Find(key);",
          "330:   if (it != parameters_.end()) {",
          "331:     return it->second;",
          "332:   }",
          "334:   static const std::string kEmptyValue;",
          "335:   return kEmptyValue;",
          "336: }",
          "338: const UrlQuery::Parameter& UrlQuery::Get(std::size_t index) const {",
          "339:   assert(index < Size());",
          "340:   return parameters_[index];",
          "341: }",
          "343: void UrlQuery::Add(const std::string& key, const std::string& value) {",
          "344:   if (!Has(key)) {",
          "345:     parameters_.push_back({ key, value });",
          "346:   }",
          "347: }",
          "349: void UrlQuery::Remove(const std::string& key) {",
          "350:   auto it = Find(key);",
          "351:   if (it != parameters_.end()) {",
          "352:     parameters_.erase(it);",
          "353:   }",
          "354: }",
          "",
          "[Added Lines]",
          "323:         parameters_.emplace_back(Url::DecodeUnsafe(key),",
          "324:                                  Url::DecodeUnsafe(value));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "374:   }",
          "375: }",
          "378:   return std::find_if(parameters_.begin(), parameters_.end(),",
          "380: }",
          "382: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "377: UrlQuery::ConstIterator UrlQuery::Find(const std::string& key) const {",
          "379:                       [&key](const Parameter& p) { return p.first == key; });",
          "",
          "[Added Lines]",
          "351: UrlQuery::ConstIterator UrlQuery::Find(std::string_view key) const {",
          "353:                       [key](const Parameter& p) { return p.first == key; });",
          "",
          "---------------"
        ],
        "webcc/url.h||webcc/url.h": [
          "File: webcc/url.h -> webcc/url.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   UrlQuery() = default;",
          "93:   bool Empty() const {",
          "94:     return parameters_.empty();",
          "",
          "[Removed Lines]",
          "91:   explicit UrlQuery(const std::string& encoded_str);",
          "",
          "[Added Lines]",
          "91:   explicit UrlQuery(std::string_view encoded_str);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:     return parameters_.size();",
          "99:   }",
          "102:     return Find(key) != parameters_.end();",
          "103:   }",
          "",
          "[Removed Lines]",
          "101:   bool Has(const std::string& key) const {",
          "107:   const std::string& Get(const std::string& key) const;",
          "110:   const Parameter& Get(std::size_t index) const;",
          "112:   void Add(const std::string& key, const std::string& value);",
          "114:   void Remove(const std::string& key);",
          "",
          "[Added Lines]",
          "101:   bool Contain(std::string_view key) const {",
          "107:   std::string_view Get(std::string_view key) const {",
          "108:     auto it = Find(key);",
          "109:     if (it != parameters_.end()) {",
          "110:       return it->second;",
          "111:     }",
          "112:     return std::string_view{};",
          "113:   }",
          "116:   const Parameter& Get(std::size_t index) const {",
          "117:     assert(index < Size());",
          "118:     return parameters_[index];",
          "119:   }",
          "121:   void Add(std::string_view key, std::string_view value) {",
          "122:     if (!Contain(key)) {",
          "123:       parameters_.emplace_back(key, value);",
          "124:     }",
          "125:   }",
          "127:   void Remove(std::string_view key) {",
          "128:     auto it = Find(key);",
          "129:     if (it != parameters_.end()) {",
          "130:       parameters_.erase(it);",
          "131:     }",
          "132:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120: private:",
          "121:   using ConstIterator = std::vector<Parameter>::const_iterator;",
          "125: private:",
          "126:   std::vector<Parameter> parameters_;",
          "",
          "[Removed Lines]",
          "123:   ConstIterator Find(const std::string& key) const;",
          "",
          "[Added Lines]",
          "141:   ConstIterator Find(std::string_view key) const;",
          "",
          "---------------"
        ]
      }
    }
  ]
}