{
  "cve_id": "CVE-2014-5271",
  "cve_desc": "Heap-based buffer overflow in the encode_slice function in libavcodec/proresenc_kostya.c in FFMpeg before 1.1.14, 1.2.x before 1.2.8, 2.x before 2.2.7, and 2.3.x before 2.3.3 and Libav before 10.5 allows remote attackers to cause a denial of service (crash) or possibly execute arbitrary code via unspecified vectors.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "52b81ff4635c077b2bc8b8d3637d933b6629d803",
  "patch_info": {
    "commit_hash": "52b81ff4635c077b2bc8b8d3637d933b6629d803",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/52b81ff4635c077b2bc8b8d3637d933b6629d803",
    "files": [
      "libavcodec/proresenc_kostya.c"
    ],
    "message": "proresenc_kostya: report buffer overflow\n\nIf the allocated size, despite best efforts, is too small, exit\nwith the appropriate error.\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/proresenc_kostya.c||libavcodec/proresenc_kostya.c"
    ]
  },
  "patch_diff": {
    "libavcodec/proresenc_kostya.c||libavcodec/proresenc_kostya.c": [
      "File: libavcodec/proresenc_kostya.c -> libavcodec/proresenc_kostya.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "570:                                           quant);",
      "571:         }",
      "572:         total_size += sizes[i];",
      "573:     }",
      "574:     return total_size;",
      "575: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "573:         if (put_bits_left(pb) < 0) {",
      "574:             av_log(avctx, AV_LOG_ERROR, \"Serious underevaluation of\"",
      "575:                    \"required buffer size\");",
      "576:             return AVERROR_BUFFER_TOO_SMALL;",
      "577:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "940:     avctx->coded_frame->pict_type = AV_PICTURE_TYPE_I;",
      "941:     avctx->coded_frame->key_frame = 1;",
      "946:         return ret;",
      "948:     orig_buf = pkt->data;",
      "",
      "[Removed Lines]",
      "943:     pkt_size = ctx->frame_size_upper_bound + FF_MIN_BUFFER_SIZE;",
      "945:     if ((ret = ff_alloc_packet2(avctx, pkt, pkt_size)) < 0)",
      "",
      "[Added Lines]",
      "948:     pkt_size = ctx->frame_size_upper_bound;",
      "950:     if ((ret = ff_alloc_packet2(avctx, pkt, pkt_size + FF_MIN_BUFFER_SIZE)) < 0)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1019:                 slice_hdr = buf;",
      "1020:                 buf += slice_hdr_size - 1;",
      "1021:                 init_put_bits(&pb, buf, (pkt_size - (buf - orig_buf)) * 8);",
      "1024:                 bytestream_put_byte(&slice_hdr, q);",
      "1025:                 slice_size = slice_hdr_size + sizes[ctx->num_planes - 1];",
      "",
      "[Removed Lines]",
      "1022:                 encode_slice(avctx, pic, &pb, sizes, x, y, q, mbs_per_slice);",
      "",
      "[Added Lines]",
      "1027:                 ret = encode_slice(avctx, pic, &pb, sizes, x, y, q, mbs_per_slice);",
      "1028:                 if (ret < 0)",
      "1029:                     return ret;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1ad1723c24cd2683df6d00a83b6f28d3ff45fb96",
      "candidate_info": {
        "commit_hash": "1ad1723c24cd2683df6d00a83b6f28d3ff45fb96",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/1ad1723c24cd2683df6d00a83b6f28d3ff45fb96",
        "files": [
          "libavcodec/proresenc_kostya.c"
        ],
        "message": "proresenc_kostya: report buffer overflow\n\nIf the allocated size, despite best efforts, is too small, exit\nwith the appropriate error.\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 52b81ff4635c077b2bc8b8d3637d933b6629d803)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/proresenc_kostya.c||libavcodec/proresenc_kostya.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/proresenc_kostya.c||libavcodec/proresenc_kostya.c"
          ],
          "candidate": [
            "libavcodec/proresenc_kostya.c||libavcodec/proresenc_kostya.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/proresenc_kostya.c||libavcodec/proresenc_kostya.c": [
          "File: libavcodec/proresenc_kostya.c -> libavcodec/proresenc_kostya.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "571:                                           quant);",
          "572:         }",
          "573:         total_size += sizes[i];",
          "574:     }",
          "575:     return total_size;",
          "576: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:         if (put_bits_left(pb) < 0) {",
          "575:             av_log(avctx, AV_LOG_ERROR, \"Serious underevaluation of\"",
          "576:                    \"required buffer size\");",
          "577:             return AVERROR_BUFFER_TOO_SMALL;",
          "578:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "941:     avctx->coded_frame->pict_type = AV_PICTURE_TYPE_I;",
          "942:     avctx->coded_frame->key_frame = 1;",
          "947:         return ret;",
          "949:     orig_buf = pkt->data;",
          "",
          "[Removed Lines]",
          "944:     pkt_size = ctx->frame_size_upper_bound + FF_MIN_BUFFER_SIZE;",
          "946:     if ((ret = ff_alloc_packet2(avctx, pkt, pkt_size)) < 0)",
          "",
          "[Added Lines]",
          "949:     pkt_size = ctx->frame_size_upper_bound;",
          "951:     if ((ret = ff_alloc_packet2(avctx, pkt, pkt_size + FF_MIN_BUFFER_SIZE)) < 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1020:                 slice_hdr = buf;",
          "1021:                 buf += slice_hdr_size - 1;",
          "1022:                 init_put_bits(&pb, buf, (pkt_size - (buf - orig_buf)) * 8);",
          "1025:                 bytestream_put_byte(&slice_hdr, q);",
          "1026:                 slice_size = slice_hdr_size + sizes[ctx->num_planes - 1];",
          "",
          "[Removed Lines]",
          "1023:                 encode_slice(avctx, pic, &pb, sizes, x, y, q, mbs_per_slice);",
          "",
          "[Added Lines]",
          "1028:                 ret = encode_slice(avctx, pic, &pb, sizes, x, y, q, mbs_per_slice);",
          "1029:                 if (ret < 0)",
          "1030:                     return ret;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e912b0777b24133df27836b6c529faa89af588dc",
      "candidate_info": {
        "commit_hash": "e912b0777b24133df27836b6c529faa89af588dc",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/e912b0777b24133df27836b6c529faa89af588dc",
        "files": [
          "libavcodec/proresenc.c"
        ],
        "message": "proresenc: Report buffer overflow\n\nIf the allocated size, despite best efforts, is too small, exit\nwith the appropriate error.\n\nCC: libav-stable@libav.org\n\nSigned-off-by: Diego Biurrun <diego@biurrun.de>\nSigned-off-by: Luca Barbato <lu_zero@gentoo.org>\n(cherry picked from commit 58b68e4fdea22e22178e237bda950b09cc6f363a)\nSigned-off-by: Luca Barbato <lu_zero@gentoo.org>",
        "before_after_code_files": [
          "libavcodec/proresenc.c||libavcodec/proresenc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libavcodec/proresenc.c||libavcodec/proresenc.c": [
          "File: libavcodec/proresenc.c -> libavcodec/proresenc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "565:                                           ctx->blocks[0], quant);",
          "566:         }",
          "567:         total_size += sizes[i];",
          "568:     }",
          "569:     return total_size;",
          "570: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568:         if (put_bits_left(pb) < 0) {",
          "569:             av_log(avctx, AV_LOG_ERROR,",
          "570:                    \"Underestimated required buffer size.\\n\");",
          "571:             return AVERROR_BUG;",
          "572:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "935:     avctx->coded_frame->pict_type = AV_PICTURE_TYPE_I;",
          "936:     avctx->coded_frame->key_frame = 1;",
          "941:         av_log(avctx, AV_LOG_ERROR, \"Error getting output packet.\\n\");",
          "942:         return ret;",
          "943:     }",
          "",
          "[Removed Lines]",
          "938:     pkt_size = ctx->frame_size_upper_bound + FF_MIN_BUFFER_SIZE;",
          "940:     if ((ret = ff_alloc_packet(pkt, pkt_size)) < 0) {",
          "",
          "[Added Lines]",
          "943:     pkt_size = ctx->frame_size_upper_bound;",
          "945:     if ((ret = ff_alloc_packet(pkt, pkt_size + FF_MIN_BUFFER_SIZE)) < 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1016:                 slice_hdr = buf;",
          "1017:                 buf += slice_hdr_size - 1;",
          "1018:                 init_put_bits(&pb, buf, (pkt_size - (buf - orig_buf)) * 8);",
          "1021:                 bytestream_put_byte(&slice_hdr, q);",
          "1022:                 slice_size = slice_hdr_size + sizes[ctx->num_planes - 1];",
          "",
          "[Removed Lines]",
          "1019:                 encode_slice(avctx, pic, &pb, sizes, x, y, q, mbs_per_slice);",
          "",
          "[Added Lines]",
          "1024:                 ret = encode_slice(avctx, pic, &pb, sizes, x, y, q,",
          "1025:                                    mbs_per_slice);",
          "1026:                 if (ret < 0)",
          "1027:                     return ret;",
          "",
          "---------------"
        ]
      }
    }
  ]
}