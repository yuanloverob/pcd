{
  "cve_id": "CVE-2016-2524",
  "cve_desc": "epan/dissectors/packet-x509af.c in the X.509AF dissector in Wireshark 2.0.x before 2.0.2 mishandles the algorithm ID, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "5a8020a1b6bb73fcb8bb7eb7d53177bc8a9fc703",
  "patch_info": {
    "commit_hash": "5a8020a1b6bb73fcb8bb7eb7d53177bc8a9fc703",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/5a8020a1b6bb73fcb8bb7eb7d53177bc8a9fc703",
    "files": [
      "asn1/x509af/packet-x509af-template.c",
      "asn1/x509af/x509af.cnf",
      "epan/dissectors/packet-x509af.c"
    ],
    "message": "X509AF: make a local copy of algorithm_id in file scope for later use\n\nBug: 12002\nChange-Id: Iff48863c1954f76d6fc34150d315d15295dc1f5c\nReviewed-on: https://code.wireshark.org/review/13406\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
    "before_after_code_files": [
      "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c",
      "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf",
      "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c"
    ]
  },
  "patch_diff": {
    "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c": [
      "File: asn1/x509af/packet-x509af-template.c -> asn1/x509af/packet-x509af-template.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "55: static gint ett_pkix_crl = -1;",
      "56: #include \"packet-x509af-ett.c\"",
      "58: static void",
      "59: x509af_export_publickey(tvbuff_t *tvb, asn1_ctx_t *actx, int offset, int len);",
      "60: #include \"packet-x509af-fn.c\"",
      "",
      "[Removed Lines]",
      "57: static const char *algorithm_id;",
      "",
      "[Added Lines]",
      "57: static const char *algorithm_id = NULL;",
      "",
      "---------------"
    ],
    "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf": [
      "File: asn1/x509af/x509af.cnf -> asn1/x509af/x509af.cnf",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:   %(DEFAULT_BODY)s",
      "75:   if(actx->external.direct_reference) {",
      "76:     name = oid_resolved_from_string(wmem_packet_scope(), actx->external.direct_reference);",
      "78:     proto_item_append_text(tree, \" (%%s)\", name ? name : actx->external.direct_reference);",
      "79:   }",
      "81: #.FN_BODY AlgorithmIdentifier/parameters",
      "",
      "[Removed Lines]",
      "73:   algorithm_id = actx->external.direct_reference;",
      "",
      "[Added Lines]",
      "73:   if (algorithm_id) {",
      "74:     wmem_free(wmem_file_scope(), (void*)algorithm_id);",
      "75:   }",
      "78:     algorithm_id = (const char *)wmem_strdup(wmem_file_scope(), actx->external.direct_reference);",
      "83:   } else {",
      "84:     algorithm_id = NULL;",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c": [
      "File: epan/dissectors/packet-x509af.c -> epan/dissectors/packet-x509af.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "180: #line 57 \"../../asn1/x509af/packet-x509af-template.c\"",
      "182: static void",
      "183: x509af_export_publickey(tvbuff_t *tvb, asn1_ctx_t *actx, int offset, int len);",
      "",
      "[Removed Lines]",
      "181: static const char *algorithm_id;",
      "",
      "[Added Lines]",
      "181: static const char *algorithm_id = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "221:     offset = dissect_ber_object_identifier_str(implicit_tag, actx, tree, tvb, offset, hf_x509af_algorithm_id, &actx->external.direct_reference);",
      "226:   if(actx->external.direct_reference) {",
      "227:     name = oid_resolved_from_string(wmem_packet_scope(), actx->external.direct_reference);",
      "229:     proto_item_append_text(tree, \" (%s)\", name ? name : actx->external.direct_reference);",
      "230:   }",
      "",
      "[Removed Lines]",
      "224:   algorithm_id = actx->external.direct_reference;",
      "",
      "[Added Lines]",
      "224:   if (algorithm_id) {",
      "225:     wmem_free(wmem_file_scope(), (void*)algorithm_id);",
      "226:   }",
      "229:     algorithm_id = (const char *)wmem_strdup(wmem_file_scope(), actx->external.direct_reference);",
      "234:   } else {",
      "235:     algorithm_id = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "239: static int",
      "240: dissect_x509af_T_parameters(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "242:   offset=call_ber_oid_callback(actx->external.direct_reference, tvb, offset, actx->pinfo, tree, NULL);",
      "",
      "[Removed Lines]",
      "241: #line 82 \"../../asn1/x509af/x509af.cnf\"",
      "",
      "[Added Lines]",
      "247: #line 88 \"../../asn1/x509af/x509af.cnf\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "330: static int",
      "331: dissect_x509af_SubjectName(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "334:   const char* str;",
      "335:     offset = dissect_ber_choice(actx, tree, tvb, offset,",
      "",
      "[Removed Lines]",
      "332: #line 141 \"../../asn1/x509af/x509af.cnf\"",
      "",
      "[Added Lines]",
      "338: #line 147 \"../../asn1/x509af/x509af.cnf\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "350: static int",
      "351: dissect_x509af_T_subjectPublicKey(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "353:   tvbuff_t *bs_tvb = NULL;",
      "355:   dissect_ber_bitstring(FALSE, actx, NULL, tvb, offset,",
      "",
      "[Removed Lines]",
      "352: #line 91 \"../../asn1/x509af/x509af.cnf\"",
      "",
      "[Added Lines]",
      "358: #line 97 \"../../asn1/x509af/x509af.cnf\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "380: int",
      "381: dissect_x509af_SubjectPublicKeyInfo(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "383:   int orig_offset = offset;",
      "385:   offset = dissect_ber_sequence(implicit_tag, actx, tree, tvb, offset,",
      "386:                                    SubjectPublicKeyInfo_sequence, hf_index, ett_x509af_SubjectPublicKeyInfo);",
      "389:   x509af_export_publickey(tvb, actx, orig_offset, offset - orig_offset);",
      "391:   return offset;",
      "",
      "[Removed Lines]",
      "382: #line 85 \"../../asn1/x509af/x509af.cnf\"",
      "388: #line 87 \"../../asn1/x509af/x509af.cnf\"",
      "",
      "[Added Lines]",
      "388: #line 91 \"../../asn1/x509af/x509af.cnf\"",
      "394: #line 93 \"../../asn1/x509af/x509af.cnf\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "396: static int",
      "397: dissect_x509af_T_extnId(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "399:   const char *name;",
      "401:     offset = dissect_ber_object_identifier_str(implicit_tag, actx, tree, tvb, offset, hf_x509af_extension_id, &actx->external.direct_reference);",
      "",
      "[Removed Lines]",
      "398: #line 120 \"../../asn1/x509af/x509af.cnf\"",
      "",
      "[Added Lines]",
      "404: #line 126 \"../../asn1/x509af/x509af.cnf\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "426: static int",
      "427: dissect_x509af_T_extnValue(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "429:   gint8 ber_class;",
      "430:   gboolean pc, ind;",
      "431:   gint32 tag;",
      "",
      "[Removed Lines]",
      "428: #line 131 \"../../asn1/x509af/x509af.cnf\"",
      "",
      "[Added Lines]",
      "434: #line 137 \"../../asn1/x509af/x509af.cnf\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1f4977b27ea4e3a0d95902ce1f5dea1edb546b5e",
      "candidate_info": {
        "commit_hash": "1f4977b27ea4e3a0d95902ce1f5dea1edb546b5e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1f4977b27ea4e3a0d95902ce1f5dea1edb546b5e",
        "files": [
          "asn1/x509af/packet-x509af-template.c",
          "asn1/x509af/x509af.cnf",
          "epan/dissectors/packet-x509af.c"
        ],
        "message": "X509AF: make a local copy of algorithm_id in file scope for later use\n\nBug: 12002\nChange-Id: Iff48863c1954f76d6fc34150d315d15295dc1f5c\nReviewed-on: https://code.wireshark.org/review/13406\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit 5a8020a1b6bb73fcb8bb7eb7d53177bc8a9fc703)\nConflicts:\n\tepan/dissectors/packet-x509af.c\nReviewed-on: https://code.wireshark.org/review/13417",
        "before_after_code_files": [
          "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c",
          "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf",
          "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c",
            "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf",
            "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c"
          ],
          "candidate": [
            "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c",
            "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf",
            "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c": [
          "File: asn1/x509af/packet-x509af-template.c -> asn1/x509af/packet-x509af-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: static gint ett_pkix_crl = -1;",
          "55: #include \"packet-x509af-ett.c\"",
          "57: static void",
          "58: x509af_export_publickey(tvbuff_t *tvb, asn1_ctx_t *actx, int offset, int len);",
          "59: #include \"packet-x509af-fn.c\"",
          "",
          "[Removed Lines]",
          "56: static const char *algorithm_id;",
          "",
          "[Added Lines]",
          "56: static const char *algorithm_id = NULL;",
          "",
          "---------------"
        ],
        "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf": [
          "File: asn1/x509af/x509af.cnf -> asn1/x509af/x509af.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   %(DEFAULT_BODY)s",
          "75:   if(actx->external.direct_reference) {",
          "76:     name = oid_resolved_from_string(wmem_packet_scope(), actx->external.direct_reference);",
          "78:     proto_item_append_text(tree, \" (%%s)\", name ? name : actx->external.direct_reference);",
          "79:   }",
          "81: #.FN_BODY AlgorithmIdentifier/parameters",
          "",
          "[Removed Lines]",
          "73:   algorithm_id = actx->external.direct_reference;",
          "",
          "[Added Lines]",
          "73:   if (algorithm_id) {",
          "74:     wmem_free(wmem_file_scope(), (void*)algorithm_id);",
          "75:   }",
          "78:     algorithm_id = (const char *)wmem_strdup(wmem_file_scope(), actx->external.direct_reference);",
          "83:   } else {",
          "84:     algorithm_id = NULL;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c": [
          "File: epan/dissectors/packet-x509af.c -> epan/dissectors/packet-x509af.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: #line 56 \"../../asn1/x509af/packet-x509af-template.c\"",
          "181: static void",
          "182: x509af_export_publickey(tvbuff_t *tvb, asn1_ctx_t *actx, int offset, int len);",
          "",
          "[Removed Lines]",
          "180: static const char *algorithm_id;",
          "",
          "[Added Lines]",
          "180: static const char *algorithm_id = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:     offset = dissect_ber_object_identifier_str(implicit_tag, actx, tree, tvb, offset, hf_x509af_algorithm_id, &actx->external.direct_reference);",
          "225:   if(actx->external.direct_reference) {",
          "226:     name = oid_resolved_from_string(wmem_packet_scope(), actx->external.direct_reference);",
          "228:     proto_item_append_text(tree, \" (%s)\", name ? name : actx->external.direct_reference);",
          "229:   }",
          "",
          "[Removed Lines]",
          "223:   algorithm_id = actx->external.direct_reference;",
          "",
          "[Added Lines]",
          "223:   if (algorithm_id) {",
          "224:     wmem_free(wmem_file_scope(), (void*)algorithm_id);",
          "225:   }",
          "228:     algorithm_id = (const char *)wmem_strdup(wmem_file_scope(), actx->external.direct_reference);",
          "233:   } else {",
          "234:     algorithm_id = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238: static int",
          "239: dissect_x509af_T_parameters(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "241:   offset=call_ber_oid_callback(actx->external.direct_reference, tvb, offset, actx->pinfo, tree, NULL);",
          "",
          "[Removed Lines]",
          "240: #line 82 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "[Added Lines]",
          "246: #line 88 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329: static int",
          "330: dissect_x509af_SubjectName(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "333:   const char* str;",
          "334:     offset = dissect_ber_choice(actx, tree, tvb, offset,",
          "",
          "[Removed Lines]",
          "331: #line 115 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "[Added Lines]",
          "337: #line 121 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "365: int",
          "366: dissect_x509af_SubjectPublicKeyInfo(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "368:   int orig_offset = offset;",
          "370:   offset = dissect_ber_sequence(implicit_tag, actx, tree, tvb, offset,",
          "371:                                    SubjectPublicKeyInfo_sequence, hf_index, ett_x509af_SubjectPublicKeyInfo);",
          "374:   x509af_export_publickey(tvb, actx, orig_offset, offset - orig_offset);",
          "376:   return offset;",
          "",
          "[Removed Lines]",
          "367: #line 85 \"../../asn1/x509af/x509af.cnf\"",
          "373: #line 87 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "[Added Lines]",
          "373: #line 91 \"../../asn1/x509af/x509af.cnf\"",
          "379: #line 93 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "381: static int",
          "382: dissect_x509af_T_extnId(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "384:   const char *name;",
          "386:     offset = dissect_ber_object_identifier_str(implicit_tag, actx, tree, tvb, offset, hf_x509af_extension_id, &actx->external.direct_reference);",
          "",
          "[Removed Lines]",
          "383: #line 94 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "[Added Lines]",
          "389: #line 100 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "411: static int",
          "412: dissect_x509af_T_extnValue(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "414:   gint8 ber_class;",
          "415:   gboolean pc, ind;",
          "416:   gint32 tag;",
          "",
          "[Removed Lines]",
          "413: #line 105 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "[Added Lines]",
          "419: #line 111 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "317af2c68ce1db0599fb0082cf454a451ff74c20",
      "candidate_info": {
        "commit_hash": "317af2c68ce1db0599fb0082cf454a451ff74c20",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/317af2c68ce1db0599fb0082cf454a451ff74c20",
        "files": [
          "asn1/pkcs1/pkcs1.cnf",
          "asn1/x509af/packet-x509af-template.c",
          "asn1/x509af/x509af.cnf",
          "epan/dissectors/packet-pkcs1.c",
          "epan/dissectors/packet-x509af.c"
        ],
        "message": "x509af: dissect subjectPublicKey for RSA\n\nThe subjectPublicKey field of a Certificate (TBSCertificate) is defined\nas type BIT STRING. The actual contents depend on the Algorithm\nIdentifier which is preceding the subjectPublicKey field.\n\nThis patch adds support for dissection of the public key for RSA\npublic keys which show up below the subjectPublicKey tree:\n\n    subjectPublicKeyInfo\n        algorithm (rsaEncryption)\n            Algorithm Id: 1.2.840.113549.1.1.1 (rsaEncryption)\n        subjectPublicKey: 3082010a0282010100b7c769e2d0eacaeb929fc08238a9ff...\n            modulus : 0x00b7c769e2d0eacaeb929fc08238a9ffc59cab39c28a2e26...\n            publicExponent: 65537\n\nChange-Id: Ib92645433b0a0078a947ff0ac26c5e6a64877b93\nReviewed-on: https://code.wireshark.org/review/10967\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "asn1/pkcs1/pkcs1.cnf||asn1/pkcs1/pkcs1.cnf",
          "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c",
          "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf",
          "epan/dissectors/packet-pkcs1.c||epan/dissectors/packet-pkcs1.c",
          "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c",
            "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf",
            "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c"
          ],
          "candidate": [
            "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c",
            "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf",
            "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/pkcs1/pkcs1.cnf||asn1/pkcs1/pkcs1.cnf": [
          "File: asn1/pkcs1/pkcs1.cnf -> asn1/pkcs1/pkcs1.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: DSA-Sig-Value",
          "32: ECDSA-Sig-Value",
          "34: #.END",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #.TYPE_ATTR",
          "35: RSAPublicKey/modulus TYPE = FT_BYTES  DISPLAY = BASE_NONE",
          "",
          "---------------"
        ],
        "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c": [
          "File: asn1/x509af/packet-x509af-template.c -> asn1/x509af/packet-x509af-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"packet-x509if.h\"",
          "34: #include \"packet-x509sat.h\"",
          "35: #include \"packet-ldap.h\"",
          "36: #if defined(HAVE_LIBGNUTLS)",
          "37: #include <gnutls/gnutls.h>",
          "38: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include \"packet-pkcs1.h\"",
          "",
          "---------------"
        ],
        "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf": [
          "File: asn1/x509af/x509af.cnf -> asn1/x509af/x509af.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:   x509af_export_publickey(tvb, actx, orig_offset, offset - orig_offset);",
          "88: #.END",
          "90: #.FN_PARS Extension/extnId",
          "91:   FN_VARIANT = _str  HF_INDEX = hf_x509af_extension_id  VAL_PTR = &actx->external.direct_reference",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: #.FN_BODY SubjectPublicKeyInfo/subjectPublicKey",
          "91:   tvbuff_t *bs_tvb;",
          "92: # proto_tree *subtree;",
          "94:   dissect_ber_bitstring(FALSE, actx, NULL, tvb, offset,",
          "95:                         NULL, -1, -1, &bs_tvb);",
          "100:     offset += dissect_pkcs1_RSAPublicKey(FALSE, bs_tvb, 0, actx, tree, hf_index);",
          "102: # TODO: PKCS#1 only defines RSA; DH and DSA are from PKIX1Algorithms2008",
          "104: #   subtree = proto_item_add_subtree(actx->created_item, ett_subjectpublickey);",
          "105: #   offset += dissect_DSAPublicKey(FALSE, bs_tvb, 0, actx, subtree, hf_dsa_y);",
          "106: #",
          "108: #   subtree = proto_item_add_subtree(actx->created_item, ett_subjectpublickey);",
          "109: #   offset += dissect_DHPublicKey(FALSE, bs_tvb, 0, actx, subtree, hf_dh_y);",
          "110: #",
          "111:   } else {",
          "112:     offset = dissect_ber_bitstring(FALSE, actx, tree, tvb, offset,",
          "113:                                    NULL, hf_index, -1, NULL);",
          "114:   }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-pkcs1.c||epan/dissectors/packet-pkcs1.c": [
          "File: epan/dissectors/packet-pkcs1.c -> epan/dissectors/packet-pkcs1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:         NULL, HFILL }},",
          "381:     { &hf_pkcs1_modulus,",
          "382:       { \"modulus\", \"pkcs1.modulus\",",
          "384:         \"INTEGER\", HFILL }},",
          "385:     { &hf_pkcs1_publicExponent,",
          "386:       { \"publicExponent\", \"pkcs1.publicExponent\",",
          "",
          "[Removed Lines]",
          "383:         FT_INT32, BASE_DEC, NULL, 0,",
          "",
          "[Added Lines]",
          "383:         FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c": [
          "File: epan/dissectors/packet-x509af.c -> epan/dissectors/packet-x509af.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"packet-x509if.h\"",
          "42: #include \"packet-x509sat.h\"",
          "43: #include \"packet-ldap.h\"",
          "44: #if defined(HAVE_LIBGNUTLS)",
          "45: #include <gnutls/gnutls.h>",
          "46: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #include \"packet-pkcs1.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141: static gint ett_pkix_crl = -1;",
          "",
          "[Removed Lines]",
          "138: #line 52 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "[Added Lines]",
          "139: #line 53 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176: static gint ett_x509af_DSS_Params = -1;",
          "180: static const char *algorithm_id;",
          "181: static void",
          "182: x509af_export_publickey(tvbuff_t *tvb, asn1_ctx_t *actx, int offset, int len);",
          "",
          "[Removed Lines]",
          "179: #line 56 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "[Added Lines]",
          "180: #line 57 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329: static int",
          "330: dissect_x509af_SubjectName(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "333:   const char* str;",
          "334:     offset = dissect_ber_choice(actx, tree, tvb, offset,",
          "",
          "[Removed Lines]",
          "331: #line 115 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "[Added Lines]",
          "332: #line 141 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "349: static int",
          "355:   return offset;",
          "356: }",
          "",
          "[Removed Lines]",
          "350: dissect_x509af_BIT_STRING(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "351:   offset = dissect_ber_bitstring(implicit_tag, actx, tree, tvb, offset,",
          "352:                                     NULL, hf_index, -1,",
          "353:                                     NULL);",
          "",
          "[Added Lines]",
          "351: dissect_x509af_T_subjectPublicKey(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "352: #line 91 \"../../asn1/x509af/x509af.cnf\"",
          "353:   tvbuff_t *bs_tvb;",
          "355:   dissect_ber_bitstring(FALSE, actx, NULL, tvb, offset,",
          "356:                         NULL, -1, -1, &bs_tvb);",
          "361:     offset += dissect_pkcs1_RSAPublicKey(FALSE, bs_tvb, 0, actx, tree, hf_index);",
          "363:   } else {",
          "364:     offset = dissect_ber_bitstring(FALSE, actx, tree, tvb, offset,",
          "365:                                    NULL, hf_index, -1, NULL);",
          "366:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "359: static const ber_sequence_t SubjectPublicKeyInfo_sequence[] = {",
          "360:   { &hf_x509af_algorithm    , BER_CLASS_UNI, BER_UNI_TAG_SEQUENCE, BER_FLAGS_NOOWNTAG, dissect_x509af_AlgorithmIdentifier },",
          "362:   { NULL, 0, 0, 0, NULL }",
          "363: };",
          "",
          "[Removed Lines]",
          "361:   { &hf_x509af_subjectPublicKey, BER_CLASS_UNI, BER_UNI_TAG_BITSTRING, BER_FLAGS_NOOWNTAG, dissect_x509af_BIT_STRING },",
          "",
          "[Added Lines]",
          "376:   { &hf_x509af_subjectPublicKey, BER_CLASS_UNI, BER_UNI_TAG_BITSTRING, BER_FLAGS_NOOWNTAG, dissect_x509af_T_subjectPublicKey },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "381: static int",
          "382: dissect_x509af_T_extnId(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "384:   const char *name;",
          "386:     offset = dissect_ber_object_identifier_str(implicit_tag, actx, tree, tvb, offset, hf_x509af_extension_id, &actx->external.direct_reference);",
          "",
          "[Removed Lines]",
          "383: #line 94 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "[Added Lines]",
          "398: #line 120 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "411: static int",
          "412: dissect_x509af_T_extnValue(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "414:   gint8 ber_class;",
          "415:   gboolean pc, ind;",
          "416:   gint32 tag;",
          "",
          "[Removed Lines]",
          "413: #line 105 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "[Added Lines]",
          "428: #line 131 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "478: }",
          "481: static const ber_sequence_t Certificate_sequence[] = {",
          "482:   { &hf_x509af_signedCertificate, BER_CLASS_UNI, BER_UNI_TAG_SEQUENCE, BER_FLAGS_NOOWNTAG, dissect_x509af_T_signedCertificate },",
          "483:   { &hf_x509af_algorithmIdentifier, BER_CLASS_UNI, BER_UNI_TAG_SEQUENCE, BER_FLAGS_NOOWNTAG, dissect_x509af_AlgorithmIdentifier },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497: static int",
          "498: dissect_x509af_BIT_STRING(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "499:   offset = dissect_ber_bitstring(implicit_tag, actx, tree, tvb, offset,",
          "500:                                     NULL, hf_index, -1,",
          "501:                                     NULL);",
          "503:   return offset;",
          "504: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "910: #line 60 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "[Added Lines]",
          "936: #line 61 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1062:     { &hf_x509af_subjectPublicKey,",
          "1063:       { \"subjectPublicKey\", \"x509af.subjectPublicKey\",",
          "1064:         FT_BYTES, BASE_NONE, NULL, 0,",
          "1066:     { &hf_x509af_utcTime,",
          "1067:       { \"utcTime\", \"x509af.utcTime\",",
          "1068:         FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "1065:         \"BIT_STRING\", HFILL }},",
          "",
          "[Added Lines]",
          "1091:         NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1261:         \"INTEGER\", HFILL }},",
          "1265:   };",
          "",
          "[Removed Lines]",
          "1264: #line 113 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "[Added Lines]",
          "1290: #line 114 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1304:     &ett_x509af_DSS_Params,",
          "1308:   };",
          "",
          "[Removed Lines]",
          "1307: #line 119 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "[Added Lines]",
          "1333: #line 120 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1353:    I have not that ITU standard, I'll put it here for the time",
          "",
          "[Removed Lines]",
          "1350: #line 147 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "[Added Lines]",
          "1376: #line 148 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "877fd03cbffa96bfb6c4c030ce9f8bade57cfc75",
      "candidate_info": {
        "commit_hash": "877fd03cbffa96bfb6c4c030ce9f8bade57cfc75",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/877fd03cbffa96bfb6c4c030ce9f8bade57cfc75",
        "files": [
          "asn1/x509af/packet-x509af-template.c",
          "asn1/x509af/x509af.cnf",
          "epan/dissectors/packet-dtls.c",
          "epan/dissectors/packet-ssl-utils.c",
          "epan/dissectors/packet-ssl-utils.h",
          "epan/dissectors/packet-ssl.c",
          "epan/dissectors/packet-x509af.c"
        ],
        "message": "ssl-utils: load RSA keys based on their modulus+exponent\n\nLoad RSA private keys based on their public key instead of relying on\nthe user to specify a valid address and port mapping. This is more\nreliable and prepares for simplification of the SSL Keys dialog.\n\nAfter this change, the \"address\" part of the UAT dialog will be ignored\nwhen loading the private key. The port+protocol mapping is still\nimported, but should probably be removed too.\n\nChange-Id: I4d7a2bfcf63d17e66e336ef770759f20510fc176\nReviewed-on: https://code.wireshark.org/review/10766\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c",
          "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf",
          "epan/dissectors/packet-dtls.c||epan/dissectors/packet-dtls.c",
          "epan/dissectors/packet-ssl-utils.c||epan/dissectors/packet-ssl-utils.c",
          "epan/dissectors/packet-ssl-utils.h||epan/dissectors/packet-ssl-utils.h",
          "epan/dissectors/packet-ssl.c||epan/dissectors/packet-ssl.c",
          "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c",
            "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf",
            "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c"
          ],
          "candidate": [
            "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c",
            "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf",
            "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/x509af/packet-x509af-template.c||asn1/x509af/packet-x509af-template.c": [
          "File: asn1/x509af/packet-x509af-template.c -> asn1/x509af/packet-x509af-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"packet-x509if.h\"",
          "34: #include \"packet-x509sat.h\"",
          "35: #include \"packet-ldap.h\"",
          "37: #define PNAME  \"X.509 Authentication Framework\"",
          "38: #define PSNAME \"X509AF\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #if defined(HAVE_LIBGNUTLS)",
          "37: #include <gnutls/gnutls.h>",
          "38: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: static gint ett_pkix_crl = -1;",
          "52: #include \"packet-x509af-ett.c\"",
          "53: static const char *algorithm_id;",
          "54: #include \"packet-x509af-fn.c\"",
          "56: const char *x509af_get_last_algorithm_id(void) {",
          "57:   return algorithm_id;",
          "58: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: static void",
          "58: x509af_export_publickey(tvbuff_t *tvb, asn1_ctx_t *actx, int offset, int len);",
          "64: static void",
          "65: x509af_export_publickey(tvbuff_t *tvb _U_, asn1_ctx_t *actx _U_, int offset _U_, int len _U_)",
          "66: {",
          "67: #if defined(HAVE_LIBGNUTLS)",
          "68:   gnutls_datum_t *subjectPublicKeyInfo = (gnutls_datum_t *)actx->private_data;",
          "69:   if (subjectPublicKeyInfo) {",
          "70:     subjectPublicKeyInfo->data = (guchar *) tvb_get_ptr(tvb, offset, len);",
          "71:     subjectPublicKeyInfo->size = len;",
          "72:     actx->private_data = NULL;",
          "73:   }",
          "74: #endif",
          "75: }",
          "",
          "---------------"
        ],
        "asn1/x509af/x509af.cnf||asn1/x509af/x509af.cnf": [
          "File: asn1/x509af/x509af.cnf -> asn1/x509af/x509af.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: #.FN_BODY AlgorithmIdentifier/parameters",
          "82:   offset=call_ber_oid_callback(actx->external.direct_reference, tvb, offset, actx->pinfo, tree, NULL);",
          "84: #.FN_PARS Extension/extnId",
          "85:   FN_VARIANT = _str  HF_INDEX = hf_x509af_extension_id  VAL_PTR = &actx->external.direct_reference",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: #.FN_HDR SubjectPublicKeyInfo",
          "85:   int orig_offset = offset;",
          "86: #.FN_FTR SubjectPublicKeyInfo",
          "87:   x509af_export_publickey(tvb, actx, orig_offset, offset - orig_offset);",
          "88: #.END",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-dtls.c||epan/dissectors/packet-dtls.c": [
          "File: epan/dissectors/packet-dtls.c -> epan/dissectors/packet-dtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1330:           case SSL_HND_CLIENT_HELLO:",
          "1331:             if (ssl) {",
          "1334:                 ssl_set_server(session, &pinfo->dst, pinfo->ptype, pinfo->destport);",
          "1336:             }",
          "1337:             ssl_dissect_hnd_cli_hello(&dissect_dtls_hf, sub_tvb, pinfo,",
          "1338:                                       ssl_hand_tree, 0, length, session, ssl,",
          "",
          "[Removed Lines]",
          "1335:                 ssl_find_private_key(ssl, dtls_key_hash, dtls_associations, pinfo);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1357:             break;",
          "1359:           case SSL_HND_CERTIFICATE:",
          "1361:             break;",
          "1363:           case SSL_HND_SERVER_KEY_EXCHG:",
          "",
          "[Removed Lines]",
          "1360:             ssl_dissect_hnd_cert(&dissect_dtls_hf, sub_tvb, ssl_hand_tree, 0, pinfo, session, is_from_server);",
          "",
          "[Added Lines]",
          "1358:             ssl_dissect_hnd_cert(&dissect_dtls_hf, sub_tvb, ssl_hand_tree, 0,",
          "1359:                 pinfo, session, ssl, dtls_key_hash, is_from_server);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ssl-utils.c||epan/dissectors/packet-ssl-utils.c": [
          "File: epan/dissectors/packet-ssl-utils.c -> epan/dissectors/packet-ssl-utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #include \"packet-x509if.h\"",
          "49: #include \"packet-ssl-utils.h\"",
          "50: #include \"packet-ssl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: #if defined(HAVE_LIBGNUTLS) && defined(HAVE_LIBGCRYPT)",
          "52: #include <gnutls/abstract.h>",
          "53: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3538:     gcry_error_t   gret;",
          "3539:     gcry_sexp_t    rsa_priv_key = NULL;",
          "3540:     gint           i;",
          "3558:     if (gnutls_x509_privkey_export_rsa_raw(priv_key,",
          "",
          "[Removed Lines]",
          "3541:     int            ret;",
          "3542:     size_t         buf_len;",
          "3543:     unsigned char  buf_keyid[32];",
          "3545:     gcry_mpi_t rsa_params[RSA_PARS];",
          "3547:     buf_len = sizeof(buf_keyid);",
          "3548:     ret = gnutls_x509_privkey_get_key_id(priv_key, 0, buf_keyid, &buf_len);",
          "3549:     if (ret != 0) {",
          "3550:         ssl_debug_printf( \"gnutls_x509_privkey_get_key_id(ssl_pkey, 0, buf_keyid, &buf_len) - %s\\n\", gnutls_strerror(ret));",
          "3551:     } else {",
          "3552:         char* keyid = (char*)bytestring_to_str(NULL, buf_keyid, (int) buf_len, ':');",
          "3553:         ssl_debug_printf( \"Private key imported: KeyID %s\\n\", keyid);",
          "3554:         wmem_free(NULL, keyid);",
          "3555:     }",
          "",
          "[Added Lines]",
          "3544:     gcry_mpi_t     rsa_params[RSA_PARS];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3840:     gcry_sexp_release((gcry_sexp_t) key);",
          "3841: }",
          "3862:     }",
          "3870:         return;",
          "3874:     }",
          "3890:     }",
          "3901:     }",
          "3915: }",
          "3917: void",
          "",
          "[Removed Lines]",
          "3843: void",
          "3844: ssl_find_private_key(SslDecryptSession *ssl_session, GHashTable *key_hash, GTree* associations, packet_info *pinfo) {",
          "3845:     SslService dummy;",
          "3846:     char       ip_addr_any[] = {0,0,0,0};",
          "3847:     guint32    port    = 0;",
          "3848:     gchar     *addr_string;",
          "3849:     gcry_sexp_t private_key;",
          "3851:     if (!ssl_session) {",
          "3852:         return;",
          "3853:     }",
          "3856:     if (ssl_packet_from_server(&ssl_session->session, associations, pinfo)) {",
          "3857:         dummy.addr = pinfo->src;",
          "3858:         dummy.port = port = pinfo->srcport;",
          "3859:     } else {",
          "3860:         dummy.addr = pinfo->dst;",
          "3861:         dummy.port = port = pinfo->destport;",
          "3863:     addr_string = address_to_str(NULL, &dummy.addr);",
          "3864:     ssl_debug_printf(\"ssl_find_private_key server %s:%u\\n\",",
          "3865:                      addr_string, dummy.port);",
          "3866:     wmem_free(NULL, addr_string);",
          "3868:     if (g_hash_table_size(key_hash) == 0) {",
          "3869:         ssl_debug_printf(\"ssl_find_private_key: no keys found\\n\");",
          "3871:     } else {",
          "3872:         ssl_debug_printf(\"ssl_find_private_key: testing %i keys\\n\",",
          "3873:             g_hash_table_size(key_hash));",
          "3882:     ssl_session->private_key = 0;",
          "3883:     private_key = (gcry_sexp_t) g_hash_table_lookup(key_hash, &dummy);",
          "3885:     if (!private_key) {",
          "3886:         ssl_debug_printf(\"ssl_find_private_key can't find private key for this server! Try it again with universal port 0\\n\");",
          "3888:         dummy.port = 0;",
          "3889:         private_key = (gcry_sexp_t) g_hash_table_lookup(key_hash, &dummy);",
          "3892:     if (!private_key) {",
          "3893:         ssl_debug_printf(\"ssl_find_private_key can't find private key for this server (universal port)! Try it again with universal address 0.0.0.0\\n\");",
          "3895:         dummy.addr.type = AT_IPv4;",
          "3896:         dummy.addr.len = 4;",
          "3897:         dummy.addr.data = ip_addr_any;",
          "3899:         dummy.port = port;",
          "3900:         private_key = (gcry_sexp_t) g_hash_table_lookup(key_hash, &dummy);",
          "3903:     if (!private_key) {",
          "3904:         ssl_debug_printf(\"ssl_find_private_key can't find private key for this server! Try it again with universal address 0.0.0.0 and universal port 0\\n\");",
          "3906:         dummy.port = 0;",
          "3907:         private_key = (gcry_sexp_t) g_hash_table_lookup(key_hash, &dummy);",
          "3908:     }",
          "3910:     if (!private_key) {",
          "3911:         ssl_debug_printf(\"ssl_find_private_key can't find any private key!\\n\");",
          "3912:     } else {",
          "3913:         ssl_session->private_key = private_key;",
          "3914:     }",
          "",
          "[Added Lines]",
          "3832: static void",
          "3833: ssl_find_private_key_by_pubkey(SslDecryptSession *ssl, GHashTable *key_hash,",
          "3834:                                gnutls_datum_t *subjectPublicKeyInfo)",
          "3835: {",
          "3836:     gnutls_pubkey_t pubkey = NULL;",
          "3837:     guchar key_id[20];",
          "3838:     size_t key_id_len = sizeof(key_id);",
          "3839:     int r;",
          "3841:     if (!subjectPublicKeyInfo->size) {",
          "3842:         ssl_debug_printf(\"%s: could not find SubjectPublicKeyInfo\\n\", G_STRFUNC);",
          "3843:         return;",
          "3846:     r = gnutls_pubkey_init(&pubkey);",
          "3847:     if (r < 0) {",
          "3848:         ssl_debug_printf(\"%s: failed to init pubkey: %s\\n\",",
          "3849:                 G_STRFUNC, gnutls_strerror(r));",
          "3853:     r = gnutls_pubkey_import(pubkey, subjectPublicKeyInfo, GNUTLS_X509_FMT_DER);",
          "3854:     if (r < 0) {",
          "3855:         ssl_debug_printf(\"%s: failed to import pubkey from handshake: %s\\n\",",
          "3856:                 G_STRFUNC, gnutls_strerror(r));",
          "3857:         goto end;",
          "3861:     r = gnutls_pubkey_get_key_id(pubkey, 0, key_id, &key_id_len);",
          "3862:     if (r < 0) {",
          "3863:         ssl_debug_printf(\"%s: failed to extract key id from pubkey: %s\\n\",",
          "3864:                 G_STRFUNC, gnutls_strerror(r));",
          "3865:         goto end;",
          "3868:     ssl_print_data(\"lookup(KeyID)\", key_id, key_id_len);",
          "3869:     ssl->private_key = (gcry_sexp_t)g_hash_table_lookup(key_hash, key_id);",
          "3870:     ssl_debug_printf(\"%s: lookup result: %p\\n\", G_STRFUNC, (void *) ssl->private_key);",
          "3872: end:",
          "3873:     gnutls_pubkey_deinit(pubkey);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3932: {",
          "3933: }",
          "3940: int",
          "3941: ssl_find_cipher(int num,SslCipherSuite* cs)",
          "3942: {",
          "",
          "[Removed Lines]",
          "3935: void",
          "3936: ssl_find_private_key(SslDecryptSession *ssl_session _U_, GHashTable *key_hash _U_, GTree* associations _U_, packet_info *pinfo _U_)",
          "3937: {",
          "3938: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4116:     return hash;",
          "4117: }",
          "4120: ssl_private_key_equal (gconstpointer v, gconstpointer v2)",
          "4121: {",
          "4132: }",
          "4134: guint",
          "4136: {",
          "4150:     return hash;",
          "4151: }",
          "",
          "[Removed Lines]",
          "4119: gint",
          "4122:     const SslService *val1;",
          "4123:     const SslService *val2;",
          "4124:     val1 = (const SslService *)v;",
          "4125:     val2 = (const SslService *)v2;",
          "4127:     if ((val1->port == val2->port) &&",
          "4128:         ! CMP_ADDRESS(&val1->addr, &val2->addr)) {",
          "4129:         return 1;",
          "4130:     }",
          "4131:     return 0;",
          "4135: ssl_private_key_hash  (gconstpointer v)",
          "4137:     const SslService *key;",
          "4138:     guint        l, hash, len ;",
          "4139:     const guint8 *cur;",
          "4141:     key  = (const SslService *)v;",
          "4142:     hash = key->port;",
          "4143:     len  = key->addr.len;",
          "4144:     hash |= len << 16;",
          "4145:     cur  = (const guint8 *) key->addr.data;",
          "4147:     for (l=4; (l<len); l+=4, cur+=4)",
          "4148:         hash = hash ^ pntoh32(cur);",
          "",
          "[Added Lines]",
          "4073: gboolean",
          "4077:     return !memcmp(v, v2, 20);",
          "4081: ssl_private_key_hash (gconstpointer v)",
          "4083:     guint        l, hash = 0;",
          "4084:     const guint8 *cur = (const guint8 *)v;",
          "4088:     for (l = 0; l < 20; l += 4, cur += 4)",
          "4089:         hash ^= pntoh32(cur);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4384: void",
          "4385: ssl_parse_key_list(const ssldecrypt_assoc_t *uats, GHashTable *key_hash, GTree* associations, dissector_handle_t handle, gboolean tcp)",
          "4386: {",
          "4388:     gnutls_x509_privkey_t priv_key;",
          "4389:     gcry_sexp_t        private_key;",
          "4390:     FILE*              fp     = NULL;",
          "4397:     fp = ws_fopen(uats->keyfile, \"rb\");",
          "",
          "[Removed Lines]",
          "4387:     SslService*        service;",
          "4391:     guint32            addr_data[4];",
          "4392:     int                addr_len, at;",
          "4393:     address_type addr_type[2] = { AT_IPv4, AT_IPv6 };",
          "4394:     gchar*             address_string;",
          "",
          "[Added Lines]",
          "4331:     int                ret;",
          "4332:     size_t             key_id_len = 20;",
          "4333:     guchar            *key_id = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4400:         return;",
          "4401:     }",
          "4452:         }",
          "4481:     }",
          "4484: }",
          "4485: #else",
          "4486: void",
          "",
          "[Removed Lines]",
          "4403:     for (at = 0; at < 2; at++) {",
          "4404:         memset(addr_data, 0, sizeof(addr_data));",
          "4405:         addr_len = 0;",
          "4411:         if(addr_type[at] == AT_IPv4) {",
          "4412:             if (strcmp(uats->ipaddr, \"any\") == 0 || strcmp(uats->ipaddr, \"anyipv4\") == 0 ||",
          "4413:                     get_host_ipaddr(uats->ipaddr, &addr_data[0])) {",
          "4414:                 addr_len = 4;",
          "4415:             }",
          "4417:             if(strcmp(uats->ipaddr, \"any\") == 0 || strcmp(uats->ipaddr, \"anyipv6\") == 0 ||",
          "4418:                     get_host_ipaddr6(uats->ipaddr, (struct e_in6_addr *) addr_data)) {",
          "4419:                 addr_len = 16;",
          "4420:             }",
          "4421:         }",
          "4423:         if (! addr_len) {",
          "4424:             continue;",
          "4425:         }",
          "4428:         rewind(fp);",
          "4430:         if ((gint)strlen(uats->password) == 0) {",
          "4431:             priv_key = ssl_load_key(fp);",
          "4432:         } else {",
          "4433:             char *err = NULL;",
          "4434:             priv_key = ssl_load_pkcs12(fp, uats->password, &err);",
          "4435:             if (err) {",
          "4436:                 report_failure(\"%s\\n\", err);",
          "4437:                 g_free(err);",
          "4438:             }",
          "4439:         }",
          "4441:         if (!priv_key) {",
          "4442:             report_failure(\"Can't load private key from %s\\n\", uats->keyfile);",
          "4443:             break;",
          "4444:         }",
          "4446:         private_key = ssl_privkey_to_sexp(priv_key);",
          "4447:         gnutls_x509_privkey_deinit(priv_key);",
          "4448:         if (!private_key) {",
          "4449:             report_failure(\"Can't extract private key parameters for %s\",",
          "4450:                     uats->keyfile);",
          "4451:             break;",
          "4454:         service = (SslService *)g_malloc(sizeof(SslService) + addr_len);",
          "4455:         service->addr.type = addr_type[at];",
          "4456:         service->addr.len = addr_len;",
          "4457:         service->addr.data = ((guchar*)service) + sizeof(SslService);",
          "4458:         memcpy((void*)service->addr.data, addr_data, addr_len);",
          "4460:         if(strcmp(uats->port,\"start_tls\")==0) {",
          "4461:             service->port = 0;",
          "4462:         } else {",
          "4463:             service->port = atoi(uats->port);",
          "4464:         }",
          "4470:         address_string = address_to_str(NULL, &service->addr);",
          "4471:         ssl_debug_printf(\"ssl_init %s addr '%s' (%s) port '%d' filename '%s' password(only for p12 file) '%s'\\n\",",
          "4472:             (addr_type[at] == AT_IPv4) ? \"IPv4\" : \"IPv6\", uats->ipaddr, address_string,",
          "4473:             service->port, uats->keyfile, uats->password);",
          "4474:         wmem_free(NULL, address_string);",
          "4476:         ssl_debug_printf(\"ssl_init private key file %s successfully loaded.\\n\", uats->keyfile);",
          "4478:         g_hash_table_replace(key_hash, service, private_key);",
          "4480:         ssl_association_add(associations, handle, service->port, uats->protocol, tcp, TRUE);",
          "4483:     fclose(fp);",
          "",
          "[Added Lines]",
          "4342:     if ((gint)strlen(uats->password) == 0) {",
          "4343:         priv_key = ssl_load_key(fp);",
          "4344:     } else {",
          "4345:         char *err = NULL;",
          "4346:         priv_key = ssl_load_pkcs12(fp, uats->password, &err);",
          "4347:         if (err) {",
          "4348:             report_failure(\"%s\\n\", err);",
          "4349:             g_free(err);",
          "4351:     }",
          "4352:     fclose(fp);",
          "4354:     if (!priv_key) {",
          "4355:         report_failure(\"Can't load private key from %s\\n\", uats->keyfile);",
          "4356:         return;",
          "4357:     }",
          "4359:     key_id = (guchar *) g_malloc0(key_id_len);",
          "4360:     ret = gnutls_x509_privkey_get_key_id(priv_key, 0, key_id, &key_id_len);",
          "4361:     if (ret < 0) {",
          "4362:         report_failure(\"Can't calculate public key ID for %s: %s\",",
          "4363:                 uats->keyfile, gnutls_strerror(ret));",
          "4364:         goto end;",
          "4365:     }",
          "4366:     ssl_print_data(\"KeyID\", key_id, key_id_len);",
          "4368:     private_key = ssl_privkey_to_sexp(priv_key);",
          "4369:     if (!private_key) {",
          "4370:         report_failure(\"Can't extract private key parameters for %s\", uats->keyfile);",
          "4371:         goto end;",
          "4372:     }",
          "4374:     g_hash_table_replace(key_hash, key_id, private_key);",
          "4376:     ssl_debug_printf(\"ssl_init private key file %s successfully loaded.\\n\", uats->keyfile);",
          "4378:     {",
          "4381:         ssl_debug_printf(\"ssl_init port '%d' filename '%s' password(only for p12 file) '%s'\\n\",",
          "4382:             port, uats->keyfile, uats->password);",
          "4383:         ssl_association_add(associations, handle, port, uats->protocol, tcp, TRUE);",
          "4386: end:",
          "4387:     gnutls_x509_privkey_deinit(priv_key);",
          "4388:     g_free(key_id);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5657: void",
          "5658: ssl_dissect_hnd_cert(ssl_common_dissect_t *hf, tvbuff_t *tvb, proto_tree *tree,",
          "5659:                      guint32 offset, packet_info *pinfo,",
          "5661: {",
          "",
          "[Removed Lines]",
          "5660:                      const SslSession *session, gint is_from_server)",
          "",
          "[Added Lines]",
          "5565:                      const SslSession *session, SslDecryptSession *ssl _U_,",
          "5566:                      GHashTable *key_hash _U_, gint is_from_server)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5677:     enum { CERT_X509, CERT_RPK } cert_type;",
          "5678:     asn1_ctx_t  asn1_ctx;",
          "5683:     asn1_ctx_init(&asn1_ctx, ASN1_ENC_BER, TRUE, pinfo);",
          "",
          "[Removed Lines]",
          "5680:     if (!tree)",
          "5681:         return;",
          "",
          "[Added Lines]",
          "5585: #if defined(HAVE_LIBGNUTLS) && defined(HAVE_LIBGCRYPT)",
          "5586:     gnutls_datum_t subjectPublicKeyInfo = { NULL, 0 };",
          "5587: #endif",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5689:         cert_type = CERT_X509;",
          "5690:     }",
          "5692:     switch (cert_type) {",
          "5693:     case CERT_RPK:",
          "5694:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5598: #if defined(HAVE_LIBGNUTLS) && defined(HAVE_LIBGCRYPT)",
          "5600:     if (ssl)",
          "5601:         asn1_ctx.private_data = &subjectPublicKeyInfo;",
          "5602: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5734:                     offset += 3;",
          "5736:                     dissect_x509af_Certificate(FALSE, tvb, offset, &asn1_ctx, subtree, hf->hf.hs_certificate);",
          "5738:                     offset += cert_length;",
          "5739:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5649: #if defined(HAVE_LIBGNUTLS) && defined(HAVE_LIBGCRYPT)",
          "5651:                     asn1_ctx.private_data = NULL;",
          "5652: #endif",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5741:             break;",
          "5742:         }",
          "5743:     }",
          "5744: }",
          "5746: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5661: #if defined(HAVE_LIBGNUTLS) && defined(HAVE_LIBGCRYPT)",
          "5662:     if (ssl)",
          "5663:         ssl_find_private_key_by_pubkey(ssl, key_hash, &subjectPublicKeyInfo);",
          "5664: #endif",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ssl-utils.h||epan/dissectors/packet-ssl-utils.h": [
          "File: epan/dissectors/packet-ssl-utils.h -> epan/dissectors/packet-ssl-utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "418:     gboolean from_key_list;",
          "419: } SslAssociation;",
          "427: typedef struct _ssldecrypt_assoc_t {",
          "428:     char* ipaddr;",
          "",
          "[Removed Lines]",
          "421: typedef struct _SslService {",
          "422:     address addr;",
          "423:     guint port;",
          "424: } SslService;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "495: extern gint",
          "496: ssl_cipher_setiv(SSL_CIPHER_CTX *cipher, guchar* iv, gint iv_len);",
          "503:  @param num the id of the cipher suite to be searched",
          "504:  @param cs pointer to the cipher suite struct to be filled",
          "",
          "[Removed Lines]",
          "499: extern void",
          "500: ssl_find_private_key(SslDecryptSession *ssl_session, GHashTable *key_hash, GTree* associations, packet_info *pinfo);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "545: extern guint",
          "546: ssl_hash  (gconstpointer v);",
          "549: ssl_private_key_equal (gconstpointer v, gconstpointer v2);",
          "551: extern guint",
          "",
          "[Removed Lines]",
          "548: extern gint",
          "",
          "[Added Lines]",
          "539: extern gboolean",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "798: extern void",
          "799: ssl_dissect_hnd_cert(ssl_common_dissect_t *hf, tvbuff_t *tvb, proto_tree *tree,",
          "800:                      guint32 offset, packet_info *pinfo,",
          "803: extern void",
          "804: ssl_dissect_hnd_cert_req(ssl_common_dissect_t *hf, tvbuff_t *tvb,",
          "",
          "[Removed Lines]",
          "801:                      const SslSession *session, gint is_from_server);",
          "",
          "[Added Lines]",
          "792:                      const SslSession *session, SslDecryptSession *ssl,",
          "793:                      GHashTable *key_hash, gint is_from_server);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ssl.c||epan/dissectors/packet-ssl.c": [
          "File: epan/dissectors/packet-ssl.c -> epan/dissectors/packet-ssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2013:             case SSL_HND_CLIENT_HELLO:",
          "2014:                 if (ssl) {",
          "2017:                     ssl_set_server(session, &pinfo->dst, pinfo->ptype, pinfo->destport);",
          "2019:                 }",
          "2020:                 ssl_dissect_hnd_cli_hello(&dissect_ssl3_hf, tvb, pinfo,",
          "2021:                                           ssl_hand_tree, offset, length, session, ssl,",
          "",
          "[Removed Lines]",
          "2018:                     ssl_find_private_key(ssl, ssl_key_hash, ssl_associations, pinfo);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2040:                 break;",
          "2042:             case SSL_HND_CERTIFICATE:",
          "2044:                 break;",
          "2046:             case SSL_HND_SERVER_KEY_EXCHG:",
          "",
          "[Removed Lines]",
          "2043:                 ssl_dissect_hnd_cert(&dissect_ssl3_hf, tvb, ssl_hand_tree, offset, pinfo, session, is_from_server);",
          "",
          "[Added Lines]",
          "2041:                 ssl_dissect_hnd_cert(&dissect_ssl3_hf, tvb, ssl_hand_tree,",
          "2042:                         offset, pinfo, session, ssl, ssl_key_hash, is_from_server);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2635:     if (ssl) {",
          "2636:       ssl_set_server(&ssl->session, &pinfo->dst, pinfo->ptype, pinfo->destport);",
          "2638:     }",
          "2640:     if (ssl)",
          "",
          "[Removed Lines]",
          "2637:       ssl_find_private_key(ssl, ssl_key_hash, ssl_associations, pinfo);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-x509af.c||epan/dissectors/packet-x509af.c": [
          "File: epan/dissectors/packet-x509af.c -> epan/dissectors/packet-x509af.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"packet-x509if.h\"",
          "42: #include \"packet-x509sat.h\"",
          "43: #include \"packet-ldap.h\"",
          "45: #define PNAME  \"X.509 Authentication Framework\"",
          "46: #define PSNAME \"X509AF\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #if defined(HAVE_LIBGNUTLS)",
          "45: #include <gnutls/gnutls.h>",
          "46: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138: static gint ett_pkix_crl = -1;",
          "",
          "[Removed Lines]",
          "135: #line 49 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "[Added Lines]",
          "138: #line 52 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173: static gint ett_x509af_DSS_Params = -1;",
          "177: static const char *algorithm_id;",
          "180: #line 1 \"../../asn1/x509af/packet-x509af-fn.c\"",
          "",
          "[Removed Lines]",
          "176: #line 53 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "[Added Lines]",
          "179: #line 56 \"../../asn1/x509af/packet-x509af-template.c\"",
          "181: static void",
          "182: x509af_export_publickey(tvbuff_t *tvb, asn1_ctx_t *actx, int offset, int len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324: static int",
          "325: dissect_x509af_SubjectName(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "328:   const char* str;",
          "329:     offset = dissect_ber_choice(actx, tree, tvb, offset,",
          "",
          "[Removed Lines]",
          "326: #line 109 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "[Added Lines]",
          "331: #line 115 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "360: int",
          "361: dissect_x509af_SubjectPublicKeyInfo(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "362:   offset = dissect_ber_sequence(implicit_tag, actx, tree, tvb, offset,",
          "363:                                    SubjectPublicKeyInfo_sequence, hf_index, ett_x509af_SubjectPublicKeyInfo);",
          "365:   return offset;",
          "366: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367: #line 85 \"../../asn1/x509af/x509af.cnf\"",
          "368:   int orig_offset = offset;",
          "373: #line 87 \"../../asn1/x509af/x509af.cnf\"",
          "374:   x509af_export_publickey(tvb, actx, orig_offset, offset - orig_offset);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "370: static int",
          "371: dissect_x509af_T_extnId(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "373:   const char *name;",
          "375:     offset = dissect_ber_object_identifier_str(implicit_tag, actx, tree, tvb, offset, hf_x509af_extension_id, &actx->external.direct_reference);",
          "",
          "[Removed Lines]",
          "372: #line 88 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "[Added Lines]",
          "383: #line 94 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "400: static int",
          "401: dissect_x509af_T_extnValue(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "403:   gint8 ber_class;",
          "404:   gboolean pc, ind;",
          "405:   gint32 tag;",
          "",
          "[Removed Lines]",
          "402: #line 99 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "[Added Lines]",
          "413: #line 105 \"../../asn1/x509af/x509af.cnf\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "901: const char *x509af_get_last_algorithm_id(void) {",
          "902:   return algorithm_id;",
          "",
          "[Removed Lines]",
          "899: #line 55 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "[Added Lines]",
          "910: #line 60 \"../../asn1/x509af/packet-x509af-template.c\"",
          "915: static void",
          "916: x509af_export_publickey(tvbuff_t *tvb _U_, asn1_ctx_t *actx _U_, int offset _U_, int len _U_)",
          "917: {",
          "918: #if defined(HAVE_LIBGNUTLS)",
          "919:   gnutls_datum_t *subjectPublicKeyInfo = (gnutls_datum_t *)actx->private_data;",
          "920:   if (subjectPublicKeyInfo) {",
          "921:     subjectPublicKeyInfo->data = (guchar *) tvb_get_ptr(tvb, offset, len);",
          "922:     subjectPublicKeyInfo->size = len;",
          "923:     actx->private_data = NULL;",
          "924:   }",
          "925: #endif",
          "926: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1234:         \"INTEGER\", HFILL }},",
          "1238:   };",
          "",
          "[Removed Lines]",
          "1237: #line 92 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "[Added Lines]",
          "1264: #line 113 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1277:     &ett_x509af_DSS_Params,",
          "1281:   };",
          "",
          "[Removed Lines]",
          "1280: #line 98 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "[Added Lines]",
          "1307: #line 119 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1326:    I have not that ITU standard, I'll put it here for the time",
          "",
          "[Removed Lines]",
          "1323: #line 126 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "[Added Lines]",
          "1350: #line 147 \"../../asn1/x509af/packet-x509af-template.c\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}