{
  "cve_id": "CVE-2016-3733",
  "cve_desc": "The \"restore teacher\" feature in Moodle 3.0 through 3.0.3, 2.9 through 2.9.5, 2.8 through 2.8.11, 2.7 through 2.7.13, and earlier allows remote authenticated users to overwrite the course idnumber.",
  "repo": "moodle/moodle",
  "patch_hash": "f824aceb50274e21c99056ed608dba8556b90e31",
  "patch_info": {
    "commit_hash": "f824aceb50274e21c99056ed608dba8556b90e31",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/f824aceb50274e21c99056ed608dba8556b90e31",
    "files": [
      "course/tests/restore_test.php"
    ],
    "message": "MDL-51369 course: Adding tests to cover restoring course info",
    "before_after_code_files": [
      "course/tests/restore_test.php||course/tests/restore_test.php"
    ]
  },
  "patch_diff": {
    "course/tests/restore_test.php||course/tests/restore_test.php": [
      "File: course/tests/restore_test.php -> course/tests/restore_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "25: defined('MOODLE_INTERNAL') || die();",
      "26: global $CFG;",
      "28: require_once($CFG->dirroot . '/backup/util/includes/backup_includes.php');",
      "29: require_once($CFG->dirroot . '/backup/util/includes/restore_includes.php');",
      "38: class core_restore_backup_testcase extends advanced_testcase {",
      "47:     protected function backup_course($courseid, $userid = 2) {",
      "48:         globaL $CFG;",
      "49:         $packer = get_file_packer('application/vnd.moodle.backup');",
      "51:         $bc = new backup_controller(backup::TYPE_1COURSE, $courseid, backup::FORMAT_MOODLE, backup::INTERACTIVE_NO,",
      "52:             backup::MODE_GENERAL, $userid);",
      "53:         $bc->execute_plan();",
      "55:         $results = $bc->get_results();",
      "56:         $results['backup_destination']->extract_to_pathname($packer, \"$CFG->tempdir/backup/core_course_testcase\");",
      "58:         $bc->destroy();",
      "59:         unset($bc);",
      "60:         return 'core_course_testcase';",
      "61:     }",
      "70:     protected function create_role_with_caps($caps, $perm) {",
      "71:         $caps = (array) $caps;",
      "72:         $dg = $this->getDataGenerator();",
      "73:         $roleid = $dg->create_role();",
      "74:         foreach ($caps as $cap) {",
      "75:             assign_capability($cap, $perm, $roleid, context_system::instance()->id, true);",
      "76:         }",
      "77:         accesslib_clear_all_caches_for_unit_testing();",
      "78:         return $roleid;",
      "79:     }",
      "89:     protected function restore_course($backupid, $courseid, $userid) {",
      "90:         global $DB;",
      "92:         $target = backup::TARGET_CURRENT_ADDING;",
      "93:         if (!$courseid) {",
      "94:             $target = backup::TARGET_NEW_COURSE;",
      "95:             $categoryid = $DB->get_field_sql(\"SELECT MIN(id) FROM {course_categories}\");",
      "96:             $courseid = restore_dbops::create_new_course('Tmp', 'tmp', $categoryid);",
      "97:         }",
      "99:         $rc = new restore_controller($backupid, $courseid, backup::INTERACTIVE_NO, backup::MODE_GENERAL, $userid, $target);",
      "100:         $target == backup::TARGET_NEW_COURSE ?: $rc->get_plan()->get_setting('overwrite_conf')->set_value(true);",
      "101:         $rc->execute_precheck();",
      "102:         $rc->execute_plan();",
      "104:         $course = $DB->get_record('course', array('id' => $rc->get_courseid()));",
      "106:         $rc->destroy();",
      "107:         unset($rc);",
      "108:         return $course;",
      "109:     }",
      "119:     protected function restore_to_existing_course($backupid, $courseid, $userid = 2) {",
      "120:         return $this->restore_course($backupid, $courseid, $userid);",
      "121:     }",
      "130:     protected function restore_to_new_course($backupid, $userid = 2) {",
      "131:         return $this->restore_course($backupid, 0, $userid);",
      "132:     }",
      "134:     public function test_restore_existing_idnumber_in_new_course() {",
      "135:         $this->resetAfterTest();",
      "137:         $dg = $this->getDataGenerator();",
      "138:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
      "139:         $backupid = $this->backup_course($c1->id);",
      "140:         $c2 = $this->restore_to_new_course($backupid);",
      "143:         $this->assertEquals('', $c2->idnumber);",
      "144:     }",
      "146:     public function test_restore_non_existing_idnumber_in_new_course() {",
      "147:         global $DB;",
      "148:         $this->resetAfterTest();",
      "150:         $dg = $this->getDataGenerator();",
      "151:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
      "152:         $backupid = $this->backup_course($c1->id);",
      "154:         $c1->idnumber = 'BCD';",
      "155:         $DB->update_record('course', $c1);",
      "158:         $c2 = $this->restore_to_new_course($backupid);",
      "159:         $this->assertEquals('ABC', $c2->idnumber);",
      "160:     }",
      "162:     public function test_restore_existing_idnumber_in_existing_course() {",
      "163:         global $DB;",
      "164:         $this->resetAfterTest();",
      "166:         $dg = $this->getDataGenerator();",
      "167:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
      "168:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
      "169:         $backupid = $this->backup_course($c1->id);",
      "172:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
      "173:         $this->assertEquals('DEF', $c2->idnumber);",
      "175:         $c1 = $DB->get_record('course', array('id' => $c1->id));",
      "176:         $this->assertEquals('ABC', $c1->idnumber);",
      "177:     }",
      "179:     public function test_restore_non_existing_idnumber_in_existing_course() {",
      "180:         global $DB;",
      "181:         $this->resetAfterTest();",
      "183:         $dg = $this->getDataGenerator();",
      "184:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
      "185:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
      "186:         $backupid = $this->backup_course($c1->id);",
      "188:         $c1->idnumber = 'XXX';",
      "189:         $DB->update_record('course', $c1);",
      "192:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
      "193:         $this->assertEquals('ABC', $c2->idnumber);",
      "194:     }",
      "196:     public function test_restore_idnumber_in_existing_course_without_permissions() {",
      "197:         global $DB;",
      "198:         $this->resetAfterTest();",
      "199:         $dg = $this->getDataGenerator();",
      "200:         $u1 = $dg->create_user();",
      "202:         $managers = get_archetype_roles('manager');",
      "203:         $manager = array_shift($managers);",
      "204:         $roleid = $this->create_role_with_caps('moodle/course:changeidnumber', CAP_PROHIBIT);",
      "205:         $dg->role_assign($manager->id, $u1->id);",
      "206:         $dg->role_assign($roleid, $u1->id);",
      "208:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
      "209:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
      "210:         $backupid = $this->backup_course($c1->id);",
      "212:         $c1->idnumber = 'XXX';",
      "213:         $DB->update_record('course', $c1);",
      "216:         $c2 = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
      "217:         $this->assertEquals('DEF', $c2->idnumber);",
      "218:     }",
      "220:     public function test_restore_course_info_in_new_course() {",
      "221:         global $DB;",
      "222:         $this->resetAfterTest();",
      "223:         $dg = $this->getDataGenerator();",
      "225:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
      "226:         $backupid = $this->backup_course($c1->id);",
      "229:         $c2 = $this->restore_to_new_course($backupid);",
      "230:         $this->assertEquals('SN_1', $c2->shortname);",
      "231:         $this->assertEquals('FN copy 1', $c2->fullname);",
      "232:         $this->assertEquals('DESC', $c2->summary);",
      "233:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
      "234:     }",
      "236:     public function test_restore_course_info_in_existing_course() {",
      "237:         global $DB;",
      "238:         $this->resetAfterTest();",
      "239:         $dg = $this->getDataGenerator();",
      "241:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
      "242:         $c2 = $dg->create_course(['shortname' => 'A', 'fullname' => 'B', 'summary' => 'C', 'summaryformat' => FORMAT_PLAIN]);",
      "243:         $backupid = $this->backup_course($c1->id);",
      "246:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
      "247:         $this->assertEquals('SN_1', $c2->shortname);",
      "248:         $this->assertEquals('FN copy 1', $c2->fullname);",
      "249:         $this->assertEquals('DESC', $c2->summary);",
      "250:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
      "251:     }",
      "253:     public function test_restore_course_shortname_in_existing_course_without_permissions() {",
      "254:         global $DB;",
      "255:         $this->resetAfterTest();",
      "256:         $dg = $this->getDataGenerator();",
      "257:         $u1 = $dg->create_user();",
      "259:         $managers = get_archetype_roles('manager');",
      "260:         $manager = array_shift($managers);",
      "261:         $roleid = $this->create_role_with_caps('moodle/course:changeshortname', CAP_PROHIBIT);",
      "262:         $dg->role_assign($manager->id, $u1->id);",
      "263:         $dg->role_assign($roleid, $u1->id);",
      "265:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
      "266:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
      "269:         $backupid = $this->backup_course($c1->id);",
      "270:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
      "271:         $this->assertEquals($c2->shortname, $restored->shortname);",
      "272:         $this->assertEquals('FN copy 1', $restored->fullname);",
      "273:         $this->assertEquals('DESC', $restored->summary);",
      "274:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
      "275:     }",
      "277:     public function test_restore_course_fullname_in_existing_course_without_permissions() {",
      "278:         global $DB;",
      "279:         $this->resetAfterTest();",
      "280:         $dg = $this->getDataGenerator();",
      "281:         $u1 = $dg->create_user();",
      "283:         $managers = get_archetype_roles('manager');",
      "284:         $manager = array_shift($managers);",
      "285:         $roleid = $this->create_role_with_caps('moodle/course:changefullname', CAP_PROHIBIT);",
      "286:         $dg->role_assign($manager->id, $u1->id);",
      "287:         $dg->role_assign($roleid, $u1->id);",
      "289:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
      "290:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
      "293:         $backupid = $this->backup_course($c1->id);",
      "294:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
      "295:         $this->assertEquals('SN_1', $restored->shortname);",
      "296:         $this->assertEquals($c2->fullname, $restored->fullname);",
      "297:         $this->assertEquals('DESC', $restored->summary);",
      "298:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
      "299:     }",
      "301:     public function test_restore_course_summary_in_existing_course_without_permissions() {",
      "302:         global $DB;",
      "303:         $this->resetAfterTest();",
      "304:         $dg = $this->getDataGenerator();",
      "305:         $u1 = $dg->create_user();",
      "307:         $managers = get_archetype_roles('manager');",
      "308:         $manager = array_shift($managers);",
      "309:         $roleid = $this->create_role_with_caps('moodle/course:changesummary', CAP_PROHIBIT);",
      "310:         $dg->role_assign($manager->id, $u1->id);",
      "311:         $dg->role_assign($roleid, $u1->id);",
      "313:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
      "314:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
      "317:         $backupid = $this->backup_course($c1->id);",
      "318:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
      "319:         $this->assertEquals('SN_1', $restored->shortname);",
      "320:         $this->assertEquals('FN copy 1', $restored->fullname);",
      "321:         $this->assertEquals($c2->summary, $restored->summary);",
      "322:         $this->assertEquals($c2->summaryformat, $restored->summaryformat);",
      "323:     }",
      "324: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "44e86fb3d54ab0d054f7babb3310853213469e50",
      "candidate_info": {
        "commit_hash": "44e86fb3d54ab0d054f7babb3310853213469e50",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/44e86fb3d54ab0d054f7babb3310853213469e50",
        "files": [
          "admin/settings/courses.php",
          "admin/tool/uploadcourse/tests/course_test.php",
          "backup/controller/restore_controller.class.php",
          "backup/moodle2/restore_course_task.class.php",
          "backup/moodle2/restore_settingslib.php",
          "backup/moodle2/restore_stepslib.php",
          "backup/util/checks/restore_check.class.php",
          "backup/util/dbops/restore_controller_dbops.class.php",
          "backup/util/plan/base_plan.class.php",
          "backup/util/plan/restore_step.class.php",
          "backup/util/ui/backup_ui_setting.class.php",
          "backup/util/ui/base_ui.class.php",
          "course/tests/restore_test.php",
          "lang/en/backup.php",
          "lib/adminlib.php"
        ],
        "message": "MDL-34859 backup: add restore defaults",
        "before_after_code_files": [
          "admin/settings/courses.php||admin/settings/courses.php",
          "admin/tool/uploadcourse/tests/course_test.php||admin/tool/uploadcourse/tests/course_test.php",
          "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
          "backup/moodle2/restore_course_task.class.php||backup/moodle2/restore_course_task.class.php",
          "backup/moodle2/restore_settingslib.php||backup/moodle2/restore_settingslib.php",
          "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
          "backup/util/checks/restore_check.class.php||backup/util/checks/restore_check.class.php",
          "backup/util/dbops/restore_controller_dbops.class.php||backup/util/dbops/restore_controller_dbops.class.php",
          "backup/util/plan/base_plan.class.php||backup/util/plan/base_plan.class.php",
          "backup/util/plan/restore_step.class.php||backup/util/plan/restore_step.class.php",
          "backup/util/ui/backup_ui_setting.class.php||backup/util/ui/backup_ui_setting.class.php",
          "backup/util/ui/base_ui.class.php||backup/util/ui/base_ui.class.php",
          "course/tests/restore_test.php||course/tests/restore_test.php",
          "lang/en/backup.php||lang/en/backup.php",
          "lib/adminlib.php||liadminlib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "course/tests/restore_test.php||course/tests/restore_test.php"
          ],
          "candidate": [
            "course/tests/restore_test.php||course/tests/restore_test.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/courses.php||admin/settings/courses.php": [
          "File: admin/settings/courses.php -> admin/settings/courses.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:     $ADMIN->add('backups', $temp);",
          "346: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:     $temp = new admin_settingpage('restoregeneralsettings', new lang_string('generalrestoredefaults', 'backup'));",
          "351:     $temp->add(new admin_setting_heading('generalsettings', new lang_string('generalrestoresettings', 'backup'), ''));",
          "353:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_users',",
          "354:         new lang_string('generalusers', 'backup'), new lang_string('configrestoreusers', 'backup'),",
          "355:         array('value' => 1, 'locked' => 0)));",
          "357:     $options = [",
          "358:         0/*backup::ENROL_NEVER*/     => get_string('rootsettingenrolments_never', 'backup'),",
          "359:         1/*backup::ENROL_WITHUSERS*/ => get_string('rootsettingenrolments_withusers', 'backup'),",
          "360:         2/*backup::ENROL_ALWAYS*/    => get_string('rootsettingenrolments_always', 'backup'),",
          "361:     ];",
          "362:     $temp->add(new admin_setting_configselect_with_lock('restore/restore_general_enrolments',",
          "363:         new lang_string('generalenrolments', 'backup'), new lang_string('configrestoreenrolments', 'backup'),",
          "364:         array('value' => 1/*backup::ENROL_WITHUSERS*/, 'locked' => 0), $options));",
          "365:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_role_assignments',",
          "366:         new lang_string('generalroleassignments', 'backup'),",
          "367:         new lang_string('configrestoreroleassignments', 'backup'), array('value' => 1, 'locked' => 0)));",
          "368:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_activities',",
          "369:         new lang_string('generalactivities', 'backup'),",
          "370:         new lang_string('configrestoreactivities', 'backup'), array('value' => 1, 'locked' => 0)));",
          "371:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_blocks',",
          "372:         new lang_string('generalblocks', 'backup'),",
          "373:         new lang_string('configrestoreblocks', 'backup'), array('value' => 1, 'locked' => 0)));",
          "374:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_filters',",
          "375:         new lang_string('generalfilters', 'backup'),",
          "376:         new lang_string('configrestorefilters', 'backup'), array('value' => 1, 'locked' => 0)));",
          "377:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_comments',",
          "378:         new lang_string('generalcomments', 'backup'),",
          "379:         new lang_string('configrestorecomments', 'backup'), array('value' => 1, 'locked' => 0)));",
          "380:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_badges',",
          "381:         new lang_string('generalbadges', 'backup'),",
          "382:         new lang_string('configrestorebadges', 'backup'), array('value' => 1, 'locked' => 0)));",
          "383:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_calendarevents',",
          "384:         new lang_string('generalcalendarevents', 'backup'),",
          "385:         new lang_string('configrestorecalendarevents', 'backup'), array('value' => 1, 'locked' => 0)));",
          "386:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_userscompletion',",
          "387:         new lang_string('generaluserscompletion', 'backup'),",
          "388:         new lang_string('configrestoreuserscompletion', 'backup'), array('value' => 1, 'locked' => 0)));",
          "389:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_logs',",
          "390:         new lang_string('generallogs', 'backup'),",
          "391:         new lang_string('configrestorelogs', 'backup'), array('value' => 1, 'locked' => 0)));",
          "392:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_histories',",
          "393:         new lang_string('generalhistories', 'backup'),",
          "394:         new lang_string('configrestorehistories', 'backup'), array('value' => 1, 'locked' => 0)));",
          "395:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_groups',",
          "396:         new lang_string('generalgroups', 'backup'), new lang_string('configrestoregroups', 'backup'),",
          "397:         array('value' => 1, 'locked' => 0)));",
          "398:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_general_competencies',",
          "399:         new lang_string('generalcompetencies', 'backup'),",
          "400:         new lang_string('configrestorecompetencies', 'backup'), array('value' => 1, 'locked' => 0)));",
          "403:     $temp->add(new admin_setting_heading('mergerestoredefaults', new lang_string('mergerestoredefaults', 'backup'), ''));",
          "405:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_merge_overwrite_conf',",
          "406:         new lang_string('setting_overwrite_conf', 'backup'),",
          "407:     new lang_string('config_overwrite_conf', 'backup'), array('value' => 0, 'locked' => 0)));",
          "409:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_merge_course_fullname',",
          "410:         new lang_string('setting_overwrite_course_fullname', 'backup'),",
          "411:         new lang_string('config_overwrite_course_fullname', 'backup'), array('value' => 1, 'locked' => 0)));",
          "412:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_merge_course_shortname',",
          "413:         new lang_string('setting_overwrite_course_shortname', 'backup'),",
          "414:         new lang_string('config_overwrite_course_shortname', 'backup'), array('value' => 1, 'locked' => 0)));",
          "415:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_merge_course_startdate',",
          "416:         new lang_string('setting_overwrite_course_startdate', 'backup'),",
          "417:         new lang_string('config_overwrite_course_startdate', 'backup'), array('value' => 1, 'locked' => 0)));",
          "420:     $temp->add(new admin_setting_heading('replacerestoredefaults', new lang_string('replacerestoredefaults', 'backup'), ''));",
          "422:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_replace_overwrite_conf',",
          "423:         new lang_string('setting_overwrite_conf', 'backup'),",
          "424:         new lang_string('config_overwrite_conf', 'backup'), array('value' => 0, 'locked' => 0)));",
          "426:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_replace_course_fullname',",
          "427:         new lang_string('setting_overwrite_course_fullname', 'backup'),",
          "428:         new lang_string('config_overwrite_course_fullname', 'backup'), array('value' => 1, 'locked' => 0)));",
          "429:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_replace_course_shortname',",
          "430:         new lang_string('setting_overwrite_course_shortname', 'backup'),",
          "431:         new lang_string('config_overwrite_course_shortname', 'backup'), array('value' => 1, 'locked' => 0)));",
          "432:     $temp->add(new admin_setting_configcheckbox_with_lock('restore/restore_replace_course_startdate',",
          "433:         new lang_string('setting_overwrite_course_startdate', 'backup'),",
          "434:         new lang_string('config_overwrite_course_startdate', 'backup'), array('value' => 1, 'locked' => 0)));",
          "436:     $temp->add(new admin_setting_configselect_with_lock('restore/restore_replace_keep_roles_and_enrolments',",
          "437:         new lang_string('setting_keep_roles_and_enrolments', 'backup'),",
          "438:         new lang_string('config_keep_roles_and_enrolments', 'backup'), array('value' => 0, 'locked' => 0),",
          "439:         array(1 => get_string('yes'), 0 => get_string('no'))));",
          "440:     $temp->add(new admin_setting_configselect_with_lock('restore/restore_replace_keep_groups_and_groupings',",
          "441:         new lang_string('setting_keep_groups_and_groupings', 'backup'),",
          "442:         new lang_string('config_keep_groups_and_groupings', 'backup'), array('value' => 0, 'locked' => 0),",
          "443:         array(1 => get_string('yes'), 0 => get_string('no'))));",
          "445:     $ADMIN->add('backups', $temp);",
          "",
          "---------------"
        ],
        "admin/tool/uploadcourse/tests/course_test.php||admin/tool/uploadcourse/tests/course_test.php": [
          "File: admin/tool/uploadcourse/tests/course_test.php -> admin/tool/uploadcourse/tests/course_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "741:         $this->assertTrue($found);",
          "742:     }",
          "744:     public function test_restore_invalid_file() {",
          "745:         $this->resetAfterTest();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:     public function test_restore_file_settings() {",
          "748:         global $DB;",
          "749:         $this->resetAfterTest(true);",
          "750:         $this->setAdminUser();",
          "753:         set_config('restore_general_activities', 0, 'restore');",
          "755:         $c1 = $this->getDataGenerator()->create_course();",
          "757:         $mode = tool_uploadcourse_processor::MODE_CREATE_NEW;",
          "758:         $updatemode = tool_uploadcourse_processor::UPDATE_ALL_WITH_DATA_ONLY;",
          "759:         $data = array('shortname' => 'A1', 'backupfile' => __DIR__ . '/fixtures/backup.mbz',",
          "760:             'summary' => 'A', 'category' => 1, 'fullname' => 'A1', 'templatecourse' => $c1->shortname);",
          "761:         $co = new tool_uploadcourse_course($mode, $updatemode, $data);",
          "762:         $this->assertTrue($co->prepare());",
          "763:         $co->proceed();",
          "764:         $course = $DB->get_record('course', array('shortname' => 'A1'));",
          "767:         $modinfo = get_fast_modinfo($course);",
          "768:         $this->assertEmpty($modinfo->get_instances_of('glossary'));",
          "769:     }",
          "",
          "---------------"
        ],
        "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php": [
          "File: backup/controller/restore_controller.class.php -> backup/controller/restore_controller.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:             $this->load_plan();",
          "146:             restore_check::check_security($this, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:             $this->apply_defaults();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "510:         $this->plan->build(); // Build plan for this controller",
          "511:         $this->set_status(backup::STATUS_PLANNED);",
          "512:     }",
          "513: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "520:     protected function apply_defaults() {",
          "521:         $this->log('applying restore defaults', backup::LOG_DEBUG);",
          "522:         restore_controller_dbops::apply_config_defaults($this);",
          "523:         $this->set_status(backup::STATUS_CONFIGURED);",
          "524:     }",
          "",
          "---------------"
        ],
        "backup/moodle2/restore_course_task.class.php||backup/moodle2/restore_course_task.class.php": [
          "File: backup/moodle2/restore_course_task.class.php -> backup/moodle2/restore_course_task.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:     protected function define_settings() {",
          "168:         $this->add_setting($fullname);",
          "172:         $this->add_setting($shortname);",
          "176:         $this->add_setting($startdate);",
          "178:         $keep_enrols = new restore_course_generic_setting('keep_roles_and_enrolments', base_setting::IS_BOOLEAN, false);",
          "",
          "[Removed Lines]",
          "166:         $fullname = new restore_course_generic_text_setting('course_fullname', base_setting::IS_TEXT, $this->get_info()->original_course_fullname);",
          "167:         $fullname->get_ui()->set_label(get_string('setting_course_fullname', 'backup'));",
          "170:         $shortname = new restore_course_generic_text_setting('course_shortname', base_setting::IS_TEXT, $this->get_info()->original_course_shortname);",
          "171:         $shortname->get_ui()->set_label(get_string('setting_course_shortname', 'backup'));",
          "174:         $startdate = new restore_course_generic_text_setting('course_startdate', base_setting::IS_INTEGER, $this->get_info()->original_course_startdate);",
          "175:         $startdate->set_ui(new backup_setting_ui_dateselector($startdate, get_string('setting_course_startdate', 'backup')));",
          "",
          "[Added Lines]",
          "166:         $overwrite = new restore_course_overwrite_conf_setting('overwrite_conf', base_setting::IS_BOOLEAN, false);",
          "167:         $overwrite->set_ui(new backup_setting_ui_select($overwrite, $overwrite->get_name(),",
          "168:             array(1 => get_string('yes'), 0 => get_string('no'))));",
          "169:         $overwrite->get_ui()->set_label(get_string('setting_overwrite_conf', 'backup'));",
          "170:         if ($this->get_target() == backup::TARGET_NEW_COURSE) {",
          "171:             $overwrite->set_value(true);",
          "172:             $overwrite->set_status(backup_setting::LOCKED_BY_CONFIG);",
          "173:             $overwrite->set_visibility(backup_setting::HIDDEN);",
          "174:             $course = (object)['fullname' => null, 'shortname' => null, 'startdate' => null];",
          "175:         } else {",
          "176:             $course = get_course($this->get_courseid());",
          "177:         }",
          "178:         $this->add_setting($overwrite);",
          "180:         $fullnamedefaultvalue = $this->get_info()->original_course_fullname;",
          "181:         $fullname = new restore_course_defaultcustom_setting('course_fullname', base_setting::IS_TEXT, $fullnamedefaultvalue);",
          "182:         $fullname->set_ui(new backup_setting_ui_defaultcustom($fullname, get_string('setting_course_fullname', 'backup'),",
          "183:             ['customvalue' => $fullnamedefaultvalue, 'defaultvalue' => $course->fullname]));",
          "186:         $shortnamedefaultvalue = $this->get_info()->original_course_shortname;",
          "187:         $shortname = new restore_course_defaultcustom_setting('course_shortname', base_setting::IS_TEXT, $shortnamedefaultvalue);",
          "188:         $shortname->set_ui(new backup_setting_ui_defaultcustom($shortname, get_string('setting_course_shortname', 'backup'),",
          "189:             ['customvalue' => $shortnamedefaultvalue, 'defaultvalue' => $course->shortname]));",
          "192:         $startdatedefaultvalue = $this->get_info()->original_course_startdate;",
          "193:         $startdate = new restore_course_defaultcustom_setting('course_startdate', base_setting::IS_INTEGER, $startdatedefaultvalue);",
          "194:         $startdate->set_ui(new backup_setting_ui_defaultcustom($startdate, get_string('setting_course_startdate', 'backup'),",
          "195:             ['customvalue' => $startdatedefaultvalue, 'defaultvalue' => $course->startdate, 'type' => 'date_selector']));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:         }",
          "196:         $this->add_setting($keep_groups);",
          "209:     }",
          "210: }",
          "",
          "[Removed Lines]",
          "199:         $overwrite = new restore_course_overwrite_conf_setting('overwrite_conf', base_setting::IS_BOOLEAN, false);",
          "200:         $overwrite->set_ui(new backup_setting_ui_select($overwrite, $overwrite->get_name(), array(1=>get_string('yes'), 0=>get_string('no'))));",
          "201:         $overwrite->get_ui()->set_label(get_string('setting_overwriteconf', 'backup'));",
          "202:         if ($this->get_target() == backup::TARGET_NEW_COURSE) {",
          "203:             $overwrite->set_value(true);",
          "204:             $overwrite->set_status(backup_setting::LOCKED_BY_CONFIG);",
          "205:             $overwrite->set_visibility(backup_setting::HIDDEN);",
          "206:         }",
          "207:         $this->add_setting($overwrite);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "backup/moodle2/restore_settingslib.php||backup/moodle2/restore_settingslib.php": [
          "File: backup/moodle2/restore_settingslib.php -> backup/moodle2/restore_settingslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "144: class restore_course_overwrite_conf_setting extends restore_course_generic_setting {}",
          "147: class restore_course_generic_text_setting extends restore_course_generic_setting {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: class restore_course_defaultcustom_setting extends restore_course_generic_setting {",
          "159:     public function validate_value($vtype, $value) {",
          "160:         if ($value === false) {",
          "162:             return $value;",
          "163:         }",
          "164:         return parent::validate_value($vtype, $value);",
          "165:     }",
          "171:     public function get_normalized_value() {",
          "172:         $value = $this->get_value();",
          "173:         if ($value === false && $this->get_ui() instanceof backup_setting_ui_defaultcustom) {",
          "174:             $attributes = $this->get_ui()->get_attributes();",
          "175:             return $attributes['defaultvalue'];",
          "176:         }",
          "177:         return $value;",
          "178:     }",
          "179: }",
          "",
          "---------------"
        ],
        "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php": [
          "File: backup/moodle2/restore_stepslib.php -> backup/moodle2/restore_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1810:         $context = context::instance_by_id($this->task->get_contextid());",
          "1811:         $userid = $this->task->get_userid();",
          "1812:         $target = $this->get_task()->get_target();",
          "1816:         $canchangeidnumber = $isnewcourse || has_capability('moodle/course:changeidnumber', $context, $userid);",
          "1819:         $canchangesummary = $isnewcourse || has_capability('moodle/course:changesummary', $context, $userid);",
          "1821:         $data = (object)$data;",
          "1822:         $data->id = $this->get_courseid();",
          "1824:         $fullname  = $this->get_setting_value('course_fullname');",
          "1825:         $shortname = $this->get_setting_value('course_shortname');",
          "1834:             unset($data->fullname);",
          "1835:         }",
          "1840:             unset($data->shortname);",
          "1841:         }",
          "1843:         if (!$canchangesummary) {",
          "1844:             unset($data->summary);",
          "1845:             unset($data->summaryformat);",
          "",
          "[Removed Lines]",
          "1813:         $isnewcourse = $target != backup::TARGET_CURRENT_ADDING && $target != backup::TARGET_EXISTING_ADDING;",
          "1817:         $canchangeshortname = $isnewcourse || has_capability('moodle/course:changeshortname', $context, $userid);",
          "1818:         $canchangefullname = $isnewcourse || has_capability('moodle/course:changefullname', $context, $userid);",
          "1826:         $startdate = $this->get_setting_value('course_startdate');",
          "1829:         list($fullname, $shortname) = restore_dbops::calculate_course_names($this->get_courseid(), $fullname, $shortname);",
          "1831:         if ($canchangefullname) {",
          "1832:             $data->fullname = $fullname;",
          "1833:         } else {",
          "1837:         if ($canchangeshortname) {",
          "1838:             $data->shortname = $shortname;",
          "1839:         } else {",
          "",
          "[Added Lines]",
          "1813:         $isnewcourse = $target == backup::TARGET_NEW_COURSE;",
          "1825:         list($data->fullname, $data->shortname) = restore_dbops::calculate_course_names($this->get_courseid(),",
          "1826:             $fullname === false ? $data->fullname : $fullname,",
          "1827:             $shortname === false ? $data->shortname : $shortname);",
          "1829:         if (!$isnewcourse && $fullname === false) {",
          "1832:         if (!$isnewcourse && $shortname === false) {",
          "",
          "---------------"
        ],
        "backup/util/checks/restore_check.class.php||backup/util/checks/restore_check.class.php": [
          "File: backup/util/checks/restore_check.class.php -> backup/util/checks/restore_check.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:             if (!$hasrolldatescap) {",
          "177:                 $startdatesetting = $restore_controller->get_plan()->get_setting('course_startdate');",
          "178:                 if ($startdatesetting) {",
          "179:                     $startdatesetting->set_status(base_setting::LOCKED_BY_PERMISSION);",
          "180:                 }",
          "181:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:                     $startdatesetting->set_status(base_setting::NOT_LOCKED); // Permission lock overrides config lock.",
          "180:                     $startdatesetting->set_value(false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:             $haschangefullnamecap = has_capability('moodle/course:changefullname', $coursectx, $userid);",
          "186:             if (!$haschangefullnamecap) {",
          "187:                 $fullnamesetting = $restore_controller->get_plan()->get_setting('course_fullname');",
          "188:                 $fullnamesetting->set_status(base_setting::LOCKED_BY_PERMISSION);",
          "189:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:                 $fullnamesetting->set_status(base_setting::NOT_LOCKED); // Permission lock overrides config lock.",
          "191:                 $fullnamesetting->set_value(false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:             $haschangeshortnamecap = has_capability('moodle/course:changeshortname', $coursectx, $userid);",
          "194:             if (!$haschangeshortnamecap) {",
          "195:                 $shortnamesetting = $restore_controller->get_plan()->get_setting('course_shortname');",
          "196:                 $shortnamesetting->set_status(base_setting::LOCKED_BY_PERMISSION);",
          "197:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:                 $shortnamesetting->set_status(base_setting::NOT_LOCKED); // Permission lock overrides config lock.",
          "201:                 $shortnamesetting->set_value(false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:             $hasupdatecap = has_capability('moodle/course:update', $coursectx, $userid);",
          "202:             if (!$hasupdatecap) {",
          "203:                 $overwritesetting = $restore_controller->get_plan()->get_setting('overwrite_conf');",
          "204:                 $overwritesetting->set_status(base_setting::LOCKED_BY_PERMISSION);",
          "205:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:                 $overwritesetting->set_status(base_setting::NOT_LOCKED); // Permission lock overrides config lock.",
          "211:                 $overwritesetting->set_value(false);",
          "",
          "---------------"
        ],
        "backup/util/dbops/restore_controller_dbops.class.php||backup/util/dbops/restore_controller_dbops.class.php": [
          "File: backup/util/dbops/restore_controller_dbops.class.php -> backup/util/dbops/restore_controller_dbops.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:         restore_dbops::reset_backup_ids_cached();",
          "136:     }",
          "137: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:     public static function apply_config_defaults(restore_controller $controller) {",
          "145:         $settings = array(",
          "146:             'restore_general_users'              => 'users',",
          "147:             'restore_general_enrolments'         => 'enrolments',",
          "148:             'restore_general_role_assignments'   => 'role_assignments',",
          "149:             'restore_general_activities'         => 'activities',",
          "150:             'restore_general_blocks'             => 'blocks',",
          "151:             'restore_general_filters'            => 'filters',",
          "152:             'restore_general_comments'           => 'comments',",
          "153:             'restore_general_badges'             => 'badges',",
          "154:             'restore_general_calendarevents'     => 'calendarevents',",
          "155:             'restore_general_userscompletion'    => 'userscompletion',",
          "156:             'restore_general_logs'               => 'logs',",
          "157:             'restore_general_histories'          => 'grade_histories',",
          "158:             'restore_general_questionbank'       => 'questionbank',",
          "159:             'restore_general_groups'             => 'groups',",
          "160:             'restore_general_competencies'       => 'competencies'",
          "161:         );",
          "162:         self::apply_admin_config_defaults($controller, $settings, true);",
          "164:         $target = $controller->get_target();",
          "165:         if ($target == backup::TARGET_EXISTING_ADDING || $target == backup::TARGET_CURRENT_ADDING) {",
          "166:             $settings = array(",
          "167:                 'restore_merge_overwrite_conf'  => 'overwrite_conf',",
          "168:                 'restore_merge_course_fullname'  => 'course_fullname',",
          "169:                 'restore_merge_course_shortname' => 'course_shortname',",
          "170:                 'restore_merge_course_startdate' => 'course_startdate',",
          "171:             );",
          "172:             self::apply_admin_config_defaults($controller, $settings, true);",
          "173:         }",
          "175:         if ($target == backup::TARGET_EXISTING_DELETING || $target == backup::TARGET_CURRENT_DELETING) {",
          "176:             $settings = array(",
          "177:                 'restore_replace_overwrite_conf'  => 'overwrite_conf',",
          "178:                 'restore_replace_course_fullname'  => 'course_fullname',",
          "179:                 'restore_replace_course_shortname' => 'course_shortname',",
          "180:                 'restore_replace_course_startdate' => 'course_startdate',",
          "181:                 'restore_replace_keep_roles_and_enrolments' => 'keep_roles_and_enrolments',",
          "182:                 'restore_replace_keep_groups_and_groupings' => 'keep_groups_and_groupings',",
          "183:             );",
          "184:             self::apply_admin_config_defaults($controller, $settings, true);",
          "185:         }",
          "188:         $plan = $controller->get_plan();",
          "189:         if ($plan->setting_exists('overwrite_conf')) {",
          "191:             $overwriteconf = $plan->get_setting('overwrite_conf');",
          "192:             if ($overwriteconf->get_visibility()) {",
          "193:                 foreach (['course_fullname', 'course_shortname', 'course_startdate'] as $settingname) {",
          "194:                     if ($plan->setting_exists($settingname)) {",
          "195:                         $setting = $plan->get_setting($settingname);",
          "196:                         $overwriteconf->add_dependency($setting, setting_dependency::DISABLED_FALSE,",
          "197:                             array('defaultvalue' => $setting->get_value()));",
          "198:                     }",
          "199:                 }",
          "200:             }",
          "201:         }",
          "202:     }",
          "211:     private static function get_setting_default($config, $setting) {",
          "212:         $value = get_config('restore', $config);",
          "214:         if (in_array($setting->get_name(), ['course_fullname', 'course_shortname', 'course_startdate']) &&",
          "215:                 $setting->get_ui() instanceof backup_setting_ui_defaultcustom) {",
          "217:             $value = (bool)$value;",
          "218:             if ($value) {",
          "219:                 $attributes = $setting->get_ui()->get_attributes();",
          "220:                 $value = $attributes['customvalue'];",
          "221:             }",
          "222:         }",
          "224:         if ($setting->get_ui() instanceof backup_setting_ui_select) {",
          "227:             $options = array_keys($setting->get_ui()->get_values());",
          "228:             if (!in_array($value, $options)) {",
          "229:                 $value = reset($options);",
          "230:             }",
          "231:         }",
          "233:         return $value;",
          "234:     }",
          "243:     private static function apply_admin_config_defaults(restore_controller $controller, array $settings, $uselocks) {",
          "244:         $plan = $controller->get_plan();",
          "245:         foreach ($settings as $config => $settingname) {",
          "246:             if ($plan->setting_exists($settingname)) {",
          "247:                 $setting = $plan->get_setting($settingname);",
          "248:                 $value = self::get_setting_default($config, $setting);",
          "249:                 $locked = (get_config('restore', $config . '_locked') == true);",
          "252:                 if ($setting->get_status() != base_setting::LOCKED_BY_CONFIG",
          "253:                         && $setting->get_status() != base_setting::LOCKED_BY_PERMISSION",
          "254:                         && $setting->get_ui()->is_changeable()) {",
          "255:                     $setting->set_value($value);",
          "256:                     if ($uselocks && $locked) {",
          "257:                         $setting->set_status(base_setting::LOCKED_BY_CONFIG);",
          "258:                     }",
          "259:                 }",
          "260:             } else {",
          "261:                 $controller->log('Unknown setting: ' . $settingname, BACKUP::LOG_DEBUG);",
          "262:             }",
          "263:         }",
          "264:     }",
          "",
          "---------------"
        ],
        "backup/util/plan/base_plan.class.php||backup/util/plan/base_plan.class.php": [
          "File: backup/util/plan/base_plan.class.php -> backup/util/plan/base_plan.class.php"
        ],
        "backup/util/plan/restore_step.class.php||backup/util/plan/restore_step.class.php": [
          "File: backup/util/plan/restore_step.class.php -> backup/util/plan/restore_step.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         $original = $this->task->get_info()->original_course_startdate;",
          "71:         $setting = 0;",
          "72:         if ($this->setting_exists('course_startdate')) { // Seting may not exist (MDL-25019).",
          "74:         }",
          "76:         if (empty($original) || empty($setting)) {",
          "",
          "[Removed Lines]",
          "73:             $setting  = $this->get_setting_value('course_startdate');",
          "",
          "[Added Lines]",
          "73:             $settingobject = $this->task->get_setting('course_startdate');",
          "74:             if (method_exists($settingobject, 'get_normalized_value')) {",
          "75:                 $setting = $settingobject->get_normalized_value();",
          "76:             } else {",
          "77:                 $setting = $settingobject->get_value();",
          "78:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:             $cache[$this->get_restoreid()] = 0;",
          "89:         } else {",
          "91:             $cache[$this->get_restoreid()] = $setting - $original;",
          "",
          "[Removed Lines]",
          "84:         } else if (!has_capability('moodle/restore:rolldates',",
          "85:                context_course::instance($this->get_courseid()), $this->task->get_userid())) {",
          "87:             $cache[$this->get_restoreid()] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "backup/util/ui/backup_ui_setting.class.php||backup/util/ui/backup_ui_setting.class.php": [
          "File: backup/util/ui/backup_ui_setting.class.php -> backup/util/ui/backup_ui_setting.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "644:             return parent::is_changeable();",
          "645:         }",
          "646:     }",
          "647: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "652:     public function get_values() {",
          "653:         return $this->values;",
          "654:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "683:     }",
          "684: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "701: class backup_setting_ui_defaultcustom extends backup_setting_ui_text {",
          "711:     public function __construct(backup_setting $setting, $label = null, array $attributes = null, array $options = null) {",
          "712:         if (!is_array($attributes)) {",
          "713:             $attributes = [];",
          "714:         }",
          "715:         $attributes += ['customlabel' => get_string('overwrite', 'backup'),",
          "716:             'type' => 'text'];",
          "717:         parent::__construct($setting, $label, $attributes, $options);",
          "718:     }",
          "726:     public function get_element_properties(base_task $task = null, renderer_base $output = null) {",
          "727:         return ['element' => 'defaultcustom'] + parent::get_element_properties($task, $output);",
          "728:     }",
          "734:     public function get_static_value() {",
          "735:         $value = $this->get_value();",
          "736:         if ($value === false) {",
          "737:             $value = $this->attributes['defaultvalue'];",
          "738:         }",
          "739:         if (!empty($value) && $this->attributes['type'] === 'date_selector') {",
          "740:             return userdate($value);",
          "741:         }",
          "742:         return $value;",
          "743:     }",
          "744: }",
          "",
          "---------------"
        ],
        "backup/util/ui/base_ui.class.php||backup/util/ui/base_ui.class.php": [
          "File: backup/util/ui/base_ui.class.php -> backup/util/ui/base_ui.class.php"
        ],
        "course/tests/restore_test.php||course/tests/restore_test.php": [
          "File: course/tests/restore_test.php -> course/tests/restore_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         $rc = new restore_controller($backupid, $courseid, backup::INTERACTIVE_NO, backup::MODE_GENERAL, $userid, $target);",
          "100:         $target == backup::TARGET_NEW_COURSE ?: $rc->get_plan()->get_setting('overwrite_conf')->set_value(true);",
          "102:         $rc->execute_plan();",
          "104:         $course = $DB->get_record('course', array('id' => $rc->get_courseid()));",
          "",
          "[Removed Lines]",
          "101:         $rc->execute_precheck();",
          "",
          "[Added Lines]",
          "101:         $this->assertTrue($rc->execute_precheck());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:         $this->resetAfterTest();",
          "223:         $dg = $this->getDataGenerator();",
          "226:         $backupid = $this->backup_course($c1->id);",
          "",
          "[Removed Lines]",
          "225:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "",
          "[Added Lines]",
          "225:         $startdate = mktime(12, 0, 0, 7, 1, 2016); // 01-Jul-2016.",
          "227:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'startdate' => $startdate,",
          "228:             'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:         $this->assertEquals('FN copy 1', $c2->fullname);",
          "232:         $this->assertEquals('DESC', $c2->summary);",
          "233:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
          "234:     }",
          "236:     public function test_restore_course_info_in_existing_course() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:         $this->assertEquals($startdate, $c2->startdate);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238:         $this->resetAfterTest();",
          "239:         $dg = $this->getDataGenerator();",
          "243:         $backupid = $this->backup_course($c1->id);",
          "",
          "[Removed Lines]",
          "241:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "242:         $c2 = $dg->create_course(['shortname' => 'A', 'fullname' => 'B', 'summary' => 'C', 'summaryformat' => FORMAT_PLAIN]);",
          "",
          "[Added Lines]",
          "245:         $this->assertEquals(1, get_config('restore', 'restore_merge_course_shortname'));",
          "246:         $this->assertEquals(1, get_config('restore', 'restore_merge_course_fullname'));",
          "247:         $this->assertEquals(1, get_config('restore', 'restore_merge_course_startdate'));",
          "249:         $startdate = mktime(12, 0, 0, 7, 1, 2016); // 01-Jul-2016.",
          "252:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE,",
          "253:             'startdate' => $startdate]);",
          "254:         $chat1 = $dg->create_module('chat', ['name' => 'First', 'course' => $c1->id, 'chattime' => $c1->startdate + 1 * WEEKSECS]);",
          "255:         $c2 = $dg->create_course(['shortname' => 'A', 'fullname' => 'B', 'summary' => 'C', 'summaryformat' => FORMAT_PLAIN,",
          "256:             'startdate' => $startdate + 2 * WEEKSECS]);",
          "257:         $chat2 = $dg->create_module('chat', ['name' => 'Second', 'course' => $c2->id, 'chattime' => $c2->startdate + 1 * WEEKSECS]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "248:         $this->assertEquals('FN copy 1', $c2->fullname);",
          "249:         $this->assertEquals('DESC', $c2->summary);",
          "250:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
          "251:     }",
          "253:     public function test_restore_course_shortname_in_existing_course_without_permissions() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:         $this->assertEquals($startdate, $c2->startdate);",
          "270:         $restoredchat1 = $DB->get_record('chat', ['name' => 'First', 'course' => $c2->id]);",
          "271:         $restoredchat2 = $DB->get_record('chat', ['name' => 'Second', 'course' => $c2->id]);",
          "272:         $this->assertEquals($chat1->chattime, $restoredchat1->chattime);",
          "273:         $this->assertEquals($chat2->chattime, $restoredchat2->chattime);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "321:         $this->assertEquals($c2->summary, $restored->summary);",
          "322:         $this->assertEquals($c2->summaryformat, $restored->summaryformat);",
          "323:     }",
          "324: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:     public function test_restore_course_startdate_in_existing_course_without_permissions() {",
          "349:         global $DB;",
          "350:         $this->resetAfterTest();",
          "351:         $dg = $this->getDataGenerator();",
          "353:         $u1 = $dg->create_user();",
          "354:         $managers = get_archetype_roles('manager');",
          "355:         $manager = array_shift($managers);",
          "356:         $roleid = $this->create_role_with_caps('moodle/restore:rolldates', CAP_PROHIBIT);",
          "357:         $dg->role_assign($manager->id, $u1->id);",
          "358:         $dg->role_assign($roleid, $u1->id);",
          "361:         $startdate1 = mktime(12, 0, 0, 7, 1, 2016); // 01-Jul-2016.",
          "362:         $startdate2 = mktime(12, 0, 0, 1, 13, 2000); // 13-Jan-2000.",
          "363:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE,",
          "364:             'startdate' => $startdate1]);",
          "365:         $chat1 = $dg->create_module('chat', ['name' => 'First', 'course' => $c1->id, 'chattime' => $c1->startdate + 1 * WEEKSECS]);",
          "366:         $c2 = $dg->create_course(['shortname' => 'A', 'fullname' => 'B', 'summary' => 'C', 'summaryformat' => FORMAT_PLAIN,",
          "367:             'startdate' => $startdate2]);",
          "368:         $chat2 = $dg->create_module('chat', ['name' => 'Second', 'course' => $c2->id, 'chattime' => $c2->startdate + 1 * WEEKSECS]);",
          "371:         $backupid = $this->backup_course($c1->id);",
          "372:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "373:         $this->assertEquals('SN_1', $restored->shortname);",
          "374:         $this->assertEquals('FN copy 1', $restored->fullname);",
          "375:         $this->assertEquals('DESC', $restored->summary);",
          "376:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
          "377:         $this->assertEquals($startdate2, $restored->startdate);",
          "381:         $restoredchat1 = $DB->get_record('chat', ['name' => 'First', 'course' => $c2->id]);",
          "382:         $restoredchat2 = $DB->get_record('chat', ['name' => 'Second', 'course' => $c2->id]);",
          "383:         $this->assertNotEquals($chat1->chattime, $restoredchat1->chattime);",
          "384:         $this->assertEquals($chat2->chattime, $restoredchat2->chattime);",
          "385:         $this->assertEquals($c2->startdate + 1 * WEEKSECS, $restoredchat2->chattime);",
          "386:     }",
          "",
          "---------------"
        ],
        "lang/en/backup.php||lang/en/backup.php": [
          "File: lang/en/backup.php -> lang/en/backup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: $string['choosefilefromactivitybackup_help'] = 'Activity backups made using default settings are stored here.';",
          "84: $string['choosefilefromautomatedbackup'] = 'Automated backups';",
          "85: $string['choosefilefromautomatedbackup_help'] = 'Contains automatically generated backups.';",
          "86: $string['configgeneralactivities'] = 'Sets the default for including activities in a backup.';",
          "87: $string['configgeneralbadges'] = 'Sets the default for including badges in a backup.';",
          "88: $string['configgeneralanonymize'] = 'If enabled all information pertaining to users will be anonymised by default.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: $string['config_keep_groups_and_groupings'] = 'By default keep current roles and enrolments';",
          "87: $string['config_keep_roles_and_enrolments'] = 'By default keep current groups and groupings';",
          "88: $string['config_overwrite_conf'] = 'Allows user to overwrite the current course configuration';",
          "89: $string['config_overwrite_course_fullname'] = 'By default overwrite course full name with the one from the backup file. This requires \"Overwrite course configuration\" to be checked and current user to have the capability to change course full name (moodle/course:changefullname)';",
          "90: $string['config_overwrite_course_shortname'] = 'By default overwrite course short name with the one from the backup file. This requires \"Overwrite course configuration\" to be checked and current user to have the capability to change course short name (moodle/course:changeshortname)';",
          "91: $string['config_overwrite_course_startdate'] = 'By default overwrite course start date with the one from the backup file. This requires \"Overwrite course configuration\" to be checked and current user to have the capability to roll course dates on restore (moodle/restore:rolldates)';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99: $string['configgeneraluserscompletion'] = 'If enabled user completion information will be included in backups by default.';",
          "100: $string['configgeneralusers'] = 'Sets the default for whether to include users in backups.';",
          "101: $string['configloglifetime'] = 'This specifies the length of time you want to keep backup logs information. Logs that are older than this age are automatically deleted. It is recommended to keep this value small, because backup logged information can be huge.';",
          "102: $string['confirmcancel'] = 'Cancel backup';",
          "103: $string['confirmcancelquestion'] = 'Are you sure you wish to cancel?",
          "104: Any information you have entered will be lost.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: $string['configrestoreactivities'] = 'Sets the default for restoring activities.';",
          "109: $string['configrestorebadges'] = 'Sets the default for restoring badges.';",
          "110: $string['configrestoreblocks'] = 'Sets the default for restoring blocks.';",
          "111: $string['configrestorecalendarevents'] = 'Sets the default for restoring calendar events.';",
          "112: $string['configrestorecomments'] = 'Sets the default for restoring comments.';",
          "113: $string['configrestorecompetencies'] = 'Sets the default for restoring competencies.';",
          "114: $string['configrestoreenrolments'] = 'Sets the default for restoring enrolment methods.';",
          "115: $string['configrestorefilters'] = 'Sets the default for restoring filters.';",
          "116: $string['configrestorehistories'] = 'Sets the default for restoring user history if it was included in the backup.';",
          "117: $string['configrestorelogs'] = 'If enabled logs will be restored by default if they were included in the backup.';",
          "118: $string['configrestoregroups'] = 'Sets the default for restoring groups and groupings if they were included in the backup.';",
          "119: $string['configrestoreroleassignments'] = 'If enabled by default roles assignments will be restored if they were included in the backup.';",
          "120: $string['configrestoreuserscompletion'] = 'If enabled user completion information will be restored by default if it was included in the backup.';",
          "121: $string['configrestoreusers'] = 'Sets the default for whether to restore users if they were included in the backup.';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144: $string['generalcalendarevents'] = 'Include calendar events';",
          "145: $string['generalcomments'] = 'Include comments';",
          "146: $string['generalcompetencies'] = 'Include competencies';",
          "147: $string['generalfilters'] = 'Include filters';",
          "148: $string['generalhistories'] = 'Include histories';",
          "149: $string['generalgradehistories'] = 'Include histories';",
          "150: $string['generallogs'] = 'Include logs';",
          "151: $string['generalquestionbank'] = 'Include question bank';",
          "152: $string['generalgroups'] = 'Include groups and groupings';",
          "153: $string['generalroleassignments'] = 'Include role assignments';",
          "154: $string['generalsettings'] = 'General backup settings';",
          "155: $string['generaluserscompletion'] = 'Include user completion information';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: $string['generalenrolments'] = 'Include enrolment methods';",
          "174: $string['generalrestoredefaults'] = 'General restore defaults';",
          "175: $string['mergerestoredefaults'] = 'Restore defaults when merging into another course';",
          "176: $string['replacerestoredefaults'] = 'Restore defaults when restoring into another course deleting contents';",
          "177: $string['generalrestoresettings'] = 'General restore settings';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180: $string['includeuserinfo'] = 'User data';",
          "181: $string['includefilereferences'] = 'File references to external contents';",
          "182: $string['jumptofinalstep'] = 'Jump to final step';",
          "183: $string['locked'] = 'Locked';",
          "184: $string['lockedbypermission'] = 'You don\\'t have sufficient permissions to change this setting';",
          "185: $string['lockedbyconfig'] = 'This setting has been locked by the default backup settings';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208: $string['keep'] = 'Keep';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "192: $string['nomatchingcourses'] = 'There are no courses to display';",
          "193: $string['norestoreoptions'] = 'There are no categories or existing courses you can restore to.';",
          "194: $string['originalwwwroot'] = 'URL of backup';",
          "195: $string['previousstage'] = 'Previous';",
          "196: $string['preparingui'] = 'Preparing to display page';",
          "197: $string['preparingdata'] = 'Preparing data';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: $string['overwrite'] = 'Overwrite';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "267: $string['sectionactivities'] = 'Activities';",
          "268: $string['selectacategory'] = 'Select a category';",
          "269: $string['selectacourse'] = 'Select a course';",
          "271: $string['setting_course_fullname'] = 'Course name';",
          "272: $string['setting_course_shortname'] = 'Course short name';",
          "273: $string['setting_course_startdate'] = 'Course start date';",
          "274: $string['setting_keep_roles_and_enrolments'] = 'Keep current roles and enrolments';",
          "275: $string['setting_keep_groups_and_groupings'] = 'Keep current groups and groupings';",
          "276: $string['showtypes'] = 'Show type options';",
          "277: $string['skiphidden'] = 'Skip hidden courses';",
          "278: $string['skiphiddenhelp'] = 'Choose whether or not to skip hidden courses';",
          "",
          "[Removed Lines]",
          "270: $string['setting_overwriteconf'] = 'Overwrite course configuration';",
          "",
          "[Added Lines]",
          "302: $string['setting_overwrite_conf'] = 'Overwrite course configuration';",
          "303: $string['setting_overwrite_course_fullname'] = 'Overwrite course full name';",
          "304: $string['setting_overwrite_course_shortname'] = 'Overwrite course short name';",
          "305: $string['setting_overwrite_course_startdate'] = 'Overwrite course start date';",
          "",
          "---------------"
        ],
        "lib/adminlib.php||liadminlib.php": [
          "File: lib/adminlib.php -> liadminlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5126: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39257eb39c4997fbf3c0b09b404a740000b67d14",
      "candidate_info": {
        "commit_hash": "39257eb39c4997fbf3c0b09b404a740000b67d14",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/39257eb39c4997fbf3c0b09b404a740000b67d14",
        "files": [
          "course/tests/restore_test.php"
        ],
        "message": "MDL-54600 phpunit: fixed classname to follow frankenstyle",
        "before_after_code_files": [
          "course/tests/restore_test.php||course/tests/restore_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "course/tests/restore_test.php||course/tests/restore_test.php"
          ],
          "candidate": [
            "course/tests/restore_test.php||course/tests/restore_test.php"
          ]
        }
      },
      "candidate_diff": {
        "course/tests/restore_test.php||course/tests/restore_test.php": [
          "File: course/tests/restore_test.php -> course/tests/restore_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "38: class core_restore_backup_testcase extends advanced_testcase {",
          "",
          "[Added Lines]",
          "38: class core_course_restore_testcase extends advanced_testcase {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d8050dd38203c48d18bc63ad85ba578776f0064",
      "candidate_info": {
        "commit_hash": "7d8050dd38203c48d18bc63ad85ba578776f0064",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/7d8050dd38203c48d18bc63ad85ba578776f0064",
        "files": [
          "course/tests/restore_test.php"
        ],
        "message": "MDL-51369 course: Adding tests to cover restoring course info",
        "before_after_code_files": [
          "course/tests/restore_test.php||course/tests/restore_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "course/tests/restore_test.php||course/tests/restore_test.php"
          ],
          "candidate": [
            "course/tests/restore_test.php||course/tests/restore_test.php"
          ]
        }
      },
      "candidate_diff": {
        "course/tests/restore_test.php||course/tests/restore_test.php": [
          "File: course/tests/restore_test.php -> course/tests/restore_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "26: global $CFG;",
          "28: require_once($CFG->dirroot . '/backup/util/includes/backup_includes.php');",
          "29: require_once($CFG->dirroot . '/backup/util/includes/restore_includes.php');",
          "38: class core_restore_backup_testcase extends advanced_testcase {",
          "47:     protected function backup_course($courseid, $userid = 2) {",
          "48:         globaL $CFG;",
          "49:         $packer = get_file_packer('application/vnd.moodle.backup');",
          "51:         $bc = new backup_controller(backup::TYPE_1COURSE, $courseid, backup::FORMAT_MOODLE, backup::INTERACTIVE_NO,",
          "52:             backup::MODE_GENERAL, $userid);",
          "53:         $bc->execute_plan();",
          "55:         $results = $bc->get_results();",
          "56:         $results['backup_destination']->extract_to_pathname($packer, \"$CFG->tempdir/backup/core_course_testcase\");",
          "58:         $bc->destroy();",
          "59:         unset($bc);",
          "60:         return 'core_course_testcase';",
          "61:     }",
          "70:     protected function create_role_with_caps($caps, $perm) {",
          "71:         $caps = (array) $caps;",
          "72:         $dg = $this->getDataGenerator();",
          "73:         $roleid = $dg->create_role();",
          "74:         foreach ($caps as $cap) {",
          "75:             assign_capability($cap, $perm, $roleid, context_system::instance()->id, true);",
          "76:         }",
          "77:         accesslib_clear_all_caches_for_unit_testing();",
          "78:         return $roleid;",
          "79:     }",
          "89:     protected function restore_course($backupid, $courseid, $userid) {",
          "90:         global $DB;",
          "92:         $target = backup::TARGET_CURRENT_ADDING;",
          "93:         if (!$courseid) {",
          "94:             $target = backup::TARGET_NEW_COURSE;",
          "95:             $categoryid = $DB->get_field_sql(\"SELECT MIN(id) FROM {course_categories}\");",
          "96:             $courseid = restore_dbops::create_new_course('Tmp', 'tmp', $categoryid);",
          "97:         }",
          "99:         $rc = new restore_controller($backupid, $courseid, backup::INTERACTIVE_NO, backup::MODE_GENERAL, $userid, $target);",
          "100:         $target == backup::TARGET_NEW_COURSE ?: $rc->get_plan()->get_setting('overwrite_conf')->set_value(true);",
          "101:         $rc->execute_precheck();",
          "102:         $rc->execute_plan();",
          "104:         $course = $DB->get_record('course', array('id' => $rc->get_courseid()));",
          "106:         $rc->destroy();",
          "107:         unset($rc);",
          "108:         return $course;",
          "109:     }",
          "119:     protected function restore_to_existing_course($backupid, $courseid, $userid = 2) {",
          "120:         return $this->restore_course($backupid, $courseid, $userid);",
          "121:     }",
          "130:     protected function restore_to_new_course($backupid, $userid = 2) {",
          "131:         return $this->restore_course($backupid, 0, $userid);",
          "132:     }",
          "134:     public function test_restore_existing_idnumber_in_new_course() {",
          "135:         $this->resetAfterTest();",
          "137:         $dg = $this->getDataGenerator();",
          "138:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "139:         $backupid = $this->backup_course($c1->id);",
          "140:         $c2 = $this->restore_to_new_course($backupid);",
          "143:         $this->assertEquals('', $c2->idnumber);",
          "144:     }",
          "146:     public function test_restore_non_existing_idnumber_in_new_course() {",
          "147:         global $DB;",
          "148:         $this->resetAfterTest();",
          "150:         $dg = $this->getDataGenerator();",
          "151:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "152:         $backupid = $this->backup_course($c1->id);",
          "154:         $c1->idnumber = 'BCD';",
          "155:         $DB->update_record('course', $c1);",
          "158:         $c2 = $this->restore_to_new_course($backupid);",
          "159:         $this->assertEquals('ABC', $c2->idnumber);",
          "160:     }",
          "162:     public function test_restore_existing_idnumber_in_existing_course() {",
          "163:         global $DB;",
          "164:         $this->resetAfterTest();",
          "166:         $dg = $this->getDataGenerator();",
          "167:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "168:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
          "169:         $backupid = $this->backup_course($c1->id);",
          "172:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
          "173:         $this->assertEquals('DEF', $c2->idnumber);",
          "175:         $c1 = $DB->get_record('course', array('id' => $c1->id));",
          "176:         $this->assertEquals('ABC', $c1->idnumber);",
          "177:     }",
          "179:     public function test_restore_non_existing_idnumber_in_existing_course() {",
          "180:         global $DB;",
          "181:         $this->resetAfterTest();",
          "183:         $dg = $this->getDataGenerator();",
          "184:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "185:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
          "186:         $backupid = $this->backup_course($c1->id);",
          "188:         $c1->idnumber = 'XXX';",
          "189:         $DB->update_record('course', $c1);",
          "192:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
          "193:         $this->assertEquals('ABC', $c2->idnumber);",
          "194:     }",
          "196:     public function test_restore_idnumber_in_existing_course_without_permissions() {",
          "197:         global $DB;",
          "198:         $this->resetAfterTest();",
          "199:         $dg = $this->getDataGenerator();",
          "200:         $u1 = $dg->create_user();",
          "202:         $managers = get_archetype_roles('manager');",
          "203:         $manager = array_shift($managers);",
          "204:         $roleid = $this->create_role_with_caps('moodle/course:changeidnumber', CAP_PROHIBIT);",
          "205:         $dg->role_assign($manager->id, $u1->id);",
          "206:         $dg->role_assign($roleid, $u1->id);",
          "208:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "209:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
          "210:         $backupid = $this->backup_course($c1->id);",
          "212:         $c1->idnumber = 'XXX';",
          "213:         $DB->update_record('course', $c1);",
          "216:         $c2 = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "217:         $this->assertEquals('DEF', $c2->idnumber);",
          "218:     }",
          "220:     public function test_restore_course_info_in_new_course() {",
          "221:         global $DB;",
          "222:         $this->resetAfterTest();",
          "223:         $dg = $this->getDataGenerator();",
          "225:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "226:         $backupid = $this->backup_course($c1->id);",
          "229:         $c2 = $this->restore_to_new_course($backupid);",
          "230:         $this->assertEquals('SN_1', $c2->shortname);",
          "231:         $this->assertEquals('FN copy 1', $c2->fullname);",
          "232:         $this->assertEquals('DESC', $c2->summary);",
          "233:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
          "234:     }",
          "236:     public function test_restore_course_info_in_existing_course() {",
          "237:         global $DB;",
          "238:         $this->resetAfterTest();",
          "239:         $dg = $this->getDataGenerator();",
          "241:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "242:         $c2 = $dg->create_course(['shortname' => 'A', 'fullname' => 'B', 'summary' => 'C', 'summaryformat' => FORMAT_PLAIN]);",
          "243:         $backupid = $this->backup_course($c1->id);",
          "246:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
          "247:         $this->assertEquals('SN_1', $c2->shortname);",
          "248:         $this->assertEquals('FN copy 1', $c2->fullname);",
          "249:         $this->assertEquals('DESC', $c2->summary);",
          "250:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
          "251:     }",
          "253:     public function test_restore_course_shortname_in_existing_course_without_permissions() {",
          "254:         global $DB;",
          "255:         $this->resetAfterTest();",
          "256:         $dg = $this->getDataGenerator();",
          "257:         $u1 = $dg->create_user();",
          "259:         $managers = get_archetype_roles('manager');",
          "260:         $manager = array_shift($managers);",
          "261:         $roleid = $this->create_role_with_caps('moodle/course:changeshortname', CAP_PROHIBIT);",
          "262:         $dg->role_assign($manager->id, $u1->id);",
          "263:         $dg->role_assign($roleid, $u1->id);",
          "265:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "266:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
          "269:         $backupid = $this->backup_course($c1->id);",
          "270:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "271:         $this->assertEquals($c2->shortname, $restored->shortname);",
          "272:         $this->assertEquals('FN copy 1', $restored->fullname);",
          "273:         $this->assertEquals('DESC', $restored->summary);",
          "274:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
          "275:     }",
          "277:     public function test_restore_course_fullname_in_existing_course_without_permissions() {",
          "278:         global $DB;",
          "279:         $this->resetAfterTest();",
          "280:         $dg = $this->getDataGenerator();",
          "281:         $u1 = $dg->create_user();",
          "283:         $managers = get_archetype_roles('manager');",
          "284:         $manager = array_shift($managers);",
          "285:         $roleid = $this->create_role_with_caps('moodle/course:changefullname', CAP_PROHIBIT);",
          "286:         $dg->role_assign($manager->id, $u1->id);",
          "287:         $dg->role_assign($roleid, $u1->id);",
          "289:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "290:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
          "293:         $backupid = $this->backup_course($c1->id);",
          "294:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "295:         $this->assertEquals('SN_1', $restored->shortname);",
          "296:         $this->assertEquals($c2->fullname, $restored->fullname);",
          "297:         $this->assertEquals('DESC', $restored->summary);",
          "298:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
          "299:     }",
          "301:     public function test_restore_course_summary_in_existing_course_without_permissions() {",
          "302:         global $DB;",
          "303:         $this->resetAfterTest();",
          "304:         $dg = $this->getDataGenerator();",
          "305:         $u1 = $dg->create_user();",
          "307:         $managers = get_archetype_roles('manager');",
          "308:         $manager = array_shift($managers);",
          "309:         $roleid = $this->create_role_with_caps('moodle/course:changesummary', CAP_PROHIBIT);",
          "310:         $dg->role_assign($manager->id, $u1->id);",
          "311:         $dg->role_assign($roleid, $u1->id);",
          "313:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "314:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
          "317:         $backupid = $this->backup_course($c1->id);",
          "318:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "319:         $this->assertEquals('SN_1', $restored->shortname);",
          "320:         $this->assertEquals('FN copy 1', $restored->fullname);",
          "321:         $this->assertEquals($c2->summary, $restored->summary);",
          "322:         $this->assertEquals($c2->summaryformat, $restored->summaryformat);",
          "323:     }",
          "324: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "188a3e7f709e7939506f329dd94ad47102485cdc",
      "candidate_info": {
        "commit_hash": "188a3e7f709e7939506f329dd94ad47102485cdc",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/188a3e7f709e7939506f329dd94ad47102485cdc",
        "files": [
          "course/tests/restore_test.php"
        ],
        "message": "MDL-51369 course: Adding tests to cover restoring course info",
        "before_after_code_files": [
          "course/tests/restore_test.php||course/tests/restore_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "course/tests/restore_test.php||course/tests/restore_test.php"
          ],
          "candidate": [
            "course/tests/restore_test.php||course/tests/restore_test.php"
          ]
        }
      },
      "candidate_diff": {
        "course/tests/restore_test.php||course/tests/restore_test.php": [
          "File: course/tests/restore_test.php -> course/tests/restore_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "26: global $CFG;",
          "28: require_once($CFG->dirroot . '/backup/util/includes/backup_includes.php');",
          "29: require_once($CFG->dirroot . '/backup/util/includes/restore_includes.php');",
          "38: class core_restore_backup_testcase extends advanced_testcase {",
          "47:     protected function backup_course($courseid, $userid = 2) {",
          "48:         globaL $CFG;",
          "49:         $packer = get_file_packer('application/vnd.moodle.backup');",
          "51:         $bc = new backup_controller(backup::TYPE_1COURSE, $courseid, backup::FORMAT_MOODLE, backup::INTERACTIVE_NO,",
          "52:             backup::MODE_GENERAL, $userid);",
          "53:         $bc->execute_plan();",
          "55:         $results = $bc->get_results();",
          "56:         $results['backup_destination']->extract_to_pathname($packer, \"$CFG->tempdir/backup/core_course_testcase\");",
          "58:         $bc->destroy();",
          "59:         unset($bc);",
          "60:         return 'core_course_testcase';",
          "61:     }",
          "70:     protected function create_role_with_caps($caps, $perm) {",
          "71:         $caps = (array) $caps;",
          "72:         $dg = $this->getDataGenerator();",
          "73:         $roleid = $dg->create_role();",
          "74:         foreach ($caps as $cap) {",
          "75:             assign_capability($cap, $perm, $roleid, context_system::instance()->id, true);",
          "76:         }",
          "77:         accesslib_clear_all_caches_for_unit_testing();",
          "78:         return $roleid;",
          "79:     }",
          "89:     protected function restore_course($backupid, $courseid, $userid) {",
          "90:         global $DB;",
          "92:         $target = backup::TARGET_CURRENT_ADDING;",
          "93:         if (!$courseid) {",
          "94:             $target = backup::TARGET_NEW_COURSE;",
          "95:             $categoryid = $DB->get_field_sql(\"SELECT MIN(id) FROM {course_categories}\");",
          "96:             $courseid = restore_dbops::create_new_course('Tmp', 'tmp', $categoryid);",
          "97:         }",
          "99:         $rc = new restore_controller($backupid, $courseid, backup::INTERACTIVE_NO, backup::MODE_GENERAL, $userid, $target);",
          "100:         $target == backup::TARGET_NEW_COURSE ?: $rc->get_plan()->get_setting('overwrite_conf')->set_value(true);",
          "101:         $rc->execute_precheck();",
          "102:         $rc->execute_plan();",
          "104:         $course = $DB->get_record('course', array('id' => $rc->get_courseid()));",
          "106:         $rc->destroy();",
          "107:         unset($rc);",
          "108:         return $course;",
          "109:     }",
          "119:     protected function restore_to_existing_course($backupid, $courseid, $userid = 2) {",
          "120:         return $this->restore_course($backupid, $courseid, $userid);",
          "121:     }",
          "130:     protected function restore_to_new_course($backupid, $userid = 2) {",
          "131:         return $this->restore_course($backupid, 0, $userid);",
          "132:     }",
          "134:     public function test_restore_existing_idnumber_in_new_course() {",
          "135:         $this->resetAfterTest();",
          "137:         $dg = $this->getDataGenerator();",
          "138:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "139:         $backupid = $this->backup_course($c1->id);",
          "140:         $c2 = $this->restore_to_new_course($backupid);",
          "143:         $this->assertEquals('', $c2->idnumber);",
          "144:     }",
          "146:     public function test_restore_non_existing_idnumber_in_new_course() {",
          "147:         global $DB;",
          "148:         $this->resetAfterTest();",
          "150:         $dg = $this->getDataGenerator();",
          "151:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "152:         $backupid = $this->backup_course($c1->id);",
          "154:         $c1->idnumber = 'BCD';",
          "155:         $DB->update_record('course', $c1);",
          "158:         $c2 = $this->restore_to_new_course($backupid);",
          "159:         $this->assertEquals('ABC', $c2->idnumber);",
          "160:     }",
          "162:     public function test_restore_existing_idnumber_in_existing_course() {",
          "163:         global $DB;",
          "164:         $this->resetAfterTest();",
          "166:         $dg = $this->getDataGenerator();",
          "167:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "168:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
          "169:         $backupid = $this->backup_course($c1->id);",
          "172:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
          "173:         $this->assertEquals('DEF', $c2->idnumber);",
          "175:         $c1 = $DB->get_record('course', array('id' => $c1->id));",
          "176:         $this->assertEquals('ABC', $c1->idnumber);",
          "177:     }",
          "179:     public function test_restore_non_existing_idnumber_in_existing_course() {",
          "180:         global $DB;",
          "181:         $this->resetAfterTest();",
          "183:         $dg = $this->getDataGenerator();",
          "184:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "185:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
          "186:         $backupid = $this->backup_course($c1->id);",
          "188:         $c1->idnumber = 'XXX';",
          "189:         $DB->update_record('course', $c1);",
          "192:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
          "193:         $this->assertEquals('ABC', $c2->idnumber);",
          "194:     }",
          "196:     public function test_restore_idnumber_in_existing_course_without_permissions() {",
          "197:         global $DB;",
          "198:         $this->resetAfterTest();",
          "199:         $dg = $this->getDataGenerator();",
          "200:         $u1 = $dg->create_user();",
          "202:         $managers = get_archetype_roles('manager');",
          "203:         $manager = array_shift($managers);",
          "204:         $roleid = $this->create_role_with_caps('moodle/course:changeidnumber', CAP_PROHIBIT);",
          "205:         $dg->role_assign($manager->id, $u1->id);",
          "206:         $dg->role_assign($roleid, $u1->id);",
          "208:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "209:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
          "210:         $backupid = $this->backup_course($c1->id);",
          "212:         $c1->idnumber = 'XXX';",
          "213:         $DB->update_record('course', $c1);",
          "216:         $c2 = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "217:         $this->assertEquals('DEF', $c2->idnumber);",
          "218:     }",
          "220:     public function test_restore_course_info_in_new_course() {",
          "221:         global $DB;",
          "222:         $this->resetAfterTest();",
          "223:         $dg = $this->getDataGenerator();",
          "225:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "226:         $backupid = $this->backup_course($c1->id);",
          "229:         $c2 = $this->restore_to_new_course($backupid);",
          "230:         $this->assertEquals('SN_1', $c2->shortname);",
          "231:         $this->assertEquals('FN copy 1', $c2->fullname);",
          "232:         $this->assertEquals('DESC', $c2->summary);",
          "233:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
          "234:     }",
          "236:     public function test_restore_course_info_in_existing_course() {",
          "237:         global $DB;",
          "238:         $this->resetAfterTest();",
          "239:         $dg = $this->getDataGenerator();",
          "241:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "242:         $c2 = $dg->create_course(['shortname' => 'A', 'fullname' => 'B', 'summary' => 'C', 'summaryformat' => FORMAT_PLAIN]);",
          "243:         $backupid = $this->backup_course($c1->id);",
          "246:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
          "247:         $this->assertEquals('SN_1', $c2->shortname);",
          "248:         $this->assertEquals('FN copy 1', $c2->fullname);",
          "249:         $this->assertEquals('DESC', $c2->summary);",
          "250:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
          "251:     }",
          "253:     public function test_restore_course_shortname_in_existing_course_without_permissions() {",
          "254:         global $DB;",
          "255:         $this->resetAfterTest();",
          "256:         $dg = $this->getDataGenerator();",
          "257:         $u1 = $dg->create_user();",
          "259:         $managers = get_archetype_roles('manager');",
          "260:         $manager = array_shift($managers);",
          "261:         $roleid = $this->create_role_with_caps('moodle/course:changeshortname', CAP_PROHIBIT);",
          "262:         $dg->role_assign($manager->id, $u1->id);",
          "263:         $dg->role_assign($roleid, $u1->id);",
          "265:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "266:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
          "269:         $backupid = $this->backup_course($c1->id);",
          "270:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "271:         $this->assertEquals($c2->shortname, $restored->shortname);",
          "272:         $this->assertEquals('FN copy 1', $restored->fullname);",
          "273:         $this->assertEquals('DESC', $restored->summary);",
          "274:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
          "275:     }",
          "277:     public function test_restore_course_fullname_in_existing_course_without_permissions() {",
          "278:         global $DB;",
          "279:         $this->resetAfterTest();",
          "280:         $dg = $this->getDataGenerator();",
          "281:         $u1 = $dg->create_user();",
          "283:         $managers = get_archetype_roles('manager');",
          "284:         $manager = array_shift($managers);",
          "285:         $roleid = $this->create_role_with_caps('moodle/course:changefullname', CAP_PROHIBIT);",
          "286:         $dg->role_assign($manager->id, $u1->id);",
          "287:         $dg->role_assign($roleid, $u1->id);",
          "289:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "290:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
          "293:         $backupid = $this->backup_course($c1->id);",
          "294:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "295:         $this->assertEquals('SN_1', $restored->shortname);",
          "296:         $this->assertEquals($c2->fullname, $restored->fullname);",
          "297:         $this->assertEquals('DESC', $restored->summary);",
          "298:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
          "299:     }",
          "301:     public function test_restore_course_summary_in_existing_course_without_permissions() {",
          "302:         global $DB;",
          "303:         $this->resetAfterTest();",
          "304:         $dg = $this->getDataGenerator();",
          "305:         $u1 = $dg->create_user();",
          "307:         $managers = get_archetype_roles('manager');",
          "308:         $manager = array_shift($managers);",
          "309:         $roleid = $this->create_role_with_caps('moodle/course:changesummary', CAP_PROHIBIT);",
          "310:         $dg->role_assign($manager->id, $u1->id);",
          "311:         $dg->role_assign($roleid, $u1->id);",
          "313:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "314:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
          "317:         $backupid = $this->backup_course($c1->id);",
          "318:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "319:         $this->assertEquals('SN_1', $restored->shortname);",
          "320:         $this->assertEquals('FN copy 1', $restored->fullname);",
          "321:         $this->assertEquals($c2->summary, $restored->summary);",
          "322:         $this->assertEquals($c2->summaryformat, $restored->summaryformat);",
          "323:     }",
          "324: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "897f31a5d0828fbf50145925a5f28cf8a67a6733",
      "candidate_info": {
        "commit_hash": "897f31a5d0828fbf50145925a5f28cf8a67a6733",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/897f31a5d0828fbf50145925a5f28cf8a67a6733",
        "files": [
          "course/tests/restore_test.php"
        ],
        "message": "MDL-51369 course: Adding tests to cover restoring course info",
        "before_after_code_files": [
          "course/tests/restore_test.php||course/tests/restore_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "course/tests/restore_test.php||course/tests/restore_test.php"
          ],
          "candidate": [
            "course/tests/restore_test.php||course/tests/restore_test.php"
          ]
        }
      },
      "candidate_diff": {
        "course/tests/restore_test.php||course/tests/restore_test.php": [
          "File: course/tests/restore_test.php -> course/tests/restore_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "26: global $CFG;",
          "28: require_once($CFG->dirroot . '/backup/util/includes/backup_includes.php');",
          "29: require_once($CFG->dirroot . '/backup/util/includes/restore_includes.php');",
          "38: class core_restore_backup_testcase extends advanced_testcase {",
          "47:     protected function backup_course($courseid, $userid = 2) {",
          "48:         globaL $CFG;",
          "49:         $packer = get_file_packer('application/vnd.moodle.backup');",
          "51:         $bc = new backup_controller(backup::TYPE_1COURSE, $courseid, backup::FORMAT_MOODLE, backup::INTERACTIVE_NO,",
          "52:             backup::MODE_GENERAL, $userid);",
          "53:         $bc->execute_plan();",
          "55:         $results = $bc->get_results();",
          "56:         $results['backup_destination']->extract_to_pathname($packer, \"$CFG->tempdir/backup/core_course_testcase\");",
          "58:         $bc->destroy();",
          "59:         unset($bc);",
          "60:         return 'core_course_testcase';",
          "61:     }",
          "70:     protected function create_role_with_caps($caps, $perm) {",
          "71:         $caps = (array) $caps;",
          "72:         $dg = $this->getDataGenerator();",
          "73:         $roleid = $dg->create_role();",
          "74:         foreach ($caps as $cap) {",
          "75:             assign_capability($cap, $perm, $roleid, context_system::instance()->id, true);",
          "76:         }",
          "77:         accesslib_clear_all_caches_for_unit_testing();",
          "78:         return $roleid;",
          "79:     }",
          "89:     protected function restore_course($backupid, $courseid, $userid) {",
          "90:         global $DB;",
          "92:         $target = backup::TARGET_CURRENT_ADDING;",
          "93:         if (!$courseid) {",
          "94:             $target = backup::TARGET_NEW_COURSE;",
          "95:             $categoryid = $DB->get_field_sql(\"SELECT MIN(id) FROM {course_categories}\");",
          "96:             $courseid = restore_dbops::create_new_course('Tmp', 'tmp', $categoryid);",
          "97:         }",
          "99:         $rc = new restore_controller($backupid, $courseid, backup::INTERACTIVE_NO, backup::MODE_GENERAL, $userid, $target);",
          "100:         $target == backup::TARGET_NEW_COURSE ?: $rc->get_plan()->get_setting('overwrite_conf')->set_value(true);",
          "101:         $rc->execute_precheck();",
          "102:         $rc->execute_plan();",
          "104:         $course = $DB->get_record('course', array('id' => $rc->get_courseid()));",
          "106:         $rc->destroy();",
          "107:         unset($rc);",
          "108:         return $course;",
          "109:     }",
          "119:     protected function restore_to_existing_course($backupid, $courseid, $userid = 2) {",
          "120:         return $this->restore_course($backupid, $courseid, $userid);",
          "121:     }",
          "130:     protected function restore_to_new_course($backupid, $userid = 2) {",
          "131:         return $this->restore_course($backupid, 0, $userid);",
          "132:     }",
          "134:     public function test_restore_existing_idnumber_in_new_course() {",
          "135:         $this->resetAfterTest();",
          "137:         $dg = $this->getDataGenerator();",
          "138:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "139:         $backupid = $this->backup_course($c1->id);",
          "140:         $c2 = $this->restore_to_new_course($backupid);",
          "143:         $this->assertEquals('', $c2->idnumber);",
          "144:     }",
          "146:     public function test_restore_non_existing_idnumber_in_new_course() {",
          "147:         global $DB;",
          "148:         $this->resetAfterTest();",
          "150:         $dg = $this->getDataGenerator();",
          "151:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "152:         $backupid = $this->backup_course($c1->id);",
          "154:         $c1->idnumber = 'BCD';",
          "155:         $DB->update_record('course', $c1);",
          "158:         $c2 = $this->restore_to_new_course($backupid);",
          "159:         $this->assertEquals('ABC', $c2->idnumber);",
          "160:     }",
          "162:     public function test_restore_existing_idnumber_in_existing_course() {",
          "163:         global $DB;",
          "164:         $this->resetAfterTest();",
          "166:         $dg = $this->getDataGenerator();",
          "167:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "168:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
          "169:         $backupid = $this->backup_course($c1->id);",
          "172:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
          "173:         $this->assertEquals('DEF', $c2->idnumber);",
          "175:         $c1 = $DB->get_record('course', array('id' => $c1->id));",
          "176:         $this->assertEquals('ABC', $c1->idnumber);",
          "177:     }",
          "179:     public function test_restore_non_existing_idnumber_in_existing_course() {",
          "180:         global $DB;",
          "181:         $this->resetAfterTest();",
          "183:         $dg = $this->getDataGenerator();",
          "184:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "185:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
          "186:         $backupid = $this->backup_course($c1->id);",
          "188:         $c1->idnumber = 'XXX';",
          "189:         $DB->update_record('course', $c1);",
          "192:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
          "193:         $this->assertEquals('ABC', $c2->idnumber);",
          "194:     }",
          "196:     public function test_restore_idnumber_in_existing_course_without_permissions() {",
          "197:         global $DB;",
          "198:         $this->resetAfterTest();",
          "199:         $dg = $this->getDataGenerator();",
          "200:         $u1 = $dg->create_user();",
          "202:         $managers = get_archetype_roles('manager');",
          "203:         $manager = array_shift($managers);",
          "204:         $roleid = $this->create_role_with_caps('moodle/course:changeidnumber', CAP_PROHIBIT);",
          "205:         $dg->role_assign($manager->id, $u1->id);",
          "206:         $dg->role_assign($roleid, $u1->id);",
          "208:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "209:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
          "210:         $backupid = $this->backup_course($c1->id);",
          "212:         $c1->idnumber = 'XXX';",
          "213:         $DB->update_record('course', $c1);",
          "216:         $c2 = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "217:         $this->assertEquals('DEF', $c2->idnumber);",
          "218:     }",
          "220:     public function test_restore_course_info_in_new_course() {",
          "221:         global $DB;",
          "222:         $this->resetAfterTest();",
          "223:         $dg = $this->getDataGenerator();",
          "225:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "226:         $backupid = $this->backup_course($c1->id);",
          "229:         $c2 = $this->restore_to_new_course($backupid);",
          "230:         $this->assertEquals('SN_1', $c2->shortname);",
          "231:         $this->assertEquals('FN copy 1', $c2->fullname);",
          "232:         $this->assertEquals('DESC', $c2->summary);",
          "233:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
          "234:     }",
          "236:     public function test_restore_course_info_in_existing_course() {",
          "237:         global $DB;",
          "238:         $this->resetAfterTest();",
          "239:         $dg = $this->getDataGenerator();",
          "241:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "242:         $c2 = $dg->create_course(['shortname' => 'A', 'fullname' => 'B', 'summary' => 'C', 'summaryformat' => FORMAT_PLAIN]);",
          "243:         $backupid = $this->backup_course($c1->id);",
          "246:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
          "247:         $this->assertEquals('SN_1', $c2->shortname);",
          "248:         $this->assertEquals('FN copy 1', $c2->fullname);",
          "249:         $this->assertEquals('DESC', $c2->summary);",
          "250:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
          "251:     }",
          "253:     public function test_restore_course_shortname_in_existing_course_without_permissions() {",
          "254:         global $DB;",
          "255:         $this->resetAfterTest();",
          "256:         $dg = $this->getDataGenerator();",
          "257:         $u1 = $dg->create_user();",
          "259:         $managers = get_archetype_roles('manager');",
          "260:         $manager = array_shift($managers);",
          "261:         $roleid = $this->create_role_with_caps('moodle/course:changeshortname', CAP_PROHIBIT);",
          "262:         $dg->role_assign($manager->id, $u1->id);",
          "263:         $dg->role_assign($roleid, $u1->id);",
          "265:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "266:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
          "269:         $backupid = $this->backup_course($c1->id);",
          "270:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "271:         $this->assertEquals($c2->shortname, $restored->shortname);",
          "272:         $this->assertEquals('FN copy 1', $restored->fullname);",
          "273:         $this->assertEquals('DESC', $restored->summary);",
          "274:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
          "275:     }",
          "277:     public function test_restore_course_fullname_in_existing_course_without_permissions() {",
          "278:         global $DB;",
          "279:         $this->resetAfterTest();",
          "280:         $dg = $this->getDataGenerator();",
          "281:         $u1 = $dg->create_user();",
          "283:         $managers = get_archetype_roles('manager');",
          "284:         $manager = array_shift($managers);",
          "285:         $roleid = $this->create_role_with_caps('moodle/course:changefullname', CAP_PROHIBIT);",
          "286:         $dg->role_assign($manager->id, $u1->id);",
          "287:         $dg->role_assign($roleid, $u1->id);",
          "289:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "290:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
          "293:         $backupid = $this->backup_course($c1->id);",
          "294:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "295:         $this->assertEquals('SN_1', $restored->shortname);",
          "296:         $this->assertEquals($c2->fullname, $restored->fullname);",
          "297:         $this->assertEquals('DESC', $restored->summary);",
          "298:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
          "299:     }",
          "301:     public function test_restore_course_summary_in_existing_course_without_permissions() {",
          "302:         global $DB;",
          "303:         $this->resetAfterTest();",
          "304:         $dg = $this->getDataGenerator();",
          "305:         $u1 = $dg->create_user();",
          "307:         $managers = get_archetype_roles('manager');",
          "308:         $manager = array_shift($managers);",
          "309:         $roleid = $this->create_role_with_caps('moodle/course:changesummary', CAP_PROHIBIT);",
          "310:         $dg->role_assign($manager->id, $u1->id);",
          "311:         $dg->role_assign($roleid, $u1->id);",
          "313:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "314:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
          "317:         $backupid = $this->backup_course($c1->id);",
          "318:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "319:         $this->assertEquals('SN_1', $restored->shortname);",
          "320:         $this->assertEquals('FN copy 1', $restored->fullname);",
          "321:         $this->assertEquals($c2->summary, $restored->summary);",
          "322:         $this->assertEquals($c2->summaryformat, $restored->summaryformat);",
          "323:     }",
          "324: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}