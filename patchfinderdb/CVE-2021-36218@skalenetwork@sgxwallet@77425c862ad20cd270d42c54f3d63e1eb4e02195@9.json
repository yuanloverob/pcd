{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b3f3290edcc7d272ecf7faacaa7f8fe10f1678f0",
      "candidate_info": {
        "commit_hash": "b3f3290edcc7d272ecf7faacaa7f8fe10f1678f0",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/b3f3290edcc7d272ecf7faacaa7f8fe10f1678f0",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3151-cannot-decrypt-sgx-key",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     uint32_t hex_aes_key_length = SGX_AESGCM_KEY_SIZE * 2;",
          "203:     carray2Hex((uint8_t*) SEK_raw, SGX_AESGCM_KEY_SIZE, SEK_hex);",
          "205:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, hex_aes_key_length + 1);",
          "212:     sgx_attributes_t attribute_mask;",
          "213:     attribute_mask.flags = 0xfffffffffffffff3;",
          "214:     attribute_mask.xfrm = 0x0;",
          "",
          "[Removed Lines]",
          "207:     for (uint8_t i = 0; i < 16; i++) {",
          "208:         AES_key[i] = SEK_raw[i];",
          "209:     }",
          "",
          "[Added Lines]",
          "204:     memcpy(AES_key, SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:                                         (sgx_sealed_data_t *) encrypted_SEK);",
          "219:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
          "223:     CHECK_STATE(encrypt_text_length = hex_aes_key_length + 1);",
          "227:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
          "231:     CHECK_STATE(add_text_length == 0);",
          "232:     CHECK_STATE(sgx_is_within_enclave(encrypted_SEK,sizeof(sgx_sealed_data_t)));",
          "234:     CHECK_STATUS(\"seal/unseal SEK failed after SEK generation in unseal\");",
          "",
          "[Removed Lines]",
          "221:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len(encrypted_SEK);",
          "225:     int len = 0;",
          "228:     int decLen = BUF_LEN;",
          "230:     uint32_t add_text_length = sgx_get_add_mac_txt_len(encrypted_SEK);",
          "233:     status = sgx_unseal_data(encrypted_SEK, NULL, NULL, unsealedKey, &decLen );",
          "",
          "[Added Lines]",
          "217:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_SEK);",
          "223:     uint32_t decLen = BUF_LEN;",
          "225:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_SEK);",
          "228:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_SEK, NULL, NULL,",
          "229:                              (uint8_t *) unsealedKey, &decLen );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d572559763342ef5b87a0159914f0ee797733407",
      "candidate_info": {
        "commit_hash": "d572559763342ef5b87a0159914f0ee797733407",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/d572559763342ef5b87a0159914f0ee797733407",
        "files": [
          "BLSCrypto.cpp",
          "DKGCrypto.cpp",
          "SEKManager.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "testw.cpp"
        ],
        "message": "SKALE-2454-add-logs-to-enclave",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "SEKManager.cpp||SEKManager.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:     unsigned int encryptedLen = 0;",
          "326:     spdlog::debug(\"errStatus is {}\", *errStatus);",
          "327:     spdlog::debug(\" errMsg is \", errMsg->data());",
          "",
          "[Removed Lines]",
          "324:     status = encrypt_key_aes(eid, errStatus, errMsg->data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
          "",
          "[Added Lines]",
          "324:     status = trustedEncryptKeyAES(eid, errStatus, errMsg->data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:     char *plaintextKey = (char *) calloc(BUF_LEN, 1);",
          "366:     if (status != SGX_SUCCESS) {",
          "367:         return nullptr;",
          "",
          "[Removed Lines]",
          "364:     status = decrypt_key_aes(eid, errStatus, errMsg, decoded, decodedLen, plaintextKey);",
          "",
          "[Added Lines]",
          "364:     status = trustedDecryptKeyAES(eid, errStatus, errMsg, decoded, decodedLen, plaintextKey);",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:     if (!encryptKeys)",
          "381:         decrypt_key(eid, &errStatus, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "382:     else",
          "384:     if (errStatus != 0) {",
          "385:         throw SGXException(/*ERROR_IN_ENCLAVE*/ errStatus, \"decrypt key failed in enclave\");",
          "386:     }",
          "",
          "[Removed Lines]",
          "383:         decrypt_key_aes(eid, &errStatus, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "",
          "[Added Lines]",
          "383:         trustedDecryptKeyAES(eid, &errStatus, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "",
          "---------------"
        ],
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   std::string key = TEST_VALUE;",
          "57:   if ( status != 0){",
          "58:     std::cerr << \"encrypt test key failed with status \" << status << std::endl;",
          "59:     throw SGXException(status, errMsg.data()) ;",
          "",
          "[Removed Lines]",
          "56:   status = encrypt_key_aes(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key, &enc_len);",
          "",
          "[Added Lines]",
          "56:   status = trustedEncryptKeyAES(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key, &enc_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:       throw SGXException(status, errMsg.data());",
          "105:     }",
          "108:     if (status != SGX_SUCCESS || err_status != 0){",
          "109:       spdlog::error(\"failed to decrypt test key\" );",
          "110:       spdlog::error(errMsg.data());",
          "",
          "[Removed Lines]",
          "107:     status = decrypt_key_aes(eid, &err_status, errMsg.data(), encr_test_key.data(), len, decr_key.data());",
          "",
          "[Added Lines]",
          "107:     status = trustedDecryptKeyAES(eid, &err_status, errMsg.data(), encr_test_key.data(), len, decr_key.data());",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1219: }",
          "1222:                      uint8_t *encrypted_key, uint32_t *enc_len) {",
          "",
          "[Removed Lines]",
          "1221: void encrypt_key_aes(int *errStatus, char *err_string, const char *key,",
          "",
          "[Added Lines]",
          "1221: void trustedEncryptKeyAES(int *errStatus, char *err_string, const char *key,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1275: }",
          "1278:                      uint32_t enc_len, char *key) {",
          "1280:     init();",
          "",
          "[Removed Lines]",
          "1277: void decrypt_key_aes(int *errStatus, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "1277: void trustedDecryptKeyAES(int *errStatus, char *err_string, uint8_t *encrypted_key,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:                                 [user_check] uint8_t* sig_v,",
          "213:                                 int base);",
          "216:                                 [user_check] int *errStatus,",
          "217:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "218:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
          "219:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "220:                                 [user_check] uint32_t *enc_len);",
          "223:                                 [user_check] int *errStatus,",
          "224:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "225:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "215:                 public void encrypt_key_aes (",
          "222:                 public void decrypt_key_aes (",
          "",
          "[Added Lines]",
          "215:                 public void trustedEncryptKeyAES (",
          "222:                 public void trustedDecryptKeyAES (",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1153:     string key = \"123456789\";",
          "1154:     vector<uint8_t> encrypted_key(BUF_LEN, 0);",
          "1158:     REQUIRE(status == 0);",
          "1161:     vector<char> decr_key(BUF_LEN, 0);",
          "1164:     REQUIRE(status == 0);",
          "",
          "[Removed Lines]",
          "1156:     status = encrypt_key_aes(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key.data(), &enc_len);",
          "1162:     status = decrypt_key_aes(eid, &errStatus, errMsg.data(), encrypted_key.data(), enc_len, decr_key.data());",
          "",
          "[Added Lines]",
          "1156:     status = trustedEncryptKeyAES(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key.data(), &enc_len);",
          "1162:     status = trustedDecryptKeyAES(eid, &errStatus, errMsg.data(), encrypted_key.data(), enc_len, decr_key.data());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0709a53f83eda64fc52828718de81954b3ad5f63",
      "candidate_info": {
        "commit_hash": "0709a53f83eda64fc52828718de81954b3ad5f63",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/0709a53f83eda64fc52828718de81954b3ad5f63",
        "files": [
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "SGXWalletServer.cpp",
          "TestUtils.cpp",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-2892 fix tests",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "TestUtils.cpp||TestUtils.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"SGXWalletServer.hpp\"",
          "31: #include \"SGXException.h\"",
          "35: #include \"third_party/spdlog/spdlog.h\"",
          "36: #include \"common.h\"",
          "",
          "[Removed Lines]",
          "33: #include <libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:     return output;",
          "74: }",
          "76: string gen_dkg_poly(int _t) {",
          "77:     vector<char> errMsg(1024, 0);",
          "78:     int errStatus = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: string convertHexToDec(const string& hex_str) {",
          "75:     mpz_t dec;",
          "76:     mpz_init(dec);",
          "78:     string ret = \"\";",
          "80:     try {",
          "81:         if (mpz_set_str(dec, hex_str.c_str(), 16) == -1) {",
          "82:             mpz_clear(dec);",
          "83:             return ret;",
          "84:         }",
          "86:         char arr[mpz_sizeinbase(dec, 10) + 2];",
          "87:         char *result = mpz_get_str(arr, 10, dec);",
          "88:         ret = result;",
          "89:     } catch (exception &e) {",
          "90:         mpz_clear(dec);",
          "91:         throw SGXException(INCORRECT_STRING_CONVERSION, e.what());",
          "92:     } catch (...) {",
          "93:         mpz_clear(dec);",
          "94:         throw SGXException(UNKNOWN_ERROR, \"\");",
          "95:     }",
          "97:     return ret;",
          "98: }",
          "100: string convertG2ToString(const libff::alt_bn128_G2& elem, int base, const string& delim) {",
          "101:     string result = \"\";",
          "103:     try {",
          "104:         result += ConvertToString(elem.X.c0);",
          "105:         result += delim;",
          "106:         result += ConvertToString(elem.X.c1);",
          "107:         result += delim;",
          "108:         result += ConvertToString(elem.Y.c0);",
          "109:         result += delim;",
          "110:         result += ConvertToString(elem.Y.c1);",
          "112:         return result;",
          "114:     } catch (exception &e) {",
          "115:         throw SGXException(INCORRECT_STRING_CONVERSION, e.what());",
          "116:         return result;",
          "117:     } catch (...) {",
          "118:         throw SGXException(UNKNOWN_ERROR, \"\");",
          "119:         return result;",
          "120:     }",
          "122:     return result;",
          "123: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:     return pubKeyVect;",
          "319: }",
          "347: vector<string> calculateAllBlsPublicKeys(const vector<string>& public_shares) {",
          "348:     size_t n = public_shares.size();",
          "349:     size_t t = public_shares[0].length() / 256;",
          "350:     uint64_t share_length = 256;",
          "351:     uint8_t coord_length = 64;",
          "354:     vector<libff::alt_bn128_G2> public_keys(n, libff::alt_bn128_G2::zero());",
          "357:     for (size_t i = 0; i < n; ++i) {",
          "358:         for (size_t j = 0; j < t; ++j) {",
          "359:             libff::alt_bn128_G2 public_share;",
          "362:             string x_c0_str = convertHexToDec(public_shares[i].substr(pos0, coord_length));",
          "363:             string x_c1_str = convertHexToDec(public_shares[i].substr(pos0 + coord_length, coord_length));",
          "364:             string y_c0_str = convertHexToDec(public_shares[i].substr(pos0 + 2 * coord_length, coord_length));",
          "365:             string y_c1_str = convertHexToDec(public_shares[i].substr(pos0 + 3 * coord_length, coord_length));",
          "367:             public_share.X.c0 = libff::alt_bn128_Fq(x_c0_str.c_str());",
          "368:             public_share.X.c1 = libff::alt_bn128_Fq(x_c1_str.c_str());",
          "369:             public_share.Y.c0 = libff::alt_bn128_Fq(y_c0_str.c_str());",
          "370:             public_share.Y.c1 = libff::alt_bn128_Fq(y_c1_str.c_str());",
          "371:             public_share.Z = libff::alt_bn128_Fq2::one();",
          "374:         }",
          "375:     }",
          "377:     for (size_t i = 0; i < n; ++i) {",
          "380:         }",
          "381:     }",
          "383:     return result;",
          "",
          "[Removed Lines]",
          "321: string convertHexToDec(const string& hex_str) {",
          "322:     mpz_t dec;",
          "323:     mpz_init(dec);",
          "325:     string ret = \"\";",
          "327:     try {",
          "328:         if (mpz_set_str(dec, hex_str.c_str(), 16) == -1) {",
          "329:             mpz_clear(dec);",
          "330:             return ret;",
          "331:         }",
          "333:         char arr[mpz_sizeinbase(dec, 10) + 2];",
          "334:         char *result = mpz_get_str(arr, 10, dec);",
          "335:         ret = result;",
          "336:     } catch (exception &e) {",
          "337:         mpz_clear(dec);",
          "338:         throw SGXException(INCORRECT_STRING_CONVERSION, e.what());",
          "339:     } catch (...) {",
          "340:         mpz_clear(dec);",
          "341:         throw SGXException(UNKNOWN_ERROR, \"\");",
          "342:     }",
          "344:     return ret;",
          "345: }",
          "352:     vector<string> result(n);",
          "356:     vector<libff::alt_bn128_G2> public_values(n, libff::alt_bn128_G2::zero());",
          "361:             uint64_t pos0 = share_length * i;",
          "373:             public_values[i] = public_values[i] + public_share;",
          "378:         for (size_t j = 0; j < n; ++j) {",
          "379:             public_keys[i] = public_keys[i] + libff::power(libff::alt_bn128_Fr(j + 1), i) * public_values[j];",
          "",
          "[Added Lines]",
          "378:     vector<libff::alt_bn128_G2> public_values(t, libff::alt_bn128_G2::zero());",
          "383:             uint64_t pos0 = share_length * j;",
          "389:             if (x_c0_str == \"\" || x_c1_str == \"\" || y_c0_str == \"\" || y_c1_str == \"\") {",
          "390:                 return {};",
          "391:             }",
          "399:             public_values[j] = public_values[j] + public_share;",
          "405:         for (size_t j = 0; j < t; ++j) {",
          "406:             public_keys[i] = public_keys[i] + libff::power(libff::alt_bn128_Fr(i + 1), j) * public_values[j];",
          "408:         public_keys[i].to_affine_coordinates();",
          "409:     }",
          "411:     vector<string> result(n);",
          "412:     for (size_t i = 0; i < n; ++i) {",
          "413:         result[i] = convertG2ToString(public_keys[i]);",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <string>",
          "28: #include <vector>",
          "30: using namespace std;",
          "32: string gen_dkg_poly( int _t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include <libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: string convertHexToDec(const string& hex_str);",
          "52: vector<string> calculateAllBlsPublicKeys(const vector<string>& public_shares);",
          "54: bool TestCreateBLSShare( const char * s_shares);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: string convertG2ToString(const libff::alt_bn128_G2& elem, int base = 10, const string& delim = \":\");",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "546:                 throw SGXException(INVALID_DKG_PARAMS, \"Invalid length of public shares parts\");",
          "547:             }",
          "548:         }",
          "549:         vector<string> public_shares(n);",
          "550:         for (int i = 0; i < n; ++i) {",
          "551:             public_shares[i] = publicShares[i].asString();",
          "552:         }",
          "553:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
          "554:         for (int i = 0; i < n; ++i) {",
          "555:             result[\"publicKeys\"][i] = public_keys[i];",
          "556:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557:         if (public_keys.size() != n) {",
          "558:             throw SGXException(UNKNOWN_ERROR, \"\");",
          "559:         }",
          "",
          "---------------"
        ],
        "TestUtils.cpp||TestUtils.cpp": [
          "File: TestUtils.cpp -> TestUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:         secretShares[i] = c.getSecretShare(polyNames[i], pubEthKeys, t, n);",
          "197:         for (uint8_t k = 0; k < t; k++) {",
          "198:             for (uint8_t j = 0; j < 4; j++) {",
          "200:                 pubShares[i] += convertDecToHex(pubShare);",
          "201:             }",
          "202:         }",
          "203:     }",
          "207:     vector <string> secShares(n);",
          "209:     for (int i = 0; i < n; i++)",
          "",
          "[Removed Lines]",
          "199:                 string pubShare = verifVects[i][\"Verification Vector\"][k][j].asString();",
          "205:     int k = 0;",
          "",
          "[Added Lines]",
          "199:                 string pubShare = verifVects[i][\"verificationVector\"][k][j].asString();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:             secShares[i] += secretShares[j][\"secretShare\"].asString().substr(192 * i, 192);",
          "213:             Json::Value verif = c.dkgVerification(pubShares[i], ethKeys[j][\"keyName\"].asString(), secretShare, t, n, j);",
          "214:             CHECK_STATE(verif[\"status\"] == 0);",
          "217:         }",
          "219:     BLSSigShareSet sigShareSet(t, n);",
          "",
          "[Removed Lines]",
          "216:             k++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246:         pubBLSKeys[i] = c.getBLSPublicKeyShare(blsName);",
          "247:         CHECK_STATE(pubBLSKeys[i][\"status\"] == 0);",
          "253:         string hash = SAMPLE_HASH;",
          "254:         blsSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n);",
          "",
          "[Removed Lines]",
          "249:         std::cout << \"HERE\" << std::endl;",
          "251:         CHECK_STATE(pubBLSKeys[i][\"result\"][\"blsPublicKeyShare\"].asString() == blsPublicKeys[\"result\"][\"publicKeys\"][i].asString());",
          "",
          "[Added Lines]",
          "245:         libff::alt_bn128_G2 publicKey(libff::alt_bn128_Fq2(libff::alt_bn128_Fq(pubBLSKeys[i][\"blsPublicKeyShare\"][0].asCString()),",
          "246:                                       libff::alt_bn128_Fq(pubBLSKeys[i][\"blsPublicKeyShare\"][1].asCString())),",
          "247:                                       libff::alt_bn128_Fq2(libff::alt_bn128_Fq(pubBLSKeys[i][\"blsPublicKeyShare\"][2].asCString()),",
          "248:                                       libff::alt_bn128_Fq(pubBLSKeys[i][\"blsPublicKeyShare\"][3].asCString())),",
          "249:                                       libff::alt_bn128_Fq2::one());",
          "251:         string public_key_str = convertG2ToString(publicKey);",
          "253:         CHECK_STATE(public_key_str == blsPublicKeys[\"publicKeys\"][i].asString());",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c"
        ]
      }
    },
    {
      "candidate_hash": "bede0e8ef35681bc4101752ff6cbe8a62d62455b",
      "candidate_info": {
        "commit_hash": "bede0e8ef35681bc4101752ff6cbe8a62d62455b",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/bede0e8ef35681bc4101752ff6cbe8a62d62455b",
        "files": [
          "BLSCrypto.cpp",
          "DKGCrypto.cpp",
          "ECDSACrypto.cpp",
          "ECDSACrypto.h",
          "LevelDB.cpp",
          "SEKManager.cpp",
          "SGXWalletServer.cpp",
          "ServerInit.cpp",
          "testw.cpp"
        ],
        "message": "SKALE-2341 Added tags for older commits",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "ECDSACrypto.h||ECDSACrypto.h",
          "LevelDB.cpp||LevelDB.cpp",
          "SEKManager.cpp||SEKManager.cpp",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "ServerInit.cpp||ServerInit.cpp",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:     status = encrypt_key_aes(eid, errStatus, errMsg->data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
          "329:     if (printDebugInfo) {",
          "332:     }",
          "334:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "330:       spdlog::info(\"errStatus is {}\",*errStatus);",
          "331:       spdlog::info(\" errMsg is \", errMsg->data() );",
          "",
          "[Added Lines]",
          "330:       spdlog::debug(\"errStatus is {}\",*errStatus);",
          "331:       spdlog::debug(\" errMsg is \", errMsg->data() );",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     }",
          "94:     if (printDebugInfo) {",
          "97:     }",
          "99:     uint64_t length = DKG_MAX_SEALED_LEN;",
          "",
          "[Removed Lines]",
          "95:       spdlog::info(\"gen_dkg_secret, status {}\", err_status, \" err msg \", errMsg.data());",
          "96:       spdlog::info(\"in DKGCrypto encr len is {}\", enc_len);",
          "",
          "[Added Lines]",
          "95:       spdlog::debug(\"gen_dkg_secret, status {}\", err_status, \" err msg \", errMsg.data());",
          "96:       spdlog::debug(\"in DKGCrypto encr len is {}\", enc_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:   if (printDebugInfo) {",
          "124:   }",
          "126:   char* public_shares = (char*)calloc(10000, 1);",
          "",
          "[Removed Lines]",
          "123:     spdlog::info(\"got encr poly size {}\", char_traits<char>::length(encryptedPolyHex));",
          "",
          "[Added Lines]",
          "123:     spdlog::debug(\"got encr poly size {}\", char_traits<char>::length(encryptedPolyHex));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:   if (printDebugInfo) {",
          "",
          "[Removed Lines]",
          "142:     spdlog::info(\"hex_encr_poly length is {}\", strlen(encryptedPolyHex));",
          "143:     spdlog::info(\"enc len {}\", enc_len);",
          "",
          "[Added Lines]",
          "142:     spdlog::debug(\"hex_encr_poly length is {}\", strlen(encryptedPolyHex));",
          "143:     spdlog::debug(\"enc len {}\", enc_len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:   }",
          "161:   if (printDebugInfo) {",
          "170:   }",
          "",
          "[Removed Lines]",
          "162:     spdlog::info(\"err msg is {}\", errMsg1);",
          "164:     spdlog::info(\"public_shares:\");",
          "165:     spdlog::info(\"{}\", public_shares);",
          "168:     spdlog::info(\"get_public_shares status: {}\", err_status);",
          "",
          "[Added Lines]",
          "162:     spdlog::debug(\"err msg is {}\", errMsg1);",
          "164:     spdlog::debug(\"public_shares:\");",
          "165:     spdlog::debug(\"{}\", public_shares);",
          "168:     spdlog::debug(\"get_public_shares status: {}\", err_status);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "227:     strncpy(pubKeyB, pub_keyB.c_str(), 128);",
          "228:     pubKeyB[128] = 0;",
          "229:     if (printDebugInfo) {",
          "231:     }",
          "233:     if (!encryptKeys)",
          "",
          "[Removed Lines]",
          "230:       spdlog::info(\"pubKeyB is {}\", pub_keyB);",
          "",
          "[Added Lines]",
          "230:       spdlog::debug(\"pubKeyB is {}\", pub_keyB);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "240:       throw RPCException(-666, errMsg1);",
          "241:     }",
          "242:     if (printDebugInfo) {",
          "244:     }",
          "246:     result += cur_share;",
          "249:     if (printDebugInfo) {",
          "251:     }",
          "",
          "[Removed Lines]",
          "243:       spdlog::info(\"cur_share is {}\", cur_share);",
          "250:       spdlog::info(\"dec len is {}\", dec_len);",
          "",
          "[Added Lines]",
          "243:       spdlog::debug(\"cur_share is {}\", cur_share);",
          "250:       spdlog::debug(\"dec len is {}\", dec_len);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "262:     string shareG2_name = \"shareG2_\" + polyName + \"_\" + to_string(i) + \":\";",
          "263:     if (printDebugInfo) {",
          "267:     }",
          "268:     SGXWalletServer::writeDataToDB(shareG2_name, s_shareG2);",
          "270:     if (printDebugInfo) {",
          "",
          "[Removed Lines]",
          "264:       spdlog::info(\"name to write to db is {}\", dhKeyName);",
          "265:       spdlog::info(\"name to write to db is {}\", shareG2_name);",
          "266:       spdlog::info(\"s_shareG2: {}\", s_shareG2);",
          "271:       spdlog::info(\"errMsg: {}\", errMsg1);",
          "",
          "[Added Lines]",
          "264:       spdlog::debug(\"name to write to db is {}\", dhKeyName);",
          "265:       spdlog::debug(\"name to write to db is {}\", shareG2_name);",
          "266:       spdlog::debug(\"s_shareG2: {}\", s_shareG2);",
          "271:       spdlog::debug(\"errMsg: {}\", errMsg1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "300:       cerr << \"dec_key_len \" << dec_key_len << endl;",
          "301:       cerr << \"encr_sshare length is \" << strlen(encr_sshare) << endl;",
          "304:     }",
          "305:     char pshares[8193];",
          "306:     memset(pshares, 0, 8193);",
          "",
          "[Removed Lines]",
          "303:       spdlog::info(\"publicShares length is {}\", char_traits<char>::length(publicShares));",
          "",
          "[Added Lines]",
          "303:       spdlog::debug(\"publicShares length is {}\", char_traits<char>::length(publicShares));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "317:     }",
          "319:     if (printDebugInfo) {",
          "322:     }",
          "",
          "[Removed Lines]",
          "320:       spdlog::info(\"errMsg1: {}\", errMsg1);",
          "321:       spdlog::info(\"result is: {}\", result);",
          "",
          "[Added Lines]",
          "320:       spdlog::debug(\"errMsg1: {}\", errMsg1);",
          "321:       spdlog::debug(\"result is: {}\", result);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "329: bool CreateBLSShare( const string& blsKeyName, const char * s_shares, const char * encryptedKeyHex){",
          "330:   if (printDebugInfo) {",
          "332:   }",
          "334:   char errMsg1[BUF_LEN];",
          "",
          "[Removed Lines]",
          "331:     spdlog::info(\"ENTER CreateBLSShare\");",
          "",
          "[Added Lines]",
          "331:     spdlog::debug(\"ENTER CreateBLSShare\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "368:     SGXWalletServer::writeDataToDB(blsKeyName, hexBLSKey);",
          "369:     if (printDebugInfo) {",
          "372:     }",
          "374:     return true;",
          "",
          "[Removed Lines]",
          "370:       spdlog::info(\"hexBLSKey length is {}\", char_traits<char>::length(hexBLSKey));",
          "371:       spdlog::info(\"bls key {}\", blsKeyName, \" is \", hexBLSKey );",
          "",
          "[Added Lines]",
          "370:       spdlog::debug(\"hexBLSKey length is {}\", char_traits<char>::length(hexBLSKey));",
          "371:       spdlog::debug(\"bls key {}\", blsKeyName, \" is \", hexBLSKey );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "391:     char pub_key[320];",
          "392:     if (printDebugInfo) {",
          "394:     }",
          "396:     if (!encryptKeys)",
          "",
          "[Removed Lines]",
          "393:       spdlog::info(\"dec_key_len is {}\", dec_key_len);",
          "",
          "[Added Lines]",
          "393:       spdlog::debug(\"dec_key_len is {}\", dec_key_len);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "404:     vector<string> pub_key_vect = SplitString(pub_key, ':');",
          "406:     if (printDebugInfo) {",
          "409:       for (int i = 0; i < 4; i++)",
          "411:     }",
          "412:     return pub_key_vect;",
          "413: }",
          "",
          "[Removed Lines]",
          "407:       spdlog::info(\"errMsg1 is {}\", errMsg1);",
          "408:       spdlog::info(\"pub key is \");",
          "410:         spdlog::info(\"{}\", pub_key_vect.at(i));",
          "",
          "[Added Lines]",
          "407:       spdlog::debug(\"errMsg1 is {}\", errMsg1);",
          "408:       spdlog::debug(\"pub key is \");",
          "410:         spdlog::debug(\"{}\", pub_key_vect.at(i));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "420:   string DH_key_name = polyName + \"_\" + to_string(ind) + \":\";",
          "421:   shared_ptr<string> hexEncrKey_ptr = SGXWalletServer::readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "422:   if (printDebugInfo) {",
          "424:   }",
          "426:   vector<char> hexEncrKey(2 * BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "423:     spdlog::info(\"encr DH key is {}\", *hexEncrKey_ptr);",
          "",
          "[Added Lines]",
          "423:     spdlog::debug(\"encr DH key is {}\", *hexEncrKey_ptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "431:      throw RPCException(INVALID_HEX, \"Invalid hexEncrKey\");",
          "432:   }",
          "433:   if (printDebugInfo) {",
          "436:   }",
          "438:   char DHKey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "434:     spdlog::info(\"encr DH key length is {}\", DH_enc_len);",
          "435:     spdlog::info(\"hex encr DH key length is {}\", hexEncrKey_ptr->length());",
          "",
          "[Added Lines]",
          "434:     spdlog::debug(\"encr DH key length is {}\", DH_enc_len);",
          "435:     spdlog::debug(\"hex encr DH key length is {}\", hexEncrKey_ptr->length());",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"spdlog/spdlog.h\"",
          "44: }",
          "110: }",
          "147: }",
          "202: }",
          "",
          "[Removed Lines]",
          "37: static std::default_random_engine rand_gen((unsigned int) time(0));",
          "39: std::string concatPubKeyWith0x(char* pub_key_x, char* pub_key_y){",
          "40:   std::string px = pub_key_x;",
          "41:   std::string py = pub_key_y;",
          "42:   std::string result = \"0x\" + px + py;// + std::to_string(pub_key_x) + std::to_string(pub_key_y);",
          "43:   return result;",
          "46: std::vector<std::string> gen_ecdsa_key(){",
          "47:   char *errMsg = (char *)calloc(1024, 1);",
          "48:   int err_status = 0;",
          "49:   uint8_t* encr_pr_key = (uint8_t *)calloc(1024, 1);",
          "50:   char *pub_key_x = (char *)calloc(1024, 1);",
          "51:   char *pub_key_y = (char *)calloc(1024, 1);",
          "52:   uint32_t enc_len = 0;",
          "54:   if ( !encryptKeys)",
          "55:      status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "56:   else",
          "57:      status = generate_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "59:   if ( status != SGX_SUCCESS || err_status != 0 ){",
          "60:     std::cerr << \"RPCException thrown with status\" << status << std::endl;",
          "61:     throw RPCException(status, errMsg) ;",
          "62:   }",
          "63:   std::vector<std::string> keys(3);",
          "64:   if (printDebugInfo) {",
          "65:     std::cerr << \"account key is \" << errMsg << std::endl;",
          "66:     std::cerr << \"enc_len is \" << enc_len << std::endl;",
          "70:   }",
          "71:   char *hexEncrKey = (char *) calloc(BUF_LEN * 2, 1);",
          "72:   carray2Hex(encr_pr_key, enc_len, hexEncrKey);",
          "73:   keys.at(0) = hexEncrKey;",
          "74:   keys.at(1) = std::string(pub_key_x) + std::string(pub_key_y);//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "79:   unsigned long seed = rand_gen();",
          "80:   if (printDebugInfo) {",
          "81:     spdlog::info(\"seed is {}\", seed);",
          "82:     std::cerr << \"strlen is \" << strlen(hexEncrKey) << std::endl;",
          "83:   }",
          "84:   gmp_randstate_t state;",
          "85:   gmp_randinit_default(state);",
          "87:   gmp_randseed_ui(state, seed);",
          "89:   mpz_t rand32;",
          "90:   mpz_init(rand32);",
          "91:   mpz_urandomb(rand32, state, 256);",
          "93:   char arr[mpz_sizeinbase (rand32, 16) + 2];",
          "94:   char * rand_str = mpz_get_str(arr, 16, rand32);",
          "96:   keys.at(2) = rand_str;",
          "100:   gmp_randclear(state);",
          "101:   mpz_clear(rand32);",
          "103:   free(errMsg);",
          "104:   free(pub_key_x);",
          "105:   free(pub_key_y);",
          "106:   free(encr_pr_key);",
          "107:   free(hexEncrKey);",
          "109:   return keys;",
          "112: std::string get_ecdsa_pubkey(const char* encryptedKeyHex){",
          "113:   char *errMsg = (char *)calloc(1024, 1);",
          "114:   int err_status = 0;",
          "115:   char *pub_key_x = (char *)calloc(1024, 1);",
          "116:   char *pub_key_y = (char *)calloc(1024, 1);",
          "117:   uint64_t enc_len = 0;",
          "120:   uint8_t* encr_pr_key = (uint8_t*)calloc(1024, 1);",
          "121:   if (!hex2carray(encryptedKeyHex, &enc_len, encr_pr_key)){",
          "122:     throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "123:   }",
          "125:   if ( !encryptKeys)",
          "126:    status = get_public_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, enc_len, pub_key_x, pub_key_y );",
          "127:   else status = get_public_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, enc_len, pub_key_x, pub_key_y );",
          "128:   if (err_status != 0){",
          "129:     throw RPCException(-666, errMsg) ;",
          "130:   }",
          "131:   std::string pubKey = std::string(pub_key_x) + std::string(pub_key_y);//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "133:   if (printDebugInfo) {",
          "134:     spdlog::info(\"enc_len is {}\", enc_len);",
          "135:     spdlog::info(\"pubkey is {}\", pubKey);",
          "136:     spdlog::info(\"pubkey length is {}\", pubKey.length());",
          "137:     spdlog::info(\"err str is {}\", errMsg);",
          "138:     spdlog::info(\"err status is {}\", err_status);",
          "139:   }",
          "141:   free(errMsg);",
          "142:   free(pub_key_x);",
          "143:   free(pub_key_y);",
          "144:   free(encr_pr_key);",
          "146:   return pubKey;",
          "149: std::vector<std::string> ecdsa_sign_hash(const char* encryptedKeyHex, const char* hashHex, int base){",
          "150:   std::vector<std::string> signature_vect(3);",
          "152:   char *errMsg = (char *)calloc(1024, 1);",
          "153:   int err_status = 0;",
          "154:   char* signature_r = (char *)calloc(1024, 1);",
          "155:   char* signature_s = (char *)calloc(1024, 1);",
          "156:   uint8_t signature_v = 0;",
          "157:   uint64_t dec_len = 0;",
          "160:   uint8_t* encr_key = (uint8_t*)calloc(1024, 1);",
          "161:   if (!hex2carray(encryptedKeyHex, &dec_len, encr_key)){",
          "162:       throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "163:   }",
          "165:   if (printDebugInfo) {",
          "166:     spdlog::info(\"encryptedKeyHex: {}\", encryptedKeyHex);",
          "167:     spdlog::info(\"HASH: {}\", hashHex);",
          "168:     spdlog::info(\"encrypted len: {}\", dec_len);",
          "169:   }",
          "171:   if (!encryptKeys)",
          "172:    status = ecdsa_sign1(eid, &err_status, errMsg, encr_key, ECDSA_ENCR_LEN, (unsigned char*)hashHex, signature_r, signature_s, &signature_v, base );",
          "173:   else status = ecdsa_sign_aes(eid, &err_status, errMsg, encr_key, dec_len, (unsigned char*)hashHex, signature_r, signature_s, &signature_v, base );",
          "174:   if ( err_status != 0){",
          "175:     throw RPCException(-666, errMsg ) ;",
          "176:   }",
          "178:   if (printDebugInfo) {",
          "179:     spdlog::info(\"signature r in  ecdsa_sign_hash: {}\", signature_r);",
          "180:     spdlog::info(\"signature s in  ecdsa_sign_hash: {}\", signature_s);",
          "181:   }",
          "183:   if ( status != SGX_SUCCESS){",
          "184:     spdlog::info(\"  failed to sign \");",
          "185:   }",
          "186:   signature_vect.at(0) = std::to_string(signature_v);",
          "187:   if ( base == 16) {",
          "188:     signature_vect.at(1) = \"0x\" + std::string(signature_r);",
          "189:     signature_vect.at(2) = \"0x\" + std::string(signature_s);",
          "190:   }",
          "191:   else{",
          "192:     signature_vect.at(1) = std::string(signature_r);",
          "193:     signature_vect.at(2) = std::string(signature_s);",
          "194:   }",
          "196:   free(errMsg);",
          "197:   free(signature_r);",
          "198:   free(signature_s);",
          "199:   free(encr_key);",
          "201:   return signature_vect;",
          "",
          "[Added Lines]",
          "37: static std::default_random_engine randGen((unsigned int) time(0));",
          "39: std::string concatPubKeyWith0x(char *pub_key_x, char *pub_key_y) {",
          "40:     std::string px = pub_key_x;",
          "41:     std::string py = pub_key_y;",
          "42:     std::string result = \"0x\" + px + py;// + std::to_string(pub_key_x) + std::to_string(pub_key_y);",
          "43:     return result;",
          "46: std::vector<std::string> genECDSAKey() {",
          "47:     char *errMsg = (char *) calloc(1024, 1);",
          "48:     int err_status = 0;",
          "49:     uint8_t *encr_pr_key = (uint8_t *) calloc(1024, 1);",
          "50:     char *pub_key_x = (char *) calloc(1024, 1);",
          "51:     char *pub_key_y = (char *) calloc(1024, 1);",
          "52:     uint32_t enc_len = 0;",
          "54:     if (!encryptKeys)",
          "55:         status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "56:     else",
          "57:         status = generate_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "59:     if (status != SGX_SUCCESS || err_status != 0) {",
          "60:         std::cerr << \"RPCException thrown with status\" << status << std::endl;",
          "61:         throw RPCException(status, errMsg);",
          "62:     }",
          "63:     std::vector<std::string> keys(3);",
          "64:     if (printDebugInfo) {",
          "65:         std::cerr << \"account key is \" << errMsg << std::endl;",
          "66:         std::cerr << \"enc_len is \" << enc_len << std::endl;",
          "70:     }",
          "71:     char *hexEncrKey = (char *) calloc(BUF_LEN * 2, 1);",
          "72:     carray2Hex(encr_pr_key, enc_len, hexEncrKey);",
          "73:     keys.at(0) = hexEncrKey;",
          "74:     keys.at(1) = std::string(pub_key_x) + std::string(pub_key_y);//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "79:     unsigned long seed = randGen();",
          "80:     if (printDebugInfo) {",
          "81:         spdlog::debug(\"seed is {}\", seed);",
          "82:         std::cerr << \"strlen is \" << strlen(hexEncrKey) << std::endl;",
          "83:     }",
          "84:     gmp_randstate_t state;",
          "85:     gmp_randinit_default(state);",
          "87:     gmp_randseed_ui(state, seed);",
          "89:     mpz_t rand32;",
          "90:     mpz_init(rand32);",
          "91:     mpz_urandomb(rand32, state, 256);",
          "93:     char arr[mpz_sizeinbase(rand32, 16) + 2];",
          "94:     char *rand_str = mpz_get_str(arr, 16, rand32);",
          "96:     keys.at(2) = rand_str;",
          "100:     gmp_randclear(state);",
          "101:     mpz_clear(rand32);",
          "103:     free(errMsg);",
          "104:     free(pub_key_x);",
          "105:     free(pub_key_y);",
          "106:     free(encr_pr_key);",
          "107:     free(hexEncrKey);",
          "109:     return keys;",
          "112: std::string getECDSAPubKey(const char *_encryptedKeyHex) {",
          "114:     vector<char> errMsg(BUF_LEN, 0);",
          "115:     vector<char> pubKeyX(BUF_LEN, 0);",
          "116:     vector<char> pubKeyY(BUF_LEN, 0);",
          "117:     vector<uint8_t> encrPrKey(BUF_LEN, 0);",
          "119:     int err_status = 0;",
          "120:     uint64_t enc_len = 0;",
          "122:     if (!hex2carray(_encryptedKeyHex, &enc_len, encrPrKey.data())) {",
          "123:         throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "124:     }",
          "126:     if (!encryptKeys)",
          "127:         status = get_public_ecdsa_key(eid, &err_status, errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(),",
          "128:                 pubKeyY.data());",
          "129:     else status = get_public_ecdsa_key_aes(eid, &err_status,",
          "130:             errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(), pubKeyY.data());",
          "131:     if (err_status != 0) {",
          "132:         throw RPCException(-666, errMsg.data());",
          "133:     }",
          "134:     string pubKey = string(pubKeyX.data()) + string(pubKeyY.data());//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "136:     if (printDebugInfo) {",
          "137:         spdlog::debug(\"enc_len is {}\", enc_len);",
          "138:         spdlog::debug(\"pubkey is {}\", pubKey);",
          "139:         spdlog::debug(\"pubkey length is {}\", pubKey.length());",
          "140:         spdlog::debug(\"err str is {}\", errMsg.data());",
          "141:         spdlog::debug(\"err status is {}\", err_status);",
          "142:     }",
          "144:     return pubKey;",
          "147: vector<string> ecdsaSignHash(const char *encryptedKeyHex, const char *hashHex, int base) {",
          "148:     vector<string> signature_vect(3);",
          "150:     char *errMsg = (char *) calloc(1024, 1);",
          "151:     int err_status = 0;",
          "152:     char *signature_r = (char *) calloc(1024, 1);",
          "153:     char *signature_s = (char *) calloc(1024, 1);",
          "154:     uint8_t signature_v = 0;",
          "155:     uint64_t dec_len = 0;",
          "158:     uint8_t *encr_key = (uint8_t *) calloc(1024, 1);",
          "159:     if (!hex2carray(encryptedKeyHex, &dec_len, encr_key)) {",
          "160:         throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "161:     }",
          "164:     spdlog::debug(\"encryptedKeyHex: {}\", encryptedKeyHex);",
          "165:     spdlog::debug(\"HASH: {}\", hashHex);",
          "166:     spdlog::debug(\"encrypted len: {}\", dec_len);",
          "169:     if (!encryptKeys)",
          "170:         status = ecdsa_sign1(eid, &err_status, errMsg, encr_key, ECDSA_ENCR_LEN, (unsigned char *) hashHex, signature_r,",
          "171:                              signature_s, &signature_v, base);",
          "172:     else",
          "173:         status = ecdsa_sign_aes(eid, &err_status, errMsg, encr_key, dec_len, (unsigned char *) hashHex, signature_r,",
          "174:                                 signature_s, &signature_v, base);",
          "175:     if (err_status != 0) {",
          "176:         throw RPCException(-666, errMsg);",
          "177:     }",
          "180:     spdlog::debug(\"signature r in  ecdsa_sign_hash: {}\", signature_r);",
          "181:     spdlog::debug(\"signature s in  ecdsa_sign_hash: {}\", signature_s);",
          "184:     if (status != SGX_SUCCESS) {",
          "185:         spdlog::error(\"  failed to sign \");",
          "186:     }",
          "187:     signature_vect.at(0) = to_string(signature_v);",
          "188:     if (base == 16) {",
          "189:         signature_vect.at(1) = \"0x\" + string(signature_r);",
          "190:         signature_vect.at(2) = \"0x\" + string(signature_s);",
          "191:     } else {",
          "192:         signature_vect.at(1) = string(signature_r);",
          "193:         signature_vect.at(2) = string(signature_s);",
          "194:     }",
          "196:     free(errMsg);",
          "197:     free(signature_r);",
          "198:     free(signature_s);",
          "199:     free(encr_key);",
          "201:     return signature_vect;",
          "",
          "---------------"
        ],
        "ECDSACrypto.h||ECDSACrypto.h": [
          "File: ECDSACrypto.h -> ECDSACrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define EXTERNC",
          "45: #endif //SGXD_ECDSACRYPTO_H",
          "",
          "[Removed Lines]",
          "38: std::vector<std::string> gen_ecdsa_key();",
          "40: std::string get_ecdsa_pubkey(const char* encryptedKeyHex);",
          "42: std::vector<std::string> ecdsa_sign_hash(const char* encryptedKeyHex, const char* hashHex, int base);",
          "",
          "[Added Lines]",
          "38: using namespace std;",
          "40: vector<string> genECDSAKey();",
          "42: string getECDSAPubKey(const char* _encryptedKeyHex);",
          "44: vector<string> ecdsaSignHash(const char* encryptedKeyHex, const char* hashHex, int base);",
          "",
          "---------------"
        ],
        "LevelDB.cpp||LevelDB.cpp": [
          "File: LevelDB.cpp -> LevelDB.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     auto status = db->Get(readOptions, _key, &*result);",
          "65:     if (printDebugInfo) {",
          "68:     }",
          "",
          "[Removed Lines]",
          "66:       spdlog::info(\"key to read from db: {}\",_key );",
          "",
          "[Added Lines]",
          "66:       spdlog::debug(\"key to read from db: {}\",_key );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     throwExceptionOnError(status);",
          "86:     if (printDebugInfo) {",
          "89:     }",
          "90: }",
          "",
          "[Removed Lines]",
          "87:         spdlog::info(\"written key: {}\",_key );",
          "",
          "[Added Lines]",
          "87:         spdlog::debug(\"written key: {}\",_key );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:     throwExceptionOnError(status);",
          "103:     if (printDebugInfo) {",
          "106:     }",
          "107: }",
          "",
          "[Removed Lines]",
          "104:       spdlog::info(\"key deleted: {}\",full_key );",
          "",
          "[Added Lines]",
          "104:       spdlog::debug(\"key deleted: {}\",full_key );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:     throwExceptionOnError(status);",
          "133:     if (printDebugInfo) {",
          "136:     }",
          "137: }",
          "",
          "[Removed Lines]",
          "134:       spdlog::info(\"key deleted: {}\",_key );",
          "",
          "[Added Lines]",
          "134:       spdlog::debug(\"key deleted: {}\",_key );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213:   auto key = Name;",
          "215:   if (readString(Name) != nullptr) {",
          "218:     throw RPCException(KEY_SHARE_ALREADY_EXISTS, \"Data with this name already exists\");",
          "219:   }",
          "221:   writeString(key, value);",
          "222:   if (printDebugInfo) {",
          "225:   }",
          "226: }",
          "",
          "[Removed Lines]",
          "216:     spdlog::info(\"name {}\",Name, \" already exists\");",
          "223:       spdlog::info(\"{}\",Name, \" is written to db\");",
          "",
          "[Added Lines]",
          "216:     spdlog::debug(\"name {}\",Name, \" already exists\");",
          "223:       spdlog::debug(\"{}\",Name, \" is written to db\");",
          "",
          "---------------"
        ],
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "227: void init_SEK(){",
          "228:   std::shared_ptr<std::string> encr_SEK_ptr = LevelDB::getLevelDb()->readString(\"SEK\");",
          "229:   if (encr_SEK_ptr == nullptr){",
          "231:     gen_SEK();",
          "232:   }",
          "233:   else{",
          "",
          "[Removed Lines]",
          "230:     spdlog::info(\"SEK was not created yet. Going to create SEK\");",
          "",
          "[Added Lines]",
          "230:     spdlog::error(\"SEK was not created yet. Going to create SEK\");",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:     result[\"errorMessage\"] = \"\";",
          "253:     result[\"encryptedKey\"] = \"\";",
          "257:     vector<string> keys;",
          "259:     try {",
          "262:         if (keys.size() == 0) {",
          "263:             throw RPCException(UNKNOWN_ERROR, \"key was not generated\");",
          "",
          "[Removed Lines]",
          "255:     spdlog::info(\"Calling method generateECDSAKey\");",
          "260:         keys = gen_ecdsa_key();",
          "",
          "[Added Lines]",
          "259:         keys = genECDSAKey();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:         shared_ptr<string> key_ptr = readFromDb(_keyName, \"\");",
          "355:         if (sign_vect.size() != 3) {",
          "356:             throw RPCException(INVALID_ECSDA_SIGNATURE, \"Invalid ecdsa signature\");",
          "357:         }",
          "",
          "[Removed Lines]",
          "354:         sign_vect = ecdsa_sign_hash(key_ptr->c_str(), cutHash.c_str(), _base);",
          "",
          "[Added Lines]",
          "353:         sign_vect = ecdsaSignHash(key_ptr->c_str(), cutHash.c_str(), _base);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:             throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "385:         }",
          "386:         shared_ptr<string> keyStr = readFromDb(_keyName);",
          "388:         spdlog::debug(\"PublicKey {}\", publicKey);",
          "389:         spdlog::debug(\"PublicKey length {}\", publicKey.length());",
          "",
          "[Removed Lines]",
          "387:         publicKey = get_ecdsa_pubkey(keyStr->c_str());",
          "",
          "[Added Lines]",
          "386:         publicKey = getECDSAPubKey(keyStr->c_str());",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: #endif",
          "80:     if (printDebugInfo) {",
          "82:     }",
          "84:     status = sgx_create_enclave_search(ENCLAVE_NAME, SGX_DEBUG_FLAG, &token,",
          "",
          "[Removed Lines]",
          "81:         spdlog::info(\"SGX_DEBUG_FLAG = {}\", SGX_DEBUG_FLAG);",
          "",
          "[Added Lines]",
          "81:         spdlog::debug(\"SGX_DEBUG_FLAG = {}\", SGX_DEBUG_FLAG);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:         exit(1);",
          "96:     }",
          "100:     status = tgmp_init(eid);",
          "101:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "98:     spdlog::error(\"Enclave created and started successfully\");",
          "",
          "[Added Lines]",
          "98:     spdlog::info(\"Enclave created and started successfully\");",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: #include \"stubclient.h\"",
          "69: #include <jsonrpccpp/client/connectors/httpclient.h>",
          "73: string stringFromFr(libff::alt_bn128_Fr &el) {",
          "",
          "[Removed Lines]",
          "71: default_random_engine rand_gen((unsigned int) time(0));",
          "",
          "[Added Lines]",
          "71: default_random_engine randGen((unsigned int) time(0));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "572:     vector<string> pubShares(n);",
          "573:     vector<string> poly_names(n);",
          "577:     for (uint8_t i = 0; i < n; i++) {",
          "578:         EthKeys[i] = c.generateECDSAKey();",
          "579:         string polyName =",
          "",
          "[Removed Lines]",
          "575:     int schain_id = rand_gen();",
          "576:     int dkg_id = rand_gen();",
          "",
          "[Added Lines]",
          "575:     int schain_id = randGen();",
          "576:     int dkg_id = randGen();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "814:     vector<string> pubShares(n);",
          "815:     vector<string> poly_names(n);",
          "819:     for (uint8_t i = 0; i < n; i++) {",
          "820:         EthKeys[i] = c.generateECDSAKey();",
          "821:         string polyName =",
          "",
          "[Removed Lines]",
          "817:     int schain_id = rand_gen();",
          "818:     int dkg_id = rand_gen();",
          "",
          "[Added Lines]",
          "817:     int schain_id = randGen();",
          "818:     int dkg_id = randGen();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1093:     vector<string> pubShares(n);",
          "1094:     vector<string> poly_names(n);",
          "1098:     for (uint8_t i = 0; i < n; i++) {",
          "1099:         EthKeys[i] = c.generateECDSAKey();",
          "1100:         string polyName =",
          "",
          "[Removed Lines]",
          "1096:     int schain_id = rand_gen();",
          "1097:     int dkg_id = rand_gen();",
          "",
          "[Added Lines]",
          "1096:     int schain_id = randGen();",
          "1097:     int dkg_id = randGen();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36411295ff341bddab41c6d0dbc31e0fea3f18fc",
      "candidate_info": {
        "commit_hash": "36411295ff341bddab41c6d0dbc31e0fea3f18fc",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/36411295ff341bddab41c6d0dbc31e0fea3f18fc",
        "files": [
          "DKGCrypto.cpp",
          "Dockerfile",
          "DockerfileSimulation"
        ],
        "message": "SKALE-1990-Add copy spdlog to dockerfile",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:   if (DEBUG_PRINT) {",
          "122:   }",
          "124:   char* public_shares = (char*)calloc(10000, 1);",
          "",
          "[Removed Lines]",
          "121:     spdlog::info(\"got encr poly size {}\", strlen(encryptedPolyHex));",
          "",
          "[Added Lines]",
          "121:     spdlog::info(\"got encr poly size {}\", std::char_traits<char>::length(encryptedPolyHex));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:     writeDataToDB(BLSKeyName, hexBLSKey);",
          "314:     if (DEBUG_PRINT) {",
          "316:       spdlog::info(\"bls key {}\", BLSKeyName, \" is \", hexBLSKey );",
          "317:     }",
          "318:     free(hexBLSKey);",
          "",
          "[Removed Lines]",
          "315:       spdlog::info(\"hexBLSKey length is {}\", strlen(hexBLSKey));",
          "",
          "[Added Lines]",
          "315:       spdlog::info(\"hexBLSKey length is {}\", std::char_traits<char>::length(hexBLSKey));",
          "",
          "---------------"
        ]
      }
    }
  ]
}