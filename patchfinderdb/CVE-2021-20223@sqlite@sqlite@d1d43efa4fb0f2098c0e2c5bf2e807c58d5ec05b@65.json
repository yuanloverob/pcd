{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "542bd6521e91c49e663123848e5898cd5632d097",
      "candidate_info": {
        "commit_hash": "542bd6521e91c49e663123848e5898cd5632d097",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/542bd6521e91c49e663123848e5898cd5632d097",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/spaceanal.tcl"
        ],
        "message": "Fix an off-by-one error in the \"calculated\" page count output from the sqlite3_analyzer utility for databases that are more than 1GB in size.\n\nFossilOrigin-Name: 8789368b91fb5b7477bdba3a953412fc3839b4894443b65186f7b8f79f6369c9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/spaceanal.tcl||tool/spaceanal.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e256f85289a78e629acdf83e5bf1f8df2a0ffb3d559738eb9e49db6c228dc8c0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/spaceanal.tcl||tool/spaceanal.tcl": [
          "File: tool/spaceanal.tcl -> tool/spaceanal.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "588: set file_pgcnt2 [expr {$inuse_pgcnt+$free_pgcnt2+$av_pgcnt}]",
          "590: set ntable [db eval {SELECT count(*)+1 FROM sqlite_master WHERE type='table'}]",
          "591: set nindex [db eval {SELECT count(*) FROM sqlite_master WHERE type='index'}]",
          "592: set sql {SELECT count(*) FROM sqlite_master WHERE name LIKE 'sqlite_autoindex%'}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590: # Account for the lockbyte page",
          "591: if {$file_pgcnt2*$pageSize>1073742335} {incr file_pgcnt2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83420823af71c148073a042c6a5452fac28c6369",
      "candidate_info": {
        "commit_hash": "83420823af71c148073a042c6a5452fac28c6369",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83420823af71c148073a042c6a5452fac28c6369",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/walvfs.test"
        ],
        "message": "Fix a use-after-free problem in the test suite. No changes to production code.\n\nFossilOrigin-Name: 0d1055a5da8274a59f35170b1f9469597ce4c5a4c5e851a1b81d3be2ccd32871",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a0f6d526baecd061a5e2bec5eb698fb5dfb10122ac79c853d7b3f4a48bc9f49b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1391:   Testvfs *p = (Testvfs *)cd;",
          "1392:   if( p->pScript ) Tcl_DecrRefCount(p->pScript);",
          "1393:   sqlite3_vfs_unregister(p->pVfs);",
          "1394:   ckfree((char *)p->pVfs);",
          "1395:   ckfree((char *)p);",
          "1396: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1394:   memset(p->pVfs, 0, sizeof(sqlite3_vfs));",
          "1395:   memset(p, 0, sizeof(Testvfs));",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:   PRAGMA wal_checkpoint;",
          "388:   SELECT count(*) FROM t1",
          "389: } {0 5 5 21}",
          "390: tvfs2 delete",
          "392: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390: db close",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfb8bf6a501ccc5f67b9ae84ad1b6aa40bc1a374",
      "candidate_info": {
        "commit_hash": "cfb8bf6a501ccc5f67b9ae84ad1b6aa40bc1a374",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cfb8bf6a501ccc5f67b9ae84ad1b6aa40bc1a374",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/printf.test"
        ],
        "message": "Modify a test file to avoid causing Tcl to allocate too much memory.\n\nFossilOrigin-Name: 232431f32ef77a9dfc4eeb7765dca24af72051fd5460f648d0c5ba318c8a01fc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/printf.test||test/printf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a53bdd311c4154fd5e1131efbb9665362f79db5a35ce9f7b1547f74b8ee2d8ba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/printf.test||test/printf.test": [
          "File: test/printf.test -> test/printf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "538: do_test printf-2.1.2.9 {",
          "539:   sqlite3_mprintf_double {abc: %d %d (%1.1g) :xyz} 1 1 1.0e-20",
          "540: } {abc: 1 1 (1e-20) :xyz}",
          "544: do_test printf-2.1.3.1 {",
          "545:   sqlite3_mprintf_double {abc: (%*.*f) :xyz} 1 1 1.0",
          "546: } {abc: (1.0) :xyz}",
          "",
          "[Removed Lines]",
          "541: do_test printf-2.1.2.10 {",
          "542:   sqlite3_mprintf_double {abc: %*.*f}  2000000000 1000000000 1.0e-20",
          "543: } {}",
          "",
          "[Added Lines]",
          "541: if {$SQLITE_MAX_LENGTH<=[expr 1000*1000*1000]} {",
          "542:   do_test printf-2.1.2.10 {",
          "543:     sqlite3_mprintf_double {abc: %*.*f}  2000000000 1000000000 1.0e-20",
          "544:   } {}",
          "545: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3e38b7c0ea40acedc5fc3d95bb86baebd77cb82",
      "candidate_info": {
        "commit_hash": "d3e38b7c0ea40acedc5fc3d95bb86baebd77cb82",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d3e38b7c0ea40acedc5fc3d95bb86baebd77cb82",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "Allow a wal mode recovery to proceed even if there are readers.\n\nFossilOrigin-Name: 74374aebf9abf3d6b6a3920967a079ceaa4c6276dc6c177682742c2be405b7b7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 73fecc688ab5c459245c9bb89432139a083ef378404b4dae3397a7f4e253f72a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1161:   assert( pWal->writeLock );",
          "1162:   iLock = WAL_ALL_BUT_WRITE + pWal->ckptLock;",
          "1163:   rc = walLockExclusive(pWal, iLock, WAL_READ_LOCK(0)-iLock);",
          "1170:   if( rc ){",
          "1171:     return rc;",
          "1172:   }",
          "",
          "[Removed Lines]",
          "1164:   if( rc==SQLITE_OK ){",
          "1165:     rc = walLockExclusive(pWal, WAL_READ_LOCK(1), WAL_NREADER-1);",
          "1166:     if( rc!=SQLITE_OK ){",
          "1167:       walUnlockExclusive(pWal, iLock, WAL_READ_LOCK(0)-iLock);",
          "1168:     }",
          "1169:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1239:     szFrame = szPage + WAL_FRAME_HDRSIZE;",
          "1241:     if( !aFrame ){",
          "1242:       rc = SQLITE_NOMEM_BKPT;",
          "1243:       goto recovery_error;",
          "1244:     }",
          "1245:     aData = &aFrame[WAL_FRAME_HDRSIZE];",
          "1271:       }",
          "1272:     }",
          "1274:     sqlite3_free(aFrame);",
          "",
          "[Removed Lines]",
          "1240:     aFrame = (u8 *)sqlite3_malloc64(szFrame);",
          "1248:     iFrame = 0;",
          "1249:     for(iOffset=WAL_HDRSIZE; (iOffset+szFrame)<=nSize; iOffset+=szFrame){",
          "1254:       iFrame++;",
          "1255:       rc = sqlite3OsRead(pWal->pWalFd, aFrame, szFrame, iOffset);",
          "1256:       if( rc!=SQLITE_OK ) break;",
          "1257:       isValid = walDecodeFrame(pWal, &pgno, &nTruncate, aData, aFrame);",
          "1258:       if( !isValid ) break;",
          "1259:       rc = walIndexAppend(pWal, iFrame, pgno);",
          "1260:       if( rc!=SQLITE_OK ) break;",
          "1263:       if( nTruncate ){",
          "1264:         pWal->hdr.mxFrame = iFrame;",
          "1265:         pWal->hdr.nPage = nTruncate;",
          "1266:         pWal->hdr.szPage = (u16)((szPage&0xff00) | (szPage>>16));",
          "1267:         testcase( szPage<=32768 );",
          "1268:         testcase( szPage>=65536 );",
          "1269:         aFrameCksum[0] = pWal->hdr.aFrameCksum[0];",
          "1270:         aFrameCksum[1] = pWal->hdr.aFrameCksum[1];",
          "",
          "[Added Lines]",
          "1235:     aFrame = (u8 *)sqlite3_malloc64(szFrame + WALINDEX_PGSZ);",
          "1241:     aPrivate = (u32*)&aData[szPage];",
          "1244:     iLastFrame = (nSize - WAL_HDRSIZE) / szFrame;",
          "1245:     for(iPg=0; iPg<=walFramePage(iLastFrame); iPg++){",
          "1246:       u32 *aShare;",
          "1248:       int iLast = MIN(iLastFrame, HASHTABLE_NPAGE_ONE+iPg*HASHTABLE_NPAGE);",
          "1249:       int iFirst = 1 + (iPg==0?0:HASHTABLE_NPAGE_ONE+(iPg-1)*HASHTABLE_NPAGE);",
          "1250:       rc = walIndexPage(pWal, iPg, (volatile u32**)&aShare);",
          "1251:       if( rc ) break;",
          "1252:       pWal->apWiData[iPg] = aPrivate;",
          "1254:       for(iFrame=iFirst; iFrame<=iLast; iFrame++){",
          "1255:         i64 iOffset = walFrameOffset(iFrame, szPage);",
          "1260:         rc = sqlite3OsRead(pWal->pWalFd, aFrame, szFrame, iOffset);",
          "1261:         if( rc!=SQLITE_OK ) break;",
          "1262:         isValid = walDecodeFrame(pWal, &pgno, &nTruncate, aData, aFrame);",
          "1263:         if( !isValid ) break;",
          "1264:         rc = walIndexAppend(pWal, iFrame, pgno);",
          "1265:         if( rc!=SQLITE_OK ) break;",
          "1268:         if( nTruncate ){",
          "1269:           pWal->hdr.mxFrame = iFrame;",
          "1270:           pWal->hdr.nPage = nTruncate;",
          "1271:           pWal->hdr.szPage = (u16)((szPage&0xff00) | (szPage>>16));",
          "1272:           testcase( szPage<=32768 );",
          "1273:           testcase( szPage>=65536 );",
          "1274:           aFrameCksum[0] = pWal->hdr.aFrameCksum[0];",
          "1275:           aFrameCksum[1] = pWal->hdr.aFrameCksum[1];",
          "1276:         }",
          "1278:       pWal->apWiData[iPg] = aShare;",
          "1280:       {",
          "1281:         int nHdr = (iPg==0 ? WALINDEX_HDR_SIZE : 0);",
          "1282:         int nHdr32 = nHdr / sizeof(u32);",
          "1283:         if( memcpy(&aShare[nHdr32], &aPrivate[nHdr32], WALINDEX_PGSZ-nHdr) ){",
          "1284:           memcpy(&aShare[nHdr32], &aPrivate[nHdr32], WALINDEX_PGSZ-nHdr);",
          "1285:         }",
          "1286:       }",
          "1287:       if( iFrame<=iLast ) break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1283:     walIndexWriteHdr(pWal);",
          "1289:     pInfo = walCkptInfo(pWal);",
          "1290:     pInfo->nBackfill = 0;",
          "1291:     pInfo->nBackfillAttempted = pWal->hdr.mxFrame;",
          "1292:     pInfo->aReadMark[0] = 0;",
          "",
          "[Removed Lines]",
          "1293:     for(i=1; i<WAL_NREADER; i++) pInfo->aReadMark[i] = READMARK_NOT_USED;",
          "1294:     if( pWal->hdr.mxFrame ) pInfo->aReadMark[1] = pWal->hdr.mxFrame;",
          "",
          "[Added Lines]",
          "1309:     for(i=1; i<WAL_NREADER; i++){",
          "1310:       rc = walLockExclusive(pWal, WAL_READ_LOCK(i), 1);",
          "1311:       if( rc==SQLITE_OK ){",
          "1312:         if( i==1 && pWal->hdr.mxFrame ){",
          "1313:           pInfo->aReadMark[i] = pWal->hdr.mxFrame;",
          "1314:         }else{",
          "1315:           pInfo->aReadMark[i] = READMARK_NOT_USED;",
          "1316:         }",
          "1317:         walUnlockExclusive(pWal, WAL_READ_LOCK(i), 1);",
          "1318:       }",
          "1319:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1309: recovery_error:",
          "1310:   WALTRACE((\"WAL%p: recovery %s\\n\", pWal, rc ? \"failed\" : \"ok\"));",
          "1311:   walUnlockExclusive(pWal, iLock, WAL_READ_LOCK(0)-iLock);",
          "1313:   return rc;",
          "1314: }",
          "",
          "[Removed Lines]",
          "1312:   walUnlockExclusive(pWal, WAL_READ_LOCK(1), WAL_NREADER-1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19543b9b7b5200927e810eac06c0be3a010bc635",
      "candidate_info": {
        "commit_hash": "19543b9b7b5200927e810eac06c0be3a010bc635",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/19543b9b7b5200927e810eac06c0be3a010bc635",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/where.c"
        ],
        "message": "Now appears to work.  All legacy tests pass.  Need to add new tests, however.\n\nFossilOrigin-Name: 81e6450980ee745686aee5e2b84672d3c8404a041c82c658aa562013294b8628",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2af372f59ea250ccf9ab7c30fe4bf8376a5da6e35c401edf643b9a193a38d33d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6706:         explainSimpleCount(pParse, pTab, pBest);",
          "6707:       }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6709:         int addrSkip;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6754:         }",
          "6755:         updateAccumulator(pParse, regAcc, pAggInfo);",
          "6756:         if( regAcc ) sqlite3VdbeAddOp2(v, OP_Integer, 1, regAcc);",
          "6757:         sqlite3WhereEnd(pWInfo);",
          "6758:         finalizeAggFunctions(pParse, pAggInfo);",
          "6759:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6758:         addrSkip = sqlite3WhereOrderByLimitOptLabel(pWInfo);",
          "6759:         if( addrSkip!=sqlite3WhereContinueLabel(pWInfo) ){",
          "6760:           sqlite3VdbeGoto(v, addrSkip);",
          "6761:         }",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4431:             && pWInfo->nOBSat==1",
          "4432:             && (pWInfo->wctrlFlags & (WHERE_ORDERBY_MIN|WHERE_ORDERBY_MAX))!=0",
          "4433:             ){",
          "4435:       }",
          "4436:     }",
          "4437:     if( (pWInfo->wctrlFlags & WHERE_SORTBYGROUP)",
          "",
          "[Removed Lines]",
          "4434:         pFrom->aLoop[nLoop-1]->wsFlags |= WHERE_ONEROW;",
          "",
          "[Added Lines]",
          "4434:         pWInfo->bOrderedInnerLoop = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5336: #endif",
          "5337:     }else{",
          "5338:       sqlite3VdbeResolveLabel(v, pLevel->addrCont);",
          "5344:     }",
          "5345:     if( pLoop->wsFlags & WHERE_IN_ABLE && pLevel->u.in.nIn>0 ){",
          "5346:       struct InLoop *pIn;",
          "",
          "[Removed Lines]",
          "5339:       if( pLevel->regBignull ){",
          "5340:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5341:         sqlite3VdbeAddOp2(v, OP_DecrJumpZero, pLevel->regBignull, pLevel->p2-1);",
          "5342:         VdbeCoverage(v);",
          "5343:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}