{
  "cve_id": "CVE-2013-1417",
  "cve_desc": "do_tgs_req.c in the Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) 1.11 before 1.11.4, when a single-component realm name is used, allows remote authenticated users to cause a denial of service (daemon crash) via a TGS-REQ request that triggers an attempted cross-realm referral for a host-based service principal.",
  "repo": "krb5/krb5",
  "patch_hash": "4c023ba43c16396f0d199e2df1cfa59b88b62acc",
  "patch_info": {
    "commit_hash": "4c023ba43c16396f0d199e2df1cfa59b88b62acc",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/4c023ba43c16396f0d199e2df1cfa59b88b62acc",
    "files": [
      "src/kdc/do_tgs_req.c"
    ],
    "message": "KDC null deref due to referrals [CVE-2013-1417]\n\nAn authenticated remote client can cause a KDC to crash by making a\nvalid TGS-REQ to a KDC serving a realm with a single-component name.\nThe process_tgs_req() function dereferences a null pointer because an\nunusual failure condition causes a helper function to return success.\n\nWhile attempting to provide cross-realm referrals for host-based\nservice principals, the find_referral_tgs() function could return a\nTGS principal for a zero-length realm name (indicating that the\nhostname in the service principal has no known realm associated with\nit).\n\nSubsequently, the find_alternate_tgs() function would attempt to\nconstruct a path to this empty-string realm, and return success along\nwith a null pointer in its output parameter.  This happens because\nkrb5_walk_realm_tree() returns a list of length one when it attempts\nto construct a transit path between a single-component realm and the\nempty-string realm.  This list causes a loop in find_alternate_tgs()\nto iterate over zero elements, resulting in the unexpected output of a\nnull pointer, which process_tgs_req() proceeds to dereference because\nthere is no error condition.\n\nAdd an error condition to find_referral_tgs() when\nkrb5_get_host_realm() returns an empty realm name.  Also add an error\ncondition to find_alternate_tgs() to handle the length-one output from\nkrb5_walk_realm_tree().\n\nThe vulnerable configuration is not likely to arise in practice.\n(Realm names that have a single component are likely to be test\nrealms.)  Releases prior to krb5-1.11 are not vulnerable.\n\nThanks to Sol Jerome for reporting this problem.\n\nCVSSv2: AV:N/AC:M/Au:S/C:N/I:N/A:P/E:H/RL:O/RC:C\n\n(cherry picked from commit 3c7f1c21ffaaf6c90f1045f0f5440303c766acc0)\n\nticket: 7668\nversion_fixed: 1.11.4\nstatus: resolved",
    "before_after_code_files": [
      "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
    ]
  },
  "patch_diff": {
    "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c": [
      "File: src/kdc/do_tgs_req.c -> src/kdc/do_tgs_req.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1057:         goto cleanup;",
      "1058:     }",
      "1059: cleanup:",
      "1060:     if (retval != 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1060:     if (retval == 0 && server_ptr == NULL)",
      "1061:         retval = KRB5_KDB_NOENTRY;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1149:         goto cleanup;",
      "1150:     }",
      "1153:         data_eq_string(srealm, realms[0])) {",
      "1154:         retval = KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN;",
      "1155:         goto cleanup;",
      "",
      "[Removed Lines]",
      "1152:     if (realms == NULL || realms[0] == '\\0' ||",
      "",
      "[Added Lines]",
      "1154:     if (realms == NULL || realms[0] == NULL || *realms[0] == '\\0' ||",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c7f1c21ffaaf6c90f1045f0f5440303c766acc0",
      "candidate_info": {
        "commit_hash": "3c7f1c21ffaaf6c90f1045f0f5440303c766acc0",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/3c7f1c21ffaaf6c90f1045f0f5440303c766acc0",
        "files": [
          "src/kdc/do_tgs_req.c"
        ],
        "message": "KDC null deref due to referrals [CVE-2013-1417]\n\nAn authenticated remote client can cause a KDC to crash by making a\nvalid TGS-REQ to a KDC serving a realm with a single-component name.\nThe process_tgs_req() function dereferences a null pointer because an\nunusual failure condition causes a helper function to return success.\n\nWhile attempting to provide cross-realm referrals for host-based\nservice principals, the find_referral_tgs() function could return a\nTGS principal for a zero-length realm name (indicating that the\nhostname in the service principal has no known realm associated with\nit).\n\nSubsequently, the find_alternate_tgs() function would attempt to\nconstruct a path to this empty-string realm, and return success along\nwith a null pointer in its output parameter.  This happens because\nkrb5_walk_realm_tree() returns a list of length one when it attempts\nto construct a transit path between a single-component realm and the\nempty-string realm.  This list causes a loop in find_alternate_tgs()\nto iterate over zero elements, resulting in the unexpected output of a\nnull pointer, which process_tgs_req() proceeds to dereference because\nthere is no error condition.\n\nAdd an error condition to find_referral_tgs() when\nkrb5_get_host_realm() returns an empty realm name.  Also add an error\ncondition to find_alternate_tgs() to handle the length-one output from\nkrb5_walk_realm_tree().\n\nThe vulnerable configuration is not likely to arise in practice.\n(Realm names that have a single component are likely to be test\nrealms.)  Releases prior to krb5-1.11 are not vulnerable.\n\nThanks to Sol Jerome for reporting this problem.\n\nCVSSv2: AV:N/AC:M/Au:S/C:N/I:N/A:P/E:H/RL:O/RC:C\n\nticket: 7668 (new)\ntags: pullup\ntarget_version: 1.11.4",
        "before_after_code_files": [
          "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
          ],
          "candidate": [
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c": [
          "File: src/kdc/do_tgs_req.c -> src/kdc/do_tgs_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1035:         goto cleanup;",
          "1036:     }",
          "1037: cleanup:",
          "1038:     if (retval != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1038:     if (retval == 0 && server_ptr == NULL)",
          "1039:         retval = KRB5_KDB_NOENTRY;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1137:         goto cleanup;",
          "1138:     }",
          "1141:         data_eq_string(srealm, realms[0])) {",
          "1142:         retval = KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN;",
          "1143:         goto cleanup;",
          "",
          "[Removed Lines]",
          "1140:     if (realms == NULL || realms[0] == '\\0' ||",
          "",
          "[Added Lines]",
          "1142:     if (realms == NULL || realms[0] == NULL || *realms[0] == '\\0' ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b03bb01e37faee55b9e60c90cc8076549de0d6d",
      "candidate_info": {
        "commit_hash": "2b03bb01e37faee55b9e60c90cc8076549de0d6d",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/2b03bb01e37faee55b9e60c90cc8076549de0d6d",
        "files": [
          "src/kdc/do_tgs_req.c",
          "src/kdc/kdc_transit.c",
          "src/kdc/kdc_util.c",
          "src/kdc/kdc_util.h"
        ],
        "message": "Clean up domain->realm referrals\n\nClean up domain->realm referrals by breaking prep_reprocess_tgs_req()\ninto smaller functions.  Give the resulting functions more descriptive\nnames.  Also delete an unnecessary and almost exact copy of\nkrb5_get_host_realm().",
        "before_after_code_files": [
          "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c",
          "src/kdc/kdc_transit.c||src/kdc/kdc_transit.c",
          "src/kdc/kdc_util.c||src/kdc/kdc_util.c",
          "src/kdc/kdc_util.h||src/kdc/kdc_util.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
          ],
          "candidate": [
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c": [
          "File: src/kdc/do_tgs_req.c -> src/kdc/do_tgs_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:                   krb5_principal,krb5_data **,const char *, krb5_pa_data **);",
          "79: static krb5_int32",
          "82: static krb5_error_code",
          "83: db_get_svc_princ(krb5_context, krb5_principal, krb5_flags,",
          "",
          "[Removed Lines]",
          "80: prep_reprocess_req(kdc_realm_t *, krb5_kdc_req *, krb5_principal *);",
          "",
          "[Added Lines]",
          "80: find_referral_tgs(kdc_realm_t *, krb5_kdc_req *, krb5_principal *);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1065:     return retval;",
          "1066: }",
          "1071: {",
          "1123:                 goto cleanup;",
          "1135:                 goto cleanup;",
          "1140:                 goto cleanup;",
          "1152:         }",
          "1153:     }",
          "1154: cleanup:",
          "1157:     return retval;",
          "1158: }",
          "",
          "[Removed Lines]",
          "1068: static krb5_int32",
          "1069: prep_reprocess_req(kdc_realm_t *kdc_active_realm, krb5_kdc_req *request,",
          "1070:                    krb5_principal *krbtgt_princ)",
          "1072:     krb5_error_code retval = KRB5KRB_AP_ERR_BADMATCH;",
          "1073:     char **realms, **cpp, *temp_buf=NULL;",
          "1074:     krb5_data *comp1 = NULL, *comp2 = NULL;",
          "1075:     char *comp1_str = NULL;",
          "1090:     if (isflagset(request->kdc_options, KDC_OPT_CANONICALIZE) &&",
          "1091:         !isflagset(request->kdc_options, KDC_OPT_ENC_TKT_IN_SKEY) &&",
          "1092:         krb5_princ_size(kdc_context, request->server) == 2) {",
          "1094:         comp1 = krb5_princ_component(kdc_context, request->server, 0);",
          "1095:         comp2 = krb5_princ_component(kdc_context, request->server, 1);",
          "1097:         comp1_str = calloc(1,comp1->length+1);",
          "1098:         if (!comp1_str) {",
          "1099:             retval = ENOMEM;",
          "1100:             goto cleanup;",
          "1101:         }",
          "1102:         strlcpy(comp1_str,comp1->data,comp1->length+1);",
          "1104:         if ((krb5_princ_type(kdc_context, request->server) == KRB5_NT_SRV_HST ||",
          "1105:              krb5_princ_type(kdc_context, request->server) == KRB5_NT_SRV_INST ||",
          "1106:              (krb5_princ_type(kdc_context, request->server) == KRB5_NT_UNKNOWN &&",
          "1107:               kdc_active_realm->realm_host_based_services != NULL &&",
          "1108:               (krb5_match_config_pattern(kdc_active_realm->realm_host_based_services,",
          "1109:                                          comp1_str) == TRUE ||",
          "1110:                krb5_match_config_pattern(kdc_active_realm->realm_host_based_services,",
          "1111:                                          KRB5_CONF_ASTERISK) == TRUE))) &&",
          "1112:             (kdc_active_realm->realm_no_host_referral == NULL ||",
          "1113:              (krb5_match_config_pattern(kdc_active_realm->realm_no_host_referral,",
          "1114:                                         KRB5_CONF_ASTERISK) == FALSE &&",
          "1115:               krb5_match_config_pattern(kdc_active_realm->realm_no_host_referral,",
          "1116:                                         comp1_str) == FALSE))) {",
          "1118:             if (memchr(comp2->data, '.', comp2->length) == NULL)",
          "1119:                 goto cleanup;",
          "1120:             temp_buf = calloc(1, comp2->length+1);",
          "1121:             if (!temp_buf) {",
          "1122:                 retval = ENOMEM;",
          "1124:             }",
          "1125:             strlcpy(temp_buf, comp2->data,comp2->length+1);",
          "1126:             retval = krb5int_get_domain_realm_mapping(kdc_context, temp_buf, &realms);",
          "1127:             free(temp_buf);",
          "1128:             if (retval) {",
          "1130:                 kdc_err(kdc_context, retval, \"unable to find realm of host\");",
          "1131:                 goto cleanup;",
          "1132:             }",
          "1133:             if (realms == 0) {",
          "1134:                 retval = KRB5KRB_AP_ERR_BADMATCH;",
          "1136:             }",
          "1137:             if (realms[0] == 0) {",
          "1138:                 free(realms);",
          "1139:                 retval = KRB5KRB_AP_ERR_BADMATCH;",
          "1141:             }",
          "1146:             retval = krb5_build_principal(kdc_context, krbtgt_princ,",
          "1147:                                           (*request->server).realm.length,",
          "1148:                                           (*request->server).realm.data,",
          "1149:                                           \"krbtgt\", realms[0], (char *)0);",
          "1150:             for (cpp = realms; *cpp; cpp++)",
          "1151:                 free(*cpp);",
          "1155:     free(comp1_str);",
          "",
          "[Added Lines]",
          "1072: static krb5_boolean",
          "1073: is_referral_req(kdc_realm_t *kdc_active_realm, krb5_kdc_req *request)",
          "1075:     krb5_boolean ret = FALSE;",
          "1076:     char *stype = NULL;",
          "1077:     char *ref_services = kdc_active_realm->realm_host_based_services;",
          "1078:     char *nonref_services = kdc_active_realm->realm_no_host_referral;",
          "1080:     if (!(request->kdc_options & KDC_OPT_CANONICALIZE))",
          "1081:         return FALSE;",
          "1083:     if (request->kdc_options & KDC_OPT_ENC_TKT_IN_SKEY)",
          "1084:         return FALSE;",
          "1086:     if (krb5_princ_size(kdc_context, request->server) != 2)",
          "1087:         return FALSE;",
          "1089:     stype = data2string(krb5_princ_component(kdc_context, request->server, 0));",
          "1090:     if (stype == NULL)",
          "1091:         return FALSE;",
          "1092:     switch (krb5_princ_type(kdc_context, request->server)) {",
          "1093:     case KRB5_NT_UNKNOWN:",
          "1095:         if (kdc_active_realm->realm_host_based_services != NULL) {",
          "1096:             if (!krb5_match_config_pattern(ref_services, stype) &&",
          "1097:                 !krb5_match_config_pattern(ref_services, KRB5_CONF_ASTERISK))",
          "1099:         } else",
          "1100:             goto cleanup;",
          "1102:     case KRB5_NT_SRV_HST:",
          "1103:     case KRB5_NT_SRV_INST:",
          "1105:         if (kdc_active_realm->realm_no_host_referral != NULL) {",
          "1106:             if (krb5_match_config_pattern(nonref_services, stype))",
          "1108:             if (krb5_match_config_pattern(nonref_services, KRB5_CONF_ASTERISK))",
          "1111:         ret = TRUE;",
          "1112:         break;",
          "1113:     default:",
          "1114:         goto cleanup;",
          "1115:     }",
          "1116: cleanup:",
          "1117:     free(stype);",
          "1118:     return ret;",
          "1119: }",
          "1125: static krb5_int32",
          "1126: find_referral_tgs(kdc_realm_t *kdc_active_realm, krb5_kdc_req *request,",
          "1127:                   krb5_principal *krbtgt_princ)",
          "1128: {",
          "1129:     krb5_error_code retval = KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN;",
          "1130:     char **realms = NULL, *hostname = NULL;",
          "1131:     krb5_data srealm = request->server->realm;",
          "1133:     if (!is_referral_req(kdc_active_realm, request))",
          "1134:         goto cleanup;",
          "1136:     hostname = data2string(krb5_princ_component(kdc_context,",
          "1137:                                                 request->server, 1));",
          "1138:     if (hostname == NULL) {",
          "1139:         retval = ENOMEM;",
          "1140:         goto cleanup;",
          "1141:     }",
          "1143:     if (strchr(hostname, '.') == NULL)",
          "1144:         goto cleanup;",
          "1145:     retval = krb5_get_host_realm(kdc_context, hostname, &realms);",
          "1146:     if (retval) {",
          "1148:         kdc_err(kdc_context, retval, \"unable to find realm of host\");",
          "1149:         goto cleanup;",
          "1150:     }",
          "1151:     if (realms == NULL || realms[0] == '\\0') {",
          "1152:         retval = KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN;",
          "1153:         goto cleanup;",
          "1155:     retval = krb5_build_principal(kdc_context, krbtgt_princ,",
          "1156:                                   srealm.length, srealm.data,",
          "1157:                                   \"krbtgt\", realms[0], (char *)0);",
          "1159:     krb5_free_host_realm(kdc_context, realms);",
          "1160:     free(hostname);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1186:         goto cleanup;",
          "1188:     if (!is_cross_tgs_principal(req->server)) {",
          "1191:         if (ret != 0)",
          "1192:             goto cleanup;",
          "1193:         ret = db_get_svc_princ(kdc_context, reftgs, flags, server, status);",
          "",
          "[Removed Lines]",
          "1190:         ret = prep_reprocess_req(kdc_active_realm, req, &reftgs);",
          "",
          "[Added Lines]",
          "1194:         ret = find_referral_tgs(kdc_active_realm, req, &reftgs);",
          "",
          "---------------"
        ],
        "src/kdc/kdc_transit.c||src/kdc/kdc_transit.c": [
          "File: src/kdc/kdc_transit.c -> src/kdc/kdc_transit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: data2string (krb5_data *d)",
          "134: {",
          "135:     char *s;",
          "",
          "[Removed Lines]",
          "132: static char *",
          "",
          "[Added Lines]",
          "132: char *",
          "",
          "---------------"
        ],
        "src/kdc/kdc_util.c||src/kdc/kdc_util.c": [
          "File: src/kdc/kdc_util.c -> src/kdc/kdc_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1881:     return retval;",
          "1882: }",
          "",
          "[Removed Lines]",
          "1885: krb5_error_code",
          "1886: krb5int_get_domain_realm_mapping(krb5_context context,",
          "1887:                                  const char *host, char ***realmsp)",
          "1888: {",
          "1889:     char **retrealms;",
          "1890:     char *realm, *cp, *temp_realm;",
          "1891:     krb5_error_code retval;",
          "1892:     char temp_host[MAX_DNS_NAMELEN+1];",
          "1895:     retval = krb5int_clean_hostname(context, host, temp_host, sizeof temp_host);",
          "1896:     if (retval)",
          "1897:         return retval;",
          "1899:       Search for the best match for the host or domain.",
          "1900:       Example: Given a host a.b.c.d, try to match on:",
          "1901:       1) a.b.c.d  2) .b.c.d.   3) b.c.d  4)  .c.d  5) c.d  6) .d   7) d",
          "1904:     cp = temp_host;",
          "1905:     realm = (char *)NULL;",
          "1906:     temp_realm = 0;",
          "1907:     while (cp ) {",
          "1908:         retval = profile_get_string(context->profile, KRB5_CONF_DOMAIN_REALM, cp,",
          "1909:                                     0, (char *)NULL, &temp_realm);",
          "1910:         if (retval)",
          "1911:             return retval;",
          "1912:         if (temp_realm != (char *)NULL)",
          "1916:         if (*cp == '.') {",
          "1917:             cp++;",
          "1918:         } else {",
          "1919:             cp = strchr(cp, '.');",
          "1920:         }",
          "1921:     }",
          "1922:     if (temp_realm != (char*)NULL) {",
          "1923:         realm = strdup(temp_realm);",
          "1924:         profile_release_string(temp_realm);",
          "1925:         if (!realm) {",
          "1926:             return ENOMEM;",
          "1927:         }",
          "1928:     }",
          "1929:     retrealms = (char **)calloc(2, sizeof(*retrealms));",
          "1930:     if (!retrealms) {",
          "1931:         if (realm != (char *)NULL)",
          "1932:             free(realm);",
          "1933:         return ENOMEM;",
          "1934:     }",
          "1936:     retrealms[0] = realm;",
          "1937:     retrealms[1] = 0;",
          "1940:     return 0;",
          "1941: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/kdc/kdc_util.h||src/kdc/kdc_util.h": [
          "File: src/kdc/kdc_util.h -> src/kdc/kdc_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:                krb5_principal client, krb5_principal server);",
          "401: int errcode_to_protocol(krb5_error_code code);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: char *data2string(krb5_data *d);",
          "",
          "---------------"
        ]
      }
    }
  ]
}