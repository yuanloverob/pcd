{
  "cve_id": "CVE-2020-36279",
  "cve_desc": "Leptonica before 1.80.0 allows a heap-based buffer over-read in rasteropGeneralLow, related to adaptmap_reg.c and adaptmap.c.",
  "repo": "DanBloomberg/leptonica",
  "patch_hash": "3c18c43b6a3f753f0dfff99610d46ad46b8bfac4",
  "patch_info": {
    "commit_hash": "3c18c43b6a3f753f0dfff99610d46ad46b8bfac4",
    "repo": "DanBloomberg/leptonica",
    "commit_url": "https://github.com/DanBloomberg/leptonica/commit/3c18c43b6a3f753f0dfff99610d46ad46b8bfac4",
    "files": [
      "prog/adaptmap_reg.c",
      "src/adaptmap.c"
    ],
    "message": "Fixing oss-fuzz issue 22512: Heap-buffer-overflow in rasteropGeneralLow() * Simplified the hole-filling function `",
    "before_after_code_files": [
      "prog/adaptmap_reg.c||prog/adaptmap_reg.c",
      "src/adaptmap.c||src/adaptmap.c"
    ]
  },
  "patch_diff": {
    "prog/adaptmap_reg.c||prog/adaptmap_reg.c": [
      "File: prog/adaptmap_reg.c -> prog/adaptmap_reg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "57: l_int32       w, h;",
      "58: PIX          *pixs, *pixg, *pixim, *pixgm, *pixmi, *pix1, *pix2;",
      "59: PIX          *pixmr, *pixmg, *pixmb, *pixmri, *pixmgi, *pixmbi;",
      "61: L_REGPARAMS  *rp;",
      "63:     if (regTestSetup(argc, argv, &rp))",
      "",
      "[Removed Lines]",
      "60: PIXA         *pixa;",
      "",
      "[Added Lines]",
      "60: PIXA         *pixa, *pixa2;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "159:     pixaAddPix(pixa, pix2, L_INSERT);",
      "160:     pixDestroy(&pixim);",
      "163:     pix1 = pixaDisplayTiledAndScaled(pixa, 32, 400, 4, 0, 20, 2);",
      "164:     pixWrite(\"/tmp/lept/adapt/results.jpg\", pix1, IFF_JFIF_JPEG);",
      "166:     pixDestroy(&pix1);",
      "167:     pixaDestroy(&pixa);",
      "",
      "[Removed Lines]",
      "165:     pixDisplayWithTitle(pix1, 100, 0, NULL, rp->display);",
      "",
      "[Added Lines]",
      "163:     pixa2 = pixaCreate(3);",
      "166:     pixaAddPix(pixa2, pix1, L_COPY);",
      "167:     pixGetDimensions(pix1, &w, &h, NULL);",
      "169:     pixRasterop(pix1, 20, 0, 2, h, PIX_SET, NULL, 0, 0);",
      "170:     pixRasterop(pix1, 40, 0, 3, h, PIX_SET, NULL, 0, 0);",
      "171:     pixRasterop(pix1, 0, 0, w, 3, PIX_SET, NULL, 0, 0);",
      "172:     pixRasterop(pix1, 0, 15, w, 3, PIX_SET, NULL, 0, 0);",
      "173:     pixRasterop(pix1, 0, 35, w, 2, PIX_SET, NULL, 0, 0);",
      "174:     pixaAddPix(pixa2, pix1, L_COPY);",
      "175:     pixFillMapHoles(pix1, w, h, L_FILL_WHITE);",
      "176:     pixaAddPix(pixa2, pix1, L_INSERT);",
      "177:     pix2 = pixaDisplayTiledInColumns(pixa2, 3, 1.0, 20, 1);",
      "179:     pixDisplayWithTitle(pix2, 50, 850, NULL, rp->display);",
      "180:     pixaDestroy(&pixa2);",
      "181:     pixDestroy(&pix2);",
      "186:     pixDisplayWithTitle(pix1, 50, 0, NULL, rp->display);",
      "",
      "---------------"
    ],
    "src/adaptmap.c||src/adaptmap.c": [
      "File: src/adaptmap.c -> src/adaptmap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1470: l_int32   w, h, y, nmiss, goodcol, i, j, found, ival, valtest;",
      "1471: l_uint32  val, lastval;",
      "1475:     PROCNAME(\"pixFillMapHoles\");",
      "",
      "[Removed Lines]",
      "1473: PIX      *pixt;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1527:         goodcol = 0;",
      "1528:         for (j = 0; j < w; j++) {",
      "",
      "[Removed Lines]",
      "1525:         pixt = pixCopy(NULL, pix);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1533:             }",
      "1534:         }",
      "1540:         }",
      "1542:             numaGetIValue(na, j, &ival);",
      "1543:             if (ival == 0) {",
      "1547:             }",
      "1548:         }",
      "1550:     }",
      "1552:         for (i = 0; i < h; i++) {",
      "",
      "[Removed Lines]",
      "1536:             for (j = goodcol - 1; j >= 0; j--) {",
      "1537:                 pixRasterop(pix, j, 0, 1, h, PIX_SRC, pixt, j + 1, 0);",
      "1538:                 pixRasterop(pixt, j, 0, 1, h, PIX_SRC, pix, j, 0);",
      "1539:             }",
      "1545:                 pixRasterop(pix, j, 0, 1, h, PIX_SRC, pixt, j - 1, 0);",
      "1546:                 pixRasterop(pixt, j, 0, 1, h, PIX_SRC, pix, j, 0);",
      "1549:         pixDestroy(&pixt);",
      "",
      "[Added Lines]",
      "1534:             for (j = goodcol - 1; j >= 0; j--)",
      "1535:                 pixRasterop(pix, j, 0, 1, h, PIX_SRC, pix, j + 1, 0);",
      "1541:                 pixRasterop(pix, j, 0, 1, h, PIX_SRC, pix, j - 1, 0);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c0fb788cb619c395166355895d97fa60d757dc5c",
      "candidate_info": {
        "commit_hash": "c0fb788cb619c395166355895d97fa60d757dc5c",
        "repo": "DanBloomberg/leptonica",
        "commit_url": "https://github.com/DanBloomberg/leptonica/commit/c0fb788cb619c395166355895d97fa60d757dc5c",
        "files": [
          "prog/adaptmap_reg.c",
          "src/adaptmap.c",
          "src/dewarp4.c",
          "src/grayquant.c"
        ],
        "message": "Issue 24134 in oss-fuzz: Heap-buffer-overflow in rasteropGeneralLow() * From dewarp_fuzzer.  Check intermediate images; simplify   pixFillMapHoles().  This may have fixed the issue.",
        "before_after_code_files": [
          "prog/adaptmap_reg.c||prog/adaptmap_reg.c",
          "src/adaptmap.c||src/adaptmap.c",
          "src/dewarp4.c||src/dewarp4.c",
          "src/grayquant.c||src/grayquant.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "prog/adaptmap_reg.c||prog/adaptmap_reg.c",
            "src/adaptmap.c||src/adaptmap.c"
          ],
          "candidate": [
            "prog/adaptmap_reg.c||prog/adaptmap_reg.c",
            "src/adaptmap.c||src/adaptmap.c"
          ]
        }
      },
      "candidate_diff": {
        "prog/adaptmap_reg.c||prog/adaptmap_reg.c": [
          "File: prog/adaptmap_reg.c -> prog/adaptmap_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: l_int32       w, h;",
          "58: PIX          *pixs, *pixg, *pixim, *pixgm, *pixmi, *pix1, *pix2;",
          "59: PIX          *pixmr, *pixmg, *pixmb, *pixmri, *pixmgi, *pixmbi;",
          "61: L_REGPARAMS  *rp;",
          "63:     if (regTestSetup(argc, argv, &rp))",
          "",
          "[Removed Lines]",
          "60: PIXA         *pixa, *pixa2;",
          "",
          "[Added Lines]",
          "60: PIXA         *pixa;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     pixaAddPix(pixa, pix2, L_INSERT);",
          "160:     pixDestroy(&pixim);",
          "167:     pixGetDimensions(pix1, &w, &h, NULL);",
          "169:     pixRasterop(pix1, 20, 0, 2, h, PIX_SET, NULL, 0, 0);",
          "",
          "[Removed Lines]",
          "163:     pixa2 = pixaCreate(3);",
          "166:     pixaAddPix(pixa2, pix1, L_COPY);",
          "",
          "[Added Lines]",
          "163:     pix1 = pixaDisplayTiledAndScaled(pixa, 32, 400, 4, 0, 20, 2);",
          "164:     pixWrite(\"/tmp/lept/adapt/results.jpg\", pix1, IFF_JFIF_JPEG);",
          "165:     pixDisplayWithTitle(pix1, 50, 0, NULL, rp->display);",
          "166:     pixDestroy(&pix1);",
          "167:     pixaDestroy(&pixa);",
          "170:     pixa = pixaCreate(3);",
          "173:     pixaAddPix(pixa, pix1, L_COPY);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     pixRasterop(pix1, 0, 0, w, 3, PIX_SET, NULL, 0, 0);",
          "172:     pixRasterop(pix1, 0, 15, w, 3, PIX_SET, NULL, 0, 0);",
          "173:     pixRasterop(pix1, 0, 35, w, 2, PIX_SET, NULL, 0, 0);",
          "175:     pixFillMapHoles(pix1, w, h, L_FILL_WHITE);",
          "179:     pixDisplayWithTitle(pix2, 50, 850, NULL, rp->display);",
          "181:     pixDestroy(&pix2);",
          "187:     pixDestroy(&pix1);",
          "188:     pixaDestroy(&pixa);",
          "190:     return regTestCleanup(rp);",
          "191: }",
          "",
          "[Removed Lines]",
          "174:     pixaAddPix(pixa2, pix1, L_COPY);",
          "176:     pixaAddPix(pixa2, pix1, L_INSERT);",
          "177:     pix2 = pixaDisplayTiledInColumns(pixa2, 3, 1.0, 20, 1);",
          "180:     pixaDestroy(&pixa2);",
          "184:     pix1 = pixaDisplayTiledAndScaled(pixa, 32, 400, 4, 0, 20, 2);",
          "185:     pixWrite(\"/tmp/lept/adapt/results.jpg\", pix1, IFF_JFIF_JPEG);",
          "186:     pixDisplayWithTitle(pix1, 50, 0, NULL, rp->display);",
          "",
          "[Added Lines]",
          "181:     pixaAddPix(pixa, pix1, L_COPY);",
          "183:     pixaAddPix(pixa, pix1, L_INSERT);",
          "184:     pix2 = pixaDisplayTiledInColumns(pixa, 3, 1.0, 20, 1);",
          "187:     pixaDestroy(&pixa);",
          "191:     pixa = pixaCreate(2);",
          "192:     pix1 = pixCreate(3, 3, 8);",
          "193:     pixSetPixel(pix1, 1, 0, 128);",
          "194:     pix2 = pixExpandReplicate(pix1, 25);",
          "195:     pixaAddPix(pixa, pix2, L_INSERT);",
          "196:     pixFillMapHoles(pix1, 3, 3, L_FILL_BLACK);",
          "197:     pix2 = pixExpandReplicate(pix1, 25);",
          "198:     pixaAddPix(pixa, pix2, L_INSERT);",
          "200:     pix1 = pixaDisplayTiledInColumns(pixa, 2, 1.0, 20, 0);",
          "202:     pixDisplayWithTitle(pix1, 50, 1000, NULL, rp->display);",
          "204:     pixDestroy(&pix1);",
          "",
          "---------------"
        ],
        "src/adaptmap.c||src/adaptmap.c": [
          "File: src/adaptmap.c -> src/adaptmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "906:     pixb = pixThresholdToBinary(pixs, thresh);",
          "907:     pixf = pixMorphSequence(pixb, \"d7.1 + d1.7\", 0);",
          "908:     pixDestroy(&pixb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "909:     if (!pixf)",
          "910:         return ERROR_INT(\"pixf not made\", procName, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1542:         }",
          "1543:     }",
          "1549:     }",
          "1551:     numaDestroy(&na);",
          "",
          "[Removed Lines]",
          "1545:         for (i = 0; i < h; i++) {",
          "1546:             pixGetPixel(pix, w - 2, i, &val);",
          "1547:             pixSetPixel(pix, w - 1, i, val);",
          "1548:         }",
          "",
          "[Added Lines]",
          "1547:         pixRasterop(pix, w - 1, 0, 1, h, PIX_SRC, pix, w - 2, 0);",
          "",
          "---------------"
        ],
        "src/dewarp4.c||src/dewarp4.c": [
          "File: src/dewarp4.c -> src/dewarp4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:                      PIX        **ppixb,",
          "174:                      L_DEWARPA  **pdewa)",
          "175: {",
          "178:     PROCNAME(\"dewarpSinglePageInit\");",
          "",
          "[Removed Lines]",
          "176: PIX  *pix1;",
          "",
          "[Added Lines]",
          "176: PIX  *pix1, *pix2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:     if (!pixs)",
          "185:         return ERROR_INT(\"pixs not defined\", procName, 1);",
          "192:     if (pixGetDepth(pixs) > 1) {",
          "194:         if (adaptive)",
          "196:         else",
          "198:         pixDestroy(&pix1);",
          "199:     } else {",
          "201:     }",
          "202:     return 0;",
          "203: }",
          "",
          "[Removed Lines]",
          "188:     dewarpaUseBothArrays(*pdewa, useboth);",
          "189:     dewarpaSetCheckColumns(*pdewa, check_columns);",
          "193:         pix1 = pixConvertTo8(pixs, 0);",
          "",
          "[Added Lines]",
          "189:         if ((pix1 = pixConvertTo8(pixs, 0)) == NULL)",
          "190:             return ERROR_INT(\"pix1 not made\", procName, 1);",
          "192:             pix2 = pixAdaptThresholdToBinary(pix1, NULL, 1.0);",
          "194:             pix2 = pixThresholdToBinary(pix1, thresh);",
          "196:         if (!pix2)",
          "197:             return ERROR_INT(\"pix2 not made\", procName, 1);",
          "204:     dewarpaUseBothArrays(*pdewa, useboth);",
          "205:     dewarpaSetCheckColumns(*pdewa, check_columns);",
          "",
          "---------------"
        ],
        "src/grayquant.c||src/grayquant.c": [
          "File: src/grayquant.c -> src/grayquant.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "781:     if (!pixs || pixGetDepth(pixs) != 8)",
          "782:         return (PIX *)ERROR_PTR(\"pixs undefined or not 8 bpp\", procName, NULL);",
          "785:     pixGammaTRC(pix1, pix1, gamma, blackval, whiteval);",
          "786:     pixd = pixThresholdToBinary(pix1, thresh);",
          "787:     pixDestroy(&pix1);",
          "",
          "[Removed Lines]",
          "784:     pix1 = pixBackgroundNormSimple(pixs, pixm, NULL);",
          "",
          "[Added Lines]",
          "784:     if ((pix1 = pixBackgroundNormSimple(pixs, pixm, NULL)) == NULL)",
          "785:         return (PIX *)ERROR_PTR(\"pix1 not made\", procName, NULL);",
          "",
          "---------------"
        ]
      }
    }
  ]
}