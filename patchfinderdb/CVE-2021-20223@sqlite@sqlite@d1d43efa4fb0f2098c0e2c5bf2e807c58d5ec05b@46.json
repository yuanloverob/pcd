{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c3b4b07d13f1cb9047103582381925a01f1a3a2",
      "candidate_info": {
        "commit_hash": "6c3b4b07d13f1cb9047103582381925a01f1a3a2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c3b4b07d13f1cb9047103582381925a01f1a3a2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteLimit.h",
          "test/releasetest_data.tcl"
        ],
        "message": "Fix a crash that could occur in SQLITE_MAX_EXPR_DEPTH=0 builds when processing SQL containing syntax errors.\n\nFossilOrigin-Name: 5f58dd3a19605b6f49b4364fa29892502eff35f12a7693a8694100e1844711ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteLimit.h||src/sqliteLimit.h",
          "test/releasetest_data.tcl||test/releasetest_data.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3c5e63c22ffbfeb66eb6ee38912d29fad6f2bd4d74b6a25e89bd36bf40eaa661",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "770: void sqlite3ExprSetHeightAndFlags(Parse *pParse, Expr *p){",
          "771:   if( p && p->x.pList && !ExprHasProperty(p, EP_xIsSelect) ){",
          "772:     p->flags |= EP_Propagate & sqlite3ExprListFlags(p->x.pList);",
          "773:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771:   if( pParse->nErr ) return;",
          "",
          "---------------"
        ],
        "src/sqliteLimit.h||src/sqliteLimit.h": [
          "File: src/sqliteLimit.h -> src/sqliteLimit.h"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:     -DSQLITE_MUTATION_TEST",
          "137:     --enable-fts5 --enable-json1",
          "138:   }",
          "139:   \"Fast-One\" {",
          "140:     -O6",
          "141:     -DSQLITE_ENABLE_FTS4=1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:   \"Debug-Two\" {",
          "140:     -DSQLITE_DEFAULT_MEMSTATUS=0",
          "141:     -DSQLITE_MAX_EXPR_DEPTH=0",
          "142:     --enable-debug",
          "143:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:     \"Check-Symbols*\"          checksymbols",
          "287:     \"Fast-One\"                \"fuzztest test\"",
          "288:     \"Debug-One\"               \"mptest test\"",
          "289:     \"Have-Not\"                test",
          "290:     \"Secure-Delete\"           test",
          "291:     \"Unlock-Notify\"           \"QUICKTEST_INCLUDE=notify2.test test\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:     \"Debug-Two\"               \"test\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56ea69bf0e08988ded0e95a75a0ba5b6cab5e7d1",
      "candidate_info": {
        "commit_hash": "56ea69bf0e08988ded0e95a75a0ba5b6cab5e7d1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/56ea69bf0e08988ded0e95a75a0ba5b6cab5e7d1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Record when the OP_IfNotOpen branch is and is not taken.\n\nFossilOrigin-Name: 182a898b14d585edd5fcfdcd6584c957911f0d81773d2868f16b5762dec031ca",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 481f4956aff52797880930752693a8c0b10d7fdd71d86919fe8ee13c90ad5b81",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4398:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "4399:   if( !p->apCsr[pOp->p1] ){",
          "4400:     goto jump_to_p2_and_check_for_interrupt;",
          "4401:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4399:   VdbeBranchTaken(p->apCsr[pOp->p1]==0, 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05881886a6a306c10388bc174cd597f891aa9c19",
      "candidate_info": {
        "commit_hash": "05881886a6a306c10388bc174cd597f891aa9c19",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/05881886a6a306c10388bc174cd597f891aa9c19",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Fix typo in a documentation comment.\n\nFossilOrigin-Name: 462adc7d6b14de3862c2a3e57dba7efaf2ba9c104e1c127a5801a7b892059872",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3e2643619d122616663688533977d6c60d45a269b4e2bdc330fd3ee5d39f2e03",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "8ddf6358112dc00bcb3cd255beac948a49a5eecd",
      "candidate_info": {
        "commit_hash": "8ddf6358112dc00bcb3cd255beac948a49a5eecd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8ddf6358112dc00bcb3cd255beac948a49a5eecd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btreeInt.h"
        ],
        "message": "Change the name of IntegrityCk.mallocFailed to IntegrityCk.bOomFault to avoid confusion with the sqlite3 object field with the same name.\n\nFossilOrigin-Name: 87c7d962581f4bb1224086701352850ede9847dc76235b33c7c2a35ef594d382",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btreeInt.h||src/btreeInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ada43e7c490bf72a50ee84e1db994e149744b2a943260449076b83d1874813b2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9632:   sqlite3_str_vappendf(&pCheck->errMsg, zFormat, ap);",
          "9633:   va_end(ap);",
          "9634:   if( pCheck->errMsg.accError==SQLITE_NOMEM ){",
          "9636:   }",
          "9637: }",
          "",
          "[Removed Lines]",
          "9635:     pCheck->mallocFailed = 1;",
          "",
          "[Added Lines]",
          "9635:     pCheck->bOomFault = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9698:   rc = ptrmapGet(pCheck->pBt, iChild, &ePtrmapType, &iPtrmapParent);",
          "9699:   if( rc!=SQLITE_OK ){",
          "9701:     checkAppendMsg(pCheck, \"Failed to read ptrmap key=%d\", iChild);",
          "9702:     return;",
          "9703:   }",
          "",
          "[Removed Lines]",
          "9700:     if( rc==SQLITE_NOMEM || rc==SQLITE_IOERR_NOMEM ) pCheck->mallocFailed = 1;",
          "",
          "[Added Lines]",
          "9700:     if( rc==SQLITE_NOMEM || rc==SQLITE_IOERR_NOMEM ) pCheck->bOomFault = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10142:   sCheck.nPage = btreePagecount(sCheck.pBt);",
          "10143:   sCheck.mxErr = mxErr;",
          "10144:   sCheck.nErr = 0;",
          "10146:   sCheck.zPfx = 0;",
          "10147:   sCheck.v1 = 0;",
          "10148:   sCheck.v2 = 0;",
          "",
          "[Removed Lines]",
          "10145:   sCheck.mallocFailed = 0;",
          "",
          "[Added Lines]",
          "10145:   sCheck.bOomFault = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10157:   sCheck.aPgRef = sqlite3MallocZero((sCheck.nPage / 8)+ 1);",
          "10158:   if( !sCheck.aPgRef ){",
          "10160:     goto integrity_ck_cleanup;",
          "10161:   }",
          "10162:   sCheck.heap = (u32*)sqlite3PageMalloc( pBt->pageSize );",
          "10163:   if( sCheck.heap==0 ){",
          "10165:     goto integrity_ck_cleanup;",
          "10166:   }",
          "",
          "[Removed Lines]",
          "10159:     sCheck.mallocFailed = 1;",
          "10164:     sCheck.mallocFailed = 1;",
          "",
          "[Added Lines]",
          "10159:     sCheck.bOomFault = 1;",
          "10164:     sCheck.bOomFault = 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "10236: integrity_ck_cleanup:",
          "10237:   sqlite3PageFree(sCheck.heap);",
          "10238:   sqlite3_free(sCheck.aPgRef);",
          "10240:     sqlite3_str_reset(&sCheck.errMsg);",
          "10241:     sCheck.nErr++;",
          "10242:   }",
          "",
          "[Removed Lines]",
          "10239:   if( sCheck.mallocFailed ){",
          "",
          "[Added Lines]",
          "10239:   if( sCheck.bOomFault ){",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ]
      }
    },
    {
      "candidate_hash": "cd30064bd502b9b42a4e0c0e04850f09cefa2617",
      "candidate_info": {
        "commit_hash": "cd30064bd502b9b42a4e0c0e04850f09cefa2617",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cd30064bd502b9b42a4e0c0e04850f09cefa2617",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata1.db",
          "test/gencol1.test"
        ],
        "message": "Add all fuzz-test cases received from Yongheng Chen and Rui Zhong.  Also fix a minor problem in gencol1.test cases.\n\nFossilOrigin-Name: ac080432b480062507452d3cdbe6c0f759e6f95b65d9862e0462017405ab2b8e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a0ab42f779b9a96f4e43879210dfaba8fa593de77fc0ec0e2e6f116d9301ea59",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "246: # 2019-11-21 Problems in the new generated column logic",
          "247: # reported by Yongheng Chen and Rui Zhong",
          "248: do_execsql_test gencol1-9.10 {",
          "249:   DROP TABLE t1;",
          "250:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
          "251:   INSERT INTO t1 VALUES(17);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:   PRAGMA foreign_keys=OFF;",
          "",
          "---------------"
        ]
      }
    }
  ]
}