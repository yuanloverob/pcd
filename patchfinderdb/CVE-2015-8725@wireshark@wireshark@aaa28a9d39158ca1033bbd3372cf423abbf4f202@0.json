{
  "cve_id": "CVE-2015-8725",
  "cve_desc": "The dissect_diameter_base_framed_ipv6_prefix function in epan/dissectors/packet-diameter.c in the DIAMETER dissector in Wireshark 1.12.x before 1.12.9 and 2.0.x before 2.0.1 does not validate the IPv6 prefix length, which allows remote attackers to cause a denial of service (stack-based buffer overflow and application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "aaa28a9d39158ca1033bbd3372cf423abbf4f202",
  "patch_info": {
    "commit_hash": "aaa28a9d39158ca1033bbd3372cf423abbf4f202",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/aaa28a9d39158ca1033bbd3372cf423abbf4f202",
    "files": [
      "epan/dissectors/packet-diameter.c"
    ],
    "message": "Diameter: check IPv6 prefix length before copying it in e_in6_addr structure\n\nBug: 11792\nChange-Id: I37a07044d40f10e9a1a90025d90753fdb3db2278\nReviewed-on: https://code.wireshark.org/review/12248\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c": [
      "File: epan/dissectors/packet-diameter.c -> epan/dissectors/packet-diameter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "291: static expert_field ei_diameter_code = EI_INIT;",
      "292: static expert_field ei_diameter_avp_code = EI_INIT;",
      "293: static expert_field ei_diameter_avp_vendor_id = EI_INIT;",
      "296: static int diameter_tap = -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "294: static expert_field ei_diameter_invalid_ipv6_prefix_len = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "504: {",
      "505:  diam_sub_dis_t *diam_sub_dis = (diam_sub_dis_t*)data;",
      "506:  guint8 prefix_len, prefix_len_bytes;",
      "508:  proto_tree_add_item(tree, hf_framed_ipv6_prefix_reserved, tvb, 0, 1, ENC_BIG_ENDIAN);",
      "511:  prefix_len = tvb_get_guint8(tvb, 1);",
      "512:  prefix_len_bytes = prefix_len / 8;",
      "513:  if (prefix_len % 8)",
      "514:   prefix_len_bytes++;",
      "",
      "[Removed Lines]",
      "509:  proto_tree_add_item(tree, hf_framed_ipv6_prefix_length, tvb, 1, 1, ENC_BIG_ENDIAN);",
      "",
      "[Added Lines]",
      "508:  proto_item *pi;",
      "511:  pi = proto_tree_add_item(tree, hf_framed_ipv6_prefix_length, tvb, 1, 1, ENC_BIG_ENDIAN);",
      "514:  if (prefix_len > 128) {",
      "515:   expert_add_info(pinfo, pi, &ei_diameter_invalid_ipv6_prefix_len);",
      "516:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "519:  if (prefix_len_bytes == 16) {",
      "520:   proto_tree_add_item(tree, hf_framed_ipv6_prefix_ipv6, tvb, 2, prefix_len_bytes, ENC_NA);",
      "522:   struct e_in6_addr value;",
      "523:   address addr;",
      "",
      "[Removed Lines]",
      "521:  } else {",
      "",
      "[Added Lines]",
      "526:  } else if (prefix_len_bytes < 16) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2246:   { &ei_diameter_application_id, { \"diameter.applicationId.unknown\", PI_UNDECODED, PI_WARN, \"Unknown Application Id, if you know what this is you can add it to dictionary.xml\", EXPFILL }},",
      "2247:   { &ei_diameter_version, { \"diameter.version.unknown\", PI_UNDECODED, PI_WARN, \"Unknown Diameter Version (decoding as RFC 3588)\", EXPFILL }},",
      "2248:   { &ei_diameter_code, { \"diameter.cmd.code.unknown\", PI_UNDECODED, PI_WARN, \"Unknown command, if you know what this is you can add it to dictionary.xml\", EXPFILL }},",
      "2249:  };",
      "2251:  wmem_array_append(build_dict.hf, hf_base, array_length(hf_base));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2254:   { &ei_diameter_invalid_ipv6_prefix_len, { \"diameter.invalid_ipv6_prefix_len\", PI_MALFORMED, PI_ERROR, \"Invalid IPv6 Prefix length\", EXPFILL }}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "644bc7868dda0717f7e49ec01e07e0043f7385fb",
      "candidate_info": {
        "commit_hash": "644bc7868dda0717f7e49ec01e07e0043f7385fb",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/644bc7868dda0717f7e49ec01e07e0043f7385fb",
        "files": [
          "epan/dissectors/packet-diameter.c"
        ],
        "message": "Diameter: check IPv6 prefix length before copying it in e_in6_addr structure\n\nBug: 11792\nChange-Id: I37a07044d40f10e9a1a90025d90753fdb3db2278\nReviewed-on: https://code.wireshark.org/review/12248\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit aaa28a9d39158ca1033bbd3372cf423abbf4f202)\nReviewed-on: https://code.wireshark.org/review/12252",
        "before_after_code_files": [
          "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
          ],
          "candidate": [
            "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c": [
          "File: epan/dissectors/packet-diameter.c -> epan/dissectors/packet-diameter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293: static expert_field ei_diameter_code = EI_INIT;",
          "294: static expert_field ei_diameter_avp_code = EI_INIT;",
          "295: static expert_field ei_diameter_avp_vendor_id = EI_INIT;",
          "298: static int diameter_tap = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296: static expert_field ei_diameter_invalid_ipv6_prefix_len = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:  diam_sub_dis_t *diam_sub_dis = (diam_sub_dis_t*)data;",
          "426:  guint8 prefix_len, prefix_len_bytes;",
          "429:  proto_tree_add_item(tree, hf_framed_ipv6_prefix_reserved, tvb, 0, 1, ENC_BIG_ENDIAN);",
          "432:  prefix_len = tvb_get_guint8(tvb, 1);",
          "433:  prefix_len_bytes = prefix_len / 8;",
          "434:  if (prefix_len % 8)",
          "435:   prefix_len_bytes++;",
          "",
          "[Removed Lines]",
          "430:  proto_tree_add_item(tree, hf_framed_ipv6_prefix_length, tvb, 1, 1, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "429:  proto_item *pi;",
          "432:  pi = proto_tree_add_item(tree, hf_framed_ipv6_prefix_length, tvb, 1, 1, ENC_BIG_ENDIAN);",
          "435:  if (prefix_len > 128) {",
          "436:   expert_add_info(pinfo, pi, &ei_diameter_invalid_ipv6_prefix_len);",
          "437:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "440:  if (prefix_len_bytes == 16){",
          "441:   proto_tree_add_item(tree, hf_framed_ipv6_prefix_ipv6, tvb, 2, prefix_len_bytes, ENC_NA);",
          "443:   struct e_in6_addr value;",
          "445:   memset(&value.bytes, 0, sizeof(value));",
          "",
          "[Removed Lines]",
          "442:  }else{",
          "",
          "[Added Lines]",
          "447:  } else if (prefix_len_bytes < 16) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2047:   { &ei_diameter_application_id, { \"diameter.applicationId.unknown\", PI_UNDECODED, PI_WARN, \"Unknown Application Id, if you know what this is you can add it to dictionary.xml\", EXPFILL }},",
          "2048:   { &ei_diameter_version, { \"diameter.version.unknown\", PI_UNDECODED, PI_WARN, \"Unknown Diameter Version (decoding as RFC 3588)\", EXPFILL }},",
          "2049:   { &ei_diameter_code, { \"diameter.cmd.code.unknown\", PI_UNDECODED, PI_WARN, \"Unknown command, if you know what this is you can add it to dictionary.xml\", EXPFILL }},",
          "2050:  };",
          "2052:  wmem_array_append(build_dict.hf, hf_base, array_length(hf_base));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2055:   { &ei_diameter_invalid_ipv6_prefix_len, { \"diameter.invalid_ipv6_prefix_len\", PI_MALFORMED, PI_ERROR, \"Invalid IPv6 Prefix length\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39509e4568e93ec54670860635a97203cb7f30ab",
      "candidate_info": {
        "commit_hash": "39509e4568e93ec54670860635a97203cb7f30ab",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/39509e4568e93ec54670860635a97203cb7f30ab",
        "files": [
          "epan/dissectors/packet-diameter.c"
        ],
        "message": "Diameter: check IPv6 prefix length before copying it in e_in6_addr structure\n\nConflicts:\n\tepan/dissectors/packet-diameter.c\n\nBug: 11792\nChange-Id: I37a07044d40f10e9a1a90025d90753fdb3db2278\nReviewed-on: https://code.wireshark.org/review/12248\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit aaa28a9d39158ca1033bbd3372cf423abbf4f202)\nReviewed-on: https://code.wireshark.org/review/12252\n(cherry picked from commit 644bc7868dda0717f7e49ec01e07e0043f7385fb)\nReviewed-on: https://code.wireshark.org/review/13763\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nReviewed-on: https://code.wireshark.org/review/14377",
        "before_after_code_files": [
          "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
          ],
          "candidate": [
            "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c": [
          "File: epan/dissectors/packet-diameter.c -> epan/dissectors/packet-diameter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348: dissect_diameter_base_framed_ipv6_prefix(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree)",
          "349: {",
          "350:  guint8 prefix_len, prefix_len_bytes;",
          "352:  proto_tree_add_item(tree, hf_framed_ipv6_prefix_reserved, tvb, 0, 1, ENC_BIG_ENDIAN);",
          "355:  prefix_len = tvb_get_guint8(tvb, 1);",
          "356:  prefix_len_bytes = prefix_len / 8;",
          "357:  if (prefix_len % 8)",
          "358:   prefix_len_bytes++;",
          "",
          "[Removed Lines]",
          "353:  proto_tree_add_item(tree, hf_framed_ipv6_prefix_length, tvb, 1, 1, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "351:  proto_item *pi;",
          "354:  pi = proto_tree_add_item(tree, hf_framed_ipv6_prefix_length, tvb, 1, 1, ENC_BIG_ENDIAN);",
          "357:  if (prefix_len > 128) {",
          "358:   expert_add_info_format(pinfo, pi, PI_MALFORMED, PI_NOTE,",
          "359:            \"Bad Prefix Length (%u), using 128 bits\", prefix_len);",
          "360:   prefix_len = 128;",
          "361:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92c892e1e55e348289321c52f05542ca6cfe626f",
      "candidate_info": {
        "commit_hash": "92c892e1e55e348289321c52f05542ca6cfe626f",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/92c892e1e55e348289321c52f05542ca6cfe626f",
        "files": [
          "epan/dissectors/packet-diameter.c"
        ],
        "message": "Diameter: check IPv6 prefix length before copying it in e_in6_addr structure\n\nBug: 11792\nChange-Id: I37a07044d40f10e9a1a90025d90753fdb3db2278\nReviewed-on: https://code.wireshark.org/review/12248\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit aaa28a9d39158ca1033bbd3372cf423abbf4f202)\nReviewed-on: https://code.wireshark.org/review/12251",
        "before_after_code_files": [
          "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
          ],
          "candidate": [
            "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c": [
          "File: epan/dissectors/packet-diameter.c -> epan/dissectors/packet-diameter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "291: static expert_field ei_diameter_code = EI_INIT;",
          "292: static expert_field ei_diameter_avp_code = EI_INIT;",
          "293: static expert_field ei_diameter_avp_vendor_id = EI_INIT;",
          "296: static int diameter_tap = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294: static expert_field ei_diameter_invalid_ipv6_prefix_len = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "504: {",
          "505:  diam_sub_dis_t *diam_sub_dis = (diam_sub_dis_t*)data;",
          "506:  guint8 prefix_len, prefix_len_bytes;",
          "508:  proto_tree_add_item(tree, hf_framed_ipv6_prefix_reserved, tvb, 0, 1, ENC_BIG_ENDIAN);",
          "511:  prefix_len = tvb_get_guint8(tvb, 1);",
          "512:  prefix_len_bytes = prefix_len / 8;",
          "513:  if (prefix_len % 8)",
          "514:   prefix_len_bytes++;",
          "",
          "[Removed Lines]",
          "509:  proto_tree_add_item(tree, hf_framed_ipv6_prefix_length, tvb, 1, 1, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "508:  proto_item *pi;",
          "511:  pi = proto_tree_add_item(tree, hf_framed_ipv6_prefix_length, tvb, 1, 1, ENC_BIG_ENDIAN);",
          "514:  if (prefix_len > 128) {",
          "515:   expert_add_info(pinfo, pi, &ei_diameter_invalid_ipv6_prefix_len);",
          "516:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "519:  if (prefix_len_bytes == 16) {",
          "520:   proto_tree_add_item(tree, hf_framed_ipv6_prefix_ipv6, tvb, 2, prefix_len_bytes, ENC_NA);",
          "522:   struct e_in6_addr value;",
          "523:   address addr;",
          "",
          "[Removed Lines]",
          "521:  } else {",
          "",
          "[Added Lines]",
          "526:  } else if (prefix_len_bytes < 16) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2246:   { &ei_diameter_application_id, { \"diameter.applicationId.unknown\", PI_UNDECODED, PI_WARN, \"Unknown Application Id, if you know what this is you can add it to dictionary.xml\", EXPFILL }},",
          "2247:   { &ei_diameter_version, { \"diameter.version.unknown\", PI_UNDECODED, PI_WARN, \"Unknown Diameter Version (decoding as RFC 3588)\", EXPFILL }},",
          "2248:   { &ei_diameter_code, { \"diameter.cmd.code.unknown\", PI_UNDECODED, PI_WARN, \"Unknown command, if you know what this is you can add it to dictionary.xml\", EXPFILL }},",
          "2249:  };",
          "2251:  wmem_array_append(build_dict.hf, hf_base, array_length(hf_base));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2254:   { &ei_diameter_invalid_ipv6_prefix_len, { \"diameter.invalid_ipv6_prefix_len\", PI_MALFORMED, PI_ERROR, \"Invalid IPv6 Prefix length\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4897415c591c927e85792ab0260c59fc7def4a91",
      "candidate_info": {
        "commit_hash": "4897415c591c927e85792ab0260c59fc7def4a91",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4897415c591c927e85792ab0260c59fc7def4a91",
        "files": [
          "epan/dissectors/packet-diameter.c"
        ],
        "message": "Diameter: check IPv6 prefix length before copying it in e_in6_addr structure\n\nBug: 11792\nChange-Id: I37a07044d40f10e9a1a90025d90753fdb3db2278\nReviewed-on: https://code.wireshark.org/review/12248\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit aaa28a9d39158ca1033bbd3372cf423abbf4f202)\nReviewed-on: https://code.wireshark.org/review/12252\n(cherry picked from commit 644bc7868dda0717f7e49ec01e07e0043f7385fb)\nReviewed-on: https://code.wireshark.org/review/13763\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
          ],
          "candidate": [
            "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c": [
          "File: epan/dissectors/packet-diameter.c -> epan/dissectors/packet-diameter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "294: static expert_field ei_diameter_code = EI_INIT;",
          "295: static expert_field ei_diameter_avp_code = EI_INIT;",
          "296: static expert_field ei_diameter_avp_vendor_id = EI_INIT;",
          "299: static int diameter_tap = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297: static expert_field ei_diameter_invalid_ipv6_prefix_len = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:  diam_sub_dis_t *diam_sub_dis = (diam_sub_dis_t*)data;",
          "426:  guint8 prefix_len, prefix_len_bytes;",
          "429:  proto_tree_add_item(tree, hf_framed_ipv6_prefix_reserved, tvb, 0, 1, ENC_BIG_ENDIAN);",
          "432:  prefix_len = tvb_get_guint8(tvb, 1);",
          "433:  prefix_len_bytes = prefix_len / 8;",
          "434:  if (prefix_len % 8)",
          "435:   prefix_len_bytes++;",
          "",
          "[Removed Lines]",
          "430:  proto_tree_add_item(tree, hf_framed_ipv6_prefix_length, tvb, 1, 1, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "429:  proto_item *pi;",
          "432:  pi = proto_tree_add_item(tree, hf_framed_ipv6_prefix_length, tvb, 1, 1, ENC_BIG_ENDIAN);",
          "435:  if (prefix_len > 128) {",
          "436:   expert_add_info(pinfo, pi, &ei_diameter_invalid_ipv6_prefix_len);",
          "437:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "440:  if (prefix_len_bytes == 16){",
          "441:   proto_tree_add_item(tree, hf_framed_ipv6_prefix_ipv6, tvb, 2, prefix_len_bytes, ENC_NA);",
          "443:   struct e_in6_addr value;",
          "445:   memset(&value.bytes, 0, sizeof(value));",
          "",
          "[Removed Lines]",
          "442:  }else{",
          "",
          "[Added Lines]",
          "447:  } else if (prefix_len_bytes < 16) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2000:   { &ei_diameter_application_id, { \"diameter.applicationId.unknown\", PI_UNDECODED, PI_WARN, \"Unknown Application Id, if you know what this is you can add it to dictionary.xml\", EXPFILL }},",
          "2001:   { &ei_diameter_version, { \"diameter.version.unknown\", PI_UNDECODED, PI_WARN, \"Unknown Diameter Version (decoding as RFC 3588)\", EXPFILL }},",
          "2002:   { &ei_diameter_code, { \"diameter.cmd.code.unknown\", PI_UNDECODED, PI_WARN, \"Unknown command, if you know what this is you can add it to dictionary.xml\", EXPFILL }},",
          "2003:  };",
          "2005:  wmem_array_append(build_dict.hf, hf_base, array_length(hf_base));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2008:   { &ei_diameter_invalid_ipv6_prefix_len, { \"diameter.invalid_ipv6_prefix_len\", PI_MALFORMED, PI_ERROR, \"Invalid IPv6 Prefix length\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68b73981193851d06d2d66d07394d84b908fec7a",
      "candidate_info": {
        "commit_hash": "68b73981193851d06d2d66d07394d84b908fec7a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/68b73981193851d06d2d66d07394d84b908fec7a",
        "files": [
          "epan/dissectors/packet-diameter.c"
        ],
        "message": "[Diameter] Improve dissection of malformed packets by continnuing dissection and display the problem more prominetly.\n\nChange-Id: Ia1a32667a18e1e5b60b5c167da9b6dd945ba3dfc\nReviewed-on: https://code.wireshark.org/review/17385\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
          ],
          "candidate": [
            "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c": [
          "File: epan/dissectors/packet-diameter.c -> epan/dissectors/packet-diameter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "292: static expert_field ei_diameter_avp_code = EI_INIT;",
          "293: static expert_field ei_diameter_avp_vendor_id = EI_INIT;",
          "294: static expert_field ei_diameter_invalid_ipv6_prefix_len = EI_INIT;",
          "297: static int diameter_tap = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295: static expert_field ei_diameter_invalid_avp_len = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "695:   }",
          "696: #endif",
          "697:  }",
          "700:  avp_item = proto_tree_add_item(c->tree, hf_diameter_avp, tvb, offset, len + pad_len, ENC_NA);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "700:  if (len > (guint32)tvb_reported_length_remaining(tvb, offset)) {",
          "701:   proto_tree_add_expert_format(c->tree, c->pinfo, &ei_diameter_invalid_avp_len, tvb, offset + 4, 4,",
          "702:    \"Wrong AVP(%u) length %u\",",
          "703:    code,",
          "704:    len);",
          "705:   return tvb_reported_length(tvb);",
          "706:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2268:   { &ei_diameter_application_id, { \"diameter.applicationId.unknown\", PI_UNDECODED, PI_WARN, \"Unknown Application Id, if you know what this is you can add it to dictionary.xml\", EXPFILL }},",
          "2269:   { &ei_diameter_version, { \"diameter.version.unknown\", PI_UNDECODED, PI_WARN, \"Unknown Diameter Version (decoding as RFC 3588)\", EXPFILL }},",
          "2270:   { &ei_diameter_code, { \"diameter.cmd.code.unknown\", PI_UNDECODED, PI_WARN, \"Unknown command, if you know what this is you can add it to dictionary.xml\", EXPFILL }},",
          "2272:  };",
          "2274:  wmem_array_append(build_dict.hf, hf_base, array_length(hf_base));",
          "",
          "[Removed Lines]",
          "2271:   { &ei_diameter_invalid_ipv6_prefix_len, { \"diameter.invalid_ipv6_prefix_len\", PI_MALFORMED, PI_ERROR, \"Invalid IPv6 Prefix length\", EXPFILL }}",
          "",
          "[Added Lines]",
          "2280:   { &ei_diameter_invalid_ipv6_prefix_len, { \"diameter.invalid_ipv6_prefix_len\", PI_MALFORMED, PI_ERROR, \"Invalid IPv6 Prefix length\", EXPFILL }},",
          "2281:   { &ei_diameter_invalid_avp_len,{ \"diameter.invalid_avp_len\", PI_MALFORMED, PI_ERROR, \"Invalid AVP length\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    }
  ]
}