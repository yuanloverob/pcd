{
  "cve_id": "CVE-2014-5386",
  "cve_desc": "The mcrypt_create_iv function in hphp/runtime/ext/mcrypt/ext_mcrypt.cpp in Facebook HipHop Virtual Machine (HHVM) before 3.3.0 does not seed the random number generator, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging the use of a single initialization vector.",
  "repo": "facebook/hhvm",
  "patch_hash": "ab6fdeb84fb090b48606b6f7933028cfe7bf3a5e",
  "patch_info": {
    "commit_hash": "ab6fdeb84fb090b48606b6f7933028cfe7bf3a5e",
    "repo": "facebook/hhvm",
    "commit_url": "https://github.com/facebook/hhvm/commit/ab6fdeb84fb090b48606b6f7933028cfe7bf3a5e",
    "files": [
      "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp"
    ],
    "message": "Fix mcrypt_create_iv(..., MCRYPT_RAND) to auto-seed RNG\n\nSummary: Without seeding the random number generator,\nwe'll always get the same IV, and that reduces the security\nof this function.\n\nFortunately, f_rand() has all of that logic for auto-seeding\nand selection of a suitable initial seed built-in.\n\nRealistically, using MCRYPT_RAND should be deprecated.\nI'm going to wait on PHP Internals to make a decision on\nhttps://wiki.php.net/rfc/deprecate_mcrypt_rand\nbefore adding that warning however, so that our test suite\nremains consistent.\n\nCredit: Theodore R. Smith of PHP Experts, Inc. <theodorephpexperts.pro>\n\nCloses #3496\n\nReviewed By: @ptarjan\n\nDifferential Revision: D1502435",
    "before_after_code_files": [
      "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp||hphp/runtime/ext/mcrypt/ext_mcrypt.cpp"
    ]
  },
  "patch_diff": {
    "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp||hphp/runtime/ext/mcrypt/ext_mcrypt.cpp": [
      "File: hphp/runtime/ext/mcrypt/ext_mcrypt.cpp -> hphp/runtime/ext/mcrypt/ext_mcrypt.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include \"hphp/runtime/base/base-includes.h\"",
      "19: #include \"hphp/runtime/base/runtime-error.h\"",
      "21: #include <sys/types.h>",
      "22: #include <sys/stat.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #include \"hphp/runtime/ext/ext_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "376:   } else {",
      "377:     n = size;",
      "378:     while (size) {",
      "380:     }",
      "381:   }",
      "382:   return String(iv, n, AttachString);",
      "",
      "[Removed Lines]",
      "379:       iv[--size] = (char)(255.0 * rand() / RAND_MAX);",
      "",
      "[Added Lines]",
      "381:       iv[--size] = (char)f_rand(0, 255);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a2aaaf8f3a6564136532eb028c8167a7cb65f551",
      "candidate_info": {
        "commit_hash": "a2aaaf8f3a6564136532eb028c8167a7cb65f551",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/a2aaaf8f3a6564136532eb028c8167a7cb65f551",
        "files": [
          "hphp/hack/hhi/stdlib/builtins_math.idl.hhi",
          "hphp/hhbbc/interp.cpp",
          "hphp/runtime/base/array-util.cpp",
          "hphp/runtime/base/simple-counter.cpp",
          "hphp/runtime/base/tv-arith.cpp",
          "hphp/runtime/ext/ext.h",
          "hphp/runtime/ext/ext_collections.cpp",
          "hphp/runtime/ext/ext_math.cpp",
          "hphp/runtime/ext/ext_math.h",
          "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp",
          "hphp/runtime/ext/spl/ext_spl.cpp",
          "hphp/runtime/ext/std/ext_std.h",
          "hphp/runtime/ext/std/ext_std_math.cpp",
          "hphp/runtime/ext/std/ext_std_math.h",
          "hphp/runtime/ext/std/ext_std_math.php",
          "hphp/runtime/ext/std/ext_std_misc.cpp",
          "hphp/runtime/ext/string/ext_string.cpp",
          "hphp/runtime/ext/xdebug/ext_xdebug.cpp",
          "hphp/runtime/ext_zend_compat/php-src/ext/standard/rand.cpp",
          "hphp/runtime/vm/bytecode.cpp",
          "hphp/system/idl/constants.idl.json",
          "hphp/system/idl/math.idl.json",
          "hphp/test/slow/ext_math/rad2deg.php.expect",
          "hphp/test/zend/bad/ext/standard/tests/math/base_convert_variation2.php",
          "hphp/test/zend/bad/ext/standard/tests/math/base_convert_variation2.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/base_convert_variation3.php",
          "hphp/test/zend/bad/ext/standard/tests/math/base_convert_variation3.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/exp_variation1.php",
          "hphp/test/zend/bad/ext/standard/tests/math/exp_variation1.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/exp_variation1.php.ini",
          "hphp/test/zend/bad/ext/standard/tests/math/expm1_variation1.php",
          "hphp/test/zend/bad/ext/standard/tests/math/expm1_variation1.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/expm1_variation1.php.ini",
          "hphp/test/zend/bad/ext/standard/tests/math/fmod_variation1.php",
          "hphp/test/zend/bad/ext/standard/tests/math/fmod_variation1.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/fmod_variation2.php",
          "hphp/test/zend/bad/ext/standard/tests/math/fmod_variation2.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/hypot_variation1.php",
          "hphp/test/zend/bad/ext/standard/tests/math/hypot_variation1.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/hypot_variation2.php",
          "hphp/test/zend/bad/ext/standard/tests/math/hypot_variation2.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/is_finite_variation1.php",
          "hphp/test/zend/bad/ext/standard/tests/math/is_finite_variation1.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/is_infinite_variation1.php",
          "hphp/test/zend/bad/ext/standard/tests/math/is_infinite_variation1.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/is_nan_variation1.php",
          "hphp/test/zend/bad/ext/standard/tests/math/is_nan_variation1.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/log1p_variation1.php",
          "hphp/test/zend/bad/ext/standard/tests/math/log1p_variation1.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/log1p_variation1.php.ini",
          "hphp/test/zend/bad/ext/standard/tests/math/log_variation1.php",
          "hphp/test/zend/bad/ext/standard/tests/math/log_variation1.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/mt_rand_variation1.php",
          "hphp/test/zend/bad/ext/standard/tests/math/mt_rand_variation1.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/mt_rand_variation2.php",
          "hphp/test/zend/bad/ext/standard/tests/math/mt_rand_variation2.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/rand_variation1.php",
          "hphp/test/zend/bad/ext/standard/tests/math/rand_variation1.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/rand_variation2.php",
          "hphp/test/zend/bad/ext/standard/tests/math/rand_variation2.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/round_variation2.php",
          "hphp/test/zend/bad/ext/standard/tests/math/round_variation2.php.expectf",
          "hphp/test/zend/bad/ext/standard/tests/math/round_variation2.php.ini",
          "hphp/test/zend/good/ext/standard/tests/math/base_convert_variation2.php",
          "hphp/test/zend/good/ext/standard/tests/math/base_convert_variation2.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/base_convert_variation3.php",
          "hphp/test/zend/good/ext/standard/tests/math/base_convert_variation3.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/exp_variation1.php",
          "hphp/test/zend/good/ext/standard/tests/math/exp_variation1.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/exp_variation1.php.ini",
          "hphp/test/zend/good/ext/standard/tests/math/expm1_variation1.php",
          "hphp/test/zend/good/ext/standard/tests/math/expm1_variation1.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/expm1_variation1.php.ini",
          "hphp/test/zend/good/ext/standard/tests/math/fmod_variation1.php",
          "hphp/test/zend/good/ext/standard/tests/math/fmod_variation1.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/fmod_variation2.php",
          "hphp/test/zend/good/ext/standard/tests/math/fmod_variation2.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/hypot_variation1.php",
          "hphp/test/zend/good/ext/standard/tests/math/hypot_variation1.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/hypot_variation2.php",
          "hphp/test/zend/good/ext/standard/tests/math/hypot_variation2.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/is_finite_variation1.php",
          "hphp/test/zend/good/ext/standard/tests/math/is_finite_variation1.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/is_infinite_variation1.php",
          "hphp/test/zend/good/ext/standard/tests/math/is_infinite_variation1.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/is_nan_variation1.php",
          "hphp/test/zend/good/ext/standard/tests/math/is_nan_variation1.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/log1p_variation1.php",
          "hphp/test/zend/good/ext/standard/tests/math/log1p_variation1.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/log1p_variation1.php.ini",
          "hphp/test/zend/good/ext/standard/tests/math/log_variation1.php",
          "hphp/test/zend/good/ext/standard/tests/math/log_variation1.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/mt_rand_variation1.php",
          "hphp/test/zend/good/ext/standard/tests/math/mt_rand_variation1.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/mt_rand_variation2.php",
          "hphp/test/zend/good/ext/standard/tests/math/mt_rand_variation2.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/rand_variation1.php",
          "hphp/test/zend/good/ext/standard/tests/math/rand_variation1.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/rand_variation2.php",
          "hphp/test/zend/good/ext/standard/tests/math/rand_variation2.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/round_variation2.php",
          "hphp/test/zend/good/ext/standard/tests/math/round_variation2.php.expectf",
          "hphp/test/zend/good/ext/standard/tests/math/round_variation2.php.ini"
        ],
        "message": "Convert math to HNI\n\nSummary: fixes #1684\n\nConvert ext/standard/math to HNI\n\nReviewed By: @ptarjan, @JoelMarcey\n\nDifferential Revision: D1646888\n\nSignature: t1:1646888:1414613111:207e8c5ce9c600857a98461a4848aec6bf739647\n\nPulled By: @nigelchanyk",
        "before_after_code_files": [
          "hphp/hack/hhi/stdlib/builtins_math.idl.hhi||hphp/hack/hhi/stdlibuiltins_math.idl.hhi",
          "hphp/hhbbc/interp.cpp||hphp/hhbbc/interp.cpp",
          "hphp/runtime/base/array-util.cpp||hphp/runtime/base/array-util.cpp",
          "hphp/runtime/base/simple-counter.cpp||hphp/runtime/base/simple-counter.cpp",
          "hphp/runtime/base/tv-arith.cpp||hphp/runtime/base/tv-arith.cpp",
          "hphp/runtime/ext/ext.h||hphp/runtime/ext/ext.h",
          "hphp/runtime/ext/ext_collections.cpp||hphp/runtime/ext/ext_collections.cpp",
          "hphp/runtime/ext/ext_math.h||hphp/runtime/ext/ext_math.h",
          "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp||hphp/runtime/ext/mcrypt/ext_mcrypt.cpp",
          "hphp/runtime/ext/spl/ext_spl.cpp||hphp/runtime/ext/spl/ext_spl.cpp",
          "hphp/runtime/ext/std/ext_std.h||hphp/runtime/ext/std/ext_std.h",
          "hphp/runtime/ext/ext_math.cpp||hphp/runtime/ext/std/ext_std_math.cpp",
          "hphp/runtime/ext/std/ext_std_math.h||hphp/runtime/ext/std/ext_std_math.h",
          "hphp/runtime/ext/std/ext_std_math.php||hphp/runtime/ext/std/ext_std_math.php",
          "hphp/runtime/ext/std/ext_std_misc.cpp||hphp/runtime/ext/std/ext_std_misc.cpp",
          "hphp/runtime/ext/string/ext_string.cpp||hphp/runtime/ext/string/ext_string.cpp",
          "hphp/runtime/ext/xdebug/ext_xdebug.cpp||hphp/runtime/ext/xdebug/ext_xdebug.cpp",
          "hphp/runtime/ext_zend_compat/php-src/ext/standard/rand.cpp||hphp/runtime/ext_zend_compat/php-src/ext/standard/rand.cpp",
          "hphp/runtime/vm/bytecode.cpp||hphp/runtime/vm/bytecode.cpp",
          "hphp/test/slow/ext_math/rad2deg.php.expect||hphp/test/slow/ext_math/rad2deg.php.expect"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp||hphp/runtime/ext/mcrypt/ext_mcrypt.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp||hphp/runtime/ext/mcrypt/ext_mcrypt.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/hack/hhi/stdlib/builtins_math.idl.hhi||hphp/hack/hhi/stdlibuiltins_math.idl.hhi": [
          "File: hphp/hack/hhi/stdlib/builtins_math.idl.hhi -> hphp/hack/hhi/stdlibuiltins_math.idl.hhi",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: function abs($number) { }",
          "19: function is_finite($val) { }",
          "20: function is_infinite($val) { }",
          "22: function ceil($value) { }",
          "23: function floor($value): float { }",
          "24: function round($val, $precision = 0, $mode = 1) { }",
          "",
          "[Removed Lines]",
          "21: function is_nan($val) { }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/hhbbc/interp.cpp||hphp/hhbbc/interp.cpp": [
          "File: hphp/hhbbc/interp.cpp -> hphp/hhbbc/interp.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"hphp/runtime/vm/runtime.h\"",
          "31: #include \"hphp/runtime/vm/unit-util.h\"",
          "35: #include \"hphp/hhbbc/bc.h\"",
          "36: #include \"hphp/hhbbc/cfg.h\"",
          "",
          "[Removed Lines]",
          "33: #include \"hphp/runtime/ext/ext_math.h\" // f_abs",
          "",
          "[Added Lines]",
          "33: #include \"hphp/runtime/ext/std/ext_std_math.h\" // HHVM_FN(abs)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2104:     constprop(env);",
          "2105:     auto const cell = eval_cell([&] {",
          "2106:       auto const cell = *v1;",
          "2108:       assert(!IS_REFCOUNTED_TYPE(ret.asCell()->m_type));",
          "2109:       return *ret.asCell();",
          "2110:     });",
          "",
          "[Removed Lines]",
          "2107:       auto const ret = f_abs(tvAsCVarRef(&cell));",
          "",
          "[Added Lines]",
          "2107:       auto const ret = HHVM_FN(abs)(tvAsCVarRef(&cell));",
          "",
          "---------------"
        ],
        "hphp/runtime/base/array-util.cpp||hphp/runtime/base/array-util.cpp": [
          "File: hphp/runtime/base/array-util.cpp -> hphp/runtime/base/array-util.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"hphp/runtime/base/string-util.h\"",
          "23: #include \"hphp/runtime/base/thread-info.h\"",
          "26: #include \"hphp/runtime/ext/string/ext_string.h\"",
          "28: #include <folly/Optional.h>",
          "",
          "[Removed Lines]",
          "25: #include \"hphp/runtime/ext/ext_math.h\"",
          "",
          "[Added Lines]",
          "25: #include \"hphp/runtime/ext/std/ext_std_math.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "290:   if (n_elems > 1) {",
          "291:     int n_left = n_elems;",
          "292:     while (--n_left) {",
          "294:       if (rnd_idx != n_left) {",
          "295:         ssize_t temp = indices[n_left];",
          "296:         indices[n_left] = indices[rnd_idx];",
          "",
          "[Removed Lines]",
          "293:       int rnd_idx = f_rand(0, n_left);",
          "",
          "[Added Lines]",
          "293:       int rnd_idx = HHVM_FN(rand)(0, n_left);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:     ssize_t pos = input->iter_begin();",
          "342:     while (index--) {",
          "343:       pos = input->iter_advance(pos);",
          "",
          "[Removed Lines]",
          "340:     ssize_t index = f_rand(0, count-1);",
          "",
          "[Added Lines]",
          "340:     ssize_t index = HHVM_FN(rand)(0, count-1);",
          "",
          "---------------"
        ],
        "hphp/runtime/base/simple-counter.cpp||hphp/runtime/base/simple-counter.cpp": [
          "File: hphp/runtime/base/simple-counter.cpp -> hphp/runtime/base/simple-counter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"hphp/runtime/base/simple-counter.h\"",
          "19: #include \"hphp/util/stack-trace.h\"",
          "20: #include \"hphp/util/lock.h\"",
          "21: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "18: #include \"hphp/runtime/ext/ext_math.h\"",
          "",
          "[Added Lines]",
          "18: #include \"hphp/runtime/ext/std/ext_std_math.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:       assert(StackTrace::Enabled);",
          "78:       std::vector<std::string> &stackVec = s_counter->m_stacks[name];",
          "79:       if ((int)stackVec.size() < SampleStackCount ||",
          "81:         StackTrace st;",
          "82:         if ((int)stackVec.size() < SampleStackCount) {",
          "84:           stackVec.push_back(st.hexEncode(3, 3 + SampleStackDepth));",
          "85:         } else {",
          "88:             st.hexEncode(3, 3 + SampleStackDepth);",
          "89:         }",
          "90:       }",
          "",
          "[Removed Lines]",
          "80:           f_rand(0, count - 1) < SampleStackCount) {",
          "87:           stackVec[f_rand(0, SampleStackCount - 1)] =",
          "",
          "[Added Lines]",
          "80:           HHVM_FN(rand)(0, count - 1) < SampleStackCount) {",
          "87:           stackVec[HHVM_FN(rand)(0, SampleStackCount - 1)] =",
          "",
          "---------------"
        ],
        "hphp/runtime/base/tv-arith.cpp||hphp/runtime/base/tv-arith.cpp": [
          "File: hphp/runtime/base/tv-arith.cpp -> hphp/runtime/base/tv-arith.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"hphp/runtime/base/strings.h\"",
          "25: #include \"hphp/runtime/base/runtime-error.h\"",
          "26: #include \"hphp/runtime/base/tv-conversions.h\"",
          "28: #include \"hphp/util/overflow.h\"",
          "30: namespace HPHP {",
          "",
          "[Removed Lines]",
          "27: #include \"hphp/runtime/ext/ext_math.h\"",
          "",
          "[Added Lines]",
          "27: #include \"hphp/runtime/ext/std/ext_std_math.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "514: }",
          "516: Cell cellPow(Cell c1, Cell c2) {",
          "518: }",
          "520: Cell cellMod(Cell c1, Cell c2) {",
          "",
          "[Removed Lines]",
          "517:   return *f_pow(tvAsVariant(&c1), tvAsVariant(&c2)).asCell();",
          "",
          "[Added Lines]",
          "517:   return *HHVM_FN(pow)(tvAsVariant(&c1), tvAsVariant(&c2)).asCell();",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/ext.h||hphp/runtime/ext/ext.h": [
          "File: hphp/runtime/ext/ext.h -> hphp/runtime/ext/ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include \"hphp/runtime/ext/ext_fb.h\"",
          "38: #include \"hphp/runtime/ext/std/ext_std_file.h\"",
          "39: #include \"hphp/runtime/ext/ext_hash.h\"",
          "41: #include \"hphp/runtime/ext/ext_simplexml.h\"",
          "42: #include \"hphp/runtime/ext/soap/ext_soap.h\"",
          "43: #include \"hphp/runtime/ext/spl/ext_spl.h\"",
          "",
          "[Removed Lines]",
          "40: #include \"hphp/runtime/ext/ext_math.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/ext_collections.cpp||hphp/runtime/ext/ext_collections.cpp": [
          "File: hphp/runtime/ext/ext_collections.cpp -> hphp/runtime/ext/ext_collections.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"hphp/runtime/ext/ext_collections.h\"",
          "19: #include \"hphp/runtime/base/variable-serializer.h\"",
          "20: #include \"hphp/runtime/base/sort-helpers.h\"",
          "21: #include \"hphp/runtime/ext/array/ext_array.h\"",
          "23: #include \"hphp/runtime/vm/jit/translator-inline.h\"",
          "24: #include \"hphp/system/systemlib.h\"",
          "25: #include \"hphp/runtime/base/container-functions.h\"",
          "",
          "[Removed Lines]",
          "22: #include \"hphp/runtime/ext/ext_math.h\"",
          "",
          "[Added Lines]",
          "21: #include \"hphp/runtime/base/zend-math.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1018:   }",
          "1019:   mutateAndBump();",
          "1020:   for (uint32_t i = 1; i < m_size; ++i) {",
          "1022:     std::swap(m_data[i], m_data[j]);",
          "1023:   }",
          "1024: }",
          "",
          "[Removed Lines]",
          "1021:     uint32_t j = f_mt_rand(0, i);",
          "",
          "[Added Lines]",
          "1021:     uint32_t j = math_mt_rand(0, i);",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/ext_math.h||hphp/runtime/ext/ext_math.h": [
          "File: hphp/runtime/ext/ext_math.h -> hphp/runtime/ext/ext_math.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp||hphp/runtime/ext/mcrypt/ext_mcrypt.cpp": [
          "File: hphp/runtime/ext/mcrypt/ext_mcrypt.cpp -> hphp/runtime/ext/mcrypt/ext_mcrypt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"hphp/runtime/base/base-includes.h\"",
          "19: #include \"hphp/runtime/base/runtime-error.h\"",
          "22: #include <sys/types.h>",
          "23: #include <sys/stat.h>",
          "",
          "[Removed Lines]",
          "20: #include \"hphp/runtime/ext/ext_math.h\"",
          "",
          "[Added Lines]",
          "20: #include \"hphp/runtime/ext/std/ext_std_math.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:     n = size;",
          "379:     while (size) {",
          "382:     }",
          "383:   }",
          "384:   return String(iv, n, AttachString);",
          "",
          "[Removed Lines]",
          "381:       iv[--size] = (char)f_rand(0, 255);",
          "",
          "[Added Lines]",
          "381:       iv[--size] = (char)HHVM_FN(rand)(0, 255);",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/spl/ext_spl.cpp||hphp/runtime/ext/spl/ext_spl.cpp": [
          "File: hphp/runtime/ext/spl/ext_spl.cpp -> hphp/runtime/ext/spl/ext_spl.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"hphp/runtime/ext/spl/ext_spl.h\"",
          "20: #include \"hphp/runtime/ext/std/ext_std_classobj.h\"",
          "21: #include \"hphp/runtime/ext/std/ext_std_file.h\"",
          "22: #include \"hphp/runtime/ext/string/ext_string.h\"",
          "",
          "[Removed Lines]",
          "19: #include \"hphp/runtime/ext/ext_math.h\"",
          "",
          "[Added Lines]",
          "21: #include \"hphp/runtime/ext/std/ext_std_math.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   if (!s_inited) {",
          "67:     Lock lock(s_mutex);",
          "68:     if (!s_inited) {",
          "74:       s_inited = true;",
          "75:     }",
          "76:   }",
          "",
          "[Removed Lines]",
          "69:       f_mt_srand();",
          "70:       s_hash_mask_handle |= f_mt_rand(); s_hash_mask_handle <<= 16;",
          "71:       s_hash_mask_handle |= f_mt_rand(); s_hash_mask_handle <<= 16;",
          "72:       s_hash_mask_handle |= f_mt_rand(); s_hash_mask_handle <<= 16;",
          "73:       s_hash_mask_handle |= f_mt_rand();",
          "",
          "[Added Lines]",
          "70:       HHVM_FN(mt_srand)();",
          "71:       s_hash_mask_handle |= HHVM_FN(mt_rand)(); s_hash_mask_handle <<= 16;",
          "72:       s_hash_mask_handle |= HHVM_FN(mt_rand)(); s_hash_mask_handle <<= 16;",
          "73:       s_hash_mask_handle |= HHVM_FN(mt_rand)(); s_hash_mask_handle <<= 16;",
          "74:       s_hash_mask_handle |= HHVM_FN(mt_rand)();",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/std/ext_std.h||hphp/runtime/ext/std/ext_std.h": [
          "File: hphp/runtime/ext/std/ext_std.h -> hphp/runtime/ext/std/ext_std.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     initStreamUserFilters();",
          "24:     initFile();",
          "25:     initIntrinsics();",
          "26:   }",
          "28:   void threadInit() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:     initMath();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:   void initStreamUserFilters();",
          "43:   void initFile();",
          "44:   void initIntrinsics();",
          "46:   void threadInitMisc();",
          "47: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   void initMath();",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/ext_math.cpp||hphp/runtime/ext/std/ext_std_math.cpp": [
          "File: hphp/runtime/ext/ext_math.cpp -> hphp/runtime/ext/std/ext_std_math.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:    +----------------------------------------------------------------------+",
          "19: #include \"hphp/runtime/base/zend-math.h\"",
          "20: #include \"hphp/runtime/base/zend-multiply.h\"",
          "21: #include \"hphp/runtime/base/container-functions.h\"",
          "22: #include \"hphp/system/constants.h\"",
          "24: namespace HPHP {",
          "",
          "[Removed Lines]",
          "18: #include \"hphp/runtime/ext/ext_math.h\"",
          "",
          "[Added Lines]",
          "18: #include \"hphp/runtime/ext/std/ext_std_math.h\"",
          "23: #include \"hphp/runtime/ext/std/ext_std.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: const int64_t k_PHP_ROUND_HALF_EVEN = PHP_ROUND_HALF_EVEN;",
          "30: const int64_t k_PHP_ROUND_HALF_ODD =  PHP_ROUND_HALF_ODD;",
          "38:     const auto& cell_value = *value.asCell();",
          "39:     if (UNLIKELY(!isContainer(cell_value))) {",
          "40:       if (RuntimeOption::MinMaxAllowDegenerate == HackStrictOption::WARN) {",
          "",
          "[Removed Lines]",
          "32: double f_pi() { return k_M_PI;}",
          "34: Variant f_min(int _argc, const Variant& value,",
          "35:               const Variant& second /* = null_variant */,",
          "36:               const Array& _argv /* = null_array */) {",
          "37:   if (_argc == 1) {",
          "",
          "[Added Lines]",
          "34: const double k_M_PI       = 3.1415926535898;",
          "35: const double k_M_1_PI     = 0.31830988618379;",
          "36: const double k_M_2_PI     = 0.63661977236758;",
          "37: const double k_M_2_SQRTPI = 1.1283791670955;",
          "38: const double k_M_E        = 2.718281828459;",
          "39: const double k_M_EULER    = 0.57721566490153;",
          "40: const double k_M_LN10     = 2.302585092994;",
          "41: const double k_M_LN2      = 0.69314718055995;",
          "42: const double k_M_LNPI     = 1.1447298858494;",
          "43: const double k_M_LOG10E   = 0.43429448190325;",
          "44: const double k_M_LOG2E    = 1.442695040889;",
          "45: const double k_M_PI_2     = 1.5707963267949;",
          "46: const double k_M_PI_4     = 0.78539816339745;",
          "47: const double k_M_SQRT1_2  = 0.70710678118655;",
          "48: const double k_M_SQRT2    = 1.4142135623731;",
          "49: const double k_M_SQRT3    = 1.7320508075689;",
          "50: const double k_M_SQRTPI   = 1.7724538509055;",
          "52: Variant HHVM_FUNCTION(min,",
          "53:                       const Variant& value,",
          "54:                       const Array& args /* = null_array */) {",
          "55:   if (args.empty()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:       }",
          "69:     }",
          "70:     return ret;",
          "73:   }",
          "77:     Variant currVal = iter.secondRef();",
          "78:     if (less(currVal, ret)) {",
          "79:       ret = currVal;",
          "",
          "[Removed Lines]",
          "71:   } else if (_argc == 2) {",
          "72:     return less(second, value) ? second : value;",
          "75:   Variant ret = less(second, value) ? second : value;",
          "76:   for (ArrayIter iter(_argv); iter; ++iter) {",
          "",
          "[Added Lines]",
          "91:   Variant ret = value;",
          "92:   for (ArrayIter iter(args); iter; ++iter) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:   return ret;",
          "83: }",
          "89:     const auto& cell_value = *value.asCell();",
          "90:     if (UNLIKELY(!isContainer(cell_value))) {",
          "91:       if (RuntimeOption::MinMaxAllowDegenerate == HackStrictOption::WARN) {",
          "",
          "[Removed Lines]",
          "85: Variant f_max(int _argc, const Variant& value,",
          "86:               const Variant& second /* = null_variant */,",
          "87:               const Array& _argv /* = null_array */) {",
          "88:   if (_argc == 1) {",
          "",
          "[Added Lines]",
          "101: Variant HHVM_FUNCTION(max,",
          "102:                       const Variant& value,",
          "103:                       const Array& args /* = null_array */) {",
          "104:   if (args.empty()) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "119:       }",
          "120:     }",
          "121:     return ret;",
          "124:   }",
          "128:     Variant currVal = iter.secondRef();",
          "129:     if (more(currVal, ret)) {",
          "130:       ret = currVal;",
          "",
          "[Removed Lines]",
          "122:   } else if (_argc == 2) {",
          "123:     return more(second, value) ? second : value;",
          "126:   Variant ret = more(second, value) ? second : value;",
          "127:   for (ArrayIter iter(_argv); iter; ++iter) {",
          "",
          "[Added Lines]",
          "140:   Variant ret = value;",
          "141:   for (ArrayIter iter(args); iter; ++iter) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:   return num.getType();",
          "155: }",
          "158:   int64_t ival;",
          "159:   double dval;",
          "160:   DataType k = zend_convert_scalar_to_number(number, ival, dval);",
          "",
          "[Removed Lines]",
          "157: Variant f_abs(const Variant& number) {",
          "",
          "[Added Lines]",
          "171: Variant HHVM_FUNCTION(abs, const Variant& number) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "167:   }",
          "168: }",
          "175:   int64_t ival;",
          "176:   double dval;",
          "177:   DataType k = zend_convert_scalar_to_number(number, ival, dval);",
          "",
          "[Removed Lines]",
          "170: bool f_is_finite(double val) { return finite(val);}",
          "171: bool f_is_infinite(double val) { return isinf(val);}",
          "172: bool f_is_nan(double val) { return isnan(val);}",
          "174: Variant f_ceil(const Variant& number) {",
          "",
          "[Added Lines]",
          "184: bool HHVM_FUNCTION(is_finite, double val) { return finite(val);}",
          "185: bool HHVM_FUNCTION(is_infinite, double val) { return isinf(val);}",
          "186: bool HHVM_FUNCTION(is_nan, double val) { return isnan(val);}",
          "188: Variant HHVM_FUNCTION(ceil, const Variant& number) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "183:   return ceil(dval);",
          "184: }",
          "187:   int64_t ival;",
          "188:   double dval;",
          "189:   DataType k = zend_convert_scalar_to_number(number, ival, dval);",
          "",
          "[Removed Lines]",
          "186: Variant f_floor(const Variant& number) {",
          "",
          "[Added Lines]",
          "200: Variant HHVM_FUNCTION(floor, const Variant& number) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "195:   return floor(dval);",
          "196: }",
          "200:   int64_t ival;",
          "201:   double dval;",
          "202:   DataType k = zend_convert_scalar_to_number(val, ival, dval);",
          "",
          "[Removed Lines]",
          "198: Variant f_round(const Variant& val, int64_t precision /* = 0 */,",
          "199:                 int64_t mode /* = PHP_ROUND_HALF_UP */) {",
          "",
          "[Added Lines]",
          "212: Variant HHVM_FUNCTION(round,",
          "213:                       const Variant& val,",
          "214:                       int64_t precision /* = 0 */,",
          "215:                       int64_t mode /* = PHP_ROUND_HALF_UP */) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "213:   return dval;",
          "214: }",
          "221: }",
          "224: }",
          "227: }",
          "230: }",
          "233: }",
          "236: }",
          "239:   if (!string_validate_base(frombase)) {",
          "240:     throw_invalid_argument(\"Invalid frombase: %\" PRId64, frombase);",
          "241:     return false;",
          "",
          "[Removed Lines]",
          "216: double f_deg2rad(double number) { return number / 180.0 * k_M_PI;}",
          "217: double f_rad2deg(double number) { return number / k_M_PI * 180.0;}",
          "219: String f_decbin(int64_t number) {",
          "220:   return string_long_to_base(number, 2);",
          "222: String f_dechex(int64_t number) {",
          "223:   return string_long_to_base(number, 16);",
          "225: String f_decoct(int64_t number) {",
          "226:   return string_long_to_base(number, 8);",
          "228: Variant f_bindec(const String& binary_string) {",
          "229:   return string_base_to_numeric(binary_string.data(), binary_string.size(), 2);",
          "231: Variant f_hexdec(const String& hex_string) {",
          "232:   return string_base_to_numeric(hex_string.data(), hex_string.size(), 16);",
          "234: Variant f_octdec(const String& octal_string) {",
          "235:   return string_base_to_numeric(octal_string.data(), octal_string.size(), 8);",
          "238: Variant f_base_convert(const String& number, int64_t frombase, int64_t tobase) {",
          "",
          "[Added Lines]",
          "232: double HHVM_FUNCTION(deg2rad, double number) { return number / 180.0 * k_M_PI;}",
          "233: double HHVM_FUNCTION(rad2deg, double number) { return number / k_M_PI * 180.0;}",
          "235: String HHVM_FUNCTION(decbin, const Variant& number) {",
          "236:   return string_long_to_base(number.toInt64(), 2);",
          "238: String HHVM_FUNCTION(dechex, const Variant& number) {",
          "239:   return string_long_to_base(number.toInt64(), 16);",
          "241: String HHVM_FUNCTION(decoct, const Variant& number) {",
          "242:   return string_long_to_base(number.toInt64(), 8);",
          "244: Variant HHVM_FUNCTION(bindec, const Variant& binary_string) {",
          "245:   String str = binary_string.toString();",
          "246:   return string_base_to_numeric(str.data(), str.size(), 2);",
          "248: Variant HHVM_FUNCTION(hexdec, const Variant& hex_string) {",
          "249:   String str = hex_string.toString();",
          "250:   return string_base_to_numeric(str.data(), str.size(), 16);",
          "252: Variant HHVM_FUNCTION(octdec, const Variant& octal_string) {",
          "253:   String str = octal_string.toString();",
          "254:   return string_base_to_numeric(str.data(), str.size(), 8);",
          "257: Variant HHVM_FUNCTION(base_convert,",
          "258:                       const Variant& number,",
          "259:                       int64_t frombase,",
          "260:                       int64_t tobase) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "244:     throw_invalid_argument(\"Invalid tobase: %\" PRId64, tobase);",
          "245:     return false;",
          "246:   }",
          "248:   return string_numeric_to_base(v, tobase);",
          "249: }",
          "",
          "[Removed Lines]",
          "247:   Variant v = string_base_to_numeric(number.data(), number.size(), frombase);",
          "",
          "[Added Lines]",
          "269:   String str = number.toString();",
          "270:   Variant v = string_base_to_numeric(str.data(), str.size(), frombase);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "286:   not_reached();",
          "287: }",
          "290:   int64_t bint, eint;",
          "291:   double bdbl, edbl;",
          "292:   if (base.isArray()) return 0LL;",
          "",
          "[Removed Lines]",
          "289: Variant f_pow(const Variant& base, const Variant& exp) {",
          "",
          "[Added Lines]",
          "312: Variant HHVM_FUNCTION(pow, const Variant& base, const Variant& exp) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "335:   return pow(bdbl, edbl);",
          "336: }",
          "343:   return base <= 0 ? log(arg) : log(arg)/log(base);",
          "344: }",
          "368: static bool s_rand_is_seeded = false;",
          "371:   s_rand_is_seeded = true;",
          "372:   if (seed.isNull()) {",
          "373:     return srand(math_generate_seed());",
          "",
          "[Removed Lines]",
          "338: double f_exp(double arg) { return exp(arg);}",
          "339: double f_expm1(double arg) { return expm1(arg);}",
          "340: double f_log10(double arg) { return log10(arg);}",
          "341: double f_log1p(double number) { return log1p(number);}",
          "342: double f_log(double arg, double base /* = 0 */) {",
          "346: double f_cos(double arg) { return cos(arg);  }",
          "347: double f_cosh(double arg) { return cosh(arg); }",
          "348: double f_sin(double arg) { return sin(arg);  }",
          "349: double f_sinh(double arg) { return sinh(arg); }",
          "350: double f_tan(double arg) { return tan(arg);  }",
          "351: double f_tanh(double arg) { return tanh(arg); }",
          "352: double f_acos(double arg) { return acos(arg); }",
          "353: double f_acosh(double arg) { return acosh(arg);}",
          "354: double f_asin(double arg) { return asin(arg); }",
          "355: double f_asinh(double arg) { return asinh(arg);}",
          "356: double f_atan(double arg) { return atan(arg); }",
          "357: double f_atanh(double arg) { return atanh(arg);}",
          "358: double f_atan2(double y, double x) { return atan2(y, x);}",
          "360: double f_hypot(double x, double y) { return hypot(x, y);}",
          "361: double f_fmod(double x, double y) { return fmod(x, y);}",
          "362: double f_sqrt(double arg) { return sqrt(arg);}",
          "364: int64_t f_getrandmax() { return RAND_MAX;}",
          "370: void f_srand(const Variant& seed /* = null_variant */) {",
          "",
          "[Added Lines]",
          "361: double HHVM_FUNCTION(exp, double arg) { return exp(arg);}",
          "362: double HHVM_FUNCTION(expm1, double arg) { return expm1(arg);}",
          "363: double HHVM_FUNCTION(log10, double arg) { return log10(arg);}",
          "364: double HHVM_FUNCTION(log1p, double number) { return log1p(number);}",
          "365: double HHVM_FUNCTION(log, double arg, double base /* = 0 */) {",
          "369: double HHVM_FUNCTION(cos, double arg) { return cos(arg);  }",
          "370: double HHVM_FUNCTION(cosh, double arg) { return cosh(arg); }",
          "371: double HHVM_FUNCTION(sin, double arg) { return sin(arg);  }",
          "372: double HHVM_FUNCTION(sinh, double arg) { return sinh(arg); }",
          "373: double HHVM_FUNCTION(tan, double arg) { return tan(arg);  }",
          "374: double HHVM_FUNCTION(tanh, double arg) { return tanh(arg); }",
          "375: double HHVM_FUNCTION(acos, double arg) { return acos(arg); }",
          "376: double HHVM_FUNCTION(acosh, double arg) { return acosh(arg);}",
          "377: double HHVM_FUNCTION(asin, double arg) { return asin(arg); }",
          "378: double HHVM_FUNCTION(asinh, double arg) { return asinh(arg);}",
          "379: double HHVM_FUNCTION(atan, double arg) { return atan(arg); }",
          "380: double HHVM_FUNCTION(atanh, double arg) { return atanh(arg);}",
          "381: double HHVM_FUNCTION(atan2, double y, double x) { return atan2(y, x);}",
          "383: double HHVM_FUNCTION(hypot, double x, double y) { return hypot(x, y);}",
          "384: double HHVM_FUNCTION(fmod, double x, double y) { return fmod(x, y);}",
          "385: double HHVM_FUNCTION(sqrt, double arg) { return sqrt(arg);}",
          "387: int64_t HHVM_FUNCTION(getrandmax) { return RAND_MAX;}",
          "393: void HHVM_FUNCTION(srand, const Variant& seed /* = null_variant */) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "379:   }",
          "380: }",
          "383:   if (!s_rand_is_seeded) {",
          "384:     s_rand_is_seeded = true;",
          "385:     srand(math_generate_seed());",
          "386:   }",
          "388:   int64_t number = rand();",
          "391:   }",
          "392:   return number;",
          "393: }",
          "398:   if (seed.isNull()) {",
          "399:     return math_mt_srand(math_generate_seed());",
          "400:   }",
          "",
          "[Removed Lines]",
          "382: int64_t f_rand(int64_t min /* = 0 */, int64_t max /* = RAND_MAX */) {",
          "389:   if (min != 0 || max != RAND_MAX) {",
          "390:     RAND_RANGE(number, min, max, RAND_MAX);",
          "395: int64_t f_mt_getrandmax() { return MT_RAND_MAX;}",
          "397: void f_mt_srand(const Variant& seed /* = null_variant */) {",
          "",
          "[Added Lines]",
          "405: int64_t HHVM_FUNCTION(rand,",
          "406:                       int64_t min /* = 0 */,",
          "407:                       const Variant& max /* = null_variant */) {",
          "414:   int64_t int_max = max.isNull() ? RAND_MAX : max.toInt64();",
          "415:   if (min != 0 || int_max != RAND_MAX) {",
          "416:     RAND_RANGE(number, min, int_max, RAND_MAX);",
          "421: int64_t HHVM_FUNCTION(mt_getrandmax) { return MT_RAND_MAX;}",
          "423: void HHVM_FUNCTION(mt_srand,",
          "424:                    const Variant& seed /* = null_variant */) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "405:   }",
          "406: }",
          "410: }",
          "414: }",
          "",
          "[Removed Lines]",
          "408: int64_t f_mt_rand(int64_t min /* = 0 */, int64_t max /* = RAND_MAX */) {",
          "409:   return math_mt_rand(min, max);",
          "411: double f_lcg_value() { return math_combined_lcg();}",
          "",
          "[Added Lines]",
          "435: int64_t HHVM_FUNCTION(mt_rand,",
          "436:                       int64_t min /* = 0 */,",
          "437:                       const Variant& max /* = null_variant */) {",
          "438:   return math_mt_rand(min, max.isNull() ? RAND_MAX : max.toInt64());",
          "439: }",
          "441: double HHVM_FUNCTION(lcg_value) { return math_combined_lcg();}",
          "445: const StaticString s_PHP_ROUND_HALF_UP(\"PHP_ROUND_HALF_UP\");",
          "446: const StaticString s_PHP_ROUND_HALF_DOWN(\"PHP_ROUND_HALF_DOWN\");",
          "447: const StaticString s_PHP_ROUND_HALF_EVEN(\"PHP_ROUND_HALF_EVEN\");",
          "448: const StaticString s_PHP_ROUND_HALF_ODD(\"PHP_ROUND_HALF_ODD\");",
          "450: #define ICONST(nm)                                                             \\",
          "451:   Native::registerConstant<KindOfInt64>(makeStaticString(#nm), k_##nm)         \\",
          "453: #define DCONST(nm)                                                             \\",
          "454:   Native::registerConstant<KindOfDouble>(makeStaticString(\"M_\"#nm), k_M_##nm)  \\",
          "456: void StandardExtension::initMath() {",
          "457:   ICONST(PHP_ROUND_HALF_UP);",
          "458:   ICONST(PHP_ROUND_HALF_DOWN);",
          "459:   ICONST(PHP_ROUND_HALF_EVEN);",
          "460:   ICONST(PHP_ROUND_HALF_ODD);",
          "462:   DCONST(PI);",
          "463:   DCONST(1_PI);",
          "464:   DCONST(2_PI);",
          "465:   DCONST(2_SQRTPI);",
          "466:   DCONST(E);",
          "467:   DCONST(EULER);",
          "468:   DCONST(LN10);",
          "469:   DCONST(LN2);",
          "470:   DCONST(LNPI);",
          "471:   DCONST(LOG10E);",
          "472:   DCONST(LOG2E);",
          "473:   DCONST(PI_2);",
          "474:   DCONST(PI_4);",
          "475:   DCONST(SQRT1_2);",
          "476:   DCONST(SQRT2);",
          "477:   DCONST(SQRT3);",
          "478:   DCONST(SQRTPI);",
          "480:   HHVM_FE(min);",
          "481:   HHVM_FE(max);",
          "482:   HHVM_FE(abs);",
          "483:   HHVM_FE(is_finite);",
          "484:   HHVM_FE(is_infinite);",
          "485:   HHVM_FE(is_nan);",
          "486:   HHVM_FE(ceil);",
          "487:   HHVM_FE(floor);",
          "488:   HHVM_FE(round);",
          "489:   HHVM_FE(deg2rad);",
          "490:   HHVM_FE(rad2deg);",
          "491:   HHVM_FE(decbin);",
          "492:   HHVM_FE(dechex);",
          "493:   HHVM_FE(decoct);",
          "494:   HHVM_FE(bindec);",
          "495:   HHVM_FE(hexdec);",
          "496:   HHVM_FE(octdec);",
          "497:   HHVM_FE(base_convert);",
          "498:   HHVM_FE(pow);",
          "499:   HHVM_FE(exp);",
          "500:   HHVM_FE(expm1);",
          "501:   HHVM_FE(log10);",
          "502:   HHVM_FE(log1p);",
          "503:   HHVM_FE(log);",
          "504:   HHVM_FE(cos);",
          "505:   HHVM_FE(cosh);",
          "506:   HHVM_FE(sin);",
          "507:   HHVM_FE(sinh);",
          "508:   HHVM_FE(tan);",
          "509:   HHVM_FE(tanh);",
          "510:   HHVM_FE(acos);",
          "511:   HHVM_FE(acosh);",
          "512:   HHVM_FE(asin);",
          "513:   HHVM_FE(asinh);",
          "514:   HHVM_FE(atan);",
          "515:   HHVM_FE(atanh);",
          "516:   HHVM_FE(atan2);",
          "517:   HHVM_FE(hypot);",
          "518:   HHVM_FE(fmod);",
          "519:   HHVM_FE(sqrt);",
          "520:   HHVM_FE(getrandmax);",
          "521:   HHVM_FE(srand);",
          "522:   HHVM_FE(rand);",
          "523:   HHVM_FE(mt_getrandmax);",
          "524:   HHVM_FE(mt_srand);",
          "525:   HHVM_FE(mt_rand);",
          "526:   HHVM_FE(lcg_value);",
          "528:   loadSystemlib(\"std_math\");",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/std/ext_std_math.h||hphp/runtime/ext/std/ext_std_math.h": [
          "File: hphp/runtime/ext/std/ext_std_math.h -> hphp/runtime/ext/std/ext_std_math.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    +----------------------------------------------------------------------+",
          "3:    | HipHop for PHP                                                       |",
          "4:    +----------------------------------------------------------------------+",
          "5:    | Copyright (c) 2010-2014 Facebook, Inc. (http://www.facebook.com)     |",
          "6:    | Copyright (c) 1997-2010 The PHP Group                                |",
          "7:    +----------------------------------------------------------------------+",
          "8:    | This source file is subject to version 3.01 of the PHP license,      |",
          "9:    | that is bundled with this package in the file LICENSE, and is        |",
          "10:    | available through the world-wide-web at the following url:           |",
          "11:    | http://www.php.net/license/3_01.txt                                  |",
          "12:    | If you did not receive a copy of the PHP license and are unable to   |",
          "13:    | obtain it through the world-wide-web, please send a note to          |",
          "14:    | license@php.net so we can mail you a copy immediately.               |",
          "15:    +----------------------------------------------------------------------+",
          "18: #ifndef incl_HPHP_EXT_MATH_H_",
          "19: #define incl_HPHP_EXT_MATH_H_",
          "21: #include \"hphp/runtime/base/base-includes.h\"",
          "22: #include \"hphp/runtime/base/zend-string.h\"",
          "23: #include \"hphp/runtime/base/zend-math.h\"",
          "24: #include <math.h>",
          "26: #if defined(__APPLE__)",
          "27: #ifndef isnan",
          "28: #define isnan(x)  \\",
          "29:   ( sizeof (x) == sizeof(float )  ? __inline_isnanf((float)(x)) \\",
          "30:   : sizeof (x) == sizeof(double)  ? __inline_isnand((double)(x))  \\",
          "31:   : __inline_isnanl ((long double)(x)))",
          "32: #endif",
          "34: #ifndef isinf",
          "35: #define isinf(x)  \\",
          "36:   ( sizeof (x) == sizeof(float )  ? __inline_isinff((float)(x)) \\",
          "37:   : sizeof (x) == sizeof(double)  ? __inline_isinfd((double)(x))  \\",
          "38:   : __inline_isinfl ((long double)(x)))",
          "39: #endif",
          "40: #endif",
          "42: #ifdef __CYGWIN__",
          "43: #include <cmath>",
          "44: #define isinf std::isinf",
          "45: #define isnan std::isnan",
          "46: #endif",
          "48: namespace HPHP {",
          "51: extern const int64_t k_PHP_ROUND_HALF_UP;",
          "52: extern const int64_t k_PHP_ROUND_HALF_DOWN;",
          "53: extern const int64_t k_PHP_ROUND_HALF_EVEN;",
          "54: extern const int64_t k_PHP_ROUND_HALF_ODD;",
          "56: Variant HHVM_FUNCTION(min, const Variant& value, const Array& args);",
          "57: Variant HHVM_FUNCTION(max, const Variant& value, const Array& args);",
          "58: Variant HHVM_FUNCTION(abs, const Variant& number);",
          "60: bool HHVM_FUNCTION(is_finite, double val);",
          "61: bool HHVM_FUNCTION(is_infinite, double val);",
          "62: bool HHVM_FUNCTION(is_nan, double val);",
          "64: Variant HHVM_FUNCTION(ceil, const Variant& number);",
          "65: Variant HHVM_FUNCTION(floor, const Variant& number);",
          "66: Variant HHVM_FUNCTION(round,",
          "67:                       const Variant& val,",
          "68:                       int64_t precision = 0,",
          "69:                       int64_t mode = PHP_ROUND_HALF_UP);",
          "71: double HHVM_FUNCTION(deg2rad, double number);",
          "72: double HHVM_FUNCTION(rad2deg, double number);",
          "75: String HHVM_FUNCTION(decbin, const Variant& number);",
          "76: String HHVM_FUNCTION(dechex, const Variant& number);",
          "77: String HHVM_FUNCTION(decoct, const Variant& number);",
          "78: Variant HHVM_FUNCTION(bindec, const Variant& binary_string);",
          "79: Variant HHVM_FUNCTION(hexdec, const Variant& hex_string);",
          "80: Variant HHVM_FUNCTION(octdec, const Variant& octal_string);",
          "81: Variant HHVM_FUNCTION(base_convert,",
          "82:                       const Variant& number,",
          "83:                       int64_t frombase,",
          "84:                       int64_t tobase);",
          "85: Variant HHVM_FUNCTION(pow, const Variant& base, const Variant& exp);",
          "86: double HHVM_FUNCTION(exp, double arg);",
          "87: double HHVM_FUNCTION(expm1, double arg);",
          "88: double HHVM_FUNCTION(log10, double arg);",
          "89: double HHVM_FUNCTION(log1p, double number);",
          "90: double HHVM_FUNCTION(log, double arg, double base = 0);",
          "92: double HHVM_FUNCTION(cos, double arg);",
          "93: double HHVM_FUNCTION(cosh, double arg);",
          "94: double HHVM_FUNCTION(sin, double arg);",
          "95: double HHVM_FUNCTION(sinh, double arg);",
          "96: double HHVM_FUNCTION(tan, double arg);",
          "97: double HHVM_FUNCTION(tanh, double arg);",
          "98: double HHVM_FUNCTION(acos, double arg);",
          "99: double HHVM_FUNCTION(acosh, double arg);",
          "100: double HHVM_FUNCTION(asin, double arg);",
          "101: double HHVM_FUNCTION(asinh, double arg);",
          "102: double HHVM_FUNCTION(atan, double arg);",
          "103: double HHVM_FUNCTION(atanh, double arg);",
          "104: double HHVM_FUNCTION(atan2, double y, double x);",
          "106: double HHVM_FUNCTION(hypot, double x, double y);",
          "107: double HHVM_FUNCTION(fmod, double x, double y);",
          "108: double HHVM_FUNCTION(sqrt, double arg);",
          "110: int64_t HHVM_FUNCTION(getrandmax);",
          "111: void HHVM_FUNCTION(srand, const Variant& seed = null_variant);",
          "112: int64_t HHVM_FUNCTION(rand,",
          "113:                       int64_t min = 0,",
          "114:                       const Variant& max = null_variant);",
          "115: int64_t HHVM_FUNCTION(mt_getrandmax);",
          "116: void HHVM_FUNCTION(mt_srand,",
          "117:                    const Variant& seed = null_variant);",
          "118: int64_t HHVM_FUNCTION(mt_rand,",
          "119:                       int64_t min = 0,",
          "120:                       const Variant& max = null_variant);",
          "121: double HHVM_FUNCTION(lcg_value);",
          "124: }",
          "126: #endif // incl_HPHP_EXT_MATH_H_",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/std/ext_std_math.php||hphp/runtime/ext/std/ext_std_math.php": [
          "File: hphp/runtime/ext/std/ext_std_math.php -> hphp/runtime/ext/std/ext_std_math.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh",
          "7: function pi(): float {",
          "8:   return M_PI;",
          "9: }",
          "27: <<__Native>>",
          "28: function min(mixed $value1, ...$argv): mixed;",
          "50: <<__Native>>",
          "51: function max(mixed $value1, ...$argv): mixed;",
          "63: <<__Native>>",
          "64: function abs(mixed $number): mixed;",
          "75: <<__Native>>",
          "76: function is_finite(float $val): bool;",
          "87: <<__Native>>",
          "88: function is_infinite(float $val): bool;",
          "98: <<__Native>>",
          "99: function is_nan(float $val): bool;",
          "109: <<__Native>>",
          "110: function ceil(mixed $number): mixed;",
          "120: <<__Native>>",
          "121: function floor(mixed $number): mixed;",
          "137: <<__Native>>",
          "138: function round(mixed $val,",
          "139:                int $precision = 0,",
          "140:                int $mode = PHP_ROUND_HALF_UP): mixed;",
          "150: <<__Native>>",
          "151: function deg2rad(float $number): float;",
          "161: <<__Native>>",
          "162: function rad2deg(float $number): float;",
          "173: <<__Native>>",
          "174: function decbin(mixed $number): string;",
          "186: <<__Native>>",
          "187: function dechex(mixed $number): string;",
          "199: <<__Native>>",
          "200: function decoct(mixed $number): string;",
          "216: <<__Native>>",
          "217: function bindec(mixed $binary_string): mixed;",
          "229: <<__Native>>",
          "230: function hexdec(mixed $hex_string): mixed;",
          "241: <<__Native>>",
          "242: function octdec(mixed $octal_string): mixed;",
          "261: <<__Native>>",
          "262: function base_convert(mixed $number, int $frombase, int $tobase): mixed;",
          "277: <<__Native>>",
          "278: function pow(mixed $base, mixed $exp): mixed;",
          "289: <<__Native>>",
          "290: function exp(float $arg): float;",
          "303: <<__Native>>",
          "304: function expm1(float $arg): float;",
          "314: <<__Native>>",
          "315: function log10(float $arg): float;",
          "327: <<__Native>>",
          "328: function log1p(float $number): float;",
          "342: <<__Native>>",
          "343: function log(float $arg, float $base = 0.0): float;",
          "354: <<__Native>>",
          "355: function cos(float $arg): float;",
          "365: <<__Native>>",
          "366: function cosh(float $arg): float;",
          "377: <<__Native>>",
          "378: function sin(float $arg): float;",
          "388: <<__Native>>",
          "389: function sinh(float $arg): float;",
          "400: <<__Native>>",
          "401: function tan(float $arg): float;",
          "411: <<__Native>>",
          "412: function tanh(float $arg): float;",
          "424: <<__Native>>",
          "425: function acos(float $arg): float;",
          "436: <<__Native>>",
          "437: function acosh(float $arg): float;",
          "449: <<__Native>>",
          "450: function asin(float $arg): float;",
          "461: <<__Native>>",
          "462: function asinh(float $arg): float;",
          "474: <<__Native>>",
          "475: function atan(float $arg): float;",
          "486: <<__Native>>",
          "487: function atanh(float $arg): float;",
          "496: <<__Native>>",
          "497: function atan2(float $y, float $x): float;",
          "510: <<__Native>>",
          "511: function hypot(float $x, float $y): float;",
          "525: <<__Native>>",
          "526: function fmod(float $x, float $y): float;",
          "537: <<__ParamCoerceModeNull, __Native>>",
          "538: function sqrt(float $arg): float;",
          "544: <<__Native>>",
          "545: function getrandmax(): int;",
          "555: <<__Native>>",
          "556: function srand(mixed $seed = null): void;",
          "566: <<__Native>>",
          "567: function rand(int $min = 0, ?int $max = null): int;",
          "573: <<__Native>>",
          "574: function mt_getrandmax(): int;",
          "584: <<__Native>>",
          "585: function mt_srand(mixed $seed = null): void;",
          "596: <<__Native>>",
          "597: function mt_rand(int $min = 0, ?int $max = null): int;",
          "607: <<__Native>>",
          "608: function lcg_value(): float;",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/std/ext_std_misc.cpp||hphp/runtime/ext/std/ext_std_misc.cpp": [
          "File: hphp/runtime/ext/std/ext_std_misc.cpp -> hphp/runtime/ext/std/ext_std_misc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"hphp/runtime/base/hphp-system.h\"",
          "25: #include \"hphp/runtime/base/runtime-option.h\"",
          "26: #include \"hphp/runtime/base/strings.h\"",
          "28: #include \"hphp/runtime/vm/bytecode.h\"",
          "29: #include \"hphp/runtime/vm/type-profile.h\"",
          "30: #include \"hphp/parser/scanner.h\"",
          "",
          "[Removed Lines]",
          "27: #include \"hphp/runtime/ext/ext_math.h\"",
          "",
          "[Added Lines]",
          "27: #include \"hphp/runtime/ext/std/ext_std_math.h\"",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/string/ext_string.cpp||hphp/runtime/ext/string/ext_string.cpp": [
          "File: hphp/runtime/ext/string/ext_string.cpp -> hphp/runtime/ext/string/ext_string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <locale.h>",
          "27: #include \"hphp/runtime/server/http-request-handler.h\"",
          "28: #include \"hphp/runtime/server/http-protocol.h\"",
          "30: #include \"hphp/runtime/ext/std/ext_std_classobj.h\"",
          "31: #include \"hphp/runtime/ext/std/ext_std_variable.h\"",
          "32: #include <folly/Unicode.h>",
          "33: #include \"hphp/runtime/base/request-event-handler.h\"",
          "",
          "[Removed Lines]",
          "29: #include \"hphp/runtime/ext/ext_math.h\"",
          "",
          "[Added Lines]",
          "30: #include \"hphp/runtime/ext/std/ext_std_math.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:   int left   = ret.size();",
          "362:   while (--left) {",
          "364:     if (idx != left) {",
          "365:       char temp = buf[left];",
          "366:       buf[left] = buf[idx];",
          "",
          "[Removed Lines]",
          "363:     int idx = f_rand(0, left);",
          "",
          "[Added Lines]",
          "363:     int idx = HHVM_FN(rand)(0, left);",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/xdebug/ext_xdebug.cpp||hphp/runtime/ext/xdebug/ext_xdebug.cpp": [
          "File: hphp/runtime/ext/xdebug/ext_xdebug.cpp -> hphp/runtime/ext/xdebug/ext_xdebug.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"hphp/runtime/base/execution-context.h\"",
          "25: #include \"hphp/runtime/base/thread-info.h\"",
          "26: #include \"hphp/runtime/base/backtrace.h\"",
          "28: #include \"hphp/runtime/ext/string/ext_string.h\"",
          "29: #include \"hphp/runtime/vm/unwind.h\"",
          "30: #include \"hphp/runtime/vm/vm-regs.h\"",
          "",
          "[Removed Lines]",
          "27: #include \"hphp/runtime/ext/ext_math.h\"",
          "",
          "[Added Lines]",
          "27: #include \"hphp/runtime/ext/std/ext_std_math.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:         break;",
          "130:       case 'r':",
          "132:         break;",
          "134:       case 's': {",
          "",
          "[Removed Lines]",
          "131:         buf.printf(\"%lx\", (uint64_t) f_rand());",
          "",
          "[Added Lines]",
          "131:         buf.printf(\"%lx\", (uint64_t) HHVM_FN(rand)());",
          "",
          "---------------"
        ],
        "hphp/runtime/ext_zend_compat/php-src/ext/standard/rand.cpp||hphp/runtime/ext_zend_compat/php-src/ext/standard/rand.cpp": [
          "File: hphp/runtime/ext_zend_compat/php-src/ext/standard/rand.cpp -> hphp/runtime/ext_zend_compat/php-src/ext/standard/rand.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <stdlib.h>",
          "32: #include \"php.h\"",
          "33: #include \"php_rand.h\"",
          "35: #include \"basic_functions.h\"",
          "37: PHPAPI long php_rand(TSRMLS_D) {",
          "39: }",
          "",
          "[Removed Lines]",
          "31: #include \"hphp/runtime/ext/ext_math.h\"",
          "38:   return HPHP::f_rand();",
          "",
          "[Added Lines]",
          "31: #include \"hphp/runtime/ext/std/ext_std_math.h\"",
          "38:   return HPHP::HHVM_FN(rand)();",
          "",
          "---------------"
        ],
        "hphp/runtime/vm/bytecode.cpp||hphp/runtime/vm/bytecode.cpp": [
          "File: hphp/runtime/vm/bytecode.cpp -> hphp/runtime/vm/bytecode.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: #include \"hphp/runtime/vm/jit/translator-inline.h\"",
          "74: #include \"hphp/runtime/vm/native.h\"",
          "75: #include \"hphp/runtime/vm/resumable.h\"",
          "77: #include \"hphp/runtime/ext/ext_closure.h\"",
          "78: #include \"hphp/runtime/ext/ext_generator.h\"",
          "79: #include \"hphp/runtime/ext/apc/ext_apc.h\"",
          "",
          "[Removed Lines]",
          "76: #include \"hphp/runtime/ext/ext_math.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: #include \"hphp/runtime/ext/asio/waitable_wait_handle.h\"",
          "87: #include \"hphp/runtime/ext/reflection/ext_reflection.h\"",
          "88: #include \"hphp/runtime/ext/std/ext_std_function.h\"",
          "89: #include \"hphp/runtime/ext/std/ext_std_variable.h\"",
          "90: #include \"hphp/runtime/ext/string/ext_string.h\"",
          "91: #include \"hphp/runtime/base/stats.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: #include \"hphp/runtime/ext/std/ext_std_math.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3803:   NEXT();",
          "3804:   auto c1 = vmStack().topC();",
          "3807: }",
          "3809: template<class Op>",
          "",
          "[Removed Lines]",
          "3806:   tvAsVariant(c1) = f_abs(tvAsCVarRef(c1));",
          "",
          "[Added Lines]",
          "3806:   tvAsVariant(c1) = HHVM_FN(abs)(tvAsCVarRef(c1));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3944:   if (c1->m_type == KindOfInt64) {",
          "3945:     c1->m_type = KindOfDouble;",
          "3947:   } else if (c1->m_type == KindOfDouble) {",
          "3949:   }",
          "3951:   if (c1->m_type != KindOfDouble) {",
          "",
          "[Removed Lines]",
          "3946:     c1->m_data.dbl = f_sqrt(c1->m_data.num);",
          "3948:     c1->m_data.dbl = f_sqrt(c1->m_data.dbl);",
          "",
          "[Added Lines]",
          "3946:     c1->m_data.dbl = HHVM_FN(sqrt)(c1->m_data.num);",
          "3948:     c1->m_data.dbl = HHVM_FN(sqrt)(c1->m_data.dbl);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_math/rad2deg.php.expect||hphp/test/slow/ext_math/rad2deg.php.expect": [
          "File: hphp/test/slow/ext_math/rad2deg.php.expect -> hphp/test/slow/ext_math/rad2deg.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: rad: 1.000000 = deg: 57.29577951308232286465",
          "2: rad: 0.01745329251994329547 = deg: 1.000000",
          "",
          "[Added Lines]",
          "1: rad: 1.000000 = deg: 57.29577951308219496696",
          "2: rad: 0.01745329251994333364 = deg: 1.000000",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb1f20bf205cfc3e83d3bd25659b3d8d23dbe6de",
      "candidate_info": {
        "commit_hash": "eb1f20bf205cfc3e83d3bd25659b3d8d23dbe6de",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/eb1f20bf205cfc3e83d3bd25659b3d8d23dbe6de",
        "files": [
          "hphp/runtime/ext/ext.h",
          "hphp/runtime/ext/ext_mcrypt.cpp",
          "hphp/runtime/ext/ext_mcrypt.h",
          "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp",
          "hphp/runtime/ext/mcrypt/ext_mcrypt.php",
          "hphp/system/idl/constants.idl.json",
          "hphp/system/idl/mcrypt.idl.json",
          "hphp/test/frameworks/results/vfsstream.expect",
          "hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expect",
          "hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_3des_decrypt.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_3des_decrypt.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_3des_decrypt.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_3des_encrypt.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_3des_encrypt.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_3des_encrypt.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_variation4.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_variation4.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_variation4.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cfb.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cfb.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cfb.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation1.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation1.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation1.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation2.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation2.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation2.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation3.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation3.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation3.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation1.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation1.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation1.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation2.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation2.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation2.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation3.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation3.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation3.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation1.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation1.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation1.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation2.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation2.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation2.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation3.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation3.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation3.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_module_open.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_module_open.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_module_open.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ofb.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ofb.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ofb.php.skipif",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_rijndael128_128BitKey.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_rijndael128_128BitKey.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_rijndael128_128BitKey.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_3des_decrypt.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_3des_decrypt.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_3des_decrypt.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_3des_encrypt.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_3des_encrypt.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_3des_encrypt.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_variation4.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_variation4.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_variation4.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cfb.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cfb.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cfb.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation1.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation1.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation1.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation2.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation2.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation2.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation3.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation3.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation3.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation1.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation1.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation1.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation2.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation2.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation2.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation3.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation3.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation3.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation1.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation1.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation1.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation2.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation2.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation2.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation3.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation3.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation3.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_module_open.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_module_open.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_module_open.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ofb.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ofb.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ofb.php.skipif",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_rijndael128_128BitKey.php",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_rijndael128_128BitKey.php.expectf",
          "hphp/test/zend/good/ext/mcrypt/tests/mcrypt_rijndael128_128BitKey.php.skipif"
        ],
        "message": "Convert ext/mcrypt to HNI\n\nSummary: Part of #1480\n\nThe revert is my workaround for #1738, so probably shouldn't be merged. I'm just keeping it in here so I don't have to keep reverting it when something breaks in the tests ;)\n\nAlso adds a rasie_deprecation() function and changes raise_message() to call that for deprecation notices rather than a plain notice.\nCloses #1760\n\nReviewed By: ptarjan, sgolemon\n\nSubscribers: hphp-diffslists, ps\n\nDifferential Revision: D1331176\n\nPulled By: @JoelMarcey",
        "before_after_code_files": [
          "hphp/runtime/ext/ext.h||hphp/runtime/ext/ext.h",
          "hphp/runtime/ext/ext_mcrypt.cpp||hphp/runtime/ext/ext_mcrypt.cpp",
          "hphp/runtime/ext/ext_mcrypt.h||hphp/runtime/ext/ext_mcrypt.h",
          "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp||hphp/runtime/ext/mcrypt/ext_mcrypt.cpp",
          "hphp/runtime/ext/mcrypt/ext_mcrypt.php||hphp/runtime/ext/mcrypt/ext_mcrypt.php",
          "hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expect||hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expect",
          "hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expectf||hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expectf",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_3des_decrypt.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_3des_decrypt.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_3des_encrypt.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_3des_encrypt.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_variation4.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_variation4.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation1.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation1.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation2.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation2.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation3.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation3.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation1.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation1.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation2.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation2.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation3.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation3.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation1.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation1.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation2.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation2.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation3.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation3.php",
          "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_rijndael128_128BitKey.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_rijndael128_128BitKey.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp||hphp/runtime/ext/mcrypt/ext_mcrypt.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp||hphp/runtime/ext/mcrypt/ext_mcrypt.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/ext.h||hphp/runtime/ext/ext.h": [
          "File: hphp/runtime/ext/ext.h -> hphp/runtime/ext/ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #include \"hphp/runtime/ext/ext_mailparse.h\"",
          "52: #include \"hphp/runtime/ext/ext_math.h\"",
          "53: #include \"hphp/runtime/ext/ext_mb.h\"",
          "55: #include \"hphp/runtime/ext/ext_memcache.h\"",
          "56: #include \"hphp/runtime/ext/ext_memcached.h\"",
          "57: #include \"hphp/runtime/ext/ext_misc.h\"",
          "",
          "[Removed Lines]",
          "54: #include \"hphp/runtime/ext/ext_mcrypt.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/ext_mcrypt.cpp||hphp/runtime/ext/ext_mcrypt.cpp": [
          "File: hphp/runtime/ext/ext_mcrypt.cpp -> hphp/runtime/ext/ext_mcrypt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/ext_mcrypt.h||hphp/runtime/ext/ext_mcrypt.h": [
          "File: hphp/runtime/ext/ext_mcrypt.h -> hphp/runtime/ext/ext_mcrypt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/mcrypt/ext_mcrypt.cpp||hphp/runtime/ext/mcrypt/ext_mcrypt.cpp": [
          "File: hphp/runtime/ext/mcrypt/ext_mcrypt.cpp -> hphp/runtime/ext/mcrypt/ext_mcrypt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    +----------------------------------------------------------------------+",
          "3:    | HipHop for PHP                                                       |",
          "4:    +----------------------------------------------------------------------+",
          "5:    | Copyright (c) 2010-2014 Facebook, Inc. (http://www.facebook.com)     |",
          "6:    | Copyright (c) 1997-2010 The PHP Group                                |",
          "7:    +----------------------------------------------------------------------+",
          "8:    | This source file is subject to version 3.01 of the PHP license,      |",
          "9:    | that is bundled with this package in the file LICENSE, and is        |",
          "10:    | available through the world-wide-web at the following url:           |",
          "11:    | http://www.php.net/license/3_01.txt                                  |",
          "12:    | If you did not receive a copy of the PHP license and are unable to   |",
          "13:    | obtain it through the world-wide-web, please send a note to          |",
          "14:    | license@php.net so we can mail you a copy immediately.               |",
          "15:    +----------------------------------------------------------------------+",
          "18: #include \"hphp/runtime/base/base-includes.h\"",
          "19: #include \"hphp/runtime/base/runtime-error.h\"",
          "21: #include <sys/types.h>",
          "22: #include <sys/stat.h>",
          "23: #include <fcntl.h>",
          "25: #define NON_FREE",
          "26: #define MCRYPT2",
          "27: #include <mcrypt.h>",
          "29: namespace HPHP {",
          "33: class MCrypt : public SweepableResourceData {",
          "34: public:",
          "35:   explicit MCrypt(MCRYPT td) : m_td(td), m_init(false) {",
          "36:   }",
          "38:   ~MCrypt() {",
          "39:     MCrypt::close();",
          "40:   }",
          "42:   void sweep() FOLLY_OVERRIDE {",
          "43:     close();",
          "44:   }",
          "46:   void close() {",
          "47:     if (m_td != MCRYPT_FAILED) {",
          "48:       mcrypt_generic_deinit(m_td);",
          "49:       mcrypt_module_close(m_td);",
          "50:       m_td = MCRYPT_FAILED;",
          "51:     }",
          "52:   }",
          "54:   CLASSNAME_IS(\"mcrypt\");",
          "56:   virtual const String& o_getClassNameHook() const { return classnameof(); }",
          "58:   MCRYPT m_td;",
          "59:   bool m_init;",
          "60: };",
          "62: typedef enum {",
          "63:   RANDOM = 0,",
          "64:   URANDOM,",
          "65:   RAND",
          "66: } iv_source;",
          "68: class mcrypt_data {",
          "69: public:",
          "70:   std::string algorithms_dir;",
          "71:   std::string modes_dir;",
          "72: };",
          "73: static mcrypt_data s_globals;",
          "74: #define MCG(n) (s_globals.n)",
          "75: #ifndef MIN",
          "76: #define MIN(a, b) ((a) < (b) ? (a) : (b))",
          "77: #endif",
          "78: #define MCRYPT_OPEN_MODULE_FAILED(str) \\",
          "79:  raise_warning(\"%s(): Module initialization failed\", str);",
          "81: static Variant php_mcrypt_do_crypt(const String& cipher, const String& key,",
          "82:                                    const String& data, const String& mode,",
          "83:                                    const String& iv, bool dencrypt,",
          "84:                                    char *name) {",
          "85:   MCRYPT td = mcrypt_module_open((char*)cipher.data(),",
          "86:                                  (char*)MCG(algorithms_dir).data(),",
          "87:                                  (char*)mode.data(),",
          "88:                                  (char*)MCG(modes_dir).data());",
          "89:   if (td == MCRYPT_FAILED) {",
          "90:     MCRYPT_OPEN_MODULE_FAILED(name);",
          "91:     return false;",
          "92:   }",
          "95:   int max_key_length = mcrypt_enc_get_key_size(td);",
          "96:   if (key.size() > max_key_length) {",
          "97:     raise_warning(\"Size of key is too large for this algorithm\");",
          "98:   }",
          "99:   int count;",
          "100:   int *key_length_sizes = mcrypt_enc_get_supported_key_sizes(td, &count);",
          "101:   int use_key_length;",
          "102:   char *key_s = nullptr;",
          "103:   if (count == 0 && key_length_sizes == nullptr) { // all lengths 1 - k_l_s = OK",
          "104:     use_key_length = key.size();",
          "105:     key_s = (char*)malloc(use_key_length);",
          "106:     memcpy(key_s, key.data(), use_key_length);",
          "108:     key_s = (char*)malloc(key_length_sizes[0]);",
          "109:     memset(key_s, 0, key_length_sizes[0]);",
          "110:     memcpy(key_s, key.data(), MIN(key.size(), key_length_sizes[0]));",
          "111:     use_key_length = key_length_sizes[0];",
          "114:     for (int i = 0; i < count; i++) {",
          "115:       if (key_length_sizes[i] >= key.size() &&",
          "116:           key_length_sizes[i] < use_key_length) {",
          "117:         use_key_length = key_length_sizes[i];",
          "118:       }",
          "119:     }",
          "120:     key_s = (char*)malloc(use_key_length);",
          "121:     memset(key_s, 0, use_key_length);",
          "122:     memcpy(key_s, key.data(), MIN(key.size(), use_key_length));",
          "123:   }",
          "124:   mcrypt_free(key_length_sizes);",
          "127:   char *iv_s = nullptr;",
          "128:   int iv_size = mcrypt_enc_get_iv_size(td);",
          "131:   if (mcrypt_enc_mode_has_iv(td) == 1) {",
          "132:     if (!iv.empty()) {",
          "133:       if (iv_size != iv.size()) {",
          "134:         raise_warning(\"mcrypt_encrypt(): The IV parameter must be as long as \"",
          "135:                       \"the blocksize\");",
          "136:       } else {",
          "137:         iv_s = (char*)malloc(iv_size + 1);",
          "138:         memcpy(iv_s, iv.data(), iv_size);",
          "139:       }",
          "140:     } else {",
          "141:       raise_warning(\"mcrypt_encrypt(): The IV parameter must be as long as \"",
          "142:                     \"the blocksize\");",
          "143:       iv_s = (char*)malloc(iv_size + 1);",
          "144:       memset(iv_s, 0, iv_size + 1);",
          "145:     }",
          "146:   }",
          "148:   int block_size;",
          "149:   unsigned long int data_size;",
          "150:   String s;",
          "151:   char *data_s;",
          "154:     block_size = mcrypt_enc_get_block_size(td);",
          "155:     data_size = (((data.size() - 1) / block_size) + 1) * block_size;",
          "156:     s = String(data_size, ReserveString);",
          "157:     data_s = (char*)s.bufferSlice().ptr;",
          "158:     memset(data_s, 0, data_size);",
          "159:     memcpy(data_s, data.data(), data.size());",
          "161:     data_size = data.size();",
          "162:     s = String(data_size, ReserveString);",
          "163:     data_s = (char*)s.bufferSlice().ptr;",
          "164:     memcpy(data_s, data.data(), data.size());",
          "165:   }",
          "167:   if (mcrypt_generic_init(td, key_s, use_key_length, iv_s) < 0) {",
          "168:     raise_warning(\"Mcrypt initialisation failed\");",
          "169:     return false;",
          "170:   }",
          "171:   if (dencrypt) {",
          "172:     mdecrypt_generic(td, data_s, data_size);",
          "173:   } else {",
          "174:     mcrypt_generic(td, data_s, data_size);",
          "175:   }",
          "178:   mcrypt_generic_end(td);",
          "179:   if (key_s != nullptr) {",
          "180:     free(key_s);",
          "181:   }",
          "182:   if (iv_s != nullptr) {",
          "183:     free(iv_s);",
          "184:   }",
          "185:   return s.setSize(data_size);",
          "186: }",
          "188: static Variant mcrypt_generic(const Resource& td, const String& data,",
          "189:                               bool dencrypt) {",
          "190:   MCrypt *pm = td.getTyped<MCrypt>();",
          "191:   if (!pm->m_init) {",
          "192:     raise_warning(\"Operation disallowed prior to mcrypt_generic_init().\");",
          "193:     return false;",
          "194:   }",
          "196:   if (data.empty()) {",
          "197:     raise_warning(\"An empty string was passed\");",
          "198:     return false;",
          "199:   }",
          "201:   String s;",
          "202:   unsigned char* data_s;",
          "203:   int block_size, data_size;",
          "206:     block_size = mcrypt_enc_get_block_size(pm->m_td);",
          "207:     data_size = (((data.size() - 1) / block_size) + 1) * block_size;",
          "208:     s = String(data_size, ReserveString);",
          "209:     data_s = (unsigned char *)s.bufferSlice().ptr;",
          "210:     memset(data_s, 0, data_size);",
          "211:     memcpy(data_s, data.data(), data.size());",
          "213:     data_size = data.size();",
          "214:     s = String(data_size, ReserveString);",
          "215:     data_s = (unsigned char *)s.bufferSlice().ptr;",
          "216:     memcpy(data_s, data.data(), data.size());",
          "217:   }",
          "219:   if (dencrypt) {",
          "220:     mdecrypt_generic(pm->m_td, data_s, data_size);",
          "221:   } else {",
          "222:     mcrypt_generic(pm->m_td, data_s, data_size);",
          "223:   }",
          "224:   return s.setSize(data_size);",
          "225: }",
          "229: Variant HHVM_FUNCTION(mcrypt_module_open, const String& algorithm,",
          "230:                                           const String& algorithm_directory,",
          "231:                              const String& mode, const String& mode_directory) {",
          "232:   MCRYPT td = mcrypt_module_open",
          "233:     ((char*)algorithm.data(),",
          "234:      (char*)(algorithm_directory.empty() ? MCG(algorithms_dir).data() :",
          "235:              algorithm_directory.data()),",
          "236:      (char*)mode.data(),",
          "237:      (char*)(mode_directory.empty() ? (char*)MCG(modes_dir).data() :",
          "238:              mode_directory.data()));",
          "240:   if (td == MCRYPT_FAILED) {",
          "241:     raise_warning(\"Could not open encryption module\");",
          "242:     return false;",
          "243:   }",
          "245:   return Resource(new MCrypt(td));",
          "246: }",
          "248: bool HHVM_FUNCTION(mcrypt_module_close, const Resource& td) {",
          "249:   td.getTyped<MCrypt>()->close();",
          "250:   return true;",
          "251: }",
          "253: Array HHVM_FUNCTION(mcrypt_list_algorithms,",
          "254:                     const String& lib_dir /* = null_string */) {",
          "255:   String dir = lib_dir.empty() ? String(MCG(algorithms_dir)) : lib_dir;",
          "257:   int count = 0;",
          "258:   char **modules = mcrypt_list_algorithms((char*)dir.data(), &count);",
          "259:   if (count == 0) {",
          "260:     raise_warning(\"No algorithms found in module dir\");",
          "261:   }",
          "262:   Array ret = Array::Create();",
          "263:   for (int i = 0; i < count; i++) {",
          "264:     ret.append(String(modules[i], CopyString));",
          "265:   }",
          "266:   mcrypt_free_p(modules, count);",
          "267:   return ret;",
          "268: }",
          "270: Array HHVM_FUNCTION(mcrypt_list_modes,",
          "271:                     const String& lib_dir /* = null_string */) {",
          "272:   String dir = lib_dir.empty() ? String(MCG(modes_dir)) : lib_dir;",
          "274:   int count = 0;",
          "275:   char **modules = mcrypt_list_modes((char*)dir.data(), &count);",
          "276:   if (count == 0) {",
          "277:     raise_warning(\"No modes found in module dir\");",
          "278:   }",
          "279:   Array ret = Array::Create();",
          "280:   for (int i = 0; i < count; i++) {",
          "281:     ret.append(String(modules[i], CopyString));",
          "282:   }",
          "283:   mcrypt_free_p(modules, count);",
          "284:   return ret;",
          "285: }",
          "287: int64_t HHVM_FUNCTION(mcrypt_module_get_algo_block_size,",
          "288:                                    const String& algorithm,",
          "289:                                    const String& lib_dir /* = null_string */) {",
          "290:   String dir = lib_dir.empty() ? String(MCG(algorithms_dir)) : lib_dir;",
          "291:   return mcrypt_module_get_algo_block_size((char*)algorithm.data(),",
          "292:                                            (char*)dir.data());",
          "293: }",
          "295: int64_t HHVM_FUNCTION(mcrypt_module_get_algo_key_size, const String& algorithm,",
          "296:                                    const String& lib_dir /* = null_string */) {",
          "297:   String dir = lib_dir.empty() ? String(MCG(algorithms_dir)) : lib_dir;",
          "298:   return mcrypt_module_get_algo_key_size((char*)algorithm.data(),",
          "299:                                          (char*)dir.data());",
          "300: }",
          "302: Array HHVM_FUNCTION(mcrypt_module_get_supported_key_sizes,",
          "303:                     const String& algorithm,",
          "304:                     const String& lib_dir /* = null_string */) {",
          "305:   String dir = lib_dir.empty() ? String(MCG(algorithms_dir)) : lib_dir;",
          "307:   int count = 0;",
          "308:   int *key_sizes = mcrypt_module_get_algo_supported_key_sizes",
          "309:     ((char*)algorithm.data(), (char*)dir.data(), &count);",
          "311:   Array ret = Array::Create();",
          "312:   for (int i = 0; i < count; i++) {",
          "313:     ret.append(key_sizes[i]);",
          "314:   }",
          "315:   mcrypt_free(key_sizes);",
          "316:   return ret;",
          "317: }",
          "319: bool HHVM_FUNCTION(mcrypt_module_is_block_algorithm_mode, const String& mode,",
          "320:                                   const String& lib_dir /* = null_string */) {",
          "321:   String dir = lib_dir.empty() ? String(MCG(modes_dir)) : lib_dir;",
          "322:   return mcrypt_module_is_block_algorithm_mode((char*)mode.data(),",
          "323:                                                (char*)dir.data()) == 1;",
          "324: }",
          "326: bool HHVM_FUNCTION(mcrypt_module_is_block_algorithm, const String& algorithm,",
          "327:                                   const String& lib_dir /* = null_string */) {",
          "328:   String dir = lib_dir.empty() ? String(MCG(algorithms_dir)) : lib_dir;",
          "329:   return mcrypt_module_is_block_algorithm((char*)algorithm.data(),",
          "330:                                           (char*)dir.data()) == 1;",
          "331: }",
          "333: bool HHVM_FUNCTION(mcrypt_module_is_block_mode, const String& mode,",
          "334:                                    const String& lib_dir /* = null_string */) {",
          "335:   String dir = lib_dir.empty() ? String(MCG(modes_dir)) : lib_dir;",
          "336:   return mcrypt_module_is_block_mode((char*)mode.data(),",
          "337:                                      (char*)dir.data()) == 1;",
          "338: }",
          "340: bool HHVM_FUNCTION(mcrypt_module_self_test, const String& algorithm,",
          "341:                                const String& lib_dir /* = null_string */) {",
          "342:   String dir = lib_dir.empty() ? String(MCG(algorithms_dir)) : lib_dir;",
          "343:   return mcrypt_module_self_test((char*)algorithm.data(),",
          "344:                                  (char*)dir.data()) == 0;",
          "345: }",
          "347: Variant HHVM_FUNCTION(mcrypt_create_iv, int size, int source /* = 0 */) {",
          "348:   if (size <= 0 || size >= INT_MAX) {",
          "349:     raise_warning(\"Can not create an IV with a size of less than 1 or \"",
          "350:                     \"greater than %d\", INT_MAX);",
          "351:     return false;",
          "352:   }",
          "354:   int n = 0;",
          "355:   char *iv = (char*)calloc(size + 1, 1);",
          "356:   if (source == RANDOM || source == URANDOM) {",
          "357:     int fd = open(source == RANDOM ? \"/dev/random\" : \"/dev/urandom\", O_RDONLY);",
          "358:     if (fd < 0) {",
          "359:       free(iv);",
          "360:       raise_warning(\"Cannot open source device\");",
          "361:       return false;",
          "362:     }",
          "363:     int read_bytes;",
          "364:     for (read_bytes = 0; read_bytes < size && n >= 0; read_bytes += n) {",
          "365:       n = read(fd, iv + read_bytes, size - read_bytes);",
          "366:     }",
          "367:     n = read_bytes;",
          "368:     close(fd);",
          "369:     if (n < size) {",
          "370:       free(iv);",
          "371:       raise_warning(\"Could not gather sufficient random data\");",
          "372:       return false;",
          "373:     }",
          "374:   } else {",
          "375:     n = size;",
          "376:     while (size) {",
          "377:       iv[--size] = (char)(255.0 * rand() / RAND_MAX);",
          "378:     }",
          "379:   }",
          "380:   return String(iv, n, AttachString);",
          "381: }",
          "383: Variant HHVM_FUNCTION(mcrypt_encrypt, const String& cipher, const String& key,",
          "384:                                       const String& data, const String& mode,",
          "385:                                       const Variant& viv /* = null_string */) {",
          "386:   String iv = viv.toString();",
          "387:   return php_mcrypt_do_crypt(cipher, key, data, mode, iv, false,",
          "388:                              \"mcrypt_encrypt\");",
          "389: }",
          "391: Variant HHVM_FUNCTION(mcrypt_decrypt, const String& cipher, const String& key,",
          "392:                                       const String& data, const String& mode,",
          "393:                                       const Variant& viv /* = null_string */) {",
          "394:   String iv = viv.toString();",
          "395:   return php_mcrypt_do_crypt(cipher, key, data, mode, iv, true,",
          "396:                              \"mcrypt_decrypt\");",
          "397: }",
          "399: Variant HHVM_FUNCTION(mcrypt_cbc, const String& cipher, const String& key,",
          "400:                                   const String& data, const Variant& mode,",
          "401:                                   const Variant& viv /* = null_string */) {",
          "402:   raise_deprecated(\"Function mcrypt_cbc() is deprecated\");",
          "403:   String iv = viv.toString();",
          "404:   return php_mcrypt_do_crypt(cipher, key, data, \"cbc\", iv, mode.toInt32(),",
          "405:                              \"mcrypt_cbc\");",
          "406: }",
          "408: Variant HHVM_FUNCTION(mcrypt_cfb, const String& cipher, const String& key,",
          "409:                                   const String& data, const Variant& mode,",
          "410:                                   const Variant& viv /* = null_string */) {",
          "411:   raise_deprecated(\"Function mcrypt_cfb() is deprecated\");",
          "412:   String iv = viv.toString();",
          "413:   return php_mcrypt_do_crypt(cipher, key, data, \"cfb\", iv, mode.toInt32(),",
          "414:                              \"mcrypt_cfb\");",
          "415: }",
          "417: Variant HHVM_FUNCTION(mcrypt_ecb, const String& cipher, const String& key,",
          "418:                                   const String& data, const Variant& mode,",
          "419:                                   const Variant& viv /* = null_string */) {",
          "420:   raise_deprecated(\"Function mcrypt_ecb() is deprecated\");",
          "421:   String iv = viv.toString();",
          "422:   return php_mcrypt_do_crypt(cipher, key, data, \"ecb\", iv, mode.toInt32(),",
          "423:                              \"mcrypt_ecb\");",
          "424: }",
          "426: Variant HHVM_FUNCTION(mcrypt_ofb, const String& cipher, const String& key,",
          "427:                                   const String& data, const Variant& mode,",
          "428:                                   const Variant& viv /* = null_string */) {",
          "429:   raise_deprecated(\"Function mcrypt_ofb() is deprecated\");",
          "430:   String iv = viv.toString();",
          "431:   return php_mcrypt_do_crypt(cipher, key, data, \"ofb\", iv, mode.toInt32(),",
          "432:                              \"mcrypt_ofb\");",
          "433: }",
          "435: Variant HHVM_FUNCTION(mcrypt_get_block_size, const String& cipher,",
          "436:                                     const Variant& module /* = null_string */) {",
          "437:   MCRYPT td = mcrypt_module_open((char*)cipher.data(),",
          "438:                                  (char*)MCG(algorithms_dir).data(),",
          "439:                                  (char*)module.asCStrRef().data(),",
          "440:                                  (char*)MCG(modes_dir).data());",
          "441:   if (td == MCRYPT_FAILED) {",
          "442:     MCRYPT_OPEN_MODULE_FAILED(\"mcrypt_get_block_size\");",
          "443:     return false;",
          "444:   }",
          "446:   int64_t ret = mcrypt_enc_get_block_size(td);",
          "447:   mcrypt_module_close(td);",
          "448:   return ret;",
          "449: }",
          "451: Variant HHVM_FUNCTION(mcrypt_get_cipher_name, const String& cipher) {",
          "452:   MCRYPT td = mcrypt_module_open((char*)cipher.data(),",
          "453:                                  (char*)MCG(algorithms_dir).data(),",
          "454:                                  (char*)\"ecb\",",
          "455:                                  (char*)MCG(modes_dir).data());",
          "456:   if (td == MCRYPT_FAILED) {",
          "457:     td = mcrypt_module_open((char*)cipher.data(),",
          "458:                             (char*)MCG(algorithms_dir).data(),",
          "459:                             (char*)\"stream\",",
          "460:                             (char*)MCG(modes_dir).data());",
          "461:     if (td == MCRYPT_FAILED) {",
          "462:       MCRYPT_OPEN_MODULE_FAILED(\"mcrypt_get_cipher_name\");",
          "463:       return false;",
          "464:     }",
          "465:   }",
          "467:   char *cipher_name = mcrypt_enc_get_algorithms_name(td);",
          "468:   mcrypt_module_close(td);",
          "469:   String ret(cipher_name, CopyString);",
          "470:   mcrypt_free(cipher_name);",
          "471:   return ret;",
          "472: }",
          "474: Variant HHVM_FUNCTION(mcrypt_get_iv_size, const String& cipher,",
          "475:                                           const String& mode) {",
          "476:   MCRYPT td = mcrypt_module_open((char*)cipher.data(),",
          "477:                                  (char*)MCG(algorithms_dir).data(),",
          "478:                                  (char*)mode.data(),",
          "479:                                  (char*)MCG(modes_dir).data());",
          "480:   if (td == MCRYPT_FAILED) {",
          "481:     MCRYPT_OPEN_MODULE_FAILED(\"mcrypt_get_iv_size\");",
          "482:     return false;",
          "483:   }",
          "485:   int64_t ret = mcrypt_enc_get_iv_size(td);",
          "486:   mcrypt_module_close(td);",
          "487:   return ret;",
          "488: }",
          "490: Variant HHVM_FUNCTION(mcrypt_get_key_size, const String& cipher,",
          "491:                                            const String& module) {",
          "492:   MCRYPT td = mcrypt_module_open((char*)cipher.data(),",
          "493:                                  (char*)MCG(algorithms_dir).data(),",
          "494:                                  (char*)module.data(),",
          "495:                                  (char*)MCG(modes_dir).data());",
          "496:   if (td == MCRYPT_FAILED) {",
          "497:     MCRYPT_OPEN_MODULE_FAILED(\"mcrypt_get_key_size\");",
          "498:     return false;",
          "499:   }",
          "501:   int64_t ret = mcrypt_enc_get_key_size(td);",
          "502:   mcrypt_module_close(td);",
          "503:   return ret;",
          "504: }",
          "506: String HHVM_FUNCTION(mcrypt_enc_get_algorithms_name, const Resource& td) {",
          "507:   char *name = mcrypt_enc_get_algorithms_name(td.getTyped<MCrypt>()->m_td);",
          "508:   String ret(name, CopyString);",
          "509:   mcrypt_free(name);",
          "510:   return ret;",
          "511: }",
          "513: int64_t HHVM_FUNCTION(mcrypt_enc_get_block_size, const Resource& td) {",
          "514:   return mcrypt_enc_get_block_size(td.getTyped<MCrypt>()->m_td);",
          "515: }",
          "517: int64_t HHVM_FUNCTION(mcrypt_enc_get_iv_size, const Resource& td) {",
          "518:   return mcrypt_enc_get_iv_size(td.getTyped<MCrypt>()->m_td);",
          "519: }",
          "521: int64_t HHVM_FUNCTION(mcrypt_enc_get_key_size, const Resource& td) {",
          "522:   return mcrypt_enc_get_key_size(td.getTyped<MCrypt>()->m_td);",
          "523: }",
          "525: String HHVM_FUNCTION(mcrypt_enc_get_modes_name, const Resource& td) {",
          "526:   char *name = mcrypt_enc_get_modes_name(td.getTyped<MCrypt>()->m_td);",
          "527:   String ret(name, CopyString);",
          "528:   mcrypt_free(name);",
          "529:   return ret;",
          "530: }",
          "532: Array HHVM_FUNCTION(mcrypt_enc_get_supported_key_sizes, const Resource& td) {",
          "533:   int count = 0;",
          "534:   int *key_sizes =",
          "535:     mcrypt_enc_get_supported_key_sizes(td.getTyped<MCrypt>()->m_td, &count);",
          "537:   Array ret = Array::Create();",
          "538:   for (int i = 0; i < count; i++) {",
          "539:     ret.append(key_sizes[i]);",
          "540:   }",
          "541:   mcrypt_free(key_sizes);",
          "542:   return ret;",
          "543: }",
          "545: bool HHVM_FUNCTION(mcrypt_enc_is_block_algorithm_mode, const Resource& td) {",
          "546:   return mcrypt_enc_is_block_algorithm_mode(td.getTyped<MCrypt>()->m_td) == 1;",
          "547: }",
          "549: bool HHVM_FUNCTION(mcrypt_enc_is_block_algorithm, const Resource& td) {",
          "550:   return mcrypt_enc_is_block_algorithm(td.getTyped<MCrypt>()->m_td) == 1;",
          "551: }",
          "553: bool HHVM_FUNCTION(mcrypt_enc_is_block_mode, const Resource& td) {",
          "554:   return mcrypt_enc_is_block_mode(td.getTyped<MCrypt>()->m_td) == 1;",
          "555: }",
          "557: int64_t HHVM_FUNCTION(mcrypt_enc_self_test, const Resource& td) {",
          "558:   return mcrypt_enc_self_test(td.getTyped<MCrypt>()->m_td);",
          "559: }",
          "561: int64_t HHVM_FUNCTION(mcrypt_generic_init, const Resource& td,",
          "562:                                            const String& key,",
          "563:                                            const String& iv) {",
          "564:   MCrypt *pm = td.getTyped<MCrypt>();",
          "565:   int max_key_size = mcrypt_enc_get_key_size(pm->m_td);",
          "566:   int iv_size = mcrypt_enc_get_iv_size(pm->m_td);",
          "568:   if (key.empty()) {",
          "569:     raise_warning(\"Key size is 0\");",
          "570:   }",
          "572:   unsigned char *key_s = (unsigned char *)malloc(key.size());",
          "573:   memset(key_s, 0, key.size());",
          "575:   unsigned char *iv_s = (unsigned char *)malloc(iv_size + 1);",
          "576:   memset(iv_s, 0, iv_size + 1);",
          "578:   int key_size;",
          "579:   if (key.size() > max_key_size) {",
          "580:     raise_warning(\"Key size too large; supplied length: %d, max: %d\",",
          "581:                     key.size(), max_key_size);",
          "582:     key_size = max_key_size;",
          "583:   } else {",
          "584:     key_size = key.size();",
          "585:   }",
          "586:   memcpy(key_s, key.data(), key.size());",
          "588:   if (iv.size() != iv_size) {",
          "589:     raise_warning(\"Iv size incorrect; supplied length: %d, needed: %d\",",
          "590:                     iv.size(), iv_size);",
          "591:   }",
          "592:   memcpy(iv_s, iv.data(), iv_size);",
          "594:   mcrypt_generic_deinit(pm->m_td);",
          "595:   int result = mcrypt_generic_init(pm->m_td, key_s, key_size, iv_s);",
          "599:   if (result < 0) {",
          "600:     pm->close();",
          "601:     switch (result) {",
          "602:     case -3:",
          "603:       raise_warning(\"Key length incorrect\");",
          "604:       break;",
          "605:     case -4:",
          "606:       raise_warning(\"Memory allocation error\");",
          "607:       break;",
          "608:     case -1:",
          "609:     default:",
          "610:       raise_warning(\"Unknown error\");",
          "611:       break;",
          "612:     }",
          "613:   }",
          "614:   pm->m_init = true;",
          "615:   free(iv_s);",
          "616:   free(key_s);",
          "617:   return result;",
          "618: }",
          "620: Variant HHVM_FUNCTION(mcrypt_generic, const Resource& td, const String& data) {",
          "621:   return mcrypt_generic(td, data, false);",
          "622: }",
          "624: Variant HHVM_FUNCTION(mdecrypt_generic, const Resource& td,",
          "625:                                         const String& data) {",
          "626:   return mcrypt_generic(td, data, true);",
          "627: }",
          "629: bool HHVM_FUNCTION(mcrypt_generic_deinit, const Resource& td) {",
          "630:   MCrypt *pm = td.getTyped<MCrypt>();",
          "631:   if (mcrypt_generic_deinit(pm->m_td) < 0) {",
          "632:     raise_warning(\"Could not terminate encryption specifier\");",
          "633:     return false;",
          "634:   }",
          "635:   pm->m_init = false;",
          "636:   return true;",
          "637: }",
          "639: bool HHVM_FUNCTION(mcrypt_generic_end, const Resource& td) {",
          "640:   return HHVM_FUNCTION(mcrypt_generic_deinit, td);",
          "641: }",
          "645: const StaticString s_MCRYPT_3DES(\"MCRYPT_3DES\");",
          "646: const StaticString s_MCRYPT_ARCFOUR(\"MCRYPT_ARCFOUR\");",
          "647: const StaticString s_MCRYPT_ARCFOUR_IV(\"MCRYPT_ARCFOUR_IV\");",
          "648: const StaticString s_MCRYPT_BLOWFISH(\"MCRYPT_BLOWFISH\");",
          "649: const StaticString s_MCRYPT_BLOWFISH_COMPAT(\"MCRYPT_BLOWFISH_COMPAT\");",
          "650: const StaticString s_MCRYPT_CAST_128(\"MCRYPT_CAST_128\");",
          "651: const StaticString s_MCRYPT_CAST_256(\"MCRYPT_CAST_256\");",
          "652: const StaticString s_MCRYPT_CRYPT(\"MCRYPT_CRYPT\");",
          "653: const StaticString s_MCRYPT_DECRYPT(\"MCRYPT_DECRYPT\");",
          "654: const StaticString s_MCRYPT_DES(\"MCRYPT_DES\");",
          "655: const StaticString s_MCRYPT_DEV_RANDOM(\"MCRYPT_DEV_RANDOM\");",
          "656: const StaticString s_MCRYPT_DEV_URANDOM(\"MCRYPT_DEV_URANDOM\");",
          "657: const StaticString s_MCRYPT_ENCRYPT(\"MCRYPT_ENCRYPT\");",
          "658: const StaticString s_MCRYPT_ENIGNA(\"MCRYPT_ENIGNA\");",
          "659: const StaticString s_MCRYPT_GOST(\"MCRYPT_GOST\");",
          "660: const StaticString s_MCRYPT_IDEA(\"MCRYPT_IDEA\");",
          "661: const StaticString s_MCRYPT_LOKI97(\"MCRYPT_LOKI97\");",
          "662: const StaticString s_MCRYPT_MARS(\"MCRYPT_MARS\");",
          "663: const StaticString s_MCRYPT_MODE_CBC(\"MCRYPT_MODE_CBC\");",
          "664: const StaticString s_MCRYPT_MODE_CFB(\"MCRYPT_MODE_CFB\");",
          "665: const StaticString s_MCRYPT_MODE_ECB(\"MCRYPT_MODE_ECB\");",
          "666: const StaticString s_MCRYPT_MODE_NOFB(\"MCRYPT_MODE_NOFB\");",
          "667: const StaticString s_MCRYPT_MODE_OFB(\"MCRYPT_MODE_OFB\");",
          "668: const StaticString s_MCRYPT_MODE_STREAM(\"MCRYPT_MODE_STREAM\");",
          "669: const StaticString s_MCRYPT_PANAMA(\"MCRYPT_PANAMA\");",
          "670: const StaticString s_MCRYPT_RAND(\"MCRYPT_RAND\");",
          "671: const StaticString s_MCRYPT_RC2(\"MCRYPT_RC2\");",
          "672: const StaticString s_MCRYPT_RC6(\"MCRYPT_RC6\");",
          "673: const StaticString s_MCRYPT_RIJNDAEL_128(\"MCRYPT_RIJNDAEL_128\");",
          "674: const StaticString s_MCRYPT_RIJNDAEL_192(\"MCRYPT_RIJNDAEL_192\");",
          "675: const StaticString s_MCRYPT_RIJNDAEL_256(\"MCRYPT_RIJNDAEL_256\");",
          "676: const StaticString s_MCRYPT_SAFER128(\"MCRYPT_SAFER128\");",
          "677: const StaticString s_MCRYPT_SAFER64(\"MCRYPT_SAFER64\");",
          "678: const StaticString s_MCRYPT_SAFERPLUS(\"MCRYPT_SAFERPLUS\");",
          "679: const StaticString s_MCRYPT_SERPENT(\"MCRYPT_SERPENT\");",
          "680: const StaticString s_MCRYPT_SKIPJACK(\"MCRYPT_SKIPJACK\");",
          "681: const StaticString s_MCRYPT_THREEWAY(\"MCRYPT_THREEWAY\");",
          "682: const StaticString s_MCRYPT_TRIPLEDES(\"MCRYPT_TRIPLEDES\");",
          "683: const StaticString s_MCRYPT_TWOFISH(\"MCRYPT_TWOFISH\");",
          "684: const StaticString s_MCRYPT_WAKE(\"MCRYPT_WAKE\");",
          "685: const StaticString s_MCRYPT_XTEA(\"MCRYPT_XTEA\");",
          "687: class McryptExtension : public Extension {",
          "688:  public:",
          "689:   McryptExtension() : Extension(\"mcrypt\") {}",
          "690:   virtual void moduleInit() {",
          "691:     Native::registerConstant<KindOfStaticString>(",
          "692:       s_MCRYPT_3DES.get(), StaticString(\"tripledes\").get()",
          "693:     );",
          "694:     Native::registerConstant<KindOfStaticString>(",
          "695:       s_MCRYPT_ARCFOUR.get(), StaticString(\"arcfour\").get()",
          "696:     );",
          "697:     Native::registerConstant<KindOfStaticString>(",
          "698:       s_MCRYPT_ARCFOUR_IV.get(), StaticString(\"arcfour-iv\").get()",
          "699:     );",
          "700:     Native::registerConstant<KindOfStaticString>(",
          "701:       s_MCRYPT_BLOWFISH.get(), StaticString(\"blowfish\").get()",
          "702:     );",
          "703:     Native::registerConstant<KindOfStaticString>(",
          "704:       s_MCRYPT_BLOWFISH_COMPAT.get(), StaticString(\"blowfish-compat\").get()",
          "705:     );",
          "706:     Native::registerConstant<KindOfStaticString>(",
          "707:       s_MCRYPT_CAST_128.get(), StaticString(\"cast-128\").get()",
          "708:     );",
          "709:     Native::registerConstant<KindOfStaticString>(",
          "710:       s_MCRYPT_CAST_256.get(), StaticString(\"cast-256\").get()",
          "711:     );",
          "712:     Native::registerConstant<KindOfStaticString>(",
          "713:       s_MCRYPT_CRYPT.get(), StaticString(\"crypt\").get()",
          "714:     );",
          "715:     Native::registerConstant<KindOfInt64>(",
          "716:       s_MCRYPT_DECRYPT.get(), 1",
          "717:     );",
          "718:     Native::registerConstant<KindOfStaticString>(",
          "719:       s_MCRYPT_DES.get(), StaticString(\"des\").get()",
          "720:     );",
          "721:     Native::registerConstant<KindOfInt64>(",
          "722:       s_MCRYPT_DEV_RANDOM.get(), RANDOM",
          "723:     );",
          "724:     Native::registerConstant<KindOfInt64>(",
          "725:       s_MCRYPT_DEV_URANDOM.get(), URANDOM",
          "726:     );",
          "727:     Native::registerConstant<KindOfInt64>(",
          "728:       s_MCRYPT_ENCRYPT.get(), 0",
          "729:     );",
          "730:     Native::registerConstant<KindOfStaticString>(",
          "731:       s_MCRYPT_ENIGNA.get(), StaticString(\"crypt\").get()",
          "732:     );",
          "733:     Native::registerConstant<KindOfStaticString>(",
          "734:       s_MCRYPT_GOST.get(), StaticString(\"gost\").get()",
          "735:     );",
          "736:     Native::registerConstant<KindOfStaticString>(",
          "737:       s_MCRYPT_IDEA.get(), StaticString(\"idea\").get()",
          "738:     );",
          "739:     Native::registerConstant<KindOfStaticString>(",
          "740:       s_MCRYPT_LOKI97.get(), StaticString(\"loki97\").get()",
          "741:     );",
          "742:     Native::registerConstant<KindOfStaticString>(",
          "743:       s_MCRYPT_MARS.get(), StaticString(\"mars\").get()",
          "744:     );",
          "745:     Native::registerConstant<KindOfStaticString>(",
          "746:       s_MCRYPT_MODE_CBC.get(), StaticString(\"cbc\").get()",
          "747:     );",
          "748:     Native::registerConstant<KindOfStaticString>(",
          "749:       s_MCRYPT_MODE_CFB.get(), StaticString(\"cfb\").get()",
          "750:     );",
          "751:     Native::registerConstant<KindOfStaticString>(",
          "752:       s_MCRYPT_MODE_ECB.get(), StaticString(\"ecb\").get()",
          "753:     );",
          "754:     Native::registerConstant<KindOfStaticString>(",
          "755:       s_MCRYPT_MODE_NOFB.get(), StaticString(\"nofb\").get()",
          "756:     );",
          "757:     Native::registerConstant<KindOfStaticString>(",
          "758:       s_MCRYPT_MODE_OFB.get(), StaticString(\"ofb\").get()",
          "759:     );",
          "760:     Native::registerConstant<KindOfStaticString>(",
          "761:       s_MCRYPT_MODE_STREAM.get(), StaticString(\"stream\").get()",
          "762:     );",
          "763:     Native::registerConstant<KindOfStaticString>(",
          "764:       s_MCRYPT_PANAMA.get(), StaticString(\"panama\").get()",
          "765:     );",
          "766:     Native::registerConstant<KindOfInt64>(",
          "767:       s_MCRYPT_RAND.get(), RAND",
          "768:     );",
          "769:     Native::registerConstant<KindOfStaticString>(",
          "770:       s_MCRYPT_RC2.get(), StaticString(\"rc2\").get()",
          "771:     );",
          "772:     Native::registerConstant<KindOfStaticString>(",
          "773:       s_MCRYPT_RC6.get(), StaticString(\"rc6\").get()",
          "774:     );",
          "775:     Native::registerConstant<KindOfStaticString>(",
          "776:       s_MCRYPT_RIJNDAEL_128.get(), StaticString(\"rijndael-128\").get()",
          "777:     );",
          "778:     Native::registerConstant<KindOfStaticString>(",
          "779:       s_MCRYPT_RIJNDAEL_192.get(), StaticString(\"rijndael-192\").get()",
          "780:     );",
          "781:     Native::registerConstant<KindOfStaticString>(",
          "782:       s_MCRYPT_RIJNDAEL_256.get(), StaticString(\"rijndael-256\").get()",
          "783:     );",
          "784:     Native::registerConstant<KindOfStaticString>(",
          "785:       s_MCRYPT_SAFER128.get(), StaticString(\"safer-sk128\").get()",
          "786:     );",
          "787:     Native::registerConstant<KindOfStaticString>(",
          "788:       s_MCRYPT_SAFER64.get(), StaticString(\"safer-sk64\").get()",
          "789:     );",
          "790:     Native::registerConstant<KindOfStaticString>(",
          "791:       s_MCRYPT_SAFERPLUS.get(), StaticString(\"saferplus\").get()",
          "792:     );",
          "793:     Native::registerConstant<KindOfStaticString>(",
          "794:       s_MCRYPT_SERPENT.get(), StaticString(\"serpent\").get()",
          "795:     );",
          "796:     Native::registerConstant<KindOfStaticString>(",
          "797:       s_MCRYPT_SKIPJACK.get(), StaticString(\"skipjack\").get()",
          "798:     );",
          "799:     Native::registerConstant<KindOfStaticString>(",
          "800:       s_MCRYPT_THREEWAY.get(), StaticString(\"threeway\").get()",
          "801:     );",
          "802:     Native::registerConstant<KindOfStaticString>(",
          "803:       s_MCRYPT_TRIPLEDES.get(), StaticString(\"tripledes\").get()",
          "804:     );",
          "805:     Native::registerConstant<KindOfStaticString>(",
          "806:       s_MCRYPT_TWOFISH.get(), StaticString(\"twofish\").get()",
          "807:     );",
          "808:     Native::registerConstant<KindOfStaticString>(",
          "809:       s_MCRYPT_WAKE.get(), StaticString(\"wake\").get()",
          "810:     );",
          "811:     Native::registerConstant<KindOfStaticString>(",
          "812:       s_MCRYPT_XTEA.get(), StaticString(\"xtea\").get()",
          "813:     );",
          "815:     HHVM_FE(mcrypt_module_open);",
          "816:     HHVM_FE(mcrypt_module_close);",
          "817:     HHVM_FE(mcrypt_list_algorithms);",
          "818:     HHVM_FE(mcrypt_list_modes);",
          "819:     HHVM_FE(mcrypt_module_get_algo_block_size);",
          "820:     HHVM_FE(mcrypt_module_get_algo_key_size);",
          "821:     HHVM_FE(mcrypt_module_get_supported_key_sizes);",
          "822:     HHVM_FE(mcrypt_module_is_block_algorithm_mode);",
          "823:     HHVM_FE(mcrypt_module_is_block_algorithm);",
          "824:     HHVM_FE(mcrypt_module_is_block_mode);",
          "825:     HHVM_FE(mcrypt_module_self_test);",
          "826:     HHVM_FE(mcrypt_create_iv);",
          "827:     HHVM_FE(mcrypt_encrypt);",
          "828:     HHVM_FE(mcrypt_decrypt);",
          "829:     HHVM_FE(mcrypt_cbc);",
          "830:     HHVM_FE(mcrypt_cfb);",
          "831:     HHVM_FE(mcrypt_ecb);",
          "832:     HHVM_FE(mcrypt_ofb);",
          "833:     HHVM_FE(mcrypt_get_block_size);",
          "834:     HHVM_FE(mcrypt_get_cipher_name);",
          "835:     HHVM_FE(mcrypt_get_iv_size);",
          "836:     HHVM_FE(mcrypt_get_key_size);",
          "837:     HHVM_FE(mcrypt_enc_get_algorithms_name);",
          "838:     HHVM_FE(mcrypt_enc_get_block_size);",
          "839:     HHVM_FE(mcrypt_enc_get_iv_size);",
          "840:     HHVM_FE(mcrypt_enc_get_key_size);",
          "841:     HHVM_FE(mcrypt_enc_get_modes_name);",
          "842:     HHVM_FE(mcrypt_enc_get_supported_key_sizes);",
          "843:     HHVM_FE(mcrypt_enc_is_block_algorithm_mode);",
          "844:     HHVM_FE(mcrypt_enc_is_block_algorithm);",
          "845:     HHVM_FE(mcrypt_enc_is_block_mode);",
          "846:     HHVM_FE(mcrypt_enc_self_test);",
          "847:     HHVM_FE(mcrypt_generic_init);",
          "848:     HHVM_FE(mcrypt_generic);",
          "849:     HHVM_FE(mdecrypt_generic);",
          "850:     HHVM_FE(mcrypt_generic_deinit);",
          "851:     HHVM_FE(mcrypt_generic_end);",
          "853:     loadSystemlib();",
          "854:   }",
          "855: } s_mcrypt_extension;",
          "859: }",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/mcrypt/ext_mcrypt.php||hphp/runtime/ext/mcrypt/ext_mcrypt.php": [
          "File: hphp/runtime/ext/mcrypt/ext_mcrypt.php -> hphp/runtime/ext/mcrypt/ext_mcrypt.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh",
          "15: <<__Native>>",
          "16: function mcrypt_cbc(string $cipher,",
          "17:                     string $key,",
          "18:                     string $data,",
          "19:                     mixed $mode,",
          "20:                     ?string $iv = null): mixed;",
          "33: <<__Native>>",
          "34: function mcrypt_cfb(string $cipher,",
          "35:                     string $key,",
          "36:                     string $data,",
          "37:                     mixed $mode,",
          "38:                     ?string $iv = null): mixed;",
          "52: <<__Native>>",
          "53: function mcrypt_create_iv(int $size,",
          "54:                           int $source = MCRYPT_DEV_RANDOM): mixed;",
          "70: <<__Native>>",
          "71: function mcrypt_decrypt(string $cipher,",
          "72:                         string $key,",
          "73:                         string $data,",
          "74:                         string $mode,",
          "75:                         ?string $iv = null): mixed;",
          "88: <<__Native>>",
          "89: function mcrypt_ecb(string $cipher,",
          "90:                     string $key,",
          "91:                     string $data,",
          "92:                     mixed $mode,",
          "93:                     ?string $iv = null): mixed;",
          "102: <<__Native>>",
          "103: function mcrypt_enc_get_algorithms_name(resource $td): string;",
          "113: <<__Native>>",
          "114: function mcrypt_enc_get_block_size(resource $td): int;",
          "124: <<__Native>>",
          "125: function mcrypt_enc_get_iv_size(resource $td): int;",
          "135: <<__Native>>",
          "136: function mcrypt_enc_get_key_size(resource $td): int;",
          "145: <<__Native>>",
          "146: function mcrypt_enc_get_modes_name(resource $td): string;",
          "158: <<__Native>>",
          "159: function mcrypt_enc_get_supported_key_sizes(resource $td): array;",
          "169: <<__Native>>",
          "170: function mcrypt_enc_is_block_algorithm_mode(resource $td): bool;",
          "180: <<__Native>>",
          "181: function mcrypt_enc_is_block_algorithm(resource $td): bool;",
          "191: <<__Native>>",
          "192: function mcrypt_enc_is_block_mode(resource $td): bool;",
          "202: <<__Native>>",
          "203: function mcrypt_enc_self_test(resource $td): int;",
          "222: <<__Native>>",
          "223: function mcrypt_encrypt(string $cipher,",
          "224:                         string $key,",
          "225:                         string $data,",
          "226:                         string $mode,",
          "227:                         ?string $iv = null): mixed;",
          "236: <<__Native>>",
          "237: function mcrypt_generic_deinit(resource $td): bool;",
          "246: <<__Native>>",
          "247: function mcrypt_generic_end(resource $td): bool;",
          "270: <<__Native>>",
          "271: function mcrypt_generic_init(resource $td,",
          "272:                              string $key,",
          "273:                              string $iv): int;",
          "287: <<__Native>>",
          "288: function mcrypt_generic(resource $td,",
          "289:                         string $data): mixed;",
          "299: <<__Native>>",
          "300: function mcrypt_get_block_size(string $cipher,",
          "301:                                ?string $mode = null): mixed;",
          "311: <<__Native>>",
          "312: function mcrypt_get_cipher_name(string $cipher): mixed;",
          "327: <<__Native>>",
          "328: function mcrypt_get_iv_size(string $cipher,",
          "329:                             string $mode): mixed;",
          "340: <<__Native>>",
          "341: function mcrypt_get_key_size(string $cipher,",
          "342:                              string $mode): mixed;",
          "353: <<__Native>>",
          "354: function mcrypt_list_algorithms(string $lib_dir = ''): array;",
          "365: <<__Native>>",
          "366: function mcrypt_list_modes(string $lib_dir = ''): array;",
          "375: <<__Native>>",
          "376: function mcrypt_module_close(resource $td): bool;",
          "388: <<__Native>>",
          "389: function mcrypt_module_get_algo_block_size(string $algorithm,",
          "390:                                            string $lib_dir = ''): int;",
          "402: <<__Native>>",
          "403: function mcrypt_module_get_algo_key_size(string $algorithm,",
          "404:                                          string $lib_dir = ''): int;",
          "418: <<__Native>>",
          "419: function mcrypt_module_get_supported_key_sizes(string $algorithm,",
          "420:                                                string $lib_dir = ''): array;",
          "433: <<__Native>>",
          "434: function mcrypt_module_is_block_algorithm_mode(string $mode,",
          "435:                                                string $lib_dir= ''): bool;",
          "447: <<__Native>>",
          "448: function mcrypt_module_is_block_algorithm(string $algorithm,",
          "449:                                           string $lib_dir= ''): bool;",
          "462: <<__Native>>",
          "463: function mcrypt_module_is_block_mode(string $mode,",
          "464:                                      string $lib_dir= ''): bool;",
          "487: <<__Native>>",
          "488: function mcrypt_module_open(string $algorithm,",
          "489:                             string $algorithm_directory,",
          "490:                             string $mode,",
          "491:                             string $mode_directory): mixed;",
          "503: <<__Native>>",
          "504: function mcrypt_module_self_test(string $algorithm,",
          "505:                                  string $lib_dir = ''): bool;",
          "518: <<__Native>>",
          "519: function mcrypt_ofb(string $cipher,",
          "520:                     string $key,",
          "521:                     string $data,",
          "522:                     mixed $mode,",
          "523:                     ?string $iv = null): mixed;",
          "534: <<__Native>>",
          "535: function mdecrypt_generic(resource $td,",
          "536:                           string $data): mixed;",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expect||hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expect": [
          "File: hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expect -> hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expectf||hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expectf": [
          "File: hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expectf -> hphp/test/slow/ext_mcrypt/ext_mcrypt.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: bool(true)",
          "2: bool(true)",
          "3: bool(true)",
          "4: bool(true)",
          "5: bool(true)",
          "6: bool(true)",
          "7: bool(true)",
          "8: bool(true)",
          "9: bool(true)",
          "10: bool(true)",
          "11: bool(true)",
          "12: bool(true)",
          "13: bool(true)",
          "14: bool(true)",
          "15: bool(true)",
          "17: Deprecated: Function mcrypt_cbc() is deprecated in %s/test/slow/ext_mcrypt/ext_mcrypt.php on line 60",
          "19: Deprecated: Function mcrypt_cbc() is deprecated in %s/test/slow/ext_mcrypt/ext_mcrypt.php on line 63",
          "20: bool(true)",
          "21: bool(true)",
          "23: Deprecated: Function mcrypt_cfb() is deprecated in %s/test/slow/ext_mcrypt/ext_mcrypt.php on line 73",
          "25: Deprecated: Function mcrypt_cfb() is deprecated in %s/test/slow/ext_mcrypt/ext_mcrypt.php on line 76",
          "26: bool(true)",
          "27: bool(true)",
          "29: Deprecated: Function mcrypt_ecb() is deprecated in %s/test/slow/ext_mcrypt/ext_mcrypt.php on line 86",
          "31: Deprecated: Function mcrypt_ecb() is deprecated in %s/test/slow/ext_mcrypt/ext_mcrypt.php on line 89",
          "32: bool(true)",
          "33: bool(true)",
          "35: Deprecated: Function mcrypt_ofb() is deprecated in %s/test/slow/ext_mcrypt/ext_mcrypt.php on line 99",
          "37: Deprecated: Function mcrypt_ofb() is deprecated in %s/test/slow/ext_mcrypt/ext_mcrypt.php on line 102",
          "38: bool(true)",
          "39: bool(true)",
          "40: bool(true)",
          "41: bool(true)",
          "42: bool(true)",
          "43: bool(true)",
          "44: bool(true)",
          "45: bool(true)",
          "46: bool(true)",
          "47: bool(true)",
          "48: bool(true)",
          "49: bool(true)",
          "50: bool(true)",
          "51: bool(true)",
          "52: bool(true)",
          "53: bool(true)",
          "54: bool(true)",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_3des_decrypt.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_3des_decrypt.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_3des_decrypt.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_3des_decrypt.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:    var_dump(bin2hex($str));",
          "57: }",
          "58: ?>",
          "",
          "[Removed Lines]",
          "59: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_3des_encrypt.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_3des_encrypt.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_3des_encrypt.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_3des_encrypt.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:    var_dump(bin2hex(mcrypt_cbc($cipher, $key, $data, $mode, $iv)));",
          "40: }",
          "41: ?>",
          "",
          "[Removed Lines]",
          "42: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_variation4.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_variation4.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_cbc_variation4.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_cbc_variation4.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: fclose($fp);",
          "112: ?>",
          "",
          "[Removed Lines]",
          "113: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation1.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation1.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation1.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation1.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: fclose($fp);",
          "112: ?>",
          "",
          "[Removed Lines]",
          "113: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation2.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation2.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation2.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation2.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: fclose($fp);",
          "112: ?>",
          "",
          "[Removed Lines]",
          "113: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation3.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation3.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_decrypt_variation3.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_decrypt_variation3.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: fclose($fp);",
          "112: ?>",
          "",
          "[Removed Lines]",
          "113: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation1.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation1.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation1.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation1.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: fclose($fp);",
          "114: ?>",
          "",
          "[Removed Lines]",
          "115: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation2.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation2.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation2.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation2.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: fclose($fp);",
          "114: ?>",
          "",
          "[Removed Lines]",
          "115: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation3.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation3.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_ecb_variation3.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_ecb_variation3.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: fclose($fp);",
          "114: ?>",
          "",
          "[Removed Lines]",
          "115: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation1.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation1.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation1.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation1.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: fclose($fp);",
          "112: ?>",
          "",
          "[Removed Lines]",
          "113: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation2.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation2.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation2.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation2.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: fclose($fp);",
          "112: ?>",
          "",
          "[Removed Lines]",
          "113: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation3.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation3.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_encrypt_variation3.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_encrypt_variation3.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: fclose($fp);",
          "112: ?>",
          "",
          "[Removed Lines]",
          "113: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_rijndael128_128BitKey.php||hphp/test/zend/good/ext/mcrypt/tests/mcrypt_rijndael128_128BitKey.php": [
          "File: hphp/test/zend/bad/ext/mcrypt/tests/mcrypt_rijndael128_128BitKey.php -> hphp/test/zend/good/ext/mcrypt/tests/mcrypt_rijndael128_128BitKey.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: }",
          "61: ?>",
          "",
          "[Removed Lines]",
          "62: ===DONE===",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}