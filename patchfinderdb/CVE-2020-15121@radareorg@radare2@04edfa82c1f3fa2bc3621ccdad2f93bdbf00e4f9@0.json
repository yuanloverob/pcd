{
  "cve_id": "CVE-2020-15121",
  "cve_desc": "In radare2 before version 4.5.0, malformed PDB file names in the PDB server path cause shell injection. To trigger the problem it's required to open the executable in radare2 and run idpd to trigger the download. The shell code will execute, and will create a file called pwned in the current directory.",
  "repo": "radareorg/radare2",
  "patch_hash": "04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9",
  "patch_info": {
    "commit_hash": "04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/04edfa82c1f3fa2bc3621ccdad2f93bdbf00e4f9",
    "files": [
      "libr/bin/pdb/pdb_downloader.c",
      "libr/config.mk.tail",
      "libr/include/r_socket.h",
      "libr/include/r_types.h",
      "libr/include/r_util/r_str.h",
      "libr/socket/socket.c",
      "libr/socket/socket_http.c",
      "libr/util/str.c",
      "libr/util/sys.c",
      "meson.build",
      "shlr/sdb/src/disk.c",
      "test/db/formats/pdb",
      "test/unit/test_str.c"
    ],
    "message": "Fix command injection on PDB download (#16966)\n\n* Fix r_sys_mkdirp with absolute path on Windows\n* Fix build with --with-openssl\n* Use RBuffer in r_socket_http_answer()\n* r_socket_http_answer: Fix read for big responses\n* Implement r_str_escape_sh()\n* Cleanup r_socket_connect() on Windows\n* Fix socket being created without a protocol\n* Fix socket connect with SSL ##socket\n* Use select() in r_socket_ready()\n* Fix read failing if received only protocol answer\n* Fix double-free\n* r_socket_http_get: Fail if req. SSL with no support\n* Follow redirects in r_socket_http_answer()\n* Fix r_socket_http_get result length with R2_CURL=1\n* Also follow redirects\n* Avoid using curl for downloading PDBs\n* Use r_socket_http_get() on UNIXs\n* Use WinINet API on Windows for r_socket_http_get()\n* Fix command injection\n* Fix r_sys_cmd_str_full output for binary data\n* Validate GUID on PDB download\n* Pass depth to socket_http_get_recursive()\n* Remove 'r_' and '__' from static function names\n* Fix is_valid_guid\n* Fix for comments",
    "before_after_code_files": [
      "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c",
      "libr/config.mk.tail||libr/config.mk.tail",
      "libr/include/r_socket.h||libr/include/r_socket.h",
      "libr/include/r_types.h||libr/include/r_types.h",
      "libr/include/r_util/r_str.h||libr/include/r_util/r_str.h",
      "libr/socket/socket.c||libr/socket/socket.c",
      "libr/socket/socket_http.c||libr/socket/socket_http.c",
      "libr/util/str.c||libr/util/str.c",
      "libr/util/sys.c||libr/util/sys.c",
      "meson.build||meson.build",
      "shlr/sdb/src/disk.c||shlr/sdb/src/disk.c",
      "test/unit/test_str.c||test/unit/test_str.c"
    ]
  },
  "patch_diff": {
    "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c": [
      "File: libr/bin/pdb/pdb_downloader.c -> libr/bin/pdb/pdb_downloader.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "18:  return true;",
      "19: }",
      "24:   return false;",
      "25:  }",
      "26:  return true;",
      "27: }",
      "29: static int download(struct SPDBDownloader *pd) {",
      "30:  SPDBDownloaderOpt *opt = pd->opt;",
      "44:  int res = 0;",
      "45:  int cmd_ret;",
      "46:  if (!opt->dbg_file || !*opt->dbg_file) {",
      "48:   return 0;",
      "49:  }",
      "76:  if (r_file_exists (abspath_to_file)) {",
      "77:   eprintf (\"File already downloaded.\\n\");",
      "87:   return 1;",
      "88:  }",
      "90:  if (checkExtract () || opt->extract == 0) {",
      "100: #if __WINDOWS__",
      "110: #else",
      "113:   char *abspath_to_dir = r_file_dirname (abspath_to_archive);",
      "119: #endif",
      "127:    if (res && ((cmd_ret = r_sys_cmd (extractor_cmd)) != 0)) {",
      "128:     eprintf (\"cab extractor exited with error %d\\n\", cmd_ret);",
      "129:     res = 0;",
      "130:    }",
      "131:    r_file_rm (abspath_to_archive);",
      "132:   }",
      "134:  }",
      "135:  if (res == 0) {",
      "136:   eprintf (\"Falling back to uncompressed pdb\\n\");",
      "148:   eprintf (\"Attempting to download uncompressed pdb in %s\\n\", abspath_to_file);",
      "165:  return res;",
      "166: }",
      "",
      "[Removed Lines]",
      "21: static bool checkCurl() {",
      "22:  const char nul[] = R_SYS_DEVNULL;",
      "23:  if (r_sys_cmdf (\"curl --version > %s\", nul) != 0) {",
      "31:  char *curl_cmd = NULL;",
      "32:  char *extractor_cmd = NULL;",
      "33:  char *abspath_to_archive = NULL;",
      "34:  char *abspath_to_file = NULL;",
      "35:  char *archive_name = NULL;",
      "36:  size_t archive_name_len = 0;",
      "37:  char *symbol_store_path = NULL;",
      "38:  char *dbg_file = NULL;",
      "39:  char *guid = NULL;",
      "40:  char *archive_name_escaped  = NULL;",
      "41:  char *user_agent = NULL;",
      "42:  char *symbol_server = NULL;",
      "50:  if (!checkCurl ()) {",
      "51:   return 0;",
      "52:  }",
      "54:  archive_name_len = strlen (opt->dbg_file);",
      "55:  archive_name = malloc (archive_name_len + 1);",
      "56:  if (!archive_name) {",
      "57:   return 0;",
      "58:  }",
      "59:  memcpy (archive_name, opt->dbg_file, archive_name_len + 1);",
      "60:  archive_name[archive_name_len - 1] = '_';",
      "61:  symbol_store_path = r_str_escape (opt->symbol_store_path);",
      "62:  dbg_file = r_str_escape (opt->dbg_file);",
      "63:  guid = r_str_escape (opt->guid);",
      "64:  archive_name_escaped = r_str_escape (archive_name);",
      "65:  user_agent = r_str_escape (opt->user_agent);",
      "66:  symbol_server = r_str_escape (opt->symbol_server);",
      "68:  abspath_to_archive = r_str_newf (\"%s%s%s%s%s%s%s\",",
      "69:        symbol_store_path, R_SYS_DIR,",
      "70:        dbg_file, R_SYS_DIR,",
      "71:        guid, R_SYS_DIR,",
      "72:        archive_name_escaped);",
      "74:  abspath_to_file = strdup (abspath_to_archive);",
      "75:  abspath_to_file[strlen (abspath_to_file) - 1] = 'b';",
      "78:   R_FREE (user_agent);",
      "79:   R_FREE (abspath_to_archive);",
      "80:   R_FREE (archive_name_escaped);",
      "81:   R_FREE (symbol_store_path);",
      "82:   R_FREE (dbg_file);",
      "83:   R_FREE (guid);",
      "84:   R_FREE (archive_name);",
      "85:   R_FREE (abspath_to_file);",
      "86:   R_FREE (symbol_server);",
      "91:   res = 1;",
      "93:   curl_cmd = r_str_newf (\"curl -sfLA \\\"%s\\\" \\\"%s/%s/%s/%s\\\" --create-dirs -o \\\"%s\\\"\",",
      "94:                          user_agent,",
      "95:                          symbol_server,",
      "96:           dbg_file,",
      "97:           guid,",
      "98:                          archive_name_escaped,",
      "99:                          abspath_to_archive);",
      "101:   const char *cabextractor = \"expand\";",
      "102:   const char *format = \"%s %s %s\";",
      "108:   extractor_cmd = r_str_newf (format, cabextractor,",
      "109:    abspath_to_archive, abspath_to_file);",
      "111:   const char *cabextractor = \"cabextract\";",
      "112:   const char *format = \"%s -d \\\"%s\\\" \\\"%s\\\"\";",
      "117:   extractor_cmd = r_str_newf (format, cabextractor, abspath_to_dir, abspath_to_archive);",
      "118:   R_FREE (abspath_to_dir);",
      "120:   eprintf (\"Attempting to download compressed pdb in %s\\n\", abspath_to_archive);",
      "121:   if ((cmd_ret = r_sys_cmd (curl_cmd) != 0)) {",
      "122:    eprintf(\"curl exited with error %d\\n\", cmd_ret);",
      "123:    res = 0;",
      "124:   }",
      "125:   eprintf (\"Attempting to decompress pdb\\n\");",
      "126:   if (opt->extract > 0) {",
      "133:   R_FREE (curl_cmd);",
      "137:   res = 1;",
      "139:   archive_name_escaped[strlen (archive_name_escaped) - 1] = 'b';",
      "141:   curl_cmd = r_str_newf (\"curl -sfLA \\\"%s\\\" \\\"%s/%s/%s/%s\\\" --create-dirs -o \\\"%s\\\"\",",
      "142:                          opt->user_agent,",
      "143:                          opt->symbol_server,",
      "144:                          opt->dbg_file,",
      "145:                          opt->guid,",
      "146:                          archive_name_escaped,",
      "147:                          abspath_to_file);",
      "149:   if ((cmd_ret = r_sys_cmd (curl_cmd) != 0)) {",
      "150:    eprintf(\"curl exited with error %d\\n\", cmd_ret);",
      "151:    res = 0;",
      "152:   }",
      "153:   R_FREE (curl_cmd);",
      "154:  }",
      "155:  R_FREE (abspath_to_archive);",
      "156:  R_FREE (abspath_to_file);",
      "157:  R_FREE (archive_name);",
      "158:  R_FREE (extractor_cmd);",
      "159:  R_FREE (symbol_store_path);",
      "160:  R_FREE (dbg_file);",
      "161:  R_FREE (guid);",
      "162:  R_FREE (archive_name_escaped);",
      "163:  R_FREE (user_agent);",
      "164:  R_FREE (symbol_server);",
      "",
      "[Added Lines]",
      "21: static bool download_and_write(SPDBDownloaderOpt *opt, const char *file) {",
      "22:  char *dir = r_str_newf (\"%s%s%s%s%s\",",
      "23:   opt->symbol_store_path, R_SYS_DIR,",
      "24:   opt->dbg_file, R_SYS_DIR,",
      "25:   opt->guid);",
      "26:  if (!r_sys_mkdirp (dir)) {",
      "27:   free (dir);",
      "30:  char *url = r_str_newf (\"%s/%s/%s/%s\", opt->symbol_server, opt->dbg_file, opt->guid, file);",
      "31:  int len;",
      "32:  char *file_buf = r_socket_http_get (url, NULL, &len);",
      "33:  free (url);",
      "34:  if (!len || R_STR_ISEMPTY (file_buf)) {",
      "35:   free (dir);",
      "36:   free (file_buf);",
      "37:   return false;",
      "38:  }",
      "39:  char *path = r_str_newf (\"%s%s%s\", dir, R_SYS_DIR, opt->dbg_file);",
      "40:  FILE *f = fopen (path, \"wb\");",
      "41:  if (f) {",
      "42:   fwrite (file_buf, sizeof (char), (size_t)len, f);",
      "43:   fclose (f);",
      "44:  }",
      "45:  free (dir);",
      "46:  free (path);",
      "47:  free (file_buf);",
      "61:  char *abspath_to_file = r_str_newf (\"%s%s%s%s%s%s%s\",",
      "62:   opt->symbol_store_path, R_SYS_DIR,",
      "63:   opt->dbg_file, R_SYS_DIR,",
      "64:   opt->guid, R_SYS_DIR,",
      "65:   opt->dbg_file);",
      "69:   free (abspath_to_file);",
      "74:   char *extractor_cmd = NULL;",
      "75:   char *archive_name = strdup (opt->dbg_file);",
      "76:   archive_name[strlen (archive_name) - 1] = '_';",
      "77:   char *abspath_to_archive = r_str_newf (\"%s%s%s%s%s%s%s\",",
      "78:    opt->symbol_store_path, R_SYS_DIR,",
      "79:    opt->dbg_file, R_SYS_DIR,",
      "80:    opt->guid, R_SYS_DIR,",
      "81:    archive_name);",
      "83:   eprintf (\"Attempting to download compressed pdb in %s\\n\", abspath_to_archive);",
      "84:   char *abs_arch_esc = r_str_escape_sh (abspath_to_archive);",
      "86:   char *abs_file_esc = r_str_escape_sh (abspath_to_file);",
      "90:   extractor_cmd = r_str_newf (\"expand \\\"%s\\\" \\\"%s\\\"\", abs_arch_esc, abs_file_esc);",
      "91:   free (abs_file_esc);",
      "94:   char *abs_dir_esc = r_str_escape_sh (abspath_to_dir);",
      "98:   extractor_cmd = r_str_newf (\"cabextract -d \\\"%s\\\" \\\"%s\\\"\", abs_arch_esc, abs_dir_esc);",
      "99:   free (abs_dir_esc);",
      "100:   free (abspath_to_dir);",
      "102:   free (abs_arch_esc);",
      "103:   res = download_and_write (opt, archive_name);",
      "105:   if (opt->extract > 0 && res) {",
      "106:    eprintf (\"Attempting to decompress pdb\\n\");",
      "113:   free (archive_name);",
      "114:   free (abspath_to_archive);",
      "119:   res = download_and_write (opt, opt->dbg_file);",
      "120:  }",
      "121:  free (abspath_to_file);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "191:  pd->download = 0;",
      "192: }",
      "194: int r_bin_pdb_download(RCore *core, int isradjson, int *actions_done, SPDBOptions *options) {",
      "195:  int ret;",
      "196:  SPDBDownloaderOpt opt;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "151: static bool is_valid_guid(const char *guid) {",
      "152:  if (!guid) {",
      "153:   return false;",
      "154:  }",
      "155:  size_t i;",
      "156:  for (i = 0; guid[i]; i++) {",
      "157:   if (!isxdigit (guid[i])) {",
      "158:    return false;",
      "159:   }",
      "160:  }",
      "161:  return i >= 33; // len of GUID and age",
      "162: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "202:   return 1;",
      "203:  }",
      "205:  if (!options || !options->symbol_server || !options->user_agent) {",
      "206:   eprintf (\"Can't retrieve pdb configurations\\n\");",
      "207:   return 1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "175:  if (!is_valid_guid (info->guid)) {",
      "176:   eprintf (\"Invalid GUID for file\\n\");",
      "177:   return 1;",
      "178:  }",
      "",
      "---------------"
    ],
    "libr/config.mk.tail||libr/config.mk.tail": [
      "File: libr/config.mk.tail -> libr/config.mk.tail",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: BN_LIBS=-lgmp",
      "53: endif",
      "55: #both of these need ssl includes",
      "56: ifneq (,$(filter r_socket r_util,$(BINDEPS)))",
      "57: ifeq (${HAVE_LIB_SSL},1)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "55: # open-ssl",
      "56: ifeq (${HAVE_LIB_SSL},1)",
      "57: BN_LIBS=${SSL_LDFLAGS}",
      "58: endif",
      "",
      "---------------"
    ],
    "libr/include/r_socket.h||libr/include/r_socket.h": [
      "File: libr/include/r_socket.h -> libr/include/r_socket.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #ifndef R2_SOCKET_H",
      "2: #define R2_SOCKET_H",
      "9: #include \"r_types.h\"",
      "10: #include \"r_bind.h\"",
      "11: #include \"r_list.h\"",
      "",
      "[Removed Lines]",
      "5: #if defined(__WINDOWS__)",
      "6: #include <ws2tcpip.h>",
      "7: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "libr/include/r_types.h||libr/include/r_types.h": [
      "File: libr/include/r_types.h -> libr/include/r_types.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "152:   #ifdef _MSC_VER",
      "154:   #include <winsock2.h>",
      "155:   #ifndef WIN32_LEAN_AND_MEAN",
      "156:   #define WIN32_LEAN_AND_MEAN",
      "157:   #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "155:   #include <ws2tcpip.h>",
      "",
      "---------------"
    ],
    "libr/include/r_util/r_str.h||libr/include/r_util/r_str.h": [
      "File: libr/include/r_util/r_str.h -> libr/include/r_util/r_str.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "148: R_API char *r_str_path_escape(const char *path);",
      "149: R_API int r_str_unescape(char *buf);",
      "150: R_API char *r_str_escape(const char *buf);",
      "151: R_API char *r_str_escape_dot(const char *buf);",
      "152: R_API char *r_str_escape_latin1(const char *buf, bool show_asciidot, bool esc_bslash, bool colors);",
      "153: R_API char *r_str_escape_utf8(const char *buf, bool show_asciidot, bool esc_bslash);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "151: R_API char *r_str_escape_sh(const char *buf);",
      "",
      "---------------"
    ],
    "libr/socket/socket.c||libr/socket/socket.c": [
      "File: libr/socket/socket.c -> libr/socket/socket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "260: R_API bool r_socket_connect(RSocket *s, const char *host, const char *port, int proto, unsigned int timeout) {",
      "261:  r_return_val_if_fail (s, false);",
      "262: #if __WINDOWS__",
      "263:  struct sockaddr_in sa;",
      "265:  WSADATA wsadata;",
      "270:  if (WSAStartup (MAKEWORD (1, 1), &wsadata) == SOCKET_ERROR) {",
      "271:   eprintf (\"Error creating socket.\");",
      "272:   return false;",
      "273:  }",
      "292: #endif",
      "326:  int ret;",
      "328:  struct addrinfo *res, *rp;",
      "329:  if (!proto) {",
      "330:   proto = R_SOCKET_PROTO_TCP;",
      "331:  }",
      "332:  r_sys_signal (SIGPIPE, SIG_IGN);",
      "333:  if (proto == R_SOCKET_PROTO_UNIX) {",
      "334:   if (!__connect_unix (s, host)) {",
      "335:    return false;",
      "336:   }",
      "337:  } else {",
      "339:   hints.ai_protocol = proto;",
      "",
      "[Removed Lines]",
      "264:  struct hostent *he;",
      "266:  TIMEVAL Timeout;",
      "267:  Timeout.tv_sec = timeout;",
      "268:  Timeout.tv_usec = 0;",
      "274:  s->fd = socket (AF_INET, SOCK_STREAM, 0);",
      "275:  if (s->fd == R_INVALID_SOCKET) {",
      "276:   return false;",
      "277:  }",
      "279:  unsigned long iMode = 1;",
      "280:  int iResult = ioctlsocket (s->fd, FIONBIO, &iMode);",
      "281:  if (iResult != NO_ERROR) {",
      "282:   eprintf (\"ioctlsocket error: %d\\n\", iResult);",
      "283:  }",
      "284:  memset (&sa, 0, sizeof (sa));",
      "285:  sa.sin_family = AF_INET;",
      "286:  he = (struct hostent *)gethostbyname (host);",
      "287:  if (he == (struct hostent*)0) {",
      "288: #ifdef _MSC_VER",
      "289:   closesocket (s->fd);",
      "290: #else",
      "291:   close (s->fd);",
      "293:   return false;",
      "294:  }",
      "295:  sa.sin_addr = *((struct in_addr *)he->h_addr);",
      "296:  s->port = r_socket_port_by_name (port);",
      "297:  s->proto = proto;",
      "298:  sa.sin_port = htons (s->port);",
      "299:  if (!connect (s->fd, (const struct sockaddr*)&sa, sizeof (struct sockaddr))) {",
      "300: #ifdef _MSC_VER",
      "301:   closesocket (s->fd);",
      "302: #else",
      "303:   close (s->fd);",
      "304: #endif",
      "305:   return false;",
      "306:  }",
      "307:  iMode = 0;",
      "308:  iResult = ioctlsocket (s->fd, FIONBIO, &iMode);",
      "309:  if (iResult != NO_ERROR) {",
      "310:   eprintf (\"ioctlsocket error: %d\\n\", iResult);",
      "311:  }",
      "312:  if (timeout > 0) {",
      "313:   r_socket_block_time (s, 1, timeout, 0);",
      "314:  }",
      "315:  fd_set Write, Err;",
      "316:  FD_ZERO (&Write);",
      "317:  FD_ZERO (&Err);",
      "318:  FD_SET (s->fd, &Write);",
      "319:  FD_SET (s->fd, &Err);",
      "320:  select (0, NULL, &Write, &Err, &Timeout);",
      "321:  if (FD_ISSET (s->fd, &Write)) {",
      "322:   return true;",
      "323:  }",
      "324:  return false;",
      "325: #elif __UNIX__",
      "327:  struct addrinfo hints = {0};",
      "",
      "[Added Lines]",
      "263: #define gai_strerror gai_strerrorA",
      "273:  struct addrinfo hints = { 0 };",
      "278: #if __UNIX__",
      "280: #endif",
      "282: #if __UNIX__",
      "286: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "367:     return true;",
      "368:    }",
      "369:    if (errno == EINPROGRESS) {",
      "373:     fd_set wfds;",
      "377:     if ((ret = select (s->fd + 1, NULL, &wfds, NULL, &tv)) != -1) {",
      "378:      if (r_socket_is_connected (s)) {",
      "379:       freeaddrinfo (res);",
      "381:      }",
      "382:     } else {",
      "383:      perror (\"connect\");",
      "",
      "[Removed Lines]",
      "370:     struct timeval tv;",
      "371:     tv.tv_sec = timeout;",
      "372:     tv.tv_usec = 0;",
      "374:     FD_ZERO(&wfds);",
      "375:     FD_SET(s->fd, &wfds);",
      "380:       return true;",
      "",
      "[Added Lines]",
      "320:     struct timeval tv = {timeout, 0};",
      "322:     FD_ZERO (&wfds);",
      "323:     FD_SET (s->fd, &wfds);",
      "328:       goto success;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "391:    return false;",
      "392:   }",
      "393:  }",
      "395: #if HAVE_LIB_SSL",
      "396:  if (s->is_ssl) {",
      "397:   s->ctx = SSL_CTX_new (SSLv23_client_method ());",
      "398:   if (!s->ctx) {",
      "400:    return false;",
      "401:   }",
      "402:   s->sfd = SSL_new (s->ctx);",
      "403:   SSL_set_fd (s->sfd, s->fd);",
      "406:    return false;",
      "407:   }",
      "408:  }",
      "",
      "[Removed Lines]",
      "394: #endif",
      "399:    r_socket_free (s);",
      "404:   if (SSL_connect (s->sfd) != 1) {",
      "405:    r_socket_free (s);",
      "",
      "[Added Lines]",
      "342: success:",
      "347:    r_socket_close (s);",
      "352:   int ret = SSL_connect (s->sfd);",
      "353:   if (ret != 1) {",
      "354:    int error = SSL_get_error (s->sfd, ret);",
      "355:    int tries = 10;",
      "356:    while (tries && ret && (error == SSL_ERROR_WANT_READ || error == SSL_ERROR_WANT_WRITE)) {",
      "357:     struct timeval tv = {1, 0};",
      "358:     fd_set rfds, wfds;",
      "359:     FD_ZERO (&rfds);",
      "360:     FD_ZERO (&wfds);",
      "361:     if (error == SSL_ERROR_WANT_READ) {",
      "362:      FD_SET (s->fd, &rfds);",
      "363:     } else {",
      "364:      FD_SET (s->fd, &wfds);",
      "365:     }",
      "366:     if ((ret = select (s->fd + 1, &rfds, &wfds, NULL, &tv)) < 1) {",
      "367:      r_socket_close (s);",
      "368:      return false;",
      "369:     }",
      "370:     ret = SSL_connect (s->sfd);",
      "371:     if (ret == 1) {",
      "372:      return true;",
      "373:     }",
      "374:     error = SSL_get_error (s->sfd, ret);",
      "375:     tries--;",
      "376:    }",
      "377:    r_socket_close (s);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "622:  FD_ZERO (&except_fds);",
      "623:  FD_SET (s->fd, &except_fds);",
      "629:  int r = select (s->fd + 1, &read_fds, NULL, &except_fds, &t);",
      "630:  if(r < 0) {",
      "",
      "[Removed Lines]",
      "625:  struct timeval t;",
      "626:  t.tv_sec = timeout;",
      "627:  t.tv_usec = 0;",
      "",
      "[Added Lines]",
      "597:  struct timeval t = {timeout, 0};",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "659:  ioctlsocket (s->fd, FIONBIO, (u_long FAR*)&block);",
      "660: #endif",
      "661:  if (sec > 0 || usec > 0) {",
      "665:   if (setsockopt (s->fd, SOL_SOCKET, SO_RCVTIMEO, (char *)&tv, sizeof (tv)) < 0) {",
      "666:    return false;",
      "667:   }",
      "",
      "[Removed Lines]",
      "662:   struct timeval tv = {0};",
      "663:   tv.tv_sec = sec;",
      "664:   tv.tv_usec = usec;",
      "",
      "[Added Lines]",
      "632:   struct timeval tv = {sec, usec};",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "678:  return true;",
      "679: }",
      "684: R_API int r_socket_ready(RSocket *s, int secs, int usecs) {",
      "694:  fd_set rfds;",
      "696:  if (s->fd == R_INVALID_SOCKET) {",
      "697:   return -1;",
      "698:  }",
      "699:  FD_ZERO (&rfds);",
      "700:  FD_SET (s->fd, &rfds);",
      "703:  return select (s->fd + 1, &rfds, NULL, NULL, &tv);",
      "707: }",
      "709: R_API char *r_socket_to_string(RSocket *s) {",
      "",
      "[Removed Lines]",
      "685: #if __UNIX__",
      "687:  int msecs = (usecs / 1000);",
      "688:  struct pollfd fds[1];",
      "689:  fds[0].fd = s->fd;",
      "690:  fds[0].events = POLLIN | POLLPRI;",
      "691:  fds[0].revents = POLLNVAL | POLLHUP | POLLERR;",
      "692:  return poll ((struct pollfd *)&fds, 1, msecs);",
      "693: #elif __WINDOWS__",
      "695:  struct timeval tv;",
      "701:  tv.tv_sec = secs;",
      "702:  tv.tv_usec = usecs;",
      "704: #else",
      "706: #endif",
      "",
      "[Added Lines]",
      "653:  struct timeval tv = {secs, usecs};",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "794:   return SSL_read (s->sfd, buf, len);",
      "795:  }",
      "796: #endif",
      "808:  int r = recv (s->fd, buf, len, 0);",
      "809:  D { eprintf (\"READ \"); int i; for (i = 0; i<len; i++) { eprintf (\"%02x \", buf[i]); } eprintf (\"\\n\"); }",
      "810:  return r;",
      "812: }",
      "814: R_API int r_socket_read_block(RSocket *s, ut8 *buf, int len) {",
      "",
      "[Removed Lines]",
      "797: #if __WINDOWS__",
      "798: rep:",
      "799:  {",
      "800:  int ret = recv (s->fd, (void *)buf, len, 0);",
      "801:  if (ret == -1) {",
      "802:   goto rep;",
      "803:  }",
      "804:  return ret;",
      "805:  }",
      "806: #else",
      "811: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "816:  for (ret = 0; ret < len; ) {",
      "817:   int r = r_socket_read (s, buf + ret, len - ret);",
      "818:   if (r == -1) {",
      "819:    return -1;",
      "820:   }",
      "821:   if (r < 1) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "761: #if HAVE_LIB_SSL",
      "762:    if (SSL_get_error (s->sfd, r) == SSL_ERROR_WANT_READ) {",
      "763:     if (r_socket_ready (s, 1, 0) == 1) {",
      "764:      continue;",
      "765:     }",
      "766:    }",
      "767: #endif",
      "",
      "---------------"
    ],
    "libr/socket/socket_http.c||libr/socket/socket_http.c": [
      "File: libr/socket/socket_http.c -> libr/socket/socket_http.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: #include <r_socket.h>",
      "4: #include <r_util.h>",
      "11:   return 0;",
      "12:  }",
      "19:    break;",
      "20:   }",
      "21:  }",
      "22:  return i;",
      "23: }",
      "26:  r_return_val_if_fail (s, NULL);",
      "27:  const char *p;",
      "31:   return NULL;",
      "32:  }",
      "33:  char *res = NULL;",
      "35:  if ((dn = (char*)r_str_casestr (buf, \"\\n\\n\"))) {",
      "36:   delta += 2;",
      "37:  } else if ((dn = (char*)r_str_casestr (buf, \"\\r\\n\\r\\n\"))) {",
      "38:   delta += 4;",
      "39:  } else {",
      "41:  }",
      "43:  olen -= delta;",
      "46:  p = r_str_casestr (buf, \"Content-Length: \");",
      "47:  if (p) {",
      "",
      "[Removed Lines]",
      "6: static int __socket_slurp (RSocket *s, ut8 *buf, int bufsz) {",
      "7:  int i;",
      "8:  int chsz = 1;",
      "10:  if (r_socket_read_block (s, (ut8 *) buf, 1) != 1) {",
      "13:  for (i = 1; i < bufsz; i += chsz) {",
      "14:   buf[i] =0;",
      "15:   r_socket_block_time (s, 1, 0, 1000);",
      "16:   int olen = r_socket_read_block (s, (ut8 *) buf + i , chsz);",
      "17:   if (olen != chsz) {",
      "18:    buf[i] = 0;",
      "25: static char *r_socket_http_answer (RSocket *s, int *code, int *rlen) {",
      "28:  int ret, len = 0, bufsz = 32768, delta = 0;",
      "29:  char *dn, *buf = calloc (1, bufsz + 32); // XXX: use r_buffer here",
      "30:  if (!buf) {",
      "34:  int olen = __socket_slurp (s, (ut8*)buf, bufsz);",
      "40:   goto fail;",
      "",
      "[Added Lines]",
      "6: #if __WINDOWS__",
      "7: #include <WinInet.h>",
      "8: #endif",
      "10: #define SOCKET_HTTP_MAX_HEADER_LENGTH 0x2000",
      "11: #define SOCKET_HTTP_MAX_REDIRECTS 5",
      "13: static size_t socket_slurp(RSocket *s, RBuffer *buf) {",
      "14:  size_t i;",
      "15:  if (r_socket_ready (s, 1, 0) != 1) {",
      "18:  r_socket_block_time (s, 1, 0, 1000);",
      "19:  for (i = 0; i < SOCKET_HTTP_MAX_HEADER_LENGTH; i += 1) {",
      "20:   ut8 c;",
      "21:   int olen = r_socket_read_block (s, &c, 1);",
      "22:   if (olen != 1) {",
      "23:    r_buf_append_bytes (buf, (ut8 *)\"\", 1);",
      "26:   r_buf_append_bytes (buf, &c, 1);",
      "31: static char *socket_http_get_recursive(const char *url, int *code, int *rlen, ut32 redirections);",
      "33: static char *socket_http_answer(RSocket *s, int *code, int *rlen, ut32 redirections) {",
      "36:  int ret, len = 0, delta = 0;",
      "37:  char *dn;",
      "38:  RBuffer *b = r_buf_new ();",
      "39:  if (!b) {",
      "43:  size_t olen = socket_slurp (s, b);",
      "44:  char *buf = malloc (olen + 1);",
      "45:  if (!buf) {",
      "46:   goto exit;",
      "47:  }",
      "48:  r_buf_read_at (b, 0, (ut8 *)buf, olen);",
      "49:  buf[olen] = 0;",
      "55:   goto exit;",
      "62:  p = r_str_casestr (buf, \"Location:\");",
      "63:  if (p) {",
      "64:   if (!redirections) {",
      "65:    eprintf (\"Too many redirects\\n\");",
      "66:    goto exit;",
      "67:   }",
      "68:   p += strlen (\"Location:\");",
      "69:   char *end_url = strchr (p, '\\n');",
      "70:   if (end_url) {",
      "71:    int url_len = end_url - p;",
      "72:    char *url = r_str_ndup (p, url_len);",
      "73:    r_str_trim (url);",
      "74:    res = socket_http_get_recursive (url, code, rlen, --redirections);",
      "75:    free (url);",
      "76:    len = *rlen;",
      "77:   }",
      "78:   goto exit;",
      "79:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:  if (len > 0) {",
      "53:   if (len > olen) {",
      "54:    res = malloc (len + 2);",
      "55:    memcpy (res, dn + delta, olen);",
      "56:    do {",
      "57:     ret = r_socket_read_block (s, (ut8*) res + olen, len - olen);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "91:    if (!res) {",
      "92:     goto exit;",
      "93:    }",
      "94:    olen -= dn - buf;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "71:  } else {",
      "72:   res = NULL;",
      "73:  }",
      "75:  free (buf);",
      "77:  r_socket_close (s);",
      "78:  if (rlen) {",
      "",
      "[Removed Lines]",
      "74: fail:",
      "",
      "[Added Lines]",
      "114: exit:",
      "116:  r_buf_free (b);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "81:  return res;",
      "82: }",
      "85:  char *curl_env = r_sys_getenv (\"R2_CURL\");",
      "90:   if (res) {",
      "91:    if (code) {",
      "93:    }",
      "94:    if (rlen) {",
      "96:    }",
      "97:   }",
      "99:   return res;",
      "100:  }",
      "101:  free (curl_env);",
      "102:  RSocket *s;",
      "103:  int ssl = r_str_startswith (url, \"https://\");",
      "104:  char *response, *host, *path, *port = \"80\";",
      "105:  char *uri = strdup (url);",
      "106:  if (!uri) {",
      "107:   return NULL;",
      "108:  }",
      "116:  host = strstr (uri, \"://\");",
      "117:  if (!host) {",
      "118:   free (uri);",
      "",
      "[Removed Lines]",
      "84: R_API char *r_socket_http_get(const char *url, int *code, int *rlen) {",
      "86:  if (curl_env && *curl_env) {",
      "87:   char *encoded_url = r_str_escape (url);",
      "88:   char *res = r_sys_cmd_strf (\"curl '%s'\", encoded_url);",
      "89:   free (encoded_url);",
      "98:   free (curl_env);",
      "110:  if (code) {",
      "112:  }",
      "113:  if (rlen) {",
      "115:  }",
      "",
      "[Added Lines]",
      "124: #if __WINDOWS__",
      "125: static char *http_get_w32(const char *url, int *code, int *rlen) {",
      "126:  HINTERNET hInternet = InternetOpenA (\"radare2 \"R2_VERSION, INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);",
      "127:  if (!hInternet) {",
      "128:   r_sys_perror (\"InternetOpenA\");",
      "129:   return NULL;",
      "130:  }",
      "131:  HINTERNET hOpenUrl = InternetOpenUrlA (hInternet, url, NULL, 0, 0, 0);",
      "132:  if (!hOpenUrl) {",
      "133:   r_sys_perror (\"InternetOpenUrlA\");",
      "134:   InternetCloseHandle (hInternet);",
      "135:   return NULL;",
      "136:  }",
      "138:  char *ret = NULL;",
      "139:  size_t read_sz = 0x100000;",
      "140:  DWORD r = 0, w = 0;",
      "141:  bool res = true;",
      "142:  do {",
      "143:   w += r;",
      "144:   if (!res && GetLastError () == ERROR_INSUFFICIENT_BUFFER) {",
      "145:    read_sz *= 2;",
      "146:   }",
      "147:   char *tmp = realloc (ret, read_sz + w);",
      "148:   if (!tmp) {",
      "149:    R_FREE (ret);",
      "150:    goto exit;",
      "151:   }",
      "152:   ret = tmp;",
      "153:  } while (!(res = InternetReadFile (hOpenUrl, ret + w, read_sz, &r)) || r);",
      "155:  if (w) {",
      "156:   char *tmp = realloc (ret, (size_t)w + 1);",
      "157:   if (tmp) {",
      "158:    ret = tmp;",
      "159:    ret[w] = 0;",
      "160:   } else {",
      "161:    R_FREE (ret);",
      "162:   }",
      "163:  } else {",
      "164:   R_FREE (ret);",
      "165:  }",
      "167: exit:",
      "168:  if (rlen) {",
      "170:  }",
      "171:  if (code && w) {",
      "173:  }",
      "174:  InternetCloseHandle (hInternet);",
      "175:  InternetCloseHandle (hOpenUrl);",
      "176:  return ret;",
      "177: }",
      "178: #endif",
      "180: static char *socket_http_get_recursive(const char *url, int *code, int *rlen, ut32 redirections) {",
      "181:  if (code) {",
      "183:  }",
      "184:  if (rlen) {",
      "186:  }",
      "188:  if (!R_STR_ISEMPTY (curl_env) && atoi (curl_env)) {",
      "189:   int len;",
      "190:   char *escaped_url = r_str_escape_sh (url);",
      "191:   char *command = r_str_newf (\"curl -sfL -o - \\\"%s\\\"\", escaped_url);",
      "192:   char *res = r_sys_cmd_str (command, NULL, &len);",
      "193:   free (escaped_url);",
      "194:   free (command);",
      "195:   free (curl_env);",
      "196:   if (!res) {",
      "197:    return NULL;",
      "198:   }",
      "210: #if __WINDOWS__",
      "211:  return http_get_w32 (url, code, rlen);",
      "212: #else",
      "215: #if !HAVE_LIB_SSL",
      "216:  if (ssl) {",
      "217:   eprintf (\"Tried to get '%s', but SSL support is disabled, set R2_CURL=1 to use curl\\n\", url);",
      "218:   return NULL;",
      "219:  }",
      "220: #endif",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "147:     \"Accept: */*\\r\\n\"",
      "148:     \"Host: %s:%s\\r\\n\"",
      "149:     \"\\r\\n\", path, host, port);",
      "151:  } else {",
      "152:   eprintf (\"Cannot connect to %s:%s\\n\", host, port);",
      "153:   response = NULL;",
      "",
      "[Removed Lines]",
      "150:   response = r_socket_http_answer (s, code, rlen);",
      "",
      "[Added Lines]",
      "260:   response = socket_http_answer (s, code, rlen, redirections);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "155:  free (uri);",
      "156:  r_socket_free (s);",
      "157:  return response;",
      "158: }",
      "161:  RSocket *s;",
      "162:  bool ssl = r_str_startswith (url, \"https://\");",
      "163:  char *uri = strdup (url);",
      "",
      "[Removed Lines]",
      "160: R_API char *r_socket_http_post (const char *url, const char *data, int *code, int *rlen) {",
      "",
      "[Added Lines]",
      "268: #endif",
      "269: }",
      "271: R_API char *r_socket_http_get(const char *url, int *code, int *rlen) {",
      "272:  return socket_http_get_recursive (url, code, rlen, SOCKET_HTTP_MAX_REDIRECTS);",
      "275: R_API char *r_socket_http_post(const char *url, const char *data, int *code, int *rlen) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "206:    \"\\r\\n\", path, host, (int)strlen (data));",
      "207:  free (uri);",
      "208:  r_socket_write (s, (void *)data, strlen (data));",
      "210: }",
      "212: #if TEST",
      "",
      "[Removed Lines]",
      "209:  return r_socket_http_answer (s, code, rlen);",
      "",
      "[Added Lines]",
      "324:  return socket_http_answer (s, code, rlen, 0);",
      "",
      "---------------"
    ],
    "libr/util/str.c||libr/util/str.c": [
      "File: libr/util/str.c -> libr/util/str.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1351:  return r_str_escape_ (buf, false, true, true, false, true);",
      "1352: }",
      "1354: R_API char *r_str_escape_dot(const char *buf) {",
      "1355:  return r_str_escape_ (buf, true, true, true, false, true);",
      "1356: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1355: R_API char *r_str_escape_sh(const char *buf) {",
      "1356:  r_return_val_if_fail (buf, NULL);",
      "1357:  char *new_buf = malloc (1 + strlen (buf) * 2);",
      "1358:  if (!new_buf) {",
      "1359:   return NULL;",
      "1360:  }",
      "1361:  const char *p = buf;",
      "1362:  char *q = new_buf;",
      "1363:  while (*p) {",
      "1364:   switch (*p) {",
      "1365: #if __UNIX__",
      "1366:   case '$':",
      "1367:   case '`':",
      "1368: #endif",
      "1369:   case '\\\\':",
      "1370:   case '\"':",
      "1373:   default:",
      "1375:    break;",
      "1376:   }",
      "1377:  }",
      "1379:  return new_buf;",
      "1380: }",
      "",
      "---------------"
    ],
    "libr/util/sys.c||libr/util/sys.c": [
      "File: libr/util/sys.c -> libr/util/sys.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "660:   }",
      "662:   r_sys_signal (SIGPIPE, SIG_IGN);",
      "663:   for (;;) {",
      "664:    fd_set rfds, wfds;",
      "665:    int nfd;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "663:   size_t err_len = 0, out_len = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "680:     break;",
      "681:    }",
      "682:    if (output && FD_ISSET (sh_out[0], &rfds)) {",
      "684:      break;",
      "685:     }",
      "689:     }",
      "691:    } else if (FD_ISSET (sh_err[0], &rfds) && sterr) {",
      "693:      break;",
      "694:     }",
      "697:    } else if (FD_ISSET (sh_in[1], &wfds) && inputptr && *inputptr) {",
      "698:     int inputptr_len = strlen (inputptr);",
      "699:     bytes = write (sh_in[1], inputptr, inputptr_len);",
      "",
      "[Removed Lines]",
      "683:     if (!(bytes = read (sh_out[0], buffer, sizeof (buffer)-1))) {",
      "686:     buffer[sizeof (buffer) - 1] = '\\0';",
      "687:     if (len) {",
      "690:     outputptr = r_str_append (outputptr, buffer);",
      "692:     if (!read (sh_err[0], buffer, sizeof (buffer)-1)) {",
      "695:     buffer[sizeof (buffer) - 1] = '\\0';",
      "",
      "[Added Lines]",
      "684:     if ((bytes = read (sh_out[0], buffer, sizeof (buffer))) < 1) {",
      "687:     char *tmp = realloc (outputptr, out_len + bytes + 1);",
      "688:     if (!tmp) {",
      "689:      R_FREE (outputptr);",
      "690:      break;",
      "692:     outputptr = tmp;",
      "693:     memcpy (outputptr + out_len, buffer, bytes);",
      "694:     out_len += bytes;",
      "696:     if ((bytes = read (sh_err[0], buffer, sizeof (buffer))) < 1) {",
      "697:      break;",
      "698:     }",
      "699:     char *tmp = realloc (*sterr, err_len + bytes + 1);",
      "700:     if (!tmp) {",
      "701:      R_FREE (*sterr);",
      "705:     memcpy (*sterr + err_len, buffer, bytes);",
      "706:     err_len += bytes;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "727:    ret = false;",
      "728:   }",
      "730:   if (output) {",
      "732:   } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "740:   if (len) {",
      "742:   }",
      "743:   if (*sterr) {",
      "744:    (*sterr)[err_len] = 0;",
      "745:   }",
      "746:   if (outputptr) {",
      "747:    outputptr[out_len] = 0;",
      "748:   }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "829:  {",
      "830:   char *p = strstr (ptr, \":\\\\\");",
      "831:   if (p) {",
      "833:   }",
      "834:  }",
      "835: #endif",
      "",
      "[Removed Lines]",
      "832:    ptr = p + 2;",
      "",
      "[Added Lines]",
      "851:    ptr = p + 3;",
      "",
      "---------------"
    ],
    "meson.build||meson.build": [
      "File: meson.build -> meson.build",
      "--- Hunk 1 ---",
      "[Context before]",
      "112: platform_deps = []",
      "113: platform_inc = ['.', 'libr/include']",
      "114: if host_machine.system() == 'windows'",
      "116: endif",
      "117: platform_inc = include_directories(platform_inc)",
      "",
      "[Removed Lines]",
      "115:   platform_deps = [cc.find_library('ws2_32'), cc.find_library('psapi')]",
      "",
      "[Added Lines]",
      "115:   platform_deps = [cc.find_library('ws2_32'), cc.find_library('wininet'), cc.find_library('psapi')]",
      "",
      "---------------"
    ],
    "shlr/sdb/src/disk.c||shlr/sdb/src/disk.c": [
      "File: shlr/sdb/src/disk.c -> shlr/sdb/src/disk.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "64: #if __SDB_WINDOWS__",
      "65:  char *p = strstr (ptr, \":\\\\\");",
      "66:  if (p) {",
      "68:  }",
      "69: #endif",
      "70:  while ((ptr = strchr (ptr, slash))) {",
      "",
      "[Removed Lines]",
      "67:   ptr = p + 2;",
      "",
      "[Added Lines]",
      "67:   ptr = p + 3;",
      "",
      "---------------"
    ],
    "test/unit/test_str.c||test/unit/test_str.c": [
      "File: test/unit/test_str.c -> test/unit/test_str.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:  mu_end;",
      "337: }",
      "339: bool test_r_str_unescape(void) {",
      "340:  char buf[] = \"Hello\\\\x31World\\\\n\";",
      "341:  r_str_unescape (buf);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339: bool test_r_str_escape_sh(void) {",
      "340:  char *escaped = r_str_escape_sh (\"Hello, \\\"World\\\"\");",
      "341:  mu_assert_streq (escaped, \"Hello, \\\\\\\"World\\\\\\\"\", \"escaped \\\"double quotes\\\"\");",
      "342:  free (escaped);",
      "343:  escaped = r_str_escape_sh (\"Hello, \\\\World\\\\\");",
      "344:  mu_assert_streq (escaped, \"Hello, \\\\\\\\World\\\\\\\\\", \"escaped backspace\");",
      "345:  free (escaped);",
      "346: #if __UNIX__",
      "347:  escaped = r_str_escape_sh (\"Hello, $(World)\");",
      "348:  mu_assert_streq (escaped, \"Hello, \\\\$(World)\", \"escaped $(command)\");",
      "349:  free (escaped);",
      "350:  escaped = r_str_escape_sh (\"Hello, `World`\");",
      "351:  mu_assert_streq (escaped, \"Hello, \\\\`World\\\\`\", \"escaped `command`\");",
      "352:  free (escaped);",
      "353: #endif",
      "354:  mu_end;",
      "355: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "477:  mu_run_test (test_r_str_utf8_charsize);",
      "478:  mu_run_test (test_r_str_utf8_charsize_prev);",
      "479:  mu_run_test (test_r_str_sanitize_sdb_key);",
      "480:  mu_run_test (test_r_str_unescape);",
      "481:  mu_run_test (test_r_str_constpool);",
      "482:  mu_run_test (test_r_str_format_msvc_argv);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "498:  mu_run_test (test_r_str_escape_sh);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e22b3e9bcc1809635e8a9dd6e87f9a21f0e45eed",
      "candidate_info": {
        "commit_hash": "e22b3e9bcc1809635e8a9dd6e87f9a21f0e45eed",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/e22b3e9bcc1809635e8a9dd6e87f9a21f0e45eed",
        "files": [
          "Makefile",
          "libr/util/Makefile",
          "libr/util/sdb.mk",
          "shlr/Makefile",
          "shlr/sdb/Makefile",
          "shlr/sdb/config.mk",
          "shlr/sdb/src/Makefile",
          "shlr/sdb/src/cdb.c",
          "shlr/sdb/src/disk.c",
          "shlr/sdb/src/ls.c",
          "shlr/sdb/src/sdbht.c",
          "shlr/sdb/src/util.c"
        ],
        "message": "Fix race condition and remove unnecessary SDB build targets ##build (#17476)\n\n* Simplify sdb build\n* This was wrong\n* updadte sdb\nCo-authored-by: pancake <pancake@nopcode.org>",
        "before_after_code_files": [
          "libr/util/sdb.mk||libr/util/sdb.mk",
          "shlr/sdb/config.mk||shlr/sdb/config.mk",
          "shlr/sdb/src/cdb.c||shlr/sdb/src/cdb.c",
          "shlr/sdb/src/disk.c||shlr/sdb/src/disk.c",
          "shlr/sdb/src/ls.c||shlr/sdb/src/ls.c",
          "shlr/sdb/src/sdbht.c||shlr/sdb/src/sdbht.c",
          "shlr/sdb/src/util.c||shlr/sdb/src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "shlr/sdb/src/disk.c||shlr/sdb/src/disk.c"
          ],
          "candidate": [
            "shlr/sdb/src/disk.c||shlr/sdb/src/disk.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/util/sdb.mk||libr/util/sdb.mk": [
          "File: libr/util/sdb.mk -> libr/util/sdb.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: SDBPATH=../../shlr/sdb/src/",
          "2: SDBLIB=${SDBPATH}/libsdb.a",
          "3: EXTRA_TARGETS+=${SDBLIB}",
          "5: SDB_OBJS=",
          "6: SDB_OBJS+=buffer.o",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: EXTRA_PRE+=$(SDBLIB)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: CFLAGS+=-I$(SDBPATH)",
          "",
          "[Removed Lines]",
          "37: sdb_version:",
          "38:  $(MAKE) -C \"$(SDBPATH)\" sdb_version.h",
          "39:  ${MAKE} -C ${SDBPATH}",
          "",
          "[Added Lines]",
          "38: $(SDBLIB):",
          "39:  $(MAKE) -C ../../shlr sdbs",
          "",
          "---------------"
        ],
        "shlr/sdb/config.mk||shlr/sdb/config.mk": [
          "File: shlr/sdb/config.mk -> shlr/sdb/config.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: VAPIDIR=${DATADIR}/vala/vapi/",
          "7: MANDIR=${DATADIR}/man/man1",
          "11: BUILD_MEMCACHE=0",
          "",
          "[Removed Lines]",
          "9: SDBVER=1.4.1",
          "",
          "[Added Lines]",
          "9: SDBVER=1.5.1-git",
          "",
          "---------------"
        ],
        "shlr/sdb/src/cdb.c||shlr/sdb/src/cdb.c": [
          "File: shlr/sdb/src/cdb.c -> shlr/sdb/src/cdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:    eprintf (\"Cannot mmap %d\\n\", (int)st.st_size);",
          "60:    return false;",
          "61:   }",
          "62: #else",
          "63:   char *x = calloc (1, st.st_size);",
          "64:   if (!x) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:   if (c->map) {",
          "63:    munmap (c->map, c->size);",
          "64:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:   if (read (fd, x, st.st_size) != st.st_size) {",
          "71:   }",
          "78:   free (c->map);",
          "79: #endif",
          "80:   c->map = x;",
          "",
          "[Removed Lines]",
          "72: #endif",
          "73: #if USE_MMAN",
          "74:   if (c->map) {",
          "75:    munmap (c->map, c->size);",
          "76:   }",
          "77: #else",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shlr/sdb/src/disk.c||shlr/sdb/src/disk.c": [
          "File: shlr/sdb/src/disk.c -> shlr/sdb/src/disk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #if __SDB_WINDOWS__",
          "65:  char *p = strstr (ptr, \":\\\\\");",
          "66:  if (p) {",
          "68:  }",
          "69: #endif",
          "70:  while ((ptr = strchr (ptr, slash))) {",
          "",
          "[Removed Lines]",
          "67:   ptr = p + 3;",
          "",
          "[Added Lines]",
          "67:   ptr = p + 2;",
          "",
          "---------------"
        ],
        "shlr/sdb/src/ls.c||shlr/sdb/src/ls.c": [
          "File: shlr/sdb/src/ls.c -> shlr/sdb/src/ls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  return list;",
          "12: }",
          "15:  SdbList *list = R_NEW0 (SdbList);",
          "16:  if (!list) {",
          "17:   return NULL;",
          "",
          "[Removed Lines]",
          "14: SDB_API SdbList *ls_new() {",
          "",
          "[Added Lines]",
          "14: SDB_API SdbList *ls_new(void) {",
          "",
          "---------------"
        ],
        "shlr/sdb/src/sdbht.c||shlr/sdb/src/sdbht.c": [
          "File: shlr/sdb/src/sdbht.c -> shlr/sdb/src/sdbht.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  free (kv->base.value);",
          "8: }",
          "11:  HtPP *ht = ht_pp_new ((HtPPDupValue)strdup, (HtPPKvFreeFunc)sdbkv_fini, (HtPPCalcSizeV)strlen);",
          "12:  if (ht) {",
          "13:   ht->opt.elem_size = sizeof (SdbKv);",
          "",
          "[Removed Lines]",
          "10: SDB_API HtPP* sdb_ht_new() {",
          "",
          "[Added Lines]",
          "10: SDB_API HtPP* sdb_ht_new(void) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:  return ht;",
          "16: }",
          "20:  if (!ht || !key || !value) {",
          "21:   return false;",
          "22:  }",
          "",
          "[Removed Lines]",
          "18: static bool sdb_ht_internal_insert(HtPP* ht, const char* key,",
          "19:         const char* value, bool update) {",
          "",
          "[Added Lines]",
          "18: static bool sdb_ht_internal_insert(HtPP* ht, const char* key, const char* value, bool update) {",
          "",
          "---------------"
        ],
        "shlr/sdb/src/util.c||shlr/sdb/src/util.c": [
          "File: shlr/sdb/src/util.c -> shlr/sdb/src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:  return p ? p + 1 : NULL;",
          "274: }",
          "277: #if USE_MONOTONIC_CLOCK",
          "278:  struct timespec ts;",
          "279:  if (!clock_gettime (CLOCK_MONOTONIC, &ts)) {",
          "",
          "[Removed Lines]",
          "276: SDB_API ut64 sdb_now () {",
          "",
          "[Added Lines]",
          "276: SDB_API ut64 sdb_now (void) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288:  return 0LL;",
          "289: }",
          "292:  ut64 x = 0LL;",
          "293: #if USE_MONOTONIC_CLOCK",
          "294:  struct timespec ts;",
          "",
          "[Removed Lines]",
          "291: SDB_API ut64 sdb_unow () {",
          "",
          "[Added Lines]",
          "291: SDB_API ut64 sdb_unow (void) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54617455de24988891c137337ea557eef8ece221",
      "candidate_info": {
        "commit_hash": "54617455de24988891c137337ea557eef8ece221",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/54617455de24988891c137337ea557eef8ece221",
        "files": [
          "libr/bin/p/bin_dyldcache.c",
          "libr/bin/p/bin_xnu_kernelcache.c",
          "libr/core/core.c",
          "libr/core/rtr.c",
          "libr/include/r_core.h",
          "libr/include/r_io.h",
          "libr/include/r_socket.h",
          "libr/io/Makefile",
          "libr/io/desc.c",
          "libr/io/fd.c",
          "libr/io/io_desc.c",
          "libr/io/io_fd.c",
          "libr/io/io_map.c",
          "libr/io/ioutils.c",
          "libr/io/map.c",
          "libr/io/meson.build",
          "libr/io/p/io_debug.c",
          "libr/io/p/io_r2k_linux.c",
          "libr/io/p/io_rap.c",
          "libr/socket/Makefile",
          "libr/socket/http.c",
          "libr/socket/http_server.c",
          "libr/socket/meson.build",
          "libr/socket/proc.c",
          "libr/socket/rap_server.c",
          "libr/socket/serial.c",
          "libr/socket/socket.c",
          "libr/socket/socket_http.c",
          "libr/socket/socket_http_server.c",
          "libr/socket/socket_proc.c",
          "libr/socket/socket_rap_client.c",
          "libr/socket/socket_rap_server.c",
          "libr/socket/socket_serial.c"
        ],
        "message": "Initial refactoring of the rap:// protocol (-75 LOC) ##socket (#16534)\n\n* It's implemented in IO, Socket and Core\n* Remove duplicated apis and defines, everything in in RSocket now\n* RIO now owns an RCoreBind instead of 3 fcn pointers + 1 void*\n* Use proper filenames in libr/socket following public api names\n* Use RSocket.block apis in the rap client + server apis",
        "before_after_code_files": [
          "libr/bin/p/bin_dyldcache.c||libr/bin/p/bin_dyldcache.c",
          "libr/bin/p/bin_xnu_kernelcache.c||libr/bin/p/bin_xnu_kernelcache.c",
          "libr/core/core.c||libr/core/core.c",
          "libr/core/rtr.c||libr/core/rtr.c",
          "libr/include/r_core.h||libr/include/r_core.h",
          "libr/include/r_io.h||libr/include/r_io.h",
          "libr/include/r_socket.h||libr/include/r_socket.h",
          "libr/io/ioutils.c||libr/io/ioutils.c",
          "libr/io/meson.build||libr/io/meson.build",
          "libr/io/p/io_debug.c||libr/io/p/io_debug.c",
          "libr/io/p/io_r2k_linux.c||libr/io/p/io_r2k_linux.c",
          "libr/io/p/io_rap.c||libr/io/p/io_rap.c",
          "libr/socket/meson.build||libr/socket/meson.build",
          "libr/socket/socket.c||libr/socket/socket.c",
          "libr/socket/http.c||libr/socket/socket_http.c",
          "libr/socket/socket_rap_client.c||libr/socket/socket_rap_client.c",
          "libr/socket/rap_server.c||libr/socket/socket_rap_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_dyldcache.c||libr/bin/p/bin_dyldcache.c": [
          "File: libr/bin/p/bin_dyldcache.c -> libr/bin/p/bin_dyldcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1092: }",
          "1094: static int dyldcache_io_read(RIO *io, RIODesc *fd, ut8 *buf, int count) {",
          "1100:  if (!core || !core->bin || !core->bin->binfiles) {",
          "1101:   return -1;",
          "",
          "[Removed Lines]",
          "1095:  if (!io) {",
          "1096:   return -1;",
          "1097:  }",
          "1098:  RCore *core = (RCore*) io->user;",
          "",
          "[Added Lines]",
          "1095:  r_return_val_if_fail (io, -1);",
          "1096:  RCore *core = (RCore*) io->corebind.core;",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_xnu_kernelcache.c||libr/bin/p/bin_xnu_kernelcache.c": [
          "File: libr/bin/p/bin_xnu_kernelcache.c -> libr/bin/p/bin_xnu_kernelcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1853: }",
          "1855: static void swizzle_io_read(RKernelCacheObj *obj, RIO *io) {",
          "1860:  RIOPlugin *plugin = io->desc->plugin;",
          "1861:  obj->original_io_read = plugin->read;",
          "1862:  plugin->read = &kernelcache_io_read;",
          "1863: }",
          "1865: static int kernelcache_io_read(RIO *io, RIODesc *fd, ut8 *buf, int count) {",
          "1871:  if (!core || !core->bin || !core->bin->binfiles) {",
          "1872:   return -1;",
          "",
          "[Removed Lines]",
          "1856:  if (!io || !io->desc || !io->desc->plugin) {",
          "1857:   return;",
          "1858:  }",
          "1866:  if (!io) {",
          "1867:   return -1;",
          "1868:  }",
          "1869:  RCore *core = (RCore*) io->user;",
          "",
          "[Added Lines]",
          "1856:  r_return_if_fail (io && io->desc && io->desc->plugin);",
          "1863:  r_return_val_if_fail (io, -1);",
          "1864:  RCore *core = (RCore*) io->corebind.core;",
          "",
          "---------------"
        ],
        "libr/core/core.c||libr/core/core.c": [
          "File: libr/core/core.c -> libr/core/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2695:  r_bin_set_user_ptr (core->bin, core);",
          "2696:  core->io = r_io_new ();",
          "2697:  core->io->ff = 1;",
          "2702:  core->search = r_search_new (R_SEARCH_KEYWORD);",
          "2703:  r_io_undo_enable (core->io, 1, 0); // TODO: configurable via eval",
          "2704:  core->fs = r_fs_new ();",
          "",
          "[Removed Lines]",
          "2698:  core->io->user = (void *)core;",
          "2699:  core->io->cb_core_cmd = core_cmd_callback;",
          "2700:  core->io->cb_core_cmdstr = core_cmdstr_callback;",
          "2701:  core->io->cb_core_post_write = core_post_write_callback;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2746:  r_io_bind (core->io, &(core->dbg->bp->iob));",
          "2747:  r_core_bind (core, &core->dbg->corebind);",
          "2748:  r_core_bind (core, &core->dbg->bp->corebind);",
          "2749:  core->dbg->anal = core->anal; // XXX: dupped instance.. can cause lost pointerz",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2745:  r_core_bind (core, &core->io->corebind);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3190:   }",
          "3191:   eprintf (\"rap: client connected\\n\");",
          "3192:   for (;!r_cons_is_breaked ();) {",
          "3194:     eprintf (\"rap: connection closed\\n\");",
          "3195:     if (r_config_get_i (core->config, \"rap.loop\")) {",
          "3196:      eprintf (\"rap: waiting for new connection\\n\");",
          "",
          "[Removed Lines]",
          "3193:    if (!r_socket_read (c, &cmd, 1)) {",
          "",
          "[Added Lines]",
          "3191:    if (!r_socket_read_block (c, &cmd, 1)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3200:     goto out_of_function;",
          "3201:    }",
          "3202:    switch ((ut8)cmd) {",
          "3204:     r_socket_read_block (c, &flg, 1); // flags",
          "3205:     eprintf (\"open (%d): \", cmd);",
          "3206:     r_socket_read_block (c, &cmd, 1); // len",
          "3207:     pipefd = -1;",
          "3208:     ptr = malloc (cmd + 1);",
          "3210:     if (!ptr) {",
          "3211:      eprintf (\"Cannot malloc in rmt-open len = %d\\n\", cmd);",
          "3212:     } else {",
          "",
          "[Removed Lines]",
          "3203:    case RMT_OPEN:",
          "",
          "[Added Lines]",
          "3201:    case RAP_PACKET_OPEN:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3240:       goto out_of_function; //XXX: Close connection and goto accept",
          "3241:      }",
          "3242:     }",
          "3244:     r_write_be32 (buf + 1, pipefd);",
          "3245:     r_socket_write (c, buf, 5);",
          "3246:     r_socket_flush (c);",
          "3247:     R_FREE (ptr);",
          "3248:     break;",
          "3250:     r_socket_read_block (c, (ut8*)&buf, 4);",
          "3251:     i = r_read_be32 (buf);",
          "3252:     ptr = (ut8 *)malloc (i + core->blocksize + 5);",
          "3253:     if (ptr) {",
          "3254:      r_core_block_read (core);",
          "3258:      }",
          "3259:      if (i > core->blocksize) {",
          "3260:       r_core_block_size (core, i);",
          "",
          "[Removed Lines]",
          "3243:     buf[0] = RMT_OPEN | RMT_REPLY;",
          "3249:    case RMT_READ:",
          "3255:      ptr[0] = RMT_READ | RMT_REPLY;",
          "3256:      if (i > RMT_MAX) {",
          "3257:       i = RMT_MAX;",
          "",
          "[Added Lines]",
          "3241:     buf[0] = RAP_PACKET_OPEN | RAP_PACKET_REPLY;",
          "3247:    case RAP_PACKET_READ:",
          "3253:      ptr[0] = RAP_PACKET_READ | RAP_PACKET_REPLY;",
          "3254:      if (i > RAP_PACKET_MAX) {",
          "3255:       i = RAP_PACKET_MAX;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3274:      goto out_of_function;",
          "3275:     }",
          "3276:     break;",
          "3278:     {",
          "3279:     char *cmd = NULL, *cmd_output = NULL;",
          "3280:     char bufr[8], *bufw = NULL;",
          "",
          "[Removed Lines]",
          "3277:    case RMT_CMD:",
          "",
          "[Added Lines]",
          "3275:    case RAP_PACKET_CMD:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3285:     r_socket_read_block (c, (ut8*)&bufr, 4);",
          "3286:     i = r_read_be32 (bufr);",
          "3288:      if ((cmd = malloc (i + 1))) {",
          "3289:       r_socket_read_block (c, (ut8*)cmd, i);",
          "3290:       cmd[i] = '\\0';",
          "",
          "[Removed Lines]",
          "3287:     if (i > 0 && i < RMT_MAX) {",
          "",
          "[Added Lines]",
          "3285:     if (i > 0 && i < RAP_PACKET_MAX) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3313:      const char *cmd = \"pd 4\";",
          "3314:      int cmd_len = strlen (cmd) + 1;",
          "3315:      ut8 *b = malloc (cmd_len + 5);",
          "3317:      r_write_be32 (b + 1, cmd_len);",
          "3318:      strcpy ((char *)b+ 5, cmd);",
          "3319:      r_socket_write (c, b, 5 + cmd_len);",
          "3320:      r_socket_flush (c);",
          "3325:       ut32 n = r_read_be32 (b + 1);",
          "3326:       eprintf (\"REPLY %d\\n\", n);",
          "3327:       if (n > 0) {",
          "3328:        ut8 *res = calloc (1, n);",
          "3330:        eprintf (\"RESPONSE(%s)\\n\", (const char *)res);",
          "3331:        free (res);",
          "3332:       }",
          "",
          "[Removed Lines]",
          "3316:      b[0] = RMT_CMD;",
          "3323:      r_socket_read (c, b, 5);",
          "3324:      if (b[0] == (RMT_CMD | RMT_REPLY)) {",
          "3329:        r_socket_read (c, res, n);",
          "",
          "[Added Lines]",
          "3314:      b[0] = RAP_PACKET_CMD;",
          "3321:      r_socket_read_block (c, b, 5);",
          "3322:      if (b[0] == (RAP_PACKET_CMD | RAP_PACKET_REPLY)) {",
          "3327:        r_socket_read_block (c, res, n);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3337:     }",
          "3338: #endif",
          "3339:     bufw = malloc (cmd_len + 5);",
          "3341:     r_write_be32 (bufw + 1, cmd_len);",
          "3342:     memcpy (bufw + 5, cmd_output, cmd_len);",
          "3343:     r_socket_write (c, bufw, cmd_len+5);",
          "",
          "[Removed Lines]",
          "3340:     bufw[0] = (ut8) (RMT_CMD | RMT_REPLY);",
          "",
          "[Added Lines]",
          "3338:     bufw[0] = (ut8) (RAP_PACKET_CMD | RAP_PACKET_REPLY);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3346:     free (cmd_output);",
          "3347:     break;",
          "3348:     }",
          "3351:     x = r_read_at_be32 (buf, 0);",
          "3352:     ptr = malloc (x);",
          "3354:     int ret = r_core_write_at (core, core->offset, ptr, x);",
          "3356:     r_write_be32 (buf + 1, ret);",
          "3357:     r_socket_write (c, buf, 5);",
          "3358:     r_socket_flush (c);",
          "3359:     R_FREE (ptr);",
          "3360:     break;",
          "3362:     r_socket_read_block (c, buf, 9);",
          "3363:     x = r_read_at_be64 (buf, 1);",
          "3364:     if (buf[0] == 2) {",
          "",
          "[Removed Lines]",
          "3349:    case RMT_WRITE:",
          "3350:     r_socket_read (c, buf, 4);",
          "3353:     r_socket_read (c, ptr, x);",
          "3355:     buf[0] = RMT_WRITE | RMT_REPLY;",
          "3361:    case RMT_SEEK:",
          "",
          "[Added Lines]",
          "3347:    case RAP_PACKET_WRITE:",
          "3348:     r_socket_read_block (c, buf, 4);",
          "3351:     r_socket_read_block (c, ptr, x);",
          "3353:     buf[0] = RAP_PACKET_WRITE | RAP_PACKET_REPLY;",
          "3359:    case RAP_PACKET_SEEK:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3373:      }",
          "3374:      x = core->offset;",
          "3375:     }",
          "3377:     r_write_be64 (buf + 1, x);",
          "3378:     r_socket_write (c, buf, 9);",
          "3379:     r_socket_flush (c);",
          "3380:     break;",
          "3383:     r_socket_read_block (c, buf, 4);",
          "3384:     i = r_read_be32 (buf);",
          "",
          "[Removed Lines]",
          "3376:     buf[0] = RMT_SEEK | RMT_REPLY;",
          "3381:    case RMT_CLOSE:",
          "",
          "[Added Lines]",
          "3374:     buf[0] = RAP_PACKET_SEEK | RAP_PACKET_REPLY;",
          "3379:    case RAP_PACKET_CLOSE:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3387:     int ret = close (i);",
          "3388:     r_write_be32 (buf + 1, ret);",
          "3390:     r_socket_write (c, buf, 5);",
          "3391:     r_socket_flush (c);",
          "3392:     }",
          "",
          "[Removed Lines]",
          "3389:     buf[0] = RMT_CLOSE | RMT_REPLY;",
          "",
          "[Added Lines]",
          "3387:     buf[0] = RAP_PACKET_CLOSE | RAP_PACKET_REPLY;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3397:      char line[256] = {0};",
          "3398:      char *cmd = line;",
          "3400:      if (!strncmp (line, \"ET /cmd/\", 8)) {",
          "3401:       cmd = line + 8;",
          "3402:       char *http = strstr (cmd, \"HTTP\");",
          "",
          "[Removed Lines]",
          "3399:      r_socket_read (c, (ut8*)line, sizeof (line));",
          "",
          "[Added Lines]",
          "3397:      r_socket_read_block (c, (ut8*)line, sizeof (line));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3420:       r_socket_close (c);",
          "3421:      }",
          "3422:     } else {",
          "3424:      r_socket_close (c);",
          "3425:      R_FREE (ptr);",
          "3426:     }",
          "",
          "[Removed Lines]",
          "3423:      eprintf (\"[r2p] unknown command 0x%02x\\n\", cmd);",
          "",
          "[Added Lines]",
          "3421:      eprintf (\"[rap] unknown command 0x%02x\\n\", cmd);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3443: R_API int r_core_search_cb(RCore *core, ut64 from, ut64 to, RCoreSearchCallback cb) {",
          "3444:  int ret, len = core->blocksize;",
          "3463:    }",
          "3465:   }",
          "3469:  }",
          "3470:  return true;",
          "3471: }",
          "",
          "[Removed Lines]",
          "3445:  ut8 *buf;",
          "3446:  if ((buf = malloc (len))) {",
          "3447:   while (from < to) {",
          "3448:    ut64 delta = to-from;",
          "3449:    if (delta < len) {",
          "3450:     len = (int)delta;",
          "3451:    }",
          "3452:    if (!r_io_read_at (core->io, from, buf, len)) {",
          "3453:     eprintf (\"Cannot read at 0x%\"PFMT64x\"\\n\", from);",
          "3454:     break;",
          "3455:    }",
          "3456:    for (ret = 0; ret < len;) {",
          "3457:     int done = cb (core, from, buf+ret, len-ret);",
          "3459:      free (buf);",
          "3460:      return false;",
          "3461:     }",
          "3462:     ret += done;",
          "3464:    from += len;",
          "3466:   free (buf);",
          "3467:  } else {",
          "3468:   eprintf (\"Cannot allocate blocksize\\n\");",
          "",
          "[Added Lines]",
          "3443:  ut8 *buf = malloc (len);",
          "3444:  if (!buf) {",
          "3445:   eprintf (\"Cannot allocate blocksize\\n\");",
          "3446:   return false;",
          "3447:  }",
          "3448:  while (from < to) {",
          "3449:   ut64 delta = to-from;",
          "3450:   if (delta < len) {",
          "3451:    len = (int)delta;",
          "3452:   }",
          "3453:   if (!r_io_read_at (core->io, from, buf, len)) {",
          "3454:    eprintf (\"Cannot read at 0x%\"PFMT64x\"\\n\", from);",
          "3455:    break;",
          "3456:   }",
          "3457:   for (ret = 0; ret < len;) {",
          "3458:    int done = cb (core, from, buf+ret, len-ret);",
          "3460:     free (buf);",
          "3461:     return false;",
          "3463:    ret += done;",
          "3465:   from += len;",
          "3467:  free (buf);",
          "",
          "---------------"
        ],
        "libr/core/rtr.c||libr/core/rtr.c": [
          "File: libr/core/rtr.c -> libr/core/rtr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "707:   case RTR_PROTOCOL_HTTP: proto = \"http\"; break;",
          "708:   case RTR_PROTOCOL_TCP: proto = \"tcp\"; break;",
          "709:   case RTR_PROTOCOL_UDP: proto = \"udp\"; break;",
          "711:   case RTR_PROTOCOL_UNIX: proto = \"unix\"; break;",
          "712:   }",
          "713:   r_cons_printf (\"%d fd:%i %s://%s:%i/%s\\n\",",
          "",
          "[Removed Lines]",
          "710:   case RTR_PROTOCOL_RAP: proto = \"r2p\"; break;",
          "",
          "[Added Lines]",
          "710:   case RTR_PROTOCOL_RAP: proto = \"rap\"; break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "717: }",
          "719: R_API void r_core_rtr_add(RCore *core, const char *_input) {",
          "721:  int i, timeout, ret;",
          "722:  RSocket *fd;",
          "",
          "[Removed Lines]",
          "720:  char *port, input[1024], *file = NULL, *ptr = NULL, buf[1024];",
          "",
          "[Added Lines]",
          "720:  char *port, input[1024], *file = NULL, *ptr = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "807:    eprintf (\"Error: Cannot connect to '%s' (%s)\\n\", host, port);",
          "808:    r_socket_free (fd);",
          "809:    return;",
          "810:   }",
          "829:   break;",
          "830:  case RTR_PROTOCOL_UNIX:",
          "831:   if (!r_socket_connect_unix (fd, host)) {",
          "",
          "[Removed Lines]",
          "811:   eprintf (\"Connected to %s at port %s\\n\", host, port);",
          "813:   buf[0] = RTR_RAP_OPEN;",
          "814:   buf[1] = 0;",
          "815:   buf[2] = (ut8)(strlen (file) + 1);",
          "816:   memcpy (buf + 3, file, buf[2]);",
          "817:   r_socket_write (fd, buf, 3 + buf[2]);",
          "819:   eprintf (\"waiting... \");",
          "820:   fflush (stdout);",
          "821:   r_socket_read (fd, (ut8*)buf, 5);",
          "822:   i = r_read_at_be32 (buf, 1);",
          "823:   if (buf[0] != (char)(RTR_RAP_OPEN | RTR_RAP_REPLY) || i <= 0) {",
          "824:    eprintf (\"Error: Wrong reply\\n\");",
          "825:    r_socket_free (fd);",
          "826:    return;",
          "827:   }",
          "828:   eprintf (\"ok\\n\");",
          "",
          "[Added Lines]",
          "810:   } else {",
          "811:    int n = r_socket_rap_client_open (fd, file, 0);",
          "812:    eprintf (\"opened as fd = %d\\n\", n);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "937:  }",
          "938: }",
          "956: static bool r_core_rtr_rap_run(RCore *core, const char *input) {",
          "957:  char *file = r_str_newf (\"rap://%s\", input);",
          "958:  int flags = R_PERM_RW;",
          "",
          "[Removed Lines]",
          "940: static ut8 *r_rap_packet(ut8 type, ut32 len) {",
          "941:  ut8 *buf = malloc (len + 5);",
          "942:  if (buf) {",
          "943:   buf[0] = type;",
          "944:   r_write_be32 (buf + 1, len);",
          "945:  }",
          "946:  return buf;",
          "947: }",
          "949: static void r_rap_packet_fill(ut8 *buf, const ut8* src, int len) {",
          "950:  if (buf && src && len > 0) {",
          "951:   ut32 curlen = r_read_be32 (buf + 1);",
          "952:   memcpy (buf + 5, src, R_MIN (curlen, len));",
          "953:  }",
          "954: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "985: }",
          "987: R_API void r_core_rtr_cmd(RCore *core, const char *input) {",
          "990:  unsigned int cmd_len = 0;",
          "992:  if (!fd && *input != '0') {",
          "993:   fd = -1;",
          "994:  }",
          "",
          "[Removed Lines]",
          "988:  char bufw[1024], bufr[8], *cmd_output = NULL;",
          "991:  int i, fd = atoi (input);",
          "",
          "[Added Lines]",
          "958:  int fd = atoi (input);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1059:   r_socket_write (s, (ut8*)cmd, cmd_len);",
          "1060:   r_socket_write (s, \"\\n\", 2);",
          "1061:   int maxlen = 4096; // r_read_le32 (blen);",
          "1063:   if (!cmd_output) {",
          "1064:    eprintf (\"Error: Allocating cmd output\\n\");",
          "1065:    return;",
          "",
          "[Removed Lines]",
          "1062:   cmd_output = calloc (1, maxlen + 1);",
          "",
          "[Added Lines]",
          "1029:   char *cmd_output = calloc (1, maxlen + 1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1093:   return;",
          "1094:  }",
          "1132:   }",
          "1149:   return;",
          "1150:  }",
          "1156: }",
          "",
          "[Removed Lines]",
          "1096:  if (rtr_host[rtr_n].proto != RTR_PROTOCOL_RAP) {",
          "1097:   eprintf (\"Error: Not a rap:// host\\n\");",
          "1098:   return;",
          "1099:  }",
          "1101:  core->num->value = 0; // that's fine",
          "1102:  cmd = r_str_trim_head_ro (cmd);",
          "1103:  RSocket *fh = rtr_host[rtr_n].fd;",
          "1104:  if (!strlen (cmd)) {",
          "1106:   r_socket_close (fh);",
          "1107:   return;",
          "1108:  }",
          "1110:  bufw[0] = RAP_RMT_CMD;",
          "1111:  i = strlen (cmd) + 1;",
          "1112:  r_write_be32 (bufw + 1, i);",
          "1113:  memcpy (bufw + 5, cmd, i);",
          "1114:  r_socket_write (fh, bufw, 5 + i);",
          "1116:  r_socket_read (fh, (ut8*)bufr, 5);",
          "1117:  if (bufr[0] == (char)(RAP_RMT_CMD)) {",
          "1118:   cmd_len = r_read_at_be32 (bufr, 1);",
          "1119:   char *rcmd = calloc (1, cmd_len + 1);",
          "1120:   if (rcmd) {",
          "1121:    r_socket_read (fh, (ut8*)rcmd, cmd_len);",
          "1122:    char *res = r_core_cmd_str (core, rcmd);",
          "1123:    if (res) {",
          "1124:     int res_len = strlen (res) + 1;",
          "1125:     ut8 *pkt = r_rap_packet ((RAP_RMT_CMD | RAP_RMT_REPLY), res_len);",
          "1126:     r_rap_packet_fill (pkt, (const ut8*)res, res_len);",
          "1127:     r_socket_write (fh, pkt, 5 + res_len);",
          "1128:     free (res);",
          "1129:     free (pkt);",
          "1130:    }",
          "1131:    free (rcmd);",
          "1134:   r_socket_read (fh, (ut8*)bufr, 5);",
          "1135:  }",
          "1137:  if (bufr[0] != (char)(RAP_RMT_CMD | RTR_RAP_REPLY)) {",
          "1138:   eprintf (\"Error: Wrong reply\\n\");",
          "1139:   return;",
          "1140:  }",
          "1141:  cmd_len = r_read_at_be32 (bufr, 1);",
          "1142:  if (cmd_len < 1 || cmd_len > 16384) {",
          "1143:   eprintf (\"Error: cmd_len is wrong\\n\");",
          "1144:   return;",
          "1145:  }",
          "1146:  cmd_output = calloc (1, cmd_len + 1);",
          "1147:  if (!cmd_output) {",
          "1148:   eprintf (\"Error: Allocating cmd output\\n\");",
          "1151:  r_socket_read_block (fh, (ut8*)cmd_output, cmd_len);",
          "1153:  cmd_output[cmd_len] = 0;",
          "1154:  r_cons_println (cmd_output);",
          "1155:  free ((void *)cmd_output);",
          "",
          "[Added Lines]",
          "1063:  if (rtr_host[rtr_n].proto == RTR_PROTOCOL_RAP) {",
          "1064:   core->num->value = 0; // that's fine",
          "1065:   cmd = r_str_trim_head_ro (cmd);",
          "1066:   RSocket *fh = rtr_host[rtr_n].fd;",
          "1067:   if (!strlen (cmd)) {",
          "1069:    r_socket_close (fh);",
          "1070:    return;",
          "1072:   char *cmd_output = r_socket_rap_client_command (fh, cmd, &core->anal->coreb);",
          "1073:   r_cons_println (cmd_output);",
          "1074:   free (cmd_output);",
          "1077:  eprintf (\"Error: Unknown protocol\\n\");",
          "",
          "---------------"
        ],
        "libr/include/r_core.h||libr/include/r_core.h": [
          "File: libr/include/r_core.h -> libr/include/r_core.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: #define RTR_PROTOCOL_HTTP 3",
          "80: #define RTR_PROTOCOL_UNIX 4",
          "86: #define RTR_MAX_HOSTS 255",
          "",
          "[Removed Lines]",
          "82: #define RTR_RAP_OPEN   0x01",
          "83: #define RTR_RAP_CMD    0x07",
          "84: #define RTR_RAP_REPLY  0x80",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/include/r_io.h||libr/include/r_io.h": [
          "File: libr/include/r_io.h -> libr/include/r_io.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  struct w32dbg_wrap_instance_t *w32dbg_wrap;",
          "110: #endif",
          "111:  char *args;",
          "113:  PrintfCallback cb_printf;",
          "117: } RIO;",
          "119: typedef struct r_io_desc_t {",
          "",
          "[Removed Lines]",
          "112:  void *user;",
          "114:  int (*cb_core_cmd)(void *user, const char *str);",
          "115:  char* (*cb_core_cmdstr)(void *user, const char *str);",
          "116:  void (*cb_core_post_write)(void *user, ut64 maddr, ut8 *orig_bytes, int orig_len);",
          "",
          "[Added Lines]",
          "113:  RCoreBind corebind;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:  void *data;",
          "137: } RIODescData;",
          "140: typedef struct {",
          "141:  RSocket *fd;",
          "142:  RSocket *client;",
          "144: } RIORap;",
          "156: typedef struct r_io_plugin_t {",
          "157:  const char *name;",
          "158:  const char *desc;",
          "",
          "[Removed Lines]",
          "143:  int listener;",
          "146: #define RMT_MAX    4096",
          "147: #define RMT_OPEN   0x01",
          "148: #define RMT_READ   0x02",
          "149: #define RMT_WRITE  0x03",
          "150: #define RMT_SEEK   0x04",
          "151: #define RMT_CLOSE  0x05",
          "152: #define RMT_SYSTEM 0x06",
          "153: #define RMT_CMD    0x07",
          "154: #define RMT_REPLY  0x80",
          "",
          "[Added Lines]",
          "140:  bool listener;",
          "",
          "---------------"
        ],
        "libr/include/r_socket.h||libr/include/r_socket.h": [
          "File: libr/include/r_socket.h -> libr/include/r_socket.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: typedef int (*rap_server_close)(void *user, int fd);",
          "172: enum {",
          "182: };",
          "184: typedef struct r_socket_rap_server_t {",
          "185:  RSocket *fd;",
          "186:  char *port;",
          "188:  rap_server_open open;",
          "189:  rap_server_seek seek;",
          "190:  rap_server_read read;",
          "",
          "[Removed Lines]",
          "173:  RAP_RMT_OPEN = 1,",
          "174:  RAP_RMT_READ = 2,",
          "175:  RAP_RMT_WRITE = 3,",
          "176:  RAP_RMT_SEEK = 4,",
          "177:  RAP_RMT_CLOSE = 5,",
          "179:  RAP_RMT_CMD = 7,",
          "180:  RAP_RMT_REPLY = 0x80,",
          "181:  RAP_RMT_MAX = 4096",
          "187:  ut8 buf[RAP_RMT_MAX + 32]; // This should be used as a static buffer for everything done by the server",
          "",
          "[Added Lines]",
          "173:  RAP_PACKET_OPEN = 1,",
          "174:  RAP_PACKET_READ = 2,",
          "175:  RAP_PACKET_WRITE = 3,",
          "176:  RAP_PACKET_SEEK = 4,",
          "177:  RAP_PACKET_CLOSE = 5,",
          "179:  RAP_PACKET_CMD = 7,",
          "180:  RAP_PACKET_REPLY = 0x80,",
          "181:  RAP_PACKET_MAX = 4096",
          "187:  ut8 buf[RAP_PACKET_MAX + 32]; // This should be used as a static buffer for everything done by the server",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:  void *user; // Always first arg for callbacks",
          "196: } RSocketRapServer;",
          "199: R_API RSocketRapServer *r_socket_rap_server_create(const char *pathname);",
          "200: R_API void r_socket_rap_server_free(RSocketRapServer *rap_s);",
          "202: R_API RSocket *r_socket_rap_server_accept(RSocketRapServer *rap_s);",
          "203: R_API bool r_socket_rap_server_continue(RSocketRapServer *rap_s);",
          "206: #define R_RUN_PROFILE_NARGS 512",
          "207: typedef struct r_run_profile_t {",
          "",
          "[Removed Lines]",
          "198: R_API RSocketRapServer *r_socket_rap_server_new(int is_ssl, const char *port);",
          "201: R_API int r_socket_rap_server_listen(RSocketRapServer *rap_s, const char *certfile);",
          "",
          "[Added Lines]",
          "198: R_API RSocketRapServer *r_socket_rap_server_new(bool is_ssl, const char *port);",
          "201: R_API bool r_socket_rap_server_listen(RSocketRapServer *rap_s, const char *certfile);",
          "206: R_API int r_socket_rap_client_open(RSocket *s, const char *file, int rw);",
          "207: R_API char *r_socket_rap_client_command(RSocket *s, const char *cmd, RCoreBind *c);",
          "208: R_API int r_socket_rap_client_write(RSocket *s, const ut8 *buf, int count);",
          "209: R_API int r_socket_rap_client_read(RSocket *s, ut8 *buf, int count);",
          "210: R_API int r_socket_rap_client_seek(RSocket *s, ut64 offset, int whence);",
          "",
          "---------------"
        ],
        "libr/io/ioutils.c||libr/io/ioutils.c": [
          "File: libr/io/ioutils.c -> libr/io/ioutils.c"
        ],
        "libr/io/meson.build||libr/io/meson.build": [
          "File: libr/io/meson.build -> libr/io/meson.build",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: r_io_sources = [",
          "5:   'io.c',",
          "8:   'io_plugin.c',",
          "9:   'undo.c',",
          "10:   'p_cache.c',",
          "11:   'p/io_ar.c',",
          "",
          "[Removed Lines]",
          "2:   'io_cache.c',",
          "3:   'desc.c',",
          "4:   'fd.c',",
          "6:   'ioutils.c',",
          "7:   'map.c',",
          "",
          "[Added Lines]",
          "3:   'io_fd.c',",
          "4:   'io_map.c',",
          "5:   'io_cache.c',",
          "6:   'io_desc.c',",
          "8:   'ioutils.c',",
          "",
          "---------------"
        ],
        "libr/io/p/io_debug.c||libr/io/p/io_debug.c": [
          "File: libr/io/p/io_debug.c -> libr/io/p/io_debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527: #include <r_core.h>",
          "528: static int get_pid_of(RIO *io, const char *procname) {",
          "530:  if (c && c->dbg && c->dbg->h) {",
          "531:   RListIter *iter;",
          "532:   RDebugPid *proc;",
          "",
          "[Removed Lines]",
          "529:  RCore *c = io->user;",
          "",
          "[Added Lines]",
          "529:  RCore *c = io->corebind.core;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:     return NULL;",
          "590:    }",
          "591:    if ((ret = _plugin->open (io, uri, rw, mode))) {",
          "592:     RIOW32Dbg *w32 = (RIOW32Dbg *)ret->data;",
          "593:     w32->winbase = winbase;",
          "594:     w32->pi.dwThreadId = wintid;",
          "596:    }",
          "597: #elif __APPLE__",
          "598:    sprintf (uri, \"smach://%d\", pid);  //s is for spawn",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592:     RCore *c = io->corebind.core;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "619:    ret = _plugin->open (io, uri, rw, mode);",
          "620: #if __WINDOWS__",
          "621:    if (ret) {",
          "622:     RIOW32Dbg *w32 = (RIOW32Dbg *)ret->data;",
          "624:    }",
          "625: #endif",
          "626:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623:     RCore *c = io->corebind.core;",
          "",
          "---------------"
        ],
        "libr/io/p/io_r2k_linux.c||libr/io/p/io_r2k_linux.c": [
          "File: libr/io/p/io_r2k_linux.c -> libr/io/p/io_r2k_linux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:  return ret;",
          "224: }",
          "227:  int i = 0;",
          "228:  int cmd_len = cmd ? strlen (cmd) : 0;",
          "229:  const char* usage = \"Usage:   \\\\[MprRw][lpP] [args...]\";",
          "",
          "[Removed Lines]",
          "226: static void print_help (RIO *io, char *cmd, int p_usage) {",
          "",
          "[Added Lines]",
          "226: static void print_help(RIO *io, char *cmd, int p_usage) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:  }",
          "265: }",
          "268:  int ret = -1;",
          "269:  int pagesize, newlen;",
          "270:  ut64 pageaddr, offset;",
          "",
          "[Removed Lines]",
          "267: int ReadMemory (RIO *io, RIODesc *iodesc, int ioctl_n, size_t pid, size_t address, ut8 *buf, int len) {",
          "",
          "[Added Lines]",
          "267: int ReadMemory(RIO *io, RIODesc *iodesc, int ioctl_n, size_t pid, size_t address, ut8 *buf, int len) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "343:  return ret;",
          "344: }",
          "347:  int ret = -1;",
          "349:  if (iodesc && iodesc->data > 0 && buf) {",
          "",
          "[Removed Lines]",
          "346: int WriteMemory (RIO *io, RIODesc *iodesc, int ioctl_n, size_t pid, ut64 address, const ut8 *buf, int len) {",
          "",
          "[Added Lines]",
          "346: int WriteMemory(RIO *io, RIODesc *iodesc, int ioctl_n, size_t pid, ut64 address, const ut8 *buf, int len) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "428:    cmd = (char *) malloc (27);",
          "429:    if (!cmd) {",
          "430:     io->cb_printf (\"io_r2k_linux : Malloc failed. Seeking to 0x0\\n\");",
          "432:    } else {",
          "433:     sprintf (cmd, \"s 0x%\"PFMT64x, io->off);",
          "435:     free (cmd);",
          "436:    }",
          "437:   }",
          "",
          "[Removed Lines]",
          "431:     io->cb_core_cmd (io->user, \"s 0\");",
          "434:     io->cb_core_cmd (io->user, cmd);",
          "",
          "[Added Lines]",
          "431:     io->corebind.cmd (io->corebind.core, \"s 0\");",
          "434:     io->corebind.cmd (io->corebind.core, cmd);",
          "",
          "---------------"
        ],
        "libr/io/p/io_rap.c||libr/io/p/io_rap.c": [
          "File: libr/io/p/io_rap.c -> libr/io/p/io_rap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include <r_socket.h>",
          "7: #include <sys/types.h>",
          "10: #define RIORAP_FD(x) (((x)->data)?(((RIORap*)((x)->data))->client):NULL)",
          "11: #define RIORAP_IS_LISTEN(x) (((RIORap*)((x)->data))->listener)",
          "12: #define RIORAP_IS_VALID(x) ((x) && ((x)->data) && ((x)->plugin == &r_io_plugin_rap))",
          "14: static int __rap_write(RIO *io, RIODesc *fd, const ut8 *buf, int count) {",
          "15:  RSocket *s = RIORAP_FD (fd);",
          "47: }",
          "49: static bool __rap_accept(RIO *io, RIODesc *desc, int fd) {",
          "",
          "[Removed Lines]",
          "16:  ut8 *tmp;",
          "17:  int ret;",
          "19:  if (count < 1) {",
          "20:   return count;",
          "21:  }",
          "23:  if (count > RMT_MAX) {",
          "24:   count = RMT_MAX;",
          "25:  }",
          "26:  if (!(tmp = (ut8 *)malloc (count + 5))) {",
          "27:   eprintf (\"__rap_write: malloc failed\\n\");",
          "28:   return -1;",
          "29:  }",
          "30:  tmp[0] = RMT_WRITE;",
          "31:  r_write_be32 (tmp + 1, count);",
          "32:  memcpy (tmp + 5, buf, count);",
          "34:  (void)r_socket_write (s, tmp, count + 5);",
          "35:  r_socket_flush (s);",
          "36:  if (r_socket_read (s, tmp, 5) != 5) { // TODO read_block?",
          "37:   eprintf (\"__rap_write: error\\n\");",
          "38:   ret = -1;",
          "39:  } else {",
          "40:   ret = r_read_be32 (tmp + 1);",
          "41:   if (!ret) {",
          "42:    ret = -1;",
          "43:   }",
          "44:  }",
          "45:  free (tmp);",
          "46:  return ret;",
          "",
          "[Added Lines]",
          "15:  return r_socket_rap_client_write (s, buf, count);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: static int __rap_read(RIO *io, RIODesc *fd, ut8 *buf, int count) {",
          "59:  RSocket *s = RIORAP_FD (fd);",
          "87: }",
          "89: static int __rap_close(RIODesc *fd) {",
          "",
          "[Removed Lines]",
          "60:  int ret, i = (int)count;",
          "61:  ut8 tmp[5];",
          "64:  if (count > RMT_MAX) {",
          "65:   count = RMT_MAX;",
          "66:  }",
          "68:  tmp[0] = RMT_READ;",
          "69:  r_write_be32 (tmp + 1, count);",
          "70:  (void)r_socket_write (s, tmp, 5);",
          "71:  r_socket_flush (s);",
          "73:  ret = r_socket_read_block (s, tmp, 5);",
          "74:  if (ret != 5 || tmp[0] != (RMT_READ | RMT_REPLY)) {",
          "75:   eprintf (\"__rap_read: Unexpected rap read reply \"",
          "76:    \"(%d=0x%02x) expected (%d=0x%02x)\\n\",",
          "77:    ret, tmp[0], 2, (RMT_READ | RMT_REPLY));",
          "78:   return -1;",
          "79:  }",
          "80:  i = r_read_at_be32 (tmp, 1);",
          "81:  if (i > count) {",
          "82:   eprintf (\"__rap_read: Unexpected data size %d vs %d\\n\", i, count);",
          "83:   return -1;",
          "84:  }",
          "85:  r_socket_read_block (s, buf, i);",
          "86:  return count;",
          "",
          "[Added Lines]",
          "29:  return r_socket_rap_client_read (s, buf, count);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110: static ut64 __rap_lseek(RIO *io, RIODesc *fd, ut64 offset, int whence) {",
          "111:  RSocket *s = RIORAP_FD (fd);",
          "130: }",
          "132: static bool __rap_plugin_open(RIO *io, const char *pathname, bool many) {",
          "",
          "[Removed Lines]",
          "112:  ut8 tmp[10];",
          "113:  tmp[0] = RMT_SEEK;",
          "114:  tmp[1] = (ut8)whence;",
          "115:  r_write_be64 (tmp + 2, offset);",
          "116:  (void)r_socket_write (s, &tmp, 10);",
          "117:  r_socket_flush (s);",
          "118:  int ret = r_socket_read_block (s, (ut8*)&tmp, 9);",
          "119:  if (ret != 9) {",
          "120:   eprintf (\"Truncated socket read\\n\");",
          "121:   return -1;",
          "122:  }",
          "123:  if (tmp[0] != (RMT_SEEK | RMT_REPLY)) {",
          "126:   eprintf (\"Unexpected lseek reply (%02x -> %02x)\\n\", tmp[0], (RMT_SEEK | RMT_REPLY));",
          "127:   return -1;",
          "128:  }",
          "129:  return r_read_at_be64 (tmp, 1);",
          "",
          "[Added Lines]",
          "55:  return r_socket_rap_client_seek (s, offset, whence);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136: static RIODesc *__rap_open(RIO *io, const char *pathname, int rw, int mode) {",
          "137:  int i, p, listenmode;",
          "138:  char *file, *port;",
          "144:  if (!__rap_plugin_open (io, pathname, 0)) {",
          "145:   return NULL;",
          "146:  }",
          "147:  bool is_ssl = (!strncmp (pathname, \"raps://\", 7));",
          "150:   eprintf (\"rap: wrong uri\\n\");",
          "151:   return NULL;",
          "152:  }",
          "155:  if (!*port) {",
          "156:   return NULL;",
          "",
          "[Removed Lines]",
          "139:  const char *ptr;",
          "140:  RSocket *rap_fd;",
          "141:  char buf[1024];",
          "142:  RIORap *rior;",
          "148:  ptr = pathname + (is_ssl? 7: 6);",
          "149:  if (!(port = strchr (ptr, ':'))) {",
          "153:  listenmode = (*ptr == ':');",
          "",
          "[Added Lines]",
          "70:  const char *host = pathname + (is_ssl? 7: 6);",
          "71:  if (!(port = strchr (host, ':'))) {",
          "75:  listenmode = (*host == ':');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "171:   }",
          "173:   eprintf (\"rap: listening at port %s ssl %s\\n\", port, (is_ssl)?\"on\":\"off\");",
          "175:   rior->listener = true;",
          "176:   rior->client = rior->fd = r_socket_new (is_ssl);",
          "177:   if (!rior->fd) {",
          "",
          "[Removed Lines]",
          "174:   rior = R_NEW0 (RIORap);",
          "",
          "[Added Lines]",
          "96:   RIORap *rior = R_NEW0 (RIORap);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "199:   return r_io_desc_new (io, &r_io_plugin_rap,",
          "200:    pathname, rw, mode, rior);",
          "201:  }",
          "203:   eprintf (\"Cannot create new socket\\n\");",
          "204:   return NULL;",
          "205:  }",
          "209:   return NULL;",
          "210:  }",
          "213:  if (!rior) {",
          "215:   return NULL;",
          "216:  }",
          "217:  rior->listener = false;",
          "219:  if (file && *file) {",
          "234:    free (rior);",
          "235:    return NULL;",
          "236:   }",
          "238:   if (i > 0) {",
          "258:   }",
          "264:  }",
          "266:  return r_io_desc_new (io, &r_io_plugin_rap,",
          "267:   pathname, rw, mode, rior);",
          "268: }",
          "",
          "[Removed Lines]",
          "202:  if (!(rap_fd = r_socket_new (is_ssl))) {",
          "206:  if (r_socket_connect_tcp (rap_fd, ptr, port, 30) == false) {",
          "207:   eprintf (\"Cannot connect to '%s' (%d)\\n\", ptr, p);",
          "208:   r_socket_free (rap_fd);",
          "211:  eprintf (\"Connected to: %s at port %s\\n\", ptr, port);",
          "212:  rior = R_NEW0 (RIORap);",
          "214:   r_socket_free (rap_fd);",
          "218:  rior->client = rior->fd = rap_fd;",
          "221:   buf[0] = RMT_OPEN;",
          "222:   buf[1] = rw;",
          "223:   buf[2] = (ut8)strlen (file);",
          "224:   memcpy (buf + 3, file, buf[2]);",
          "225:   (void)r_socket_write (rap_fd, buf, buf[2] + 3);",
          "226:   r_socket_flush (rap_fd);",
          "228:   eprintf (\"waiting... \");",
          "229:   buf[0] = 0;",
          "230:   r_socket_read_block (rap_fd, (ut8*)buf, 5);",
          "231:   if (buf[0] != (char)(RMT_OPEN | RMT_REPLY)) {",
          "232:    eprintf (\"rap: Expecting OPEN|REPLY packet. got %02x\\n\", buf[0]);",
          "233:    r_socket_free (rap_fd);",
          "237:   i = r_read_at_be32 (buf, 1);",
          "239:    eprintf (\"ok\\n\");",
          "240:   }",
          "242:   io->cb_core_cmd (io->user, \".=!i*\");",
          "243:   io->cb_core_cmd (io->user, \".=!f*\");",
          "244:   io->cb_core_cmd (io->user, \".=!om*\");",
          "245: #if 0",
          "247:   r_socket_read (rap_fd, (ut8 *)&buf, 4);",
          "248:   r_mem_copyendian ((ut8 *)&i, (ut8*)buf, 4, ENDIAN);",
          "249:   while (i>0) {",
          "250:    int n = r_socket_read (rap_fd, (ut8 *)&buf, i);",
          "251:    if (n<1) break;",
          "252:    buf[i] = 0;",
          "253:    io->core_cmd_cb (io->user, buf);",
          "254:    n = r_socket_read (rap_fd, (ut8 *)&buf, 4);",
          "255:    if (n<1) break;",
          "256:    r_mem_copyendian ((ut8 *)&i, (ut8*)buf, 4, ENDIAN);",
          "257:    i -= n;",
          "259: #endif",
          "260:  } else {",
          "",
          "[Added Lines]",
          "124:  RSocket *s = r_socket_new (is_ssl);",
          "125:  if (!s) {",
          "129:  eprintf (\"Connecting to %s, port %s\\n\", host, port);",
          "130:  if (!r_socket_connect (s, host, port, R_SOCKET_PROTO_TCP, 0)) {",
          "131:   eprintf (\"Cannot connect to '%s' (%d)\\n\", host, p);",
          "132:   r_socket_free (s);",
          "135:  eprintf (\"Connected to: %s at port %s\\n\", host, port);",
          "136:  RIORap *rior = R_NEW0 (RIORap);",
          "138:   r_socket_free (s);",
          "142:  rior->client = rior->fd = s;",
          "144:   i = r_socket_rap_client_open (s, file, rw);",
          "145:   if (i == -1) {",
          "147:    r_socket_free (s);",
          "151:    eprintf (\"rap connection was successful. open %d\\n\", i);",
          "153:    io->corebind.cmd (io->corebind.core, \".=!i*\");",
          "154:    io->corebind.cmd (io->corebind.core, \".=!f*\");",
          "155:    io->corebind.cmd (io->corebind.core, \".=!om*\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "272: }",
          "274: static char *__rap_system(RIO *io, RIODesc *fd, const char *command) {",
          "276:  RSocket *s = RIORAP_FD (fd);",
          "277:  unsigned int i;",
          "278:  char *ptr, *res, *str;",
          "279:  ut8 buf[RMT_MAX];",
          "",
          "[Removed Lines]",
          "275:  int ret, reslen = 0, cmdlen = 0;",
          "",
          "[Added Lines]",
          "169:  return r_socket_rap_client_command (s, command, &io->corebind);",
          "170: #if 0",
          "171:  int ret, reslen = 0, cmdlen = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "373:   ret -= r_socket_read (s, (ut8*)buf, RMT_MAX);",
          "374:  }",
          "375: #endif",
          "376:  return NULL;",
          "377: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271: #endif",
          "",
          "---------------"
        ],
        "libr/socket/meson.build||libr/socket/meson.build": [
          "File: libr/socket/meson.build -> libr/socket/meson.build",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: r_socket_sources = [",
          "5:   'r2pipe.c',",
          "7:   'run.c',",
          "10: ]",
          "12: dependencies = [utl, r_util_dep, platform_deps]",
          "",
          "[Removed Lines]",
          "2:   'http.c',",
          "3:   'http_server.c',",
          "4:   'proc.c',",
          "6:   'rap_server.c',",
          "8:   'socket.c',",
          "9:   'serial.c',",
          "",
          "[Added Lines]",
          "2:   'socket.c',",
          "3:   'socket_http.c',",
          "4:   'socket_http_server.c',",
          "5:   'socket_serial.c',",
          "6:   'socket_proc.c',",
          "8:   'socket_rap_client.c',",
          "9:   'socket_rap_server.c',",
          "",
          "---------------"
        ],
        "libr/socket/socket.c||libr/socket/socket.c": [
          "File: libr/socket/socket.c -> libr/socket/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #define NETWORK_DISABLED 0",
          "13: #endif",
          "15: R_LIB_VERSION(r_socket);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #define D if(0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "729: R_API int r_socket_write(RSocket *s, void *buf, int len) {",
          "730:  int ret, delta = 0;",
          "731: #if __UNIX__",
          "732:  r_sys_signal (SIGPIPE, SIG_IGN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "732:  D { eprintf (\"WRITE \"); int i; ut8 *b = buf; for (i = 0; i<len; i++) { eprintf (\"%02x \", b[i]); } eprintf (\"\\n\"); }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "798:  return ret;",
          "799:  }",
          "800: #else",
          "802: #endif",
          "803: }",
          "807:  for (ret = 0; ret < len; ) {",
          "809:   if (r < 1) {",
          "810:    break;",
          "811:   }",
          "",
          "[Removed Lines]",
          "801:  return read (s->fd, buf, len);",
          "805: R_API int r_socket_read_block(RSocket *s, unsigned char *buf, int len) {",
          "806:  int r, ret = 0;",
          "808:   r = r_socket_read (s, buf+ret, len-ret);",
          "",
          "[Added Lines]",
          "805:  int r = recv (s->fd, buf, len, 0);",
          "806:  D { eprintf (\"READ \"); int i; for (i = 0; i<len; i++) { eprintf (\"%02x \", buf[i]); } eprintf (\"\\n\"); }",
          "807:  return r;",
          "811: R_API int r_socket_read_block(RSocket *s, ut8 *buf, int len) {",
          "812:  int ret = 0;",
          "814:   int r = r_socket_read (s, buf + ret, len - ret);",
          "815:   if (r == -1) {",
          "816:    return -1;",
          "817:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "839:   }",
          "840:   i += ret;",
          "841:  }",
          "843:  return i;",
          "844: }",
          "847:  RSocket *s = R_NEW0 (RSocket);",
          "848:  if (s) {",
          "849:   s->fd = fd;",
          "",
          "[Removed Lines]",
          "842:  buf[i]='\\0';",
          "846: R_API RSocket *r_socket_new_from_fd (int fd) {",
          "",
          "[Added Lines]",
          "851:  buf[i] = '\\0';",
          "855: R_API RSocket *r_socket_new_from_fd(int fd) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "854: R_API ut8* r_socket_slurp(RSocket *s, int *len) {",
          "855:  int blockSize = 4096;",
          "856:  ut8 *ptr, *buf = malloc (blockSize);",
          "857:  int copied = 0;",
          "858:  if (len) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "866:  if (!buf) {",
          "867:   return NULL;",
          "868:  }",
          "",
          "---------------"
        ],
        "libr/socket/http.c||libr/socket/socket_http.c": [
          "File: libr/socket/http.c -> libr/socket/socket_http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:  return res;",
          "82: }",
          "85:  char *curl_env = r_sys_getenv (\"R2_CURL\");",
          "86:  if (curl_env && *curl_env) {",
          "87:   char *encoded_url = r_str_escape (url);",
          "",
          "[Removed Lines]",
          "84: R_API char *r_socket_http_get (const char *url, int *code, int *rlen) {",
          "",
          "[Added Lines]",
          "84: R_API char *r_socket_http_get(const char *url, int *code, int *rlen) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:  }",
          "101:  free (curl_env);",
          "102:  RSocket *s;",
          "104:  char *response, *host, *path, *port = \"80\";",
          "105:  char *uri = strdup (url);",
          "106:  if (!uri) {",
          "",
          "[Removed Lines]",
          "103:  int ssl = !memcmp (url, \"https://\", 8);",
          "",
          "[Added Lines]",
          "103:  int ssl = r_str_startswith (url, \"https://\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:  host += 3;",
          "123:  port = strchr (host, ':');",
          "124:  if (!port) {",
          "126:   path = host;",
          "127:  } else {",
          "",
          "[Removed Lines]",
          "125:   port = (ssl)?\"443\":\"80\";",
          "",
          "[Added Lines]",
          "125:   port = ssl? \"443\": \"80\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160: R_API char *r_socket_http_post (const char *url, const char *data, int *code, int *rlen) {",
          "161:  RSocket *s;",
          "163:  char *uri = strdup (url);",
          "164:  if (!uri) {",
          "165:   return NULL;",
          "",
          "[Removed Lines]",
          "162:  bool ssl = !memcmp (url, \"https://\", 8);",
          "",
          "[Added Lines]",
          "162:  bool ssl = r_str_startswith (url, \"https://\");",
          "",
          "---------------"
        ],
        "libr/socket/socket_rap_client.c||libr/socket/socket_rap_client.c": [
          "File: libr/socket/socket_rap_client.c -> libr/socket/socket_rap_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #include <r_socket.h>",
          "4: #include <r_util.h>",
          "6: static ut8 *r_rap_packet(ut8 type, ut32 len) {",
          "7:  ut8 *buf = malloc (len + 5);",
          "8:  if (buf) {",
          "9:   buf[0] = type;",
          "10:   r_write_be32 (buf + 1, len);",
          "11:  }",
          "12:  return buf;",
          "13: }",
          "15: static void r_rap_packet_fill(ut8 *buf, const ut8* src, int len) {",
          "16:  if (buf && src && len > 0) {",
          "17:   ut32 curlen = r_read_be32 (buf + 1);",
          "18:   memcpy (buf + 5, src, R_MIN (curlen, len));",
          "19:  }",
          "20: }",
          "22: R_API int r_socket_rap_client_open(RSocket *s, const char *file, int rw) {",
          "23:  r_socket_block_time (s, 1, 1, 0);",
          "24:  size_t file_len0 = strlen (file) + 1;",
          "25:  if (file_len0 > 255) {",
          "26:   eprintf (\"Filename too long\\n\");",
          "27:   return -1;",
          "28:  }",
          "29:  char *buf = malloc (file_len0 + 7);",
          "30:  if (!buf) {",
          "31:   return -1;",
          "32:  }",
          "34:  buf[0] = RAP_PACKET_OPEN;",
          "35:  buf[1] = rw;",
          "36:  buf[2] = (ut8)(file_len0 & 0xff);",
          "37:  memcpy (buf + 3, file, file_len0);",
          "38:  (void)r_socket_write (s, buf, 3 + file_len0);",
          "39:  r_socket_flush (s);",
          "41:  int fd = -1;",
          "42:  memset (buf, 0, 5);",
          "43:  int r = r_socket_read_block (s, (ut8*)buf, 5);",
          "44:  if (r == 5) {",
          "45:   if (buf[0] == (char)(RAP_PACKET_OPEN | RAP_PACKET_REPLY)) {",
          "46:    fd = r_read_at_be32 (buf + 1, 1);",
          "47:   } else {",
          "48:    eprintf (\"RapClientOpen: Bad packet 0x%02x\\n\", buf[0]);",
          "49:   }",
          "50:  } else {",
          "51:   eprintf (\"Cannot read 5 bytes from server\\n\");",
          "52:  }",
          "53:  free (buf);",
          "54:  return fd;",
          "55: }",
          "57: R_API char *r_socket_rap_client_command(RSocket *s, const char *cmd, RCoreBind *c) {",
          "58:  char *buf = malloc (strlen (cmd) + 8);",
          "59:  if (!buf) {",
          "60:   return NULL;",
          "61:  }",
          "63:  buf[0] = RAP_PACKET_CMD;",
          "64:  size_t i = strlen (cmd) + 1;",
          "65:  r_write_be32 (buf + 1, i);",
          "66:  memcpy (buf + 5, cmd, i);",
          "67:  r_socket_write (s, buf, 5 + i);",
          "68:  r_socket_flush (s);",
          "69:  free (buf);",
          "71:  char bufr[8];",
          "72:  r_socket_read_block (s, (ut8*)bufr, 5);",
          "73:  while (bufr[0] == (char)(RAP_PACKET_CMD)) {",
          "74:   size_t cmd_len = r_read_at_be32 (bufr, 1);",
          "75:   char *rcmd = calloc (1, cmd_len + 1);",
          "76:   if (rcmd) {",
          "77:    r_socket_read_block (s, (ut8*)rcmd, cmd_len);",
          "79:    char *res = c->cmdstr (c->core, rcmd);",
          "80:    if (res) {",
          "81:     int res_len = strlen (res) + 1;",
          "82:     ut8 *pkt = r_rap_packet ((RAP_PACKET_CMD | RAP_PACKET_REPLY), res_len);",
          "83:     r_rap_packet_fill (pkt, (const ut8*)res, res_len);",
          "84:     r_socket_write (s, pkt, 5 + res_len);",
          "85:     r_socket_flush (s);",
          "86:     free (res);",
          "87:     free (pkt);",
          "88:    }",
          "89:    free (rcmd);",
          "90:   }",
          "92:   bufr[0] = -1;",
          "93:   (void) r_socket_read_block (s, (ut8*)bufr, 5);",
          "94:  }",
          "95:  if (bufr[0] != (char)(RAP_PACKET_CMD | RAP_PACKET_REPLY)) {",
          "96:   eprintf (\"Error: Wrong reply for command 0x%02x\\n\", bufr[0]);",
          "97:   return NULL;",
          "98:  }",
          "99:  size_t cmd_len = r_read_at_be32 (bufr, 1);",
          "100:  if (cmd_len < 1 || cmd_len > 16384) {",
          "101:   eprintf (\"Error: cmd_len is wrong\\n\");",
          "102:   return NULL;",
          "103:  }",
          "104:  char *cmd_output = calloc (1, cmd_len + 1);",
          "105:  if (!cmd_output) {",
          "106:   eprintf (\"Error: Allocating cmd output\\n\");",
          "107:   return NULL;",
          "108:  }",
          "109:  r_socket_read_block (s, (ut8*)cmd_output, cmd_len);",
          "111:  cmd_output[cmd_len] = 0;",
          "112:  return cmd_output;",
          "113: }",
          "115: R_API int r_socket_rap_client_write(RSocket *s, const ut8 *buf, int count) {",
          "116:  ut8 *tmp;",
          "117:  int ret;",
          "118:  if (count < 1) {",
          "119:   return count;",
          "120:  }",
          "122:  if (count > RAP_PACKET_MAX) {",
          "123:   count = RAP_PACKET_MAX;",
          "124:  }",
          "125:  if (!(tmp = (ut8 *)malloc (count + 5))) {",
          "126:   eprintf (\"__rap_write: malloc failed\\n\");",
          "127:   return -1;",
          "128:  }",
          "129:  tmp[0] = RAP_PACKET_WRITE;",
          "130:  r_write_be32 (tmp + 1, count);",
          "131:  memcpy (tmp + 5, buf, count);",
          "133:  (void)r_socket_write (s, tmp, count + 5);",
          "134:  r_socket_flush (s);",
          "135:  if (r_socket_read_block (s, tmp, 5) != 5) { // TODO read_block?",
          "136:   eprintf (\"__rap_write: error\\n\");",
          "137:   ret = -1;",
          "138:  } else {",
          "139:   ret = r_read_be32 (tmp + 1);",
          "140:   if (!ret) {",
          "141:    ret = -1;",
          "142:   }",
          "143:  }",
          "144:  free (tmp);",
          "145:  return ret;",
          "146: }",
          "148: R_API int r_socket_rap_client_read(RSocket *s, ut8 *buf, int count) {",
          "149:  ut8 tmp[32];",
          "150:  if (count < 1) {",
          "151:   return count;",
          "152:  }",
          "153:  r_socket_block_time (s, 1, 1, 0);",
          "155:  if (count > RAP_PACKET_MAX) {",
          "156:   count = RAP_PACKET_MAX;",
          "157:  }",
          "159:  tmp[0] = RAP_PACKET_READ;",
          "160:  r_write_be32 (tmp + 1, count);",
          "161:  (void)r_socket_write (s, tmp, 5);",
          "162:  r_socket_flush (s);",
          "164:  int ret = r_socket_read_block (s, tmp, 5);",
          "165:  if (ret != 5 || tmp[0] != (RAP_PACKET_READ | RAP_PACKET_REPLY)) {",
          "166:   eprintf (\"__rap_read: Unexpected rap read reply \"",
          "167:    \"(%d=0x%02x) expected (%d=0x%02x)\\n\",",
          "168:    ret, tmp[0], 2, (RAP_PACKET_READ | RAP_PACKET_REPLY));",
          "169:   return -1;",
          "170:  }",
          "171:  int i = r_read_at_be32 (tmp, 1);",
          "172:  if (i > count) {",
          "173:   eprintf (\"__rap_read: Unexpected data size %d vs %d\\n\", i, count);",
          "174:   return -1;",
          "175:  }",
          "176:  r_socket_read_block (s, buf, i);",
          "177:  return count;",
          "178: }",
          "180: R_API int r_socket_rap_client_seek(RSocket *s, ut64 offset, int whence) {",
          "181:  ut8 tmp[10];",
          "182:  tmp[0] = RAP_PACKET_SEEK;",
          "183:  tmp[1] = (ut8)whence;",
          "184:  r_write_be64 (tmp + 2, offset);",
          "185:  (void)r_socket_write (s, &tmp, 10);",
          "186:  r_socket_flush (s);",
          "187:  int ret = r_socket_read_block (s, (ut8*)&tmp, 9);",
          "188:  if (ret != 9) {",
          "189:   eprintf (\"Truncated socket read\\n\");",
          "190:   return -1;",
          "191:  }",
          "192:  if (tmp[0] != (RAP_PACKET_SEEK | RAP_PACKET_REPLY)) {",
          "195:   eprintf (\"Unexpected seek reply (%02x -> %02x)\\n\", tmp[0], (RAP_PACKET_SEEK | RAP_PACKET_REPLY));",
          "196:   return -1;",
          "197:  }",
          "198:  return r_read_at_be64 (tmp, 1);",
          "199: }",
          "",
          "---------------"
        ],
        "libr/socket/rap_server.c||libr/socket/socket_rap_server.c": [
          "File: libr/socket/rap_server.c -> libr/socket/socket_rap_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_socket.h>",
          "4: #include <r_util.h>",
          "7:  r_return_val_if_fail (port, NULL);",
          "8:  RSocketRapServer *s = R_NEW0 (RSocketRapServer);",
          "9:  if (s) {",
          "",
          "[Removed Lines]",
          "6: R_API RSocketRapServer *r_socket_server_new (bool use_ssl, const char *port) {",
          "",
          "[Added Lines]",
          "6: R_API RSocketRapServer *r_socket_rap_server_new(bool use_ssl, const char *port) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:  return NULL;",
          "19: }",
          "22:  r_return_val_if_fail (pathname, NULL);",
          "23:  if (strlen (pathname) < 11) {",
          "24:   return NULL;",
          "",
          "[Removed Lines]",
          "21: R_API RSocketRapServer *r_socket_server_create (const char *pathname) {",
          "",
          "[Added Lines]",
          "21: R_API RSocketRapServer *r_socket_rap_server_create(const char *pathname) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:  }",
          "29:  bool is_ssl = (pathname[3] == 's');",
          "30:  const char *port = &pathname[7 + is_ssl];",
          "32: }",
          "35:  if (s) {",
          "36:   r_socket_free (s->fd);",
          "37:   free (s);",
          "38:  }",
          "39: }",
          "42:  r_return_val_if_fail (s && s->port && *s->port, false);",
          "43:  return r_socket_listen (s->fd, s->port, certfile);",
          "44: }",
          "47:  r_return_val_if_fail (s && s->fd, NULL);",
          "48:  return r_socket_accept (s->fd);",
          "49: }",
          "52:  r_return_val_if_fail (s && s->fd, false);",
          "54:  int i;",
          "",
          "[Removed Lines]",
          "31:  return r_socket_server_new (is_ssl, port);",
          "34: R_API void r_socket_server_free (RSocketRapServer *s) {",
          "41: R_API bool r_socket_server_listen (RSocketRapServer *s, const char *certfile) {",
          "46: R_API RSocket* r_socket_server_accept (RSocketRapServer *s) {",
          "51: R_API bool r_socket_server_continue (RSocketRapServer *s) {",
          "",
          "[Added Lines]",
          "31:  return r_socket_rap_server_new (is_ssl, port);",
          "34: R_API void r_socket_rap_server_free(RSocketRapServer *s) {",
          "41: R_API bool r_socket_rap_server_listen(RSocketRapServer *s, const char *certfile) {",
          "46: R_API RSocket* r_socket_rap_server_accept(RSocketRapServer *s) {",
          "51: R_API bool r_socket_rap_server_continue(RSocketRapServer *s) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "59:  }",
          "60:  r_socket_read_block (s->fd, s->buf, 1);",
          "61:  switch (s->buf[0]) {",
          "63:   r_socket_read_block (s->fd, &s->buf[1], 2);",
          "64:   r_socket_read_block (s->fd, &s->buf[3], (int)s->buf[2]);",
          "67:   r_socket_write (s->fd, s->buf, 5);",
          "68:   r_socket_flush (s->fd);",
          "69:   break;",
          "71:   r_socket_read_block (s->fd, &s->buf[1], 4);",
          "72:   i = r_read_be32 (&s->buf[1]);",
          "75:   }",
          "76:   s->read (s->user, &s->buf[5], i);",
          "78:   r_socket_write (s->fd, s->buf, i + 5);",
          "79:   r_socket_flush (s->fd);",
          "80:   break;",
          "82:   r_socket_read_block (s->fd, s->buf + 1, 4);",
          "83:   i = r_read_be32 (s->buf + 1);",
          "86:   }",
          "87:   r_socket_read_block (s->fd, s->buf + 5, i);",
          "88:   r_write_be32 (s->buf + 1, s->write (s->user, s->buf + 5, i));",
          "90:   r_socket_write (s->fd, s->buf, 5);",
          "91:   r_socket_flush (s->fd);",
          "92:   break;",
          "94:   {",
          "95:   r_socket_read_block (s->fd, &s->buf[1], 9);",
          "98:   offset = s->seek (s->user, offset, whence);",
          "101:   r_write_be64 (s->buf + 1, offset);",
          "102:   r_socket_write (s->fd, s->buf, 9);",
          "103:   r_socket_flush (s->fd);",
          "104:   }",
          "105:   break;",
          "107:   r_socket_read_block (s->fd, &s->buf[1], 4);",
          "108:   i = r_read_be32 (&s->buf[1]);",
          "109:   r_socket_read_block (s->fd, &s->buf[5], i);",
          "110:   ptr = s->cmd (s->user, (const char *)&s->buf[5]);",
          "111:   i = (ptr)? strlen (ptr) + 1: 0;",
          "112:   r_write_be32 (&s->buf[1], i);",
          "114:   r_socket_write (s->fd, s->buf, 5);",
          "115:   if (i) {",
          "116:    r_socket_write (s->fd, ptr, i);",
          "",
          "[Removed Lines]",
          "62:  case RAP_RMT_OPEN:",
          "65:   s->open (s->user, (const char *)&s->buf[3], (int)s->buf[1], 0);",
          "66:   s->buf[0] = RAP_RMT_OPEN | RAP_RMT_REPLY;",
          "70:  case RAP_RMT_READ:",
          "73:   if (i > RAP_RMT_MAX || i < 0) {",
          "74:    i = RAP_RMT_MAX;",
          "77:   s->buf[0] = RAP_RMT_READ | RAP_RMT_REPLY;",
          "81:  case RAP_RMT_WRITE:",
          "84:   if (i > RAP_RMT_MAX || i < 0) {",
          "85:    i = RAP_RMT_MAX;",
          "89:   s->buf[0] = RAP_RMT_WRITE | RAP_RMT_REPLY;",
          "93:  case RAP_RMT_SEEK:",
          "96:   int whence = s->buf[1];",
          "97:   ut64 offset = r_read_be64 (s->buf + 2);",
          "100:   s->buf[0] = RAP_RMT_SEEK | RAP_RMT_REPLY;",
          "106:  case RAP_RMT_CMD:",
          "113:   s->buf[0] = RAP_RMT_CMD | RAP_RMT_REPLY;",
          "",
          "[Added Lines]",
          "62:  case RAP_PACKET_OPEN:",
          "65:   {",
          "66:    int fd = s->open (s->user, (const char *)&s->buf[3], (int)s->buf[1], 0);",
          "67:    s->buf[0] = RAP_PACKET_OPEN | RAP_PACKET_REPLY;",
          "68:    eprintf (\"REPLY BACK %d\\n\", fd);",
          "69:    r_write_be32 (s->buf + 1, fd);",
          "70:   }",
          "74:  case RAP_PACKET_READ:",
          "77:   if (i > RAP_PACKET_MAX || i < 0) {",
          "78:    i = RAP_PACKET_MAX;",
          "81:   s->buf[0] = RAP_PACKET_READ | RAP_PACKET_REPLY;",
          "85:  case RAP_PACKET_WRITE:",
          "88:   if (i > RAP_PACKET_MAX || i < 0) {",
          "89:    i = RAP_PACKET_MAX;",
          "93:   s->buf[0] = RAP_PACKET_WRITE | RAP_PACKET_REPLY;",
          "97:  case RAP_PACKET_SEEK:",
          "100:   int whence = s->buf[0];",
          "101:   ut64 offset = r_read_be64 (s->buf + 1);",
          "104:   s->buf[0] = RAP_PACKET_SEEK | RAP_PACKET_REPLY;",
          "110:  case RAP_PACKET_CMD:",
          "117:   s->buf[0] = RAP_PACKET_CMD | RAP_PACKET_REPLY;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "118:   r_socket_flush (s->fd);",
          "119:   R_FREE (ptr);",
          "120:   break;",
          "122:   r_socket_read_block (s->fd, &s->buf[1], 4);",
          "123:   i = r_read_be32 (&s->buf[1]);",
          "124:   s->close (s->user, i);",
          "126:   r_socket_write (s->fd, s->buf, 5);",
          "127:   r_socket_flush (s->fd);",
          "128:   break;",
          "",
          "[Removed Lines]",
          "121:  case RAP_RMT_CLOSE:",
          "125:   s->buf[0] = RAP_RMT_CLOSE | RAP_RMT_REPLY;",
          "",
          "[Added Lines]",
          "125:  case RAP_PACKET_CLOSE:",
          "129:   s->buf[0] = RAP_PACKET_CLOSE | RAP_PACKET_REPLY;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21781aa0d1c97e075a338e091bf9ea46e6f192c7",
      "candidate_info": {
        "commit_hash": "21781aa0d1c97e075a338e091bf9ea46e6f192c7",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/21781aa0d1c97e075a338e091bf9ea46e6f192c7",
        "files": [
          "libr/bin/pdb/pdb_downloader.c",
          "libr/debug/p/debug_native.c"
        ],
        "message": "Fix #15734 - Automatically download PDB file if pdb.autoload=1 (#15738)\n\n* Automatically download PDB file if pdb.autoload=1\n* Don't re-download pdb if it already exists on the symstore\n* Only download if file doesn't exist",
        "before_after_code_files": [
          "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c",
          "libr/debug/p/debug_native.c||libr/debug/p/debug_native.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c"
          ],
          "candidate": [
            "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c": [
          "File: libr/bin/pdb/pdb_downloader.c -> libr/bin/pdb/pdb_downloader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  char *curl_cmd = NULL;",
          "32:  char *extractor_cmd = NULL;",
          "33:  char *abspath_to_archive = NULL;",
          "34:  char *archive_name = NULL;",
          "35:  size_t archive_name_len = 0;",
          "36:  char *symbol_store_path = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:  char *abspath_to_file = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:  user_agent = r_str_escape (opt->user_agent);",
          "65:  symbol_server = r_str_escape (opt->symbol_server);",
          "67:  if (checkExtract () || opt->extract == 0) {",
          "68:   res = 1;",
          "75:   curl_cmd = r_str_newf (\"curl -sfLA \\\"%s\\\" \\\"%s/%s/%s/%s\\\" --create-dirs -o \\\"%s\\\"\",",
          "76:                          user_agent,",
          "",
          "[Removed Lines]",
          "69:   abspath_to_archive = r_str_newf (\"%s%s%s%s%s%s%s\",",
          "70:           symbol_store_path, R_SYS_DIR,",
          "71:           dbg_file, R_SYS_DIR,",
          "72:           guid, R_SYS_DIR,",
          "73:           archive_name_escaped);",
          "",
          "[Added Lines]",
          "68:  abspath_to_archive = r_str_newf (\"%s%s%s%s%s%s%s\",",
          "69:        symbol_store_path, R_SYS_DIR,",
          "70:        dbg_file, R_SYS_DIR,",
          "71:        guid, R_SYS_DIR,",
          "72:        archive_name_escaped);",
          "74:  abspath_to_file = strdup (abspath_to_archive);",
          "75:  abspath_to_file[strlen (abspath_to_file) - 1] = 'b';",
          "76:  if (r_file_exists (abspath_to_file)) {",
          "77:   eprintf (\"File already downloaded.\\n\");",
          "78:   return 1;",
          "79:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82: #if __WINDOWS__",
          "83:   const char *cabextractor = \"expand\";",
          "84:   const char *format = \"%s %s %s\";",
          "",
          "[Removed Lines]",
          "85:   char *abspath_to_file = strdup (abspath_to_archive);",
          "86:   abspath_to_file[strlen (abspath_to_file) - 1] = 'b';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:   extractor_cmd = r_str_newf (format, cabextractor, abspath_to_dir, abspath_to_archive);",
          "102:   R_FREE (abspath_to_dir);",
          "103: #endif",
          "105:   if ((cmd_ret = r_sys_cmd (curl_cmd) != 0)) {",
          "106:    eprintf(\"curl exited with error %d\\n\", cmd_ret);",
          "107:    res = 0;",
          "",
          "[Removed Lines]",
          "104:   eprintf (\"Attempting to download compressed pdb in %s\\n\",abspath_to_archive);",
          "",
          "[Added Lines]",
          "111:   eprintf (\"Attempting to download compressed pdb in %s\\n\", abspath_to_archive);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:    r_file_rm (abspath_to_archive);",
          "116:   }",
          "117:   R_FREE (curl_cmd);",
          "119:  }",
          "120:  if (res == 0) {",
          "121:   eprintf (\"Falling back to uncompressed pdb\\n\");",
          "122:   res = 1;",
          "132:   curl_cmd = r_str_newf (\"curl -sfLA \\\"%s\\\" \\\"%s/%s/%s/%s\\\" --create-dirs -o \\\"%s\\\"\",",
          "133:                          opt->user_agent,",
          "",
          "[Removed Lines]",
          "118:   R_FREE (abspath_to_archive);",
          "123:   archive_name[archive_name_len - 1] = 'b';",
          "124:   R_FREE (archive_name_escaped);",
          "125:   archive_name_escaped = r_str_escape (archive_name);",
          "126:   abspath_to_archive = r_str_newf(\"%s%s%s%s%s%s%s\",",
          "127:       symbol_store_path, R_SYS_DIR,",
          "128:       dbg_file, R_SYS_DIR,",
          "129:       guid, R_SYS_DIR,",
          "130:       archive_name_escaped);",
          "",
          "[Added Lines]",
          "130:   archive_name_escaped[strlen (archive_name_escaped) - 1] = 'b';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "135:                          opt->dbg_file,",
          "136:                          opt->guid,",
          "137:                          archive_name_escaped,",
          "140:   if ((cmd_ret = r_sys_cmd (curl_cmd) != 0)) {",
          "141:    eprintf(\"curl exited with error %d\\n\", cmd_ret);",
          "142:    res = 0;",
          "143:   }",
          "144:   R_FREE (curl_cmd);",
          "146:  }",
          "147:  R_FREE (archive_name);",
          "148:  R_FREE (extractor_cmd);",
          "149:  R_FREE (symbol_store_path);",
          "",
          "[Removed Lines]",
          "138:                          abspath_to_archive);",
          "139:   eprintf (\"Attempting to download uncompressed pdb in %s\\n\",abspath_to_archive);",
          "145:   R_FREE (abspath_to_archive);",
          "",
          "[Added Lines]",
          "138:                          abspath_to_file);",
          "139:   eprintf (\"Attempting to download uncompressed pdb in %s\\n\", abspath_to_file);",
          "146:  R_FREE (abspath_to_archive);",
          "147:  R_FREE (abspath_to_file);",
          "",
          "---------------"
        ],
        "libr/debug/p/debug_native.c||libr/debug/p/debug_native.c": [
          "File: libr/debug/p/debug_native.c -> libr/debug/p/debug_native.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:    RCore *core = dbg->corebind.core;",
          "329:    bool autoload_pdb = dbg->corebind.cfggeti (core, \"pdb.autoload\");",
          "330:    if (autoload_pdb) {",
          "333:     int fd = atoi (o_res);",
          "334:     free (o_res);",
          "342:     }",
          "345:    }",
          "346:    r_debug_info_free (r);",
          "347:   } else {",
          "349:    r_cons_printf (\"Loading unknown library.\\n\");",
          "350:    r_cons_flush ();",
          "351:   }",
          "",
          "[Removed Lines]",
          "331:     dbg->corebind.cmdf (core, \"o %s 0x%p\", ((PLIB_ITEM)(r->lib))->Path, ((PLIB_ITEM)(r->lib))->BaseOfDll);",
          "332:     char *o_res = dbg->corebind.cmdstrf (core, \"o~+%s\", ((PLIB_ITEM)(r->lib))->Path);",
          "335:     char *pdb_path = dbg->corebind.cmdstr (core, \"i~pdb\");",
          "336:     if (*pdb_path == 0) {",
          "337:      eprintf (\"Failure...\\n\");",
          "338:      dbg->corebind.cmd (core, \"i\");",
          "339:     } else {",
          "340:      pdb_path = strchr (pdb_path, ' ') + 1;",
          "341:      dbg->corebind.cmdf (core, \"idp\");",
          "343:     free (pdb_path);",
          "344:     dbg->corebind.cmdf (core, \"o-%d\", fd);",
          "",
          "[Added Lines]",
          "331:     PLIB_ITEM lib = r->lib;",
          "332:     dbg->corebind.cmdf (core, \"\\\"o \\\\\\\"%s\\\\\\\" 0x%p\\\"\", lib->Path, lib->BaseOfDll);",
          "333:     char *o_res = dbg->corebind.cmdstrf (core, \"o~+%s\", lib->Name);",
          "336:     if (fd) {",
          "337:      char *pdb_file = dbg->corebind.cmdstr (core, \"i~dbg_file\");",
          "338:      if (pdb_file && (r_str_trim (pdb_file), *pdb_file)) {",
          "339:       if (!r_file_exists (pdb_file + 9)) {",
          "340:        dbg->corebind.cmdf (core, \"idpd\");",
          "341:       }",
          "342:       dbg->corebind.cmdf (core, \"idp\");",
          "343:      }",
          "344:      dbg->corebind.cmdf (core, \"o-%d\", fd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4de5c5113a80c6af7168d6e4e97ae80c39d9c92",
      "candidate_info": {
        "commit_hash": "b4de5c5113a80c6af7168d6e4e97ae80c39d9c92",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/b4de5c5113a80c6af7168d6e4e97ae80c39d9c92",
        "files": [
          "libr/anal/sign.c",
          "libr/bin/bin.c",
          "libr/bin/demangle.c",
          "libr/bin/p/bin_dex.c",
          "libr/bin/p/bin_qnx.c",
          "libr/bin/p/bin_xnu_kernelcache.c",
          "libr/bin/pdb/pdb_downloader.c",
          "libr/cons/hud.c",
          "libr/core/canal.c",
          "libr/core/cmd.c",
          "libr/core/cmd_anal.c",
          "libr/core/cmd_flag.c",
          "libr/core/cmd_open.c",
          "libr/core/cmd_write.c",
          "libr/lang/p/v.c",
          "libr/main/rabin2.c"
        ],
        "message": "Some more coverity fixes (#15802)",
        "before_after_code_files": [
          "libr/anal/sign.c||libr/anal/sign.c",
          "libr/bin/bin.c||libr/bin/bin.c",
          "libr/bin/demangle.c||libr/bin/demangle.c",
          "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c",
          "libr/bin/p/bin_qnx.c||libr/bin/p/bin_qnx.c",
          "libr/bin/p/bin_xnu_kernelcache.c||libr/bin/p/bin_xnu_kernelcache.c",
          "libr/bin/pdb/pdb_downloader.c||libr/bin/pdpdb_downloader.c",
          "libr/cons/hud.c||libr/cons/hud.c",
          "libr/core/canal.c||libr/core/canal.c",
          "libr/core/cmd.c||libr/core/cmd.c",
          "libr/core/cmd_anal.c||libr/core/cmd_anal.c",
          "libr/core/cmd_flag.c||libr/core/cmd_flag.c",
          "libr/core/cmd_open.c||libr/core/cmd_open.c",
          "libr/core/cmd_write.c||libr/core/cmd_write.c",
          "libr/lang/p/v.c||libr/lang/p/v.c",
          "libr/main/rabin2.c||libr/main/rabin2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c"
          ],
          "candidate": [
            "libr/bin/pdb/pdb_downloader.c||libr/bin/pdpdb_downloader.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/anal/sign.c||libr/anal/sign.c": [
          "File: libr/anal/sign.c -> libr/anal/sign.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:   free (hexgraph);",
          "421:   free (refs);",
          "422:   free (vars);",
          "423:  }",
          "424: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423:   free (xrefs);",
          "424:   free (types);",
          "",
          "---------------"
        ],
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1008:  if (binfile && binfile->curxtr) {",
          "1009:   list_xtr_archs (bin, mode);",
          "1010:   return;",
          "1011:  }",
          "1012:  Sdb *binfile_sdb = binfile? binfile->sdb: NULL;",
          "1013:  if (!binfile_sdb) {",
          "1015:   return;",
          "1016:  }",
          "1017:  if (!binfile) {",
          "1019:   return;",
          "1020:  }",
          "1021:  sdb_unset (binfile_sdb, ARCHS_KEY, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1010:   r_table_free (table);",
          "1016:   r_table_free (table);",
          "1021:   r_table_free (table);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1028:  RBinFile *nbinfile = r_bin_file_find_by_name_n (bin, name, i);",
          "1029:  if (!nbinfile) {",
          "1030:   pj_free (pj);",
          "1031:   return;",
          "1032:  }",
          "1033:  i = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1034:   r_table_free (table);",
          "",
          "---------------"
        ],
        "libr/bin/demangle.c||libr/bin/demangle.c": [
          "File: libr/bin/demangle.c -> libr/bin/demangle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  RBin *bin = bf? bf->rbin: NULL;",
          "71:  RBinObject *o = bf? bf->o: NULL;",
          "72:  RListIter *iter;",
          "74:  if (!strncmp (str, \"reloc.\", 6)) {",
          "75:   str += 6;",
          "76:  }",
          "",
          "[Removed Lines]",
          "73:  const char *lib;",
          "",
          "[Added Lines]",
          "73:  const char *lib = NULL;",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c": [
          "File: libr/bin/p/bin_dex.c -> libr/bin/p/bin_dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1553:       dex->header.data_offset + dex->header.data_size) {",
          "1554:   int types_list_size = r_buf_read_le32_at (bf->buf, c->interfaces_offset);",
          "1555:   if (types_list_size < 0 || types_list_size >= dex->header.types_size ) {",
          "1556:    return;",
          "1557:   }",
          "1558:   for (z = 0; z < types_list_size; z++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1556:    free (str);",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_qnx.c||libr/bin/p/bin_qnx.c": [
          "File: libr/bin/p/bin_qnx.c -> libr/bin/p/bin_qnx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:  return true;",
          "136: beach:",
          "137:  free (qo);",
          "138:  return false;",
          "139: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:  r_list_free (fixups);",
          "139:  r_list_free (sections);",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_xnu_kernelcache.c||libr/bin/p/bin_xnu_kernelcache.c": [
          "File: libr/bin/p/bin_xnu_kernelcache.c -> libr/bin/p/bin_xnu_kernelcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:  RPrelinkRange *prelink_range = R_NEW0 (RPrelinkRange);",
          "264:  if (!prelink_range) {",
          "265:   return NULL;",
          "266:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:   R_FREE (sections);",
          "",
          "---------------"
        ],
        "libr/bin/pdb/pdb_downloader.c||libr/bin/pdpdb_downloader.c": [
          "File: libr/bin/pdb/pdb_downloader.c -> libr/bin/pdpdb_downloader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   R_FREE (abspath_to_archive);",
          "80:   R_FREE (archive_name_escaped);",
          "81:   R_FREE (symbol_store_path);",
          "82:   R_FREE (guid);",
          "83:   R_FREE (archive_name);",
          "84:   R_FREE (abspath_to_file);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/cons/hud.c||libr/cons/hud.c": [
          "File: libr/cons/hud.c -> libr/cons/hud.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:   (void) r_line_readline ();",
          "253:   memset (user_input, 0, HUD_BUF_SIZE);",
          "254:   memset (hud_prompt, 0, HUD_BUF_SIZE + 1);",
          "256:   strcpy (hud_prompt, user_input);      // to display",
          "257:   int i;",
          "258:   for (i = I(line)->buffer.length; i > I(line)->buffer.index; i--) {",
          "",
          "[Removed Lines]",
          "255:   strcpy (user_input, I(line)->buffer.data);     // to search",
          "",
          "[Added Lines]",
          "255:   strncpy (user_input, I(line)->buffer.data, HUD_BUF_SIZE - 1);     // to search",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:      r_cons_show_cursor (true);",
          "270:      r_cons_set_raw (false);",
          "271:      return strdup (selected_entry);",
          "273:    } else {",
          "274:     goto _beach;",
          "275:    }",
          "",
          "[Removed Lines]",
          "272:     }",
          "",
          "[Added Lines]",
          "272:     }",
          "",
          "---------------"
        ],
        "libr/core/canal.c||libr/core/canal.c": [
          "File: libr/core/canal.c -> libr/core/canal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3105:   r_list_sort (fcns, cmpaddr);",
          "3106:   RList *flist = r_list_newf ((RListFree) r_listinfo_free);",
          "3107:   if (!flist) {",
          "3108:    return -1;",
          "3109:   }",
          "3110:   ls_foreach (fcns, iter, fcn) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3108:    r_list_free (fcns);",
          "",
          "---------------"
        ],
        "libr/core/cmd.c||libr/core/cmd.c": [
          "File: libr/core/cmd.c -> libr/core/cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "916:    if (nl) {",
          "918:    }",
          "920:   }",
          "921:   r_sandbox_close (fd);",
          "922:  }",
          "",
          "[Removed Lines]",
          "919:    return strdup (firstLine + 2);",
          "",
          "[Added Lines]",
          "919:    nl = strdup (firstLine + 2);",
          "920:    r_sandbox_close (fd);",
          "921:    return nl;",
          "",
          "---------------"
        ],
        "libr/core/cmd_anal.c||libr/core/cmd_anal.c": [
          "File: libr/core/cmd_anal.c -> libr/core/cmd_anal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9640:  }",
          "9641:  RAnalOp* op = r_core_anal_op (core, pcv, -1);",
          "9642:  if (!op) {",
          "9643:   return;",
          "9644:  }",
          "9645: bool go_on = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9643:   r_strbuf_free (sb);",
          "",
          "---------------"
        ],
        "libr/core/cmd_flag.c||libr/core/cmd_flag.c": [
          "File: libr/core/cmd_flag.c -> libr/core/cmd_flag.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "470:    r_cons_printf (\"ft %s %s\\n\", tag, flags);",
          "471:   }",
          "472:   r_list_free (list);",
          "473:   return;",
          "474:  }",
          "475:  if (mode == 'j') { // \"ftj\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473:   free (inp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489:   }",
          "490:   pj_end (pj);",
          "491:   r_list_free (list);",
          "492:   r_cons_printf (\"%s\\n\", pj_string (pj));",
          "493:   pj_free (pj);",
          "494:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:   free (inp);",
          "",
          "---------------"
        ],
        "libr/core/cmd_open.c||libr/core/cmd_open.c": [
          "File: libr/core/cmd_open.c -> libr/core/cmd_open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1789:     }",
          "1790:    }",
          "1791:    if ((fdx == -1) || (fd == -1) || (fdx == fd)) {",
          "1792:     break;",
          "1793:    }",
          "1794:    r_io_desc_exchange (core->io, fd, fdx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1792:     free (inp);",
          "",
          "---------------"
        ],
        "libr/core/cmd_write.c||libr/core/cmd_write.c": [
          "File: libr/core/cmd_write.c -> libr/core/cmd_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:  }",
          "231:  if (!no_key_mode && keylen < 1) {",
          "232:   eprintf (\"%s key not defined. Use -S [key]\\n\", ((!direction) ? \"Encryption\" : \"Decryption\"));",
          "233:   return false;",
          "234:  }",
          "235:  RCrypto *cry = r_crypto_new ();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:   free (binkey);",
          "",
          "---------------"
        ],
        "libr/lang/p/v.c||libr/lang/p/v.c": [
          "File: libr/lang/p/v.c -> libr/lang/p/v.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:  char *buf = r_str_newf (\"v -cflags '-shared -fPIC' -o %s %s\", shl, file);",
          "88:  free (name);",
          "89:  if (r_sandbox_system (buf, 1) != 0) {",
          "90:   free (buf);",
          "91:   return false;",
          "92:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:   free (shl);",
          "",
          "---------------"
        ],
        "libr/main/rabin2.c||libr/main/rabin2.c": [
          "File: libr/main/rabin2.c -> libr/main/rabin2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "997:    }",
          "998:   }",
          "999:   r_core_fini (&core);",
          "1000:   return rc;",
          "1001:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1000:   r_list_free (files);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d761f6a88ee603a34b747c5a226f24d6b172447",
      "candidate_info": {
        "commit_hash": "9d761f6a88ee603a34b747c5a226f24d6b172447",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/9d761f6a88ee603a34b747c5a226f24d6b172447",
        "files": [
          "libr/anal/p/anal_riscv.c",
          "libr/anal/var.c",
          "libr/asm/arch/8051/8051_ass.c",
          "libr/asm/arch/arm/armass64.c",
          "libr/asm/asm.c",
          "libr/asm/p/asm_i4004.c",
          "libr/asm/p/asm_x86_nz.c",
          "libr/bin/mangling/microsoft_demangle.c",
          "libr/bin/pdb/pdb_downloader.c",
          "libr/cons/cons.c",
          "libr/core/cmd.c",
          "libr/core/cmd_anal.c",
          "libr/core/core.c",
          "libr/core/disasm.c",
          "libr/core/project.c",
          "libr/core/visual.c",
          "libr/lang/p/spp_r2.inc",
          "libr/main/rax2.c",
          "libr/search/keyword.c",
          "libr/util/print.c",
          "libr/util/unum.c",
          "shlr/gdb/src/gdbclient/core.c",
          "shlr/gdb/src/gdbclient/responses.c",
          "shlr/gdb/src/gdbclient/xml.c",
          "shlr/gdb/src/gdbserver/core.c",
          "shlr/gdb/src/utils.c",
          "shlr/mpc/mpc.c",
          "shlr/sdb/src/query.c"
        ],
        "message": "Avoid array subscript type issues (#18295)\n\nCast char to unsigned char for standard reasons and security purposes.\n\nFixes build issues on NetBSD.",
        "before_after_code_files": [
          "libr/anal/p/anal_riscv.c||libr/anal/p/anal_riscv.c",
          "libr/anal/var.c||libr/anal/var.c",
          "libr/asm/arch/8051/8051_ass.c||libr/asm/arch/8051/8051_ass.c",
          "libr/asm/arch/arm/armass64.c||libr/asm/arch/arm/armass64.c",
          "libr/asm/asm.c||libr/asm/asm.c",
          "libr/asm/p/asm_i4004.c||libr/asm/p/asm_i4004.c",
          "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c",
          "libr/bin/mangling/microsoft_demangle.c||libr/bin/mangling/microsoft_demangle.c",
          "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c",
          "libr/cons/cons.c||libr/cons/cons.c",
          "libr/core/cmd.c||libr/core/cmd.c",
          "libr/core/cmd_anal.c||libr/core/cmd_anal.c",
          "libr/core/core.c||libr/core/core.c",
          "libr/core/disasm.c||libr/core/disasm.c",
          "libr/core/project.c||libr/core/project.c",
          "libr/core/visual.c||libr/core/visual.c",
          "libr/lang/p/spp_r2.inc||libr/lang/p/spp_r2.inc",
          "libr/main/rax2.c||libr/main/rax2.c",
          "libr/search/keyword.c||libr/search/keyword.c",
          "libr/util/print.c||libr/util/print.c",
          "libr/util/unum.c||libr/util/unum.c",
          "shlr/gdb/src/gdbclient/core.c||shlr/gdb/src/gdbclient/core.c",
          "shlr/gdb/src/gdbclient/responses.c||shlr/gdb/src/gdbclient/responses.c",
          "shlr/gdb/src/gdbclient/xml.c||shlr/gdb/src/gdbclient/xml.c",
          "shlr/gdb/src/gdbserver/core.c||shlr/gdb/src/gdbserver/core.c",
          "shlr/gdb/src/utils.c||shlr/gdb/src/utils.c",
          "shlr/mpc/mpc.c||shlr/mpc/mpc.c",
          "shlr/sdb/src/query.c||shlr/sdb/src/query.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c"
          ],
          "candidate": [
            "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/anal/p/anal_riscv.c||libr/anal/p/anal_riscv.c": [
          "File: libr/anal/p/anal_riscv.c -> libr/anal/p/anal_riscv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "651:    op->dst->delta = (st64)r_num_get (NULL, args.arg[0]);",
          "652:    op->dst->reg = r_reg_get (anal->reg, args.arg[1], -1);",
          "653:    j = 2;",
          "655:    op->dst->imm = r_num_get (NULL, args.arg[0]);",
          "656:   } else {",
          "657:    op->dst->reg = r_reg_get (anal->reg, args.arg[0], -1);",
          "",
          "[Removed Lines]",
          "654:   } else if (isdigit (args.arg[j][0])) {",
          "",
          "[Added Lines]",
          "654:   } else if (isdigit ((unsigned char)args.arg[j][0])) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "663:     op->src[i]->delta = (st64)r_num_get (NULL, args.arg[j]);",
          "664:     op->src[i]->reg = r_reg_get (anal->reg, args.arg[j + 1], -1);",
          "665:     j++;",
          "667:     op->src[i]->reg = r_reg_get (anal->reg, args.arg[j], -1);",
          "668:    } else {",
          "669:     op->src[i]->imm = r_num_get (NULL, args.arg[j]);",
          "",
          "[Removed Lines]",
          "666:    } else if (isalpha (args.arg[j][0])) {",
          "",
          "[Added Lines]",
          "666:    } else if (isalpha ((unsigned char)args.arg[j][0])) {",
          "",
          "---------------"
        ],
        "libr/anal/var.c||libr/anal/var.c": [
          "File: libr/anal/var.c -> libr/anal/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352: }",
          "354: R_API bool r_anal_var_check_name(const char *name) {",
          "356: }",
          "358: R_API bool r_anal_var_rename(RAnalVar *var, const char *new_name, bool verbose) {",
          "",
          "[Removed Lines]",
          "355:  return !isdigit (*name) && strcspn (name, \"., =/\");",
          "",
          "[Added Lines]",
          "355:  return !isdigit ((unsigned char)*name) && strcspn (name, \"., =/\");",
          "",
          "---------------"
        ],
        "libr/asm/arch/8051/8051_ass.c||libr/asm/arch/8051/8051_ass.c": [
          "File: libr/asm/arch/8051/8051_ass.c -> libr/asm/arch/8051/8051_ass.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:   if (!*a || !*b) {",
          "240:    break;",
          "241:   }",
          "243:    a += 1;",
          "244:    continue;",
          "245:   }",
          "247:    b += 1;",
          "248:    continue;",
          "249:   }",
          "251:    a += 1;",
          "252:    b += 1;",
          "253:    continue;",
          "",
          "[Removed Lines]",
          "242:   if (isspace (*a)) {",
          "246:   if (isspace (*b)) {",
          "250:   if (tolower (*a) == tolower (*b)) {",
          "",
          "[Added Lines]",
          "242:   if (isspace ((unsigned char)*a)) {",
          "246:   if (isspace ((unsigned char)*b)) {",
          "250:   if (tolower ((unsigned char)*a) == tolower ((unsigned char)*b)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:  }",
          "279:  while (pattern[ti] != '\\0') {",
          "281:    si += 1;",
          "282:   }",
          "284:    ti += 1;",
          "285:    continue;",
          "286:   }",
          "288:    si += 1;",
          "289:    ti += 1;",
          "290:   }",
          "",
          "[Removed Lines]",
          "280:   while (isspace (str[si]) && !isspace (pattern[ti])) {",
          "283:   if (isspace (pattern[ti])) {",
          "287:   if (tolower (pattern[ti]) == tolower (str[si])) {",
          "",
          "[Added Lines]",
          "280:   while (isspace ((unsigned char)str[si]) && !isspace ((unsigned char)pattern[ti])) {",
          "283:   if (isspace ((unsigned char)pattern[ti])) {",
          "287:   if (tolower ((unsigned char)pattern[ti]) == tolower ((unsigned char)str[si])) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:  if (str[0] == '@' ) {",
          "328:   return r_str_ansi_nlen (str, 4) == 3",
          "330:    && (str[2] == '0' || str[2] == '1');",
          "331:  }",
          "333:  if (str[0] == '[' ) {",
          "334:   return r_str_ansi_nlen (str, 5) == 4",
          "336:    && (str[2] == '0' || str[2] == '1')",
          "337:    && str[3] == ']';",
          "338:  }",
          "",
          "[Removed Lines]",
          "329:    && tolower (str[1]) == 'r'",
          "335:    && tolower (str[1]) == 'r'",
          "",
          "[Added Lines]",
          "329:    && tolower ((unsigned char)str[1]) == 'r'",
          "335:    && tolower ((unsigned char)str[1]) == 'r'",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "346: static bool is_reg(char const*str)",
          "347: {",
          "349:   && '0' <= str[1] && str[1] <= '7';",
          "350: }",
          "",
          "[Removed Lines]",
          "348:  return str && tolower (str[0]) == 'r' && r_str_ansi_nlen (str, 3) == 2",
          "",
          "[Added Lines]",
          "348:  return str && tolower ((unsigned char)str[0]) == 'r' && r_str_ansi_nlen (str, 3) == 2",
          "",
          "---------------"
        ],
        "libr/asm/arch/arm/armass64.c||libr/asm/arch/arm/armass64.c": [
          "File: libr/asm/arch/arm/armass64.c -> libr/asm/arch/arm/armass64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1067:    if (*token == '#') {",
          "1068:     token++;",
          "1069:    }",
          "1071:     return false;",
          "1072:    }",
          "1073:    op->operands[operand].shift_amount = r_num_math (NULL, token);",
          "",
          "[Removed Lines]",
          "1070:    if (!*token || !isdigit(*token)) {",
          "",
          "[Added Lines]",
          "1070:    if (!*token || !isdigit((unsigned char)*token)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1091:     present = true;",
          "1092:     ++token;",
          "1093:    }",
          "1095:     if (present) {",
          "1096:      return false;",
          "1097:     }",
          "",
          "[Removed Lines]",
          "1094:    if (!*token || !isdigit(*token)) {",
          "",
          "[Added Lines]",
          "1094:    if (!*token || !isdigit((unsigned char)*token)) {",
          "",
          "---------------"
        ],
        "libr/asm/asm.c||libr/asm/asm.c": [
          "File: libr/asm/asm.c -> libr/asm/asm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:     if (cptr && ptr && cptr < ptr) {",
          "825:      likely_comment = false;",
          "826:      for (cptr += 1; cptr < ptr ; cptr += 1) {",
          "828:        likely_comment = true;",
          "829:        break;",
          "830:       }",
          "",
          "[Removed Lines]",
          "827:       if ( ! isspace ( *cptr)) {",
          "",
          "[Added Lines]",
          "827:       if ( ! isspace ((unsigned char) *cptr)) {",
          "",
          "---------------"
        ],
        "libr/asm/p/asm_i4004.c||libr/asm/p/asm_i4004.c": [
          "File: libr/asm/p/asm_i4004.c -> libr/asm/p/asm_i4004.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:    goto beach;",
          "52:   }",
          "53:   strncpy (mnemonic, str, n);",
          "55:   n = strcspn (p, \", \"); // next separator",
          "56:   if (n > sizeof (arg0) - 1) {",
          "57:    goto beach;",
          "",
          "[Removed Lines]",
          "54:   while (*++p && isspace (*p));",
          "",
          "[Added Lines]",
          "54:   while (*++p && isspace ((unsigned char)*p));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:    while (*++p) {",
          "64:     if (*p == ',') {",
          "65:      comma++;",
          "67:      break;",
          "68:     }",
          "69:    }",
          "",
          "[Removed Lines]",
          "66:     } else if (!isspace(*p)) {",
          "",
          "[Added Lines]",
          "66:     } else if (!isspace((unsigned char)*p)) {",
          "",
          "---------------"
        ],
        "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c": [
          "File: libr/asm/p/asm_x86_nz.c -> libr/asm/p/asm_x86_nz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4613:   if (parn) {",
          "4614:    token++;",
          "4615:   }",
          "4617:    int n = token[2];",
          "4618:    if (n >= '0' && n <= '7') {",
          "4619:     if (parn) {",
          "",
          "[Removed Lines]",
          "4616:   if (isdigit (token[2]) && !isdigit(token[3])) {",
          "",
          "[Added Lines]",
          "4616:   if (isdigit ((unsigned char)token[2]) && !isdigit((unsigned char)token[3])) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4634:   if (parn) {",
          "4635:    token++;",
          "4636:   }",
          "4638:    int n = token[2];",
          "4639:    if (n >= '0' && n <= '7') {",
          "4640:     if (parn) {",
          "",
          "[Removed Lines]",
          "4637:   if (isdigit (token[2]) && !isdigit(token[3])) {",
          "",
          "[Added Lines]",
          "4637:   if (isdigit ((unsigned char)token[2]) && !isdigit((unsigned char)token[3])) {",
          "",
          "---------------"
        ],
        "libr/bin/mangling/microsoft_demangle.c||libr/bin/mangling/microsoft_demangle.c": [
          "File: libr/bin/mangling/microsoft_demangle.c -> libr/bin/mangling/microsoft_demangle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:    }",
          "227:    sym += ret + 1;",
          "228:    SDataType data_type;",
          "230:     err = parse_data_type (sym, &data_type, &ret);",
          "232:     free (data_type.left);",
          "",
          "[Removed Lines]",
          "229:    if (isdigit (*sym)) {",
          "",
          "[Added Lines]",
          "229:    if (isdigit ((unsigned char)*sym)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1921:   curr_pos++;",
          "1922:  }",
          "1925:   err = parse_data_type (curr_pos, &data_type, &len);",
          "1926:   if (err != eDemanglerErrOK) {",
          "1927:    goto parse_microsoft_mangled_name_err;",
          "",
          "[Removed Lines]",
          "1924:  if (isdigit (*curr_pos)) {",
          "",
          "[Added Lines]",
          "1924:  if (isdigit ((unsigned char)*curr_pos)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1936:   free (data_type.left);",
          "1937:   free (data_type.right);",
          "1939:   err = parse_function (curr_pos, &type_code_str, demangled_name, &len);",
          "1940:   curr_pos += len;",
          "1941:  } else {",
          "",
          "[Removed Lines]",
          "1938:  } else if (isalpha (*curr_pos)) {",
          "",
          "[Added Lines]",
          "1938:  } else if (isalpha ((unsigned char)*curr_pos)) {",
          "",
          "---------------"
        ],
        "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c": [
          "File: libr/bin/pdb/pdb_downloader.c -> libr/bin/pdb/pdb_downloader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:  }",
          "164:  size_t i;",
          "165:  for (i = 0; guid[i]; i++) {",
          "167:    return false;",
          "168:   }",
          "169:  }",
          "",
          "[Removed Lines]",
          "166:   if (!isxdigit (guid[i])) {",
          "",
          "[Added Lines]",
          "166:   if (!isxdigit ((unsigned char)guid[i])) {",
          "",
          "---------------"
        ],
        "libr/cons/cons.c||libr/cons/cons.c": [
          "File: libr/cons/cons.c -> libr/cons/cons.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:  if (isatty (fileno (stdin))) {",
          "415:   if (write (1, R_CONS_GET_CURSOR_POSITION, sizeof (R_CONS_GET_CURSOR_POSITION)) != -1) {",
          "416:    if (read (0, buf, sizeof (buf)) != sizeof (buf)) {",
          "418:      curline = (buf[2] - '0');",
          "420:      curline = curline * 10 + (buf[3] - '0');",
          "421:     }",
          "422:    }",
          "",
          "[Removed Lines]",
          "417:     if (isdigit (buf[2])) {",
          "419:     } if (isdigit (buf[3])) {",
          "",
          "[Added Lines]",
          "417:     if (isdigit ((unsigned char)buf[2])) {",
          "419:     } if (isdigit ((unsigned char)buf[3])) {",
          "",
          "---------------"
        ],
        "libr/core/cmd.c||libr/core/cmd.c": [
          "File: libr/core/cmd.c -> libr/core/cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1412:      free (ss);",
          "1413:      continue;",
          "1414:     }",
          "1416:      int col = r_list_length (items);",
          "1417:      RTableColumn *c = r_list_get_n (t->cols, col);",
          "1418:      if (c) {",
          "",
          "[Removed Lines]",
          "1415:     if (isdigit (*ss)) {",
          "",
          "[Added Lines]",
          "1415:     if (isdigit ((unsigned char)*ss)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5066:     s++;",
          "5067:    }",
          "5068:   }",
          "5071:   }",
          "5072:   s++;",
          "",
          "[Removed Lines]",
          "5069:   if (isspace (*s)) {",
          "",
          "[Added Lines]",
          "5069:   if (isspace ((unsigned char)*s)) {",
          "",
          "---------------"
        ],
        "libr/core/cmd_anal.c||libr/core/cmd_anal.c": [
          "File: libr/core/cmd_anal.c -> libr/core/cmd_anal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8053:  case 'i': // \"ahi\"",
          "8054:   if (input[1] == '?') {",
          "8055:    r_core_cmd_help (core, help_msg_ahi);",
          "8057:    r_anal_hint_set_nword (core->anal, core->offset, input[1] - '0');",
          "8058:    input++;",
          "8059:   } else if (input[1] == '-') { // \"ahi-\"",
          "",
          "[Removed Lines]",
          "8056:   } else if (isdigit (input[1])) {",
          "",
          "[Added Lines]",
          "8056:   } else if (isdigit ((unsigned char)input[1])) {",
          "",
          "---------------"
        ],
        "libr/core/core.c||libr/core/core.c": [
          "File: libr/core/core.c -> libr/core/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:  int i, ret;",
          "445:  int n = 1;",
          "447:   n = atoi (input);",
          "448:  } else if (input[0] == '{') {",
          "449:   n = atoi (input + 1);",
          "",
          "[Removed Lines]",
          "446:  if (isdigit (input[0])) {",
          "",
          "[Added Lines]",
          "446:  if (isdigit ((unsigned char)input[0])) {",
          "",
          "---------------"
        ],
        "libr/core/disasm.c||libr/core/disasm.c": [
          "File: libr/core/disasm.c -> libr/core/disasm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4216: static char *ssa_get(RAnalEsil *esil, const char *reg) {",
          "4217:  RDisasmState *ds = esil->user;",
          "4219:   return strdup (reg);",
          "4220:  }",
          "4221:  if (!ds->ssa) {",
          "",
          "[Removed Lines]",
          "4218:  if (isdigit (*reg)) {",
          "",
          "[Added Lines]",
          "4218:  if (isdigit ((unsigned char)*reg)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4234: static int myregread(RAnalEsil *esil, const char *name, ut64 *res, int *size) {",
          "4235:  RDisasmState *ds = esil->user;",
          "4236:  if (ds && ds->show_emu_ssa) {",
          "4238:    char *r = ssa_get (esil, name);",
          "4239:    ds_comment_esil (ds, true, false, \"<%s\", r);",
          "4240:    free (r);",
          "",
          "[Removed Lines]",
          "4237:   if (!isdigit (*name)) {",
          "",
          "[Added Lines]",
          "4237:   if (!isdigit ((unsigned char)*name)) {",
          "",
          "---------------"
        ],
        "libr/core/project.c||libr/core/project.c": [
          "File: libr/core/project.c -> libr/core/project.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   case '-':",
          "26:    continue;",
          "27:   }",
          "29:    continue;",
          "30:   }",
          "31:   if (IS_DIGIT (name[i])) {",
          "",
          "[Removed Lines]",
          "28:   if (isalpha (name[i])) {",
          "",
          "[Added Lines]",
          "28:   if (isalpha ((unsigned char)name[i])) {",
          "",
          "---------------"
        ],
        "libr/core/visual.c||libr/core/visual.c": [
          "File: libr/core/visual.c -> libr/core/visual.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3806:    int i;",
          "3807:    for(i=0;i<6;i++) {",
          "3808:     if (core->printidx == i) {",
          "3810:     } else {",
          "3812:     }",
          "3813:    }",
          "3814:    if (core->print->cur_enabled) {",
          "",
          "[Removed Lines]",
          "3809:      pm[i + 1] = toupper(pm[i + 1]);",
          "3811:      pm[i + 1] = tolower(pm[i + 1]);",
          "",
          "[Added Lines]",
          "3809:      pm[i + 1] = toupper((unsigned char)pm[i + 1]);",
          "3811:      pm[i + 1] = tolower((unsigned char)pm[i + 1]);",
          "",
          "---------------"
        ],
        "libr/lang/p/spp_r2.inc||libr/lang/p/spp_r2.inc": [
          "File: libr/lang/p/spp_r2.inc -> libr/lang/p/spp_r2.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: static TAG_CALLBACK(spp_r2_hex) {",
          "215:  size_t i;",
          "216:  for (i = 0; buf[i]; i++) {",
          "218:    int ch, b = buf[i + 2];",
          "219:    buf[i + 2] = '\\0';",
          "220:    sscanf (buf + i, \"%02x\", &ch);",
          "",
          "[Removed Lines]",
          "217:   if (isdigit (buf[i])) {",
          "",
          "[Added Lines]",
          "217:   if (isdigit ((unsigned char)buf[i])) {",
          "",
          "---------------"
        ],
        "libr/main/rax2.c||libr/main/rax2.c": [
          "File: libr/main/rax2.c -> libr/main/rax2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "588:   return true;",
          "589:  }",
          "592:   out_mode = (flags & 32)? '0': 'I';",
          "593:  } else if (r_str_startswith (str, \"b\")) {",
          "594:   out_mode = 'B';",
          "",
          "[Removed Lines]",
          "591:  if  (str[0] == '0' && (tolower (str[1]) == 'x')) {",
          "",
          "[Added Lines]",
          "591:  if  (str[0] == '0' && (tolower ((unsigned char)str[1]) == 'x')) {",
          "",
          "---------------"
        ],
        "libr/search/keyword.c||libr/search/keyword.c": [
          "File: libr/search/keyword.c -> libr/search/keyword.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:  for (start = i; str[i]; i++) {",
          "210:   if (str[i] == '/' && str[i - 1] != '\\\\') {",
          "211:    break;",
          "213:    specials++;",
          "214:   }",
          "215:  }",
          "",
          "[Removed Lines]",
          "212:   } else if (str[i - 1] == '\\\\' && isalpha (str[i])) {",
          "",
          "[Added Lines]",
          "212:   } else if (str[i - 1] == '\\\\' && isalpha ((unsigned char)str[i])) {",
          "",
          "---------------"
        ],
        "libr/util/print.c||libr/util/print.c": [
          "File: libr/util/print.c -> libr/util/print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2025: static bool check_arg_name(RPrint *print, char *p, ut64 func_addr) {",
          "2026:  if (func_addr && print->exists_var) {",
          "2027:   int z;",
          "2029:    ;",
          "2030:   }",
          "2031:   char tmp = p[z];",
          "",
          "[Removed Lines]",
          "2028:   for (z = 0; p[z] && (isalpha (p[z]) || isdigit (p[z]) || p[z] == '_'); z++) {",
          "",
          "[Added Lines]",
          "2028:   for (z = 0; p[z] && (isalpha ((unsigned char)p[z]) || isdigit ((unsigned char)p[z]) || p[z] == '_'); z++) {",
          "",
          "---------------"
        ],
        "libr/util/unum.c||libr/util/unum.c": [
          "File: libr/util/unum.c -> libr/util/unum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:   }",
          "240:  } else if (!strncmp (str, \"0xf..\", 5) || !strncmp (str, \"0xF..\", 5)) {",
          "241:   ret = r_num_tailff (num, str + 5);",
          "243:   const char *lodash = strchr (str + 2, '_');",
          "244:   if (lodash) {",
          "",
          "[Removed Lines]",
          "242:  } else if (str[0] == '0' && tolower (str[1]) == 'x') {",
          "",
          "[Added Lines]",
          "242:  } else if (str[0] == '0' && tolower ((unsigned char)str[1]) == 'x') {",
          "",
          "---------------"
        ],
        "shlr/gdb/src/gdbclient/core.c||shlr/gdb/src/gdbclient/core.c": [
          "File: shlr/gdb/src/gdbclient/core.c -> shlr/gdb/src/gdbclient/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1607:    goto end;",
          "1608:   }",
          "1609:   if (g->data_len == 3 && g->data[0] == 'E'",
          "1611:    ret = -1;",
          "1612:    goto end;",
          "1613:   }",
          "",
          "[Removed Lines]",
          "1610:        && isxdigit (g->data[1]) && isxdigit (g->data[2])) {",
          "",
          "[Added Lines]",
          "1610:        && isxdigit ((unsigned char)g->data[1]) && isxdigit ((unsigned char)g->data[2])) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1956:  }",
          "1957:  if (r_str_startswith (g->data, \"TextSeg=\")) {",
          "1958:   ptr = g->data + strlen (\"TextSeg=\");",
          "1960:    goto end;",
          "1961:   }",
          "1962:   off = strtoull (ptr, NULL, 16);",
          "",
          "[Removed Lines]",
          "1959:   if (!isxdigit (*ptr)) {",
          "",
          "[Added Lines]",
          "1959:   if (!isxdigit ((unsigned char)*ptr)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1969:   ptr++;",
          "1970:   if (*ptr && r_str_startswith (ptr, \"DataSeg=\")) {",
          "1971:    ptr += strlen (\"DataSeg=\");",
          "1973:     goto end;",
          "1974:    }",
          "1975:    off = strtoull (ptr, NULL, 16);",
          "",
          "[Removed Lines]",
          "1972:    if (!isxdigit (*ptr)) {",
          "",
          "[Added Lines]",
          "1972:    if (!isxdigit ((unsigned char)*ptr)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1983:   goto end;",
          "1984:  }",
          "1985:  ptr = g->data + strlen (\"Text=\");",
          "1987:   goto end;",
          "1988:  }",
          "1989:  off = strtoull (ptr, NULL, 16);",
          "",
          "[Removed Lines]",
          "1986:  if (!isxdigit (*ptr)) {",
          "",
          "[Added Lines]",
          "1986:  if (!isxdigit ((unsigned char)*ptr)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1995:   goto end;",
          "1996:  }",
          "1997:  ptr += strlen (\";Data=\");",
          "1999:   min = UINT64_MAX;",
          "2000:   goto end;",
          "2001:  }",
          "",
          "[Removed Lines]",
          "1998:  if (!isxdigit (*ptr)) {",
          "",
          "[Added Lines]",
          "1998:  if (!isxdigit ((unsigned char)*ptr)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2009:  ptr++;",
          "2010:  if (r_str_startswith (ptr, \"Bss=\")) {",
          "2011:   ptr += strlen (\"Bss=\");",
          "2013:    goto end;",
          "2014:   }",
          "2015:   off = strtoull (ptr, NULL, 16);",
          "",
          "[Removed Lines]",
          "2012:   if (!isxdigit (*ptr)) {",
          "",
          "[Added Lines]",
          "2012:   if (!isxdigit ((unsigned char)*ptr)) {",
          "",
          "---------------"
        ],
        "shlr/gdb/src/gdbclient/responses.c||shlr/gdb/src/gdbclient/responses.c": [
          "File: shlr/gdb/src/gdbclient/responses.c -> shlr/gdb/src/gdbclient/responses.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: int handle_vFile_open(libgdbr_t *g) {",
          "133:  if (g->data_len < 2 || g->data[0] != 'F' || g->data[1] == '-'",
          "135:   send_ack (g);",
          "136:   return -1;",
          "137:  }",
          "",
          "[Removed Lines]",
          "134:      || !isxdigit (g->data[1])) {",
          "",
          "[Added Lines]",
          "134:      || !isxdigit ((unsigned char)g->data[1])) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:  if (g->data[1] == '-') {",
          "156:   return 0;",
          "157:  }",
          "159:   return -1;",
          "160:  }",
          "161:  if (sscanf (g->data, \"F%x;\", &len) != 1) {",
          "",
          "[Removed Lines]",
          "158:  if (!isxdigit (g->data[1])) {",
          "",
          "[Added Lines]",
          "158:  if (!isxdigit ((unsigned char)g->data[1])) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178: int handle_vFile_close(libgdbr_t *g) {",
          "179:  if (g->data_len < 2 || g->data[0] != 'F' || g->data[1] == '-'",
          "181:   send_ack (g);",
          "182:   return -1;",
          "183:  }",
          "",
          "[Removed Lines]",
          "180:      || !isxdigit (g->data[1])) {",
          "",
          "[Added Lines]",
          "180:      || !isxdigit ((unsigned char)g->data[1])) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:   g->stop_reason.is_valid = true;",
          "202:   return 0;",
          "203:  }",
          "205:   eprintf (\"Message from remote: %s\\n\", g->data);",
          "206:   return -1;",
          "207:  }",
          "",
          "[Removed Lines]",
          "204:  if (!isxdigit (g->data[1])) {",
          "",
          "[Added Lines]",
          "204:  if (!isxdigit ((unsigned char)g->data[1])) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "229:   g->stop_reason.is_valid = true;",
          "230:   return 0;",
          "231:  }",
          "233:   eprintf (\"Message from remote: %s\\n\", g->data);",
          "234:   return -1;",
          "235:  }",
          "",
          "[Removed Lines]",
          "232:  if (!isxdigit (g->data[1])) {",
          "",
          "[Added Lines]",
          "232:  if (!isxdigit ((unsigned char)g->data[1])) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "297:     continue;",
          "298:    }",
          "299:    ptr2++;",
          "301:     continue;",
          "302:    }",
          "303:    g->stop_reason.core = (int) strtol (ptr2, NULL, 16);",
          "",
          "[Removed Lines]",
          "300:    if (!isxdigit (*ptr2)) {",
          "",
          "[Added Lines]",
          "300:    if (!isxdigit ((unsigned char)*ptr2)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "311:      continue;",
          "312:     }",
          "313:     ptr2++;",
          "315:      continue;",
          "316:     }",
          "317:     g->stop_reason.watchpoint.addr = strtoll (ptr2, NULL, 16);",
          "",
          "[Removed Lines]",
          "314:     if (!isxdigit (*ptr2)) {",
          "",
          "[Added Lines]",
          "314:     if (!isxdigit ((unsigned char)*ptr2)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "411:   return -1;",
          "412:  }",
          "413:  while (ptr) {",
          "416:    ptr = strtok (NULL, \";\");",
          "417:    continue;",
          "",
          "[Removed Lines]",
          "414:   if (!isxdigit (*ptr)) {",
          "",
          "[Added Lines]",
          "414:   if (!isxdigit ((unsigned char)*ptr)) {",
          "",
          "---------------"
        ],
        "shlr/gdb/src/gdbclient/xml.c||shlr/gdb/src/gdbclient/xml.c": [
          "File: shlr/gdb/src/gdbclient/xml.c -> shlr/gdb/src/gdbclient/xml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "517:   if (fc[c]) {",
          "518:    continue;",
          "519:   }",
          "",
          "[Removed Lines]",
          "516:   c = tolower (flags->fields[i].name[0]) - 'a';",
          "",
          "[Added Lines]",
          "516:   c = tolower ((unsigned char)flags->fields[i].name[0]) - 'a';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "647:     goto exit_err;",
          "648:    }",
          "649:    tmp1 += 7;",
          "651:     goto exit_err;",
          "652:    }",
          "653:    tmpflag->fields[num_fields].bit_num = (ut32) strtoul (tmp1, NULL, 10);",
          "",
          "[Removed Lines]",
          "650:    if (!isdigit (*tmp1)) {",
          "",
          "[Added Lines]",
          "650:    if (!isdigit ((unsigned char)*tmp1)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "656:     goto exit_err;",
          "657:    }",
          "658:    tmp1 += 5;",
          "660:     goto exit_err;",
          "661:    }",
          "662:    tmpflag->fields[num_fields].sz = (ut32) strtoul (tmp1, NULL, 10) + 1;",
          "",
          "[Removed Lines]",
          "659:    if (!isdigit (*tmp1)) {",
          "",
          "[Added Lines]",
          "659:    if (!isdigit ((unsigned char)*tmp1)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "799:    goto exit_err;",
          "800:   }",
          "801:   tmp1 += 9;",
          "803:    goto exit_err;",
          "804:   }",
          "805:   regsize = strtoul (tmp1, NULL, 10);",
          "",
          "[Removed Lines]",
          "802:   if (!isdigit (*tmp1)) {",
          "",
          "[Added Lines]",
          "802:   if (!isdigit ((unsigned char)*tmp1)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "807:   regnum = UINT32_MAX;",
          "808:   if ((tmp1 = strstr (regstr, \"regnum=\"))) {",
          "809:    tmp1 += 8;",
          "811:     goto exit_err;",
          "812:    }",
          "813:    regnum = strtoul (tmp1, NULL, 10);",
          "",
          "[Removed Lines]",
          "810:    if (!isdigit (*tmp1)) {",
          "",
          "[Added Lines]",
          "810:    if (!isdigit ((unsigned char)*tmp1)) {",
          "",
          "---------------"
        ],
        "shlr/gdb/src/gdbserver/core.c||shlr/gdb/src/gdbserver/core.c": [
          "File: shlr/gdb/src/gdbserver/core.c -> shlr/gdb/src/gdbserver/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:  if (send_ack (g) < 0) {",
          "291:   return -1;",
          "292:  }",
          "294:   return send_msg (g, \"E01\");",
          "295:  }",
          "",
          "[Removed Lines]",
          "293:  if (g->data_len <= 2 || isalpha (g->data[2])) {",
          "",
          "[Added Lines]",
          "293:  if (g->data_len <= 2 || isalpha ((unsigned char)g->data[2])) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "315:  if (send_ack (g) < 0) {",
          "316:   return -1;",
          "317:  }",
          "319:   return send_msg (g, \"E01\");",
          "320:  }",
          "",
          "[Removed Lines]",
          "318:  if (g->data_len <= 2 || isalpha (g->data[2])) {",
          "",
          "[Added Lines]",
          "318:  if (g->data_len <= 2 || isalpha ((unsigned char)g->data[2])) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "420:  if (send_ack (g) < 0) {",
          "421:   return -1;",
          "422:  }",
          "424:   return send_msg (g, \"E01\");",
          "425:  }",
          "426:  regnum = strtol (g->data + 1, NULL, 16);",
          "",
          "[Removed Lines]",
          "423:  if (!isxdigit (g->data[1])) {",
          "",
          "[Added Lines]",
          "423:  if (!isxdigit ((unsigned char)g->data[1])) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "448:  if (send_ack (g) < 0) {",
          "449:   return -1;",
          "450:  }",
          "452:   return send_msg (g, \"E01\");",
          "453:  }",
          "454:  ptr++;",
          "456:   return send_msg (g, \"E01\");",
          "457:  }",
          "458:  regnum = strtol (g->data + 1, NULL, 16);",
          "",
          "[Removed Lines]",
          "451:  if (!isxdigit (g->data[1]) || !(ptr = strchr (g->data, '='))) {",
          "455:  if (!isxdigit (*ptr)) {",
          "",
          "[Added Lines]",
          "451:  if (!isxdigit ((unsigned char)g->data[1]) || !(ptr = strchr (g->data, '='))) {",
          "455:  if (!isxdigit ((unsigned char)*ptr)) {",
          "",
          "---------------"
        ],
        "shlr/gdb/src/utils.c||shlr/gdb/src/utils.c": [
          "File: shlr/gdb/src/utils.c -> shlr/gdb/src/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:    }",
          "169:    return -1;",
          "170:   }",
          "172:    return -1;",
          "173:   }",
          "174:   if (r_str_startswith (ptr1, \"-1\")) {",
          "",
          "[Removed Lines]",
          "171:   if (!isxdigit (*src)) {",
          "",
          "[Added Lines]",
          "171:   if (!isxdigit ((unsigned char)*src)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:    return 0;",
          "178:   }",
          "180:    return -1;",
          "181:   }",
          "",
          "[Removed Lines]",
          "179:   if (!isxdigit (*ptr1)) {",
          "",
          "[Added Lines]",
          "179:   if (!isxdigit ((unsigned char)*ptr1)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:   return 0;",
          "189:  }",
          "191:   return -1;",
          "192:  }",
          "",
          "[Removed Lines]",
          "190:  if (!isxdigit (*src)) {",
          "",
          "[Added Lines]",
          "190:  if (!isxdigit ((unsigned char)*src)) {",
          "",
          "---------------"
        ],
        "shlr/mpc/mpc.c||shlr/mpc/mpc.c": [
          "File: shlr/mpc/mpc.c -> shlr/mpc/mpc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2227: mpc_val_t *mpcf_strtriml(mpc_val_t *x) {",
          "2228:   char *s = x;",
          "2230:     memmove(s, s+1, strlen(s));",
          "2231:   }",
          "2232:   return s;",
          "",
          "[Removed Lines]",
          "2229:   while (isspace(*s)) {",
          "",
          "[Added Lines]",
          "2229:   while (isspace((unsigned char)*s)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2235: mpc_val_t *mpcf_strtrimr(mpc_val_t *x) {",
          "2236:   char *s = x;",
          "2237:   size_t l = strlen(s);",
          "2239:     s[l-1] = '\\0'; l--;",
          "2240:   }",
          "2241:   return s;",
          "",
          "[Removed Lines]",
          "2238:   while (isspace(s[l-1])) {",
          "",
          "[Added Lines]",
          "2238:   while (isspace((unsigned char)s[l-1])) {",
          "",
          "---------------"
        ],
        "shlr/sdb/src/query.c||shlr/sdb/src/query.c": [
          "File: shlr/sdb/src/query.c -> shlr/sdb/src/query.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "754:     ok = sdb_json_set (s, cmd, json, val, 0);",
          "755:    } else {",
          "757:      val++;",
          "758:     }",
          "759:     int i = strlen (cmd) - 1;",
          "761:      cmd[i] = '\\0';",
          "762:      i--;",
          "763:     }",
          "",
          "[Removed Lines]",
          "756:     while (*val && isspace (*val)) {",
          "760:     while (i >= 0 && isspace (cmd[i])) {",
          "",
          "[Added Lines]",
          "756:     while (*val && isspace ((unsigned char)*val)) {",
          "760:     while (i >= 0 && isspace ((unsigned char)cmd[i])) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}