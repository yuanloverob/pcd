{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51da8daf822a8c27fd2f4646c4c19d8ed23a7e73",
      "candidate_info": {
        "commit_hash": "51da8daf822a8c27fd2f4646c4c19d8ed23a7e73",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51da8daf822a8c27fd2f4646c4c19d8ed23a7e73",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wherelimit2.test"
        ],
        "message": "Fix test case result on a DELETE with an INDEXED BY clause due to improvements in the query planner at [d901837fea1ed54d]\n\nFossilOrigin-Name: 020dbfa2aef20e5872cc3e785d99f45903843401292114b5092b9c8aa829b9c3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wherelimit2.test||test/wherelimit2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c0d208c455abb983217a6dfea7634f677f8360fb57857e1421334fe7a5a23e2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wherelimit2.test||test/wherelimit2.test": [
          "File: test/wherelimit2.test -> test/wherelimit2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   ROLLBACK;",
          "219: } {3 4 5 6}",
          "225: do_execsql_test 4.3 {",
          "226:   DELETE FROM x1 INDEXED BY x1bc WHERE b=3 LIMIT 1;",
          "227:   SELECT a FROM x1;",
          "228: } {1 2 3 4 6}",
          "234: do_execsql_test 4.5 {",
          "235:   UPDATE x1 INDEXED BY x1bc SET d=5 WHERE b=2 LIMIT 1;",
          "",
          "[Removed Lines]",
          "221: do_catchsql_test 4.2 {",
          "222:   DELETE FROM x1 INDEXED BY x1bc WHERE d=3 LIMIT 1;",
          "223: } {1 {no query solution}}",
          "230: do_catchsql_test 4.4 {",
          "231:   UPDATE x1 INDEXED BY x1bc SET d=5 WHERE d=3 LIMIT 1;",
          "232: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "221: # 2020-06-03: Query planner improved so that a solution is possible.",
          "222: #",
          "223: #do_catchsql_test 4.2 {",
          "224: #  DELETE FROM x1 INDEXED BY x1bc WHERE d=3 LIMIT 1;",
          "225: #} {1 {no query solution}}",
          "232: # 2020-06-03: Query planner improved so that a solution is possible.",
          "233: #",
          "234: #do_catchsql_test 4.4 {",
          "235: #  UPDATE x1 INDEXED BY x1bc SET d=5 WHERE d=3 LIMIT 1;",
          "236: #} {1 {no query solution}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab7fdca2eec1b6d5143214155aa9dfda40de1b83",
      "candidate_info": {
        "commit_hash": "ab7fdca2eec1b6d5143214155aa9dfda40de1b83",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ab7fdca2eec1b6d5143214155aa9dfda40de1b83",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Disallow the skip-scan optimization in the absence of sqlite_stat1 data.\n\nFossilOrigin-Name: e0c6b8bdb76fcd4f08c89ff20dce6a33ef3c11752e1e919fec5c4e7d423c4b93",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0c683c43a62fe25c6cb765e4a31556ec91a7c21af79349b3d7eeb13f73dd1cdc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2732:    && saved_nEq+1<pProbe->nKeyCol",
          "2733:    && saved_nEq==pNew->nLTerm",
          "2734:    && pProbe->noSkipScan==0",
          "2735:    && OptimizationEnabled(db, SQLITE_SkipScan)",
          "2737:    && (rc = whereLoopResize(db, pNew, pNew->nLTerm+1))==SQLITE_OK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2735:    && pProbe->hasStat1!=0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b4f231c471389428c91e7a6c13583a3f13d1d53",
      "candidate_info": {
        "commit_hash": "8b4f231c471389428c91e7a6c13583a3f13d1d53",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b4f231c471389428c91e7a6c13583a3f13d1d53",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "Use AtomicStore() and AtomicLoad() in a few more places to avoid a theoretically undefined behaviour. This is not actually problem on any known hardware.\n\nFossilOrigin-Name: fda57d4d2f1499c861d43026aa9362d1a30d67c9c002ebf5b0cdc25251537fbb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fa11230135610f01c56d6f436f30a8b57a50b430fe7397ea3a0b6642986b3a39",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1822:   sqlite3Put4byte((u8*)&aSalt[0], 1 + sqlite3Get4byte((u8*)&aSalt[0]));",
          "1823:   memcpy(&pWal->hdr.aSalt[1], &salt1, 4);",
          "1824:   walIndexWriteHdr(pWal);",
          "1826:   pInfo->nBackfillAttempted = 0;",
          "1827:   pInfo->aReadMark[1] = 0;",
          "1828:   for(i=2; i<WAL_NREADER; i++) pInfo->aReadMark[i] = READMARK_NOT_USED;",
          "",
          "[Removed Lines]",
          "1825:   pInfo->nBackfill = 0;",
          "",
          "[Added Lines]",
          "1825:   AtomicStore(&pInfo->nBackfill, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1996:           }",
          "1997:         }",
          "1998:         if( rc==SQLITE_OK ){",
          "2000:         }",
          "2001:       }",
          "",
          "[Removed Lines]",
          "1999:           pInfo->nBackfill = mxSafeFrame;",
          "",
          "[Added Lines]",
          "1999:           AtomicStore(&pInfo->nBackfill, mxSafeFrame);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2619:   assert( pWal->nWiData>0 );",
          "2620:   assert( pWal->apWiData[0]!=0 );",
          "2621:   pInfo = walCkptInfo(pWal);",
          "2623: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2624:    && (pWal->pSnapshot==0 || pWal->hdr.mxFrame==0)",
          "2625: #endif",
          "",
          "[Removed Lines]",
          "2622:   if( !useWal && pInfo->nBackfill==pWal->hdr.mxFrame",
          "",
          "[Added Lines]",
          "2622:   if( !useWal && AtomicLoad(&pInfo->nBackfill)==pWal->hdr.mxFrame",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2786:         rc = SQLITE_NOMEM;",
          "2787:       }else{",
          "2788:         u32 i = pInfo->nBackfillAttempted;",
          "",
          "[Removed Lines]",
          "2789:         for(i=pInfo->nBackfillAttempted; i>pInfo->nBackfill; i--){",
          "",
          "[Added Lines]",
          "2789:         for(i=pInfo->nBackfillAttempted; i>AtomicLoad(&pInfo->nBackfill); i--){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
      "candidate_info": {
        "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/sqliteInt.h",
          "test/altertab3.test"
        ],
        "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "760:   Parse *pParse = pWalker->pParse;",
          "761:   int i;",
          "762:   if( pParse->nErr ) return WRC_Abort;",
          "763:   if( ALWAYS(p->pEList) ){",
          "764:     ExprList *pList = p->pEList;",
          "765:     for(i=0; i<pList->nExpr; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
          "854:   renameWalkWith(pWalker, p);",
          "855:   return WRC_Continue;",
          "856: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1316:   if( sParse.pNewTable ){",
          "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
          "1318:     if( pSelect ){",
          "1319:       sParse.rc = SQLITE_OK;",
          "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
          "1322:       if( rc==SQLITE_OK ){",
          "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
          "",
          "[Removed Lines]",
          "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
          "",
          "[Added Lines]",
          "1321:       pSelect->selFlags &= ~SF_View;",
          "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1434:   int i;",
          "1435:   RenameCtx *p = pWalker->u.pRename;",
          "1436:   SrcList *pSrc = pSelect->pSrc;",
          "1437:   if( pSrc==0 ){",
          "1438:     assert( pWalker->pParse->db->mallocFailed );",
          "1439:     return WRC_Abort;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1514:         if( pTab->pSelect ){",
          "1515:           if( isLegacy==0 ){",
          "1516:             NameContext sNC;",
          "1517:             memset(&sNC, 0, sizeof(sNC));",
          "1518:             sNC.pParse = &sParse;",
          "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
          "1521:             if( sParse.nErr ) rc = sParse.rc;",
          "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1520:             Select *pSelect = pTab->pSelect;",
          "1525:             assert( pSelect->selFlags & SF_View );",
          "1526:             pSelect->selFlags &= ~SF_View;",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2488:   if( IN_RENAME_OBJECT ){",
          "2489:     p->pSelect = pSelect;",
          "2490:     pSelect = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2488:   pSelect->selFlags |= SF_View;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:   ALTER TABLE a RENAME a TO b;",
          "488: }",
          "491: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490: #------------------------------------------------------------------------",
          "491: #",
          "492: reset_db",
          "493: do_execsql_test 22.1 {",
          "494:   CREATE TABLE t1(a);",
          "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
          "496: }",
          "498: do_catchsql_test 22.2 {",
          "499:   ALTER TABLE t1 RENAME TO t4;",
          "500: } {1 {error in view v2: view v2 is circularly defined}}",
          "502: do_execsql_test 22.3 {",
          "503:   DROP VIEW v2;",
          "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
          "505: }",
          "507: breakpoint",
          "508: do_catchsql_test 22.4 {",
          "509:   ALTER TABLE t1 RENAME TO t4;",
          "510: } {1 {error in view v2: view v2 is circularly defined}}",
          "512: do_execsql_test 22.5 {",
          "513:   DROP VIEW v2;",
          "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
          "515: }",
          "517: do_catchsql_test 22.6 {",
          "518:   ALTER TABLE t1 RENAME TO t4;",
          "519: } {0 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff37c4078729e5d24fa80aa803a1e2c7baf1b25d",
      "candidate_info": {
        "commit_hash": "ff37c4078729e5d24fa80aa803a1e2c7baf1b25d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ff37c4078729e5d24fa80aa803a1e2c7baf1b25d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c",
          "test/gencol1.test"
        ],
        "message": "Correctly generate pre-UPDATE content for virtual columns that are used by foreign key constraints.  Ticket [b9befa4b83a660cc]\n\nFossilOrigin-Name: 40d3282ec285d9f724f6548283f48b601510cf5284da17485723fd650a68f436",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: acedb5c7f7dc1d68bef62098d42ca59e1be7a5083bb03dc07c03b9f9d817158b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:     oldmask |= sqlite3TriggerColmask(pParse,",
          "662:         pTrigger, pChanges, 0, TRIGGER_BEFORE|TRIGGER_AFTER, pTab, onError",
          "663:     );",
          "665:       u32 colFlags = pTab->aCol[i].colFlags;",
          "670:       if( oldmask==0xffffffff",
          "671:        || (i<32 && (oldmask & MASKBIT32(i))!=0)",
          "672:        || (colFlags & COLFLAG_PRIMKEY)!=0",
          "",
          "[Removed Lines]",
          "664:     for(i=0, k=regOld; i<pTab->nCol; i++, k++){",
          "666:       if( colFlags & COLFLAG_VIRTUAL ){",
          "667:         k--;",
          "668:         continue;",
          "669:       }",
          "",
          "[Added Lines]",
          "664:     for(i=0; i<pTab->nCol; i++){",
          "666:       k = sqlite3TableColumnToStorage(pTab, i) + regOld;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   } {30 null ntalo | 40 text balaya | 150 integer {} | 1010 real {} |}",
          "146: }",
          "148: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: # 2019-10-31 ticket b9befa4b83a660cc",
          "149: db close",
          "150: sqlite3 db :memory:",
          "151: do_execsql_test gencol1-3.100 {",
          "152:   PRAGMA foreign_keys = true;",
          "153:   CREATE TABLE t0(c0 PRIMARY KEY, c1, c2 AS (c0+c1-c3) REFERENCES t0, c3);",
          "154:   INSERT INTO t0 VALUES (0, 0, 0), (11, 5, 5);",
          "155:   UPDATE t0 SET c1 = c0, c3 = c0;",
          "156:   SELECT *, '|' FROM t0 ORDER BY +c0;",
          "157: } {0 0 0 0 | 11 11 11 11 |}",
          "158: do_catchsql_test gencol1-3.110 {",
          "159:   UPDATE t0 SET c1 = c0, c3 = c0+1;",
          "160: } {1 {FOREIGN KEY constraint failed}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}