{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e893759cac17443c63fd0bc0bfce198985da7aa5",
      "candidate_info": {
        "commit_hash": "e893759cac17443c63fd0bc0bfce198985da7aa5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e893759cac17443c63fd0bc0bfce198985da7aa5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "The ALWAYS() added by the previous check-in was incorrect.  Take it back out.\n\nFossilOrigin-Name: 336235db2b1167cdb2feb64b47eb6368c97c43ee9641b7bfccc5775a41dd0d0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aff209804722ac902c7abfde80ad2677e0f51beb2c7f28f65d51105d984a1640",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "802:         idxCols |= cMask;",
          "803:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "804:         pColl = sqlite3BinaryCompareCollSeq(pParse, pX->pLeft, pX->pRight);",
          "806:         n++;",
          "807:       }",
          "808:     }",
          "",
          "[Removed Lines]",
          "805:         pIdx->azColl[n] = ALWAYS(pColl) ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Added Lines]",
          "805:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e20a894a34894eeb4eca0252d4ff25f99ac311e8",
      "candidate_info": {
        "commit_hash": "e20a894a34894eeb4eca0252d4ff25f99ac311e8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e20a894a34894eeb4eca0252d4ff25f99ac311e8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/altertab3.test"
        ],
        "message": "Handle renaming a column or table when the schema contains a (meaningless) index on the constant expression ('text' IN ()) or ('text' NOT IN()).\n\nFossilOrigin-Name: 567b13093956185b5d5e971b81ba4788fd9d26c03688f643b380f0f1c1a94da0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 94b58ab059cba9771e75f16d1460f313104a8fb879f9f8805725d362aa58cbcd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:       if( IN_RENAME_OBJECT==0 ){",
          "1177:         sqlite3ExprDelete(pParse->db, A);",
          "1178:         A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1179:       }",
          "1180:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1185:       }else{",
          "1186:         A = sqlite3PExpr(pParse, TK_UPLUS, A, 0);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   ALTER TABLE t1x RENAME TO t1;",
          "176: } {1 {error in trigger AFTER: no such column: d}}",
          "178: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: #-------------------------------------------------------------------------",
          "179: reset_db",
          "180: do_execsql_test 8.0 {",
          "181:   CREATE TABLE t0(c0);",
          "182:   CREATE INDEX i0 ON t0('1' IN ());",
          "183: }",
          "184: do_execsql_test 8.1 {",
          "185:   ALTER TABLE t0 RENAME TO t1;",
          "186:   SELECT sql FROM sqlite_master;",
          "187: } {",
          "188:   {CREATE TABLE \"t1\"(c0)}",
          "189:   {CREATE INDEX i0 ON \"t1\"('1' IN ())}",
          "190: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "531230d006696e418d40b7808798de628a3fd4f2",
      "candidate_info": {
        "commit_hash": "531230d006696e418d40b7808798de628a3fd4f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/531230d006696e418d40b7808798de628a3fd4f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest.tcl"
        ],
        "message": "Add -DSQLITE_ENABLE_DESERIALIZE to the default testing configuration in test/releasetest.tcl.\n\nFossilOrigin-Name: 433d6ef637a10ee017b5d8cadd125a162cfedc9895ae862b8dde6dddb7eda59b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3839e9098107604e1526c2b1e813c019607077dfe39d7eeb92f3466518dec3b1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     -O2",
          "51:     --disable-amalgamation --disable-shared",
          "52:     --enable-session",
          "53:   }",
          "54:   \"Sanitize\" {",
          "55:     CC=clang -fsanitize=undefined",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     -DSQLITE_ENABLE_DESERIALIZE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b44fec68a53b88612d1d0954eecaa638674764a4",
      "candidate_info": {
        "commit_hash": "b44fec68a53b88612d1d0954eecaa638674764a4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b44fec68a53b88612d1d0954eecaa638674764a4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix a minor performance regression from check-in [401c9d30e06191d9]\n\nFossilOrigin-Name: 76f54ee86777cbf530654323c953388ef64d0608516722d2522be6c859fa1382",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ddb10f0374e66886d0681937b14cf0b4f100f03d3955b45b6c508dc6d9e36976",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2052:         sqlite3VdbeMemStringify(pIn1, encoding, 1);",
          "2053:         testcase( (flags1&MEM_Dyn) != (pIn1->flags&MEM_Dyn) );",
          "2054:         flags1 = (pIn1->flags & ~MEM_TypeMask) | (flags1 & MEM_TypeMask);",
          "2055:       }",
          "2060:         testcase( pIn3->flags & MEM_Int );",
          "2061:         testcase( pIn3->flags & MEM_Real );",
          "2062:         testcase( pIn3->flags & MEM_IntReal );",
          "",
          "[Removed Lines]",
          "2056:       if( (flags3 & MEM_Str)==0",
          "2057:        && (flags3&(MEM_Int|MEM_Real|MEM_IntReal))!=0",
          "2058:        && pIn1!=pIn3",
          "2059:       ){",
          "",
          "[Added Lines]",
          "2055:         if( pIn1==pIn3 ) flags3 = flags1 | MEM_Str;",
          "2057:       if( (flags3 & MEM_Str)==0 && (flags3&(MEM_Int|MEM_Real|MEM_IntReal))!=0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2089:   }",
          "2094:   assert( (pIn3->flags & MEM_Dyn) == (flags3 & MEM_Dyn) );",
          "2095:   pIn3->flags = flags3;",
          "2097:   if( pOp->p5 & SQLITE_STOREP2 ){",
          "2098:     pOut = &aMem[pOp->p2];",
          "",
          "[Removed Lines]",
          "2092:   assert( (pIn1->flags & MEM_Dyn) == (flags1 & MEM_Dyn) );",
          "2093:   pIn1->flags = flags1;",
          "",
          "[Added Lines]",
          "2092:   assert( (pIn1->flags & MEM_Dyn) == (flags1 & MEM_Dyn) );",
          "2093:   pIn1->flags = flags1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45616c7f7539fcb60547ae95b06dd4fd421ff453",
      "candidate_info": {
        "commit_hash": "45616c7f7539fcb60547ae95b06dd4fd421ff453",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/45616c7f7539fcb60547ae95b06dd4fd421ff453",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Add an \"|| CORRUPT_DB\" term to an assert() statement in the btree defragmenter.\n\nFossilOrigin-Name: 6bfd8655f006e031c0d4c988356c4b9206efa6bfdb034fde8ffa3361521a4844",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6ae4b8c525f446ddb0e0bdd5e4e01e06e2ab975e3effa42fce6a1102b3a39830",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1421:   hdr = pPage->hdrOffset;",
          "1422:   cellOffset = pPage->cellOffset;",
          "1423:   nCell = pPage->nCell;",
          "1425:   iCellFirst = cellOffset + 2*nCell;",
          "1426:   usableSize = pPage->pBt->usableSize;",
          "",
          "[Removed Lines]",
          "1424:   assert( nCell==get2byte(&data[hdr+3]) );",
          "",
          "[Added Lines]",
          "1424:   assert( nCell==get2byte(&data[hdr+3]) || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    }
  ]
}