{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "77cfbd9f2d286368627a8dfa4f4f5cbdfd6f89e1",
      "candidate_info": {
        "commit_hash": "77cfbd9f2d286368627a8dfa4f4f5cbdfd6f89e1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/77cfbd9f2d286368627a8dfa4f4f5cbdfd6f89e1",
        "files": [
          "lib/domain.js"
        ],
        "message": "domain: dry decorate using util._extend",
        "before_after_code_files": [
          "lib/domain.js||lidomain.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/domain.js||lidomain.js": [
          "File: lib/domain.js -> lidomain.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   if (exports.active && !exports.active._disposed) {",
          "57:       domain: exports.active,",
          "58:       domain_thrown: true",
          "59:     });",
          "",
          "[Removed Lines]",
          "56:     decorate(er, {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:     if (interceptError && arguments[0] &&",
          "159:         (arguments[0] instanceof Error)) {",
          "160:       var er = arguments[0];",
          "162:         domain_bound: cb,",
          "163:         domain_thrown: false,",
          "164:         domain: self",
          "",
          "[Removed Lines]",
          "161:       decorate(er, {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:   this._disposed = true;",
          "253: };",
          "",
          "[Removed Lines]",
          "256: function decorate(er, props) {",
          "257:   Object.keys(props).forEach(function(k, _, __) {",
          "258:     if (er.hasOwnProperty(k)) return;",
          "259:     er[k] = props[k];",
          "260:   });",
          "261: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad5a108dfd5bb0a0b46c0f328adda28fa4edcd8e",
      "candidate_info": {
        "commit_hash": "ad5a108dfd5bb0a0b46c0f328adda28fa4edcd8e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ad5a108dfd5bb0a0b46c0f328adda28fa4edcd8e",
        "files": [
          "deps/uv/src/win/error.c",
          "deps/uv/src/win/fs.c",
          "deps/uv/src/win/handle.c",
          "deps/uv/src/win/pipe.c",
          "deps/uv/src/win/process.c",
          "deps/uv/src/win/stream.c",
          "deps/uv/src/win/tcp.c",
          "deps/uv/src/win/tty.c",
          "deps/uv/src/win/udp.c",
          "deps/uv/test/benchmark-pound.c",
          "deps/uv/test/run-tests.c",
          "deps/uv/test/runner-win.c",
          "deps/uv/test/runner.c",
          "deps/uv/test/test-counters-init.c",
          "deps/uv/test/test-cwd-and-chdir.c",
          "deps/uv/test/test-fs.c",
          "deps/uv/test/test-list.h",
          "deps/uv/test/test-ref.c",
          "deps/uv/test/test-shutdown-close.c",
          "deps/uv/test/test-tty.c",
          "deps/uv/uv.gyp"
        ],
        "message": "Update uv to 5d21056",
        "before_after_code_files": [
          "deps/uv/src/win/error.c||deps/uv/src/win/error.c",
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c",
          "deps/uv/src/win/handle.c||deps/uv/src/win/handle.c",
          "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c",
          "deps/uv/src/win/process.c||deps/uv/src/win/process.c",
          "deps/uv/src/win/stream.c||deps/uv/src/win/stream.c",
          "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c",
          "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c",
          "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c",
          "deps/uv/test/benchmark-pound.c||deps/uv/test/benchmark-pound.c",
          "deps/uv/test/run-tests.c||deps/uv/test/run-tests.c",
          "deps/uv/test/runner-win.c||deps/uv/test/runner-win.c",
          "deps/uv/test/runner.c||deps/uv/test/runner.c",
          "deps/uv/test/test-counters-init.c||deps/uv/test/test-counters-init.c",
          "deps/uv/test/test-cwd-and-chdir.c||deps/uv/test/test-cwd-and-chdir.c",
          "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h",
          "deps/uv/test/test-ref.c||deps/uv/test/test-ref.c",
          "deps/uv/test/test-shutdown-close.c||deps/uv/test/test-shutdown-close.c",
          "deps/uv/test/test-tty.c||deps/uv/test/test-tty.c",
          "deps/uv/uv.gyp||deps/uv/uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/win/error.c||deps/uv/src/win/error.c": [
          "File: deps/uv/src/win/error.c -> deps/uv/src/win/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     case WSAEFAULT:                         return UV_EFAULT;",
          "92:     case ERROR_HOST_UNREACHABLE:            return UV_EHOSTUNREACH;",
          "93:     case WSAEHOSTUNREACH:                   return UV_EHOSTUNREACH;",
          "94:     case ERROR_INVALID_DATA:                return UV_EINVAL;",
          "95:     case WSAEINVAL:                         return UV_EINVAL;",
          "96:     case ERROR_CANT_RESOLVE_FILENAME:       return UV_ELOOP;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     case ERROR_OPERATION_ABORTED:           return UV_EINTR;",
          "95:     case WSAEINTR:                          return UV_EINTR;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "547:   req->stat.st_size = ((int64_t) info.nFileSizeHigh << 32) +",
          "548:                       (int64_t) info.nFileSizeLow;",
          "552:   req->ptr = &req->stat;",
          "553:   req->result = 0;",
          "",
          "[Removed Lines]",
          "550:   req->stat.st_nlink = info.nNumberOfLinks;",
          "",
          "[Added Lines]",
          "550:   req->stat.st_nlink = (info.nNumberOfLinks <= SHRT_MAX) ?",
          "551:                        (short) info.nNumberOfLinks : SHRT_MAX;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/handle.c||deps/uv/src/win/handle.c": [
          "File: deps/uv/src/win/handle.c -> deps/uv/src/win/handle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: uv_handle_type uv_guess_handle(uv_file file) {",
          "31:   DWORD mode;",
          "33:   switch (GetFileType(handle)) {",
          "34:     case FILE_TYPE_CHAR:",
          "35:       if (GetConsoleMode(handle, &mode)) {",
          "",
          "[Removed Lines]",
          "30:   HANDLE handle = (HANDLE) _get_osfhandle(file);",
          "",
          "[Added Lines]",
          "30:   HANDLE handle;",
          "33:   if (file < 0) {",
          "34:     return UV_UNKNOWN_HANDLE;",
          "35:   }",
          "37:   handle = (HANDLE) _get_osfhandle(file);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:       tcp = (uv_tcp_t*)handle;",
          "89:         shutdown(tcp->socket, SD_SEND);",
          "91:       }",
          "92:       tcp->flags &= ~(UV_HANDLE_READING | UV_HANDLE_LISTENING);",
          "93:       closesocket(tcp->socket);",
          "",
          "[Removed Lines]",
          "88:       if (!(tcp->flags & UV_HANDLE_SHUT)) {",
          "90:         tcp->flags |= UV_HANDLE_SHUT;",
          "",
          "[Added Lines]",
          "94:       if ((tcp->flags & UV_HANDLE_CONNECTION) &&",
          "95:           !(tcp->flags & UV_HANDLE_SHUT)) {",
          "97:         tcp->flags |= UV_HANDLE_SHUTTING | UV_HANDLE_SHUT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173: void uv_process_endgames(uv_loop_t* loop) {",
          "174:   uv_handle_t* handle;",
          "177:     handle = loop->endgame_handles;",
          "178:     loop->endgame_handles = handle->endgame_next;",
          "",
          "[Removed Lines]",
          "176:   while (loop->endgame_handles) {",
          "",
          "[Added Lines]",
          "183:   while (loop->endgame_handles && loop->refs > 0) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c": [
          "File: deps/uv/src/win/pipe.c -> deps/uv/src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: }",
          "116:   }",
          "123:   if (GetLastError() == ERROR_ACCESS_DENIED) {",
          "135:     }",
          "136:   }",
          "138:   if (GetLastError() == ERROR_ACCESS_DENIED) {",
          "150:     }",
          "151:   }",
          "154: }",
          "",
          "[Removed Lines]",
          "101: static int open_named_pipe(uv_pipe_t* handle) {",
          "106:   handle->handle = CreateFileW(handle->name,",
          "107:                                GENERIC_READ | GENERIC_WRITE,",
          "108:                                0,",
          "109:                                NULL,",
          "110:                                OPEN_EXISTING,",
          "111:                                FILE_FLAG_OVERLAPPED,",
          "112:                                NULL);",
          "114:   if (handle->handle != INVALID_HANDLE_VALUE) {",
          "115:     return 0;",
          "124:     handle->handle = CreateFileW(handle->name,",
          "125:                                  GENERIC_READ | FILE_WRITE_ATTRIBUTES,",
          "126:                                  0,",
          "127:                                  NULL,",
          "128:                                  OPEN_EXISTING,",
          "129:                                  FILE_FLAG_OVERLAPPED,",
          "130:                                  NULL);",
          "132:     if (handle->handle != INVALID_HANDLE_VALUE) {",
          "133:       handle->flags |= UV_HANDLE_SHUT;",
          "134:       return 0;",
          "139:     handle->handle = CreateFileW(handle->name,",
          "140:                                  GENERIC_WRITE | FILE_READ_ATTRIBUTES,",
          "141:                                  0,",
          "142:                                  NULL,",
          "143:                                  OPEN_EXISTING,",
          "144:                                  FILE_FLAG_OVERLAPPED,",
          "145:                                  NULL);",
          "147:     if (handle->handle != INVALID_HANDLE_VALUE) {",
          "148:       handle->flags |= UV_HANDLE_EOF;",
          "149:       return 0;",
          "153:   return -1;",
          "",
          "[Added Lines]",
          "101: static HANDLE open_named_pipe(WCHAR* name, DWORD* duplex_flags) {",
          "102:   HANDLE pipeHandle;",
          "108:   pipeHandle = CreateFileW(name,",
          "109:                            GENERIC_READ | GENERIC_WRITE,",
          "110:                            0,",
          "111:                            NULL,",
          "112:                            OPEN_EXISTING,",
          "113:                            FILE_FLAG_OVERLAPPED,",
          "114:                            NULL);",
          "115:   if (pipeHandle != INVALID_HANDLE_VALUE) {",
          "117:     return pipeHandle;",
          "126:     pipeHandle = CreateFileW(name,",
          "127:                              GENERIC_READ | FILE_WRITE_ATTRIBUTES,",
          "128:                              0,",
          "129:                              NULL,",
          "130:                              OPEN_EXISTING,",
          "131:                              FILE_FLAG_OVERLAPPED,",
          "132:                              NULL);",
          "134:     if (pipeHandle != INVALID_HANDLE_VALUE) {",
          "136:       return pipeHandle;",
          "141:     pipeHandle = CreateFileW(name,",
          "142:                              GENERIC_WRITE | FILE_READ_ATTRIBUTES,",
          "143:                              0,",
          "144:                              NULL,",
          "145:                              OPEN_EXISTING,",
          "146:                              FILE_FLAG_OVERLAPPED,",
          "147:                              NULL);",
          "149:     if (pipeHandle != INVALID_HANDLE_VALUE) {",
          "151:       return pipeHandle;",
          "155:   return INVALID_HANDLE_VALUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210: static int uv_set_pipe_handle(uv_loop_t* loop, uv_pipe_t* handle,",
          "212:   NTSTATUS nt_status;",
          "213:   IO_STATUS_BLOCK io_status;",
          "214:   FILE_MODE_INFORMATION mode_info;",
          "",
          "[Removed Lines]",
          "211:     HANDLE pipeHandle) {",
          "",
          "[Added Lines]",
          "213:     HANDLE pipeHandle, DWORD duplex_flags) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:     }",
          "243:   }",
          "245:   return 0;",
          "246: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:   handle->handle = pipeHandle;",
          "248:   handle->flags |= duplex_flags;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "276:   IO_STATUS_BLOCK io_status;",
          "277:   FILE_PIPE_LOCAL_INFORMATION pipe_info;",
          "281:       handle->write_reqs_pending == 0) {",
          "282:     req = handle->shutdown_req;",
          "285:     nt_status = pNtQueryInformationFile(handle->handle,",
          "286:                                         &io_status,",
          "",
          "[Removed Lines]",
          "279:   if (handle->flags & UV_HANDLE_SHUTTING &&",
          "280:       !(handle->flags & UV_HANDLE_SHUT) &&",
          "",
          "[Added Lines]",
          "284:   if ((handle->flags & UV_HANDLE_CONNECTION) &&",
          "285:       handle->shutdown_req != NULL &&",
          "290:     handle->shutdown_req = NULL;",
          "292:     if (handle->flags & UV_HANDLE_CLOSING) {",
          "294:       if (req->cb) {",
          "295:         uv__set_sys_error(loop, WSAEINTR);",
          "296:         req->cb(req, -1);",
          "297:       }",
          "298:       uv_unref(loop);",
          "299:       DECREASE_PENDING_REQ_COUNT(handle);",
          "300:       return;",
          "301:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "295:         uv__set_sys_error(loop, pRtlNtStatusToDosError(nt_status));",
          "296:         req->cb(req, -1);",
          "297:       }",
          "298:       DECREASE_PENDING_REQ_COUNT(handle);",
          "299:       return;",
          "300:     }",
          "302:     if (pipe_info.OutboundQuota == pipe_info.WriteQuotaAvailable) {",
          "306:       uv_insert_pending_req(loop, (uv_req_t*) req);",
          "307:       return;",
          "",
          "[Removed Lines]",
          "303:       handle->flags |= UV_HANDLE_SHUT;",
          "",
          "[Added Lines]",
          "317:       uv_unref(loop);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "312:                                req,",
          "313:                                WT_EXECUTELONGFUNCTION);",
          "314:     if (result) {",
          "317:       return;",
          "319:     } else {",
          "",
          "[Removed Lines]",
          "316:       handle->flags |= UV_HANDLE_SHUT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "323:         uv__set_sys_error(loop, GetLastError());",
          "324:         req->cb(req, -1);",
          "325:       }",
          "326:       DECREASE_PENDING_REQ_COUNT(handle);",
          "327:       return;",
          "328:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:       uv_unref(loop);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "449:     goto error;",
          "450:   }",
          "453:     uv__set_sys_error(loop, GetLastError());",
          "454:     goto error;",
          "455:   }",
          "",
          "[Removed Lines]",
          "452:   if (uv_set_pipe_handle(loop, handle, handle->accept_reqs[0].pipeHandle)) {",
          "",
          "[Added Lines]",
          "469:   if (uv_set_pipe_handle(loop, handle, handle->accept_reqs[0].pipeHandle, 0)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "478: static DWORD WINAPI pipe_connect_thread_proc(void* parameter) {",
          "480:   int errno;",
          "481:   uv_loop_t* loop;",
          "482:   uv_pipe_t* handle;",
          "483:   uv_connect_t* req;",
          "485:   req = (uv_connect_t*) parameter;",
          "486:   assert(req);",
          "",
          "[Removed Lines]",
          "479:   HANDLE pipeHandle = INVALID_HANDLE_VALUE;",
          "",
          "[Added Lines]",
          "500:   HANDLE pipeHandle = INVALID_HANDLE_VALUE;",
          "501:   DWORD duplex_flags;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "494:   while (WaitNamedPipeW(handle->name, 30000)) {",
          "497:       break;",
          "498:     }",
          "",
          "[Removed Lines]",
          "496:     if (open_named_pipe(handle) == 0) {",
          "",
          "[Added Lines]",
          "514:     pipeHandle = open_named_pipe(handle->name, &duplex_flags);",
          "515:     if (pipeHandle != INVALID_HANDLE_VALUE) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "501:   }",
          "503:   if (pipeHandle != INVALID_HANDLE_VALUE &&",
          "506:     SET_REQ_SUCCESS(req);",
          "507:   } else {",
          "508:     SET_REQ_ERROR(req, GetLastError());",
          "",
          "[Removed Lines]",
          "504:       !uv_set_pipe_handle(loop, handle, pipeHandle)) {",
          "505:     handle->handle = pipeHandle;",
          "",
          "[Added Lines]",
          "523:       !uv_set_pipe_handle(loop, handle, pipeHandle, duplex_flags)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "519:     const char* name, uv_connect_cb cb) {",
          "520:   uv_loop_t* loop = handle->loop;",
          "521:   int errno, nameSize;",
          "525:   uv_req_init(loop, (uv_req_t*) req);",
          "526:   req->type = UV_CONNECT;",
          "",
          "[Removed Lines]",
          "523:   handle->handle = INVALID_HANDLE_VALUE;",
          "",
          "[Added Lines]",
          "540:   HANDLE pipeHandle = INVALID_HANDLE_VALUE;",
          "541:   DWORD duplex_flags;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "539:     goto error;",
          "540:   }",
          "543:     if (GetLastError() == ERROR_PIPE_BUSY) {",
          "545:       if (!QueueUserWorkItem(&pipe_connect_thread_proc,",
          "",
          "[Removed Lines]",
          "542:   if (open_named_pipe(handle) != 0) {",
          "",
          "[Added Lines]",
          "560:   pipeHandle = open_named_pipe(handle->name, &duplex_flags);",
          "561:   if (pipeHandle == INVALID_HANDLE_VALUE) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "549:         goto error;",
          "550:       }",
          "552:       handle->reqs_pending++;",
          "554:       return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571:       uv_ref(loop);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "558:     goto error;",
          "559:   }",
          "564:     errno = GetLastError();",
          "565:     goto error;",
          "566:   }",
          "",
          "[Removed Lines]",
          "561:   assert(handle->handle != INVALID_HANDLE_VALUE);",
          "563:   if (uv_set_pipe_handle(loop, (uv_pipe_t*)req->handle, handle->handle)) {",
          "",
          "[Added Lines]",
          "581:   assert(pipeHandle != INVALID_HANDLE_VALUE);",
          "583:   if (uv_set_pipe_handle(loop,",
          "584:                          (uv_pipe_t*) req->handle,",
          "585:                          pipeHandle,",
          "586:                          duplex_flags)) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "568:   SET_REQ_SUCCESS(req);",
          "569:   uv_insert_pending_req(loop, (uv_req_t*) req);",
          "570:   handle->reqs_pending++;",
          "571:   return;",
          "573: error:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594:   uv_ref(loop);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "576:     handle->name = NULL;",
          "577:   }",
          "582:   }",
          "585:   SET_REQ_ERROR(req, errno);",
          "586:   uv_insert_pending_req(loop, (uv_req_t*) req);",
          "587:   handle->reqs_pending++;",
          "588:   return;",
          "589: }",
          "",
          "[Removed Lines]",
          "579:   if (handle->handle != INVALID_HANDLE_VALUE) {",
          "580:     CloseHandle(handle->handle);",
          "581:     handle->handle = INVALID_HANDLE_VALUE;",
          "",
          "[Added Lines]",
          "603:   if (pipeHandle != INVALID_HANDLE_VALUE) {",
          "604:     CloseHandle(pipeHandle);",
          "611:   uv_ref(loop);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "611:   }",
          "613:   if (handle->flags & UV_HANDLE_CONNECTION) {",
          "614:     eof_timer_destroy(handle);",
          "615:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:     handle->flags |= UV_HANDLE_SHUTTING;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "619:     CloseHandle(handle->handle);",
          "620:     handle->handle = INVALID_HANDLE_VALUE;",
          "621:   }",
          "624: }",
          "",
          "[Removed Lines]",
          "623:   handle->flags |= UV_HANDLE_SHUT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "643:       return;",
          "644:     }",
          "647:       CloseHandle(req->pipeHandle);",
          "648:       req->pipeHandle = INVALID_HANDLE_VALUE;",
          "649:       SET_REQ_ERROR(req, GetLastError());",
          "",
          "[Removed Lines]",
          "646:     if (uv_set_pipe_handle(loop, handle, req->pipeHandle)) {",
          "",
          "[Added Lines]",
          "669:     if (uv_set_pipe_handle(loop, handle, req->pipeHandle, 0)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "867:       SET_REQ_ERROR(req, GetLastError());",
          "868:       goto error;",
          "870:   } else {",
          "871:     memset(&req->overlapped, 0, sizeof(req->overlapped));",
          "872:     if (handle->flags & UV_HANDLE_EMULATE_IOCP) {",
          "",
          "[Removed Lines]",
          "869:     }",
          "",
          "[Added Lines]",
          "892:     }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1123:       handle->write_queue_size += req->queued_bytes;",
          "1124:     }",
          "1130:     handle->reqs_pending++;",
          "1131:     handle->write_reqs_pending++;",
          "",
          "[Removed Lines]",
          "1126:     if (handle->write_reqs_pending == 0) {",
          "1127:       uv_ref(loop);",
          "1128:     }",
          "",
          "[Added Lines]",
          "1149:     uv_ref(loop);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1181:     }",
          "1182:   }",
          "1188:   handle->reqs_pending++;",
          "1189:   handle->write_reqs_pending++;",
          "",
          "[Removed Lines]",
          "1184:   if (handle->write_reqs_pending == 0) {",
          "1185:     uv_ref(loop);",
          "1186:   }",
          "",
          "[Added Lines]",
          "1204:   uv_ref(loop);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1360:         if (handle->ipc) {",
          "1361:           assert(handle->remaining_ipc_rawdata_bytes >= bytes);",
          "1363:             handle->remaining_ipc_rawdata_bytes - bytes;",
          "1364:           if (handle->read2_cb) {",
          "1365:             handle->read2_cb(handle, bytes, buf,",
          "",
          "[Removed Lines]",
          "1362:           handle->remaining_ipc_rawdata_bytes =",
          "",
          "[Added Lines]",
          "1379:           handle->remaining_ipc_rawdata_bytes =",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1440:     uv_queue_non_overlapped_write(handle);",
          "1441:   }",
          "1447:   if (handle->write_reqs_pending == 0 &&",
          "1448:       handle->flags & UV_HANDLE_SHUTTING) {",
          "1449:     uv_want_endgame(loop, (uv_handle_t*)handle);",
          "1450:   }",
          "1452:   DECREASE_PENDING_REQ_COUNT(handle);",
          "1453: }",
          "",
          "[Removed Lines]",
          "1443:   if (handle->write_reqs_pending == 0) {",
          "1444:     uv_unref(loop);",
          "1445:   }",
          "",
          "[Added Lines]",
          "1465:   uv_unref(loop);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1495:     }",
          "1496:   }",
          "1498:   DECREASE_PENDING_REQ_COUNT(handle);",
          "1499: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1512:   uv_unref(loop);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1519:     req->cb(req, 0);",
          "1520:   }",
          "1522:   DECREASE_PENDING_REQ_COUNT(handle);",
          "1523: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1537:   uv_unref(loop);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1534:   r = uv_timer_init(pipe->loop, pipe->eof_timer);",
          "1536:   pipe->eof_timer->data = pipe;",
          "1537: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1553:   uv_unref(pipe->loop);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1596:   assert(pipe->flags && UV_HANDLE_CONNECTION);",
          "1598:   if (pipe->eof_timer) {",
          "1599:     uv_close((uv_handle_t*) pipe->eof_timer, eof_timer_close_cb);",
          "1600:     pipe->eof_timer = NULL;",
          "1601:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1616:     uv_ref(pipe->loop);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1612:   HANDLE os_handle = (HANDLE)_get_osfhandle(file);",
          "1614:   if (os_handle == INVALID_HANDLE_VALUE ||",
          "1616:     return;",
          "1617:   }",
          "",
          "[Removed Lines]",
          "1615:       uv_set_pipe_handle(pipe->loop, pipe, os_handle) == -1) {",
          "",
          "[Added Lines]",
          "1633:       uv_set_pipe_handle(pipe->loop, pipe, os_handle, 0) == -1) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/process.c||deps/uv/src/win/process.c": [
          "File: deps/uv/src/win/process.c -> deps/uv/src/win/process.c"
        ],
        "deps/uv/src/win/stream.c||deps/uv/src/win/stream.c": [
          "File: deps/uv/src/win/stream.c -> deps/uv/src/win/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   handle->read_req.wait_handle = INVALID_HANDLE_VALUE;",
          "48:   handle->read_req.type = UV_READ;",
          "49:   handle->read_req.data = handle;",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   handle->shutdown_req = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:   handle->flags |= UV_HANDLE_SHUTTING;",
          "170:   handle->shutdown_req = req;",
          "171:   handle->reqs_pending++;",
          "173:   uv_want_endgame(loop, (uv_handle_t*)handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:   uv_ref(loop);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196: int uv_is_writable(uv_stream_t* handle) {",
          "198: }",
          "",
          "[Removed Lines]",
          "197:   return !(handle->flags & UV_HANDLE_SHUT);",
          "",
          "[Added Lines]",
          "200:   return !(handle->flags & UV_HANDLE_SHUTTING);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c": [
          "File: deps/uv/src/win/tcp.c -> deps/uv/src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:   uv_tcp_accept_t* req;",
          "173:   if (handle->flags & UV_HANDLE_CONNECTION &&",
          "176:       handle->write_reqs_pending == 0) {",
          "179:       status = 0;",
          "180:       handle->flags |= UV_HANDLE_SHUT;",
          "181:     } else {",
          "",
          "[Removed Lines]",
          "174:       handle->flags & UV_HANDLE_SHUTTING &&",
          "175:       !(handle->flags & UV_HANDLE_SHUT) &&",
          "178:     if (shutdown(handle->socket, SD_SEND) != SOCKET_ERROR) {",
          "",
          "[Added Lines]",
          "174:       handle->shutdown_req != NULL &&",
          "177:     if (handle->flags & UV_HANDLE_CLOSING) {",
          "178:       status = -1;",
          "179:       sys_error = WSAEINTR;",
          "180:     } else if (shutdown(handle->socket, SD_SEND) != SOCKET_ERROR) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:       handle->shutdown_req->cb(handle->shutdown_req, status);",
          "190:     }",
          "192:     DECREASE_PENDING_REQ_COUNT(handle);",
          "193:     return;",
          "194:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:     handle->shutdown_req = NULL;",
          "196:     uv_unref(loop);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "643:   if (UV_SUCCEEDED_WITHOUT_IOCP(success)) {",
          "645:     handle->reqs_pending++;",
          "646:     uv_insert_pending_req(loop, (uv_req_t*)req);",
          "647:   } else if (UV_SUCCEEDED_WITH_IOCP(success)) {",
          "649:     handle->reqs_pending++;",
          "650:   } else {",
          "651:     uv__set_sys_error(loop, WSAGetLastError());",
          "652:     return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "651:     uv_ref(loop);",
          "656:     uv_ref(loop);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "703:   if (UV_SUCCEEDED_WITHOUT_IOCP(success)) {",
          "704:     handle->reqs_pending++;",
          "705:     uv_insert_pending_req(loop, (uv_req_t*)req);",
          "706:   } else if (UV_SUCCEEDED_WITH_IOCP(success)) {",
          "707:     handle->reqs_pending++;",
          "708:   } else {",
          "709:     uv__set_sys_error(loop, WSAGetLastError());",
          "710:     return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "712:     uv_ref(loop);",
          "716:     uv_ref(loop);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "799:     handle->reqs_pending++;",
          "800:     handle->write_reqs_pending++;",
          "801:     uv_insert_pending_req(loop, (uv_req_t*) req);",
          "802:   } else if (UV_SUCCEEDED_WITH_IOCP(result == 0)) {",
          "804:     req->queued_bytes = uv_count_bufs(bufs, bufcnt);",
          "805:     handle->reqs_pending++;",
          "806:     handle->write_reqs_pending++;",
          "807:     handle->write_queue_size += req->queued_bytes;",
          "808:   } else {",
          "810:     uv__set_sys_error(loop, WSAGetLastError());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811:     uv_ref(loop);",
          "818:     uv_ref(loop);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "950:   }",
          "952:   DECREASE_PENDING_REQ_COUNT(handle);",
          "953: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "964:   uv_unref(loop);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1024:   }",
          "1026:   DECREASE_PENDING_REQ_COUNT(handle);",
          "1027: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1039:   uv_unref(loop);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c": [
          "File: deps/uv/src/win/tty.c -> deps/uv/src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1684:   handle->reqs_pending++;",
          "1685:   handle->write_reqs_pending++;",
          "1687:   req->queued_bytes = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1686:   uv_ref(loop);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1715:   }",
          "1717:   DECREASE_PENDING_REQ_COUNT(handle);",
          "1718: }",
          "1721: void uv_tty_close(uv_tty_t* handle) {",
          "1722:   uv_tty_read_stop(handle);",
          "1723:   CloseHandle(handle->handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1719:   uv_unref(loop);",
          "1724:   handle->flags |= UV_HANDLE_SHUTTING;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1731: void uv_tty_endgame(uv_loop_t* loop, uv_tty_t* handle) {",
          "1735:       handle->write_reqs_pending == 0) {",
          "1739:     if (handle->shutdown_req->cb) {",
          "1741:     }",
          "1743:     DECREASE_PENDING_REQ_COUNT(handle);",
          "1744:     return;",
          "1745:   }",
          "",
          "[Removed Lines]",
          "1732:   if (handle->flags & UV_HANDLE_CONNECTION &&",
          "1733:       handle->flags & UV_HANDLE_SHUTTING &&",
          "1734:       !(handle->flags & UV_HANDLE_SHUT) &&",
          "1736:     handle->flags |= UV_HANDLE_SHUT;",
          "1740:       handle->shutdown_req->cb(handle->shutdown_req, 0);",
          "",
          "[Added Lines]",
          "1736:   if ((handle->flags && UV_HANDLE_CONNECTION) &&",
          "1737:       handle->shutdown_req != NULL &&",
          "1741:       if (handle->flags & UV_HANDLE_CLOSING) {",
          "1742:         uv__set_sys_error(loop, WSAEINTR);",
          "1743:         handle->shutdown_req->cb(handle->shutdown_req, -1);",
          "1744:       } else {",
          "1745:         handle->shutdown_req->cb(handle->shutdown_req, 0);",
          "1746:       }",
          "1749:     handle->shutdown_req = NULL;",
          "1751:     uv_unref(loop);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c": [
          "File: deps/uv/src/win/udp.c -> deps/uv/src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:     req->queued_bytes = 0;",
          "406:     handle->reqs_pending++;",
          "407:     uv_insert_pending_req(loop, (uv_req_t*)req);",
          "408:   } else if (UV_SUCCEEDED_WITH_IOCP(result == 0)) {",
          "410:     req->queued_bytes = uv_count_bufs(bufs, bufcnt);",
          "411:     handle->reqs_pending++;",
          "412:   } else {",
          "414:     uv__set_sys_error(loop, WSAGetLastError());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     uv_ref(loop);",
          "413:     uv_ref(loop);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "573:     }",
          "574:   }",
          "576:   DECREASE_PENDING_REQ_COUNT(handle);",
          "577: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:   uv_unref(loop);",
          "",
          "---------------"
        ],
        "deps/uv/test/benchmark-pound.c||deps/uv/test/benchmark-pound.c": [
          "File: deps/uv/test/benchmark-pound.c -> deps/uv/test/benchmark-pound.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   if (status != 0) {",
          "109: #if DEBUG",
          "111: #endif",
          "112:     uv_close((uv_handle_t*)req->handle, close_cb);",
          "113:     conns_failed++;",
          "",
          "[Removed Lines]",
          "110:     fprintf(stderr, \"connect error %s\\n\", uv_err_name(uv_last_error()));",
          "",
          "[Added Lines]",
          "110:     fprintf(stderr,",
          "111:             \"connect error %s\\n\",",
          "112:             uv_err_name(uv_last_error(uv_default_loop())));",
          "",
          "---------------"
        ],
        "deps/uv/test/run-tests.c||deps/uv/test/run-tests.c": [
          "File: deps/uv/test/run-tests.c -> deps/uv/test/run-tests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:   uv_pipe_open(&channel, 0);",
          "135:   r = uv_tcp_init(uv_default_loop(), &tcp_server);",
          "136:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "132:   ASSERT(uv_is_readable(&channel));",
          "133:   ASSERT(uv_is_writable(&channel));",
          "",
          "[Added Lines]",
          "132:   ASSERT(uv_is_readable((uv_stream_t*) &channel));",
          "133:   ASSERT(uv_is_writable((uv_stream_t*) &channel));",
          "",
          "---------------"
        ],
        "deps/uv/test/runner-win.c||deps/uv/test/runner-win.c": [
          "File: deps/uv/test/runner-win.c -> deps/uv/test/runner-win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:   p->stdio_in = nul;",
          "136:   p->stdio_out = file;",
          "137:   p->process = pi.hProcess;",
          "140:   return 0;",
          "",
          "[Removed Lines]",
          "138:   p->name = name;",
          "",
          "[Added Lines]",
          "138:   p->name = part;",
          "",
          "---------------"
        ],
        "deps/uv/test/runner.c||deps/uv/test/runner.c": [
          "File: deps/uv/test/runner.c -> deps/uv/test/runner.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:     process_terminate(&processes[i]);",
          "187:   }",
          "190:     FATAL(\"process_wait failed\");",
          "191:   }",
          "",
          "[Removed Lines]",
          "189:   if (process_wait(processes, process_count - 1, -1) < 0) {",
          "",
          "[Added Lines]",
          "189:   if (process_count > 0 &&",
          "190:       process_wait(processes, process_count - 1, -1) < 0) {",
          "",
          "---------------"
        ],
        "deps/uv/test/test-counters-init.c||deps/uv/test/test-counters-init.c": [
          "File: deps/uv/test/test-counters-init.c -> deps/uv/test/test-counters-init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: TEST_IMPL(counters_init) {",
          "94:   int r;",
          "112:   unlink(\"test_file\");",
          "",
          "[Removed Lines]",
          "95:   int eio_init_prev;",
          "96:   int req_init_prev;",
          "97:   int handle_init_prev;",
          "98:   int stream_init_prev;",
          "99:   int tcp_init_prev;",
          "100:   int udp_init_prev;",
          "101:   int pipe_init_prev;",
          "102:   int tty_init_prev;",
          "103:   int prepare_init_prev;",
          "104:   int check_init_prev;",
          "105:   int idle_init_prev;",
          "106:   int async_init_prev;",
          "107:   int timer_init_prev;",
          "108:   int process_init_prev;",
          "109:   int fs_event_init_prev;",
          "",
          "[Added Lines]",
          "95:   uint64_t eio_init_prev;",
          "96:   uint64_t req_init_prev;",
          "97:   uint64_t handle_init_prev;",
          "98:   uint64_t stream_init_prev;",
          "99:   uint64_t tcp_init_prev;",
          "100:   uint64_t udp_init_prev;",
          "101:   uint64_t pipe_init_prev;",
          "102:   uint64_t tty_init_prev;",
          "103:   uint64_t prepare_init_prev;",
          "104:   uint64_t check_init_prev;",
          "105:   uint64_t idle_init_prev;",
          "106:   uint64_t async_init_prev;",
          "107:   uint64_t timer_init_prev;",
          "108:   uint64_t process_init_prev;",
          "109:   uint64_t fs_event_init_prev;",
          "",
          "---------------"
        ],
        "deps/uv/test/test-cwd-and-chdir.c||deps/uv/test/test-cwd-and-chdir.c": [
          "File: deps/uv/test/test-cwd-and-chdir.c -> deps/uv/test/test-cwd-and-chdir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   err = uv_cwd(buffer_orig, size);",
          "38:   ASSERT(err.code == UV_OK);",
          "41: #ifdef _WIN32",
          "48:   ASSERT(last_slash);",
          "52:   err = uv_chdir(buffer_orig);",
          "53:   ASSERT(err.code == UV_OK);",
          "",
          "[Removed Lines]",
          "40:   last_slash = strrchr(buffer_orig,",
          "42:           '\\\\'",
          "43: #else",
          "44:           '/'",
          "45: #endif",
          "46:   );",
          "",
          "[Added Lines]",
          "42:   last_slash = strrchr(buffer_orig, '\\\\');",
          "44:   if (last_slash > buffer_orig && *(last_slash - 1) != ':') {",
          "46:   }",
          "48:   last_slash = strrchr(buffer_orig, '/');",
          "49:   ASSERT(last_slash);",
          "50:   if (last_slash != buffer_orig) {",
          "52:   }",
          "53: #endif",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c": [
          "File: deps/uv/test/test-fs.c -> deps/uv/test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187: static void chown_root_cb(uv_fs_t* req) {",
          "188:   ASSERT(req->fs_type == UV_FS_CHOWN);",
          "189:   ASSERT(req->result == -1);",
          "190:   ASSERT(req->errorno == UV_EPERM);",
          "191:   chown_cb_count++;",
          "192:   uv_fs_req_cleanup(req);",
          "193: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189: #ifdef _WIN32",
          "191:   ASSERT(req->result == 0);",
          "192: #else",
          "196: #endif",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: TEST_DECLARE   (pipe_connect_bad_name)",
          "60: TEST_DECLARE   (connection_fail)",
          "61: TEST_DECLARE   (connection_fail_doesnt_auto_close)",
          "62: TEST_DECLARE   (shutdown_eof)",
          "63: TEST_DECLARE   (callback_stack)",
          "64: TEST_DECLARE   (error_message)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: TEST_DECLARE   (shutdown_close_tcp)",
          "63: TEST_DECLARE   (shutdown_close_pipe)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: TEST_DECLARE   (tcp_ref)",
          "80: TEST_DECLARE   (tcp_ref2)",
          "81: TEST_DECLARE   (tcp_ref3)",
          "82: TEST_DECLARE   (udp_ref)",
          "83: TEST_DECLARE   (udp_ref2)",
          "84: TEST_DECLARE   (udp_ref3)",
          "85: TEST_DECLARE   (pipe_ref)",
          "86: TEST_DECLARE   (pipe_ref2)",
          "87: TEST_DECLARE   (pipe_ref3)",
          "88: TEST_DECLARE   (process_ref)",
          "89: TEST_DECLARE   (async)",
          "90: TEST_DECLARE   (get_currentexe)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: TEST_DECLARE   (tcp_ref4)",
          "85: TEST_DECLARE   (tcp_ref5)",
          "92: TEST_DECLARE   (pipe_ref4)",
          "93: TEST_DECLARE   (pipe_ref5)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:   TEST_ENTRY  (connection_fail)",
          "203:   TEST_ENTRY  (connection_fail_doesnt_auto_close)",
          "205:   TEST_ENTRY  (shutdown_eof)",
          "206:   TEST_HELPER (shutdown_eof, tcp4_echo_server)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:   TEST_ENTRY  (shutdown_close_tcp)",
          "212:   TEST_HELPER (shutdown_close_tcp, tcp4_echo_server)",
          "213:   TEST_ENTRY  (shutdown_close_pipe)",
          "214:   TEST_HELPER (shutdown_close_pipe, pipe_echo_server)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228:   TEST_ENTRY  (tcp_ref2)",
          "229:   TEST_ENTRY  (tcp_ref3)",
          "230:   TEST_HELPER (tcp_ref3, tcp4_echo_server)",
          "231:   TEST_ENTRY  (udp_ref)",
          "232:   TEST_ENTRY  (udp_ref2)",
          "233:   TEST_ENTRY  (udp_ref3)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:   TEST_ENTRY  (tcp_ref4)",
          "243:   TEST_HELPER (tcp_ref4, tcp4_echo_server)",
          "244:   TEST_ENTRY  (tcp_ref5)",
          "245:   TEST_HELPER (tcp_ref5, tcp4_echo_server)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "236:   TEST_ENTRY  (pipe_ref2)",
          "237:   TEST_ENTRY  (pipe_ref3)",
          "238:   TEST_HELPER (pipe_ref3, pipe_echo_server)",
          "239:   TEST_ENTRY  (process_ref)",
          "241:   TEST_ENTRY  (loop_handles)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:   TEST_ENTRY  (pipe_ref4)",
          "255:   TEST_HELPER (pipe_ref4, pipe_echo_server)",
          "256:   TEST_ENTRY  (pipe_ref5)",
          "257:   TEST_HELPER (pipe_ref5, pipe_echo_server)",
          "",
          "---------------"
        ],
        "deps/uv/test/test-ref.c||deps/uv/test/test-ref.c": [
          "File: deps/uv/test/test-ref.c -> deps/uv/test/test-ref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <string.h>",
          "29: static void fail_cb(void) {",
          "30:   FATAL(\"fail_cb should not have been called\");",
          "31: }",
          "34: TEST_IMPL(ref) {",
          "35:   uv_run(uv_default_loop());",
          "36:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: static uv_write_t write_req;",
          "30: static uv_shutdown_t shutdown_req;",
          "31: static uv_connect_t connect_req;",
          "33: static char buffer[32767];",
          "41: static void write_unref_cb(uv_connect_t* req, int status) {",
          "42:   uv_buf_t buf = uv_buf_init(buffer, sizeof buffer);",
          "44:   ASSERT(req == &connect_req);",
          "45:   ASSERT(status == 0);",
          "47:   uv_write(&write_req, req->handle, &buf, 1, (uv_write_cb) fail_cb);",
          "48:   uv_unref(uv_default_loop()); // uv_write refs the loop",
          "49: }",
          "53: static void shutdown_unref_cb(uv_connect_t* req, int status) {",
          "54:   ASSERT(req == &connect_req);",
          "55:   ASSERT(status == 0);",
          "57:   uv_shutdown(&shutdown_req, req->handle, (uv_shutdown_cb) fail_cb);",
          "58:   uv_unref(uv_default_loop()); // uv_shutdown refs the loop",
          "59: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143: TEST_IMPL(tcp_ref3) {",
          "144:   struct sockaddr_in addr = uv_ip4_addr(\"127.0.0.1\", TEST_PORT);",
          "146:   uv_tcp_t h;",
          "147:   uv_tcp_init(uv_default_loop(), &h);",
          "149:   uv_unref(uv_default_loop());",
          "151:   uv_run(uv_default_loop());",
          "",
          "[Removed Lines]",
          "145:   uv_connect_t req;",
          "148:   uv_tcp_connect(&req, &h, addr, (uv_connect_cb)fail_cb);",
          "",
          "[Added Lines]",
          "175:   uv_tcp_connect(&connect_req, &h, addr, (uv_connect_cb)fail_cb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153: }",
          "156: TEST_IMPL(udp_ref) {",
          "157:   uv_udp_t h;",
          "158:   uv_udp_init(uv_default_loop(), &h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183: TEST_IMPL(tcp_ref4) {",
          "184:   struct sockaddr_in addr = uv_ip4_addr(\"127.0.0.1\", TEST_PORT);",
          "185:   uv_tcp_t h;",
          "186:   uv_tcp_init(uv_default_loop(), &h);",
          "187:   uv_tcp_connect(&connect_req, &h, addr, write_unref_cb);",
          "188:   uv_unref(uv_default_loop());",
          "189:   uv_run(uv_default_loop());",
          "190:   return 0;",
          "191: }",
          "194: TEST_IMPL(tcp_ref5) {",
          "195:   struct sockaddr_in addr = uv_ip4_addr(\"127.0.0.1\", TEST_PORT);",
          "196:   uv_tcp_t h;",
          "197:   uv_tcp_init(uv_default_loop(), &h);",
          "198:   uv_tcp_connect(&connect_req, &h, addr, shutdown_unref_cb);",
          "199:   uv_unref(uv_default_loop());",
          "200:   uv_run(uv_default_loop());",
          "201:   return 0;",
          "202: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212: TEST_IMPL(pipe_ref3) {",
          "214:   uv_pipe_t h;",
          "215:   uv_pipe_init(uv_default_loop(), &h, 0);",
          "217:   uv_unref(uv_default_loop());",
          "219:   uv_run(uv_default_loop());",
          "",
          "[Removed Lines]",
          "213:   uv_connect_t req;",
          "216:   uv_pipe_connect(&req, &h, TEST_PIPENAME, (uv_connect_cb)fail_cb);",
          "",
          "[Added Lines]",
          "264:   uv_pipe_connect(&connect_req, &h, TEST_PIPENAME, (uv_connect_cb)fail_cb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "221: }",
          "224: TEST_IMPL(process_ref) {",
          "226:   char *argv[] = { NULL, \"spawn_helper4\", NULL };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272: TEST_IMPL(pipe_ref4) {",
          "273:   uv_pipe_t h;",
          "274:   uv_pipe_init(uv_default_loop(), &h, 0);",
          "275:   uv_pipe_connect(&connect_req, &h, TEST_PIPENAME, write_unref_cb);",
          "276:   uv_unref(uv_default_loop());",
          "277:   uv_run(uv_default_loop());",
          "278:   return 0;",
          "279: }",
          "282: TEST_IMPL(pipe_ref5) {",
          "283:   uv_pipe_t h;",
          "284:   uv_pipe_init(uv_default_loop(), &h, 0);",
          "285:   uv_pipe_connect(&connect_req, &h, TEST_PIPENAME, shutdown_unref_cb);",
          "286:   uv_unref(uv_default_loop());",
          "287:   uv_run(uv_default_loop());",
          "288:   return 0;",
          "289: }",
          "",
          "---------------"
        ],
        "deps/uv/test/test-shutdown-close.c||deps/uv/test/test-shutdown-close.c": [
          "File: deps/uv/test/test-shutdown-close.c -> deps/uv/test/test-shutdown-close.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"uv.h\"",
          "28: #include \"task.h\"",
          "31: static uv_shutdown_t shutdown_req;",
          "32: static uv_connect_t connect_req;",
          "34: static int connect_cb_called = 0;",
          "35: static int shutdown_cb_called = 0;",
          "36: static int close_cb_called = 0;",
          "39: static void shutdown_cb(uv_shutdown_t* req, int status) {",
          "40:   ASSERT(req == &shutdown_req);",
          "41:   ASSERT(status == 0 ||",
          "42:          (status == -1 && uv_last_error(uv_default_loop()).code == UV_EINTR));",
          "43:   shutdown_cb_called++;",
          "44: }",
          "47: static void close_cb(uv_handle_t* handle) {",
          "48:   close_cb_called++;",
          "49: }",
          "52: static void connect_cb(uv_connect_t* req, int status) {",
          "53:   int r;",
          "55:   ASSERT(req == &connect_req);",
          "56:   ASSERT(status == 0);",
          "58:   r = uv_shutdown(&shutdown_req, req->handle, shutdown_cb);",
          "59:   ASSERT(r == 0);",
          "60:   uv_close((uv_handle_t*) req->handle, close_cb);",
          "62:   connect_cb_called++;",
          "63: }",
          "66: TEST_IMPL(shutdown_close_tcp) {",
          "67:   struct sockaddr_in addr = uv_ip4_addr(\"127.0.0.1\", TEST_PORT);",
          "68:   uv_tcp_t h;",
          "69:   int r;",
          "71:   r = uv_tcp_init(uv_default_loop(), &h);",
          "72:   ASSERT(r == 0);",
          "73:   r = uv_tcp_connect(&connect_req, &h, addr, connect_cb);",
          "74:   ASSERT(r == 0);",
          "75:   r = uv_run(uv_default_loop());",
          "76:   ASSERT(r == 0);",
          "78:   ASSERT(connect_cb_called == 1);",
          "79:   ASSERT(shutdown_cb_called == 1);",
          "80:   ASSERT(close_cb_called == 1);",
          "82:   return 0;",
          "83: }",
          "86: TEST_IMPL(shutdown_close_pipe) {",
          "87:   uv_pipe_t h;",
          "88:   int r;",
          "90:   r = uv_pipe_init(uv_default_loop(), &h, 0);",
          "91:   ASSERT(r == 0);",
          "92:   uv_pipe_connect(&connect_req, &h, TEST_PIPENAME, connect_cb);",
          "93:   r = uv_run(uv_default_loop());",
          "94:   ASSERT(r == 0);",
          "96:   ASSERT(connect_cb_called == 1);",
          "97:   ASSERT(shutdown_cb_called == 1);",
          "98:   ASSERT(close_cb_called == 1);",
          "100:   return 0;",
          "101: }",
          "",
          "---------------"
        ],
        "deps/uv/test/test-tty.c||deps/uv/test/test-tty.c": [
          "File: deps/uv/test/test-tty.c -> deps/uv/test/test-tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: TEST_IMPL(tty) {",
          "26:   int r, width, height;",
          "28:   uv_loop_t* loop = uv_default_loop();",
          "30:   ASSERT(UV_UNKNOWN_HANDLE == uv_guess_handle(-1));",
          "39:   ASSERT(r == 0);",
          "42:   ASSERT(r == 0);",
          "44:   printf(\"width=%d height=%d\\n\", width, height);",
          "",
          "[Removed Lines]",
          "27:   uv_tty_t tty;",
          "36:   ASSERT(UV_TTY == uv_guess_handle(0));",
          "38:   r = uv_tty_init(uv_default_loop(), &tty, 0, 1);",
          "41:   r = uv_tty_get_winsize(&tty, &width, &height);",
          "",
          "[Added Lines]",
          "25: #ifdef _WIN32",
          "26: # include <io.h>",
          "27: # include <windows.h>",
          "28: #else // Unix",
          "29: # include <fcntl.h>",
          "30: # include <unistd.h>",
          "31: #endif",
          "36:   int ttyin_fd, ttyout_fd;",
          "37:   uv_tty_t tty_in, tty_out;",
          "41: #ifdef _WIN32",
          "42:   HANDLE handle;",
          "43:   handle = CreateFileA(\"conin$\",",
          "44:                        GENERIC_READ | GENERIC_WRITE,",
          "45:                        FILE_SHARE_READ | FILE_SHARE_WRITE,",
          "46:                        NULL,",
          "47:                        OPEN_EXISTING,",
          "48:                        FILE_ATTRIBUTE_NORMAL,",
          "49:                        NULL);",
          "50:   ASSERT(handle != INVALID_HANDLE_VALUE);",
          "51:   ttyin_fd = _open_osfhandle((intptr_t) handle, 0);",
          "53:   handle = CreateFileA(\"conout$\",",
          "54:                        GENERIC_READ | GENERIC_WRITE,",
          "55:                        FILE_SHARE_READ | FILE_SHARE_WRITE,",
          "56:                        NULL,",
          "57:                        OPEN_EXISTING,",
          "58:                        FILE_ATTRIBUTE_NORMAL,",
          "59:                        NULL);",
          "60:   ASSERT(handle != INVALID_HANDLE_VALUE);",
          "61:   ttyout_fd = _open_osfhandle((intptr_t) handle, 0);",
          "64:   ttyin_fd = open(\"/dev/tty\", O_RDONLY, 0);",
          "65:   ttyout_fd = open(\"/dev/tty\", O_WRONLY, 0);",
          "66: #endif",
          "68:   ASSERT(ttyin_fd >= 0);",
          "69:   ASSERT(ttyout_fd >= 0);",
          "73:   ASSERT(UV_TTY == uv_guess_handle(ttyin_fd));",
          "74:   ASSERT(UV_TTY == uv_guess_handle(ttyout_fd));",
          "76:   r = uv_tty_init(uv_default_loop(), &tty_in, ttyin_fd, 1);",
          "77:   ASSERT(r == 0);",
          "79:   r = uv_tty_init(uv_default_loop(), &tty_out, ttyout_fd, 2);",
          "82:   r = uv_tty_get_winsize(&tty_out, &width, &height);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   ASSERT(height > 10);",
          "55:   ASSERT(r == 0);",
          "59:   ASSERT(r == 0);",
          "65:   uv_run(loop);",
          "",
          "[Removed Lines]",
          "54:   r = uv_tty_set_mode(&tty, 1);",
          "58:   r = uv_tty_set_mode(&tty, 0);",
          "63:   uv_close((uv_handle_t*)&tty, NULL);",
          "",
          "[Added Lines]",
          "95:   r = uv_tty_set_mode(&tty_in, 1);",
          "99:   r = uv_tty_set_mode(&tty_in, 0);",
          "104:   uv_close((uv_handle_t*) &tty_in, NULL);",
          "105:   uv_close((uv_handle_t*) &tty_out, NULL);",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:         'test/test-pipe-bind-error.c',",
          "300:         'test/test-pipe-connect-error.c',",
          "301:         'test/test-ref.c',",
          "302:         'test/test-shutdown-eof.c',",
          "303:         'test/test-spawn.c',",
          "304:         'test/test-stdio-over-pipes.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:         'test/test-shutdown-close.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3a2dd1b13344a8347265ab0f46181de33b1b1ef",
      "candidate_info": {
        "commit_hash": "e3a2dd1b13344a8347265ab0f46181de33b1b1ef",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e3a2dd1b13344a8347265ab0f46181de33b1b1ef",
        "files": [
          "lib/fs.js"
        ],
        "message": "fs: fix fs.readFileSync to work on real empty file",
        "before_after_code_files": [
          "lib/fs.js||lifs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:     if (size !== 0) {",
          "224:       done = pos >= size;",
          "225:     } else {",
          "227:     }",
          "228:   }",
          "",
          "[Removed Lines]",
          "226:       done = bytesRead > 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c0f13eda46c5e7649b75ba7c0fbe1ec7ff27db6",
      "candidate_info": {
        "commit_hash": "0c0f13eda46c5e7649b75ba7c0fbe1ec7ff27db6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0c0f13eda46c5e7649b75ba7c0fbe1ec7ff27db6",
        "files": [
          "deps/v8/SConstruct",
          "deps/v8/tools/gyp/v8.gyp"
        ],
        "message": "Patches floating on v8",
        "before_after_code_files": [
          "deps/v8/tools/gyp/v8.gyp||deps/v8/tools/gyp/v8.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/tools/gyp/v8.gyp||deps/v8/tools/gyp/v8.gyp": [
          "File: deps/v8/tools/gyp/v8.gyp -> deps/v8/tools/gyp/v8.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "641:                 ],",
          "642:               }",
          "643:             ],",
          "644:             ['OS==\"mac\"', {",
          "645:               'sources': [",
          "646:                 '../../src/platform-macos.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "644:             ['OS==\"solaris\"', {",
          "645:                 'sources': [",
          "646:                   '../../src/platform-solaris.cc',",
          "647:                   '../../src/platform-posix.cc'",
          "648:                 ],",
          "649:               }",
          "650:             ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9bfb1bc916c3fff2caba85c4ee24a8195e86ee6",
      "candidate_info": {
        "commit_hash": "b9bfb1bc916c3fff2caba85c4ee24a8195e86ee6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b9bfb1bc916c3fff2caba85c4ee24a8195e86ee6",
        "files": [
          "lib/child_process.js"
        ],
        "message": "child_process: Emit err rather than throw for IPC write failure",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     var writeReq = channel.write(buffer, 0, buffer.length, sendHandle);",
          "122:     if (!writeReq) {",
          "124:     }",
          "126:     writeReq.oncomplete = nop;",
          "",
          "[Removed Lines]",
          "123:       throw errnoException(errno, 'write', 'cannot write to IPC channel.');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}