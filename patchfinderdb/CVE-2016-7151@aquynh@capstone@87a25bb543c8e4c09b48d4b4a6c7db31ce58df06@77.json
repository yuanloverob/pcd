{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3ca6b0df434419f92292f2faebad397d19588cc1",
      "candidate_info": {
        "commit_hash": "3ca6b0df434419f92292f2faebad397d19588cc1",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/3ca6b0df434419f92292f2faebad397d19588cc1",
        "files": [
          "arch/X86/X86ATTInstPrinter.c",
          "arch/X86/X86GenAsmWriter.inc",
          "cstool/Makefile"
        ],
        "message": "x86: fix movw instruction in #789",
        "before_after_code_files": [
          "arch/X86/X86ATTInstPrinter.c||arch/X86/X86ATTInstPrinter.c",
          "arch/X86/X86GenAsmWriter.inc||arch/X86/X86GenAsmWriter.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86ATTInstPrinter.c||arch/X86/X86ATTInstPrinter.c": [
          "File: arch/X86/X86ATTInstPrinter.c -> arch/X86/X86ATTInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "803:     }",
          "804:    }",
          "805:   } else {",
          "807:   }",
          "808:  }",
          "",
          "[Removed Lines]",
          "806:    SStream_concat0(O, \"0\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/X86/X86GenAsmWriter.inc||arch/X86/X86GenAsmWriter.inc": [
          "File: arch/X86/X86GenAsmWriter.inc -> arch/X86/X86GenAsmWriter.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19239:   uint64_t Bits = (Bits2 << 32) | Bits1;",
          "19243: #ifndef CAPSTONE_DIET",
          "19247: #endif",
          "",
          "[Removed Lines]",
          "19242:   if (!X86_lockrep(MI, O))",
          "19244:     SStream_concat0(O, AsmStrs+(Bits & 16383)-1);",
          "19245: #else",
          "19246:  ;",
          "",
          "[Added Lines]",
          "19242:   if (!X86_lockrep(MI, O)) {",
          "19245:     if (opcode == X86_MOV32sm) {",
          "19246:       SStream_concat0(O, \"movw\\t\");",
          "19247:     } else",
          "19248:       SStream_concat0(O, AsmStrs+(Bits & 16383)-1);",
          "19250:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e1b9282a02fde7887d7a73ac9f38083275ac171",
      "candidate_info": {
        "commit_hash": "5e1b9282a02fde7887d7a73ac9f38083275ac171",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/5e1b9282a02fde7887d7a73ac9f38083275ac171",
        "files": [
          "utils.h"
        ],
        "message": "Fix compilation from within a macOS kernel extension. #867",
        "before_after_code_files": [
          "utils.h||utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "utils.h||utils.h": [
          "File: utils.h -> utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #ifndef CS_UTILS_H",
          "5: #define CS_UTILS_H",
          "7: #include <stddef.h>",
          "8: #include \"include/capstone/capstone.h\"",
          "9: #include \"cs_priv.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #if defined(CAPSTONE_HAS_OSXKERNEL)",
          "8: #include <libkern/libkern.h>",
          "9: #else",
          "12: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a159f18651019fc0a32fa2ac2759d019ea5d734",
      "candidate_info": {
        "commit_hash": "0a159f18651019fc0a32fa2ac2759d019ea5d734",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/0a159f18651019fc0a32fa2ac2759d019ea5d734",
        "files": [
          "CREDITS.TXT",
          "bindings/const_generator.py",
          "bindings/python/test_basic.py",
          "tests/test_basic.c"
        ],
        "message": "TMS320C64x support at tests and const generator.",
        "before_after_code_files": [
          "bindings/const_generator.py||bindings/const_generator.py",
          "bindings/python/test_basic.py||bindings/python/test_basic.py",
          "tests/test_basic.c||tests/test_basic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/const_generator.py||bindings/const_generator.py": [
          "File: bindings/const_generator.py -> bindings/const_generator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: INCL_DIR = '../include/capstone/'",
          "10: template = {",
          "11:     'java': {",
          "",
          "[Removed Lines]",
          "8: include = [ 'arm.h', 'arm64.h', 'm68k.h', 'mips.h', 'x86.h', 'ppc.h', 'sparc.h', 'systemz.h', 'xcore.h' ]",
          "",
          "[Added Lines]",
          "8: include = [ 'arm.h', 'arm64.h', 'm68k.h', 'mips.h', 'x86.h', 'ppc.h', 'sparc.h', 'systemz.h', 'xcore.h', 'tms320c64x.h' ]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:             'sparc.h': 'Sparc',",
          "24:             'systemz.h': 'Sysz',",
          "25:             'xcore.h': 'Xcore',",
          "26:             'comment_open': '\\t//',",
          "27:             'comment_close': '',",
          "28:         },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:             'tms320c64x.h': 'TMS320C64x',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:             'sparc.h': 'sparc',",
          "42:             'systemz.h': 'sysz',",
          "43:             'xcore.h': 'xcore',",
          "44:             'comment_open': '#',",
          "45:             'comment_close': '',",
          "46:         },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:             'tms320c64x.h': 'tms320c64x',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "59:             'sparc.h': 'sparc',",
          "60:             'systemz.h': 'sysz',",
          "61:             'xcore.h': 'xcore',",
          "62:             'comment_open': '(*',",
          "63:             'comment_close': ' *)',",
          "64:         },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:             'tms320c64x.h': 'tms320c64x',",
          "",
          "---------------"
        ],
        "bindings/python/test_basic.py||bindings/python/test_basic.py": [
          "File: bindings/python/test_basic.py -> bindings/python/test_basic.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: SYSZ_CODE = b\"\\xed\\x00\\x00\\x00\\x00\\x1a\\x5a\\x0f\\x1f\\xff\\xc2\\x09\\x80\\x00\\x00\\x00\\x07\\xf7\\xeb\\x2a\\xff\\xff\\x7f\\x57\\xe3\\x01\\xff\\xff\\x7f\\x57\\xeb\\x00\\xf0\\x00\\x00\\x24\\xb2\\x4f\\x00\\x78\"",
          "33: XCORE_CODE = b\"\\xfe\\x0f\\xfe\\x17\\x13\\x17\\xc6\\xfe\\xec\\x17\\x97\\xf8\\xec\\x4f\\x1f\\xfd\\xec\\x37\\x07\\xf2\\x45\\x5b\\xf9\\xfa\\x02\\x06\\x1b\\x10\"",
          "34: M68K_CODE = b\"\\xd4\\x40\\x87\\x5a\\x4e\\x71\\x02\\xb4\\xc0\\xde\\xc0\\xde\\x5c\\x00\\x1d\\x80\\x71\\x12\\x01\\x23\\xf2\\x3c\\x44\\x22\\x40\\x49\\x0e\\x56\\x54\\xc5\\xf2\\x3c\\x44\\x00\\x44\\x7a\\x00\\x00\\xf2\\x00\\x0a\\x28\\x4E\\xB9\\x00\\x00\\x00\\x12\\x4E\\x75\"",
          "36: all_tests = (",
          "37:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", None),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: TMS320C64X_CODE = b\"\\x01\\xac\\x88\\x40\\x81\\xac\\x88\\x43\\x00\\x00\\x00\\x00\\x02\\x90\\x32\\x96\\x02\\x80\\x46\\x9e\\x05\\x3c\\x83\\xe6\\x0b\\x0c\\x8b\\x24\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:         (CS_ARCH_SYSZ, 0, SYSZ_CODE, \"SystemZ\", None),",
          "59:         (CS_ARCH_XCORE, 0, XCORE_CODE, \"XCore\", None),",
          "60:         (CS_ARCH_M68K, CS_MODE_BIG_ENDIAN | CS_MODE_M68K_040, M68K_CODE, \"M68K (68040)\", None),",
          "61: )",
          "63: # ## Test cs_disasm_quick()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:         (CS_ARCH_TMS320C64X, 0, TMS320C64X_CODE, \"TMS320C64x\", None),",
          "",
          "---------------"
        ],
        "tests/test_basic.c||tests/test_basic.c": [
          "File: tests/test_basic.c -> tests/test_basic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: #endif",
          "75: #ifdef CAPSTONE_HAS_M68K",
          "76: #define M68K_CODE \"\\xd4\\x40\\x87\\x5a\\x4e\\x71\\x02\\xb4\\xc0\\xde\\xc0\\xde\\x5c\\x00\\x1d\\x80\\x71\\x12\\x01\\x23\\xf2\\x3c\\x44\\x22\\x40\\x49\\x0e\\x56\\x54\\xc5\\xf2\\x3c\\x44\\x00\\x44\\x7a\\x00\\x00\\xf2\\x00\\x0a\\x28\"",
          "77: #endif",
          "79:  struct platform {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: #endif",
          "78: #ifdef CAPSTONE_HAS_TMS320C64X",
          "79: #define TMS320C64X_CODE \"\\x01\\xac\\x88\\x40\\x81\\xac\\x88\\x43\\x00\\x00\\x00\\x00\\x02\\x90\\x32\\x96\\x02\\x80\\x46\\x9e\\x05\\x3c\\x83\\xe6\\x0b\\x0c\\x8b\\x24\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:    sizeof(M68K_CODE) - 1,",
          "278:    \"M68K\",",
          "279:   },",
          "280: #endif",
          "281:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283: #endif",
          "284: #ifdef CAPSTONE_HAS_TMS320C64X",
          "285:   {",
          "286:    CS_ARCH_TMS320C64X,",
          "287:    0,",
          "288:    (unsigned char*)TMS320C64X_CODE,",
          "289:    sizeof(TMS320C64X_CODE) - 1,",
          "290:    \"TMS320C64x\",",
          "291:   },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "815b94a45286d5a35ecd376527c2ef3696bfee04",
      "candidate_info": {
        "commit_hash": "815b94a45286d5a35ecd376527c2ef3696bfee04",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/815b94a45286d5a35ecd376527c2ef3696bfee04",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: add VERSION and reformat to use tabs for indentation",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <ctype.h>",
          "6: #include <errno.h>",
          "12: static uint8_t char_to_hexnum(char c)",
          "13: {",
          "24: }",
          "27: static uint8_t *preprocess(char *code, size_t *size)",
          "28: {",
          "49: }",
          "52: {",
          "103: }",
          "105: int main(int argc, char **argv)",
          "106: {",
          "261: }",
          "",
          "[Removed Lines]",
          "8: #include <capstone/capstone.h>",
          "14:     if (c >= '0' && c <= '9') {",
          "15:         return (uint8_t)(c - '0');",
          "16:     }",
          "18:     if (c >= 'a' && c <= 'f') {",
          "19:         return (uint8_t)(10 + c - 'a');",
          "20:     }",
          "23:     return (uint8_t)(10 + c - 'A');",
          "29:     size_t i, j = 0;",
          "30:     uint8_t high, low;",
          "31:     uint8_t *result;",
          "32:     result = (uint8_t *)malloc(strlen(code));",
          "34:     if (result != NULL) {",
          "35:         while (code[i] != '\\0') {",
          "36:             if (isxdigit(code[i]) && isxdigit(code[i+1])) {",
          "37:                 high = 16 * char_to_hexnum(code[i]);",
          "38:                 low = char_to_hexnum(code[i+1]);",
          "39:                 result[j] = high + low;",
          "40:                 i++;",
          "41:                 j++;",
          "42:             }",
          "43:             i++;",
          "44:         }",
          "46:     }",
          "48:     return result;",
          "51: static void usage(char * prog)",
          "53:     printf(\"Syntax: %s <arch+mode> <assembler-string> [start-address-in-hex-format]\\n\", prog);",
          "54:     printf(\"\\nThe following <arch+mode> options are supported:\\n\");",
          "56:     if (cs_support(CS_ARCH_ARM)) {",
          "57:         printf(\"        arm:       arm\\n\");",
          "58:         printf(\"        armb:      arm + big endian\\n\");",
          "59:         printf(\"        arml:      arm + little endian\\n\");",
          "60:         printf(\"        thumb:     thumb mode\\n\");",
          "61:         printf(\"        thumbbe:   thumb + big endian\\n\");",
          "62:         printf(\"        thumble:   thumb + billtle endian\\n\");",
          "63:     }",
          "65:     if (cs_support(CS_ARCH_ARM64)) {",
          "66:          printf(\"        arm64:     aarch64 mode\\n\");",
          "67:     }",
          "69:     if (cs_support(CS_ARCH_MIPS)) {",
          "70:         printf(\"        mips:      mips32 + little endian\\n\");",
          "71:         printf(\"        mipsbe:    mips32 + big endian\\n\");",
          "72:         printf(\"        mips64:    mips64 + little endian\\n\");",
          "73:         printf(\"        mips64be:  mips64 + big endian\\n\");",
          "74:     }",
          "76:     if (cs_support(CS_ARCH_X86)) {",
          "77:          printf(\"        x16:       16-bit mode (X86)\\n\");",
          "78:          printf(\"        x32:       32-bit mode (X86)\\n\");",
          "79:          printf(\"        x64:       64-bit mode (X86)\\n\");",
          "80:          printf(\"        x16att:    16-bit mode (X86) syntax-att\\n\");",
          "81:          printf(\"        x32att:    32-bit mode (X86) syntax-att\\n\");",
          "82:          printf(\"        x64att:    64-bit mode (X86) syntax-att\\n\");",
          "83:     }",
          "85:     if (cs_support(CS_ARCH_PPC)) {",
          "86:         printf(\"        ppc64:     ppc64 + little endian\\n\");",
          "87:         printf(\"        ppc64be:   ppc64 + big endian\\n\");",
          "88:     }",
          "90:     if (cs_support(CS_ARCH_SPARC)) {",
          "91:         printf(\"        sparc:     sparc\\n\");",
          "92:     }",
          "94:     if (cs_support(CS_ARCH_SYSZ)) {",
          "95:        printf(\"        systemz:   systemz (s390x)\\n\");",
          "96:     }",
          "98:     if (cs_support(CS_ARCH_XCORE)) {",
          "99:         printf(\"        xcore:     xcore\\n\");",
          "100:     }",
          "102:     printf(\"\\n\");",
          "107:     csh handle;",
          "108:     char *mode;",
          "109:     uint8_t *assembly;",
          "110:     size_t count, size;",
          "111:     uint64_t address = 0;",
          "112:     cs_insn *insn;",
          "113:     cs_err err;",
          "115:     if (argc != 3 && argc != 4) {",
          "116:         usage(argv[0]);",
          "117:         return -1;",
          "118:     }",
          "120:     mode = argv[1];",
          "121:     assembly = preprocess(argv[2], &size);",
          "122:     if (assembly == NULL) {",
          "123:         printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "124:         return -3;",
          "125:     }",
          "127:     if (argc == 4) {",
          "129:         char *temp;",
          "130:         address = strtoull(argv[3], &temp, 16);",
          "131:         if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "132:             printf(\"ERROR: invalid address argument, quit!\\n\");",
          "133:             return -2;",
          "134:         }",
          "135:     }",
          "137:     if (!strcmp(mode, \"arm\")) {",
          "138:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "139:     }",
          "141:     if (!strcmp(mode, \"armb\")) {",
          "142:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "143:     }",
          "145:     if (!strcmp(mode, \"arml\")) {",
          "146:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "147:     }",
          "149:     if (!strcmp(mode, \"thumb\")) {",
          "150:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "151:     }",
          "153:     if (!strcmp(mode, \"thumbbe\")) {",
          "154:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "155:     }",
          "157:     if (!strcmp(mode, \"thumble\")) {",
          "158:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "159:     }",
          "161:     if (!strcmp(mode, \"arm64\")) {",
          "162:         err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "163:     }",
          "165:     if (!strcmp(mode, \"mips\")) {",
          "166:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "167:     }",
          "169:     if (!strcmp(mode, \"mipsbe\")) {",
          "170:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "171:     }",
          "173:     if (!strcmp(mode, \"mips64\")) {",
          "174:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "175:     }",
          "177:     if (!strcmp(mode, \"mips64be\")) {",
          "178:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "179:     }",
          "181:     if (!strcmp(mode, \"x16\")) {",
          "182:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "183:     }",
          "185:     if (!strcmp(mode, \"x32\")) {",
          "186:         err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "187:     }",
          "189:     if (!strcmp(mode, \"x64\")) {",
          "190:         err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "191:     }",
          "193:     if (!strcmp(mode, \"x16att\")) {",
          "194:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "195:         if (!err) {",
          "196:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "197:         }",
          "198:     }",
          "200:     if (!strcmp(mode,\"x32att\")) {",
          "201:         err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "202:         if (!err) {",
          "203:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "204:         }",
          "205:     }",
          "207:     if (!strcmp(mode,\"x64att\")) {",
          "208:         err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "209:         if (!err) {",
          "210:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "211:         }",
          "212:     }",
          "214:     if (!strcmp(mode,\"ppc64\")) {",
          "215:         err = cs_open(CS_ARCH_PPC, CS_MODE_64+CS_MODE_LITTLE_ENDIAN, &handle);",
          "216:     }",
          "218:     if (!strcmp(mode,\"ppc64be\")) {",
          "219:         err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "220:     }",
          "222:     if (!strcmp(mode,\"sparc\")) {",
          "223:         err = cs_open(CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, &handle);",
          "224:     }",
          "226:     if (!strcmp(mode, \"systemz\") || !strcmp(mode, \"sysz\") || !strcmp(mode, \"s390x\")) {",
          "227:         err = cs_open(CS_ARCH_SYSZ, CS_MODE_BIG_ENDIAN, &handle);",
          "228:     }",
          "230:     if (!strcmp(mode,\"xcore\")) {",
          "231:         err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "232:     }",
          "234:     if (err) {",
          "235:         printf(\"ERROR: Failed on cs_open()\\n\");",
          "236:         usage(argv[0]);",
          "237:         return -1;",
          "238:     }",
          "240:     count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "241:     if (count > 0) {",
          "242:         size_t j;",
          "243:         int i;",
          "245:         printf(\"\\n\");",
          "246:         for (j = 0; j < count; j++) {",
          "247:             printf(\"%\"PRIx64 \"\\t\", insn[j].address);",
          "248:             for (i = 0; i < insn[j].size; i++) {",
          "249:                 printf(\"%02x\", insn[j].bytes[i]);",
          "250:             }",
          "251:             printf(\"\\t%s\\t%s\\n\", insn[j].mnemonic, insn[j].op_str);",
          "252:         }",
          "253:         cs_free(insn, count);",
          "254:     } else {",
          "255:         printf(\"ERROR: no any assembly instrution corresponding to your input, please check your input, quit!\\n\");",
          "256:         return(-4);",
          "257:     }",
          "259:     cs_close(&handle);",
          "260:     return 0;",
          "",
          "[Added Lines]",
          "8: #include <capstone.h>",
          "10: #define VERSION \"1.0\"",
          "15:  if (c >= '0' && c <= '9') {",
          "16:   return (uint8_t)(c - '0');",
          "17:  }",
          "19:  if (c >= 'a' && c <= 'f') {",
          "20:   return (uint8_t)(10 + c - 'a');",
          "21:  }",
          "24:  return (uint8_t)(10 + c - 'A');",
          "31:  size_t i, j = 0;",
          "32:  uint8_t high, low;",
          "33:  uint8_t *result;",
          "35:  result = (uint8_t *)malloc(strlen(code));",
          "36:  if (result != NULL) {",
          "37:   while (code[i] != '\\0') {",
          "38:    if (isxdigit(code[i]) && isxdigit(code[i+1])) {",
          "39:     high = 16 * char_to_hexnum(code[i]);",
          "40:     low = char_to_hexnum(code[i+1]);",
          "41:     result[j] = high + low;",
          "42:     i++;",
          "43:     j++;",
          "44:    }",
          "45:    i++;",
          "46:   }",
          "48:  }",
          "50:  return result;",
          "53: static void usage(char *prog)",
          "55:  printf(\"Cstool v%s for Capstone Disassembler Engine (www.capstone-engine.org)\\n\", VERSION);",
          "56:  printf(\"Syntax: %s <arch+mode> <assembly-hexstring> [start-address-in-hex-format]\\n\", prog);",
          "57:  printf(\"\\nThe following <arch+mode> options are supported:\\n\");",
          "59:  if (cs_support(CS_ARCH_X86)) {",
          "60:   printf(\"        x16:       16-bit mode (X86)\\n\");",
          "61:   printf(\"        x32:       32-bit mode (X86)\\n\");",
          "62:   printf(\"        x64:       64-bit mode (X86)\\n\");",
          "63:   printf(\"        x16att:    16-bit mode (X86) syntax-att\\n\");",
          "64:   printf(\"        x32att:    32-bit mode (X86) syntax-att\\n\");",
          "65:   printf(\"        x64att:    64-bit mode (X86) syntax-att\\n\");",
          "66:  }",
          "68:  if (cs_support(CS_ARCH_ARM)) {",
          "69:   printf(\"        arm:       arm\\n\");",
          "70:   printf(\"        armb:      arm + big endian\\n\");",
          "71:   printf(\"        arml:      arm + little endian\\n\");",
          "72:   printf(\"        thumb:     thumb mode\\n\");",
          "73:   printf(\"        thumbbe:   thumb + big endian\\n\");",
          "74:   printf(\"        thumble:   thumb + billtle endian\\n\");",
          "75:  }",
          "77:  if (cs_support(CS_ARCH_ARM64)) {",
          "78:   printf(\"        arm64:     aarch64 mode\\n\");",
          "79:  }",
          "81:  if (cs_support(CS_ARCH_MIPS)) {",
          "82:   printf(\"        mips:      mips32 + little endian\\n\");",
          "83:   printf(\"        mipsbe:    mips32 + big endian\\n\");",
          "84:   printf(\"        mips64:    mips64 + little endian\\n\");",
          "85:   printf(\"        mips64be:  mips64 + big endian\\n\");",
          "86:  }",
          "88:  if (cs_support(CS_ARCH_PPC)) {",
          "89:   printf(\"        ppc64:     ppc64 + little endian\\n\");",
          "90:   printf(\"        ppc64be:   ppc64 + big endian\\n\");",
          "91:  }",
          "93:  if (cs_support(CS_ARCH_SPARC)) {",
          "94:   printf(\"        sparc:     sparc\\n\");",
          "95:  }",
          "97:  if (cs_support(CS_ARCH_SYSZ)) {",
          "98:   printf(\"        systemz:   systemz (s390x)\\n\");",
          "99:  }",
          "101:  if (cs_support(CS_ARCH_XCORE)) {",
          "102:   printf(\"        xcore:     xcore\\n\");",
          "103:  }",
          "105:  printf(\"\\n\");",
          "110:  csh handle;",
          "111:  char *mode;",
          "112:  uint8_t *assembly;",
          "113:  size_t count, size;",
          "114:  uint64_t address = 0;",
          "115:  cs_insn *insn;",
          "116:  cs_err err;",
          "118:  if (argc != 3 && argc != 4) {",
          "119:   usage(argv[0]);",
          "120:   return -1;",
          "121:  }",
          "123:  mode = argv[1];",
          "124:  assembly = preprocess(argv[2], &size);",
          "125:  if (assembly == NULL) {",
          "126:   printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "127:   return -3;",
          "128:  }",
          "130:  if (argc == 4) {",
          "132:   char *temp;",
          "133:   address = strtoull(argv[3], &temp, 16);",
          "134:   if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "135:    printf(\"ERROR: invalid address argument, quit!\\n\");",
          "136:    return -2;",
          "137:   }",
          "138:  }",
          "140:  if (!strcmp(mode, \"arm\")) {",
          "141:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "142:  }",
          "144:  if (!strcmp(mode, \"armb\")) {",
          "145:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "146:  }",
          "148:  if (!strcmp(mode, \"arml\")) {",
          "149:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "150:  }",
          "152:  if (!strcmp(mode, \"thumb\")) {",
          "153:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "154:  }",
          "156:  if (!strcmp(mode, \"thumbbe\")) {",
          "157:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "158:  }",
          "160:  if (!strcmp(mode, \"thumble\")) {",
          "161:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "162:  }",
          "164:  if (!strcmp(mode, \"arm64\")) {",
          "165:   err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "166:  }",
          "168:  if (!strcmp(mode, \"mips\")) {",
          "169:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "170:  }",
          "172:  if (!strcmp(mode, \"mipsbe\")) {",
          "173:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "174:  }",
          "176:  if (!strcmp(mode, \"mips64\")) {",
          "177:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "178:  }",
          "180:  if (!strcmp(mode, \"mips64be\")) {",
          "181:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "182:  }",
          "184:  if (!strcmp(mode, \"x16\")) {",
          "185:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "186:  }",
          "188:  if (!strcmp(mode, \"x32\")) {",
          "189:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "190:  }",
          "192:  if (!strcmp(mode, \"x64\")) {",
          "193:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "194:  }",
          "196:  if (!strcmp(mode, \"x16att\")) {",
          "197:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "198:   if (!err) {",
          "199:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "200:   }",
          "201:  }",
          "203:  if (!strcmp(mode,\"x32att\")) {",
          "204:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "205:   if (!err) {",
          "206:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "207:   }",
          "208:  }",
          "210:  if (!strcmp(mode,\"x64att\")) {",
          "211:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "212:   if (!err) {",
          "213:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "214:   }",
          "215:  }",
          "217:  if (!strcmp(mode,\"ppc64\")) {",
          "218:   err = cs_open(CS_ARCH_PPC, CS_MODE_64+CS_MODE_LITTLE_ENDIAN, &handle);",
          "219:  }",
          "221:  if (!strcmp(mode,\"ppc64be\")) {",
          "222:   err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "223:  }",
          "225:  if (!strcmp(mode,\"sparc\")) {",
          "226:   err = cs_open(CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, &handle);",
          "227:  }",
          "229:  if (!strcmp(mode, \"systemz\") || !strcmp(mode, \"sysz\") || !strcmp(mode, \"s390x\")) {",
          "230:   err = cs_open(CS_ARCH_SYSZ, CS_MODE_BIG_ENDIAN, &handle);",
          "231:  }",
          "233:  if (!strcmp(mode,\"xcore\")) {",
          "234:   err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "235:  }",
          "237:  if (err) {",
          "238:   printf(\"ERROR: Failed on cs_open(), quit!\\n\");",
          "239:   usage(argv[0]);",
          "240:   return -1;",
          "241:  }",
          "243:  count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "244:  if (count > 0) {",
          "245:   size_t j;",
          "246:   int i;",
          "248:   printf(\"\\n\");",
          "249:   for (j = 0; j < count; j++) {",
          "250:    printf(\"%\"PRIx64 \"\\t\", insn[j].address);",
          "251:    for (i = 0; i < insn[j].size; i++) {",
          "252:     printf(\"%02x\", insn[j].bytes[i]);",
          "253:    }",
          "254:    printf(\"\\t%s\\t%s\\n\", insn[j].mnemonic, insn[j].op_str);",
          "255:   }",
          "256:   cs_free(insn, count);",
          "257:  } else {",
          "258:   printf(\"ERROR: invalid assembly code\\n\");",
          "259:   return(-4);",
          "260:  }",
          "262:  cs_close(&handle);",
          "264:  return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bf747e5a59a0f785117198cc04c93391decae43",
      "candidate_info": {
        "commit_hash": "6bf747e5a59a0f785117198cc04c93391decae43",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/6bf747e5a59a0f785117198cc04c93391decae43",
        "files": [
          "tests/test.c",
          "tests/test_arm.c",
          "tests/test_arm64.c",
          "tests/test_detail.c",
          "tests/test_iter.c",
          "tests/test_mips.c",
          "tests/test_ppc.c",
          "tests/test_skipdata.c",
          "tests/test_sparc.c",
          "tests/test_systemz.c",
          "tests/test_x86.c",
          "tests/test_xcore.c"
        ],
        "message": "Addressed compile errors occur when built as C++11",
        "before_after_code_files": [
          "tests/test.c||tests/test.c",
          "tests/test_arm.c||tests/test_arm.c",
          "tests/test_arm64.c||tests/test_arm64.c",
          "tests/test_detail.c||tests/test_detail.c",
          "tests/test_iter.c||tests/test_iter.c",
          "tests/test_mips.c||tests/test_mips.c",
          "tests/test_ppc.c||tests/test_ppc.c",
          "tests/test_skipdata.c||tests/test_skipdata.c",
          "tests/test_sparc.c||tests/test_sparc.c",
          "tests/test_systemz.c||tests/test_systemz.c",
          "tests/test_x86.c||tests/test_x86.c",
          "tests/test_xcore.c||tests/test_xcore.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/test.c||tests/test.c": [
          "File: tests/test.c -> tests/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:    printf(\"Disasm:\\n\");",
          "247:    for (j = 0; j < count; j++) {",
          "249:       insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "250:    }",
          "256:    cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "248:     printf(\"0x%\"PRIx64\":\\t%s\\t\\t%s\\n\",",
          "253:    printf(\"0x%\"PRIx64\":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "[Added Lines]",
          "248:     printf(\"0x%\" PRIx64 \":\\t%s\\t\\t%s\\n\",",
          "253:    printf(\"0x%\" PRIx64 \":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "---------------"
        ],
        "tests/test_arm.c||tests/test_arm.c": [
          "File: tests/test_arm.c -> tests/test_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:    printf(\"Disasm:\\n\");",
          "271:    for (j = 0; j < count; j++) {",
          "273:     print_insn_detail(&insn[j]);",
          "274:    }",
          "278:    cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "272:     printf(\"0x%\"PRIx64\":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "275:    printf(\"0x%\"PRIx64\":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "[Added Lines]",
          "272:     printf(\"0x%\" PRIx64 \":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "275:    printf(\"0x%\" PRIx64 \":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "---------------"
        ],
        "tests/test_arm64.c||tests/test_arm64.c": [
          "File: tests/test_arm64.c -> tests/test_arm64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "52:     break;",
          "53:    case ARM64_OP_IMM:",
          "55:     break;",
          "56:    case ARM64_OP_FP:",
          "57:     printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "",
          "[Removed Lines]",
          "54:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\"PRIx64 \"\\n\", i, op->imm);",
          "",
          "[Added Lines]",
          "54:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:    printf(\"Disasm:\\n\");",
          "213:    for (j = 0; j < count; j++) {",
          "215:     print_insn_detail(&insn[j]);",
          "216:    }",
          "220:    cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "214:     printf(\"0x%\"PRIx64\":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "217:    printf(\"0x%\"PRIx64\":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "[Added Lines]",
          "214:     printf(\"0x%\" PRIx64 \":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "217:    printf(\"0x%\" PRIx64 \":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "---------------"
        ],
        "tests/test_detail.c||tests/test_detail.c": [
          "File: tests/test_detail.c -> tests/test_detail.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:    printf(\"Disasm:\\n\");",
          "242:    for (j = 0; j < count; j++) {",
          "251:     if (detail->regs_read_count > 0) {",
          "252:      printf(\"\\tImplicit registers read: \");",
          "",
          "[Removed Lines]",
          "243:     cs_insn *i = &(all_insn[j]);",
          "244:     printf(\"0x%\"PRIx64\":\\t%s\\t\\t%s // insn-ID: %u, insn-mnem: %s\\n\",",
          "245:       i->address, i->mnemonic, i->op_str,",
          "246:       i->id, cs_insn_name(handle, i->id));",
          "249:     detail = i->detail;",
          "",
          "[Added Lines]",
          "243:     cs_insn *ins = &(all_insn[j]);",
          "244:     printf(\"0x%\" PRIx64 \":\\t%s\\t\\t%s // insn-ID: %u, insn-mnem: %s\\n\",",
          "245:       ins->address, ins->mnemonic, ins->op_str,",
          "246:       ins->id, cs_insn_name(handle, ins->id));",
          "249:     detail = ins->detail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:    }",
          "282:    cs_free(all_insn, count);",
          "",
          "[Removed Lines]",
          "279:    printf(\"0x%\"PRIx64\":\\n\", all_insn[j-1].address + all_insn[j-1].size);",
          "",
          "[Added Lines]",
          "279:    printf(\"0x%\" PRIx64 \":\\n\", all_insn[j-1].address + all_insn[j-1].size);",
          "",
          "---------------"
        ],
        "tests/test_iter.c||tests/test_iter.c": [
          "File: tests/test_iter.c -> tests/test_iter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:   while(cs_disasm_iter(handle, &code, &size, &address, insn)) {",
          "214:    int n;",
          "217:      insn->address, insn->mnemonic, insn->op_str,",
          "218:      insn->id, cs_insn_name(handle, insn->id));",
          "",
          "[Removed Lines]",
          "216:    printf(\"0x%\"PRIx64\":\\t%s\\t\\t%s // insn-ID: %u, insn-mnem: %s\\n\",",
          "",
          "[Added Lines]",
          "216:    printf(\"0x%\" PRIx64 \":\\t%s\\t\\t%s // insn-ID: %u, insn-mnem: %s\\n\",",
          "",
          "---------------"
        ],
        "tests/test_mips.c||tests/test_mips.c": [
          "File: tests/test_mips.c -> tests/test_mips.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "52:     break;",
          "53:    case MIPS_OP_IMM:",
          "55:     break;",
          "56:    case MIPS_OP_MEM:",
          "57:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "",
          "[Removed Lines]",
          "54:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\"PRIx64 \"\\n\", i, op->imm);",
          "",
          "[Added Lines]",
          "54:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:    printf(\"Disasm:\\n\");",
          "140:    for (j = 0; j < count; j++) {",
          "142:     print_insn_detail(&insn[j]);",
          "143:    }",
          "147:    cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "141:     printf(\"0x%\"PRIx64\":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "144:    printf(\"0x%\"PRIx64\":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "[Added Lines]",
          "141:     printf(\"0x%\" PRIx64 \":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "144:    printf(\"0x%\" PRIx64 \":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "---------------"
        ],
        "tests/test_ppc.c||tests/test_ppc.c": [
          "File: tests/test_ppc.c -> tests/test_ppc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:    printf(\"Disasm:\\n\");",
          "151:    for (j = 0; j < count; j++) {",
          "153:     print_insn_detail(&insn[j]);",
          "154:    }",
          "158:    cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "152:     printf(\"0x%\"PRIx64\":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "155:    printf(\"0x%\"PRIx64\":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "[Added Lines]",
          "152:     printf(\"0x%\" PRIx64 \":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "155:    printf(\"0x%\" PRIx64 \":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "---------------"
        ],
        "tests/test_skipdata.c||tests/test_skipdata.c": [
          "File: tests/test_skipdata.c -> tests/test_skipdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:    (unsigned char*)X86_CODE32,",
          "73:    sizeof(X86_CODE32) - 1,",
          "74:    \"X86 32 (Intel syntax) - Skip data with custom mnemonic\",",
          "76:    CS_OPT_SKIPDATA_SETUP,",
          "77:    (size_t) &skipdata,",
          "78:   },",
          "",
          "[Removed Lines]",
          "75:    0, 0,",
          "",
          "[Added Lines]",
          "75:    CS_OPT_NONE,",
          "76:    CS_OPT_OFF,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:    (unsigned char*)RANDOM_CODE,",
          "83:    sizeof(RANDOM_CODE) - 1,",
          "84:    \"Arm - Skip data with callback\",",
          "86:    CS_OPT_SKIPDATA_SETUP,",
          "87:    (size_t) &skipdata_callback,",
          "88:   },",
          "",
          "[Removed Lines]",
          "85:    0, 0,",
          "",
          "[Added Lines]",
          "86:    CS_OPT_NONE,",
          "87:    CS_OPT_OFF,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:    printf(\"Disasm:\\n\");",
          "121:    for (j = 0; j < count; j++) {",
          "123:       insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "124:    }",
          "130:    cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "122:     printf(\"0x%\"PRIx64\":\\t%s\\t\\t%s\\n\",",
          "127:    printf(\"0x%\"PRIx64\":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "[Added Lines]",
          "124:     printf(\"0x%\" PRIx64 \":\\t%s\\t\\t%s\\n\",",
          "129:    printf(\"0x%\" PRIx64 \":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "---------------"
        ],
        "tests/test_sparc.c||tests/test_sparc.c": [
          "File: tests/test_sparc.c -> tests/test_sparc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:    printf(\"Disasm:\\n\");",
          "125:    for (j = 0; j < count; j++) {",
          "127:     print_insn_detail(&insn[j]);",
          "128:    }",
          "132:    cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "126:     printf(\"0x%\"PRIx64\":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "129:    printf(\"0x%\"PRIx64\":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "[Added Lines]",
          "126:     printf(\"0x%\" PRIx64 \":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "129:    printf(\"0x%\" PRIx64 \":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "---------------"
        ],
        "tests/test_systemz.c||tests/test_systemz.c": [
          "File: tests/test_systemz.c -> tests/test_systemz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     printf(\"\\t\\toperands[%u].type: ACREG = %u\\n\", i, op->reg);",
          "54:     break;",
          "55:    case SYSZ_OP_IMM:",
          "57:     break;",
          "58:    case SYSZ_OP_MEM:",
          "59:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "",
          "[Removed Lines]",
          "56:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\"PRIx64\"\\n\", i, op->imm);",
          "",
          "[Added Lines]",
          "56:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "65:        i, cs_reg_name(handle, op->mem.index));",
          "66:     if (op->mem.length != 0)",
          "68:     if (op->mem.disp != 0)",
          "71:     break;",
          "72:   }",
          "",
          "[Removed Lines]",
          "67:      printf(\"\\t\\t\\toperands[%u].mem.length: 0x%\"PRIx64\"\\n\", i, op->mem.length);",
          "69:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\"PRIx64\"\\n\", i, op->mem.disp);",
          "",
          "[Added Lines]",
          "67:      printf(\"\\t\\t\\toperands[%u].mem.length: 0x%\" PRIx64 \"\\n\", i, op->mem.length);",
          "69:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:    printf(\"Disasm:\\n\");",
          "118:    for (j = 0; j < count; j++) {",
          "120:     print_insn_detail(&insn[j]);",
          "121:    }",
          "125:    cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "119:     printf(\"0x%\"PRIx64\":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "122:    printf(\"0x%\"PRIx64\":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "[Added Lines]",
          "119:     printf(\"0x%\" PRIx64 \":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "122:    printf(\"0x%\" PRIx64 \":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "---------------"
        ],
        "tests/test_x86.c||tests/test_x86.c": [
          "File: tests/test_x86.c -> tests/test_x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   printf(\"\\timm_count: %u\\n\", count);",
          "89:   for (i = 1; i < count + 1; i++) {",
          "90:    int index = cs_op_index(ud, ins, X86_OP_IMM, i);",
          "92:   }",
          "93:  }",
          "",
          "[Removed Lines]",
          "91:    printf(\"\\t\\timms[%u]: 0x%\"PRIx64 \"\\n\", i, x86->operands[index].imm);",
          "",
          "[Added Lines]",
          "91:    printf(\"\\t\\timms[%u]: 0x%\" PRIx64 \"\\n\", i, x86->operands[index].imm);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "103:     break;",
          "104:    case X86_OP_IMM:",
          "106:     break;",
          "107:    case X86_OP_FP:",
          "108:     printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "",
          "[Removed Lines]",
          "105:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\"PRIx64 \"\\n\", i, op->imm);",
          "",
          "[Added Lines]",
          "105:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:    printf(\"Disasm:\\n\");",
          "228:    for (j = 0; j < count; j++) {",
          "230:     print_insn_detail(handle, platforms[i].mode, &insn[j]);",
          "231:    }",
          "235:    cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "229:     printf(\"0x%\"PRIx64\":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "232:    printf(\"0x%\"PRIx64\":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "[Added Lines]",
          "229:     printf(\"0x%\" PRIx64 \":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "232:    printf(\"0x%\" PRIx64 \":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "---------------"
        ],
        "tests/test_xcore.c||tests/test_xcore.c": [
          "File: tests/test_xcore.c -> tests/test_xcore.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:    printf(\"Disasm:\\n\");",
          "113:    for (j = 0; j < count; j++) {",
          "115:     print_insn_detail(&insn[j]);",
          "116:    }",
          "120:    cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "114:     printf(\"0x%\"PRIx64\":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "117:    printf(\"0x%\"PRIx64\":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "[Added Lines]",
          "114:     printf(\"0x%\" PRIx64 \":\\t%s\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);",
          "117:    printf(\"0x%\" PRIx64 \":\\n\", insn[j-1].address + insn[j-1].size);",
          "",
          "---------------"
        ]
      }
    }
  ]
}