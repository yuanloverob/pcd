{
  "cve_id": "CVE-2019-19044",
  "cve_desc": "Two memory leaks in the v3d_submit_cl_ioctl() function in drivers/gpu/drm/v3d/v3d_gem.c in the Linux kernel before 5.3.11 allow attackers to cause a denial of service (memory consumption) by triggering kcalloc() or v3d_job_init() failures, aka CID-29cd13cfd762.",
  "repo": "torvalds/linux",
  "patch_hash": "29cd13cfd7624726d9e6becbae9aa419ef35af7f",
  "patch_info": {
    "commit_hash": "29cd13cfd7624726d9e6becbae9aa419ef35af7f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/29cd13cfd7624726d9e6becbae9aa419ef35af7f",
    "files": [
      "drivers/gpu/drm/v3d/v3d_gem.c"
    ],
    "message": "drm/v3d: Fix memory leak in v3d_submit_cl_ioctl\n\nIn the impelementation of v3d_submit_cl_ioctl() there are two memory\nleaks. One is when allocation for bin fails, and the other is when bin\ninitialization fails. If kcalloc fails to allocate memory for bin then\nrender->base should be put. Also, if v3d_job_init() fails to initialize\nbin->base then allocated memory for bin should be released.\n\nFixes: a783a09ee76d (\"drm/v3d: Refactor job management.\")\nSigned-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>\nReviewed-by: Eric Anholt <eric@anholt.net>\nSigned-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>\nLink: https://patchwork.freedesktop.org/patch/msgid/20191021185250.26130-1-navid.emamdoost@gmail.com",
    "before_after_code_files": [
      "drivers/gpu/drm/v3d/v3d_gem.c||drivers/gpu/drm/v3d/v3d_gem.c"
    ]
  },
  "patch_diff": {
    "drivers/gpu/drm/v3d/v3d_gem.c||drivers/gpu/drm/v3d/v3d_gem.c": [
      "File: drivers/gpu/drm/v3d/v3d_gem.c -> drivers/gpu/drm/v3d/v3d_gem.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "558:  if (args->bcl_start != args->bcl_end) {",
      "559:   bin = kcalloc(1, sizeof(*bin), GFP_KERNEL);",
      "561:    return -ENOMEM;",
      "563:   ret = v3d_job_init(v3d, file_priv, &bin->base,",
      "564:        v3d_job_free, args->in_sync_bcl);",
      "565:   if (ret) {",
      "566:    v3d_job_put(&render->base);",
      "567:    return ret;",
      "568:   }",
      "",
      "[Removed Lines]",
      "560:   if (!bin)",
      "",
      "[Added Lines]",
      "560:   if (!bin) {",
      "561:    v3d_job_put(&render->base);",
      "563:   }",
      "569:    kfree(bin);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a783a09ee76d6259296dc6aeea2b6884fa526980",
      "candidate_info": {
        "commit_hash": "a783a09ee76d6259296dc6aeea2b6884fa526980",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a783a09ee76d6259296dc6aeea2b6884fa526980",
        "files": [
          "drivers/gpu/drm/v3d/v3d_drv.h",
          "drivers/gpu/drm/v3d/v3d_gem.c",
          "drivers/gpu/drm/v3d/v3d_irq.c",
          "drivers/gpu/drm/v3d/v3d_sched.c"
        ],
        "message": "drm/v3d: Refactor job management.\n\nThe CL submission had two jobs embedded in an exec struct.  When I\nadded TFU support, I had to replicate some of the exec stuff and some\nof the job stuff.  As I went to add CSD, it became clear that actually\nwhat was in exec should just be in the two CL jobs, and it would let\nus share a lot more code between the 4 queues.\n\nv2: Fix missing error path in TFU ioctl's bo[] allocation.\n\nSigned-off-by: Eric Anholt <eric@anholt.net>\nLink: https://patchwork.freedesktop.org/patch/msgid/20190416225856.20264-3-eric@anholt.net\nAcked-by: Rob Clark <robdclark@gmail.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/v3d/v3d_drv.h||drivers/gpu/drm/v3d/v3d_drv.h",
          "drivers/gpu/drm/v3d/v3d_gem.c||drivers/gpu/drm/v3d/v3d_gem.c",
          "drivers/gpu/drm/v3d/v3d_irq.c||drivers/gpu/drm/v3d/v3d_irq.c",
          "drivers/gpu/drm/v3d/v3d_sched.c||drivers/gpu/drm/v3d/v3d_sched.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/gpu/drm/v3d/v3d_gem.c||drivers/gpu/drm/v3d/v3d_gem.c"
          ],
          "candidate": [
            "drivers/gpu/drm/v3d/v3d_gem.c||drivers/gpu/drm/v3d/v3d_gem.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/v3d/v3d_drv.h||drivers/gpu/drm/v3d/v3d_drv.h": [
          "File: drivers/gpu/drm/v3d/v3d_drv.h -> drivers/gpu/drm/v3d/v3d_drv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  struct work_struct overflow_mem_work;",
          "72:  struct v3d_tfu_job *tfu_job;",
          "74:  struct v3d_queue_state queue[V3D_MAX_QUEUES];",
          "",
          "[Removed Lines]",
          "70:  struct v3d_exec_info *bin_job;",
          "71:  struct v3d_exec_info *render_job;",
          "",
          "[Added Lines]",
          "70:  struct v3d_bin_job *bin_job;",
          "71:  struct v3d_render_job *render_job;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157: struct v3d_job {",
          "158:  struct drm_sched_job base;",
          "163:  struct dma_fence *in_fence;",
          "",
          "[Removed Lines]",
          "160:  struct v3d_exec_info *exec;",
          "",
          "[Added Lines]",
          "160:  struct kref refcount;",
          "162:  struct v3d_dev *v3d;",
          "167:  struct drm_gem_object **bo;",
          "168:  u32 bo_count;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:  struct dma_fence *irq_fence;",
          "169:  u32 start, end;",
          "171:  u32 timedout_ctca, timedout_ctra;",
          "182:  struct dma_fence *bin_done_fence;",
          "198:  struct list_head unref_list;",
          "202: };",
          "204: struct v3d_tfu_job {",
          "207:  struct drm_v3d_submit_tfu args;",
          "221: };",
          "",
          "[Removed Lines]",
          "172: };",
          "174: struct v3d_exec_info {",
          "175:  struct v3d_dev *v3d;",
          "177:  struct v3d_job bin, render;",
          "187:  struct dma_fence *render_done_fence;",
          "189:  struct kref refcount;",
          "192:  struct drm_gem_object **bo;",
          "193:  u32 bo_count;",
          "201:  u32 qma, qms, qts;",
          "205:  struct drm_sched_job base;",
          "210:  struct dma_fence *in_fence;",
          "213:  struct dma_fence *irq_fence;",
          "215:  struct v3d_dev *v3d;",
          "217:  struct kref refcount;",
          "220:  struct drm_gem_object *bo[4];",
          "",
          "[Added Lines]",
          "179:  struct dma_fence *done_fence;",
          "182:  void (*free)(struct kref *ref);",
          "183: };",
          "185: struct v3d_bin_job {",
          "186:  struct v3d_job base;",
          "194:  struct v3d_render_job *render;",
          "197:  u32 qma, qms, qts;",
          "198: };",
          "200: struct v3d_render_job {",
          "201:  struct v3d_job base;",
          "209:  u32 start, end;",
          "211:  u32 timedout_ctca, timedout_ctra;",
          "220:  struct v3d_job base;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "283:     struct drm_file *file_priv);",
          "284: int v3d_wait_bo_ioctl(struct drm_device *dev, void *data,",
          "285:         struct drm_file *file_priv);",
          "288: void v3d_reset(struct v3d_dev *v3d);",
          "289: void v3d_invalidate_caches(struct v3d_dev *v3d);",
          "",
          "[Removed Lines]",
          "286: void v3d_exec_put(struct v3d_exec_info *exec);",
          "287: void v3d_tfu_job_put(struct v3d_tfu_job *exec);",
          "",
          "[Added Lines]",
          "288: void v3d_job_put(struct v3d_job *job);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/v3d/v3d_gem.c||drivers/gpu/drm/v3d/v3d_gem.c": [
          "File: drivers/gpu/drm/v3d/v3d_gem.c -> drivers/gpu/drm/v3d/v3d_gem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:  v3d_invalidate_slices(v3d, 0);",
          "194: }",
          "",
          "[Removed Lines]",
          "196: static void",
          "197: v3d_attach_object_fences(struct drm_gem_object **bos, int bo_count,",
          "198:     struct dma_fence *fence)",
          "199: {",
          "200:  int i;",
          "202:  for (i = 0; i < bo_count; i++) {",
          "204:   reservation_object_add_excl_fence(bos[i]->resv, fence);",
          "205:  }",
          "206: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255: static int",
          "260: {",
          "261:  u32 *handles;",
          "262:  int ret = 0;",
          "263:  int i;",
          "",
          "[Removed Lines]",
          "256: v3d_cl_lookup_bos(struct drm_device *dev,",
          "257:     struct drm_file *file_priv,",
          "258:     struct drm_v3d_submit_cl *args,",
          "259:     struct v3d_exec_info *exec)",
          "265:  exec->bo_count = args->bo_handle_count;",
          "267:  if (!exec->bo_count) {",
          "",
          "[Added Lines]",
          "244: v3d_lookup_bos(struct drm_device *dev,",
          "245:         struct drm_file *file_priv,",
          "246:         struct v3d_job *job,",
          "247:         u64 bo_handles,",
          "248:         u32 bo_count)",
          "254:  job->bo_count = bo_count;",
          "256:  if (!job->bo_count) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:   return -EINVAL;",
          "273:  }",
          "279:   DRM_DEBUG(\"Failed to allocate validated BO pointers\\n\");",
          "280:   return -ENOMEM;",
          "281:  }",
          "284:  if (!handles) {",
          "285:   ret = -ENOMEM;",
          "286:   DRM_DEBUG(\"Failed to allocate incoming GEM handles\\n\");",
          "",
          "[Removed Lines]",
          "275:  exec->bo = kvmalloc_array(exec->bo_count,",
          "276:       sizeof(struct drm_gem_cma_object *),",
          "277:       GFP_KERNEL | __GFP_ZERO);",
          "278:  if (!exec->bo) {",
          "283:  handles = kvmalloc_array(exec->bo_count, sizeof(u32), GFP_KERNEL);",
          "",
          "[Added Lines]",
          "264:  job->bo = kvmalloc_array(job->bo_count,",
          "265:      sizeof(struct drm_gem_cma_object *),",
          "266:      GFP_KERNEL | __GFP_ZERO);",
          "267:  if (!job->bo) {",
          "272:  handles = kvmalloc_array(job->bo_count, sizeof(u32), GFP_KERNEL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "288:  }",
          "290:  if (copy_from_user(handles,",
          "293:   ret = -EFAULT;",
          "294:   DRM_DEBUG(\"Failed to copy in GEM handles\\n\");",
          "295:   goto fail;",
          "296:  }",
          "298:  spin_lock(&file_priv->table_lock);",
          "300:   struct drm_gem_object *bo = idr_find(&file_priv->object_idr,",
          "301:            handles[i]);",
          "302:   if (!bo) {",
          "",
          "[Removed Lines]",
          "291:       (void __user *)(uintptr_t)args->bo_handles,",
          "292:       exec->bo_count * sizeof(u32))) {",
          "299:  for (i = 0; i < exec->bo_count; i++) {",
          "",
          "[Added Lines]",
          "280:       (void __user *)(uintptr_t)bo_handles,",
          "281:       job->bo_count * sizeof(u32))) {",
          "288:  for (i = 0; i < job->bo_count; i++) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "307:    goto fail;",
          "308:   }",
          "309:   drm_gem_object_get(bo);",
          "311:  }",
          "312:  spin_unlock(&file_priv->table_lock);",
          "",
          "[Removed Lines]",
          "310:   exec->bo[i] = bo;",
          "",
          "[Added Lines]",
          "299:   job->bo[i] = bo;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "317: }",
          "319: static void",
          "321: {",
          "343:  }",
          "354: }",
          "356: static void",
          "358: {",
          "370:  }",
          "376: }",
          "379: {",
          "381: }",
          "383: int",
          "",
          "[Removed Lines]",
          "320: v3d_exec_cleanup(struct kref *ref)",
          "322:  struct v3d_exec_info *exec = container_of(ref, struct v3d_exec_info,",
          "323:         refcount);",
          "324:  struct v3d_dev *v3d = exec->v3d;",
          "325:  unsigned int i;",
          "326:  struct v3d_bo *bo, *save;",
          "328:  dma_fence_put(exec->bin.in_fence);",
          "329:  dma_fence_put(exec->render.in_fence);",
          "331:  dma_fence_put(exec->bin.irq_fence);",
          "332:  dma_fence_put(exec->render.irq_fence);",
          "334:  dma_fence_put(exec->bin_done_fence);",
          "335:  dma_fence_put(exec->render_done_fence);",
          "337:  for (i = 0; i < exec->bo_count; i++)",
          "338:   drm_gem_object_put_unlocked(exec->bo[i]);",
          "339:  kvfree(exec->bo);",
          "341:  list_for_each_entry_safe(bo, save, &exec->unref_list, unref_head) {",
          "342:   drm_gem_object_put_unlocked(&bo->base.base);",
          "345:  pm_runtime_mark_last_busy(v3d->dev);",
          "346:  pm_runtime_put_autosuspend(v3d->dev);",
          "348:  kfree(exec);",
          "349: }",
          "351: void v3d_exec_put(struct v3d_exec_info *exec)",
          "352: {",
          "353:  kref_put(&exec->refcount, v3d_exec_cleanup);",
          "357: v3d_tfu_job_cleanup(struct kref *ref)",
          "359:  struct v3d_tfu_job *job = container_of(ref, struct v3d_tfu_job,",
          "360:             refcount);",
          "361:  struct v3d_dev *v3d = job->v3d;",
          "362:  unsigned int i;",
          "364:  dma_fence_put(job->in_fence);",
          "365:  dma_fence_put(job->irq_fence);",
          "367:  for (i = 0; i < ARRAY_SIZE(job->bo); i++) {",
          "368:   if (job->bo[i])",
          "369:    drm_gem_object_put_unlocked(job->bo[i]);",
          "372:  pm_runtime_mark_last_busy(v3d->dev);",
          "373:  pm_runtime_put_autosuspend(v3d->dev);",
          "375:  kfree(job);",
          "378: void v3d_tfu_job_put(struct v3d_tfu_job *job)",
          "380:  kref_put(&job->refcount, v3d_tfu_job_cleanup);",
          "",
          "[Added Lines]",
          "309: v3d_job_free(struct kref *ref)",
          "311:  struct v3d_job *job = container_of(ref, struct v3d_job, refcount);",
          "312:  int i;",
          "314:  for (i = 0; i < job->bo_count; i++) {",
          "315:   if (job->bo[i])",
          "316:    drm_gem_object_put_unlocked(job->bo[i]);",
          "318:  kvfree(job->bo);",
          "320:  dma_fence_put(job->in_fence);",
          "321:  dma_fence_put(job->irq_fence);",
          "322:  dma_fence_put(job->done_fence);",
          "324:  pm_runtime_mark_last_busy(job->v3d->dev);",
          "325:  pm_runtime_put_autosuspend(job->v3d->dev);",
          "327:  kfree(job);",
          "331: v3d_render_job_free(struct kref *ref)",
          "333:  struct v3d_render_job *job = container_of(ref, struct v3d_render_job,",
          "334:         base.refcount);",
          "335:  struct v3d_bo *bo, *save;",
          "337:  list_for_each_entry_safe(bo, save, &job->unref_list, unref_head) {",
          "338:   drm_gem_object_put_unlocked(&bo->base.base);",
          "341:  v3d_job_free(ref);",
          "344: void v3d_job_put(struct v3d_job *job)",
          "346:  kref_put(&job->refcount, job->free);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "413:  return ret;",
          "414: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382: static int",
          "383: v3d_job_init(struct v3d_dev *v3d, struct drm_file *file_priv,",
          "384:       struct v3d_job *job, void (*free)(struct kref *ref),",
          "385:       u32 in_sync)",
          "386: {",
          "387:  int ret;",
          "389:  job->v3d = v3d;",
          "390:  job->free = free;",
          "392:  ret = pm_runtime_get_sync(v3d->dev);",
          "393:  if (ret < 0)",
          "394:   return ret;",
          "396:  ret = drm_syncobj_find_fence(file_priv, in_sync, 0, 0, &job->in_fence);",
          "397:  if (ret == -EINVAL) {",
          "398:   pm_runtime_put_autosuspend(v3d->dev);",
          "399:   return ret;",
          "400:  }",
          "402:  kref_init(&job->refcount);",
          "404:  return 0;",
          "405: }",
          "407: static int",
          "408: v3d_push_job(struct v3d_file_priv *v3d_priv,",
          "409:       struct v3d_job *job, enum v3d_queue queue)",
          "410: {",
          "411:  int ret;",
          "413:  ret = drm_sched_job_init(&job->base, &v3d_priv->sched_entity[queue],",
          "414:      v3d_priv);",
          "415:  if (ret)",
          "416:   return ret;",
          "418:  job->done_fence = dma_fence_get(&job->base.s_fence->finished);",
          "421:  kref_get(&job->refcount);",
          "423:  drm_sched_entity_push_job(&job->base, &v3d_priv->sched_entity[queue]);",
          "425:  return 0;",
          "426: }",
          "428: static void",
          "429: v3d_attach_fences_and_unlock_reservation(struct drm_file *file_priv,",
          "430:       struct v3d_job *job,",
          "431:       struct ww_acquire_ctx *acquire_ctx,",
          "432:       u32 out_sync)",
          "433: {",
          "434:  struct drm_syncobj *sync_out;",
          "435:  int i;",
          "437:  for (i = 0; i < job->bo_count; i++) {",
          "439:   reservation_object_add_excl_fence(job->bo[i]->resv,",
          "440:         job->done_fence);",
          "441:  }",
          "443:  drm_gem_unlock_reservations(job->bo, job->bo_count, acquire_ctx);",
          "446:  sync_out = drm_syncobj_find(file_priv, out_sync);",
          "447:  if (sync_out) {",
          "448:   drm_syncobj_replace_fence(sync_out, job->done_fence);",
          "449:   drm_syncobj_put(sync_out);",
          "450:  }",
          "451: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "432:  struct v3d_dev *v3d = to_v3d_dev(dev);",
          "433:  struct v3d_file_priv *v3d_priv = file_priv->driver_priv;",
          "434:  struct drm_v3d_submit_cl *args = data;",
          "436:  struct ww_acquire_ctx acquire_ctx;",
          "438:  int ret = 0;",
          "440:  trace_v3d_submit_cl_ioctl(&v3d->drm, args->rcl_start, args->rcl_end);",
          "",
          "[Removed Lines]",
          "435:  struct v3d_exec_info *exec;",
          "437:  struct drm_syncobj *sync_out;",
          "",
          "[Added Lines]",
          "472:  struct v3d_bin_job *bin = NULL;",
          "473:  struct v3d_render_job *render;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "444:   return -EINVAL;",
          "445:  }",
          "449:   return -ENOMEM;",
          "454:   return ret;",
          "455:  }",
          "482:  if (ret)",
          "483:   goto fail;",
          "486:            &acquire_ctx);",
          "487:  if (ret)",
          "488:   goto fail;",
          "490:  mutex_lock(&v3d->sched_lock);",
          "495:   if (ret)",
          "496:    goto fail_unreserve;",
          "504:  }",
          "509:  if (ret)",
          "510:   goto fail_unreserve;",
          "518:  mutex_unlock(&v3d->sched_lock);",
          "534:  return 0;",
          "536: fail_unreserve:",
          "537:  mutex_unlock(&v3d->sched_lock);",
          "539: fail:",
          "542:  return ret;",
          "543: }",
          "",
          "[Removed Lines]",
          "447:  exec = kcalloc(1, sizeof(*exec), GFP_KERNEL);",
          "448:  if (!exec)",
          "451:  ret = pm_runtime_get_sync(v3d->dev);",
          "452:  if (ret < 0) {",
          "453:   kfree(exec);",
          "457:  kref_init(&exec->refcount);",
          "459:  ret = drm_syncobj_find_fence(file_priv, args->in_sync_bcl,",
          "460:          0, 0, &exec->bin.in_fence);",
          "461:  if (ret == -EINVAL)",
          "462:   goto fail;",
          "464:  ret = drm_syncobj_find_fence(file_priv, args->in_sync_rcl,",
          "465:          0, 0, &exec->render.in_fence);",
          "466:  if (ret == -EINVAL)",
          "467:   goto fail;",
          "469:  exec->qma = args->qma;",
          "470:  exec->qms = args->qms;",
          "471:  exec->qts = args->qts;",
          "472:  exec->bin.exec = exec;",
          "473:  exec->bin.start = args->bcl_start;",
          "474:  exec->bin.end = args->bcl_end;",
          "475:  exec->render.exec = exec;",
          "476:  exec->render.start = args->rcl_start;",
          "477:  exec->render.end = args->rcl_end;",
          "478:  exec->v3d = v3d;",
          "479:  INIT_LIST_HEAD(&exec->unref_list);",
          "481:  ret = v3d_cl_lookup_bos(dev, file_priv, args, exec);",
          "485:  ret = v3d_lock_bo_reservations(exec->bo, exec->bo_count,",
          "491:  if (exec->bin.start != exec->bin.end) {",
          "492:   ret = drm_sched_job_init(&exec->bin.base,",
          "493:       &v3d_priv->sched_entity[V3D_BIN],",
          "494:       v3d_priv);",
          "498:   exec->bin_done_fence =",
          "499:    dma_fence_get(&exec->bin.base.s_fence->finished);",
          "502:   drm_sched_entity_push_job(&exec->bin.base,",
          "503:        &v3d_priv->sched_entity[V3D_BIN]);",
          "506:  ret = drm_sched_job_init(&exec->render.base,",
          "507:      &v3d_priv->sched_entity[V3D_RENDER],",
          "508:      v3d_priv);",
          "512:  exec->render_done_fence =",
          "513:   dma_fence_get(&exec->render.base.s_fence->finished);",
          "516:  drm_sched_entity_push_job(&exec->render.base,",
          "517:       &v3d_priv->sched_entity[V3D_RENDER]);",
          "520:  v3d_attach_object_fences(exec->bo, exec->bo_count,",
          "521:      exec->render_done_fence);",
          "523:  drm_gem_unlock_reservations(exec->bo, exec->bo_count, &acquire_ctx);",
          "526:  sync_out = drm_syncobj_find(file_priv, args->out_sync);",
          "527:  if (sync_out) {",
          "528:   drm_syncobj_replace_fence(sync_out, exec->render_done_fence);",
          "529:   drm_syncobj_put(sync_out);",
          "530:  }",
          "532:  v3d_exec_put(exec);",
          "538:  drm_gem_unlock_reservations(exec->bo, exec->bo_count, &acquire_ctx);",
          "540:  v3d_exec_put(exec);",
          "",
          "[Added Lines]",
          "484:  render = kcalloc(1, sizeof(*render), GFP_KERNEL);",
          "485:  if (!render)",
          "488:  render->start = args->rcl_start;",
          "489:  render->end = args->rcl_end;",
          "490:  INIT_LIST_HEAD(&render->unref_list);",
          "492:  ret = v3d_job_init(v3d, file_priv, &render->base,",
          "493:       v3d_render_job_free, args->in_sync_rcl);",
          "494:  if (ret) {",
          "495:   kfree(render);",
          "499:  if (args->bcl_start != args->bcl_end) {",
          "500:   bin = kcalloc(1, sizeof(*bin), GFP_KERNEL);",
          "501:   if (!bin)",
          "502:    return -ENOMEM;",
          "504:   ret = v3d_job_init(v3d, file_priv, &bin->base,",
          "505:        v3d_job_free, args->in_sync_bcl);",
          "506:   if (ret) {",
          "507:    v3d_job_put(&render->base);",
          "508:    return ret;",
          "509:   }",
          "511:   bin->start = args->bcl_start;",
          "512:   bin->end = args->bcl_end;",
          "513:   bin->qma = args->qma;",
          "514:   bin->qms = args->qms;",
          "515:   bin->qts = args->qts;",
          "516:   bin->render = render;",
          "517:  }",
          "519:  ret = v3d_lookup_bos(dev, file_priv, &render->base,",
          "520:         args->bo_handles, args->bo_handle_count);",
          "524:  ret = v3d_lock_bo_reservations(render->base.bo, render->base.bo_count,",
          "530:  if (bin) {",
          "531:   ret = v3d_push_job(v3d_priv, &bin->base, V3D_BIN);",
          "535:   render->bin_done_fence = dma_fence_get(bin->base.done_fence);",
          "538:  ret = v3d_push_job(v3d_priv, &render->base, V3D_RENDER);",
          "543:  v3d_attach_fences_and_unlock_reservation(file_priv,",
          "544:        &render->base, &acquire_ctx,",
          "545:        args->out_sync);",
          "547:  if (bin)",
          "548:   v3d_job_put(&bin->base);",
          "549:  v3d_job_put(&render->base);",
          "555:  drm_gem_unlock_reservations(render->base.bo,",
          "556:         render->base.bo_count, &acquire_ctx);",
          "558:  if (bin)",
          "559:   v3d_job_put(&bin->base);",
          "560:  v3d_job_put(&render->base);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "560:  struct drm_v3d_submit_tfu *args = data;",
          "561:  struct v3d_tfu_job *job;",
          "562:  struct ww_acquire_ctx acquire_ctx;",
          "565:  int ret = 0;",
          "568:  trace_v3d_submit_tfu_ioctl(&v3d->drm, args->iia);",
          "",
          "[Removed Lines]",
          "563:  struct drm_syncobj *sync_out;",
          "564:  struct dma_fence *sched_done_fence;",
          "566:  int bo_count;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "571:  if (!job)",
          "572:   return -ENOMEM;",
          "576:   kfree(job);",
          "577:   return ret;",
          "578:  }",
          "587:  job->args = *args;",
          "590:  spin_lock(&file_priv->table_lock);",
          "592:   struct drm_gem_object *bo;",
          "595:    break;",
          "597:   bo = idr_find(&file_priv->object_idr,",
          "599:   if (!bo) {",
          "600:    DRM_DEBUG(\"Failed to look up GEM BO %d: %d\\n\",",
          "602:    ret = -ENOENT;",
          "603:    spin_unlock(&file_priv->table_lock);",
          "604:    goto fail;",
          "605:   }",
          "606:   drm_gem_object_get(bo);",
          "608:  }",
          "609:  spin_unlock(&file_priv->table_lock);",
          "612:  if (ret)",
          "613:   goto fail;",
          "615:  mutex_lock(&v3d->sched_lock);",
          "619:  if (ret)",
          "620:   goto fail_unreserve;",
          "626:  mutex_unlock(&v3d->sched_lock);",
          "642:  return 0;",
          "644: fail_unreserve:",
          "645:  mutex_unlock(&v3d->sched_lock);",
          "647: fail:",
          "650:  return ret;",
          "651: }",
          "",
          "[Removed Lines]",
          "574:  ret = pm_runtime_get_sync(v3d->dev);",
          "575:  if (ret < 0) {",
          "580:  kref_init(&job->refcount);",
          "582:  ret = drm_syncobj_find_fence(file_priv, args->in_sync,",
          "583:          0, 0, &job->in_fence);",
          "584:  if (ret == -EINVAL)",
          "585:   goto fail;",
          "588:  job->v3d = v3d;",
          "591:  for (bo_count = 0; bo_count < ARRAY_SIZE(job->bo); bo_count++) {",
          "594:   if (!args->bo_handles[bo_count])",
          "598:          args->bo_handles[bo_count]);",
          "601:       bo_count, args->bo_handles[bo_count]);",
          "607:   job->bo[bo_count] = bo;",
          "611:  ret = v3d_lock_bo_reservations(job->bo, bo_count, &acquire_ctx);",
          "616:  ret = drm_sched_job_init(&job->base,",
          "617:      &v3d_priv->sched_entity[V3D_TFU],",
          "618:      v3d_priv);",
          "622:  sched_done_fence = dma_fence_get(&job->base.s_fence->finished);",
          "625:  drm_sched_entity_push_job(&job->base, &v3d_priv->sched_entity[V3D_TFU]);",
          "628:  v3d_attach_object_fences(job->bo, bo_count, sched_done_fence);",
          "630:  drm_gem_unlock_reservations(job->bo, bo_count, &acquire_ctx);",
          "633:  sync_out = drm_syncobj_find(file_priv, args->out_sync);",
          "634:  if (sync_out) {",
          "635:   drm_syncobj_replace_fence(sync_out, sched_done_fence);",
          "636:   drm_syncobj_put(sync_out);",
          "637:  }",
          "638:  dma_fence_put(sched_done_fence);",
          "640:  v3d_tfu_job_put(job);",
          "646:  drm_gem_unlock_reservations(job->bo, bo_count, &acquire_ctx);",
          "648:  v3d_tfu_job_put(job);",
          "",
          "[Added Lines]",
          "591:  ret = v3d_job_init(v3d, file_priv, &job->base,",
          "592:       v3d_job_free, args->in_sync);",
          "593:  if (ret) {",
          "598:  job->base.bo = kcalloc(ARRAY_SIZE(args->bo_handles),",
          "599:           sizeof(*job->base.bo), GFP_KERNEL);",
          "600:  if (!job->base.bo) {",
          "601:   v3d_job_put(&job->base);",
          "602:   return -ENOMEM;",
          "603:  }",
          "608:  for (job->base.bo_count = 0;",
          "609:       job->base.bo_count < ARRAY_SIZE(args->bo_handles);",
          "610:       job->base.bo_count++) {",
          "613:   if (!args->bo_handles[job->base.bo_count])",
          "617:          args->bo_handles[job->base.bo_count]);",
          "620:       job->base.bo_count,",
          "621:       args->bo_handles[job->base.bo_count]);",
          "627:   job->base.bo[job->base.bo_count] = bo;",
          "631:  ret = v3d_lock_bo_reservations(job->base.bo, job->base.bo_count,",
          "632:            &acquire_ctx);",
          "637:  ret = v3d_push_job(v3d_priv, &job->base, V3D_TFU);",
          "642:  v3d_attach_fences_and_unlock_reservation(file_priv,",
          "643:        &job->base, &acquire_ctx,",
          "644:        args->out_sync);",
          "646:  v3d_job_put(&job->base);",
          "652:  drm_gem_unlock_reservations(job->base.bo, job->base.bo_count,",
          "653:         &acquire_ctx);",
          "655:  v3d_job_put(&job->base);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/v3d/v3d_irq.c||drivers/gpu/drm/v3d/v3d_irq.c": [
          "File: drivers/gpu/drm/v3d/v3d_irq.c -> drivers/gpu/drm/v3d/v3d_irq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  }",
          "64:  drm_gem_object_get(obj);",
          "66:  spin_unlock_irqrestore(&v3d->job_lock, irqflags);",
          "68:  V3D_CORE_WRITE(0, V3D_PTB_BPOA, bo->node.start << PAGE_SHIFT);",
          "",
          "[Removed Lines]",
          "65:  list_add_tail(&bo->unref_head, &v3d->bin_job->unref_list);",
          "",
          "[Added Lines]",
          "65:  list_add_tail(&bo->unref_head, &v3d->bin_job->render->unref_list);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:  if (intsts & V3D_INT_FLDONE) {",
          "98:   struct v3d_fence *fence =",
          "101:   trace_v3d_bcl_irq(&v3d->drm, fence->seqno);",
          "102:   dma_fence_signal(&fence->base);",
          "",
          "[Removed Lines]",
          "99:    to_v3d_fence(v3d->bin_job->bin.irq_fence);",
          "",
          "[Added Lines]",
          "99:    to_v3d_fence(v3d->bin_job->base.irq_fence);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:  if (intsts & V3D_INT_FRDONE) {",
          "107:   struct v3d_fence *fence =",
          "110:   trace_v3d_rcl_irq(&v3d->drm, fence->seqno);",
          "111:   dma_fence_signal(&fence->base);",
          "",
          "[Removed Lines]",
          "108:    to_v3d_fence(v3d->render_job->render.irq_fence);",
          "",
          "[Added Lines]",
          "108:    to_v3d_fence(v3d->render_job->base.irq_fence);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:  if (intsts & V3D_HUB_INT_TFUC) {",
          "143:   struct v3d_fence *fence =",
          "146:   trace_v3d_tfu_irq(&v3d->drm, fence->seqno);",
          "147:   dma_fence_signal(&fence->base);",
          "",
          "[Removed Lines]",
          "144:    to_v3d_fence(v3d->tfu_job->irq_fence);",
          "",
          "[Added Lines]",
          "144:    to_v3d_fence(v3d->tfu_job->base.irq_fence);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/v3d/v3d_sched.c||drivers/gpu/drm/v3d/v3d_sched.c": [
          "File: drivers/gpu/drm/v3d/v3d_sched.c -> drivers/gpu/drm/v3d/v3d_sched.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  return container_of(sched_job, struct v3d_job, base);",
          "31: }",
          "35: {",
          "37: }",
          "41: {",
          "47: }",
          "49: static void",
          "51: {",
          "54:  drm_sched_job_cleanup(sched_job);",
          "57: }",
          "63: static struct dma_fence *",
          "64: v3d_job_dependency(struct drm_sched_job *sched_job,",
          "65:      struct drm_sched_entity *s_entity)",
          "66: {",
          "67:  struct v3d_job *job = to_v3d_job(sched_job);",
          "70:  struct dma_fence *fence;",
          "72:  fence = job->in_fence;",
          "",
          "[Removed Lines]",
          "33: static struct v3d_tfu_job *",
          "34: to_tfu_job(struct drm_sched_job *sched_job)",
          "36:  return container_of(sched_job, struct v3d_tfu_job, base);",
          "39: static void",
          "40: v3d_job_free(struct drm_sched_job *sched_job)",
          "42:  struct v3d_job *job = to_v3d_job(sched_job);",
          "44:  drm_sched_job_cleanup(sched_job);",
          "46:  v3d_exec_put(job->exec);",
          "50: v3d_tfu_job_free(struct drm_sched_job *sched_job)",
          "52:  struct v3d_tfu_job *job = to_tfu_job(sched_job);",
          "56:  v3d_tfu_job_put(job);",
          "68:  struct v3d_exec_info *exec = job->exec;",
          "69:  enum v3d_queue q = job == &exec->bin ? V3D_BIN : V3D_RENDER;",
          "",
          "[Added Lines]",
          "33: static struct v3d_bin_job *",
          "34: to_bin_job(struct drm_sched_job *sched_job)",
          "36:  return container_of(sched_job, struct v3d_bin_job, base.base);",
          "39: static struct v3d_render_job *",
          "40: to_render_job(struct drm_sched_job *sched_job)",
          "42:  return container_of(sched_job, struct v3d_render_job, base.base);",
          "43: }",
          "45: static struct v3d_tfu_job *",
          "46: to_tfu_job(struct drm_sched_job *sched_job)",
          "47: {",
          "48:  return container_of(sched_job, struct v3d_tfu_job, base.base);",
          "52: v3d_job_free(struct drm_sched_job *sched_job)",
          "54:  struct v3d_job *job = to_v3d_job(sched_job);",
          "57:  v3d_job_put(job);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   return fence;",
          "76:  }",
          "95: }",
          "102: static struct dma_fence *",
          "105: {",
          "107:  struct dma_fence *fence;",
          "110:  if (fence) {",
          "112:   return fence;",
          "113:  }",
          "116: }",
          "119: {",
          "124:  struct drm_device *dev = &v3d->drm;",
          "125:  struct dma_fence *fence;",
          "126:  unsigned long irqflags;",
          "129:   return NULL;",
          "134:  spin_lock_irqsave(&v3d->job_lock, irqflags);",
          "145:  spin_unlock_irqrestore(&v3d->job_lock, irqflags);",
          "153:  v3d_invalidate_caches(v3d);",
          "156:  if (IS_ERR(fence))",
          "157:   return NULL;",
          "164:        job->start, job->end);",
          "186:  return fence;",
          "187: }",
          "",
          "[Removed Lines]",
          "78:  if (q == V3D_RENDER) {",
          "83:   fence = exec->bin_done_fence;",
          "84:   if (fence) {",
          "85:    exec->bin_done_fence = NULL;",
          "86:    return fence;",
          "87:   }",
          "88:  }",
          "94:  return fence;",
          "103: v3d_tfu_job_dependency(struct drm_sched_job *sched_job,",
          "104:          struct drm_sched_entity *s_entity)",
          "106:  struct v3d_tfu_job *job = to_tfu_job(sched_job);",
          "109:  fence = job->in_fence;",
          "111:   job->in_fence = NULL;",
          "115:  return NULL;",
          "118: static struct dma_fence *v3d_job_run(struct drm_sched_job *sched_job)",
          "120:  struct v3d_job *job = to_v3d_job(sched_job);",
          "121:  struct v3d_exec_info *exec = job->exec;",
          "122:  enum v3d_queue q = job == &exec->bin ? V3D_BIN : V3D_RENDER;",
          "123:  struct v3d_dev *v3d = exec->v3d;",
          "128:  if (unlikely(job->base.s_fence->finished.error))",
          "135:  if (q == V3D_BIN) {",
          "136:   v3d->bin_job = job->exec;",
          "141:   V3D_CORE_WRITE(0, V3D_PTB_BPOS, 0);",
          "142:  } else {",
          "143:   v3d->render_job = job->exec;",
          "144:  }",
          "155:  fence = v3d_fence_create(v3d, q);",
          "159:  if (job->irq_fence)",
          "160:   dma_fence_put(job->irq_fence);",
          "161:  job->irq_fence = dma_fence_get(fence);",
          "163:  trace_v3d_submit_cl(dev, q == V3D_RENDER, to_v3d_fence(fence)->seqno,",
          "166:  if (q == V3D_BIN) {",
          "167:   if (exec->qma) {",
          "168:    V3D_CORE_WRITE(0, V3D_CLE_CT0QMA, exec->qma);",
          "169:    V3D_CORE_WRITE(0, V3D_CLE_CT0QMS, exec->qms);",
          "170:   }",
          "171:   if (exec->qts) {",
          "172:    V3D_CORE_WRITE(0, V3D_CLE_CT0QTS,",
          "173:            V3D_CLE_CT0QTS_ENABLE |",
          "174:            exec->qts);",
          "175:   }",
          "176:  } else {",
          "178:  }",
          "183:  V3D_CORE_WRITE(0, V3D_CLE_CTNQBA(q), job->start);",
          "184:  V3D_CORE_WRITE(0, V3D_CLE_CTNQEA(q), job->end);",
          "",
          "[Added Lines]",
          "83:  return NULL;",
          "91: v3d_render_job_dependency(struct drm_sched_job *sched_job,",
          "92:      struct drm_sched_entity *s_entity)",
          "94:  struct v3d_render_job *job = to_render_job(sched_job);",
          "97:  fence = v3d_job_dependency(sched_job, s_entity);",
          "98:  if (fence)",
          "99:   return fence;",
          "105:  fence = job->bin_done_fence;",
          "107:   job->bin_done_fence = NULL;",
          "111:  return fence;",
          "114: static struct dma_fence *v3d_bin_job_run(struct drm_sched_job *sched_job)",
          "116:  struct v3d_bin_job *job = to_bin_job(sched_job);",
          "117:  struct v3d_dev *v3d = job->base.v3d;",
          "122:  if (unlikely(job->base.base.s_fence->finished.error))",
          "129:  v3d->bin_job = job;",
          "133:  V3D_CORE_WRITE(0, V3D_PTB_BPOS, 0);",
          "136:  v3d_invalidate_caches(v3d);",
          "138:  fence = v3d_fence_create(v3d, V3D_BIN);",
          "139:  if (IS_ERR(fence))",
          "140:   return NULL;",
          "142:  if (job->base.irq_fence)",
          "143:   dma_fence_put(job->base.irq_fence);",
          "144:  job->base.irq_fence = dma_fence_get(fence);",
          "146:  trace_v3d_submit_cl(dev, false, to_v3d_fence(fence)->seqno,",
          "147:        job->start, job->end);",
          "152:  if (job->qma) {",
          "153:   V3D_CORE_WRITE(0, V3D_CLE_CT0QMA, job->qma);",
          "154:   V3D_CORE_WRITE(0, V3D_CLE_CT0QMS, job->qms);",
          "155:  }",
          "156:  if (job->qts) {",
          "157:   V3D_CORE_WRITE(0, V3D_CLE_CT0QTS,",
          "158:           V3D_CLE_CT0QTS_ENABLE |",
          "159:           job->qts);",
          "160:  }",
          "161:  V3D_CORE_WRITE(0, V3D_CLE_CT0QBA, job->start);",
          "162:  V3D_CORE_WRITE(0, V3D_CLE_CT0QEA, job->end);",
          "164:  return fence;",
          "165: }",
          "167: static struct dma_fence *v3d_render_job_run(struct drm_sched_job *sched_job)",
          "168: {",
          "169:  struct v3d_render_job *job = to_render_job(sched_job);",
          "170:  struct v3d_dev *v3d = job->base.v3d;",
          "171:  struct drm_device *dev = &v3d->drm;",
          "172:  struct dma_fence *fence;",
          "174:  if (unlikely(job->base.base.s_fence->finished.error))",
          "175:   return NULL;",
          "177:  v3d->render_job = job;",
          "187:  fence = v3d_fence_create(v3d, V3D_RENDER);",
          "191:  if (job->base.irq_fence)",
          "192:   dma_fence_put(job->base.irq_fence);",
          "193:  job->base.irq_fence = dma_fence_get(fence);",
          "195:  trace_v3d_submit_cl(dev, true, to_v3d_fence(fence)->seqno,",
          "203:  V3D_CORE_WRITE(0, V3D_CLE_CT1QBA, job->start);",
          "204:  V3D_CORE_WRITE(0, V3D_CLE_CT1QEA, job->end);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190: v3d_tfu_job_run(struct drm_sched_job *sched_job)",
          "191: {",
          "192:  struct v3d_tfu_job *job = to_tfu_job(sched_job);",
          "194:  struct drm_device *dev = &v3d->drm;",
          "195:  struct dma_fence *fence;",
          "",
          "[Removed Lines]",
          "193:  struct v3d_dev *v3d = job->v3d;",
          "",
          "[Added Lines]",
          "213:  struct v3d_dev *v3d = job->base.v3d;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "199:   return NULL;",
          "201:  v3d->tfu_job = job;",
          "206:  trace_v3d_submit_tfu(dev, to_v3d_fence(fence)->seqno);",
          "",
          "[Removed Lines]",
          "202:  if (job->irq_fence)",
          "203:   dma_fence_put(job->irq_fence);",
          "204:  job->irq_fence = dma_fence_get(fence);",
          "",
          "[Added Lines]",
          "222:  if (job->base.irq_fence)",
          "223:   dma_fence_put(job->base.irq_fence);",
          "224:  job->base.irq_fence = dma_fence_get(fence);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "251:  mutex_unlock(&v3d->reset_lock);",
          "252: }",
          "254: static void",
          "256: {",
          "257:  struct v3d_job *job = to_v3d_job(sched_job);",
          "273:   return;",
          "274:  }",
          "276:  v3d_gpu_reset_for_timeout(v3d, sched_job);",
          "277: }",
          "279: static void",
          "280: v3d_tfu_job_timedout(struct drm_sched_job *sched_job)",
          "281: {",
          "284:  v3d_gpu_reset_for_timeout(job->v3d, sched_job);",
          "285: }",
          "288:  .dependency = v3d_job_dependency,",
          "292: };",
          "294: static const struct drm_sched_backend_ops v3d_tfu_sched_ops = {",
          "296:  .run_job = v3d_tfu_job_run,",
          "297:  .timedout_job = v3d_tfu_job_timedout,",
          "299: };",
          "301: int",
          "",
          "[Removed Lines]",
          "255: v3d_job_timedout(struct drm_sched_job *sched_job)",
          "258:  struct v3d_exec_info *exec = job->exec;",
          "259:  struct v3d_dev *v3d = exec->v3d;",
          "260:  enum v3d_queue job_q = job == &exec->bin ? V3D_BIN : V3D_RENDER;",
          "261:  u32 ctca = V3D_CORE_READ(0, V3D_CLE_CTNCA(job_q));",
          "262:  u32 ctra = V3D_CORE_READ(0, V3D_CLE_CTNRA(job_q));",
          "270:  if (job->timedout_ctca != ctca || job->timedout_ctra != ctra) {",
          "271:   job->timedout_ctca = ctca;",
          "272:   job->timedout_ctra = ctra;",
          "282:  struct v3d_tfu_job *job = to_tfu_job(sched_job);",
          "287: static const struct drm_sched_backend_ops v3d_sched_ops = {",
          "289:  .run_job = v3d_job_run,",
          "290:  .timedout_job = v3d_job_timedout,",
          "291:  .free_job = v3d_job_free",
          "295:  .dependency = v3d_tfu_job_dependency,",
          "298:  .free_job = v3d_tfu_job_free",
          "",
          "[Added Lines]",
          "280: v3d_cl_job_timedout(struct drm_sched_job *sched_job, enum v3d_queue q,",
          "281:       u32 *timedout_ctca, u32 *timedout_ctra)",
          "284:  struct v3d_dev *v3d = job->v3d;",
          "285:  u32 ctca = V3D_CORE_READ(0, V3D_CLE_CTNCA(q));",
          "286:  u32 ctra = V3D_CORE_READ(0, V3D_CLE_CTNRA(q));",
          "288:  if (*timedout_ctca != ctca || *timedout_ctra != ctra) {",
          "297: static void",
          "298: v3d_bin_job_timedout(struct drm_sched_job *sched_job)",
          "299: {",
          "300:  struct v3d_bin_job *job = to_bin_job(sched_job);",
          "302:  v3d_cl_job_timedout(sched_job, V3D_BIN,",
          "303:        &job->timedout_ctca, &job->timedout_ctra);",
          "304: }",
          "306: static void",
          "307: v3d_render_job_timedout(struct drm_sched_job *sched_job)",
          "308: {",
          "309:  struct v3d_render_job *job = to_render_job(sched_job);",
          "311:  v3d_cl_job_timedout(sched_job, V3D_RENDER,",
          "312:        &job->timedout_ctca, &job->timedout_ctra);",
          "313: }",
          "318:  struct v3d_job *job = to_v3d_job(sched_job);",
          "323: static const struct drm_sched_backend_ops v3d_bin_sched_ops = {",
          "325:  .run_job = v3d_bin_job_run,",
          "326:  .timedout_job = v3d_bin_job_timedout,",
          "327:  .free_job = v3d_job_free,",
          "328: };",
          "330: static const struct drm_sched_backend_ops v3d_render_sched_ops = {",
          "331:  .dependency = v3d_render_job_dependency,",
          "332:  .run_job = v3d_render_job_run,",
          "333:  .timedout_job = v3d_render_job_timedout,",
          "334:  .free_job = v3d_job_free,",
          "338:  .dependency = v3d_job_dependency,",
          "341:  .free_job = v3d_job_free,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "307:  int ret;",
          "309:  ret = drm_sched_init(&v3d->queue[V3D_BIN].sched,",
          "311:         hw_jobs_limit, job_hang_limit,",
          "312:         msecs_to_jiffies(hang_limit_ms),",
          "313:         \"v3d_bin\");",
          "",
          "[Removed Lines]",
          "310:         &v3d_sched_ops,",
          "",
          "[Added Lines]",
          "353:         &v3d_bin_sched_ops,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "317:  }",
          "319:  ret = drm_sched_init(&v3d->queue[V3D_RENDER].sched,",
          "321:         hw_jobs_limit, job_hang_limit,",
          "322:         msecs_to_jiffies(hang_limit_ms),",
          "323:         \"v3d_render\");",
          "",
          "[Removed Lines]",
          "320:         &v3d_sched_ops,",
          "",
          "[Added Lines]",
          "363:         &v3d_render_sched_ops,",
          "",
          "---------------"
        ]
      }
    }
  ]
}