{
  "cve_id": "CVE-2019-15807",
  "cve_desc": "In the Linux kernel before 5.1.13, there is a memory leak in drivers/scsi/libsas/sas_expander.c when SAS expander discovery fails. This will cause a BUG and denial of service.",
  "repo": "torvalds/linux",
  "patch_hash": "3b0541791453fbe7f42867e310e0c9eb6295364d",
  "patch_info": {
    "commit_hash": "3b0541791453fbe7f42867e310e0c9eb6295364d",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/3b0541791453fbe7f42867e310e0c9eb6295364d",
    "files": [
      "drivers/scsi/libsas/sas_expander.c"
    ],
    "message": "scsi: libsas: delete sas port if expander discover failed\n\nThe sas_port(phy->port) allocated in sas_ex_discover_expander() will not be\ndeleted when the expander failed to discover. This will cause resource leak\nand a further issue of kernel BUG like below:\n\n[159785.843156]  port-2:17:29: trying to add phy phy-2:17:29 fails: it's\nalready part of another port\n[159785.852144] ------------[ cut here  ]------------\n[159785.856833] kernel BUG at drivers/scsi/scsi_transport_sas.c:1086!\n[159785.863000] Internal error: Oops - BUG: 0 [#1] SMP\n[159785.867866] CPU: 39 PID: 16993 Comm: kworker/u96:2 Tainted: G\nW  OE     4.19.25-vhulk1901.1.0.h111.aarch64 #1\n[159785.878458] Hardware name: Huawei Technologies Co., Ltd.\nHi1620EVBCS/Hi1620EVBCS, BIOS Hi1620 CS B070 1P TA 03/21/2019\n[159785.889231] Workqueue: 0000:74:02.0_disco_q sas_discover_domain\n[159785.895224] pstate: 40c00009 (nZcv daif +PAN +UAO)\n[159785.900094] pc : sas_port_add_phy+0x188/0x1b8\n[159785.904524] lr : sas_port_add_phy+0x188/0x1b8\n[159785.908952] sp : ffff0001120e3b80\n[159785.912341] x29: ffff0001120e3b80 x28: 0000000000000000\n[159785.917727] x27: ffff802ade8f5400 x26: ffff0000681b7560\n[159785.923111] x25: ffff802adf11a800 x24: ffff0000680e8000\n[159785.928496] x23: ffff802ade8f5728 x22: ffff802ade8f5708\n[159785.933880] x21: ffff802adea2db40 x20: ffff802ade8f5400\n[159785.939264] x19: ffff802adea2d800 x18: 0000000000000010\n[159785.944649] x17: 00000000821bf734 x16: ffff00006714faa0\n[159785.950033] x15: ffff0000e8ab4ecf x14: 7261702079646165\n[159785.955417] x13: 726c612073277469 x12: ffff00006887b830\n[159785.960802] x11: ffff00006773eaa0 x10: 7968702079687020\n[159785.966186] x9 : 0000000000002453 x8 : 726f702072656874\n[159785.971570] x7 : 6f6e6120666f2074 x6 : ffff802bcfb21290\n[159785.976955] x5 : ffff802bcfb21290 x4 : 0000000000000000\n[159785.982339] x3 : ffff802bcfb298c8 x2 : 337752b234c2ab00\n[159785.987723] x1 : 337752b234c2ab00 x0 : 0000000000000000\n[159785.993108] Process kworker/u96:2 (pid: 16993, stack limit =\n0x0000000072dae094)\n[159786.000576] Call trace:\n[159786.003097]  sas_port_add_phy+0x188/0x1b8\n[159786.007179]  sas_ex_get_linkrate.isra.5+0x134/0x140\n[159786.012130]  sas_ex_discover_expander+0x128/0x408\n[159786.016906]  sas_ex_discover_dev+0x218/0x4c8\n[159786.021249]  sas_ex_discover_devices+0x9c/0x1a8\n[159786.025852]  sas_discover_root_expander+0x134/0x160\n[159786.030802]  sas_discover_domain+0x1b8/0x1e8\n[159786.035148]  process_one_work+0x1b4/0x3f8\n[159786.039230]  worker_thread+0x54/0x470\n[159786.042967]  kthread+0x134/0x138\n[159786.046269]  ret_from_fork+0x10/0x18\n[159786.049918] Code: 91322300 f0004402 91178042 97fe4c9b (d4210000)\n[159786.056083] Modules linked in: hns3_enet_ut(OE) hclge(OE) hnae3(OE)\nhisi_sas_test_hw(OE) hisi_sas_test_main(OE) serdes(OE)\n[159786.067202] ---[ end trace 03622b9e2d99e196  ]---\n[159786.071893] Kernel panic - not syncing: Fatal exception\n[159786.077190] SMP: stopping secondary CPUs\n[159786.081192] Kernel Offset: disabled\n[159786.084753] CPU features: 0x2,a2a00a38\n\nFixes: 2908d778ab3e (\"[SCSI] aic94xx: new driver\")\nReported-by: Jian Luo <luojian5@huawei.com>\nSigned-off-by: Jason Yan <yanaijie@huawei.com>\nCC: John Garry <john.garry@huawei.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "before_after_code_files": [
      "drivers/scsi/libsas/sas_expander.c||drivers/scsi/libsas/sas_expander.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/libsas/sas_expander.c||drivers/scsi/libsas/sas_expander.c": [
      "File: drivers/scsi/libsas/sas_expander.c -> drivers/scsi/libsas/sas_expander.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1019:   list_del(&child->dev_list_node);",
      "1020:   spin_unlock_irq(&parent->port->dev_list_lock);",
      "1021:   sas_put_device(child);",
      "1022:   return NULL;",
      "1023:  }",
      "1024:  list_add_tail(&child->siblings, &parent->ex_dev.children);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1022:   sas_port_delete(phy->port);",
      "1023:   phy->port = NULL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "30d40577e322b670551ad7e2faa9570b6e23eb2b",
      "candidate_info": {
        "commit_hash": "30d40577e322b670551ad7e2faa9570b6e23eb2b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/30d40577e322b670551ad7e2faa9570b6e23eb2b",
        "files": [
          "fs/btrfs/relocation.c"
        ],
        "message": "btrfs: reloc: Also queue orphan reloc tree for cleanup to avoid BUG_ON()\n\n[BUG]\nWhen a fs has orphan reloc tree along with unfinished balance:\n  ...\n        item 16 key (TREE_RELOC ROOT_ITEM FS_TREE) itemoff 12090 itemsize 439\n                generation 12 root_dirid 256 bytenr 300400640 level 1 refs 0 <<<\n                lastsnap 8 byte_limit 0 bytes_used 1359872 flags 0x0(none)\n                uuid 7c48d938-33a3-4aae-ab19-6e5c9d406e46\n        item 17 key (BALANCE TEMPORARY_ITEM 0) itemoff 11642 itemsize 448\n                temporary item objectid BALANCE offset 0\n                balance status flags 14\n\nThen at mount time, we can hit the following kernel BUG_ON():\n  BTRFS info (device dm-3): relocating block group 298844160 flags metadata|dup\n  ------------[ cut here ]------------\n  kernel BUG at fs/btrfs/relocation.c:1413!\n  invalid opcode: 0000 [#1] PREEMPT SMP NOPTI\n  CPU: 1 PID: 897 Comm: btrfs-balance Tainted: G           O      5.2.0-rc1-custom #15\n  RIP: 0010:create_reloc_root+0x1eb/0x200 [btrfs]\n  Call Trace:\n   btrfs_init_reloc_root+0x96/0xb0 [btrfs]\n   record_root_in_trans+0xb2/0xe0 [btrfs]\n   btrfs_record_root_in_trans+0x55/0x70 [btrfs]\n   select_reloc_root+0x7e/0x230 [btrfs]\n   do_relocation+0xc4/0x620 [btrfs]\n   relocate_tree_blocks+0x592/0x6a0 [btrfs]\n   relocate_block_group+0x47b/0x5d0 [btrfs]\n   btrfs_relocate_block_group+0x183/0x2f0 [btrfs]\n   btrfs_relocate_chunk+0x4e/0xe0 [btrfs]\n   btrfs_balance+0x864/0xfa0 [btrfs]\n   balance_kthread+0x3b/0x50 [btrfs]\n   kthread+0x123/0x140\n   ret_from_fork+0x27/0x50\n\n[CAUSE]\nIn btrfs, reloc trees are used to record swapped tree blocks during\nbalance.\nReloc tree either get merged (replace old tree blocks of its parent\nsubvolume) in next transaction if its ref is 1 (fresh).\nOr is already merged and will be cleaned up if its ref is 0 (orphan).\n\nAfter commit d2311e698578 (\"btrfs: relocation: Delay reloc tree deletion\nafter merge_reloc_roots\"), reloc tree cleanup is delayed until one block\ngroup is balanced.\n\nSince fresh reloc roots are recorded during merge, as long as there\nis no power loss, those orphan reloc roots converted from fresh ones are\nhandled without problem.\n\nHowever when power loss happens, orphan reloc roots can be recorded\non-disk, thus at next mount time, we will have orphan reloc roots from\non-disk data directly, and ignored by clean_dirty_subvols() routine.\n\nThen when background balance starts to balance another block group, and\nneeds to create new reloc root for the same root, btrfs_insert_item()\nreturns -EEXIST, and trigger that BUG_ON().\n\n[FIX]\nFor orphan reloc roots, also queue them to rc->dirty_subvol_roots, so\nall reloc roots no matter orphan or not, can be cleaned up properly and\navoid above BUG_ON().\n\nAnd to cooperate with above change, clean_dirty_subvols() will check if\nthe queued root is a reloc root or a subvol root.\nFor a subvol root, do the old work, and for a orphan reloc root, clean it\nup.\n\nFixes: d2311e698578 (\"btrfs: relocation: Delay reloc tree deletion after merge_reloc_roots\")\nCC: stable@vger.kernel.org # 5.1\nSigned-off-by: Qu Wenruo <wqu@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
        "before_after_code_files": [
          "fs/btrfs/relocation.c||fs/btrfs/relocation.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/btrfs/relocation.c||fs/btrfs/relocation.c": [
          "File: fs/btrfs/relocation.c -> fs/btrfs/relocation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2177:  struct btrfs_root *root;",
          "2178:  struct btrfs_root *next;",
          "2179:  int ret = 0;",
          "2181:  list_for_each_entry_safe(root, next, &rc->dirty_subvol_roots,",
          "2182:      reloc_dirty_list) {",
          "2192:    if (ret2 < 0 && !ret)",
          "2193:     ret = ret2;",
          "2194:   }",
          "2196:  }",
          "2197:  return ret;",
          "2198: }",
          "",
          "[Removed Lines]",
          "2183:   struct btrfs_root *reloc_root = root->reloc_root;",
          "2185:   clear_bit(BTRFS_ROOT_DEAD_RELOC_TREE, &root->state);",
          "2186:   list_del_init(&root->reloc_dirty_list);",
          "2187:   root->reloc_root = NULL;",
          "2188:   if (reloc_root) {",
          "2189:    int ret2;",
          "2191:    ret2 = btrfs_drop_snapshot(reloc_root, NULL, 0, 1);",
          "2195:   btrfs_put_fs_root(root);",
          "",
          "[Added Lines]",
          "2180:  int ret2;",
          "2184:   if (root->root_key.objectid != BTRFS_TREE_RELOC_OBJECTID) {",
          "2186:    struct btrfs_root *reloc_root = root->reloc_root;",
          "2188:    clear_bit(BTRFS_ROOT_DEAD_RELOC_TREE, &root->state);",
          "2189:    list_del_init(&root->reloc_dirty_list);",
          "2190:    root->reloc_root = NULL;",
          "2191:    if (reloc_root) {",
          "2193:     ret2 = btrfs_drop_snapshot(reloc_root, NULL, 0, 1);",
          "2194:     if (ret2 < 0 && !ret)",
          "2195:      ret = ret2;",
          "2196:    }",
          "2197:    btrfs_put_fs_root(root);",
          "2198:   } else {",
          "2200:    ret2 = btrfs_drop_snapshot(root, NULL, 0, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2480:    }",
          "2481:   } else {",
          "2482:    list_del_init(&reloc_root->root_list);",
          "2483:   }",
          "2484:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2492:    list_add_tail(&reloc_root->reloc_dirty_list,",
          "2493:           &rc->dirty_subvol_roots);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a10f361d176ce53c72d5b1b2e2913a1a222ee393",
      "candidate_info": {
        "commit_hash": "a10f361d176ce53c72d5b1b2e2913a1a222ee393",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a10f361d176ce53c72d5b1b2e2913a1a222ee393",
        "files": [
          "drivers/gpu/drm/i915/gt/intel_engine_cs.c",
          "drivers/gpu/drm/i915/gt/intel_engine_types.h",
          "drivers/gpu/drm/i915/gt/intel_hangcheck.c",
          "drivers/gpu/drm/i915/gt/intel_sseu.c",
          "drivers/gpu/drm/i915/gt/intel_sseu.h",
          "drivers/gpu/drm/i915/gt/intel_workarounds.c",
          "drivers/gpu/drm/i915/i915_debugfs.c",
          "drivers/gpu/drm/i915/i915_drv.c",
          "drivers/gpu/drm/i915/i915_gpu_error.c",
          "drivers/gpu/drm/i915/i915_query.c",
          "drivers/gpu/drm/i915/intel_device_info.c"
        ],
        "message": "Revert \"drm/i915: Expand subslice mask\"\n\nThis reverts commit 1ac159e23c2c (\"drm/i915: Expand subslice mask\"),\nwhich kills ICL due to GEM_BUG_ON() sanity checks before CI even gets a\nchance to do anything.\n\nThe commit exposes an issue in commit 1e40d4aea57b (\"drm/i915/cnl:\nImplement WaProgramMgsrForCorrectSliceSpecificMmioReads\"), which will\nalso need to be addressed.\n\nThere's a proposed fix [1], but considering the seeming uncertainty with\nthe fix as well as the size of the regressing commit (in this context,\nthe one that actually brings down ICL), this warrants a revert to get\nICL working, and gives us time to get all of this right without\nrushing. Even if this means shooting the messenger.\n\n<3>[    9.426327] intel_sseu_get_subslices:46 GEM_BUG_ON(slice >= sseu->max_slices)\n<4>[    9.426355] ------------[ cut here ]------------\n<2>[    9.426357] kernel BUG at drivers/gpu/drm/i915/gt/intel_sseu.c:46!\n<4>[    9.426371] invalid opcode: 0000 [#1] PREEMPT SMP NOPTI\n<4>[    9.426377] CPU: 1 PID: 364 Comm: systemd-udevd Not tainted 5.2.0-rc2-CI-CI_DRM_6159+ #1\n<4>[    9.426385] Hardware name: Intel Corporation Ice Lake Client Platform/IceLake U DDR4 SODIMM PD RVP TLC, BIOS ICLSFWR1.R00.3183.A00.1905020411 05/02/2019\n<4>[    9.426444] RIP: 0010:intel_sseu_get_subslices+0x8a/0xe0 [i915]\n<4>[    9.426452] Code: d5 76 b7 e0 48 8b 35 9d 24 21 00 49 c7 c0 07 f0 72 a0 b9 2e 00 00 00 48 c7 c2 00 8e 6d a0 48 c7 c7 a5 14 5b a0 e8 36 3c be e0 <0f> 0b 48 c7 c1 80 d5 6f a0 ba 30 00 00 00 48 c7 c6 00 8e 6d a0 48\n<4>[    9.426468] RSP: 0018:ffffc9000037b9c8 EFLAGS: 00010282\n<4>[    9.426475] RAX: 000000000000000f RBX: 0000000000000000 RCX: 0000000000000000\n<4>[    9.426482] RDX: 0000000000000001 RSI: 0000000000000008 RDI: ffff88849e346f98\n<4>[    9.426490] RBP: ffff88848a200000 R08: 0000000000000004 R09: ffff88849d50b000\n<4>[    9.426497] R10: 0000000000000000 R11: ffff88849e346f98 R12: ffff88848a209e78\n<4>[    9.426505] R13: 0000000003000000 R14: ffff88848a20b1a8 R15: 0000000000000000\n<4>[    9.426513] FS:  00007f73d5ae8680(0000) GS:ffff88849fc80000(0000) knlGS:0000000000000000\n<4>[    9.426521] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n<4>[    9.426527] CR2: 0000561417b01260 CR3: 0000000494764003 CR4: 0000000000760ee0\n<4>[    9.426535] PKRU: 55555554\n<4>[    9.426538] Call Trace:\n<4>[    9.426585]  wa_init_mcr+0xd5/0x110 [i915]\n<4>[    9.426597]  ? lock_acquire+0xa6/0x1c0\n<4>[    9.426645]  icl_gt_workarounds_init+0x21/0x1a0 [i915]\n<4>[    9.426694]  ? i915_driver_load+0xfcf/0x18a0 [i915]\n<4>[    9.426739]  gt_init_workarounds+0x14c/0x230 [i915]\n<4>[    9.426748]  ? _raw_spin_unlock_irq+0x24/0x50\n<4>[    9.426789]  intel_gt_init_workarounds+0x1b/0x30 [i915]\n<4>[    9.426835]  i915_driver_load+0xfd7/0x18a0 [i915]\n<4>[    9.426843]  ? lock_acquire+0xa6/0x1c0\n<4>[    9.426850]  ? __pm_runtime_resume+0x4f/0x80\n<4>[    9.426857]  ? _raw_spin_unlock_irqrestore+0x4c/0x60\n<4>[    9.426863]  ? _raw_spin_unlock_irqrestore+0x4c/0x60\n<4>[    9.426870]  ? lockdep_hardirqs_on+0xe3/0x1b0\n<4>[    9.426915]  i915_pci_probe+0x29/0xa0 [i915]\n<4>[    9.426923]  pci_device_probe+0x9e/0x120\n<4>[    9.426930]  really_probe+0xea/0x3c0\n<4>[    9.426936]  driver_probe_device+0x10b/0x120\n<4>[    9.426942]  device_driver_attach+0x4a/0x50\n<4>[    9.426948]  __driver_attach+0x97/0x130\n<4>[    9.426954]  ? device_driver_attach+0x50/0x50\n<4>[    9.426960]  bus_for_each_dev+0x74/0xc0\n<4>[    9.426966]  bus_add_driver+0x13f/0x210\n<4>[    9.426971]  ? 0xffffffffa083b000\n<4>[    9.426976]  driver_register+0x56/0xe0\n<4>[    9.426982]  ? 0xffffffffa083b000\n<4>[    9.426987]  do_one_initcall+0x58/0x300\n<4>[    9.426994]  ? do_init_module+0x1d/0x1f6\n<4>[    9.427001]  ? rcu_read_lock_sched_held+0x6f/0x80\n<4>[    9.427007]  ? kmem_cache_alloc_trace+0x261/0x290\n<4>[    9.427014]  do_init_module+0x56/0x1f6\n<4>[    9.427020]  load_module+0x24d1/0x2990\n<4>[    9.427032]  ? __se_sys_finit_module+0xd3/0xf0\n<4>[    9.427037]  __se_sys_finit_module+0xd3/0xf0\n<4>[    9.427047]  do_syscall_64+0x55/0x1c0\n<4>[    9.427053]  entry_SYSCALL_64_after_hwframe+0x49/0xbe\n<4>[    9.427059] RIP: 0033:0x7f73d5609839\n<4>[    9.427064] Code: 00 f3 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 1f f6 2c 00 f7 d8 64 89 01 48\n<4>[    9.427082] RSP: 002b:00007ffdf34477b8 EFLAGS: 00000246 ORIG_RAX: 0000000000000139\n<4>[    9.427091] RAX: ffffffffffffffda RBX: 00005559fd5d7b40 RCX: 00007f73d5609839\n<4>[    9.427099] RDX: 0000000000000000 RSI: 00007f73d52e8145 RDI: 000000000000000f\n<4>[    9.427106] RBP: 00007f73d52e8145 R08: 0000000000000000 R09: 00007ffdf34478d0\n<4>[    9.427114] R10: 000000000000000f R11: 0000000000000246 R12: 0000000000000000\n<4>[    9.427121] R13: 00005559fd5c90f0 R14: 0000000000020000 R15: 00005559fd5d7b40\n<4>[    9.427131] Modules linked in: i915(+) mei_hdcp x86_pkg_temp_thermal coretemp snd_hda_intel crct10dif_pclmul crc32_pclmul snd_hda_codec snd_hwdep e1000e snd_hda_core ghash_clmulni_intel ptp snd_pcm cdc_ether usbnet mii pps_core mei_me mei prime_numbers btusb btrtl btbcm btintel bluetooth ecdh_generic ecc\n<4>[    9.427254] ---[ end trace af3eeb543bd66e66 ]---\n\n[1] http://patchwork.freedesktop.org/patch/msgid/20190528200655.11605-1-chris@chris-wilson.co.uk\n\nReferences: https://intel-gfx-ci.01.org/tree/drm-tip/CI_DRM_6159/fi-icl-u2/pstore0-1517155098_Oops_1.log\nReferences: 1e40d4aea57b (\"drm/i915/cnl: Implement WaProgramMgsrForCorrectSliceSpecificMmioReads\")\nFixes: 1ac159e23c2c (\"drm/i915: Expand subslice mask\")\nCc: Chris Wilson <chris@chris-wilson.co.uk>\nCc: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>\nCc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>\nCc: Lionel Landwerlin <lionel.g.landwerlin@intel.com>\nCc: Manasi Navare <manasi.d.navare@intel.com>\nCc: Michel Thierry <michel.thierry@intel.com>\nCc: Mika Kuoppala <mika.kuoppala@linux.intel.com>\nCc: Oscar Mateo <oscar.mateo@intel.com>\nCc: Stuart Summers <stuart.summers@intel.com>\nCc: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>\nCc: Yunwei Zhang <yunwei.zhang@intel.com>\nAcked-by: Daniel Vetter <daniel@ffwll.ch>\nSigned-off-by: Jani Nikula <jani.nikula@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20190529082150.31526-1-jani.nikula@intel.com",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/gt/intel_engine_cs.c||drivers/gpu/drm/i915/gt/intel_engine_cs.c",
          "drivers/gpu/drm/i915/gt/intel_engine_types.h||drivers/gpu/drm/i915/gt/intel_engine_types.h",
          "drivers/gpu/drm/i915/gt/intel_hangcheck.c||drivers/gpu/drm/i915/gt/intel_hangcheck.c",
          "drivers/gpu/drm/i915/gt/intel_sseu.c||drivers/gpu/drm/i915/gt/intel_sseu.c",
          "drivers/gpu/drm/i915/gt/intel_sseu.h||drivers/gpu/drm/i915/gt/intel_sseu.h",
          "drivers/gpu/drm/i915/gt/intel_workarounds.c||drivers/gpu/drm/i915/gt/intel_workarounds.c",
          "drivers/gpu/drm/i915/i915_debugfs.c||drivers/gpu/drm/i915/i915_debugfs.c",
          "drivers/gpu/drm/i915/i915_drv.c||drivers/gpu/drm/i915/i915_drv.c",
          "drivers/gpu/drm/i915/i915_gpu_error.c||drivers/gpu/drm/i915/i915_gpu_error.c",
          "drivers/gpu/drm/i915/i915_query.c||drivers/gpu/drm/i915/i915_query.c",
          "drivers/gpu/drm/i915/intel_device_info.c||drivers/gpu/drm/i915/intel_device_info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/gt/intel_engine_cs.c||drivers/gpu/drm/i915/gt/intel_engine_cs.c": [
          "File: drivers/gpu/drm/i915/gt/intel_engine_cs.c -> drivers/gpu/drm/i915/gt/intel_engine_cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:  }",
          "954: }",
          "974: u32 intel_calculate_mcr_s_ss_select(struct drm_i915_private *dev_priv)",
          "975: {",
          "976:  const struct sseu_dev_info *sseu = &RUNTIME_INFO(dev_priv)->sseu;",
          "977:  u32 mcr_s_ss_select;",
          "978:  u32 slice = fls(sseu->slice_mask);",
          "981:  if (IS_GEN(dev_priv, 10))",
          "982:   mcr_s_ss_select = GEN8_MCR_SLICE(slice) |",
          "",
          "[Removed Lines]",
          "956: static inline u32",
          "957: intel_sseu_fls_subslice(const struct sseu_dev_info *sseu, u32 slice)",
          "958: {",
          "959:  u32 subslice;",
          "960:  int i;",
          "962:  for (i = sseu->ss_stride - 1; i >= 0; i--) {",
          "963:   subslice = fls(sseu->subslice_mask[slice * sseu->ss_stride +",
          "964:          i]);",
          "965:   if (subslice) {",
          "966:    subslice += i * BITS_PER_BYTE;",
          "967:    break;",
          "968:   }",
          "969:  }",
          "971:  return subslice;",
          "972: }",
          "979:  u32 subslice = intel_sseu_fls_subslice(sseu, slice);",
          "",
          "[Added Lines]",
          "961:  u32 subslice = fls(sseu->subslice_mask[slice]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1052:           struct intel_instdone *instdone)",
          "1053: {",
          "1054:  struct drm_i915_private *dev_priv = engine->i915;",
          "1056:  struct intel_uncore *uncore = engine->uncore;",
          "1057:  u32 mmio_base = engine->mmio_base;",
          "1058:  int slice;",
          "",
          "[Removed Lines]",
          "1055:  const struct sseu_dev_info *sseu = &RUNTIME_INFO(dev_priv)->sseu;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1071:   instdone->slice_common =",
          "1072:    intel_uncore_read(uncore, GEN7_SC_INSTDONE);",
          "1075:    instdone->sampler[slice][subslice] =",
          "1076:     read_subslice_reg(dev_priv, slice, subslice,",
          "1077:         GEN7_SAMPLER_INSTDONE);",
          "",
          "[Removed Lines]",
          "1073:   for_each_instdone_slice_subslice(dev_priv, sseu, slice,",
          "1074:        subslice) {",
          "",
          "[Added Lines]",
          "1054:   for_each_instdone_slice_subslice(dev_priv, slice, subslice) {",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/gt/intel_engine_types.h||drivers/gpu/drm/i915/gt/intel_engine_types.h": [
          "File: drivers/gpu/drm/i915/gt/intel_engine_types.h -> drivers/gpu/drm/i915/gt/intel_engine_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "552:  return engine->flags & I915_ENGINE_IS_VIRTUAL;",
          "553: }",
          "",
          "[Removed Lines]",
          "555: #define instdone_has_slice(dev_priv___, sseu___, slice___) \\",
          "556:  ((IS_GEN(dev_priv___, 7) ? 1 : ((sseu___)->slice_mask)) & \\",
          "557:  BIT(slice___))",
          "559: #define instdone_has_subslice(dev_priv__, sseu__, slice__, subslice__) \\",
          "560:  (IS_GEN(dev_priv__, 7) ? (1 & BIT(subslice__)) : \\",
          "561:   intel_sseu_has_subslice(sseu__, slice__, subslice__))",
          "563: #define for_each_instdone_slice_subslice(dev_priv_, sseu_, slice_, subslice_) \\",
          "564:  for ((slice_) = 0, (subslice_) = 0; (slice_) < I915_MAX_SLICES; \\",
          "565:       (subslice_) = ((subslice_) + 1) % I915_MAX_SUBSLICES, \\",
          "566:       (slice_) += ((subslice_) == 0)) \\",
          "567:   for_each_if((instdone_has_slice(dev_priv_, sseu_, slice_)) && \\",
          "568:        (instdone_has_subslice(dev_priv_, sseu_, slice_, \\",
          "569:           subslice_)))",
          "",
          "[Added Lines]",
          "555: #define instdone_slice_mask(dev_priv__) \\",
          "556:  (IS_GEN(dev_priv__, 7) ? \\",
          "557:   1 : RUNTIME_INFO(dev_priv__)->sseu.slice_mask)",
          "559: #define instdone_subslice_mask(dev_priv__) \\",
          "560:  (IS_GEN(dev_priv__, 7) ? \\",
          "561:   1 : RUNTIME_INFO(dev_priv__)->sseu.subslice_mask[0])",
          "563: #define for_each_instdone_slice_subslice(dev_priv__, slice__, subslice__) \\",
          "564:  for ((slice__) = 0, (subslice__) = 0; \\",
          "565:       (slice__) < I915_MAX_SLICES; \\",
          "566:       (subslice__) = ((subslice__) + 1) < I915_MAX_SUBSLICES ? (subslice__) + 1 : 0, \\",
          "567:         (slice__) += ((subslice__) == 0)) \\",
          "568:   for_each_if((BIT(slice__) & instdone_slice_mask(dev_priv__)) && \\",
          "569:        (BIT(subslice__) & instdone_subslice_mask(dev_priv__)))",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/gt/intel_hangcheck.c||drivers/gpu/drm/i915/gt/intel_hangcheck.c": [
          "File: drivers/gpu/drm/i915/gt/intel_hangcheck.c -> drivers/gpu/drm/i915/gt/intel_hangcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: static bool subunits_stuck(struct intel_engine_cs *engine)",
          "52: {",
          "53:  struct drm_i915_private *dev_priv = engine->i915;",
          "55:  struct intel_instdone instdone;",
          "56:  struct intel_instdone *accu_instdone = &engine->hangcheck.instdone;",
          "57:  bool stuck;",
          "",
          "[Removed Lines]",
          "54:  const struct sseu_dev_info *sseu = &RUNTIME_INFO(dev_priv)->sseu;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:  stuck &= instdone_unchanged(instdone.slice_common,",
          "74:         &accu_instdone->slice_common);",
          "77:   stuck &= instdone_unchanged(instdone.sampler[slice][subslice],",
          "78:          &accu_instdone->sampler[slice][subslice]);",
          "79:   stuck &= instdone_unchanged(instdone.row[slice][subslice],",
          "",
          "[Removed Lines]",
          "76:  for_each_instdone_slice_subslice(dev_priv, sseu, slice, subslice) {",
          "",
          "[Added Lines]",
          "75:  for_each_instdone_slice_subslice(dev_priv, slice, subslice) {",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/gt/intel_sseu.c||drivers/gpu/drm/i915/gt/intel_sseu.c": [
          "File: drivers/gpu/drm/i915/gt/intel_sseu.c -> drivers/gpu/drm/i915/gt/intel_sseu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #include \"intel_lrc_reg.h\"",
          "9: #include \"intel_sseu.h\"",
          "22: unsigned int",
          "23: intel_sseu_subslice_total(const struct sseu_dev_info *sseu)",
          "24: {",
          "",
          "[Removed Lines]",
          "11: void intel_sseu_set_info(struct sseu_dev_info *sseu, u8 max_slices,",
          "12:     u8 max_subslices, u8 max_eus_per_subslice)",
          "13: {",
          "14:  sseu->max_slices = max_slices;",
          "15:  sseu->max_subslices = max_subslices;",
          "16:  sseu->max_eus_per_subslice = max_eus_per_subslice;",
          "18:  sseu->ss_stride = GEN_SSEU_STRIDE(sseu->max_subslices);",
          "19:  sseu->eu_stride = GEN_SSEU_STRIDE(sseu->max_eus_per_subslice);",
          "20: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:  return total;",
          "31: }",
          "67: unsigned int",
          "68: intel_sseu_subslices_per_slice(const struct sseu_dev_info *sseu, u8 slice)",
          "69: {",
          "71: }",
          "73: u32 intel_sseu_make_rpcs(struct drm_i915_private *i915,",
          "",
          "[Removed Lines]",
          "33: void intel_sseu_copy_subslices(const struct sseu_dev_info *sseu, int slice,",
          "34:           u8 *to_mask)",
          "35: {",
          "36:  int offset = slice * sseu->ss_stride;",
          "38:  memcpy(&to_mask[offset], &sseu->subslice_mask[offset], sseu->ss_stride);",
          "39: }",
          "41: u32 intel_sseu_get_subslices(const struct sseu_dev_info *sseu, u8 slice)",
          "42: {",
          "43:  int i, offset = slice * sseu->ss_stride;",
          "44:  u32 mask;",
          "46:  GEM_BUG_ON(slice >= sseu->max_slices);",
          "48:  GEM_BUG_ON(sseu->ss_stride > sizeof(mask));",
          "50:  for (i = 0; i < sseu->ss_stride; i++)",
          "51:   mask |= (u32)sseu->subslice_mask[offset + i] <<",
          "52:    i * BITS_PER_BYTE;",
          "54:  return mask;",
          "55: }",
          "57: void intel_sseu_set_subslices(struct sseu_dev_info *sseu, int slice,",
          "58:          u32 ss_mask)",
          "59: {",
          "60:  int i, offset = slice * sseu->ss_stride;",
          "62:  for (i = 0; i < sseu->ss_stride; i++)",
          "63:   sseu->subslice_mask[offset + i] =",
          "64:    (ss_mask >> (BITS_PER_BYTE * i)) & 0xff;",
          "65: }",
          "70:  return hweight32(intel_sseu_get_subslices(sseu, slice));",
          "",
          "[Added Lines]",
          "25:  return hweight8(sseu->subslice_mask[slice]);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/gt/intel_sseu.h||drivers/gpu/drm/i915/gt/intel_sseu.h": [
          "File: drivers/gpu/drm/i915/gt/intel_sseu.h -> drivers/gpu/drm/i915/gt/intel_sseu.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #define GEN_SSEU_STRIDE(max_entries) DIV_ROUND_UP(max_entries, BITS_PER_BYTE)",
          "20: struct sseu_dev_info {",
          "21:  u8 slice_mask;",
          "23:  u16 eu_total;",
          "24:  u8 eu_per_subslice;",
          "25:  u8 min_eu_in_pool;",
          "",
          "[Removed Lines]",
          "18: #define GEN_MAX_SUBSLICE_STRIDE GEN_SSEU_STRIDE(GEN_MAX_SUBSLICES)",
          "22:  u8 subslice_mask[GEN_MAX_SLICES * GEN_MAX_SUBSLICE_STRIDE];",
          "",
          "[Added Lines]",
          "21:  u8 subslice_mask[GEN_MAX_SLICES];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:  u8 max_subslices;",
          "35:  u8 max_eus_per_subslice;",
          "",
          "[Removed Lines]",
          "37:  u8 ss_stride;",
          "38:  u8 eu_stride;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:  return value;",
          "68: }",
          "83: unsigned int",
          "84: intel_sseu_subslice_total(const struct sseu_dev_info *sseu);",
          "86: unsigned int",
          "87: intel_sseu_subslices_per_slice(const struct sseu_dev_info *sseu, u8 slice);",
          "97: u32 intel_sseu_make_rpcs(struct drm_i915_private *i915,",
          "98:     const struct intel_sseu *req_sseu);",
          "",
          "[Removed Lines]",
          "70: static inline bool",
          "71: intel_sseu_has_subslice(const struct sseu_dev_info *sseu, int slice,",
          "72:    int subslice)",
          "73: {",
          "74:  u8 mask = sseu->subslice_mask[slice * sseu->ss_stride +",
          "75:           subslice / BITS_PER_BYTE];",
          "77:  return mask & BIT(subslice % BITS_PER_BYTE);",
          "78: }",
          "80: void intel_sseu_set_info(struct sseu_dev_info *sseu, u8 max_slices,",
          "81:     u8 max_subslices, u8 max_eus_per_subslice);",
          "89: void intel_sseu_copy_subslices(const struct sseu_dev_info *sseu, int slice,",
          "90:           u8 *to_mask);",
          "92: u32  intel_sseu_get_subslices(const struct sseu_dev_info *sseu, u8 slice);",
          "94: void intel_sseu_set_subslices(struct sseu_dev_info *sseu, int slice,",
          "95:          u32 ss_mask);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/gt/intel_workarounds.c||drivers/gpu/drm/i915/gt/intel_workarounds.c": [
          "File: drivers/gpu/drm/i915/gt/intel_workarounds.c -> drivers/gpu/drm/i915/gt/intel_workarounds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "784:   u32 slice = fls(sseu->slice_mask);",
          "785:   u32 fuse3 =",
          "786:    intel_uncore_read(&i915->uncore, GEN10_MIRROR_FUSE3);",
          "789:   u8 enabled_mask = (ss_mask | ss_mask >>",
          "790:        GEN10_L3BANK_PAIR_COUNT) & GEN10_L3BANK_MASK;",
          "",
          "[Removed Lines]",
          "787:   u32 ss_mask = intel_sseu_get_subslices(sseu, slice);",
          "",
          "[Added Lines]",
          "787:   u8 ss_mask = sseu->subslice_mask[slice];",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/i915_debugfs.c||drivers/gpu/drm/i915/i915_debugfs.c": [
          "File: drivers/gpu/drm/i915/i915_debugfs.c -> drivers/gpu/drm/i915/i915_debugfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1271:           struct seq_file *m,",
          "1272:           struct intel_instdone *instdone)",
          "1273: {",
          "1275:  int slice;",
          "1276:  int subslice;",
          "",
          "[Removed Lines]",
          "1274:  struct sseu_dev_info *sseu = &RUNTIME_INFO(dev_priv)->sseu;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1287:  if (INTEL_GEN(dev_priv) <= 6)",
          "1288:   return;",
          "1291:   seq_printf(m, \"\\t\\tSAMPLER_INSTDONE[%d][%d]: 0x%08x\\n\",",
          "1292:       slice, subslice, instdone->sampler[slice][subslice]);",
          "1295:   seq_printf(m, \"\\t\\tROW_INSTDONE[%d][%d]: 0x%08x\\n\",",
          "1296:       slice, subslice, instdone->row[slice][subslice]);",
          "1297: }",
          "",
          "[Removed Lines]",
          "1290:  for_each_instdone_slice_subslice(dev_priv, sseu, slice, subslice)",
          "1294:  for_each_instdone_slice_subslice(dev_priv, sseu, slice, subslice)",
          "",
          "[Added Lines]",
          "1289:  for_each_instdone_slice_subslice(dev_priv, slice, subslice)",
          "1293:  for_each_instdone_slice_subslice(dev_priv, slice, subslice)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4085:    continue;",
          "4087:   sseu->slice_mask |= BIT(s);",
          "4090:   for (ss = 0; ss < info->sseu.max_subslices; ss++) {",
          "4091:    unsigned int eu_cnt;",
          "",
          "[Removed Lines]",
          "4088:   intel_sseu_copy_subslices(&info->sseu, s, sseu->subslice_mask);",
          "",
          "[Added Lines]",
          "4087:   sseu->subslice_mask[s] = info->sseu.subslice_mask[s];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4136:   sseu->slice_mask |= BIT(s);",
          "4138:   if (IS_GEN9_BC(dev_priv))",
          "4142:   for (ss = 0; ss < info->sseu.max_subslices; ss++) {",
          "4143:    unsigned int eu_cnt;",
          "4147:    if (IS_GEN9_LP(dev_priv)) {",
          "4148:     if (!(s_reg[s] & (GEN9_PGCTL_SS_ACK(ss))))",
          "4150:      continue;",
          "4154:    }",
          "4156:    eu_cnt = 2 * hweight32(eu_reg[2*s + ss/2] &",
          "",
          "[Removed Lines]",
          "4139:    intel_sseu_copy_subslices(&info->sseu, s,",
          "4140:         sseu->subslice_mask);",
          "4144:    u8 ss_idx = s * info->sseu.ss_stride +",
          "4145:         ss / BITS_PER_BYTE;",
          "4152:     sseu->subslice_mask[ss_idx] |=",
          "4153:      BIT(ss % BITS_PER_BYTE);",
          "",
          "[Added Lines]",
          "4138:    sseu->subslice_mask[s] =",
          "4139:     RUNTIME_INFO(dev_priv)->sseu.subslice_mask[s];",
          "4149:     sseu->subslice_mask[s] |= BIT(ss);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4167: static void broadwell_sseu_device_status(struct drm_i915_private *dev_priv,",
          "4168:       struct sseu_dev_info *sseu)",
          "4169: {",
          "4171:  u32 slice_info = I915_READ(GEN8_GT_SLICE_INFO);",
          "4172:  int s;",
          "4174:  sseu->slice_mask = slice_info & GEN8_LSLICESTAT_MASK;",
          "4176:  if (sseu->slice_mask) {",
          "4181:   sseu->eu_total = sseu->eu_per_subslice *",
          "4182:      intel_sseu_subslice_total(sseu);",
          "4185:   for (s = 0; s < fls(sseu->slice_mask); s++) {",
          "4188:    sseu->eu_total -= hweight8(subslice_7eu);",
          "4189:   }",
          "",
          "[Removed Lines]",
          "4170:  struct intel_runtime_info *info = RUNTIME_INFO(dev_priv);",
          "4177:   sseu->eu_per_subslice = info->sseu.eu_per_subslice;",
          "4178:   for (s = 0; s < fls(sseu->slice_mask); s++)",
          "4179:    intel_sseu_copy_subslices(&info->sseu, s,",
          "4180:         sseu->subslice_mask);",
          "4186:    u8 subslice_7eu = info->sseu.subslice_7eu[s];",
          "",
          "[Added Lines]",
          "4172:   sseu->eu_per_subslice =",
          "4173:    RUNTIME_INFO(dev_priv)->sseu.eu_per_subslice;",
          "4174:   for (s = 0; s < fls(sseu->slice_mask); s++) {",
          "4175:    sseu->subslice_mask[s] =",
          "4176:     RUNTIME_INFO(dev_priv)->sseu.subslice_mask[s];",
          "4177:   }",
          "4183:    u8 subslice_7eu =",
          "4184:     RUNTIME_INFO(dev_priv)->sseu.subslice_7eu[s];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4230: static int i915_sseu_status(struct seq_file *m, void *unused)",
          "4231: {",
          "4232:  struct drm_i915_private *dev_priv = node_to_i915(m->private);",
          "4234:  struct sseu_dev_info sseu;",
          "4235:  intel_wakeref_t wakeref;",
          "",
          "[Removed Lines]",
          "4233:  const struct intel_runtime_info *info = RUNTIME_INFO(dev_priv);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4238:   return -ENODEV;",
          "4240:  seq_puts(m, \"SSEU Device Info\\n\");",
          "4243:  seq_puts(m, \"SSEU Device Status\\n\");",
          "4244:  memset(&sseu, 0, sizeof(sseu));",
          "4249:  with_intel_runtime_pm(dev_priv, wakeref) {",
          "4250:   if (IS_CHERRYVIEW(dev_priv))",
          "",
          "[Removed Lines]",
          "4241:  i915_print_sseu_info(m, true, &info->sseu);",
          "4245:  intel_sseu_set_info(&sseu, info->sseu.max_slices,",
          "4246:        info->sseu.max_subslices,",
          "4247:        info->sseu.max_eus_per_subslice);",
          "",
          "[Added Lines]",
          "4238:  i915_print_sseu_info(m, true, &RUNTIME_INFO(dev_priv)->sseu);",
          "4242:  sseu.max_slices = RUNTIME_INFO(dev_priv)->sseu.max_slices;",
          "4243:  sseu.max_subslices = RUNTIME_INFO(dev_priv)->sseu.max_subslices;",
          "4244:  sseu.max_eus_per_subslice =",
          "4245:   RUNTIME_INFO(dev_priv)->sseu.max_eus_per_subslice;",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/i915_drv.c||drivers/gpu/drm/i915/i915_drv.c": [
          "File: drivers/gpu/drm/i915/i915_drv.c -> drivers/gpu/drm/i915/i915_drv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:  struct pci_dev *pdev = dev_priv->drm.pdev;",
          "335:  const struct sseu_dev_info *sseu = &RUNTIME_INFO(dev_priv)->sseu;",
          "336:  drm_i915_getparam_t *param = data;",
          "339:  switch (param->param) {",
          "340:  case I915_PARAM_IRQ_ACTIVE:",
          "",
          "[Removed Lines]",
          "337:  int value = 0;",
          "",
          "[Added Lines]",
          "337:  int value;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:    return -ENODEV;",
          "465:   break;",
          "466:  case I915_PARAM_SUBSLICE_MASK:",
          "470:   if (!value)",
          "471:    return -ENODEV;",
          "472:   break;",
          "",
          "[Removed Lines]",
          "468:   memcpy(&value, sseu->subslice_mask,",
          "469:          min(sseu->ss_stride, (u8)sizeof(value)));",
          "",
          "[Added Lines]",
          "467:   value = sseu->subslice_mask[0];",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/i915_gpu_error.c||drivers/gpu/drm/i915/i915_gpu_error.c": [
          "File: drivers/gpu/drm/i915/i915_gpu_error.c -> drivers/gpu/drm/i915/i915_gpu_error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "411: static void error_print_instdone(struct drm_i915_error_state_buf *m,",
          "412:      const struct drm_i915_error_engine *ee)",
          "413: {",
          "415:  int slice;",
          "416:  int subslice;",
          "",
          "[Removed Lines]",
          "414:  struct sseu_dev_info *sseu = &RUNTIME_INFO(m->i915)->sseu;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:  if (INTEL_GEN(m->i915) <= 6)",
          "428:   return;",
          "431:   err_printf(m, \"  SAMPLER_INSTDONE[%d][%d]: 0x%08x\\n\",",
          "432:       slice, subslice,",
          "433:       ee->instdone.sampler[slice][subslice]);",
          "436:   err_printf(m, \"  ROW_INSTDONE[%d][%d]: 0x%08x\\n\",",
          "437:       slice, subslice,",
          "438:       ee->instdone.row[slice][subslice]);",
          "",
          "[Removed Lines]",
          "430:  for_each_instdone_slice_subslice(m->i915, sseu, slice, subslice)",
          "435:  for_each_instdone_slice_subslice(m->i915, sseu, slice, subslice)",
          "",
          "[Added Lines]",
          "429:  for_each_instdone_slice_subslice(m->i915, slice, subslice)",
          "434:  for_each_instdone_slice_subslice(m->i915, slice, subslice)",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/i915_query.c||drivers/gpu/drm/i915/i915_query.c": [
          "File: drivers/gpu/drm/i915/i915_query.c -> drivers/gpu/drm/i915/i915_query.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  const struct sseu_dev_info *sseu = &RUNTIME_INFO(dev_priv)->sseu;",
          "38:  struct drm_i915_query_topology_info topo;",
          "39:  u32 slice_length, subslice_length, eu_length, total_length;",
          "40:  int ret;",
          "42:  if (query_item->flags != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:  u8 subslice_stride = GEN_SSEU_STRIDE(sseu->max_subslices);",
          "41:  u8 eu_stride = GEN_SSEU_STRIDE(sseu->max_eus_per_subslice);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  BUILD_BUG_ON(sizeof(u8) != sizeof(sseu->slice_mask));",
          "50:  slice_length = sizeof(sseu->slice_mask);",
          "53:  total_length = sizeof(topo) + slice_length + subslice_length +",
          "54:          eu_length;",
          "",
          "[Removed Lines]",
          "51:  subslice_length = sseu->max_slices * sseu->ss_stride;",
          "52:  eu_length = sseu->max_slices * sseu->max_subslices * sseu->eu_stride;",
          "",
          "[Added Lines]",
          "53:  subslice_length = sseu->max_slices * subslice_stride;",
          "54:  eu_length = sseu->max_slices * sseu->max_subslices * eu_stride;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:  topo.max_eus_per_subslice = sseu->max_eus_per_subslice;",
          "69:  topo.subslice_offset = slice_length;",
          "71:  topo.eu_offset = slice_length + subslice_length;",
          "74:  if (__copy_to_user(u64_to_user_ptr(query_item->data_ptr),",
          "75:       &topo, sizeof(topo)))",
          "",
          "[Removed Lines]",
          "70:  topo.subslice_stride = sseu->ss_stride;",
          "72:  topo.eu_stride = sseu->eu_stride;",
          "",
          "[Added Lines]",
          "72:  topo.subslice_stride = subslice_stride;",
          "74:  topo.eu_stride = eu_stride;",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/intel_device_info.c||drivers/gpu/drm/i915/intel_device_info.c": [
          "File: drivers/gpu/drm/i915/intel_device_info.c -> drivers/gpu/drm/i915/intel_device_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:      hweight8(sseu->slice_mask), sseu->slice_mask);",
          "93:  drm_printf(p, \"subslice total: %u\\n\", intel_sseu_subslice_total(sseu));",
          "94:  for (s = 0; s < sseu->max_slices; s++) {",
          "96:       s, intel_sseu_subslices_per_slice(sseu, s),",
          "98:  }",
          "99:  drm_printf(p, \"EU total: %u\\n\", sseu->eu_total);",
          "100:  drm_printf(p, \"EU per subslice: %u\\n\", sseu->eu_per_subslice);",
          "",
          "[Removed Lines]",
          "95:   drm_printf(p, \"slice%d: %u subslices, mask=%08x\\n\",",
          "97:       intel_sseu_get_subslices(sseu, s));",
          "",
          "[Added Lines]",
          "95:   drm_printf(p, \"slice%d: %u subslices, mask=%04x\\n\",",
          "97:       sseu->subslice_mask[s]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: static int sseu_eu_idx(const struct sseu_dev_info *sseu, int slice,",
          "118:          int subslice)",
          "119: {",
          "123: }",
          "125: static u16 sseu_get_eus(const struct sseu_dev_info *sseu, int slice,",
          "",
          "[Removed Lines]",
          "120:  int slice_stride = sseu->max_subslices * sseu->eu_stride;",
          "122:  return slice * slice_stride + subslice * sseu->eu_stride;",
          "",
          "[Added Lines]",
          "120:  int subslice_stride = GEN_SSEU_STRIDE(sseu->max_eus_per_subslice);",
          "121:  int slice_stride = sseu->max_subslices * subslice_stride;",
          "123:  return slice * slice_stride + subslice * subslice_stride;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  int i, offset = sseu_eu_idx(sseu, slice, subslice);",
          "129:  u16 eu_mask = 0;",
          "132:   eu_mask |= ((u16)sseu->eu_mask[offset + i]) <<",
          "133:    (i * BITS_PER_BYTE);",
          "134:  }",
          "",
          "[Removed Lines]",
          "131:  for (i = 0; i < sseu->eu_stride; i++) {",
          "",
          "[Added Lines]",
          "132:  for (i = 0; i < GEN_SSEU_STRIDE(sseu->max_eus_per_subslice); i++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141: {",
          "142:  int i, offset = sseu_eu_idx(sseu, slice, subslice);",
          "145:   sseu->eu_mask[offset + i] =",
          "146:    (eu_mask >> (BITS_PER_BYTE * i)) & 0xff;",
          "147:  }",
          "",
          "[Removed Lines]",
          "144:  for (i = 0; i < sseu->eu_stride; i++) {",
          "",
          "[Added Lines]",
          "145:  for (i = 0; i < GEN_SSEU_STRIDE(sseu->max_eus_per_subslice); i++) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:  }",
          "160:  for (s = 0; s < sseu->max_slices; s++) {",
          "162:       s, intel_sseu_subslices_per_slice(sseu, s),",
          "165:   for (ss = 0; ss < sseu->max_subslices; ss++) {",
          "166:    u16 enabled_eus = sseu_get_eus(sseu, s, ss);",
          "",
          "[Removed Lines]",
          "161:   drm_printf(p, \"slice%d: %u subslice(s) (0x%08x):\\n\",",
          "163:       intel_sseu_get_subslices(sseu, s));",
          "",
          "[Added Lines]",
          "162:   drm_printf(p, \"slice%d: %u subslice(s) (0x%hhx):\\n\",",
          "164:       sseu->subslice_mask[s]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "189:  u8 eu_en;",
          "190:  int s;",
          "197:  s_en = I915_READ(GEN11_GT_SLICE_ENABLE) & GEN11_GT_S_ENA_MASK;",
          "198:  ss_en = ~I915_READ(GEN11_GT_SUBSLICE_DISABLE);",
          "",
          "[Removed Lines]",
          "192:  if (IS_ELKHARTLAKE(dev_priv))",
          "193:   intel_sseu_set_info(sseu, 1, 4, 8);",
          "194:  else",
          "195:   intel_sseu_set_info(sseu, 1, 8, 8);",
          "",
          "[Added Lines]",
          "193:  if (IS_ELKHARTLAKE(dev_priv)) {",
          "194:   sseu->max_slices = 1;",
          "195:   sseu->max_subslices = 4;",
          "196:   sseu->max_eus_per_subslice = 8;",
          "197:  } else {",
          "198:   sseu->max_slices = 1;",
          "199:   sseu->max_subslices = 8;",
          "200:   sseu->max_eus_per_subslice = 8;",
          "201:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "202:  for (s = 0; s < sseu->max_slices; s++) {",
          "203:   if (s_en & BIT(s)) {",
          "204:    int ss;",
          "206:    sseu->slice_mask |= BIT(s);",
          "212:      sseu_set_eus(sseu, s, ss, eu_en);",
          "213:   }",
          "214:  }",
          "215:  sseu->eu_per_subslice = hweight8(eu_en);",
          "",
          "[Removed Lines]",
          "208:    intel_sseu_set_subslices(sseu, s, ss_en_mask);",
          "210:    for (ss = 0; ss < sseu->max_subslices; ss++)",
          "211:     if (intel_sseu_has_subslice(sseu, s, ss))",
          "",
          "[Added Lines]",
          "210:    int ss_idx = sseu->max_subslices * s;",
          "214:    sseu->subslice_mask[s] = (ss_en >> ss_idx) & ss_en_mask;",
          "215:    for (ss = 0; ss < sseu->max_subslices; ss++) {",
          "216:     if (sseu->subslice_mask[s] & BIT(ss))",
          "218:    }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "229:  const int eu_mask = 0xff;",
          "230:  u32 subslice_mask, eu_en;",
          "234:  sseu->slice_mask = (fuse2 & GEN10_F2_S_ENA_MASK) >>",
          "235:        GEN10_F2_S_ENA_SHIFT;",
          "238:  eu_en = ~I915_READ(GEN8_EU_DISABLE0);",
          "",
          "[Removed Lines]",
          "232:  intel_sseu_set_info(sseu, 6, 4, 8);",
          "",
          "[Added Lines]",
          "240:  sseu->max_slices = 6;",
          "241:  sseu->max_subslices = 4;",
          "242:  sseu->max_eus_per_subslice = 8;",
          "244:  subslice_mask = (1 << 4) - 1;",
          "245:  subslice_mask &= ~((fuse2 & GEN10_F2_SS_DIS_MASK) >>",
          "246:       GEN10_F2_SS_DIS_SHIFT);",
          "252:  sseu->subslice_mask[0] = subslice_mask;",
          "253:  for (s = 1; s < sseu->max_slices; s++)",
          "254:   sseu->subslice_mask[s] = subslice_mask & 0x3;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "257:  eu_en = ~I915_READ(GEN10_EU_DISABLE3);",
          "258:  sseu_set_eus(sseu, 5, 1, eu_en & eu_mask);",
          "264:  for (s = 0; s < sseu->max_slices; s++) {",
          "265:   for (ss = 0; ss < sseu->max_subslices; ss++) {",
          "266:    if (sseu_get_eus(sseu, s, ss) == 0)",
          "268:   }",
          "276:  }",
          "278:  sseu->eu_total = compute_eu_total(sseu);",
          "",
          "[Removed Lines]",
          "260:  subslice_mask = (1 << 4) - 1;",
          "261:  subslice_mask &= ~((fuse2 & GEN10_F2_SS_DIS_MASK) >>",
          "262:       GEN10_F2_SS_DIS_SHIFT);",
          "267:     subslice_mask &= ~BIT(ss);",
          "274:   intel_sseu_set_subslices(sseu, s, s == 0 ? subslice_mask :",
          "275:           subslice_mask & 0x3);",
          "",
          "[Added Lines]",
          "285:     sseu->subslice_mask[s] &= ~BIT(ss);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "298: {",
          "299:  struct sseu_dev_info *sseu = &RUNTIME_INFO(dev_priv)->sseu;",
          "300:  u32 fuse;",
          "303:  fuse = I915_READ(CHV_FUSE_GT);",
          "305:  sseu->slice_mask = BIT(0);",
          "308:  if (!(fuse & CHV_FGT_DISABLE_SS0)) {",
          "309:   u8 disabled_mask =",
          "",
          "[Removed Lines]",
          "301:  u8 subslice_mask;",
          "306:  intel_sseu_set_info(sseu, 1, 2, 8);",
          "",
          "[Added Lines]",
          "316:  sseu->max_slices = 1;",
          "317:  sseu->max_subslices = 2;",
          "318:  sseu->max_eus_per_subslice = 8;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "312:    (((fuse & CHV_FGT_EU_DIS_SS0_R1_MASK) >>",
          "313:      CHV_FGT_EU_DIS_SS0_R1_SHIFT) << 4);",
          "316:   sseu_set_eus(sseu, 0, 0, ~disabled_mask);",
          "317:  }",
          "",
          "[Removed Lines]",
          "315:   subslice_mask |= BIT(0);",
          "",
          "[Added Lines]",
          "327:   sseu->subslice_mask[0] |= BIT(0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "323:    (((fuse & CHV_FGT_EU_DIS_SS1_R1_MASK) >>",
          "324:      CHV_FGT_EU_DIS_SS1_R1_SHIFT) << 4);",
          "327:   sseu_set_eus(sseu, 0, 1, ~disabled_mask);",
          "328:  }",
          "332:  sseu->eu_total = compute_eu_total(sseu);",
          "",
          "[Removed Lines]",
          "326:   subslice_mask |= BIT(1);",
          "330:  intel_sseu_set_subslices(sseu, 0, subslice_mask);",
          "",
          "[Added Lines]",
          "338:   sseu->subslice_mask[0] |= BIT(1);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "361:  sseu->slice_mask = (fuse2 & GEN8_F2_S_ENA_MASK) >> GEN8_F2_S_ENA_SHIFT;",
          "",
          "[Removed Lines]",
          "364:  intel_sseu_set_info(sseu, IS_GEN9_LP(dev_priv) ? 1 : 3,",
          "365:        IS_GEN9_LP(dev_priv) ? 3 : 4, 8);",
          "",
          "[Added Lines]",
          "374:  sseu->max_slices = IS_GEN9_LP(dev_priv) ? 1 : 3;",
          "375:  sseu->max_subslices = IS_GEN9_LP(dev_priv) ? 3 : 4;",
          "376:  sseu->max_eus_per_subslice = 8;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "382:    continue;",
          "386:   eu_disable = I915_READ(GEN9_EU_DISABLE(s));",
          "387:   for (ss = 0; ss < sseu->max_subslices; ss++) {",
          "388:    int eu_per_ss;",
          "389:    u8 eu_disabled_mask;",
          "393:     continue;",
          "",
          "[Removed Lines]",
          "384:   intel_sseu_set_subslices(sseu, s, subslice_mask);",
          "391:    if (!intel_sseu_has_subslice(sseu, s, ss))",
          "",
          "[Added Lines]",
          "395:   sseu->subslice_mask[s] = subslice_mask;",
          "402:    if (!(sseu->subslice_mask[s] & BIT(ss)))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "462:  fuse2 = I915_READ(GEN8_FUSE2);",
          "463:  sseu->slice_mask = (fuse2 & GEN8_F2_S_ENA_MASK) >> GEN8_F2_S_ENA_SHIFT;",
          "",
          "[Removed Lines]",
          "464:  intel_sseu_set_info(sseu, 3, 3, 8);",
          "",
          "[Added Lines]",
          "475:  sseu->max_slices = 3;",
          "476:  sseu->max_subslices = 3;",
          "477:  sseu->max_eus_per_subslice = 8;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "489:    continue;",
          "493:   for (ss = 0; ss < sseu->max_subslices; ss++) {",
          "494:    u8 eu_disabled_mask;",
          "495:    u32 n_disabled;",
          "499:     continue;",
          "501:    eu_disabled_mask =",
          "505:    sseu_set_eus(sseu, s, ss, ~eu_disabled_mask);",
          "",
          "[Removed Lines]",
          "491:   intel_sseu_set_subslices(sseu, s, subslice_mask);",
          "497:    if (!intel_sseu_has_subslice(sseu, s, ss))",
          "502:     eu_disable[s] >>",
          "503:      (ss * sseu->max_eus_per_subslice);",
          "",
          "[Added Lines]",
          "504:   sseu->subslice_mask[s] = subslice_mask;",
          "510:    if (!(sseu->subslice_mask[s] & BIT(ss)))",
          "515:     eu_disable[s] >> (ss * sseu->max_eus_per_subslice);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "540:  struct sseu_dev_info *sseu = &RUNTIME_INFO(dev_priv)->sseu;",
          "541:  u32 fuse1;",
          "542:  int s, ss;",
          "",
          "[Removed Lines]",
          "543:  u32 subslice_mask;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "553:  case 1:",
          "554:   sseu->slice_mask = BIT(0);",
          "556:   break;",
          "557:  case 2:",
          "558:   sseu->slice_mask = BIT(0);",
          "560:   break;",
          "561:  case 3:",
          "562:   sseu->slice_mask = BIT(0) | BIT(1);",
          "564:   break;",
          "565:  }",
          "567:  fuse1 = I915_READ(HSW_PAVP_FUSE1);",
          "568:  switch ((fuse1 & HSW_F1_EU_DIS_MASK) >> HSW_F1_EU_DIS_SHIFT) {",
          "569:  default:",
          "",
          "[Removed Lines]",
          "555:   subslice_mask = BIT(0);",
          "559:   subslice_mask = BIT(0) | BIT(1);",
          "563:   subslice_mask = BIT(0) | BIT(1);",
          "",
          "[Added Lines]",
          "566:   sseu->subslice_mask[0] = BIT(0);",
          "570:   sseu->subslice_mask[0] = BIT(0) | BIT(1);",
          "574:   sseu->subslice_mask[0] = BIT(0) | BIT(1);",
          "575:   sseu->subslice_mask[1] = BIT(0) | BIT(1);",
          "579:  sseu->max_slices = hweight8(sseu->slice_mask);",
          "580:  sseu->max_subslices = hweight8(sseu->subslice_mask[0]);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "580:   sseu->eu_per_subslice = 6;",
          "581:   break;",
          "582:  }",
          "588:  for (s = 0; s < sseu->max_slices; s++) {",
          "591:   for (ss = 0; ss < sseu->max_subslices; ss++) {",
          "592:    sseu_set_eus(sseu, s, ss,",
          "593:          (1UL << sseu->eu_per_subslice) - 1);",
          "",
          "[Removed Lines]",
          "584:  intel_sseu_set_info(sseu, hweight8(sseu->slice_mask),",
          "585:        hweight8(subslice_mask),",
          "586:        sseu->eu_per_subslice);",
          "589:   intel_sseu_set_subslices(sseu, s, subslice_mask);",
          "",
          "[Added Lines]",
          "598:  sseu->max_eus_per_subslice = sseu->eu_per_subslice;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8fd3722207f154b53c80eee2cf4977c3fc25a92",
      "candidate_info": {
        "commit_hash": "d8fd3722207f154b53c80eee2cf4977c3fc25a92",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d8fd3722207f154b53c80eee2cf4977c3fc25a92",
        "files": [
          "drivers/gpu/drm/drm_dp_mst_topology.c"
        ],
        "message": "drm/mst: Fix MST sideband up-reply failure handling\n\nFix the breakage resulting in the stacktrace below, due to tx queue\nbeing full when trying to send an up-reply. txmsg->seqno is -1 in this\ncase leading to a corruption of the mstb object by\n\n\ttxmsg->dst->tx_slots[txmsg->seqno] = NULL;\n\nin process_single_up_tx_qlock().\n\n[  +0,005162] [drm:process_single_tx_qlock [drm_kms_helper]] set_hdr_from_dst_qlock: failed to find slot\n[  +0,000015] [drm:drm_dp_send_up_ack_reply.constprop.19 [drm_kms_helper]] failed to send msg in q -11\n[  +0,000939] BUG: kernel NULL pointer dereference, address: 00000000000005a0\n[  +0,006982] #PF: supervisor write access in kernel mode\n[  +0,005223] #PF: error_code(0x0002) - not-present page\n[  +0,005135] PGD 0 P4D 0\n[  +0,002581] Oops: 0002 [#1] PREEMPT SMP NOPTI\n[  +0,004359] CPU: 1 PID: 1200 Comm: kworker/u16:3 Tainted: G     U            5.2.0-rc1+ #410\n[  +0,008433] Hardware name: Intel Corporation Ice Lake Client Platform/IceLake U DDR4 SODIMM PD RVP, BIOS ICLSFWR1.R00.3175.A00.1904261428 04/26/2019\n[  +0,013323] Workqueue: i915-dp i915_digport_work_func [i915]\n[  +0,005676] RIP: 0010:queue_work_on+0x19/0x70\n[  +0,004372] Code: ff ff ff 0f 1f 40 00 66 2e 0f 1f 84 00 00 00 00 00 41 56 49 89 f6 41 55 41 89 fd 41 54 55 53 48 89 d3 9c 5d fa e8 e7 81 0c 00 <f0> 48 0f ba 2b 00 73 31 45 31 e4 f7 c5 00 02 00 00 74 13 e8 cf 7f\n[  +0,018750] RSP: 0018:ffffc900007dfc50 EFLAGS: 00010006\n[  +0,005222] RAX: 0000000000000046 RBX: 00000000000005a0 RCX: 0000000000000001\n[  +0,007133] RDX: 000000000001b608 RSI: 0000000000000000 RDI: ffffffff82121972\n[  +0,007129] RBP: 0000000000000202 R08: 0000000000000000 R09: 0000000000000001\n[  +0,007129] R10: 0000000000000000 R11: 0000000000000000 R12: ffff88847bfa5096\n[  +0,007131] R13: 0000000000000010 R14: ffff88849c08f3f8 R15: 0000000000000000\n[  +0,007128] FS:  0000000000000000(0000) GS:ffff88849dc80000(0000) knlGS:0000000000000000\n[  +0,008083] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  +0,005749] CR2: 00000000000005a0 CR3: 0000000005210006 CR4: 0000000000760ee0\n[  +0,007128] PKRU: 55555554\n[  +0,002722] Call Trace:\n[  +0,002458]  drm_dp_mst_handle_up_req+0x517/0x540 [drm_kms_helper]\n[  +0,006197]  ? drm_dp_mst_hpd_irq+0x5b/0x9c0 [drm_kms_helper]\n[  +0,005764]  drm_dp_mst_hpd_irq+0x5b/0x9c0 [drm_kms_helper]\n[  +0,005623]  ? intel_dp_hpd_pulse+0x205/0x370 [i915]\n[  +0,005018]  intel_dp_hpd_pulse+0x205/0x370 [i915]\n[  +0,004836]  i915_digport_work_func+0xbb/0x140 [i915]\n[  +0,005108]  process_one_work+0x245/0x610\n[  +0,004027]  worker_thread+0x37/0x380\n[  +0,003684]  ? process_one_work+0x610/0x610\n[  +0,004184]  kthread+0x119/0x130\n[  +0,003240]  ? kthread_park+0x80/0x80\n[  +0,003668]  ret_from_fork+0x24/0x50\n\nCc: Lyude Paul <lyude@redhat.com>\nCc: Dave Airlie <airlied@redhat.com>\nSigned-off-by: Imre Deak <imre.deak@intel.com>\nReviewed-by: Lyude Paul <lyude@redhat.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20190523212433.9058-1-imre.deak@intel.com",
        "before_after_code_files": [
          "drivers/gpu/drm/drm_dp_mst_topology.c||drivers/gpu/drm/drm_dp_mst_topology.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/drm_dp_mst_topology.c||drivers/gpu/drm/drm_dp_mst_topology.c": [
          "File: drivers/gpu/drm/drm_dp_mst_topology.c -> drivers/gpu/drm/drm_dp_mst_topology.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1996:  if (ret != 1)",
          "1997:   DRM_DEBUG_KMS(\"failed to send msg in q %d\\n\", ret);",
          "2000: }",
          "2002: static void drm_dp_queue_down_tx(struct drm_dp_mst_topology_mgr *mgr,",
          "",
          "[Removed Lines]",
          "1999:  txmsg->dst->tx_slots[txmsg->seqno] = NULL;",
          "",
          "[Added Lines]",
          "1999:  if (txmsg->seqno != -1) {",
          "2000:   WARN_ON((unsigned int)txmsg->seqno >",
          "2001:    ARRAY_SIZE(txmsg->dst->tx_slots));",
          "2002:   txmsg->dst->tx_slots[txmsg->seqno] = NULL;",
          "2003:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06989c799f04810f6876900d4760c0edda369cf7",
      "candidate_info": {
        "commit_hash": "06989c799f04810f6876900d4760c0edda369cf7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/06989c799f04810f6876900d4760c0edda369cf7",
        "files": [
          "fs/btrfs/tree-log.c"
        ],
        "message": "Btrfs: fix race updating log root item during fsync\n\nWhen syncing the log, the final phase of a fsync operation, we need to\neither create a log root's item or update the existing item in the log\ntree of log roots, and that depends on the current value of the log\nroot's log_transid - if it's 1 we need to create the log root item,\notherwise it must exist already and we update it. Since there is no\nsynchronization between updating the log_transid and checking it for\ndeciding whether the log root's item needs to be created or updated, we\nend up with a tiny race window that results in attempts to update the\nitem to fail because the item was not yet created:\n\n              CPU 1                                    CPU 2\n\n  btrfs_sync_log()\n\n    lock root->log_mutex\n\n    set log root's log_transid to 1\n\n    unlock root->log_mutex\n\n                                               btrfs_sync_log()\n\n                                                 lock root->log_mutex\n\n                                                 sets log root's\n                                                 log_transid to 2\n\n                                                 unlock root->log_mutex\n\n    update_log_root()\n\n      sees log root's log_transid\n      with a value of 2\n\n        calls btrfs_update_root(),\n        which fails with -EUCLEAN\n        and causes transaction abort\n\nUntil recently the race lead to a BUG_ON at btrfs_update_root(), but after\nthe recent commit 7ac1e464c4d47 (\"btrfs: Don't panic when we can't find a\nroot key\") we just abort the current transaction.\n\nA sample trace of the BUG_ON() on a SLE12 kernel:\n\n  ------------[ cut here ]------------\n  kernel BUG at ../fs/btrfs/root-tree.c:157!\n  Oops: Exception in kernel mode, sig: 5 [#1]\n  SMP NR_CPUS=2048 NUMA pSeries\n  (...)\n  Supported: Yes, External\n  CPU: 78 PID: 76303 Comm: rtas_errd Tainted: G                 X 4.4.156-94.57-default #1\n  task: c00000ffa906d010 ti: c00000ff42b08000 task.ti: c00000ff42b08000\n  NIP: d000000036ae5cdc LR: d000000036ae5cd8 CTR: 0000000000000000\n  REGS: c00000ff42b0b860 TRAP: 0700   Tainted: G                 X  (4.4.156-94.57-default)\n  MSR: 8000000002029033 <SF,VEC,EE,ME,IR,DR,RI,LE>  CR: 22444484  XER: 20000000\n  CFAR: d000000036aba66c SOFTE: 1\n  GPR00: d000000036ae5cd8 c00000ff42b0bae0 d000000036bda220 0000000000000054\n  GPR04: 0000000000000001 0000000000000000 c00007ffff8d37c8 0000000000000000\n  GPR08: c000000000e19c00 0000000000000000 0000000000000000 3736343438312079\n  GPR12: 3930373337303434 c000000007a3a800 00000000007fffff 0000000000000023\n  GPR16: c00000ffa9d26028 c00000ffa9d261f8 0000000000000010 c00000ffa9d2ab28\n  GPR20: c00000ff42b0bc48 0000000000000001 c00000ff9f0d9888 0000000000000001\n  GPR24: c00000ffa9d26000 c00000ffa9d261e8 c00000ffa9d2a800 c00000ff9f0d9888\n  GPR28: c00000ffa9d26028 c00000ffa9d2aa98 0000000000000001 c00000ffa98f5b20\n  NIP [d000000036ae5cdc] btrfs_update_root+0x25c/0x4e0 [btrfs]\n  LR [d000000036ae5cd8] btrfs_update_root+0x258/0x4e0 [btrfs]\n  Call Trace:\n  [c00000ff42b0bae0] [d000000036ae5cd8] btrfs_update_root+0x258/0x4e0 [btrfs] (unreliable)\n  [c00000ff42b0bba0] [d000000036b53610] btrfs_sync_log+0x2d0/0xc60 [btrfs]\n  [c00000ff42b0bce0] [d000000036b1785c] btrfs_sync_file+0x44c/0x4e0 [btrfs]\n  [c00000ff42b0bd80] [c00000000032e300] vfs_fsync_range+0x70/0x120\n  [c00000ff42b0bdd0] [c00000000032e44c] do_fsync+0x5c/0xb0\n  [c00000ff42b0be10] [c00000000032e8dc] SyS_fdatasync+0x2c/0x40\n  [c00000ff42b0be30] [c000000000009488] system_call+0x3c/0x100\n  Instruction dump:\n  7f43d378 4bffebb9 60000000 88d90008 3d220000 e8b90000 3b390009 e87a01f0\n  e8898e08 e8f90000 4bfd48e5 60000000 <0fe00000> e95b0060 39200004 394a0ea0\n  ---[ end trace 8f2dc8f919cabab8 ]---\n\nSo fix this by doing the check of log_transid and updating or creating the\nlog root's item while holding the root's log_mutex.\n\nFixes: 7237f1833601d (\"Btrfs: fix tree logs parallel sync\")\nCC: stable@vger.kernel.org # 4.4+\nSigned-off-by: Filipe Manana <fdmanana@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
        "before_after_code_files": [
          "fs/btrfs/tree-log.c||fs/btrfs/tree-log.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/btrfs/tree-log.c||fs/btrfs/tree-log.c": [
          "File: fs/btrfs/tree-log.c -> fs/btrfs/tree-log.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3109:  root->log_transid++;",
          "3110:  log->log_transid = root->log_transid;",
          "3111:  root->log_start_pid = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3117:  ret = update_log_root(trans, log);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3129:  mutex_unlock(&log_root_tree->log_mutex);",
          "3133:  mutex_lock(&log_root_tree->log_mutex);",
          "3134:  if (atomic_dec_and_test(&log_root_tree->log_writers)) {",
          "",
          "[Removed Lines]",
          "3131:  ret = update_log_root(trans, log);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c0f693c6effbc3f42f77a9e81209af9af20910c",
      "candidate_info": {
        "commit_hash": "8c0f693c6effbc3f42f77a9e81209af9af20910c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8c0f693c6effbc3f42f77a9e81209af9af20910c",
        "files": [
          "drivers/leds/led-core.c",
          "drivers/leds/trigger/ledtrig-timer.c"
        ],
        "message": "leds: avoid flush_work in atomic context\n\nIt turns out that various triggers use led_blink_setup() from atomic\ncontext, so we can't do a flush_work there. Flush is still needed for\nslow LEDs, but we can move it to sysfs code where it is safe.\n\n    WARNING: inconsistent lock state\n    5.2.0-rc1 #1 Tainted: G        W\n    --------------------------------\n    inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.\n    swapper/1/0 [HC0[0]:SC1[1]:HE1:SE0] takes:\n    000000006e30541b\n    ((work_completion)(&led_cdev->set_brightness_work)){+.?.}, at:\n    +__flush_work+0x3b/0x38a\n    {SOFTIRQ-ON-W} state was registered at:\n      lock_acquire+0x146/0x1a1\n     __flush_work+0x5b/0x38a\n     flush_work+0xb/0xd\n     led_blink_setup+0x1e/0xd3\n     led_blink_set+0x3f/0x44\n     tpt_trig_timer+0xdb/0x106\n     ieee80211_mod_tpt_led_trig+0xed/0x112\n\nFixes: 0db37915d912 (\"leds: avoid races with workqueue\")\nSigned-off-by: Pavel Machek <pavel@ucw.cz>\nTested-by: Hugh Dickins <hughd@google.com>\nSigned-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>",
        "before_after_code_files": [
          "drivers/leds/led-core.c||drivers/leds/led-core.c",
          "drivers/leds/trigger/ledtrig-timer.c||drivers/leds/trigger/ledtrig-timer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/leds/led-core.c||drivers/leds/led-core.c": [
          "File: drivers/leds/led-core.c -> drivers/leds/led-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:        unsigned long *delay_on,",
          "165:        unsigned long *delay_off)",
          "166: {",
          "172:  if (!test_bit(LED_BLINK_ONESHOT, &led_cdev->work_flags) &&",
          "173:      led_cdev->blink_set &&",
          "174:      !led_cdev->blink_set(led_cdev, delay_on, delay_off))",
          "",
          "[Removed Lines]",
          "171:  flush_work(&led_cdev->set_brightness_work);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "drivers/leds/trigger/ledtrig-timer.c||drivers/leds/trigger/ledtrig-timer.c": [
          "File: drivers/leds/trigger/ledtrig-timer.c -> drivers/leds/trigger/ledtrig-timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:   led_cdev->flags &= ~LED_INIT_DEFAULT_TRIGGER;",
          "114:  }",
          "116:  led_blink_set(led_cdev, &led_cdev->blink_delay_on,",
          "117:         &led_cdev->blink_delay_off);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:  flush_work(&led_cdev->set_brightness_work);",
          "",
          "---------------"
        ]
      }
    }
  ]
}