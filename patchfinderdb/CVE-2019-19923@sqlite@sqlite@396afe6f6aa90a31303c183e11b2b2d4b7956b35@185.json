{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "298f45c6411c100bcbbc8fedc09cc02fc0ce7660",
      "candidate_info": {
        "commit_hash": "298f45c6411c100bcbbc8fedc09cc02fc0ce7660",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/298f45c6411c100bcbbc8fedc09cc02fc0ce7660",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Small performance improvement and size reduction for pageFindSlot() - the routine in btree.c that locates a free slot for a cell on a btree page.\n\nFossilOrigin-Name: 1969372ac72d25cc642a0268f4bb0ae4b59f2dca568c119ef61b67183b3a8bd9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d212957079a2caa30f3c9d80f43464781bc9634c2b5181a5814efbddae31711",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1535: static u8 *pageFindSlot(MemPage *pPg, int nByte, int *pRc){",
          "1544:   assert( pc>0 );",
          "",
          "[Removed Lines]",
          "1536:   const int hdr = pPg->hdrOffset;",
          "1537:   u8 * const aData = pPg->aData;",
          "1538:   int iAddr = hdr + 1;",
          "1539:   int pc = get2byte(&aData[iAddr]);",
          "1540:   int x;",
          "1541:   int usableSize = pPg->pBt->usableSize;",
          "1545:   while( pc<=usableSize-4 ){",
          "",
          "[Added Lines]",
          "1545:   while( pc<=maxPC ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1550:     if( (x = size - nByte)>=0 ){",
          "1551:       testcase( x==4 );",
          "1552:       testcase( x==3 );",
          "1559:         if( aData[hdr+7]>57 ) return 0;",
          "",
          "[Removed Lines]",
          "1553:       if( size+pc > usableSize ){",
          "1555:         return 0;",
          "1556:       }else if( x<4 ){",
          "",
          "[Added Lines]",
          "1553:       if( x<4 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1563:         memcpy(&aData[iAddr], &aData[pc], 2);",
          "1564:         aData[hdr+7] += (u8)x;",
          "1565:       }else{",
          "1568:         put2byte(&aData[pc+2], x);",
          "1569:       }",
          "1570:       return &aData[pc + x];",
          "1571:     }",
          "1572:     iAddr = pc;",
          "1573:     pc = get2byte(&aData[pc]);",
          "1575:   }",
          "1578:   }",
          "1580:   return 0;",
          "1581: }",
          "",
          "[Removed Lines]",
          "1574:     if( pc<iAddr+size ) break;",
          "1576:   if( pc ){",
          "",
          "[Added Lines]",
          "1562:       }else if( x+pc > maxPC ){",
          "1565:         return 0;",
          "1575:     if( pc<iAddr+size ){",
          "1576:       if( pc ){",
          "1579:       }",
          "1580:       return 0;",
          "1581:     }",
          "1583:   if( pc>maxPC+nByte-4 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29e9af88484b2266189d694faa3eb3e69f0a7190",
      "candidate_info": {
        "commit_hash": "29e9af88484b2266189d694faa3eb3e69f0a7190",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29e9af88484b2266189d694faa3eb3e69f0a7190",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Change the way a comparison used to detect corrupt databases in fts3 is done to avoid potential pointer overflow in 32-bit builds.\n\nFossilOrigin-Name: 95a9a39ff784b960b62dd6298e722a620ba3f9c8b76839a49bbef35d7bc84a8e",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1413:    || (pReader->nPopulate==0 && pReader->aDoclist[pReader->nDoclist-1])",
          "1414:   ){",
          "1415:     return FTS_CORRUPT_VTAB;",
          "",
          "[Removed Lines]",
          "1412:   if( (&pReader->aNode[pReader->nNode] - pReader->aDoclist)<pReader->nDoclist",
          "",
          "[Added Lines]",
          "1412:   if( pReader->nDoclist-(pReader->aDoclist-pReader->aNode) > pReader->nNode",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b6494b1509f0d0189f98aa34c990eee99c775ff57826e79b2c5b0a12b4c97ad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b40af49d735f7ea8111bf37dab5c3f041e549290",
      "candidate_info": {
        "commit_hash": "b40af49d735f7ea8111bf37dab5c3f041e549290",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b40af49d735f7ea8111bf37dab5c3f041e549290",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/dbdata.test"
        ],
        "message": "Enhance the \".recover\" command. Fix a problem with overflow pages in dbdata.c.\n\nFossilOrigin-Name: f193ca587f9e4f925f4f2343b0b07053bd6f93dd87fc6f8f41cf4479e90cf562",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/dbdata.test||test/dbdata.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:             memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);",
          "507:             nRem -= nCopy;",
          "509:             sqlite3_free(aOvfl);",
          "510:           }",
          "511:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:             pgnoOvfl = get_uint32(aOvfl);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7461d2e120f2149315ddac2676d51d7445bcdb8e97543effd9c30603517ef9da",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6073: struct RecoverTable {",
          "6079: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6078:   int iPk;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6085:   if( pTab ){",
          "6086:     sqlite3_free(pTab->zName);",
          "6087:     sqlite3_free(pTab->zQuoted);",
          "6089:     if( pTab->azlCol ){",
          "6090:       int i;",
          "6091:       for(i=0; i<pTab->nCol; i++){",
          "",
          "[Removed Lines]",
          "6088:     sqlite3_free(pTab->zCreate);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6097:   }",
          "6098: }",
          "6100: static RecoverTable *recoverNewTable(",
          "6101:   ShellState *pState,",
          "6102:   int *pRc,",
          "6103:   int iRoot,",
          "6104:   int nCol",
          "6105: ){",
          "6106:   RecoverTable *pRet = 0;",
          "6108:   pRet = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));",
          "6110:     sqlite3_stmt *pStmt = 0;",
          "6111:     pRet->zName = shellMPrintf(pRc, \"orphan_%d_%d\", nCol, iRoot);",
          "6112:     pRet->zQuoted = shellMPrintf(pRc, \"%Q\", pRet->zName);",
          "6113:     pRet->azlCol = (char**)shellMalloc(pRc, sizeof(char*) * nCol);",
          "",
          "[Removed Lines]",
          "6109:   if( pRet ){",
          "",
          "[Added Lines]",
          "6099: static void recoverOldTable(",
          "6101:   RecoverTable *pTab,",
          "6104:   int bIntkey,",
          "6105:   int nCol",
          "6106: ){",
          "6108:   int rc = *pRc;",
          "6110:   if( rc==SQLITE_OK ){",
          "6111:     int nSqlCol = 0;",
          "6112:     int bSqlIntkey = 0;",
          "6113:     sqlite3_stmt *pStmt = 0;",
          "6115:     rc = sqlite3_open(\"\", &dbtmp);",
          "6116:     if( rc==SQLITE_OK ){",
          "6117:       rc = sqlite3_exec(dbtmp, zSql, 0, 0, 0);",
          "6118:       if( rc==SQLITE_ERROR ){",
          "6119:         rc = SQLITE_OK;",
          "6120:         goto finished;",
          "6121:       }",
          "6122:     }",
          "6123:     shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6124:         \"SELECT count(*) FROM pragma_table_info(%Q)\", zName",
          "6125:     );",
          "6126:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6127:       nSqlCol = sqlite3_column_int(pStmt, 0);",
          "6128:     }",
          "6129:     shellFinalize(&rc, pStmt);",
          "6131:     if( rc!=SQLITE_OK || nSqlCol<nCol ){",
          "6132:       goto finished;",
          "6133:     }",
          "6135:     shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6136:       \"SELECT (\"",
          "6137:       \"  SELECT substr(data,1,1)==X'0D' FROM sqlite_dbpage WHERE pgno=rootpage\"",
          "6138:       \") FROM sqlite_master WHERE name = %Q\", zName",
          "6139:     );",
          "6140:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6141:       bSqlIntkey = sqlite3_column_int(pStmt, 0);",
          "6142:     }",
          "6143:     shellFinalize(&rc, pStmt);",
          "6145:     if( bIntkey==bSqlIntkey ){",
          "6146:       const char *zPk = \"_rowid_\";",
          "6147:       sqlite3_stmt *pPkFinder = 0;",
          "6149:       shellPreparePrintf(dbtmp, &rc, &pPkFinder,",
          "6150:           \"SELECT cid, name FROM pragma_table_info(%Q) \"",
          "6151:           \"  WHERE pk=1 AND type='integer' COLLATE nocase\"",
          "6152:           \"  AND NOT EXISTS (SELECT cid FROM pragma_table_info(%Q) WHERE pk=2)\",",
          "6153:           zName, zName",
          "6154:       );",
          "6155:       if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPkFinder) ){",
          "6156:         pTab->iPk = sqlite3_column_int(pPkFinder, 0);",
          "6157:         zPk = (const char*)sqlite3_column_text(pPkFinder, 1);",
          "6158:       }",
          "6160:       pTab->zName = shellMPrintf(&rc, \"%s\", zName);",
          "6161:       pTab->zQuoted = shellMPrintf(&rc, \"%Q\", pTab->zName);",
          "6162:       pTab->azlCol = (char**)shellMalloc(&rc, sizeof(char*) * nSqlCol);",
          "6163:       pTab->nCol = nSqlCol;",
          "6165:       if( nSqlCol==1 && pTab->iPk==0 ){",
          "6166:         pTab->azlCol[0] = shellMPrintf(&rc, \"%Q\", zPk);",
          "6167:       }else{",
          "6168:         shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6169:           \"SELECT -1+row_number()          OVER (ORDER BY cid),\"",
          "6170:           \"    %Q||%Q||group_concat(name, ', ') FILTER (WHERE cid!=%d) \"",
          "6171:           \"           OVER (ORDER BY cid) \"",
          "6172:           \"FROM pragma_table_info(%Q)\",",
          "6173:           (bIntkey ? zPk : \"\"), (bIntkey ? \", \" : \"\"),",
          "6174:           pTab->iPk, zName",
          "6175:         );",
          "6176:         while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6177:           int idx = sqlite3_column_int(pStmt, 0);",
          "6178:           const char *zText = (const char*)sqlite3_column_text(pStmt, 1);",
          "6179:           pTab->azlCol[idx] = shellMPrintf(&rc, \"%s\", zText);",
          "6180:         }",
          "6181:         shellFinalize(&rc, pStmt);",
          "6182:       }",
          "6183:       shellFinalize(&rc, pPkFinder);",
          "6184:     }",
          "6185:   }",
          "6187:  finished:",
          "6188:   sqlite3_close(dbtmp);",
          "6190: }",
          "6196:   int bIntkey,",
          "6199:   sqlite3_stmt *pStmt = 0;",
          "6201:   int bNoop = 0;",
          "6202:   const char *zSql = 0;",
          "6203:   const char *zName = 0;",
          "6206:   if( pRet ) pRet->iPk = -2;",
          "6209:   shellPreparePrintf(pState->db, pRc, &pStmt,",
          "6210:       \"SELECT type, name, sql FROM recovery.schema WHERE rootpage=%d\", iRoot",
          "6211:   );",
          "6212:   while( *pRc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6213:     const char *zType = (const char*)sqlite3_column_text(pStmt, 0);",
          "6214:     if( bIntkey==0 && sqlite3_stricmp(zType, \"index\")==0 ){",
          "6215:       bNoop = 1;",
          "6216:       break;",
          "6217:     }",
          "6218:     if( sqlite3_stricmp(zType, \"table\")==0 ){",
          "6219:       zName = (const char*)sqlite3_column_text(pStmt, 1);",
          "6220:       zSql = (const char*)sqlite3_column_text(pStmt, 2);",
          "6221:       recoverOldTable(pRc, pRet, zName, zSql, bIntkey, nCol);",
          "6222:       break;",
          "6223:     }",
          "6224:   }",
          "6225:   shellFinalize(pRc, pStmt);",
          "6226:   if( bNoop ){",
          "6227:     sqlite3_free(pRet);",
          "6228:     return 0;",
          "6229:   }",
          "6231:   if( pRet && pRet->zName==0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6117:       \"WITH s(i) AS (\"",
          "6118:       \"  SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<%d\"",
          "6119:       \")\"",
          "6122:     );",
          "6123:     while( *pRc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6124:       int idx = sqlite3_column_int(pStmt, 0);",
          "",
          "[Removed Lines]",
          "6120:       \"SELECT i-1, group_concat('c' || i, ', ') OVER (ORDER BY i) FROM s\",",
          "6121:       nCol",
          "",
          "[Added Lines]",
          "6243:       \"SELECT i-1, %Q || group_concat('c' || i, ', ') OVER (ORDER BY i) FROM s\",",
          "6244:       nCol, (bIntkey ? \"id, \" : \"\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6127:     }",
          "6128:     shellFinalize(pRc, pStmt);",
          "6131:         pRet->zName, pRet->azlCol[nCol-1]",
          "6133:   }",
          "6135:   if( *pRc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "6130:     pRet->zCreate = shellMPrintf(pRc, \"CREATE TABLE %Q (id, %s)\",",
          "6132:     );",
          "",
          "[Added Lines]",
          "6253:     if( *pRc==SQLITE_OK ){",
          "6254:       char *zCreate = shellMPrintf(pRc, \"CREATE TABLE %Q (%s)\",",
          "6256:       );",
          "6257:       if( zCreate ){",
          "6258:         raw_printf(pState->out, \"%s;\\n\", zCreate);",
          "6259:         sqlite3_free(zCreate);",
          "6260:       }",
          "6261:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6148: static int recoverDatabaseCmd(ShellState *pState){",
          "6150:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "6149:   const char *zSql;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "6176:     \"CREATE TABLE recovery.map(pgno INTEGER PRIMARY KEY, maxlen INT, root INT);\"",
          "",
          "[Added Lines]",
          "6304:     \"CREATE TABLE recovery.map(\"",
          "6305:       \"pgno INTEGER PRIMARY KEY, maxlen INT, intkey, root INT\"",
          "6306:     \");\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6182:     \"  SELECT page_count, max(field+1) \"",
          "6183:     \"      FROM pragma_page_count, sqlite_dbdata WHERE pgno=page_count\"",
          "6184:     \"    UNION ALL\"",
          "6187:     \")\"",
          "6189:     \"    WITH p(orig, pgno, parent) AS (\"",
          "6190:     \"      SELECT 0, i, (SELECT pgno FROM recovery.dbptr WHERE child=i)\"",
          "6191:     \"        UNION ALL\"",
          "",
          "[Removed Lines]",
          "6185:     \"  SELECT * FROM (SELECT i-1, max(field+1)\"",
          "6186:     \"      FROM pages, sqlite_dbdata WHERE pgno=i-1 AND i>=2)\"",
          "6188:     \"INSERT INTO recovery.map(pgno, maxlen, root) SELECT i, maxlen, (\"",
          "",
          "[Added Lines]",
          "6315:     \"  SELECT i-1, (\"",
          "6316:     \"    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=i-1\"",
          "6317:     \"  ) FROM pages WHERE i>=2\"",
          "6319:     \"INSERT INTO recovery.map(pgno, maxlen, intkey, root) \"",
          "6320:     \"  SELECT i, maxlen, NULL, (\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6195:     \"    SELECT pgno FROM p WHERE (parent IS NULL OR pgno = orig)\"",
          "6196:     \") \"",
          "6197:     \"FROM pages WHERE maxlen > 0;\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6330:     \"UPDATE recovery.map AS o SET intkey = (\"",
          "6331:     \"  SELECT substr(data, 1, 1)==X'0D' FROM sqlite_dbpage WHERE pgno=o.pgno\"",
          "6332:     \");\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6221:   return rc;",
          "6222: #endif",
          "6227:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6228:     int iRoot = sqlite3_column_int(pLoop, 0);",
          "6230:     RecoverTable *pTab;",
          "6233:     if( pTab ){",
          "6234:       sqlite3_stmt *pData = 0;",
          "6236:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6237:         \"SELECT max(field), group_concat(quote(value), ', ') \"",
          "6238:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "6239:         \"  SELECT pgno FROM recovery.map WHERE root=%d\"",
          "6240:         \")\"",
          "6242:       );",
          "6243:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pData) ){",
          "6244:         int iMax = sqlite3_column_int(pData, 0);",
          "6245:         const char *zVal = (const char*)sqlite3_column_text(pData, 1);",
          "6254:       }",
          "6255:       shellFinalize(&rc, pData);",
          "6256:     }",
          "",
          "[Removed Lines]",
          "6225:   zSql = \"SELECT root,max(maxlen) FROM recovery.map WHERE root>1 GROUP BY root\";",
          "6226:   shellPrepare(pState->db, &rc, zSql, &pLoop);",
          "6229:     int nCol = sqlite3_column_int(pLoop, 1);",
          "6232:     pTab = recoverNewTable(pState, &rc, iRoot, nCol);",
          "6235:       raw_printf(pState->out, \"%s;\\n\", pTab->zCreate);",
          "6241:         \"GROUP BY pgno, cell;\", iRoot",
          "6246:         if( iMax+1==pTab->nCol ){",
          "6247:           raw_printf(pState->out, \"INSERT INTO %s VALUES( %s );\\n\",",
          "6248:               pTab->zQuoted, zVal);",
          "6249:         }else{",
          "6250:           raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6251:               pTab->zQuoted, pTab->azlCol[iMax], zVal",
          "6252:           );",
          "6253:         }",
          "",
          "[Added Lines]",
          "6361:   if( rc==SQLITE_OK ){",
          "6362:     sqlite3_stmt *pStmt = 0;",
          "6363:     raw_printf(pState->out, \"BEGIN;\\n\");",
          "6364:     shellPrepare(pState->db, &rc,",
          "6365:         \"SELECT sql FROM recovery.schema \"",
          "6366:         \"WHERE type='table' \"",
          "6367:         \"  AND length(sql)>6\"",
          "6368:         \"  AND sql LIKE 'create table%'\"",
          "6369:         \"  AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'\", &pStmt",
          "6370:     );",
          "6371:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6372:       const char *zCreateTable = (const char*)sqlite3_column_text(pStmt, 0);",
          "6373:       raw_printf(pState->out, \"%s;\\n\", zCreateTable);",
          "6374:     }",
          "6375:     shellFinalize(&rc, pStmt);",
          "6376:   }",
          "6379:   shellPrepare(pState->db, &rc,",
          "6380:       \"SELECT root, intkey, max(maxlen) FROM recovery.map\"",
          "6381:       \" WHERE root>1 GROUP BY root, intkey\", &pLoop",
          "6382:   );",
          "6385:     int bIntkey = sqlite3_column_int(pLoop, 1);",
          "6386:     int nCol = sqlite3_column_int(pLoop, 2);",
          "6389:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol);",
          "6397:         \" AND field!=%d \"",
          "6398:         \"GROUP BY pgno, cell;\", iRoot, pTab->iPk",
          "6403:         raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6404:             pTab->zQuoted, pTab->azlCol[iMax>0?iMax:0], zVal",
          "6405:         );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6258:   }",
          "6259:   shellFinalize(&rc, pLoop);",
          "6261:   sqlite3_exec(pState->db, \"DETACH recovery\", 0, 0, 0);",
          "6262:   return rc;",
          "6263: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6413:   if( rc==SQLITE_OK ){",
          "6414:     raw_printf(pState->out, \"COMMIT;\\n\");",
          "6415:   }",
          "",
          "---------------"
        ],
        "test/dbdata.test||test/dbdata.test": [
          "File: test/dbdata.test -> test/dbdata.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   SELECT value FROM sqlite_dbdata WHERE pgno=2 AND cell=2 AND field=1;",
          "68: } $big",
          "70: #-------------------------------------------------------------------------",
          "71: reset_db",
          "72: db enable_load_extension 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: do_execsql_test 1.4 {",
          "71:   DELETE FROM t1;",
          "72:   INSERT INTO t1 VALUES(NULL, randomblob(5050));",
          "73: }",
          "74: do_test 1.5 {",
          "75:   execsql {",
          "76:     SELECT quote(value) FROM sqlite_dbdata WHERE pgno=2 AND cell=0 AND field=1;",
          "77:   }",
          "78: } [db one {SELECT quote(b) FROM t1}]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57494adcc52b3b9d58aa6f8d1076b0444832081e",
      "candidate_info": {
        "commit_hash": "57494adcc52b3b9d58aa6f8d1076b0444832081e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57494adcc52b3b9d58aa6f8d1076b0444832081e",
        "files": [
          "Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Attempt to detect when the MSVC linker requires the /MACHINE argument.\n\nFossilOrigin-Name: 3e355846217785c30f518d31a5541172c4213c0d8559c3f8638a047cd745c98e",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1089: LTLINKOPTS = /NOLOGO /MACHINE:$(PLATFORM)",
          "1090: LTLIBOPTS = /NOLOGO /MACHINE:$(PLATFORM)",
          "1091: !ELSE",
          "1092: LTLINKOPTS = /NOLOGO",
          "1093: LTLIBOPTS = /NOLOGO",
          "1094: !ENDIF",
          "1096: # When compiling for use in the WinRT environment, the following",
          "1097: # linker option must be used to mark the executable as runnable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1092: !IFDEF VISUALSTUDIOVERSION",
          "1093: !IF \"$(VISUALSTUDIOVERSION)\">=\"12.0\"",
          "1094: LTLINKOPTS = /NOLOGO /MACHINE:x86",
          "1095: LTLIBOPTS = /NOLOGO /MACHINE:x86",
          "1096: !ELSE",
          "1097: LTLINKOPTS = /NOLOGO",
          "1098: LTLIBOPTS = /NOLOGO",
          "1099: !ENDIF",
          "1100: !ELSE",
          "1104: !ENDIF",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ecbae90aef63ed6d07d474416900db36ff6dd9c2ed1bbb5f4d883b6838156be1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3242c69c9140d54d98b110b72055e17fd6ede5e0",
      "candidate_info": {
        "commit_hash": "3242c69c9140d54d98b110b72055e17fd6ede5e0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3242c69c9140d54d98b110b72055e17fd6ede5e0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeapi.c",
          "src/vdbeaux.c",
          "src/vdbemem.c"
        ],
        "message": "New testcase macros to ensure that MEM_IntReal is fully tested.\n\nFossilOrigin-Name: 8b8ef445ccccc148af2cda5975986af0d134352fe16283f65d0f8a91c9ffa932",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c9838731325e0ca73bd8784c10c74ae043fed7861e6de269fd90e29fa4a19955",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:       if( (pRec->flags&(MEM_Real|MEM_Int|MEM_IntReal)) ){",
          "356:         sqlite3VdbeMemStringify(pRec, enc, 1);",
          "357:       }",
          "358:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:         testcase( pRec->flags & MEM_Int );",
          "357:         testcase( pRec->flags & MEM_Real );",
          "358:         testcase( pRec->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "417: static u16 numericType(Mem *pMem){",
          "418:   if( pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal) ){",
          "419:     return pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal);",
          "420:   }",
          "421:   if( pMem->flags & (MEM_Str|MEM_Blob) ){",
          "422:     return computeNumericType(pMem);",
          "423:   }",
          "424:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "422:     testcase( pMem->flags & MEM_Int );",
          "423:     testcase( pMem->flags & MEM_Real );",
          "424:     testcase( pMem->flags & MEM_IntReal );",
          "428:     testcase( pMem->flags & MEM_Str );",
          "429:     testcase( pMem->flags & MEM_Blob );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1803:   pIn1 = &aMem[pOp->p1];",
          "1804:   if( pIn1->flags & (MEM_Int|MEM_IntReal) ){",
          "1805:     sqlite3VdbeMemRealify(pIn1);",
          "1806:   }",
          "1807:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1813:     testcase( pIn1->flags & MEM_Int );",
          "1814:     testcase( pIn1->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4382:   u64 iKey;",
          "4384:   pIn3 = &aMem[pOp->p3];",
          "4385:   if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4395:   testcase( pIn3->flags & MEM_Int );",
          "4396:   testcase( pIn3->flags & MEM_IntReal );",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1866:   }else if( p->pTab->aCol[iIdx].affinity==SQLITE_AFF_REAL ){",
          "1867:     if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "1868:       sqlite3VdbeMemRealify(pMem);",
          "1869:     }",
          "1870:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1868:       testcase( pMem->flags & MEM_Int );",
          "1869:       testcase( pMem->flags & MEM_IntReal );",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3437: #   define MAX_6BYTE ((((i64)0x00008000)<<32)-1)",
          "3438:     i64 i = pMem->u.i;",
          "3439:     u64 u;",
          "3440:     if( i<0 ){",
          "3441:       u = ~i;",
          "3442:     }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3440:     testcase( flags & MEM_Int );",
          "3441:     testcase( flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4114:   if( combined_flags&(MEM_Int|MEM_Real|MEM_IntReal) ){",
          "4115:     if( (f1 & f2 & (MEM_Int|MEM_IntReal))!=0 ){",
          "4116:       if( pMem1->u.i < pMem2->u.i ) return -1;",
          "4117:       if( pMem1->u.i > pMem2->u.i ) return +1;",
          "4118:       return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4117:     testcase( combined_flags & MEM_Int );",
          "4118:     testcase( combined_flags & MEM_Real );",
          "4119:     testcase( combined_flags & MEM_IntReal );",
          "4121:       testcase( f1 & f2 & MEM_Int );",
          "4122:       testcase( f1 & f2 & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4123:       return 0;",
          "4124:     }",
          "4125:     if( (f1&(MEM_Int|MEM_IntReal))!=0 ){",
          "4126:       if( (f2&MEM_Real)!=0 ){",
          "4127:         return sqlite3IntFloatCompare(pMem1->u.i, pMem2->u.r);",
          "4128:       }else if( (f2&(MEM_Int|MEM_IntReal))!=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4133:       testcase( f1 & MEM_Int );",
          "4134:       testcase( f1 & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4135:     }",
          "4136:     if( (f1&MEM_Real)!=0 ){",
          "4137:       if( (f2&(MEM_Int|MEM_IntReal))!=0 ){",
          "4138:         return -sqlite3IntFloatCompare(pMem2->u.i, pMem1->u.r);",
          "4139:       }else{",
          "4140:         return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4147:         testcase( f2 & MEM_Int );",
          "4148:         testcase( f2 & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4286:     if( pRhs->flags & (MEM_Int|MEM_IntReal) ){",
          "4287:       serial_type = aKey1[idx1];",
          "4288:       testcase( serial_type==12 );",
          "4289:       if( serial_type>=10 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4298:       testcase( pRhs->flags & MEM_Int );",
          "4299:       testcase( pRhs->flags & MEM_IntReal );",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "564:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "565:   flags = pMem->flags;",
          "566:   if( flags & (MEM_Int|MEM_IntReal) ){",
          "567:     return pMem->u.i;",
          "568:   }else if( flags & MEM_Real ){",
          "569:     return doubleToInt64(pMem->u.r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:     testcase( flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593:   if( pMem->flags & MEM_Real ){",
          "594:     return pMem->u.r;",
          "595:   }else if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "596:     return (double)pMem->u.i;",
          "597:   }else if( pMem->flags & (MEM_Str|MEM_Blob) ){",
          "598:     return memRealValue(pMem);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:     testcase( pMem->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "609: int sqlite3VdbeBooleanValue(Mem *pMem, int ifNull){",
          "610:   if( pMem->flags & (MEM_Int|MEM_IntReal) ) return pMem->u.i!=0;",
          "611:   if( pMem->flags & MEM_Null ) return ifNull;",
          "612:   return sqlite3VdbeRealValue(pMem)!=0.0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612:   testcase( pMem->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "690: int sqlite3VdbeMemNumerify(Mem *pMem){",
          "691:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))==0 ){",
          "692:     int rc;",
          "693:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "694:   testcase( pMem->flags & MEM_Int );",
          "695:   testcase( pMem->flags & MEM_Real );",
          "696:   testcase( pMem->flags & MEM_IntReal );",
          "697:   testcase( pMem->flags & MEM_Null );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1496:     }else{",
          "1497:       sqlite3ValueApplyAffinity(pVal, affinity, SQLITE_UTF8);",
          "1498:     }",
          "1500:     if( enc!=SQLITE_UTF8 ){",
          "1501:       rc = sqlite3VdbeChangeEncoding(pVal, enc);",
          "1502:     }",
          "",
          "[Removed Lines]",
          "1499:     if( pVal->flags & (MEM_Int|MEM_IntReal|MEM_Real) ) pVal->flags &= ~MEM_Str;",
          "",
          "[Added Lines]",
          "1506:     assert( (pVal->flags & MEM_IntReal)==0 );",
          "1507:     if( pVal->flags & (MEM_Int|MEM_IntReal|MEM_Real) ){",
          "1508:       testcase( pVal->flags & MEM_Int );",
          "1509:       testcase( pVal->flags & MEM_Real );",
          "1510:       pVal->flags &= ~MEM_Str;",
          "1511:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}