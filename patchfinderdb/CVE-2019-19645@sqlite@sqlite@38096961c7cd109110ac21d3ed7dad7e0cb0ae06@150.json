{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a5d0911546c0d41f142a33fc3622df7ef7d8a81d",
      "candidate_info": {
        "commit_hash": "a5d0911546c0d41f142a33fc3622df7ef7d8a81d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a5d0911546c0d41f142a33fc3622df7ef7d8a81d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/callback.c"
        ],
        "message": "Move the sqlite3LocateCollSeq(), sqlite3FindCollSeq(), and sqlite3GetCollSeq() routines so that they are all beside one another in the callback.c source file.  No logic changes.\n\nFossilOrigin-Name: 9ff80a9bf8fee776e2f282d0597215b77d48093ebc71d047ad1457da0582ddbc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/callback.c||src/callback.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 90f7c477354d67d22d5eb0da22dac579f384ab44743fdc19887220e32203ebc2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:   }",
          "1521: }",
          "",
          "[Removed Lines]",
          "1543: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){",
          "1544:   sqlite3 *db = pParse->db;",
          "1545:   u8 enc = ENC(db);",
          "1546:   u8 initbusy = db->init.busy;",
          "1547:   CollSeq *pColl;",
          "1549:   pColl = sqlite3FindCollSeq(db, enc, zName, initbusy);",
          "1550:   if( !initbusy && (!pColl || !pColl->xCmp) ){",
          "1551:     pColl = sqlite3GetCollSeq(pParse, enc, pColl, zName);",
          "1552:   }",
          "1554:   return pColl;",
          "1555: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/callback.c||src/callback.c": [
          "File: src/callback.c -> src/callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   return SQLITE_ERROR;",
          "66: }",
          "",
          "[Removed Lines]",
          "82: CollSeq *sqlite3GetCollSeq(",
          "87: ){",
          "88:   CollSeq *p;",
          "89:   sqlite3 *db = pParse->db;",
          "91:   p = pColl;",
          "92:   if( !p ){",
          "93:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "94:   }",
          "95:   if( !p || !p->xCmp ){",
          "99:     callCollNeeded(db, enc, zName);",
          "100:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "101:   }",
          "102:   if( p && !p->xCmp && synthCollSeq(db, p) ){",
          "103:     p = 0;",
          "104:   }",
          "105:   assert( !p || p->xCmp );",
          "106:   if( p==0 ){",
          "107:     sqlite3ErrorMsg(pParse, \"no such collation sequence: %s\", zName);",
          "108:     pParse->rc = SQLITE_ERROR_MISSING_COLLSEQ;",
          "109:   }",
          "110:   return p;",
          "111: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204: CollSeq *sqlite3FindCollSeq(",
          "209: ){",
          "210:   CollSeq *pColl;",
          "211:   if( zName ){",
          "",
          "[Removed Lines]",
          "205:   sqlite3 *db,",
          "206:   u8 enc,",
          "207:   const char *zName,",
          "208:   int create",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:   return pColl;",
          "220: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: CollSeq *sqlite3GetCollSeq(",
          "196: ){",
          "197:   CollSeq *p;",
          "198:   sqlite3 *db = pParse->db;",
          "200:   p = pColl;",
          "201:   if( !p ){",
          "202:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "203:   }",
          "204:   if( !p || !p->xCmp ){",
          "208:     callCollNeeded(db, enc, zName);",
          "209:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "210:   }",
          "211:   if( p && !p->xCmp && synthCollSeq(db, p) ){",
          "212:     p = 0;",
          "213:   }",
          "214:   assert( !p || p->xCmp );",
          "215:   if( p==0 ){",
          "216:     sqlite3ErrorMsg(pParse, \"no such collation sequence: %s\", zName);",
          "217:     pParse->rc = SQLITE_ERROR_MISSING_COLLSEQ;",
          "218:   }",
          "219:   return p;",
          "220: }",
          "242: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){",
          "243:   sqlite3 *db = pParse->db;",
          "244:   u8 enc = ENC(db);",
          "245:   u8 initbusy = db->init.busy;",
          "246:   CollSeq *pColl;",
          "248:   pColl = sqlite3FindCollSeq(db, enc, zName, initbusy);",
          "249:   if( !initbusy && (!pColl || !pColl->xCmp) ){",
          "250:     pColl = sqlite3GetCollSeq(pParse, enc, pColl, zName);",
          "251:   }",
          "253:   return pColl;",
          "254: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2075011a7582bfa87ed426d5296cded24ea5095",
      "candidate_info": {
        "commit_hash": "b2075011a7582bfa87ed426d5296cded24ea5095",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b2075011a7582bfa87ed426d5296cded24ea5095",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts4merge.test"
        ],
        "message": "Avoid an infinite loop in fts3/4 incremental-merge in the case where the lowest level in the database contains segments but no data (because there is a delete-marker for each valid entry). Fix for [bf1aab89].\n\nFossilOrigin-Name: 35beaee059a6cccead4311886ca928d936f23584cf435e35e265e98feea723dc",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts4merge.test||test/fts4merge.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4950:     }",
          "4951:     if( SQLITE_OK==rc && pCsr->nSegment==nSeg",
          "4952:      && SQLITE_OK==(rc = sqlite3Fts3SegReaderStart(p, pCsr, pFilter))",
          "4954:     ){",
          "4955:       if( bUseHint && iIdx>0 ){",
          "4956:         const char *zKey = pCsr->zTerm;",
          "4957:         int nKey = pCsr->nTerm;",
          "",
          "[Removed Lines]",
          "4953:      && SQLITE_ROW==(rc = sqlite3Fts3SegReaderStep(p, pCsr))",
          "",
          "[Added Lines]",
          "4954:       int bEmpty = 0;",
          "4955:       rc = sqlite3Fts3SegReaderStep(p, pCsr);",
          "4956:       if( rc==SQLITE_OK ){",
          "4957:         bEmpty = 1;",
          "4958:       }else if( rc!=SQLITE_ROW ){",
          "4959:         sqlite3Fts3SegReaderFinish(pCsr);",
          "4960:         break;",
          "4961:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4963:       if( rc==SQLITE_OK && pWriter->nLeafEst ){",
          "4964:         fts3LogMerge(nSeg, iAbsLevel);",
          "4972:         if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4965:         do {",
          "4966:           rc = fts3IncrmergeAppend(p, pWriter, pCsr);",
          "4967:           if( rc==SQLITE_OK ) rc = sqlite3Fts3SegReaderStep(p, pCsr);",
          "4968:           if( pWriter->nWork>=nRem && rc==SQLITE_ROW ) rc = SQLITE_OK;",
          "4969:         }while( rc==SQLITE_ROW );",
          "",
          "[Added Lines]",
          "4972:         if( bEmpty==0 ){",
          "4973:           do {",
          "4974:             rc = fts3IncrmergeAppend(p, pWriter, pCsr);",
          "4975:             if( rc==SQLITE_OK ) rc = sqlite3Fts3SegReaderStep(p, pCsr);",
          "4976:             if( pWriter->nWork>=nRem && rc==SQLITE_ROW ) rc = SQLITE_OK;",
          "4977:           }while( rc==SQLITE_ROW );",
          "4978:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bba975c7af3de9aeb5c62fb8b05d61b96e4ecd0b030008442bbdd345e1e5f134",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4merge.test||test/fts4merge.test": [
          "File: test/fts4merge.test -> test/fts4merge.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:     execsql { INSERT INTO t1(t1) VALUES('merge=200,10') }",
          "327:     expr { ([db total_changes] - $x)>1 }",
          "328:   } {0}",
          "330: }",
          "332: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: }",
          "331: #-------------------------------------------------------------------------",
          "332: # Test cases 8.* - ticket [bf1aab89].",
          "333: #",
          "334: set testprefix fts4merge",
          "335: reset_db",
          "336: do_execsql_test 8.0 {",
          "337:   CREATE VIRTUAL TABLE t1 USING fts4(a, order=DESC);",
          "338:   INSERT INTO t1(a) VALUES (0);",
          "339:   INSERT INTO t1(a) VALUES (0);",
          "340:   UPDATE t1 SET a = NULL;",
          "341: }",
          "343: do_execsql_test 8.1 {",
          "344:   INSERT INTO t1(t1) VALUES('merge=1,4');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e34e4061b534130bc7495c102120371c8738d95",
      "candidate_info": {
        "commit_hash": "8e34e4061b534130bc7495c102120371c8738d95",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e34e4061b534130bc7495c102120371c8738d95",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/sqliteInt.h",
          "test/fuzzdata8.db"
        ],
        "message": "Add the new sqlite3ExprUnmapAndDelete() function and use it in place of separate calls to sqlite3RenameExprUnmap() and sqlite3ExprDelete().\n\nFossilOrigin-Name: 36ea13e0a851a749c9ef292377ecd82dbd4797d38df907b362487fa234c98ca5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 04bd5cb73287f926f1ecf578998fa6ce1379474e86918c692eae5778d0817cef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:   }else if( pRight==0 ){",
          "896:     return pLeft;",
          "897:   }else if( ExprAlwaysFalse(pLeft) || ExprAlwaysFalse(pRight) ){",
          "904:     return sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "905:   }else{",
          "906:     return sqlite3PExpr(pParse, TK_AND, pLeft, pRight);",
          "",
          "[Removed Lines]",
          "898:     if( IN_RENAME_OBJECT ){",
          "899:       sqlite3RenameExprUnmap(pParse, pLeft);",
          "900:       sqlite3RenameExprUnmap(pParse, pRight);",
          "901:     }",
          "902:     sqlite3ExprDelete(db, pLeft);",
          "903:     sqlite3ExprDelete(db, pRight);",
          "",
          "[Added Lines]",
          "898:     sqlite3ExprUnmapAndDelete(pParse, pLeft);",
          "899:     sqlite3ExprUnmapAndDelete(pParse, pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1060:   if( p ) sqlite3ExprDeleteNN(db, p);",
          "1061: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1062: void sqlite3ExprUnmapAndDelete(Parse *pParse, Expr *p){",
          "1063:   if( p ){",
          "1064:     if( IN_RENAME_OBJECT ){",
          "1065:       sqlite3RenameExprUnmap(pParse, p);",
          "1066:     }",
          "1067:     sqlite3ExprDeleteNN(pParse->db, p);",
          "1068:   }",
          "1069: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1642:   }",
          "1644: vector_append_error:",
          "1649:   sqlite3IdListDelete(db, pColumns);",
          "1650:   return pList;",
          "1651: }",
          "",
          "[Removed Lines]",
          "1645:   if( IN_RENAME_OBJECT ){",
          "1646:     sqlite3RenameExprUnmap(pParse, pExpr);",
          "1647:   }",
          "1648:   sqlite3ExprDelete(db, pExpr);",
          "",
          "[Added Lines]",
          "1653:   sqlite3ExprUnmapAndDelete(pParse, pExpr);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1177:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1178:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "1176:       sqlite3ExprDelete(pParse->db, A);",
          "",
          "[Added Lines]",
          "1176:       sqlite3ExprUnmapAndDelete(pParse, A);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3871: Expr *sqlite3ExprFunction(Parse*,ExprList*, Token*, int);",
          "3872: void sqlite3ExprAssignVarNumber(Parse*, Expr*, u32);",
          "3873: void sqlite3ExprDelete(sqlite3*, Expr*);",
          "3874: ExprList *sqlite3ExprListAppend(Parse*,ExprList*,Expr*);",
          "3875: ExprList *sqlite3ExprListAppendVector(Parse*,ExprList*,IdList*,Expr*);",
          "3876: void sqlite3ExprListSetSortOrder(ExprList*,int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3874: void sqlite3ExprUnmapAndDelete(Parse*, Expr*);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ddf7f42115eb93c489f966e035dec00af57aa39",
      "candidate_info": {
        "commit_hash": "4ddf7f42115eb93c489f966e035dec00af57aa39",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ddf7f42115eb93c489f966e035dec00af57aa39",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test case loaded into test/fuzzdata8.db.\n\nFossilOrigin-Name: 00ae0c6c4815366bd2f36bc054b13bc7b568dd0a3caceddf0eba4db33f010ee4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d5250db6322103326f0d5782ba049996d9ce8784f9e53a3112fb6f09f888f1c3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "228a52d973c5eae8557adfc5da3b5b1ebcffdbec",
      "candidate_info": {
        "commit_hash": "228a52d973c5eae8557adfc5da3b5b1ebcffdbec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/228a52d973c5eae8557adfc5da3b5b1ebcffdbec",
        "files": [
          "manifest",
          "manifest.uuid"
        ],
        "message": "Version 3.30.0\n\nFossilOrigin-Name: c20a35336432025445f9f7e289d0cc3e4003fb17f45a4ce74c6269c407c6e09f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7f9a4b6015ac332a04d3e394a6b3210fc95253d8786a261178a5639cb8d9d987",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}