{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ba9ee095984340d941c36d5d379312f5542998ad",
      "candidate_info": {
        "commit_hash": "ba9ee095984340d941c36d5d379312f5542998ad",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ba9ee095984340d941c36d5d379312f5542998ad",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Fix harmless compiler warnings seen with MSVC.\n\nFossilOrigin-Name: 5be64ea8e33f632f9c337feac9b0663d8e6e59fc9a71e5d832d9fd905c06458e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7927b6b023502e990d23f30251b5b0918b547726b863bfb6747dcd7f1f71d19a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2586:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2587:     windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2588:   }else{",
          "2590:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2591:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "2592:       if( pMWin->eType==TK_RANGE ){",
          "2594:         addr = sqlite3VdbeCurrentAddr(v);",
          "2595:         if( regEnd ){",
          "2596:           lbl = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "2589:     int addr;",
          "2593:         int lbl;",
          "",
          "[Added Lines]",
          "2589:     int addr = 0;",
          "2593:         int lbl = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ac2ee0a74ad3055140d614261c7e9d7620e74c2",
      "candidate_info": {
        "commit_hash": "7ac2ee0a74ad3055140d614261c7e9d7620e74c2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ac2ee0a74ad3055140d614261c7e9d7620e74c2",
        "files": [
          "autoconf/Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Sync up the autoconf makefile for MSVC.\n\nFossilOrigin-Name: ecbae90aef63ed6d07d474416900db36ff6dd9c2ed1bbb5f4d883b6838156be1",
        "before_after_code_files": [
          "autoconf/Makefile.msc||autoconf/Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "autoconf/Makefile.msc||autoconf/Makefile.msc": [
          "File: autoconf/Makefile.msc -> autoconf/Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "433: # will run on the platform that is doing the build.",
          "434: #",
          "435: !IF $(USE_FULLWARN)!=0",
          "437: !ELSE",
          "439: !ENDIF",
          "441: # Check if assembly code listings should be generated for the source",
          "",
          "[Removed Lines]",
          "436: BCC = $(NCC) -nologo -W4 $(CCOPTS) $(BCCOPTS)",
          "438: BCC = $(NCC) -nologo -W3 $(CCOPTS) $(BCCOPTS)",
          "",
          "[Added Lines]",
          "436: BCC = $(NCC) -nologo -W4 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "438: BCC = $(NCC) -nologo -W3 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808: # Command line prefixes for compiling code, compiling resources,",
          "809: # linking, etc.",
          "810: #",
          "812: LTRCOMPILE = $(RCC) -r",
          "813: LTLIB = lib.exe",
          "814: LTLINK = $(TCC) -Fe$@",
          "",
          "[Removed Lines]",
          "811: LTCOMPILE = $(TCC) -Fo$@",
          "",
          "[Added Lines]",
          "811: LTCOMPILE = $(TCC) -Fo$@ -Fd$*.pdb",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 908c4c891fa7472b43d232bde7d3789105c5f5b2cfaf6652bf6d5829236933cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36c9301816ab0acb23db36517754f66295542e3b",
      "candidate_info": {
        "commit_hash": "36c9301816ab0acb23db36517754f66295542e3b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/36c9301816ab0acb23db36517754f66295542e3b",
        "files": [
          "ext/fts5/test/fts5corrupt4.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add new test file fts5corrupt4.test.\n\nFossilOrigin-Name: 5dfc4fe98a4821cbdbfd7dfddf221b00251b2a26bf58767a3956b64e9a4e92da",
        "before_after_code_files": [
          "ext/fts5/test/fts5corrupt4.test||ext/fts5/test/fts5corrupt4.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5corrupt4.test||ext/fts5/test/fts5corrupt4.test": [
          "File: ext/fts5/test/fts5corrupt4.test -> ext/fts5/test/fts5corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 May 16",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: #",
          "14: source [file join [file dirname [info script]] fts5_common.tcl]",
          "15: set testprefix fts5corrupt4",
          "17: # If SQLITE_ENABLE_FTS5 is defined, omit this file.",
          "18: ifcapable !fts5 {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "22: sqlite3_fts5_may_be_corrupt 1",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE ttt USING fts5(a, b);",
          "26:   INSERT INTO ttt",
          "27:      VALUES('e ee eee e ee eee e ee eee', 'eee ee e e e ee eee ee ee');",
          "28:   INSERT INTO ttt SELECT a||a, b||b FROM ttt;",
          "29:   INSERT INTO ttt SELECT a||a, b||b FROM ttt;",
          "30: }",
          "32: proc mutate {blob i} {",
          "33:   set o [expr {$i % [string length $blob]}]",
          "34:   set a [string range $blob 0 $o-1]",
          "35:   set b [string range $blob $o+1 end]",
          "36:   set v [expr int(rand()*255) - 127]",
          "37:   return \"$a[binary format c $v]$b\"",
          "38: }",
          "39: db func mutate mutate",
          "41: for {set j 1000} {$j <= 5000} {incr j 1000} {",
          "42:   do_test 1.$j {",
          "43:     for {set i 0} {$i < 1000} {incr i} {",
          "44:       execsql {",
          "45:         BEGIN;",
          "46:           UPDATE ttt_data SET block = mutate(block, $i) WHERE id>10;",
          "47:       }",
          "48:       foreach sql {",
          "49:         {SELECT snippet(ttt, -1, '.', '..', '[', ']'), * FROM ttt('e*')}",
          "50:         {SELECT snippet(ttt, -1, '.', '..', '[', ']'), * FROM ttt('e* NOT ee*')}",
          "51:       } {",
          "52:         catch { execsql $sql }",
          "53:       }",
          "54:       execsql ROLLBACK",
          "55:     }",
          "56:   } {}",
          "57: }",
          "59: sqlite3_fts5_may_be_corrupt 0",
          "60: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3dac90728a6a1962da478afe751582ddf8b6d4666548a805564817b21e07a246",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e34e4061b534130bc7495c102120371c8738d95",
      "candidate_info": {
        "commit_hash": "8e34e4061b534130bc7495c102120371c8738d95",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e34e4061b534130bc7495c102120371c8738d95",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/sqliteInt.h",
          "test/fuzzdata8.db"
        ],
        "message": "Add the new sqlite3ExprUnmapAndDelete() function and use it in place of separate calls to sqlite3RenameExprUnmap() and sqlite3ExprDelete().\n\nFossilOrigin-Name: 36ea13e0a851a749c9ef292377ecd82dbd4797d38df907b362487fa234c98ca5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 04bd5cb73287f926f1ecf578998fa6ce1379474e86918c692eae5778d0817cef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:   }else if( pRight==0 ){",
          "896:     return pLeft;",
          "897:   }else if( ExprAlwaysFalse(pLeft) || ExprAlwaysFalse(pRight) ){",
          "904:     return sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "905:   }else{",
          "906:     return sqlite3PExpr(pParse, TK_AND, pLeft, pRight);",
          "",
          "[Removed Lines]",
          "898:     if( IN_RENAME_OBJECT ){",
          "899:       sqlite3RenameExprUnmap(pParse, pLeft);",
          "900:       sqlite3RenameExprUnmap(pParse, pRight);",
          "901:     }",
          "902:     sqlite3ExprDelete(db, pLeft);",
          "903:     sqlite3ExprDelete(db, pRight);",
          "",
          "[Added Lines]",
          "898:     sqlite3ExprUnmapAndDelete(pParse, pLeft);",
          "899:     sqlite3ExprUnmapAndDelete(pParse, pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1060:   if( p ) sqlite3ExprDeleteNN(db, p);",
          "1061: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1062: void sqlite3ExprUnmapAndDelete(Parse *pParse, Expr *p){",
          "1063:   if( p ){",
          "1064:     if( IN_RENAME_OBJECT ){",
          "1065:       sqlite3RenameExprUnmap(pParse, p);",
          "1066:     }",
          "1067:     sqlite3ExprDeleteNN(pParse->db, p);",
          "1068:   }",
          "1069: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1642:   }",
          "1644: vector_append_error:",
          "1649:   sqlite3IdListDelete(db, pColumns);",
          "1650:   return pList;",
          "1651: }",
          "",
          "[Removed Lines]",
          "1645:   if( IN_RENAME_OBJECT ){",
          "1646:     sqlite3RenameExprUnmap(pParse, pExpr);",
          "1647:   }",
          "1648:   sqlite3ExprDelete(db, pExpr);",
          "",
          "[Added Lines]",
          "1653:   sqlite3ExprUnmapAndDelete(pParse, pExpr);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1177:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1178:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "1176:       sqlite3ExprDelete(pParse->db, A);",
          "",
          "[Added Lines]",
          "1176:       sqlite3ExprUnmapAndDelete(pParse, A);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3871: Expr *sqlite3ExprFunction(Parse*,ExprList*, Token*, int);",
          "3872: void sqlite3ExprAssignVarNumber(Parse*, Expr*, u32);",
          "3873: void sqlite3ExprDelete(sqlite3*, Expr*);",
          "3874: ExprList *sqlite3ExprListAppend(Parse*,ExprList*,Expr*);",
          "3875: ExprList *sqlite3ExprListAppendVector(Parse*,ExprList*,IdList*,Expr*);",
          "3876: void sqlite3ExprListSetSortOrder(ExprList*,int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3874: void sqlite3ExprUnmapAndDelete(Parse*, Expr*);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d63b69b8a2fe0afbc62ffb850b7f17d4862244fa",
      "candidate_info": {
        "commit_hash": "d63b69b8a2fe0afbc62ffb850b7f17d4862244fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d63b69b8a2fe0afbc62ffb850b7f17d4862244fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab3.test"
        ],
        "message": "Ensure that an ALWAYS() in the rename logic really is always true, even for faulty inputs.\n\nFossilOrigin-Name: 54410f0e7710542d5159d0449898598d2b7f7676bfd993644ca47da1bf1fcdac",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75b04a4b0d2e65bfcd02cf4e0b6d8f1954957c590814a9b8f9a9ee2adc2ec022",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "757: static int renameUnmapSelectCb(Walker *pWalker, Select *p){",
          "758:   Parse *pParse = pWalker->pParse;",
          "759:   int i;",
          "760:   if( ALWAYS(p->pEList) ){",
          "761:     ExprList *pList = p->pEList;",
          "762:     for(i=0; i<pList->nExpr; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760:   if( pParse->nErr ) return WRC_Abort;",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:   } $res",
          "466: }",
          "469: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468: # Verify that the \"if( pParse->nErr ) return WRC_Abort\" at the top of the",
          "469: # renameUnmapSelectCb() routine in alter.c (2019-12-04) is really required.",
          "470: #",
          "471: sqlite3 db :memory:",
          "472: do_catchsql_test 20.10 {",
          "473:   CREATE TABLE s(a, b, c);",
          "474:   CREATE INDEX k ON s( (WITH s AS( SELECT * ) VALUES(2) ) IN () );",
          "475:   ALTER TABLE s RENAME a TO a2;",
          "476: } {1 {error in index k: no tables specified}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}