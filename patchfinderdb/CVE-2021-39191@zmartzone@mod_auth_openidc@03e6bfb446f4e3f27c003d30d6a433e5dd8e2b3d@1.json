{
  "cve_id": "CVE-2021-39191",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
  "patch_info": {
    "commit_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "auth_openidc.conf",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "auth_openidc.conf||auth_openidc.conf",
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "auth_openidc.conf||auth_openidc.conf": [
      "File: auth_openidc.conf -> auth_openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "918: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
      "920: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
      "923: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
      "924: # or:",
      "925: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
      "",
      "[Removed Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, e.g.:",
      "",
      "[Added Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in",
      "923: # 3rd-party initiated logins, e.g.:",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:  return TRUE;",
      "2458: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2460: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2462: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2463:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2464:   char **err_desc) {",
      "2465:  apr_uri_t uri;",
      "2466:  const char *c_host = NULL;",
      "2467:  apr_hash_index_t *hi = NULL;",
      "2468:  size_t i = 0;",
      "2469:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2472:  for (i = 0; i < strlen(url); i++)",
      "2473:   if (url[i] == '\\\\')",
      "2474:    url[i] = '/';",
      "2476:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2479:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2480:   return FALSE;",
      "2481:  }",
      "2483:  if (c->redirect_urls_allowed != NULL) {",
      "2484:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2485:     apr_hash_next(hi)) {",
      "2486:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2487:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2488:      NULL, err_str) == TRUE)",
      "2489:     break;",
      "2490:   }",
      "2491:   if (hi == NULL) {",
      "2494:      apr_psprintf(r->pool,",
      "2495:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2496:        url);",
      "2497:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2498:    return FALSE;",
      "2499:   }",
      "2500:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2501:   c_host = oidc_get_current_url_host(r);",
      "2502:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2503:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2506:      apr_psprintf(r->pool,",
      "2507:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2508:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2509:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2510:    return FALSE;",
      "2511:   }",
      "2512:  }",
      "2514:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "2517:     apr_psprintf(r->pool,",
      "2518:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "2519:       url);",
      "2520:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2521:   return FALSE;",
      "2522:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "2525:     \"No hostname was parsed and starting with '//': %s\", url);",
      "2526:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2527:   return FALSE;",
      "2528:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "2531:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "2532:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2533:   return FALSE;",
      "2534:  }",
      "2537:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "2540:     apr_psprintf(r->pool,",
      "2541:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "2542:       url);",
      "2543:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2544:   return FALSE;",
      "2545:  }",
      "2547:  return TRUE;",
      "2548: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2469:  oidc_provider_t *provider = NULL;",
      "2471:  oidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);",
      "2472:  oidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:  char *error_str = NULL;",
      "2561:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2519:     HTTP_UNAUTHORIZED);",
      "2520:  }",
      "2523:  if (c->metadata_dir == NULL) {",
      "2524:   if ((oidc_provider_static_config(r, c, &provider) == TRUE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2615:  if (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,",
      "2616:    &error_description) == FALSE) {",
      "2617:   return oidc_util_html_send_error(r, c->error_template, error_str,",
      "2618:     error_description,",
      "2619:     HTTP_UNAUTHORIZED);",
      "2620:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2947:  return rc;",
      "2948: }",
      "",
      "[Removed Lines]",
      "2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2953:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2954:   char **err_desc) {",
      "2955:  apr_uri_t uri;",
      "2956:  const char *c_host = NULL;",
      "2957:  apr_hash_index_t *hi = NULL;",
      "2958:  size_t i = 0;",
      "2959:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2962:  for (i = 0; i < strlen(url); i++)",
      "2963:   if (url[i] == '\\\\')",
      "2964:    url[i] = '/';",
      "2966:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2969:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2970:   return FALSE;",
      "2971:  }",
      "2973:  if (c->redirect_urls_allowed != NULL) {",
      "2974:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2975:     apr_hash_next(hi)) {",
      "2976:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2977:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2978:      NULL, err_str) == TRUE)",
      "2979:     break;",
      "2980:   }",
      "2981:   if (hi == NULL) {",
      "2984:      apr_psprintf(r->pool,",
      "2985:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2986:        url);",
      "2987:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2988:    return FALSE;",
      "2989:   }",
      "2990:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2991:   c_host = oidc_get_current_url_host(r);",
      "2992:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2993:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2996:      apr_psprintf(r->pool,",
      "2997:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2998:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2999:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3000:    return FALSE;",
      "3001:   }",
      "3002:  }",
      "3004:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "3007:     apr_psprintf(r->pool,",
      "3008:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3009:       url);",
      "3010:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3011:   return FALSE;",
      "3012:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "3015:     \"No hostname was parsed and starting with '//': %s\", url);",
      "3016:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3017:   return FALSE;",
      "3018:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3021:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "3022:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3023:   return FALSE;",
      "3024:  }",
      "3027:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3030:     apr_psprintf(r->pool,",
      "3031:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3032:       url);",
      "3033:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3034:   return FALSE;",
      "3035:  }",
      "3037:  return TRUE;",
      "3038: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3e8caeba916103f5a03e1e5975faf306ebdc70f8",
      "candidate_info": {
        "commit_hash": "3e8caeba916103f5a03e1e5975faf306ebdc70f8",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/3e8caeba916103f5a03e1e5975faf306ebdc70f8",
        "files": [
          "ChangeLog",
          "src/mod_auth_openidc.c"
        ],
        "message": "verify that \"alg\" is not none in logout_token explicitly\n\nmake session not found on backchannel logout produce a log warning\ninstead of error\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2759:   goto out;",
          "2760:  }",
          "2762:  provider = oidc_get_provider_for_issuer(r, cfg, jwt->payload.iss, FALSE);",
          "2763:  if (provider == NULL) {",
          "2764:   oidc_error(r, \"no provider found for issuer: %s\", jwt->payload.iss);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2762:  if ((jwt->header.alg == NULL) || (strcmp(jwt->header.alg, \"none\") == 0)) {",
          "2763:   oidc_error(r, \"logout token is not signed\");",
          "2764:   goto out;",
          "2765:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2872:  sid = oidc_make_sid_iss_unique(r, sid, provider->issuer);",
          "2873:  oidc_cache_get_sid(r, sid, &uuid);",
          "2874:  if (uuid == NULL) {",
          "2877:     sid);",
          "2878:   r->user = \"\";",
          "2879:   rc = OK;",
          "",
          "[Removed Lines]",
          "2875:   oidc_error(r,",
          "2876:     \"could not find session based on sid/sub provided in logout token: %s\",",
          "",
          "[Added Lines]",
          "2881:   oidc_warn(r,",
          "2882:     \"could not (or no longer) find a session based on sid/sub provided in logout token: %s\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e0d03b709730a61325c273a2a018042dfd0433d",
      "candidate_info": {
        "commit_hash": "0e0d03b709730a61325c273a2a018042dfd0433d",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/0e0d03b709730a61325c273a2a018042dfd0433d",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h"
        ],
        "message": "add administrative session revocation capability\n\n- through <redirect_uri>?revoke_session=<uuid>\n- bump to 2.4.11rc3\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1392:  r->user = apr_pstrdup(r->pool, session->remote_user);",
          "1396:  char *authn_header = oidc_cfg_dir_authn_header(r);",
          "",
          "[Removed Lines]",
          "1393:  oidc_debug(r, \"set remote_user to \\\"%s\\\"\", r->user);",
          "",
          "[Added Lines]",
          "1393:  oidc_debug(r, \"set remote_user to \\\"%s\\\" in existing session \\\"%s\\\"\", r->user, session->uuid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1625: static apr_byte_t oidc_set_request_user(request_rec *r, oidc_cfg *c,",
          "1628:  char *issuer = provider->issuer;",
          "1629:  char *claim_name = apr_pstrdup(r->pool, c->remote_user_claim.claim_name);",
          "",
          "[Removed Lines]",
          "1626:   oidc_provider_t *provider, oidc_jwt_t *jwt, const char *s_claims) {",
          "",
          "[Added Lines]",
          "1626:   oidc_session_t *session, oidc_provider_t *provider, oidc_jwt_t *jwt, const char *s_claims) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1667:  r->user = apr_pstrdup(r->pool, remote_user);",
          "1671:    c->remote_user_claim.reg_exp ?",
          "1678:  return TRUE;",
          "1679: }",
          "",
          "[Removed Lines]",
          "1669:  oidc_debug(r, \"set remote_user to \\\"%s\\\" based on claim: \\\"%s\\\"%s\", r->user,",
          "1670:    c->remote_user_claim.claim_name,",
          "1672:      apr_psprintf(r->pool,",
          "1673:        \" and expression: \\\"%s\\\" and replace string: \\\"%s\\\"\",",
          "1674:        c->remote_user_claim.reg_exp,",
          "1675:        c->remote_user_claim.replace) :",
          "1676:        \"\");",
          "",
          "[Added Lines]",
          "1669:  oidc_debug(r, \"set remote_user to \\\"%s\\\" in new session \\\"%s\\\", based on claim: \\\"%s\\\"%s\", session->uuid, r->user, c->remote_user_claim.claim_name,",
          "1671:      apr_psprintf(r->pool, \" and expression: \\\"%s\\\" and replace string: \\\"%s\\\"\", c->remote_user_claim.reg_exp, c->remote_user_claim.replace) :",
          "1672:      \"\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1963:  const char *prompt = oidc_proto_state_get_prompt(proto_state);",
          "1969:   if ((prompt != NULL)",
          "",
          "[Removed Lines]",
          "1966:  if (oidc_set_request_user(r, c, provider, jwt, claims) == TRUE) {",
          "",
          "[Added Lines]",
          "1962:  if (oidc_set_request_user(r, c, session, provider, jwt, claims) == TRUE) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3462:  return OK;",
          "3463: }",
          "3465: #define OIDC_INFO_PARAM_ACCESS_TOKEN_REFRESH_INTERVAL \"access_token_refresh_interval\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3461: int oidc_handle_revoke_session(request_rec *r, oidc_cfg *c) {",
          "3462:  apr_byte_t rc = FALSE;",
          "3463:  char *session_id = NULL;",
          "3465:  oidc_util_get_request_parameter(r,",
          "3466:    OIDC_REDIRECT_URI_REQUEST_REVOKE_SESSION, &session_id);",
          "3467:  if (session_id == NULL)",
          "3468:   return HTTP_BAD_REQUEST;",
          "3470:  if (c->session_type == OIDC_SESSION_TYPE_SERVER_CACHE)",
          "3471:   rc = oidc_cache_set_session(r, session_id, NULL, 0);",
          "3472:  else",
          "3473:   oidc_warn(r, \"cannot revoke session because server side caching is not in use\");",
          "3475:  r->user = \"\";",
          "3477:  return (rc == TRUE) ? OK : HTTP_INTERNAL_SERVER_ERROR;",
          "3478: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3729:   return oidc_handle_remove_at_cache(r, c);",
          "3731:  } else if (oidc_util_request_has_parameter(r,",
          "3732:    OIDC_REDIRECT_URI_REQUEST_INFO)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3746:  } else if (oidc_util_request_has_parameter(r,",
          "3747:    OIDC_REDIRECT_URI_REQUEST_REVOKE_SESSION)) {",
          "3750:   return oidc_handle_revoke_session(r, c);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "479: #define OIDC_REDIRECT_URI_REQUEST_SESSION          \"session\"",
          "480: #define OIDC_REDIRECT_URI_REQUEST_REFRESH          \"refresh\"",
          "481: #define OIDC_REDIRECT_URI_REQUEST_REMOVE_AT_CACHE  \"remove_at_cache\"",
          "482: #define OIDC_REDIRECT_URI_REQUEST_REQUEST_URI      \"request_uri\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482: #define OIDC_REDIRECT_URI_REQUEST_REVOKE_SESSION   \"revoke_session\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1bc9ecd3bb91f6ec3500df8b091af8aee539fcf",
      "candidate_info": {
        "commit_hash": "e1bc9ecd3bb91f6ec3500df8b091af8aee539fcf",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/e1bc9ecd3bb91f6ec3500df8b091af8aee539fcf",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c"
        ],
        "message": "terminate on startup when the crypto passphrase generated is empty\n\nsee #767; thanks @sebastian-goeldi; bump to 2.4.11rc4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: # - encryption of cache entries, that may include the session cookie, see: OIDCCacheEncrypt and OIDCSessionType",
          "19: # Note that an encrypted cache mechanism can be shared between servers if they use the same OIDCCryptoPassphrase",
          "20: # If the value begins with exec: the resulting command will be executed and the",
          "22: # The command may be absolute or relative to the web server root.",
          "23: #OIDCCryptoPassphrase [ <passphrase> | \"exec:/path/to/otherProgram arg1\" ]",
          "",
          "[Removed Lines]",
          "21: # first line returned to standard output by the program will be used as the password.",
          "",
          "[Added Lines]",
          "21: # first line returned to standard output by the program will be used as the password, e.g:",
          "22: #    OIDCCryptoPassphrase \"exec:/bin/bash -c \\\"head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32\\\"\"",
          "23: # (notice that the above typically only works in non-clustered environments)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "492:    return apr_pstrcat(cmd->pool,",
          "493:      \"Unable to get passphrase from exec of \", arg + 5, NULL);",
          "494:   }",
          "495:   passphrase = result;",
          "496:  } else {",
          "497:   passphrase = arg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "495:   if (strlen(result) == 0)",
          "496:    return apr_pstrdup(cmd->pool, \"the output of the crypto passphrase generation command is empty (perhaps you need to pass it to bash -c \\\"<cmd>\\\"?)\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba52a0ca3449a96571456b1fd5c89d9707a98e01",
      "candidate_info": {
        "commit_hash": "ba52a0ca3449a96571456b1fd5c89d9707a98e01",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/ba52a0ca3449a96571456b1fd5c89d9707a98e01",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/authz.c",
          "test/test.c"
        ],
        "message": "fix regular expressions in Require statements\n\nsee #775; thanks @rajeevn1; bump to 2.4.11rc6\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/authz.c||src/authz.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/authz.c||src/authz.c": [
          "File: src/authz.c -> src/authz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:  return FALSE;",
          "121: }",
          "125:  struct oidc_pcre *preg = NULL;",
          "126:  char *error_str = NULL;",
          "127:  int i = 0;",
          "",
          "[Removed Lines]",
          "123: static apr_byte_t oidc_authz_match_expression(request_rec *r,",
          "124:   const char *spec_c, json_t *val) {",
          "",
          "[Added Lines]",
          "123: static apr_byte_t oidc_authz_match_expression(request_rec *r, const char *spec_c, json_t *val) {",
          "124:  apr_byte_t rc = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:  if (preg == NULL) {",
          "133:   oidc_error(r, \"pattern [%s] is not a valid regular expression: %s\", spec_c, error_str);",
          "136:  }",
          "139:  if (json_is_string(val)) {",
          "146:   }",
          "",
          "[Removed Lines]",
          "134:   oidc_pcre_free(preg);",
          "135:   return FALSE;",
          "142:   if (oidc_pcre_exec(r->pool, preg, json_string_value(val),",
          "143:     (int) strlen(json_string_value(val)), &error_str) == 0) {",
          "144:    oidc_pcre_free(preg);",
          "145:    return TRUE;",
          "",
          "[Added Lines]",
          "134:   goto end;",
          "140:   error_str = NULL;",
          "142:   if (oidc_pcre_exec(r->pool, preg, json_string_value(val), (int) strlen(json_string_value(val)), &error_str)",
          "143:     > 0) {",
          "144:    oidc_debug(r, \"value \\\"%s\\\" matched regex \\\"%s\\\"\", json_string_value(val), spec_c);",
          "145:    rc = TRUE;",
          "146:    goto end;",
          "147:   } else if (error_str) {",
          "148:    oidc_debug(r, \"pcre error (string): %s\", error_str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:    json_t *elem = json_array_get(val, i);",
          "155:    if (json_is_string(elem)) {",
          "162:     }",
          "163:    }",
          "164:   }",
          "165:  }",
          "170: }",
          "",
          "[Removed Lines]",
          "158:     if (oidc_pcre_exec(r->pool, preg, json_string_value(elem),",
          "159:       (int) strlen(json_string_value(elem)), NULL) == 0) {",
          "160:      oidc_pcre_free(preg);",
          "161:      return TRUE;",
          "167:  oidc_pcre_free(preg);",
          "169:  return FALSE;",
          "",
          "[Added Lines]",
          "160:     error_str = NULL;",
          "162:     if (oidc_pcre_exec(r->pool, preg, json_string_value(elem), (int) strlen(json_string_value(elem)), &error_str)",
          "163:       > 0) {",
          "164:      oidc_debug(r, \"array value \\\"%s\\\" matched regex \\\"%s\\\"\", json_string_value(elem), spec_c);",
          "165:      rc = TRUE;",
          "166:      goto end;",
          "167:     } else if (error_str) {",
          "168:      oidc_debug(r, \"pcre error (array): %s\", error_str);",
          "174: end:",
          "176:  if (preg)",
          "177:   oidc_pcre_free(preg);",
          "179:  return rc;",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1501:  rc = oidc_authz_worker24(r, json, require_args, parsed_require_args, oidc_authz_match_claim);",
          "1502:  TST_ASSERT(\"auth status (11: namespaced key)\", rc == AUTHZ_GRANTED);",
          "1504:  json_decref(json);",
          "1506:  return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1504:  require_args = \"Require claim nested.level1.level2~.an.\";",
          "1505:  parsed_require_args->filename = require_args;",
          "1506:  rc = oidc_authz_worker24(r, json, require_args, parsed_require_args, oidc_authz_match_claim);",
          "1507:  TST_ASSERT(\"auth status (12: nested expression)\", rc == AUTHZ_GRANTED);",
          "1509:  require_args = \"Require claim nested.level1.level2~zan.\";",
          "1510:  parsed_require_args->filename = require_args;",
          "1511:  rc = oidc_authz_worker24(r, json, require_args, parsed_require_args, oidc_authz_match_claim);",
          "1512:  TST_ASSERT(\"auth status (13: nested expression)\", rc == AUTHZ_DENIED);",
          "1514:  require_args = \"Require claim nested.nestedarray~.\";",
          "1515:  parsed_require_args->filename = require_args;",
          "1516:  rc = oidc_authz_worker24(r, json, require_args, parsed_require_args, oidc_authz_match_claim);",
          "1517:  TST_ASSERT(\"auth status (14: nested array expression)\", rc == AUTHZ_GRANTED);",
          "1519:  require_args = \"Require claim nested.nestedarray~.b\";",
          "1520:  parsed_require_args->filename = require_args;",
          "1521:  rc = oidc_authz_worker24(r, json, require_args, parsed_require_args, oidc_authz_match_claim);",
          "1522:  TST_ASSERT(\"auth status (15: nested array expression)\", rc == AUTHZ_DENIED);",
          "1524:  require_args = \"Require claim email~...$\";",
          "1525:  parsed_require_args->filename = require_args;",
          "1526:  rc = oidc_authz_worker24(r, json, require_args, parsed_require_args, oidc_authz_match_claim);",
          "1527:  TST_ASSERT(\"auth status (16: expression)\", rc == AUTHZ_DENIED);",
          "1529:  require_args = \"Require claim sub~...$\";",
          "1530:  parsed_require_args->filename = require_args;",
          "1531:  rc = oidc_authz_worker24(r, json, require_args, parsed_require_args, oidc_authz_match_claim);",
          "1532:  TST_ASSERT(\"auth status (17: expression)\", rc == AUTHZ_GRANTED);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31cf996099a4e81f3a8a67d3cc6c0afde43eeaf0",
      "candidate_info": {
        "commit_hash": "31cf996099a4e81f3a8a67d3cc6c0afde43eeaf0",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/31cf996099a4e81f3a8a67d3cc6c0afde43eeaf0",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/jose.c",
          "src/jose.h",
          "test/test-cmd.c"
        ],
        "message": "add support for OpenSSL 3.0; bump to 2.4.11.1.rc2\n\nremove test-cmd jwk2cert command\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/jose.c||src/jose.c",
          "src/jose.h||src/jose.h",
          "test/test-cmd.c||test/test-cmd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #include <openssl/pem.h>",
          "55: #include <openssl/rsa.h>",
          "56: #include <openssl/bn.h>",
          "58: #ifdef WIN32",
          "59: #define snprintf _snprintf",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #if OPENSSL_VERSION_NUMBER >= 0x30000000L",
          "58: #include <openssl/core_names.h>",
          "59: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1248:   }",
          "1249:  }",
          "1252:  RSA *rsa = (RSA *)EVP_PKEY_get1_RSA(pkey);",
          "1253:  if (rsa == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1254:  BIGNUM *rsa_n = NULL, *rsa_e = NULL, *rsa_d = NULL;",
          "1256: #if OPENSSL_VERSION_NUMBER >= 0x30000000L",
          "1257:  EVP_PKEY_get_bn_param(pkey, OSSL_PKEY_PARAM_RSA_N, &rsa_n);",
          "1258:  EVP_PKEY_get_bn_param(pkey, OSSL_PKEY_PARAM_RSA_E, &rsa_e);",
          "1259:  EVP_PKEY_get_bn_param(pkey, OSSL_PKEY_PARAM_RSA_D, &rsa_d);",
          "1260: #else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1255:   goto end;",
          "1256:  }",
          "1261: #else",
          "1262:  rsa_n = rsa->n;",
          "1263:  rsa_e = rsa->e;",
          "",
          "[Removed Lines]",
          "1258:  const BIGNUM *rsa_n, *rsa_e, *rsa_d;",
          "1259: #if OPENSSL_VERSION_NUMBER >= 0x10100005L && !defined (LIBRESSL_VERSION_NUMBER)",
          "1260:  RSA_get0_key(rsa, &rsa_n, &rsa_e, &rsa_d);",
          "",
          "[Added Lines]",
          "1268: #if OPENSSL_VERSION_NUMBER >= 0x10100005L && !defined(LIBRESSL_VERSION_NUMBER)",
          "1269:  RSA_get0_key(rsa, (const BIGNUM **)&rsa_n, (const BIGNUM **)&rsa_e, (const BIGNUM **)&rsa_d);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1265: #endif",
          "1267:  RSA_free(rsa);",
          "1270:  key_spec.nlen = BN_num_bytes(rsa_n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1277: #endif",
          "",
          "---------------"
        ],
        "src/jose.h||src/jose.h": [
          "File: src/jose.h -> src/jose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #ifndef MOD_AUTH_OPENIDC_JOSE_H_",
          "47: #define MOD_AUTH_OPENIDC_JOSE_H_",
          "52: #include <stdint.h>",
          "53: #include \"apr_pools.h\"",
          "54: #include \"apr_tables.h\"",
          "",
          "[Removed Lines]",
          "49: #define OPENSSL_API_COMPAT 0x10000000L",
          "50: #define OPENSSL_NO_DEPRECATED 1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/test-cmd.c||test/test-cmd.c": [
          "File: test/test-cmd.c -> test/test-cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #include <mod_auth_openidc.h>",
          "48: #include <openssl/pem.h>",
          "50: int usage(int argc, char **argv, const char *msg) {",
          "51:  fprintf(stderr, \"Usage: %s %s\\n\", argv[0],",
          "53:  return -1;",
          "54: }",
          "",
          "[Removed Lines]",
          "47: #include <openssl/rsa.h>",
          "52:    msg ? msg : \"[ sign | verify | decrypt | jwk2cert | key2jwk | enckey | hash_base64url | timestamp | uuid ] <options>\");",
          "",
          "[Added Lines]",
          "51:    msg ? msg : \"[ sign | verify | decrypt | key2jwk | enckey | hash_base64url | timestamp | uuid ] <options>\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:  return 0;",
          "249: }",
          "344: int key2jwk(int argc, char **argv, apr_pool_t *pool) {",
          "346:  if (argc <= 2)",
          "",
          "[Removed Lines]",
          "252: int mkcert(RSA *rsa, X509 **x509p, EVP_PKEY **pkeyp, int serial, int days) {",
          "253:  X509 *x;",
          "254:  EVP_PKEY *pk;",
          "255:  X509_NAME *name = NULL;",
          "257:  if ((pkeyp == NULL) || (*pkeyp == NULL)) {",
          "258:   if ((pk = EVP_PKEY_new()) == NULL)",
          "259:    return -1;",
          "260:  } else",
          "261:   pk = *pkeyp;",
          "263:  if ((x509p == NULL) || (*x509p == NULL)) {",
          "264:   if ((x = X509_new()) == NULL)",
          "265:    return -1;",
          "266:  } else",
          "267:   x = *x509p;",
          "269:  if (!EVP_PKEY_assign_RSA(pk, rsa))",
          "270:   return -1;",
          "272:  X509_set_version(x, 2);",
          "273:  ASN1_INTEGER_set(X509_get_serialNumber(x), serial);",
          "274:  X509_gmtime_adj(X509_get_notBefore(x), 0);",
          "275:  X509_gmtime_adj(X509_get_notAfter(x), (long) 60 * 60 * 24 * days);",
          "276:  X509_set_pubkey(x, pk);",
          "278:  name = X509_get_subject_name(x);",
          "280:  X509_NAME_add_entry_by_txt(name, \"C\",",
          "281:    MBSTRING_ASC, (const unsigned char *) \"NL\", -1, -1, 0);",
          "282:  X509_NAME_add_entry_by_txt(name, \"CN\",",
          "283:    MBSTRING_ASC, (const unsigned char *) \"Ping Identity\", -1, -1, 0);",
          "285:  X509_set_issuer_name(x, name);",
          "287:  if (!X509_sign(x, pk, EVP_md5()))",
          "288:   return -1;",
          "293:  return 0;",
          "294: }",
          "296: int jwk2cert(int argc, char **argv, apr_pool_t *pool) {",
          "298:  if (argc <= 2)",
          "299:   return usage(argc, argv, \"jwk2cert <jwk-file>\");",
          "301:  char *s_jwk = NULL;",
          "303:  if (file_read(pool, argv[2], &s_jwk) != 0)",
          "304:   return -1;",
          "306:  cjose_err cjose_err;",
          "308:  cjose_jwk_t *jwk = cjose_jwk_import(s_jwk, strlen(s_jwk), &cjose_err);",
          "309:  if (jwk == NULL) {",
          "310:   fprintf(stderr,",
          "311:     \"could not import JWK: %s [file: %s, function: %s, line: %ld]\\n\",",
          "312:     cjose_err.message, cjose_err.file, cjose_err.function,",
          "313:     cjose_err.line);",
          "314:   return -1;",
          "315:  }",
          "317:  if (cjose_jwk_get_kty(jwk, &cjose_err) != CJOSE_JWK_KTY_RSA) {",
          "318:   fprintf(stderr, \"wrong key type\");",
          "319:   return -1;",
          "320:  }",
          "322:  RSA *rsa = cjose_jwk_get_keydata(jwk, &cjose_err);",
          "324:  PEM_write_RSA_PUBKEY(stdout, rsa);",
          "326:  X509 *x509 = NULL;",
          "327:  EVP_PKEY *pkey = NULL;",
          "329:  if (mkcert(rsa, &x509, &pkey, 0, 365) != 0)",
          "330:   return -1;",
          "336:  PEM_write_X509(stdout, x509);",
          "338:  X509_free(x509);",
          "339:  EVP_PKEY_free(pkey);",
          "341:  return 0;",
          "342: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "600:  if (strcmp(argv[1], \"decrypt\") == 0)",
          "601:   return decrypt(argc, argv, pool);",
          "606:  if (strcmp(argv[1], \"key2jwk\") == 0)",
          "607:   return key2jwk(argc, argv, pool);",
          "",
          "[Removed Lines]",
          "603:  if (strcmp(argv[1], \"jwk2cert\") == 0)",
          "604:   return jwk2cert(argc, argv, pool);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}