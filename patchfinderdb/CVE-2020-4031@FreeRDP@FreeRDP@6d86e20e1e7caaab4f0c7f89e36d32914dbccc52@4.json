{
  "cve_id": "CVE-2020-4031",
  "cve_desc": "In FreeRDP before version 2.1.2, there is a use-after-free in gdi_SelectObject. All FreeRDP clients using compatibility mode with /relax-order-checks are affected. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
  "patch_info": {
    "commit_hash": "6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
    "files": [
      "server/shadow/shadow_server.c"
    ],
    "message": "Fixed double free",
    "before_after_code_files": [
      "server/shadow/shadow_server.c||server/shadow/shadow_server.c"
    ]
  },
  "patch_diff": {
    "server/shadow/shadow_server.c||server/shadow/shadow_server.c": [
      "File: server/shadow/shadow_server.c -> server/shadow/shadow_server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "586:   char** list = CommandLineParseCommaSeparatedValuesEx(NULL, server->ipcSocket, &count);",
      "587:   if (!list || (count <= 1))",
      "588:   {",
      "590:    if (server->ipcSocket == NULL)",
      "591:    {",
      "592:     if (!open_port(server, NULL))",
      "593:      return -1;",
      "594:    }",
      "595:    else",
      "596:     return -1;",
      "597:   }",
      "599:   for (x = 1; x < count; x++)",
      "",
      "[Removed Lines]",
      "589:    free(list);",
      "",
      "[Added Lines]",
      "592:     {",
      "593:      free(list);",
      "595:     }",
      "598:    {",
      "599:     free(list);",
      "601:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
      "candidate_info": {
        "commit_hash": "0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
        "files": [
          "libfreerdp/codec/include/bitmap.c"
        ],
        "message": "Fixed out of bound read in RLEDECOMPRESS\n\nCVE-2020-4033 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/codec/include/bitmap.c||libfreerdp/codec/include/bitmap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/include/bitmap.c||libfreerdp/codec/include/bitmap.c": [
          "File: libfreerdp/codec/include/bitmap.c -> libfreerdp/codec/include/bitmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     if (code == LITE_SET_FG_FG_RUN || code == MEGA_MEGA_SET_FG_RUN)",
          "203:     {",
          "204:      SRCREADPIXEL(fgPel, pbSrc);",
          "205:      SRCNEXTPIXEL(pbSrc);",
          "206:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:      if (pbSrc >= pbEnd)",
          "205:       return FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:    case MEGA_MEGA_DITHERED_RUN:",
          "232:     runLength = ExtractRunLength(code, pbSrc, &advance);",
          "233:     pbSrc = pbSrc + advance;",
          "234:     SRCREADPIXEL(pixelA, pbSrc);",
          "235:     SRCNEXTPIXEL(pbSrc);",
          "236:     SRCREADPIXEL(pixelB, pbSrc);",
          "237:     SRCNEXTPIXEL(pbSrc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:     if (pbSrc >= pbEnd)",
          "237:      return FALSE;",
          "240:     if (pbSrc >= pbEnd)",
          "241:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:    case MEGA_MEGA_COLOR_RUN:",
          "253:     runLength = ExtractRunLength(code, pbSrc, &advance);",
          "254:     pbSrc = pbSrc + advance;",
          "255:     SRCREADPIXEL(pixelA, pbSrc);",
          "256:     SRCNEXTPIXEL(pbSrc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:     if (pbSrc >= pbEnd)",
          "262:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:     runLength = ExtractRunLength(code, pbSrc, &advance);",
          "273:     pbSrc = pbSrc + advance;",
          "275:     if (code == LITE_SET_FG_FGBG_IMAGE || code == MEGA_MEGA_SET_FGBG_IMAGE)",
          "276:     {",
          "277:      SRCREADPIXEL(fgPel, pbSrc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:     if (pbSrc >= pbEnd)",
          "284:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "338:      return FALSE;",
          "340:     UNROLL(runLength, {",
          "341:      SRCREADPIXEL(temp, pbSrc);",
          "342:      SRCNEXTPIXEL(pbSrc);",
          "343:      DESTWRITEPIXEL(pbDest, temp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:      if (pbSrc >= pbEnd)",
          "352:       return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ce0ab909f1a3e45ff2a8c420860f9d2a43ecd65",
      "candidate_info": {
        "commit_hash": "5ce0ab909f1a3e45ff2a8c420860f9d2a43ecd65",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5ce0ab909f1a3e45ff2a8c420860f9d2a43ecd65",
        "files": [
          "libfreerdp/core/listener.c",
          "server/shadow/shadow_client.c",
          "server/shadow/shadow_server.c"
        ],
        "message": "shadow_server: allow specifying IP addresses to listen on (#6050)\n\n* shadow_server: allow specifying IP addresses to listen on\n\nThis allows using IPv6 as well as listening only on specific\ninterfaces. Additionally, it enables listening on local and TCP\nsockets simultaneously.\n\n* listener: log address with square brackets\n\nThis disambiguates IPv6 addresses.\n\n* shadow_server: check error on each socket binding\n\n* Refactored shadow /bind-address for 2.0 compiatibility.\n\n* Made /ipc-socket and /bind-address incompatible arguments.\n\n* Fixed shadow /bind-address handling and description\n\n* Allow multiple bind addresses for shadow server.\n\nCo-authored-by: akallabeth <akallabeth@posteo.net>",
        "before_after_code_files": [
          "libfreerdp/core/listener.c||libfreerdp/core/listener.c",
          "server/shadow/shadow_client.c||server/shadow/shadow_client.c",
          "server/shadow/shadow_server.c||server/shadow/shadow_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/shadow/shadow_server.c||server/shadow/shadow_server.c"
          ],
          "candidate": [
            "server/shadow/shadow_server.c||server/shadow/shadow_server.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/listener.c||libfreerdp/core/listener.c": [
          "File: libfreerdp/core/listener.c -> libfreerdp/core/listener.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:   WSAEventSelect(sockfd, listener->events[listener->num_sockfds],",
          "139:                  FD_READ | FD_ACCEPT | FD_CLOSE);",
          "140:   listener->num_sockfds++;",
          "142:  }",
          "144:  freeaddrinfo(res);",
          "",
          "[Removed Lines]",
          "141:   WLog_INFO(TAG, \"Listening on %s:%d\", addr, port);",
          "",
          "[Added Lines]",
          "141:   WLog_INFO(TAG, \"Listening on [%s]:%d\", addr, port);",
          "",
          "---------------"
        ],
        "server/shadow/shadow_client.c||server/shadow/shadow_client.c": [
          "File: server/shadow/shadow_client.c -> server/shadow/shadow_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: static BOOL shadow_client_context_new(freerdp_peer* peer, rdpShadowClient* client)",
          "130: {",
          "131:  rdpSettings* settings;",
          "132:  rdpShadowServer* server;",
          "133:  const wObject cb = { NULL, NULL, NULL, shadow_client_free_queued_message, NULL };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:  const char bind_address[] = \"bind-address,\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:  if (!(settings->RdpKeyFile = _strdup(settings->PrivateKeyFile)))",
          "158:   goto fail_rdpkey_file;",
          "161:  {",
          "162:   settings->LyncRdpMode = TRUE;",
          "163:   settings->CompressionEnabled = FALSE;",
          "",
          "[Removed Lines]",
          "160:  if (server->ipcSocket)",
          "",
          "[Added Lines]",
          "161:  if (server->ipcSocket && (strncmp(bind_address, server->ipcSocket,",
          "162:                                    strnlen(bind_address, sizeof(bind_address))) != 0))",
          "",
          "---------------"
        ],
        "server/shadow/shadow_server.c||server/shadow/shadow_server.c": [
          "File: server/shadow/shadow_server.c -> server/shadow/shadow_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #define TAG SERVER_TAG(\"shadow\")",
          "48: static const COMMAND_LINE_ARGUMENT_A shadow_args[] = {",
          "49:  { \"port\", COMMAND_LINE_VALUE_REQUIRED, \"<number>\", NULL, NULL, -1, NULL, \"Server port\" },",
          "50:  { \"ipc-socket\", COMMAND_LINE_VALUE_REQUIRED, \"<ipc-socket>\", NULL, NULL, -1, NULL,",
          "51:    \"Server IPC socket\" },",
          "52:  { \"monitors\", COMMAND_LINE_VALUE_OPTIONAL, \"<0,1,2...>\", NULL, NULL, -1, NULL,",
          "53:    \"Select or list monitors\" },",
          "54:  { \"rect\", COMMAND_LINE_VALUE_REQUIRED, \"<x,y,w,h>\", NULL, NULL, -1, NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: static const char bind_address[] = \"bind-address,\";",
          "54:  { \"bind-address\", COMMAND_LINE_VALUE_REQUIRED, \"<bind-address>[,<another address>, ...]\", NULL,",
          "55:    NULL, -1, NULL,",
          "56:    \"An address to bind to. Use '[<ipv6>]' for IPv6 addresses, e.g. '[::1]' for \"",
          "57:    \"localhost\" },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:   }",
          "221:   CommandLineSwitchCase(arg, \"ipc-socket\")",
          "222:   {",
          "223:    server->ipcSocket = _strdup(arg->Value);",
          "225:    if (!server->ipcSocket)",
          "226:     return -1;",
          "227:   }",
          "228:   CommandLineSwitchCase(arg, \"may-view\")",
          "229:   {",
          "230:    server->mayView = arg->Value ? TRUE : FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:    if (server->ipcSocket)",
          "231:     return -1;",
          "238:   CommandLineSwitchCase(arg, \"bind-address\")",
          "239:   {",
          "240:    int rc;",
          "241:    size_t len = strlen(arg->Value) + sizeof(bind_address);",
          "243:    if (server->ipcSocket)",
          "244:     return -1;",
          "245:    server->ipcSocket = calloc(len, sizeof(CHAR));",
          "247:    if (!server->ipcSocket)",
          "248:     return -1;",
          "250:    rc = _snprintf(server->ipcSocket, len, \"%s%s\", bind_address, arg->Value);",
          "251:    if ((rc < 0) || ((size_t)rc != len - 1))",
          "252:     return -1;",
          "253:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "480:  return 0;",
          "481: }",
          "483: int shadow_server_start(rdpShadowServer* server)",
          "484: {",
          "485:  BOOL status;",
          "486:  WSADATA wsaData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509: static BOOL open_port(rdpShadowServer* server, char* address)",
          "510: {",
          "511:  BOOL status;",
          "512:  char* modaddr = address;",
          "514:  if (modaddr)",
          "515:  {",
          "516:   if (modaddr[0] == '[')",
          "517:   {",
          "518:    char* end = strchr(address, ']');",
          "519:    if (!end)",
          "520:    {",
          "521:     WLog_ERR(TAG, \"Could not parse bind-address %s\", address);",
          "522:     return -1;",
          "523:    }",
          "525:    if (strlen(end) > 0)",
          "526:    {",
          "527:     WLog_ERR(TAG, \"Excess data after IPv6 address: '%s'\", end);",
          "528:     return -1;",
          "529:    }",
          "530:    modaddr++;",
          "531:   }",
          "532:  }",
          "533:  status = server->listener->Open(server->listener, modaddr, (UINT16)server->port);",
          "535:  if (!status)",
          "536:  {",
          "537:   WLog_ERR(TAG,",
          "538:            \"Problem creating TCP listener. (Port already used or insufficient permissions?)\");",
          "539:  }",
          "541:  return status;",
          "542: }",
          "546:  BOOL ipc;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "510:   return -1;",
          "511:  }",
          "519:  {",
          "523:  }",
          "525:  if (!(server->thread = CreateThread(NULL, 0, shadow_server_thread, (void*)server, 0, NULL)))",
          "",
          "[Removed Lines]",
          "513:  if (!server->ipcSocket)",
          "514:   status = server->listener->Open(server->listener, NULL, (UINT16)server->port);",
          "515:  else",
          "516:   status = server->listener->OpenLocal(server->listener, server->ipcSocket);",
          "518:  if (!status)",
          "520:   WLog_ERR(TAG,",
          "521:            \"Problem creating listener. (Port already used or insufficient permissions?)\");",
          "522:   return -1;",
          "",
          "[Added Lines]",
          "581:  ipc = server->ipcSocket && (strncmp(bind_address, server->ipcSocket,",
          "582:                                      strnlen(bind_address, sizeof(bind_address))) != 0);",
          "583:  if (!ipc)",
          "584:  {",
          "585:   size_t x, count;",
          "586:   char** list = CommandLineParseCommaSeparatedValuesEx(NULL, server->ipcSocket, &count);",
          "587:   if (!list || (count <= 1))",
          "588:   {",
          "589:    free(list);",
          "590:    if (server->ipcSocket == NULL)",
          "591:    {",
          "592:     if (!open_port(server, NULL))",
          "593:      return -1;",
          "594:    }",
          "595:    else",
          "596:     return -1;",
          "597:   }",
          "599:   for (x = 1; x < count; x++)",
          "600:   {",
          "601:    BOOL success = open_port(server, list[x]);",
          "602:    if (!success)",
          "603:    {",
          "604:     free(list);",
          "605:     return -1;",
          "606:    }",
          "607:   }",
          "608:   free(list);",
          "609:  }",
          "610:  else",
          "612:   status = server->listener->OpenLocal(server->listener, server->ipcSocket);",
          "613:   if (!status)",
          "614:   {",
          "615:    WLog_ERR(TAG, \"Problem creating local socket listener. (Port already used or \"",
          "616:                  \"insufficient permissions?)\");",
          "617:    return -1;",
          "618:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}