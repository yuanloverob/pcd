{
  "cve_id": "CVE-2014-1831",
  "cve_desc": "Phusion Passenger before 4.0.37 allows local users to write to certain files and directories via a symlink attack on (1) control_process.pid or a (2) generation-* file.",
  "repo": "phusion/passenger",
  "patch_hash": "34b1087870c2bf85ebfd72c30b78577e10ab9744",
  "patch_info": {
    "commit_hash": "34b1087870c2bf85ebfd72c30b78577e10ab9744",
    "repo": "phusion/passenger",
    "commit_url": "https://github.com/phusion/passenger/commit/34b1087870c2",
    "files": [
      "NEWS",
      "ext/common/ServerInstanceDir.h",
      "ext/common/Utils.cpp",
      "ext/common/Utils.h"
    ],
    "message": "Fix low-urgency security vulnerability: writing files to arbitrary directory by hijacking temp directories.",
    "before_after_code_files": [
      "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
      "ext/common/Utils.cpp||ext/common/Utils.cpp",
      "ext/common/Utils.h||ext/common/Utils.h"
    ]
  },
  "patch_diff": {
    "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
      "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "215:   if (owner) {",
      "217:    case FT_NONEXISTANT:",
      "218:     createDirectory(path);",
      "219:     break;",
      "",
      "[Removed Lines]",
      "216:    switch (getFileType(path)) {",
      "",
      "[Added Lines]",
      "216:    switch (getFileTypeNoFollowSymlinks(path)) {",
      "",
      "---------------"
    ],
    "ext/common/Utils.cpp||ext/common/Utils.cpp": [
      "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "143:  }",
      "144: }",
      "146: void",
      "147: createFile(const string &filename, const StaticString &contents, mode_t permissions, uid_t owner,",
      "148:  gid_t group, bool overwrite)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "146: FileType",
      "147: getFileTypeNoFollowSymlinks(const StaticString &filename) {",
      "148:  struct stat buf;",
      "149:  int ret;",
      "151:  ret = lstat(filename.c_str(), &buf);",
      "152:  if (ret == 0) {",
      "153:   if (S_ISREG(buf.st_mode)) {",
      "154:    return FT_REGULAR;",
      "155:   } else if (S_ISDIR(buf.st_mode)) {",
      "156:    return FT_DIRECTORY;",
      "157:   } else if (S_ISLNK(buf.st_mode)) {",
      "158:    return FT_SYMLINK;",
      "159:   } else {",
      "160:    return FT_OTHER;",
      "161:   }",
      "162:  } else {",
      "163:   if (errno == ENOENT) {",
      "164:    return FT_NONEXISTANT;",
      "165:   } else {",
      "166:    int e = errno;",
      "167:    string message(\"Cannot lstat '\");",
      "168:    message.append(filename);",
      "169:    message.append(\"'\");",
      "170:    throw FileSystemException(message, e, filename);",
      "171:   }",
      "172:  }",
      "173: }",
      "",
      "---------------"
    ],
    "ext/common/Utils.h||ext/common/Utils.h": [
      "File: ext/common/Utils.h -> ext/common/Utils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:  FT_REGULAR,",
      "67:  FT_DIRECTORY,",
      "69:  FT_OTHER",
      "70: } FileType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69:  FT_SYMLINK,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "122: FileType getFileType(const StaticString &filename, CachedFileStat *cstat = 0,",
      "123:                      unsigned int throttleRate = 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129: FileType getFileTypeNoFollowSymlinks(const StaticString &filename);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94428057c602da3d6d34ef75c78091066ecac5c0",
      "candidate_info": {
        "commit_hash": "94428057c602da3d6d34ef75c78091066ecac5c0",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/94428057c602da3d6d34ef75c78091066ecac5c0",
        "files": [
          "NEWS",
          "ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp",
          "ext/common/Utils.h"
        ],
        "message": "Fix a symlink-related security vulnerability.\n\nThe fix in commit 34b10878 and contained a small attack time window in\nbetween two filesystem operations. This has been fixed.",
        "before_after_code_files": [
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp||ext/common/Utils.cpp",
          "ext/common/Utils.h||ext/common/Utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:  void initialize(const string &path, bool owner) {",
          "195:   TRACE_POINT();",
          "196:   this->path  = path;",
          "197:   this->owner = owner;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:   struct stat buf;",
          "197:   int ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:   if (owner) {",
          "218:     createDirectory(path);",
          "225:    }",
          "227:    throw RuntimeException(\"Server instance directory '\" + path +",
          "228:     \"' does not exist\");",
          "229:   }",
          "",
          "[Removed Lines]",
          "216:    switch (getFileTypeNoFollowSymlinks(path)) {",
          "217:    case FT_NONEXISTANT:",
          "219:     break;",
          "220:    case FT_DIRECTORY:",
          "221:     verifyDirectoryPermissions(path);",
          "222:     break;",
          "223:    default:",
          "224:     throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
          "226:   } else if (getFileType(path) != FT_DIRECTORY) {",
          "",
          "[Added Lines]",
          "219:   do {",
          "220:    ret = lstat(path.c_str(), &buf);",
          "221:   } while (ret == -1 && errno == EAGAIN);",
          "223:    if (ret == 0) {",
          "224:     if (S_ISDIR(buf.st_mode)) {",
          "225:      verifyDirectoryPermissions(path, buf);",
          "226:     } else {",
          "227:      throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
          "228:     }",
          "229:    } else if (errno == ENOENT) {",
          "231:    } else {",
          "232:     int e = errno;",
          "233:     throw FileSystemException(\"Cannot lstat '\" + path + \"'\",",
          "234:      e, path);",
          "236:   } else if (!S_ISDIR(buf.st_mode)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263:   TRACE_POINT();",
          "270:    throw RuntimeException(\"Tried to reuse existing server instance directory \" +",
          "271:     path + \", but it has wrong permissions\");",
          "272:   } else if (buf.st_uid != geteuid() || buf.st_gid != getegid()) {",
          "",
          "[Removed Lines]",
          "262:  void verifyDirectoryPermissions(const string &path) {",
          "264:   struct stat buf;",
          "266:   if (stat(path.c_str(), &buf) == -1) {",
          "267:    int e = errno;",
          "268:    throw FileSystemException(\"Cannot stat() \" + path, e, path);",
          "269:   } else if (buf.st_mode != (S_IFDIR | parseModeString(\"u=rwx,g=rx,o=rx\"))) {",
          "",
          "[Added Lines]",
          "272:  void verifyDirectoryPermissions(const string &path, struct stat &buf) {",
          "275:   if (buf.st_mode != (S_IFDIR | parseModeString(\"u=rwx,g=rx,o=rx\"))) {",
          "",
          "---------------"
        ],
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:  }",
          "144: }",
          "175: void",
          "176: createFile(const string &filename, const StaticString &contents, mode_t permissions, uid_t owner,",
          "177:  gid_t group, bool overwrite)",
          "",
          "[Removed Lines]",
          "146: FileType",
          "147: getFileTypeNoFollowSymlinks(const StaticString &filename) {",
          "148:  struct stat buf;",
          "149:  int ret;",
          "151:  ret = lstat(filename.c_str(), &buf);",
          "152:  if (ret == 0) {",
          "153:   if (S_ISREG(buf.st_mode)) {",
          "154:    return FT_REGULAR;",
          "155:   } else if (S_ISDIR(buf.st_mode)) {",
          "156:    return FT_DIRECTORY;",
          "157:   } else if (S_ISLNK(buf.st_mode)) {",
          "158:    return FT_SYMLINK;",
          "159:   } else {",
          "160:    return FT_OTHER;",
          "161:   }",
          "162:  } else {",
          "163:   if (errno == ENOENT) {",
          "164:    return FT_NONEXISTANT;",
          "165:   } else {",
          "166:    int e = errno;",
          "167:    string message(\"Cannot lstat '\");",
          "168:    message.append(filename);",
          "169:    message.append(\"'\");",
          "170:    throw FileSystemException(message, e, filename);",
          "171:   }",
          "172:  }",
          "173: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/common/Utils.h||ext/common/Utils.h": [
          "File: ext/common/Utils.h -> ext/common/Utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  FT_REGULAR,",
          "67:  FT_DIRECTORY,",
          "71:  FT_OTHER",
          "72: } FileType;",
          "",
          "[Removed Lines]",
          "69:  FT_SYMLINK,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: FileType getFileType(const StaticString &filename, CachedFileStat *cstat = 0,",
          "125:                      unsigned int throttleRate = 0);",
          "",
          "[Removed Lines]",
          "129: FileType getFileTypeNoFollowSymlinks(const StaticString &filename);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8fcbc309027a9b8e5dc96ed9b8bdc1a3e74bef2",
      "candidate_info": {
        "commit_hash": "d8fcbc309027a9b8e5dc96ed9b8bdc1a3e74bef2",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/d8fcbc309027a9b8e5dc96ed9b8bdc1a3e74bef2",
        "files": [
          "ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp",
          "test/cxx/UtilsTest.cpp"
        ],
        "message": "Ensure that the 'backends' directory has the sticky bit set.",
        "before_after_code_files": [
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp||ext/common/Utils.cpp",
          "test/cxx/UtilsTest.cpp||test/cxx/UtilsTest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:    string structureVersionFile = path + \"/structure_version.txt\";",
          "",
          "[Removed Lines]",
          "95:    makeDirTree(path, \"u=rwxs,g=x,o=x\");",
          "",
          "[Added Lines]",
          "95:    makeDirTree(path, \"u=rwx,g=x,o=x\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:    if (runningAsRoot) {",
          "111:      webServerWorkerUid, webServerWorkerGid);",
          "112:    } else {",
          "114:    }",
          "",
          "[Removed Lines]",
          "110:     makeDirTree(path + \"/buffered_uploads\", \"u=rwxs,g=,o=\",",
          "113:     makeDirTree(path + \"/buffered_uploads\", \"u=rwxs,g=,o=\");",
          "",
          "[Added Lines]",
          "110:     makeDirTree(path + \"/buffered_uploads\", \"u=rwx,g=,o=\",",
          "113:     makeDirTree(path + \"/buffered_uploads\", \"u=rwx,g=,o=\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:     } else {",
          "",
          "[Removed Lines]",
          "124:      makeDirTree(path + \"/backends\", \"u=rwxs,g=wx,o=wx\");",
          "",
          "[Added Lines]",
          "124:      makeDirTree(path + \"/backends\", \"u=rwx,g=wx,o=wx,+t\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:     }",
          "136:    } else {",
          "141:    }",
          "",
          "[Removed Lines]",
          "134:      makeDirTree(path + \"/backends\", \"u=rwxs,g=x,o=x\", defaultUid, defaultGid);",
          "140:     makeDirTree(path + \"/backends\", \"u=rwxs,g=,o=\");",
          "",
          "[Added Lines]",
          "134:      makeDirTree(path + \"/backends\", \"u=rwx,g=x,o=x\", defaultUid, defaultGid);",
          "140:     makeDirTree(path + \"/backends\", \"u=rwx,g=,o=\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "152:     } else {",
          "157:       defaultUid, defaultGid);",
          "158:     }",
          "159:    } else {",
          "161:    }",
          "163:    owner = true;",
          "",
          "[Removed Lines]",
          "151:      makeDirTree(path + \"/spawn-server\", \"u=rwxs,g=,o=\");",
          "156:      makeDirTree(path + \"/spawn-server\", \"u=rwxs,g=,o=\",",
          "160:     makeDirTree(path + \"/spawn-server\", \"u=rwxs,g=,o=\");",
          "",
          "[Added Lines]",
          "151:      makeDirTree(path + \"/spawn-server\", \"u=rwx,g=,o=\");",
          "156:      makeDirTree(path + \"/spawn-server\", \"u=rwx,g=,o=\",",
          "160:     makeDirTree(path + \"/spawn-server\", \"u=rwx,g=,o=\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "218:  }",
          "220:  bool isDirectory(const string &dir, struct dirent *entry) const {",
          "",
          "[Removed Lines]",
          "217:   makeDirTree(path, \"u=rwxs,g=rx,o=rx\");",
          "",
          "[Added Lines]",
          "217:   makeDirTree(path, \"u=rwx,g=rx,o=rx\");",
          "",
          "---------------"
        ],
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:   if (clause.empty()) {",
          "414:    continue;",
          "416:    throw InvalidModeStringException(\"Invalid mode clause specification '\" + clause + \"'\");",
          "417:   }",
          "",
          "[Removed Lines]",
          "415:   } else if (clause.size() < 2 || clause[1] != '=') {",
          "",
          "[Added Lines]",
          "415:   } else if (clause.size() < 2 || (clause[0] != '+' && clause[1] != '=')) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483:     }",
          "484:    }",
          "485:    break;",
          "486:   default:",
          "487:    throw InvalidModeStringException(\"Invalid owner '\" + string(1, clause[0]) +",
          "488:     \"' in mode clause specification '\" + clause + \"'\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486:   case '+':",
          "487:    for (string::size_type i = 1; i < clause.size(); i++) {",
          "488:     switch (clause[i]) {",
          "489:     case 't':",
          "490:      modeBits |= S_ISVTX;",
          "491:      break;",
          "492:     default:",
          "493:      throw InvalidModeStringException(\"Invalid permission '\" +",
          "494:       string(1, clause[i]) +",
          "495:       \"' in mode clause specification '\" +",
          "496:       clause + \"'\");",
          "497:     }",
          "498:    }",
          "499:    break;",
          "",
          "---------------"
        ],
        "test/cxx/UtilsTest.cpp||test/cxx/UtilsTest.cpp": [
          "File: test/cxx/UtilsTest.cpp -> test/cxx/UtilsTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:    (mode_t) (S_IRUSR | S_IXUSR | S_IWGRP | S_IXOTH));",
          "334:   ensure_equals(\"(7)\", parseModeString(\"u=rs,g=ws\"),",
          "335:    (mode_t) (S_IRUSR | S_ISUID | S_IWGRP | S_ISGID));",
          "336:  }",
          "338:  TEST_METHOD(38) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:   ensure_equals(\"(7)\", parseModeString(\"u=rwx,g=rwx,+t\"),",
          "337:    (mode_t) (S_IRWXU | S_IRWXG | S_ISVTX));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5483b3292cc2af1c83033eaaadec20dba4dcfd9b",
      "candidate_info": {
        "commit_hash": "5483b3292cc2af1c83033eaaadec20dba4dcfd9b",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/5483b3292cc2af1c83033eaaadec20dba4dcfd9b",
        "files": [
          "NEWS",
          "ext/common/ServerInstanceDir.h",
          "test/cxx/ServerInstanceDirTest.cpp"
        ],
        "message": "If the server instance directory already exists, it is now removed first in order get correct directory permissions. If the directory still exists after removal, Phusion Passenger aborts to avoid writing to a directory with unexpected permissions. Fixes issue #910.",
        "before_after_code_files": [
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "test/cxx/ServerInstanceDirTest.cpp||test/cxx/ServerInstanceDirTest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <oxt/backtrace.hpp>",
          "32: #include <sys/types.h>",
          "33: #include <dirent.h>",
          "34: #include <unistd.h>",
          "35: #include <pwd.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <sys/stat.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:  }",
          "220:  bool isDirectory(const string &dir, struct dirent *entry) const {",
          "",
          "[Removed Lines]",
          "217:   makeDirTree(path, \"u=rwx,g=rx,o=rx\");",
          "",
          "[Added Lines]",
          "218:   if (owner) {",
          "219:    switch (getFileType(path)) {",
          "220:    case FT_NONEXISTANT:",
          "221:     createDirectory(path);",
          "222:     break;",
          "223:    case FT_DIRECTORY:",
          "224:     removeDirTree(path);",
          "225:     createDirectory(path);",
          "226:     break;",
          "227:    default:",
          "228:     throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
          "229:    }",
          "230:   } else if (getFileType(path) != FT_DIRECTORY) {",
          "231:    throw RuntimeException(\"Server instance directory '\" + path +",
          "232:     \"' does not exist\");",
          "233:   }",
          "234:  }",
          "236:  void createDirectory(const string &path) const {",
          "240:   if (mkdir(path.c_str(), parseModeString(\"u=rwx,g=rx,o=rx\")) == -1) {",
          "241:    int e = errno;",
          "242:    throw FileSystemException(\"Cannot create server instance directory '\" +",
          "243:     path + \"'\", e, path);",
          "244:   }",
          "",
          "---------------"
        ],
        "test/cxx/ServerInstanceDirTest.cpp||test/cxx/ServerInstanceDirTest.cpp": [
          "File: test/cxx/ServerInstanceDirTest.cpp -> test/cxx/ServerInstanceDirTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  }",
          "60:  TEST_METHOD(5) {",
          "63:   string path, path2;",
          "64:   {",
          "65:    ServerInstanceDir dir(parentDir + \"/passenger-test.1234\", false);",
          "66:    ServerInstanceDir dir2(parentDir + \"/passenger-test.5678\", false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   makeDirTree(parentDir + \"/passenger-test.1234\");",
          "65:   makeDirTree(parentDir + \"/passenger-test.5678\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44571f3772263c7977ee1f25da50fc82947f9d71",
      "candidate_info": {
        "commit_hash": "44571f3772263c7977ee1f25da50fc82947f9d71",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/44571f3772263c7977ee1f25da50fc82947f9d71",
        "files": [
          "Rakefile",
          "ext/common/ServerInstanceDir.h",
          "ext/common/StaticString.h",
          "ext/common/Utils.cpp",
          "ext/common/Utils.h",
          "test/ServerInstanceDirTest.cpp",
          "test/UtilsTest.cpp",
          "test/support/Support.cpp",
          "test/support/Support.h"
        ],
        "message": "Begin refactoring the Passenger temp directory, now called the server instance directory.",
        "before_after_code_files": [
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "ext/common/StaticString.h||ext/common/StaticString.h",
          "ext/common/Utils.cpp||ext/common/Utils.cpp",
          "ext/common/Utils.h||ext/common/Utils.h",
          "test/ServerInstanceDirTest.cpp||test/ServerInstanceDirTest.cpp",
          "test/UtilsTest.cpp||test/UtilsTest.cpp",
          "test/support/Support.cpp||test/support/Support.cpp",
          "test/support/Support.h||test/support/Support.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #ifndef _PASSENGER_SERVER_INSTANCE_DIR_H_",
          "26: #define _PASSENGER_SERVER_INSTANCE_DIR_H_",
          "28: #include <boost/noncopyable.hpp>",
          "29: #include <boost/shared_ptr.hpp>",
          "31: #include <sys/types.h>",
          "32: #include <dirent.h>",
          "33: #include <unistd.h>",
          "34: #include <cstdlib>",
          "35: #include <cstring>",
          "36: #include <string>",
          "38: #include \"Exceptions.h\"",
          "39: #include \"Utils.h\"",
          "41: namespace Passenger {",
          "43: using namespace std;",
          "44: using namespace boost;",
          "46: class ServerInstanceDir: public noncopyable {",
          "47: public:",
          "48:  class Generation: public noncopyable {",
          "49:  private:",
          "50:   friend class ServerInstanceDir;",
          "52:   string path;",
          "53:   unsigned int number;",
          "54:   bool owner;",
          "56:   Generation(const string &serverInstanceDir, unsigned int number) {",
          "57:    path = serverInstanceDir + \"/generation-\" + toString(number);",
          "58:    this->number = number;",
          "59:    owner = false;",
          "60:   }",
          "62:   void create(bool userSwitching, const string &defaultUser, uid_t workerUid, gid_t workerGid) {",
          "63:    uid_t defaultUid;",
          "64:    gid_t defaultGid;",
          "66:    determineLowestUserAndGroup(defaultUser, defaultUid, defaultGid);",
          "72:    makeDirTree(path, \"u=wxs,g=x,o=x\");",
          "82:    if (geteuid() == 0) {",
          "83:     makeDirTree(path + \"/webserver_private\", \"u=wxs,g=,o=\", workerUid, workerGid);",
          "84:    } else {",
          "85:     makeDirTree(path + \"/webserver_private\", \"u=wxs,g=,o=\");",
          "86:    }",
          "93:    if (geteuid() == 0) {",
          "98:     if (userSwitching) {",
          "99:      makeDirTree(path + \"/master\", \"u=xs,g=,o=\", workerUid, workerGid);",
          "100:     } else {",
          "101:      makeDirTree(path + \"/master\", \"u=xs,g=,o=\", defaultUid, defaultGid);",
          "102:     }",
          "103:    } else {",
          "104:     makeDirTree(path + \"/master\", \"u=wxs,g=,o=\");",
          "105:    }",
          "107:    if (geteuid() == 0) {",
          "108:     if (userSwitching) {",
          "115:      makeDirTree(path + \"/backends\", \"u=wxs,g=wx,o=wx\");",
          "116:     } else {",
          "125:      makeDirTree(path + \"/backends\", \"u=wxs,g=,o=\", defaultUid, defaultGid);",
          "126:     }",
          "127:    } else {",
          "137:     makeDirTree(path + \"/backends\", \"u=wxs,g=,o=\");",
          "138:    }",
          "140:    owner = true;",
          "141:   }",
          "143:  public:",
          "144:   ~Generation() {",
          "145:    if (owner) {",
          "146:     removeDirTree(path);",
          "147:    }",
          "148:   }",
          "150:   unsigned int getNumber() const {",
          "151:    return number;",
          "152:   }",
          "154:   string getPath() const {",
          "155:    return path;",
          "156:   }",
          "157:  };",
          "159:  typedef shared_ptr<Generation> GenerationPtr;",
          "161: private:",
          "162:  string path;",
          "163:  bool owner;",
          "165:  void initialize(const string &path, bool create) {",
          "166:   this->path = path;",
          "167:   owner = create;",
          "168:   if (!create) {",
          "169:    return;",
          "170:   }",
          "191:   makeDirTree(path, \"u=rwxs,g=rx,o=rx\");",
          "198:   string structureVersionFile = path + \"/structure_version.txt\";",
          "200:    S_IRUSR | S_IRGRP | S_IROTH);",
          "201:  }",
          "203: public:",
          "204:  ServerInstanceDir(pid_t webServerPid, const string &parentDir = \"\") {",
          "205:   string theParentDir;",
          "207:   if (parentDir.empty()) {",
          "208:    theParentDir = getSystemTempDir();",
          "209:   } else {",
          "210:    theParentDir = parentDir;",
          "211:   }",
          "212:   initialize(theParentDir + \"/passenger.\" + toString<unsigned long long>(webServerPid),",
          "213:    true);",
          "214:  }",
          "216:  ServerInstanceDir(const string &path) {",
          "217:   initialize(path, false);",
          "218:  }",
          "220:  ~ServerInstanceDir() {",
          "221:   if (owner && getNewestGeneration() == NULL) {",
          "222:    removeDirTree(path);",
          "223:   }",
          "224:  }",
          "226:  string getPath() const {",
          "227:   return path;",
          "228:  }",
          "230:  GenerationPtr newGeneration(bool userSwitching, const string &defaultUser, uid_t workerUid, gid_t workerGid) {",
          "231:   GenerationPtr newestGeneration = getNewestGeneration();",
          "232:   unsigned int newNumber;",
          "233:   if (newestGeneration != NULL) {",
          "234:    newNumber = newestGeneration->getNumber() + 1;",
          "235:   } else {",
          "236:    newNumber = 0;",
          "237:   }",
          "239:   GenerationPtr generation(new Generation(path, newNumber));",
          "240:   generation->create(userSwitching, defaultUser, workerUid, workerGid);",
          "241:   return generation;",
          "242:  }",
          "244:  GenerationPtr getGeneration(unsigned int number) const {",
          "245:   return ptr(new Generation(path, number));",
          "246:  }",
          "248:  GenerationPtr getNewestGeneration() const {",
          "249:   DIR *dir = opendir(path.c_str());",
          "250:   struct dirent *entry;",
          "251:   int result = -1;",
          "253:   if (dir == NULL) {",
          "254:    int e = errno;",
          "255:    throw FileSystemException(\"Cannot open directory \" + path,",
          "256:     e, path);",
          "257:   }",
          "258:   while ((entry = readdir(dir)) != NULL) {",
          "259:    if (entry->d_type == DT_DIR",
          "260:     && strncmp(entry->d_name, \"generation-\", sizeof(\"generation-\") - 1) == 0) {",
          "261:     const char *numberString = entry->d_name + sizeof(\"generation-\") - 1;",
          "262:     int number = atoi(numberString);",
          "263:     if (number >= 0 && number > result) {",
          "264:      result = number;",
          "265:     }",
          "266:    }",
          "267:   }",
          "268:   closedir(dir);",
          "270:   if (result == -1) {",
          "271:    return GenerationPtr();",
          "272:   } else {",
          "273:    return getGeneration(result);",
          "274:   }",
          "275:  }",
          "276: };",
          "278: } // namespace Passenger",
          "",
          "---------------"
        ],
        "ext/common/StaticString.h||ext/common/StaticString.h": [
          "File: ext/common/StaticString.h -> ext/common/StaticString.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   return content;",
          "95:  }",
          "97:  bool equals(const StaticString &other) const {",
          "98:   return len == other.len && memcmp(content, other.content, len) == 0;",
          "99:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:  string toString() const {",
          "98:   return string(content, len);",
          "99:  }",
          "",
          "---------------"
        ],
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: }",
          "106: FileType",
          "108:  struct stat buf;",
          "109:  int ret;",
          "111:  if (cstat != NULL) {",
          "113:  } else {",
          "115:  }",
          "116:  if (ret == 0) {",
          "117:   if (S_ISREG(buf.st_mode)) {",
          "",
          "[Removed Lines]",
          "107: getFileType(const char *filename, CachedFileStat *cstat, unsigned int throttleRate) {",
          "112:   ret = cstat->stat(filename, &buf, throttleRate);",
          "114:   ret = stat(filename, &buf);",
          "",
          "[Added Lines]",
          "107: getFileType(const StaticString &filename, CachedFileStat *cstat, unsigned int throttleRate) {",
          "112:   ret = cstat->stat(filename.toString(), &buf, throttleRate);",
          "114:   ret = stat(filename.c_str(), &buf);",
          "",
          "---------------"
        ],
        "ext/common/Utils.h||ext/common/Utils.h": [
          "File: ext/common/Utils.h -> ext/common/Utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:                      unsigned int throttleRate = 0);",
          "",
          "[Removed Lines]",
          "185: FileType getFileType(const char *filename, CachedFileStat *cstat = 0,",
          "",
          "[Added Lines]",
          "185: FileType getFileType(const StaticString &filename, CachedFileStat *cstat = 0,",
          "",
          "---------------"
        ],
        "test/ServerInstanceDirTest.cpp||test/ServerInstanceDirTest.cpp": [
          "File: test/ServerInstanceDirTest.cpp -> test/ServerInstanceDirTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"tut.h\"",
          "2: #include \"support/Support.h\"",
          "3: #include \"ServerInstanceDir.h\"",
          "5: using namespace Passenger;",
          "6: using namespace std;",
          "7: using namespace Test;",
          "9: namespace tut {",
          "10:  struct ServerInstanceDirTest {",
          "11:   string parentDir;",
          "12:   TempDir tmpDir;",
          "14:   ServerInstanceDirTest(): tmpDir(\"server_instance_dir_test.tmp\") {",
          "15:    parentDir = \"server_instance_dir_test.tmp\";",
          "16:   }",
          "18:   void createGenerationDir(const string &instanceDir, unsigned int number) {",
          "19:    string command = \"mkdir \" + instanceDir + \"/generation-\" + toString(number);",
          "20:    system(command.c_str());",
          "21:   }",
          "22:  };",
          "24:  DEFINE_TEST_GROUP(ServerInstanceDirTest);",
          "26:  TEST_METHOD(1) {",
          "30:   ServerInstanceDir dir(1234, parentDir);",
          "31:   vector<string> contents = listDir(parentDir);",
          "32:   ensure_equals(contents.size(), 1u);",
          "33:   ensure_equals(contents[0], \"passenger.1234\");",
          "34:  }",
          "36:  TEST_METHOD(2) {",
          "40:   ServerInstanceDir dir(1234, parentDir);",
          "41:   ServerInstanceDir dir2(dir.getPath());",
          "42:   ServerInstanceDir dir3(parentDir + \"/foo\");",
          "43:   ensure_equals(dir2.getPath(), dir.getPath());",
          "44:   ensure_equals(dir3.getPath(), parentDir + \"/foo\");",
          "45:   ensure_equals(getFileType(dir3.getPath()), FT_NONEXISTANT);",
          "46:  }",
          "48:  TEST_METHOD(3) {",
          "52:   {",
          "53:    ServerInstanceDir dir(1234, parentDir);",
          "54:   }",
          "55:   ensure_equals(listDir(parentDir).size(), 0u);",
          "57:   {",
          "58:    ServerInstanceDir dir(1234, parentDir);",
          "59:    createGenerationDir(dir.getPath(), 1);",
          "60:   }",
          "61:   ensure_equals(listDir(parentDir).size(), 1u);",
          "62:  }",
          "64:  TEST_METHOD(4) {",
          "67:   ServerInstanceDir dir(1234, parentDir);",
          "68:   {",
          "69:    ServerInstanceDir dir2(dir.getPath());",
          "70:   }",
          "71:   ensure_equals(getFileType(dir.getPath()), FT_DIRECTORY);",
          "72:  }",
          "74:  TEST_METHOD(5) {",
          "77:   ServerInstanceDir dir(1234, parentDir);",
          "78:   unsigned int ncontents = listDir(dir.getPath()).size();",
          "79:   ServerInstanceDir::GenerationPtr generation = dir.newGeneration(true, \"nobody\", 0, 0);",
          "81:   ensure_equals(generation->getNumber(), 0u);",
          "82:   ensure_equals(getFileType(generation->getPath()), FT_DIRECTORY);",
          "83:   ensure_equals(listDir(dir.getPath()).size(), ncontents + 1);",
          "84:  }",
          "86:  TEST_METHOD(6) {",
          "89:   ServerInstanceDir dir(1234, parentDir);",
          "90:   ServerInstanceDir::GenerationPtr generation = dir.newGeneration(true, \"nobody\", 0, 0);",
          "91:   string path = generation->getPath();",
          "92:   generation.reset();",
          "93:   ensure_equals(getFileType(path), FT_NONEXISTANT);",
          "94:  }",
          "96:  TEST_METHOD(7) {",
          "98:   ServerInstanceDir dir(1234, parentDir);",
          "99:   ServerInstanceDir::GenerationPtr generation0 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "100:   ServerInstanceDir::GenerationPtr generation1 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "101:   ServerInstanceDir::GenerationPtr generation2 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "102:   ServerInstanceDir::GenerationPtr generation3 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "104:   generation2.reset();",
          "105:   ensure_equals(dir.getNewestGeneration()->getNumber(), 3u);",
          "106:   generation3.reset();",
          "107:   ensure_equals(dir.getNewestGeneration()->getNumber(), 1u);",
          "108:  }",
          "110:  TEST_METHOD(8) {",
          "112:   ServerInstanceDir dir(1234, parentDir);",
          "113:   ensure(dir.getNewestGeneration() == NULL);",
          "114:  }",
          "116:  TEST_METHOD(9) {",
          "119:   ServerInstanceDir dir(1234, parentDir);",
          "120:   ServerInstanceDir::GenerationPtr generation = dir.newGeneration(true, \"nobody\", 0, 0);",
          "121:   ServerInstanceDir::GenerationPtr newestGeneration = dir.getNewestGeneration();",
          "122:   newestGeneration.reset();",
          "123:   ensure_equals(getFileType(generation->getPath()), FT_DIRECTORY);",
          "124:  }",
          "126:  TEST_METHOD(10) {",
          "128:   ServerInstanceDir dir(1234, parentDir);",
          "129:   ServerInstanceDir::GenerationPtr generation0 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "130:   ServerInstanceDir::GenerationPtr generation1 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "131:   ServerInstanceDir::GenerationPtr generation2 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "132:   ServerInstanceDir::GenerationPtr generation3 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "134:   ensure_equals(dir.getGeneration(0)->getNumber(), 0u);",
          "135:   ensure_equals(dir.getGeneration(3)->getNumber(), 3u);",
          "136:  }",
          "138:  TEST_METHOD(11) {",
          "141:   ServerInstanceDir dir(1234, parentDir);",
          "142:   ServerInstanceDir::GenerationPtr generation0 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "143:   ServerInstanceDir::GenerationPtr generation1 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "145:   dir.getGeneration(0).reset();",
          "146:   dir.getGeneration(1).reset();",
          "147:   ensure_equals(getFileType(generation0->getPath()), FT_DIRECTORY);",
          "148:   ensure_equals(getFileType(generation1->getPath()), FT_DIRECTORY);",
          "149:  }",
          "150: }",
          "",
          "---------------"
        ],
        "test/UtilsTest.cpp||test/UtilsTest.cpp": [
          "File: test/UtilsTest.cpp -> test/UtilsTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <sys/types.h>",
          "5: #include <sys/stat.h>",
          "6: #include <stdio.h>",
          "8: #include <unistd.h>",
          "9: #include <limits.h>",
          "10: #include <string.h>",
          "",
          "[Removed Lines]",
          "7: #include <dirent.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   }",
          "34:  };",
          "51:  DEFINE_TEST_GROUP(UtilsTest);",
          "",
          "[Removed Lines]",
          "36:  static vector<string>",
          "37:  listDir(const char *path) {",
          "38:   vector<string> result;",
          "39:   DIR *d = opendir(path);",
          "40:   struct dirent *ent;",
          "42:   while ((ent = readdir(d)) != NULL) {",
          "43:    if (strcmp(ent->d_name, \".\") == 0 || strcmp(ent->d_name, \"..\") == 0) {",
          "44:     continue;",
          "45:    }",
          "46:    result.push_back(ent->d_name);",
          "47:   }",
          "48:   return result;",
          "49:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/support/Support.cpp||test/support/Support.cpp": [
          "File: test/support/Support.cpp -> test/support/Support.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <unistd.h>",
          "2: #include \"Support.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <dirent.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:  }",
          "82: }",
          "84: } // namespace Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: vector<string>",
          "86: listDir(const string &path) {",
          "87:  vector<string> result;",
          "88:  DIR *d = opendir(path.c_str());",
          "89:  struct dirent *ent;",
          "91:  if (d == NULL) {",
          "92:   int e = errno;",
          "93:   throw FileSystemException(\"Cannot open directory \" + path,",
          "94:    e, path);",
          "95:  }",
          "96:  while ((ent = readdir(d)) != NULL) {",
          "97:   if (strcmp(ent->d_name, \".\") == 0 || strcmp(ent->d_name, \"..\") == 0) {",
          "98:    continue;",
          "99:   }",
          "100:   result.push_back(ent->d_name);",
          "101:  }",
          "102:  return result;",
          "103: }",
          "",
          "---------------"
        ],
        "test/support/Support.h||test/support/Support.h": [
          "File: test/support/Support.h -> test/support/Support.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <sys/types.h>",
          "6: #include <iostream>",
          "7: #include <string>",
          "8: #include <exception>",
          "9: #include <cstdio>",
          "10: #include <cerrno>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include <vector>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: void touchFile(const char *filename, time_t timestamp = (time_t) - 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: vector<string> listDir(const string &path);",
          "",
          "---------------"
        ]
      }
    }
  ]
}